
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

00000000 <_vector_table>:

#include <crc16.h>

u16_t crc16(const u8_t *src, size_t len, u16_t polynomial,
	       u16_t initial_value)
{
       0:	20003580 	.word	0x20003580
	u16_t crc = initial_value;
	size_t i, b;

	/* src length + crc width of zeros appended */
	for (i = 0; i < len + sizeof(crc); i++) {
       4:	000123cd 	.word	0x000123cd

			crc = (crc << 1);

			/* choose input bytes or implicit trailing zeros */
			if (i < len) {
				crc |= !!(src[i] & (0x80 >> b));
       8:	0001241d 	.word	0x0001241d
{
	u16_t crc = initial_value;
	size_t i, b;

	/* src length + crc width of zeros appended */
	for (i = 0; i < len + sizeof(crc); i++) {
       c:	00012259 	.word	0x00012259
      10:	00012259 	.word	0x00012259

		for (b = 0; b < 8; b++) {
			u16_t divide = crc & 0x8000;
      14:	00012259 	.word	0x00012259

			crc = (crc << 1);
      18:	00012259 	.word	0x00012259

	/* src length + crc width of zeros appended */
	for (i = 0; i < len + sizeof(crc); i++) {

		for (b = 0; b < 8; b++) {
			u16_t divide = crc & 0x8000;
      1c:	00012259 	.word	0x00012259

			crc = (crc << 1);

			/* choose input bytes or implicit trailing zeros */
			if (i < len) {
      20:	00012259 	.word	0x00012259
				crc |= !!(src[i] & (0x80 >> b));
      24:	00012259 	.word	0x00012259
      28:	00012259 	.word	0x00012259
      2c:	00011e4d 	.word	0x00011e4d
      30:	00012259 	.word	0x00012259
			}

			if (divide) {
      34:	00012259 	.word	0x00012259
	size_t i, b;

	/* src length + crc width of zeros appended */
	for (i = 0; i < len + sizeof(crc); i++) {

		for (b = 0; b < 8; b++) {
      38:	00011e09 	.word	0x00011e09
      3c:	00012259 	.word	0x00012259

00000040 <_irq_vector_table>:
{
	u16_t crc = initial_value;
	size_t i, b;

	/* src length + crc width of zeros appended */
	for (i = 0; i < len + sizeof(crc); i++) {
      40:	00012391 00010d3b 00012391 00012391     .#..;....#...#..
				case '+':
					fplus = true;
					break;

				case ' ':
					fspace = true;
      50:	00012391 00012391 00012391 00012391     .#...#...#...#..
		} else {
			fminus = fplus = fspace = falt = false;
			pad = ' ';		/* Default pad character    */
			precision = -1;	/* No precision specified   */

			while (strchr("-+ #0", (c = *format++)) != NULL) {
      60:	00012391 00012391 00012391 00012391     .#...#...#...#..
				switch (c) {
      70:	00012391 00012391 00012391 00012391     .#...#...#...#..
				case '-':
					fminus = true;
      80:	00012391 00012391 00012391 00012391     .#...#...#...#..
				}
			}

			if (c == '*') {
				/* Is the width a parameter? */
				width = (int32_t) va_arg(vargs, int32_t);
      90:	00012391 00012391 00012391 00012391     .#...#...#...#..
				if (width < 0) {
					fminus = true;
      a0:	00012391 00012391 00012391 00012391     .#...#...#...#..
					width = -width;
				}
				c = *format++;
      b0:	00012391 00012391 00012391 00012391     .#...#...#...#..
	register int   i;

	i = 0;
	p = *sptr;
	p--;
	while (isdigit(((int) *p)))
      c0:	00012391 00012391 00012391 00012391     .#...#...#...#..
		i = 10 * i + *p++ - '0';
      d0:	00012391 00012391 00012391              .#...#...#..

000000dc <_sw_isr_table>:
				c = *format++;
			} else if (!isdigit(c))
				width = 0;
			else {
				width = _atoi(&format);	/* Find width */
				c = *format++;
      dc:	00000000 00000ea1 00000000 000121c9     .............!..
			 */
			if ((unsigned) width > MAXFLD) {
				width = MAXFLD;
			}

			if (c == '.') {
      ec:	00000000 000121c9 00000000 000121c9     .....!.......!..

	i = 0;
	p = *sptr;
	p--;
	while (isdigit(((int) *p)))
		i = 10 * i + *p++ - '0';
      fc:	00000000 000121c9 00000000 000121c9     .....!.......!..
	register int   i;

	i = 0;
	p = *sptr;
	p--;
	while (isdigit(((int) *p)))
     10c:	20000730 00000c11 00000000 000121c9     0.. .........!..
		i = 10 * i + *p++ - '0';
     11c:	00000000 000121c9 00000000 000121c9     .....!.......!..
				} else
					precision = _atoi(&format);

				if (precision > MAXFLD)
					precision = -1;
				c = *format++;
     12c:	00000000 000121c9 00000000 00010cf9     .....!..........
			 * No further special processing is done for them.
			 */

			if (strchr("hlLz", c) != NULL) {
				i = c;
				c = *format++;
     13c:	00000000 000121c9 00000000 00010d37     .....!......7...
				 */
			}

			need_justifying = false;
			prefix = 0;
			switch (c) {
     14c:	00000000 000121c9 00000000 000121c9     .....!.......!..
     15c:	00000000 000121c9 00000000 000009ed     .....!..........
     16c:	00000000 000121c9 00000000 000121c9     .....!.......!..
     17c:	00000000 000121c9 00000000 000121c9     .....!.......!..
     18c:	00000000 000121c9 00000000 000121c9     .....!.......!..
				if (precision != -1)
					pad = ' ';
				break;

			case 's':
				cptr_temp = (char *) va_arg(vargs, char *);
     19c:	00000000 00010d31 00000000 000121c9     ....1........!..

			need_justifying = false;
			prefix = 0;
			switch (c) {
			case 'c':
				buf[0] = (char) ((int32_t) va_arg(vargs, int32_t));
     1ac:	00000000 000121c9 00000000 000121c9     .....!.......!..
				c = 1;
				break;

			case 'd':
			case 'i':
				int32_temp = (int32_t) va_arg(vargs, int32_t);
     1bc:	00000000 000121c9 00000000 000121c9     .....!.......!..
#if (MAXFLD < 10)
  #error buffer size MAXFLD is too small
#endif

	if (value < 0) {
		*buf++ = '-';
     1cc:	00000000 000121c9 00000000 000121c9     .....!.......!..
		if (value != 0x80000000)
			value = -value;
	} else if (fplus)
		*buf++ = '+';
	else if (fspace)
     1dc:	00000000 000121c9 00000000 000121c9     .....!.......!..
		*buf++ = ' ';
     1ec:	00000000 000121c9 00000000 000121c9     .....!.......!..
	return (buf - buf0) + _to_x(buf, value, 8, precision);
}

static int _to_udec(char *buf, uint32_t value, int precision)
{
	return _to_x(buf, value, 10, precision);
     1fc:	00000000 000121c9 00000000 000121c9     .....!.......!..

			case 'd':
			case 'i':
				int32_temp = (int32_t) va_arg(vargs, int32_t);
				c = _to_dec(buf, int32_temp, fplus, fspace, precision);
				if (fplus || fspace || (int32_temp < 0))
     20c:	00000000 000121c9                       .....!..

00000214 <__aeabi_uldivmod>:
					prefix = 1;
     214:	b953      	cbnz	r3, 22c <__aeabi_uldivmod+0x18>
     216:	b94a      	cbnz	r2, 22c <__aeabi_uldivmod+0x18>
				union {
					double d;
					uint64_t i;
				} u;

				u.d = (double) va_arg(vargs, double);
     218:	2900      	cmp	r1, #0
     21a:	bf08      	it	eq
     21c:	2800      	cmpeq	r0, #0
     21e:	bf1c      	itt	ne
     220:	f04f 31ff 	movne.w	r1, #4294967295
				double_temp = u.i;
     224:	f04f 30ff 	movne.w	r0, #4294967295
	uint64_t        ltemp;
	int             prune_zero;
	char           *start = buf;

	exp = double_temp >> 52 & 0x7ff;
	fract = (double_temp << 11) & ~HIGHBIT64;
     228:	f000 b992 	b.w	550 <__aeabi_idiv0>
     22c:	f1ad 0c08 	sub.w	ip, sp, #8
     230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     234:	f000 f81a 	bl	26c <__udivmoddi4>
	uint64_t        fract;
	uint64_t        ltemp;
	int             prune_zero;
	char           *start = buf;

	exp = double_temp >> 52 & 0x7ff;
     238:	f8dd e004 	ldr.w	lr, [sp, #4]
	fract = (double_temp << 11) & ~HIGHBIT64;
	sign = !!(double_temp & HIGHBIT64);
     23c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]


	if (exp == 0x7ff) {
     240:	b004      	add	sp, #16
	uint64_t        ltemp;
	int             prune_zero;
	char           *start = buf;

	exp = double_temp >> 52 & 0x7ff;
	fract = (double_temp << 11) & ~HIGHBIT64;
     242:	4770      	bx	lr

00000244 <__popcountsi2>:
     244:	0843      	lsrs	r3, r0, #1
	sign = !!(double_temp & HIGHBIT64);


	if (exp == 0x7ff) {
     246:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
	uint64_t        ltemp;
	int             prune_zero;
	char           *start = buf;

	exp = double_temp >> 52 & 0x7ff;
	fract = (double_temp << 11) & ~HIGHBIT64;
     24a:	1ac0      	subs	r0, r0, r3
	sign = !!(double_temp & HIGHBIT64);
     24c:	0883      	lsrs	r3, r0, #2


	if (exp == 0x7ff) {
     24e:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
		if (!fract) {
     252:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
			*buf++ = sign ? '-' : '+';
     256:	4418      	add	r0, r3
     258:	eb00 1010 	add.w	r0, r0, r0, lsr #4
     25c:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
     260:	eb00 2000 	add.w	r0, r0, r0, lsl #8
			*buf++ = 'I';
     264:	eb00 4000 	add.w	r0, r0, r0, lsl #16
     268:	0e00      	lsrs	r0, r0, #24
			*buf++ = 'N';
     26a:	4770      	bx	lr

0000026c <__udivmoddi4>:
     26c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			*buf++ = 'F';
     270:	468c      	mov	ip, r1
     272:	460e      	mov	r6, r1
     274:	4604      	mov	r4, r0
     276:	9d08      	ldr	r5, [sp, #32]
     278:	2b00      	cmp	r3, #0
		} else {
			*buf++ = 'N';
     27a:	d150      	bne.n	31e <CONFIG_BLUETOOTH_HCI_TX_STACK_SIZE+0x9e>
			*buf++ = 'a';
     27c:	428a      	cmp	r2, r1
			*buf++ = sign ? '-' : '+';
			*buf++ = 'I';
			*buf++ = 'N';
			*buf++ = 'F';
		} else {
			*buf++ = 'N';
     27e:	4617      	mov	r7, r2
     280:	d96c      	bls.n	35c <CONFIG_BLUETOOTH_DEVICE_APPEARANCE+0x1b>
			*buf++ = 'a';
			*buf++ = 'N';
     282:	fab2 fe82 	clz	lr, r2
			*buf++ = 'I';
			*buf++ = 'N';
			*buf++ = 'F';
		} else {
			*buf++ = 'N';
			*buf++ = 'a';
     286:	f1be 0f00 	cmp.w	lr, #0
			*buf++ = 'N';
     28a:	d00b      	beq.n	2a4 <CONFIG_BLUETOOTH_HCI_TX_STACK_SIZE+0x24>
     28c:	f1ce 0420 	rsb	r4, lr, #32
		}
		*buf = 0;
		return buf - start;
     290:	fa20 f404 	lsr.w	r4, r0, r4
		} else {
			*buf++ = 'N';
			*buf++ = 'a';
			*buf++ = 'N';
		}
		*buf = 0;
     294:	fa01 f60e 	lsl.w	r6, r1, lr
		return buf - start;
     298:	ea44 0c06 	orr.w	ip, r4, r6
	}

	if ((exp | fract) != 0) {
     29c:	fa02 f70e 	lsl.w	r7, r2, lr
     2a0:	fa00 f40e 	lsl.w	r4, r0, lr
     2a4:	ea4f 4917 	mov.w	r9, r7, lsr #16
		exp -= (1023 - 1);	/* +1 since .1 vs 1. */
		fract |= HIGHBIT64;
     2a8:	0c22      	lsrs	r2, r4, #16
		decexp = true;		/* Wasn't zero */
	} else
		decexp = false;		/* It was zero */

	if (decexp && sign) {
     2aa:	fbbc f0f9 	udiv	r0, ip, r9
		return buf - start;
	}

	if ((exp | fract) != 0) {
		exp -= (1023 - 1);	/* +1 since .1 vs 1. */
		fract |= HIGHBIT64;
     2ae:	fa1f f887 	uxth.w	r8, r7
		decexp = true;		/* Wasn't zero */
	} else
		decexp = false;		/* It was zero */

	if (decexp && sign) {
     2b2:	fb09 c610 	mls	r6, r9, r0, ip
		*buf = 0;
		return buf - start;
	}

	if ((exp | fract) != 0) {
		exp -= (1023 - 1);	/* +1 since .1 vs 1. */
     2b6:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
		decexp = true;		/* Wasn't zero */
	} else
		decexp = false;		/* It was zero */

	if (decexp && sign) {
		*buf++ = '-';
     2ba:	fb00 f308 	mul.w	r3, r0, r8
		}
		*buf = 0;
		return buf - start;
	}

	if ((exp | fract) != 0) {
     2be:	42b3      	cmp	r3, r6
	} else
		decexp = false;		/* It was zero */

	if (decexp && sign) {
		*buf++ = '-';
	} else if (fplus) {
     2c0:	d909      	bls.n	2d6 <CONFIG_BLUETOOTH_HCI_TX_STACK_SIZE+0x56>
     2c2:	19f6      	adds	r6, r6, r7
		*buf++ = '+';
     2c4:	f100 32ff 	add.w	r2, r0, #4294967295
	} else if (fspace) {
     2c8:	f080 8122 	bcs.w	510 <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x110>
		*buf++ = ' ';
     2cc:	42b3      	cmp	r3, r6
     2ce:	f240 811f 	bls.w	510 <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x110>
     2d2:	3802      	subs	r0, #2
     2d4:	443e      	add	r6, r7
     2d6:	1af6      	subs	r6, r6, r3

	if (decexp && sign) {
		*buf++ = '-';
	} else if (fplus) {
		*buf++ = '+';
	} else if (fspace) {
     2d8:	b2a2      	uxth	r2, r4
     2da:	fbb6 f3f9 	udiv	r3, r6, r9
		*buf++ = ' ';
	}

	decexp = 0;
	while (exp <= -3) {
     2de:	fb09 6613 	mls	r6, r9, r3, r6
		while ((fract >> 32) >= (MAXFP1 / 5)) {
     2e2:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
     2e6:	fb03 f808 	mul.w	r8, r3, r8
     2ea:	45a0      	cmp	r8, r4
     2ec:	d909      	bls.n	302 <CONFIG_BLUETOOTH_HCI_TX_STACK_SIZE+0x82>
     2ee:	19e4      	adds	r4, r4, r7
     2f0:	f103 32ff 	add.w	r2, r3, #4294967295
     2f4:	f080 810a 	bcs.w	50c <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x10c>
     2f8:	45a0      	cmp	r8, r4
     2fa:	f240 8107 	bls.w	50c <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x10c>
     2fe:	3b02      	subs	r3, #2
     300:	443c      	add	r4, r7
			_rlrshift(&fract);
     302:	ebc8 0404 	rsb	r4, r8, r4
     306:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
			exp++;
     30a:	2100      	movs	r1, #0
     30c:	2d00      	cmp	r5, #0
     30e:	d062      	beq.n	3d6 <CONFIG_BLUETOOTH_DEVICE_APPEARANCE+0x95>
     310:	fa24 f40e 	lsr.w	r4, r4, lr
     314:	2300      	movs	r3, #0
     316:	602c      	str	r4, [r5, #0]
		}
		fract *= 5;
     318:	606b      	str	r3, [r5, #4]
     31a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     31e:	428b      	cmp	r3, r1
     320:	d907      	bls.n	332 <CONFIG_BLUETOOTH_HCI_TX_STACK_SIZE+0xb2>
     322:	2d00      	cmp	r5, #0
     324:	d055      	beq.n	3d2 <CONFIG_BLUETOOTH_DEVICE_APPEARANCE+0x91>
		exp++;
     326:	2100      	movs	r1, #0
		decexp--;
     328:	e885 0041 	stmia.w	r5, {r0, r6}
     32c:	4608      	mov	r0, r1

		while ((fract >> 32) <= (MAXFP1 / 2)) {
     32e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     332:	fab3 f183 	clz	r1, r3
     336:	2900      	cmp	r1, #0
     338:	f040 8090 	bne.w	45c <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x5c>
     33c:	42b3      	cmp	r3, r6
     33e:	d302      	bcc.n	346 <CONFIG_BLUETOOTH_DEVICE_APPEARANCE+0x5>
     340:	4282      	cmp	r2, r0
     342:	f200 80f8 	bhi.w	536 <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x136>
     346:	1a84      	subs	r4, r0, r2
			fract <<= 1;
     348:	eb66 0603 	sbc.w	r6, r6, r3
			exp--;
     34c:	2001      	movs	r0, #1
     34e:	46b4      	mov	ip, r6
     350:	2d00      	cmp	r5, #0
     352:	d040      	beq.n	3d6 <CONFIG_BLUETOOTH_DEVICE_APPEARANCE+0x95>
     354:	e885 1010 	stmia.w	r5, {r4, ip}
     358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     35c:	b912      	cbnz	r2, 364 <CONFIG_BLUETOOTH_DEVICE_APPEARANCE+0x23>
     35e:	2701      	movs	r7, #1
     360:	fbb7 f7f2 	udiv	r7, r7, r2
     364:	fab7 fe87 	clz	lr, r7
     368:	f1be 0f00 	cmp.w	lr, #0
		}
	}

	while (exp > 0) {
     36c:	d135      	bne.n	3da <CONFIG_BLUETOOTH_DEVICE_APPEARANCE+0x99>
		_ldiv5(&fract);
     36e:	1bf3      	subs	r3, r6, r7
     370:	ea4f 4817 	mov.w	r8, r7, lsr #16
     374:	fa1f fc87 	uxth.w	ip, r7
		exp--;
     378:	2101      	movs	r1, #1
		decexp++;
     37a:	fbb3 f0f8 	udiv	r0, r3, r8
     37e:	0c22      	lsrs	r2, r4, #16
		while ((fract >> 32) <= (MAXFP1 / 2)) {
     380:	fb08 3610 	mls	r6, r8, r0, r3
     384:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
     388:	fb0c f300 	mul.w	r3, ip, r0
     38c:	42b3      	cmp	r3, r6
     38e:	d907      	bls.n	3a0 <CONFIG_BLUETOOTH_DEVICE_APPEARANCE+0x5f>
     390:	19f6      	adds	r6, r6, r7
     392:	f100 32ff 	add.w	r2, r0, #4294967295
     396:	d202      	bcs.n	39e <CONFIG_BLUETOOTH_DEVICE_APPEARANCE+0x5d>
     398:	42b3      	cmp	r3, r6
			fract <<= 1;
     39a:	f200 80ce 	bhi.w	53a <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x13a>
			exp--;
     39e:	4610      	mov	r0, r2
     3a0:	1af6      	subs	r6, r6, r3
     3a2:	b2a2      	uxth	r2, r4
     3a4:	fbb6 f3f8 	udiv	r3, r6, r8
		}
	}

	while (exp < (0 + 4)) {
		_rlrshift(&fract);
		exp++;
     3a8:	fb08 6613 	mls	r6, r8, r3, r6
			exp--;
		}
	}

	while (exp < (0 + 4)) {
		_rlrshift(&fract);
     3ac:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
			fract <<= 1;
			exp--;
		}
	}

	while (exp < (0 + 4)) {
     3b0:	fb0c fc03 	mul.w	ip, ip, r3
	}

	if (precision < 0)
		precision = 6;		/* Default precision if none given */
	prune_zero = false;		/* Assume trailing 0's allowed     */
	if ((c == 'g') || (c == 'G')) {
     3b4:	45a4      	cmp	ip, r4
     3b6:	d907      	bls.n	3c8 <CONFIG_BLUETOOTH_DEVICE_APPEARANCE+0x87>
		_rlrshift(&fract);
		exp++;
	}

	if (precision < 0)
		precision = 6;		/* Default precision if none given */
     3b8:	19e4      	adds	r4, r4, r7
     3ba:	f103 32ff 	add.w	r2, r3, #4294967295
	prune_zero = false;		/* Assume trailing 0's allowed     */
	if ((c == 'g') || (c == 'G')) {
     3be:	d202      	bcs.n	3c6 <CONFIG_BLUETOOTH_DEVICE_APPEARANCE+0x85>
		if (!falt && (precision > 0))
     3c0:	45a4      	cmp	ip, r4
     3c2:	f200 80b5 	bhi.w	530 <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x130>
		exp++;
	}

	if (precision < 0)
		precision = 6;		/* Default precision if none given */
	prune_zero = false;		/* Assume trailing 0's allowed     */
     3c6:	4613      	mov	r3, r2
     3c8:	ebcc 0404 	rsb	r4, ip, r4
     3cc:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
	if ((c == 'g') || (c == 'G')) {
		if (!falt && (precision > 0))
			prune_zero = true;
		if ((decexp < (-4 + 1)) || (decexp > (precision + 1))) {
     3d0:	e79c      	b.n	30c <CONFIG_BLUETOOTH_HCI_TX_STACK_SIZE+0x8c>
     3d2:	4629      	mov	r1, r5
     3d4:	4628      	mov	r0, r5
     3d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (c == 'g')
				c = 'e';
			else
				c = 'E';
     3da:	f1ce 0120 	rsb	r1, lr, #32
     3de:	fa06 f30e 	lsl.w	r3, r6, lr
		} else
			c = 'f';
	}

	if (c == 'f') {
     3e2:	fa07 f70e 	lsl.w	r7, r7, lr
		exp++;
	}

	if (precision < 0)
		precision = 6;		/* Default precision if none given */
	prune_zero = false;		/* Assume trailing 0's allowed     */
     3e6:	fa20 f901 	lsr.w	r9, r0, r1
		} else
			c = 'f';
	}

	if (c == 'f') {
		exp = precision + decexp;
     3ea:	ea4f 4817 	mov.w	r8, r7, lsr #16
     3ee:	40ce      	lsrs	r6, r1
     3f0:	ea49 0903 	orr.w	r9, r9, r3
     3f4:	fbb6 faf8 	udiv	sl, r6, r8
		if (exp < 0)
			exp = 0;
	} else
		exp = precision + 1;
     3f8:	ea4f 4419 	mov.w	r4, r9, lsr #16
	digit_count = 16;
     3fc:	fb08 661a 	mls	r6, r8, sl, r6
     400:	fa1f fc87 	uxth.w	ip, r7
	if (exp > 16)
		exp = 16;

	ltemp = 0x0800000000000000;
     404:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
     408:	fb0a f20c 	mul.w	r2, sl, ip
     40c:	429a      	cmp	r2, r3
     40e:	fa00 f40e 	lsl.w	r4, r0, lr
	while (exp--) {
     412:	d90a      	bls.n	42a <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x2a>
     414:	19db      	adds	r3, r3, r7
		_ldiv5(&ltemp);
     416:	f10a 31ff 	add.w	r1, sl, #4294967295
     41a:	f080 8087 	bcs.w	52c <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x12c>
		_rlrshift(&ltemp);
     41e:	429a      	cmp	r2, r3
     420:	f240 8084 	bls.w	52c <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x12c>
     424:	f1aa 0a02 	sub.w	sl, sl, #2
     428:	443b      	add	r3, r7
	}

	fract += ltemp;
     42a:	1a9b      	subs	r3, r3, r2
     42c:	fa1f f989 	uxth.w	r9, r9
     430:	fbb3 f1f8 	udiv	r1, r3, r8
     434:	fb08 3311 	mls	r3, r8, r1, r3
     438:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
	if ((fract >> 32) & 0xF0000000) {
     43c:	fb01 f60c 	mul.w	r6, r1, ip
     440:	429e      	cmp	r6, r3
     442:	d907      	bls.n	454 <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x54>
     444:	19db      	adds	r3, r3, r7
     446:	f101 32ff 	add.w	r2, r1, #4294967295
     44a:	d26b      	bcs.n	524 <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x124>
     44c:	429e      	cmp	r6, r3
		_ldiv5(&fract);
     44e:	d969      	bls.n	524 <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x124>
     450:	3902      	subs	r1, #2
     452:	443b      	add	r3, r7
		_rlrshift(&fract);
     454:	1b9b      	subs	r3, r3, r6
     456:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
		decexp++;
     45a:	e78e      	b.n	37a <CONFIG_BLUETOOTH_DEVICE_APPEARANCE+0x39>
	}

	if (c == 'f') {
     45c:	f1c1 0e20 	rsb	lr, r1, #32
		if (decexp > 0) {
     460:	fa22 f40e 	lsr.w	r4, r2, lr
     464:	408b      	lsls	r3, r1
     466:	4323      	orrs	r3, r4
			while (decexp > 0) {
				*buf++ = _get_digit(&fract, &digit_count);
     468:	fa20 f70e 	lsr.w	r7, r0, lr
     46c:	fa06 f401 	lsl.w	r4, r6, r1
     470:	ea4f 4c13 	mov.w	ip, r3, lsr #16
		decexp++;
	}

	if (c == 'f') {
		if (decexp > 0) {
			while (decexp > 0) {
     474:	fa26 f60e 	lsr.w	r6, r6, lr
     478:	433c      	orrs	r4, r7
     47a:	fbb6 f9fc 	udiv	r9, r6, ip
				*buf++ = _get_digit(&fract, &digit_count);
				decexp--;
			}
		} else
			*buf++ = '0';
     47e:	0c27      	lsrs	r7, r4, #16
     480:	fb0c 6619 	mls	r6, ip, r9, r6
     484:	fa1f f883 	uxth.w	r8, r3
		if (falt || (precision > 0))
     488:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
     48c:	fb09 f708 	mul.w	r7, r9, r8
			*buf++ = '.';
     490:	42b7      	cmp	r7, r6
     492:	fa02 f201 	lsl.w	r2, r2, r1
     496:	fa00 fa01 	lsl.w	sl, r0, r1
     49a:	d908      	bls.n	4ae <CONFIG_BLUETOOTH_RX_STACK_SIZE+0xae>
		while (precision-- > 0) {
     49c:	18f6      	adds	r6, r6, r3
     49e:	f109 30ff 	add.w	r0, r9, #4294967295
			if (decexp < 0) {
     4a2:	d241      	bcs.n	528 <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x128>
				*buf++ = '0';
     4a4:	42b7      	cmp	r7, r6
     4a6:	d93f      	bls.n	528 <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x128>
				decexp++;
     4a8:	f1a9 0902 	sub.w	r9, r9, #2
			} else
				*buf++ = _get_digit(&fract, &digit_count);
     4ac:	441e      	add	r6, r3
     4ae:	1bf6      	subs	r6, r6, r7
     4b0:	b2a0      	uxth	r0, r4
     4b2:	fbb6 f4fc 	udiv	r4, r6, ip
     4b6:	fb0c 6614 	mls	r6, ip, r4, r6
     4ba:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
     4be:	fb04 f808 	mul.w	r8, r4, r8
     4c2:	45b8      	cmp	r8, r7
     4c4:	d907      	bls.n	4d6 <CONFIG_BLUETOOTH_RX_STACK_SIZE+0xd6>
     4c6:	18ff      	adds	r7, r7, r3
     4c8:	f104 30ff 	add.w	r0, r4, #4294967295
		}
	} else {
		*buf = _get_digit(&fract, &digit_count);
     4cc:	d228      	bcs.n	520 <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x120>
     4ce:	45b8      	cmp	r8, r7
     4d0:	d926      	bls.n	520 <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x120>
     4d2:	3c02      	subs	r4, #2
		if (*buf++ != '0')
			decexp--;
		if (falt || (precision > 0))
     4d4:	441f      	add	r7, r3
				decexp++;
			} else
				*buf++ = _get_digit(&fract, &digit_count);
		}
	} else {
		*buf = _get_digit(&fract, &digit_count);
     4d6:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
		if (*buf++ != '0')
     4da:	ebc8 0707 	rsb	r7, r8, r7
			decexp--;
     4de:	fba0 8902 	umull	r8, r9, r0, r2
		if (falt || (precision > 0))
     4e2:	454f      	cmp	r7, r9
     4e4:	4644      	mov	r4, r8
			} else
				*buf++ = _get_digit(&fract, &digit_count);
		}
	} else {
		*buf = _get_digit(&fract, &digit_count);
		if (*buf++ != '0')
     4e6:	464e      	mov	r6, r9
     4e8:	d314      	bcc.n	514 <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x114>
     4ea:	d029      	beq.n	540 <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x140>
			decexp--;
		if (falt || (precision > 0))
			*buf++ = '.';
     4ec:	b365      	cbz	r5, 548 <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x148>
     4ee:	ebba 0304 	subs.w	r3, sl, r4
     4f2:	eb67 0706 	sbc.w	r7, r7, r6
     4f6:	fa07 fe0e 	lsl.w	lr, r7, lr
		while (precision-- > 0)
     4fa:	40cb      	lsrs	r3, r1
     4fc:	40cf      	lsrs	r7, r1
			*buf++ = _get_digit(&fract, &digit_count);
     4fe:	ea4e 0303 	orr.w	r3, lr, r3
     502:	e885 0088 	stmia.w	r5, {r3, r7}
     506:	2100      	movs	r1, #0
     508:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     50c:	4613      	mov	r3, r2
     50e:	e6f8      	b.n	302 <CONFIG_BLUETOOTH_HCI_TX_STACK_SIZE+0x82>
	}

	if (prune_zero) {
     510:	4610      	mov	r0, r2
		while (*--buf == '0')
     512:	e6e0      	b.n	2d6 <CONFIG_BLUETOOTH_HCI_TX_STACK_SIZE+0x56>
     514:	ebb8 0402 	subs.w	r4, r8, r2
     518:	eb69 0603 	sbc.w	r6, r9, r3
			;
		if (*buf != '.')
     51c:	3801      	subs	r0, #1
     51e:	e7e5      	b.n	4ec <CONFIG_BLUETOOTH_RX_STACK_SIZE+0xec>
     520:	4604      	mov	r4, r0
			buf++;
	}

	if ((c == 'e') || (c == 'E')) {
     522:	e7d8      	b.n	4d6 <CONFIG_BLUETOOTH_RX_STACK_SIZE+0xd6>
     524:	4611      	mov	r1, r2
     526:	e795      	b.n	454 <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x54>
     528:	4681      	mov	r9, r0
		*buf++ = (char) c;
     52a:	e7c0      	b.n	4ae <CONFIG_BLUETOOTH_RX_STACK_SIZE+0xae>
		if (decexp < 0) {
     52c:	468a      	mov	sl, r1
		if (*buf != '.')
			buf++;
	}

	if ((c == 'e') || (c == 'E')) {
		*buf++ = (char) c;
     52e:	e77c      	b.n	42a <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x2a>
     530:	3b02      	subs	r3, #2
		if (decexp < 0) {
			decexp = -decexp;
			*buf++ = '-';
		} else
			*buf++ = '+';
		*buf++ = (char) ((decexp / 100) + '0');
     532:	443c      	add	r4, r7
     534:	e748      	b.n	3c8 <CONFIG_BLUETOOTH_DEVICE_APPEARANCE+0x87>
	}

	if ((c == 'e') || (c == 'E')) {
		*buf++ = (char) c;
		if (decexp < 0) {
			decexp = -decexp;
     536:	4608      	mov	r0, r1
     538:	e70a      	b.n	350 <CONFIG_BLUETOOTH_DEVICE_APPEARANCE+0xf>
			*buf++ = '-';
     53a:	3802      	subs	r0, #2
		} else
			*buf++ = '+';
     53c:	443e      	add	r6, r7
     53e:	e72f      	b.n	3a0 <CONFIG_BLUETOOTH_DEVICE_APPEARANCE+0x5f>
     540:	45c2      	cmp	sl, r8
		*buf++ = (char) ((decexp / 100) + '0');
     542:	d3e7      	bcc.n	514 <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x114>
     544:	463e      	mov	r6, r7
     546:	e7d1      	b.n	4ec <CONFIG_BLUETOOTH_RX_STACK_SIZE+0xec>
     548:	4629      	mov	r1, r5
		decexp %= 100;
     54a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		*buf++ = (char) ((decexp / 10) + '0');
     54e:	bf00      	nop

00000550 <__aeabi_idiv0>:
		if (decexp < 0) {
			decexp = -decexp;
			*buf++ = '-';
		} else
			*buf++ = '+';
		*buf++ = (char) ((decexp / 100) + '0');
     550:	4770      	bx	lr
		decexp %= 100;
		*buf++ = (char) ((decexp / 10) + '0');
     552:	bf00      	nop

00000554 <disconnected>:
		printk("Connected\n");
	}
}

static void disconnected(struct bt_conn *conn, u8_t reason)
{
     554:	b510      	push	{r4, lr}
	printk("Disconnected (reason %u)\n", reason);

	if (default_conn) {
     556:	4c05      	ldr	r4, [pc, #20]	; (56c <disconnected+0x18>)
	}
}

static void disconnected(struct bt_conn *conn, u8_t reason)
{
	printk("Disconnected (reason %u)\n", reason);
     558:	4805      	ldr	r0, [pc, #20]	; (570 <disconnected+0x1c>)
     55a:	f000 ff91 	bl	1480 <printk>

	if (default_conn) {
     55e:	6820      	ldr	r0, [r4, #0]
     560:	b118      	cbz	r0, 56a <disconnected+0x16>
		bt_conn_unref(default_conn);
     562:	f004 f85c 	bl	461e <bt_conn_unref>
		default_conn = NULL;
     566:	2300      	movs	r3, #0
     568:	6023      	str	r3, [r4, #0]
     56a:	bd10      	pop	{r4, pc}
     56c:	2000210c 	.word	0x2000210c
     570:	00013a40 	.word	0x00013a40

00000574 <connected>:
static const struct bt_data sd[] = {
	BT_DATA(BT_DATA_NAME_COMPLETE, DEVICE_NAME, DEVICE_NAME_LEN),
};

static void connected(struct bt_conn *conn, u8_t err)
{
     574:	b508      	push	{r3, lr}
	if (err) {
     576:	b121      	cbz	r1, 582 <connected+0xe>
		printk("Connection failed (err %u)\n", err);
     578:	4806      	ldr	r0, [pc, #24]	; (594 <connected+0x20>)
	} else {
		default_conn = bt_conn_ref(conn);
		printk("Connected\n");
	}
}
     57a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
};

static void connected(struct bt_conn *conn, u8_t err)
{
	if (err) {
		printk("Connection failed (err %u)\n", err);
     57e:	f000 bf7f 	b.w	1480 <printk>
	} else {
		default_conn = bt_conn_ref(conn);
     582:	f004 f845 	bl	4610 <bt_conn_ref>
     586:	4b04      	ldr	r3, [pc, #16]	; (598 <connected+0x24>)
     588:	6018      	str	r0, [r3, #0]
		printk("Connected\n");
     58a:	4804      	ldr	r0, [pc, #16]	; (59c <connected+0x28>)
	}
}
     58c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
	if (err) {
		printk("Connection failed (err %u)\n", err);
	} else {
		default_conn = bt_conn_ref(conn);
		printk("Connected\n");
     590:	f000 bf76 	b.w	1480 <printk>
     594:	00013a5a 	.word	0x00013a5a
     598:	2000210c 	.word	0x2000210c
     59c:	00013a76 	.word	0x00013a76

000005a0 <bt_ready>:
	.connected = connected,
	.disconnected = disconnected,
};

static void bt_ready(int err)
{
     5a0:	b510      	push	{r4, lr}
	if (err) {
     5a2:	4604      	mov	r4, r0
	.connected = connected,
	.disconnected = disconnected,
};

static void bt_ready(int err)
{
     5a4:	b086      	sub	sp, #24
	if (err) {
     5a6:	b110      	cbz	r0, 5ae <bt_ready+0xe>
		printk("Bluetooth init failed (err %d)\n", err);
     5a8:	4601      	mov	r1, r0
     5aa:	4816      	ldr	r0, [pc, #88]	; (604 <bt_ready+0x64>)
     5ac:	e021      	b.n	5f2 <bt_ready+0x52>
		return;
	}

	printk("Bluetooth initialized\n");
     5ae:	4816      	ldr	r0, [pc, #88]	; (608 <bt_ready+0x68>)
     5b0:	f000 ff66 	bl	1480 <printk>

	hrs_init(0x01);
     5b4:	2001      	movs	r0, #1
     5b6:	f000 f8a5 	bl	704 <hrs_init>
	bas_init();
     5ba:	f000 f925 	bl	808 <bas_init>
	dis_init(CONFIG_SOC, "Manufacturer");
     5be:	4913      	ldr	r1, [pc, #76]	; (60c <bt_ready+0x6c>)
     5c0:	4813      	ldr	r0, [pc, #76]	; (610 <bt_ready+0x70>)
     5c2:	f000 f8ff 	bl	7c4 <dis_init>

	err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad),
     5c6:	22a0      	movs	r2, #160	; 0xa0
     5c8:	9403      	str	r4, [sp, #12]
     5ca:	2301      	movs	r3, #1
     5cc:	f8ad 200e 	strh.w	r2, [sp, #14]
     5d0:	22f0      	movs	r2, #240	; 0xf0
     5d2:	9404      	str	r4, [sp, #16]
     5d4:	f88d 300c 	strb.w	r3, [sp, #12]
     5d8:	f8ad 2010 	strh.w	r2, [sp, #16]
     5dc:	9300      	str	r3, [sp, #0]
     5de:	490d      	ldr	r1, [pc, #52]	; (614 <bt_ready+0x74>)
     5e0:	4b0d      	ldr	r3, [pc, #52]	; (618 <bt_ready+0x78>)
     5e2:	9405      	str	r4, [sp, #20]
     5e4:	2202      	movs	r2, #2
     5e6:	a803      	add	r0, sp, #12
     5e8:	f003 faa8 	bl	3b3c <bt_le_adv_start>
			      sd, ARRAY_SIZE(sd));
	if (err) {
     5ec:	4601      	mov	r1, r0
     5ee:	b118      	cbz	r0, 5f8 <bt_ready+0x58>
		printk("Advertising failed to start (err %d)\n", err);
     5f0:	480a      	ldr	r0, [pc, #40]	; (61c <bt_ready+0x7c>)
     5f2:	f000 ff45 	bl	1480 <printk>
     5f6:	e002      	b.n	5fe <bt_ready+0x5e>
		return;
	}

	printk("Advertising successfully started\n");
     5f8:	4809      	ldr	r0, [pc, #36]	; (620 <bt_ready+0x80>)
     5fa:	f000 ff41 	bl	1480 <printk>
}
     5fe:	b006      	add	sp, #24
     600:	bd10      	pop	{r4, pc}
     602:	bf00      	nop
     604:	00013a81 	.word	0x00013a81
     608:	00013aa1 	.word	0x00013aa1
     60c:	00013ab8 	.word	0x00013ab8
     610:	00013ac5 	.word	0x00013ac5
     614:	00013b8c 	.word	0x00013b8c
     618:	00013b84 	.word	0x00013b84
     61c:	00013ad3 	.word	0x00013ad3
     620:	00013af9 	.word	0x00013af9

00000624 <auth_cancel>:

static void auth_cancel(struct bt_conn *conn)
{
     624:	b530      	push	{r4, r5, lr}
     626:	b091      	sub	sp, #68	; 0x44
	char addr[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
     628:	f003 fffc 	bl	4624 <bt_conn_get_dst>
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[7];

	switch (addr->type) {
     62c:	7803      	ldrb	r3, [r0, #0]
     62e:	4604      	mov	r4, r0
     630:	ad07      	add	r5, sp, #28
     632:	b11b      	cbz	r3, 63c <auth_cancel+0x18>
     634:	2b01      	cmp	r3, #1
     636:	d106      	bne.n	646 <auth_cancel+0x22>
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
     638:	4911      	ldr	r1, [pc, #68]	; (680 <auth_cancel+0x5c>)
     63a:	e000      	b.n	63e <auth_cancel+0x1a>
{
	char type[7];

	switch (addr->type) {
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
     63c:	4911      	ldr	r1, [pc, #68]	; (684 <auth_cancel+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
     63e:	4628      	mov	r0, r5
     640:	f000 fcd8 	bl	ff4 <strcpy>
     644:	e004      	b.n	650 <auth_cancel+0x2c>
		break;
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
     646:	4a10      	ldr	r2, [pc, #64]	; (688 <auth_cancel+0x64>)
     648:	2107      	movs	r1, #7
     64a:	4628      	mov	r0, r5
     64c:	f000 ff26 	bl	149c <snprintk>
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
     650:	79a3      	ldrb	r3, [r4, #6]
     652:	9505      	str	r5, [sp, #20]
     654:	7862      	ldrb	r2, [r4, #1]
     656:	9204      	str	r2, [sp, #16]
     658:	78a2      	ldrb	r2, [r4, #2]
     65a:	9203      	str	r2, [sp, #12]
     65c:	78e2      	ldrb	r2, [r4, #3]
     65e:	9202      	str	r2, [sp, #8]
     660:	7922      	ldrb	r2, [r4, #4]
     662:	9201      	str	r2, [sp, #4]
     664:	7962      	ldrb	r2, [r4, #5]
     666:	9200      	str	r2, [sp, #0]
     668:	211b      	movs	r1, #27
     66a:	4a08      	ldr	r2, [pc, #32]	; (68c <auth_cancel+0x68>)
     66c:	a809      	add	r0, sp, #36	; 0x24
     66e:	f000 ff15 	bl	149c <snprintk>

	printk("Pairing cancelled: %s\n", addr);
     672:	a909      	add	r1, sp, #36	; 0x24
     674:	4806      	ldr	r0, [pc, #24]	; (690 <auth_cancel+0x6c>)
     676:	f000 ff03 	bl	1480 <printk>
}
     67a:	b011      	add	sp, #68	; 0x44
     67c:	bd30      	pop	{r4, r5, pc}
     67e:	bf00      	nop
     680:	00013b22 	.word	0x00013b22
     684:	00013b1b 	.word	0x00013b1b
     688:	00013b29 	.word	0x00013b29
     68c:	00013b30 	.word	0x00013b30
     690:	00013b53 	.word	0x00013b53

00000694 <main>:
static struct bt_conn_auth_cb auth_cb_display = {
	.cancel = auth_cancel,
};

void main(void)
{
     694:	b508      	push	{r3, lr}
	int err;

	err = bt_enable(bt_ready);
     696:	480c      	ldr	r0, [pc, #48]	; (6c8 <main+0x34>)
     698:	f003 f9d2 	bl	3a40 <bt_enable>
	if (err) {
     69c:	4601      	mov	r1, r0
     69e:	b120      	cbz	r0, 6aa <main+0x16>
		printk("Bluetooth init failed (err %d)\n", err);
     6a0:	480a      	ldr	r0, [pc, #40]	; (6cc <main+0x38>)
		hrs_notify();

		/* Battery level simulation */
		bas_notify();
	}
}
     6a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
	int err;

	err = bt_enable(bt_ready);
	if (err) {
		printk("Bluetooth init failed (err %d)\n", err);
     6a6:	f000 beeb 	b.w	1480 <printk>
		return;
	}

	bt_conn_cb_register(&conn_callbacks);
     6aa:	4809      	ldr	r0, [pc, #36]	; (6d0 <main+0x3c>)
     6ac:	f003 fc7c 	bl	3fa8 <bt_conn_cb_register>
	bt_conn_auth_cb_register(&auth_cb_display);
     6b0:	4808      	ldr	r0, [pc, #32]	; (6d4 <main+0x40>)
     6b2:	f004 f925 	bl	4900 <bt_conn_auth_cb_register>

	/* Implement notification. At the moment there is no suitable way
	 * of starting delayed work so we do it here
	 */
	while (1) {
		k_sleep(MSEC_PER_SEC);
     6b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     6ba:	f012 fcef 	bl	1309c <k_sleep>

		/* Heartrate measurements simulation */
		hrs_notify();
     6be:	f000 f82b 	bl	718 <hrs_notify>

		/* Battery level simulation */
		bas_notify();
     6c2:	f000 f8a7 	bl	814 <bas_notify>
     6c6:	e7f6      	b.n	6b6 <main+0x22>
     6c8:	000005a1 	.word	0x000005a1
     6cc:	00013a81 	.word	0x00013a81
     6d0:	20000010 	.word	0x20000010
     6d4:	20000040 	.word	0x20000040

000006d8 <hrmc_ccc_cfg_changed>:
static u8_t hrs_blsc;

static void hrmc_ccc_cfg_changed(const struct bt_gatt_attr *attr,
				 u16_t value)
{
	simulate_hrm = (value == BT_GATT_CCC_NOTIFY) ? 1 : 0;
     6d8:	1e4b      	subs	r3, r1, #1
     6da:	4259      	negs	r1, r3
     6dc:	4159      	adcs	r1, r3
     6de:	4b01      	ldr	r3, [pc, #4]	; (6e4 <hrmc_ccc_cfg_changed+0xc>)
     6e0:	7019      	strb	r1, [r3, #0]
     6e2:	4770      	bx	lr
     6e4:	20000808 	.word	0x20000808

000006e8 <read_blsc>:
}

static ssize_t read_blsc(struct bt_conn *conn, const struct bt_gatt_attr *attr,
			 void *buf, u16_t len, u16_t offset)
{
     6e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &hrs_blsc,
     6ea:	2401      	movs	r4, #1
     6ec:	9402      	str	r4, [sp, #8]
     6ee:	4c04      	ldr	r4, [pc, #16]	; (700 <read_blsc+0x18>)
     6f0:	9401      	str	r4, [sp, #4]
     6f2:	f8bd 4018 	ldrh.w	r4, [sp, #24]
     6f6:	9400      	str	r4, [sp, #0]
     6f8:	f005 ff90 	bl	661c <bt_gatt_attr_read>
				 sizeof(hrs_blsc));
}
     6fc:	b004      	add	sp, #16
     6fe:	bd10      	pop	{r4, pc}
     700:	20000809 	.word	0x20000809

00000704 <hrs_init>:

static struct bt_gatt_service hrs_svc = BT_GATT_SERVICE(attrs);

void hrs_init(u8_t blsc)
{
	hrs_blsc = blsc;
     704:	4b02      	ldr	r3, [pc, #8]	; (710 <hrs_init+0xc>)
     706:	7018      	strb	r0, [r3, #0]

	bt_gatt_service_register(&hrs_svc);
     708:	4802      	ldr	r0, [pc, #8]	; (714 <hrs_init+0x10>)
     70a:	f006 b883 	b.w	6814 <bt_gatt_service_register>
     70e:	bf00      	nop
     710:	20000809 	.word	0x20000809
     714:	20000240 	.word	0x20000240

00000718 <hrs_notify>:
void hrs_notify(void)
{
	static u8_t hrm[2];

	/* Heartrate measurements simulation */
	if (!simulate_hrm) {
     718:	4b0a      	ldr	r3, [pc, #40]	; (744 <hrs_notify+0x2c>)
     71a:	781b      	ldrb	r3, [r3, #0]
     71c:	b18b      	cbz	r3, 742 <hrs_notify+0x2a>
		return;
	}

	heartrate++;
     71e:	4b0a      	ldr	r3, [pc, #40]	; (748 <hrs_notify+0x30>)
     720:	781a      	ldrb	r2, [r3, #0]
     722:	3201      	adds	r2, #1
     724:	b2d2      	uxtb	r2, r2
	if (heartrate == 160) {
     726:	2aa0      	cmp	r2, #160	; 0xa0
		heartrate = 90;
     728:	bf08      	it	eq
     72a:	225a      	moveq	r2, #90	; 0x5a
     72c:	701a      	strb	r2, [r3, #0]
	}

	hrm[0] = 0x06; /* uint8, sensor contact */
     72e:	4a07      	ldr	r2, [pc, #28]	; (74c <hrs_notify+0x34>)
	hrm[1] = heartrate;
     730:	781b      	ldrb	r3, [r3, #0]
     732:	7053      	strb	r3, [r2, #1]
	heartrate++;
	if (heartrate == 160) {
		heartrate = 90;
	}

	hrm[0] = 0x06; /* uint8, sensor contact */
     734:	2106      	movs	r1, #6
     736:	7011      	strb	r1, [r2, #0]
	hrm[1] = heartrate;

	bt_gatt_notify(NULL, &attrs[2], &hrm, sizeof(hrm));
     738:	2302      	movs	r3, #2
     73a:	4905      	ldr	r1, [pc, #20]	; (750 <hrs_notify+0x38>)
     73c:	2000      	movs	r0, #0
     73e:	f006 b8f9 	b.w	6934 <bt_gatt_notify>
     742:	4770      	bx	lr
     744:	20000808 	.word	0x20000808
     748:	20000054 	.word	0x20000054
     74c:	2000080a 	.word	0x2000080a
     750:	20000114 	.word	0x20000114

00000754 <read_manuf>:
}

static ssize_t read_manuf(struct bt_conn *conn,
			  const struct bt_gatt_attr *attr, void *buf,
			  u16_t len, u16_t offset)
{
     754:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
     758:	4698      	mov	r8, r3
	return bt_gatt_attr_read(conn, attr, buf, len, offset, dis_manuf,
				 strlen(dis_manuf));
     75a:	4b0b      	ldr	r3, [pc, #44]	; (788 <read_manuf+0x34>)
     75c:	681c      	ldr	r4, [r3, #0]
}

static ssize_t read_manuf(struct bt_conn *conn,
			  const struct bt_gatt_attr *attr, void *buf,
			  u16_t len, u16_t offset)
{
     75e:	4605      	mov	r5, r0
	return bt_gatt_attr_read(conn, attr, buf, len, offset, dis_manuf,
				 strlen(dis_manuf));
     760:	4620      	mov	r0, r4
}

static ssize_t read_manuf(struct bt_conn *conn,
			  const struct bt_gatt_attr *attr, void *buf,
			  u16_t len, u16_t offset)
{
     762:	460e      	mov	r6, r1
     764:	4617      	mov	r7, r2
	return bt_gatt_attr_read(conn, attr, buf, len, offset, dis_manuf,
				 strlen(dis_manuf));
     766:	f000 fc4f 	bl	1008 <strlen>

static ssize_t read_manuf(struct bt_conn *conn,
			  const struct bt_gatt_attr *attr, void *buf,
			  u16_t len, u16_t offset)
{
	return bt_gatt_attr_read(conn, attr, buf, len, offset, dis_manuf,
     76a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
     76e:	9300      	str	r3, [sp, #0]
     770:	b280      	uxth	r0, r0
     772:	9002      	str	r0, [sp, #8]
     774:	9401      	str	r4, [sp, #4]
     776:	4643      	mov	r3, r8
     778:	463a      	mov	r2, r7
     77a:	4631      	mov	r1, r6
     77c:	4628      	mov	r0, r5
     77e:	f005 ff4d 	bl	661c <bt_gatt_attr_read>
				 strlen(dis_manuf));
}
     782:	b004      	add	sp, #16
     784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     788:	20000818 	.word	0x20000818

0000078c <read_model>:
static const char *dis_manuf;

static ssize_t read_model(struct bt_conn *conn,
			  const struct bt_gatt_attr *attr, void *buf,
			  u16_t len, u16_t offset)
{
     78c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
     790:	4698      	mov	r8, r3
	return bt_gatt_attr_read(conn, attr, buf, len, offset, dis_model,
				 strlen(dis_model));
     792:	4b0b      	ldr	r3, [pc, #44]	; (7c0 <read_model+0x34>)
     794:	681c      	ldr	r4, [r3, #0]
static const char *dis_manuf;

static ssize_t read_model(struct bt_conn *conn,
			  const struct bt_gatt_attr *attr, void *buf,
			  u16_t len, u16_t offset)
{
     796:	4605      	mov	r5, r0
	return bt_gatt_attr_read(conn, attr, buf, len, offset, dis_model,
				 strlen(dis_model));
     798:	4620      	mov	r0, r4
static const char *dis_manuf;

static ssize_t read_model(struct bt_conn *conn,
			  const struct bt_gatt_attr *attr, void *buf,
			  u16_t len, u16_t offset)
{
     79a:	460e      	mov	r6, r1
     79c:	4617      	mov	r7, r2
	return bt_gatt_attr_read(conn, attr, buf, len, offset, dis_model,
				 strlen(dis_model));
     79e:	f000 fc33 	bl	1008 <strlen>

static ssize_t read_model(struct bt_conn *conn,
			  const struct bt_gatt_attr *attr, void *buf,
			  u16_t len, u16_t offset)
{
	return bt_gatt_attr_read(conn, attr, buf, len, offset, dis_model,
     7a2:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
     7a6:	9300      	str	r3, [sp, #0]
     7a8:	b280      	uxth	r0, r0
     7aa:	9002      	str	r0, [sp, #8]
     7ac:	9401      	str	r4, [sp, #4]
     7ae:	4643      	mov	r3, r8
     7b0:	463a      	mov	r2, r7
     7b2:	4631      	mov	r1, r6
     7b4:	4628      	mov	r0, r5
     7b6:	f005 ff31 	bl	661c <bt_gatt_attr_read>
				 strlen(dis_model));
}
     7ba:	b004      	add	sp, #16
     7bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     7c0:	2000081c 	.word	0x2000081c

000007c4 <dis_init>:

static struct bt_gatt_service dis_svc = BT_GATT_SERVICE(attrs);

void dis_init(const char *model, const char *manuf)
{
	dis_model = model;
     7c4:	4b03      	ldr	r3, [pc, #12]	; (7d4 <dis_init+0x10>)
     7c6:	6018      	str	r0, [r3, #0]
	dis_manuf = manuf;
     7c8:	4b03      	ldr	r3, [pc, #12]	; (7d8 <dis_init+0x14>)

	bt_gatt_service_register(&dis_svc);
     7ca:	4804      	ldr	r0, [pc, #16]	; (7dc <dis_init+0x18>)
static struct bt_gatt_service dis_svc = BT_GATT_SERVICE(attrs);

void dis_init(const char *model, const char *manuf)
{
	dis_model = model;
	dis_manuf = manuf;
     7cc:	6019      	str	r1, [r3, #0]

	bt_gatt_service_register(&dis_svc);
     7ce:	f006 b821 	b.w	6814 <bt_gatt_service_register>
     7d2:	bf00      	nop
     7d4:	2000081c 	.word	0x2000081c
     7d8:	20000818 	.word	0x20000818
     7dc:	20000258 	.word	0x20000258

000007e0 <blvl_ccc_cfg_changed>:
static u8_t battery = 100;

static void blvl_ccc_cfg_changed(const struct bt_gatt_attr *attr,
				 u16_t value)
{
	simulate_blvl = (value == BT_GATT_CCC_NOTIFY) ? 1 : 0;
     7e0:	1e4b      	subs	r3, r1, #1
     7e2:	4259      	negs	r1, r3
     7e4:	4159      	adcs	r1, r3
     7e6:	4b01      	ldr	r3, [pc, #4]	; (7ec <blvl_ccc_cfg_changed+0xc>)
     7e8:	7019      	strb	r1, [r3, #0]
     7ea:	4770      	bx	lr
     7ec:	2000082c 	.word	0x2000082c

000007f0 <read_blvl>:
}

static ssize_t read_blvl(struct bt_conn *conn, const struct bt_gatt_attr *attr,
			 void *buf, u16_t len, u16_t offset)
{
     7f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const char *value = attr->user_data;

	return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
     7f2:	2401      	movs	r4, #1
     7f4:	9402      	str	r4, [sp, #8]
     7f6:	68cc      	ldr	r4, [r1, #12]
     7f8:	9401      	str	r4, [sp, #4]
     7fa:	f8bd 4018 	ldrh.w	r4, [sp, #24]
     7fe:	9400      	str	r4, [sp, #0]
     800:	f005 ff0c 	bl	661c <bt_gatt_attr_read>
				 sizeof(*value));
}
     804:	b004      	add	sp, #16
     806:	bd10      	pop	{r4, pc}

00000808 <bas_init>:

static struct bt_gatt_service bas_svc = BT_GATT_SERVICE(attrs);

void bas_init(void)
{
	bt_gatt_service_register(&bas_svc);
     808:	4801      	ldr	r0, [pc, #4]	; (810 <bas_init+0x8>)
     80a:	f006 b803 	b.w	6814 <bt_gatt_service_register>
     80e:	bf00      	nop
     810:	20000268 	.word	0x20000268

00000814 <bas_notify>:
}

void bas_notify(void)
{
	if (!simulate_blvl) {
     814:	4b08      	ldr	r3, [pc, #32]	; (838 <bas_notify+0x24>)
     816:	781b      	ldrb	r3, [r3, #0]
     818:	b16b      	cbz	r3, 836 <bas_notify+0x22>
		return;
	}

	battery--;
     81a:	4a08      	ldr	r2, [pc, #32]	; (83c <bas_notify+0x28>)
	if (!battery) {
		/* Software eco battery charger */
		battery = 100;
	}

	bt_gatt_notify(NULL, &attrs[2], &battery, sizeof(battery));
     81c:	4908      	ldr	r1, [pc, #32]	; (840 <bas_notify+0x2c>)
{
	if (!simulate_blvl) {
		return;
	}

	battery--;
     81e:	7813      	ldrb	r3, [r2, #0]
     820:	3b01      	subs	r3, #1
	if (!battery) {
     822:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
		/* Software eco battery charger */
		battery = 100;
     826:	bf08      	it	eq
     828:	2364      	moveq	r3, #100	; 0x64
     82a:	7013      	strb	r3, [r2, #0]
	}

	bt_gatt_notify(NULL, &attrs[2], &battery, sizeof(battery));
     82c:	2000      	movs	r0, #0
     82e:	2301      	movs	r3, #1
     830:	4a02      	ldr	r2, [pc, #8]	; (83c <bas_notify+0x28>)
     832:	f006 b87f 	b.w	6934 <bt_gatt_notify>
     836:	4770      	bx	lr
     838:	2000082c 	.word	0x2000082c
     83c:	20000264 	.word	0x20000264
     840:	20000218 	.word	0x20000218

00000844 <console_out>:
		return c;
	}

#endif /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
     844:	280a      	cmp	r0, #10
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
     846:	b538      	push	{r3, r4, r5, lr}
     848:	4604      	mov	r4, r0
     84a:	4d07      	ldr	r5, [pc, #28]	; (868 <console_out+0x24>)
		return c;
	}

#endif /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
     84c:	d104      	bne.n	858 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
     84e:	6828      	ldr	r0, [r5, #0]
static inline unsigned char uart_poll_out(struct device *dev,
					  unsigned char out_char)
{
	const struct uart_driver_api *api = dev->driver_api;

	return api->poll_out(dev, out_char);
     850:	6843      	ldr	r3, [r0, #4]
     852:	210d      	movs	r1, #13
     854:	685b      	ldr	r3, [r3, #4]
     856:	4798      	blx	r3
	}
	uart_poll_out(uart_console_dev, c);
     858:	6828      	ldr	r0, [r5, #0]
     85a:	6843      	ldr	r3, [r0, #4]
     85c:	b2e1      	uxtb	r1, r4
     85e:	685b      	ldr	r3, [r3, #4]
     860:	4798      	blx	r3

	return c;
}
     862:	4620      	mov	r0, r4
     864:	bd38      	pop	{r3, r4, r5, pc}
     866:	bf00      	nop
     868:	20000830 	.word	0x20000830

0000086c <uart_console_hook_install>:
 */

void uart_console_hook_install(void)
{
	__stdout_hook_install(console_out);
	__printk_hook_install(console_out);
     86c:	4801      	ldr	r0, [pc, #4]	; (874 <uart_console_hook_install+0x8>)
     86e:	f000 bccf 	b.w	1210 <__printk_hook_install>
     872:	bf00      	nop
     874:	00000845 	.word	0x00000845

00000878 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
     878:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
     87a:	4804      	ldr	r0, [pc, #16]	; (88c <uart_console_init+0x14>)
     87c:	f011 fe1c 	bl	124b8 <device_get_binding>
     880:	4b03      	ldr	r3, [pc, #12]	; (890 <uart_console_init+0x18>)
     882:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
     884:	f7ff fff2 	bl	86c <uart_console_hook_install>

	return 0;
}
     888:	2000      	movs	r0, #0
     88a:	bd08      	pop	{r3, pc}
     88c:	00013b9c 	.word	0x00013b9c
     890:	20000830 	.word	0x20000830

00000894 <uart_nrf5_poll_in>:
 * @return 0 if a character arrived, -1 if the input buffer if empty.
 */

static int uart_nrf5_poll_in(struct device *dev, unsigned char *c)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
     894:	6803      	ldr	r3, [r0, #0]
     896:	689b      	ldr	r3, [r3, #8]
     898:	681b      	ldr	r3, [r3, #0]

	if (!uart->EVENTS_RXDRDY) {
     89a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
     89e:	b132      	cbz	r2, 8ae <uart_nrf5_poll_in+0x1a>
		return -1;
	}

	/* Clear the interrupt */
	uart->EVENTS_RXDRDY = 0;
     8a0:	2000      	movs	r0, #0
     8a2:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108

	/* got a character */
	*c = (unsigned char)uart->RXD;
     8a6:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
     8aa:	700b      	strb	r3, [r1, #0]

	return 0;
     8ac:	4770      	bx	lr
static int uart_nrf5_poll_in(struct device *dev, unsigned char *c)
{
	volatile struct _uart *uart = UART_STRUCT(dev);

	if (!uart->EVENTS_RXDRDY) {
		return -1;
     8ae:	f04f 30ff 	mov.w	r0, #4294967295

	/* got a character */
	*c = (unsigned char)uart->RXD;

	return 0;
}
     8b2:	4770      	bx	lr

000008b4 <uart_nrf5_poll_out>:
 * @return Sent character
 */
static unsigned char uart_nrf5_poll_out(struct device *dev,
					unsigned char c)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
     8b4:	6803      	ldr	r3, [r0, #0]
     8b6:	689b      	ldr	r3, [r3, #8]
     8b8:	681b      	ldr	r3, [r3, #0]

	/* send a character */
	uart->TXD = (u8_t)c;
     8ba:	f8c3 151c 	str.w	r1, [r3, #1308]	; 0x51c

	/* Wait for transmitter to be ready */
	while (!uart->EVENTS_TXDRDY) {
     8be:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
     8c2:	2a00      	cmp	r2, #0
     8c4:	d0fb      	beq.n	8be <uart_nrf5_poll_out+0xa>
	}

	uart->EVENTS_TXDRDY = 0;
     8c6:	2200      	movs	r2, #0
     8c8:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

	return c;
}
     8cc:	4608      	mov	r0, r1
     8ce:	4770      	bx	lr

000008d0 <uart_nrf5_err_check>:

/** Console I/O function */
static int uart_nrf5_err_check(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
     8d0:	6803      	ldr	r3, [r0, #0]
     8d2:	689b      	ldr	r3, [r3, #8]
     8d4:	681b      	ldr	r3, [r3, #0]
	u32_t error = 0;

	if (uart->EVENTS_ERROR) {
     8d6:	f8d3 0124 	ldr.w	r0, [r3, #292]	; 0x124
     8da:	b118      	cbz	r0, 8e4 <uart_nrf5_err_check+0x14>
		/* register bitfields maps to the defines in uart.h */
		error = uart->ERRORSRC;
     8dc:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480

		/* Clear the register */
		uart->ERRORSRC = error;
     8e0:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
	}

	error = error & 0x0F;

	return error;
}
     8e4:	f000 000f 	and.w	r0, r0, #15
     8e8:	4770      	bx	lr
	...

000008ec <uart_nrf5_init>:
 * @param dev UART device struct
 *
 * @return 0 on success
 */
static int uart_nrf5_init(struct device *dev)
{
     8ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	volatile struct _uart *uart = UART_STRUCT(dev);
     8ee:	6803      	ldr	r3, [r0, #0]
     8f0:	689b      	ldr	r3, [r3, #8]
 * @param dev UART device struct
 *
 * @return 0 on success
 */
static int uart_nrf5_init(struct device *dev)
{
     8f2:	4605      	mov	r5, r0
	volatile struct _uart *uart = UART_STRUCT(dev);
	struct device *gpio_dev;
	int err;

	gpio_dev = device_get_binding(CONFIG_GPIO_NRF5_P0_DEV_NAME);
     8f4:	4818      	ldr	r0, [pc, #96]	; (958 <uart_nrf5_init+0x6c>)
 *
 * @return 0 on success
 */
static int uart_nrf5_init(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
     8f6:	681c      	ldr	r4, [r3, #0]
	struct device *gpio_dev;
	int err;

	gpio_dev = device_get_binding(CONFIG_GPIO_NRF5_P0_DEV_NAME);
     8f8:	f011 fdde 	bl	124b8 <device_get_binding>
static inline int gpio_pin_configure(struct device *port, u32_t pin,
				     int flags)
{
	const struct gpio_driver_api *api = port->driver_api;

	return api->config(port, GPIO_ACCESS_BY_PIN, pin, flags);
     8fc:	6843      	ldr	r3, [r0, #4]
     8fe:	4606      	mov	r6, r0
     900:	681f      	ldr	r7, [r3, #0]
     902:	2206      	movs	r2, #6
     904:	f240 1301 	movw	r3, #257	; 0x101
     908:	2100      	movs	r1, #0
     90a:	47b8      	blx	r7
     90c:	6873      	ldr	r3, [r6, #4]
     90e:	681f      	ldr	r7, [r3, #0]
     910:	2300      	movs	r3, #0
     912:	4619      	mov	r1, r3
     914:	2208      	movs	r2, #8
     916:	4630      	mov	r0, r6
     918:	47b8      	blx	r7
				  (GPIO_DIR_OUT | GPIO_PUD_PULL_UP));
	(void) gpio_pin_configure(gpio_dev,
				  CONFIG_UART_NRF5_GPIO_RX_PIN,
				  (GPIO_DIR_IN));

	uart->PSELTXD = CONFIG_UART_NRF5_GPIO_TX_PIN;
     91a:	2306      	movs	r3, #6
     91c:	f8c4 350c 	str.w	r3, [r4, #1292]	; 0x50c
	uart->PSELRXD = CONFIG_UART_NRF5_GPIO_RX_PIN;
     920:	2308      	movs	r3, #8
     922:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
	uart->PSELCTS = CONFIG_UART_NRF5_GPIO_CTS_PIN;
	uart->CONFIG = (UART_CONFIG_HWFC_Enabled << UART_CONFIG_HWFC_Pos);

#endif /* CONFIG_UART_NRF5_FLOW_CONTROL */

	DEV_DATA(dev)->baud_rate = CONFIG_UART_NRF5_BAUD_RATE;
     926:	68ab      	ldr	r3, [r5, #8]
     928:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
     92c:	601a      	str	r2, [r3, #0]
 */

static int baudrate_set(struct device *dev,
			 u32_t baudrate, u32_t sys_clk_freq_hz)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
     92e:	682b      	ldr	r3, [r5, #0]
     930:	689b      	ldr	r3, [r3, #8]
     932:	681b      	ldr	r3, [r3, #0]
		break;
	default:
		return -EINVAL;
	}

	uart->BAUDRATE = divisor << UART_BAUDRATE_BAUDRATE_Pos;
     934:	f04f 72eb 	mov.w	r2, #30801920	; 0x1d60000
     938:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	if (err) {
		return err;
	}

	/* Enable receiver and transmitter */
	uart->ENABLE = (UART_ENABLE_ENABLE_Enabled << UART_ENABLE_ENABLE_Pos);
     93c:	2304      	movs	r3, #4
     93e:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500

	uart->EVENTS_TXDRDY = 0;
     942:	2000      	movs	r0, #0
	uart->EVENTS_RXDRDY = 0;

	uart->TASKS_STARTTX = 1;
     944:	2301      	movs	r3, #1
	}

	/* Enable receiver and transmitter */
	uart->ENABLE = (UART_ENABLE_ENABLE_Enabled << UART_ENABLE_ENABLE_Pos);

	uart->EVENTS_TXDRDY = 0;
     946:	f8c4 011c 	str.w	r0, [r4, #284]	; 0x11c
	uart->EVENTS_RXDRDY = 0;
     94a:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108

	uart->TASKS_STARTTX = 1;
     94e:	60a3      	str	r3, [r4, #8]
	uart->TASKS_STARTRX = 1;
     950:	6023      	str	r3, [r4, #0]

	dev->driver_api = &uart_nrf5_driver_api;
     952:	4b02      	ldr	r3, [pc, #8]	; (95c <uart_nrf5_init+0x70>)
     954:	606b      	str	r3, [r5, #4]
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	DEV_CFG(dev)->irq_config_func(dev);
#endif

	return 0;
}
     956:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     958:	00013ba3 	.word	0x00013ba3
     95c:	00013bcc 	.word	0x00013bcc

00000960 <rtc_compare_set>:
static void rtc_compare_set(u32_t rtc_ticks)
{
	u32_t rtc_now;

	/* Try to set CC value. We assume the procedure is always successful. */
	RTC_CC_VALUE = rtc_ticks;
     960:	4b08      	ldr	r3, [pc, #32]	; (984 <rtc_compare_set+0x24>)
     962:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
	rtc_now = RTC_COUNTER;
     966:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	 * by checking if the unsigned subtraction wraps around.
	 * If either of the above are true then instead of waiting for the CC
	 * event to trigger in the form of an interrupt, trigger it directly
	 * using the NVIC.
	 */
	if ((((rtc_ticks - rtc_now) & RTC_MASK) < RTC_MIN_DELTA) ||
     96a:	1ac0      	subs	r0, r0, r3
     96c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     970:	4b05      	ldr	r3, [pc, #20]	; (988 <rtc_compare_set+0x28>)
     972:	3802      	subs	r0, #2
     974:	4298      	cmp	r0, r3
  \details Sets the pending bit of an external interrupt.
  \param [in]      IRQn  Interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
     976:	bf82      	ittt	hi
     978:	4b04      	ldrhi	r3, [pc, #16]	; (98c <rtc_compare_set+0x2c>)
     97a:	f44f 3200 	movhi.w	r2, #131072	; 0x20000
     97e:	f8c3 2100 	strhi.w	r2, [r3, #256]	; 0x100
     982:	4770      	bx	lr
     984:	40011000 	.word	0x40011000
     988:	007ffffd 	.word	0x007ffffd
     98c:	e000e100 	.word	0xe000e100

00000990 <rtc_announce_set_next>:
 * Since this function can be preempted, we need to take some provisions to
 * announce all expected sys ticks that have passed.
 *
 */
static void rtc_announce_set_next(void)
{
     990:	b510      	push	{r4, lr}

	/* Read the RTC counter one single time in the beginning, so that an
	 * increase in the counter during this procedure leads to no race
	 * conditions.
	 */
	rtc_now = RTC_COUNTER;
     992:	4b12      	ldr	r3, [pc, #72]	; (9dc <rtc_announce_set_next+0x4c>)

	/* Calculate how many RTC ticks elapsed since the last sys tick. */
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
     994:	4c12      	ldr	r4, [pc, #72]	; (9e0 <rtc_announce_set_next+0x50>)

	/* Read the RTC counter one single time in the beginning, so that an
	 * increase in the counter during this procedure leads to no race
	 * conditions.
	 */
	rtc_now = RTC_COUNTER;
     996:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

	/* Calculate how many RTC ticks elapsed since the last sys tick. */
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
     99a:	6821      	ldr	r1, [r4, #0]
     99c:	1a40      	subs	r0, r0, r1
     99e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	/* If no sys ticks have elapsed, there is no point in incrementing the
	 * counters or announcing it.
	 */
	if (rtc_elapsed >= RTC_TICKS_PER_SYS_TICK) {
     9a2:	f5b0 7fa3 	cmp.w	r0, #326	; 0x146
     9a6:	d911      	bls.n	9cc <rtc_announce_set_next+0x3c>
		/* Calculate how many sys ticks elapsed since the last sys tick
		 * and notify the kernel if necessary.
		 */
		sys_elapsed = rtc_elapsed / RTC_TICKS_PER_SYS_TICK;

		if (sys_elapsed > expected_sys_ticks) {
     9a8:	4a0e      	ldr	r2, [pc, #56]	; (9e4 <rtc_announce_set_next+0x54>)
     9aa:	6812      	ldr	r2, [r2, #0]
	if (rtc_elapsed >= RTC_TICKS_PER_SYS_TICK) {
#ifdef CONFIG_TICKLESS_IDLE
		/* Calculate how many sys ticks elapsed since the last sys tick
		 * and notify the kernel if necessary.
		 */
		sys_elapsed = rtc_elapsed / RTC_TICKS_PER_SYS_TICK;
     9ac:	f240 1347 	movw	r3, #327	; 0x147
     9b0:	fbb0 f0f3 	udiv	r0, r0, r3
     9b4:	4290      	cmp	r0, r2
     9b6:	bf28      	it	cs
     9b8:	4610      	movcs	r0, r2

		/* Store RTC_COUNTER floored to the last sys tick. This is
		 * done, so that ISR can properly calculate that 1 sys tick
		 * has passed.
		 */
		rtc_past = (rtc_past +
     9ba:	fb03 1300 	mla	r3, r3, r0, r1
     9be:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     9c2:	6023      	str	r3, [r4, #0]
				(sys_elapsed * RTC_TICKS_PER_SYS_TICK)
			   ) & RTC_MASK;

		_sys_idle_elapsed_ticks = sys_elapsed;
     9c4:	4b08      	ldr	r3, [pc, #32]	; (9e8 <rtc_announce_set_next+0x58>)
     9c6:	6018      	str	r0, [r3, #0]
		_sys_clock_tick_announce();
     9c8:	f012 fc8c 	bl	132e4 <_nano_sys_clock_tick_announce>
	}

	/* Set the RTC to the next sys tick */
	rtc_compare_set(rtc_past + RTC_TICKS_PER_SYS_TICK);
     9cc:	6820      	ldr	r0, [r4, #0]
}
     9ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_sys_idle_elapsed_ticks = sys_elapsed;
		_sys_clock_tick_announce();
	}

	/* Set the RTC to the next sys tick */
	rtc_compare_set(rtc_past + RTC_TICKS_PER_SYS_TICK);
     9d2:	f200 1047 	addw	r0, r0, #327	; 0x147
     9d6:	f7ff bfc3 	b.w	960 <rtc_compare_set>
     9da:	bf00      	nop
     9dc:	40011000 	.word	0x40011000
     9e0:	20000834 	.word	0x20000834
     9e4:	20000838 	.word	0x20000838
     9e8:	200006e4 	.word	0x200006e4

000009ec <rtc1_nrf5_isr>:
 */
static void rtc1_nrf5_isr(void *arg)
{
	ARG_UNUSED(arg);

	RTC_CC_EVENT = 0;
     9ec:	4b02      	ldr	r3, [pc, #8]	; (9f8 <rtc1_nrf5_isr+0xc>)
     9ee:	2200      	movs	r2, #0
     9f0:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	rtc_announce_set_next();
     9f4:	f7ff bfcc 	b.w	990 <rtc_announce_set_next>
     9f8:	40011000 	.word	0x40011000

000009fc <_timer_idle_enter>:
 * @return N/A
 */
void _timer_idle_enter(s32_t sys_ticks)
{
	/* Restrict ticks to max supported by RTC without risking overflow. */
	if ((sys_ticks < 0) ||
     9fc:	f246 4335 	movw	r3, #25653	; 0x6435
	    (sys_ticks > (RTC_HALF / RTC_TICKS_PER_SYS_TICK))) {
		sys_ticks = RTC_HALF / RTC_TICKS_PER_SYS_TICK;
     a00:	4298      	cmp	r0, r3
     a02:	bf28      	it	cs
     a04:	4618      	movcs	r0, r3
	}

	expected_sys_ticks = sys_ticks;
     a06:	4b05      	ldr	r3, [pc, #20]	; (a1c <_timer_idle_enter+0x20>)
     a08:	6018      	str	r0, [r3, #0]

	/* If ticks is 0, the RTC interrupt handler will be set pending
	 * immediately, meaning that we will not go to sleep.
	 */
	rtc_compare_set(rtc_past + (sys_ticks * RTC_TICKS_PER_SYS_TICK));
     a0a:	4b05      	ldr	r3, [pc, #20]	; (a20 <_timer_idle_enter+0x24>)
     a0c:	681b      	ldr	r3, [r3, #0]
     a0e:	f240 1247 	movw	r2, #327	; 0x147
     a12:	fb02 3000 	mla	r0, r2, r0, r3
     a16:	f7ff bfa3 	b.w	960 <rtc_compare_set>
     a1a:	bf00      	nop
     a1c:	20000838 	.word	0x20000838
     a20:	20000834 	.word	0x20000834

00000a24 <_timer_idle_exit>:
 * a) Notify how many sys ticks have passed, i.e., 350 - 150 / 100 = 2.
 * b) Schedule next sys tick at 400.
 *
 */
void _timer_idle_exit(void)
{
     a24:	b508      	push	{r3, lr}
	/* Clear the event flag and interrupt in case we woke up on the RTC
	 * interrupt. No need to run the RTC ISR since everything that needs
	 * to run in the ISR will be done in this call.
	 */
	RTC_CC_EVENT = 0;
     a26:	4b07      	ldr	r3, [pc, #28]	; (a44 <_timer_idle_exit+0x20>)
     a28:	2200      	movs	r2, #0
     a2a:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
  \details Clears the pending bit of an external interrupt.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
     a2e:	4b06      	ldr	r3, [pc, #24]	; (a48 <_timer_idle_exit+0x24>)
     a30:	f44f 3200 	mov.w	r2, #131072	; 0x20000
     a34:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ClearPendingIRQ(NRF5_IRQ_RTC1_IRQn);

	rtc_announce_set_next();
     a38:	f7ff ffaa 	bl	990 <rtc_announce_set_next>

	/* After exiting idle, the kernel no longer expects more than one sys
	 * ticks to have passed when _sys_clock_tick_announce() is called.
	 */
	expected_sys_ticks = 1;
     a3c:	4b03      	ldr	r3, [pc, #12]	; (a4c <_timer_idle_exit+0x28>)
     a3e:	2201      	movs	r2, #1
     a40:	601a      	str	r2, [r3, #0]
     a42:	bd08      	pop	{r3, pc}
     a44:	40011000 	.word	0x40011000
     a48:	e000e100 	.word	0xe000e100
     a4c:	20000838 	.word	0x20000838

00000a50 <_sys_clock_driver_init>:
	RTC_CC_EVENT = 0;
	rtc_announce_set_next();
}

int _sys_clock_driver_init(struct device *device)
{
     a50:	b570      	push	{r4, r5, r6, lr}
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
     a52:	4818      	ldr	r0, [pc, #96]	; (ab4 <_sys_clock_driver_init+0x64>)
     a54:	f011 fd30 	bl	124b8 <device_get_binding>
	if (!clock) {
     a58:	b348      	cbz	r0, aae <_sys_clock_driver_init+0x5e>
static inline int clock_control_on(struct device *dev,
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->on(dev, sys);
     a5a:	6843      	ldr	r3, [r0, #4]
#ifdef CONFIG_TICKLESS_IDLE
	expected_sys_ticks = 1;
#endif /* CONFIG_TICKLESS_IDLE */

	/* TODO: replace with counter driver to access RTC */
	SYS_CLOCK_RTC->PRESCALER = 0;
     a5c:	4d16      	ldr	r5, [pc, #88]	; (ab8 <_sys_clock_driver_init+0x68>)
     a5e:	681b      	ldr	r3, [r3, #0]
     a60:	2101      	movs	r1, #1
     a62:	4798      	blx	r3
		return -1;
	}

	clock_control_on(clock, (void *)CLOCK_CONTROL_NRF5_K32SRC);

	rtc_past = 0;
     a64:	4b15      	ldr	r3, [pc, #84]	; (abc <_sys_clock_driver_init+0x6c>)
     a66:	2400      	movs	r4, #0
     a68:	601c      	str	r4, [r3, #0]

#ifdef CONFIG_TICKLESS_IDLE
	expected_sys_ticks = 1;
     a6a:	4b15      	ldr	r3, [pc, #84]	; (ac0 <_sys_clock_driver_init+0x70>)
     a6c:	2601      	movs	r6, #1
     a6e:	601e      	str	r6, [r3, #0]
#endif /* CONFIG_TICKLESS_IDLE */

	/* TODO: replace with counter driver to access RTC */
	SYS_CLOCK_RTC->PRESCALER = 0;
	SYS_CLOCK_RTC->CC[0] = RTC_TICKS_PER_SYS_TICK;
     a70:	f240 1347 	movw	r3, #327	; 0x147
#ifdef CONFIG_TICKLESS_IDLE
	expected_sys_ticks = 1;
#endif /* CONFIG_TICKLESS_IDLE */

	/* TODO: replace with counter driver to access RTC */
	SYS_CLOCK_RTC->PRESCALER = 0;
     a74:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
	SYS_CLOCK_RTC->CC[0] = RTC_TICKS_PER_SYS_TICK;
     a78:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
	SYS_CLOCK_RTC->EVTENSET = RTC_EVTENSET_COMPARE0_Msk;
     a7c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
     a80:	f8c5 3344 	str.w	r3, [r5, #836]	; 0x344
	SYS_CLOCK_RTC->INTENSET = RTC_INTENSET_COMPARE0_Msk;
     a84:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
     a88:	4b0e      	ldr	r3, [pc, #56]	; (ac4 <_sys_clock_driver_init+0x74>)

	/* Clear the event flag and possible pending interrupt */
	RTC_CC_EVENT = 0;
     a8a:	f8c5 4140 	str.w	r4, [r5, #320]	; 0x140
     a8e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
     a92:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ClearPendingIRQ(NRF5_IRQ_RTC1_IRQn);

	IRQ_CONNECT(NRF5_IRQ_RTC1_IRQn, 1, rtc1_nrf5_isr, 0, 0);
     a96:	4631      	mov	r1, r6
     a98:	4622      	mov	r2, r4
     a9a:	2011      	movs	r0, #17
     a9c:	f011 fb7c 	bl	12198 <_irq_priority_set>
	irq_enable(NRF5_IRQ_RTC1_IRQn);
     aa0:	2011      	movs	r0, #17
     aa2:	f011 fb4f 	bl	12144 <_arch_irq_enable>

	SYS_CLOCK_RTC->TASKS_CLEAR = 1;
     aa6:	60ae      	str	r6, [r5, #8]
	SYS_CLOCK_RTC->TASKS_START = 1;

	return 0;
     aa8:	4620      	mov	r0, r4

	IRQ_CONNECT(NRF5_IRQ_RTC1_IRQn, 1, rtc1_nrf5_isr, 0, 0);
	irq_enable(NRF5_IRQ_RTC1_IRQn);

	SYS_CLOCK_RTC->TASKS_CLEAR = 1;
	SYS_CLOCK_RTC->TASKS_START = 1;
     aaa:	602e      	str	r6, [r5, #0]

	return 0;
     aac:	bd70      	pop	{r4, r5, r6, pc}

	ARG_UNUSED(device);

	clock = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
	if (!clock) {
		return -1;
     aae:	f04f 30ff 	mov.w	r0, #4294967295

	SYS_CLOCK_RTC->TASKS_CLEAR = 1;
	SYS_CLOCK_RTC->TASKS_START = 1;

	return 0;
}
     ab2:	bd70      	pop	{r4, r5, r6, pc}
     ab4:	00013baa 	.word	0x00013baa
     ab8:	40011000 	.word	0x40011000
     abc:	20000834 	.word	0x20000834
     ac0:	20000838 	.word	0x20000838
     ac4:	e000e100 	.word	0xe000e100

00000ac8 <gpiote_find_channel>:
#define GPIOTE_CFG_PIN_GET(config) ((config & GPIOTE_CONFIG_PSEL_Msk) >> \
				GPIOTE_CONFIG_PSEL_Pos)

static int gpiote_find_channel(struct device *dev, u32_t pin)
{
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
     ac8:	6803      	ldr	r3, [r0, #0]
     aca:	689b      	ldr	r3, [r3, #8]
     acc:	689a      	ldr	r2, [r3, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
	int i;

	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
		if ((data->gpiote_chan_mask & BIT(i)) &&
     ace:	6883      	ldr	r3, [r0, #8]
#define GPIOTE_CFG_PIN(pin) ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PSEL_Msk)
#define GPIOTE_CFG_PIN_GET(config) ((config & GPIOTE_CONFIG_PSEL_Msk) >> \
				GPIOTE_CONFIG_PSEL_Pos)

static int gpiote_find_channel(struct device *dev, u32_t pin)
{
     ad0:	b510      	push	{r4, lr}
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
	int i;

	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
		if ((data->gpiote_chan_mask & BIT(i)) &&
     ad2:	68dc      	ldr	r4, [r3, #12]
{
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
	int i;

	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
     ad4:	2000      	movs	r0, #0
		if ((data->gpiote_chan_mask & BIT(i)) &&
     ad6:	fa24 f300 	lsr.w	r3, r4, r0
     ada:	07db      	lsls	r3, r3, #31
     adc:	d507      	bpl.n	aee <gpiote_find_channel+0x26>
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin)) {
     ade:	f500 73a2 	add.w	r3, r0, #324	; 0x144
     ae2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
	int i;

	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
		if ((data->gpiote_chan_mask & BIT(i)) &&
     ae6:	f3c3 2304 	ubfx	r3, r3, #8, #5
     aea:	428b      	cmp	r3, r1
     aec:	d004      	beq.n	af8 <gpiote_find_channel+0x30>
{
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
	int i;

	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
     aee:	3001      	adds	r0, #1
     af0:	2808      	cmp	r0, #8
     af2:	d1f0      	bne.n	ad6 <gpiote_find_channel+0xe>
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin)) {
			return i;
		}
	}

	return -ENODEV;
     af4:	f06f 0012 	mvn.w	r0, #18
}
     af8:	bd10      	pop	{r4, pc}

00000afa <gpio_nrf5_read>:
}

static int gpio_nrf5_read(struct device *dev,
			  int access_op, u32_t pin, u32_t *value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
     afa:	6800      	ldr	r0, [r0, #0]
     afc:	6880      	ldr	r0, [r0, #8]
     afe:	6800      	ldr	r0, [r0, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
     b00:	b931      	cbnz	r1, b10 <gpio_nrf5_read+0x16>
		*value = (gpio->IN >> pin) & 0x1;
     b02:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
     b06:	fa21 f202 	lsr.w	r2, r1, r2
     b0a:	f002 0201 	and.w	r2, r2, #1
     b0e:	e001      	b.n	b14 <gpio_nrf5_read+0x1a>
	} else {
		*value = gpio->IN;
     b10:	f8d0 2510 	ldr.w	r2, [r0, #1296]	; 0x510
     b14:	601a      	str	r2, [r3, #0]
	}
	return 0;
}
     b16:	2000      	movs	r0, #0
     b18:	4770      	bx	lr

00000b1a <gpio_nrf5_write>:

static int gpio_nrf5_write(struct device *dev,
			   int access_op, u32_t pin, u32_t value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
     b1a:	6800      	ldr	r0, [r0, #0]
     b1c:	6880      	ldr	r0, [r0, #8]
     b1e:	6800      	ldr	r0, [r0, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
     b20:	b941      	cbnz	r1, b34 <gpio_nrf5_write+0x1a>
     b22:	2101      	movs	r1, #1
		if (value) { /* 1 */
			gpio->OUTSET = BIT(pin);
     b24:	4091      	lsls	r1, r2
			   int access_op, u32_t pin, u32_t value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);

	if (access_op == GPIO_ACCESS_BY_PIN) {
		if (value) { /* 1 */
     b26:	b113      	cbz	r3, b2e <gpio_nrf5_write+0x14>
			gpio->OUTSET = BIT(pin);
     b28:	f8c0 1508 	str.w	r1, [r0, #1288]	; 0x508
     b2c:	e004      	b.n	b38 <gpio_nrf5_write+0x1e>
		} else { /* 0 */
			gpio->OUTCLR = BIT(pin);
     b2e:	f8c0 150c 	str.w	r1, [r0, #1292]	; 0x50c
     b32:	e001      	b.n	b38 <gpio_nrf5_write+0x1e>
		}
	} else {
		gpio->OUT = value;
     b34:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
	}
	return 0;
}
     b38:	2000      	movs	r0, #0
     b3a:	4770      	bx	lr

00000b3c <gpio_nrf5_manage_callback>:

static int gpio_nrf5_manage_callback(struct device *dev,
				    struct gpio_callback *callback, bool set)
{
     b3c:	b510      	push	{r4, lr}
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
     b3e:	6883      	ldr	r3, [r0, #8]
					 bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (set) {
     b40:	b132      	cbz	r2, b50 <gpio_nrf5_manage_callback+0x14>
 * @param node A pointer on the node to prepend
 */
static inline void sys_slist_prepend(sys_slist_t *list,
				     sys_snode_t *node)
{
	node->next = list->head;
     b42:	681a      	ldr	r2, [r3, #0]
     b44:	600a      	str	r2, [r1, #0]
	list->head = node;

	if (!list->tail) {
     b46:	685a      	ldr	r2, [r3, #4]
 */
static inline void sys_slist_prepend(sys_slist_t *list,
				     sys_snode_t *node)
{
	node->next = list->head;
	list->head = node;
     b48:	6019      	str	r1, [r3, #0]

	if (!list->tail) {
     b4a:	b9ba      	cbnz	r2, b7c <gpio_nrf5_manage_callback+0x40>
		list->tail = list->head;
     b4c:	6059      	str	r1, [r3, #4]
     b4e:	e015      	b.n	b7c <gpio_nrf5_manage_callback+0x40>
     b50:	6818      	ldr	r0, [r3, #0]
					     sys_snode_t *node)
{
	sys_snode_t *prev = NULL;
	sys_snode_t *test;

	SYS_SLIST_FOR_EACH_NODE(list, test) {
     b52:	b198      	cbz	r0, b7c <gpio_nrf5_manage_callback+0x40>
		if (test == node) {
     b54:	4281      	cmp	r1, r0
     b56:	d10e      	bne.n	b76 <gpio_nrf5_manage_callback+0x3a>
     b58:	685c      	ldr	r4, [r3, #4]
     b5a:	6808      	ldr	r0, [r1, #0]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node)
{
	if (!prev_node) {
     b5c:	b922      	cbnz	r2, b68 <gpio_nrf5_manage_callback+0x2c>
		list->head = node->next;

		/* Was node also the tail? */
		if (list->tail == node) {
     b5e:	42a1      	cmp	r1, r4
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node)
{
	if (!prev_node) {
		list->head = node->next;
     b60:	6018      	str	r0, [r3, #0]

		/* Was node also the tail? */
		if (list->tail == node) {
     b62:	d105      	bne.n	b70 <gpio_nrf5_manage_callback+0x34>
			list->tail = list->head;
     b64:	6058      	str	r0, [r3, #4]
     b66:	e003      	b.n	b70 <gpio_nrf5_manage_callback+0x34>
		}
	} else {
		prev_node->next = node->next;

		/* Was node the tail? */
		if (list->tail == node) {
     b68:	42a1      	cmp	r1, r4
		/* Was node also the tail? */
		if (list->tail == node) {
			list->tail = list->head;
		}
	} else {
		prev_node->next = node->next;
     b6a:	6010      	str	r0, [r2, #0]

		/* Was node the tail? */
		if (list->tail == node) {
			list->tail = prev_node;
     b6c:	bf08      	it	eq
     b6e:	605a      	streq	r2, [r3, #4]
		}
	}

	node->next = NULL;
     b70:	2300      	movs	r3, #0
     b72:	600b      	str	r3, [r1, #0]
     b74:	e002      	b.n	b7c <gpio_nrf5_manage_callback+0x40>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node)
{
	return node->next;
     b76:	4602      	mov	r2, r0
     b78:	6800      	ldr	r0, [r0, #0]
     b7a:	e7ea      	b.n	b52 <gpio_nrf5_manage_callback+0x16>

	_gpio_manage_callback(&data->callbacks, callback, set);

	return 0;
}
     b7c:	2000      	movs	r0, #0
     b7e:	bd10      	pop	{r4, pc}

00000b80 <gpio_nrf5_enable_callback>:


static int gpio_nrf5_enable_callback(struct device *dev,
				    int access_op, u32_t pin)
{
     b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     b82:	4614      	mov	r4, r2
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
     b84:	6802      	ldr	r2, [r0, #0]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
     b86:	6887      	ldr	r7, [r0, #8]


static int gpio_nrf5_enable_callback(struct device *dev,
				    int access_op, u32_t pin)
{
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
     b88:	6892      	ldr	r2, [r2, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
	int i;

	if (access_op == GPIO_ACCESS_BY_PIN) {
     b8a:	460d      	mov	r5, r1


static int gpio_nrf5_enable_callback(struct device *dev,
				    int access_op, u32_t pin)
{
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
     b8c:	6896      	ldr	r6, [r2, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
	int i;

	if (access_op == GPIO_ACCESS_BY_PIN) {
     b8e:	b9a1      	cbnz	r1, bba <gpio_nrf5_enable_callback+0x3a>

		i = gpiote_find_channel(dev, pin);
     b90:	4621      	mov	r1, r4
     b92:	f7ff ff99 	bl	ac8 <gpiote_find_channel>
		if (i < 0) {
     b96:	2800      	cmp	r0, #0
     b98:	db11      	blt.n	bbe <gpio_nrf5_enable_callback+0x3e>
			return i;
		}

		data->pin_callback_enables |= BIT(pin);
     b9a:	68ba      	ldr	r2, [r7, #8]
     b9c:	2301      	movs	r3, #1
     b9e:	fa03 f404 	lsl.w	r4, r3, r4
     ba2:	4314      	orrs	r4, r2
		/* clear event before any interrupt triggers */
		gpiote->EVENTS_IN[i] = 0;
     ba4:	f100 0240 	add.w	r2, r0, #64	; 0x40
		/* enable interrupt for the GPIOTE channel */
		gpiote->INTENSET = BIT(i);
     ba8:	fa03 f000 	lsl.w	r0, r3, r0
		i = gpiote_find_channel(dev, pin);
		if (i < 0) {
			return i;
		}

		data->pin_callback_enables |= BIT(pin);
     bac:	60bc      	str	r4, [r7, #8]
		/* clear event before any interrupt triggers */
		gpiote->EVENTS_IN[i] = 0;
     bae:	f846 5022 	str.w	r5, [r6, r2, lsl #2]
		/* enable interrupt for the GPIOTE channel */
		gpiote->INTENSET = BIT(i);
     bb2:	f8c6 0304 	str.w	r0, [r6, #772]	; 0x304
	} else {
		return -ENOTSUP;
	}

	return 0;
     bb6:	4628      	mov	r0, r5
     bb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		/* clear event before any interrupt triggers */
		gpiote->EVENTS_IN[i] = 0;
		/* enable interrupt for the GPIOTE channel */
		gpiote->INTENSET = BIT(i);
	} else {
		return -ENOTSUP;
     bba:	f06f 0022 	mvn.w	r0, #34	; 0x22
	}

	return 0;
}
     bbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00000bc0 <gpio_nrf5_disable_callback>:


static int gpio_nrf5_disable_callback(struct device *dev,
				     int access_op, u32_t pin)
{
     bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     bc2:	4614      	mov	r4, r2
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
     bc4:	6802      	ldr	r2, [r0, #0]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
     bc6:	6886      	ldr	r6, [r0, #8]


static int gpio_nrf5_disable_callback(struct device *dev,
				     int access_op, u32_t pin)
{
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
     bc8:	6892      	ldr	r2, [r2, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
	int i;

	if (access_op == GPIO_ACCESS_BY_PIN) {
     bca:	460d      	mov	r5, r1


static int gpio_nrf5_disable_callback(struct device *dev,
				     int access_op, u32_t pin)
{
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
     bcc:	6897      	ldr	r7, [r2, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
	int i;

	if (access_op == GPIO_ACCESS_BY_PIN) {
     bce:	b989      	cbnz	r1, bf4 <gpio_nrf5_disable_callback+0x34>
		i = gpiote_find_channel(dev, pin);
     bd0:	4621      	mov	r1, r4
     bd2:	f7ff ff79 	bl	ac8 <gpiote_find_channel>
		if (i < 0) {
     bd6:	2800      	cmp	r0, #0
     bd8:	db0e      	blt.n	bf8 <gpio_nrf5_disable_callback+0x38>
			return i;
		}

		data->pin_callback_enables &= ~(BIT(pin));
     bda:	68b2      	ldr	r2, [r6, #8]
     bdc:	2301      	movs	r3, #1
     bde:	fa03 f404 	lsl.w	r4, r3, r4
		/* disable interrupt for the GPIOTE channel */
		gpiote->INTENCLR = BIT(i);
     be2:	fa03 f000 	lsl.w	r0, r3, r0
		i = gpiote_find_channel(dev, pin);
		if (i < 0) {
			return i;
		}

		data->pin_callback_enables &= ~(BIT(pin));
     be6:	ea22 0404 	bic.w	r4, r2, r4
     bea:	60b4      	str	r4, [r6, #8]
		/* disable interrupt for the GPIOTE channel */
		gpiote->INTENCLR = BIT(i);
     bec:	f8c7 0308 	str.w	r0, [r7, #776]	; 0x308
	} else {
		return -ENOTSUP;
	}

	return 0;
     bf0:	4628      	mov	r0, r5
     bf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

		data->pin_callback_enables &= ~(BIT(pin));
		/* disable interrupt for the GPIOTE channel */
		gpiote->INTENCLR = BIT(i);
	} else {
		return -ENOTSUP;
     bf4:	f06f 0022 	mvn.w	r0, #34	; 0x22
	}

	return 0;
}
     bf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00000bfa <gpio_nrf5_P0_init>:
		    &gpio_data_P0, &gpio_nrf5_P0_cfg,
		    POST_KERNEL, CONFIG_KERNEL_INIT_PRIORITY_DEFAULT,
		    &gpio_nrf5_drv_api_funcs);

static int gpio_nrf5_P0_init(struct device *dev)
{
     bfa:	b508      	push	{r3, lr}
	IRQ_CONNECT(NRF5_IRQ_GPIOTE_IRQn, CONFIG_GPIO_NRF5_PORT_P0_PRI,
     bfc:	2200      	movs	r2, #0
     bfe:	2101      	movs	r1, #1
     c00:	2006      	movs	r0, #6
     c02:	f011 fac9 	bl	12198 <_irq_priority_set>
		    gpio_nrf5_port_isr, DEVICE_GET(gpio_nrf5_P0), 0);

	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
     c06:	2006      	movs	r0, #6
     c08:	f011 fa9c 	bl	12144 <_arch_irq_enable>

	return 0;
}
     c0c:	2000      	movs	r0, #0
     c0e:	bd08      	pop	{r3, pc}

00000c10 <gpio_nrf5_port_isr>:
 * @param dev Pointer to device structure for driver instance
 *
 * @return N/A
 */
static void gpio_nrf5_port_isr(void *arg)
{
     c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct device *dev = arg;
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
     c12:	6803      	ldr	r3, [r0, #0]
 * @param dev Pointer to device structure for driver instance
 *
 * @return N/A
 */
static void gpio_nrf5_port_isr(void *arg)
{
     c14:	4606      	mov	r6, r0
	struct device *dev = arg;
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
     c16:	689b      	ldr	r3, [r3, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
     c18:	68b4      	ldr	r4, [r6, #8]
 * @return N/A
 */
static void gpio_nrf5_port_isr(void *arg)
{
	struct device *dev = arg;
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
     c1a:	6898      	ldr	r0, [r3, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
	u32_t enabled_int, int_status = 0;
	int i;

	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
     c1c:	2300      	movs	r3, #0
static void gpio_nrf5_port_isr(void *arg)
{
	struct device *dev = arg;
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
	u32_t enabled_int, int_status = 0;
     c1e:	461d      	mov	r5, r3
	int i;

	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
		if (gpiote->EVENTS_IN[i]) {
			gpiote->EVENTS_IN[i] = 0;
     c20:	461f      	mov	r7, r3
			int_status |= BIT(GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]));
     c22:	f04f 0e01 	mov.w	lr, #1
     c26:	eb00 0283 	add.w	r2, r0, r3, lsl #2
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
	u32_t enabled_int, int_status = 0;
	int i;

	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
		if (gpiote->EVENTS_IN[i]) {
     c2a:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
     c2e:	b141      	cbz	r1, c42 <gpio_nrf5_port_isr+0x32>
			gpiote->EVENTS_IN[i] = 0;
     c30:	f8c2 7100 	str.w	r7, [r2, #256]	; 0x100
			int_status |= BIT(GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]));
     c34:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
     c38:	f3c1 2104 	ubfx	r1, r1, #8, #5
     c3c:	fa0e f101 	lsl.w	r1, lr, r1
     c40:	430d      	orrs	r5, r1
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
	u32_t enabled_int, int_status = 0;
	int i;

	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
     c42:	3301      	adds	r3, #1
     c44:	2b08      	cmp	r3, #8
     c46:	d1ee      	bne.n	c26 <gpio_nrf5_port_isr+0x16>
			gpiote->EVENTS_IN[i] = 0;
			int_status |= BIT(GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]));
		}
	}

	enabled_int = int_status & data->pin_callback_enables;
     c48:	68a3      	ldr	r3, [r4, #8]

	irq_disable(NRF5_IRQ_GPIOTE_IRQn);
     c4a:	2006      	movs	r0, #6
			gpiote->EVENTS_IN[i] = 0;
			int_status |= BIT(GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]));
		}
	}

	enabled_int = int_status & data->pin_callback_enables;
     c4c:	401d      	ands	r5, r3

	irq_disable(NRF5_IRQ_GPIOTE_IRQn);
     c4e:	f011 fa87 	bl	12160 <_arch_irq_disable>
     c52:	6824      	ldr	r4, [r4, #0]
					struct device *port,
					u32_t pins)
{
	struct gpio_callback *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(list, cb, node) {
     c54:	b924      	cbnz	r4, c60 <gpio_nrf5_port_isr+0x50>

	/* Call the registered callbacks */
	_gpio_fire_callbacks(&data->callbacks, (struct device *)dev,
			     enabled_int);

	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
     c56:	2006      	movs	r0, #6
}
     c58:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}

	/* Call the registered callbacks */
	_gpio_fire_callbacks(&data->callbacks, (struct device *)dev,
			     enabled_int);

	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
     c5c:	f011 ba72 	b.w	12144 <_arch_irq_enable>
		if (cb->pin_mask & pins) {
     c60:	68a3      	ldr	r3, [r4, #8]
     c62:	421d      	tst	r5, r3
     c64:	d0f5      	beq.n	c52 <gpio_nrf5_port_isr+0x42>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, pins);
     c66:	6863      	ldr	r3, [r4, #4]
     c68:	462a      	mov	r2, r5
     c6a:	4621      	mov	r1, r4
     c6c:	4630      	mov	r0, r6
     c6e:	4798      	blx	r3
     c70:	e7ef      	b.n	c52 <gpio_nrf5_port_isr+0x42>
	...

00000c74 <gpio_nrf5_config>:
/**
 * @brief Configure pin or port
 */
static int gpio_nrf5_config(struct device *dev,
			    int access_op, u32_t pin, int flags)
{
     c74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     c78:	4614      	mov	r4, r2
		{GPIO_DRIVE_S0S1, GPIO_DRIVE_S0H1, 0, GPIO_DRIVE_S0D1},
		{GPIO_DRIVE_H0S1, GPIO_DRIVE_H0H1, 0, GPIO_DRIVE_H0D1},
		{0, 0, 0, 0},
		{GPIO_DRIVE_D0S1, GPIO_DRIVE_D0H1, 0, GPIO_DRIVE_S0S1}
	};
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
     c7a:	6802      	ldr	r2, [r0, #0]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
     c7c:	6887      	ldr	r7, [r0, #8]
		{GPIO_DRIVE_S0S1, GPIO_DRIVE_S0H1, 0, GPIO_DRIVE_S0D1},
		{GPIO_DRIVE_H0S1, GPIO_DRIVE_H0H1, 0, GPIO_DRIVE_H0D1},
		{0, 0, 0, 0},
		{GPIO_DRIVE_D0S1, GPIO_DRIVE_D0H1, 0, GPIO_DRIVE_S0S1}
	};
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
     c7e:	6892      	ldr	r2, [r2, #8]
/**
 * @brief Configure pin or port
 */
static int gpio_nrf5_config(struct device *dev,
			    int access_op, u32_t pin, int flags)
{
     c80:	4680      	mov	r8, r0
		{GPIO_DRIVE_S0S1, GPIO_DRIVE_S0H1, 0, GPIO_DRIVE_S0D1},
		{GPIO_DRIVE_H0S1, GPIO_DRIVE_H0H1, 0, GPIO_DRIVE_H0D1},
		{0, 0, 0, 0},
		{GPIO_DRIVE_D0S1, GPIO_DRIVE_D0H1, 0, GPIO_DRIVE_S0S1}
	};
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
     c82:	6895      	ldr	r5, [r2, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
     c84:	6810      	ldr	r0, [r2, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
     c86:	b119      	cbz	r1, c90 <gpio_nrf5_config+0x1c>
					      pull |
					      GPIO_INPUT_CONNECT |
					      GPIO_DIR_INPUT);
		}
	} else {
		return -ENOTSUP;
     c88:	f06f 0022 	mvn.w	r0, #34	; 0x22
     c8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		int ds_high = (flags & GPIO_DS_HIGH_MASK) >> GPIO_DS_HIGH_POS;

		__ASSERT_NO_MSG(ds_low != 2);
		__ASSERT_NO_MSG(ds_high != 2);

		if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
     c90:	f403 7140 	and.w	r1, r3, #768	; 0x300
     c94:	f5b1 7f80 	cmp.w	r1, #256	; 0x100

	if (access_op == GPIO_ACCESS_BY_PIN) {

		/* Check pull */
		u8_t pull = GPIO_PULL_DISABLE;
		int ds_low = (flags & GPIO_DS_LOW_MASK) >> GPIO_DS_LOW_POS;
     c98:	f3c3 3201 	ubfx	r2, r3, #12, #2
		int ds_high = (flags & GPIO_DS_HIGH_MASK) >> GPIO_DS_HIGH_POS;
     c9c:	f3c3 3681 	ubfx	r6, r3, #14, #2

		__ASSERT_NO_MSG(ds_low != 2);
		__ASSERT_NO_MSG(ds_high != 2);

		if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
     ca0:	d005      	beq.n	cae <gpio_nrf5_config+0x3a>
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);

	if (access_op == GPIO_ACCESS_BY_PIN) {

		/* Check pull */
		u8_t pull = GPIO_PULL_DISABLE;
     ca2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
     ca6:	bf0c      	ite	eq
     ca8:	2104      	moveq	r1, #4
     caa:	2100      	movne	r1, #0
     cac:	e000      	b.n	cb0 <gpio_nrf5_config+0x3c>

		__ASSERT_NO_MSG(ds_low != 2);
		__ASSERT_NO_MSG(ds_high != 2);

		if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
			pull = GPIO_PULL_UP;
     cae:	210c      	movs	r1, #12
		} else if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_DOWN) {
			pull = GPIO_PULL_DOWN;
		}

		if ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT) {
     cb0:	f013 0f01 	tst.w	r3, #1
     cb4:	f8df 90bc 	ldr.w	r9, [pc, #188]	; d74 <gpio_nrf5_config+0x100>
     cb8:	ea4f 0282 	mov.w	r2, r2, lsl #2
     cbc:	f504 7ee0 	add.w	lr, r4, #448	; 0x1c0
     cc0:	d016      	beq.n	cf0 <gpio_nrf5_config+0x7c>
			/* Set initial output value */
			if (pull == GPIO_PULL_UP) {
     cc2:	290c      	cmp	r1, #12
     cc4:	d106      	bne.n	cd4 <gpio_nrf5_config+0x60>
				gpio->OUTSET = BIT(pin);
     cc6:	f04f 0c01 	mov.w	ip, #1
     cca:	fa0c fc04 	lsl.w	ip, ip, r4
     cce:	f8c0 c508 	str.w	ip, [r0, #1288]	; 0x508
     cd2:	e007      	b.n	ce4 <gpio_nrf5_config+0x70>
			} else if (pull == GPIO_PULL_DOWN) {
     cd4:	2904      	cmp	r1, #4
				gpio->OUTCLR = BIT(pin);
     cd6:	bf02      	ittt	eq
     cd8:	f04f 0c01 	moveq.w	ip, #1
     cdc:	fa0c fc04 	lsleq.w	ip, ip, r4
     ce0:	f8c0 c50c 	streq.w	ip, [r0, #1292]	; 0x50c
			}
			/* Config as output */
			gpio->PIN_CNF[pin] = (GPIO_SENSE_DISABLE |
					      drive_strength[ds_low][ds_high] |
     ce4:	4432      	add	r2, r6
					      pull |
					      GPIO_INPUT_DISCONNECT |
     ce6:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
     cea:	f042 0203 	orr.w	r2, r2, #3
     cee:	e002      	b.n	cf6 <gpio_nrf5_config+0x82>
					      GPIO_DIR_OUTPUT);
		} else {
			/* Config as input */
			gpio->PIN_CNF[pin] = (GPIO_SENSE_DISABLE |
					      drive_strength[ds_low][ds_high] |
     cf0:	4432      	add	r2, r6
					      pull |
					      GPIO_INPUT_CONNECT |
     cf2:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
     cf6:	4311      	orrs	r1, r2
					      pull |
					      GPIO_INPUT_DISCONNECT |
					      GPIO_DIR_OUTPUT);
		} else {
			/* Config as input */
			gpio->PIN_CNF[pin] = (GPIO_SENSE_DISABLE |
     cf8:	f840 102e 	str.w	r1, [r0, lr, lsl #2]
		}
	} else {
		return -ENOTSUP;
	}

	if (flags & GPIO_INT) {
     cfc:	f013 0002 	ands.w	r0, r3, #2
     d00:	d035      	beq.n	d6e <gpio_nrf5_config+0xfa>
		u32_t config = 0;

		if (flags & GPIO_INT_EDGE) {
     d02:	0699      	lsls	r1, r3, #26
     d04:	d5c0      	bpl.n	c88 <gpio_nrf5_config+0x14>
			if (flags & GPIO_INT_DOUBLE_EDGE) {
     d06:	065a      	lsls	r2, r3, #25
     d08:	d407      	bmi.n	d1a <gpio_nrf5_config+0xa6>
				config |= GPIOTE_CFG_POL_TOGG;
			} else if (flags & GPIO_INT_ACTIVE_HIGH) {
				config |= GPIOTE_CFG_POL_L2H;
			} else {
				config |= GPIOTE_CFG_POL_H2L;
     d0a:	f013 0f04 	tst.w	r3, #4
     d0e:	bf14      	ite	ne
     d10:	f44f 3680 	movne.w	r6, #65536	; 0x10000
     d14:	f44f 3600 	moveq.w	r6, #131072	; 0x20000
     d18:	e001      	b.n	d1e <gpio_nrf5_config+0xaa>
	if (flags & GPIO_INT) {
		u32_t config = 0;

		if (flags & GPIO_INT_EDGE) {
			if (flags & GPIO_INT_DOUBLE_EDGE) {
				config |= GPIOTE_CFG_POL_TOGG;
     d1a:	f44f 3640 	mov.w	r6, #196608	; 0x30000
			}
		} else { /* GPIO_INT_LEVEL */
			/*@todo: use SENSE for this? */
			return -ENOTSUP;
		}
		if (__builtin_popcount(data->gpiote_chan_mask) ==
     d1e:	68f8      	ldr	r0, [r7, #12]
     d20:	f7ff fa90 	bl	244 <__popcountsi2>
     d24:	2808      	cmp	r0, #8
     d26:	d020      	beq.n	d6a <gpio_nrf5_config+0xf6>
				GPIOTE_CHAN_COUNT) {
			return -EIO;
		}

		/* check if already allocated to replace */
		int i = gpiote_find_channel(dev, pin);
     d28:	4621      	mov	r1, r4
     d2a:	4640      	mov	r0, r8
     d2c:	f7ff fecc 	bl	ac8 <gpiote_find_channel>

		if (i < 0) {
     d30:	2800      	cmp	r0, #0
     d32:	68fa      	ldr	r2, [r7, #12]
     d34:	da08      	bge.n	d48 <gpio_nrf5_config+0xd4>
			/* allocate a GPIOTE channel */
			i = __builtin_ffs(~(data->gpiote_chan_mask)) - 1;
     d36:	43d3      	mvns	r3, r2
     d38:	fa93 f0a3 	rbit	r0, r3
     d3c:	2b00      	cmp	r3, #0
     d3e:	fab0 f080 	clz	r0, r0
     d42:	bf08      	it	eq
     d44:	f04f 30ff 	moveq.w	r0, #4294967295

		data->gpiote_chan_mask |= BIT(i);

		/* configure GPIOTE channel */
		config |= GPIOTE_CFG_EVT;
		config |= GPIOTE_CFG_PIN(pin);
     d48:	0224      	lsls	r4, r4, #8
		if (i < 0) {
			/* allocate a GPIOTE channel */
			i = __builtin_ffs(~(data->gpiote_chan_mask)) - 1;
		}

		data->gpiote_chan_mask |= BIT(i);
     d4a:	2301      	movs	r3, #1

		/* configure GPIOTE channel */
		config |= GPIOTE_CFG_EVT;
		config |= GPIOTE_CFG_PIN(pin);
     d4c:	f404 54f8 	and.w	r4, r4, #7936	; 0x1f00
		if (i < 0) {
			/* allocate a GPIOTE channel */
			i = __builtin_ffs(~(data->gpiote_chan_mask)) - 1;
		}

		data->gpiote_chan_mask |= BIT(i);
     d50:	4083      	lsls	r3, r0

		/* configure GPIOTE channel */
		config |= GPIOTE_CFG_EVT;
		config |= GPIOTE_CFG_PIN(pin);
     d52:	f044 0401 	orr.w	r4, r4, #1

		gpiote->CONFIG[i] = config;
     d56:	f500 70a2 	add.w	r0, r0, #324	; 0x144
		if (i < 0) {
			/* allocate a GPIOTE channel */
			i = __builtin_ffs(~(data->gpiote_chan_mask)) - 1;
		}

		data->gpiote_chan_mask |= BIT(i);
     d5a:	4313      	orrs	r3, r2

		/* configure GPIOTE channel */
		config |= GPIOTE_CFG_EVT;
		config |= GPIOTE_CFG_PIN(pin);
     d5c:	4334      	orrs	r4, r6
		if (i < 0) {
			/* allocate a GPIOTE channel */
			i = __builtin_ffs(~(data->gpiote_chan_mask)) - 1;
		}

		data->gpiote_chan_mask |= BIT(i);
     d5e:	60fb      	str	r3, [r7, #12]

		/* configure GPIOTE channel */
		config |= GPIOTE_CFG_EVT;
		config |= GPIOTE_CFG_PIN(pin);

		gpiote->CONFIG[i] = config;
     d60:	f845 4020 	str.w	r4, [r5, r0, lsl #2]
	}


	return 0;
     d64:	2000      	movs	r0, #0
     d66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			/*@todo: use SENSE for this? */
			return -ENOTSUP;
		}
		if (__builtin_popcount(data->gpiote_chan_mask) ==
				GPIOTE_CHAN_COUNT) {
			return -EIO;
     d6a:	f06f 0004 	mvn.w	r0, #4
		gpiote->CONFIG[i] = config;
	}


	return 0;
}
     d6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     d72:	bf00      	nop
     d74:	00013be0 	.word	0x00013be0

00000d78 <_m16src_stop>:
		return -EINPROGRESS;
	}
}

static int _m16src_stop(struct device *dev, clock_control_subsys_t sub_system)
{
     d78:	b510      	push	{r4, lr}
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M)
	unsigned int tmp;

	__asm__ volatile(
     d7a:	f04f 0220 	mov.w	r2, #32
     d7e:	f3ef 8311 	mrs	r3, BASEPRI
     d82:	f382 8811 	msr	BASEPRI, r2
	/* Test for started resource, if so, decrement reference and acquire
	 * resource guard.
	 */
	imask = irq_lock();

	if (!m16src_ref) {
     d86:	4911      	ldr	r1, [pc, #68]	; (dcc <_m16src_stop+0x54>)
     d88:	780c      	ldrb	r4, [r1, #0]
     d8a:	b924      	cbnz	r4, d96 <_m16src_stop+0x1e>
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
     d8c:	f383 8811 	msr	BASEPRI, r3
		irq_unlock(imask);
		return -EALREADY;
     d90:	f06f 0044 	mvn.w	r0, #68	; 0x44
     d94:	bd10      	pop	{r4, pc}
	}

	if (--m16src_ref) {
     d96:	1e62      	subs	r2, r4, #1
     d98:	b2d2      	uxtb	r2, r2
     d9a:	700a      	strb	r2, [r1, #0]
     d9c:	b11a      	cbz	r2, da6 <_m16src_stop+0x2e>
     d9e:	f383 8811 	msr	BASEPRI, r3
		irq_unlock(imask);
		return 0;
     da2:	2000      	movs	r0, #0
     da4:	bd10      	pop	{r4, pc}
	}

	if (m16src_grd) {
     da6:	4a0a      	ldr	r2, [pc, #40]	; (dd0 <_m16src_stop+0x58>)
     da8:	7810      	ldrb	r0, [r2, #0]
     daa:	b128      	cbz	r0, db8 <_m16src_stop+0x40>
		m16src_ref++;
     dac:	700c      	strb	r4, [r1, #0]
     dae:	f383 8811 	msr	BASEPRI, r3
		irq_unlock(imask);
		return -EAGAIN;
     db2:	f06f 000a 	mvn.w	r0, #10
     db6:	bd10      	pop	{r4, pc}
	}

	m16src_grd = 1;
     db8:	2101      	movs	r1, #1
     dba:	7011      	strb	r1, [r2, #0]
     dbc:	f383 8811 	msr	BASEPRI, r3

	irq_unlock(imask);

	/* re-entrancy and mult-context safe, and reference count is zero, */

	NRF_CLOCK->TASKS_HFCLKSTOP = 1;
     dc0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     dc4:	6059      	str	r1, [r3, #4]

	/* release resource guard */
	m16src_grd = 0;
     dc6:	7010      	strb	r0, [r2, #0]

	return 0;
}
     dc8:	bd10      	pop	{r4, pc}
     dca:	bf00      	nop
     dcc:	2000084c 	.word	0x2000084c
     dd0:	2000084d 	.word	0x2000084d

00000dd4 <_clock_control_init>:
		}
	}
}

static int _clock_control_init(struct device *dev)
{
     dd4:	b508      	push	{r3, lr}
	 * for 16 MHz clock. The vector is also shared for other power related
	 * features. Hence, design a better way to init IRQISR when adding
	 * power peripheral driver and/or new SoC series.
	 * NOTE: Currently the operations here are idempotent.
	 */
	IRQ_CONNECT(NRF5_IRQ_POWER_CLOCK_IRQn,
     dd6:	2200      	movs	r2, #0
     dd8:	4610      	mov	r0, r2
     dda:	2101      	movs	r1, #1
     ddc:	f011 f9dc 	bl	12198 <_irq_priority_set>
		    CONFIG_CLOCK_CONTROL_NRF5_IRQ_PRIORITY,
		    _power_clock_isr, 0, 0);

	irq_enable(POWER_CLOCK_IRQn);
     de0:	2000      	movs	r0, #0
     de2:	f011 f9af 	bl	12144 <_arch_irq_enable>

	return 0;
}
     de6:	2000      	movs	r0, #0
     de8:	bd08      	pop	{r3, pc}
	...

00000dec <_m16src_start>:

static u8_t m16src_ref;
static u8_t m16src_grd;

static int _m16src_start(struct device *dev, clock_control_subsys_t sub_system)
{
     dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M)
	unsigned int tmp;

	__asm__ volatile(
     dee:	f04f 0220 	mov.w	r2, #32
     df2:	f3ef 8311 	mrs	r3, BASEPRI
     df6:	f382 8811 	msr	BASEPRI, r2

	/* Test for reference increment from zero and resource guard not taken.
	 */
	imask = irq_lock();

	if (m16src_ref++) {
     dfa:	4a26      	ldr	r2, [pc, #152]	; (e94 <_m16src_start+0xa8>)
     dfc:	7810      	ldrb	r0, [r2, #0]
     dfe:	1c44      	adds	r4, r0, #1
     e00:	7014      	strb	r4, [r2, #0]
     e02:	b110      	cbz	r0, e0a <_m16src_start+0x1e>
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
     e04:	f383 8811 	msr	BASEPRI, r3
     e08:	e039      	b.n	e7e <_m16src_start+0x92>
		irq_unlock(imask);
		goto hf_already_started;
	}

	if (m16src_grd) {
     e0a:	4d23      	ldr	r5, [pc, #140]	; (e98 <_m16src_start+0xac>)
     e0c:	782f      	ldrb	r7, [r5, #0]
     e0e:	b12f      	cbz	r7, e1c <_m16src_start+0x30>
		m16src_ref--;
     e10:	7010      	strb	r0, [r2, #0]
     e12:	f383 8811 	msr	BASEPRI, r3
		irq_unlock(imask);
		return -EAGAIN;
     e16:	f06f 000a 	mvn.w	r0, #10
     e1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	m16src_grd = 1;
     e1c:	2601      	movs	r6, #1
     e1e:	702e      	strb	r6, [r5, #0]
     e20:	f383 8811 	msr	BASEPRI, r3
     e24:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000

	irq_unlock(imask);

	/* If blocking then spin-wait in CPU sleep until 16MHz clock settles. */
	blocking = POINTER_TO_UINT(sub_system);
	if (blocking) {
     e28:	b321      	cbz	r1, e74 <_m16src_start+0x88>
		u32_t intenset;

		irq_disable(POWER_CLOCK_IRQn);
     e2a:	4638      	mov	r0, r7
     e2c:	f011 f998 	bl	12160 <_arch_irq_disable>

		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
     e30:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100

		intenset = NRF_CLOCK->INTENSET;
     e34:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
     e38:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304

		NRF_CLOCK->TASKS_HFCLKSTART = 1;
     e3c:	6026      	str	r6, [r4, #0]

		while (NRF_CLOCK->EVENTS_HFCLKSTARTED == 0) {
     e3e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
     e42:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     e46:	b919      	cbnz	r1, e50 <_m16src_start+0x64>
  \details Wait For Event is a hint instruction that permits the processor to enter
    a low-power state until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
{
  __ASM volatile ("wfe");
     e48:	bf20      	wfe
  \brief   Send Event
  \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 */
__attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
{
  __ASM volatile ("sev");
     e4a:	bf40      	sev
  \details Wait For Event is a hint instruction that permits the processor to enter
    a low-power state until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
{
  __ASM volatile ("wfe");
     e4c:	bf20      	wfe
     e4e:	e7f6      	b.n	e3e <_m16src_start+0x52>
			__WFE();
		}

		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;

		if (!(intenset & CLOCK_INTENSET_HFCLKSTARTED_Msk)) {
     e50:	f013 0f01 	tst.w	r3, #1
			__WFE();
			__SEV();
			__WFE();
		}

		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
     e54:	f04f 0100 	mov.w	r1, #0
     e58:	f04f 0301 	mov.w	r3, #1
     e5c:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100

		if (!(intenset & CLOCK_INTENSET_HFCLKSTARTED_Msk)) {
			NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
     e60:	bf08      	it	eq
     e62:	f8c2 3308 	streq.w	r3, [r2, #776]	; 0x308
     e66:	4a0d      	ldr	r2, [pc, #52]	; (e9c <_m16src_start+0xb0>)
		}

		NVIC_ClearPendingIRQ(POWER_CLOCK_IRQn);

		irq_enable(POWER_CLOCK_IRQn);
     e68:	2000      	movs	r0, #0
     e6a:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
     e6e:	f011 f969 	bl	12144 <_arch_irq_enable>
     e72:	e002      	b.n	e7a <_m16src_start+0x8e>
	} else {
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
     e74:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100

		NRF_CLOCK->TASKS_HFCLKSTART = 1;
     e78:	6026      	str	r6, [r4, #0]
	}

	/* release resource guard */
	m16src_grd = 0;
     e7a:	2300      	movs	r3, #0
     e7c:	702b      	strb	r3, [r5, #0]
	/* rollover should not happen as start and stop shall be
	 * called in pairs.
	 */
	__ASSERT_NO_MSG(m16src_ref);

	if (NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) {
     e7e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     e82:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		return 0;
	} else {
		return -EINPROGRESS;
     e86:	f413 3f80 	tst.w	r3, #65536	; 0x10000
     e8a:	bf14      	ite	ne
     e8c:	2000      	movne	r0, #0
     e8e:	f06f 0043 	mvneq.w	r0, #67	; 0x43
	}
}
     e92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     e94:	2000084c 	.word	0x2000084c
     e98:	2000084d 	.word	0x2000084d
     e9c:	e000e100 	.word	0xe000e100

00000ea0 <_power_clock_isr>:

	return !(NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk);
}

static void _power_clock_isr(void *arg)
{
     ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	u8_t pof, hf_intenset, hf_stat, hf, lf, done, ctto;
	struct device *dev = arg;

	pof = (NRF_POWER->EVENTS_POFWARN != 0);
     ea2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000

	return !(NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk);
}

static void _power_clock_isr(void *arg)
{
     ea6:	4605      	mov	r5, r0
	u8_t pof, hf_intenset, hf_stat, hf, lf, done, ctto;
	struct device *dev = arg;

	pof = (NRF_POWER->EVENTS_POFWARN != 0);
     ea8:	f8d3 e108 	ldr.w	lr, [r3, #264]	; 0x108

	hf_intenset =
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
     eac:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	hf_stat = ((NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) != 0);
     eb0:	f8d3 440c 	ldr.w	r4, [r3, #1036]	; 0x40c
	hf = (NRF_CLOCK->EVENTS_HFCLKSTARTED != 0);
     eb4:	f8d3 7100 	ldr.w	r7, [r3, #256]	; 0x100

	lf = (NRF_CLOCK->EVENTS_LFCLKSTARTED != 0);
     eb8:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104

	done = (NRF_CLOCK->EVENTS_DONE != 0);
     ebc:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
	ctto = (NRF_CLOCK->EVENTS_CTTO != 0);
     ec0:	f8d3 6110 	ldr.w	r6, [r3, #272]	; 0x110
	struct device *dev = arg;

	pof = (NRF_POWER->EVENTS_POFWARN != 0);

	hf_intenset =
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
     ec4:	f002 0201 	and.w	r2, r2, #1
	done = (NRF_CLOCK->EVENTS_DONE != 0);
	ctto = (NRF_CLOCK->EVENTS_CTTO != 0);

	__ASSERT_NO_MSG(pof || hf || hf_intenset || lf || done || ctto);

	if (pof) {
     ec8:	f1be 0f00 	cmp.w	lr, #0
     ecc:	d003      	beq.n	ed6 <_power_clock_isr+0x36>
		NRF_POWER->EVENTS_POFWARN = 0;
     ece:	f04f 0e00 	mov.w	lr, #0
     ed2:	f8c3 e108 	str.w	lr, [r3, #264]	; 0x108
	}

	if (hf) {
     ed6:	b127      	cbz	r7, ee2 <_power_clock_isr+0x42>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
     ed8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     edc:	2700      	movs	r7, #0
     ede:	f8c3 7100 	str.w	r7, [r3, #256]	; 0x100
	}

	if (hf_intenset && hf_stat) {
     ee2:	b13a      	cbz	r2, ef4 <_power_clock_isr+0x54>
     ee4:	03e3      	lsls	r3, r4, #15
		/* INTENSET is used as state flag to start calibration,
		 * hence clear it here.
		 */
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
     ee6:	bf41      	itttt	mi
     ee8:	f04f 4380 	movmi.w	r3, #1073741824	; 0x40000000
     eec:	2201      	movmi	r2, #1
     eee:	f8c3 2308 	strmi.w	r2, [r3, #776]	; 0x308

		/* Start Calibration */
		NRF_CLOCK->TASKS_CAL = 1;
     ef2:	611a      	strmi	r2, [r3, #16]
	}

	if (lf) {
     ef4:	b120      	cbz	r0, f00 <_power_clock_isr+0x60>
		NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
     ef6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     efa:	2200      	movs	r2, #0
     efc:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

		__ASSERT_NO_MSG(0);
	}

	if (done) {
     f00:	b149      	cbz	r1, f16 <_power_clock_isr+0x76>
		int err;

		NRF_CLOCK->EVENTS_DONE = 0;
     f02:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
     f06:	2100      	movs	r1, #0
     f08:	f8c4 110c 	str.w	r1, [r4, #268]	; 0x10c

		/* Calibration done, stop 16M Xtal. */
		err = _m16src_stop(dev, NULL);
     f0c:	4628      	mov	r0, r5
     f0e:	f7ff ff33 	bl	d78 <_m16src_stop>
		__ASSERT_NO_MSG(!err);

		/* Start timer for next calibration. */
		NRF_CLOCK->TASKS_CTSTART = 1;
     f12:	2301      	movs	r3, #1
     f14:	6163      	str	r3, [r4, #20]
	}

	if (ctto) {
     f16:	b176      	cbz	r6, f36 <_power_clock_isr+0x96>
		int err;

		NRF_CLOCK->EVENTS_CTTO = 0;
     f18:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     f1c:	2100      	movs	r1, #0

		/* Start HF clock, if already started
		 * then explicitly assert IRQ; we use the INTENSET
		 * as a state flag to start calibration.
		 */
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
     f1e:	2401      	movs	r4, #1
	}

	if (ctto) {
		int err;

		NRF_CLOCK->EVENTS_CTTO = 0;
     f20:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
		 * then explicitly assert IRQ; we use the INTENSET
		 * as a state flag to start calibration.
		 */
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;

		err = _m16src_start(dev, false);
     f24:	4628      	mov	r0, r5

		/* Start HF clock, if already started
		 * then explicitly assert IRQ; we use the INTENSET
		 * as a state flag to start calibration.
		 */
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
     f26:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304

		err = _m16src_start(dev, false);
     f2a:	f7ff ff5f 	bl	dec <_m16src_start>
		if (!err) {
     f2e:	b910      	cbnz	r0, f36 <_power_clock_isr+0x96>
  \details Sets the pending bit of an external interrupt.
  \param [in]      IRQn  Interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
     f30:	4b01      	ldr	r3, [pc, #4]	; (f38 <_power_clock_isr+0x98>)
     f32:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
     f36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     f38:	e000e100 	.word	0xe000e100

00000f3c <_k32src_start>:

	return 0;
}

static int _k32src_start(struct device *dev, clock_control_subsys_t sub_system)
{
     f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/* TODO: implement the ref count and re-entrancy guard, if a use-case
	 * needs it.
	 */

	if ((NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)) {
     f3e:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000

	return 0;
}

static int _k32src_start(struct device *dev, clock_control_subsys_t sub_system)
{
     f42:	4607      	mov	r7, r0

	/* TODO: implement the ref count and re-entrancy guard, if a use-case
	 * needs it.
	 */

	if ((NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)) {
     f44:	f8d4 6418 	ldr.w	r6, [r4, #1048]	; 0x418
     f48:	f416 3680 	ands.w	r6, r6, #65536	; 0x10000

	return 0;
}

static int _k32src_start(struct device *dev, clock_control_subsys_t sub_system)
{
     f4c:	460d      	mov	r5, r1

	/* TODO: implement the ref count and re-entrancy guard, if a use-case
	 * needs it.
	 */

	if ((NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)) {
     f4e:	d14c      	bne.n	fea <_k32src_start+0xae>
		return 0;
	}

	irq_disable(POWER_CLOCK_IRQn);
     f50:	4630      	mov	r0, r6
     f52:	f011 f905 	bl	12160 <_arch_irq_disable>

	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
     f56:	f8c4 6104 	str.w	r6, [r4, #260]	; 0x104

	intenset = NRF_CLOCK->INTENSET;
	NRF_CLOCK->INTENSET = CLOCK_INTENSET_LFCLKSTARTED_Msk;
     f5a:	2302      	movs	r3, #2

	irq_disable(POWER_CLOCK_IRQn);

	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;

	intenset = NRF_CLOCK->INTENSET;
     f5c:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
	NRF_CLOCK->INTENSET = CLOCK_INTENSET_LFCLKSTARTED_Msk;
     f60:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
	/* Set LF Clock Source */
	lf_clk_src = POINTER_TO_UINT(sub_system);
	NRF_CLOCK->LFCLKSRC = lf_clk_src;

	/* Start and spin-wait until clock settles */
	NRF_CLOCK->TASKS_LFCLKSTART = 1;
     f64:	2301      	movs	r3, #1
	intenset = NRF_CLOCK->INTENSET;
	NRF_CLOCK->INTENSET = CLOCK_INTENSET_LFCLKSTARTED_Msk;

	/* Set LF Clock Source */
	lf_clk_src = POINTER_TO_UINT(sub_system);
	NRF_CLOCK->LFCLKSRC = lf_clk_src;
     f66:	f8c4 5518 	str.w	r5, [r4, #1304]	; 0x518

	/* Start and spin-wait until clock settles */
	NRF_CLOCK->TASKS_LFCLKSTART = 1;
     f6a:	60a3      	str	r3, [r4, #8]

	while (NRF_CLOCK->EVENTS_LFCLKSTARTED == 0) {
     f6c:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
     f70:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     f74:	b919      	cbnz	r1, f7e <_k32src_start+0x42>
     f76:	bf20      	wfe
  \brief   Send Event
  \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 */
__attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
{
  __ASM volatile ("sev");
     f78:	bf40      	sev
  \details Wait For Event is a hint instruction that permits the processor to enter
    a low-power state until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
{
  __ASM volatile ("wfe");
     f7a:	bf20      	wfe
     f7c:	e7f6      	b.n	f6c <_k32src_start+0x30>
		__WFE();
	}

	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;

	if (!(intenset & CLOCK_INTENSET_LFCLKSTARTED_Msk)) {
     f7e:	0792      	lsls	r2, r2, #30
  \details Clears the pending bit of an external interrupt.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
     f80:	4e1b      	ldr	r6, [pc, #108]	; (ff0 <_k32src_start+0xb4>)
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
     f82:	bf58      	it	pl
     f84:	2202      	movpl	r2, #2
		__WFE();
		__SEV();
		__WFE();
	}

	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
     f86:	f04f 0100 	mov.w	r1, #0
     f8a:	f04f 0401 	mov.w	r4, #1
     f8e:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
	}

	NVIC_ClearPendingIRQ(POWER_CLOCK_IRQn);

	irq_enable(POWER_CLOCK_IRQn);
     f92:	f04f 0000 	mov.w	r0, #0
	}

	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;

	if (!(intenset & CLOCK_INTENSET_LFCLKSTARTED_Msk)) {
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
     f96:	bf58      	it	pl
     f98:	f8c3 2308 	strpl.w	r2, [r3, #776]	; 0x308
     f9c:	f8c6 4180 	str.w	r4, [r6, #384]	; 0x180
	}

	NVIC_ClearPendingIRQ(POWER_CLOCK_IRQn);

	irq_enable(POWER_CLOCK_IRQn);
     fa0:	f011 f8d0 	bl	12144 <_arch_irq_enable>

	/* If RC selected, calibrate and start timer for consecutive
	 * calibrations.
	 */
	NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_DONE_Msk | CLOCK_INTENCLR_CTTO_Msk;
     fa4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	NRF_CLOCK->EVENTS_DONE = 0;
     fa8:	2100      	movs	r1, #0
	irq_enable(POWER_CLOCK_IRQn);

	/* If RC selected, calibrate and start timer for consecutive
	 * calibrations.
	 */
	NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_DONE_Msk | CLOCK_INTENCLR_CTTO_Msk;
     faa:	2218      	movs	r2, #24
     fac:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	NRF_CLOCK->EVENTS_DONE = 0;
     fb0:	f8c3 110c 	str.w	r1, [r3, #268]	; 0x10c
	NRF_CLOCK->EVENTS_CTTO = 0;
     fb4:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110

	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
     fb8:	f015 0103 	ands.w	r1, r5, #3
     fbc:	d10c      	bne.n	fd8 <_k32src_start+0x9c>
		int err;

		/* Set the Calibration Timer Initial Value */
		NRF_CLOCK->CTIV = 16;	/* 4s in 0.25s units */
     fbe:	2010      	movs	r0, #16
     fc0:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538

		/* Enable DONE and CTTO IRQs */
		NRF_CLOCK->INTENSET =
     fc4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		 * NOTE: The INTENSET is used as state flag to start
		 * calibration in ISR.
		 */
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;

		err = _m16src_start(dev, false);
     fc8:	4638      	mov	r0, r7
		/* Start HF clock, if already started then explicitly
		 * assert IRQ.
		 * NOTE: The INTENSET is used as state flag to start
		 * calibration in ISR.
		 */
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
     fca:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304

		err = _m16src_start(dev, false);
     fce:	f7ff ff0d 	bl	dec <_m16src_start>
		if (!err) {
     fd2:	b908      	cbnz	r0, fd8 <_k32src_start+0x9c>
  \details Sets the pending bit of an external interrupt.
  \param [in]      IRQn  Interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
     fd4:	f8c6 4100 	str.w	r4, [r6, #256]	; 0x100
		} else {
			__ASSERT_NO_MSG(err == -EINPROGRESS);
		}
	}

	return !(NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk);
     fd8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     fdc:	f8d3 0418 	ldr.w	r0, [r3, #1048]	; 0x418
     fe0:	f480 3080 	eor.w	r0, r0, #65536	; 0x10000
     fe4:	f3c0 4000 	ubfx	r0, r0, #16, #1
     fe8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	/* TODO: implement the ref count and re-entrancy guard, if a use-case
	 * needs it.
	 */

	if ((NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)) {
		return 0;
     fea:	2000      	movs	r0, #0
			__ASSERT_NO_MSG(err == -EINPROGRESS);
		}
	}

	return !(NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk);
}
     fec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     fee:	bf00      	nop
     ff0:	e000e100 	.word	0xe000e100

00000ff4 <strcpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
     ff4:	3901      	subs	r1, #1
	char *dest = d;

	while (*s != '\0') {
     ff6:	4603      	mov	r3, r0
     ff8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
     ffc:	b112      	cbz	r2, 1004 <strcpy+0x10>
		*d = *s;
     ffe:	f803 2b01 	strb.w	r2, [r3], #1
    1002:	e7f9      	b.n	ff8 <strcpy+0x4>
		d++;
		s++;
	}

	*d = '\0';
    1004:	701a      	strb	r2, [r3, #0]

	return dest;
}
    1006:	4770      	bx	lr

00001008 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    1008:	4602      	mov	r2, r0
	size_t n = 0;

	while (*s != '\0') {
    100a:	4603      	mov	r3, r0
    100c:	1a98      	subs	r0, r3, r2
    100e:	f813 1b01 	ldrb.w	r1, [r3], #1
    1012:	2900      	cmp	r1, #0
    1014:	d1fa      	bne.n	100c <strlen+0x4>
		s++;
		n++;
	}

	return n;
}
    1016:	4770      	bx	lr

00001018 <strcmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
    1018:	3801      	subs	r0, #1
    101a:	3901      	subs	r1, #1
	while ((*s1 == *s2) && (*s1 != '\0')) {
    101c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    1020:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    1024:	4293      	cmp	r3, r2
    1026:	d102      	bne.n	102e <strcmp+0x16>
    1028:	2b00      	cmp	r3, #0
    102a:	d1f7      	bne.n	101c <strcmp+0x4>
    102c:	461a      	mov	r2, r3
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    102e:	1a98      	subs	r0, r3, r2
    1030:	4770      	bx	lr

00001032 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
    1032:	b570      	push	{r4, r5, r6, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n)
    1034:	b192      	cbz	r2, 105c <memcmp+0x2a>
    1036:	3a01      	subs	r2, #1
    1038:	4402      	add	r2, r0
		return 0;

	while ((--n > 0) && (*c1 == *c2)) {
    103a:	4290      	cmp	r0, r2
    103c:	460c      	mov	r4, r1
    103e:	4603      	mov	r3, r0
    1040:	d103      	bne.n	104a <memcmp+0x18>
		c1++;
		c2++;
	}

	return *c1 - *c2;
    1042:	781b      	ldrb	r3, [r3, #0]
    1044:	7822      	ldrb	r2, [r4, #0]
    1046:	1a98      	subs	r0, r3, r2
    1048:	bd70      	pop	{r4, r5, r6, pc}
	const char *c2 = m2;

	if (!n)
		return 0;

	while ((--n > 0) && (*c1 == *c2)) {
    104a:	781e      	ldrb	r6, [r3, #0]
    104c:	7825      	ldrb	r5, [r4, #0]
    104e:	42ae      	cmp	r6, r5
    1050:	f100 0001 	add.w	r0, r0, #1
    1054:	f101 0101 	add.w	r1, r1, #1
    1058:	d0ef      	beq.n	103a <memcmp+0x8>
    105a:	e7f2      	b.n	1042 <memcmp+0x10>
{
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n)
		return 0;
    105c:	4610      	mov	r0, r2
		c1++;
		c2++;
	}

	return *c1 - *c2;
}
    105e:	bd70      	pop	{r4, r5, r6, pc}

00001060 <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (d - s) < n) {
    1060:	1a43      	subs	r3, r0, r1
    1062:	4293      	cmp	r3, r2
 *
 * @return pointer to destination buffer <d>
 */

void *memmove(void *d, const void *s, size_t n)
{
    1064:	b510      	push	{r4, lr}
    1066:	eb00 0302 	add.w	r3, r0, r2
	char *dest = d;
	const char *src  = s;

	if ((size_t) (d - s) < n) {
    106a:	d302      	bcc.n	1072 <memmove+0x12>
    106c:	3901      	subs	r1, #1
    106e:	4602      	mov	r2, r0
    1070:	e007      	b.n	1082 <memmove+0x22>
    1072:	440a      	add	r2, r1
		 * Copy backwards to prevent the premature corruption of <src>.
		 */

		while (n > 0) {
			n--;
			dest[n] = src[n];
    1074:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
    1078:	f803 4d01 	strb.w	r4, [r3, #-1]!
		/*
		 * The <src> buffer overlaps with the start of the <dest> buffer.
		 * Copy backwards to prevent the premature corruption of <src>.
		 */

		while (n > 0) {
    107c:	428a      	cmp	r2, r1
    107e:	d1f9      	bne.n	1074 <memmove+0x14>
    1080:	bd10      	pop	{r4, pc}
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
    1082:	429a      	cmp	r2, r3
    1084:	d004      	beq.n	1090 <memmove+0x30>
			*dest = *src;
    1086:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    108a:	f802 4b01 	strb.w	r4, [r2], #1
    108e:	e7f8      	b.n	1082 <memmove+0x22>
			n--;
		}
	}

	return d;
}
    1090:	bd10      	pop	{r4, pc}

00001092 <memcpy>:
	/* attempt word-sized copying only if buffers have identical alignment */

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;

	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
    1092:	ea81 0300 	eor.w	r3, r1, r0
    1096:	f013 0f03 	tst.w	r3, #3
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
    109a:	b570      	push	{r4, r5, r6, lr}
    109c:	4603      	mov	r3, r0
	/* attempt word-sized copying only if buffers have identical alignment */

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;

	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
    109e:	d008      	beq.n	10b2 <memcpy+0x20>
    10a0:	3b01      	subs	r3, #1
    10a2:	440a      	add	r2, r1
    10a4:	e019      	b.n	10da <memcpy+0x48>

		/* do byte-sized copying until word-aligned or finished */

		while (((unsigned int)d_byte) & 0x3) {
			if (n == 0) {
    10a6:	b1fa      	cbz	r2, 10e8 <memcpy+0x56>
				return d;
			}
			*(d_byte++) = *(s_byte++);
    10a8:	f811 4b01 	ldrb.w	r4, [r1], #1
    10ac:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
    10b0:	3a01      	subs	r2, #1

	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {

		/* do byte-sized copying until word-aligned or finished */

		while (((unsigned int)d_byte) & 0x3) {
    10b2:	079c      	lsls	r4, r3, #30
    10b4:	d1f7      	bne.n	10a6 <memcpy+0x14>
    10b6:	1f1e      	subs	r6, r3, #4
    10b8:	460d      	mov	r5, r1
    10ba:	1b54      	subs	r4, r2, r5
    10bc:	440c      	add	r4, r1
		/* do word-sized copying as long as possible */

		unsigned int *d_word = (unsigned int *)d_byte;
		const unsigned int *s_word = (const unsigned int *)s_byte;

		while (n >= sizeof(unsigned int)) {
    10be:	2c03      	cmp	r4, #3
    10c0:	d904      	bls.n	10cc <memcpy+0x3a>
			*(d_word++) = *(s_word++);
    10c2:	f855 4b04 	ldr.w	r4, [r5], #4
    10c6:	f846 4f04 	str.w	r4, [r6, #4]!
    10ca:	e7f6      	b.n	10ba <memcpy+0x28>
    10cc:	0894      	lsrs	r4, r2, #2
    10ce:	eba2 0284 	sub.w	r2, r2, r4, lsl #2
    10d2:	00a4      	lsls	r4, r4, #2
    10d4:	4423      	add	r3, r4
    10d6:	4421      	add	r1, r4
    10d8:	e7e2      	b.n	10a0 <memcpy+0xe>
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
    10da:	4291      	cmp	r1, r2
    10dc:	d004      	beq.n	10e8 <memcpy+0x56>
		*(d_byte++) = *(s_byte++);
    10de:	f811 4b01 	ldrb.w	r4, [r1], #1
    10e2:	f803 4f01 	strb.w	r4, [r3, #1]!
    10e6:	e7f8      	b.n	10da <memcpy+0x48>
		n--;
	}

	return d;
}
    10e8:	bd70      	pop	{r4, r5, r6, pc}

000010ea <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
    10ea:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
    10ec:	4603      	mov	r3, r0
	unsigned char c_byte = (unsigned char)c;
    10ee:	b2cc      	uxtb	r4, r1

	while (((unsigned int)d_byte) & 0x3) {
    10f0:	079d      	lsls	r5, r3, #30
    10f2:	d004      	beq.n	10fe <memset+0x14>
		if (n == 0) {
    10f4:	b1d2      	cbz	r2, 112c <memset+0x42>
			return buf;
		}
		*(d_byte++) = c_byte;
    10f6:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
    10fa:	3a01      	subs	r2, #1
    10fc:	e7f8      	b.n	10f0 <memset+0x6>
	/* do word-sized initialization as long as possible */

	unsigned int *d_word = (unsigned int *)d_byte;
	unsigned int c_word = (unsigned int)(unsigned char)c;

	c_word |= c_word << 8;
    10fe:	0209      	lsls	r1, r1, #8
    1100:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
    1104:	4321      	orrs	r1, r4
	c_word |= c_word << 16;
    1106:	ea41 4101 	orr.w	r1, r1, r1, lsl #16

	while (n >= sizeof(unsigned int)) {
    110a:	461e      	mov	r6, r3
    110c:	1b95      	subs	r5, r2, r6
    110e:	441d      	add	r5, r3
    1110:	2d03      	cmp	r5, #3
    1112:	d902      	bls.n	111a <memset+0x30>
		*(d_word++) = c_word;
    1114:	f846 1b04 	str.w	r1, [r6], #4
    1118:	e7f8      	b.n	110c <memset+0x22>
    111a:	0891      	lsrs	r1, r2, #2
    111c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    1120:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
    1122:	4291      	cmp	r1, r2
    1124:	d002      	beq.n	112c <memset+0x42>
		*(d_byte++) = c_byte;
    1126:	f801 4b01 	strb.w	r4, [r1], #1
    112a:	e7fa      	b.n	1122 <memset+0x38>
		n--;
	}

	return buf;
}
    112c:	bd70      	pop	{r4, r5, r6, pc}

0000112e <_nop_char_out>:
{
	ARG_UNUSED(c);

	/* do nothing */
	return 0;
}
    112e:	2000      	movs	r0, #0
    1130:	4770      	bx	lr
	...

00001134 <char_out>:
	int count;
};

static int char_out(int c, struct out_context *ctx)
{
	ctx->count++;
    1134:	680b      	ldr	r3, [r1, #0]
    1136:	3301      	adds	r3, #1
    1138:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    113a:	4b01      	ldr	r3, [pc, #4]	; (1140 <char_out+0xc>)
    113c:	681b      	ldr	r3, [r3, #0]
    113e:	4718      	bx	r3
    1140:	20000278 	.word	0x20000278

00001144 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
    1144:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1148:	469b      	mov	fp, r3
	int remaining = 10; /* 10 digits max */
	int digits = 1;

	/* make sure we don't skip if value is zero */
	if (min_width <= 0) {
		min_width = 1;
    114a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    114c:	f8df a090 	ldr.w	sl, [pc, #144]	; 11e0 <_printk_dec_ulong+0x9c>
    1150:	2b01      	cmp	r3, #1
    1152:	bfb8      	it	lt
    1154:	2301      	movlt	r3, #1
    1156:	f1bb 0f01 	cmp.w	fp, #1
    115a:	930c      	str	r3, [sp, #48]	; 0x30
    115c:	bf0c      	ite	eq
    115e:	2330      	moveq	r3, #48	; 0x30
    1160:	2320      	movne	r3, #32
    1162:	4615      	mov	r5, r2
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
    1164:	4680      	mov	r8, r0
    1166:	4689      	mov	r9, r1
    1168:	9300      	str	r3, [sp, #0]
	int remaining = 10; /* 10 digits max */
	int digits = 1;

	/* make sure we don't skip if value is zero */
	if (min_width <= 0) {
		min_width = 1;
    116a:	2601      	movs	r6, #1
    116c:	270a      	movs	r7, #10
    116e:	2200      	movs	r2, #0
    1170:	f10a 0401 	add.w	r4, sl, #1
	}

	while (pos >= 9) {
		if (found_largest_digit || remainder > pos) {
    1174:	b90a      	cbnz	r2, 117a <_printk_dec_ulong+0x36>
    1176:	45aa      	cmp	sl, r5
    1178:	d207      	bcs.n	118a <_printk_dec_ulong+0x46>
			found_largest_digit = 1;
			out((int)((remainder / (pos + 1)) + 48), ctx);
    117a:	fbb5 f0f4 	udiv	r0, r5, r4
    117e:	4649      	mov	r1, r9
    1180:	3030      	adds	r0, #48	; 0x30
    1182:	47c0      	blx	r8
			digits++;
    1184:	3601      	adds	r6, #1
		min_width = 1;
	}

	while (pos >= 9) {
		if (found_largest_digit || remainder > pos) {
			found_largest_digit = 1;
    1186:	2201      	movs	r2, #1
			out((int)((remainder / (pos + 1)) + 48), ctx);
			digits++;
    1188:	e00b      	b.n	11a2 <_printk_dec_ulong+0x5e>
		} else if (remaining <= min_width
    118a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    118c:	42bb      	cmp	r3, r7
    118e:	db08      	blt.n	11a2 <_printk_dec_ulong+0x5e>
				&& padding < PAD_SPACE_AFTER) {
    1190:	f1bb 0f02 	cmp.w	fp, #2
    1194:	d805      	bhi.n	11a2 <_printk_dec_ulong+0x5e>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    1196:	4649      	mov	r1, r9
    1198:	9800      	ldr	r0, [sp, #0]
    119a:	9201      	str	r2, [sp, #4]
    119c:	47c0      	blx	r8
			digits++;
    119e:	9a01      	ldr	r2, [sp, #4]
    11a0:	3601      	adds	r6, #1
		}
		remaining--;
    11a2:	3f01      	subs	r7, #1
	/* make sure we don't skip if value is zero */
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 9) {
    11a4:	2f01      	cmp	r7, #1
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
		remainder %= (pos + 1);
    11a6:	fbb5 f1f4 	udiv	r1, r5, r4
		pos /= 10;
    11aa:	f04f 030a 	mov.w	r3, #10
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
		remainder %= (pos + 1);
    11ae:	fb04 5511 	mls	r5, r4, r1, r5
		pos /= 10;
    11b2:	fbba faf3 	udiv	sl, sl, r3
	/* make sure we don't skip if value is zero */
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 9) {
    11b6:	d1db      	bne.n	1170 <_printk_dec_ulong+0x2c>
		}
		remaining--;
		remainder %= (pos + 1);
		pos /= 10;
	}
	out((int)(remainder + 48), ctx);
    11b8:	4649      	mov	r1, r9
    11ba:	f105 0030 	add.w	r0, r5, #48	; 0x30
    11be:	47c0      	blx	r8

	if (padding == PAD_SPACE_AFTER) {
    11c0:	f1bb 0f03 	cmp.w	fp, #3
    11c4:	d108      	bne.n	11d8 <_printk_dec_ulong+0x94>
    11c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    11c8:	1b9c      	subs	r4, r3, r6
		remaining = min_width - digits;
		while (remaining-- > 0) {
    11ca:	2c00      	cmp	r4, #0
    11cc:	dd04      	ble.n	11d8 <_printk_dec_ulong+0x94>
			out(' ', ctx);
    11ce:	4649      	mov	r1, r9
    11d0:	2020      	movs	r0, #32
    11d2:	47c0      	blx	r8
    11d4:	3c01      	subs	r4, #1
    11d6:	e7f8      	b.n	11ca <_printk_dec_ulong+0x86>
		}
	}
}
    11d8:	b003      	add	sp, #12
    11da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    11de:	bf00      	nop
    11e0:	3b9ac9ff 	.word	0x3b9ac9ff

000011e4 <str_out>:
	int count;
};

static int str_out(int c, struct str_context *ctx)
{
	if (!ctx->str || ctx->count >= ctx->max) {
    11e4:	680a      	ldr	r2, [r1, #0]
    11e6:	688b      	ldr	r3, [r1, #8]
	int max;
	int count;
};

static int str_out(int c, struct str_context *ctx)
{
    11e8:	b530      	push	{r4, r5, lr}
	if (!ctx->str || ctx->count >= ctx->max) {
    11ea:	b112      	cbz	r2, 11f2 <str_out+0xe>
    11ec:	684c      	ldr	r4, [r1, #4]
    11ee:	42a3      	cmp	r3, r4
    11f0:	db02      	blt.n	11f8 <str_out+0x14>
		ctx->count++;
    11f2:	3301      	adds	r3, #1
    11f4:	608b      	str	r3, [r1, #8]
		return c;
    11f6:	bd30      	pop	{r4, r5, pc}
	}

	if (ctx->count == ctx->max - 1) {
    11f8:	1e65      	subs	r5, r4, #1
    11fa:	42ab      	cmp	r3, r5
		ctx->str[ctx->count++] = '\0';
    11fc:	bf0b      	itete	eq
    11fe:	608c      	streq	r4, [r1, #8]
	} else {
		ctx->str[ctx->count++] = c;
    1200:	1c5c      	addne	r4, r3, #1
		ctx->count++;
		return c;
	}

	if (ctx->count == ctx->max - 1) {
		ctx->str[ctx->count++] = '\0';
    1202:	2100      	moveq	r1, #0
	} else {
		ctx->str[ctx->count++] = c;
    1204:	608c      	strne	r4, [r1, #8]
		ctx->count++;
		return c;
	}

	if (ctx->count == ctx->max - 1) {
		ctx->str[ctx->count++] = '\0';
    1206:	bf0c      	ite	eq
    1208:	54d1      	strbeq	r1, [r2, r3]
	} else {
		ctx->str[ctx->count++] = c;
    120a:	54d0      	strbne	r0, [r2, r3]
	}

	return c;
}
    120c:	bd30      	pop	{r4, r5, pc}
	...

00001210 <__printk_hook_install>:
 *
 * @return N/A
 */
void __printk_hook_install(int (*fn)(int))
{
	_char_out = fn;
    1210:	4b01      	ldr	r3, [pc, #4]	; (1218 <__printk_hook_install+0x8>)
    1212:	6018      	str	r0, [r3, #0]
    1214:	4770      	bx	lr
    1216:	bf00      	nop
    1218:	20000278 	.word	0x20000278

0000121c <_vprintk>:
 * @param ap Variable parameters
 *
 * @return N/A
 */
void _vprintk(out_func_t out, void *ctx, const char *fmt, va_list ap)
{
    121c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1220:	b087      	sub	sp, #28
	int might_format = 0; /* 1 if encountered a '%' */
	enum pad_type padding = PAD_NONE;
	int min_width = -1;
	int long_ctr = 0;
    1222:	f04f 0900 	mov.w	r9, #0
 * @param ap Variable parameters
 *
 * @return N/A
 */
void _vprintk(out_func_t out, void *ctx, const char *fmt, va_list ap)
{
    1226:	461c      	mov	r4, r3
    1228:	1e53      	subs	r3, r2, #1
    122a:	4605      	mov	r5, r0
    122c:	460e      	mov	r6, r1
    122e:	9302      	str	r3, [sp, #8]
	int might_format = 0; /* 1 if encountered a '%' */
	enum pad_type padding = PAD_NONE;
	int min_width = -1;
    1230:	f04f 38ff 	mov.w	r8, #4294967295
 * @return N/A
 */
void _vprintk(out_func_t out, void *ctx, const char *fmt, va_list ap)
{
	int might_format = 0; /* 1 if encountered a '%' */
	enum pad_type padding = PAD_NONE;
    1234:	464f      	mov	r7, r9
 *
 * @return N/A
 */
void _vprintk(out_func_t out, void *ctx, const char *fmt, va_list ap)
{
	int might_format = 0; /* 1 if encountered a '%' */
    1236:	46ca      	mov	sl, r9
	int min_width = -1;
	int long_ctr = 0;

	/* fmt has already been adjusted if needed */

	while (*fmt) {
    1238:	9b02      	ldr	r3, [sp, #8]
    123a:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    123e:	9302      	str	r3, [sp, #8]
    1240:	2800      	cmp	r0, #0
    1242:	f000 810a 	beq.w	145a <CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD+0x2a>
		if (!might_format) {
    1246:	f1ba 0f00 	cmp.w	sl, #0
    124a:	d105      	bne.n	1258 <_vprintk+0x3c>
			if (*fmt != '%') {
    124c:	2825      	cmp	r0, #37	; 0x25
    124e:	f000 80fb 	beq.w	1448 <CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD+0x18>
				out((int)*fmt, ctx);
    1252:	4631      	mov	r1, r6
    1254:	47a8      	blx	r5
    1256:	e7ef      	b.n	1238 <_vprintk+0x1c>
				min_width = -1;
				padding = PAD_NONE;
				long_ctr = 0;
			}
		} else {
			switch (*fmt) {
    1258:	2864      	cmp	r0, #100	; 0x64
    125a:	d04f      	beq.n	12fc <_vprintk+0xe0>
    125c:	d818      	bhi.n	1290 <_vprintk+0x74>
    125e:	2839      	cmp	r0, #57	; 0x39
    1260:	d80a      	bhi.n	1278 <_vprintk+0x5c>
    1262:	2831      	cmp	r0, #49	; 0x31
    1264:	d238      	bcs.n	12d8 <_vprintk+0xbc>
    1266:	282d      	cmp	r0, #45	; 0x2d
    1268:	d02b      	beq.n	12c2 <_vprintk+0xa6>
    126a:	2830      	cmp	r0, #48	; 0x30
    126c:	d02d      	beq.n	12ca <_vprintk+0xae>
    126e:	2825      	cmp	r0, #37	; 0x25
    1270:	f040 80e0 	bne.w	1434 <CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD+0x4>

				out(c, ctx);
				break;
			}
			case '%': {
				out((int)'%', ctx);
    1274:	4631      	mov	r1, r6
    1276:	e0e3      	b.n	1440 <CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD+0x10>
				min_width = -1;
				padding = PAD_NONE;
				long_ctr = 0;
			}
		} else {
			switch (*fmt) {
    1278:	2858      	cmp	r0, #88	; 0x58
    127a:	d079      	beq.n	1370 <_vprintk+0x154>
    127c:	2863      	cmp	r0, #99	; 0x63
    127e:	f040 80d9 	bne.w	1434 <CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD+0x4>
				break;
			}
			case 'c': {
				int c = va_arg(ap, int);

				out(c, ctx);
    1282:	6820      	ldr	r0, [r4, #0]
				while (*s)
					out((int)(*s++), ctx);
				break;
			}
			case 'c': {
				int c = va_arg(ap, int);
    1284:	f104 0a04 	add.w	sl, r4, #4

				out(c, ctx);
    1288:	4631      	mov	r1, r6
    128a:	47a8      	blx	r5
				while (*s)
					out((int)(*s++), ctx);
				break;
			}
			case 'c': {
				int c = va_arg(ap, int);
    128c:	4654      	mov	r4, sl
    128e:	e0d8      	b.n	1442 <CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD+0x12>
				min_width = -1;
				padding = PAD_NONE;
				long_ctr = 0;
			}
		} else {
			switch (*fmt) {
    1290:	2870      	cmp	r0, #112	; 0x70
    1292:	d064      	beq.n	135e <_vprintk+0x142>
    1294:	d805      	bhi.n	12a2 <_vprintk+0x86>
    1296:	2869      	cmp	r0, #105	; 0x69
    1298:	d030      	beq.n	12fc <_vprintk+0xe0>
    129a:	286c      	cmp	r0, #108	; 0x6c
    129c:	d02b      	beq.n	12f6 <_vprintk+0xda>
    129e:	2868      	cmp	r0, #104	; 0x68
    12a0:	e00d      	b.n	12be <_vprintk+0xa2>
    12a2:	2875      	cmp	r0, #117	; 0x75
    12a4:	d047      	beq.n	1336 <_vprintk+0x11a>
    12a6:	d807      	bhi.n	12b8 <_vprintk+0x9c>
    12a8:	2873      	cmp	r0, #115	; 0x73
    12aa:	f040 80c3 	bne.w	1434 <CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD+0x4>
				_printk_hex_ulong(out, ctx, x, padding,
						  min_width);
				break;
			}
			case 's': {
				char *s = va_arg(ap, char *);
    12ae:	f104 0a04 	add.w	sl, r4, #4
    12b2:	6824      	ldr	r4, [r4, #0]
    12b4:	3c01      	subs	r4, #1

				while (*s)
    12b6:	e0b4      	b.n	1422 <_vprintk+0x206>
				min_width = -1;
				padding = PAD_NONE;
				long_ctr = 0;
			}
		} else {
			switch (*fmt) {
    12b8:	2878      	cmp	r0, #120	; 0x78
    12ba:	d059      	beq.n	1370 <_vprintk+0x154>
    12bc:	287a      	cmp	r0, #122	; 0x7a
    12be:	d001      	beq.n	12c4 <_vprintk+0xa8>
    12c0:	e0b8      	b.n	1434 <CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD+0x4>
			case '-':
				padding = PAD_SPACE_AFTER;
    12c2:	2703      	movs	r7, #3
				min_width = -1;
				padding = PAD_NONE;
				long_ctr = 0;
			}
		} else {
			switch (*fmt) {
    12c4:	f04f 0a01 	mov.w	sl, #1
    12c8:	e7b6      	b.n	1238 <_vprintk+0x1c>
			case '-':
				padding = PAD_SPACE_AFTER;
				goto still_might_format;
			case '0':
				if (min_width < 0 && padding == PAD_NONE) {
    12ca:	f1b8 0f00 	cmp.w	r8, #0
    12ce:	da09      	bge.n	12e4 <_vprintk+0xc8>
    12d0:	2f00      	cmp	r7, #0
    12d2:	f000 80be 	beq.w	1452 <CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD+0x22>
    12d6:	e002      	b.n	12de <_vprintk+0xc2>
					padding = PAD_ZERO_BEFORE;
					goto still_might_format;
				}
				/* Fall through */
			case '1' ... '9':
				if (min_width < 0) {
    12d8:	f1b8 0f00 	cmp.w	r8, #0
    12dc:	da02      	bge.n	12e4 <_vprintk+0xc8>
					min_width = *fmt - '0';
    12de:	f1a0 0830 	sub.w	r8, r0, #48	; 0x30
    12e2:	e004      	b.n	12ee <_vprintk+0xd2>
				} else {
					min_width = 10 * min_width + *fmt - '0';
    12e4:	230a      	movs	r3, #10
    12e6:	fb03 0808 	mla	r8, r3, r8, r0
    12ea:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
				}

				if (padding == PAD_NONE) {
    12ee:	2f00      	cmp	r7, #0
    12f0:	d1e8      	bne.n	12c4 <_vprintk+0xa8>
					padding = PAD_SPACE_BEFORE;
    12f2:	2702      	movs	r7, #2
    12f4:	e7e6      	b.n	12c4 <_vprintk+0xa8>
				}
				goto still_might_format;
			case 'l':
				long_ctr++;
    12f6:	f109 0901 	add.w	r9, r9, #1
    12fa:	e7e3      	b.n	12c4 <_vprintk+0xa8>
				/* FIXME: do nothing for these modifiers */
				goto still_might_format;
			case 'd':
			case 'i': {
				long d;
				if (long_ctr < 2) {
    12fc:	f1b9 0f01 	cmp.w	r9, #1
					d = va_arg(ap, long);
				} else {
					d = (long)va_arg(ap, long long);
    1300:	bfc5      	ittet	gt
    1302:	3407      	addgt	r4, #7
    1304:	f024 0307 	bicgt.w	r3, r4, #7
				goto still_might_format;
			case 'd':
			case 'i': {
				long d;
				if (long_ctr < 2) {
					d = va_arg(ap, long);
    1308:	f8d4 a000 	ldrle.w	sl, [r4]
				} else {
					d = (long)va_arg(ap, long long);
    130c:	f8d3 a000 	ldrgt.w	sl, [r3]
				goto still_might_format;
			case 'd':
			case 'i': {
				long d;
				if (long_ctr < 2) {
					d = va_arg(ap, long);
    1310:	bfd4      	ite	le
    1312:	3404      	addle	r4, #4
				} else {
					d = (long)va_arg(ap, long long);
    1314:	f103 0408 	addgt.w	r4, r3, #8
				}

				if (d < 0) {
    1318:	f1ba 0f00 	cmp.w	sl, #0
    131c:	da06      	bge.n	132c <_vprintk+0x110>
					out((int)'-', ctx);
    131e:	4631      	mov	r1, r6
    1320:	202d      	movs	r0, #45	; 0x2d
    1322:	47a8      	blx	r5
					d = -d;
    1324:	f1ca 0a00 	rsb	sl, sl, #0
					min_width--;
    1328:	f108 38ff 	add.w	r8, r8, #4294967295
				}
				_printk_dec_ulong(out, ctx, d, padding,
    132c:	f8cd 8000 	str.w	r8, [sp]
    1330:	463b      	mov	r3, r7
    1332:	4652      	mov	r2, sl
    1334:	e00e      	b.n	1354 <_vprintk+0x138>
				break;
			}
			case 'u': {
				unsigned long u;

				if (long_ctr < 2) {
    1336:	f1b9 0f01 	cmp.w	r9, #1
					u = va_arg(ap, unsigned long);
				} else {
					u = (unsigned long)va_arg(ap,
    133a:	bfc5      	ittet	gt
    133c:	3407      	addgt	r4, #7
    133e:	f024 0307 	bicgt.w	r3, r4, #7
			}
			case 'u': {
				unsigned long u;

				if (long_ctr < 2) {
					u = va_arg(ap, unsigned long);
    1342:	6822      	ldrle	r2, [r4, #0]
				} else {
					u = (unsigned long)va_arg(ap,
    1344:	681a      	ldrgt	r2, [r3, #0]
							unsigned long long);
				}
				_printk_dec_ulong(out, ctx, u, padding,
    1346:	f8cd 8000 	str.w	r8, [sp]
				unsigned long u;

				if (long_ctr < 2) {
					u = va_arg(ap, unsigned long);
				} else {
					u = (unsigned long)va_arg(ap,
    134a:	bfcc      	ite	gt
    134c:	f103 0408 	addgt.w	r4, r3, #8
			}
			case 'u': {
				unsigned long u;

				if (long_ctr < 2) {
					u = va_arg(ap, unsigned long);
    1350:	3404      	addle	r4, #4
				} else {
					u = (unsigned long)va_arg(ap,
							unsigned long long);
				}
				_printk_dec_ulong(out, ctx, u, padding,
    1352:	463b      	mov	r3, r7
    1354:	4631      	mov	r1, r6
    1356:	4628      	mov	r0, r5
    1358:	f7ff fef4 	bl	1144 <_printk_dec_ulong>
    135c:	e071      	b.n	1442 <CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD+0x12>
						  min_width);
				break;
			}
			case 'p':
				  out('0', ctx);
    135e:	4631      	mov	r1, r6
    1360:	2030      	movs	r0, #48	; 0x30
    1362:	47a8      	blx	r5
				  out('x', ctx);
    1364:	4631      	mov	r1, r6
    1366:	2078      	movs	r0, #120	; 0x78
    1368:	47a8      	blx	r5
				  /* left-pad pointers with zeros */
				  padding = PAD_ZERO_BEFORE;
				  min_width = 8;
    136a:	f04f 0808 	mov.w	r8, #8
			}
			case 'p':
				  out('0', ctx);
				  out('x', ctx);
				  /* left-pad pointers with zeros */
				  padding = PAD_ZERO_BEFORE;
    136e:	2701      	movs	r7, #1
				  /* Fall through */
			case 'x':
			case 'X': {
				unsigned long x;

				if (long_ctr < 2) {
    1370:	f1b9 0f01 	cmp.w	r9, #1
					x = va_arg(ap, unsigned long);
				} else {
					x = (unsigned long)va_arg(ap,
    1374:	bfc7      	ittee	gt
    1376:	3407      	addgt	r4, #7
    1378:	f024 0307 	bicgt.w	r3, r4, #7
			case 'x':
			case 'X': {
				unsigned long x;

				if (long_ctr < 2) {
					x = va_arg(ap, unsigned long);
    137c:	6823      	ldrle	r3, [r4, #0]
    137e:	9303      	strle	r3, [sp, #12]
				} else {
					x = (unsigned long)va_arg(ap,
    1380:	bfc8      	it	gt
    1382:	f103 0408 	addgt.w	r4, r3, #8
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
	int size = sizeof(num) * 2;
	int found_largest_digit = 0;
	int remaining = 8; /* 8 digits max */
    1386:	f04f 0208 	mov.w	r2, #8
				unsigned long x;

				if (long_ctr < 2) {
					x = va_arg(ap, unsigned long);
				} else {
					x = (unsigned long)va_arg(ap,
    138a:	bfc4      	itt	gt
    138c:	681b      	ldrgt	r3, [r3, #0]
    138e:	9303      	strgt	r3, [sp, #12]
			      int min_width)
{
	int size = sizeof(num) * 2;
	int found_largest_digit = 0;
	int remaining = 8; /* 8 digits max */
	int digits = 0;
    1390:	f04f 0a00 	mov.w	sl, #0
			case 'x':
			case 'X': {
				unsigned long x;

				if (long_ctr < 2) {
					x = va_arg(ap, unsigned long);
    1394:	bfd8      	it	le
    1396:	3404      	addle	r4, #4
static void _printk_hex_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
	int size = sizeof(num) * 2;
	int found_largest_digit = 0;
    1398:	f8cd a014 	str.w	sl, [sp, #20]
 */
static void _printk_hex_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
	int size = sizeof(num) * 2;
    139c:	4693      	mov	fp, r2
	int found_largest_digit = 0;
	int remaining = 8; /* 8 digits max */
	int digits = 0;

	for (; size; size--) {
		char nibble = (num >> ((size - 1) << 2) & 0xf);
    139e:	f10b 3bff 	add.w	fp, fp, #4294967295
    13a2:	9b03      	ldr	r3, [sp, #12]
    13a4:	ea4f 008b 	mov.w	r0, fp, lsl #2
    13a8:	fa23 f000 	lsr.w	r0, r3, r0

		if (nibble || found_largest_digit || size == 1) {
    13ac:	f010 000f 	ands.w	r0, r0, #15
    13b0:	d105      	bne.n	13be <_vprintk+0x1a2>
    13b2:	9b05      	ldr	r3, [sp, #20]
    13b4:	b953      	cbnz	r3, 13cc <_vprintk+0x1b0>
    13b6:	f1bb 0f00 	cmp.w	fp, #0
    13ba:	d112      	bne.n	13e2 <_vprintk+0x1c6>
    13bc:	e006      	b.n	13cc <_vprintk+0x1b0>
			found_largest_digit = 1;
			nibble += nibble > 9 ? 87 : 48;
    13be:	2809      	cmp	r0, #9
    13c0:	bf8c      	ite	hi
    13c2:	f04f 0e57 	movhi.w	lr, #87	; 0x57
    13c6:	f04f 0e30 	movls.w	lr, #48	; 0x30
    13ca:	e001      	b.n	13d0 <_vprintk+0x1b4>
    13cc:	f04f 0e30 	mov.w	lr, #48	; 0x30
			out((int)nibble, ctx);
    13d0:	4631      	mov	r1, r6
    13d2:	4470      	add	r0, lr
    13d4:	9204      	str	r2, [sp, #16]
    13d6:	47a8      	blx	r5

	for (; size; size--) {
		char nibble = (num >> ((size - 1) << 2) & 0xf);

		if (nibble || found_largest_digit || size == 1) {
			found_largest_digit = 1;
    13d8:	2301      	movs	r3, #1
			nibble += nibble > 9 ? 87 : 48;
			out((int)nibble, ctx);
			digits++;
    13da:	f10a 0a01 	add.w	sl, sl, #1

	for (; size; size--) {
		char nibble = (num >> ((size - 1) << 2) & 0xf);

		if (nibble || found_largest_digit || size == 1) {
			found_largest_digit = 1;
    13de:	9305      	str	r3, [sp, #20]
    13e0:	e00d      	b.n	13fe <_vprintk+0x1e2>
			out((int)nibble, ctx);
			digits++;
			continue;
		}

		if (remaining-- <= min_width) {
    13e2:	1e53      	subs	r3, r2, #1
    13e4:	4590      	cmp	r8, r2
    13e6:	9304      	str	r3, [sp, #16]
    13e8:	db09      	blt.n	13fe <_vprintk+0x1e2>
			if (padding == PAD_ZERO_BEFORE) {
    13ea:	2f01      	cmp	r7, #1
    13ec:	d102      	bne.n	13f4 <_vprintk+0x1d8>
				out('0', ctx);
    13ee:	4631      	mov	r1, r6
    13f0:	2030      	movs	r0, #48	; 0x30
    13f2:	e003      	b.n	13fc <_vprintk+0x1e0>
			} else if (padding == PAD_SPACE_BEFORE) {
    13f4:	2f02      	cmp	r7, #2
    13f6:	d102      	bne.n	13fe <_vprintk+0x1e2>
				out(' ', ctx);
    13f8:	4631      	mov	r1, r6
    13fa:	2020      	movs	r0, #32
    13fc:	47a8      	blx	r5
	int size = sizeof(num) * 2;
	int found_largest_digit = 0;
	int remaining = 8; /* 8 digits max */
	int digits = 0;

	for (; size; size--) {
    13fe:	f1bb 0f00 	cmp.w	fp, #0
    1402:	d001      	beq.n	1408 <_vprintk+0x1ec>
    1404:	9a04      	ldr	r2, [sp, #16]
    1406:	e7ca      	b.n	139e <_vprintk+0x182>
				out(' ', ctx);
			}
		}
	}

	if (padding == PAD_SPACE_AFTER) {
    1408:	2f03      	cmp	r7, #3
    140a:	d124      	bne.n	1456 <CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD+0x26>
    140c:	ebca 0a48 	rsb	sl, sl, r8, lsl #1
		remaining = min_width * 2 - digits;
		while (remaining-- > 0) {
    1410:	f1ba 0f00 	cmp.w	sl, #0
    1414:	dd15      	ble.n	1442 <CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD+0x12>
			out(' ', ctx);
    1416:	4631      	mov	r1, r6
    1418:	2020      	movs	r0, #32
    141a:	47a8      	blx	r5
    141c:	f10a 3aff 	add.w	sl, sl, #4294967295
    1420:	e7f6      	b.n	1410 <_vprintk+0x1f4>
				break;
			}
			case 's': {
				char *s = va_arg(ap, char *);

				while (*s)
    1422:	f814 0f01 	ldrb.w	r0, [r4, #1]!
    1426:	b110      	cbz	r0, 142e <_vprintk+0x212>
					out((int)(*s++), ctx);
    1428:	4631      	mov	r1, r6
    142a:	47a8      	blx	r5
    142c:	e7f9      	b.n	1422 <_vprintk+0x206>
				_printk_hex_ulong(out, ctx, x, padding,
						  min_width);
				break;
			}
			case 's': {
				char *s = va_arg(ap, char *);
    142e:	4654      	mov	r4, sl
			default:
				out((int)'%', ctx);
				out((int)*fmt, ctx);
				break;
			}
			might_format = 0;
    1430:	4682      	mov	sl, r0
    1432:	e701      	b.n	1238 <_vprintk+0x1c>
			case '%': {
				out((int)'%', ctx);
				break;
			}
			default:
				out((int)'%', ctx);
    1434:	4631      	mov	r1, r6
    1436:	2025      	movs	r0, #37	; 0x25
    1438:	47a8      	blx	r5
				out((int)*fmt, ctx);
    143a:	9b02      	ldr	r3, [sp, #8]
    143c:	7818      	ldrb	r0, [r3, #0]
    143e:	4631      	mov	r1, r6
    1440:	47a8      	blx	r5
				break;
			}
			might_format = 0;
    1442:	f04f 0a00 	mov.w	sl, #0
				break;
			}
			default:
				out((int)'%', ctx);
				out((int)*fmt, ctx);
				break;
    1446:	e6f7      	b.n	1238 <_vprintk+0x1c>
				out((int)*fmt, ctx);
			} else {
				might_format = 1;
				min_width = -1;
				padding = PAD_NONE;
				long_ctr = 0;
    1448:	46d1      	mov	r9, sl
		if (!might_format) {
			if (*fmt != '%') {
				out((int)*fmt, ctx);
			} else {
				might_format = 1;
				min_width = -1;
    144a:	f04f 38ff 	mov.w	r8, #4294967295
				padding = PAD_NONE;
    144e:	4657      	mov	r7, sl
    1450:	e738      	b.n	12c4 <_vprintk+0xa8>
			case '-':
				padding = PAD_SPACE_AFTER;
				goto still_might_format;
			case '0':
				if (min_width < 0 && padding == PAD_NONE) {
					padding = PAD_ZERO_BEFORE;
    1452:	2701      	movs	r7, #1
    1454:	e736      	b.n	12c4 <_vprintk+0xa8>
			default:
				out((int)'%', ctx);
				out((int)*fmt, ctx);
				break;
			}
			might_format = 0;
    1456:	46da      	mov	sl, fp
    1458:	e6ee      	b.n	1238 <_vprintk+0x1c>
		}
still_might_format:
		++fmt;
	}
}
    145a:	b007      	add	sp, #28
    145c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00001460 <vprintk>:
	ctx->count++;
	return _char_out(c);
}

int vprintk(const char *fmt, va_list ap)
{
    1460:	b513      	push	{r0, r1, r4, lr}
	struct out_context ctx = { 0 };
    1462:	ac02      	add	r4, sp, #8
    1464:	2300      	movs	r3, #0
    1466:	f844 3d04 	str.w	r3, [r4, #-4]!

	_vprintk((out_func_t)char_out, &ctx, fmt, ap);
    146a:	4602      	mov	r2, r0
    146c:	460b      	mov	r3, r1
    146e:	4803      	ldr	r0, [pc, #12]	; (147c <vprintk+0x1c>)
    1470:	4621      	mov	r1, r4
    1472:	f7ff fed3 	bl	121c <_vprintk>
	return ctx.count;
}
    1476:	9801      	ldr	r0, [sp, #4]
    1478:	b002      	add	sp, #8
    147a:	bd10      	pop	{r4, pc}
    147c:	00001135 	.word	0x00001135

00001480 <printk>:
 * @param fmt formatted string to output
 *
 * @return Number of characters printed
 */
int printk(const char *fmt, ...)
{
    1480:	b40f      	push	{r0, r1, r2, r3}
    1482:	b507      	push	{r0, r1, r2, lr}
    1484:	a904      	add	r1, sp, #16
    1486:	f851 0b04 	ldr.w	r0, [r1], #4
	int ret;
	va_list ap;

	va_start(ap, fmt);
    148a:	9101      	str	r1, [sp, #4]
	ret = vprintk(fmt, ap);
    148c:	f7ff ffe8 	bl	1460 <vprintk>
	va_end(ap);

	return ret;
}
    1490:	b003      	add	sp, #12
    1492:	f85d eb04 	ldr.w	lr, [sp], #4
    1496:	b004      	add	sp, #16
    1498:	4770      	bx	lr
	...

0000149c <snprintk>:

	return c;
}

int snprintk(char *str, size_t size, const char *fmt, ...)
{
    149c:	b40c      	push	{r2, r3}
    149e:	b530      	push	{r4, r5, lr}
    14a0:	b085      	sub	sp, #20
    14a2:	ab08      	add	r3, sp, #32
    14a4:	4604      	mov	r4, r0
    14a6:	f853 2b04 	ldr.w	r2, [r3], #4
	struct str_context ctx = { str, size, 0 };
    14aa:	9001      	str	r0, [sp, #4]
    14ac:	9102      	str	r1, [sp, #8]
    14ae:	2500      	movs	r5, #0
	va_list ap;

	va_start(ap, fmt);
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    14b0:	a901      	add	r1, sp, #4
    14b2:	4807      	ldr	r0, [pc, #28]	; (14d0 <snprintk+0x34>)
int snprintk(char *str, size_t size, const char *fmt, ...)
{
	struct str_context ctx = { str, size, 0 };
	va_list ap;

	va_start(ap, fmt);
    14b4:	9300      	str	r3, [sp, #0]
	return c;
}

int snprintk(char *str, size_t size, const char *fmt, ...)
{
	struct str_context ctx = { str, size, 0 };
    14b6:	9503      	str	r5, [sp, #12]
	va_list ap;

	va_start(ap, fmt);
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    14b8:	f7ff feb0 	bl	121c <_vprintk>
	va_end(ap);

	if (ctx.count < ctx.max) {
    14bc:	9803      	ldr	r0, [sp, #12]
    14be:	9b02      	ldr	r3, [sp, #8]
    14c0:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    14c2:	bfb8      	it	lt
    14c4:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    14c6:	b005      	add	sp, #20
    14c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    14cc:	b002      	add	sp, #8
    14ce:	4770      	bx	lr
    14d0:	000011e5 	.word	0x000011e5

000014d4 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_SYS_LOG_IEEE802154_DRIVER_LEVEL, 0);
GEN_ABSOLUTE_SYM(CONFIG_BLUETOOTH_CONTROLLER_RX_PRIO_STACK_SIZE, 448);
GEN_ABSOLUTE_SYM(CONFIG_THREAD_STACK_INFO, 1);
GEN_ABSOLUTE_SYM(CONFIG_MEM_POOL_SPLIT_BEFORE_DEFRAG, 1);
GEN_ABSOLUTE_SYM(CONFIG_SYS_LOG_SHOW_TAGS, 1);
GEN_ABSOLUTE_SYM(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH_MAX, 27);
    14d4:	4770      	bx	lr

000014d6 <_copy>:
#define MASK_TWENTY_SEVEN 0x1b

uint32_t _copy(uint8_t *to, uint32_t to_len,
	       const uint8_t *from, uint32_t from_len)
{
	if (from_len <= to_len) {
    14d6:	428b      	cmp	r3, r1
#define MASK_MOST_SIG_BIT 0x80
#define MASK_TWENTY_SEVEN 0x1b

uint32_t _copy(uint8_t *to, uint32_t to_len,
	       const uint8_t *from, uint32_t from_len)
{
    14d8:	b538      	push	{r3, r4, r5, lr}
    14da:	4615      	mov	r5, r2
    14dc:	461c      	mov	r4, r3
	if (from_len <= to_len) {
    14de:	d805      	bhi.n	14ec <_copy+0x16>
		(void)memcpy(to, from, from_len);
    14e0:	461a      	mov	r2, r3
    14e2:	4629      	mov	r1, r5
    14e4:	f7ff fdd5 	bl	1092 <memcpy>
		return from_len;
    14e8:	4620      	mov	r0, r4
    14ea:	bd38      	pop	{r3, r4, r5, pc}
	} else {
		return TC_CRYPTO_FAIL;
    14ec:	2000      	movs	r0, #0
	}
}
    14ee:	bd38      	pop	{r3, r4, r5, pc}

000014f0 <_set>:

void _set(void *to, uint8_t val, uint32_t len)
{
	(void)memset(to, val, len);
    14f0:	f7ff bdfb 	b.w	10ea <memset>

000014f4 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
    14f4:	09c3      	lsrs	r3, r0, #7
    14f6:	005a      	lsls	r2, r3, #1
    14f8:	4413      	add	r3, r2
    14fa:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    14fe:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
    1502:	b2c0      	uxtb	r0, r0
    1504:	4770      	bx	lr

00001506 <add_round_key>:
	(void)_copy(s, sizeof(t), t, sizeof(t));
}

static inline void add_round_key(uint8_t *s, const uint32_t *k)
{
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
    1506:	78ca      	ldrb	r2, [r1, #3]
    1508:	7803      	ldrb	r3, [r0, #0]
    150a:	4053      	eors	r3, r2
    150c:	7003      	strb	r3, [r0, #0]
    150e:	884a      	ldrh	r2, [r1, #2]
    1510:	7843      	ldrb	r3, [r0, #1]
    1512:	4053      	eors	r3, r2
    1514:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
    1516:	680a      	ldr	r2, [r1, #0]
    1518:	7883      	ldrb	r3, [r0, #2]
    151a:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
    151e:	7083      	strb	r3, [r0, #2]
    1520:	680b      	ldr	r3, [r1, #0]
    1522:	78c2      	ldrb	r2, [r0, #3]
    1524:	4053      	eors	r3, r2
    1526:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
    1528:	79ca      	ldrb	r2, [r1, #7]
    152a:	7903      	ldrb	r3, [r0, #4]
    152c:	4053      	eors	r3, r2
    152e:	7103      	strb	r3, [r0, #4]
    1530:	88ca      	ldrh	r2, [r1, #6]
    1532:	7943      	ldrb	r3, [r0, #5]
    1534:	4053      	eors	r3, r2
    1536:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
    1538:	684a      	ldr	r2, [r1, #4]
    153a:	7983      	ldrb	r3, [r0, #6]
    153c:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
    1540:	7183      	strb	r3, [r0, #6]
    1542:	684b      	ldr	r3, [r1, #4]
    1544:	79c2      	ldrb	r2, [r0, #7]
    1546:	4053      	eors	r3, r2
    1548:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
    154a:	7aca      	ldrb	r2, [r1, #11]
    154c:	7a03      	ldrb	r3, [r0, #8]
    154e:	4053      	eors	r3, r2
    1550:	7203      	strb	r3, [r0, #8]
    1552:	894a      	ldrh	r2, [r1, #10]
    1554:	7a43      	ldrb	r3, [r0, #9]
    1556:	4053      	eors	r3, r2
    1558:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
    155a:	688a      	ldr	r2, [r1, #8]
    155c:	7a83      	ldrb	r3, [r0, #10]
    155e:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
    1562:	7283      	strb	r3, [r0, #10]
    1564:	688b      	ldr	r3, [r1, #8]
    1566:	7ac2      	ldrb	r2, [r0, #11]
    1568:	4053      	eors	r3, r2
    156a:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
    156c:	7bca      	ldrb	r2, [r1, #15]
    156e:	7b03      	ldrb	r3, [r0, #12]
    1570:	4053      	eors	r3, r2
    1572:	7303      	strb	r3, [r0, #12]
    1574:	89ca      	ldrh	r2, [r1, #14]
    1576:	7b43      	ldrb	r3, [r0, #13]
    1578:	4053      	eors	r3, r2
    157a:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
    157c:	68ca      	ldr	r2, [r1, #12]
    157e:	7b83      	ldrb	r3, [r0, #14]
    1580:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
    1584:	7383      	strb	r3, [r0, #14]
    1586:	68cb      	ldr	r3, [r1, #12]
    1588:	7bc2      	ldrb	r2, [r0, #15]
    158a:	4053      	eors	r3, r2
    158c:	73c3      	strb	r3, [r0, #15]
    158e:	4770      	bx	lr

00001590 <add_round_key>:
	return TC_CRYPTO_SUCCESS;
}

static inline void add_round_key(uint8_t *s, const uint32_t *k)
{
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
    1590:	78ca      	ldrb	r2, [r1, #3]
    1592:	7803      	ldrb	r3, [r0, #0]
    1594:	4053      	eors	r3, r2
    1596:	7003      	strb	r3, [r0, #0]
    1598:	884a      	ldrh	r2, [r1, #2]
    159a:	7843      	ldrb	r3, [r0, #1]
    159c:	4053      	eors	r3, r2
    159e:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
    15a0:	680a      	ldr	r2, [r1, #0]
    15a2:	7883      	ldrb	r3, [r0, #2]
    15a4:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
    15a8:	7083      	strb	r3, [r0, #2]
    15aa:	680b      	ldr	r3, [r1, #0]
    15ac:	78c2      	ldrb	r2, [r0, #3]
    15ae:	4053      	eors	r3, r2
    15b0:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
    15b2:	79ca      	ldrb	r2, [r1, #7]
    15b4:	7903      	ldrb	r3, [r0, #4]
    15b6:	4053      	eors	r3, r2
    15b8:	7103      	strb	r3, [r0, #4]
    15ba:	88ca      	ldrh	r2, [r1, #6]
    15bc:	7943      	ldrb	r3, [r0, #5]
    15be:	4053      	eors	r3, r2
    15c0:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
    15c2:	684a      	ldr	r2, [r1, #4]
    15c4:	7983      	ldrb	r3, [r0, #6]
    15c6:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
    15ca:	7183      	strb	r3, [r0, #6]
    15cc:	684b      	ldr	r3, [r1, #4]
    15ce:	79c2      	ldrb	r2, [r0, #7]
    15d0:	4053      	eors	r3, r2
    15d2:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
    15d4:	7aca      	ldrb	r2, [r1, #11]
    15d6:	7a03      	ldrb	r3, [r0, #8]
    15d8:	4053      	eors	r3, r2
    15da:	7203      	strb	r3, [r0, #8]
    15dc:	894a      	ldrh	r2, [r1, #10]
    15de:	7a43      	ldrb	r3, [r0, #9]
    15e0:	4053      	eors	r3, r2
    15e2:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
    15e4:	688a      	ldr	r2, [r1, #8]
    15e6:	7a83      	ldrb	r3, [r0, #10]
    15e8:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
    15ec:	7283      	strb	r3, [r0, #10]
    15ee:	688b      	ldr	r3, [r1, #8]
    15f0:	7ac2      	ldrb	r2, [r0, #11]
    15f2:	4053      	eors	r3, r2
    15f4:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
    15f6:	7bca      	ldrb	r2, [r1, #15]
    15f8:	7b03      	ldrb	r3, [r0, #12]
    15fa:	4053      	eors	r3, r2
    15fc:	7303      	strb	r3, [r0, #12]
    15fe:	89ca      	ldrh	r2, [r1, #14]
    1600:	7b43      	ldrb	r3, [r0, #13]
    1602:	4053      	eors	r3, r2
    1604:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
    1606:	68ca      	ldr	r2, [r1, #12]
    1608:	7b83      	ldrb	r3, [r0, #14]
    160a:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
    160e:	7383      	strb	r3, [r0, #14]
    1610:	68cb      	ldr	r3, [r1, #12]
    1612:	7bc2      	ldrb	r2, [r0, #15]
    1614:	4053      	eors	r3, r2
    1616:	73c3      	strb	r3, [r0, #15]
    1618:	4770      	bx	lr

0000161a <mult_row_column>:
#define multb(a)(mult8(a)^_double_byte(a)^(a))
#define multd(a)(mult8(a)^_double_byte(_double_byte(a))^(a))
#define multe(a)(mult8(a)^_double_byte(_double_byte(a))^_double_byte(a))

static inline void mult_row_column(uint8_t *out, const uint8_t *in)
{
    161a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    161e:	4606      	mov	r6, r0
    1620:	b085      	sub	sp, #20
	out[0] = multe(in[0]) ^ multb(in[1]) ^ multd(in[2]) ^ mult9(in[3]);
    1622:	7808      	ldrb	r0, [r1, #0]
#define multb(a)(mult8(a)^_double_byte(a)^(a))
#define multd(a)(mult8(a)^_double_byte(_double_byte(a))^(a))
#define multe(a)(mult8(a)^_double_byte(_double_byte(a))^_double_byte(a))

static inline void mult_row_column(uint8_t *out, const uint8_t *in)
{
    1624:	460c      	mov	r4, r1
	out[0] = multe(in[0]) ^ multb(in[1]) ^ multd(in[2]) ^ mult9(in[3]);
    1626:	f7ff ff65 	bl	14f4 <_double_byte>
    162a:	f7ff ff63 	bl	14f4 <_double_byte>
    162e:	f7ff ff61 	bl	14f4 <_double_byte>
    1632:	9003      	str	r0, [sp, #12]
    1634:	7820      	ldrb	r0, [r4, #0]
    1636:	f7ff ff5d 	bl	14f4 <_double_byte>
    163a:	f7ff ff5b 	bl	14f4 <_double_byte>
    163e:	9002      	str	r0, [sp, #8]
    1640:	7820      	ldrb	r0, [r4, #0]
    1642:	f7ff ff57 	bl	14f4 <_double_byte>
    1646:	9001      	str	r0, [sp, #4]
    1648:	7860      	ldrb	r0, [r4, #1]
    164a:	f7ff ff53 	bl	14f4 <_double_byte>
    164e:	f7ff ff51 	bl	14f4 <_double_byte>
    1652:	f7ff ff4f 	bl	14f4 <_double_byte>
    1656:	4683      	mov	fp, r0
    1658:	7860      	ldrb	r0, [r4, #1]
    165a:	f7ff ff4b 	bl	14f4 <_double_byte>
    165e:	4682      	mov	sl, r0
    1660:	78a0      	ldrb	r0, [r4, #2]
    1662:	7865      	ldrb	r5, [r4, #1]
    1664:	f7ff ff46 	bl	14f4 <_double_byte>
    1668:	f7ff ff44 	bl	14f4 <_double_byte>
    166c:	f7ff ff42 	bl	14f4 <_double_byte>
    1670:	4681      	mov	r9, r0
    1672:	78a0      	ldrb	r0, [r4, #2]
    1674:	f7ff ff3e 	bl	14f4 <_double_byte>
    1678:	f7ff ff3c 	bl	14f4 <_double_byte>
    167c:	4680      	mov	r8, r0
    167e:	78a0      	ldrb	r0, [r4, #2]
    1680:	4045      	eors	r5, r0
    1682:	78e0      	ldrb	r0, [r4, #3]
    1684:	f7ff ff36 	bl	14f4 <_double_byte>
    1688:	f7ff ff34 	bl	14f4 <_double_byte>
    168c:	f7ff ff32 	bl	14f4 <_double_byte>
    1690:	78e7      	ldrb	r7, [r4, #3]
    1692:	9903      	ldr	r1, [sp, #12]
    1694:	9b02      	ldr	r3, [sp, #8]
    1696:	9a01      	ldr	r2, [sp, #4]
    1698:	407d      	eors	r5, r7
    169a:	404d      	eors	r5, r1
    169c:	ea83 0105 	eor.w	r1, r3, r5
    16a0:	4051      	eors	r1, r2
    16a2:	ea8b 0201 	eor.w	r2, fp, r1
    16a6:	ea8a 0202 	eor.w	r2, sl, r2
    16aa:	ea89 0302 	eor.w	r3, r9, r2
    16ae:	ea88 0303 	eor.w	r3, r8, r3
    16b2:	4058      	eors	r0, r3
    16b4:	7030      	strb	r0, [r6, #0]
	out[1] = mult9(in[0]) ^ multe(in[1]) ^ multb(in[2]) ^ multd(in[3]);
    16b6:	7820      	ldrb	r0, [r4, #0]
    16b8:	f7ff ff1c 	bl	14f4 <_double_byte>
    16bc:	f7ff ff1a 	bl	14f4 <_double_byte>
    16c0:	f7ff ff18 	bl	14f4 <_double_byte>
    16c4:	9003      	str	r0, [sp, #12]
    16c6:	7860      	ldrb	r0, [r4, #1]
    16c8:	7825      	ldrb	r5, [r4, #0]
    16ca:	f7ff ff13 	bl	14f4 <_double_byte>
    16ce:	f7ff ff11 	bl	14f4 <_double_byte>
    16d2:	f7ff ff0f 	bl	14f4 <_double_byte>
    16d6:	9002      	str	r0, [sp, #8]
    16d8:	7860      	ldrb	r0, [r4, #1]
    16da:	f7ff ff0b 	bl	14f4 <_double_byte>
    16de:	f7ff ff09 	bl	14f4 <_double_byte>
    16e2:	9001      	str	r0, [sp, #4]
    16e4:	7860      	ldrb	r0, [r4, #1]
    16e6:	f7ff ff05 	bl	14f4 <_double_byte>
    16ea:	4683      	mov	fp, r0
    16ec:	78a0      	ldrb	r0, [r4, #2]
    16ee:	f7ff ff01 	bl	14f4 <_double_byte>
    16f2:	f7ff feff 	bl	14f4 <_double_byte>
    16f6:	f7ff fefd 	bl	14f4 <_double_byte>
    16fa:	4682      	mov	sl, r0
    16fc:	78a0      	ldrb	r0, [r4, #2]
    16fe:	f7ff fef9 	bl	14f4 <_double_byte>
    1702:	4681      	mov	r9, r0
    1704:	78a0      	ldrb	r0, [r4, #2]
    1706:	4045      	eors	r5, r0
    1708:	78e0      	ldrb	r0, [r4, #3]
    170a:	f7ff fef3 	bl	14f4 <_double_byte>
    170e:	f7ff fef1 	bl	14f4 <_double_byte>
    1712:	f7ff feef 	bl	14f4 <_double_byte>
    1716:	4680      	mov	r8, r0
    1718:	78e0      	ldrb	r0, [r4, #3]
    171a:	f7ff feeb 	bl	14f4 <_double_byte>
    171e:	f7ff fee9 	bl	14f4 <_double_byte>
    1722:	78e7      	ldrb	r7, [r4, #3]
    1724:	9903      	ldr	r1, [sp, #12]
    1726:	9b02      	ldr	r3, [sp, #8]
    1728:	9a01      	ldr	r2, [sp, #4]
    172a:	407d      	eors	r5, r7
    172c:	404d      	eors	r5, r1
    172e:	ea83 0105 	eor.w	r1, r3, r5
    1732:	4051      	eors	r1, r2
    1734:	ea8b 0201 	eor.w	r2, fp, r1
    1738:	ea8a 0202 	eor.w	r2, sl, r2
    173c:	ea89 0302 	eor.w	r3, r9, r2
    1740:	ea88 0303 	eor.w	r3, r8, r3
    1744:	4058      	eors	r0, r3
    1746:	7070      	strb	r0, [r6, #1]
	out[2] = multd(in[0]) ^ mult9(in[1]) ^ multe(in[2]) ^ multb(in[3]);
    1748:	7820      	ldrb	r0, [r4, #0]
    174a:	f7ff fed3 	bl	14f4 <_double_byte>
    174e:	f7ff fed1 	bl	14f4 <_double_byte>
    1752:	f7ff fecf 	bl	14f4 <_double_byte>
    1756:	9003      	str	r0, [sp, #12]
    1758:	7820      	ldrb	r0, [r4, #0]
    175a:	f7ff fecb 	bl	14f4 <_double_byte>
    175e:	f7ff fec9 	bl	14f4 <_double_byte>
    1762:	9002      	str	r0, [sp, #8]
    1764:	7860      	ldrb	r0, [r4, #1]
    1766:	7825      	ldrb	r5, [r4, #0]
    1768:	f7ff fec4 	bl	14f4 <_double_byte>
    176c:	f7ff fec2 	bl	14f4 <_double_byte>
    1770:	f7ff fec0 	bl	14f4 <_double_byte>
    1774:	9001      	str	r0, [sp, #4]
    1776:	7860      	ldrb	r0, [r4, #1]
    1778:	4045      	eors	r5, r0
    177a:	78a0      	ldrb	r0, [r4, #2]
    177c:	f7ff feba 	bl	14f4 <_double_byte>
    1780:	f7ff feb8 	bl	14f4 <_double_byte>
    1784:	f7ff feb6 	bl	14f4 <_double_byte>
    1788:	4683      	mov	fp, r0
    178a:	78a0      	ldrb	r0, [r4, #2]
    178c:	f7ff feb2 	bl	14f4 <_double_byte>
    1790:	f7ff feb0 	bl	14f4 <_double_byte>
    1794:	4682      	mov	sl, r0
    1796:	78a0      	ldrb	r0, [r4, #2]
    1798:	f7ff feac 	bl	14f4 <_double_byte>
    179c:	4681      	mov	r9, r0
    179e:	78e0      	ldrb	r0, [r4, #3]
    17a0:	f7ff fea8 	bl	14f4 <_double_byte>
    17a4:	f7ff fea6 	bl	14f4 <_double_byte>
    17a8:	f7ff fea4 	bl	14f4 <_double_byte>
    17ac:	4680      	mov	r8, r0
    17ae:	78e0      	ldrb	r0, [r4, #3]
    17b0:	f7ff fea0 	bl	14f4 <_double_byte>
    17b4:	78e7      	ldrb	r7, [r4, #3]
    17b6:	9903      	ldr	r1, [sp, #12]
    17b8:	9b02      	ldr	r3, [sp, #8]
    17ba:	9a01      	ldr	r2, [sp, #4]
    17bc:	407d      	eors	r5, r7
    17be:	404d      	eors	r5, r1
    17c0:	ea83 0105 	eor.w	r1, r3, r5
    17c4:	4051      	eors	r1, r2
    17c6:	ea8b 0201 	eor.w	r2, fp, r1
    17ca:	ea8a 0202 	eor.w	r2, sl, r2
    17ce:	ea89 0302 	eor.w	r3, r9, r2
    17d2:	ea88 0303 	eor.w	r3, r8, r3
    17d6:	4058      	eors	r0, r3
    17d8:	70b0      	strb	r0, [r6, #2]
	out[3] = multb(in[0]) ^ multd(in[1]) ^ mult9(in[2]) ^ multe(in[3]);
    17da:	7820      	ldrb	r0, [r4, #0]
    17dc:	f7ff fe8a 	bl	14f4 <_double_byte>
    17e0:	f7ff fe88 	bl	14f4 <_double_byte>
    17e4:	f7ff fe86 	bl	14f4 <_double_byte>
    17e8:	4682      	mov	sl, r0
    17ea:	7820      	ldrb	r0, [r4, #0]
    17ec:	f7ff fe82 	bl	14f4 <_double_byte>
    17f0:	4605      	mov	r5, r0
    17f2:	7860      	ldrb	r0, [r4, #1]
    17f4:	7827      	ldrb	r7, [r4, #0]
    17f6:	f7ff fe7d 	bl	14f4 <_double_byte>
    17fa:	f7ff fe7b 	bl	14f4 <_double_byte>
    17fe:	f7ff fe79 	bl	14f4 <_double_byte>
    1802:	4681      	mov	r9, r0
    1804:	7860      	ldrb	r0, [r4, #1]
    1806:	f7ff fe75 	bl	14f4 <_double_byte>
    180a:	f7ff fe73 	bl	14f4 <_double_byte>
    180e:	7862      	ldrb	r2, [r4, #1]
    1810:	4680      	mov	r8, r0
    1812:	78a0      	ldrb	r0, [r4, #2]
    1814:	4057      	eors	r7, r2
    1816:	f7ff fe6d 	bl	14f4 <_double_byte>
    181a:	f7ff fe6b 	bl	14f4 <_double_byte>
    181e:	f7ff fe69 	bl	14f4 <_double_byte>
    1822:	78a2      	ldrb	r2, [r4, #2]
    1824:	407a      	eors	r2, r7
    1826:	ea8a 0302 	eor.w	r3, sl, r2
    182a:	406b      	eors	r3, r5
    182c:	ea89 0503 	eor.w	r5, r9, r3
    1830:	ea88 0505 	eor.w	r5, r8, r5
    1834:	4068      	eors	r0, r5
    1836:	b2c5      	uxtb	r5, r0
    1838:	78e0      	ldrb	r0, [r4, #3]
    183a:	f7ff fe5b 	bl	14f4 <_double_byte>
    183e:	f7ff fe59 	bl	14f4 <_double_byte>
    1842:	f7ff fe57 	bl	14f4 <_double_byte>
    1846:	4680      	mov	r8, r0
    1848:	78e0      	ldrb	r0, [r4, #3]
    184a:	f7ff fe53 	bl	14f4 <_double_byte>
    184e:	f7ff fe51 	bl	14f4 <_double_byte>
    1852:	4607      	mov	r7, r0
    1854:	78e0      	ldrb	r0, [r4, #3]
    1856:	f7ff fe4d 	bl	14f4 <_double_byte>
    185a:	ea88 0505 	eor.w	r5, r8, r5
    185e:	407d      	eors	r5, r7
    1860:	4068      	eors	r0, r5
    1862:	70f0      	strb	r0, [r6, #3]
}
    1864:	b005      	add	sp, #20
    1866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000186a <mult_row_column>:
}

#define triple(a)(_double_byte(a)^(a))

static inline void mult_row_column(uint8_t *out, const uint8_t *in)
{
    186a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    186c:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
    186e:	7808      	ldrb	r0, [r1, #0]
}

#define triple(a)(_double_byte(a)^(a))

static inline void mult_row_column(uint8_t *out, const uint8_t *in)
{
    1870:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
    1872:	f7ff fe3f 	bl	14f4 <_double_byte>
    1876:	4605      	mov	r5, r0
    1878:	7860      	ldrb	r0, [r4, #1]
    187a:	f7ff fe3b 	bl	14f4 <_double_byte>
    187e:	78a2      	ldrb	r2, [r4, #2]
    1880:	7863      	ldrb	r3, [r4, #1]
    1882:	4053      	eors	r3, r2
    1884:	78e2      	ldrb	r2, [r4, #3]
    1886:	4053      	eors	r3, r2
    1888:	406b      	eors	r3, r5
    188a:	4058      	eors	r0, r3
    188c:	7030      	strb	r0, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
    188e:	7860      	ldrb	r0, [r4, #1]
    1890:	7827      	ldrb	r7, [r4, #0]
    1892:	f7ff fe2f 	bl	14f4 <_double_byte>
    1896:	4605      	mov	r5, r0
    1898:	78a0      	ldrb	r0, [r4, #2]
    189a:	f7ff fe2b 	bl	14f4 <_double_byte>
    189e:	78a2      	ldrb	r2, [r4, #2]
    18a0:	ea87 0302 	eor.w	r3, r7, r2
    18a4:	78e2      	ldrb	r2, [r4, #3]
    18a6:	4053      	eors	r3, r2
    18a8:	406b      	eors	r3, r5
    18aa:	4058      	eors	r0, r3
    18ac:	7070      	strb	r0, [r6, #1]
    18ae:	7863      	ldrb	r3, [r4, #1]
    18b0:	7825      	ldrb	r5, [r4, #0]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
    18b2:	78a0      	ldrb	r0, [r4, #2]
    18b4:	405d      	eors	r5, r3
    18b6:	f7ff fe1d 	bl	14f4 <_double_byte>
    18ba:	4607      	mov	r7, r0
    18bc:	78e0      	ldrb	r0, [r4, #3]
    18be:	f7ff fe19 	bl	14f4 <_double_byte>
    18c2:	78e2      	ldrb	r2, [r4, #3]
    18c4:	ea85 0302 	eor.w	r3, r5, r2
    18c8:	407b      	eors	r3, r7
    18ca:	4058      	eors	r0, r3
    18cc:	70b0      	strb	r0, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
    18ce:	7820      	ldrb	r0, [r4, #0]
    18d0:	f7ff fe10 	bl	14f4 <_double_byte>
    18d4:	7863      	ldrb	r3, [r4, #1]
    18d6:	7825      	ldrb	r5, [r4, #0]
    18d8:	405d      	eors	r5, r3
    18da:	78a3      	ldrb	r3, [r4, #2]
    18dc:	405d      	eors	r5, r3
    18de:	4068      	eors	r0, r5
    18e0:	b2c5      	uxtb	r5, r0
    18e2:	78e0      	ldrb	r0, [r4, #3]
    18e4:	f7ff fe06 	bl	14f4 <_double_byte>
    18e8:	4068      	eors	r0, r5
    18ea:	70f0      	strb	r0, [r6, #3]
    18ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000018ee <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
    18ee:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb*Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
    18f0:	7802      	ldrb	r2, [r0, #0]
    18f2:	f88d 2000 	strb.w	r2, [sp]
    18f6:	7942      	ldrb	r2, [r0, #5]
    18f8:	f88d 2001 	strb.w	r2, [sp, #1]
    18fc:	7a82      	ldrb	r2, [r0, #10]
    18fe:	f88d 2002 	strb.w	r2, [sp, #2]
    1902:	7bc2      	ldrb	r2, [r0, #15]
    1904:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
    1908:	7902      	ldrb	r2, [r0, #4]
    190a:	f88d 2004 	strb.w	r2, [sp, #4]
    190e:	7a42      	ldrb	r2, [r0, #9]
    1910:	f88d 2005 	strb.w	r2, [sp, #5]
    1914:	7b82      	ldrb	r2, [r0, #14]
    1916:	f88d 2006 	strb.w	r2, [sp, #6]
    191a:	78c2      	ldrb	r2, [r0, #3]
    191c:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
    1920:	7a02      	ldrb	r2, [r0, #8]
    1922:	f88d 2008 	strb.w	r2, [sp, #8]
    1926:	7b42      	ldrb	r2, [r0, #13]
    1928:	f88d 2009 	strb.w	r2, [sp, #9]
    192c:	7882      	ldrb	r2, [r0, #2]
    192e:	f88d 200a 	strb.w	r2, [sp, #10]
    1932:	79c2      	ldrb	r2, [r0, #7]
    1934:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
    1938:	7b02      	ldrb	r2, [r0, #12]
    193a:	f88d 200c 	strb.w	r2, [sp, #12]
    193e:	7842      	ldrb	r2, [r0, #1]
    1940:	f88d 200d 	strb.w	r2, [sp, #13]
    1944:	7ac3      	ldrb	r3, [r0, #11]
    1946:	7982      	ldrb	r2, [r0, #6]
    1948:	f88d 200e 	strb.w	r2, [sp, #14]
    194c:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
    1950:	2310      	movs	r3, #16
    1952:	466a      	mov	r2, sp
    1954:	4619      	mov	r1, r3
    1956:	f7ff fdbe 	bl	14d6 <_copy>
}
    195a:	b005      	add	sp, #20
    195c:	f85d fb04 	ldr.w	pc, [sp], #4

00001960 <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int32_t tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
    1960:	b5f0      	push	{r4, r5, r6, r7, lr}
	const uint32_t rconst[11] = {
    1962:	4e29      	ldr	r6, [pc, #164]	; (1a08 <tc_aes128_set_encrypt_key+0xa8>)

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int32_t tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
    1964:	4607      	mov	r7, r0
    1966:	460c      	mov	r4, r1
	const uint32_t rconst[11] = {
    1968:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int32_t tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
    196a:	b08d      	sub	sp, #52	; 0x34
	const uint32_t rconst[11] = {
    196c:	ad01      	add	r5, sp, #4
    196e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    1970:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    1972:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    1974:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    1978:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	uint32_t i;
	uint32_t t;

	if (s == (TCAesKeySched_t) 0) {
    197c:	2f00      	cmp	r7, #0
    197e:	d03d      	beq.n	19fc <tc_aes128_set_encrypt_key+0x9c>
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
    1980:	2c00      	cmp	r4, #0
    1982:	d03d      	beq.n	1a00 <tc_aes128_set_encrypt_key+0xa0>
    1984:	4621      	mov	r1, r4
    1986:	1f38      	subs	r0, r7, #4
    1988:	3410      	adds	r4, #16
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    198a:	784b      	ldrb	r3, [r1, #1]
    198c:	780a      	ldrb	r2, [r1, #0]
    198e:	041b      	lsls	r3, r3, #16
    1990:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    1994:	78ca      	ldrb	r2, [r1, #3]
    1996:	4313      	orrs	r3, r2
    1998:	788a      	ldrb	r2, [r1, #2]
    199a:	3104      	adds	r1, #4
    199c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
    19a0:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    19a2:	f840 3f04 	str.w	r3, [r0, #4]!
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
    19a6:	d1f0      	bne.n	198a <tc_aes128_set_encrypt_key+0x2a>
	}

	for (; i < (Nb*(Nr+1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
    19a8:	4918      	ldr	r1, [pc, #96]	; (1a0c <tc_aes128_set_encrypt_key+0xac>)
    19aa:	f107 000c 	add.w	r0, r7, #12
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
    19ae:	2504      	movs	r5, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
	}

	for (; i < (Nb*(Nr+1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
    19b0:	07aa      	lsls	r2, r5, #30
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
	}

	for (; i < (Nb*(Nr+1)); ++i) {
		t = s->words[i-1];
    19b2:	f850 3b04 	ldr.w	r3, [r0], #4
		if ((i % Nk) == 0) {
    19b6:	d118      	bne.n	19ea <tc_aes128_set_encrypt_key+0x8a>
	0xb0, 0x54, 0xbb, 0x16
};

static inline uint32_t rotword(uint32_t a)
{
	return (((a) >> 24)|((a) << 8));
    19b8:	ea4f 6333 	mov.w	r3, r3, ror #24
	}

	for (; i < (Nb*(Nr+1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
    19bc:	0e1a      	lsrs	r2, r3, #24
    19be:	5c8c      	ldrb	r4, [r1, r2]
    19c0:	b2da      	uxtb	r2, r3
    19c2:	5c8a      	ldrb	r2, [r1, r2]
    19c4:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
    19c8:	f3c3 4407 	ubfx	r4, r3, #16, #8
    19cc:	f3c3 2307 	ubfx	r3, r3, #8, #8
    19d0:	5d0c      	ldrb	r4, [r1, r4]
    19d2:	5ccb      	ldrb	r3, [r1, r3]
    19d4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
    19d8:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    19dc:	ac0c      	add	r4, sp, #48	; 0x30
    19de:	f025 0203 	bic.w	r2, r5, #3
    19e2:	4422      	add	r2, r4
    19e4:	f852 2c2c 	ldr.w	r2, [r2, #-44]
    19e8:	4053      	eors	r3, r2
		}
		s->words[i] = s->words[i-Nk] ^ t;
    19ea:	f850 2c10 	ldr.w	r2, [r0, #-16]
	for (i = 0; i < Nk; ++i) {
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
	}

	for (; i < (Nb*(Nr+1)); ++i) {
    19ee:	3501      	adds	r5, #1
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
		}
		s->words[i] = s->words[i-Nk] ^ t;
    19f0:	4053      	eors	r3, r2
	for (i = 0; i < Nk; ++i) {
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
	}

	for (; i < (Nb*(Nr+1)); ++i) {
    19f2:	2d2c      	cmp	r5, #44	; 0x2c
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
		}
		s->words[i] = s->words[i-Nk] ^ t;
    19f4:	6003      	str	r3, [r0, #0]
	for (i = 0; i < Nk; ++i) {
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
	}

	for (; i < (Nb*(Nr+1)); ++i) {
    19f6:	d1db      	bne.n	19b0 <tc_aes128_set_encrypt_key+0x50>
			t = subword(rotword(t)) ^ rconst[i/Nk];
		}
		s->words[i] = s->words[i-Nk] ^ t;
	}

	return TC_CRYPTO_SUCCESS;
    19f8:	2001      	movs	r0, #1
    19fa:	e002      	b.n	1a02 <tc_aes128_set_encrypt_key+0xa2>
	};
	uint32_t i;
	uint32_t t;

	if (s == (TCAesKeySched_t) 0) {
		return TC_CRYPTO_FAIL;
    19fc:	4638      	mov	r0, r7
    19fe:	e000      	b.n	1a02 <tc_aes128_set_encrypt_key+0xa2>
    1a00:	4620      	mov	r0, r4
		}
		s->words[i] = s->words[i-Nk] ^ t;
	}

	return TC_CRYPTO_SUCCESS;
}
    1a02:	b00d      	add	sp, #52	; 0x34
    1a04:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1a06:	bf00      	nop
    1a08:	000139c4 	.word	0x000139c4
    1a0c:	00013c60 	.word	0x00013c60

00001a10 <tc_aes_encrypt>:
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
	(void) _copy(s, sizeof(t), t, sizeof(t));
}

int32_t tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
    1a10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1a14:	4614      	mov	r4, r2
    1a16:	b089      	sub	sp, #36	; 0x24
	uint8_t state[Nk*Nb];
	uint32_t i;

	if (out == (uint8_t *) 0) {
    1a18:	4680      	mov	r8, r0
    1a1a:	2800      	cmp	r0, #0
    1a1c:	d05b      	beq.n	1ad6 <tc_aes_encrypt+0xc6>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
    1a1e:	2900      	cmp	r1, #0
    1a20:	d05a      	beq.n	1ad8 <tc_aes_encrypt+0xc8>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
    1a22:	2a00      	cmp	r2, #0
    1a24:	d05a      	beq.n	1adc <tc_aes_encrypt+0xcc>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
    1a26:	2310      	movs	r3, #16
    1a28:	460a      	mov	r2, r1
    1a2a:	4668      	mov	r0, sp
    1a2c:	4619      	mov	r1, r3
    1a2e:	f7ff fd52 	bl	14d6 <_copy>
	add_round_key(state, s->words);
    1a32:	4621      	mov	r1, r4
    1a34:	4668      	mov	r0, sp
    1a36:	f7ff fdab 	bl	1590 <add_round_key>
static inline void sub_bytes(uint8_t *s)
{
	uint32_t i;

	for (i = 0; i < (Nb*Nk); ++i) {
		s[i] = sbox[s[i]];
    1a3a:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 1ae4 <tc_aes_encrypt+0xd4>
    1a3e:	f104 0710 	add.w	r7, r4, #16
    1a42:	f104 05a0 	add.w	r5, r4, #160	; 0xa0
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
	(void) _copy(s, sizeof(t), t, sizeof(t));
}

int32_t tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
    1a46:	2600      	movs	r6, #0
static inline void sub_bytes(uint8_t *s)
{
	uint32_t i;

	for (i = 0; i < (Nb*Nk); ++i) {
		s[i] = sbox[s[i]];
    1a48:	f81d 3006 	ldrb.w	r3, [sp, r6]
    1a4c:	4c25      	ldr	r4, [pc, #148]	; (1ae4 <tc_aes_encrypt+0xd4>)
    1a4e:	f819 3003 	ldrb.w	r3, [r9, r3]
    1a52:	f80d 3006 	strb.w	r3, [sp, r6]

static inline void sub_bytes(uint8_t *s)
{
	uint32_t i;

	for (i = 0; i < (Nb*Nk); ++i) {
    1a56:	3601      	adds	r6, #1
    1a58:	2e10      	cmp	r6, #16
    1a5a:	d1f5      	bne.n	1a48 <tc_aes_encrypt+0x38>
	(void)_copy(state, sizeof(state), in, sizeof(state));
	add_round_key(state, s->words);

	for (i = 0; i < (Nr-1); ++i) {
		sub_bytes(state);
		shift_rows(state);
    1a5c:	4668      	mov	r0, sp
    1a5e:	f7ff ff46 	bl	18ee <shift_rows>

static inline void mix_columns(uint8_t *s)
{
	uint8_t t[Nb*Nk];

	mult_row_column(t, s);
    1a62:	4669      	mov	r1, sp
    1a64:	a804      	add	r0, sp, #16
    1a66:	f7ff ff00 	bl	186a <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
    1a6a:	a901      	add	r1, sp, #4
    1a6c:	a805      	add	r0, sp, #20
    1a6e:	f7ff fefc 	bl	186a <mult_row_column>
	mult_row_column(&t[2*Nb], s+(2*Nb));
    1a72:	a902      	add	r1, sp, #8
    1a74:	a806      	add	r0, sp, #24
    1a76:	f7ff fef8 	bl	186a <mult_row_column>
	mult_row_column(&t[3*Nb], s+(3*Nb));
    1a7a:	a903      	add	r1, sp, #12
    1a7c:	a807      	add	r0, sp, #28
    1a7e:	f7ff fef4 	bl	186a <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
    1a82:	4633      	mov	r3, r6
    1a84:	aa04      	add	r2, sp, #16
    1a86:	4631      	mov	r1, r6
    1a88:	4668      	mov	r0, sp
    1a8a:	f7ff fd24 	bl	14d6 <_copy>

	for (i = 0; i < (Nr-1); ++i) {
		sub_bytes(state);
		shift_rows(state);
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
    1a8e:	4639      	mov	r1, r7
    1a90:	4668      	mov	r0, sp
    1a92:	3710      	adds	r7, #16
    1a94:	f7ff fd7c 	bl	1590 <add_round_key>
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
	add_round_key(state, s->words);

	for (i = 0; i < (Nr-1); ++i) {
    1a98:	42bd      	cmp	r5, r7
    1a9a:	d1d4      	bne.n	1a46 <tc_aes_encrypt+0x36>
    1a9c:	2600      	movs	r6, #0
static inline void sub_bytes(uint8_t *s)
{
	uint32_t i;

	for (i = 0; i < (Nb*Nk); ++i) {
		s[i] = sbox[s[i]];
    1a9e:	f81d 3006 	ldrb.w	r3, [sp, r6]
    1aa2:	5ce3      	ldrb	r3, [r4, r3]
    1aa4:	f80d 3006 	strb.w	r3, [sp, r6]

static inline void sub_bytes(uint8_t *s)
{
	uint32_t i;

	for (i = 0; i < (Nb*Nk); ++i) {
    1aa8:	3601      	adds	r6, #1
    1aaa:	2e10      	cmp	r6, #16
    1aac:	d1f7      	bne.n	1a9e <tc_aes_encrypt+0x8e>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
	}

	sub_bytes(state);
	shift_rows(state);
    1aae:	4668      	mov	r0, sp
    1ab0:	f7ff ff1d 	bl	18ee <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
    1ab4:	4629      	mov	r1, r5
    1ab6:	4668      	mov	r0, sp
    1ab8:	f7ff fd6a 	bl	1590 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
    1abc:	4633      	mov	r3, r6
    1abe:	466a      	mov	r2, sp
    1ac0:	4631      	mov	r1, r6
    1ac2:	4640      	mov	r0, r8
    1ac4:	f7ff fd07 	bl	14d6 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
    1ac8:	4668      	mov	r0, sp
    1aca:	4632      	mov	r2, r6
    1acc:	2100      	movs	r1, #0
    1ace:	f7ff fd0f 	bl	14f0 <_set>

	return TC_CRYPTO_SUCCESS;
    1ad2:	2001      	movs	r0, #1
    1ad4:	e003      	b.n	1ade <tc_aes_encrypt+0xce>
    1ad6:	e002      	b.n	1ade <tc_aes_encrypt+0xce>
{
	uint8_t state[Nk*Nb];
	uint32_t i;

	if (out == (uint8_t *) 0) {
		return TC_CRYPTO_FAIL;
    1ad8:	4608      	mov	r0, r1
    1ada:	e000      	b.n	1ade <tc_aes_encrypt+0xce>
    1adc:	4610      	mov	r0, r2

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));

	return TC_CRYPTO_SUCCESS;
}
    1ade:	b009      	add	sp, #36	; 0x24
    1ae0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1ae4:	00013c60 	.word	0x00013c60

00001ae8 <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
    1ae8:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
    1aea:	f991 3000 	ldrsb.w	r3, [r1]
    1aee:	2b00      	cmp	r3, #0
 */
void gf_double(uint8_t *out, uint8_t *in)
{

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);
    1af0:	f101 020f 	add.w	r2, r1, #15

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
    1af4:	bfb4      	ite	lt
    1af6:	2387      	movlt	r3, #135	; 0x87
    1af8:	2300      	movge	r3, #0
    1afa:	3010      	adds	r0, #16

	out += (TC_AES_BLOCK_SIZE - 1);
	for (;;) {
		*out-- = (*x << 1) ^ carry;
    1afc:	7814      	ldrb	r4, [r2, #0]
		if (x == in) {
    1afe:	428a      	cmp	r2, r1
	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;

	out += (TC_AES_BLOCK_SIZE - 1);
	for (;;) {
		*out-- = (*x << 1) ^ carry;
    1b00:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
    1b04:	f800 3d01 	strb.w	r3, [r0, #-1]!
		if (x == in) {
    1b08:	d003      	beq.n	1b12 <gf_double+0x2a>
			break;
		}
		carry = *x-- >> 7;
    1b0a:	f812 3901 	ldrb.w	r3, [r2], #-1
    1b0e:	09db      	lsrs	r3, r3, #7
	}
    1b10:	e7f4      	b.n	1afc <gf_double+0x14>
    1b12:	bd10      	pop	{r4, pc}

00001b14 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int32_t tc_cmac_erase(TCCmacState_t s)
{
    1b14:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
    1b16:	b128      	cbz	r0, 1b24 <tc_cmac_erase+0x10>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
    1b18:	2258      	movs	r2, #88	; 0x58
    1b1a:	2100      	movs	r1, #0
    1b1c:	f7ff fce8 	bl	14f0 <_set>

	return TC_CRYPTO_SUCCESS;
    1b20:	2001      	movs	r0, #1
    1b22:	bd08      	pop	{r3, pc}
}
    1b24:	bd08      	pop	{r3, pc}

00001b26 <tc_cmac_init>:

int32_t tc_cmac_init(TCCmacState_t s)
{
    1b26:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
    1b28:	4604      	mov	r4, r0
    1b2a:	b190      	cbz	r0, 1b52 <tc_cmac_init+0x2c>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
    1b2c:	2210      	movs	r2, #16
    1b2e:	2100      	movs	r1, #0
    1b30:	f7ff fcde 	bl	14f0 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
    1b34:	f104 0030 	add.w	r0, r4, #48	; 0x30
    1b38:	2210      	movs	r2, #16
    1b3a:	2100      	movs	r1, #0
    1b3c:	f7ff fcd8 	bl	14f0 <_set>
	s->leftover_offset = 0;
    1b40:	2300      	movs	r3, #0
    1b42:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
    1b44:	2200      	movs	r2, #0
    1b46:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    1b4a:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50

	return TC_CRYPTO_SUCCESS;
    1b4e:	2001      	movs	r0, #1
    1b50:	bd10      	pop	{r4, pc}
}
    1b52:	bd10      	pop	{r4, pc}

00001b54 <tc_cmac_setup>:
		carry = *x-- >> 7;
	}
}

int32_t tc_cmac_setup(TCCmacState_t s, const uint8_t *key, TCAesKeySched_t sched)
{
    1b54:	b570      	push	{r4, r5, r6, lr}
    1b56:	460d      	mov	r5, r1
    1b58:	4616      	mov	r6, r2

	/* input sanity check: */
	if (s == (TCCmacState_t) 0 ||
    1b5a:	4604      	mov	r4, r0
    1b5c:	b318      	cbz	r0, 1ba6 <tc_cmac_setup+0x52>
    1b5e:	b319      	cbz	r1, 1ba8 <tc_cmac_setup+0x54>
	    key == (const uint8_t *) 0) {
		return TC_CRYPTO_FAIL;
	}

	/* put s into a known state */
	_set(s, 0, sizeof(*s));
    1b60:	2258      	movs	r2, #88	; 0x58
    1b62:	2100      	movs	r1, #0
    1b64:	f7ff fcc4 	bl	14f0 <_set>
	s->sched = sched;

	/* configure the encryption key used by the underlying block cipher */
	tc_aes128_set_encrypt_key(s->sched, key);
    1b68:	4629      	mov	r1, r5
		return TC_CRYPTO_FAIL;
	}

	/* put s into a known state */
	_set(s, 0, sizeof(*s));
	s->sched = sched;
    1b6a:	64a6      	str	r6, [r4, #72]	; 0x48

	/* configure the encryption key used by the underlying block cipher */
	tc_aes128_set_encrypt_key(s->sched, key);
    1b6c:	4630      	mov	r0, r6
    1b6e:	f7ff fef7 	bl	1960 <tc_aes128_set_encrypt_key>

	/* compute s->K1 and s->K2 from s->iv using s->keyid */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
    1b72:	4620      	mov	r0, r4
    1b74:	2210      	movs	r2, #16
    1b76:	2100      	movs	r1, #0
    1b78:	f7ff fcba 	bl	14f0 <_set>
	tc_aes_encrypt(s->iv, s->iv, s->sched);
	gf_double (s->K1, s->iv);
    1b7c:	f104 0510 	add.w	r5, r4, #16
	/* configure the encryption key used by the underlying block cipher */
	tc_aes128_set_encrypt_key(s->sched, key);

	/* compute s->K1 and s->K2 from s->iv using s->keyid */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
	tc_aes_encrypt(s->iv, s->iv, s->sched);
    1b80:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    1b82:	4621      	mov	r1, r4
    1b84:	4620      	mov	r0, r4
    1b86:	f7ff ff43 	bl	1a10 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
    1b8a:	4621      	mov	r1, r4
    1b8c:	4628      	mov	r0, r5
    1b8e:	f7ff ffab 	bl	1ae8 <gf_double>
	gf_double (s->K2, s->K1);
    1b92:	4629      	mov	r1, r5
    1b94:	f104 0020 	add.w	r0, r4, #32
    1b98:	f7ff ffa6 	bl	1ae8 <gf_double>

	/* reset s->iv to 0 in case someone wants to compute now */
	tc_cmac_init(s);
    1b9c:	4620      	mov	r0, r4
    1b9e:	f7ff ffc2 	bl	1b26 <tc_cmac_init>

	return TC_CRYPTO_SUCCESS;
    1ba2:	2001      	movs	r0, #1
    1ba4:	bd70      	pop	{r4, r5, r6, pc}
    1ba6:	bd70      	pop	{r4, r5, r6, pc}
{

	/* input sanity check: */
	if (s == (TCCmacState_t) 0 ||
	    key == (const uint8_t *) 0) {
		return TC_CRYPTO_FAIL;
    1ba8:	4608      	mov	r0, r1

	/* reset s->iv to 0 in case someone wants to compute now */
	tc_cmac_init(s);

	return TC_CRYPTO_SUCCESS;
}
    1baa:	bd70      	pop	{r4, r5, r6, pc}

00001bac <tc_cmac_update>:

	return TC_CRYPTO_SUCCESS;
}

int32_t tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
    1bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1bae:	460d      	mov	r5, r1
    1bb0:	4616      	mov	r6, r2
	uint32_t i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
    1bb2:	4604      	mov	r4, r0
    1bb4:	2800      	cmp	r0, #0
    1bb6:	d05c      	beq.n	1c72 <tc_cmac_update+0xc6>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
    1bb8:	2a00      	cmp	r2, #0
    1bba:	d058      	beq.n	1c6e <tc_cmac_update+0xc2>
		return  TC_CRYPTO_SUCCESS;
	}
	if (data == (const uint8_t *) 0) {
    1bbc:	2900      	cmp	r1, #0
    1bbe:	d059      	beq.n	1c74 <tc_cmac_update+0xc8>
		return TC_CRYPTO_FAIL;
	}

	if (s->countdown == 0) {
    1bc0:	e9d0 2314 	ldrd	r2, r3, [r0, #80]	; 0x50
    1bc4:	ea52 0103 	orrs.w	r1, r2, r3
    1bc8:	d056      	beq.n	1c78 <tc_cmac_update+0xcc>
		return TC_CRYPTO_FAIL;
	}

	s->countdown--;
    1bca:	f112 32ff 	adds.w	r2, r2, #4294967295
    1bce:	f143 33ff 	adc.w	r3, r3, #4294967295
    1bd2:	e9c0 2314 	strd	r2, r3, [r0, #80]	; 0x50

	if (s->leftover_offset > 0) {
    1bd6:	6c40      	ldr	r0, [r0, #68]	; 0x44
    1bd8:	b348      	cbz	r0, 1c2e <tc_cmac_update+0x82>
		/* last data added to s didn't end on a TC_AES_BLOCK_SIZE byte boundary */
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
    1bda:	f1c0 0710 	rsb	r7, r0, #16

		if (data_length < remaining_space) {
    1bde:	42be      	cmp	r6, r7
    1be0:	f100 0030 	add.w	r0, r0, #48	; 0x30
    1be4:	d208      	bcs.n	1bf8 <tc_cmac_update+0x4c>
			/* still not enough data to encrypt this time either */
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
    1be6:	4633      	mov	r3, r6
    1be8:	4631      	mov	r1, r6
    1bea:	462a      	mov	r2, r5
    1bec:	4420      	add	r0, r4
    1bee:	f7ff fc72 	bl	14d6 <_copy>
			s->leftover_offset += data_length;
    1bf2:	6c63      	ldr	r3, [r4, #68]	; 0x44
    1bf4:	441e      	add	r6, r3
    1bf6:	e039      	b.n	1c6c <tc_cmac_update+0xc0>
			return TC_CRYPTO_SUCCESS;
		}
		/* leftover block is now full; encrypt it first */
		_copy(&s->leftover[s->leftover_offset],
    1bf8:	463b      	mov	r3, r7
    1bfa:	462a      	mov	r2, r5
    1bfc:	4639      	mov	r1, r7
    1bfe:	4420      	add	r0, r4
    1c00:	f7ff fc69 	bl	14d6 <_copy>
		      remaining_space,
		      data,
		      remaining_space);
		data_length -= remaining_space;
		data += remaining_space;
		s->leftover_offset = 0;
    1c04:	2300      	movs	r3, #0
    1c06:	6463      	str	r3, [r4, #68]	; 0x44
		/* leftover block is now full; encrypt it first */
		_copy(&s->leftover[s->leftover_offset],
		      remaining_space,
		      data,
		      remaining_space);
		data_length -= remaining_space;
    1c08:	1bf6      	subs	r6, r6, r7
		data += remaining_space;
    1c0a:	443d      	add	r5, r7
    1c0c:	1e63      	subs	r3, r4, #1
    1c0e:	f104 010f 	add.w	r1, r4, #15
		s->leftover_offset = 0;

		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
			s->iv[i] ^= s->leftover[i];
    1c12:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    1c16:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
		      remaining_space);
		data_length -= remaining_space;
		data += remaining_space;
		s->leftover_offset = 0;

		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    1c1a:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
    1c1c:	ea82 0200 	eor.w	r2, r2, r0
    1c20:	701a      	strb	r2, [r3, #0]
		      remaining_space);
		data_length -= remaining_space;
		data += remaining_space;
		s->leftover_offset = 0;

		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    1c22:	d1f6      	bne.n	1c12 <tc_cmac_update+0x66>
			s->iv[i] ^= s->leftover[i];
		}
		tc_aes_encrypt(s->iv, s->iv, s->sched);
    1c24:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    1c26:	4621      	mov	r1, r4
    1c28:	4620      	mov	r0, r4
    1c2a:	f7ff fef1 	bl	1a10 <tc_aes_encrypt>
    1c2e:	f104 070f 	add.w	r7, r4, #15
	}

	/* CBC encrypt each (except the last) of the data blocks */
	while (data_length > TC_AES_BLOCK_SIZE) {
    1c32:	2e10      	cmp	r6, #16
    1c34:	d912      	bls.n	1c5c <tc_cmac_update+0xb0>
    1c36:	1e63      	subs	r3, r4, #1
    1c38:	1e69      	subs	r1, r5, #1
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
			s->iv[i] ^= data[i];
    1c3a:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    1c3e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
		tc_aes_encrypt(s->iv, s->iv, s->sched);
	}

	/* CBC encrypt each (except the last) of the data blocks */
	while (data_length > TC_AES_BLOCK_SIZE) {
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    1c42:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
    1c44:	ea82 0200 	eor.w	r2, r2, r0
    1c48:	701a      	strb	r2, [r3, #0]
		tc_aes_encrypt(s->iv, s->iv, s->sched);
	}

	/* CBC encrypt each (except the last) of the data blocks */
	while (data_length > TC_AES_BLOCK_SIZE) {
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    1c4a:	d1f6      	bne.n	1c3a <tc_cmac_update+0x8e>
			s->iv[i] ^= data[i];
		}
		tc_aes_encrypt(s->iv, s->iv, s->sched);
    1c4c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    1c4e:	4621      	mov	r1, r4
    1c50:	4620      	mov	r0, r4
    1c52:	f7ff fedd 	bl	1a10 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
    1c56:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
    1c58:	3e10      	subs	r6, #16
    1c5a:	e7ea      	b.n	1c32 <tc_cmac_update+0x86>
	}

	if (data_length > 0) {
    1c5c:	b13e      	cbz	r6, 1c6e <tc_cmac_update+0xc2>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
    1c5e:	4633      	mov	r3, r6
    1c60:	462a      	mov	r2, r5
    1c62:	4631      	mov	r1, r6
    1c64:	f104 0030 	add.w	r0, r4, #48	; 0x30
    1c68:	f7ff fc35 	bl	14d6 <_copy>
		s->leftover_offset = data_length;
    1c6c:	6466      	str	r6, [r4, #68]	; 0x44
	}

	return TC_CRYPTO_SUCCESS;
    1c6e:	2001      	movs	r0, #1
    1c70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1c72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
{
	uint32_t i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
    1c74:	4608      	mov	r0, r1
    1c76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1c78:	2000      	movs	r0, #0
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
}
    1c7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00001c7c <tc_cmac_final>:

int32_t tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
    1c7c:	b570      	push	{r4, r5, r6, lr}
    1c7e:	460c      	mov	r4, r1
	uint8_t *k;
	uint32_t i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
    1c80:	4605      	mov	r5, r0
    1c82:	b378      	cbz	r0, 1ce4 <tc_cmac_final+0x68>
    1c84:	b379      	cbz	r1, 1ce6 <tc_cmac_final+0x6a>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
    1c86:	6c4a      	ldr	r2, [r1, #68]	; 0x44
    1c88:	2a10      	cmp	r2, #16
    1c8a:	d102      	bne.n	1c92 <tc_cmac_final+0x16>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
    1c8c:	f101 0210 	add.w	r2, r1, #16
    1c90:	e00e      	b.n	1cb0 <tc_cmac_final+0x34>
	} else {
		/* the final message block is not a full-sized  block */
		size_t remaining = TC_AES_BLOCK_SIZE - s->leftover_offset;

		_set(&s->leftover[s->leftover_offset], 0, remaining);
    1c92:	f102 0030 	add.w	r0, r2, #48	; 0x30
    1c96:	2100      	movs	r1, #0
    1c98:	f1c2 0210 	rsb	r2, r2, #16
    1c9c:	4420      	add	r0, r4
    1c9e:	f7ff fc27 	bl	14f0 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
    1ca2:	6c63      	ldr	r3, [r4, #68]	; 0x44
    1ca4:	4423      	add	r3, r4
    1ca6:	2280      	movs	r2, #128	; 0x80
    1ca8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
    1cac:	f104 0220 	add.w	r2, r4, #32
    1cb0:	1e63      	subs	r3, r4, #1
    1cb2:	3a01      	subs	r2, #1
    1cb4:	f104 060f 	add.w	r6, r4, #15
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
		s->iv[i] ^= s->leftover[i] ^ k[i];
    1cb8:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    1cbc:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
    1cc0:	4048      	eors	r0, r1
    1cc2:	f812 1f01 	ldrb.w	r1, [r2, #1]!

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    1cc6:	429e      	cmp	r6, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
    1cc8:	ea81 0100 	eor.w	r1, r1, r0
    1ccc:	7019      	strb	r1, [r3, #0]

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    1cce:	d1f3      	bne.n	1cb8 <tc_cmac_final+0x3c>
		s->iv[i] ^= s->leftover[i] ^ k[i];
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
    1cd0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    1cd2:	4621      	mov	r1, r4
    1cd4:	4628      	mov	r0, r5
    1cd6:	f7ff fe9b 	bl	1a10 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
    1cda:	4620      	mov	r0, r4
    1cdc:	f7ff ff1a 	bl	1b14 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
    1ce0:	2001      	movs	r0, #1
    1ce2:	bd70      	pop	{r4, r5, r6, pc}
    1ce4:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
    1ce6:	4608      	mov	r0, r1

	/* erasing state: */
	tc_cmac_erase(s);

	return TC_CRYPTO_SUCCESS;
}
    1ce8:	bd70      	pop	{r4, r5, r6, pc}
	...

00001cec <bt_hex>:
#include <misc/util.h>
#include <bluetooth/bluetooth.h>
#include <bluetooth/hci.h>

const char *bt_hex(const void *buf, size_t len)
{
    1cec:	b570      	push	{r4, r5, r6, lr}
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M)
	unsigned int tmp;

	__asm__ volatile(
    1cee:	f04f 0320 	mov.w	r3, #32
    1cf2:	f3ef 8511 	mrs	r5, BASEPRI
    1cf6:	f383 8811 	msr	BASEPRI, r3
	unsigned int mask;
	char *str;
	int i;

	mask = irq_lock();
	str = hexbufs[curbuf++];
    1cfa:	4c14      	ldr	r4, [pc, #80]	; (1d4c <bt_hex+0x60>)
    1cfc:	4e14      	ldr	r6, [pc, #80]	; (1d50 <bt_hex+0x64>)
    1cfe:	7823      	ldrb	r3, [r4, #0]
    1d00:	eb03 12c3 	add.w	r2, r3, r3, lsl #7
	curbuf %= ARRAY_SIZE(hexbufs);
    1d04:	3301      	adds	r3, #1
    1d06:	f003 0303 	and.w	r3, r3, #3
	unsigned int mask;
	char *str;
	int i;

	mask = irq_lock();
	str = hexbufs[curbuf++];
    1d0a:	4432      	add	r2, r6
	curbuf %= ARRAY_SIZE(hexbufs);
    1d0c:	7023      	strb	r3, [r4, #0]
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    1d0e:	f385 8811 	msr	BASEPRI, r5
	irq_unlock(mask);

	len = min(len, (sizeof(hexbufs[0]) - 1) / 2);
    1d12:	2940      	cmp	r1, #64	; 0x40
    1d14:	bf28      	it	cs
    1d16:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
    1d18:	4d0e      	ldr	r5, [pc, #56]	; (1d54 <bt_hex+0x68>)
    1d1a:	3801      	subs	r0, #1
    1d1c:	4613      	mov	r3, r2
    1d1e:	eb02 0641 	add.w	r6, r2, r1, lsl #1
	curbuf %= ARRAY_SIZE(hexbufs);
	irq_unlock(mask);

	len = min(len, (sizeof(hexbufs[0]) - 1) / 2);

	for (i = 0; i < len; i++) {
    1d22:	42b3      	cmp	r3, r6
    1d24:	d00d      	beq.n	1d42 <bt_hex+0x56>
		str[i * 2]     = hex[b[i] >> 4];
    1d26:	f810 4f01 	ldrb.w	r4, [r0, #1]!
    1d2a:	0924      	lsrs	r4, r4, #4
    1d2c:	3302      	adds	r3, #2
    1d2e:	5d2c      	ldrb	r4, [r5, r4]
    1d30:	f803 4c02 	strb.w	r4, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
    1d34:	7804      	ldrb	r4, [r0, #0]
    1d36:	f004 040f 	and.w	r4, r4, #15
    1d3a:	5d2c      	ldrb	r4, [r5, r4]
    1d3c:	f803 4c01 	strb.w	r4, [r3, #-1]
    1d40:	e7ef      	b.n	1d22 <bt_hex+0x36>
	}

	str[i * 2] = '\0';
    1d42:	2300      	movs	r3, #0
    1d44:	f802 3011 	strb.w	r3, [r2, r1, lsl #1]

	return str;
}
    1d48:	4610      	mov	r0, r2
    1d4a:	bd70      	pop	{r4, r5, r6, pc}
    1d4c:	20000a89 	.word	0x20000a89
    1d50:	20000885 	.word	0x20000885
    1d54:	00013d60 	.word	0x00013d60

00001d58 <bt_addr_le_str>:

	return str;
}

const char *bt_addr_le_str(const bt_addr_le_t *addr)
{
    1d58:	b570      	push	{r4, r5, r6, lr}
	static char bufs[2][27];
	static u8_t cur;
	char *str;

	str = bufs[cur++];
    1d5a:	4a18      	ldr	r2, [pc, #96]	; (1dbc <bt_addr_le_str+0x64>)
    1d5c:	4918      	ldr	r1, [pc, #96]	; (1dc0 <bt_addr_le_str+0x68>)
    1d5e:	7813      	ldrb	r3, [r2, #0]
    1d60:	251b      	movs	r5, #27
    1d62:	fb05 1503 	mla	r5, r5, r3, r1
	cur %= ARRAY_SIZE(bufs);
    1d66:	3301      	adds	r3, #1
    1d68:	f003 0301 	and.w	r3, r3, #1
    1d6c:	7013      	strb	r3, [r2, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[7];

	switch (addr->type) {
    1d6e:	7803      	ldrb	r3, [r0, #0]

	return str;
}

const char *bt_addr_le_str(const bt_addr_le_t *addr)
{
    1d70:	b088      	sub	sp, #32
    1d72:	4604      	mov	r4, r0
    1d74:	ae06      	add	r6, sp, #24
    1d76:	b11b      	cbz	r3, 1d80 <bt_addr_le_str+0x28>
    1d78:	2b01      	cmp	r3, #1
    1d7a:	d106      	bne.n	1d8a <bt_addr_le_str+0x32>
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    1d7c:	4911      	ldr	r1, [pc, #68]	; (1dc4 <bt_addr_le_str+0x6c>)
    1d7e:	e000      	b.n	1d82 <bt_addr_le_str+0x2a>
{
	char type[7];

	switch (addr->type) {
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    1d80:	4911      	ldr	r1, [pc, #68]	; (1dc8 <bt_addr_le_str+0x70>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    1d82:	4630      	mov	r0, r6
    1d84:	f7ff f936 	bl	ff4 <strcpy>
    1d88:	e004      	b.n	1d94 <bt_addr_le_str+0x3c>
		break;
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    1d8a:	4a10      	ldr	r2, [pc, #64]	; (1dcc <bt_addr_le_str+0x74>)
    1d8c:	2107      	movs	r1, #7
    1d8e:	4630      	mov	r0, r6
    1d90:	f7ff fb84 	bl	149c <snprintk>
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    1d94:	7862      	ldrb	r2, [r4, #1]
    1d96:	9204      	str	r2, [sp, #16]
    1d98:	78a2      	ldrb	r2, [r4, #2]
    1d9a:	9203      	str	r2, [sp, #12]
    1d9c:	78e2      	ldrb	r2, [r4, #3]
    1d9e:	9202      	str	r2, [sp, #8]
    1da0:	7922      	ldrb	r2, [r4, #4]
    1da2:	9201      	str	r2, [sp, #4]
    1da4:	7962      	ldrb	r2, [r4, #5]
    1da6:	9200      	str	r2, [sp, #0]
    1da8:	79a3      	ldrb	r3, [r4, #6]
    1daa:	9605      	str	r6, [sp, #20]
    1dac:	4a08      	ldr	r2, [pc, #32]	; (1dd0 <bt_addr_le_str+0x78>)
    1dae:	211b      	movs	r1, #27
    1db0:	4628      	mov	r0, r5
    1db2:	f7ff fb73 	bl	149c <snprintk>
	str = bufs[cur++];
	cur %= ARRAY_SIZE(bufs);
	bt_addr_le_to_str(addr, str, sizeof(bufs[cur]));

	return str;
}
    1db6:	4628      	mov	r0, r5
    1db8:	b008      	add	sp, #32
    1dba:	bd70      	pop	{r4, r5, r6, pc}
    1dbc:	2000084e 	.word	0x2000084e
    1dc0:	2000084f 	.word	0x2000084f
    1dc4:	00013b22 	.word	0x00013b22
    1dc8:	00013b1b 	.word	0x00013b1b
    1dcc:	00013b29 	.word	0x00013b29
    1dd0:	00013b30 	.word	0x00013b30

00001dd4 <ah>:

#define BT_DBG_ENABLED IS_ENABLED(CONFIG_BLUETOOTH_DEBUG_RPA)
#include "common/log.h"

static int ah(const u8_t irk[16], const u8_t r[3], u8_t out[3])
{
    1dd4:	b530      	push	{r4, r5, lr}
    1dd6:	b085      	sub	sp, #20
    1dd8:	4604      	mov	r4, r0
    1dda:	4615      	mov	r5, r2
	int err;

	BT_DBG("irk %s, r %s", bt_hex(irk, 16), bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
    1ddc:	4668      	mov	r0, sp
    1dde:	2203      	movs	r2, #3
    1de0:	f7ff f957 	bl	1092 <memcpy>
	memset(res + 3, 0, 13);
    1de4:	220d      	movs	r2, #13
    1de6:	2100      	movs	r1, #0
    1de8:	f10d 0003 	add.w	r0, sp, #3
    1dec:	f7ff f97d 	bl	10ea <memset>

	err = bt_encrypt_le(irk, res, res);
    1df0:	4620      	mov	r0, r4
    1df2:	466a      	mov	r2, sp
    1df4:	4669      	mov	r1, sp
    1df6:	f009 f939 	bl	b06c <bt_encrypt_le>
	if (err) {
    1dfa:	4604      	mov	r4, r0
    1dfc:	b920      	cbnz	r0, 1e08 <ah+0x34>
	 *      ah(h, r) = e(k, r') mod 2^24
	 * The output of the security function e is then truncated to 24 bits
	 * by taking the least significant 24 bits of the output of e as the
	 * result of ah.
	 */
	memcpy(out, res, 3);
    1dfe:	2203      	movs	r2, #3
    1e00:	4669      	mov	r1, sp
    1e02:	4628      	mov	r0, r5
    1e04:	f7ff f945 	bl	1092 <memcpy>

	return 0;
}
    1e08:	4620      	mov	r0, r4
    1e0a:	b005      	add	sp, #20
    1e0c:	bd30      	pop	{r4, r5, pc}

00001e0e <bt_rpa_irk_matches>:

#if defined(CONFIG_BLUETOOTH_SMP)
bool bt_rpa_irk_matches(const u8_t irk[16], const bt_addr_t *addr)
{
    1e0e:	b513      	push	{r0, r1, r4, lr}
    1e10:	460c      	mov	r4, r1
	u8_t hash[3];
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
    1e12:	aa01      	add	r2, sp, #4
    1e14:	3103      	adds	r1, #3
    1e16:	f7ff ffdd 	bl	1dd4 <ah>
	if (err) {
    1e1a:	b940      	cbnz	r0, 1e2e <bt_rpa_irk_matches+0x20>
		return false;
	}

	return !memcmp(addr->val, hash, 3);
    1e1c:	2203      	movs	r2, #3
    1e1e:	a901      	add	r1, sp, #4
    1e20:	4620      	mov	r0, r4
    1e22:	f7ff f906 	bl	1032 <memcmp>
    1e26:	fab0 f080 	clz	r0, r0
    1e2a:	0940      	lsrs	r0, r0, #5
    1e2c:	e000      	b.n	1e30 <bt_rpa_irk_matches+0x22>

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
	if (err) {
		return false;
    1e2e:	2000      	movs	r0, #0
	}

	return !memcmp(addr->val, hash, 3);
}
    1e30:	b002      	add	sp, #8
    1e32:	bd10      	pop	{r4, pc}

00001e34 <bt_rpa_create>:
#endif

#if defined(CONFIG_BLUETOOTH_PRIVACY) || \
	defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
int bt_rpa_create(const u8_t irk[16], bt_addr_t *rpa)
{
    1e34:	b570      	push	{r4, r5, r6, lr}
	int err;

	err = bt_rand(rpa->val + 3, 3);
    1e36:	1ccd      	adds	r5, r1, #3
#endif

#if defined(CONFIG_BLUETOOTH_PRIVACY) || \
	defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
int bt_rpa_create(const u8_t irk[16], bt_addr_t *rpa)
{
    1e38:	4606      	mov	r6, r0
    1e3a:	460c      	mov	r4, r1
	int err;

	err = bt_rand(rpa->val + 3, 3);
    1e3c:	4628      	mov	r0, r5
    1e3e:	2103      	movs	r1, #3
    1e40:	f009 f8fa 	bl	b038 <bt_rand>
	if (err) {
    1e44:	b960      	cbnz	r0, 1e60 <bt_rpa_create+0x2c>
		return err;
	}

	BT_ADDR_SET_RPA(rpa);
    1e46:	7963      	ldrb	r3, [r4, #5]
    1e48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    1e4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1e50:	7163      	strb	r3, [r4, #5]

	err = ah(irk, rpa->val + 3, rpa->val);
    1e52:	4622      	mov	r2, r4
    1e54:	4629      	mov	r1, r5
    1e56:	4630      	mov	r0, r6
	}

	BT_DBG("Created RPA %s", bt_addr_str((bt_addr_t *)rpa->val));

	return 0;
}
    1e58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return err;
	}

	BT_ADDR_SET_RPA(rpa);

	err = ah(irk, rpa->val + 3, rpa->val);
    1e5c:	f7ff bfba 	b.w	1dd4 <ah>
	}

	BT_DBG("Created RPA %s", bt_addr_str((bt_addr_t *)rpa->val));

	return 0;
}
    1e60:	bd70      	pop	{r4, r5, r6, pc}
	...

00001e64 <uuid_to_uuid128>:
	.val = { 0xfb, 0x34, 0x9b, 0x5f, 0x80, 0x00, 0x00, 0x80,
		 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    1e64:	b4f0      	push	{r4, r5, r6, r7}
	switch (src->type) {
    1e66:	7802      	ldrb	r2, [r0, #0]
    1e68:	2a01      	cmp	r2, #1
	.val = { 0xfb, 0x34, 0x9b, 0x5f, 0x80, 0x00, 0x00, 0x80,
		 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    1e6a:	4604      	mov	r4, r0
    1e6c:	460b      	mov	r3, r1
	switch (src->type) {
    1e6e:	d01b      	beq.n	1ea8 <uuid_to_uuid128+0x44>
    1e70:	d307      	bcc.n	1e82 <uuid_to_uuid128+0x1e>
    1e72:	2a02      	cmp	r2, #2
    1e74:	d12f      	bne.n	1ed6 <uuid_to_uuid128+0x72>
		*dst = uuid128_base;
		sys_put_le32(BT_UUID_32(src)->val,
			     &dst->val[UUID_16_BASE_OFFSET]);
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
    1e76:	4601      	mov	r1, r0
    1e78:	2211      	movs	r2, #17
    1e7a:	4618      	mov	r0, r3
		return;
	}
}
    1e7c:	bcf0      	pop	{r4, r5, r6, r7}
		*dst = uuid128_base;
		sys_put_le32(BT_UUID_32(src)->val,
			     &dst->val[UUID_16_BASE_OFFSET]);
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
    1e7e:	f7ff b908 	b.w	1092 <memcpy>

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
	switch (src->type) {
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
    1e82:	4a16      	ldr	r2, [pc, #88]	; (1edc <uuid_to_uuid128+0x78>)
    1e84:	460d      	mov	r5, r1
    1e86:	f102 0710 	add.w	r7, r2, #16
    1e8a:	6810      	ldr	r0, [r2, #0]
    1e8c:	6851      	ldr	r1, [r2, #4]
    1e8e:	462e      	mov	r6, r5
    1e90:	c603      	stmia	r6!, {r0, r1}
    1e92:	3208      	adds	r2, #8
    1e94:	42ba      	cmp	r2, r7
    1e96:	4635      	mov	r5, r6
    1e98:	d1f7      	bne.n	1e8a <uuid_to_uuid128+0x26>
    1e9a:	7812      	ldrb	r2, [r2, #0]
    1e9c:	7032      	strb	r2, [r6, #0]
		sys_put_le16(BT_UUID_16(src)->val,
    1e9e:	8862      	ldrh	r2, [r4, #2]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    1ea0:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    1ea2:	0a12      	lsrs	r2, r2, #8
    1ea4:	739a      	strb	r2, [r3, #14]
    1ea6:	e016      	b.n	1ed6 <uuid_to_uuid128+0x72>
			     &dst->val[UUID_16_BASE_OFFSET]);
		return;
	case BT_UUID_TYPE_32:
		*dst = uuid128_base;
    1ea8:	4a0c      	ldr	r2, [pc, #48]	; (1edc <uuid_to_uuid128+0x78>)
    1eaa:	460d      	mov	r5, r1
    1eac:	f102 0710 	add.w	r7, r2, #16
    1eb0:	6810      	ldr	r0, [r2, #0]
    1eb2:	6851      	ldr	r1, [r2, #4]
    1eb4:	462e      	mov	r6, r5
    1eb6:	c603      	stmia	r6!, {r0, r1}
    1eb8:	3208      	adds	r2, #8
    1eba:	42ba      	cmp	r2, r7
    1ebc:	4635      	mov	r5, r6
    1ebe:	d1f7      	bne.n	1eb0 <uuid_to_uuid128+0x4c>
    1ec0:	7812      	ldrb	r2, [r2, #0]
    1ec2:	7032      	strb	r2, [r6, #0]
		sys_put_le32(BT_UUID_32(src)->val,
    1ec4:	6862      	ldr	r2, [r4, #4]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    1ec6:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    1ec8:	f3c2 2107 	ubfx	r1, r2, #8, #8
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(u32_t val, u8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
    1ecc:	0c12      	lsrs	r2, r2, #16
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    1ece:	73da      	strb	r2, [r3, #15]
	dst[1] = val >> 8;
    1ed0:	0a12      	lsrs	r2, r2, #8
    1ed2:	7399      	strb	r1, [r3, #14]
    1ed4:	741a      	strb	r2, [r3, #16]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    1ed6:	bcf0      	pop	{r4, r5, r6, r7}
    1ed8:	4770      	bx	lr
    1eda:	bf00      	nop
    1edc:	00015f3a 	.word	0x00015f3a

00001ee0 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
    1ee0:	b510      	push	{r4, lr}
    1ee2:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type)
    1ee4:	7801      	ldrb	r1, [r0, #0]
    1ee6:	7822      	ldrb	r2, [r4, #0]
    1ee8:	428a      	cmp	r2, r1

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
    1eea:	b08a      	sub	sp, #40	; 0x28
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type)
    1eec:	d00c      	beq.n	1f08 <bt_uuid_cmp+0x28>

static int uuid128_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
	struct bt_uuid_128 uuid1, uuid2;

	uuid_to_uuid128(u1, &uuid1);
    1eee:	4669      	mov	r1, sp
    1ef0:	f7ff ffb8 	bl	1e64 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
    1ef4:	a905      	add	r1, sp, #20
    1ef6:	4620      	mov	r0, r4
    1ef8:	f7ff ffb4 	bl	1e64 <uuid_to_uuid128>

	return memcmp(uuid1.val, uuid2.val, 16);
    1efc:	2210      	movs	r2, #16
    1efe:	f10d 0115 	add.w	r1, sp, #21
    1f02:	f10d 0001 	add.w	r0, sp, #1
    1f06:	e00f      	b.n	1f28 <bt_uuid_cmp+0x48>
{
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type)
		return uuid128_cmp(u1, u2);

	switch (u1->type) {
    1f08:	2a01      	cmp	r2, #1
    1f0a:	d009      	beq.n	1f20 <bt_uuid_cmp+0x40>
    1f0c:	d305      	bcc.n	1f1a <bt_uuid_cmp+0x3a>
    1f0e:	2a02      	cmp	r2, #2
    1f10:	d10d      	bne.n	1f2e <bt_uuid_cmp+0x4e>
	case BT_UUID_TYPE_16:
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
	case BT_UUID_TYPE_32:
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
    1f12:	2210      	movs	r2, #16
    1f14:	1c61      	adds	r1, r4, #1
    1f16:	3001      	adds	r0, #1
    1f18:	e006      	b.n	1f28 <bt_uuid_cmp+0x48>
	if (u1->type != u2->type)
		return uuid128_cmp(u1, u2);

	switch (u1->type) {
	case BT_UUID_TYPE_16:
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
    1f1a:	8843      	ldrh	r3, [r0, #2]
    1f1c:	8860      	ldrh	r0, [r4, #2]
    1f1e:	e001      	b.n	1f24 <bt_uuid_cmp+0x44>
	case BT_UUID_TYPE_32:
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
    1f20:	6843      	ldr	r3, [r0, #4]
    1f22:	6860      	ldr	r0, [r4, #4]
    1f24:	1a18      	subs	r0, r3, r0
    1f26:	e004      	b.n	1f32 <bt_uuid_cmp+0x52>
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
    1f28:	f7ff f883 	bl	1032 <memcmp>
    1f2c:	e001      	b.n	1f32 <bt_uuid_cmp+0x52>
	}

	return -EINVAL;
    1f2e:	f06f 0015 	mvn.w	r0, #21
}
    1f32:	b00a      	add	sp, #40	; 0x28
    1f34:	bd10      	pop	{r4, pc}

00001f36 <net_buf_user_data>:
 *
 *  @return Pointer to the user data of the buffer.
 */
static inline void *net_buf_user_data(struct net_buf *buf)
{
	return (void *)ROUND_UP((buf->__buf + buf->size), sizeof(int));
    1f36:	89c3      	ldrh	r3, [r0, #14]
    1f38:	4418      	add	r0, r3
    1f3a:	3013      	adds	r0, #19
}
    1f3c:	f020 0003 	bic.w	r0, r0, #3
    1f40:	4770      	bx	lr
	...

00001f44 <ver_str>:
	return 0;
}

#if defined(CONFIG_BLUETOOTH_DEBUG)
static const char *ver_str(u8_t ver)
{
    1f44:	b570      	push	{r4, r5, r6, lr}
	const char * const str[] = {
    1f46:	4d0b      	ldr	r5, [pc, #44]	; (1f74 <ver_str+0x30>)
	return 0;
}

#if defined(CONFIG_BLUETOOTH_DEBUG)
static const char *ver_str(u8_t ver)
{
    1f48:	4606      	mov	r6, r0
	const char * const str[] = {
    1f4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
	return 0;
}

#if defined(CONFIG_BLUETOOTH_DEBUG)
static const char *ver_str(u8_t ver)
{
    1f4c:	b08a      	sub	sp, #40	; 0x28
	const char * const str[] = {
    1f4e:	466c      	mov	r4, sp
    1f50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1f52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1f54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1f56:	e895 0003 	ldmia.w	r5, {r0, r1}
		"1.0b", "1.1", "1.2", "2.0", "2.1", "3.0", "4.0", "4.1", "4.2",
		"5.0",
	};

	if (ver < ARRAY_SIZE(str)) {
    1f5a:	2e09      	cmp	r6, #9
}

#if defined(CONFIG_BLUETOOTH_DEBUG)
static const char *ver_str(u8_t ver)
{
	const char * const str[] = {
    1f5c:	e884 0003 	stmia.w	r4, {r0, r1}
		"1.0b", "1.1", "1.2", "2.0", "2.1", "3.0", "4.0", "4.1", "4.2",
		"5.0",
	};

	if (ver < ARRAY_SIZE(str)) {
		return str[ver];
    1f60:	bf9b      	ittet	ls
    1f62:	ab0a      	addls	r3, sp, #40	; 0x28
    1f64:	eb03 0686 	addls.w	r6, r3, r6, lsl #2
	}

	return "unknown";
    1f68:	4803      	ldrhi	r0, [pc, #12]	; (1f78 <ver_str+0x34>)
		"1.0b", "1.1", "1.2", "2.0", "2.1", "3.0", "4.0", "4.1", "4.2",
		"5.0",
	};

	if (ver < ARRAY_SIZE(str)) {
		return str[ver];
    1f6a:	f856 0c28 	ldrls.w	r0, [r6, #-40]
	}

	return "unknown";
}
    1f6e:	b00a      	add	sp, #40	; 0x28
    1f70:	bd70      	pop	{r4, r5, r6, pc}
    1f72:	bf00      	nop
    1f74:	000139f0 	.word	0x000139f0
    1f78:	00013dac 	.word	0x00013dac

00001f7c <atomic_or>:
 *
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
    1f7c:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
}
    1f7e:	f3bf 8f5f 	dmb	sy
    1f82:	e850 3f00 	ldrex	r3, [r0]
    1f86:	ea43 0201 	orr.w	r2, r3, r1
    1f8a:	e840 2e00 	strex	lr, r2, [r0]
    1f8e:	f1be 0f00 	cmp.w	lr, #0
    1f92:	d1f6      	bne.n	1f82 <atomic_or+0x6>
    1f94:	f3bf 8f5f 	dmb	sy
    1f98:	4618      	mov	r0, r3
    1f9a:	f85d fb04 	ldr.w	pc, [sp], #4

00001f9e <atomic_test_bit>:
 * @return Value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    1f9e:	094b      	lsrs	r3, r1, #5
    1fa0:	f3bf 8f5f 	dmb	sy
    1fa4:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
    1fa8:	f3bf 8f5f 	dmb	sy
 */
static inline int atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));

	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    1fac:	f001 011f 	and.w	r1, r1, #31
    1fb0:	4108      	asrs	r0, r1
}
    1fb2:	f000 0001 	and.w	r0, r0, #1
    1fb6:	4770      	bx	lr

00001fb8 <atomic_test_bit>:
 * @return Value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    1fb8:	094b      	lsrs	r3, r1, #5
    1fba:	f3bf 8f5f 	dmb	sy
    1fbe:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
    1fc2:	f3bf 8f5f 	dmb	sy
 */
static inline int atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));

	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    1fc6:	f001 011f 	and.w	r1, r1, #31
    1fca:	4108      	asrs	r0, r1
}
    1fcc:	f000 0001 	and.w	r0, r0, #1
    1fd0:	4770      	bx	lr

00001fd2 <atomic_and>:
 *
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
    1fd2:	b500      	push	{lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
}
    1fd4:	f3bf 8f5f 	dmb	sy
    1fd8:	e850 3f00 	ldrex	r3, [r0]
    1fdc:	ea03 0201 	and.w	r2, r3, r1
    1fe0:	e840 2e00 	strex	lr, r2, [r0]
    1fe4:	f1be 0f00 	cmp.w	lr, #0
    1fe8:	d1f6      	bne.n	1fd8 <atomic_and+0x6>
    1fea:	f3bf 8f5f 	dmb	sy
    1fee:	4618      	mov	r0, r3
    1ff0:	f85d fb04 	ldr.w	pc, [sp], #4

00001ff4 <update_conn_param>:
	/*
	 * Core 4.2 Vol 3, Part C, 9.3.12.2
	 * The Peripheral device should not perform a Connection Parameter
	 * Update procedure within 5 s after establishing a connection.
	 */
	k_delayed_work_submit(&conn->le.update_work,
    1ff4:	78c3      	ldrb	r3, [r0, #3]
    1ff6:	2b00      	cmp	r3, #0
 * @retval -EADDRINUSE Work item is pending on a different workqueue.
 */
static inline int k_delayed_work_submit(struct k_delayed_work *work,
					s32_t delay)
{
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    1ff8:	f241 3288 	movw	r2, #5000	; 0x1388
    1ffc:	f100 0180 	add.w	r1, r0, #128	; 0x80
    2000:	bf08      	it	eq
    2002:	2200      	moveq	r2, #0
    2004:	4801      	ldr	r0, [pc, #4]	; (200c <update_conn_param+0x18>)
    2006:	f011 bc43 	b.w	13890 <k_delayed_work_submit_to_queue>
    200a:	bf00      	nop
    200c:	20002238 	.word	0x20002238

00002010 <update_sec_level>:
}
#endif /* CONFIG_BLUETOOTH_BREDR */

#if defined(CONFIG_BLUETOOTH_SMP)
static void update_sec_level(struct bt_conn *conn)
{
    2010:	b513      	push	{r0, r1, r4, lr}
	if (!conn->encrypt) {
    2012:	7a83      	ldrb	r3, [r0, #10]
}
#endif /* CONFIG_BLUETOOTH_BREDR */

#if defined(CONFIG_BLUETOOTH_SMP)
static void update_sec_level(struct bt_conn *conn)
{
    2014:	4604      	mov	r4, r0
	if (!conn->encrypt) {
    2016:	b913      	cbnz	r3, 201e <update_sec_level+0xe>
		conn->sec_level = BT_SECURITY_LOW;
    2018:	2301      	movs	r3, #1
    201a:	7203      	strb	r3, [r0, #8]
		return;
    201c:	e024      	b.n	2068 <update_sec_level+0x58>
	}

	if (conn->le.keys && atomic_test_bit(conn->le.keys->flags,
    201e:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
    2020:	b158      	cbz	r0, 203a <update_sec_level+0x2a>
    2022:	2100      	movs	r1, #0
    2024:	3008      	adds	r0, #8
    2026:	f7ff ffba 	bl	1f9e <atomic_test_bit>
    202a:	b130      	cbz	r0, 203a <update_sec_level+0x2a>
					     BT_KEYS_AUTHENTICATED)) {
		if (conn->le.keys->keys & BT_KEYS_LTK_P256) {
    202c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    202e:	899b      	ldrh	r3, [r3, #12]
    2030:	069b      	lsls	r3, r3, #26
			conn->sec_level = BT_SECURITY_FIPS;
    2032:	bf4c      	ite	mi
    2034:	2304      	movmi	r3, #4
		} else {
			conn->sec_level = BT_SECURITY_HIGH;
    2036:	2303      	movpl	r3, #3
    2038:	e000      	b.n	203c <update_sec_level+0x2c>
		}
	} else {
		conn->sec_level = BT_SECURITY_MEDIUM;
    203a:	2302      	movs	r3, #2
    203c:	7223      	strb	r3, [r4, #8]
	}

	if (conn->required_sec_level > conn->sec_level) {
    203e:	7a62      	ldrb	r2, [r4, #9]
    2040:	7a23      	ldrb	r3, [r4, #8]
    2042:	429a      	cmp	r2, r3
    2044:	d910      	bls.n	2068 <update_sec_level+0x58>
		BT_ERR("Failed to set required security level");
    2046:	4b09      	ldr	r3, [pc, #36]	; (206c <update_sec_level+0x5c>)
    2048:	9301      	str	r3, [sp, #4]
    204a:	4b09      	ldr	r3, [pc, #36]	; (2070 <update_sec_level+0x60>)
    204c:	9300      	str	r3, [sp, #0]
    204e:	4a09      	ldr	r2, [pc, #36]	; (2074 <update_sec_level+0x64>)
    2050:	4b09      	ldr	r3, [pc, #36]	; (2078 <update_sec_level+0x68>)
    2052:	490a      	ldr	r1, [pc, #40]	; (207c <update_sec_level+0x6c>)
    2054:	480a      	ldr	r0, [pc, #40]	; (2080 <update_sec_level+0x70>)
    2056:	f7ff fa13 	bl	1480 <printk>
		bt_conn_disconnect(conn, BT_HCI_ERR_AUTHENTICATION_FAIL);
    205a:	2105      	movs	r1, #5
    205c:	4620      	mov	r0, r4
	}
}
    205e:	b002      	add	sp, #8
    2060:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		conn->sec_level = BT_SECURITY_MEDIUM;
	}

	if (conn->required_sec_level > conn->sec_level) {
		BT_ERR("Failed to set required security level");
		bt_conn_disconnect(conn, BT_HCI_ERR_AUTHENTICATION_FAIL);
    2064:	f002 bae0 	b.w	4628 <bt_conn_disconnect>
	}
}
    2068:	b002      	add	sp, #8
    206a:	bd10      	pop	{r4, pc}
    206c:	00013df4 	.word	0x00013df4
    2070:	00013df9 	.word	0x00013df9
    2074:	00013db4 	.word	0x00013db4
    2078:	000160cb 	.word	0x000160cb
    207c:	00013dbb 	.word	0x00013dbb
    2080:	00013dbe 	.word	0x00013dbe

00002084 <hci_cmd_done>:
	/* we only allow to enable once so this bit must be keep set */
	atomic_set(bt_dev.flags, BIT(BT_DEV_ENABLE));
}

static void hci_cmd_done(u16_t opcode, u8_t status, struct net_buf *buf)
{
    2084:	b5f0      	push	{r4, r5, r6, r7, lr}
    2086:	4605      	mov	r5, r0
    2088:	b087      	sub	sp, #28
	BT_DBG("opcode 0x%04x status 0x%02x buf %p", opcode, status, buf);

	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    208a:	7990      	ldrb	r0, [r2, #6]
    208c:	4e1d      	ldr	r6, [pc, #116]	; (2104 <hci_cmd_done+0x80>)
	/* we only allow to enable once so this bit must be keep set */
	atomic_set(bt_dev.flags, BIT(BT_DEV_ENABLE));
}

static void hci_cmd_done(u16_t opcode, u8_t status, struct net_buf *buf)
{
    208e:	460f      	mov	r7, r1
    2090:	4614      	mov	r4, r2
	BT_DBG("opcode 0x%04x status 0x%02x buf %p", opcode, status, buf);

	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    2092:	f00f fd21 	bl	11ad8 <net_buf_pool_get>
    2096:	4286      	cmp	r6, r0
    2098:	d011      	beq.n	20be <hci_cmd_done+0x3a>
		BT_WARN("pool id %u pool %p != &hci_cmd_pool %p",
    209a:	79a4      	ldrb	r4, [r4, #6]
    209c:	4620      	mov	r0, r4
    209e:	f00f fd1b 	bl	11ad8 <net_buf_pool_get>
    20a2:	4b19      	ldr	r3, [pc, #100]	; (2108 <hci_cmd_done+0x84>)
    20a4:	9304      	str	r3, [sp, #16]
    20a6:	4b19      	ldr	r3, [pc, #100]	; (210c <hci_cmd_done+0x88>)
    20a8:	9002      	str	r0, [sp, #8]
    20aa:	9300      	str	r3, [sp, #0]
    20ac:	9603      	str	r6, [sp, #12]
    20ae:	9401      	str	r4, [sp, #4]
    20b0:	4b17      	ldr	r3, [pc, #92]	; (2110 <hci_cmd_done+0x8c>)
    20b2:	4a18      	ldr	r2, [pc, #96]	; (2114 <hci_cmd_done+0x90>)
    20b4:	4918      	ldr	r1, [pc, #96]	; (2118 <hci_cmd_done+0x94>)
    20b6:	4819      	ldr	r0, [pc, #100]	; (211c <hci_cmd_done+0x98>)
    20b8:	f7ff f9e2 	bl	1480 <printk>
			buf->pool_id, net_buf_pool_get(buf->pool_id),
			&hci_cmd_pool);
		return;
    20bc:	e020      	b.n	2100 <hci_cmd_done+0x7c>
	}

	if (cmd(buf)->opcode != opcode) {
    20be:	4620      	mov	r0, r4
    20c0:	f7ff ff39 	bl	1f36 <net_buf_user_data>
    20c4:	8843      	ldrh	r3, [r0, #2]
    20c6:	429d      	cmp	r5, r3
    20c8:	d00b      	beq.n	20e2 <hci_cmd_done+0x5e>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
    20ca:	4a0f      	ldr	r2, [pc, #60]	; (2108 <hci_cmd_done+0x84>)
    20cc:	9302      	str	r3, [sp, #8]
    20ce:	4b0f      	ldr	r3, [pc, #60]	; (210c <hci_cmd_done+0x88>)
    20d0:	9203      	str	r2, [sp, #12]
    20d2:	9300      	str	r3, [sp, #0]
    20d4:	9501      	str	r5, [sp, #4]
    20d6:	4b0e      	ldr	r3, [pc, #56]	; (2110 <hci_cmd_done+0x8c>)
    20d8:	4a0e      	ldr	r2, [pc, #56]	; (2114 <hci_cmd_done+0x90>)
    20da:	490f      	ldr	r1, [pc, #60]	; (2118 <hci_cmd_done+0x94>)
    20dc:	4810      	ldr	r0, [pc, #64]	; (2120 <hci_cmd_done+0x9c>)
    20de:	f7ff f9cf 	bl	1480 <printk>
			opcode, cmd(buf)->opcode);
	}

	/* If the command was synchronous wake up bt_hci_cmd_send_sync() */
	if (cmd(buf)->sync) {
    20e2:	4620      	mov	r0, r4
    20e4:	f7ff ff27 	bl	1f36 <net_buf_user_data>
    20e8:	6843      	ldr	r3, [r0, #4]
    20ea:	b14b      	cbz	r3, 2100 <hci_cmd_done+0x7c>
		cmd(buf)->status = status;
    20ec:	7047      	strb	r7, [r0, #1]
		k_sem_give(cmd(buf)->sync);
    20ee:	4620      	mov	r0, r4
    20f0:	f7ff ff21 	bl	1f36 <net_buf_user_data>
    20f4:	6840      	ldr	r0, [r0, #4]
	}
}
    20f6:	b007      	add	sp, #28
    20f8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	}

	/* If the command was synchronous wake up bt_hci_cmd_send_sync() */
	if (cmd(buf)->sync) {
		cmd(buf)->status = status;
		k_sem_give(cmd(buf)->sync);
    20fc:	f011 b878 	b.w	131f0 <k_sem_give>
	}
}
    2100:	b007      	add	sp, #28
    2102:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2104:	200007c0 	.word	0x200007c0
    2108:	00013df4 	.word	0x00013df4
    210c:	00013e3f 	.word	0x00013e3f
    2110:	00016112 	.word	0x00016112
    2114:	00013e01 	.word	0x00013e01
    2118:	00013dbb 	.word	0x00013dbb
    211c:	00013e08 	.word	0x00013e08
    2120:	00013e47 	.word	0x00013e47

00002124 <sys_put_le64>:
    2124:	f3c0 2307 	ubfx	r3, r0, #8, #8
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    2128:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
    212a:	7053      	strb	r3, [r2, #1]
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(u32_t val, u8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
    212c:	0c00      	lsrs	r0, r0, #16
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
	dst[1] = val >> 8;
    212e:	f3c1 2307 	ubfx	r3, r1, #8, #8
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    2132:	7111      	strb	r1, [r2, #4]
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(u32_t val, u8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
    2134:	0c09      	lsrs	r1, r1, #16
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    2136:	7090      	strb	r0, [r2, #2]
    2138:	7191      	strb	r1, [r2, #6]
	dst[1] = val >> 8;
    213a:	0a00      	lsrs	r0, r0, #8
    213c:	0a09      	lsrs	r1, r1, #8
    213e:	70d0      	strb	r0, [r2, #3]
    2140:	7153      	strb	r3, [r2, #5]
    2142:	71d1      	strb	r1, [r2, #7]
    2144:	4770      	bx	lr
	...

00002148 <bt_hci_cmd_create>:
NET_BUF_POOL_DEFINE(acl_in_pool, CONFIG_BLUETOOTH_ACL_RX_COUNT, ACL_IN_SIZE,
		    BT_BUF_USER_DATA_MIN, report_completed_packet);
#endif /* CONFIG_BLUETOOTH_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_hci_cmd_create(u16_t opcode, u8_t param_len)
{
    2148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    214a:	4605      	mov	r5, r0
    214c:	460e      	mov	r6, r1
	struct bt_hci_cmd_hdr *hdr;
	struct net_buf *buf;

	BT_DBG("opcode 0x%04x param_len %u", opcode, param_len);

	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    214e:	480f      	ldr	r0, [pc, #60]	; (218c <bt_hci_cmd_create+0x44>)
    2150:	f04f 31ff 	mov.w	r1, #4294967295
    2154:	f00f fcc8 	bl	11ae8 <net_buf_alloc>
	__ASSERT_NO_MSG(buf);

	BT_DBG("buf %p", buf);

	net_buf_reserve(buf, CONFIG_BLUETOOTH_HCI_RESERVE);
    2158:	2100      	movs	r1, #0
	struct bt_hci_cmd_hdr *hdr;
	struct net_buf *buf;

	BT_DBG("opcode 0x%04x param_len %u", opcode, param_len);

	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    215a:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf);

	BT_DBG("buf %p", buf);

	net_buf_reserve(buf, CONFIG_BLUETOOTH_HCI_RESERVE);
    215c:	f00f fd23 	bl	11ba6 <net_buf_reserve>

	cmd(buf)->type = BT_BUF_CMD;
    2160:	4620      	mov	r0, r4
    2162:	f7ff fee8 	bl	1f36 <net_buf_user_data>
    2166:	2200      	movs	r2, #0
    2168:	7002      	strb	r2, [r0, #0]
	cmd(buf)->opcode = opcode;
    216a:	4620      	mov	r0, r4
    216c:	f7ff fee3 	bl	1f36 <net_buf_user_data>
    2170:	8045      	strh	r5, [r0, #2]
	cmd(buf)->sync = NULL;
    2172:	4620      	mov	r0, r4
    2174:	f7ff fedf 	bl	1f36 <net_buf_user_data>

	hdr = net_buf_add(buf, sizeof(*hdr));
    2178:	2103      	movs	r1, #3

	net_buf_reserve(buf, CONFIG_BLUETOOTH_HCI_RESERVE);

	cmd(buf)->type = BT_BUF_CMD;
	cmd(buf)->opcode = opcode;
	cmd(buf)->sync = NULL;
    217a:	6042      	str	r2, [r0, #4]

	hdr = net_buf_add(buf, sizeof(*hdr));
    217c:	f104 0008 	add.w	r0, r4, #8
    2180:	f00f fd44 	bl	11c0c <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
	hdr->param_len = param_len;
    2184:	7086      	strb	r6, [r0, #2]
	cmd(buf)->type = BT_BUF_CMD;
	cmd(buf)->opcode = opcode;
	cmd(buf)->sync = NULL;

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->opcode = sys_cpu_to_le16(opcode);
    2186:	8005      	strh	r5, [r0, #0]
	hdr->param_len = param_len;

	return buf;
}
    2188:	4620      	mov	r0, r4
    218a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    218c:	200007c0 	.word	0x200007c0

00002190 <bt_hci_cmd_send_sync>:
	return 0;
}

int bt_hci_cmd_send_sync(u16_t opcode, struct net_buf *buf,
			 struct net_buf **rsp)
{
    2190:	b570      	push	{r4, r5, r6, lr}
    2192:	4615      	mov	r5, r2
    2194:	b086      	sub	sp, #24
	struct k_sem sync_sem;
	int err;

	if (!buf) {
    2196:	460c      	mov	r4, r1
    2198:	b919      	cbnz	r1, 21a2 <bt_hci_cmd_send_sync+0x12>
		buf = bt_hci_cmd_create(opcode, 0);
    219a:	f7ff ffd5 	bl	2148 <bt_hci_cmd_create>
		if (!buf) {
    219e:	4604      	mov	r4, r0
    21a0:	b340      	cbz	r0, 21f4 <bt_hci_cmd_send_sync+0x64>
		}
	}

	BT_DBG("buf %p opcode 0x%04x len %u", buf, opcode, buf->len);

	k_sem_init(&sync_sem, 0, 1);
    21a2:	ae01      	add	r6, sp, #4
    21a4:	2201      	movs	r2, #1
    21a6:	2100      	movs	r1, #0
    21a8:	4630      	mov	r0, r6
    21aa:	f011 f819 	bl	131e0 <k_sem_init>
	cmd(buf)->sync = &sync_sem;
    21ae:	4620      	mov	r0, r4
    21b0:	f7ff fec1 	bl	1f36 <net_buf_user_data>
    21b4:	6046      	str	r6, [r0, #4]

	/* Make sure the buffer stays around until the command completes */
	net_buf_ref(buf);
    21b6:	4620      	mov	r0, r4
    21b8:	f00f fd24 	bl	11c04 <net_buf_ref>

	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    21bc:	4621      	mov	r1, r4
    21be:	480f      	ldr	r0, [pc, #60]	; (21fc <bt_hci_cmd_send_sync+0x6c>)
    21c0:	f00f fcf6 	bl	11bb0 <net_buf_put>

	err = k_sem_take(&sync_sem, HCI_CMD_TIMEOUT);
    21c4:	f242 7110 	movw	r1, #10000	; 0x2710
    21c8:	4630      	mov	r0, r6
    21ca:	f011 f853 	bl	13274 <k_sem_take>
	__ASSERT(err == 0, "k_sem_take failed with err %d", err);

	BT_DBG("opcode 0x%04x status 0x%02x", opcode, cmd(buf)->status);

	if (cmd(buf)->status) {
    21ce:	4620      	mov	r0, r4
    21d0:	f7ff feb1 	bl	1f36 <net_buf_user_data>
    21d4:	7840      	ldrb	r0, [r0, #1]
    21d6:	b128      	cbz	r0, 21e4 <bt_hci_cmd_send_sync+0x54>
		err = -EIO;
		net_buf_unref(buf);
    21d8:	4620      	mov	r0, r4
    21da:	f00f fcf7 	bl	11bcc <net_buf_unref>
	__ASSERT(err == 0, "k_sem_take failed with err %d", err);

	BT_DBG("opcode 0x%04x status 0x%02x", opcode, cmd(buf)->status);

	if (cmd(buf)->status) {
		err = -EIO;
    21de:	f06f 0004 	mvn.w	r0, #4
    21e2:	e009      	b.n	21f8 <bt_hci_cmd_send_sync+0x68>
		net_buf_unref(buf);
	} else {
		err = 0;
		if (rsp) {
    21e4:	b10d      	cbz	r5, 21ea <bt_hci_cmd_send_sync+0x5a>
			*rsp = buf;
    21e6:	602c      	str	r4, [r5, #0]
    21e8:	e006      	b.n	21f8 <bt_hci_cmd_send_sync+0x68>
		} else {
			net_buf_unref(buf);
    21ea:	4620      	mov	r0, r4
    21ec:	f00f fcee 	bl	11bcc <net_buf_unref>

	if (cmd(buf)->status) {
		err = -EIO;
		net_buf_unref(buf);
	} else {
		err = 0;
    21f0:	4628      	mov	r0, r5
    21f2:	e001      	b.n	21f8 <bt_hci_cmd_send_sync+0x68>
	int err;

	if (!buf) {
		buf = bt_hci_cmd_create(opcode, 0);
		if (!buf) {
			return -ENOBUFS;
    21f4:	f06f 0036 	mvn.w	r0, #54	; 0x36
			net_buf_unref(buf);
		}
	}

	return err;
}
    21f8:	b006      	add	sp, #24
    21fa:	bd70      	pop	{r4, r5, r6, pc}
    21fc:	20000374 	.word	0x20000374

00002200 <set_random_address>:

	return 0;
}

static int set_random_address(const bt_addr_t *addr)
{
    2200:	b570      	push	{r4, r5, r6, lr}
#define BT_ADDR_LE_NONE (&(bt_addr_le_t) { 0, \
			 { { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff } } })

static inline int bt_addr_cmp(const bt_addr_t *a, const bt_addr_t *b)
{
	return memcmp(a, b, sizeof(*a));
    2202:	4d15      	ldr	r5, [pc, #84]	; (2258 <set_random_address+0x58>)
    2204:	2206      	movs	r2, #6
    2206:	f105 0108 	add.w	r1, r5, #8
    220a:	4606      	mov	r6, r0
    220c:	f7fe ff11 	bl	1032 <memcmp>
	int err;

	BT_DBG("%s", bt_addr_str(addr));

	/* Do nothing if we already have the right address */
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    2210:	b300      	cbz	r0, 2254 <set_random_address+0x54>
		return 0;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    2212:	2106      	movs	r1, #6
    2214:	f242 0005 	movw	r0, #8197	; 0x2005
    2218:	f7ff ff96 	bl	2148 <bt_hci_cmd_create>
	if (!buf) {
    221c:	4604      	mov	r4, r0
    221e:	b1a8      	cbz	r0, 224c <set_random_address+0x4c>
		return -ENOBUFS;
	}

	net_buf_add_mem(buf, addr, sizeof(*addr));
    2220:	2206      	movs	r2, #6
    2222:	4631      	mov	r1, r6
    2224:	3008      	adds	r0, #8
    2226:	f00f fcf7 	bl	11c18 <net_buf_simple_add_mem>

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    222a:	4621      	mov	r1, r4
    222c:	2200      	movs	r2, #0
    222e:	f242 0005 	movw	r0, #8197	; 0x2005
    2232:	f7ff ffad 	bl	2190 <bt_hci_cmd_send_sync>
	if (err) {
    2236:	4604      	mov	r4, r0
    2238:	b958      	cbnz	r0, 2252 <set_random_address+0x52>
	return memcmp(a, b, sizeof(*a));
}

static inline void bt_addr_copy(bt_addr_t *dst, const bt_addr_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    223a:	2206      	movs	r2, #6
    223c:	4631      	mov	r1, r6
    223e:	f105 0008 	add.w	r0, r5, #8
    2242:	f7fe ff26 	bl	1092 <memcpy>
		return err;
	}

	bt_addr_copy(&bt_dev.random_addr.a, addr);
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    2246:	2301      	movs	r3, #1
    2248:	71eb      	strb	r3, [r5, #7]
    224a:	e002      	b.n	2252 <set_random_address+0x52>
		return 0;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
	if (!buf) {
		return -ENOBUFS;
    224c:	f06f 0036 	mvn.w	r0, #54	; 0x36
    2250:	bd70      	pop	{r4, r5, r6, pc}
    2252:	4620      	mov	r0, r4
	}

	bt_addr_copy(&bt_dev.random_addr.a, addr);
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
	return 0;
}
    2254:	bd70      	pop	{r4, r5, r6, pc}
    2256:	bf00      	nop
    2258:	200002b0 	.word	0x200002b0

0000225c <le_set_private_addr>:
		le_set_private_addr();
	}
}
#else
static int le_set_private_addr(void)
{
    225c:	b507      	push	{r0, r1, r2, lr}
	bt_addr_t nrpa;
	int err;

	err = bt_rand(nrpa.val, sizeof(nrpa.val));
    225e:	2106      	movs	r1, #6
    2260:	4668      	mov	r0, sp
    2262:	f008 fee9 	bl	b038 <bt_rand>
	if (err) {
    2266:	b940      	cbnz	r0, 227a <le_set_private_addr+0x1e>
		return err;
	}

	nrpa.val[5] &= 0x3f;
    2268:	f89d 3005 	ldrb.w	r3, [sp, #5]

	return set_random_address(&nrpa);
    226c:	4668      	mov	r0, sp
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
	if (err) {
		return err;
	}

	nrpa.val[5] &= 0x3f;
    226e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    2272:	f88d 3005 	strb.w	r3, [sp, #5]

	return set_random_address(&nrpa);
    2276:	f7ff ffc3 	bl	2200 <set_random_address>
}
    227a:	b003      	add	sp, #12
    227c:	f85d fb04 	ldr.w	pc, [sp], #4

00002280 <bt_hci_stop_scanning>:

	return err;
}

static int bt_hci_stop_scanning(void)
{
    2280:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct net_buf *buf, *rsp;
	struct bt_hci_cp_le_set_scan_enable *scan_enable;
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    2282:	2107      	movs	r1, #7
    2284:	481b      	ldr	r0, [pc, #108]	; (22f4 <bt_hci_stop_scanning+0x74>)
    2286:	f7ff fe8a 	bl	1f9e <atomic_test_bit>
    228a:	b360      	cbz	r0, 22e6 <bt_hci_stop_scanning+0x66>
		return -EALREADY;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE,
    228c:	2102      	movs	r1, #2
    228e:	f242 000c 	movw	r0, #8204	; 0x200c
    2292:	f7ff ff59 	bl	2148 <bt_hci_cmd_create>
				sizeof(*scan_enable));
	if (!buf) {
    2296:	4604      	mov	r4, r0
    2298:	b340      	cbz	r0, 22ec <bt_hci_stop_scanning+0x6c>
		return -ENOBUFS;
	}

	scan_enable = net_buf_add(buf, sizeof(*scan_enable));
    229a:	2102      	movs	r1, #2
    229c:	3008      	adds	r0, #8
    229e:	f00f fcb5 	bl	11c0c <net_buf_simple_add>
	memset(scan_enable, 0, sizeof(*scan_enable));
    22a2:	2202      	movs	r2, #2
				sizeof(*scan_enable));
	if (!buf) {
		return -ENOBUFS;
	}

	scan_enable = net_buf_add(buf, sizeof(*scan_enable));
    22a4:	4605      	mov	r5, r0
	memset(scan_enable, 0, sizeof(*scan_enable));
    22a6:	2100      	movs	r1, #0
    22a8:	f7fe ff1f 	bl	10ea <memset>
	scan_enable->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    22ac:	2300      	movs	r3, #0
    22ae:	706b      	strb	r3, [r5, #1]
	scan_enable->enable = BT_HCI_LE_SCAN_DISABLE;
    22b0:	702b      	strb	r3, [r5, #0]

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, &rsp);
    22b2:	aa01      	add	r2, sp, #4
    22b4:	4621      	mov	r1, r4
    22b6:	f242 000c 	movw	r0, #8204	; 0x200c
    22ba:	f7ff ff69 	bl	2190 <bt_hci_cmd_send_sync>
	if (err) {
    22be:	b9b8      	cbnz	r0, 22f0 <bt_hci_stop_scanning+0x70>
		return err;
	}

	/* Update scan state in case of success (0) status */
	err = rsp->data[0];
    22c0:	9b01      	ldr	r3, [sp, #4]
    22c2:	689b      	ldr	r3, [r3, #8]
    22c4:	781c      	ldrb	r4, [r3, #0]
	if (!err) {
    22c6:	b94c      	cbnz	r4, 22dc <bt_hci_stop_scanning+0x5c>
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    22c8:	f06f 0180 	mvn.w	r1, #128	; 0x80
    22cc:	4809      	ldr	r0, [pc, #36]	; (22f4 <bt_hci_stop_scanning+0x74>)
    22ce:	f7ff fe80 	bl	1fd2 <atomic_and>
    22d2:	f46f 7100 	mvn.w	r1, #512	; 0x200
    22d6:	4807      	ldr	r0, [pc, #28]	; (22f4 <bt_hci_stop_scanning+0x74>)
    22d8:	f7ff fe7b 	bl	1fd2 <atomic_and>
		atomic_clear_bit(bt_dev.flags, BT_DEV_SCANNING);
		atomic_clear_bit(bt_dev.flags, BT_DEV_ACTIVE_SCAN);
	}

	net_buf_unref(rsp);
    22dc:	9801      	ldr	r0, [sp, #4]
    22de:	f00f fc75 	bl	11bcc <net_buf_unref>
	if (err) {
		return err;
	}

	/* Update scan state in case of success (0) status */
	err = rsp->data[0];
    22e2:	4620      	mov	r0, r4
		atomic_clear_bit(bt_dev.flags, BT_DEV_ACTIVE_SCAN);
	}

	net_buf_unref(rsp);

	return err;
    22e4:	e004      	b.n	22f0 <bt_hci_stop_scanning+0x70>
	struct net_buf *buf, *rsp;
	struct bt_hci_cp_le_set_scan_enable *scan_enable;
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
		return -EALREADY;
    22e6:	f06f 0044 	mvn.w	r0, #68	; 0x44
    22ea:	e001      	b.n	22f0 <bt_hci_stop_scanning+0x70>
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE,
				sizeof(*scan_enable));
	if (!buf) {
		return -ENOBUFS;
    22ec:	f06f 0036 	mvn.w	r0, #54	; 0x36
	}

	net_buf_unref(rsp);

	return err;
}
    22f0:	b003      	add	sp, #12
    22f2:	bd30      	pop	{r4, r5, pc}
    22f4:	2000031c 	.word	0x2000031c

000022f8 <set_advertise_enable>:

	return addr;
}

static int set_advertise_enable(bool enable)
{
    22f8:	b538      	push	{r3, r4, r5, lr}
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    22fa:	2101      	movs	r1, #1

	return addr;
}

static int set_advertise_enable(bool enable)
{
    22fc:	4605      	mov	r5, r0
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    22fe:	f242 000a 	movw	r0, #8202	; 0x200a
    2302:	f7ff ff21 	bl	2148 <bt_hci_cmd_create>
	if (!buf) {
    2306:	4604      	mov	r4, r0
    2308:	b1d8      	cbz	r0, 2342 <set_advertise_enable+0x4a>
    230a:	3008      	adds	r0, #8
		return -ENOBUFS;
	}

	if (enable) {
    230c:	b10d      	cbz	r5, 2312 <set_advertise_enable+0x1a>
		net_buf_add_u8(buf, BT_HCI_LE_ADV_ENABLE);
    230e:	2101      	movs	r1, #1
    2310:	e000      	b.n	2314 <set_advertise_enable+0x1c>
	} else {
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    2312:	4629      	mov	r1, r5
    2314:	f00f fc89 	bl	11c2a <net_buf_simple_add_u8>
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    2318:	4621      	mov	r1, r4
    231a:	2200      	movs	r2, #0
    231c:	f242 000a 	movw	r0, #8202	; 0x200a
    2320:	f7ff ff36 	bl	2190 <bt_hci_cmd_send_sync>
	if (err) {
    2324:	4604      	mov	r4, r0
    2326:	b978      	cbnz	r0, 2348 <set_advertise_enable+0x50>
		return err;
	}

	if (enable) {
    2328:	b125      	cbz	r5, 2334 <set_advertise_enable+0x3c>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_or(ATOMIC_ELEM(target, bit), mask);
    232a:	2120      	movs	r1, #32
    232c:	4807      	ldr	r0, [pc, #28]	; (234c <set_advertise_enable+0x54>)
    232e:	f7ff fe25 	bl	1f7c <atomic_or>
    2332:	e009      	b.n	2348 <set_advertise_enable+0x50>
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2334:	f06f 0120 	mvn.w	r1, #32
    2338:	4804      	ldr	r0, [pc, #16]	; (234c <set_advertise_enable+0x54>)
    233a:	f7ff fe4a 	bl	1fd2 <atomic_and>
		atomic_set_bit(bt_dev.flags, BT_DEV_ADVERTISING);
	} else {
		atomic_clear_bit(bt_dev.flags, BT_DEV_ADVERTISING);
	}

	return 0;
    233e:	4628      	mov	r0, r5
    2340:	bd38      	pop	{r3, r4, r5, pc}
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
	if (!buf) {
		return -ENOBUFS;
    2342:	f06f 0036 	mvn.w	r0, #54	; 0x36
    2346:	bd38      	pop	{r3, r4, r5, pc}
    2348:	4620      	mov	r0, r4
	} else {
		atomic_clear_bit(bt_dev.flags, BT_DEV_ADVERTISING);
	}

	return 0;
}
    234a:	bd38      	pop	{r3, r4, r5, pc}
    234c:	2000031c 	.word	0x2000031c

00002350 <set_ad>:

	return true;
}

static int set_ad(u16_t hci_op, const struct bt_data *ad, size_t ad_len)
{
    2350:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2354:	460c      	mov	r4, r1
	struct bt_hci_cp_le_set_adv_data *set_data;
	struct net_buf *buf;
	int i;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    2356:	2120      	movs	r1, #32

	return true;
}

static int set_ad(u16_t hci_op, const struct bt_data *ad, size_t ad_len)
{
    2358:	4607      	mov	r7, r0
    235a:	4690      	mov	r8, r2
	struct bt_hci_cp_le_set_adv_data *set_data;
	struct net_buf *buf;
	int i;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    235c:	f7ff fef4 	bl	2148 <bt_hci_cmd_create>
	if (!buf) {
    2360:	4606      	mov	r6, r0
    2362:	2800      	cmp	r0, #0
    2364:	d041      	beq.n	23ea <set_ad+0x9a>
		return -ENOBUFS;
	}

	set_data = net_buf_add(buf, sizeof(*set_data));
    2366:	2120      	movs	r1, #32
    2368:	3008      	adds	r0, #8
    236a:	f00f fc4f 	bl	11c0c <net_buf_simple_add>

	memset(set_data, 0, sizeof(*set_data));
    236e:	2220      	movs	r2, #32
    2370:	2100      	movs	r1, #0
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
	if (!buf) {
		return -ENOBUFS;
	}

	set_data = net_buf_add(buf, sizeof(*set_data));
    2372:	4605      	mov	r5, r0

	memset(set_data, 0, sizeof(*set_data));
    2374:	f7fe feb9 	bl	10ea <memset>

	for (i = 0; i < ad_len; i++) {
    2378:	f04f 0900 	mov.w	r9, #0
    237c:	45c1      	cmp	r9, r8
    237e:	d02d      	beq.n	23dc <set_ad+0x8c>
		/* Check if ad fit in the remaining buffer */
		if (set_data->len + ad[i].data_len + 2 > 31) {
    2380:	7863      	ldrb	r3, [r4, #1]
    2382:	7828      	ldrb	r0, [r5, #0]
    2384:	4403      	add	r3, r0
    2386:	3302      	adds	r3, #2
    2388:	2b1f      	cmp	r3, #31
    238a:	f104 0408 	add.w	r4, r4, #8
    238e:	dd06      	ble.n	239e <set_ad+0x4e>
			net_buf_unref(buf);
    2390:	4630      	mov	r0, r6
    2392:	f00f fc1b 	bl	11bcc <net_buf_unref>
			return -EINVAL;
    2396:	f06f 0015 	mvn.w	r0, #21
    239a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		}

		set_data->data[set_data->len++] = ad[i].data_len + 1;
    239e:	1c43      	adds	r3, r0, #1
    23a0:	b2db      	uxtb	r3, r3
    23a2:	702b      	strb	r3, [r5, #0]
    23a4:	f814 2c07 	ldrb.w	r2, [r4, #-7]
    23a8:	1829      	adds	r1, r5, r0
		set_data->data[set_data->len++] = ad[i].type;
    23aa:	3002      	adds	r0, #2
		if (set_data->len + ad[i].data_len + 2 > 31) {
			net_buf_unref(buf);
			return -EINVAL;
		}

		set_data->data[set_data->len++] = ad[i].data_len + 1;
    23ac:	3201      	adds	r2, #1
		set_data->data[set_data->len++] = ad[i].type;
    23ae:	b2c0      	uxtb	r0, r0
		if (set_data->len + ad[i].data_len + 2 > 31) {
			net_buf_unref(buf);
			return -EINVAL;
		}

		set_data->data[set_data->len++] = ad[i].data_len + 1;
    23b0:	704a      	strb	r2, [r1, #1]
		set_data->data[set_data->len++] = ad[i].type;
    23b2:	442b      	add	r3, r5
    23b4:	7028      	strb	r0, [r5, #0]
    23b6:	f814 2c08 	ldrb.w	r2, [r4, #-8]
    23ba:	705a      	strb	r2, [r3, #1]

		memcpy(&set_data->data[set_data->len], ad[i].data,
    23bc:	4428      	add	r0, r5
    23be:	f814 2c07 	ldrb.w	r2, [r4, #-7]
    23c2:	f854 1c04 	ldr.w	r1, [r4, #-4]
    23c6:	3001      	adds	r0, #1
    23c8:	f7fe fe63 	bl	1092 <memcpy>
		       ad[i].data_len);
		set_data->len += ad[i].data_len;
    23cc:	782a      	ldrb	r2, [r5, #0]
    23ce:	f814 3c07 	ldrb.w	r3, [r4, #-7]
    23d2:	4413      	add	r3, r2
    23d4:	702b      	strb	r3, [r5, #0]

	set_data = net_buf_add(buf, sizeof(*set_data));

	memset(set_data, 0, sizeof(*set_data));

	for (i = 0; i < ad_len; i++) {
    23d6:	f109 0901 	add.w	r9, r9, #1
    23da:	e7cf      	b.n	237c <set_ad+0x2c>
		memcpy(&set_data->data[set_data->len], ad[i].data,
		       ad[i].data_len);
		set_data->len += ad[i].data_len;
	}

	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    23dc:	4631      	mov	r1, r6
    23de:	4638      	mov	r0, r7
    23e0:	2200      	movs	r2, #0
}
    23e2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		memcpy(&set_data->data[set_data->len], ad[i].data,
		       ad[i].data_len);
		set_data->len += ad[i].data_len;
	}

	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    23e6:	f7ff bed3 	b.w	2190 <bt_hci_cmd_send_sync>
	struct net_buf *buf;
	int i;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
	if (!buf) {
		return -ENOBUFS;
    23ea:	f06f 0036 	mvn.w	r0, #54	; 0x36
		       ad[i].data_len);
		set_data->len += ad[i].data_len;
	}

	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
}
    23ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000023f2 <bt_le_conn_params_valid>:

bool bt_le_conn_params_valid(const struct bt_le_conn_param *param)
{
	/* All limits according to BT Core spec 5.0 [Vol 2, Part E, 7.8.12] */

	if (param->interval_min > param->interval_max ||
    23f2:	8802      	ldrh	r2, [r0, #0]
    23f4:	8843      	ldrh	r3, [r0, #2]
    23f6:	429a      	cmp	r2, r3
done:
	bt_conn_unref(conn);
}

bool bt_le_conn_params_valid(const struct bt_le_conn_param *param)
{
    23f8:	b510      	push	{r4, lr}
	/* All limits according to BT Core spec 5.0 [Vol 2, Part E, 7.8.12] */

	if (param->interval_min > param->interval_max ||
    23fa:	d818      	bhi.n	242e <bt_le_conn_params_valid+0x3c>
    23fc:	2a05      	cmp	r2, #5
    23fe:	d916      	bls.n	242e <bt_le_conn_params_valid+0x3c>
	    param->interval_min < 6 || param->interval_max > 3200) {
    2400:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    2404:	d813      	bhi.n	242e <bt_le_conn_params_valid+0x3c>
		return false;
	}

	if (param->latency > 499) {
    2406:	8884      	ldrh	r4, [r0, #4]
    2408:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
    240c:	d20f      	bcs.n	242e <bt_le_conn_params_valid+0x3c>
		return false;
	}

	if (param->timeout < 10 || param->timeout > 3200 ||
    240e:	88c1      	ldrh	r1, [r0, #6]
    2410:	f1a1 020a 	sub.w	r2, r1, #10
    2414:	b292      	uxth	r2, r2
    2416:	f640 4076 	movw	r0, #3190	; 0xc76
    241a:	4282      	cmp	r2, r0
    241c:	d807      	bhi.n	242e <bt_le_conn_params_valid+0x3c>
    241e:	fb04 3303 	mla	r3, r4, r3, r3
    2422:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
    2426:	bfb4      	ite	lt
    2428:	2001      	movlt	r0, #1
    242a:	2000      	movge	r0, #0
    242c:	bd10      	pop	{r4, pc}
{
	/* All limits according to BT Core spec 5.0 [Vol 2, Part E, 7.8.12] */

	if (param->interval_min > param->interval_max ||
	    param->interval_min < 6 || param->interval_max > 3200) {
		return false;
    242e:	2000      	movs	r0, #0
	     ((1 + param->latency) * param->interval_max))) {
		return false;
	}

	return true;
}
    2430:	bd10      	pop	{r4, pc}
	...

00002434 <bt_le_scan_update>:

	return err;
}

int bt_le_scan_update(bool fast_scan)
{
    2434:	b508      	push	{r3, lr}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    2436:	2108      	movs	r1, #8
    2438:	4807      	ldr	r0, [pc, #28]	; (2458 <bt_le_scan_update+0x24>)
    243a:	f7ff fdb0 	bl	1f9e <atomic_test_bit>
    243e:	b940      	cbnz	r0, 2452 <bt_le_scan_update+0x1e>
		return 0;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    2440:	2107      	movs	r1, #7
    2442:	4805      	ldr	r0, [pc, #20]	; (2458 <bt_le_scan_update+0x24>)
    2444:	f7ff fdab 	bl	1f9e <atomic_test_bit>
    2448:	b118      	cbz	r0, 2452 <bt_le_scan_update+0x1e>
		return start_le_scan(BT_HCI_LE_SCAN_PASSIVE, interval, window,
				     0x01);
	}

	return 0;
}
    244a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
		int err;

		err = bt_hci_stop_scanning();
    244e:	f7ff bf17 	b.w	2280 <bt_hci_stop_scanning>
		return start_le_scan(BT_HCI_LE_SCAN_PASSIVE, interval, window,
				     0x01);
	}

	return 0;
}
    2452:	2000      	movs	r0, #0
    2454:	bd08      	pop	{r3, pc}
    2456:	bf00      	nop
    2458:	2000031c 	.word	0x2000031c

0000245c <bt_addr_le_create_static>:
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
}

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
    245c:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
    245e:	b510      	push	{r4, lr}

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;

	return bt_rand(addr->a.val, 6);
    2460:	2106      	movs	r1, #6

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
    2462:	4604      	mov	r4, r0
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
}

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
    2464:	f800 3b01 	strb.w	r3, [r0], #1

	return bt_rand(addr->a.val, 6);
    2468:	f008 fde6 	bl	b038 <bt_rand>
int bt_addr_le_create_static(bt_addr_le_t *addr)
{
	int err;

	err = create_random_addr(addr);
	if (err) {
    246c:	b918      	cbnz	r0, 2476 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
    246e:	79a3      	ldrb	r3, [r4, #6]
    2470:	f063 033f 	orn	r3, r3, #63	; 0x3f
    2474:	71a3      	strb	r3, [r4, #6]

	return 0;
}
    2476:	bd10      	pop	{r4, pc}

00002478 <bt_init>:
	return 0;
}
#endif /* CONFIG_BLUETOOTH_PRIVACY */

static int bt_init(void)
{
    2478:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    247c:	b094      	sub	sp, #80	; 0x50
{
	struct net_buf *rsp;
	int err;

	/* Send HCI_RESET */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    247e:	ae0d      	add	r6, sp, #52	; 0x34
    2480:	4632      	mov	r2, r6
    2482:	2100      	movs	r1, #0
    2484:	f640 4003 	movw	r0, #3075	; 0xc03
    2488:	f7ff fe82 	bl	2190 <bt_hci_cmd_send_sync>
	if (err) {
    248c:	2800      	cmp	r0, #0
    248e:	d16f      	bne.n	2570 <bt_init+0xf8>
    2490:	9b0d      	ldr	r3, [sp, #52]	; 0x34
	}
}

static void hci_reset_complete(struct net_buf *buf)
{
	u8_t status = buf->data[0];
    2492:	689b      	ldr	r3, [r3, #8]

	BT_DBG("status %u", status);

	if (status) {
    2494:	781b      	ldrb	r3, [r3, #0]
    2496:	b96b      	cbnz	r3, 24b4 <bt_init+0x3c>
		return;
	}

	scan_dev_found_cb = NULL;
    2498:	4aaf      	ldr	r2, [pc, #700]	; (2758 <bt_init+0x2e0>)
    249a:	6013      	str	r3, [r2, #0]
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    249c:	4baf      	ldr	r3, [pc, #700]	; (275c <bt_init+0x2e4>)
    249e:	f3bf 8f5f 	dmb	sy
    24a2:	2201      	movs	r2, #1
    24a4:	e853 1f00 	ldrex	r1, [r3]
    24a8:	e843 2000 	strex	r0, r2, [r3]
    24ac:	2800      	cmp	r0, #0
    24ae:	d1f9      	bne.n	24a4 <bt_init+0x2c>
    24b0:	f3bf 8f5f 	dmb	sy
	err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
	if (err) {
		return err;
	}
	hci_reset_complete(rsp);
	net_buf_unref(rsp);
    24b4:	980d      	ldr	r0, [sp, #52]	; 0x34
    24b6:	f00f fb89 	bl	11bcc <net_buf_unref>
		return err;
	}
#endif

	/* Read Local Supported Features */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    24ba:	4632      	mov	r2, r6
    24bc:	2100      	movs	r1, #0
    24be:	f241 0003 	movw	r0, #4099	; 0x1003
    24c2:	f7ff fe65 	bl	2190 <bt_hci_cmd_send_sync>
	if (err) {
    24c6:	4604      	mov	r4, r0
    24c8:	2800      	cmp	r0, #0
    24ca:	d152      	bne.n	2572 <bt_init+0xfa>
    24cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
{
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;

	BT_DBG("status %u", rp->status);

	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    24ce:	4da4      	ldr	r5, [pc, #656]	; (2760 <bt_init+0x2e8>)
    24d0:	6899      	ldr	r1, [r3, #8]
    24d2:	2208      	movs	r2, #8
    24d4:	3101      	adds	r1, #1
    24d6:	f105 0016 	add.w	r0, r5, #22
    24da:	f7fe fdda 	bl	1092 <memcpy>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
	if (err) {
		return err;
	}
	read_local_features_complete(rsp);
	net_buf_unref(rsp);
    24de:	980d      	ldr	r0, [sp, #52]	; 0x34
    24e0:	f00f fb74 	bl	11bcc <net_buf_unref>

	/* Read Local Version Information */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    24e4:	4621      	mov	r1, r4
    24e6:	4632      	mov	r2, r6
    24e8:	f241 0001 	movw	r0, #4097	; 0x1001
    24ec:	f7ff fe50 	bl	2190 <bt_hci_cmd_send_sync>
				   &rsp);
	if (err) {
    24f0:	4604      	mov	r4, r0
    24f2:	2800      	cmp	r0, #0
    24f4:	d13d      	bne.n	2572 <bt_init+0xfa>
		return err;
	}
	read_local_ver_complete(rsp);
    24f6:	980d      	ldr	r0, [sp, #52]	; 0x34
    24f8:	6883      	ldr	r3, [r0, #8]
{
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;

	BT_DBG("status %u", rp->status);

	bt_dev.hci_version = rp->hci_version;
    24fa:	785a      	ldrb	r2, [r3, #1]
    24fc:	73aa      	strb	r2, [r5, #14]
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    24fe:	78d9      	ldrb	r1, [r3, #3]
    2500:	789a      	ldrb	r2, [r3, #2]
    2502:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    2506:	822a      	strh	r2, [r5, #16]
	bt_dev.lmp_version = rp->lmp_version;
    2508:	791a      	ldrb	r2, [r3, #4]
    250a:	73ea      	strb	r2, [r5, #15]
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    250c:	7a19      	ldrb	r1, [r3, #8]
    250e:	79da      	ldrb	r2, [r3, #7]
    2510:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    2514:	826a      	strh	r2, [r5, #18]
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    2516:	795a      	ldrb	r2, [r3, #5]
    2518:	799b      	ldrb	r3, [r3, #6]
    251a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    251e:	82ab      	strh	r3, [r5, #20]
				   &rsp);
	if (err) {
		return err;
	}
	read_local_ver_complete(rsp);
	net_buf_unref(rsp);
    2520:	f00f fb54 	bl	11bcc <net_buf_unref>

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    2524:	4621      	mov	r1, r4
    2526:	4632      	mov	r2, r6
    2528:	f241 0009 	movw	r0, #4105	; 0x1009
    252c:	f7ff fe30 	bl	2190 <bt_hci_cmd_send_sync>
	if (err) {
    2530:	4604      	mov	r4, r0
    2532:	b9f0      	cbnz	r0, 2572 <bt_init+0xfa>
    2534:	9b0d      	ldr	r3, [sp, #52]	; 0x34
{
	struct bt_hci_rp_read_bd_addr *rp = (void *)buf->data;

	BT_DBG("status %u", rp->status);

	bt_addr_copy(&bt_dev.id_addr.a, &rp->bdaddr);
    2536:	6899      	ldr	r1, [r3, #8]
    2538:	2206      	movs	r2, #6
    253a:	3101      	adds	r1, #1
    253c:	1c68      	adds	r0, r5, #1
    253e:	f7fe fda8 	bl	1092 <memcpy>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
	if (err) {
		return err;
	}
	read_bdaddr_complete(rsp);
	net_buf_unref(rsp);
    2542:	980d      	ldr	r0, [sp, #52]	; 0x34
	struct bt_hci_rp_read_bd_addr *rp = (void *)buf->data;

	BT_DBG("status %u", rp->status);

	bt_addr_copy(&bt_dev.id_addr.a, &rp->bdaddr);
	bt_dev.id_addr.type = BT_ADDR_LE_PUBLIC;
    2544:	702c      	strb	r4, [r5, #0]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
	if (err) {
		return err;
	}
	read_bdaddr_complete(rsp);
	net_buf_unref(rsp);
    2546:	f00f fb41 	bl	11bcc <net_buf_unref>

	/* Read Local Supported Commands */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    254a:	4632      	mov	r2, r6
    254c:	4621      	mov	r1, r4
    254e:	f241 0002 	movw	r0, #4098	; 0x1002
    2552:	f7ff fe1d 	bl	2190 <bt_hci_cmd_send_sync>
				   &rsp);
	if (err) {
    2556:	b958      	cbnz	r0, 2570 <bt_init+0xf8>
    2558:	9b0d      	ldr	r3, [sp, #52]	; 0x34
{
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;

	BT_DBG("status %u", rp->status);

	memcpy(bt_dev.supported_commands, rp->commands,
    255a:	6899      	ldr	r1, [r3, #8]
    255c:	2240      	movs	r2, #64	; 0x40
    255e:	3101      	adds	r1, #1
    2560:	f105 001e 	add.w	r0, r5, #30
    2564:	f7fe fd95 	bl	1092 <memcpy>
				   &rsp);
	if (err) {
		return err;
	}
	read_supported_commands_complete(rsp);
	net_buf_unref(rsp);
    2568:	980d      	ldr	r0, [sp, #52]	; 0x34
    256a:	f00f fb2f 	bl	11bcc <net_buf_unref>
    256e:	e003      	b.n	2578 <bt_init+0x100>
	net_buf_unref(rsp);

	/* Read Local Supported Commands */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
				   &rsp);
	if (err) {
    2570:	4604      	mov	r4, r0
static int hci_init(void)
{
	int err;

	err = common_init();
	if (err) {
    2572:	2c00      	cmp	r4, #0
    2574:	f040 823d 	bne.w	29f2 <bt_init+0x57a>
	struct net_buf *buf;
	struct net_buf *rsp;
	int err;

	/* For now we only support LE capable controllers */
	if (!BT_FEAT_LE(bt_dev.features)) {
    2578:	4d79      	ldr	r5, [pc, #484]	; (2760 <bt_init+0x2e8>)
    257a:	7eab      	ldrb	r3, [r5, #26]
    257c:	065a      	lsls	r2, r3, #25
    257e:	d40c      	bmi.n	259a <bt_init+0x122>
		BT_ERR("Non-LE capable controller detected!");
    2580:	4b78      	ldr	r3, [pc, #480]	; (2764 <bt_init+0x2ec>)
    2582:	9301      	str	r3, [sp, #4]
    2584:	4b78      	ldr	r3, [pc, #480]	; (2768 <bt_init+0x2f0>)
    2586:	9300      	str	r3, [sp, #0]
    2588:	4a78      	ldr	r2, [pc, #480]	; (276c <bt_init+0x2f4>)
    258a:	4b79      	ldr	r3, [pc, #484]	; (2770 <bt_init+0x2f8>)
    258c:	4979      	ldr	r1, [pc, #484]	; (2774 <bt_init+0x2fc>)
    258e:	487a      	ldr	r0, [pc, #488]	; (2778 <bt_init+0x300>)
    2590:	f7fe ff76 	bl	1480 <printk>
		return -ENODEV;
    2594:	f06f 0412 	mvn.w	r4, #18
    2598:	e22b      	b.n	29f2 <bt_init+0x57a>
	}

	/* Read Low Energy Supported Features */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    259a:	af0b      	add	r7, sp, #44	; 0x2c
    259c:	463a      	mov	r2, r7
    259e:	2100      	movs	r1, #0
    25a0:	f242 0003 	movw	r0, #8195	; 0x2003
    25a4:	f7ff fdf4 	bl	2190 <bt_hci_cmd_send_sync>
				   &rsp);
	if (err) {
    25a8:	4604      	mov	r4, r0
    25aa:	2800      	cmp	r0, #0
    25ac:	f040 80c2 	bne.w	2734 <bt_init+0x2bc>
    25b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
{
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;

	BT_DBG("status %u", rp->status);

	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    25b2:	6899      	ldr	r1, [r3, #8]
    25b4:	2208      	movs	r2, #8
    25b6:	3101      	adds	r1, #1
    25b8:	f105 0070 	add.w	r0, r5, #112	; 0x70
    25bc:	f7fe fd69 	bl	1092 <memcpy>
				   &rsp);
	if (err) {
		return err;
	}
	read_le_features_complete(rsp);
	net_buf_unref(rsp);
    25c0:	980b      	ldr	r0, [sp, #44]	; 0x2c
    25c2:	f00f fb03 	bl	11bcc <net_buf_unref>

#if defined(CONFIG_BLUETOOTH_CONN)
	/* Read LE Buffer Size */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    25c6:	463a      	mov	r2, r7
    25c8:	4621      	mov	r1, r4
    25ca:	f242 0002 	movw	r0, #8194	; 0x2002
    25ce:	f7ff fddf 	bl	2190 <bt_hci_cmd_send_sync>
				   NULL, &rsp);
	if (err) {
    25d2:	2800      	cmp	r0, #0
    25d4:	f040 80ad 	bne.w	2732 <bt_init+0x2ba>
    25d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    25da:	689b      	ldr	r3, [r3, #8]
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
	u8_t le_max_num;

	BT_DBG("status %u", rp->status);

	bt_dev.le.mtu = sys_le16_to_cpu(rp->le_max_len);
    25dc:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    25e0:	f8a5 2080 	strh.w	r2, [r5, #128]	; 0x80
	if (!bt_dev.le.mtu) {
    25e4:	b142      	cbz	r2, 25f8 <bt_init+0x180>
	}

	BT_DBG("ACL LE buffers: pkts %u mtu %u", rp->le_max_num, bt_dev.le.mtu);

	le_max_num = min(rp->le_max_num, CONFIG_BLUETOOTH_CONN_TX_MAX);
	k_sem_init(&bt_dev.le.pkts, le_max_num, le_max_num);
    25e6:	78da      	ldrb	r2, [r3, #3]
    25e8:	2a02      	cmp	r2, #2
    25ea:	bf28      	it	cs
    25ec:	2202      	movcs	r2, #2
    25ee:	4611      	mov	r1, r2
    25f0:	f105 0084 	add.w	r0, r5, #132	; 0x84
    25f4:	f010 fdf4 	bl	131e0 <k_sem_init>
				   NULL, &rsp);
	if (err) {
		return err;
	}
	le_read_buffer_size_complete(rsp);
	net_buf_unref(rsp);
    25f8:	980b      	ldr	r0, [sp, #44]	; 0x2c
    25fa:	f00f fae7 	bl	11bcc <net_buf_unref>
#endif

	if (BT_FEAT_BREDR(bt_dev.features)) {
    25fe:	7eab      	ldrb	r3, [r5, #26]
    2600:	f003 0320 	and.w	r3, r3, #32
    2604:	f003 08ff 	and.w	r8, r3, #255	; 0xff
    2608:	b12b      	cbz	r3, 2616 <bt_init+0x19e>
			return err;
		}
	}

	/* Read LE Supported States */
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    260a:	f895 303a 	ldrb.w	r3, [r5, #58]	; 0x3a
    260e:	4c54      	ldr	r4, [pc, #336]	; (2760 <bt_init+0x2e8>)
    2610:	071b      	lsls	r3, r3, #28
    2612:	d52b      	bpl.n	266c <bt_init+0x1f4>
    2614:	e019      	b.n	264a <bt_init+0x1d2>
	le_read_buffer_size_complete(rsp);
	net_buf_unref(rsp);
#endif

	if (BT_FEAT_BREDR(bt_dev.features)) {
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    2616:	2102      	movs	r1, #2
    2618:	f640 406d 	movw	r0, #3181	; 0xc6d
    261c:	f7ff fd94 	bl	2148 <bt_hci_cmd_create>
					sizeof(*cp_le));
		if (!buf) {
    2620:	4604      	mov	r4, r0
    2622:	2800      	cmp	r0, #0
    2624:	f000 81e3 	beq.w	29ee <bt_init+0x576>
			return -ENOBUFS;
		}

		cp_le = net_buf_add(buf, sizeof(*cp_le));
    2628:	2102      	movs	r1, #2
    262a:	3008      	adds	r0, #8
    262c:	f00f faee 	bl	11c0c <net_buf_simple_add>

		/* Explicitly enable LE for dual-mode controllers */
		cp_le->le = 0x01;
    2630:	2301      	movs	r3, #1
    2632:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
    2634:	f880 8001 	strb.w	r8, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    2638:	4642      	mov	r2, r8
    263a:	4621      	mov	r1, r4
    263c:	f640 406d 	movw	r0, #3181	; 0xc6d
    2640:	f7ff fda6 	bl	2190 <bt_hci_cmd_send_sync>
					   NULL);
		if (err) {
    2644:	2800      	cmp	r0, #0
    2646:	d0e0      	beq.n	260a <bt_init+0x192>
    2648:	e073      	b.n	2732 <bt_init+0x2ba>
		}
	}

	/* Read LE Supported States */
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    264a:	463a      	mov	r2, r7
    264c:	2100      	movs	r1, #0
    264e:	f242 001c 	movw	r0, #8220	; 0x201c
    2652:	f7ff fd9d 	bl	2190 <bt_hci_cmd_send_sync>
					   &rsp);
		if (err) {
    2656:	2800      	cmp	r0, #0
    2658:	d16b      	bne.n	2732 <bt_init+0x2ba>
			return err;
		}
		le_read_supp_states_complete(rsp);
    265a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 *
 *  @return 64-bit integer in host endianness.
 */
static inline u64_t sys_get_le64(const u8_t src[8])
{
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    265c:	6883      	ldr	r3, [r0, #8]
    265e:	f853 2f01 	ldr.w	r2, [r3, #1]!
    2662:	685b      	ldr	r3, [r3, #4]
{
	struct bt_hci_rp_le_read_supp_states *rp = (void *)buf->data;

	BT_DBG("status %u", rp->status);

	bt_dev.le.states = sys_get_le64(rp->le_states);
    2664:	67e3      	str	r3, [r4, #124]	; 0x7c
    2666:	67a2      	str	r2, [r4, #120]	; 0x78
					   &rsp);
		if (err) {
			return err;
		}
		le_read_supp_states_complete(rsp);
		net_buf_unref(rsp);
    2668:	f00f fab0 	bl	11bcc <net_buf_unref>
	}

	if (IS_ENABLED(CONFIG_BLUETOOTH_CONN) &&
    266c:	f895 3070 	ldrb.w	r3, [r5, #112]	; 0x70
    2670:	0698      	lsls	r0, r3, #26
    2672:	d528      	bpl.n	26c6 <bt_init+0x24e>
		struct bt_hci_cp_le_write_default_data_len *cp;
		struct bt_hci_rp_le_read_max_data_len *rp;
		struct net_buf *buf, *rsp;
		u16_t tx_octets, tx_time;

		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL,
    2674:	4632      	mov	r2, r6
    2676:	2100      	movs	r1, #0
    2678:	f242 002f 	movw	r0, #8239	; 0x202f
    267c:	f7ff fd88 	bl	2190 <bt_hci_cmd_send_sync>
					   &rsp);
		if (err) {
    2680:	4604      	mov	r4, r0
    2682:	2800      	cmp	r0, #0
    2684:	d156      	bne.n	2734 <bt_init+0x2bc>
			return err;
		}

		rp = (void *)rsp->data;
    2686:	980d      	ldr	r0, [sp, #52]	; 0x34
    2688:	6883      	ldr	r3, [r0, #8]
		tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    268a:	f8b3 a001 	ldrh.w	sl, [r3, #1]
		tx_time = sys_le16_to_cpu(rp->max_tx_time);
    268e:	f8b3 9003 	ldrh.w	r9, [r3, #3]
		net_buf_unref(rsp);
    2692:	f00f fa9b 	bl	11bcc <net_buf_unref>

		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    2696:	2104      	movs	r1, #4
    2698:	f242 0024 	movw	r0, #8228	; 0x2024
    269c:	f7ff fd54 	bl	2148 <bt_hci_cmd_create>
					sizeof(*cp));
		if (!buf) {
    26a0:	4680      	mov	r8, r0
    26a2:	2800      	cmp	r0, #0
    26a4:	f000 81a3 	beq.w	29ee <bt_init+0x576>
			return -ENOBUFS;
		}

		cp = net_buf_add(buf, sizeof(*cp));
    26a8:	2104      	movs	r1, #4
    26aa:	3008      	adds	r0, #8
    26ac:	f00f faae 	bl	11c0c <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
		cp->max_tx_time = sys_cpu_to_le16(tx_time);

		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    26b0:	4622      	mov	r2, r4
		if (!buf) {
			return -ENOBUFS;
		}

		cp = net_buf_add(buf, sizeof(*cp));
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    26b2:	f8a0 a000 	strh.w	sl, [r0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    26b6:	f8a0 9002 	strh.w	r9, [r0, #2]

		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    26ba:	4641      	mov	r1, r8
    26bc:	f242 0024 	movw	r0, #8228	; 0x2024
    26c0:	f7ff fd66 	bl	2190 <bt_hci_cmd_send_sync>
					   buf, NULL);
		if (err) {
    26c4:	bba8      	cbnz	r0, 2732 <bt_init+0x2ba>
	struct bt_hci_cp_le_set_event_mask *cp_mask;
	struct net_buf *buf;
	u64_t mask = 0;

	/* Set LE event mask */
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    26c6:	2108      	movs	r1, #8
    26c8:	f242 0001 	movw	r0, #8193	; 0x2001
    26cc:	f7ff fd3c 	bl	2148 <bt_hci_cmd_create>
	if (!buf) {
    26d0:	4604      	mov	r4, r0
    26d2:	2800      	cmp	r0, #0
    26d4:	f000 818b 	beq.w	29ee <bt_init+0x576>
		return -ENOBUFS;
	}

	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
    26d8:	2108      	movs	r1, #8
    26da:	4408      	add	r0, r1
    26dc:	f00f fa96 	bl	11c0c <net_buf_simple_add>

	if (IS_ENABLED(CONFIG_BLUETOOTH_CONN)) {
		mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
		mask |= BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE;
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    26e0:	f895 3070 	ldrb.w	r3, [r5, #112]	; 0x70
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
		}
		if (BT_FEAT_LE_DLE(bt_dev.le.features)) {
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
		}
		if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) ||
    26e4:	f895 e071 	ldrb.w	lr, [r5, #113]	; 0x71

	if (IS_ENABLED(CONFIG_BLUETOOTH_CONN)) {
		mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
		mask |= BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE;
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    26e8:	0799      	lsls	r1, r3, #30
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
	if (!buf) {
		return -ENOBUFS;
	}

	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
    26ea:	4602      	mov	r2, r0
	if (IS_ENABLED(CONFIG_BLUETOOTH_CONN)) {
		mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
		mask |= BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE;
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    26ec:	bf4c      	ite	mi
    26ee:	202f      	movmi	r0, #47	; 0x2f
	mask |= BT_EVT_MASK_LE_ADVERTISING_REPORT;

	if (IS_ENABLED(CONFIG_BLUETOOTH_CONN)) {
		mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
		mask |= BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE;
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
    26f0:	200f      	movpl	r0, #15
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
		}
		if (BT_FEAT_LE_DLE(bt_dev.le.features)) {
    26f2:	f013 0f20 	tst.w	r3, #32
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
    26f6:	bf18      	it	ne
    26f8:	f040 0040 	orrne.w	r0, r0, #64	; 0x40
		}
		if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) ||
    26fc:	f01e 0f09 	tst.w	lr, #9
		    BT_FEAT_LE_PHY_CODED(bt_dev.le.features)) {
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
    2700:	bf18      	it	ne
    2702:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
		}
	}

	if (IS_ENABLED(CONFIG_BLUETOOTH_SMP) &&
    2706:	07db      	lsls	r3, r3, #31

	/*
	 * If "LE Read Local P-256 Public Key" and "LE Generate DH Key" are
	 * supported we need to enable events generated by those commands.
	 */
	if ((bt_dev.supported_commands[34] & 0x02) &&
    2708:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
    270c:	f003 0306 	and.w	r3, r3, #6
		}
	}

	if (IS_ENABLED(CONFIG_BLUETOOTH_SMP) &&
	    BT_FEAT_LE_ENCR(bt_dev.le.features)) {
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
    2710:	bf48      	it	mi
    2712:	f040 0010 	orrmi.w	r0, r0, #16

	/*
	 * If "LE Read Local P-256 Public Key" and "LE Generate DH Key" are
	 * supported we need to enable events generated by those commands.
	 */
	if ((bt_dev.supported_commands[34] & 0x02) &&
    2716:	2b06      	cmp	r3, #6
	mask |= BT_EVT_MASK_LE_ADVERTISING_REPORT;

	if (IS_ENABLED(CONFIG_BLUETOOTH_CONN)) {
		mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
		mask |= BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE;
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
    2718:	f04f 0100 	mov.w	r1, #0
	 * supported we need to enable events generated by those commands.
	 */
	if ((bt_dev.supported_commands[34] & 0x02) &&
	    (bt_dev.supported_commands[34] & 0x04)) {
		mask |= BT_EVT_MASK_LE_P256_PUBLIC_KEY_COMPLETE;
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
    271c:	bf08      	it	eq
    271e:	f440 70c0 	orreq.w	r0, r0, #384	; 0x180
	}

	sys_put_le64(mask, cp_mask->events);
    2722:	f7ff fcff 	bl	2124 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    2726:	2200      	movs	r2, #0
    2728:	4621      	mov	r1, r4
    272a:	f242 0001 	movw	r0, #8193	; 0x2001
    272e:	f7ff fd2f 	bl	2190 <bt_hci_cmd_send_sync>

	/* Read LE Supported States */
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
					   &rsp);
		if (err) {
    2732:	4604      	mov	r4, r0
	if (err) {
		return err;
	}

	err = le_init();
	if (err) {
    2734:	2c00      	cmp	r4, #0
    2736:	f040 815c 	bne.w	29f2 <bt_init+0x57a>
		return err;
	}

	if (BT_FEAT_BREDR(bt_dev.features)) {
    273a:	7eab      	ldrb	r3, [r5, #26]
    273c:	f8df 8020 	ldr.w	r8, [pc, #32]	; 2760 <bt_init+0x2e8>
    2740:	0698      	lsls	r0, r3, #26
    2742:	d51b      	bpl.n	277c <bt_init+0x304>
{
	struct bt_hci_cp_set_event_mask *ev;
	struct net_buf *buf;
	u64_t mask = 0;

	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    2744:	2108      	movs	r1, #8
    2746:	f640 4001 	movw	r0, #3073	; 0xc01
    274a:	f7ff fcfd 	bl	2148 <bt_hci_cmd_create>
	if (!buf) {
    274e:	4604      	mov	r4, r0
    2750:	2800      	cmp	r0, #0
    2752:	d138      	bne.n	27c6 <bt_init+0x34e>
    2754:	e14b      	b.n	29ee <bt_init+0x576>
    2756:	bf00      	nop
    2758:	20000b38 	.word	0x20000b38
    275c:	2000031c 	.word	0x2000031c
    2760:	200002b0 	.word	0x200002b0
    2764:	00013df4 	.word	0x00013df4
    2768:	00013df9 	.word	0x00013df9
    276c:	00013db4 	.word	0x00013db4
    2770:	00016001 	.word	0x00016001
    2774:	00013dbb 	.word	0x00013dbb
    2778:	00013e8a 	.word	0x00013e8a
{
#if defined(CONFIG_BLUETOOTH_CONN)
	struct net_buf *rsp;
	int err;

	if (bt_dev.le.mtu) {
    277c:	f8b8 3080 	ldrh.w	r3, [r8, #128]	; 0x80
    2780:	2b00      	cmp	r3, #0
    2782:	d1df      	bne.n	2744 <bt_init+0x2cc>
		return 0;
	}

	/* Use BR/EDR buffer size if LE reports zero buffers */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    2784:	4632      	mov	r2, r6
    2786:	4621      	mov	r1, r4
    2788:	f241 0005 	movw	r0, #4101	; 0x1005
    278c:	f7ff fd00 	bl	2190 <bt_hci_cmd_send_sync>
	if (err) {
    2790:	b9b8      	cbnz	r0, 27c2 <bt_init+0x34a>
	u16_t pkts;

	BT_DBG("status %u", rp->status);

	/* If LE-side has buffers we can ignore the BR/EDR values */
	if (bt_dev.le.mtu) {
    2792:	f8b8 3080 	ldrh.w	r3, [r8, #128]	; 0x80
    2796:	b983      	cbnz	r3, 27ba <bt_init+0x342>
    2798:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    279a:	689b      	ldr	r3, [r3, #8]
		return;
	}

	bt_dev.le.mtu = sys_le16_to_cpu(rp->acl_max_len);
    279c:	7899      	ldrb	r1, [r3, #2]
    279e:	785a      	ldrb	r2, [r3, #1]
    27a0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    27a4:	f8a8 2080 	strh.w	r2, [r8, #128]	; 0x80
	pkts = sys_le16_to_cpu(rp->acl_max_num);
    27a8:	889a      	ldrh	r2, [r3, #4]

	BT_DBG("ACL BR/EDR buffers: pkts %u mtu %u", pkts, bt_dev.le.mtu);

	pkts = min(pkts, CONFIG_BLUETOOTH_CONN_TX_MAX);

	k_sem_init(&bt_dev.le.pkts, pkts, pkts);
    27aa:	2a02      	cmp	r2, #2
    27ac:	bf28      	it	cs
    27ae:	2202      	movcs	r2, #2
    27b0:	4611      	mov	r1, r2
    27b2:	f108 0084 	add.w	r0, r8, #132	; 0x84
    27b6:	f010 fd13 	bl	131e0 <k_sem_init>
	if (err) {
		return err;
	}

	read_buffer_size_complete(rsp);
	net_buf_unref(rsp);
    27ba:	980d      	ldr	r0, [sp, #52]	; 0x34
    27bc:	f00f fa06 	bl	11bcc <net_buf_unref>
    27c0:	e7c0      	b.n	2744 <bt_init+0x2cc>
		return 0;
	}

	/* Use BR/EDR buffer size if LE reports zero buffers */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
	if (err) {
    27c2:	4604      	mov	r4, r0
    27c4:	e115      	b.n	29f2 <bt_init+0x57a>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
	if (!buf) {
		return -ENOBUFS;
	}

	ev = net_buf_add(buf, sizeof(*ev));
    27c6:	2108      	movs	r1, #8
    27c8:	4408      	add	r0, r1
    27ca:	f00f fa1f 	bl	11c0c <net_buf_simple_add>
	if (IS_ENABLED(CONFIG_BLUETOOTH_CONN)) {
		mask |= BT_EVT_MASK_DISCONN_COMPLETE;
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
	}

	if (IS_ENABLED(CONFIG_BLUETOOTH_SMP) &&
    27ce:	f895 3070 	ldrb.w	r3, [r5, #112]	; 0x70
    27d2:	07d9      	lsls	r1, r3, #31
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
	if (!buf) {
		return -ENOBUFS;
	}

	ev = net_buf_add(buf, sizeof(*ev));
    27d4:	4602      	mov	r2, r0
	if (IS_ENABLED(CONFIG_BLUETOOTH_CONN)) {
		mask |= BT_EVT_MASK_DISCONN_COMPLETE;
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
	}

	if (IS_ENABLED(CONFIG_BLUETOOTH_SMP) &&
    27d6:	d503      	bpl.n	27e0 <bt_init+0x368>
	    BT_FEAT_LE_ENCR(bt_dev.le.features)) {
		mask |= BT_EVT_MASK_ENCRYPT_CHANGE;
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
    27d8:	a1a4      	add	r1, pc, #656	; (adr r1, 2a6c <bt_init+0x5f4>)
    27da:	e9d1 0100 	ldrd	r0, r1, [r1]
    27de:	e002      	b.n	27e6 <bt_init+0x36e>
	mask |= BT_EVT_MASK_DATA_BUFFER_OVERFLOW;
	mask |= BT_EVT_MASK_LE_META_EVENT;

	if (IS_ENABLED(CONFIG_BLUETOOTH_CONN)) {
		mask |= BT_EVT_MASK_DISCONN_COMPLETE;
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
    27e0:	4887      	ldr	r0, [pc, #540]	; (2a00 <bt_init+0x588>)
    27e2:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
	    BT_FEAT_LE_ENCR(bt_dev.le.features)) {
		mask |= BT_EVT_MASK_ENCRYPT_CHANGE;
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
	}

	sys_put_le64(mask, ev->events);
    27e6:	f7ff fc9d 	bl	2124 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    27ea:	4621      	mov	r1, r4
    27ec:	2200      	movs	r2, #0
    27ee:	f640 4001 	movw	r0, #3073	; 0xc01
    27f2:	f7ff fccd 	bl	2190 <bt_hci_cmd_send_sync>
		BT_ERR("Non-BR/EDR controller detected");
		return -EIO;
	}

	err = set_event_mask();
	if (err) {
    27f6:	4604      	mov	r4, r0
    27f8:	2800      	cmp	r0, #0
    27fa:	f040 80fa 	bne.w	29f2 <bt_init+0x57a>
		return err;
	}

	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    27fe:	9009      	str	r0, [sp, #36]	; 0x24
	return memcmp(a, b, sizeof(*a));
}

static inline int bt_addr_le_cmp(const bt_addr_le_t *a, const bt_addr_le_t *b)
{
	return memcmp(a, b, sizeof(*a));
    2800:	2207      	movs	r2, #7
    2802:	f8cd 0027 	str.w	r0, [sp, #39]	; 0x27
    2806:	a909      	add	r1, sp, #36	; 0x24
    2808:	487e      	ldr	r0, [pc, #504]	; (2a04 <bt_init+0x58c>)
    280a:	f7fe fc12 	bl	1032 <memcmp>
    280e:	b918      	cbnz	r0, 2818 <bt_init+0x3a0>

static int set_static_addr(void)
{
	int err;

	if (bt_storage) {
    2810:	4c7d      	ldr	r4, [pc, #500]	; (2a08 <bt_init+0x590>)
    2812:	6823      	ldr	r3, [r4, #0]
    2814:	b98b      	cbnz	r3, 283a <bt_init+0x3c2>
    2816:	e019      	b.n	284c <bt_init+0x3d4>
	if (err) {
		return err;
	}

	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
	    !bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_NONE)) {
    2818:	4b7c      	ldr	r3, [pc, #496]	; (2a0c <bt_init+0x594>)
    281a:	6818      	ldr	r0, [r3, #0]
    281c:	889a      	ldrh	r2, [r3, #4]
    281e:	9007      	str	r0, [sp, #28]
    2820:	799b      	ldrb	r3, [r3, #6]
    2822:	f8ad 2020 	strh.w	r2, [sp, #32]
    2826:	a907      	add	r1, sp, #28
    2828:	2207      	movs	r2, #7
    282a:	4876      	ldr	r0, [pc, #472]	; (2a04 <bt_init+0x58c>)
    282c:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    2830:	f7fe fbff 	bl	1032 <memcmp>
	err = set_event_mask();
	if (err) {
		return err;
	}

	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    2834:	2800      	cmp	r0, #0
    2836:	d0eb      	beq.n	2810 <bt_init+0x398>
    2838:	e072      	b.n	2920 <bt_init+0x4a8>
	int err;

	if (bt_storage) {
		ssize_t ret;

		ret = bt_storage->read(NULL, BT_STORAGE_ID_ADDR,
    283a:	2100      	movs	r1, #0
    283c:	f8d3 8000 	ldr.w	r8, [r3]
    2840:	4a70      	ldr	r2, [pc, #448]	; (2a04 <bt_init+0x58c>)
    2842:	2307      	movs	r3, #7
    2844:	4608      	mov	r0, r1
    2846:	47c0      	blx	r8
				       &bt_dev.id_addr, sizeof(bt_dev.id_addr));
		if (ret == sizeof(bt_dev.id_addr)) {
    2848:	2807      	cmp	r0, #7
    284a:	d049      	beq.n	28e0 <bt_init+0x468>
	/* Read address from nRF5-specific storage
	 * Non-initialized FICR values default to 0xFF, skip if no address
	 * present. Also if a public address lives in FICR, do not use in this
	 * function.
	 */
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    284c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    2850:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
    2854:	3201      	adds	r2, #1
    2856:	d106      	bne.n	2866 <bt_init+0x3ee>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    2858:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
	/* Read address from nRF5-specific storage
	 * Non-initialized FICR values default to 0xFF, skip if no address
	 * present. Also if a public address lives in FICR, do not use in this
	 * function.
	 */
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    285c:	f64f 72ff 	movw	r2, #65535	; 0xffff
    2860:	b29b      	uxth	r3, r3
    2862:	4293      	cmp	r3, r2
    2864:	d01a      	beq.n	289c <bt_init+0x424>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
	      (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
    2866:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    286a:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
	 * Non-initialized FICR values default to 0xFF, skip if no address
	 * present. Also if a public address lives in FICR, do not use in this
	 * function.
	 */
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    286e:	07db      	lsls	r3, r3, #31
    2870:	d514      	bpl.n	289c <bt_init+0x424>
	      (NRF_FICR->DEVICEADDRTYPE & 0x01)) {

		bt_dev.id_addr.type = BT_ADDR_LE_RANDOM;
    2872:	2301      	movs	r3, #1
    2874:	702b      	strb	r3, [r5, #0]
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &bt_dev.id_addr.a.val[0]);
    2876:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    287a:	706b      	strb	r3, [r5, #1]
	dst[1] = val >> 8;
    287c:	f3c3 2107 	ubfx	r1, r3, #8, #8
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(u32_t val, u8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
    2880:	0c1b      	lsrs	r3, r3, #16
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    2882:	70eb      	strb	r3, [r5, #3]
	dst[1] = val >> 8;
    2884:	0a1b      	lsrs	r3, r3, #8
    2886:	70a9      	strb	r1, [r5, #2]
    2888:	712b      	strb	r3, [r5, #4]
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &bt_dev.id_addr.a.val[4]);
    288a:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    288e:	716b      	strb	r3, [r5, #5]
		/* The FICR value is a just a random number, with no knowledge
		 * of the Bluetooth Specification requirements for random
		 * static addresses.
		 */
		BT_ADDR_SET_STATIC(&bt_dev.id_addr.a);
    2890:	f3c3 2307 	ubfx	r3, r3, #8, #8
    2894:	f063 033f 	orn	r3, r3, #63	; 0x3f
    2898:	71ab      	strb	r3, [r5, #6]
    289a:	e021      	b.n	28e0 <bt_init+0x468>
	}
#endif /* CONFIG_SOC_FAMILY_NRF5 */

	BT_DBG("Generating new static random address");

	err = bt_addr_le_create_static(&bt_dev.id_addr);
    289c:	4859      	ldr	r0, [pc, #356]	; (2a04 <bt_init+0x58c>)
    289e:	f7ff fddd 	bl	245c <bt_addr_le_create_static>
	if (err) {
    28a2:	4601      	mov	r1, r0
    28a4:	2800      	cmp	r0, #0
    28a6:	f040 8094 	bne.w	29d2 <bt_init+0x55a>
		return err;
	}

	if (bt_storage) {
    28aa:	6823      	ldr	r3, [r4, #0]
    28ac:	b173      	cbz	r3, 28cc <bt_init+0x454>
		ssize_t ret;

		ret = bt_storage->write(NULL, BT_STORAGE_ID_ADDR,
    28ae:	685c      	ldr	r4, [r3, #4]
    28b0:	4a54      	ldr	r2, [pc, #336]	; (2a04 <bt_init+0x58c>)
    28b2:	2307      	movs	r3, #7
    28b4:	47a0      	blx	r4
					&bt_dev.id_addr,
					sizeof(bt_dev.id_addr));
		if (ret != sizeof(bt_dev.id_addr)) {
    28b6:	2807      	cmp	r0, #7
    28b8:	d012      	beq.n	28e0 <bt_init+0x468>
			BT_ERR("Unable to store static address");
    28ba:	4b55      	ldr	r3, [pc, #340]	; (2a10 <bt_init+0x598>)
    28bc:	9301      	str	r3, [sp, #4]
    28be:	4b55      	ldr	r3, [pc, #340]	; (2a14 <bt_init+0x59c>)
    28c0:	9300      	str	r3, [sp, #0]
    28c2:	4a55      	ldr	r2, [pc, #340]	; (2a18 <bt_init+0x5a0>)
    28c4:	4b55      	ldr	r3, [pc, #340]	; (2a1c <bt_init+0x5a4>)
    28c6:	4956      	ldr	r1, [pc, #344]	; (2a20 <bt_init+0x5a8>)
    28c8:	4856      	ldr	r0, [pc, #344]	; (2a24 <bt_init+0x5ac>)
    28ca:	e007      	b.n	28dc <bt_init+0x464>
		}
	} else {
		BT_WARN("Using temporary static random address");
    28cc:	4b50      	ldr	r3, [pc, #320]	; (2a10 <bt_init+0x598>)
    28ce:	9301      	str	r3, [sp, #4]
    28d0:	4b55      	ldr	r3, [pc, #340]	; (2a28 <bt_init+0x5b0>)
    28d2:	9300      	str	r3, [sp, #0]
    28d4:	4a55      	ldr	r2, [pc, #340]	; (2a2c <bt_init+0x5b4>)
    28d6:	4b51      	ldr	r3, [pc, #324]	; (2a1c <bt_init+0x5a4>)
    28d8:	4951      	ldr	r1, [pc, #324]	; (2a20 <bt_init+0x5a8>)
    28da:	4855      	ldr	r0, [pc, #340]	; (2a30 <bt_init+0x5b8>)
    28dc:	f7fe fdd0 	bl	1480 <printk>
	}

set_addr:
	if (bt_dev.id_addr.type != BT_ADDR_LE_RANDOM ||
    28e0:	782b      	ldrb	r3, [r5, #0]
    28e2:	4c48      	ldr	r4, [pc, #288]	; (2a04 <bt_init+0x58c>)
    28e4:	2b01      	cmp	r3, #1
    28e6:	d104      	bne.n	28f2 <bt_init+0x47a>
    28e8:	79a3      	ldrb	r3, [r4, #6]
    28ea:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    28ee:	2bc0      	cmp	r3, #192	; 0xc0
    28f0:	d00c      	beq.n	290c <bt_init+0x494>
	    (bt_dev.id_addr.a.val[5] & 0xc0) != 0xc0) {
		BT_ERR("Only static random address supported as identity");
    28f2:	4b47      	ldr	r3, [pc, #284]	; (2a10 <bt_init+0x598>)
    28f4:	9301      	str	r3, [sp, #4]
    28f6:	4b47      	ldr	r3, [pc, #284]	; (2a14 <bt_init+0x59c>)
    28f8:	9300      	str	r3, [sp, #0]
    28fa:	4a47      	ldr	r2, [pc, #284]	; (2a18 <bt_init+0x5a0>)
    28fc:	4b47      	ldr	r3, [pc, #284]	; (2a1c <bt_init+0x5a4>)
    28fe:	4948      	ldr	r1, [pc, #288]	; (2a20 <bt_init+0x5a8>)
    2900:	484c      	ldr	r0, [pc, #304]	; (2a34 <bt_init+0x5bc>)
    2902:	f7fe fdbd 	bl	1480 <printk>
		return -EINVAL;
    2906:	f06f 0415 	mvn.w	r4, #21
    290a:	e065      	b.n	29d8 <bt_init+0x560>
	}

	err = set_random_address(&bt_dev.id_addr.a);
    290c:	1c60      	adds	r0, r4, #1
    290e:	f7ff fc77 	bl	2200 <set_random_address>
	if (err) {
    2912:	2800      	cmp	r0, #0
    2914:	d15f      	bne.n	29d6 <bt_init+0x55e>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_or(ATOMIC_ELEM(target, bit), mask);
    2916:	2104      	movs	r1, #4
    2918:	f104 006c 	add.w	r0, r4, #108	; 0x6c
    291c:	f7ff fb2e 	bl	1f7c <atomic_or>
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[7];

	switch (addr->type) {
    2920:	782b      	ldrb	r3, [r5, #0]
    2922:	b11b      	cbz	r3, 292c <bt_init+0x4b4>
    2924:	2b01      	cmp	r3, #1
    2926:	d106      	bne.n	2936 <bt_init+0x4be>
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    2928:	4943      	ldr	r1, [pc, #268]	; (2a38 <bt_init+0x5c0>)
    292a:	e000      	b.n	292e <bt_init+0x4b6>
{
	char type[7];

	switch (addr->type) {
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    292c:	4943      	ldr	r1, [pc, #268]	; (2a3c <bt_init+0x5c4>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    292e:	4638      	mov	r0, r7
    2930:	f7fe fb60 	bl	ff4 <strcpy>
    2934:	e004      	b.n	2940 <bt_init+0x4c8>
		break;
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    2936:	4a42      	ldr	r2, [pc, #264]	; (2a40 <bt_init+0x5c8>)
    2938:	2107      	movs	r1, #7
    293a:	4638      	mov	r0, r7
    293c:	f7fe fdae 	bl	149c <snprintk>
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    2940:	786a      	ldrb	r2, [r5, #1]
    2942:	9204      	str	r2, [sp, #16]
    2944:	78aa      	ldrb	r2, [r5, #2]
    2946:	9203      	str	r2, [sp, #12]
    2948:	78ea      	ldrb	r2, [r5, #3]
    294a:	9202      	str	r2, [sp, #8]
    294c:	792a      	ldrb	r2, [r5, #4]
{
	char addr[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(&bt_dev.id_addr, addr, sizeof(addr));

	BT_INFO("Identity: %s", addr);
    294e:	4c3d      	ldr	r4, [pc, #244]	; (2a44 <bt_init+0x5cc>)
    2950:	9201      	str	r2, [sp, #4]
    2952:	796a      	ldrb	r2, [r5, #5]
    2954:	79ab      	ldrb	r3, [r5, #6]
    2956:	9200      	str	r2, [sp, #0]
    2958:	211b      	movs	r1, #27
    295a:	4a3b      	ldr	r2, [pc, #236]	; (2a48 <bt_init+0x5d0>)
    295c:	9705      	str	r7, [sp, #20]
    295e:	4630      	mov	r0, r6
    2960:	f7fe fd9c 	bl	149c <snprintk>
    2964:	e88d 0050 	stmia.w	sp, {r4, r6}
    2968:	4b38      	ldr	r3, [pc, #224]	; (2a4c <bt_init+0x5d4>)
    296a:	4a39      	ldr	r2, [pc, #228]	; (2a50 <bt_init+0x5d8>)
    296c:	492c      	ldr	r1, [pc, #176]	; (2a20 <bt_init+0x5a8>)
    296e:	9402      	str	r4, [sp, #8]
    2970:	4838      	ldr	r0, [pc, #224]	; (2a54 <bt_init+0x5dc>)
    2972:	f7fe fd85 	bl	1480 <printk>
	BT_INFO("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
    2976:	7bae      	ldrb	r6, [r5, #14]
    2978:	4630      	mov	r0, r6
    297a:	f7ff fae3 	bl	1f44 <ver_str>
    297e:	8aab      	ldrh	r3, [r5, #20]
    2980:	9304      	str	r3, [sp, #16]
    2982:	8a2b      	ldrh	r3, [r5, #16]
    2984:	4a32      	ldr	r2, [pc, #200]	; (2a50 <bt_init+0x5d8>)
    2986:	4926      	ldr	r1, [pc, #152]	; (2a20 <bt_init+0x5a8>)
    2988:	9405      	str	r4, [sp, #20]
    298a:	9303      	str	r3, [sp, #12]
    298c:	9602      	str	r6, [sp, #8]
    298e:	4b2f      	ldr	r3, [pc, #188]	; (2a4c <bt_init+0x5d4>)
    2990:	9001      	str	r0, [sp, #4]
    2992:	9400      	str	r4, [sp, #0]
    2994:	4830      	ldr	r0, [pc, #192]	; (2a58 <bt_init+0x5e0>)
    2996:	f7fe fd73 	bl	1480 <printk>
		ver_str(bt_dev.hci_version), bt_dev.hci_version,
		bt_dev.hci_revision, bt_dev.manufacturer);
	BT_INFO("LMP: version %s (0x%02x) subver 0x%04x",
    299a:	7bee      	ldrb	r6, [r5, #15]
    299c:	4630      	mov	r0, r6
    299e:	f7ff fad1 	bl	1f44 <ver_str>
    29a2:	8a6b      	ldrh	r3, [r5, #18]
    29a4:	9404      	str	r4, [sp, #16]
    29a6:	9303      	str	r3, [sp, #12]
    29a8:	9001      	str	r0, [sp, #4]
    29aa:	9400      	str	r4, [sp, #0]
    29ac:	4b27      	ldr	r3, [pc, #156]	; (2a4c <bt_init+0x5d4>)
    29ae:	4a28      	ldr	r2, [pc, #160]	; (2a50 <bt_init+0x5d8>)
    29b0:	491b      	ldr	r1, [pc, #108]	; (2a20 <bt_init+0x5a8>)
    29b2:	9602      	str	r6, [sp, #8]
    29b4:	4829      	ldr	r0, [pc, #164]	; (2a5c <bt_init+0x5e4>)
    29b6:	f7fe fd63 	bl	1480 <printk>
	if (err) {
		return err;
	}

	if (IS_ENABLED(CONFIG_BLUETOOTH_CONN)) {
		err = bt_conn_init();
    29ba:	f001 ffb5 	bl	4928 <bt_conn_init>
		if (err) {
    29be:	4604      	mov	r4, r0
    29c0:	b9b8      	cbnz	r0, 29f2 <bt_init+0x57a>
    29c2:	2102      	movs	r1, #2
    29c4:	4826      	ldr	r0, [pc, #152]	; (2a60 <bt_init+0x5e8>)
    29c6:	f7ff fad9 	bl	1f7c <atomic_or>
	k_delayed_work_init(&bt_dev.rpa_update, rpa_timeout);
#endif

	bt_monitor_send(BT_MONITOR_OPEN_INDEX, NULL, 0);
	atomic_set_bit(bt_dev.flags, BT_DEV_READY);
	bt_le_scan_update(false);
    29ca:	4620      	mov	r0, r4
    29cc:	f7ff fd32 	bl	2434 <bt_le_scan_update>
    29d0:	e00f      	b.n	29f2 <bt_init+0x57a>
#endif /* CONFIG_SOC_FAMILY_NRF5 */

	BT_DBG("Generating new static random address");

	err = bt_addr_le_create_static(&bt_dev.id_addr);
	if (err) {
    29d2:	4604      	mov	r4, r0
    29d4:	e000      	b.n	29d8 <bt_init+0x560>
		BT_ERR("Only static random address supported as identity");
		return -EINVAL;
	}

	err = set_random_address(&bt_dev.id_addr.a);
	if (err) {
    29d6:	4604      	mov	r4, r0
	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
	    !bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_NONE)) {
		BT_DBG("No public address. Trying to set static random.");
		err = set_static_addr();
		if (err) {
			BT_ERR("Unable to set identity address");
    29d8:	4b0d      	ldr	r3, [pc, #52]	; (2a10 <bt_init+0x598>)
    29da:	9301      	str	r3, [sp, #4]
    29dc:	4b0d      	ldr	r3, [pc, #52]	; (2a14 <bt_init+0x59c>)
    29de:	9300      	str	r3, [sp, #0]
    29e0:	4a0d      	ldr	r2, [pc, #52]	; (2a18 <bt_init+0x5a0>)
    29e2:	4b20      	ldr	r3, [pc, #128]	; (2a64 <bt_init+0x5ec>)
    29e4:	490e      	ldr	r1, [pc, #56]	; (2a20 <bt_init+0x5a8>)
    29e6:	4820      	ldr	r0, [pc, #128]	; (2a68 <bt_init+0x5f0>)
    29e8:	f7fe fd4a 	bl	1480 <printk>
    29ec:	e001      	b.n	29f2 <bt_init+0x57a>
	struct net_buf *buf;
	u64_t mask = 0;

	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
	if (!buf) {
		return -ENOBUFS;
    29ee:	f06f 0436 	mvn.w	r4, #54	; 0x36
	bt_monitor_send(BT_MONITOR_OPEN_INDEX, NULL, 0);
	atomic_set_bit(bt_dev.flags, BT_DEV_READY);
	bt_le_scan_update(false);

	return 0;
}
    29f2:	4620      	mov	r0, r4
    29f4:	b014      	add	sp, #80	; 0x50
    29f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    29fa:	bf00      	nop
    29fc:	f3af 8000 	nop.w
    2a00:	02008810 	.word	0x02008810
    2a04:	200002b0 	.word	0x200002b0
    2a08:	20002124 	.word	0x20002124
    2a0c:	00013a18 	.word	0x00013a18
    2a10:	00013df4 	.word	0x00013df4
    2a14:	00013df9 	.word	0x00013df9
    2a18:	00013db4 	.word	0x00013db4
    2a1c:	00016050 	.word	0x00016050
    2a20:	00013dbb 	.word	0x00013dbb
    2a24:	00013ebe 	.word	0x00013ebe
    2a28:	00013e3f 	.word	0x00013e3f
    2a2c:	00013e01 	.word	0x00013e01
    2a30:	00013eed 	.word	0x00013eed
    2a34:	00013f23 	.word	0x00013f23
    2a38:	00013b22 	.word	0x00013b22
    2a3c:	00013b1b 	.word	0x00013b1b
    2a40:	00013b29 	.word	0x00013b29
    2a44:	00013aa0 	.word	0x00013aa0
    2a48:	00013b30 	.word	0x00013b30
    2a4c:	000160bd 	.word	0x000160bd
    2a50:	00013f64 	.word	0x00013f64
    2a54:	00013f6b 	.word	0x00013f6b
    2a58:	00013f88 	.word	0x00013f88
    2a5c:	00013fd6 	.word	0x00013fd6
    2a60:	2000031c 	.word	0x2000031c
    2a64:	00016109 	.word	0x00016109
    2a68:	0001400d 	.word	0x0001400d
    2a6c:	02008890 	.word	0x02008890
    2a70:	20008000 	.word	0x20008000

00002a74 <init_work>:

static void init_work(struct k_work *work)
{
    2a74:	b510      	push	{r4, lr}
	int err;

	err = bt_init();
    2a76:	f7ff fcff 	bl	2478 <bt_init>
	if (ready_cb) {
    2a7a:	4b03      	ldr	r3, [pc, #12]	; (2a88 <init_work+0x14>)
    2a7c:	681b      	ldr	r3, [r3, #0]
    2a7e:	b113      	cbz	r3, 2a86 <init_work+0x12>
		ready_cb(err);
	}
}
    2a80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
	int err;

	err = bt_init();
	if (ready_cb) {
		ready_cb(err);
    2a84:	4718      	bx	r3
    2a86:	bd10      	pop	{r4, pc}
    2a88:	20000af4 	.word	0x20000af4

00002a8c <bt_send>:

	if (IS_ENABLED(CONFIG_BLUETOOTH_TINYCRYPT_ECC)) {
		return bt_hci_ecc_send(buf);
	}

	return bt_dev.drv->send(buf);
    2a8c:	4b02      	ldr	r3, [pc, #8]	; (2a98 <bt_send+0xc>)
    2a8e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    2a92:	68db      	ldr	r3, [r3, #12]
    2a94:	4718      	bx	r3
    2a96:	bf00      	nop
    2a98:	200002b0 	.word	0x200002b0

00002a9c <bt_hci_cmd_send>:

	return buf;
}

int bt_hci_cmd_send(u16_t opcode, struct net_buf *buf)
{
    2a9c:	b530      	push	{r4, r5, lr}
    2a9e:	4604      	mov	r4, r0
    2aa0:	b085      	sub	sp, #20
	if (!buf) {
    2aa2:	460d      	mov	r5, r1
    2aa4:	b919      	cbnz	r1, 2aae <bt_hci_cmd_send+0x12>
		buf = bt_hci_cmd_create(opcode, 0);
    2aa6:	f7ff fb4f 	bl	2148 <bt_hci_cmd_create>
		if (!buf) {
    2aaa:	4605      	mov	r5, r0
    2aac:	b1e8      	cbz	r0, 2aea <bt_hci_cmd_send+0x4e>
	BT_DBG("opcode 0x%04x len %u", opcode, buf->len);

	/* Host Number of Completed Packets can ignore the ncmd value
	 * and does not generate any cmd complete/status events.
	 */
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    2aae:	f640 4335 	movw	r3, #3125	; 0xc35
    2ab2:	429c      	cmp	r4, r3
    2ab4:	d113      	bne.n	2ade <bt_hci_cmd_send+0x42>
		int err;

		err = bt_send(buf);
    2ab6:	4628      	mov	r0, r5
    2ab8:	f7ff ffe8 	bl	2a8c <bt_send>
		if (err) {
    2abc:	4604      	mov	r4, r0
    2abe:	b1b8      	cbz	r0, 2af0 <bt_hci_cmd_send+0x54>
			BT_ERR("Unable to send to driver (err %d)", err);
    2ac0:	4b0d      	ldr	r3, [pc, #52]	; (2af8 <bt_hci_cmd_send+0x5c>)
    2ac2:	9302      	str	r3, [sp, #8]
    2ac4:	4b0d      	ldr	r3, [pc, #52]	; (2afc <bt_hci_cmd_send+0x60>)
    2ac6:	9001      	str	r0, [sp, #4]
    2ac8:	9300      	str	r3, [sp, #0]
    2aca:	4a0d      	ldr	r2, [pc, #52]	; (2b00 <bt_hci_cmd_send+0x64>)
    2acc:	4b0d      	ldr	r3, [pc, #52]	; (2b04 <bt_hci_cmd_send+0x68>)
    2ace:	490e      	ldr	r1, [pc, #56]	; (2b08 <bt_hci_cmd_send+0x6c>)
    2ad0:	480e      	ldr	r0, [pc, #56]	; (2b0c <bt_hci_cmd_send+0x70>)
    2ad2:	f7fe fcd5 	bl	1480 <printk>
			net_buf_unref(buf);
    2ad6:	4628      	mov	r0, r5
    2ad8:	f00f f878 	bl	11bcc <net_buf_unref>
    2adc:	e008      	b.n	2af0 <bt_hci_cmd_send+0x54>
		}

		return err;
	}

	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    2ade:	480c      	ldr	r0, [pc, #48]	; (2b10 <bt_hci_cmd_send+0x74>)
    2ae0:	4629      	mov	r1, r5
    2ae2:	f00f f865 	bl	11bb0 <net_buf_put>

	return 0;
    2ae6:	2000      	movs	r0, #0
    2ae8:	e003      	b.n	2af2 <bt_hci_cmd_send+0x56>
int bt_hci_cmd_send(u16_t opcode, struct net_buf *buf)
{
	if (!buf) {
		buf = bt_hci_cmd_create(opcode, 0);
		if (!buf) {
			return -ENOBUFS;
    2aea:	f06f 0036 	mvn.w	r0, #54	; 0x36
    2aee:	e000      	b.n	2af2 <bt_hci_cmd_send+0x56>
    2af0:	4620      	mov	r0, r4
	}

	net_buf_put(&bt_dev.cmd_tx_queue, buf);

	return 0;
}
    2af2:	b005      	add	sp, #20
    2af4:	bd30      	pop	{r4, r5, pc}
    2af6:	bf00      	nop
    2af8:	00013df4 	.word	0x00013df4
    2afc:	00013df9 	.word	0x00013df9
    2b00:	00013db4 	.word	0x00013db4
    2b04:	00015ff1 	.word	0x00015ff1
    2b08:	00013dbb 	.word	0x00013dbb
    2b0c:	0001403c 	.word	0x0001403c
    2b10:	20000374 	.word	0x20000374

00002b14 <hci_le_set_phy.isra.26>:
	}

	return 0;
}

static int hci_le_set_phy(struct bt_conn *conn)
    2b14:	b538      	push	{r3, r4, r5, lr}
{
	struct bt_hci_cp_le_set_phy *cp;
	struct net_buf *buf;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
    2b16:	2107      	movs	r1, #7
	}

	return 0;
}

static int hci_le_set_phy(struct bt_conn *conn)
    2b18:	4604      	mov	r4, r0
{
	struct bt_hci_cp_le_set_phy *cp;
	struct net_buf *buf;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
    2b1a:	f242 0032 	movw	r0, #8242	; 0x2032
    2b1e:	f7ff fb13 	bl	2148 <bt_hci_cmd_create>
	if (!buf) {
    2b22:	4605      	mov	r5, r0
    2b24:	b198      	cbz	r0, 2b4e <hci_le_set_phy.isra.26+0x3a>
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));
    2b26:	2107      	movs	r1, #7
    2b28:	3008      	adds	r0, #8
    2b2a:	f00f f86f 	bl	11c0c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    2b2e:	8823      	ldrh	r3, [r4, #0]
    2b30:	8003      	strh	r3, [r0, #0]
	cp->all_phys = 0;
    2b32:	2400      	movs	r4, #0
	cp->tx_phys = BT_HCI_LE_PHY_PREFER_2M;
    2b34:	2302      	movs	r3, #2
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));
	cp->handle = sys_cpu_to_le16(conn->handle);
	cp->all_phys = 0;
    2b36:	7084      	strb	r4, [r0, #2]
	cp->tx_phys = BT_HCI_LE_PHY_PREFER_2M;
    2b38:	70c3      	strb	r3, [r0, #3]
	cp->rx_phys = BT_HCI_LE_PHY_PREFER_2M;
    2b3a:	7103      	strb	r3, [r0, #4]
	cp->phy_opts = BT_HCI_LE_PHY_CODED_ANY;
    2b3c:	7144      	strb	r4, [r0, #5]
    2b3e:	7184      	strb	r4, [r0, #6]
	bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
    2b40:	4629      	mov	r1, r5
    2b42:	f242 0032 	movw	r0, #8242	; 0x2032
    2b46:	f7ff ffa9 	bl	2a9c <bt_hci_cmd_send>

	return 0;
    2b4a:	4620      	mov	r0, r4
    2b4c:	bd38      	pop	{r3, r4, r5, pc}
	struct bt_hci_cp_le_set_phy *cp;
	struct net_buf *buf;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
	if (!buf) {
		return -ENOBUFS;
    2b4e:	f06f 0036 	mvn.w	r0, #54	; 0x36
	cp->rx_phys = BT_HCI_LE_PHY_PREFER_2M;
	cp->phy_opts = BT_HCI_LE_PHY_CODED_ANY;
	bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);

	return 0;
}
    2b52:	bd38      	pop	{r3, r4, r5, pc}

00002b54 <hci_le_set_data_len.isra.27>:
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);

	return 0;
}

static int hci_le_set_data_len(struct bt_conn *conn)
    2b54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2b56:	4607      	mov	r7, r0
	struct bt_hci_cp_le_set_data_len *cp;
	struct net_buf *buf, *rsp;
	u16_t tx_octets, tx_time;
	int err;

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
    2b58:	aa01      	add	r2, sp, #4
    2b5a:	2100      	movs	r1, #0
    2b5c:	f242 002f 	movw	r0, #8239	; 0x202f
    2b60:	f7ff fb16 	bl	2190 <bt_hci_cmd_send_sync>
	if (err) {
    2b64:	b9f0      	cbnz	r0, 2ba4 <hci_le_set_data_len.isra.27+0x50>
		return err;
	}

	rp = (void *)rsp->data;
    2b66:	9801      	ldr	r0, [sp, #4]
    2b68:	6883      	ldr	r3, [r0, #8]
	tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    2b6a:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	tx_time = sys_le16_to_cpu(rp->max_tx_time);
    2b6e:	f8b3 5003 	ldrh.w	r5, [r3, #3]
	net_buf_unref(rsp);
    2b72:	f00f f82b 	bl	11bcc <net_buf_unref>

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
    2b76:	2106      	movs	r1, #6
    2b78:	f242 0022 	movw	r0, #8226	; 0x2022
    2b7c:	f7ff fae4 	bl	2148 <bt_hci_cmd_create>
	if (!buf) {
    2b80:	4604      	mov	r4, r0
    2b82:	b168      	cbz	r0, 2ba0 <hci_le_set_data_len.isra.27+0x4c>
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));
    2b84:	2106      	movs	r1, #6
    2b86:	3008      	adds	r0, #8
    2b88:	f00f f840 	bl	11c0c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    2b8c:	883b      	ldrh	r3, [r7, #0]
    2b8e:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
    2b90:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
    2b92:	8085      	strh	r5, [r0, #4]
	err = bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
    2b94:	4621      	mov	r1, r4
    2b96:	f242 0022 	movw	r0, #8226	; 0x2022
    2b9a:	f7ff ff7f 	bl	2a9c <bt_hci_cmd_send>
    2b9e:	e001      	b.n	2ba4 <hci_le_set_data_len.isra.27+0x50>
	tx_time = sys_le16_to_cpu(rp->max_tx_time);
	net_buf_unref(rsp);

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
	if (!buf) {
		return -ENOBUFS;
    2ba0:	f06f 0036 	mvn.w	r0, #54	; 0x36
	if (err) {
		return err;
	}

	return 0;
}
    2ba4:	b003      	add	sp, #12
    2ba6:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002ba8 <le_conn_param_neg_reply>:

	return true;
}

static int le_conn_param_neg_reply(u16_t handle, u8_t reason)
{
    2ba8:	b570      	push	{r4, r5, r6, lr}
    2baa:	4606      	mov	r6, r0
    2bac:	460d      	mov	r5, r1
	struct bt_hci_cp_le_conn_param_req_neg_reply *cp;
	struct net_buf *buf;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
    2bae:	f242 0021 	movw	r0, #8225	; 0x2021
    2bb2:	2103      	movs	r1, #3
    2bb4:	f7ff fac8 	bl	2148 <bt_hci_cmd_create>
				sizeof(*cp));
	if (!buf) {
    2bb8:	4604      	mov	r4, r0
    2bba:	b160      	cbz	r0, 2bd6 <le_conn_param_neg_reply+0x2e>
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));
    2bbc:	2103      	movs	r1, #3
    2bbe:	3008      	adds	r0, #8
    2bc0:	f00f f824 	bl	11c0c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
	cp->reason = sys_cpu_to_le16(reason);
    2bc4:	7085      	strb	r5, [r0, #2]
	if (!buf) {
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));
	cp->handle = sys_cpu_to_le16(handle);
    2bc6:	8006      	strh	r6, [r0, #0]
	cp->reason = sys_cpu_to_le16(reason);

	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    2bc8:	4621      	mov	r1, r4
    2bca:	f242 0021 	movw	r0, #8225	; 0x2021
}
    2bce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

	cp = net_buf_add(buf, sizeof(*cp));
	cp->handle = sys_cpu_to_le16(handle);
	cp->reason = sys_cpu_to_le16(reason);

	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    2bd2:	f7ff bf63 	b.w	2a9c <bt_hci_cmd_send>
}
    2bd6:	f06f 0036 	mvn.w	r0, #54	; 0x36
    2bda:	bd70      	pop	{r4, r5, r6, pc}

00002bdc <hci_tx_thread>:
/* command FIFO */
#define EV_COUNT 1
#endif

static void hci_tx_thread(void *p1, void *p2, void *p3)
{
    2bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	BT_DBG("Started");

	while (1) {
		int ev_count, err;

		events[0].state = K_POLL_STATE_NOT_READY;
    2be0:	f8df 8158 	ldr.w	r8, [pc, #344]	; 2d3c <hci_tx_thread+0x160>
	struct net_buf *buf;
	int err;

	/* Get next command */
	BT_DBG("calling net_buf_get");
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    2be4:	4d53      	ldr	r5, [pc, #332]	; (2d34 <hci_tx_thread+0x158>)
/* command FIFO */
#define EV_COUNT 1
#endif

static void hci_tx_thread(void *p1, void *p2, void *p3)
{
    2be6:	b085      	sub	sp, #20
	BT_DBG("Started");

	while (1) {
		int ev_count, err;

		events[0].state = K_POLL_STATE_NOT_READY;
    2be8:	f8d8 3004 	ldr.w	r3, [r8, #4]
		ev_count = 1;

		if (IS_ENABLED(CONFIG_BLUETOOTH_CONN)) {
			ev_count += bt_conn_prepare_events(&events[1]);
    2bec:	4852      	ldr	r0, [pc, #328]	; (2d38 <hci_tx_thread+0x15c>)
	BT_DBG("Started");

	while (1) {
		int ev_count, err;

		events[0].state = K_POLL_STATE_NOT_READY;
    2bee:	f36f 3310 	bfc	r3, #12, #5
    2bf2:	f8c8 3004 	str.w	r3, [r8, #4]
		ev_count = 1;

		if (IS_ENABLED(CONFIG_BLUETOOTH_CONN)) {
			ev_count += bt_conn_prepare_events(&events[1]);
    2bf6:	f001 fb5d 	bl	42b4 <bt_conn_prepare_events>
    2bfa:	1c47      	adds	r7, r0, #1
		}

		BT_DBG("Calling k_poll with %d events", ev_count);

		err = k_poll(events, ev_count, K_FOREVER);
    2bfc:	f04f 32ff 	mov.w	r2, #4294967295
    2c00:	4639      	mov	r1, r7
    2c02:	484e      	ldr	r0, [pc, #312]	; (2d3c <hci_tx_thread+0x160>)
    2c04:	f00f fed0 	bl	129a8 <k_poll>
		BT_ASSERT(err == 0);
    2c08:	b918      	cbnz	r0, 2c12 <hci_tx_thread+0x36>
    2c0a:	4c4c      	ldr	r4, [pc, #304]	; (2d3c <hci_tx_thread+0x160>)
	struct net_buf *buf;
	int err;

	/* Get next command */
	BT_DBG("calling net_buf_get");
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    2c0c:	f8df 916c 	ldr.w	r9, [pc, #364]	; 2d7c <hci_tx_thread+0x1a0>
    2c10:	e04c      	b.n	2cac <hci_tx_thread+0xd0>
		}

		BT_DBG("Calling k_poll with %d events", ev_count);

		err = k_poll(events, ev_count, K_FOREVER);
		BT_ASSERT(err == 0);
    2c12:	4b4b      	ldr	r3, [pc, #300]	; (2d40 <hci_tx_thread+0x164>)
    2c14:	9301      	str	r3, [sp, #4]
    2c16:	4b4b      	ldr	r3, [pc, #300]	; (2d44 <hci_tx_thread+0x168>)
    2c18:	9300      	str	r3, [sp, #0]
    2c1a:	4a4b      	ldr	r2, [pc, #300]	; (2d48 <hci_tx_thread+0x16c>)
    2c1c:	4b4b      	ldr	r3, [pc, #300]	; (2d4c <hci_tx_thread+0x170>)
    2c1e:	494c      	ldr	r1, [pc, #304]	; (2d50 <hci_tx_thread+0x174>)
    2c20:	484c      	ldr	r0, [pc, #304]	; (2d54 <hci_tx_thread+0x178>)
    2c22:	e05f      	b.n	2ce4 <hci_tx_thread+0x108>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
	BT_ASSERT(buf);

	/* Wait until ncmd > 0 */
	BT_DBG("calling sem_take_wait");
	k_sem_take(&bt_dev.ncmd_sem, K_FOREVER);
    2c24:	f04f 31ff 	mov.w	r1, #4294967295
    2c28:	f10b 0098 	add.w	r0, fp, #152	; 0x98
    2c2c:	f010 fb22 	bl	13274 <k_sem_take>

	/* Clear out any existing sent command */
	if (bt_dev.sent_cmd) {
    2c30:	f8d5 30ac 	ldr.w	r3, [r5, #172]	; 0xac
    2c34:	b17b      	cbz	r3, 2c56 <hci_tx_thread+0x7a>
		BT_ERR("Uncleared pending sent_cmd");
    2c36:	4b42      	ldr	r3, [pc, #264]	; (2d40 <hci_tx_thread+0x164>)
    2c38:	9301      	str	r3, [sp, #4]
    2c3a:	4b42      	ldr	r3, [pc, #264]	; (2d44 <hci_tx_thread+0x168>)
    2c3c:	9300      	str	r3, [sp, #0]
    2c3e:	4a42      	ldr	r2, [pc, #264]	; (2d48 <hci_tx_thread+0x16c>)
    2c40:	4b45      	ldr	r3, [pc, #276]	; (2d58 <hci_tx_thread+0x17c>)
    2c42:	4943      	ldr	r1, [pc, #268]	; (2d50 <hci_tx_thread+0x174>)
    2c44:	4845      	ldr	r0, [pc, #276]	; (2d5c <hci_tx_thread+0x180>)
    2c46:	f7fe fc1b 	bl	1480 <printk>
		net_buf_unref(bt_dev.sent_cmd);
    2c4a:	f8d5 00ac 	ldr.w	r0, [r5, #172]	; 0xac
    2c4e:	f00e ffbd 	bl	11bcc <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    2c52:	f8c5 60ac 	str.w	r6, [r5, #172]	; 0xac
	}

	bt_dev.sent_cmd = net_buf_ref(buf);
    2c56:	4650      	mov	r0, sl
    2c58:	f00e ffd4 	bl	11c04 <net_buf_ref>
    2c5c:	f8cb 00ac 	str.w	r0, [fp, #172]	; 0xac

	BT_DBG("Sending command 0x%04x (buf %p) to driver",
	       cmd(buf)->opcode, buf);

	err = bt_send(buf);
    2c60:	4650      	mov	r0, sl
    2c62:	f7ff ff13 	bl	2a8c <bt_send>
	if (err) {
    2c66:	b1f8      	cbz	r0, 2ca8 <hci_tx_thread+0xcc>
		BT_ERR("Unable to send to driver (err %d)", err);
    2c68:	4b35      	ldr	r3, [pc, #212]	; (2d40 <hci_tx_thread+0x164>)
    2c6a:	9302      	str	r3, [sp, #8]
    2c6c:	4b35      	ldr	r3, [pc, #212]	; (2d44 <hci_tx_thread+0x168>)
    2c6e:	4a36      	ldr	r2, [pc, #216]	; (2d48 <hci_tx_thread+0x16c>)
    2c70:	4937      	ldr	r1, [pc, #220]	; (2d50 <hci_tx_thread+0x174>)
    2c72:	9001      	str	r0, [sp, #4]
    2c74:	9300      	str	r3, [sp, #0]
    2c76:	483a      	ldr	r0, [pc, #232]	; (2d60 <hci_tx_thread+0x184>)
    2c78:	4b37      	ldr	r3, [pc, #220]	; (2d58 <hci_tx_thread+0x17c>)
    2c7a:	f7fe fc01 	bl	1480 <printk>
		k_sem_give(&bt_dev.ncmd_sem);
    2c7e:	4839      	ldr	r0, [pc, #228]	; (2d64 <hci_tx_thread+0x188>)
    2c80:	f010 fab6 	bl	131f0 <k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED,
    2c84:	4650      	mov	r0, sl
    2c86:	f7ff f956 	bl	1f36 <net_buf_user_data>
    2c8a:	2200      	movs	r2, #0
    2c8c:	211f      	movs	r1, #31
    2c8e:	8840      	ldrh	r0, [r0, #2]
    2c90:	f7ff f9f8 	bl	2084 <hci_cmd_done>
			     NULL);
		net_buf_unref(bt_dev.sent_cmd);
    2c94:	f8d5 00ac 	ldr.w	r0, [r5, #172]	; 0xac
    2c98:	f00e ff98 	bl	11bcc <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    2c9c:	2300      	movs	r3, #0
		net_buf_unref(buf);
    2c9e:	4650      	mov	r0, sl
		BT_ERR("Unable to send to driver (err %d)", err);
		k_sem_give(&bt_dev.ncmd_sem);
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED,
			     NULL);
		net_buf_unref(bt_dev.sent_cmd);
		bt_dev.sent_cmd = NULL;
    2ca0:	f8c5 30ac 	str.w	r3, [r5, #172]	; 0xac
		net_buf_unref(buf);
    2ca4:	f00e ff92 	bl	11bcc <net_buf_unref>

static void process_events(struct k_poll_event *ev, int count)
{
	BT_DBG("count %d", count);

	for (; count; ev++, count--) {
    2ca8:	340c      	adds	r4, #12
    2caa:	3f01      	subs	r7, #1
    2cac:	2f00      	cmp	r7, #0
    2cae:	d03d      	beq.n	2d2c <hci_tx_thread+0x150>
		BT_DBG("ev->state %u", ev->state);

		switch (ev->state) {
    2cb0:	6863      	ldr	r3, [r4, #4]
    2cb2:	f3c3 3304 	ubfx	r3, r3, #12, #5
    2cb6:	2b02      	cmp	r3, #2
    2cb8:	d0f6      	beq.n	2ca8 <hci_tx_thread+0xcc>
    2cba:	2b08      	cmp	r3, #8
    2cbc:	d11a      	bne.n	2cf4 <hci_tx_thread+0x118>
		case K_POLL_STATE_SIGNALED:
			break;
		case K_POLL_STATE_FIFO_DATA_AVAILABLE:
			if (ev->tag == BT_EVENT_CMD_TX) {
    2cbe:	7926      	ldrb	r6, [r4, #4]
    2cc0:	bb36      	cbnz	r6, 2d10 <hci_tx_thread+0x134>
	struct net_buf *buf;
	int err;

	/* Get next command */
	BT_DBG("calling net_buf_get");
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    2cc2:	4631      	mov	r1, r6
    2cc4:	4648      	mov	r0, r9
    2cc6:	f00e ff55 	bl	11b74 <net_buf_get>
    2cca:	f8df b068 	ldr.w	fp, [pc, #104]	; 2d34 <hci_tx_thread+0x158>
	BT_ASSERT(buf);
    2cce:	4682      	mov	sl, r0
    2cd0:	2800      	cmp	r0, #0
    2cd2:	d1a7      	bne.n	2c24 <hci_tx_thread+0x48>
    2cd4:	4b1a      	ldr	r3, [pc, #104]	; (2d40 <hci_tx_thread+0x164>)
    2cd6:	9301      	str	r3, [sp, #4]
    2cd8:	4b1a      	ldr	r3, [pc, #104]	; (2d44 <hci_tx_thread+0x168>)
    2cda:	9300      	str	r3, [sp, #0]
    2cdc:	4a1a      	ldr	r2, [pc, #104]	; (2d48 <hci_tx_thread+0x16c>)
    2cde:	4b1e      	ldr	r3, [pc, #120]	; (2d58 <hci_tx_thread+0x17c>)
    2ce0:	491b      	ldr	r1, [pc, #108]	; (2d50 <hci_tx_thread+0x174>)
    2ce2:	4821      	ldr	r0, [pc, #132]	; (2d68 <hci_tx_thread+0x18c>)
    2ce4:	f7fe fbcc 	bl	1480 <printk>
    2ce8:	4040      	eors	r0, r0
    2cea:	f380 8811 	msr	BASEPRI, r0
    2cee:	f04f 0004 	mov.w	r0, #4
    2cf2:	df02      	svc	2
	BT_DBG("count %d", count);

	for (; count; ev++, count--) {
		BT_DBG("ev->state %u", ev->state);

		switch (ev->state) {
    2cf4:	2b00      	cmp	r3, #0
    2cf6:	d0d7      	beq.n	2ca8 <hci_tx_thread+0xcc>
			}
			break;
		case K_POLL_STATE_NOT_READY:
			break;
		default:
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    2cf8:	4a11      	ldr	r2, [pc, #68]	; (2d40 <hci_tx_thread+0x164>)
    2cfa:	9301      	str	r3, [sp, #4]
    2cfc:	4b1b      	ldr	r3, [pc, #108]	; (2d6c <hci_tx_thread+0x190>)
    2cfe:	9202      	str	r2, [sp, #8]
    2d00:	9300      	str	r3, [sp, #0]
    2d02:	4a1b      	ldr	r2, [pc, #108]	; (2d70 <hci_tx_thread+0x194>)
    2d04:	4b1b      	ldr	r3, [pc, #108]	; (2d74 <hci_tx_thread+0x198>)
    2d06:	4912      	ldr	r1, [pc, #72]	; (2d50 <hci_tx_thread+0x174>)
    2d08:	481b      	ldr	r0, [pc, #108]	; (2d78 <hci_tx_thread+0x19c>)
    2d0a:	f7fe fbb9 	bl	1480 <printk>
    2d0e:	e7cb      	b.n	2ca8 <hci_tx_thread+0xcc>
			if (ev->tag == BT_EVENT_CMD_TX) {
				send_cmd();
			} else if (IS_ENABLED(CONFIG_BLUETOOTH_CONN)) {
				struct bt_conn *conn;

				if (ev->tag == BT_EVENT_CONN_TX_NOTIFY) {
    2d10:	2e01      	cmp	r6, #1
    2d12:	d104      	bne.n	2d1e <hci_tx_thread+0x142>
					conn = CONTAINER_OF(ev->fifo,
							    struct bt_conn,
							    tx_notify);
					bt_conn_notify_tx(conn);
    2d14:	68a0      	ldr	r0, [r4, #8]
    2d16:	381c      	subs	r0, #28
    2d18:	f001 fa3c 	bl	4194 <bt_conn_notify_tx>
    2d1c:	e7c4      	b.n	2ca8 <hci_tx_thread+0xcc>
				} else if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    2d1e:	2e02      	cmp	r6, #2
    2d20:	d1c2      	bne.n	2ca8 <hci_tx_thread+0xcc>
					conn = CONTAINER_OF(ev->fifo,
							    struct bt_conn,
							    tx_queue);
					bt_conn_process_tx(conn);
    2d22:	68a0      	ldr	r0, [r4, #8]
    2d24:	3830      	subs	r0, #48	; 0x30
    2d26:	f001 fd77 	bl	4818 <bt_conn_process_tx>
    2d2a:	e7bd      	b.n	2ca8 <hci_tx_thread+0xcc>
		process_events(events, ev_count);

		/* Make sure we don't hog the CPU if there's all the time
		 * some ready events.
		 */
		k_yield();
    2d2c:	f010 f998 	bl	13060 <k_yield>
	}
    2d30:	e75a      	b.n	2be8 <hci_tx_thread+0xc>
    2d32:	bf00      	nop
    2d34:	200002b0 	.word	0x200002b0
    2d38:	20000288 	.word	0x20000288
    2d3c:	2000027c 	.word	0x2000027c
    2d40:	00013df4 	.word	0x00013df4
    2d44:	00013df9 	.word	0x00013df9
    2d48:	00013db4 	.word	0x00013db4
    2d4c:	00015fa7 	.word	0x00015fa7
    2d50:	00013dbb 	.word	0x00013dbb
    2d54:	0001406e 	.word	0x0001406e
    2d58:	0001611f 	.word	0x0001611f
    2d5c:	000140bd 	.word	0x000140bd
    2d60:	0001403c 	.word	0x0001403c
    2d64:	20000348 	.word	0x20000348
    2d68:	00014098 	.word	0x00014098
    2d6c:	00013e3f 	.word	0x00013e3f
    2d70:	00013e01 	.word	0x00013e01
    2d74:	00015f63 	.word	0x00015f63
    2d78:	000140e8 	.word	0x000140e8
    2d7c:	20000374 	.word	0x20000374

00002d80 <bt_recv>:

	return bt_dev.drv->send(buf);
}

int bt_recv(struct net_buf *buf)
{
    2d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2d84:	4604      	mov	r4, r0
    2d86:	b08f      	sub	sp, #60	; 0x3c

	bt_monitor_send(bt_monitor_opcode(buf), buf->data, buf->len);

	BT_DBG("buf %p len %u", buf, buf->len);

	pool = net_buf_pool_get(buf->pool_id);
    2d88:	7980      	ldrb	r0, [r0, #6]
    2d8a:	f00e fea5 	bl	11ad8 <net_buf_pool_get>
	if (pool->user_data_size < BT_BUF_USER_DATA_MIN) {
    2d8e:	8b43      	ldrh	r3, [r0, #26]
    2d90:	2b03      	cmp	r3, #3
    2d92:	d80a      	bhi.n	2daa <bt_recv+0x2a>
		BT_ERR("Too small user data size");
    2d94:	4ba2      	ldr	r3, [pc, #648]	; (3020 <bt_recv+0x2a0>)
    2d96:	9301      	str	r3, [sp, #4]
    2d98:	4ba2      	ldr	r3, [pc, #648]	; (3024 <bt_recv+0x2a4>)
    2d9a:	9300      	str	r3, [sp, #0]
    2d9c:	4aa2      	ldr	r2, [pc, #648]	; (3028 <bt_recv+0x2a8>)
    2d9e:	4ba3      	ldr	r3, [pc, #652]	; (302c <bt_recv+0x2ac>)
    2da0:	49a3      	ldr	r1, [pc, #652]	; (3030 <bt_recv+0x2b0>)
    2da2:	48a4      	ldr	r0, [pc, #656]	; (3034 <bt_recv+0x2b4>)
    2da4:	f7fe fb6c 	bl	1480 <printk>
    2da8:	e082      	b.n	2eb0 <bt_recv+0x130>
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return *(u8_t *)net_buf_user_data(buf);
    2daa:	4620      	mov	r0, r4
    2dac:	f7ff f8c3 	bl	1f36 <net_buf_user_data>
    2db0:	7803      	ldrb	r3, [r0, #0]
		net_buf_unref(buf);
		return -EINVAL;
	}

	switch (bt_buf_get_type(buf)) {
    2db2:	2b01      	cmp	r3, #1
    2db4:	d042      	beq.n	2e3c <bt_recv+0xbc>
    2db6:	2b03      	cmp	r3, #3
    2db8:	d16f      	bne.n	2e9a <bt_recv+0x11a>
#endif

#if defined(CONFIG_BLUETOOTH_CONN)
static void hci_acl(struct net_buf *buf)
{
	struct bt_hci_acl_hdr *hdr = (void *)buf->data;
    2dba:	4623      	mov	r3, r4
	handle = sys_le16_to_cpu(hdr->handle);
	flags = bt_acl_flags(handle);

	acl(buf)->handle = bt_acl_handle(handle);

	net_buf_pull(buf, sizeof(*hdr));
    2dbc:	2104      	movs	r1, #4
#endif

#if defined(CONFIG_BLUETOOTH_CONN)
static void hci_acl(struct net_buf *buf)
{
	struct bt_hci_acl_hdr *hdr = (void *)buf->data;
    2dbe:	f853 2f08 	ldr.w	r2, [r3, #8]!
	struct bt_conn *conn;
	u8_t flags;

	BT_DBG("buf %p", buf);

	handle = sys_le16_to_cpu(hdr->handle);
    2dc2:	8816      	ldrh	r6, [r2, #0]

#if defined(CONFIG_BLUETOOTH_CONN)
static void hci_acl(struct net_buf *buf)
{
	struct bt_hci_acl_hdr *hdr = (void *)buf->data;
	u16_t handle, len = sys_le16_to_cpu(hdr->len);
    2dc4:	8855      	ldrh	r5, [r2, #2]
	BT_DBG("buf %p", buf);

	handle = sys_le16_to_cpu(hdr->handle);
	flags = bt_acl_flags(handle);

	acl(buf)->handle = bt_acl_handle(handle);
    2dc6:	f3c6 020b 	ubfx	r2, r6, #0, #12
    2dca:	8042      	strh	r2, [r0, #2]

	net_buf_pull(buf, sizeof(*hdr));
    2dcc:	4618      	mov	r0, r3
    2dce:	f00e ff3c 	bl	11c4a <net_buf_simple_pull>

	BT_DBG("handle %u len %u flags %u", acl(buf)->handle, len, flags);

	if (buf->len != len) {
    2dd2:	89a3      	ldrh	r3, [r4, #12]
    2dd4:	429d      	cmp	r5, r3
    2dd6:	d00c      	beq.n	2df2 <bt_recv+0x72>
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
    2dd8:	4a91      	ldr	r2, [pc, #580]	; (3020 <bt_recv+0x2a0>)
    2dda:	9301      	str	r3, [sp, #4]
    2ddc:	4b91      	ldr	r3, [pc, #580]	; (3024 <bt_recv+0x2a4>)
    2dde:	9203      	str	r2, [sp, #12]
    2de0:	9300      	str	r3, [sp, #0]
    2de2:	9502      	str	r5, [sp, #8]
    2de4:	4b94      	ldr	r3, [pc, #592]	; (3038 <bt_recv+0x2b8>)
    2de6:	4a90      	ldr	r2, [pc, #576]	; (3028 <bt_recv+0x2a8>)
    2de8:	4991      	ldr	r1, [pc, #580]	; (3030 <bt_recv+0x2b0>)
    2dea:	4894      	ldr	r0, [pc, #592]	; (303c <bt_recv+0x2bc>)
    2dec:	f7fe fb48 	bl	1480 <printk>
    2df0:	e04d      	b.n	2e8e <bt_recv+0x10e>
		net_buf_unref(buf);
		return;
	}

	conn = bt_conn_lookup_handle(acl(buf)->handle);
    2df2:	4620      	mov	r0, r4
    2df4:	f7ff f89f 	bl	1f36 <net_buf_user_data>
    2df8:	8840      	ldrh	r0, [r0, #2]
    2dfa:	f001 fb99 	bl	4530 <bt_conn_lookup_handle>
	if (!conn) {
    2dfe:	4605      	mov	r5, r0
    2e00:	b9a0      	cbnz	r0, 2e2c <bt_recv+0xac>
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
    2e02:	4620      	mov	r0, r4
    2e04:	f7ff f897 	bl	1f36 <net_buf_user_data>
    2e08:	4b85      	ldr	r3, [pc, #532]	; (3020 <bt_recv+0x2a0>)
    2e0a:	9302      	str	r3, [sp, #8]
    2e0c:	8843      	ldrh	r3, [r0, #2]
    2e0e:	9301      	str	r3, [sp, #4]
    2e10:	4b84      	ldr	r3, [pc, #528]	; (3024 <bt_recv+0x2a4>)
    2e12:	9300      	str	r3, [sp, #0]
    2e14:	4a84      	ldr	r2, [pc, #528]	; (3028 <bt_recv+0x2a8>)
    2e16:	4b88      	ldr	r3, [pc, #544]	; (3038 <bt_recv+0x2b8>)
    2e18:	4985      	ldr	r1, [pc, #532]	; (3030 <bt_recv+0x2b0>)
    2e1a:	4889      	ldr	r0, [pc, #548]	; (3040 <bt_recv+0x2c0>)
    2e1c:	f7fe fb30 	bl	1480 <printk>
		net_buf_unref(buf);
    2e20:	4620      	mov	r0, r4
    2e22:	f00e fed3 	bl	11bcc <net_buf_unref>
#if defined(CONFIG_BLUETOOTH_RECV_IS_RX_THREAD)
		hci_acl(buf);
#else
		net_buf_put(&bt_dev.rx_queue, buf);
#endif
		return 0;
    2e26:	4628      	mov	r0, r5
    2e28:	f000 bce7 	b.w	37fa <bt_recv+0xa7a>
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
		net_buf_unref(buf);
		return;
	}

	bt_conn_recv(conn, buf, flags);
    2e2c:	0b32      	lsrs	r2, r6, #12
    2e2e:	4621      	mov	r1, r4
    2e30:	f001 f8c2 	bl	3fb8 <bt_conn_recv>
	bt_conn_unref(conn);
    2e34:	4628      	mov	r0, r5
    2e36:	f001 fbf2 	bl	461e <bt_conn_unref>
    2e3a:	e02b      	b.n	2e94 <bt_recv+0x114>
	}
}

static void hci_event(struct net_buf *buf)
{
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    2e3c:	68a5      	ldr	r5, [r4, #8]

	BT_DBG("event 0x%02x", hdr->evt);

	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));
    2e3e:	782a      	ldrb	r2, [r5, #0]
    2e40:	2a13      	cmp	r2, #19
    2e42:	d813      	bhi.n	2e6c <bt_recv+0xec>
    2e44:	4093      	lsls	r3, r2
    2e46:	f413 2f0c 	tst.w	r3, #573440	; 0x8c000
    2e4a:	d00f      	beq.n	2e6c <bt_recv+0xec>
    2e4c:	4b74      	ldr	r3, [pc, #464]	; (3020 <bt_recv+0x2a0>)
    2e4e:	9301      	str	r3, [sp, #4]
    2e50:	4b74      	ldr	r3, [pc, #464]	; (3024 <bt_recv+0x2a4>)
    2e52:	9300      	str	r3, [sp, #0]
    2e54:	4a74      	ldr	r2, [pc, #464]	; (3028 <bt_recv+0x2a8>)
    2e56:	4b7b      	ldr	r3, [pc, #492]	; (3044 <bt_recv+0x2c4>)
    2e58:	4975      	ldr	r1, [pc, #468]	; (3030 <bt_recv+0x2b0>)
    2e5a:	487b      	ldr	r0, [pc, #492]	; (3048 <bt_recv+0x2c8>)
    2e5c:	f7fe fb10 	bl	1480 <printk>
    2e60:	4040      	eors	r0, r0
    2e62:	f380 8811 	msr	BASEPRI, r0
    2e66:	f04f 0004 	mov.w	r0, #4
    2e6a:	df02      	svc	2

	net_buf_pull(buf, sizeof(*hdr));
    2e6c:	f104 0708 	add.w	r7, r4, #8
    2e70:	2102      	movs	r1, #2
    2e72:	4638      	mov	r0, r7
    2e74:	f00e fee9 	bl	11c4a <net_buf_simple_pull>

	switch (hdr->evt) {
    2e78:	782d      	ldrb	r5, [r5, #0]
    2e7a:	2d08      	cmp	r5, #8
    2e7c:	d01f      	beq.n	2ebe <bt_recv+0x13e>
    2e7e:	d83a      	bhi.n	2ef6 <bt_recv+0x176>
    2e80:	2d05      	cmp	r5, #5
    2e82:	f040 80b3 	bne.w	2fec <bt_recv+0x26c>
    2e86:	68a7      	ldr	r7, [r4, #8]
	struct bt_conn *conn;

	BT_DBG("status %u handle %u reason %u", evt->status, handle,
	       evt->reason);

	if (evt->status) {
    2e88:	783e      	ldrb	r6, [r7, #0]
    2e8a:	2e00      	cmp	r6, #0
    2e8c:	d076      	beq.n	2f7c <bt_recv+0x1fc>
			buf->len, bt_hex(buf->data, buf->len));
		break;

	}

	net_buf_unref(buf);
    2e8e:	4620      	mov	r0, r4
    2e90:	f00e fe9c 	bl	11bcc <net_buf_unref>
#if defined(CONFIG_BLUETOOTH_RECV_IS_RX_THREAD)
		hci_event(buf);
#else
		net_buf_put(&bt_dev.rx_queue, buf);
#endif
		return 0;
    2e94:	2000      	movs	r0, #0
    2e96:	f000 bcb0 	b.w	37fa <bt_recv+0xa7a>
	default:
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    2e9a:	4a61      	ldr	r2, [pc, #388]	; (3020 <bt_recv+0x2a0>)
    2e9c:	9301      	str	r3, [sp, #4]
    2e9e:	4b61      	ldr	r3, [pc, #388]	; (3024 <bt_recv+0x2a4>)
    2ea0:	9202      	str	r2, [sp, #8]
    2ea2:	9300      	str	r3, [sp, #0]
    2ea4:	4a60      	ldr	r2, [pc, #384]	; (3028 <bt_recv+0x2a8>)
    2ea6:	4b61      	ldr	r3, [pc, #388]	; (302c <bt_recv+0x2ac>)
    2ea8:	4961      	ldr	r1, [pc, #388]	; (3030 <bt_recv+0x2b0>)
    2eaa:	4868      	ldr	r0, [pc, #416]	; (304c <bt_recv+0x2cc>)
    2eac:	f7fe fae8 	bl	1480 <printk>
		net_buf_unref(buf);
    2eb0:	4620      	mov	r0, r4
    2eb2:	f00e fe8b 	bl	11bcc <net_buf_unref>
		return -EINVAL;
    2eb6:	f06f 0015 	mvn.w	r0, #21
    2eba:	f000 bc9e 	b.w	37fa <bt_recv+0xa7a>
    2ebe:	68a6      	ldr	r6, [r4, #8]

#if defined(CONFIG_BLUETOOTH_SMP) || defined(CONFIG_BLUETOOTH_BREDR)
static void hci_encrypt_change(struct net_buf *buf)
{
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
	u16_t handle = sys_le16_to_cpu(evt->handle);
    2ec0:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	struct bt_conn *conn;

	BT_DBG("status %u handle %u encrypt 0x%02x", evt->status, handle,
	       evt->encrypt);

	conn = bt_conn_lookup_handle(handle);
    2ec4:	4638      	mov	r0, r7
    2ec6:	f001 fb33 	bl	4530 <bt_conn_lookup_handle>
	if (!conn) {
    2eca:	4605      	mov	r5, r0
    2ecc:	b930      	cbnz	r0, 2edc <bt_recv+0x15c>
		BT_ERR("Unable to look up conn with handle %u", handle);
    2ece:	4b54      	ldr	r3, [pc, #336]	; (3020 <bt_recv+0x2a0>)
    2ed0:	9302      	str	r3, [sp, #8]
    2ed2:	4b54      	ldr	r3, [pc, #336]	; (3024 <bt_recv+0x2a4>)
    2ed4:	9300      	str	r3, [sp, #0]
    2ed6:	9701      	str	r7, [sp, #4]
    2ed8:	4b5d      	ldr	r3, [pc, #372]	; (3050 <bt_recv+0x2d0>)
    2eda:	e01e      	b.n	2f1a <bt_recv+0x19a>
		return;
	}

	if (evt->status) {
    2edc:	7833      	ldrb	r3, [r6, #0]
    2ede:	7882      	ldrb	r2, [r0, #2]
    2ee0:	b123      	cbz	r3, 2eec <bt_recv+0x16c>
		/* TODO report error */
		if (conn->type == BT_CONN_TYPE_LE) {
    2ee2:	2a00      	cmp	r2, #0
    2ee4:	d13a      	bne.n	2f5c <bt_recv+0x1dc>
			/* reset required security level in case of error */
			conn->required_sec_level = conn->sec_level;
    2ee6:	7a03      	ldrb	r3, [r0, #8]
    2ee8:	7243      	strb	r3, [r0, #9]
    2eea:	e037      	b.n	2f5c <bt_recv+0x1dc>
		}
		bt_conn_unref(conn);
		return;
	}

	conn->encrypt = evt->encrypt;
    2eec:	78f3      	ldrb	r3, [r6, #3]
    2eee:	7283      	strb	r3, [r0, #10]

#if defined(CONFIG_BLUETOOTH_SMP)
	if (conn->type == BT_CONN_TYPE_LE) {
    2ef0:	bb02      	cbnz	r2, 2f34 <bt_recv+0x1b4>
		 *
		 * Update keys with last pairing info for proper sec level
		 * update. This is done only for LE transport, for BR/EDR keys
		 * are updated on HCI 'Link Key Notification Event'
		 */
		if (conn->encrypt) {
    2ef2:	b1e3      	cbz	r3, 2f2e <bt_recv+0x1ae>
    2ef4:	e019      	b.n	2f2a <bt_recv+0x1aa>

	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));

	net_buf_pull(buf, sizeof(*hdr));

	switch (hdr->evt) {
    2ef6:	2d30      	cmp	r5, #48	; 0x30
    2ef8:	d176      	bne.n	2fe8 <bt_recv+0x268>
    2efa:	68a6      	ldr	r6, [r4, #8]
{
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
	struct bt_conn *conn;
	u16_t handle;

	handle = sys_le16_to_cpu(evt->handle);
    2efc:	f8b6 7001 	ldrh.w	r7, [r6, #1]

	BT_DBG("status %u handle %u", evt->status, handle);

	conn = bt_conn_lookup_handle(handle);
    2f00:	4638      	mov	r0, r7
    2f02:	f001 fb15 	bl	4530 <bt_conn_lookup_handle>
	if (!conn) {
    2f06:	4605      	mov	r5, r0
    2f08:	2800      	cmp	r0, #0
    2f0a:	f040 8082 	bne.w	3012 <bt_recv+0x292>
		BT_ERR("Unable to look up conn with handle %u", handle);
    2f0e:	4b44      	ldr	r3, [pc, #272]	; (3020 <bt_recv+0x2a0>)
    2f10:	9302      	str	r3, [sp, #8]
    2f12:	4b44      	ldr	r3, [pc, #272]	; (3024 <bt_recv+0x2a4>)
    2f14:	9300      	str	r3, [sp, #0]
    2f16:	4b4f      	ldr	r3, [pc, #316]	; (3054 <bt_recv+0x2d4>)
    2f18:	9701      	str	r7, [sp, #4]
    2f1a:	4a43      	ldr	r2, [pc, #268]	; (3028 <bt_recv+0x2a8>)
    2f1c:	4944      	ldr	r1, [pc, #272]	; (3030 <bt_recv+0x2b0>)
    2f1e:	484e      	ldr	r0, [pc, #312]	; (3058 <bt_recv+0x2d8>)
    2f20:	f7fe faae 	bl	1480 <printk>
    2f24:	e7b3      	b.n	2e8e <bt_recv+0x10e>
	 * This is done only for LE transport. For BR/EDR transport keys are
	 * updated on HCI 'Link Key Notification Event', therefore update here
	 * only security level based on available keys and encryption state.
	 */
#if defined(CONFIG_BLUETOOTH_SMP)
	if (conn->type == BT_CONN_TYPE_LE) {
    2f26:	7883      	ldrb	r3, [r0, #2]
    2f28:	b923      	cbnz	r3, 2f34 <bt_recv+0x1b4>
		bt_smp_update_keys(conn);
    2f2a:	f005 f8cb 	bl	80c4 <bt_smp_update_keys>
		update_sec_level(conn);
    2f2e:	4628      	mov	r0, r5
    2f30:	f7ff f86e 	bl	2010 <update_sec_level>
	if (conn->type == BT_CONN_TYPE_BR) {
		update_sec_level_br(conn);
	}
#endif /* CONFIG_BLUETOOTH_BREDR */

	bt_l2cap_encrypt_change(conn, evt->status);
    2f34:	4628      	mov	r0, r5
    2f36:	7831      	ldrb	r1, [r6, #0]
    2f38:	f001 fdfe 	bl	4b38 <bt_l2cap_encrypt_change>
	bt_conn_security_changed(conn);
    2f3c:	4628      	mov	r0, r5
    2f3e:	f001 f805 	bl	3f4c <bt_conn_security_changed>
    2f42:	e00b      	b.n	2f5c <bt_recv+0x1dc>
	if (!conn) {
		BT_ERR("Unable to look up conn with handle %u", handle);
		goto advertise;
	}

	conn->err = evt->reason;
    2f44:	78fb      	ldrb	r3, [r7, #3]
    2f46:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50

	/* Check stacks usage (no-ops if not enabled) */
	k_call_stacks_analyze();
    2f4a:	f00f faff 	bl	1254c <k_call_stacks_analyze>
#if !defined(CONFIG_BLUETOOTH_RECV_IS_RX_THREAD)
	STACK_ANALYZE("rx stack", rx_thread_stack);
#endif
	STACK_ANALYZE("tx stack", tx_thread_stack);

	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    2f4e:	4631      	mov	r1, r6
    2f50:	4628      	mov	r0, r5
    2f52:	f001 fa2f 	bl	43b4 <bt_conn_set_state>
	conn->handle = 0;
    2f56:	802e      	strh	r6, [r5, #0]

	if (conn->type != BT_CONN_TYPE_LE) {
    2f58:	78ae      	ldrb	r6, [r5, #2]
    2f5a:	b326      	cbz	r6, 2fa6 <bt_recv+0x226>
	}

	update_conn_param(conn);

done:
	bt_conn_unref(conn);
    2f5c:	4628      	mov	r0, r5
    2f5e:	e00a      	b.n	2f76 <bt_recv+0x1f6>
		BT_ERR("Unable to lookup conn for handle %u", handle);
		return le_conn_param_neg_reply(handle,
					       BT_HCI_ERR_UNKNOWN_CONN_ID);
	}

	if (!le_param_req(conn, &param)) {
    2f60:	a90a      	add	r1, sp, #40	; 0x28
    2f62:	f000 ffb9 	bl	3ed8 <le_param_req>
    2f66:	2800      	cmp	r0, #0
    2f68:	f040 81e8 	bne.w	333c <bt_recv+0x5bc>
		err = le_conn_param_neg_reply(handle,
    2f6c:	211e      	movs	r1, #30
    2f6e:	4628      	mov	r0, r5
    2f70:	f7ff fe1a 	bl	2ba8 <le_conn_param_neg_reply>
					      BT_HCI_ERR_INVALID_LL_PARAM);
	} else {
		err = le_conn_param_req_reply(handle, &param);
	}

	bt_conn_unref(conn);
    2f74:	4640      	mov	r0, r8
	cp->handle = evt->handle;

	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);

done:
	bt_conn_unref(conn);
    2f76:	f001 fb52 	bl	461e <bt_conn_unref>
    2f7a:	e788      	b.n	2e8e <bt_recv+0x10e>
}

static void hci_disconn_complete(struct net_buf *buf)
{
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
	u16_t handle = sys_le16_to_cpu(evt->handle);
    2f7c:	f8b7 8001 	ldrh.w	r8, [r7, #1]

	if (evt->status) {
		return;
	}

	conn = bt_conn_lookup_handle(handle);
    2f80:	4640      	mov	r0, r8
    2f82:	f001 fad5 	bl	4530 <bt_conn_lookup_handle>
	if (!conn) {
    2f86:	4605      	mov	r5, r0
    2f88:	2800      	cmp	r0, #0
    2f8a:	d1db      	bne.n	2f44 <bt_recv+0x1c4>
		BT_ERR("Unable to look up conn with handle %u", handle);
    2f8c:	4b24      	ldr	r3, [pc, #144]	; (3020 <bt_recv+0x2a0>)
    2f8e:	9302      	str	r3, [sp, #8]
    2f90:	4b24      	ldr	r3, [pc, #144]	; (3024 <bt_recv+0x2a4>)
    2f92:	9300      	str	r3, [sp, #0]
    2f94:	f8cd 8004 	str.w	r8, [sp, #4]
    2f98:	4b30      	ldr	r3, [pc, #192]	; (305c <bt_recv+0x2dc>)
    2f9a:	4a23      	ldr	r2, [pc, #140]	; (3028 <bt_recv+0x2a8>)
    2f9c:	4924      	ldr	r1, [pc, #144]	; (3030 <bt_recv+0x2b0>)
    2f9e:	482e      	ldr	r0, [pc, #184]	; (3058 <bt_recv+0x2d8>)
    2fa0:	f7fe fa6e 	bl	1480 <printk>
    2fa4:	e00e      	b.n	2fc4 <bt_recv+0x244>
#endif
		bt_conn_unref(conn);
		return;
	}

	if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
    2fa6:	4631      	mov	r1, r6
    2fa8:	1d28      	adds	r0, r5, #4
    2faa:	f7fe fff8 	bl	1f9e <atomic_test_bit>
    2fae:	b130      	cbz	r0, 2fbe <bt_recv+0x23e>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    2fb0:	4628      	mov	r0, r5
    2fb2:	2101      	movs	r1, #1
    2fb4:	f001 f9fe 	bl	43b4 <bt_conn_set_state>
		bt_le_scan_update(false);
    2fb8:	4630      	mov	r0, r6
    2fba:	f7ff fa3b 	bl	2434 <bt_le_scan_update>
	}

	bt_conn_unref(conn);
    2fbe:	4628      	mov	r0, r5
    2fc0:	f001 fb2d 	bl	461e <bt_conn_unref>

advertise:
	if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    2fc4:	2106      	movs	r1, #6
    2fc6:	4826      	ldr	r0, [pc, #152]	; (3060 <bt_recv+0x2e0>)
    2fc8:	f7fe ffe9 	bl	1f9e <atomic_test_bit>
    2fcc:	2800      	cmp	r0, #0
    2fce:	f43f af5e 	beq.w	2e8e <bt_recv+0x10e>
	    !atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    2fd2:	2105      	movs	r1, #5
    2fd4:	4822      	ldr	r0, [pc, #136]	; (3060 <bt_recv+0x2e0>)
    2fd6:	f7fe ffe2 	bl	1f9e <atomic_test_bit>
	}

	bt_conn_unref(conn);

advertise:
	if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    2fda:	2800      	cmp	r0, #0
    2fdc:	f47f af57 	bne.w	2e8e <bt_recv+0x10e>
	    !atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
		if (IS_ENABLED(CONFIG_BLUETOOTH_PRIVACY)) {
			le_set_private_addr();
		}

		set_advertise_enable(true);
    2fe0:	2001      	movs	r0, #1
    2fe2:	f7ff f989 	bl	22f8 <set_advertise_enable>
    2fe6:	e752      	b.n	2e8e <bt_recv+0x10e>

	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));

	net_buf_pull(buf, sizeof(*hdr));

	switch (hdr->evt) {
    2fe8:	2d3e      	cmp	r5, #62	; 0x3e
    2fea:	d041      	beq.n	3070 <bt_recv+0x2f0>
#endif /* CONFIG_BLUETOOTH_SMP || CONFIG_BLUETOOTH_BREDR */
	case BT_HCI_EVT_LE_META_EVENT:
		hci_le_meta_event(buf);
		break;
	default:
		BT_WARN("Unhandled event 0x%02x len %u: %s", hdr->evt,
    2fec:	89a6      	ldrh	r6, [r4, #12]
    2fee:	68a0      	ldr	r0, [r4, #8]
    2ff0:	4631      	mov	r1, r6
    2ff2:	f7fe fe7b 	bl	1cec <bt_hex>
    2ff6:	4b0a      	ldr	r3, [pc, #40]	; (3020 <bt_recv+0x2a0>)
    2ff8:	9304      	str	r3, [sp, #16]
    2ffa:	4b1a      	ldr	r3, [pc, #104]	; (3064 <bt_recv+0x2e4>)
    2ffc:	9003      	str	r0, [sp, #12]
    2ffe:	9300      	str	r3, [sp, #0]
    3000:	4a19      	ldr	r2, [pc, #100]	; (3068 <bt_recv+0x2e8>)
    3002:	4b10      	ldr	r3, [pc, #64]	; (3044 <bt_recv+0x2c4>)
    3004:	490a      	ldr	r1, [pc, #40]	; (3030 <bt_recv+0x2b0>)
    3006:	4819      	ldr	r0, [pc, #100]	; (306c <bt_recv+0x2ec>)
    3008:	9602      	str	r6, [sp, #8]
    300a:	9501      	str	r5, [sp, #4]
    300c:	f7fe fa38 	bl	1480 <printk>
    3010:	e73d      	b.n	2e8e <bt_recv+0x10e>
	if (!conn) {
		BT_ERR("Unable to look up conn with handle %u", handle);
		return;
	}

	if (evt->status) {
    3012:	7831      	ldrb	r1, [r6, #0]
    3014:	2900      	cmp	r1, #0
    3016:	d086      	beq.n	2f26 <bt_recv+0x1a6>
		bt_l2cap_encrypt_change(conn, evt->status);
    3018:	f001 fd8e 	bl	4b38 <bt_l2cap_encrypt_change>
    301c:	e737      	b.n	2e8e <bt_recv+0x10e>
    301e:	bf00      	nop
    3020:	00013df4 	.word	0x00013df4
    3024:	00013df9 	.word	0x00013df9
    3028:	00013db4 	.word	0x00013db4
    302c:	00015fb5 	.word	0x00015fb5
    3030:	00013dbb 	.word	0x00013dbb
    3034:	00014119 	.word	0x00014119
    3038:	000160dc 	.word	0x000160dc
    303c:	00014142 	.word	0x00014142
    3040:	00014176 	.word	0x00014176
    3044:	00015fd0 	.word	0x00015fd0
    3048:	000142f9 	.word	0x000142f9
    304c:	000142d5 	.word	0x000142d5
    3050:	000160f6 	.word	0x000160f6
    3054:	00016009 	.word	0x00016009
    3058:	000141a8 	.word	0x000141a8
    305c:	00015f92 	.word	0x00015f92
    3060:	2000031c 	.word	0x2000031c
    3064:	00013e3f 	.word	0x00013e3f
    3068:	00013e01 	.word	0x00013e01
    306c:	000142a3 	.word	0x000142a3
	}
}

static void hci_le_meta_event(struct net_buf *buf)
{
	struct bt_hci_evt_le_meta_event *evt = (void *)buf->data;
    3070:	68a5      	ldr	r5, [r4, #8]

	BT_DBG("subevent 0x%02x", evt->subevent);

	net_buf_pull(buf, sizeof(*evt));
    3072:	2101      	movs	r1, #1
    3074:	4638      	mov	r0, r7
    3076:	f00e fde8 	bl	11c4a <net_buf_simple_pull>

	switch (evt->subevent) {
    307a:	782d      	ldrb	r5, [r5, #0]
    307c:	1e6b      	subs	r3, r5, #1
    307e:	2b0b      	cmp	r3, #11
    3080:	f200 83a8 	bhi.w	37d4 <bt_recv+0xa54>
    3084:	e8df f013 	tbh	[pc, r3, lsl #1]
    3088:	02e8000c 	.word	0x02e8000c
    308c:	00e800c6 	.word	0x00e800c6
    3090:	012801dd 	.word	0x012801dd
    3094:	02a1017f 	.word	0x02a1017f
    3098:	03a602c0 	.word	0x03a602c0
    309c:	01b003a6 	.word	0x01b003a6
    30a0:	68a6      	ldr	r6, [r4, #8]
	int err;

	BT_DBG("status %u handle %u role %u %s", evt->status, handle,
	       evt->role, bt_addr_le_str(&evt->peer_addr));

	if (evt->status) {
    30a2:	7833      	ldrb	r3, [r6, #0]
    30a4:	b173      	cbz	r3, 30c4 <bt_recv+0x344>
		 * connection so there is no need to check ID address as
		 * only one connection can be in that state
		 *
		 * Depending on error code address might not be valid anyway.
		 */
		conn = bt_conn_lookup_state_le(NULL, BT_CONN_CONNECT);
    30a6:	2102      	movs	r1, #2
    30a8:	2000      	movs	r0, #0
    30aa:	f001 fa8f 	bl	45cc <bt_conn_lookup_state_le>
		if (!conn) {
    30ae:	4605      	mov	r5, r0
    30b0:	2800      	cmp	r0, #0
    30b2:	f43f aeec 	beq.w	2e8e <bt_recv+0x10e>
			return;
		}

		conn->err = evt->status;
    30b6:	7833      	ldrb	r3, [r6, #0]
    30b8:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50

		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    30bc:	2100      	movs	r1, #0
    30be:	f001 f979 	bl	43b4 <bt_conn_set_state>
    30c2:	e74b      	b.n	2f5c <bt_recv+0x1dc>
		bt_conn_unref(conn);

		return;
	}

	id_addr = find_id_addr(&evt->peer_addr);
    30c4:	f106 0804 	add.w	r8, r6, #4
static const bt_addr_le_t *find_id_addr(const bt_addr_le_t *addr)
{
	if (IS_ENABLED(CONFIG_BLUETOOTH_SMP)) {
		struct bt_keys *keys;

		keys = bt_keys_find_irk(addr);
    30c8:	4640      	mov	r0, r8
}

static void le_conn_complete(struct net_buf *buf)
{
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
	u16_t handle = sys_le16_to_cpu(evt->handle);
    30ca:	f8b6 9001 	ldrh.w	r9, [r6, #1]
static const bt_addr_le_t *find_id_addr(const bt_addr_le_t *addr)
{
	if (IS_ENABLED(CONFIG_BLUETOOTH_SMP)) {
		struct bt_keys *keys;

		keys = bt_keys_find_irk(addr);
    30ce:	f005 f8f9 	bl	82c4 <bt_keys_find_irk>
		if (keys) {
			BT_DBG("Identity %s matched RPA %s",
			       bt_addr_le_str(&keys->addr),
			       bt_addr_le_str(addr));
			return &keys->addr;
    30d2:	2800      	cmp	r0, #0
    30d4:	bf14      	ite	ne
    30d6:	4607      	movne	r7, r0
    30d8:	4647      	moveq	r7, r8

	/*
	 * Make lookup to check if there's a connection object in
	 * CONNECT state associated with passed peer LE address.
	 */
	conn = bt_conn_lookup_state_le(id_addr, BT_CONN_CONNECT);
    30da:	2102      	movs	r1, #2
    30dc:	4638      	mov	r0, r7
    30de:	f001 fa75 	bl	45cc <bt_conn_lookup_state_le>

	if (evt->role == BT_CONN_ROLE_SLAVE) {
    30e2:	78f3      	ldrb	r3, [r6, #3]
    30e4:	2b01      	cmp	r3, #1
}

static void le_conn_complete(struct net_buf *buf)
{
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
	u16_t handle = sys_le16_to_cpu(evt->handle);
    30e6:	fa1f fa89 	uxth.w	sl, r9

	/*
	 * Make lookup to check if there's a connection object in
	 * CONNECT state associated with passed peer LE address.
	 */
	conn = bt_conn_lookup_state_le(id_addr, BT_CONN_CONNECT);
    30ea:	4605      	mov	r5, r0

	if (evt->role == BT_CONN_ROLE_SLAVE) {
    30ec:	d109      	bne.n	3102 <bt_recv+0x382>
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    30ee:	f06f 0120 	mvn.w	r1, #32
    30f2:	48b0      	ldr	r0, [pc, #704]	; (33b4 <bt_recv+0x634>)
    30f4:	f7fe ff6d 	bl	1fd2 <atomic_and>
		 * object to keep host in sync with controller state
		 */
		atomic_clear_bit(bt_dev.flags, BT_DEV_ADVERTISING);

		/* only for slave we may need to add new connection */
		if (!conn) {
    30f8:	b97d      	cbnz	r5, 311a <bt_recv+0x39a>
			conn = bt_conn_add_le(id_addr);
    30fa:	4638      	mov	r0, r7
    30fc:	f001 f922 	bl	4344 <bt_conn_add_le>
    3100:	4605      	mov	r5, r0
		}
	}

	if (!conn) {
    3102:	b955      	cbnz	r5, 311a <bt_recv+0x39a>
		BT_ERR("Unable to add new conn for handle %u", handle);
    3104:	4bac      	ldr	r3, [pc, #688]	; (33b8 <bt_recv+0x638>)
    3106:	9302      	str	r3, [sp, #8]
    3108:	4bac      	ldr	r3, [pc, #688]	; (33bc <bt_recv+0x63c>)
    310a:	9300      	str	r3, [sp, #0]
    310c:	f8cd a004 	str.w	sl, [sp, #4]
    3110:	4bab      	ldr	r3, [pc, #684]	; (33c0 <bt_recv+0x640>)
    3112:	4aac      	ldr	r2, [pc, #688]	; (33c4 <bt_recv+0x644>)
    3114:	49ac      	ldr	r1, [pc, #688]	; (33c8 <bt_recv+0x648>)
    3116:	48ad      	ldr	r0, [pc, #692]	; (33cc <bt_recv+0x64c>)
    3118:	e702      	b.n	2f20 <bt_recv+0x1a0>
		return;
	}

	conn->handle   = handle;
    311a:	4628      	mov	r0, r5
	memcpy(dst, src, sizeof(*dst));
}

static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    311c:	4639      	mov	r1, r7
    311e:	f820 9b54 	strh.w	r9, [r0], #84
    3122:	2207      	movs	r2, #7
    3124:	f7fd ffb5 	bl	1092 <memcpy>
	bt_addr_le_copy(&conn->le.dst, id_addr);
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    3128:	f8b6 300b 	ldrh.w	r3, [r6, #11]
    312c:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    3130:	f8b6 300d 	ldrh.w	r3, [r6, #13]
    3134:	f8a5 3070 	strh.w	r3, [r5, #112]	; 0x70
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    3138:	f8b6 300f 	ldrh.w	r3, [r6, #15]
    313c:	f8a5 3072 	strh.w	r3, [r5, #114]	; 0x72
	conn->role = evt->role;
    3140:	78f7      	ldrb	r7, [r6, #3]
    3142:	70ef      	strb	r7, [r5, #3]
	/*
	 * Use connection address (instead of identity address) as initiator
	 * or responder address. Only slave needs to be updated. For master all
	 * was set during outgoing connection creation.
	 */
	if (conn->role == BT_HCI_ROLE_SLAVE) {
    3144:	2f01      	cmp	r7, #1
    3146:	d11e      	bne.n	3186 <bt_recv+0x406>
    3148:	4641      	mov	r1, r8
    314a:	f8df 8284 	ldr.w	r8, [pc, #644]	; 33d0 <bt_recv+0x650>
    314e:	2207      	movs	r2, #7
    3150:	f105 005b 	add.w	r0, r5, #91	; 0x5b
    3154:	f7fd ff9d 	bl	1092 <memcpy>
    3158:	4641      	mov	r1, r8
    315a:	2207      	movs	r2, #7
    315c:	f105 0062 	add.w	r0, r5, #98	; 0x62
    3160:	f7fd ff97 	bl	1092 <memcpy>
		/* if the controller supports, lets advertise for another
		 * slave connection.
		 * check for connectable advertising state is sufficient as
		 * this is how this le connection complete for slave occurred.
		 */
		if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    3164:	2106      	movs	r1, #6
    3166:	f108 006c 	add.w	r0, r8, #108	; 0x6c
    316a:	f7fe ff18 	bl	1f9e <atomic_test_bit>
    316e:	b150      	cbz	r0, 3186 <bt_recv+0x406>
    3170:	e9d8 231e 	ldrd	r2, r3, [r8, #120]	; 0x78
    3174:	2000      	movs	r0, #0
    3176:	f003 0140 	and.w	r1, r3, #64	; 0x40
    317a:	ea50 0301 	orrs.w	r3, r0, r1
    317e:	d002      	beq.n	3186 <bt_recv+0x406>
		    BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
			if (IS_ENABLED(CONFIG_BLUETOOTH_PRIVACY)) {
				le_set_private_addr();
			}

			set_advertise_enable(true);
    3180:	4638      	mov	r0, r7
    3182:	f7ff f8b9 	bl	22f8 <set_advertise_enable>
		}

	}

	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    3186:	2103      	movs	r1, #3
    3188:	4628      	mov	r0, r5
    318a:	f001 f913 	bl	43b4 <bt_conn_set_state>
	/*
	 * it is possible that connection was disconnected directly from
	 * connected callback so we must check state before doing connection
	 * parameters update
	 */
	if (conn->state != BT_CONN_CONNECTED) {
    318e:	f895 3051 	ldrb.w	r3, [r5, #81]	; 0x51
    3192:	2b03      	cmp	r3, #3
    3194:	d137      	bne.n	3206 <bt_recv+0x486>
		goto done;
	}

	if ((evt->role == BT_HCI_ROLE_MASTER) ||
    3196:	78f3      	ldrb	r3, [r6, #3]
    3198:	b123      	cbz	r3, 31a4 <bt_recv+0x424>
	    BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features)) {
    319a:	4b8d      	ldr	r3, [pc, #564]	; (33d0 <bt_recv+0x650>)
	 */
	if (conn->state != BT_CONN_CONNECTED) {
		goto done;
	}

	if ((evt->role == BT_HCI_ROLE_MASTER) ||
    319c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
    31a0:	071f      	lsls	r7, r3, #28
    31a2:	d512      	bpl.n	31ca <bt_recv+0x44a>
static int hci_le_read_remote_features(struct bt_conn *conn)
{
	struct bt_hci_cp_le_read_remote_features *cp;
	struct net_buf *buf;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    31a4:	2102      	movs	r1, #2
    31a6:	f242 0016 	movw	r0, #8214	; 0x2016
    31aa:	f7fe ffcd 	bl	2148 <bt_hci_cmd_create>
				sizeof(*cp));
	if (!buf) {
    31ae:	4606      	mov	r6, r0
    31b0:	b158      	cbz	r0, 31ca <bt_recv+0x44a>
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));
    31b2:	2102      	movs	r1, #2
    31b4:	3008      	adds	r0, #8
    31b6:	f00e fd29 	bl	11c0c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    31ba:	882b      	ldrh	r3, [r5, #0]
    31bc:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    31be:	4631      	mov	r1, r6
    31c0:	f242 0016 	movw	r0, #8214	; 0x2016
    31c4:	f7ff fc6a 	bl	2a9c <bt_hci_cmd_send>
    31c8:	e01d      	b.n	3206 <bt_recv+0x486>
		if (!err) {
			goto done;
		}
	}

	if (BT_FEAT_LE_PHY_2M(bt_dev.le.features)) {
    31ca:	4b81      	ldr	r3, [pc, #516]	; (33d0 <bt_recv+0x650>)
    31cc:	f893 2071 	ldrb.w	r2, [r3, #113]	; 0x71
    31d0:	f012 0f01 	tst.w	r2, #1
    31d4:	461e      	mov	r6, r3
    31d6:	d005      	beq.n	31e4 <bt_recv+0x464>
		err = hci_le_set_phy(conn);
    31d8:	4628      	mov	r0, r5
    31da:	f7ff fc9b 	bl	2b14 <hci_le_set_phy.isra.26>
		if (!err) {
    31de:	b908      	cbnz	r0, 31e4 <bt_recv+0x464>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_or(ATOMIC_ELEM(target, bit), mask);
    31e0:	2180      	movs	r1, #128	; 0x80
    31e2:	e009      	b.n	31f8 <bt_recv+0x478>
			atomic_set_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE);
			goto done;
		}
	}

	if (BT_FEAT_LE_DLE(bt_dev.le.features)) {
    31e4:	f896 3070 	ldrb.w	r3, [r6, #112]	; 0x70
    31e8:	069e      	lsls	r6, r3, #26
    31ea:	d509      	bpl.n	3200 <bt_recv+0x480>
		err = hci_le_set_data_len(conn);
    31ec:	4628      	mov	r0, r5
    31ee:	f7ff fcb1 	bl	2b54 <hci_le_set_data_len.isra.27>
		if (!err) {
    31f2:	b928      	cbnz	r0, 3200 <bt_recv+0x480>
    31f4:	f44f 7180 	mov.w	r1, #256	; 0x100
    31f8:	1d28      	adds	r0, r5, #4
    31fa:	f7fe febf 	bl	1f7c <atomic_or>
    31fe:	e002      	b.n	3206 <bt_recv+0x486>
			atomic_set_bit(conn->flags, BT_CONN_AUTO_DATA_LEN);
			goto done;
		}
	}

	update_conn_param(conn);
    3200:	4628      	mov	r0, r5
    3202:	f7fe fef7 	bl	1ff4 <update_conn_param>

done:
	bt_conn_unref(conn);
    3206:	4628      	mov	r0, r5
    3208:	f001 fa09 	bl	461e <bt_conn_unref>
	bt_le_scan_update(false);
    320c:	2000      	movs	r0, #0
    320e:	f7ff f911 	bl	2434 <bt_le_scan_update>
    3212:	e63c      	b.n	2e8e <bt_recv+0x10e>
    3214:	68a5      	ldr	r5, [r4, #8]
{
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
	struct bt_conn *conn;
	u16_t handle;

	handle = sys_le16_to_cpu(evt->handle);
    3216:	f8b5 7001 	ldrh.w	r7, [r5, #1]

	BT_DBG("status %u, handle %u", evt->status, handle);

	conn = bt_conn_lookup_handle(handle);
    321a:	4638      	mov	r0, r7
    321c:	f001 f988 	bl	4530 <bt_conn_lookup_handle>
	if (!conn) {
    3220:	4606      	mov	r6, r0
    3222:	b930      	cbnz	r0, 3232 <bt_recv+0x4b2>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    3224:	4b64      	ldr	r3, [pc, #400]	; (33b8 <bt_recv+0x638>)
    3226:	9302      	str	r3, [sp, #8]
    3228:	4b64      	ldr	r3, [pc, #400]	; (33bc <bt_recv+0x63c>)
    322a:	9300      	str	r3, [sp, #0]
    322c:	9701      	str	r7, [sp, #4]
    322e:	4b69      	ldr	r3, [pc, #420]	; (33d4 <bt_recv+0x654>)
    3230:	e020      	b.n	3274 <bt_recv+0x4f4>
		return;
	}

	if (!evt->status) {
    3232:	782b      	ldrb	r3, [r5, #0]
    3234:	2b00      	cmp	r3, #0
    3236:	f040 81c6 	bne.w	35c6 <bt_recv+0x846>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
    323a:	f8b5 3003 	ldrh.w	r3, [r5, #3]
    323e:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
		conn->le.latency = sys_le16_to_cpu(evt->latency);
    3242:	f8b5 3005 	ldrh.w	r3, [r5, #5]
    3246:	f8a0 3070 	strh.w	r3, [r0, #112]	; 0x70
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    324a:	f8b5 3007 	ldrh.w	r3, [r5, #7]
    324e:	f8a0 3072 	strh.w	r3, [r0, #114]	; 0x72
		notify_le_param_updated(conn);
    3252:	f000 fe2d 	bl	3eb0 <notify_le_param_updated>
    3256:	e1b6      	b.n	35c6 <bt_recv+0x846>
    3258:	68a6      	ldr	r6, [r4, #8]
}

static void le_remote_feat_complete(struct net_buf *buf)
{
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
	u16_t handle = sys_le16_to_cpu(evt->handle);
    325a:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	struct bt_conn *conn;

	conn = bt_conn_lookup_handle(handle);
    325e:	4638      	mov	r0, r7
    3260:	f001 f966 	bl	4530 <bt_conn_lookup_handle>
	if (!conn) {
    3264:	4605      	mov	r5, r0
    3266:	b948      	cbnz	r0, 327c <bt_recv+0x4fc>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    3268:	4b53      	ldr	r3, [pc, #332]	; (33b8 <bt_recv+0x638>)
    326a:	9302      	str	r3, [sp, #8]
    326c:	4b53      	ldr	r3, [pc, #332]	; (33bc <bt_recv+0x63c>)
    326e:	9300      	str	r3, [sp, #0]
    3270:	4b59      	ldr	r3, [pc, #356]	; (33d8 <bt_recv+0x658>)
    3272:	9701      	str	r7, [sp, #4]
    3274:	4a53      	ldr	r2, [pc, #332]	; (33c4 <bt_recv+0x644>)
    3276:	4954      	ldr	r1, [pc, #336]	; (33c8 <bt_recv+0x648>)
    3278:	4858      	ldr	r0, [pc, #352]	; (33dc <bt_recv+0x65c>)
    327a:	e651      	b.n	2f20 <bt_recv+0x1a0>
		return;
	}

	if (!evt->status) {
    327c:	7833      	ldrb	r3, [r6, #0]
    327e:	b923      	cbnz	r3, 328a <bt_recv+0x50a>
		memcpy(conn->le.features, evt->features,
    3280:	2208      	movs	r2, #8
    3282:	1cf1      	adds	r1, r6, #3
    3284:	3074      	adds	r0, #116	; 0x74
    3286:	f7fd ff04 	bl	1092 <memcpy>
		       sizeof(conn->le.features));
	}

	if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) &&
    328a:	4b51      	ldr	r3, [pc, #324]	; (33d0 <bt_recv+0x650>)
    328c:	f893 2071 	ldrb.w	r2, [r3, #113]	; 0x71
    3290:	f012 0f01 	tst.w	r2, #1
    3294:	461e      	mov	r6, r3
    3296:	d009      	beq.n	32ac <bt_recv+0x52c>
    3298:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
    329c:	07d8      	lsls	r0, r3, #31
    329e:	d505      	bpl.n	32ac <bt_recv+0x52c>
	    BT_FEAT_LE_PHY_2M(conn->le.features)) {
		int err;

		err = hci_le_set_phy(conn);
    32a0:	4628      	mov	r0, r5
    32a2:	f7ff fc37 	bl	2b14 <hci_le_set_phy.isra.26>
		if (!err) {
    32a6:	b908      	cbnz	r0, 32ac <bt_recv+0x52c>
    32a8:	2180      	movs	r1, #128	; 0x80
    32aa:	e011      	b.n	32d0 <bt_recv+0x550>
			atomic_set_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE);
			goto done;
		}
	}

	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    32ac:	f896 3070 	ldrb.w	r3, [r6, #112]	; 0x70
    32b0:	0699      	lsls	r1, r3, #26
    32b2:	f140 80c2 	bpl.w	343a <bt_recv+0x6ba>
    32b6:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
    32ba:	069a      	lsls	r2, r3, #26
    32bc:	f140 80bd 	bpl.w	343a <bt_recv+0x6ba>
	    BT_FEAT_LE_DLE(conn->le.features)) {
		int err;

		err = hci_le_set_data_len(conn);
    32c0:	4628      	mov	r0, r5
    32c2:	f7ff fc47 	bl	2b54 <hci_le_set_data_len.isra.27>
		if (!err) {
    32c6:	2800      	cmp	r0, #0
    32c8:	f040 80b7 	bne.w	343a <bt_recv+0x6ba>
    32cc:	f44f 7180 	mov.w	r1, #256	; 0x100
    32d0:	1d28      	adds	r0, r5, #4
    32d2:	f7fe fe53 	bl	1f7c <atomic_or>
    32d6:	e641      	b.n	2f5c <bt_recv+0x1dc>
    32d8:	68a3      	ldr	r3, [r4, #8]
	struct bt_conn *conn;
	u16_t handle;
	int err;

	handle = sys_le16_to_cpu(evt->handle);
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    32da:	78d9      	ldrb	r1, [r3, #3]
    32dc:	789a      	ldrb	r2, [r3, #2]
	struct bt_le_conn_param param;
	struct bt_conn *conn;
	u16_t handle;
	int err;

	handle = sys_le16_to_cpu(evt->handle);
    32de:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    32e0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    32e4:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    32e8:	7959      	ldrb	r1, [r3, #5]
    32ea:	791a      	ldrb	r2, [r3, #4]
    32ec:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    32f0:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
	param.latency = sys_le16_to_cpu(evt->latency);
    32f4:	799a      	ldrb	r2, [r3, #6]
    32f6:	79d9      	ldrb	r1, [r3, #7]
    32f8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    32fc:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
	param.timeout = sys_le16_to_cpu(evt->timeout);
    3300:	7a1a      	ldrb	r2, [r3, #8]
    3302:	7a5b      	ldrb	r3, [r3, #9]
	struct bt_le_conn_param param;
	struct bt_conn *conn;
	u16_t handle;
	int err;

	handle = sys_le16_to_cpu(evt->handle);
    3304:	b2bd      	uxth	r5, r7
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
	param.latency = sys_le16_to_cpu(evt->latency);
	param.timeout = sys_le16_to_cpu(evt->timeout);
    3306:	ea42 2303 	orr.w	r3, r2, r3, lsl #8

	conn = bt_conn_lookup_handle(handle);
    330a:	4628      	mov	r0, r5

	handle = sys_le16_to_cpu(evt->handle);
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
	param.latency = sys_le16_to_cpu(evt->latency);
	param.timeout = sys_le16_to_cpu(evt->timeout);
    330c:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e

	conn = bt_conn_lookup_handle(handle);
    3310:	f001 f90e 	bl	4530 <bt_conn_lookup_handle>
	if (!conn) {
    3314:	4680      	mov	r8, r0
    3316:	2800      	cmp	r0, #0
    3318:	f47f ae22 	bne.w	2f60 <bt_recv+0x1e0>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    331c:	4b26      	ldr	r3, [pc, #152]	; (33b8 <bt_recv+0x638>)
    331e:	9302      	str	r3, [sp, #8]
    3320:	4b26      	ldr	r3, [pc, #152]	; (33bc <bt_recv+0x63c>)
    3322:	9300      	str	r3, [sp, #0]
    3324:	9501      	str	r5, [sp, #4]
    3326:	4b2e      	ldr	r3, [pc, #184]	; (33e0 <bt_recv+0x660>)
    3328:	4a26      	ldr	r2, [pc, #152]	; (33c4 <bt_recv+0x644>)
    332a:	4927      	ldr	r1, [pc, #156]	; (33c8 <bt_recv+0x648>)
    332c:	482b      	ldr	r0, [pc, #172]	; (33dc <bt_recv+0x65c>)
    332e:	f7fe f8a7 	bl	1480 <printk>
		return le_conn_param_neg_reply(handle,
    3332:	2102      	movs	r1, #2
    3334:	4628      	mov	r0, r5
    3336:	f7ff fc37 	bl	2ba8 <le_conn_param_neg_reply>
    333a:	e5a8      	b.n	2e8e <bt_recv+0x10e>
				   const struct bt_le_conn_param *param)
{
	struct bt_hci_cp_le_conn_param_req_reply *cp;
	struct net_buf *buf;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
    333c:	210e      	movs	r1, #14
    333e:	f242 0020 	movw	r0, #8224	; 0x2020
    3342:	f7fe ff01 	bl	2148 <bt_hci_cmd_create>
	if (!buf) {
    3346:	4606      	mov	r6, r0
    3348:	2800      	cmp	r0, #0
    334a:	f43f ae13 	beq.w	2f74 <bt_recv+0x1f4>
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));
    334e:	210e      	movs	r1, #14
    3350:	3008      	adds	r0, #8
    3352:	f00e fc5b 	bl	11c0c <net_buf_simple_add>
	memset(cp, 0, sizeof(*cp));
    3356:	220e      	movs	r2, #14
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
	if (!buf) {
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));
    3358:	4605      	mov	r5, r0
	memset(cp, 0, sizeof(*cp));
    335a:	2100      	movs	r1, #0
    335c:	f7fd fec5 	bl	10ea <memset>

	cp->handle = sys_cpu_to_le16(handle);
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    3360:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    3364:	806b      	strh	r3, [r5, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    3366:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
    336a:	80ab      	strh	r3, [r5, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
    336c:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    3370:	80eb      	strh	r3, [r5, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    3372:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
	}

	cp = net_buf_add(buf, sizeof(*cp));
	memset(cp, 0, sizeof(*cp));

	cp->handle = sys_cpu_to_le16(handle);
    3376:	802f      	strh	r7, [r5, #0]
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
	cp->latency = sys_cpu_to_le16(param->latency);
	cp->timeout = sys_cpu_to_le16(param->timeout);
    3378:	812b      	strh	r3, [r5, #8]

	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    337a:	4631      	mov	r1, r6
    337c:	f242 0020 	movw	r0, #8224	; 0x2020
    3380:	f7ff fb8c 	bl	2a9c <bt_hci_cmd_send>
    3384:	e5f6      	b.n	2f74 <bt_recv+0x1f4>
	struct bt_hci_evt_le_data_len_change *evt = (void *)buf->data;
	u16_t max_tx_octets = sys_le16_to_cpu(evt->max_tx_octets);
	u16_t max_rx_octets = sys_le16_to_cpu(evt->max_rx_octets);
	u16_t max_tx_time = sys_le16_to_cpu(evt->max_tx_time);
	u16_t max_rx_time = sys_le16_to_cpu(evt->max_rx_time);
	u16_t handle = sys_le16_to_cpu(evt->handle);
    3386:	68a3      	ldr	r3, [r4, #8]
    3388:	881e      	ldrh	r6, [r3, #0]
	struct bt_conn *conn;

	conn = bt_conn_lookup_handle(handle);
    338a:	4630      	mov	r0, r6
    338c:	f001 f8d0 	bl	4530 <bt_conn_lookup_handle>
	if (!conn) {
    3390:	4605      	mov	r5, r0
    3392:	b930      	cbnz	r0, 33a2 <bt_recv+0x622>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    3394:	4b08      	ldr	r3, [pc, #32]	; (33b8 <bt_recv+0x638>)
    3396:	9302      	str	r3, [sp, #8]
    3398:	4b08      	ldr	r3, [pc, #32]	; (33bc <bt_recv+0x63c>)
    339a:	9300      	str	r3, [sp, #0]
    339c:	9601      	str	r6, [sp, #4]
    339e:	4b11      	ldr	r3, [pc, #68]	; (33e4 <bt_recv+0x664>)
    33a0:	e768      	b.n	3274 <bt_recv+0x4f4>
static inline int atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    33a2:	f46f 7180 	mvn.w	r1, #256	; 0x100
    33a6:	3004      	adds	r0, #4
    33a8:	f7fe fe13 	bl	1fd2 <atomic_and>
	}

	BT_DBG("max. tx: %u (%uus), max. rx: %u (%uus)", max_tx_octets,
	       max_tx_time, max_rx_octets, max_rx_time);

	if (!atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_DATA_LEN)) {
    33ac:	05c3      	lsls	r3, r0, #23
    33ae:	f57f add5 	bpl.w	2f5c <bt_recv+0x1dc>
    33b2:	e042      	b.n	343a <bt_recv+0x6ba>
    33b4:	2000031c 	.word	0x2000031c
    33b8:	00013df4 	.word	0x00013df4
    33bc:	00013df9 	.word	0x00013df9
    33c0:	00015f81 	.word	0x00015f81
    33c4:	00013db4 	.word	0x00013db4
    33c8:	00013dbb 	.word	0x00013dbb
    33cc:	000141de 	.word	0x000141de
    33d0:	200002b0 	.word	0x200002b0
    33d4:	00015f4b 	.word	0x00015f4b
    33d8:	0001608b 	.word	0x0001608b
    33dc:	00014213 	.word	0x00014213
    33e0:	00016079 	.word	0x00016079
    33e4:	00015fbd 	.word	0x00015fbd
}

static void le_phy_update_complete(struct net_buf *buf)
{
	struct bt_hci_evt_le_phy_update_complete *evt = (void *)buf->data;
	u16_t handle = sys_le16_to_cpu(evt->handle);
    33e8:	68a3      	ldr	r3, [r4, #8]
    33ea:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	struct bt_conn *conn;

	conn = bt_conn_lookup_handle(handle);
    33ee:	4630      	mov	r0, r6
    33f0:	f001 f89e 	bl	4530 <bt_conn_lookup_handle>
	if (!conn) {
    33f4:	4605      	mov	r5, r0
    33f6:	b930      	cbnz	r0, 3406 <bt_recv+0x686>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    33f8:	4b8b      	ldr	r3, [pc, #556]	; (3628 <bt_recv+0x8a8>)
    33fa:	9302      	str	r3, [sp, #8]
    33fc:	4b8b      	ldr	r3, [pc, #556]	; (362c <bt_recv+0x8ac>)
    33fe:	9300      	str	r3, [sp, #0]
    3400:	9601      	str	r6, [sp, #4]
    3402:	4b8b      	ldr	r3, [pc, #556]	; (3630 <bt_recv+0x8b0>)
    3404:	e736      	b.n	3274 <bt_recv+0x4f4>
	}

	BT_DBG("PHY updated: status: 0x%x, tx: %u, rx: %u",
	       evt->status, evt->tx_phy, evt->rx_phy);

	if (!atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
    3406:	1d06      	adds	r6, r0, #4
    3408:	f06f 0180 	mvn.w	r1, #128	; 0x80
    340c:	4630      	mov	r0, r6
    340e:	f7fe fde0 	bl	1fd2 <atomic_and>
    3412:	0607      	lsls	r7, r0, #24
    3414:	f57f ada2 	bpl.w	2f5c <bt_recv+0x1dc>
		goto done;
	}

	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    3418:	4b86      	ldr	r3, [pc, #536]	; (3634 <bt_recv+0x8b4>)
    341a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
    341e:	0698      	lsls	r0, r3, #26
    3420:	d50b      	bpl.n	343a <bt_recv+0x6ba>
    3422:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
    3426:	0699      	lsls	r1, r3, #26
    3428:	d507      	bpl.n	343a <bt_recv+0x6ba>
	    BT_FEAT_LE_DLE(conn->le.features)) {
		int err;

		err = hci_le_set_data_len(conn);
    342a:	4628      	mov	r0, r5
    342c:	f7ff fb92 	bl	2b54 <hci_le_set_data_len.isra.27>
		if (!err) {
    3430:	b918      	cbnz	r0, 343a <bt_recv+0x6ba>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_or(ATOMIC_ELEM(target, bit), mask);
    3432:	f44f 7180 	mov.w	r1, #256	; 0x100
    3436:	4630      	mov	r0, r6
    3438:	e74b      	b.n	32d2 <bt_recv+0x552>
			atomic_set_bit(conn->flags, BT_CONN_AUTO_DATA_LEN);
			goto done;
		}
	}

	update_conn_param(conn);
    343a:	4628      	mov	r0, r5
    343c:	f7fe fdda 	bl	1ff4 <update_conn_param>
    3440:	e58c      	b.n	2f5c <bt_recv+0x1dc>
    3442:	68a5      	ldr	r5, [r4, #8]
	struct bt_hci_cp_le_ltk_req_neg_reply *cp;
	struct bt_conn *conn;
	u16_t handle;
	u8_t tk[16];

	handle = sys_le16_to_cpu(evt->handle);
    3444:	882f      	ldrh	r7, [r5, #0]

	BT_DBG("handle %u", handle);

	conn = bt_conn_lookup_handle(handle);
    3446:	4638      	mov	r0, r7
    3448:	f001 f872 	bl	4530 <bt_conn_lookup_handle>
	if (!conn) {
    344c:	4606      	mov	r6, r0
    344e:	b930      	cbnz	r0, 345e <bt_recv+0x6de>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    3450:	4b75      	ldr	r3, [pc, #468]	; (3628 <bt_recv+0x8a8>)
    3452:	9302      	str	r3, [sp, #8]
    3454:	4b75      	ldr	r3, [pc, #468]	; (362c <bt_recv+0x8ac>)
    3456:	9300      	str	r3, [sp, #0]
    3458:	9701      	str	r7, [sp, #4]
    345a:	4b77      	ldr	r3, [pc, #476]	; (3638 <bt_recv+0x8b8>)
    345c:	e70a      	b.n	3274 <bt_recv+0x4f4>
	 * if TK is present use it, that means pairing is in progress and
	 * we should use new TK for encryption
	 *
	 * Both legacy STK and LE SC LTK have rand and ediv equal to zero.
	 */
	if (evt->rand == 0 && evt->ediv == 0 && bt_smp_get_tk(conn, tk)) {
    345e:	f8d5 2002 	ldr.w	r2, [r5, #2]
    3462:	f8d5 3006 	ldr.w	r3, [r5, #6]
    3466:	4313      	orrs	r3, r2
    3468:	d123      	bne.n	34b2 <bt_recv+0x732>
    346a:	896b      	ldrh	r3, [r5, #10]
    346c:	bb0b      	cbnz	r3, 34b2 <bt_recv+0x732>
    346e:	a90a      	add	r1, sp, #40	; 0x28
    3470:	f004 fea8 	bl	81c4 <bt_smp_get_tk>
    3474:	b1e8      	cbz	r0, 34b2 <bt_recv+0x732>
		struct bt_hci_cp_le_ltk_req_reply *cp;

		buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
    3476:	2112      	movs	r1, #18
    3478:	f242 001a 	movw	r0, #8218	; 0x201a
    347c:	f7fe fe64 	bl	2148 <bt_hci_cmd_create>
					sizeof(*cp));
		if (!buf) {
    3480:	4607      	mov	r7, r0
    3482:	b950      	cbnz	r0, 349a <bt_recv+0x71a>
			BT_ERR("Out of command buffers");
    3484:	4b68      	ldr	r3, [pc, #416]	; (3628 <bt_recv+0x8a8>)
    3486:	9301      	str	r3, [sp, #4]
    3488:	4b68      	ldr	r3, [pc, #416]	; (362c <bt_recv+0x8ac>)
    348a:	9300      	str	r3, [sp, #0]
    348c:	4a6b      	ldr	r2, [pc, #428]	; (363c <bt_recv+0x8bc>)
    348e:	4b6a      	ldr	r3, [pc, #424]	; (3638 <bt_recv+0x8b8>)
    3490:	496b      	ldr	r1, [pc, #428]	; (3640 <bt_recv+0x8c0>)
    3492:	486c      	ldr	r0, [pc, #432]	; (3644 <bt_recv+0x8c4>)
    3494:	f7fd fff4 	bl	1480 <printk>
    3498:	e095      	b.n	35c6 <bt_recv+0x846>
			goto done;
		}

		cp = net_buf_add(buf, sizeof(*cp));
    349a:	2112      	movs	r1, #18
    349c:	3008      	adds	r0, #8
    349e:	f00e fbb5 	bl	11c0c <net_buf_simple_add>
		cp->handle = evt->handle;
    34a2:	882b      	ldrh	r3, [r5, #0]
    34a4:	f820 3b02 	strh.w	r3, [r0], #2
		memcpy(cp->ltk, tk, sizeof(cp->ltk));
    34a8:	2210      	movs	r2, #16
    34aa:	a90a      	add	r1, sp, #40	; 0x28
    34ac:	f7fd fdf1 	bl	1092 <memcpy>
    34b0:	e071      	b.n	3596 <bt_recv+0x816>

		bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
		goto done;
	}

	if (!conn->le.keys) {
    34b2:	6ff3      	ldr	r3, [r6, #124]	; 0x7c
    34b4:	2b00      	cmp	r3, #0
    34b6:	f040 819e 	bne.w	37f6 <bt_recv+0xa76>
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, &conn->le.dst);
    34ba:	f106 0754 	add.w	r7, r6, #84	; 0x54
    34be:	4639      	mov	r1, r7
    34c0:	2020      	movs	r0, #32
    34c2:	f004 fedf 	bl	8284 <bt_keys_find>
    34c6:	67f0      	str	r0, [r6, #124]	; 0x7c
		if (!conn->le.keys) {
    34c8:	2800      	cmp	r0, #0
    34ca:	f040 8194 	bne.w	37f6 <bt_recv+0xa76>
			conn->le.keys = bt_keys_find(BT_KEYS_SLAVE_LTK,
    34ce:	4639      	mov	r1, r7
    34d0:	2001      	movs	r0, #1
    34d2:	f004 fed7 	bl	8284 <bt_keys_find>
    34d6:	67f0      	str	r0, [r6, #124]	; 0x7c
						     &conn->le.dst);
		}
	}

	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256) &&
    34d8:	2800      	cmp	r0, #0
    34da:	d060      	beq.n	359e <bt_recv+0x81e>
    34dc:	8981      	ldrh	r1, [r0, #12]
    34de:	068a      	lsls	r2, r1, #26
    34e0:	d528      	bpl.n	3534 <bt_recv+0x7b4>
	    evt->rand == 0 && evt->ediv == 0) {
    34e2:	f8d5 2002 	ldr.w	r2, [r5, #2]
    34e6:	f8d5 3006 	ldr.w	r3, [r5, #6]
			conn->le.keys = bt_keys_find(BT_KEYS_SLAVE_LTK,
						     &conn->le.dst);
		}
	}

	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256) &&
    34ea:	4313      	orrs	r3, r2
    34ec:	d122      	bne.n	3534 <bt_recv+0x7b4>
	    evt->rand == 0 && evt->ediv == 0) {
    34ee:	f8b5 800a 	ldrh.w	r8, [r5, #10]
    34f2:	f1b8 0f00 	cmp.w	r8, #0
    34f6:	d11d      	bne.n	3534 <bt_recv+0x7b4>
		struct bt_hci_cp_le_ltk_req_reply *cp;

		buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
    34f8:	2112      	movs	r1, #18
    34fa:	f242 001a 	movw	r0, #8218	; 0x201a
    34fe:	f7fe fe23 	bl	2148 <bt_hci_cmd_create>
					sizeof(*cp));
		if (!buf) {
    3502:	4607      	mov	r7, r0
    3504:	2800      	cmp	r0, #0
    3506:	d0bd      	beq.n	3484 <bt_recv+0x704>
			BT_ERR("Out of command buffers");
			goto done;
		}

		cp = net_buf_add(buf, sizeof(*cp));
    3508:	2112      	movs	r1, #18
    350a:	3008      	adds	r0, #8
    350c:	f00e fb7e 	bl	11c0c <net_buf_simple_add>
		cp->handle = evt->handle;
    3510:	882b      	ldrh	r3, [r5, #0]
    3512:	4605      	mov	r5, r0
    3514:	f825 3b02 	strh.w	r3, [r5], #2

		/* use only enc_size bytes of key for encryption */
		memcpy(cp->ltk, conn->le.keys->ltk.val,
    3518:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
    351a:	4628      	mov	r0, r5
    351c:	79ca      	ldrb	r2, [r1, #7]
    351e:	311a      	adds	r1, #26
    3520:	f7fd fdb7 	bl	1092 <memcpy>
		       conn->le.keys->enc_size);
		if (conn->le.keys->enc_size < sizeof(cp->ltk)) {
    3524:	6ff3      	ldr	r3, [r6, #124]	; 0x7c
    3526:	79d8      	ldrb	r0, [r3, #7]
    3528:	280f      	cmp	r0, #15
    352a:	d834      	bhi.n	3596 <bt_recv+0x816>
			memset(cp->ltk + conn->le.keys->enc_size, 0,
    352c:	f1c0 0210 	rsb	r2, r0, #16
    3530:	4641      	mov	r1, r8
    3532:	e02d      	b.n	3590 <bt_recv+0x810>
		bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
		goto done;
	}

#if !defined(CONFIG_BLUETOOTH_SMP_SC_ONLY)
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
    3534:	07cb      	lsls	r3, r1, #31
    3536:	d532      	bpl.n	359e <bt_recv+0x81e>
    3538:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
	    conn->le.keys->slave_ltk.rand == evt->rand &&
    353c:	f8d5 9006 	ldr.w	r9, [r5, #6]
    3540:	f8d5 8002 	ldr.w	r8, [r5, #2]
		bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
		goto done;
	}

#if !defined(CONFIG_BLUETOOTH_SMP_SC_ONLY)
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
    3544:	454b      	cmp	r3, r9
    3546:	bf08      	it	eq
    3548:	4542      	cmpeq	r2, r8
    354a:	d128      	bne.n	359e <bt_recv+0x81e>
	    conn->le.keys->slave_ltk.rand == evt->rand &&
    354c:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
    3550:	896b      	ldrh	r3, [r5, #10]
    3552:	429a      	cmp	r2, r3
    3554:	d123      	bne.n	359e <bt_recv+0x81e>
	    conn->le.keys->slave_ltk.ediv == evt->ediv) {
		struct bt_hci_cp_le_ltk_req_reply *cp;
		struct net_buf *buf;

		buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
    3556:	2112      	movs	r1, #18
    3558:	f242 001a 	movw	r0, #8218	; 0x201a
    355c:	f7fe fdf4 	bl	2148 <bt_hci_cmd_create>
					sizeof(*cp));
		if (!buf) {
    3560:	4607      	mov	r7, r0
    3562:	2800      	cmp	r0, #0
    3564:	d08e      	beq.n	3484 <bt_recv+0x704>
			BT_ERR("Out of command buffers");
			goto done;
		}

		cp = net_buf_add(buf, sizeof(*cp));
    3566:	2112      	movs	r1, #18
    3568:	3008      	adds	r0, #8
    356a:	f00e fb4f 	bl	11c0c <net_buf_simple_add>
		cp->handle = evt->handle;
    356e:	882b      	ldrh	r3, [r5, #0]
    3570:	4605      	mov	r5, r0
    3572:	f825 3b02 	strh.w	r3, [r5], #2

		/* use only enc_size bytes of key for encryption */
		memcpy(cp->ltk, conn->le.keys->slave_ltk.val,
    3576:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
    3578:	4628      	mov	r0, r5
    357a:	79ca      	ldrb	r2, [r1, #7]
    357c:	3152      	adds	r1, #82	; 0x52
    357e:	f7fd fd88 	bl	1092 <memcpy>
		       conn->le.keys->enc_size);
		if (conn->le.keys->enc_size < sizeof(cp->ltk)) {
    3582:	6ff3      	ldr	r3, [r6, #124]	; 0x7c
    3584:	79d8      	ldrb	r0, [r3, #7]
    3586:	280f      	cmp	r0, #15
    3588:	d805      	bhi.n	3596 <bt_recv+0x816>
			memset(cp->ltk + conn->le.keys->enc_size, 0,
    358a:	f1c0 0210 	rsb	r2, r0, #16
    358e:	2100      	movs	r1, #0
    3590:	4428      	add	r0, r5
    3592:	f7fd fdaa 	bl	10ea <memset>
			       sizeof(cp->ltk) - conn->le.keys->enc_size);
		}

		bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
    3596:	4639      	mov	r1, r7
    3598:	f242 001a 	movw	r0, #8218	; 0x201a
    359c:	e011      	b.n	35c2 <bt_recv+0x842>
		goto done;
	}
#endif /* !CONFIG_BLUETOOTH_SMP_SC_ONLY */

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
    359e:	2102      	movs	r1, #2
    35a0:	f242 001b 	movw	r0, #8219	; 0x201b
    35a4:	f7fe fdd0 	bl	2148 <bt_hci_cmd_create>
	if (!buf) {
    35a8:	4607      	mov	r7, r0
    35aa:	2800      	cmp	r0, #0
    35ac:	f43f af6a 	beq.w	3484 <bt_recv+0x704>
		BT_ERR("Out of command buffers");
		goto done;
	}

	cp = net_buf_add(buf, sizeof(*cp));
    35b0:	2102      	movs	r1, #2
    35b2:	3008      	adds	r0, #8
    35b4:	f00e fb2a 	bl	11c0c <net_buf_simple_add>
	cp->handle = evt->handle;
    35b8:	882b      	ldrh	r3, [r5, #0]
    35ba:	8003      	strh	r3, [r0, #0]

	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    35bc:	4639      	mov	r1, r7
    35be:	f242 001b 	movw	r0, #8219	; 0x201b
    35c2:	f7ff fa6b 	bl	2a9c <bt_hci_cmd_send>

done:
	bt_conn_unref(conn);
    35c6:	4630      	mov	r0, r6
    35c8:	e4d5      	b.n	2f76 <bt_recv+0x1f6>
    35ca:	68a6      	ldr	r6, [r4, #8]
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    35cc:	481e      	ldr	r0, [pc, #120]	; (3648 <bt_recv+0x8c8>)
    35ce:	f06f 0110 	mvn.w	r1, #16
    35d2:	f7fe fcfe 	bl	1fd2 <atomic_and>

	BT_DBG("status: 0x%x", evt->status);

	atomic_clear_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY);

	if (!evt->status) {
    35d6:	7833      	ldrb	r3, [r6, #0]
    35d8:	b943      	cbnz	r3, 35ec <bt_recv+0x86c>
		memcpy(pub_key, evt->key, 64);
    35da:	1c71      	adds	r1, r6, #1
    35dc:	2240      	movs	r2, #64	; 0x40
    35de:	481b      	ldr	r0, [pc, #108]	; (364c <bt_recv+0x8cc>)
    35e0:	f7fd fd57 	bl	1092 <memcpy>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_or(ATOMIC_ELEM(target, bit), mask);
    35e4:	2108      	movs	r1, #8
    35e6:	4818      	ldr	r0, [pc, #96]	; (3648 <bt_recv+0x8c8>)
    35e8:	f7fe fcc8 	bl	1f7c <atomic_or>
		atomic_set_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY);
	}

	for (cb = pub_key_cb; cb; cb = cb->_next) {
    35ec:	4b18      	ldr	r3, [pc, #96]	; (3650 <bt_recv+0x8d0>)
    35ee:	681d      	ldr	r5, [r3, #0]
    35f0:	2d00      	cmp	r5, #0
    35f2:	f43f ac4c 	beq.w	2e8e <bt_recv+0x10e>
		cb->func(evt->status ? NULL : evt->key);
    35f6:	7832      	ldrb	r2, [r6, #0]
    35f8:	682b      	ldr	r3, [r5, #0]
    35fa:	b90a      	cbnz	r2, 3600 <bt_recv+0x880>
    35fc:	1c70      	adds	r0, r6, #1
    35fe:	e000      	b.n	3602 <bt_recv+0x882>
    3600:	2000      	movs	r0, #0
    3602:	4798      	blx	r3
	if (!evt->status) {
		memcpy(pub_key, evt->key, 64);
		atomic_set_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY);
	}

	for (cb = pub_key_cb; cb; cb = cb->_next) {
    3604:	686d      	ldr	r5, [r5, #4]
    3606:	e7f3      	b.n	35f0 <bt_recv+0x870>
{
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;

	BT_DBG("status: 0x%x", evt->status);

	if (dh_key_cb) {
    3608:	4b12      	ldr	r3, [pc, #72]	; (3654 <bt_recv+0x8d4>)
    360a:	68a0      	ldr	r0, [r4, #8]
    360c:	681a      	ldr	r2, [r3, #0]
    360e:	461d      	mov	r5, r3
    3610:	2a00      	cmp	r2, #0
    3612:	f43f ac3c 	beq.w	2e8e <bt_recv+0x10e>
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    3616:	7803      	ldrb	r3, [r0, #0]
    3618:	b90b      	cbnz	r3, 361e <bt_recv+0x89e>
    361a:	3001      	adds	r0, #1
    361c:	e000      	b.n	3620 <bt_recv+0x8a0>
    361e:	2000      	movs	r0, #0
    3620:	4790      	blx	r2
		dh_key_cb = NULL;
    3622:	2300      	movs	r3, #0
    3624:	602b      	str	r3, [r5, #0]
    3626:	e432      	b.n	2e8e <bt_recv+0x10e>
    3628:	00013df4 	.word	0x00013df4
    362c:	00013df9 	.word	0x00013df9
    3630:	00015fda 	.word	0x00015fda
    3634:	200002b0 	.word	0x200002b0
    3638:	00015f72 	.word	0x00015f72
    363c:	00013db4 	.word	0x00013db4
    3640:	00013dbb 	.word	0x00013dbb
    3644:	00014247 	.word	0x00014247
    3648:	2000031c 	.word	0x2000031c
    364c:	20000af8 	.word	0x20000af8
    3650:	20000b3c 	.word	0x20000b3c
    3654:	20000b40 	.word	0x20000b40
	return 0;
}

static void le_adv_report(struct net_buf *buf)
{
	u8_t num_reports = net_buf_pull_u8(buf);
    3658:	4638      	mov	r0, r7
    365a:	f00e fafe 	bl	11c5a <net_buf_simple_pull_u8>
		       bt_addr_le_str(&info->addr),
		       info->evt_type, info->length, rssi);

		addr = find_id_addr(&info->addr);

		if (scan_dev_found_cb) {
    365e:	f8df a1c4 	ldr.w	sl, [pc, #452]	; 3824 <bt_recv+0xaa4>
	return 0;
}

static void le_adv_report(struct net_buf *buf)
{
	u8_t num_reports = net_buf_pull_u8(buf);
    3662:	9007      	str	r0, [sp, #28]
	struct bt_hci_evt_le_advertising_info *info;

	BT_DBG("Adv number of reports %u",  num_reports);

	while (num_reports--) {
    3664:	9b07      	ldr	r3, [sp, #28]
    3666:	2b00      	cmp	r3, #0
    3668:	f43f ac11 	beq.w	2e8e <bt_recv+0x10e>
		const bt_addr_le_t *addr;
		s8_t rssi;

		info = (void *)buf->data;
    366c:	f8d4 8008 	ldr.w	r8, [r4, #8]
		net_buf_pull(buf, sizeof(*info));
    3670:	2109      	movs	r1, #9
    3672:	4638      	mov	r0, r7
    3674:	f00e fae9 	bl	11c4a <net_buf_simple_pull>

		rssi = info->data[info->length];
    3678:	f898 3008 	ldrb.w	r3, [r8, #8]

		BT_DBG("%s event %u, len %u, rssi %d dBm",
		       bt_addr_le_str(&info->addr),
		       info->evt_type, info->length, rssi);

		addr = find_id_addr(&info->addr);
    367c:	f108 0601 	add.w	r6, r8, #1
		s8_t rssi;

		info = (void *)buf->data;
		net_buf_pull(buf, sizeof(*info));

		rssi = info->data[info->length];
    3680:	4443      	add	r3, r8
static const bt_addr_le_t *find_id_addr(const bt_addr_le_t *addr)
{
	if (IS_ENABLED(CONFIG_BLUETOOTH_SMP)) {
		struct bt_keys *keys;

		keys = bt_keys_find_irk(addr);
    3682:	4630      	mov	r0, r6
		s8_t rssi;

		info = (void *)buf->data;
		net_buf_pull(buf, sizeof(*info));

		rssi = info->data[info->length];
    3684:	f893 9009 	ldrb.w	r9, [r3, #9]
static const bt_addr_le_t *find_id_addr(const bt_addr_le_t *addr)
{
	if (IS_ENABLED(CONFIG_BLUETOOTH_SMP)) {
		struct bt_keys *keys;

		keys = bt_keys_find_irk(addr);
    3688:	f004 fe1c 	bl	82c4 <bt_keys_find_irk>
		       bt_addr_le_str(&info->addr),
		       info->evt_type, info->length, rssi);

		addr = find_id_addr(&info->addr);

		if (scan_dev_found_cb) {
    368c:	f8da 3000 	ldr.w	r3, [sl]
		keys = bt_keys_find_irk(addr);
		if (keys) {
			BT_DBG("Identity %s matched RPA %s",
			       bt_addr_le_str(&keys->addr),
			       bt_addr_le_str(addr));
			return &keys->addr;
    3690:	2800      	cmp	r0, #0
    3692:	bf14      	ite	ne
    3694:	4683      	movne	fp, r0
    3696:	46b3      	moveq	fp, r6
		       bt_addr_le_str(&info->addr),
		       info->evt_type, info->length, rssi);

		addr = find_id_addr(&info->addr);

		if (scan_dev_found_cb) {
    3698:	b1db      	cbz	r3, 36d2 <bt_recv+0x952>
 *  @param state Storage for the state.
 */
static inline void net_buf_simple_save(struct net_buf_simple *buf,
				       struct net_buf_simple_state *state)
{
	state->offset = net_buf_simple_headroom(buf);
    369a:	4638      	mov	r0, r7
    369c:	f00e faed 	bl	11c7a <net_buf_simple_headroom>
	state->len = buf->len;
    36a0:	89a3      	ldrh	r3, [r4, #12]
    36a2:	9309      	str	r3, [sp, #36]	; 0x24
			struct net_buf_simple_state state;

			net_buf_simple_save(&buf->b, &state);

			buf->len = info->length;
    36a4:	f898 3008 	ldrb.w	r3, [r8, #8]
    36a8:	81a3      	strh	r3, [r4, #12]
 *  @param state Storage for the state.
 */
static inline void net_buf_simple_save(struct net_buf_simple *buf,
				       struct net_buf_simple_state *state)
{
	state->offset = net_buf_simple_headroom(buf);
    36aa:	9008      	str	r0, [sp, #32]
			scan_dev_found_cb(addr, rssi, info->evt_type, &buf->b);
    36ac:	463b      	mov	r3, r7
    36ae:	f898 2000 	ldrb.w	r2, [r8]
    36b2:	f8da 5000 	ldr.w	r5, [sl]
    36b6:	fa4f f189 	sxtb.w	r1, r9
    36ba:	4658      	mov	r0, fp
    36bc:	47a8      	blx	r5
 *  @param state Stored state.
 */
static inline void net_buf_simple_restore(struct net_buf_simple *buf,
					  struct net_buf_simple_state *state)
{
	buf->data = buf->__buf + state->offset;
    36be:	f8bd 2020 	ldrh.w	r2, [sp, #32]
    36c2:	f107 0308 	add.w	r3, r7, #8
    36c6:	fa13 f382 	uxtah	r3, r3, r2
    36ca:	60a3      	str	r3, [r4, #8]
	buf->len = state->len;
    36cc:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    36d0:	81a3      	strh	r3, [r4, #12]
			       const bt_addr_le_t *addr, u8_t evtype)
{
	struct bt_conn *conn;

	/* No connections are allowed during explicit scanning */
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    36d2:	2108      	movs	r1, #8
    36d4:	484a      	ldr	r0, [pc, #296]	; (3800 <bt_recv+0xa80>)

			net_buf_simple_restore(&buf->b, &state);
		}

#if defined(CONFIG_BLUETOOTH_CONN)
		check_pending_conn(addr, &info->addr, info->evt_type);
    36d6:	f898 5000 	ldrb.w	r5, [r8]
			       const bt_addr_le_t *addr, u8_t evtype)
{
	struct bt_conn *conn;

	/* No connections are allowed during explicit scanning */
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    36da:	f7fe fc60 	bl	1f9e <atomic_test_bit>
    36de:	2800      	cmp	r0, #0
    36e0:	d16d      	bne.n	37be <bt_recv+0xa3e>
		return;
	}

	/* Return if event is not connectable */
	if (evtype != BT_LE_ADV_IND && evtype != BT_LE_ADV_DIRECT_IND) {
    36e2:	2d01      	cmp	r5, #1
    36e4:	d86b      	bhi.n	37be <bt_recv+0xa3e>
		return;
	}

	conn = bt_conn_lookup_state_le(id_addr, BT_CONN_CONNECT_SCAN);
    36e6:	2101      	movs	r1, #1
    36e8:	4658      	mov	r0, fp
    36ea:	f000 ff6f 	bl	45cc <bt_conn_lookup_state_le>
	if (!conn) {
    36ee:	4605      	mov	r5, r0
    36f0:	2800      	cmp	r0, #0
    36f2:	d064      	beq.n	37be <bt_recv+0xa3e>
		return;
	}

	if (bt_hci_stop_scanning()) {
    36f4:	f7fe fdc4 	bl	2280 <bt_hci_stop_scanning>
    36f8:	2800      	cmp	r0, #0
    36fa:	d153      	bne.n	37a4 <bt_recv+0xa24>
	} else {
		/* If Static Random address is used as Identity address we
		 * need to restore it before creating connection. Otherwise
		 * NRPA used for active scan could be used for connection.
		 */
		if (atomic_test_bit(bt_dev.flags, BT_DEV_ID_STATIC_RANDOM)) {
    36fc:	2102      	movs	r1, #2
    36fe:	4840      	ldr	r0, [pc, #256]	; (3800 <bt_recv+0xa80>)
    3700:	f7fe fc4d 	bl	1f9e <atomic_test_bit>
    3704:	b110      	cbz	r0, 370c <bt_recv+0x98c>
			set_random_address(&bt_dev.id_addr.a);
    3706:	483f      	ldr	r0, [pc, #252]	; (3804 <bt_recv+0xa84>)
    3708:	f7fe fd7a 	bl	2200 <set_random_address>
    370c:	2207      	movs	r2, #7
    370e:	493e      	ldr	r1, [pc, #248]	; (3808 <bt_recv+0xa88>)
    3710:	f105 005b 	add.w	r0, r5, #91	; 0x5b
		}

		bt_addr_le_copy(&conn->le.init_addr, &bt_dev.id_addr);
	}

	bt_addr_le_copy(&conn->le.resp_addr, addr);
    3714:	f105 0b62 	add.w	fp, r5, #98	; 0x62
    3718:	f7fd fcbb 	bl	1092 <memcpy>
    371c:	2207      	movs	r2, #7
    371e:	4631      	mov	r1, r6
    3720:	4658      	mov	r0, fp
    3722:	f7fd fcb6 	bl	1092 <memcpy>
static int hci_le_create_conn(const struct bt_conn *conn)
{
	struct net_buf *buf;
	struct bt_hci_cp_le_create_conn *cp;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
    3726:	2119      	movs	r1, #25
    3728:	f242 000d 	movw	r0, #8205	; 0x200d
    372c:	f7fe fd0c 	bl	2148 <bt_hci_cmd_create>
	if (!buf) {
    3730:	4681      	mov	r9, r0
    3732:	b3b8      	cbz	r0, 37a4 <bt_recv+0xa24>
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));
    3734:	2119      	movs	r1, #25
    3736:	3008      	adds	r0, #8
    3738:	f00e fa68 	bl	11c0c <net_buf_simple_add>
	memset(cp, 0, sizeof(*cp));
    373c:	2219      	movs	r2, #25
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
	if (!buf) {
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));
    373e:	4606      	mov	r6, r0
	memset(cp, 0, sizeof(*cp));
    3740:	2100      	movs	r1, #0
    3742:	f7fd fcd2 	bl	10ea <memset>

	/* Interval == window for continuous scanning */
	cp->scan_interval = sys_cpu_to_le16(BT_GAP_SCAN_FAST_INTERVAL);
    3746:	2300      	movs	r3, #0
    3748:	2260      	movs	r2, #96	; 0x60
    374a:	7032      	strb	r2, [r6, #0]
    374c:	7073      	strb	r3, [r6, #1]
	cp->scan_window = cp->scan_interval;
    374e:	70b2      	strb	r2, [r6, #2]
    3750:	70f3      	strb	r3, [r6, #3]
    3752:	2207      	movs	r2, #7
    3754:	4659      	mov	r1, fp
    3756:	1d70      	adds	r0, r6, #5
    3758:	9308      	str	r3, [sp, #32]
    375a:	f7fd fc9a 	bl	1092 <memcpy>

	bt_addr_le_copy(&cp->peer_addr, &conn->le.resp_addr);
	cp->own_addr_type = conn->le.init_addr.type;
    375e:	f895 205b 	ldrb.w	r2, [r5, #91]	; 0x5b
    3762:	7332      	strb	r2, [r6, #12]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
    3764:	f8b5 206c 	ldrh.w	r2, [r5, #108]	; 0x6c
    3768:	f8a6 200d 	strh.w	r2, [r6, #13]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
    376c:	f8b5 206e 	ldrh.w	r2, [r5, #110]	; 0x6e
    3770:	f8a6 200f 	strh.w	r2, [r6, #15]
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
    3774:	f8b5 2070 	ldrh.w	r2, [r5, #112]	; 0x70
    3778:	f8a6 2011 	strh.w	r2, [r6, #17]
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
    377c:	9b08      	ldr	r3, [sp, #32]
	bt_addr_le_copy(&cp->peer_addr, &conn->le.resp_addr);
	cp->own_addr_type = conn->le.init_addr.type;
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
    377e:	f8b5 2072 	ldrh.w	r2, [r5, #114]	; 0x72
    3782:	f8a6 2013 	strh.w	r2, [r6, #19]

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
    3786:	4649      	mov	r1, r9
    3788:	461a      	mov	r2, r3
    378a:	f242 000d 	movw	r0, #8205	; 0x200d
    378e:	f7fe fcff 	bl	2190 <bt_hci_cmd_send_sync>
		bt_addr_le_copy(&conn->le.init_addr, &bt_dev.id_addr);
	}

	bt_addr_le_copy(&conn->le.resp_addr, addr);

	if (hci_le_create_conn(conn)) {
    3792:	b938      	cbnz	r0, 37a4 <bt_recv+0xa24>
		goto failed;
	}

	bt_conn_set_state(conn, BT_CONN_CONNECT);
    3794:	4628      	mov	r0, r5
    3796:	2102      	movs	r1, #2
    3798:	f000 fe0c 	bl	43b4 <bt_conn_set_state>
	bt_conn_unref(conn);
    379c:	4628      	mov	r0, r5
    379e:	f000 ff3e 	bl	461e <bt_conn_unref>
    37a2:	e00c      	b.n	37be <bt_recv+0xa3e>
	return;

failed:
	conn->err = BT_HCI_ERR_UNSPECIFIED;
    37a4:	231f      	movs	r3, #31
    37a6:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    37aa:	2100      	movs	r1, #0
    37ac:	4628      	mov	r0, r5
    37ae:	f000 fe01 	bl	43b4 <bt_conn_set_state>
	bt_conn_unref(conn);
    37b2:	4628      	mov	r0, r5
    37b4:	f000 ff33 	bl	461e <bt_conn_unref>
	bt_le_scan_update(false);
    37b8:	2000      	movs	r0, #0
    37ba:	f7fe fe3b 	bl	2434 <bt_le_scan_update>
#endif /* CONFIG_BLUETOOTH_CONN */

		/* Get next report iteration by moving pointer to right offset
		 * in buf according to spec 4.2, Vol 2, Part E, 7.7.65.2.
		 */
		net_buf_pull(buf, info->length + sizeof(rssi));
    37be:	f898 1008 	ldrb.w	r1, [r8, #8]
    37c2:	4638      	mov	r0, r7
    37c4:	3101      	adds	r1, #1
    37c6:	f00e fa40 	bl	11c4a <net_buf_simple_pull>
    37ca:	9b07      	ldr	r3, [sp, #28]
    37cc:	3b01      	subs	r3, #1
    37ce:	b2db      	uxtb	r3, r3
    37d0:	9307      	str	r3, [sp, #28]
    37d2:	e747      	b.n	3664 <bt_recv+0x8e4>
		break;
	case BT_HCI_EVT_LE_ADVERTISING_REPORT:
		le_adv_report(buf);
		break;
	default:
		BT_WARN("Unhandled LE event 0x%02x len %u: %s",
    37d4:	89a6      	ldrh	r6, [r4, #12]
    37d6:	68a0      	ldr	r0, [r4, #8]
    37d8:	4631      	mov	r1, r6
    37da:	f7fe fa87 	bl	1cec <bt_hex>
    37de:	4b0b      	ldr	r3, [pc, #44]	; (380c <bt_recv+0xa8c>)
    37e0:	9304      	str	r3, [sp, #16]
    37e2:	4b0b      	ldr	r3, [pc, #44]	; (3810 <bt_recv+0xa90>)
    37e4:	9003      	str	r0, [sp, #12]
    37e6:	9300      	str	r3, [sp, #0]
    37e8:	9602      	str	r6, [sp, #8]
    37ea:	9501      	str	r5, [sp, #4]
    37ec:	4b09      	ldr	r3, [pc, #36]	; (3814 <bt_recv+0xa94>)
    37ee:	4a0a      	ldr	r2, [pc, #40]	; (3818 <bt_recv+0xa98>)
    37f0:	490a      	ldr	r1, [pc, #40]	; (381c <bt_recv+0xa9c>)
    37f2:	480b      	ldr	r0, [pc, #44]	; (3820 <bt_recv+0xaa0>)
    37f4:	e40a      	b.n	300c <bt_recv+0x28c>
			conn->le.keys = bt_keys_find(BT_KEYS_SLAVE_LTK,
						     &conn->le.dst);
		}
	}

	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256) &&
    37f6:	6ff0      	ldr	r0, [r6, #124]	; 0x7c
    37f8:	e670      	b.n	34dc <bt_recv+0x75c>
	default:
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
		net_buf_unref(buf);
		return -EINVAL;
	}
}
    37fa:	b00f      	add	sp, #60	; 0x3c
    37fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3800:	2000031c 	.word	0x2000031c
    3804:	200002b1 	.word	0x200002b1
    3808:	200002b0 	.word	0x200002b0
    380c:	00013df4 	.word	0x00013df4
    3810:	00013e3f 	.word	0x00013e3f
    3814:	000160e4 	.word	0x000160e4
    3818:	00013e01 	.word	0x00013e01
    381c:	00013dbb 	.word	0x00013dbb
    3820:	0001426e 	.word	0x0001426e
    3824:	20000b38 	.word	0x20000b38

00003828 <bt_recv_prio>:

int bt_recv_prio(struct net_buf *buf)
{
    3828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    382c:	b087      	sub	sp, #28
    382e:	4604      	mov	r4, r0
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    3830:	6886      	ldr	r6, [r0, #8]
    3832:	f7fe fb80 	bl	1f36 <net_buf_user_data>

	bt_monitor_send(bt_monitor_opcode(buf), buf->data, buf->len);

	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    3836:	7803      	ldrb	r3, [r0, #0]
    3838:	2b01      	cmp	r3, #1
    383a:	d008      	beq.n	384e <bt_recv_prio+0x26>
    383c:	4b69      	ldr	r3, [pc, #420]	; (39e4 <bt_recv_prio+0x1bc>)
    383e:	9301      	str	r3, [sp, #4]
    3840:	4b69      	ldr	r3, [pc, #420]	; (39e8 <bt_recv_prio+0x1c0>)
    3842:	9300      	str	r3, [sp, #0]
    3844:	4a69      	ldr	r2, [pc, #420]	; (39ec <bt_recv_prio+0x1c4>)
    3846:	4b6a      	ldr	r3, [pc, #424]	; (39f0 <bt_recv_prio+0x1c8>)
    3848:	496a      	ldr	r1, [pc, #424]	; (39f4 <bt_recv_prio+0x1cc>)
    384a:	486b      	ldr	r0, [pc, #428]	; (39f8 <bt_recv_prio+0x1d0>)
    384c:	e00a      	b.n	3864 <bt_recv_prio+0x3c>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    384e:	89a2      	ldrh	r2, [r4, #12]
    3850:	2a01      	cmp	r2, #1
    3852:	d80f      	bhi.n	3874 <bt_recv_prio+0x4c>
    3854:	4b63      	ldr	r3, [pc, #396]	; (39e4 <bt_recv_prio+0x1bc>)
    3856:	9301      	str	r3, [sp, #4]
    3858:	4b63      	ldr	r3, [pc, #396]	; (39e8 <bt_recv_prio+0x1c0>)
    385a:	9300      	str	r3, [sp, #0]
    385c:	4a63      	ldr	r2, [pc, #396]	; (39ec <bt_recv_prio+0x1c4>)
    385e:	4b64      	ldr	r3, [pc, #400]	; (39f0 <bt_recv_prio+0x1c8>)
    3860:	4964      	ldr	r1, [pc, #400]	; (39f4 <bt_recv_prio+0x1cc>)
    3862:	4866      	ldr	r0, [pc, #408]	; (39fc <bt_recv_prio+0x1d4>)
    3864:	f7fd fe0c 	bl	1480 <printk>
    3868:	4040      	eors	r0, r0
    386a:	f380 8811 	msr	BASEPRI, r0
    386e:	f04f 0004 	mov.w	r0, #4
    3872:	df02      	svc	2
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    3874:	7832      	ldrb	r2, [r6, #0]
    3876:	2a13      	cmp	r2, #19
    3878:	d803      	bhi.n	3882 <bt_recv_prio+0x5a>
    387a:	4093      	lsls	r3, r2
    387c:	f413 2f0c 	tst.w	r3, #573440	; 0x8c000
    3880:	d108      	bne.n	3894 <bt_recv_prio+0x6c>
    3882:	4b58      	ldr	r3, [pc, #352]	; (39e4 <bt_recv_prio+0x1bc>)
    3884:	9301      	str	r3, [sp, #4]
    3886:	4b58      	ldr	r3, [pc, #352]	; (39e8 <bt_recv_prio+0x1c0>)
    3888:	9300      	str	r3, [sp, #0]
    388a:	4a58      	ldr	r2, [pc, #352]	; (39ec <bt_recv_prio+0x1c4>)
    388c:	4b58      	ldr	r3, [pc, #352]	; (39f0 <bt_recv_prio+0x1c8>)
    388e:	4959      	ldr	r1, [pc, #356]	; (39f4 <bt_recv_prio+0x1cc>)
    3890:	485b      	ldr	r0, [pc, #364]	; (3a00 <bt_recv_prio+0x1d8>)
    3892:	e7e7      	b.n	3864 <bt_recv_prio+0x3c>

	net_buf_pull(buf, sizeof(*hdr));
    3894:	f104 0508 	add.w	r5, r4, #8
    3898:	2102      	movs	r1, #2
    389a:	4628      	mov	r0, r5
    389c:	f00e f9d5 	bl	11c4a <net_buf_simple_pull>

	switch (hdr->evt) {
    38a0:	7833      	ldrb	r3, [r6, #0]
    38a2:	2b0f      	cmp	r3, #15
    38a4:	d113      	bne.n	38ce <bt_recv_prio+0xa6>
	}
}

static void hci_cmd_status(struct net_buf *buf)
{
	struct bt_hci_evt_cmd_status *evt = (void *)buf->data;
    38a6:	68a6      	ldr	r6, [r4, #8]
	u16_t opcode = sys_le16_to_cpu(evt->opcode);
    38a8:	f8b6 8002 	ldrh.w	r8, [r6, #2]
	u8_t ncmd = evt->ncmd;
    38ac:	7877      	ldrb	r7, [r6, #1]

	BT_DBG("opcode 0x%04x", opcode);

	net_buf_pull(buf, sizeof(*evt));
    38ae:	2104      	movs	r1, #4
    38b0:	4628      	mov	r0, r5
    38b2:	f00e f9ca 	bl	11c4a <net_buf_simple_pull>

	hci_cmd_done(opcode, evt->status, buf);
    38b6:	4622      	mov	r2, r4
    38b8:	7831      	ldrb	r1, [r6, #0]
    38ba:	4640      	mov	r0, r8
    38bc:	f7fe fbe2 	bl	2084 <hci_cmd_done>

	/* Allow next command to be sent */
	if (ncmd) {
    38c0:	2f00      	cmp	r7, #0
    38c2:	f000 8087 	beq.w	39d4 <bt_recv_prio+0x1ac>

	hci_cmd_done(opcode, status, buf);

	/* Allow next command to be sent */
	if (ncmd) {
		k_sem_give(&bt_dev.ncmd_sem);
    38c6:	484f      	ldr	r0, [pc, #316]	; (3a04 <bt_recv_prio+0x1dc>)
    38c8:	f00f fc92 	bl	131f0 <k_sem_give>
    38cc:	e082      	b.n	39d4 <bt_recv_prio+0x1ac>
	BT_ASSERT(buf->len >= sizeof(*hdr));
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));

	net_buf_pull(buf, sizeof(*hdr));

	switch (hdr->evt) {
    38ce:	2b13      	cmp	r3, #19
    38d0:	d162      	bne.n	3998 <bt_recv_prio+0x170>
    38d2:	f8d4 8008 	ldr.w	r8, [r4, #8]
			key = irq_lock();
			node = sys_slist_get(&conn->tx_pending);
			irq_unlock(key);

			if (!node) {
				BT_ERR("packets count mismatch");
    38d6:	f8df 910c 	ldr.w	r9, [pc, #268]	; 39e4 <bt_recv_prio+0x1bc>
}

static void hci_num_completed_packets(struct net_buf *buf)
{
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
	u16_t i, num_handles = sys_le16_to_cpu(evt->num_handles);
    38da:	f898 b000 	ldrb.w	fp, [r8]
			key = irq_lock();
			node = sys_slist_get(&conn->tx_pending);
			irq_unlock(key);

			if (!node) {
				BT_ERR("packets count mismatch");
    38de:	f8df a108 	ldr.w	sl, [pc, #264]	; 39e8 <bt_recv_prio+0x1c0>
}

static void hci_num_completed_packets(struct net_buf *buf)
{
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
	u16_t i, num_handles = sys_le16_to_cpu(evt->num_handles);
    38e2:	2700      	movs	r7, #0

	BT_DBG("num_handles %u", num_handles);

	for (i = 0; i < num_handles; i++) {
    38e4:	b2bb      	uxth	r3, r7
    38e6:	455b      	cmp	r3, fp
    38e8:	d274      	bcs.n	39d4 <bt_recv_prio+0x1ac>
    38ea:	eb08 0287 	add.w	r2, r8, r7, lsl #2
		u16_t handle, count;
		struct bt_conn *conn;
		unsigned int key;

		handle = sys_le16_to_cpu(evt->h[i].handle);
    38ee:	f8b2 3001 	ldrh.w	r3, [r2, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    38f2:	f8b2 2003 	ldrh.w	r2, [r2, #3]
    38f6:	9205      	str	r2, [sp, #20]
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M)
	unsigned int tmp;

	__asm__ volatile(
    38f8:	f04f 0120 	mov.w	r1, #32
    38fc:	f3ef 8611 	mrs	r6, BASEPRI
    3900:	f381 8811 	msr	BASEPRI, r1

		BT_DBG("handle %u count %u", handle, count);

		key = irq_lock();

		conn = bt_conn_lookup_handle(handle);
    3904:	4618      	mov	r0, r3
    3906:	9304      	str	r3, [sp, #16]
    3908:	f000 fe12 	bl	4530 <bt_conn_lookup_handle>
		if (!conn) {
    390c:	9b04      	ldr	r3, [sp, #16]
    390e:	9a05      	ldr	r2, [sp, #20]
    3910:	4605      	mov	r5, r0
    3912:	b968      	cbnz	r0, 3930 <bt_recv_prio+0x108>
			BT_ERR("No connection for handle %u", handle);
    3914:	9301      	str	r3, [sp, #4]
    3916:	f8cd 9008 	str.w	r9, [sp, #8]
    391a:	f8cd a000 	str.w	sl, [sp]
    391e:	4b3a      	ldr	r3, [pc, #232]	; (3a08 <bt_recv_prio+0x1e0>)
    3920:	4a32      	ldr	r2, [pc, #200]	; (39ec <bt_recv_prio+0x1c4>)
    3922:	4934      	ldr	r1, [pc, #208]	; (39f4 <bt_recv_prio+0x1cc>)
    3924:	4839      	ldr	r0, [pc, #228]	; (3a0c <bt_recv_prio+0x1e4>)
    3926:	f7fd fdab 	bl	1480 <printk>
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    392a:	f386 8811 	msr	BASEPRI, r6
    392e:	e031      	b.n	3994 <bt_recv_prio+0x16c>
    3930:	f386 8811 	msr	BASEPRI, r6
    3934:	4616      	mov	r6, r2
			if (!node) {
				BT_ERR("packets count mismatch");
				break;
			}

			k_fifo_put(&conn->tx_notify, node);
    3936:	f100 031c 	add.w	r3, r0, #28
			continue;
		}

		irq_unlock(key);

		while (count--) {
    393a:	b346      	cbz	r6, 398e <bt_recv_prio+0x166>
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M)
	unsigned int tmp;

	__asm__ volatile(
    393c:	f04f 0220 	mov.w	r2, #32
    3940:	f3ef 8e11 	mrs	lr, BASEPRI
    3944:	f382 8811 	msr	BASEPRI, r2
    3948:	6969      	ldr	r1, [r5, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list)
{
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
    394a:	b129      	cbz	r1, 3958 <bt_recv_prio+0x130>
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list)
{
	sys_snode_t *node = list->head;

	list->head = node->next;
	if (list->tail == node) {
    394c:	69aa      	ldr	r2, [r5, #24]
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list)
{
	sys_snode_t *node = list->head;

	list->head = node->next;
    394e:	6808      	ldr	r0, [r1, #0]
    3950:	6168      	str	r0, [r5, #20]
	if (list->tail == node) {
    3952:	4291      	cmp	r1, r2
		list->tail = list->head;
    3954:	bf08      	it	eq
    3956:	61a8      	streq	r0, [r5, #24]
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    3958:	f38e 8811 	msr	BASEPRI, lr
    395c:	3e01      	subs	r6, #1
    395e:	b2b6      	uxth	r6, r6

			key = irq_lock();
			node = sys_slist_get(&conn->tx_pending);
			irq_unlock(key);

			if (!node) {
    3960:	b951      	cbnz	r1, 3978 <bt_recv_prio+0x150>
				BT_ERR("packets count mismatch");
    3962:	f8cd 9004 	str.w	r9, [sp, #4]
    3966:	f8cd a000 	str.w	sl, [sp]
    396a:	4b27      	ldr	r3, [pc, #156]	; (3a08 <bt_recv_prio+0x1e0>)
    396c:	4a1f      	ldr	r2, [pc, #124]	; (39ec <bt_recv_prio+0x1c4>)
    396e:	4921      	ldr	r1, [pc, #132]	; (39f4 <bt_recv_prio+0x1cc>)
    3970:	4827      	ldr	r0, [pc, #156]	; (3a10 <bt_recv_prio+0x1e8>)
    3972:	f7fd fd85 	bl	1480 <printk>
    3976:	e00a      	b.n	398e <bt_recv_prio+0x166>
				break;
			}

			k_fifo_put(&conn->tx_notify, node);
    3978:	4618      	mov	r0, r3
    397a:	9304      	str	r3, [sp, #16]
    397c:	f00f f9ca 	bl	12d14 <k_queue_append>
			k_sem_give(bt_conn_get_pkts(conn));
    3980:	4628      	mov	r0, r5
    3982:	f000 fa91 	bl	3ea8 <bt_conn_get_pkts>
    3986:	f00f fc33 	bl	131f0 <k_sem_give>
    398a:	9b04      	ldr	r3, [sp, #16]
    398c:	e7d5      	b.n	393a <bt_recv_prio+0x112>
		}

		bt_conn_unref(conn);
    398e:	4628      	mov	r0, r5
    3990:	f000 fe45 	bl	461e <bt_conn_unref>
    3994:	3701      	adds	r7, #1
    3996:	e7a5      	b.n	38e4 <bt_recv_prio+0xbc>
	BT_ASSERT(buf->len >= sizeof(*hdr));
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));

	net_buf_pull(buf, sizeof(*hdr));

	switch (hdr->evt) {
    3998:	2b0e      	cmp	r3, #14
    399a:	d10f      	bne.n	39bc <bt_recv_prio+0x194>
	}
}

static void hci_cmd_complete(struct net_buf *buf)
{
	struct bt_hci_evt_cmd_complete *evt = (void *)buf->data;
    399c:	68a3      	ldr	r3, [r4, #8]
	u16_t opcode = sys_le16_to_cpu(evt->opcode);
	u8_t status, ncmd = evt->ncmd;

	BT_DBG("opcode 0x%04x", opcode);

	net_buf_pull(buf, sizeof(*evt));
    399e:	2103      	movs	r1, #3
    39a0:	4628      	mov	r0, r5
}

static void hci_cmd_complete(struct net_buf *buf)
{
	struct bt_hci_evt_cmd_complete *evt = (void *)buf->data;
	u16_t opcode = sys_le16_to_cpu(evt->opcode);
    39a2:	f8b3 7001 	ldrh.w	r7, [r3, #1]
	u8_t status, ncmd = evt->ncmd;
    39a6:	781e      	ldrb	r6, [r3, #0]

	BT_DBG("opcode 0x%04x", opcode);

	net_buf_pull(buf, sizeof(*evt));
    39a8:	f00e f94f 	bl	11c4a <net_buf_simple_pull>

	/* All command return parameters have a 1-byte status in the
	 * beginning, so we can safely make this generalization.
	 */
	status = buf->data[0];
    39ac:	68a3      	ldr	r3, [r4, #8]

	hci_cmd_done(opcode, status, buf);
    39ae:	4622      	mov	r2, r4
    39b0:	7819      	ldrb	r1, [r3, #0]
    39b2:	4638      	mov	r0, r7
    39b4:	f7fe fb66 	bl	2084 <hci_cmd_done>

	/* Allow next command to be sent */
	if (ncmd) {
    39b8:	b166      	cbz	r6, 39d4 <bt_recv_prio+0x1ac>
    39ba:	e784      	b.n	38c6 <bt_recv_prio+0x9e>
	case BT_HCI_EVT_NUM_COMPLETED_PACKETS:
		hci_num_completed_packets(buf);
		break;
#endif /* CONFIG_BLUETOOTH_CONN */
	default:
		net_buf_unref(buf);
    39bc:	4620      	mov	r0, r4
    39be:	f00e f905 	bl	11bcc <net_buf_unref>
		BT_ASSERT(0);
    39c2:	4b08      	ldr	r3, [pc, #32]	; (39e4 <bt_recv_prio+0x1bc>)
    39c4:	9301      	str	r3, [sp, #4]
    39c6:	4b08      	ldr	r3, [pc, #32]	; (39e8 <bt_recv_prio+0x1c0>)
    39c8:	9300      	str	r3, [sp, #0]
    39ca:	4a08      	ldr	r2, [pc, #32]	; (39ec <bt_recv_prio+0x1c4>)
    39cc:	4b08      	ldr	r3, [pc, #32]	; (39f0 <bt_recv_prio+0x1c8>)
    39ce:	4909      	ldr	r1, [pc, #36]	; (39f4 <bt_recv_prio+0x1cc>)
    39d0:	4810      	ldr	r0, [pc, #64]	; (3a14 <bt_recv_prio+0x1ec>)
    39d2:	e747      	b.n	3864 <bt_recv_prio+0x3c>
		return -EINVAL;
	}

	net_buf_unref(buf);
    39d4:	4620      	mov	r0, r4
    39d6:	f00e f8f9 	bl	11bcc <net_buf_unref>

	return 0;
}
    39da:	2000      	movs	r0, #0
    39dc:	b007      	add	sp, #28
    39de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    39e2:	bf00      	nop
    39e4:	00013df4 	.word	0x00013df4
    39e8:	00013df9 	.word	0x00013df9
    39ec:	00013db4 	.word	0x00013db4
    39f0:	00016034 	.word	0x00016034
    39f4:	00013dbb 	.word	0x00013dbb
    39f8:	00014338 	.word	0x00014338
    39fc:	0001437c 	.word	0x0001437c
    3a00:	0001442c 	.word	0x0001442c
    3a04:	20000348 	.word	0x20000348
    3a08:	000160a3 	.word	0x000160a3
    3a0c:	000143b6 	.word	0x000143b6
    3a10:	000143e2 	.word	0x000143e2
    3a14:	00014409 	.word	0x00014409

00003a18 <bt_hci_driver_register>:

int bt_hci_driver_register(const struct bt_hci_driver *drv)
{
	if (bt_dev.drv) {
    3a18:	4a08      	ldr	r2, [pc, #32]	; (3a3c <bt_hci_driver_register+0x24>)
    3a1a:	f8d2 30d8 	ldr.w	r3, [r2, #216]	; 0xd8
    3a1e:	b93b      	cbnz	r3, 3a30 <bt_hci_driver_register+0x18>
		return -EALREADY;
	}

	if (!drv->open || !drv->send) {
    3a20:	6881      	ldr	r1, [r0, #8]
    3a22:	b141      	cbz	r1, 3a36 <bt_hci_driver_register+0x1e>
    3a24:	68c1      	ldr	r1, [r0, #12]
    3a26:	b131      	cbz	r1, 3a36 <bt_hci_driver_register+0x1e>
		return -EINVAL;
	}

	bt_dev.drv = drv;
    3a28:	f8c2 00d8 	str.w	r0, [r2, #216]	; 0xd8
	BT_DBG("Registered %s", drv->name ? drv->name : "");

	bt_monitor_new_index(BT_MONITOR_TYPE_PRIMARY, drv->bus,
			     BT_ADDR_ANY, drv->name ? drv->name : "bt0");

	return 0;
    3a2c:	4618      	mov	r0, r3
    3a2e:	4770      	bx	lr
}

int bt_hci_driver_register(const struct bt_hci_driver *drv)
{
	if (bt_dev.drv) {
		return -EALREADY;
    3a30:	f06f 0044 	mvn.w	r0, #68	; 0x44
    3a34:	4770      	bx	lr
	}

	if (!drv->open || !drv->send) {
		return -EINVAL;
    3a36:	f06f 0015 	mvn.w	r0, #21

	bt_monitor_new_index(BT_MONITOR_TYPE_PRIMARY, drv->bus,
			     BT_ADDR_ANY, drv->name ? drv->name : "bt0");

	return 0;
}
    3a3a:	4770      	bx	lr
    3a3c:	200002b0 	.word	0x200002b0

00003a40 <bt_enable>:
	}
}
#endif /* !CONFIG_BLUETOOTH_RECV_IS_RX_THREAD */

int bt_enable(bt_ready_cb_t cb)
{
    3a40:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;

	if (!bt_dev.drv) {
    3a42:	4d2b      	ldr	r5, [pc, #172]	; (3af0 <bt_enable+0xb0>)
    3a44:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
	}
}
#endif /* !CONFIG_BLUETOOTH_RECV_IS_RX_THREAD */

int bt_enable(bt_ready_cb_t cb)
{
    3a48:	b087      	sub	sp, #28
    3a4a:	4607      	mov	r7, r0
	int err;

	if (!bt_dev.drv) {
    3a4c:	b963      	cbnz	r3, 3a68 <bt_enable+0x28>
		BT_ERR("No HCI driver registered");
    3a4e:	4b29      	ldr	r3, [pc, #164]	; (3af4 <bt_enable+0xb4>)
    3a50:	9301      	str	r3, [sp, #4]
    3a52:	4b29      	ldr	r3, [pc, #164]	; (3af8 <bt_enable+0xb8>)
    3a54:	9300      	str	r3, [sp, #0]
    3a56:	4a29      	ldr	r2, [pc, #164]	; (3afc <bt_enable+0xbc>)
    3a58:	4b29      	ldr	r3, [pc, #164]	; (3b00 <bt_enable+0xc0>)
    3a5a:	492a      	ldr	r1, [pc, #168]	; (3b04 <bt_enable+0xc4>)
    3a5c:	482a      	ldr	r0, [pc, #168]	; (3b08 <bt_enable+0xc8>)
    3a5e:	f7fd fd0f 	bl	1480 <printk>
		return -ENODEV;
    3a62:	f06f 0412 	mvn.w	r4, #18
    3a66:	e040      	b.n	3aea <bt_enable+0xaa>
static inline int atomic_test_and_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
	atomic_val_t old;

	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    3a68:	2101      	movs	r1, #1
    3a6a:	f105 006c 	add.w	r0, r5, #108	; 0x6c
    3a6e:	f7fe fa85 	bl	1f7c <atomic_or>
	}

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    3a72:	f010 0401 	ands.w	r4, r0, #1
    3a76:	d136      	bne.n	3ae6 <bt_enable+0xa6>
		return -EALREADY;
	}

	ready_cb = cb;
    3a78:	4b24      	ldr	r3, [pc, #144]	; (3b0c <bt_enable+0xcc>)

	/* TX thread */
	k_thread_create(&tx_thread_data, tx_thread_stack,
    3a7a:	4925      	ldr	r1, [pc, #148]	; (3b10 <bt_enable+0xd0>)

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
		return -EALREADY;
	}

	ready_cb = cb;
    3a7c:	601f      	str	r7, [r3, #0]

	/* TX thread */
	k_thread_create(&tx_thread_data, tx_thread_stack,
    3a7e:	f06f 0308 	mvn.w	r3, #8
    3a82:	9303      	str	r3, [sp, #12]
    3a84:	f44f 726b 	mov.w	r2, #940	; 0x3ac
    3a88:	4b22      	ldr	r3, [pc, #136]	; (3b14 <bt_enable+0xd4>)
    3a8a:	9405      	str	r4, [sp, #20]
    3a8c:	9404      	str	r4, [sp, #16]
    3a8e:	9402      	str	r4, [sp, #8]
    3a90:	9401      	str	r4, [sp, #4]
    3a92:	9400      	str	r4, [sp, #0]
    3a94:	4820      	ldr	r0, [pc, #128]	; (3b18 <bt_enable+0xd8>)
    3a96:	f00f fdb3 	bl	13600 <k_thread_create>

	if (IS_ENABLED(CONFIG_BLUETOOTH_TINYCRYPT_ECC)) {
		bt_hci_ecc_init();
	}

	err = bt_dev.drv->open();
    3a9a:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
    3a9e:	689b      	ldr	r3, [r3, #8]
    3aa0:	4798      	blx	r3
	if (err) {
    3aa2:	4606      	mov	r6, r0
    3aa4:	b160      	cbz	r0, 3ac0 <bt_enable+0x80>
		BT_ERR("HCI driver open failed (%d)", err);
    3aa6:	4b13      	ldr	r3, [pc, #76]	; (3af4 <bt_enable+0xb4>)
    3aa8:	9302      	str	r3, [sp, #8]
    3aaa:	4b13      	ldr	r3, [pc, #76]	; (3af8 <bt_enable+0xb8>)
    3aac:	9001      	str	r0, [sp, #4]
    3aae:	9300      	str	r3, [sp, #0]
    3ab0:	4a12      	ldr	r2, [pc, #72]	; (3afc <bt_enable+0xbc>)
    3ab2:	4b13      	ldr	r3, [pc, #76]	; (3b00 <bt_enable+0xc0>)
    3ab4:	4913      	ldr	r1, [pc, #76]	; (3b04 <bt_enable+0xc4>)
    3ab6:	4819      	ldr	r0, [pc, #100]	; (3b1c <bt_enable+0xdc>)
    3ab8:	f7fd fce2 	bl	1480 <printk>
		return err;
    3abc:	4634      	mov	r4, r6
    3abe:	e014      	b.n	3aea <bt_enable+0xaa>
	}

	if (!cb) {
    3ac0:	b927      	cbnz	r7, 3acc <bt_enable+0x8c>
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
    3ac2:	b007      	add	sp, #28
    3ac4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		BT_ERR("HCI driver open failed (%d)", err);
		return err;
	}

	if (!cb) {
		return bt_init();
    3ac8:	f7fe bcd6 	b.w	2478 <bt_init>
    3acc:	2101      	movs	r1, #1
    3ace:	f105 0068 	add.w	r0, r5, #104	; 0x68
    3ad2:	f7fe fa53 	bl	1f7c <atomic_or>
 * @return N/A
 */
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
					  struct k_work *work)
{
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    3ad6:	07c3      	lsls	r3, r0, #31
    3ad8:	d407      	bmi.n	3aea <bt_enable+0xaa>
		k_fifo_put(&work_q->fifo, work);
    3ada:	f105 0160 	add.w	r1, r5, #96	; 0x60
    3ade:	4810      	ldr	r0, [pc, #64]	; (3b20 <bt_enable+0xe0>)
    3ae0:	f00f f918 	bl	12d14 <k_queue_append>
    3ae4:	e001      	b.n	3aea <bt_enable+0xaa>
		BT_ERR("No HCI driver registered");
		return -ENODEV;
	}

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
		return -EALREADY;
    3ae6:	f06f 0444 	mvn.w	r4, #68	; 0x44
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
    3aea:	4620      	mov	r0, r4
    3aec:	b007      	add	sp, #28
    3aee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3af0:	200002b0 	.word	0x200002b0
    3af4:	00013df4 	.word	0x00013df4
    3af8:	00013df9 	.word	0x00013df9
    3afc:	00013db4 	.word	0x00013db4
    3b00:	0001602a 	.word	0x0001602a
    3b04:	00013dbb 	.word	0x00013dbb
    3b08:	0001446a 	.word	0x0001446a
    3b0c:	20000af4 	.word	0x20000af4
    3b10:	200029c8 	.word	0x200029c8
    3b14:	00002bdd 	.word	0x00002bdd
    3b18:	20000a8c 	.word	0x20000a8c
    3b1c:	00014493 	.word	0x00014493
    3b20:	20002238 	.word	0x20002238

00003b24 <bt_addr_le_is_bonded>:

bool bt_addr_le_is_bonded(const bt_addr_le_t *addr)
{
    3b24:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_BLUETOOTH_SMP)) {
		struct bt_keys *keys = bt_keys_find_addr(addr);
    3b26:	f004 fc01 	bl	832c <bt_keys_find_addr>

		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
    3b2a:	b118      	cbz	r0, 3b34 <bt_addr_le_is_bonded+0x10>
    3b2c:	8980      	ldrh	r0, [r0, #12]
    3b2e:	3000      	adds	r0, #0
    3b30:	bf18      	it	ne
    3b32:	2001      	movne	r0, #1
	} else {
		return false;
	}
}
    3b34:	f000 0001 	and.w	r0, r0, #1
    3b38:	bd08      	pop	{r3, pc}
	...

00003b3c <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
    3b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3b3e:	461f      	mov	r7, r3
	}
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    3b40:	7803      	ldrb	r3, [r0, #0]
    3b42:	f013 0f01 	tst.w	r3, #1
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
    3b46:	4604      	mov	r4, r0
    3b48:	460d      	mov	r5, r1
    3b4a:	8843      	ldrh	r3, [r0, #2]
	}
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    3b4c:	d108      	bne.n	3b60 <bt_le_adv_start+0x24>
		 * BT Core 4.2 [Vol 2, Part E, 7.8.5]
		 * The Advertising_Interval_Min and Advertising_Interval_Max
		 * shall not be set to less than 0x00A0 (100 ms) if the
		 * Advertising_Type is set to ADV_SCAN_IND or ADV_NONCONN_IND.
		 */
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    3b4e:	4942      	ldr	r1, [pc, #264]	; (3c58 <bt_le_adv_start+0x11c>)
    3b50:	7b89      	ldrb	r1, [r1, #14]
    3b52:	2908      	cmp	r1, #8
    3b54:	d804      	bhi.n	3b60 <bt_le_adv_start+0x24>
    3b56:	2b9f      	cmp	r3, #159	; 0x9f
    3b58:	d802      	bhi.n	3b60 <bt_le_adv_start+0x24>
	struct net_buf *buf;
	struct bt_hci_cp_le_set_adv_param *set_param;
	int err;

	if (!valid_adv_param(param)) {
		return -EINVAL;
    3b5a:	f06f 0015 	mvn.w	r0, #21
    3b5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		    param->interval_min < 0x00a0) {
			return false;
		}
	}

	if (param->interval_min > param->interval_max ||
    3b60:	88a1      	ldrh	r1, [r4, #4]
    3b62:	428b      	cmp	r3, r1
    3b64:	d8f9      	bhi.n	3b5a <bt_le_adv_start+0x1e>
    3b66:	2b1f      	cmp	r3, #31
    3b68:	d9f7      	bls.n	3b5a <bt_le_adv_start+0x1e>
	    param->interval_min < 0x0020 || param->interval_max > 0x4000) {
    3b6a:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
    3b6e:	d8f4      	bhi.n	3b5a <bt_le_adv_start+0x1e>

	if (!valid_adv_param(param)) {
		return -EINVAL;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    3b70:	2105      	movs	r1, #5
    3b72:	483a      	ldr	r0, [pc, #232]	; (3c5c <bt_le_adv_start+0x120>)
    3b74:	f7fe fa13 	bl	1f9e <atomic_test_bit>
    3b78:	2800      	cmp	r0, #0
    3b7a:	d168      	bne.n	3c4e <bt_le_adv_start+0x112>
		return -EALREADY;
	}

	err = set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
    3b7c:	4629      	mov	r1, r5
    3b7e:	f242 0008 	movw	r0, #8200	; 0x2008
    3b82:	f7fe fbe5 	bl	2350 <set_ad>
	if (err) {
    3b86:	2800      	cmp	r0, #0
    3b88:	d164      	bne.n	3c54 <bt_le_adv_start+0x118>
	 * If sd was not provided but we enable connectable undirected
	 * advertising sd needs to be cleared from values set by previous calls.
	 * Clearing sd is done by calling set_ad() with NULL data and zero len.
	 * So following condition check is unusual but correct.
	 */
	if (sd || (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    3b8a:	b957      	cbnz	r7, 3ba2 <bt_le_adv_start+0x66>
    3b8c:	7823      	ldrb	r3, [r4, #0]
    3b8e:	07da      	lsls	r2, r3, #31
    3b90:	d407      	bmi.n	3ba2 <bt_le_adv_start+0x66>
		if (err) {
			return err;
		}
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM,
    3b92:	210f      	movs	r1, #15
    3b94:	f242 0006 	movw	r0, #8198	; 0x2006
    3b98:	f7fe fad6 	bl	2148 <bt_hci_cmd_create>
				sizeof(*set_param));
	if (!buf) {
    3b9c:	4606      	mov	r6, r0
    3b9e:	b948      	cbnz	r0, 3bb4 <bt_le_adv_start+0x78>
    3ba0:	e050      	b.n	3c44 <bt_le_adv_start+0x108>
	 * advertising sd needs to be cleared from values set by previous calls.
	 * Clearing sd is done by calling set_ad() with NULL data and zero len.
	 * So following condition check is unusual but correct.
	 */
	if (sd || (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
		err = set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
    3ba2:	9a06      	ldr	r2, [sp, #24]
    3ba4:	4639      	mov	r1, r7
    3ba6:	f242 0009 	movw	r0, #8201	; 0x2009
    3baa:	f7fe fbd1 	bl	2350 <set_ad>
		if (err) {
    3bae:	2800      	cmp	r0, #0
    3bb0:	d0ef      	beq.n	3b92 <bt_le_adv_start+0x56>
    3bb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				sizeof(*set_param));
	if (!buf) {
		return -ENOBUFS;
	}

	set_param = net_buf_add(buf, sizeof(*set_param));
    3bb4:	210f      	movs	r1, #15
    3bb6:	3008      	adds	r0, #8
    3bb8:	f00e f828 	bl	11c0c <net_buf_simple_add>

	memset(set_param, 0, sizeof(*set_param));
    3bbc:	220f      	movs	r2, #15
				sizeof(*set_param));
	if (!buf) {
		return -ENOBUFS;
	}

	set_param = net_buf_add(buf, sizeof(*set_param));
    3bbe:	4605      	mov	r5, r0

	memset(set_param, 0, sizeof(*set_param));
    3bc0:	2100      	movs	r1, #0
    3bc2:	f7fd fa92 	bl	10ea <memset>
	set_param->min_interval = sys_cpu_to_le16(param->interval_min);
    3bc6:	8863      	ldrh	r3, [r4, #2]
    3bc8:	802b      	strh	r3, [r5, #0]
	set_param->max_interval = sys_cpu_to_le16(param->interval_max);
    3bca:	88a3      	ldrh	r3, [r4, #4]
    3bcc:	806b      	strh	r3, [r5, #2]
	set_param->channel_map  = 0x07;
    3bce:	2307      	movs	r3, #7
    3bd0:	736b      	strb	r3, [r5, #13]

	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    3bd2:	7823      	ldrb	r3, [r4, #0]
    3bd4:	07db      	lsls	r3, r3, #31
    3bd6:	d50c      	bpl.n	3bf2 <bt_le_adv_start+0xb6>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (atomic_test_bit(bt_dev.flags,
    3bd8:	2102      	movs	r1, #2
    3bda:	4820      	ldr	r0, [pc, #128]	; (3c5c <bt_le_adv_start+0x120>)
    3bdc:	4c1e      	ldr	r4, [pc, #120]	; (3c58 <bt_le_adv_start+0x11c>)
    3bde:	f7fe f9de 	bl	1f9e <atomic_test_bit>
    3be2:	b110      	cbz	r0, 3bea <bt_le_adv_start+0xae>
					    BT_DEV_ID_STATIC_RANDOM)) {
				set_random_address(&bt_dev.id_addr.a);
    3be4:	1c60      	adds	r0, r4, #1
    3be6:	f7fe fb0b 	bl	2200 <set_random_address>
			}

			set_param->own_addr_type = bt_dev.id_addr.type;
    3bea:	7823      	ldrb	r3, [r4, #0]
    3bec:	716b      	strb	r3, [r5, #5]
		}

		set_param->type = BT_LE_ADV_IND;
    3bee:	2300      	movs	r3, #0
    3bf0:	e016      	b.n	3c20 <bt_le_adv_start+0xe4>
	} else {
		if (param->own_addr) {
    3bf2:	68a0      	ldr	r0, [r4, #8]
    3bf4:	b130      	cbz	r0, 3c04 <bt_le_adv_start+0xc8>
			/* Only NRPA is allowed */
			if (!BT_ADDR_IS_NRPA(param->own_addr)) {
    3bf6:	7943      	ldrb	r3, [r0, #5]
    3bf8:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    3bfc:	d1ad      	bne.n	3b5a <bt_le_adv_start+0x1e>
				return -EINVAL;
			}

			err = set_random_address(param->own_addr);
    3bfe:	f7fe faff 	bl	2200 <set_random_address>
    3c02:	e001      	b.n	3c08 <bt_le_adv_start+0xcc>
		} else {
			err = le_set_private_addr();
    3c04:	f7fe fb2a 	bl	225c <le_set_private_addr>
    3c08:	4604      	mov	r4, r0
		}

		if (err) {
    3c0a:	b118      	cbz	r0, 3c14 <bt_le_adv_start+0xd8>
			net_buf_unref(buf);
    3c0c:	4630      	mov	r0, r6
    3c0e:	f00d ffdd 	bl	11bcc <net_buf_unref>
    3c12:	e01a      	b.n	3c4a <bt_le_adv_start+0x10e>
			return err;
		}

		set_param->own_addr_type = BT_ADDR_LE_RANDOM;
    3c14:	2301      	movs	r3, #1
    3c16:	716b      	strb	r3, [r5, #5]

		if (sd) {
    3c18:	b10f      	cbz	r7, 3c1e <bt_le_adv_start+0xe2>
			set_param->type = BT_LE_ADV_SCAN_IND;
    3c1a:	2302      	movs	r3, #2
    3c1c:	e000      	b.n	3c20 <bt_le_adv_start+0xe4>
		} else {
			set_param->type = BT_LE_ADV_NONCONN_IND;
    3c1e:	2303      	movs	r3, #3
    3c20:	712b      	strb	r3, [r5, #4]
		}
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
    3c22:	2200      	movs	r2, #0
    3c24:	4631      	mov	r1, r6
    3c26:	f242 0006 	movw	r0, #8198	; 0x2006
    3c2a:	f7fe fab1 	bl	2190 <bt_hci_cmd_send_sync>
	if (err) {
    3c2e:	b988      	cbnz	r0, 3c54 <bt_le_adv_start+0x118>
		return err;
	}

	err = set_advertise_enable(true);
    3c30:	2001      	movs	r0, #1
    3c32:	f7fe fb61 	bl	22f8 <set_advertise_enable>
	if (err) {
    3c36:	4604      	mov	r4, r0
    3c38:	b938      	cbnz	r0, 3c4a <bt_le_adv_start+0x10e>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_or(ATOMIC_ELEM(target, bit), mask);
    3c3a:	2140      	movs	r1, #64	; 0x40
    3c3c:	4807      	ldr	r0, [pc, #28]	; (3c5c <bt_le_adv_start+0x120>)
    3c3e:	f7fe f99d 	bl	1f7c <atomic_or>
    3c42:	e002      	b.n	3c4a <bt_le_adv_start+0x10e>
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM,
				sizeof(*set_param));
	if (!buf) {
		return -ENOBUFS;
    3c44:	f06f 0036 	mvn.w	r0, #54	; 0x36
    3c48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3c4a:	4620      	mov	r0, r4
    3c4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!valid_adv_param(param)) {
		return -EINVAL;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
		return -EALREADY;
    3c4e:	f06f 0044 	mvn.w	r0, #68	; 0x44
    3c52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	atomic_set_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING);

	return 0;
}
    3c54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3c56:	bf00      	nop
    3c58:	200002b0 	.word	0x200002b0
    3c5c:	2000031c 	.word	0x2000031c

00003c60 <bt_buf_get_rx>:

	return bt_le_scan_update(false);
}

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, s32_t timeout)
{
    3c60:	b538      	push	{r3, r4, r5, lr}
    3c62:	4605      	mov	r5, r0
		buf = net_buf_alloc(&hci_rx_pool, timeout);
	} else {
		buf = net_buf_alloc(&acl_in_pool, timeout);
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
    3c64:	4806      	ldr	r0, [pc, #24]	; (3c80 <bt_buf_get_rx+0x20>)
    3c66:	f00d ff3f 	bl	11ae8 <net_buf_alloc>
#endif

	if (buf) {
    3c6a:	4604      	mov	r4, r0
    3c6c:	b130      	cbz	r0, 3c7c <bt_buf_get_rx+0x1c>
		net_buf_reserve(buf, CONFIG_BLUETOOTH_HCI_RESERVE);
    3c6e:	2100      	movs	r1, #0
    3c70:	f00d ff99 	bl	11ba6 <net_buf_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	*(u8_t *)net_buf_user_data(buf) = type;
    3c74:	4620      	mov	r0, r4
    3c76:	f7fe f95e 	bl	1f36 <net_buf_user_data>
    3c7a:	7005      	strb	r5, [r0, #0]
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    3c7c:	4620      	mov	r0, r4
    3c7e:	bd38      	pop	{r3, r4, r5, pc}
    3c80:	200007e4 	.word	0x200007e4

00003c84 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(s32_t timeout)
{
    3c84:	b510      	push	{r4, lr}
    3c86:	4601      	mov	r1, r0
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M)
	unsigned int tmp;

	__asm__ volatile(
    3c88:	f04f 0320 	mov.w	r3, #32
    3c8c:	f3ef 8011 	mrs	r0, BASEPRI
    3c90:	f383 8811 	msr	BASEPRI, r3
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
    3c94:	4b0c      	ldr	r3, [pc, #48]	; (3cc8 <bt_buf_get_cmd_complete+0x44>)
	bt_dev.sent_cmd = NULL;
    3c96:	2200      	movs	r2, #0
{
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
    3c98:	f8d3 40ac 	ldr.w	r4, [r3, #172]	; 0xac
	bt_dev.sent_cmd = NULL;
    3c9c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    3ca0:	f380 8811 	msr	BASEPRI, r0
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
    3ca4:	b924      	cbnz	r4, 3cb0 <bt_buf_get_cmd_complete+0x2c>
		net_buf_reserve(buf, CONFIG_BLUETOOTH_HCI_RESERVE);

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    3ca6:	2001      	movs	r0, #1
}
    3ca8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		net_buf_reserve(buf, CONFIG_BLUETOOTH_HCI_RESERVE);

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    3cac:	f7ff bfd8 	b.w	3c60 <bt_buf_get_rx>
    3cb0:	4620      	mov	r0, r4
    3cb2:	f7fe f940 	bl	1f36 <net_buf_user_data>
    3cb6:	2301      	movs	r3, #1
    3cb8:	7003      	strb	r3, [r0, #0]
	BT_DBG("sent_cmd %p", buf);

	if (buf) {
		bt_buf_set_type(buf, BT_BUF_EVT);
		buf->len = 0;
		net_buf_reserve(buf, CONFIG_BLUETOOTH_HCI_RESERVE);
    3cba:	4611      	mov	r1, r2
    3cbc:	4620      	mov	r0, r4

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
		bt_buf_set_type(buf, BT_BUF_EVT);
		buf->len = 0;
    3cbe:	81a2      	strh	r2, [r4, #12]
		net_buf_reserve(buf, CONFIG_BLUETOOTH_HCI_RESERVE);
    3cc0:	f00d ff71 	bl	11ba6 <net_buf_reserve>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
    3cc4:	4620      	mov	r0, r4
    3cc6:	bd10      	pop	{r4, pc}
    3cc8:	200002b0 	.word	0x200002b0

00003ccc <bt_pub_key_gen>:
{
	return cmd(buf)->opcode;
}

int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
    3ccc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!(bt_dev.supported_commands[34] & 0x02) ||
    3cd0:	4e28      	ldr	r6, [pc, #160]	; (3d74 <bt_pub_key_gen+0xa8>)
    3cd2:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
    3cd6:	f003 0306 	and.w	r3, r3, #6
    3cda:	2b06      	cmp	r3, #6
{
	return cmd(buf)->opcode;
}

int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
    3cdc:	4607      	mov	r7, r0
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!(bt_dev.supported_commands[34] & 0x02) ||
    3cde:	d00c      	beq.n	3cfa <bt_pub_key_gen+0x2e>
	    !(bt_dev.supported_commands[34] & 0x04)) {
		BT_WARN("ECC HCI commands not available");
    3ce0:	4b25      	ldr	r3, [pc, #148]	; (3d78 <bt_pub_key_gen+0xac>)
    3ce2:	9301      	str	r3, [sp, #4]
    3ce4:	4b25      	ldr	r3, [pc, #148]	; (3d7c <bt_pub_key_gen+0xb0>)
    3ce6:	9300      	str	r3, [sp, #0]
    3ce8:	4a25      	ldr	r2, [pc, #148]	; (3d80 <bt_pub_key_gen+0xb4>)
    3cea:	4b26      	ldr	r3, [pc, #152]	; (3d84 <bt_pub_key_gen+0xb8>)
    3cec:	4926      	ldr	r1, [pc, #152]	; (3d88 <bt_pub_key_gen+0xbc>)
    3cee:	4827      	ldr	r0, [pc, #156]	; (3d8c <bt_pub_key_gen+0xc0>)
    3cf0:	f7fd fbc6 	bl	1480 <printk>
		return -ENOTSUP;
    3cf4:	f06f 0022 	mvn.w	r0, #34	; 0x22
    3cf8:	e039      	b.n	3d6e <bt_pub_key_gen+0xa2>
	}

	new_cb->_next = pub_key_cb;
    3cfa:	4d25      	ldr	r5, [pc, #148]	; (3d90 <bt_pub_key_gen+0xc4>)
    3cfc:	682b      	ldr	r3, [r5, #0]
    3cfe:	6043      	str	r3, [r0, #4]
	pub_key_cb = new_cb;
    3d00:	6028      	str	r0, [r5, #0]
static inline int atomic_test_and_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
	atomic_val_t old;

	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    3d02:	2110      	movs	r1, #16
    3d04:	f106 006c 	add.w	r0, r6, #108	; 0x6c
    3d08:	f7fe f938 	bl	1f7c <atomic_or>

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    3d0c:	f010 0810 	ands.w	r8, r0, #16
    3d10:	d001      	beq.n	3d16 <bt_pub_key_gen+0x4a>
		return 0;
    3d12:	2000      	movs	r0, #0
    3d14:	e02b      	b.n	3d6e <bt_pub_key_gen+0xa2>
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    3d16:	f06f 0108 	mvn.w	r1, #8
    3d1a:	f106 006c 	add.w	r0, r6, #108	; 0x6c
    3d1e:	f7fe f958 	bl	1fd2 <atomic_and>
	}

	atomic_clear_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY);

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
    3d22:	4642      	mov	r2, r8
    3d24:	4641      	mov	r1, r8
    3d26:	f242 0025 	movw	r0, #8229	; 0x2025
    3d2a:	f7fe fa31 	bl	2190 <bt_hci_cmd_send_sync>
	if (err) {
    3d2e:	4604      	mov	r4, r0
    3d30:	b198      	cbz	r0, 3d5a <bt_pub_key_gen+0x8e>
		BT_ERR("Sending LE P256 Public Key command failed");
    3d32:	4b11      	ldr	r3, [pc, #68]	; (3d78 <bt_pub_key_gen+0xac>)
    3d34:	9301      	str	r3, [sp, #4]
    3d36:	4b17      	ldr	r3, [pc, #92]	; (3d94 <bt_pub_key_gen+0xc8>)
    3d38:	9300      	str	r3, [sp, #0]
    3d3a:	4a17      	ldr	r2, [pc, #92]	; (3d98 <bt_pub_key_gen+0xcc>)
    3d3c:	4b11      	ldr	r3, [pc, #68]	; (3d84 <bt_pub_key_gen+0xb8>)
    3d3e:	4912      	ldr	r1, [pc, #72]	; (3d88 <bt_pub_key_gen+0xbc>)
    3d40:	4816      	ldr	r0, [pc, #88]	; (3d9c <bt_pub_key_gen+0xd0>)
    3d42:	f7fd fb9d 	bl	1480 <printk>
    3d46:	f06f 0110 	mvn.w	r1, #16
    3d4a:	f106 006c 	add.w	r0, r6, #108	; 0x6c
    3d4e:	f7fe f940 	bl	1fd2 <atomic_and>
		atomic_clear_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY);
		pub_key_cb = NULL;
    3d52:	f8c5 8000 	str.w	r8, [r5]
		return err;
    3d56:	4620      	mov	r0, r4
    3d58:	e009      	b.n	3d6e <bt_pub_key_gen+0xa2>
	}

	for (cb = pub_key_cb; cb; cb = cb->_next) {
    3d5a:	682c      	ldr	r4, [r5, #0]
    3d5c:	2c00      	cmp	r4, #0
    3d5e:	d0d8      	beq.n	3d12 <bt_pub_key_gen+0x46>
		if (cb != new_cb) {
    3d60:	42bc      	cmp	r4, r7
    3d62:	d002      	beq.n	3d6a <bt_pub_key_gen+0x9e>
			cb->func(NULL);
    3d64:	6823      	ldr	r3, [r4, #0]
    3d66:	2000      	movs	r0, #0
    3d68:	4798      	blx	r3
		atomic_clear_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY);
		pub_key_cb = NULL;
		return err;
	}

	for (cb = pub_key_cb; cb; cb = cb->_next) {
    3d6a:	6864      	ldr	r4, [r4, #4]
    3d6c:	e7f6      	b.n	3d5c <bt_pub_key_gen+0x90>
			cb->func(NULL);
		}
	}

	return 0;
}
    3d6e:	b002      	add	sp, #8
    3d70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3d74:	200002b0 	.word	0x200002b0
    3d78:	00013df4 	.word	0x00013df4
    3d7c:	00013e3f 	.word	0x00013e3f
    3d80:	00013e01 	.word	0x00013e01
    3d84:	00016041 	.word	0x00016041
    3d88:	00013dbb 	.word	0x00013dbb
    3d8c:	000144bf 	.word	0x000144bf
    3d90:	20000b3c 	.word	0x20000b3c
    3d94:	00013df9 	.word	0x00013df9
    3d98:	00013db4 	.word	0x00013db4
    3d9c:	000144ee 	.word	0x000144ee

00003da0 <bt_dh_key_gen>:

	return NULL;
}

int bt_dh_key_gen(const u8_t remote_pk[64], bt_dh_key_cb_t cb)
{
    3da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_cp_le_generate_dhkey *cp;
	struct net_buf *buf;
	int err;

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    3da2:	4c1a      	ldr	r4, [pc, #104]	; (3e0c <bt_dh_key_gen+0x6c>)
    3da4:	6823      	ldr	r3, [r4, #0]

	return NULL;
}

int bt_dh_key_gen(const u8_t remote_pk[64], bt_dh_key_cb_t cb)
{
    3da6:	4607      	mov	r7, r0
    3da8:	460a      	mov	r2, r1
	struct bt_hci_cp_le_generate_dhkey *cp;
	struct net_buf *buf;
	int err;

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    3daa:	b113      	cbz	r3, 3db2 <bt_dh_key_gen+0x12>
		return -EBUSY;
    3dac:	f06f 000f 	mvn.w	r0, #15
    3db0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
{
	struct bt_hci_cp_le_generate_dhkey *cp;
	struct net_buf *buf;
	int err;

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    3db2:	2104      	movs	r1, #4
    3db4:	4816      	ldr	r0, [pc, #88]	; (3e10 <bt_dh_key_gen+0x70>)
    3db6:	f7fe f8f2 	bl	1f9e <atomic_test_bit>
    3dba:	4606      	mov	r6, r0
    3dbc:	2800      	cmp	r0, #0
    3dbe:	d1f5      	bne.n	3dac <bt_dh_key_gen+0xc>
		return -EBUSY;
	}

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
    3dc0:	2103      	movs	r1, #3
    3dc2:	4813      	ldr	r0, [pc, #76]	; (3e10 <bt_dh_key_gen+0x70>)
    3dc4:	f7fe f8eb 	bl	1f9e <atomic_test_bit>
    3dc8:	b1e0      	cbz	r0, 3e04 <bt_dh_key_gen+0x64>
		return -EADDRNOTAVAIL;
	}

	dh_key_cb = cb;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
    3dca:	2140      	movs	r1, #64	; 0x40
    3dcc:	f242 0026 	movw	r0, #8230	; 0x2026

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
		return -EADDRNOTAVAIL;
	}

	dh_key_cb = cb;
    3dd0:	6022      	str	r2, [r4, #0]

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
    3dd2:	f7fe f9b9 	bl	2148 <bt_hci_cmd_create>
	if (!buf) {
    3dd6:	4605      	mov	r5, r0
    3dd8:	b918      	cbnz	r0, 3de2 <bt_dh_key_gen+0x42>
		dh_key_cb = NULL;
    3dda:	6020      	str	r0, [r4, #0]
		return -ENOBUFS;
    3ddc:	f06f 0036 	mvn.w	r0, #54	; 0x36
    3de0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	cp = net_buf_add(buf, sizeof(*cp));
    3de2:	2140      	movs	r1, #64	; 0x40
    3de4:	3008      	adds	r0, #8
    3de6:	f00d ff11 	bl	11c0c <net_buf_simple_add>
	memcpy(cp->key, remote_pk, sizeof(cp->key));
    3dea:	2240      	movs	r2, #64	; 0x40
    3dec:	4639      	mov	r1, r7
    3dee:	f7fd f950 	bl	1092 <memcpy>

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
    3df2:	4632      	mov	r2, r6
    3df4:	4629      	mov	r1, r5
    3df6:	f242 0026 	movw	r0, #8230	; 0x2026
    3dfa:	f7fe f9c9 	bl	2190 <bt_hci_cmd_send_sync>
	if (err) {
    3dfe:	b118      	cbz	r0, 3e08 <bt_dh_key_gen+0x68>
		dh_key_cb = NULL;
    3e00:	6026      	str	r6, [r4, #0]
		return err;
    3e02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
		return -EBUSY;
	}

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
		return -EADDRNOTAVAIL;
    3e04:	f06f 0030 	mvn.w	r0, #48	; 0x30
		dh_key_cb = NULL;
		return err;
	}

	return 0;
}
    3e08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3e0a:	bf00      	nop
    3e0c:	20000b40 	.word	0x20000b40
    3e10:	2000031c 	.word	0x2000031c

00003e14 <notify_connected>:
		return "(unknown)";
	}
}

static void notify_connected(struct bt_conn *conn)
{
    3e14:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    3e16:	4b06      	ldr	r3, [pc, #24]	; (3e30 <notify_connected+0x1c>)
    3e18:	681c      	ldr	r4, [r3, #0]
		return "(unknown)";
	}
}

static void notify_connected(struct bt_conn *conn)
{
    3e1a:	4605      	mov	r5, r0
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    3e1c:	b13c      	cbz	r4, 3e2e <notify_connected+0x1a>
		if (cb->connected) {
    3e1e:	6823      	ldr	r3, [r4, #0]
    3e20:	b11b      	cbz	r3, 3e2a <notify_connected+0x16>
			cb->connected(conn, conn->err);
    3e22:	f895 1050 	ldrb.w	r1, [r5, #80]	; 0x50
    3e26:	4628      	mov	r0, r5
    3e28:	4798      	blx	r3

static void notify_connected(struct bt_conn *conn)
{
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    3e2a:	69a4      	ldr	r4, [r4, #24]
    3e2c:	e7f6      	b.n	3e1c <notify_connected+0x8>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}
}
    3e2e:	bd38      	pop	{r3, r4, r5, pc}
    3e30:	20000b68 	.word	0x20000b68

00003e34 <bt_conn_reset_rx_state>:
	callback_list = cb;
}

static void bt_conn_reset_rx_state(struct bt_conn *conn)
{
	if (!conn->rx_len) {
    3e34:	8983      	ldrh	r3, [r0, #12]
	cb->_next = callback_list;
	callback_list = cb;
}

static void bt_conn_reset_rx_state(struct bt_conn *conn)
{
    3e36:	b510      	push	{r4, lr}
    3e38:	4604      	mov	r4, r0
	if (!conn->rx_len) {
    3e3a:	b12b      	cbz	r3, 3e48 <bt_conn_reset_rx_state+0x14>
		return;
	}

	net_buf_unref(conn->rx);
    3e3c:	6900      	ldr	r0, [r0, #16]
    3e3e:	f00d fec5 	bl	11bcc <net_buf_unref>
	conn->rx = NULL;
    3e42:	2300      	movs	r3, #0
    3e44:	6123      	str	r3, [r4, #16]
	conn->rx_len = 0;
    3e46:	81a3      	strh	r3, [r4, #12]
    3e48:	bd10      	pop	{r4, pc}

00003e4a <atomic_dec>:
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_dec(atomic_t *target)
{
	return atomic_sub(target, 1);
}
    3e4a:	f3bf 8f5f 	dmb	sy
    3e4e:	e850 3f00 	ldrex	r3, [r0]
    3e52:	1e5a      	subs	r2, r3, #1
    3e54:	e840 2100 	strex	r1, r2, [r0]
    3e58:	2900      	cmp	r1, #0
    3e5a:	d1f8      	bne.n	3e4e <atomic_dec+0x4>
    3e5c:	f3bf 8f5f 	dmb	sy
    3e60:	4618      	mov	r0, r3
    3e62:	4770      	bx	lr

00003e64 <conn_cleanup>:
}

static struct k_poll_signal conn_change = K_POLL_SIGNAL_INITIALIZER();

static void conn_cleanup(struct bt_conn *conn)
{
    3e64:	b538      	push	{r3, r4, r5, lr}
    3e66:	4604      	mov	r4, r0
	struct net_buf *buf;

	/* Give back any allocated buffers */
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
    3e68:	f100 0530 	add.w	r5, r0, #48	; 0x30
    3e6c:	2100      	movs	r1, #0
    3e6e:	4628      	mov	r0, r5
    3e70:	f00d fe80 	bl	11b74 <net_buf_get>
    3e74:	b110      	cbz	r0, 3e7c <conn_cleanup+0x18>
		net_buf_unref(buf);
    3e76:	f00d fea9 	bl	11bcc <net_buf_unref>
    3e7a:	e7f7      	b.n	3e6c <conn_cleanup+0x8>
	}

	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");

	bt_conn_reset_rx_state(conn);
    3e7c:	4620      	mov	r0, r4
    3e7e:	f7ff ffd9 	bl	3e34 <bt_conn_reset_rx_state>
	return conn;
}

void bt_conn_unref(struct bt_conn *conn)
{
	atomic_dec(&conn->ref);
    3e82:	f104 004c 	add.w	r0, r4, #76	; 0x4c

	/* Release the reference we took for the very first
	 * state transition.
	 */
	bt_conn_unref(conn);
}
    3e86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return conn;
}

void bt_conn_unref(struct bt_conn *conn)
{
	atomic_dec(&conn->ref);
    3e8a:	f7ff bfde 	b.w	3e4a <atomic_dec>

00003e8e <atomic_inc>:
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_inc(atomic_t *target)
{
	return atomic_add(target, 1);
}
    3e8e:	f3bf 8f5f 	dmb	sy
    3e92:	e850 3f00 	ldrex	r3, [r0]
    3e96:	1c5a      	adds	r2, r3, #1
    3e98:	e840 2100 	strex	r1, r2, [r0]
    3e9c:	2900      	cmp	r1, #0
    3e9e:	d1f8      	bne.n	3e92 <atomic_inc+0x4>
    3ea0:	f3bf 8f5f 	dmb	sy
    3ea4:	4618      	mov	r0, r3
    3ea6:	4770      	bx	lr

00003ea8 <bt_conn_get_pkts>:
		return &bt_dev.br.pkts;
	}
#endif /* CONFIG_BLUETOOTH_BREDR */

	return &bt_dev.le.pkts;
}
    3ea8:	4800      	ldr	r0, [pc, #0]	; (3eac <bt_conn_get_pkts+0x4>)
    3eaa:	4770      	bx	lr
    3eac:	20000334 	.word	0x20000334

00003eb0 <notify_le_param_updated>:

void notify_le_param_updated(struct bt_conn *conn)
{
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    3eb0:	4b08      	ldr	r3, [pc, #32]	; (3ed4 <notify_le_param_updated+0x24>)
		}
	}
}

void notify_le_param_updated(struct bt_conn *conn)
{
    3eb2:	b570      	push	{r4, r5, r6, lr}
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    3eb4:	681c      	ldr	r4, [r3, #0]
		}
	}
}

void notify_le_param_updated(struct bt_conn *conn)
{
    3eb6:	4605      	mov	r5, r0
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    3eb8:	b15c      	cbz	r4, 3ed2 <notify_le_param_updated+0x22>
		if (cb->le_param_updated) {
    3eba:	68e6      	ldr	r6, [r4, #12]
    3ebc:	b13e      	cbz	r6, 3ece <notify_le_param_updated+0x1e>
			cb->le_param_updated(conn, conn->le.interval,
    3ebe:	f8b5 3072 	ldrh.w	r3, [r5, #114]	; 0x72
    3ec2:	f8b5 2070 	ldrh.w	r2, [r5, #112]	; 0x70
    3ec6:	f8b5 106a 	ldrh.w	r1, [r5, #106]	; 0x6a
    3eca:	4628      	mov	r0, r5
    3ecc:	47b0      	blx	r6

void notify_le_param_updated(struct bt_conn *conn)
{
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    3ece:	69a4      	ldr	r4, [r4, #24]
    3ed0:	e7f2      	b.n	3eb8 <notify_le_param_updated+0x8>
			cb->le_param_updated(conn, conn->le.interval,
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
    3ed2:	bd70      	pop	{r4, r5, r6, pc}
    3ed4:	20000b68 	.word	0x20000b68

00003ed8 <le_param_req>:

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
    3ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3eda:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
    3edc:	4608      	mov	r0, r1
		}
	}
}

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
    3ede:	460e      	mov	r6, r1
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
    3ee0:	f7fe fa87 	bl	23f2 <bt_le_conn_params_valid>
    3ee4:	4605      	mov	r5, r0
    3ee6:	b908      	cbnz	r0, 3eec <le_param_req+0x14>
		return false;
    3ee8:	2500      	movs	r5, #0
    3eea:	e011      	b.n	3f10 <le_param_req+0x38>
	}

	for (cb = callback_list; cb; cb = cb->_next) {
    3eec:	4b09      	ldr	r3, [pc, #36]	; (3f14 <le_param_req+0x3c>)
    3eee:	681c      	ldr	r4, [r3, #0]
    3ef0:	b174      	cbz	r4, 3f10 <le_param_req+0x38>
		if (!cb->le_param_req) {
    3ef2:	68a3      	ldr	r3, [r4, #8]
    3ef4:	b90b      	cbnz	r3, 3efa <le_param_req+0x22>

	if (!bt_le_conn_params_valid(param)) {
		return false;
	}

	for (cb = callback_list; cb; cb = cb->_next) {
    3ef6:	69a4      	ldr	r4, [r4, #24]
    3ef8:	e7fa      	b.n	3ef0 <le_param_req+0x18>
		if (!cb->le_param_req) {
			continue;
		}

		if (!cb->le_param_req(conn, param)) {
    3efa:	4631      	mov	r1, r6
    3efc:	4638      	mov	r0, r7
    3efe:	4798      	blx	r3
    3f00:	2800      	cmp	r0, #0
    3f02:	d0f1      	beq.n	3ee8 <le_param_req+0x10>
		}

		/* The callback may modify the parameters so we need to
		 * double-check that it returned valid parameters.
		 */
		if (!bt_le_conn_params_valid(param)) {
    3f04:	4630      	mov	r0, r6
    3f06:	f7fe fa74 	bl	23f2 <bt_le_conn_params_valid>
    3f0a:	2800      	cmp	r0, #0
    3f0c:	d1f3      	bne.n	3ef6 <le_param_req+0x1e>
    3f0e:	e7eb      	b.n	3ee8 <le_param_req+0x10>
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
    3f10:	4628      	mov	r0, r5
    3f12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3f14:	20000b68 	.word	0x20000b68

00003f18 <bt_conn_identity_resolved>:
}
#endif /* CONFIG_BLUETOOTH_BREDR */

#if defined(CONFIG_BLUETOOTH_SMP)
void bt_conn_identity_resolved(struct bt_conn *conn)
{
    3f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const bt_addr_le_t *rpa;
	struct bt_conn_cb *cb;

	if (conn->role == BT_HCI_ROLE_MASTER) {
    3f1a:	78c3      	ldrb	r3, [r0, #3]
}
#endif /* CONFIG_BLUETOOTH_BREDR */

#if defined(CONFIG_BLUETOOTH_SMP)
void bt_conn_identity_resolved(struct bt_conn *conn)
{
    3f1c:	4604      	mov	r4, r0
	const bt_addr_le_t *rpa;
	struct bt_conn_cb *cb;

	if (conn->role == BT_HCI_ROLE_MASTER) {
    3f1e:	b913      	cbnz	r3, 3f26 <bt_conn_identity_resolved+0xe>
		rpa = &conn->le.resp_addr;
    3f20:	f100 0662 	add.w	r6, r0, #98	; 0x62
    3f24:	e001      	b.n	3f2a <bt_conn_identity_resolved+0x12>
	} else {
		rpa = &conn->le.init_addr;
    3f26:	f100 065b 	add.w	r6, r0, #91	; 0x5b
	}

	for (cb = callback_list; cb; cb = cb->_next) {
    3f2a:	4b07      	ldr	r3, [pc, #28]	; (3f48 <bt_conn_identity_resolved+0x30>)
    3f2c:	681d      	ldr	r5, [r3, #0]
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
    3f2e:	f104 0754 	add.w	r7, r4, #84	; 0x54
		rpa = &conn->le.resp_addr;
	} else {
		rpa = &conn->le.init_addr;
	}

	for (cb = callback_list; cb; cb = cb->_next) {
    3f32:	b13d      	cbz	r5, 3f44 <bt_conn_identity_resolved+0x2c>
		if (cb->identity_resolved) {
    3f34:	692b      	ldr	r3, [r5, #16]
    3f36:	b11b      	cbz	r3, 3f40 <bt_conn_identity_resolved+0x28>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
    3f38:	463a      	mov	r2, r7
    3f3a:	4631      	mov	r1, r6
    3f3c:	4620      	mov	r0, r4
    3f3e:	4798      	blx	r3
		rpa = &conn->le.resp_addr;
	} else {
		rpa = &conn->le.init_addr;
	}

	for (cb = callback_list; cb; cb = cb->_next) {
    3f40:	69ad      	ldr	r5, [r5, #24]
    3f42:	e7f6      	b.n	3f32 <bt_conn_identity_resolved+0x1a>
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
		}
	}
}
    3f44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3f46:	bf00      	nop
    3f48:	20000b68 	.word	0x20000b68

00003f4c <bt_conn_security_changed>:

	return 0;
}

void bt_conn_security_changed(struct bt_conn *conn)
{
    3f4c:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    3f4e:	4b06      	ldr	r3, [pc, #24]	; (3f68 <bt_conn_security_changed+0x1c>)
    3f50:	681c      	ldr	r4, [r3, #0]

	return 0;
}

void bt_conn_security_changed(struct bt_conn *conn)
{
    3f52:	4605      	mov	r5, r0
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    3f54:	b134      	cbz	r4, 3f64 <bt_conn_security_changed+0x18>
		if (cb->security_changed) {
    3f56:	6963      	ldr	r3, [r4, #20]
    3f58:	b113      	cbz	r3, 3f60 <bt_conn_security_changed+0x14>
			cb->security_changed(conn, conn->sec_level);
    3f5a:	7a29      	ldrb	r1, [r5, #8]
    3f5c:	4628      	mov	r0, r5
    3f5e:	4798      	blx	r3

void bt_conn_security_changed(struct bt_conn *conn)
{
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    3f60:	69a4      	ldr	r4, [r4, #24]
    3f62:	e7f7      	b.n	3f54 <bt_conn_security_changed+0x8>
		if (cb->security_changed) {
			cb->security_changed(conn, conn->sec_level);
		}
	}
}
    3f64:	bd38      	pop	{r3, r4, r5, pc}
    3f66:	bf00      	nop
    3f68:	20000b68 	.word	0x20000b68

00003f6c <bt_conn_security>:

int bt_conn_security(struct bt_conn *conn, bt_security_t sec)
{
	int err;

	if (conn->state != BT_CONN_CONNECTED) {
    3f6c:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
    3f70:	2b03      	cmp	r3, #3
		return -EINVAL;
	}
}

int bt_conn_security(struct bt_conn *conn, bt_security_t sec)
{
    3f72:	b510      	push	{r4, lr}
    3f74:	4604      	mov	r4, r0
	int err;

	if (conn->state != BT_CONN_CONNECTED) {
    3f76:	d114      	bne.n	3fa2 <bt_conn_security+0x36>
	    sec < BT_SECURITY_FIPS) {
		return -EOPNOTSUPP;
	}

	/* nothing to do */
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
    3f78:	7a03      	ldrb	r3, [r0, #8]
    3f7a:	428b      	cmp	r3, r1
    3f7c:	d301      	bcc.n	3f82 <bt_conn_security+0x16>
		return 0;
    3f7e:	2000      	movs	r0, #0
    3f80:	bd10      	pop	{r4, pc}
	    sec < BT_SECURITY_FIPS) {
		return -EOPNOTSUPP;
	}

	/* nothing to do */
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
    3f82:	7a43      	ldrb	r3, [r0, #9]
    3f84:	428b      	cmp	r3, r1
    3f86:	d2fa      	bcs.n	3f7e <bt_conn_security+0x12>

		return conn_auth(conn);
	}
#endif /* CONFIG_BLUETOOTH_BREDR */

	switch (conn->role) {
    3f88:	78c3      	ldrb	r3, [r0, #3]
	/* nothing to do */
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
		return 0;
	}

	conn->required_sec_level = sec;
    3f8a:	7241      	strb	r1, [r0, #9]

		return conn_auth(conn);
	}
#endif /* CONFIG_BLUETOOTH_BREDR */

	switch (conn->role) {
    3f8c:	2b01      	cmp	r3, #1
    3f8e:	d103      	bne.n	3f98 <bt_conn_security+0x2c>
						   conn->le.keys->enc_size);
	}
#endif /* CONFIG_BLUETOOTH_CENTRAL && CONFIG_BLUETOOTH_SMP */
#if defined(CONFIG_BLUETOOTH_PERIPHERAL) && defined(CONFIG_BLUETOOTH_SMP)
	case BT_HCI_ROLE_SLAVE:
		return bt_smp_send_security_req(conn);
    3f90:	f004 f82e 	bl	7ff0 <bt_smp_send_security_req>
	conn->required_sec_level = sec;

	err = start_security(conn);

	/* reset required security level in case of error */
	if (err) {
    3f94:	b910      	cbnz	r0, 3f9c <bt_conn_security+0x30>
    3f96:	e7f2      	b.n	3f7e <bt_conn_security+0x12>
#if defined(CONFIG_BLUETOOTH_PERIPHERAL) && defined(CONFIG_BLUETOOTH_SMP)
	case BT_HCI_ROLE_SLAVE:
		return bt_smp_send_security_req(conn);
#endif /* CONFIG_BLUETOOTH_PERIPHERAL && CONFIG_BLUETOOTH_SMP */
	default:
		return -EINVAL;
    3f98:	f06f 0015 	mvn.w	r0, #21

	err = start_security(conn);

	/* reset required security level in case of error */
	if (err) {
		conn->required_sec_level = conn->sec_level;
    3f9c:	7a23      	ldrb	r3, [r4, #8]
    3f9e:	7263      	strb	r3, [r4, #9]
    3fa0:	bd10      	pop	{r4, pc}
int bt_conn_security(struct bt_conn *conn, bt_security_t sec)
{
	int err;

	if (conn->state != BT_CONN_CONNECTED) {
		return -ENOTCONN;
    3fa2:	f06f 0038 	mvn.w	r0, #56	; 0x38
	if (err) {
		conn->required_sec_level = conn->sec_level;
	}

	return err;
}
    3fa6:	bd10      	pop	{r4, pc}

00003fa8 <bt_conn_cb_register>:
#endif /* CONFIG_BLUETOOTH_SMP */

void bt_conn_cb_register(struct bt_conn_cb *cb)
{
	cb->_next = callback_list;
    3fa8:	4b02      	ldr	r3, [pc, #8]	; (3fb4 <bt_conn_cb_register+0xc>)
    3faa:	681a      	ldr	r2, [r3, #0]
    3fac:	6182      	str	r2, [r0, #24]
	callback_list = cb;
    3fae:	6018      	str	r0, [r3, #0]
    3fb0:	4770      	bx	lr
    3fb2:	bf00      	nop
    3fb4:	20000b68 	.word	0x20000b68

00003fb8 <bt_conn_recv>:
	u16_t len;

	BT_DBG("handle %u len %u flags %02x", conn->handle, buf->len, flags);

	/* Check packet boundary flags */
	switch (flags) {
    3fb8:	2a01      	cmp	r2, #1
	conn->rx = NULL;
	conn->rx_len = 0;
}

void bt_conn_recv(struct bt_conn *conn, struct net_buf *buf, u8_t flags)
{
    3fba:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    3fbc:	4604      	mov	r4, r0
    3fbe:	460d      	mov	r5, r1
	u16_t len;

	BT_DBG("handle %u len %u flags %02x", conn->handle, buf->len, flags);

	/* Check packet boundary flags */
	switch (flags) {
    3fc0:	d01b      	beq.n	3ffa <bt_conn_recv+0x42>
    3fc2:	2a02      	cmp	r2, #2
    3fc4:	d15d      	bne.n	4082 <bt_conn_recv+0xca>
	case BT_ACL_START:
		hdr = (void *)buf->data;
		len = sys_le16_to_cpu(hdr->len);
    3fc6:	688b      	ldr	r3, [r1, #8]
    3fc8:	881e      	ldrh	r6, [r3, #0]

		BT_DBG("First, len %u final %u", buf->len, len);

		if (conn->rx_len) {
    3fca:	8983      	ldrh	r3, [r0, #12]
    3fcc:	b163      	cbz	r3, 3fe8 <bt_conn_recv+0x30>
			BT_ERR("Unexpected first L2CAP frame");
    3fce:	4b41      	ldr	r3, [pc, #260]	; (40d4 <bt_conn_recv+0x11c>)
    3fd0:	9301      	str	r3, [sp, #4]
    3fd2:	4b41      	ldr	r3, [pc, #260]	; (40d8 <bt_conn_recv+0x120>)
    3fd4:	9300      	str	r3, [sp, #0]
    3fd6:	4a41      	ldr	r2, [pc, #260]	; (40dc <bt_conn_recv+0x124>)
    3fd8:	4b41      	ldr	r3, [pc, #260]	; (40e0 <bt_conn_recv+0x128>)
    3fda:	4942      	ldr	r1, [pc, #264]	; (40e4 <bt_conn_recv+0x12c>)
    3fdc:	4842      	ldr	r0, [pc, #264]	; (40e8 <bt_conn_recv+0x130>)
    3fde:	f7fd fa4f 	bl	1480 <printk>
			bt_conn_reset_rx_state(conn);
    3fe2:	4620      	mov	r0, r4
    3fe4:	f7ff ff26 	bl	3e34 <bt_conn_reset_rx_state>
		}

		conn->rx_len = (sizeof(*hdr) + len) - buf->len;
    3fe8:	89ab      	ldrh	r3, [r5, #12]
    3fea:	3604      	adds	r6, #4
    3fec:	1af3      	subs	r3, r6, r3
    3fee:	b29b      	uxth	r3, r3
    3ff0:	81a3      	strh	r3, [r4, #12]
		BT_DBG("rx_len %u", conn->rx_len);
		if (conn->rx_len) {
    3ff2:	2b00      	cmp	r3, #0
    3ff4:	d051      	beq.n	409a <bt_conn_recv+0xe2>
			conn->rx = buf;
    3ff6:	6125      	str	r5, [r4, #16]
			return;
    3ff8:	e069      	b.n	40ce <bt_conn_recv+0x116>
		}

		break;
	case BT_ACL_CONT:
		if (!conn->rx_len) {
    3ffa:	8983      	ldrh	r3, [r0, #12]
    3ffc:	b943      	cbnz	r3, 4010 <bt_conn_recv+0x58>
			BT_ERR("Unexpected L2CAP continuation");
    3ffe:	4b35      	ldr	r3, [pc, #212]	; (40d4 <bt_conn_recv+0x11c>)
    4000:	9301      	str	r3, [sp, #4]
    4002:	4b35      	ldr	r3, [pc, #212]	; (40d8 <bt_conn_recv+0x120>)
    4004:	9300      	str	r3, [sp, #0]
    4006:	4a35      	ldr	r2, [pc, #212]	; (40dc <bt_conn_recv+0x124>)
    4008:	4b35      	ldr	r3, [pc, #212]	; (40e0 <bt_conn_recv+0x128>)
    400a:	4936      	ldr	r1, [pc, #216]	; (40e4 <bt_conn_recv+0x12c>)
    400c:	4837      	ldr	r0, [pc, #220]	; (40ec <bt_conn_recv+0x134>)
    400e:	e00a      	b.n	4026 <bt_conn_recv+0x6e>
			bt_conn_reset_rx_state(conn);
			net_buf_unref(buf);
			return;
		}

		if (buf->len > conn->rx_len) {
    4010:	898e      	ldrh	r6, [r1, #12]
    4012:	42b3      	cmp	r3, r6
    4014:	d212      	bcs.n	403c <bt_conn_recv+0x84>
			BT_ERR("L2CAP data overflow");
    4016:	4b2f      	ldr	r3, [pc, #188]	; (40d4 <bt_conn_recv+0x11c>)
    4018:	9301      	str	r3, [sp, #4]
    401a:	4b2f      	ldr	r3, [pc, #188]	; (40d8 <bt_conn_recv+0x120>)
    401c:	9300      	str	r3, [sp, #0]
    401e:	4a2f      	ldr	r2, [pc, #188]	; (40dc <bt_conn_recv+0x124>)
    4020:	4b2f      	ldr	r3, [pc, #188]	; (40e0 <bt_conn_recv+0x128>)
    4022:	4930      	ldr	r1, [pc, #192]	; (40e4 <bt_conn_recv+0x12c>)
    4024:	4832      	ldr	r0, [pc, #200]	; (40f0 <bt_conn_recv+0x138>)
    4026:	f7fd fa2b 	bl	1480 <printk>
			bt_conn_reset_rx_state(conn);
    402a:	4620      	mov	r0, r4
    402c:	f7ff ff02 	bl	3e34 <bt_conn_reset_rx_state>
			net_buf_unref(buf);
    4030:	4628      	mov	r0, r5
	}

	BT_DBG("Successfully parsed %u byte L2CAP packet", buf->len);

	bt_l2cap_recv(conn, buf);
}
    4032:	b004      	add	sp, #16
    4034:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		}

		if (buf->len > conn->rx_len) {
			BT_ERR("L2CAP data overflow");
			bt_conn_reset_rx_state(conn);
			net_buf_unref(buf);
    4038:	f00d bdc8 	b.w	11bcc <net_buf_unref>
			return;
		}

		BT_DBG("Cont, len %u rx_len %u", buf->len, conn->rx_len);

		if (buf->len > net_buf_tailroom(conn->rx)) {
    403c:	6900      	ldr	r0, [r0, #16]
    403e:	3008      	adds	r0, #8
    4040:	f00d fe20 	bl	11c84 <net_buf_simple_tailroom>
    4044:	4286      	cmp	r6, r0
    4046:	d908      	bls.n	405a <bt_conn_recv+0xa2>
			BT_ERR("Not enough buffer space for L2CAP data");
    4048:	4b22      	ldr	r3, [pc, #136]	; (40d4 <bt_conn_recv+0x11c>)
    404a:	9301      	str	r3, [sp, #4]
    404c:	4b22      	ldr	r3, [pc, #136]	; (40d8 <bt_conn_recv+0x120>)
    404e:	9300      	str	r3, [sp, #0]
    4050:	4a22      	ldr	r2, [pc, #136]	; (40dc <bt_conn_recv+0x124>)
    4052:	4b23      	ldr	r3, [pc, #140]	; (40e0 <bt_conn_recv+0x128>)
    4054:	4923      	ldr	r1, [pc, #140]	; (40e4 <bt_conn_recv+0x12c>)
    4056:	4827      	ldr	r0, [pc, #156]	; (40f4 <bt_conn_recv+0x13c>)
    4058:	e7e5      	b.n	4026 <bt_conn_recv+0x6e>
			bt_conn_reset_rx_state(conn);
			net_buf_unref(buf);
			return;
		}

		net_buf_add_mem(conn->rx, buf->data, buf->len);
    405a:	6920      	ldr	r0, [r4, #16]
    405c:	89aa      	ldrh	r2, [r5, #12]
    405e:	68a9      	ldr	r1, [r5, #8]
    4060:	3008      	adds	r0, #8
    4062:	f00d fdd9 	bl	11c18 <net_buf_simple_add_mem>
		conn->rx_len -= buf->len;
    4066:	89a3      	ldrh	r3, [r4, #12]
    4068:	89aa      	ldrh	r2, [r5, #12]
    406a:	1a9b      	subs	r3, r3, r2
    406c:	81a3      	strh	r3, [r4, #12]
		net_buf_unref(buf);
    406e:	4628      	mov	r0, r5
    4070:	f00d fdac 	bl	11bcc <net_buf_unref>

		if (conn->rx_len) {
    4074:	89a3      	ldrh	r3, [r4, #12]
    4076:	2b00      	cmp	r3, #0
    4078:	d129      	bne.n	40ce <bt_conn_recv+0x116>
			return;
		}

		buf = conn->rx;
    407a:	6925      	ldr	r5, [r4, #16]
		conn->rx = NULL;
		conn->rx_len = 0;
    407c:	81a3      	strh	r3, [r4, #12]
		if (conn->rx_len) {
			return;
		}

		buf = conn->rx;
		conn->rx = NULL;
    407e:	6123      	str	r3, [r4, #16]
		conn->rx_len = 0;

		break;
    4080:	e00b      	b.n	409a <bt_conn_recv+0xe2>
	default:
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
    4082:	4b14      	ldr	r3, [pc, #80]	; (40d4 <bt_conn_recv+0x11c>)
    4084:	9302      	str	r3, [sp, #8]
    4086:	4b14      	ldr	r3, [pc, #80]	; (40d8 <bt_conn_recv+0x120>)
    4088:	9201      	str	r2, [sp, #4]
    408a:	9300      	str	r3, [sp, #0]
    408c:	4a13      	ldr	r2, [pc, #76]	; (40dc <bt_conn_recv+0x124>)
    408e:	4b14      	ldr	r3, [pc, #80]	; (40e0 <bt_conn_recv+0x128>)
    4090:	4914      	ldr	r1, [pc, #80]	; (40e4 <bt_conn_recv+0x12c>)
    4092:	4819      	ldr	r0, [pc, #100]	; (40f8 <bt_conn_recv+0x140>)
    4094:	f7fd f9f4 	bl	1480 <printk>
    4098:	e7c7      	b.n	402a <bt_conn_recv+0x72>
		net_buf_unref(buf);
		return;
	}

	hdr = (void *)buf->data;
	len = sys_le16_to_cpu(hdr->len);
    409a:	68ab      	ldr	r3, [r5, #8]

	if (sizeof(*hdr) + len != buf->len) {
    409c:	89aa      	ldrh	r2, [r5, #12]
		net_buf_unref(buf);
		return;
	}

	hdr = (void *)buf->data;
	len = sys_le16_to_cpu(hdr->len);
    409e:	881b      	ldrh	r3, [r3, #0]

	if (sizeof(*hdr) + len != buf->len) {
    40a0:	1d19      	adds	r1, r3, #4
    40a2:	4291      	cmp	r1, r2
    40a4:	d00c      	beq.n	40c0 <bt_conn_recv+0x108>
		BT_ERR("ACL len mismatch (%u != %u)", len, buf->len);
    40a6:	490b      	ldr	r1, [pc, #44]	; (40d4 <bt_conn_recv+0x11c>)
    40a8:	9301      	str	r3, [sp, #4]
    40aa:	4b0b      	ldr	r3, [pc, #44]	; (40d8 <bt_conn_recv+0x120>)
    40ac:	9103      	str	r1, [sp, #12]
    40ae:	9202      	str	r2, [sp, #8]
    40b0:	9300      	str	r3, [sp, #0]
    40b2:	4a0a      	ldr	r2, [pc, #40]	; (40dc <bt_conn_recv+0x124>)
    40b4:	4b0a      	ldr	r3, [pc, #40]	; (40e0 <bt_conn_recv+0x128>)
    40b6:	490b      	ldr	r1, [pc, #44]	; (40e4 <bt_conn_recv+0x12c>)
    40b8:	4810      	ldr	r0, [pc, #64]	; (40fc <bt_conn_recv+0x144>)
    40ba:	f7fd f9e1 	bl	1480 <printk>
    40be:	e7b7      	b.n	4030 <bt_conn_recv+0x78>
		return;
	}

	BT_DBG("Successfully parsed %u byte L2CAP packet", buf->len);

	bt_l2cap_recv(conn, buf);
    40c0:	4629      	mov	r1, r5
    40c2:	4620      	mov	r0, r4
}
    40c4:	b004      	add	sp, #16
    40c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return;
	}

	BT_DBG("Successfully parsed %u byte L2CAP packet", buf->len);

	bt_l2cap_recv(conn, buf);
    40ca:	f000 be01 	b.w	4cd0 <bt_l2cap_recv>
}
    40ce:	b004      	add	sp, #16
    40d0:	bd70      	pop	{r4, r5, r6, pc}
    40d2:	bf00      	nop
    40d4:	00013df4 	.word	0x00013df4
    40d8:	00013df9 	.word	0x00013df9
    40dc:	00013db4 	.word	0x00013db4
    40e0:	00016178 	.word	0x00016178
    40e4:	00013dbb 	.word	0x00013dbb
    40e8:	00014551 	.word	0x00014551
    40ec:	0001457e 	.word	0x0001457e
    40f0:	000145ac 	.word	0x000145ac
    40f4:	000145d0 	.word	0x000145d0
    40f8:	00014607 	.word	0x00014607
    40fc:	00014635 	.word	0x00014635

00004100 <bt_conn_send_cb>:

int bt_conn_send_cb(struct bt_conn *conn, struct net_buf *buf,
		    bt_conn_tx_cb_t cb)
{
    4100:	b573      	push	{r0, r1, r4, r5, r6, lr}
    4102:	4605      	mov	r5, r0
	struct net_buf_pool *pool;

	BT_DBG("conn handle %u buf len %u cb %p", conn->handle, buf->len, cb);

	pool = net_buf_pool_get(buf->pool_id);
    4104:	7988      	ldrb	r0, [r1, #6]
	bt_l2cap_recv(conn, buf);
}

int bt_conn_send_cb(struct bt_conn *conn, struct net_buf *buf,
		    bt_conn_tx_cb_t cb)
{
    4106:	460c      	mov	r4, r1
    4108:	4616      	mov	r6, r2
	struct net_buf_pool *pool;

	BT_DBG("conn handle %u buf len %u cb %p", conn->handle, buf->len, cb);

	pool = net_buf_pool_get(buf->pool_id);
    410a:	f00d fce5 	bl	11ad8 <net_buf_pool_get>
	if (pool->user_data_size < BT_BUF_USER_DATA_MIN) {
    410e:	8b43      	ldrh	r3, [r0, #26]
    4110:	2b03      	cmp	r3, #3
    4112:	d80f      	bhi.n	4134 <bt_conn_send_cb+0x34>
		BT_ERR("Too small user data size");
    4114:	4b18      	ldr	r3, [pc, #96]	; (4178 <bt_conn_send_cb+0x78>)
    4116:	9301      	str	r3, [sp, #4]
    4118:	4b18      	ldr	r3, [pc, #96]	; (417c <bt_conn_send_cb+0x7c>)
    411a:	9300      	str	r3, [sp, #0]
    411c:	4a18      	ldr	r2, [pc, #96]	; (4180 <bt_conn_send_cb+0x80>)
    411e:	4b19      	ldr	r3, [pc, #100]	; (4184 <bt_conn_send_cb+0x84>)
    4120:	4919      	ldr	r1, [pc, #100]	; (4188 <bt_conn_send_cb+0x88>)
    4122:	481a      	ldr	r0, [pc, #104]	; (418c <bt_conn_send_cb+0x8c>)
    4124:	f7fd f9ac 	bl	1480 <printk>
		net_buf_unref(buf);
    4128:	4620      	mov	r0, r4
    412a:	f00d fd4f 	bl	11bcc <net_buf_unref>
		return -EINVAL;
    412e:	f06f 0015 	mvn.w	r0, #21
    4132:	e01f      	b.n	4174 <bt_conn_send_cb+0x74>
	}

	if (conn->state != BT_CONN_CONNECTED) {
    4134:	f895 3051 	ldrb.w	r3, [r5, #81]	; 0x51
    4138:	2b03      	cmp	r3, #3
    413a:	d00f      	beq.n	415c <bt_conn_send_cb+0x5c>
		BT_ERR("not connected!");
    413c:	4b0e      	ldr	r3, [pc, #56]	; (4178 <bt_conn_send_cb+0x78>)
    413e:	9301      	str	r3, [sp, #4]
    4140:	4b0e      	ldr	r3, [pc, #56]	; (417c <bt_conn_send_cb+0x7c>)
    4142:	9300      	str	r3, [sp, #0]
    4144:	4a0e      	ldr	r2, [pc, #56]	; (4180 <bt_conn_send_cb+0x80>)
    4146:	4b0f      	ldr	r3, [pc, #60]	; (4184 <bt_conn_send_cb+0x84>)
    4148:	490f      	ldr	r1, [pc, #60]	; (4188 <bt_conn_send_cb+0x88>)
    414a:	4811      	ldr	r0, [pc, #68]	; (4190 <bt_conn_send_cb+0x90>)
    414c:	f7fd f998 	bl	1480 <printk>
		net_buf_unref(buf);
    4150:	4620      	mov	r0, r4
    4152:	f00d fd3b 	bl	11bcc <net_buf_unref>
		return -ENOTCONN;
    4156:	f06f 0038 	mvn.w	r0, #56	; 0x38
    415a:	e00b      	b.n	4174 <bt_conn_send_cb+0x74>
	}

	conn_tx(buf)->cb = cb;
    415c:	89e3      	ldrh	r3, [r4, #14]
    415e:	4423      	add	r3, r4
    4160:	3313      	adds	r3, #19
    4162:	f023 0303 	bic.w	r3, r3, #3

	net_buf_put(&conn->tx_queue, buf);
    4166:	f105 0030 	add.w	r0, r5, #48	; 0x30
		BT_ERR("not connected!");
		net_buf_unref(buf);
		return -ENOTCONN;
	}

	conn_tx(buf)->cb = cb;
    416a:	601e      	str	r6, [r3, #0]

	net_buf_put(&conn->tx_queue, buf);
    416c:	4621      	mov	r1, r4
    416e:	f00d fd1f 	bl	11bb0 <net_buf_put>
	return 0;
    4172:	2000      	movs	r0, #0
}
    4174:	b002      	add	sp, #8
    4176:	bd70      	pop	{r4, r5, r6, pc}
    4178:	00013df4 	.word	0x00013df4
    417c:	00013df9 	.word	0x00013df9
    4180:	00013db4 	.word	0x00013db4
    4184:	00016128 	.word	0x00016128
    4188:	00013dbb 	.word	0x00013dbb
    418c:	00014119 	.word	0x00014119
    4190:	00014661 	.word	0x00014661

00004194 <bt_conn_notify_tx>:
	tx->cb = NULL;
	sys_slist_prepend(&free_tx, &tx->node);
}

void bt_conn_notify_tx(struct bt_conn *conn)
{
    4194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 * @param node A pointer on the node to prepend
 */
static inline void sys_slist_prepend(sys_slist_t *list,
				     sys_snode_t *node)
{
	node->next = list->head;
    4198:	4d0e      	ldr	r5, [pc, #56]	; (41d4 <bt_conn_notify_tx+0x40>)
    419a:	4606      	mov	r6, r0
	struct bt_conn_tx *tx;

	BT_DBG("conn %p", conn);

	while ((tx = k_fifo_get(&conn->tx_notify, K_NO_WAIT))) {
    419c:	f100 071c 	add.w	r7, r0, #28
    41a0:	f04f 0800 	mov.w	r8, #0
    41a4:	2100      	movs	r1, #0
    41a6:	4638      	mov	r0, r7
    41a8:	f00e fe04 	bl	12db4 <k_queue_get>
    41ac:	4604      	mov	r4, r0
    41ae:	b170      	cbz	r0, 41ce <bt_conn_notify_tx+0x3a>
		if (tx->cb) {
    41b0:	6863      	ldr	r3, [r4, #4]
    41b2:	b10b      	cbz	r3, 41b8 <bt_conn_notify_tx+0x24>
			tx->cb(conn);
    41b4:	4630      	mov	r0, r6
    41b6:	4798      	blx	r3
    41b8:	682b      	ldr	r3, [r5, #0]
    41ba:	6023      	str	r3, [r4, #0]
	list->head = node;

	if (!list->tail) {
    41bc:	686b      	ldr	r3, [r5, #4]
	return 0;
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
    41be:	f8c4 8004 	str.w	r8, [r4, #4]
 */
static inline void sys_slist_prepend(sys_slist_t *list,
				     sys_snode_t *node)
{
	node->next = list->head;
	list->head = node;
    41c2:	602c      	str	r4, [r5, #0]

	if (!list->tail) {
    41c4:	2b00      	cmp	r3, #0
    41c6:	d1ed      	bne.n	41a4 <bt_conn_notify_tx+0x10>
		list->tail = list->head;
    41c8:	4b02      	ldr	r3, [pc, #8]	; (41d4 <bt_conn_notify_tx+0x40>)
    41ca:	605c      	str	r4, [r3, #4]
    41cc:	e7e8      	b.n	41a0 <bt_conn_notify_tx+0xc>
			tx->cb(conn);
		}

		tx_free(tx);
	}
}
    41ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    41d2:	bf00      	nop
    41d4:	20000b44 	.word	0x20000b44

000041d8 <send_frag>:
	irq_unlock(key);
}

static bool send_frag(struct bt_conn *conn, struct net_buf *buf, u8_t flags,
		      bool always_consume)
{
    41d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    41da:	4604      	mov	r4, r0
    41dc:	b085      	sub	sp, #20
    41de:	460e      	mov	r6, r1

	BT_DBG("conn %p buf %p len %u flags 0x%02x", conn, buf, buf->len,
	       flags);

	/* Wait until the controller can accept ACL packets */
	k_sem_take(bt_conn_get_pkts(conn), K_FOREVER);
    41e0:	482c      	ldr	r0, [pc, #176]	; (4294 <send_frag+0xbc>)
    41e2:	f04f 31ff 	mov.w	r1, #4294967295
	irq_unlock(key);
}

static bool send_frag(struct bt_conn *conn, struct net_buf *buf, u8_t flags,
		      bool always_consume)
{
    41e6:	461d      	mov	r5, r3
    41e8:	4617      	mov	r7, r2

	BT_DBG("conn %p buf %p len %u flags 0x%02x", conn, buf, buf->len,
	       flags);

	/* Wait until the controller can accept ACL packets */
	k_sem_take(bt_conn_get_pkts(conn), K_FOREVER);
    41ea:	f00f f843 	bl	13274 <k_sem_take>

	/* Make sure we notify and free up any pending tx contexts */
	bt_conn_notify_tx(conn);
    41ee:	4620      	mov	r0, r4
    41f0:	f7ff ffd0 	bl	4194 <bt_conn_notify_tx>

	/* Check for disconnection while waiting for pkts_sem */
	if (conn->state != BT_CONN_CONNECTED) {
    41f4:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
    41f8:	2b03      	cmp	r3, #3
    41fa:	d13f      	bne.n	427c <send_frag+0xa4>
		goto fail;
	}

	hdr = net_buf_push(buf, sizeof(*hdr));
    41fc:	2104      	movs	r1, #4
    41fe:	f106 0008 	add.w	r0, r6, #8
    4202:	f00d fd1a 	bl	11c3a <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    4206:	8822      	ldrh	r2, [r4, #0]
    4208:	ea42 3207 	orr.w	r2, r2, r7, lsl #12
    420c:	8002      	strh	r2, [r0, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    420e:	89b3      	ldrh	r3, [r6, #12]
    4210:	3b04      	subs	r3, #4
    4212:	8043      	strh	r3, [r0, #2]
 *
 *  @return Pointer to the user data of the buffer.
 */
static inline void *net_buf_user_data(struct net_buf *buf)
{
	return (void *)ROUND_UP((buf->__buf + buf->size), sizeof(int));
    4214:	89f3      	ldrh	r3, [r6, #14]
    4216:	4433      	add	r3, r6
    4218:	3313      	adds	r3, #19
    421a:	f023 0303 	bic.w	r3, r3, #3
    421e:	2202      	movs	r2, #2

	cb = conn_tx(buf)->cb;
    4220:	681f      	ldr	r7, [r3, #0]
    4222:	701a      	strb	r2, [r3, #0]
	bt_buf_set_type(buf, BT_BUF_ACL_OUT);

	err = bt_send(buf);
    4224:	4630      	mov	r0, r6
    4226:	f7fe fc31 	bl	2a8c <bt_send>
	if (err) {
    422a:	b158      	cbz	r0, 4244 <send_frag+0x6c>
		BT_ERR("Unable to send to driver (err %d)", err);
    422c:	4b1a      	ldr	r3, [pc, #104]	; (4298 <send_frag+0xc0>)
    422e:	9302      	str	r3, [sp, #8]
    4230:	4b1a      	ldr	r3, [pc, #104]	; (429c <send_frag+0xc4>)
    4232:	9001      	str	r0, [sp, #4]
    4234:	9300      	str	r3, [sp, #0]
    4236:	4a1a      	ldr	r2, [pc, #104]	; (42a0 <send_frag+0xc8>)
    4238:	4b1a      	ldr	r3, [pc, #104]	; (42a4 <send_frag+0xcc>)
    423a:	491b      	ldr	r1, [pc, #108]	; (42a8 <send_frag+0xd0>)
    423c:	481b      	ldr	r0, [pc, #108]	; (42ac <send_frag+0xd4>)
    423e:	f7fd f91f 	bl	1480 <printk>
		goto fail;
    4242:	e01b      	b.n	427c <send_frag+0xa4>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list)
{
	sys_snode_t *node = list->head;
    4244:	4a1a      	ldr	r2, [pc, #104]	; (42b0 <send_frag+0xd8>)
    4246:	6813      	ldr	r3, [r2, #0]

	list->head = node->next;
	if (list->tail == node) {
    4248:	6850      	ldr	r0, [r2, #4]
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list)
{
	sys_snode_t *node = list->head;

	list->head = node->next;
    424a:	6819      	ldr	r1, [r3, #0]
    424c:	6011      	str	r1, [r2, #0]
	if (list->tail == node) {
    424e:	4283      	cmp	r3, r0
		list->tail = list->head;
    4250:	bf08      	it	eq
    4252:	6051      	streq	r1, [r2, #4]
	BT_DBG("conn %p cb %p", conn, cb);

	__ASSERT(!sys_slist_is_empty(&free_tx), "No free conn TX contexts");

	node = sys_slist_get_not_empty(&free_tx);
	CONTAINER_OF(node, struct bt_conn_tx, node)->cb = cb;
    4254:	605f      	str	r7, [r3, #4]
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M)
	unsigned int tmp;

	__asm__ volatile(
    4256:	f04f 0220 	mov.w	r2, #32
    425a:	f3ef 8111 	mrs	r1, BASEPRI
    425e:	f382 8811 	msr	BASEPRI, r2
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node)
{
	node->next = NULL;
    4262:	2200      	movs	r2, #0
    4264:	601a      	str	r2, [r3, #0]

	if (!list->tail) {
    4266:	69a2      	ldr	r2, [r4, #24]
    4268:	b912      	cbnz	r2, 4270 <send_frag+0x98>
		list->tail = node;
    426a:	61a3      	str	r3, [r4, #24]
		list->head = node;
    426c:	6163      	str	r3, [r4, #20]
    426e:	e001      	b.n	4274 <send_frag+0x9c>
	} else {
		list->tail->next = node;
    4270:	6013      	str	r3, [r2, #0]
		list->tail = node;
    4272:	61a3      	str	r3, [r4, #24]
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    4274:	f381 8811 	msr	BASEPRI, r1
		BT_ERR("Unable to send to driver (err %d)", err);
		goto fail;
	}

	add_pending_tx(conn, cb);
	return true;
    4278:	2001      	movs	r0, #1
    427a:	e009      	b.n	4290 <send_frag+0xb8>

fail:
	k_sem_give(bt_conn_get_pkts(conn));
    427c:	4805      	ldr	r0, [pc, #20]	; (4294 <send_frag+0xbc>)
    427e:	f00e ffb7 	bl	131f0 <k_sem_give>
	if (always_consume) {
    4282:	b125      	cbz	r5, 428e <send_frag+0xb6>
		net_buf_unref(buf);
    4284:	4630      	mov	r0, r6
    4286:	f00d fca1 	bl	11bcc <net_buf_unref>
	}
	return false;
    428a:	2000      	movs	r0, #0
    428c:	e000      	b.n	4290 <send_frag+0xb8>
    428e:	4628      	mov	r0, r5
}
    4290:	b005      	add	sp, #20
    4292:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4294:	20000334 	.word	0x20000334
    4298:	00013df4 	.word	0x00013df4
    429c:	00013df9 	.word	0x00013df9
    42a0:	00013db4 	.word	0x00013db4
    42a4:	0001616e 	.word	0x0001616e
    42a8:	00013dbb 	.word	0x00013dbb
    42ac:	0001403c 	.word	0x0001403c
    42b0:	20000b44 	.word	0x20000b44

000042b4 <bt_conn_prepare_events>:
	 */
	bt_conn_unref(conn);
}

int bt_conn_prepare_events(struct k_poll_event events[])
{
    42b4:	b538      	push	{r3, r4, r5, lr}
	int i, ev_count = 0;

	BT_DBG("");

	conn_change.signaled = 0;
    42b6:	4b1f      	ldr	r3, [pc, #124]	; (4334 <bt_conn_prepare_events+0x80>)
    42b8:	2200      	movs	r2, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    42ba:	2101      	movs	r1, #1
{
	int i, ev_count = 0;

	BT_DBG("");

	conn_change.signaled = 0;
    42bc:	605a      	str	r2, [r3, #4]
	 */
	bt_conn_unref(conn);
}

int bt_conn_prepare_events(struct k_poll_event events[])
{
    42be:	4605      	mov	r5, r0
	int i, ev_count = 0;

	BT_DBG("");

	conn_change.signaled = 0;
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    42c0:	f00e fb5c 	bl	1297c <k_poll_event_init>
 * @return Value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    42c4:	f3bf 8f5f 	dmb	sy
    42c8:	481b      	ldr	r0, [pc, #108]	; (4338 <bt_conn_prepare_events+0x84>)
    42ca:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    42cc:	f3bf 8f5f 	dmb	sy
    42d0:	4602      	mov	r2, r0
			  K_POLL_MODE_NOTIFY_ONLY, &conn_change);

	for (i = 0; i < ARRAY_SIZE(conns); i++) {
		struct bt_conn *conn = &conns[i];

		if (!atomic_get(&conn->ref)) {
    42d2:	b1a3      	cbz	r3, 42fe <bt_conn_prepare_events+0x4a>
			continue;
		}

		if (conn->state == BT_CONN_DISCONNECTED &&
    42d4:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
    42d8:	b99b      	cbnz	r3, 4302 <bt_conn_prepare_events+0x4e>
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    42da:	f3bf 8f5f 	dmb	sy
    42de:	1d03      	adds	r3, r0, #4
    42e0:	e853 1f00 	ldrex	r1, [r3]
    42e4:	f021 0440 	bic.w	r4, r1, #64	; 0x40
    42e8:	e843 4e00 	strex	lr, r4, [r3]
    42ec:	f1be 0f00 	cmp.w	lr, #0
    42f0:	d1f6      	bne.n	42e0 <bt_conn_prepare_events+0x2c>
    42f2:	f3bf 8f5f 	dmb	sy
    42f6:	064b      	lsls	r3, r1, #25
    42f8:	d503      	bpl.n	4302 <bt_conn_prepare_events+0x4e>
		    atomic_test_and_clear_bit(conn->flags, BT_CONN_CLEANUP)) {
			conn_cleanup(conn);
    42fa:	f7ff fdb3 	bl	3e64 <conn_cleanup>
			continue;
    42fe:	2001      	movs	r0, #1
    4300:	bd38      	pop	{r3, r4, r5, pc}
		}

		if (conn->state != BT_CONN_CONNECTED) {
    4302:	f892 4051 	ldrb.w	r4, [r2, #81]	; 0x51
    4306:	2c03      	cmp	r4, #3
    4308:	d1f9      	bne.n	42fe <bt_conn_prepare_events+0x4a>
			continue;
		}

		BT_DBG("Adding conn %p to poll list", conn);

		k_poll_event_init(&events[ev_count],
    430a:	f105 000c 	add.w	r0, r5, #12
    430e:	4b0b      	ldr	r3, [pc, #44]	; (433c <bt_conn_prepare_events+0x88>)
    4310:	2200      	movs	r2, #0
    4312:	2104      	movs	r1, #4
    4314:	f00e fb32 	bl	1297c <k_poll_event_init>
				  K_POLL_TYPE_FIFO_DATA_AVAILABLE,
				  K_POLL_MODE_NOTIFY_ONLY,
				  &conn->tx_queue);
		events[ev_count++].tag = BT_EVENT_CONN_TX_QUEUE;
    4318:	2302      	movs	r3, #2
    431a:	742b      	strb	r3, [r5, #16]

		k_poll_event_init(&events[ev_count],
    431c:	f105 0018 	add.w	r0, r5, #24
    4320:	4b07      	ldr	r3, [pc, #28]	; (4340 <bt_conn_prepare_events+0x8c>)
    4322:	2200      	movs	r2, #0
    4324:	2104      	movs	r1, #4
    4326:	f00e fb29 	bl	1297c <k_poll_event_init>
				  K_POLL_TYPE_FIFO_DATA_AVAILABLE,
				  K_POLL_MODE_NOTIFY_ONLY,
				  &conn->tx_notify);
		events[ev_count++].tag = BT_EVENT_CONN_TX_NOTIFY;
    432a:	2301      	movs	r3, #1
    432c:	772b      	strb	r3, [r5, #28]
    432e:	4620      	mov	r0, r4
	}

	return ev_count;
}
    4330:	bd38      	pop	{r3, r4, r5, pc}
    4332:	bf00      	nop
    4334:	20000b4c 	.word	0x20000b4c
    4338:	20000b6c 	.word	0x20000b6c
    433c:	20000b9c 	.word	0x20000b9c
    4340:	20000b88 	.word	0x20000b88

00004344 <bt_conn_add_le>:
		net_buf_unref(buf);
	}
}

struct bt_conn *bt_conn_add_le(const bt_addr_le_t *peer)
{
    4344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * @return Value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    4346:	4c19      	ldr	r4, [pc, #100]	; (43ac <bt_conn_add_le+0x68>)
    4348:	f3bf 8f5f 	dmb	sy
    434c:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
    434e:	f3bf 8f5f 	dmb	sy
    4352:	4607      	mov	r7, r0
{
	struct bt_conn *conn = NULL;
	int i;

	for (i = 0; i < ARRAY_SIZE(conns); i++) {
		if (!atomic_get(&conns[i].ref)) {
    4354:	b10d      	cbz	r5, 435a <bt_conn_add_le+0x16>
struct bt_conn *bt_conn_add_le(const bt_addr_le_t *peer)
{
	struct bt_conn *conn = conn_new();

	if (!conn) {
		return NULL;
    4356:	2000      	movs	r0, #0
    4358:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

	if (!conn) {
		return NULL;
	}

	memset(conn, 0, sizeof(*conn));
    435a:	22a8      	movs	r2, #168	; 0xa8
    435c:	4629      	mov	r1, r5
    435e:	4620      	mov	r0, r4
    4360:	f7fc fec3 	bl	10ea <memset>
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    4364:	f3bf 8f5f 	dmb	sy
    4368:	f104 034c 	add.w	r3, r4, #76	; 0x4c
    436c:	2601      	movs	r6, #1
    436e:	e853 2f00 	ldrex	r2, [r3]
    4372:	e843 6100 	strex	r1, r6, [r3]
    4376:	2900      	cmp	r1, #0
    4378:	d1f9      	bne.n	436e <bt_conn_add_le+0x2a>
    437a:	f3bf 8f5f 	dmb	sy
    437e:	2207      	movs	r2, #7
    4380:	4639      	mov	r1, r7
    4382:	f104 0054 	add.w	r0, r4, #84	; 0x54
    4386:	f7fc fe84 	bl	1092 <memcpy>
#if defined(CONFIG_BLUETOOTH_SMP)
	conn->sec_level = BT_SECURITY_LOW;
	conn->required_sec_level = BT_SECURITY_LOW;
#endif /* CONFIG_BLUETOOTH_SMP */
	conn->type = BT_CONN_TYPE_LE;
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    438a:	2318      	movs	r3, #24
    438c:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;
    4390:	2328      	movs	r3, #40	; 0x28
	k_delayed_work_init(&conn->le.update_work, le_conn_update);
    4392:	f104 0080 	add.w	r0, r4, #128	; 0x80
		return NULL;
	}

	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BLUETOOTH_SMP)
	conn->sec_level = BT_SECURITY_LOW;
    4396:	7226      	strb	r6, [r4, #8]
	conn->required_sec_level = BT_SECURITY_LOW;
    4398:	7266      	strb	r6, [r4, #9]
#endif /* CONFIG_BLUETOOTH_SMP */
	conn->type = BT_CONN_TYPE_LE;
    439a:	70a5      	strb	r5, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;
    439c:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
	k_delayed_work_init(&conn->le.update_work, le_conn_update);
    43a0:	4903      	ldr	r1, [pc, #12]	; (43b0 <bt_conn_add_le+0x6c>)
    43a2:	f00f fa1f 	bl	137e4 <k_delayed_work_init>
	struct bt_conn *conn = NULL;
	int i;

	for (i = 0; i < ARRAY_SIZE(conns); i++) {
		if (!atomic_get(&conns[i].ref)) {
			conn = &conns[i];
    43a6:	4620      	mov	r0, r4
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;
	k_delayed_work_init(&conn->le.update_work, le_conn_update);

	return conn;
}
    43a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    43aa:	bf00      	nop
    43ac:	20000b6c 	.word	0x20000b6c
    43b0:	00004755 	.word	0x00004755

000043b4 <bt_conn_set_state>:
		k_sem_give(bt_conn_get_pkts(conn));
	}
}

void bt_conn_set_state(struct bt_conn *conn, bt_conn_state_t state)
{
    43b4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	bt_conn_state_t old_state;

	BT_DBG("%s -> %s", state2str(conn->state), state2str(state));

	if (conn->state == state) {
    43b6:	f890 5051 	ldrb.w	r5, [r0, #81]	; 0x51
    43ba:	428d      	cmp	r5, r1
		k_sem_give(bt_conn_get_pkts(conn));
	}
}

void bt_conn_set_state(struct bt_conn *conn, bt_conn_state_t state)
{
    43bc:	4604      	mov	r4, r0
    43be:	460e      	mov	r6, r1
	bt_conn_state_t old_state;

	BT_DBG("%s -> %s", state2str(conn->state), state2str(state));

	if (conn->state == state) {
    43c0:	d10a      	bne.n	43d8 <bt_conn_set_state+0x24>
		BT_WARN("no transition");
    43c2:	4b50      	ldr	r3, [pc, #320]	; (4504 <bt_conn_set_state+0x150>)
    43c4:	9301      	str	r3, [sp, #4]
    43c6:	4b50      	ldr	r3, [pc, #320]	; (4508 <bt_conn_set_state+0x154>)
    43c8:	9300      	str	r3, [sp, #0]
    43ca:	4a50      	ldr	r2, [pc, #320]	; (450c <bt_conn_set_state+0x158>)
    43cc:	4b50      	ldr	r3, [pc, #320]	; (4510 <bt_conn_set_state+0x15c>)
    43ce:	4951      	ldr	r1, [pc, #324]	; (4514 <bt_conn_set_state+0x160>)
    43d0:	4851      	ldr	r0, [pc, #324]	; (4518 <bt_conn_set_state+0x164>)
    43d2:	f7fd f855 	bl	1480 <printk>
		return;
    43d6:	e093      	b.n	4500 <bt_conn_set_state+0x14c>
	}

	old_state = conn->state;
	conn->state = state;
    43d8:	f884 1051 	strb.w	r1, [r4, #81]	; 0x51

	/* Actions needed for exiting the old state */
	switch (old_state) {
    43dc:	b915      	cbnz	r5, 43e4 <bt_conn_set_state+0x30>
	}
}

struct bt_conn *bt_conn_ref(struct bt_conn *conn)
{
	atomic_inc(&conn->ref);
    43de:	304c      	adds	r0, #76	; 0x4c
    43e0:	f7ff fd55 	bl	3e8e <atomic_inc>
	default:
		break;
	}

	/* Actions needed for entering the new state */
	switch (conn->state) {
    43e4:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
    43e8:	2b04      	cmp	r3, #4
    43ea:	d87e      	bhi.n	44ea <bt_conn_set_state+0x136>
    43ec:	e8df f003 	tbb	[pc, r3]
    43f0:	0388881f 	.word	0x0388881f
    43f4:	88          	.byte	0x88
    43f5:	00          	.byte	0x00
	case BT_CONN_CONNECTED:
		if (conn->type == BT_CONN_TYPE_SCO) {
    43f6:	78a3      	ldrb	r3, [r4, #2]
    43f8:	2b02      	cmp	r3, #2
    43fa:	f000 8081 	beq.w	4500 <bt_conn_set_state+0x14c>
			/* TODO: Notify sco connected */
			break;
		}
		k_fifo_init(&conn->tx_queue);
    43fe:	f104 0030 	add.w	r0, r4, #48	; 0x30
    4402:	f00e fc3b 	bl	12c7c <k_queue_init>
		k_fifo_init(&conn->tx_notify);
    4406:	f104 001c 	add.w	r0, r4, #28
    440a:	f00e fc37 	bl	12c7c <k_queue_init>
		k_poll_signal(&conn_change, 0);
    440e:	2100      	movs	r1, #0
    4410:	4842      	ldr	r0, [pc, #264]	; (451c <bt_conn_set_state+0x168>)
    4412:	f00e fba7 	bl	12b64 <k_poll_signal>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    4416:	2300      	movs	r3, #0

		sys_slist_init(&conn->channels);

		bt_l2cap_connected(conn);
    4418:	4620      	mov	r0, r4
    441a:	6463      	str	r3, [r4, #68]	; 0x44
	list->tail = NULL;
    441c:	64a3      	str	r3, [r4, #72]	; 0x48
    441e:	f000 fb3b 	bl	4a98 <bt_l2cap_connected>
		notify_connected(conn);
    4422:	4620      	mov	r0, r4
	default:
		BT_WARN("no valid (%u) state was set", state);

		break;
	}
}
    4424:	b004      	add	sp, #16
    4426:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		k_poll_signal(&conn_change, 0);

		sys_slist_init(&conn->channels);

		bt_l2cap_connected(conn);
		notify_connected(conn);
    442a:	f7ff bcf3 	b.w	3e14 <notify_connected>
		break;
	case BT_CONN_DISCONNECTED:
		if (conn->type == BT_CONN_TYPE_SCO) {
    442e:	78a3      	ldrb	r3, [r4, #2]
    4430:	2b02      	cmp	r3, #2
    4432:	d04c      	beq.n	44ce <bt_conn_set_state+0x11a>
		}
		/* Notify disconnection and queue a dummy buffer to wake
		 * up and stop the tx thread for states where it was
		 * running.
		 */
		if (old_state == BT_CONN_CONNECTED ||
    4434:	1eeb      	subs	r3, r5, #3
    4436:	2b01      	cmp	r3, #1
    4438:	d844      	bhi.n	44c4 <bt_conn_set_state+0x110>
		    old_state == BT_CONN_DISCONNECT) {
			bt_l2cap_disconnected(conn);
    443a:	4620      	mov	r0, r4
    443c:	f000 fb64 	bl	4b08 <bt_l2cap_disconnected>

static void notify_disconnected(struct bt_conn *conn)
{
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    4440:	4b37      	ldr	r3, [pc, #220]	; (4520 <bt_conn_set_state+0x16c>)
    4442:	681d      	ldr	r5, [r3, #0]
    4444:	b13d      	cbz	r5, 4456 <bt_conn_set_state+0xa2>
		if (cb->disconnected) {
    4446:	686b      	ldr	r3, [r5, #4]
    4448:	b11b      	cbz	r3, 4452 <bt_conn_set_state+0x9e>
			cb->disconnected(conn, conn->err);
    444a:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
    444e:	4620      	mov	r0, r4
    4450:	4798      	blx	r3

static void notify_disconnected(struct bt_conn *conn)
{
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    4452:	69ad      	ldr	r5, [r5, #24]
    4454:	e7f6      	b.n	4444 <bt_conn_set_state+0x90>
 * @param node A pointer on the node to prepend
 */
static inline void sys_slist_prepend(sys_slist_t *list,
				     sys_snode_t *node)
{
	node->next = list->head;
    4456:	4e33      	ldr	r6, [pc, #204]	; (4524 <bt_conn_set_state+0x170>)
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M)
	unsigned int tmp;

	__asm__ volatile(
    4458:	f04f 0320 	mov.w	r3, #32
    445c:	f3ef 8111 	mrs	r1, BASEPRI
    4460:	f383 8811 	msr	BASEPRI, r3
    4464:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list)
{
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
    4466:	b12b      	cbz	r3, 4474 <bt_conn_set_state+0xc0>
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list)
{
	sys_snode_t *node = list->head;

	list->head = node->next;
	if (list->tail == node) {
    4468:	69a0      	ldr	r0, [r4, #24]
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list)
{
	sys_snode_t *node = list->head;

	list->head = node->next;
    446a:	681a      	ldr	r2, [r3, #0]
    446c:	6162      	str	r2, [r4, #20]
	if (list->tail == node) {
    446e:	4283      	cmp	r3, r0
		list->tail = list->head;
    4470:	bf08      	it	eq
    4472:	61a2      	streq	r2, [r4, #24]
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    4474:	f381 8811 	msr	BASEPRI, r1

		key = irq_lock();
		node = sys_slist_get(&conn->tx_pending);
		irq_unlock(key);

		if (!node) {
    4478:	b153      	cbz	r3, 4490 <bt_conn_set_state+0xdc>
 * @param node A pointer on the node to prepend
 */
static inline void sys_slist_prepend(sys_slist_t *list,
				     sys_snode_t *node)
{
	node->next = list->head;
    447a:	6832      	ldr	r2, [r6, #0]
    447c:	601a      	str	r2, [r3, #0]
	list->head = node;

	if (!list->tail) {
    447e:	6872      	ldr	r2, [r6, #4]
	return 0;
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
    4480:	605d      	str	r5, [r3, #4]
 */
static inline void sys_slist_prepend(sys_slist_t *list,
				     sys_snode_t *node)
{
	node->next = list->head;
	list->head = node;
    4482:	6033      	str	r3, [r6, #0]

	if (!list->tail) {
    4484:	b902      	cbnz	r2, 4488 <bt_conn_set_state+0xd4>
		list->tail = list->head;
    4486:	6073      	str	r3, [r6, #4]
			break;
		}

		tx_free(CONTAINER_OF(node, struct bt_conn_tx, node));

		k_sem_give(bt_conn_get_pkts(conn));
    4488:	4827      	ldr	r0, [pc, #156]	; (4528 <bt_conn_set_state+0x174>)
    448a:	f00e feb1 	bl	131f0 <k_sem_give>
    448e:	e7e3      	b.n	4458 <bt_conn_set_state+0xa4>
			bt_l2cap_disconnected(conn);
			notify_disconnected(conn);
			process_unack_tx(conn);

			/* Cancel Connection Update if it is pending */
			if (conn->type == BT_CONN_TYPE_LE) {
    4490:	78a3      	ldrb	r3, [r4, #2]
    4492:	b91b      	cbnz	r3, 449c <bt_conn_set_state+0xe8>
				k_delayed_work_cancel(&conn->le.update_work);
    4494:	f104 0080 	add.w	r0, r4, #128	; 0x80
    4498:	f00f f9c2 	bl	13820 <k_delayed_work_cancel>
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    449c:	f3bf 8f5f 	dmb	sy
    44a0:	3404      	adds	r4, #4
    44a2:	e854 3f00 	ldrex	r3, [r4]
    44a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    44aa:	e844 3200 	strex	r2, r3, [r4]
    44ae:	2a00      	cmp	r2, #0
    44b0:	d1f7      	bne.n	44a2 <bt_conn_set_state+0xee>
    44b2:	f3bf 8f5f 	dmb	sy
			}

			atomic_set_bit(conn->flags, BT_CONN_CLEANUP);
			k_poll_signal(&conn_change, 0);
    44b6:	4819      	ldr	r0, [pc, #100]	; (451c <bt_conn_set_state+0x168>)
    44b8:	2100      	movs	r1, #0
	default:
		BT_WARN("no valid (%u) state was set", state);

		break;
	}
}
    44ba:	b004      	add	sp, #16
    44bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			if (conn->type == BT_CONN_TYPE_LE) {
				k_delayed_work_cancel(&conn->le.update_work);
			}

			atomic_set_bit(conn->flags, BT_CONN_CLEANUP);
			k_poll_signal(&conn_change, 0);
    44c0:	f00e bb50 	b.w	12b64 <k_poll_signal>
			/* The last ref will be dropped by the tx_thread */
		} else if (old_state == BT_CONN_CONNECT) {
    44c4:	2d02      	cmp	r5, #2
    44c6:	d109      	bne.n	44dc <bt_conn_set_state+0x128>
			/* conn->err will be set in this case */
			notify_connected(conn);
    44c8:	4620      	mov	r0, r4
    44ca:	f7ff fca3 	bl	3e14 <notify_connected>
	return conn;
}

void bt_conn_unref(struct bt_conn *conn)
{
	atomic_dec(&conn->ref);
    44ce:	f104 004c 	add.w	r0, r4, #76	; 0x4c
	default:
		BT_WARN("no valid (%u) state was set", state);

		break;
	}
}
    44d2:	b004      	add	sp, #16
    44d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return conn;
}

void bt_conn_unref(struct bt_conn *conn)
{
	atomic_dec(&conn->ref);
    44d8:	f7ff bcb7 	b.w	3e4a <atomic_dec>
			/* The last ref will be dropped by the tx_thread */
		} else if (old_state == BT_CONN_CONNECT) {
			/* conn->err will be set in this case */
			notify_connected(conn);
			bt_conn_unref(conn);
		} else if (old_state == BT_CONN_CONNECT_SCAN) {
    44dc:	2d01      	cmp	r5, #1
    44de:	d10f      	bne.n	4500 <bt_conn_set_state+0x14c>
			/* this indicate LE Create Connection failed */
			if (conn->err) {
    44e0:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
    44e4:	2b00      	cmp	r3, #0
    44e6:	d0f2      	beq.n	44ce <bt_conn_set_state+0x11a>
    44e8:	e7ee      	b.n	44c8 <bt_conn_set_state+0x114>

		break;
	case BT_CONN_DISCONNECT:
		break;
	default:
		BT_WARN("no valid (%u) state was set", state);
    44ea:	4b06      	ldr	r3, [pc, #24]	; (4504 <bt_conn_set_state+0x150>)
    44ec:	9302      	str	r3, [sp, #8]
    44ee:	4b06      	ldr	r3, [pc, #24]	; (4508 <bt_conn_set_state+0x154>)
    44f0:	9300      	str	r3, [sp, #0]
    44f2:	9601      	str	r6, [sp, #4]
    44f4:	4b06      	ldr	r3, [pc, #24]	; (4510 <bt_conn_set_state+0x15c>)
    44f6:	4a05      	ldr	r2, [pc, #20]	; (450c <bt_conn_set_state+0x158>)
    44f8:	4906      	ldr	r1, [pc, #24]	; (4514 <bt_conn_set_state+0x160>)
    44fa:	480c      	ldr	r0, [pc, #48]	; (452c <bt_conn_set_state+0x178>)
    44fc:	f7fc ffc0 	bl	1480 <printk>

		break;
	}
}
    4500:	b004      	add	sp, #16
    4502:	bd70      	pop	{r4, r5, r6, pc}
    4504:	00013df4 	.word	0x00013df4
    4508:	00013e3f 	.word	0x00013e3f
    450c:	00013e01 	.word	0x00013e01
    4510:	0001615c 	.word	0x0001615c
    4514:	00013dbb 	.word	0x00013dbb
    4518:	00014680 	.word	0x00014680
    451c:	20000b4c 	.word	0x20000b4c
    4520:	20000b68 	.word	0x20000b68
    4524:	20000b44 	.word	0x20000b44
    4528:	20000334 	.word	0x20000334
    452c:	0001469e 	.word	0x0001469e

00004530 <bt_conn_lookup_handle>:

struct bt_conn *bt_conn_lookup_handle(u16_t handle)
{
    4530:	b510      	push	{r4, lr}
 * @return Value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    4532:	4c0c      	ldr	r4, [pc, #48]	; (4564 <bt_conn_lookup_handle+0x34>)
    4534:	f3bf 8f5f 	dmb	sy
    4538:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    453a:	f3bf 8f5f 	dmb	sy
	int i;

	for (i = 0; i < ARRAY_SIZE(conns); i++) {
		if (!atomic_get(&conns[i].ref)) {
    453e:	b16b      	cbz	r3, 455c <bt_conn_lookup_handle+0x2c>
			continue;
		}

		/* We only care about connections with a valid handle */
		if (conns[i].state != BT_CONN_CONNECTED &&
    4540:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
    4544:	3b03      	subs	r3, #3
    4546:	2b01      	cmp	r3, #1
    4548:	d80a      	bhi.n	4560 <bt_conn_lookup_handle+0x30>
		    conns[i].state != BT_CONN_DISCONNECT) {
			continue;
		}

		if (conns[i].handle == handle) {
    454a:	8823      	ldrh	r3, [r4, #0]
    454c:	4283      	cmp	r3, r0
    454e:	d107      	bne.n	4560 <bt_conn_lookup_handle+0x30>
	}
}

struct bt_conn *bt_conn_ref(struct bt_conn *conn)
{
	atomic_inc(&conn->ref);
    4550:	f104 004c 	add.w	r0, r4, #76	; 0x4c
    4554:	f7ff fc9b 	bl	3e8e <atomic_inc>
		    conns[i].state != BT_CONN_DISCONNECT) {
			continue;
		}

		if (conns[i].handle == handle) {
			return bt_conn_ref(&conns[i]);
    4558:	4620      	mov	r0, r4
    455a:	bd10      	pop	{r4, pc}
			return bt_conn_ref(&sco_conns[i]);
		}
	}
#endif

	return NULL;
    455c:	4618      	mov	r0, r3
    455e:	bd10      	pop	{r4, pc}
    4560:	2000      	movs	r0, #0
}
    4562:	bd10      	pop	{r4, pc}
    4564:	20000b6c 	.word	0x20000b6c

00004568 <bt_conn_addr_le_cmp>:

int bt_conn_addr_le_cmp(const struct bt_conn *conn, const bt_addr_le_t *peer)
{
    4568:	b538      	push	{r3, r4, r5, lr}
    456a:	460d      	mov	r5, r1
    456c:	4604      	mov	r4, r0
	return memcmp(a, b, sizeof(*a));
}

static inline int bt_addr_le_cmp(const bt_addr_le_t *a, const bt_addr_le_t *b)
{
	return memcmp(a, b, sizeof(*a));
    456e:	f100 0154 	add.w	r1, r0, #84	; 0x54
    4572:	2207      	movs	r2, #7
    4574:	4628      	mov	r0, r5
    4576:	f7fc fd5c 	bl	1032 <memcmp>
	/* Check against conn dst address as it may be the identity address */
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
    457a:	b160      	cbz	r0, 4596 <bt_conn_addr_le_cmp+0x2e>
		return 0;
	}

	/* Check against initial connection address */
	if (conn->role == BT_HCI_ROLE_MASTER) {
    457c:	78e3      	ldrb	r3, [r4, #3]
    457e:	2207      	movs	r2, #7
    4580:	b913      	cbnz	r3, 4588 <bt_conn_addr_le_cmp+0x20>
    4582:	f104 0162 	add.w	r1, r4, #98	; 0x62
    4586:	e001      	b.n	458c <bt_conn_addr_le_cmp+0x24>
    4588:	f104 015b 	add.w	r1, r4, #91	; 0x5b
    458c:	4628      	mov	r0, r5
		return bt_addr_le_cmp(peer, &conn->le.resp_addr);
	}

	return bt_addr_le_cmp(peer, &conn->le.init_addr);
}
    458e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    4592:	f7fc bd4e 	b.w	1032 <memcmp>
    4596:	bd38      	pop	{r3, r4, r5, pc}

00004598 <bt_conn_lookup_addr_le>:

struct bt_conn *bt_conn_lookup_addr_le(const bt_addr_le_t *peer)
{
    4598:	b510      	push	{r4, lr}
    459a:	4c0b      	ldr	r4, [pc, #44]	; (45c8 <bt_conn_lookup_addr_le+0x30>)
    459c:	f3bf 8f5f 	dmb	sy
    45a0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    45a2:	f3bf 8f5f 	dmb	sy
    45a6:	4601      	mov	r1, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(conns); i++) {
		if (!atomic_get(&conns[i].ref)) {
    45a8:	b15b      	cbz	r3, 45c2 <bt_conn_lookup_addr_le+0x2a>
			continue;
		}

		if (conns[i].type != BT_CONN_TYPE_LE) {
    45aa:	78a3      	ldrb	r3, [r4, #2]
    45ac:	b94b      	cbnz	r3, 45c2 <bt_conn_lookup_addr_le+0x2a>
			continue;
		}

		if (!bt_conn_addr_le_cmp(&conns[i], peer)) {
    45ae:	4620      	mov	r0, r4
    45b0:	f7ff ffda 	bl	4568 <bt_conn_addr_le_cmp>
    45b4:	b928      	cbnz	r0, 45c2 <bt_conn_lookup_addr_le+0x2a>
	}
}

struct bt_conn *bt_conn_ref(struct bt_conn *conn)
{
	atomic_inc(&conn->ref);
    45b6:	f104 004c 	add.w	r0, r4, #76	; 0x4c
    45ba:	f7ff fc68 	bl	3e8e <atomic_inc>

		if (conns[i].type != BT_CONN_TYPE_LE) {
			continue;
		}

		if (!bt_conn_addr_le_cmp(&conns[i], peer)) {
    45be:	4620      	mov	r0, r4
			return bt_conn_ref(&conns[i]);
    45c0:	bd10      	pop	{r4, pc}
		}
	}

	return NULL;
    45c2:	2000      	movs	r0, #0
}
    45c4:	bd10      	pop	{r4, pc}
    45c6:	bf00      	nop
    45c8:	20000b6c 	.word	0x20000b6c

000045cc <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
    45cc:	b538      	push	{r3, r4, r5, lr}
    45ce:	4c0e      	ldr	r4, [pc, #56]	; (4608 <bt_conn_lookup_state_le+0x3c>)
    45d0:	f3bf 8f5f 	dmb	sy
    45d4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    45d6:	f3bf 8f5f 	dmb	sy
    45da:	460d      	mov	r5, r1
	int i;

	for (i = 0; i < ARRAY_SIZE(conns); i++) {
		if (!atomic_get(&conns[i].ref)) {
    45dc:	b18b      	cbz	r3, 4602 <bt_conn_lookup_state_le+0x36>
			continue;
		}

		if (conns[i].type != BT_CONN_TYPE_LE) {
    45de:	78a3      	ldrb	r3, [r4, #2]
    45e0:	b97b      	cbnz	r3, 4602 <bt_conn_lookup_state_le+0x36>
			continue;
		}

		if (peer && bt_conn_addr_le_cmp(&conns[i], peer)) {
    45e2:	b940      	cbnz	r0, 45f6 <bt_conn_lookup_state_le+0x2a>
			continue;
		}

		if (conns[i].state == state) {
    45e4:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
    45e8:	42ab      	cmp	r3, r5
    45ea:	d10a      	bne.n	4602 <bt_conn_lookup_state_le+0x36>
	}
}

struct bt_conn *bt_conn_ref(struct bt_conn *conn)
{
	atomic_inc(&conn->ref);
    45ec:	4807      	ldr	r0, [pc, #28]	; (460c <bt_conn_lookup_state_le+0x40>)
    45ee:	f7ff fc4e 	bl	3e8e <atomic_inc>
		if (peer && bt_conn_addr_le_cmp(&conns[i], peer)) {
			continue;
		}

		if (conns[i].state == state) {
			return bt_conn_ref(&conns[i]);
    45f2:	4805      	ldr	r0, [pc, #20]	; (4608 <bt_conn_lookup_state_le+0x3c>)
    45f4:	bd38      	pop	{r3, r4, r5, pc}

		if (conns[i].type != BT_CONN_TYPE_LE) {
			continue;
		}

		if (peer && bt_conn_addr_le_cmp(&conns[i], peer)) {
    45f6:	4601      	mov	r1, r0
    45f8:	4620      	mov	r0, r4
    45fa:	f7ff ffb5 	bl	4568 <bt_conn_addr_le_cmp>
    45fe:	2800      	cmp	r0, #0
    4600:	d0f0      	beq.n	45e4 <bt_conn_lookup_state_le+0x18>
		if (conns[i].state == state) {
			return bt_conn_ref(&conns[i]);
		}
	}

	return NULL;
    4602:	2000      	movs	r0, #0
}
    4604:	bd38      	pop	{r3, r4, r5, pc}
    4606:	bf00      	nop
    4608:	20000b6c 	.word	0x20000b6c
    460c:	20000bb8 	.word	0x20000bb8

00004610 <bt_conn_ref>:
		}
	}
}

struct bt_conn *bt_conn_ref(struct bt_conn *conn)
{
    4610:	b510      	push	{r4, lr}
    4612:	4604      	mov	r4, r0
	atomic_inc(&conn->ref);
    4614:	304c      	adds	r0, #76	; 0x4c
    4616:	f7ff fc3a 	bl	3e8e <atomic_inc>

	BT_DBG("handle %u ref %u", conn->handle, atomic_get(&conn->ref));

	return conn;
}
    461a:	4620      	mov	r0, r4
    461c:	bd10      	pop	{r4, pc}

0000461e <bt_conn_unref>:

void bt_conn_unref(struct bt_conn *conn)
{
	atomic_dec(&conn->ref);
    461e:	304c      	adds	r0, #76	; 0x4c
    4620:	f7ff bc13 	b.w	3e4a <atomic_dec>

00004624 <bt_conn_get_dst>:
}

const bt_addr_le_t *bt_conn_get_dst(const struct bt_conn *conn)
{
	return &conn->le.dst;
}
    4624:	3054      	adds	r0, #84	; 0x54
    4626:	4770      	bx	lr

00004628 <bt_conn_disconnect>:
	if (IS_ENABLED(CONFIG_BLUETOOTH_CENTRAL) &&
	    conn->type == BT_CONN_TYPE_LE) {
		bt_le_set_auto_conn(&conn->le.dst, NULL);
	}

	switch (conn->state) {
    4628:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
    462c:	3b01      	subs	r3, #1
	 */
	return bt_l2cap_update_conn_param(conn, param);
}

int bt_conn_disconnect(struct bt_conn *conn, u8_t reason)
{
    462e:	b570      	push	{r4, r5, r6, lr}
    4630:	4605      	mov	r5, r0
    4632:	460e      	mov	r6, r1
	if (IS_ENABLED(CONFIG_BLUETOOTH_CENTRAL) &&
	    conn->type == BT_CONN_TYPE_LE) {
		bt_le_set_auto_conn(&conn->le.dst, NULL);
	}

	switch (conn->state) {
    4634:	2b03      	cmp	r3, #3
    4636:	d803      	bhi.n	4640 <bt_conn_disconnect+0x18>
    4638:	e8df f003 	tbb	[pc, r3]
    463c:	280e2805 	.word	0x280e2805
		return bt_hci_disconnect(conn, reason);
	case BT_CONN_DISCONNECT:
		return 0;
	case BT_CONN_DISCONNECTED:
	default:
		return -ENOTCONN;
    4640:	f06f 0038 	mvn.w	r0, #56	; 0x38
    4644:	bd70      	pop	{r4, r5, r6, pc}
		bt_le_set_auto_conn(&conn->le.dst, NULL);
	}

	switch (conn->state) {
	case BT_CONN_CONNECT_SCAN:
		conn->err = reason;
    4646:	f885 1050 	strb.w	r1, [r5, #80]	; 0x50
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    464a:	2100      	movs	r1, #0
    464c:	f7ff feb2 	bl	43b4 <bt_conn_set_state>
		bt_le_scan_update(false);
    4650:	2000      	movs	r0, #0
    4652:	f7fd feef 	bl	2434 <bt_le_scan_update>
    4656:	e019      	b.n	468c <bt_conn_disconnect+0x64>
{
	struct net_buf *buf;
	struct bt_hci_cp_disconnect *disconn;
	int err;

	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
    4658:	2103      	movs	r1, #3
    465a:	f240 4006 	movw	r0, #1030	; 0x406
    465e:	f7fd fd73 	bl	2148 <bt_hci_cmd_create>
	if (!buf) {
    4662:	4604      	mov	r4, r0
    4664:	b1a0      	cbz	r0, 4690 <bt_conn_disconnect+0x68>
		return -ENOBUFS;
	}

	disconn = net_buf_add(buf, sizeof(*disconn));
    4666:	2103      	movs	r1, #3
    4668:	3008      	adds	r0, #8
    466a:	f00d facf 	bl	11c0c <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(conn->handle);
    466e:	882b      	ldrh	r3, [r5, #0]
    4670:	8003      	strh	r3, [r0, #0]
	disconn->reason = reason;
    4672:	7086      	strb	r6, [r0, #2]

	err = bt_hci_cmd_send(BT_HCI_OP_DISCONNECT, buf);
    4674:	4621      	mov	r1, r4
    4676:	f240 4006 	movw	r0, #1030	; 0x406
    467a:	f7fe fa0f 	bl	2a9c <bt_hci_cmd_send>
	if (err) {
    467e:	4604      	mov	r4, r0
    4680:	b948      	cbnz	r0, 4696 <bt_conn_disconnect+0x6e>
		return err;
	}

	bt_conn_set_state(conn, BT_CONN_DISCONNECT);
    4682:	2104      	movs	r1, #4
    4684:	4628      	mov	r0, r5
    4686:	f7ff fe95 	bl	43b4 <bt_conn_set_state>
    468a:	e004      	b.n	4696 <bt_conn_disconnect+0x6e>
			k_delayed_work_cancel(&conn->le.update_work);
			return bt_hci_cmd_send(BT_HCI_OP_LE_CREATE_CONN_CANCEL,
					       NULL);
		}

		return 0;
    468c:	2000      	movs	r0, #0
    468e:	bd70      	pop	{r4, r5, r6, pc}
	struct bt_hci_cp_disconnect *disconn;
	int err;

	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
	if (!buf) {
		return -ENOBUFS;
    4690:	f06f 0036 	mvn.w	r0, #54	; 0x36
    4694:	bd70      	pop	{r4, r5, r6, pc}
	disconn = net_buf_add(buf, sizeof(*disconn));
	disconn->handle = sys_cpu_to_le16(conn->handle);
	disconn->reason = reason;

	err = bt_hci_cmd_send(BT_HCI_OP_DISCONNECT, buf);
	if (err) {
    4696:	4620      	mov	r0, r4
		return 0;
	case BT_CONN_DISCONNECTED:
	default:
		return -ENOTCONN;
	}
}
    4698:	bd70      	pop	{r4, r5, r6, pc}

0000469a <bt_conn_le_conn_update>:
}
#endif /* CONFIG_BLUETOOTH_PERIPHERAL */

int bt_conn_le_conn_update(struct bt_conn *conn,
			   const struct bt_le_conn_param *param)
{
    469a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    469c:	4607      	mov	r7, r0
    469e:	460d      	mov	r5, r1
	struct hci_cp_le_conn_update *conn_update;
	struct net_buf *buf;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
    46a0:	f242 0013 	movw	r0, #8211	; 0x2013
    46a4:	210e      	movs	r1, #14
    46a6:	f7fd fd4f 	bl	2148 <bt_hci_cmd_create>
				sizeof(*conn_update));
	if (!buf) {
    46aa:	4606      	mov	r6, r0
    46ac:	b1c8      	cbz	r0, 46e2 <bt_conn_le_conn_update+0x48>
		return -ENOBUFS;
	}

	conn_update = net_buf_add(buf, sizeof(*conn_update));
    46ae:	210e      	movs	r1, #14
    46b0:	3008      	adds	r0, #8
    46b2:	f00d faab 	bl	11c0c <net_buf_simple_add>
	memset(conn_update, 0, sizeof(*conn_update));
    46b6:	2100      	movs	r1, #0
				sizeof(*conn_update));
	if (!buf) {
		return -ENOBUFS;
	}

	conn_update = net_buf_add(buf, sizeof(*conn_update));
    46b8:	4604      	mov	r4, r0
	memset(conn_update, 0, sizeof(*conn_update));
    46ba:	220e      	movs	r2, #14
    46bc:	f7fc fd15 	bl	10ea <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
    46c0:	883b      	ldrh	r3, [r7, #0]
    46c2:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
    46c4:	882b      	ldrh	r3, [r5, #0]
    46c6:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
    46c8:	886b      	ldrh	r3, [r5, #2]
    46ca:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
    46cc:	88ab      	ldrh	r3, [r5, #4]
    46ce:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
    46d0:	88eb      	ldrh	r3, [r5, #6]
    46d2:	8123      	strh	r3, [r4, #8]

	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_UPDATE, buf);
    46d4:	4631      	mov	r1, r6
    46d6:	f242 0013 	movw	r0, #8211	; 0x2013
}
    46da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);

	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_UPDATE, buf);
    46de:	f7fe b9dd 	b.w	2a9c <bt_hci_cmd_send>
}
    46e2:	f06f 0036 	mvn.w	r0, #54	; 0x36
    46e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000046e8 <bt_conn_le_param_update>:
	return 0;
}

int bt_conn_le_param_update(struct bt_conn *conn,
			    const struct bt_le_conn_param *param)
{
    46e8:	b538      	push	{r3, r4, r5, lr}
	BT_DBG("conn %p features 0x%02x params (%d-%d %d %d)", conn,
	       conn->le.features[0], param->interval_min,
	       param->interval_max, param->latency, param->timeout);

	/* Check if there's a need to update conn params */
	if (conn->le.interval >= param->interval_min &&
    46ea:	880a      	ldrh	r2, [r1, #0]
    46ec:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
    46f0:	429a      	cmp	r2, r3
	return 0;
}

int bt_conn_le_param_update(struct bt_conn *conn,
			    const struct bt_le_conn_param *param)
{
    46f2:	4604      	mov	r4, r0
    46f4:	460d      	mov	r5, r1
	BT_DBG("conn %p features 0x%02x params (%d-%d %d %d)", conn,
	       conn->le.features[0], param->interval_min,
	       param->interval_max, param->latency, param->timeout);

	/* Check if there's a need to update conn params */
	if (conn->le.interval >= param->interval_min &&
    46f6:	d80c      	bhi.n	4712 <bt_conn_le_param_update+0x2a>
    46f8:	884a      	ldrh	r2, [r1, #2]
    46fa:	429a      	cmp	r2, r3
    46fc:	d309      	bcc.n	4712 <bt_conn_le_param_update+0x2a>
	    conn->le.interval <= param->interval_max &&
    46fe:	f8b0 2070 	ldrh.w	r2, [r0, #112]	; 0x70
    4702:	888b      	ldrh	r3, [r1, #4]
    4704:	429a      	cmp	r2, r3
    4706:	d104      	bne.n	4712 <bt_conn_le_param_update+0x2a>
	    conn->le.latency == param->latency &&
    4708:	f8b0 2072 	ldrh.w	r2, [r0, #114]	; 0x72
    470c:	88cb      	ldrh	r3, [r1, #6]
    470e:	429a      	cmp	r2, r3
    4710:	d01a      	beq.n	4748 <bt_conn_le_param_update+0x60>
	    conn->le.timeout == param->timeout) {
		return -EALREADY;
	}

	/* Cancel any pending update */
	k_delayed_work_cancel(&conn->le.update_work);
    4712:	f104 0080 	add.w	r0, r4, #128	; 0x80
    4716:	f00f f883 	bl	13820 <k_delayed_work_cancel>

	/* Use LE connection parameter request if both local and remote support
	 * it; or if local role is master then use LE connection update.
	 */
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    471a:	4b0d      	ldr	r3, [pc, #52]	; (4750 <bt_conn_le_param_update+0x68>)
    471c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
    4720:	079a      	lsls	r2, r3, #30
    4722:	d503      	bpl.n	472c <bt_conn_le_param_update+0x44>
    4724:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    4728:	079b      	lsls	r3, r3, #30
    472a:	d401      	bmi.n	4730 <bt_conn_le_param_update+0x48>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features)) ||
    472c:	78e3      	ldrb	r3, [r4, #3]
    472e:	b92b      	cbnz	r3, 473c <bt_conn_le_param_update+0x54>
	    (conn->role == BT_HCI_ROLE_MASTER)) {
		return bt_conn_le_conn_update(conn, param);
    4730:	4629      	mov	r1, r5
    4732:	4620      	mov	r0, r4

	/* If remote master does not support LL Connection Parameters Request
	 * Procedure
	 */
	return bt_l2cap_update_conn_param(conn, param);
}
    4734:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	 * it; or if local role is master then use LE connection update.
	 */
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features)) ||
	    (conn->role == BT_HCI_ROLE_MASTER)) {
		return bt_conn_le_conn_update(conn, param);
    4738:	f7ff bfaf 	b.w	469a <bt_conn_le_conn_update>
	}

	/* If remote master does not support LL Connection Parameters Request
	 * Procedure
	 */
	return bt_l2cap_update_conn_param(conn, param);
    473c:	4629      	mov	r1, r5
    473e:	4620      	mov	r0, r4
}
    4740:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	}

	/* If remote master does not support LL Connection Parameters Request
	 * Procedure
	 */
	return bt_l2cap_update_conn_param(conn, param);
    4744:	f000 bb0a 	b.w	4d5c <bt_l2cap_update_conn_param>
}
    4748:	f06f 0044 	mvn.w	r0, #68	; 0x44
    474c:	bd38      	pop	{r3, r4, r5, pc}
    474e:	bf00      	nop
    4750:	200002b0 	.word	0x200002b0

00004754 <le_conn_update>:
	/* Default to accepting if there's no app callback */
	return true;
}

static void le_conn_update(struct k_work *work)
{
    4754:	b507      	push	{r0, r1, r2, lr}
	    conn->state == BT_CONN_CONNECT) {
		bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
		return;
	}

	param = BT_LE_CONN_PARAM(conn->le.interval_min,
    4756:	f830 3c14 	ldrh.w	r3, [r0, #-20]
    475a:	f8ad 3000 	strh.w	r3, [sp]
    475e:	f830 3c12 	ldrh.w	r3, [r0, #-18]
    4762:	f8ad 3002 	strh.w	r3, [sp, #2]
    4766:	f830 3c10 	ldrh.w	r3, [r0, #-16]
    476a:	f8ad 3004 	strh.w	r3, [sp, #4]
				 conn->le.interval_max,
				 conn->le.latency,
				 conn->le.timeout);

	bt_conn_le_param_update(conn, param);
    476e:	4669      	mov	r1, sp
	    conn->state == BT_CONN_CONNECT) {
		bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
		return;
	}

	param = BT_LE_CONN_PARAM(conn->le.interval_min,
    4770:	f830 3c0e 	ldrh.w	r3, [r0, #-14]
    4774:	f8ad 3006 	strh.w	r3, [sp, #6]
				 conn->le.interval_max,
				 conn->le.latency,
				 conn->le.timeout);

	bt_conn_le_param_update(conn, param);
    4778:	3880      	subs	r0, #128	; 0x80
    477a:	f7ff ffb5 	bl	46e8 <bt_conn_le_param_update>
}
    477e:	b003      	add	sp, #12
    4780:	f85d fb04 	ldr.w	pc, [sp], #4

00004784 <bt_conn_create_pdu>:

	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_UPDATE, buf);
}

struct net_buf *bt_conn_create_pdu(struct net_buf_pool *pool, size_t reserve)
{
    4784:	b538      	push	{r3, r4, r5, lr}

	if (!pool) {
		pool = &acl_tx_pool;
	}

	buf = net_buf_alloc(pool, K_FOREVER);
    4786:	4b07      	ldr	r3, [pc, #28]	; (47a4 <bt_conn_create_pdu+0x20>)

	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_UPDATE, buf);
}

struct net_buf *bt_conn_create_pdu(struct net_buf_pool *pool, size_t reserve)
{
    4788:	460d      	mov	r5, r1

	if (!pool) {
		pool = &acl_tx_pool;
	}

	buf = net_buf_alloc(pool, K_FOREVER);
    478a:	2800      	cmp	r0, #0
    478c:	bf08      	it	eq
    478e:	4618      	moveq	r0, r3
    4790:	f04f 31ff 	mov.w	r1, #4294967295
    4794:	f00d f9a8 	bl	11ae8 <net_buf_alloc>
	__ASSERT_NO_MSG(buf);

	reserve += sizeof(struct bt_hci_acl_hdr) + CONFIG_BLUETOOTH_HCI_RESERVE;
	net_buf_reserve(buf, reserve);
    4798:	1d29      	adds	r1, r5, #4

	if (!pool) {
		pool = &acl_tx_pool;
	}

	buf = net_buf_alloc(pool, K_FOREVER);
    479a:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf);

	reserve += sizeof(struct bt_hci_acl_hdr) + CONFIG_BLUETOOTH_HCI_RESERVE;
	net_buf_reserve(buf, reserve);
    479c:	f00d fa03 	bl	11ba6 <net_buf_reserve>

	return buf;
}
    47a0:	4620      	mov	r0, r4
    47a2:	bd38      	pop	{r3, r4, r5, pc}
    47a4:	2000079c 	.word	0x2000079c

000047a8 <create_frag.isra.5>:
#endif /* CONFIG_BLUETOOTH_BREDR */

	return bt_dev.le.mtu;
}

static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
    47a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    47ac:	4606      	mov	r6, r0
    47ae:	460d      	mov	r5, r1
{
	struct net_buf *frag;
	u16_t frag_len;

	frag = bt_conn_create_pdu(NULL, 0);
    47b0:	2100      	movs	r1, #0
    47b2:	4608      	mov	r0, r1
    47b4:	f7ff ffe6 	bl	4784 <bt_conn_create_pdu>

	if (conn->state != BT_CONN_CONNECTED) {
    47b8:	7833      	ldrb	r3, [r6, #0]
    47ba:	2b03      	cmp	r3, #3
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
{
	struct net_buf *frag;
	u16_t frag_len;

	frag = bt_conn_create_pdu(NULL, 0);
    47bc:	4604      	mov	r4, r0

	if (conn->state != BT_CONN_CONNECTED) {
    47be:	d004      	beq.n	47ca <create_frag.isra.5+0x22>
		net_buf_unref(frag);
    47c0:	f00d fa04 	bl	11bcc <net_buf_unref>
		return NULL;
    47c4:	2000      	movs	r0, #0
    47c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	/* Fragments never have a TX completion callback */
	conn_tx(frag)->cb = NULL;
    47ca:	89c3      	ldrh	r3, [r0, #14]
	if (conn->type == BT_CONN_TYPE_BR || !bt_dev.le.mtu) {
		return bt_dev.br.mtu;
	}
#endif /* CONFIG_BLUETOOTH_BREDR */

	return bt_dev.le.mtu;
    47cc:	4e11      	ldr	r6, [pc, #68]	; (4814 <create_frag.isra.5+0x6c>)
		net_buf_unref(frag);
		return NULL;
	}

	/* Fragments never have a TX completion callback */
	conn_tx(frag)->cb = NULL;
    47ce:	4403      	add	r3, r0
    47d0:	3313      	adds	r3, #19
    47d2:	f023 0303 	bic.w	r3, r3, #3
    47d6:	2200      	movs	r2, #0

	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    47d8:	f100 0708 	add.w	r7, r0, #8
		net_buf_unref(frag);
		return NULL;
	}

	/* Fragments never have a TX completion callback */
	conn_tx(frag)->cb = NULL;
    47dc:	601a      	str	r2, [r3, #0]

	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    47de:	4638      	mov	r0, r7
    47e0:	f8b6 8080 	ldrh.w	r8, [r6, #128]	; 0x80
    47e4:	f00d fa4e 	bl	11c84 <net_buf_simple_tailroom>
    47e8:	4580      	cmp	r8, r0
    47ea:	d202      	bcs.n	47f2 <create_frag.isra.5+0x4a>
	if (conn->type == BT_CONN_TYPE_BR || !bt_dev.le.mtu) {
		return bt_dev.br.mtu;
	}
#endif /* CONFIG_BLUETOOTH_BREDR */

	return bt_dev.le.mtu;
    47ec:	f8b6 6080 	ldrh.w	r6, [r6, #128]	; 0x80
    47f0:	e003      	b.n	47fa <create_frag.isra.5+0x52>
	}

	/* Fragments never have a TX completion callback */
	conn_tx(frag)->cb = NULL;

	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    47f2:	4638      	mov	r0, r7
    47f4:	f00d fa46 	bl	11c84 <net_buf_simple_tailroom>
    47f8:	b286      	uxth	r6, r0

	net_buf_add_mem(frag, buf->data, frag_len);
    47fa:	f855 1f08 	ldr.w	r1, [r5, #8]!
    47fe:	4632      	mov	r2, r6
    4800:	4638      	mov	r0, r7
    4802:	f00d fa09 	bl	11c18 <net_buf_simple_add_mem>
	net_buf_pull(buf, frag_len);
    4806:	4631      	mov	r1, r6
    4808:	4628      	mov	r0, r5
    480a:	f00d fa1e 	bl	11c4a <net_buf_simple_pull>
    480e:	4620      	mov	r0, r4

	return frag;
}
    4810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4814:	200002b0 	.word	0x200002b0

00004818 <bt_conn_process_tx>:
{
	struct net_buf *buf;

	BT_DBG("conn %p", conn);

	if (conn->state == BT_CONN_DISCONNECTED &&
    4818:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51

	return ev_count;
}

void bt_conn_process_tx(struct bt_conn *conn)
{
    481c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    481e:	4605      	mov	r5, r0
	struct net_buf *buf;

	BT_DBG("conn %p", conn);

	if (conn->state == BT_CONN_DISCONNECTED &&
    4820:	b99b      	cbnz	r3, 484a <bt_conn_process_tx+0x32>
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4822:	f3bf 8f5f 	dmb	sy
    4826:	1d03      	adds	r3, r0, #4
    4828:	e853 2f00 	ldrex	r2, [r3]
    482c:	f022 0140 	bic.w	r1, r2, #64	; 0x40
    4830:	e843 1400 	strex	r4, r1, [r3]
    4834:	2c00      	cmp	r4, #0
    4836:	d1f7      	bne.n	4828 <bt_conn_process_tx+0x10>
    4838:	f3bf 8f5f 	dmb	sy
    483c:	0653      	lsls	r3, r2, #25
    483e:	d504      	bpl.n	484a <bt_conn_process_tx+0x32>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
	BT_ASSERT(buf);
	if (!send_buf(conn, buf)) {
		net_buf_unref(buf);
	}
}
    4840:	b003      	add	sp, #12
    4842:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	BT_DBG("conn %p", conn);

	if (conn->state == BT_CONN_DISCONNECTED &&
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_CLEANUP)) {
		BT_DBG("handle %u disconnected - cleaning up", conn->handle);
		conn_cleanup(conn);
    4846:	f7ff bb0d 	b.w	3e64 <conn_cleanup>
		return;
	}

	/* Get next ACL packet for connection */
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
    484a:	2100      	movs	r1, #0
    484c:	f105 0030 	add.w	r0, r5, #48	; 0x30
    4850:	f00d f990 	bl	11b74 <net_buf_get>
	BT_ASSERT(buf);
    4854:	4604      	mov	r4, r0
    4856:	b978      	cbnz	r0, 4878 <bt_conn_process_tx+0x60>
    4858:	4b22      	ldr	r3, [pc, #136]	; (48e4 <bt_conn_process_tx+0xcc>)
    485a:	9301      	str	r3, [sp, #4]
    485c:	4b22      	ldr	r3, [pc, #136]	; (48e8 <bt_conn_process_tx+0xd0>)
    485e:	9300      	str	r3, [sp, #0]
    4860:	4a22      	ldr	r2, [pc, #136]	; (48ec <bt_conn_process_tx+0xd4>)
    4862:	4b23      	ldr	r3, [pc, #140]	; (48f0 <bt_conn_process_tx+0xd8>)
    4864:	4923      	ldr	r1, [pc, #140]	; (48f4 <bt_conn_process_tx+0xdc>)
    4866:	4824      	ldr	r0, [pc, #144]	; (48f8 <bt_conn_process_tx+0xe0>)
    4868:	f7fc fe0a 	bl	1480 <printk>
    486c:	4040      	eors	r0, r0
    486e:	f380 8811 	msr	BASEPRI, r0
    4872:	f04f 0004 	mov.w	r0, #4
    4876:	df02      	svc	2
	if (conn->type == BT_CONN_TYPE_BR || !bt_dev.le.mtu) {
		return bt_dev.br.mtu;
	}
#endif /* CONFIG_BLUETOOTH_BREDR */

	return bt_dev.le.mtu;
    4878:	4b20      	ldr	r3, [pc, #128]	; (48fc <bt_conn_process_tx+0xe4>)
	struct net_buf *frag;

	BT_DBG("conn %p buf %p len %u", conn, buf, buf->len);

	/* Send directly if the packet fits the ACL MTU */
	if (buf->len <= conn_mtu(conn)) {
    487a:	8981      	ldrh	r1, [r0, #12]
    487c:	f8b3 2080 	ldrh.w	r2, [r3, #128]	; 0x80
    4880:	4291      	cmp	r1, r2
    4882:	461e      	mov	r6, r3
    4884:	d802      	bhi.n	488c <bt_conn_process_tx+0x74>
		return send_frag(conn, buf, BT_ACL_START_NO_FLUSH, false);
    4886:	2300      	movs	r3, #0
    4888:	461a      	mov	r2, r3
    488a:	e01d      	b.n	48c8 <bt_conn_process_tx+0xb0>
    488c:	f105 0751 	add.w	r7, r5, #81	; 0x51
	}

	/* Create & enqueue first fragment */
	frag = create_frag(conn, buf);
    4890:	4601      	mov	r1, r0
    4892:	4638      	mov	r0, r7
    4894:	f7ff ff88 	bl	47a8 <create_frag.isra.5>
	if (!frag) {
    4898:	4601      	mov	r1, r0
    489a:	b1d0      	cbz	r0, 48d2 <bt_conn_process_tx+0xba>
		return false;
	}

	if (!send_frag(conn, frag, BT_ACL_START_NO_FLUSH, true)) {
    489c:	2301      	movs	r3, #1
    489e:	2200      	movs	r2, #0
		frag = create_frag(conn, buf);
		if (!frag) {
			return false;
		}

		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
    48a0:	4628      	mov	r0, r5
    48a2:	f7ff fc99 	bl	41d8 <send_frag>
    48a6:	b1a0      	cbz	r0, 48d2 <bt_conn_process_tx+0xba>

	/*
	 * Send the fragments. For the last one simply use the original
	 * buffer (which works since we've used net_buf_pull on it.
	 */
	while (buf->len > conn_mtu(conn)) {
    48a8:	89a2      	ldrh	r2, [r4, #12]
    48aa:	f8b6 3080 	ldrh.w	r3, [r6, #128]	; 0x80
    48ae:	429a      	cmp	r2, r3
    48b0:	d908      	bls.n	48c4 <bt_conn_process_tx+0xac>
		frag = create_frag(conn, buf);
    48b2:	4621      	mov	r1, r4
    48b4:	4638      	mov	r0, r7
    48b6:	f7ff ff77 	bl	47a8 <create_frag.isra.5>
		if (!frag) {
    48ba:	4601      	mov	r1, r0
    48bc:	b148      	cbz	r0, 48d2 <bt_conn_process_tx+0xba>
			return false;
		}

		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
    48be:	2301      	movs	r3, #1
    48c0:	461a      	mov	r2, r3
    48c2:	e7ed      	b.n	48a0 <bt_conn_process_tx+0x88>
			return false;
		}
	}

	return send_frag(conn, buf, BT_ACL_CONT, false);
    48c4:	2300      	movs	r3, #0
    48c6:	2201      	movs	r2, #1
    48c8:	4621      	mov	r1, r4
    48ca:	4628      	mov	r0, r5
    48cc:	f7ff fc84 	bl	41d8 <send_frag>
	}

	/* Get next ACL packet for connection */
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
	BT_ASSERT(buf);
	if (!send_buf(conn, buf)) {
    48d0:	b928      	cbnz	r0, 48de <bt_conn_process_tx+0xc6>
		net_buf_unref(buf);
    48d2:	4620      	mov	r0, r4
	}
}
    48d4:	b003      	add	sp, #12
    48d6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}

	/* Get next ACL packet for connection */
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
	BT_ASSERT(buf);
	if (!send_buf(conn, buf)) {
		net_buf_unref(buf);
    48da:	f00d b977 	b.w	11bcc <net_buf_unref>
	}
}
    48de:	b003      	add	sp, #12
    48e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    48e2:	bf00      	nop
    48e4:	00013df4 	.word	0x00013df4
    48e8:	00013df9 	.word	0x00013df9
    48ec:	00013db4 	.word	0x00013db4
    48f0:	00016138 	.word	0x00016138
    48f4:	00013dbb 	.word	0x00013dbb
    48f8:	00014098 	.word	0x00014098
    48fc:	200002b0 	.word	0x200002b0

00004900 <bt_conn_auth_cb_register>:
}

#if defined(CONFIG_BLUETOOTH_SMP) || defined(CONFIG_BLUETOOTH_BREDR)
int bt_conn_auth_cb_register(const struct bt_conn_auth_cb *cb)
{
	if (!cb) {
    4900:	b910      	cbnz	r0, 4908 <bt_conn_auth_cb_register+0x8>
		bt_auth = NULL;
    4902:	4b08      	ldr	r3, [pc, #32]	; (4924 <bt_conn_auth_cb_register+0x24>)
    4904:	6018      	str	r0, [r3, #0]
		return 0;
    4906:	4770      	bx	lr
	}

	/* cancel callback should always be provided */
	if (!cb->cancel) {
    4908:	68c3      	ldr	r3, [r0, #12]
    490a:	b12b      	cbz	r3, 4918 <bt_conn_auth_cb_register+0x18>
		return -EINVAL;
	}

	if (bt_auth) {
    490c:	4a05      	ldr	r2, [pc, #20]	; (4924 <bt_conn_auth_cb_register+0x24>)
    490e:	6813      	ldr	r3, [r2, #0]
    4910:	b92b      	cbnz	r3, 491e <bt_conn_auth_cb_register+0x1e>
		return -EALREADY;
	}

	bt_auth = cb;
    4912:	6010      	str	r0, [r2, #0]
	return 0;
    4914:	4618      	mov	r0, r3
    4916:	4770      	bx	lr
		return 0;
	}

	/* cancel callback should always be provided */
	if (!cb->cancel) {
		return -EINVAL;
    4918:	f06f 0015 	mvn.w	r0, #21
    491c:	4770      	bx	lr
	}

	if (bt_auth) {
		return -EALREADY;
    491e:	f06f 0044 	mvn.w	r0, #68	; 0x44
	}

	bt_auth = cb;
	return 0;
}
    4922:	4770      	bx	lr
    4924:	20002110 	.word	0x20002110

00004928 <bt_conn_init>:
 * @param node A pointer on the node to prepend
 */
static inline void sys_slist_prepend(sys_slist_t *list,
				     sys_snode_t *node)
{
	node->next = list->head;
    4928:	4b0c      	ldr	r3, [pc, #48]	; (495c <bt_conn_init+0x34>)
    492a:	4a0d      	ldr	r2, [pc, #52]	; (4960 <bt_conn_init+0x38>)
    492c:	6819      	ldr	r1, [r3, #0]
	}
}
#endif /* CONFIG_BLUETOOTH_SMP || CONFIG_BLUETOOTH_BREDR */

int bt_conn_init(void)
{
    492e:	b510      	push	{r4, lr}
    4930:	6011      	str	r1, [r2, #0]
	list->head = node;

	if (!list->tail) {
    4932:	6859      	ldr	r1, [r3, #4]
    4934:	b901      	cbnz	r1, 4938 <bt_conn_init+0x10>
		list->tail = list->head;
    4936:	605a      	str	r2, [r3, #4]
 * @param node A pointer on the node to prepend
 */
static inline void sys_slist_prepend(sys_slist_t *list,
				     sys_snode_t *node)
{
	node->next = list->head;
    4938:	6092      	str	r2, [r2, #8]
	list->head = node;
    493a:	4a0a      	ldr	r2, [pc, #40]	; (4964 <bt_conn_init+0x3c>)
    493c:	601a      	str	r2, [r3, #0]

	if (!list->tail) {
    493e:	685b      	ldr	r3, [r3, #4]
    4940:	b90b      	cbnz	r3, 4946 <bt_conn_init+0x1e>
		list->tail = list->head;
    4942:	4b06      	ldr	r3, [pc, #24]	; (495c <bt_conn_init+0x34>)
    4944:	605a      	str	r2, [r3, #4]

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		sys_slist_prepend(&free_tx, &conn_tx[i].node);
	}

	bt_att_init();
    4946:	f001 fbbb 	bl	60c0 <bt_att_init>

	err = bt_smp_init();
    494a:	f003 fc61 	bl	8210 <bt_smp_init>
	if (err) {
    494e:	4604      	mov	r4, r0
    4950:	b908      	cbnz	r0, 4956 <bt_conn_init+0x2e>
		return err;
	}

	bt_l2cap_init();
    4952:	f000 fa39 	bl	4dc8 <bt_l2cap_init>
			}
		}
	}

	return 0;
}
    4956:	4620      	mov	r0, r4
    4958:	bd10      	pop	{r4, pc}
    495a:	bf00      	nop
    495c:	20000b44 	.word	0x20000b44
    4960:	20000b58 	.word	0x20000b58
    4964:	20000b60 	.word	0x20000b60

00004968 <l2cap_disconnected>:
	BT_DBG("ch %p cid 0x%04x", BT_L2CAP_LE_CHAN(chan),
	       BT_L2CAP_LE_CHAN(chan)->rx.cid);
}

static void l2cap_disconnected(struct bt_l2cap_chan *chan)
{
    4968:	4770      	bx	lr
	...

0000496c <l2cap_accept>:
	BT_DBG("ch %p cid 0x%04x", BT_L2CAP_LE_CHAN(chan),
	       BT_L2CAP_LE_CHAN(chan)->rx.cid);
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    496c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
    496e:	4a0c      	ldr	r2, [pc, #48]	; (49a0 <l2cap_accept+0x34>)
    4970:	6813      	ldr	r3, [r2, #0]
    4972:	b923      	cbnz	r3, 497e <l2cap_accept+0x12>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
    4974:	480b      	ldr	r0, [pc, #44]	; (49a4 <l2cap_accept+0x38>)
    4976:	6050      	str	r0, [r2, #4]
		*chan = &l2cap->chan.chan;
    4978:	600a      	str	r2, [r1, #0]

		return 0;
    497a:	4618      	mov	r0, r3
    497c:	e00c      	b.n	4998 <l2cap_accept+0x2c>
	}

	BT_ERR("No available L2CAP context for conn %p", conn);
    497e:	4b0a      	ldr	r3, [pc, #40]	; (49a8 <l2cap_accept+0x3c>)
    4980:	9302      	str	r3, [sp, #8]
    4982:	4b0a      	ldr	r3, [pc, #40]	; (49ac <l2cap_accept+0x40>)
    4984:	9001      	str	r0, [sp, #4]
    4986:	9300      	str	r3, [sp, #0]
    4988:	4a09      	ldr	r2, [pc, #36]	; (49b0 <l2cap_accept+0x44>)
    498a:	4b0a      	ldr	r3, [pc, #40]	; (49b4 <l2cap_accept+0x48>)
    498c:	490a      	ldr	r1, [pc, #40]	; (49b8 <l2cap_accept+0x4c>)
    498e:	480b      	ldr	r0, [pc, #44]	; (49bc <l2cap_accept+0x50>)
    4990:	f7fc fd76 	bl	1480 <printk>

	return -ENOMEM;
    4994:	f06f 000b 	mvn.w	r0, #11
}
    4998:	b005      	add	sp, #20
    499a:	f85d fb04 	ldr.w	pc, [sp], #4
    499e:	bf00      	nop
    49a0:	20000c1c 	.word	0x20000c1c
    49a4:	2000039c 	.word	0x2000039c
    49a8:	00013df4 	.word	0x00013df4
    49ac:	00013df9 	.word	0x00013df9
    49b0:	00013db4 	.word	0x00013db4
    49b4:	00016185 	.word	0x00016185
    49b8:	00013dbb 	.word	0x00013dbb
    49bc:	000146ca 	.word	0x000146ca

000049c0 <l2cap_connected>:
    49c0:	4770      	bx	lr
	...

000049c4 <bt_l2cap_le_fixed_chan_register>:
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node)
{
	node->next = NULL;
    49c4:	2300      	movs	r3, #0
    49c6:	6083      	str	r3, [r0, #8]

	if (!list->tail) {
    49c8:	4b05      	ldr	r3, [pc, #20]	; (49e0 <bt_l2cap_le_fixed_chan_register+0x1c>)
    49ca:	6859      	ldr	r1, [r3, #4]

void bt_l2cap_le_fixed_chan_register(struct bt_l2cap_fixed_chan *chan)
{
	BT_DBG("CID 0x%04x", chan->cid);

	sys_slist_append(&le_channels, &chan->node);
    49cc:	f100 0208 	add.w	r2, r0, #8
    49d0:	b911      	cbnz	r1, 49d8 <bt_l2cap_le_fixed_chan_register+0x14>
		list->tail = node;
    49d2:	605a      	str	r2, [r3, #4]
		list->head = node;
    49d4:	601a      	str	r2, [r3, #0]
    49d6:	4770      	bx	lr
	} else {
		list->tail->next = node;
    49d8:	600a      	str	r2, [r1, #0]
		list->tail = node;
    49da:	605a      	str	r2, [r3, #4]
    49dc:	4770      	bx	lr
    49de:	bf00      	nop
    49e0:	20000c14 	.word	0x20000c14

000049e4 <bt_l2cap_chan_remove>:
	return NULL;
}
#endif /* CONFIG_BLUETOOTH_L2CAP_DYNAMIC_CHANNEL */

void bt_l2cap_chan_remove(struct bt_conn *conn, struct bt_l2cap_chan *ch)
{
    49e4:	6c43      	ldr	r3, [r0, #68]	; 0x44
    49e6:	b530      	push	{r4, r5, lr}
	struct bt_l2cap_chan *chan;
	sys_snode_t *prev = NULL;

	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    49e8:	b1e3      	cbz	r3, 4a24 <bt_l2cap_chan_remove+0x40>
    49ea:	3b08      	subs	r3, #8
    49ec:	2200      	movs	r2, #0
    49ee:	b1cb      	cbz	r3, 4a24 <bt_l2cap_chan_remove+0x40>
		if (chan == ch) {
    49f0:	428b      	cmp	r3, r1
    49f2:	d110      	bne.n	4a16 <bt_l2cap_chan_remove+0x32>
			sys_slist_remove(&conn->channels, prev, &chan->node);
    49f4:	f101 0508 	add.w	r5, r1, #8
    49f8:	688b      	ldr	r3, [r1, #8]
    49fa:	6c84      	ldr	r4, [r0, #72]	; 0x48
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node)
{
	if (!prev_node) {
    49fc:	b922      	cbnz	r2, 4a08 <bt_l2cap_chan_remove+0x24>
		list->head = node->next;

		/* Was node also the tail? */
		if (list->tail == node) {
    49fe:	42a5      	cmp	r5, r4
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node)
{
	if (!prev_node) {
		list->head = node->next;
    4a00:	6443      	str	r3, [r0, #68]	; 0x44

		/* Was node also the tail? */
		if (list->tail == node) {
    4a02:	d105      	bne.n	4a10 <bt_l2cap_chan_remove+0x2c>
			list->tail = list->head;
    4a04:	6483      	str	r3, [r0, #72]	; 0x48
    4a06:	e003      	b.n	4a10 <bt_l2cap_chan_remove+0x2c>
		}
	} else {
		prev_node->next = node->next;

		/* Was node the tail? */
		if (list->tail == node) {
    4a08:	42a5      	cmp	r5, r4
		/* Was node also the tail? */
		if (list->tail == node) {
			list->tail = list->head;
		}
	} else {
		prev_node->next = node->next;
    4a0a:	6013      	str	r3, [r2, #0]

		/* Was node the tail? */
		if (list->tail == node) {
			list->tail = prev_node;
    4a0c:	bf08      	it	eq
    4a0e:	6482      	streq	r2, [r0, #72]	; 0x48
		}
	}

	node->next = NULL;
    4a10:	2300      	movs	r3, #0
    4a12:	608b      	str	r3, [r1, #8]
    4a14:	bd30      	pop	{r4, r5, pc}
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node)
{
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    4a16:	f113 0208 	adds.w	r2, r3, #8
    4a1a:	d003      	beq.n	4a24 <bt_l2cap_chan_remove+0x40>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node)
{
	return node->next;
    4a1c:	689b      	ldr	r3, [r3, #8]
void bt_l2cap_chan_remove(struct bt_conn *conn, struct bt_l2cap_chan *ch)
{
	struct bt_l2cap_chan *chan;
	sys_snode_t *prev = NULL;

	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    4a1e:	b10b      	cbz	r3, 4a24 <bt_l2cap_chan_remove+0x40>
    4a20:	3b08      	subs	r3, #8
    4a22:	e7e4      	b.n	49ee <bt_l2cap_chan_remove+0xa>
    4a24:	bd30      	pop	{r4, r5, pc}

00004a26 <bt_l2cap_chan_del>:

void bt_l2cap_chan_del(struct bt_l2cap_chan *chan)
{
	BT_DBG("conn %p chan %p", chan->conn, chan);

	if (!chan->conn) {
    4a26:	6803      	ldr	r3, [r0, #0]
}
#endif /* CONFIG_BLUETOOTH_DEBUG_L2CAP */
#endif /* CONFIG_BLUETOOTH_L2CAP_DYNAMIC_CHANNEL */

void bt_l2cap_chan_del(struct bt_l2cap_chan *chan)
{
    4a28:	b510      	push	{r4, lr}
    4a2a:	4604      	mov	r4, r0
	BT_DBG("conn %p chan %p", chan->conn, chan);

	if (!chan->conn) {
    4a2c:	b12b      	cbz	r3, 4a3a <bt_l2cap_chan_del+0x14>
		goto destroy;
	}

	if (chan->ops->disconnected) {
    4a2e:	6843      	ldr	r3, [r0, #4]
    4a30:	685b      	ldr	r3, [r3, #4]
    4a32:	b103      	cbz	r3, 4a36 <bt_l2cap_chan_del+0x10>
		chan->ops->disconnected(chan);
    4a34:	4798      	blx	r3
	}

	chan->conn = NULL;
    4a36:	2300      	movs	r3, #0
    4a38:	6023      	str	r3, [r4, #0]
	/* Reset internal members of common channel */
	bt_l2cap_chan_set_state(chan, BT_L2CAP_DISCONNECTED);
	chan->psm = 0;
#endif

	if (chan->destroy) {
    4a3a:	68e3      	ldr	r3, [r4, #12]
    4a3c:	b11b      	cbz	r3, 4a46 <bt_l2cap_chan_del+0x20>
		chan->destroy(chan);
    4a3e:	4620      	mov	r0, r4
	}
}
    4a40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_l2cap_chan_set_state(chan, BT_L2CAP_DISCONNECTED);
	chan->psm = 0;
#endif

	if (chan->destroy) {
		chan->destroy(chan);
    4a44:	4718      	bx	r3
    4a46:	bd10      	pop	{r4, pc}

00004a48 <l2cap_rtx_timeout>:
	}
}

static void l2cap_rtx_timeout(struct k_work *work)
{
    4a48:	b530      	push	{r4, r5, lr}
    4a4a:	b085      	sub	sp, #20
	struct bt_l2cap_le_chan *chan = LE_CHAN_RTX(work);

	BT_ERR("chan %p timeout", chan);
    4a4c:	4b0c      	ldr	r3, [pc, #48]	; (4a80 <l2cap_rtx_timeout+0x38>)
    4a4e:	9302      	str	r3, [sp, #8]
    4a50:	f1a0 0410 	sub.w	r4, r0, #16
		chan->destroy(chan);
	}
}

static void l2cap_rtx_timeout(struct k_work *work)
{
    4a54:	4605      	mov	r5, r0
	struct bt_l2cap_le_chan *chan = LE_CHAN_RTX(work);

	BT_ERR("chan %p timeout", chan);
    4a56:	4b0b      	ldr	r3, [pc, #44]	; (4a84 <l2cap_rtx_timeout+0x3c>)
    4a58:	9300      	str	r3, [sp, #0]
    4a5a:	4a0b      	ldr	r2, [pc, #44]	; (4a88 <l2cap_rtx_timeout+0x40>)
    4a5c:	4b0b      	ldr	r3, [pc, #44]	; (4a8c <l2cap_rtx_timeout+0x44>)
    4a5e:	9401      	str	r4, [sp, #4]
    4a60:	490b      	ldr	r1, [pc, #44]	; (4a90 <l2cap_rtx_timeout+0x48>)
    4a62:	480c      	ldr	r0, [pc, #48]	; (4a94 <l2cap_rtx_timeout+0x4c>)
    4a64:	f7fc fd0c 	bl	1480 <printk>

	bt_l2cap_chan_remove(chan->chan.conn, &chan->chan);
    4a68:	f855 0c10 	ldr.w	r0, [r5, #-16]
    4a6c:	4621      	mov	r1, r4
    4a6e:	f7ff ffb9 	bl	49e4 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
    4a72:	4620      	mov	r0, r4
}
    4a74:	b005      	add	sp, #20
    4a76:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	struct bt_l2cap_le_chan *chan = LE_CHAN_RTX(work);

	BT_ERR("chan %p timeout", chan);

	bt_l2cap_chan_remove(chan->chan.conn, &chan->chan);
	bt_l2cap_chan_del(&chan->chan);
    4a7a:	f7ff bfd4 	b.w	4a26 <bt_l2cap_chan_del>
    4a7e:	bf00      	nop
    4a80:	00013df4 	.word	0x00013df4
    4a84:	00013df9 	.word	0x00013df9
    4a88:	00013db4 	.word	0x00013db4
    4a8c:	0001619d 	.word	0x0001619d
    4a90:	00013dbb 	.word	0x00013dbb
    4a94:	00014701 	.word	0x00014701

00004a98 <bt_l2cap_connected>:

	return true;
}

void bt_l2cap_connected(struct bt_conn *conn)
{
    4a98:	4b19      	ldr	r3, [pc, #100]	; (4b00 <bt_l2cap_connected+0x68>)
    4a9a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    4a9e:	681c      	ldr	r4, [r3, #0]
    4aa0:	4606      	mov	r6, r0
	    conn->type == BT_CONN_TYPE_BR) {
		bt_l2cap_br_connected(conn);
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    4aa2:	b34c      	cbz	r4, 4af8 <bt_l2cap_connected+0x60>
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node)
{
	node->next = NULL;
    4aa4:	2700      	movs	r7, #0
    4aa6:	3c08      	subs	r4, #8
    4aa8:	46b8      	mov	r8, r7
    4aaa:	b32c      	cbz	r4, 4af8 <bt_l2cap_connected+0x60>
		struct bt_l2cap_le_chan *ch;

		if (fchan->accept(conn, &chan) < 0) {
    4aac:	6863      	ldr	r3, [r4, #4]
    4aae:	a901      	add	r1, sp, #4
    4ab0:	4630      	mov	r0, r6
    4ab2:	4798      	blx	r3
    4ab4:	2800      	cmp	r0, #0
    4ab6:	db1b      	blt.n	4af0 <bt_l2cap_connected+0x58>
			continue;
		}

		ch = BT_L2CAP_LE_CHAN(chan);
    4ab8:	9d01      	ldr	r5, [sp, #4]

		/* Fill up remaining fixed channel context attached in
		 * fchan->accept()
		 */
		ch->rx.cid = fchan->cid;
    4aba:	8823      	ldrh	r3, [r4, #0]
    4abc:	872b      	strh	r3, [r5, #56]	; 0x38
		ch->tx.cid = fchan->cid;
    4abe:	f8a5 3054 	strh.w	r3, [r5, #84]	; 0x54
	if (!ch) {
		BT_ERR("Unable to allocate L2CAP CID");
		return false;
	}

	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    4ac2:	4910      	ldr	r1, [pc, #64]	; (4b04 <bt_l2cap_connected+0x6c>)
    4ac4:	f105 0010 	add.w	r0, r5, #16
    4ac8:	f00e fe8c 	bl	137e4 <k_delayed_work_init>

	if (!list->tail) {
    4acc:	6cb2      	ldr	r2, [r6, #72]	; 0x48
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node)
{
	node->next = NULL;
    4ace:	60af      	str	r7, [r5, #8]

void bt_l2cap_chan_add(struct bt_conn *conn, struct bt_l2cap_chan *chan,
		       bt_l2cap_chan_destroy_t destroy)
{
	/* Attach channel to the connection */
	sys_slist_append(&conn->channels, &chan->node);
    4ad0:	f105 0308 	add.w	r3, r5, #8

	if (!list->tail) {
    4ad4:	b912      	cbnz	r2, 4adc <bt_l2cap_connected+0x44>
		list->tail = node;
    4ad6:	64b3      	str	r3, [r6, #72]	; 0x48
		list->head = node;
    4ad8:	6473      	str	r3, [r6, #68]	; 0x44
    4ada:	e001      	b.n	4ae0 <bt_l2cap_connected+0x48>
	} else {
		list->tail->next = node;
    4adc:	6013      	str	r3, [r2, #0]
		list->tail = node;
    4ade:	64b3      	str	r3, [r6, #72]	; 0x48

		if (!l2cap_chan_add(conn, chan, NULL)) {
			return;
		}

		if (chan->ops->connected) {
    4ae0:	9801      	ldr	r0, [sp, #4]
void bt_l2cap_chan_add(struct bt_conn *conn, struct bt_l2cap_chan *chan,
		       bt_l2cap_chan_destroy_t destroy)
{
	/* Attach channel to the connection */
	sys_slist_append(&conn->channels, &chan->node);
	chan->conn = conn;
    4ae2:	602e      	str	r6, [r5, #0]

		if (!l2cap_chan_add(conn, chan, NULL)) {
			return;
		}

		if (chan->ops->connected) {
    4ae4:	6843      	ldr	r3, [r0, #4]
		       bt_l2cap_chan_destroy_t destroy)
{
	/* Attach channel to the connection */
	sys_slist_append(&conn->channels, &chan->node);
	chan->conn = conn;
	chan->destroy = destroy;
    4ae6:	f8c5 800c 	str.w	r8, [r5, #12]

		if (!l2cap_chan_add(conn, chan, NULL)) {
			return;
		}

		if (chan->ops->connected) {
    4aea:	681b      	ldr	r3, [r3, #0]
    4aec:	b103      	cbz	r3, 4af0 <bt_l2cap_connected+0x58>
			chan->ops->connected(chan);
    4aee:	4798      	blx	r3
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node)
{
	return node->next;
    4af0:	68a4      	ldr	r4, [r4, #8]
	    conn->type == BT_CONN_TYPE_BR) {
		bt_l2cap_br_connected(conn);
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    4af2:	b10c      	cbz	r4, 4af8 <bt_l2cap_connected+0x60>
    4af4:	3c08      	subs	r4, #8
    4af6:	e7d8      	b.n	4aaa <bt_l2cap_connected+0x12>

		if (chan->ops->connected) {
			chan->ops->connected(chan);
		}
	}
}
    4af8:	b002      	add	sp, #8
    4afa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4afe:	bf00      	nop
    4b00:	20000c14 	.word	0x20000c14
    4b04:	00004a49 	.word	0x00004a49

00004b08 <bt_l2cap_disconnected>:

void bt_l2cap_disconnected(struct bt_conn *conn)
{
    4b08:	6c43      	ldr	r3, [r0, #68]	; 0x44
    4b0a:	b510      	push	{r4, lr}
	struct bt_l2cap_chan *chan, *next;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    4b0c:	b19b      	cbz	r3, 4b36 <bt_l2cap_disconnected+0x2e>
    4b0e:	f1b3 0008 	subs.w	r0, r3, #8
    4b12:	d100      	bne.n	4b16 <bt_l2cap_disconnected+0xe>
    4b14:	bd10      	pop	{r4, pc}
    4b16:	681c      	ldr	r4, [r3, #0]
    4b18:	b14c      	cbz	r4, 4b2e <bt_l2cap_disconnected+0x26>
    4b1a:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
    4b1c:	f7ff ff83 	bl	4a26 <bt_l2cap_chan_del>

void bt_l2cap_disconnected(struct bt_conn *conn)
{
	struct bt_l2cap_chan *chan, *next;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    4b20:	b14c      	cbz	r4, 4b36 <bt_l2cap_disconnected+0x2e>
    4b22:	68a3      	ldr	r3, [r4, #8]
    4b24:	4620      	mov	r0, r4
    4b26:	b113      	cbz	r3, 4b2e <bt_l2cap_disconnected+0x26>
    4b28:	f1a3 0408 	sub.w	r4, r3, #8
    4b2c:	e7f6      	b.n	4b1c <bt_l2cap_disconnected+0x14>
		bt_l2cap_chan_del(chan);
	}
}
    4b2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void bt_l2cap_disconnected(struct bt_conn *conn)
{
	struct bt_l2cap_chan *chan, *next;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
		bt_l2cap_chan_del(chan);
    4b32:	f7ff bf78 	b.w	4a26 <bt_l2cap_chan_del>
    4b36:	bd10      	pop	{r4, pc}

00004b38 <bt_l2cap_encrypt_change>:
	l2cap_le_conn_req(BT_L2CAP_LE_CHAN(chan));
}
#endif /* CONFIG_BLUETOOTH_L2CAP_DYNAMIC_CHANNEL */

void bt_l2cap_encrypt_change(struct bt_conn *conn, u8_t hci_status)
{
    4b38:	b538      	push	{r3, r4, r5, lr}
    4b3a:	6c44      	ldr	r4, [r0, #68]	; 0x44
    4b3c:	460d      	mov	r5, r1
	    conn->type == BT_CONN_TYPE_BR) {
		l2cap_br_encrypt_change(conn, hci_status);
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    4b3e:	b14c      	cbz	r4, 4b54 <bt_l2cap_encrypt_change+0x1c>
    4b40:	3c08      	subs	r4, #8
    4b42:	b13c      	cbz	r4, 4b54 <bt_l2cap_encrypt_change+0x1c>
#if defined(CONFIG_BLUETOOTH_L2CAP_DYNAMIC_CHANNEL)
		l2cap_le_encrypt_change(chan, hci_status);
#endif

		if (chan->ops->encrypt_change) {
    4b44:	6863      	ldr	r3, [r4, #4]
    4b46:	689b      	ldr	r3, [r3, #8]
    4b48:	b113      	cbz	r3, 4b50 <bt_l2cap_encrypt_change+0x18>
			chan->ops->encrypt_change(chan, hci_status);
    4b4a:	4629      	mov	r1, r5
    4b4c:	4620      	mov	r0, r4
    4b4e:	4798      	blx	r3
    4b50:	68a4      	ldr	r4, [r4, #8]
    4b52:	e7f4      	b.n	4b3e <bt_l2cap_encrypt_change+0x6>
    4b54:	bd38      	pop	{r3, r4, r5, pc}

00004b56 <bt_l2cap_create_pdu>:
	return buf;
}

struct net_buf *bt_l2cap_create_pdu(struct net_buf_pool *pool, size_t reserve)
{
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    4b56:	3104      	adds	r1, #4
    4b58:	f7ff be14 	b.w	4784 <bt_conn_create_pdu>

00004b5c <bt_l2cap_send_cb>:
}

void bt_l2cap_send_cb(struct bt_conn *conn, u16_t cid, struct net_buf *buf,
		      bt_conn_tx_cb_t cb)
{
    4b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4b5e:	4614      	mov	r4, r2
    4b60:	4605      	mov	r5, r0
    4b62:	460f      	mov	r7, r1
	struct bt_l2cap_hdr *hdr;

	BT_DBG("conn %p cid %u len %zu", conn, cid, net_buf_frags_len(buf));

	hdr = net_buf_push(buf, sizeof(*hdr));
    4b64:	f102 0008 	add.w	r0, r2, #8
    4b68:	2104      	movs	r1, #4
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
}

void bt_l2cap_send_cb(struct bt_conn *conn, u16_t cid, struct net_buf *buf,
		      bt_conn_tx_cb_t cb)
{
    4b6a:	461e      	mov	r6, r3
	struct bt_l2cap_hdr *hdr;

	BT_DBG("conn %p cid %u len %zu", conn, cid, net_buf_frags_len(buf));

	hdr = net_buf_push(buf, sizeof(*hdr));
    4b6c:	f00d f865 	bl	11c3a <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    4b70:	89a1      	ldrh	r1, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
    4b72:	8047      	strh	r7, [r0, #2]
	struct bt_l2cap_hdr *hdr;

	BT_DBG("conn %p cid %u len %zu", conn, cid, net_buf_frags_len(buf));

	hdr = net_buf_push(buf, sizeof(*hdr));
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    4b74:	3904      	subs	r1, #4
    4b76:	8001      	strh	r1, [r0, #0]
	hdr->cid = sys_cpu_to_le16(cid);

	bt_conn_send_cb(conn, buf, cb);
    4b78:	4632      	mov	r2, r6
    4b7a:	4621      	mov	r1, r4
    4b7c:	4628      	mov	r0, r5
}
    4b7e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}

	hdr = net_buf_push(buf, sizeof(*hdr));
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
	hdr->cid = sys_cpu_to_le16(cid);

	bt_conn_send_cb(conn, buf, cb);
    4b82:	f7ff babd 	b.w	4100 <bt_conn_send_cb>
	...

00004b88 <l2cap_recv>:
	bt_l2cap_chan_del(&chan->chan);
}
#endif /* CONFIG_BLUETOOTH_L2CAP_DYNAMIC_CHANNEL */

static void l2cap_recv(struct bt_l2cap_chan *chan, struct net_buf *buf)
{
    4b88:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_l2cap *l2cap = CONTAINER_OF(chan, struct bt_l2cap, chan);
	struct bt_l2cap_sig_hdr *hdr = (void *)buf->data;
	u16_t len;

	if (buf->len < sizeof(*hdr)) {
    4b8a:	898b      	ldrh	r3, [r1, #12]
    4b8c:	2b03      	cmp	r3, #3
	bt_l2cap_chan_del(&chan->chan);
}
#endif /* CONFIG_BLUETOOTH_L2CAP_DYNAMIC_CHANNEL */

static void l2cap_recv(struct bt_l2cap_chan *chan, struct net_buf *buf)
{
    4b8e:	b085      	sub	sp, #20
    4b90:	4607      	mov	r7, r0
    4b92:	460e      	mov	r6, r1
	struct bt_l2cap *l2cap = CONTAINER_OF(chan, struct bt_l2cap, chan);
	struct bt_l2cap_sig_hdr *hdr = (void *)buf->data;
	u16_t len;

	if (buf->len < sizeof(*hdr)) {
    4b94:	d808      	bhi.n	4ba8 <l2cap_recv+0x20>
		BT_ERR("Too small L2CAP signaling PDU");
    4b96:	4b36      	ldr	r3, [pc, #216]	; (4c70 <l2cap_recv+0xe8>)
    4b98:	9301      	str	r3, [sp, #4]
    4b9a:	4b36      	ldr	r3, [pc, #216]	; (4c74 <l2cap_recv+0xec>)
    4b9c:	9300      	str	r3, [sp, #0]
    4b9e:	4a36      	ldr	r2, [pc, #216]	; (4c78 <l2cap_recv+0xf0>)
    4ba0:	4b36      	ldr	r3, [pc, #216]	; (4c7c <l2cap_recv+0xf4>)
    4ba2:	4937      	ldr	r1, [pc, #220]	; (4c80 <l2cap_recv+0xf8>)
    4ba4:	4837      	ldr	r0, [pc, #220]	; (4c84 <l2cap_recv+0xfc>)
    4ba6:	e030      	b.n	4c0a <l2cap_recv+0x82>
#endif /* CONFIG_BLUETOOTH_L2CAP_DYNAMIC_CHANNEL */

static void l2cap_recv(struct bt_l2cap_chan *chan, struct net_buf *buf)
{
	struct bt_l2cap *l2cap = CONTAINER_OF(chan, struct bt_l2cap, chan);
	struct bt_l2cap_sig_hdr *hdr = (void *)buf->data;
    4ba8:	4608      	mov	r0, r1
		BT_ERR("Too small L2CAP signaling PDU");
		return;
	}

	len = sys_le16_to_cpu(hdr->len);
	net_buf_pull(buf, sizeof(*hdr));
    4baa:	2104      	movs	r1, #4
#endif /* CONFIG_BLUETOOTH_L2CAP_DYNAMIC_CHANNEL */

static void l2cap_recv(struct bt_l2cap_chan *chan, struct net_buf *buf)
{
	struct bt_l2cap *l2cap = CONTAINER_OF(chan, struct bt_l2cap, chan);
	struct bt_l2cap_sig_hdr *hdr = (void *)buf->data;
    4bac:	f850 4f08 	ldr.w	r4, [r0, #8]!
	if (buf->len < sizeof(*hdr)) {
		BT_ERR("Too small L2CAP signaling PDU");
		return;
	}

	len = sys_le16_to_cpu(hdr->len);
    4bb0:	8865      	ldrh	r5, [r4, #2]
	net_buf_pull(buf, sizeof(*hdr));
    4bb2:	f00d f84a 	bl	11c4a <net_buf_simple_pull>

	BT_DBG("Signaling code 0x%02x ident %u len %u", hdr->code,
	       hdr->ident, len);

	if (buf->len != len) {
    4bb6:	89b3      	ldrh	r3, [r6, #12]
    4bb8:	429d      	cmp	r5, r3
    4bba:	d00c      	beq.n	4bd6 <l2cap_recv+0x4e>
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
    4bbc:	4a2c      	ldr	r2, [pc, #176]	; (4c70 <l2cap_recv+0xe8>)
    4bbe:	9301      	str	r3, [sp, #4]
    4bc0:	4b2c      	ldr	r3, [pc, #176]	; (4c74 <l2cap_recv+0xec>)
    4bc2:	9203      	str	r2, [sp, #12]
    4bc4:	9300      	str	r3, [sp, #0]
    4bc6:	9502      	str	r5, [sp, #8]
    4bc8:	4b2c      	ldr	r3, [pc, #176]	; (4c7c <l2cap_recv+0xf4>)
    4bca:	4a2b      	ldr	r2, [pc, #172]	; (4c78 <l2cap_recv+0xf0>)
    4bcc:	492c      	ldr	r1, [pc, #176]	; (4c80 <l2cap_recv+0xf8>)
    4bce:	482e      	ldr	r0, [pc, #184]	; (4c88 <l2cap_recv+0x100>)
    4bd0:	f7fc fc56 	bl	1480 <printk>
		return;
    4bd4:	e049      	b.n	4c6a <l2cap_recv+0xe2>
	}

	if (!hdr->ident) {
    4bd6:	7863      	ldrb	r3, [r4, #1]
    4bd8:	b943      	cbnz	r3, 4bec <l2cap_recv+0x64>
		BT_ERR("Invalid ident value in L2CAP PDU");
    4bda:	4b25      	ldr	r3, [pc, #148]	; (4c70 <l2cap_recv+0xe8>)
    4bdc:	9301      	str	r3, [sp, #4]
    4bde:	4b25      	ldr	r3, [pc, #148]	; (4c74 <l2cap_recv+0xec>)
    4be0:	9300      	str	r3, [sp, #0]
    4be2:	4a25      	ldr	r2, [pc, #148]	; (4c78 <l2cap_recv+0xf0>)
    4be4:	4b25      	ldr	r3, [pc, #148]	; (4c7c <l2cap_recv+0xf4>)
    4be6:	4926      	ldr	r1, [pc, #152]	; (4c80 <l2cap_recv+0xf8>)
    4be8:	4828      	ldr	r0, [pc, #160]	; (4c8c <l2cap_recv+0x104>)
    4bea:	e00e      	b.n	4c0a <l2cap_recv+0x82>
		return;
	}

	switch (hdr->code) {
    4bec:	7823      	ldrb	r3, [r4, #0]
    4bee:	2b01      	cmp	r3, #1
    4bf0:	d03b      	beq.n	4c6a <l2cap_recv+0xe2>
    4bf2:	2b13      	cmp	r3, #19
    4bf4:	d10c      	bne.n	4c10 <l2cap_recv+0x88>

static void le_conn_param_rsp(struct bt_l2cap *l2cap, struct net_buf *buf)
{
	struct bt_l2cap_conn_param_rsp *rsp = (void *)buf->data;

	if (buf->len < sizeof(*rsp)) {
    4bf6:	2d01      	cmp	r5, #1
    4bf8:	d837      	bhi.n	4c6a <l2cap_recv+0xe2>
		BT_ERR("Too small LE conn param rsp");
    4bfa:	4b1d      	ldr	r3, [pc, #116]	; (4c70 <l2cap_recv+0xe8>)
    4bfc:	9301      	str	r3, [sp, #4]
    4bfe:	4b1d      	ldr	r3, [pc, #116]	; (4c74 <l2cap_recv+0xec>)
    4c00:	9300      	str	r3, [sp, #0]
    4c02:	4a1d      	ldr	r2, [pc, #116]	; (4c78 <l2cap_recv+0xf0>)
    4c04:	4b22      	ldr	r3, [pc, #136]	; (4c90 <l2cap_recv+0x108>)
    4c06:	491e      	ldr	r1, [pc, #120]	; (4c80 <l2cap_recv+0xf8>)
    4c08:	4822      	ldr	r0, [pc, #136]	; (4c94 <l2cap_recv+0x10c>)
    4c0a:	f7fc fc39 	bl	1480 <printk>
    4c0e:	e02c      	b.n	4c6a <l2cap_recv+0xe2>
	case BT_L2CAP_CMD_REJECT:
		/* Ignored */
		break;
#endif /* CONFIG_BLUETOOTH_L2CAP_DYNAMIC_CHANNEL */
	default:
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
    4c10:	9301      	str	r3, [sp, #4]
    4c12:	4a17      	ldr	r2, [pc, #92]	; (4c70 <l2cap_recv+0xe8>)
    4c14:	4b20      	ldr	r3, [pc, #128]	; (4c98 <l2cap_recv+0x110>)
    4c16:	9202      	str	r2, [sp, #8]
    4c18:	9300      	str	r3, [sp, #0]
    4c1a:	4a20      	ldr	r2, [pc, #128]	; (4c9c <l2cap_recv+0x114>)
    4c1c:	4b17      	ldr	r3, [pc, #92]	; (4c7c <l2cap_recv+0xf4>)
    4c1e:	4918      	ldr	r1, [pc, #96]	; (4c80 <l2cap_recv+0xf8>)
    4c20:	481f      	ldr	r0, [pc, #124]	; (4ca0 <l2cap_recv+0x118>)
    4c22:	f7fc fc2d 	bl	1480 <printk>
	return buf;
}

struct net_buf *bt_l2cap_create_pdu(struct net_buf_pool *pool, size_t reserve)
{
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    4c26:	2104      	movs	r1, #4
    4c28:	2000      	movs	r0, #0
		/* Ignored */
		break;
#endif /* CONFIG_BLUETOOTH_L2CAP_DYNAMIC_CHANNEL */
	default:
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
		l2cap_send_reject(chan->conn, hdr->ident,
    4c2a:	683f      	ldr	r7, [r7, #0]
    4c2c:	7864      	ldrb	r4, [r4, #1]
	return buf;
}

struct net_buf *bt_l2cap_create_pdu(struct net_buf_pool *pool, size_t reserve)
{
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    4c2e:	f7ff fda9 	bl	4784 <bt_conn_create_pdu>
{
	struct bt_l2cap_sig_hdr *hdr;

	buf = bt_l2cap_create_rsp(buf, 0);

	hdr = net_buf_add(buf, sizeof(*hdr));
    4c32:	f100 0608 	add.w	r6, r0, #8
	return buf;
}

struct net_buf *bt_l2cap_create_pdu(struct net_buf_pool *pool, size_t reserve)
{
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    4c36:	4605      	mov	r5, r0
{
	struct bt_l2cap_sig_hdr *hdr;

	buf = bt_l2cap_create_rsp(buf, 0);

	hdr = net_buf_add(buf, sizeof(*hdr));
    4c38:	2104      	movs	r1, #4
    4c3a:	4630      	mov	r0, r6
    4c3c:	f00c ffe6 	bl	11c0c <net_buf_simple_add>
	hdr->code = code;
    4c40:	2301      	movs	r3, #1
	hdr->ident = ident;
    4c42:	7044      	strb	r4, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
    4c44:	2102      	movs	r1, #2
    4c46:	2400      	movs	r4, #0
	struct bt_l2cap_sig_hdr *hdr;

	buf = bt_l2cap_create_rsp(buf, 0);

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->code = code;
    4c48:	7003      	strb	r3, [r0, #0]
	hdr->ident = ident;
	hdr->len = sys_cpu_to_le16(len);
    4c4a:	7081      	strb	r1, [r0, #2]
    4c4c:	70c4      	strb	r4, [r0, #3]
	struct net_buf *buf;

	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
				      sizeof(*rej) + data_len);

	rej = net_buf_add(buf, sizeof(*rej));
    4c4e:	4630      	mov	r0, r6
    4c50:	f00c ffdc 	bl	11c0c <net_buf_simple_add>
		      bt_conn_tx_cb_t cb);

static inline void bt_l2cap_send(struct bt_conn *conn, u16_t cid,
				 struct net_buf *buf)
{
	bt_l2cap_send_cb(conn, cid, buf, NULL);
    4c54:	4623      	mov	r3, r4
	rej->reason = sys_cpu_to_le16(reason);
    4c56:	7004      	strb	r4, [r0, #0]
    4c58:	7044      	strb	r4, [r0, #1]
    4c5a:	462a      	mov	r2, r5
    4c5c:	2105      	movs	r1, #5
    4c5e:	4638      	mov	r0, r7
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
		l2cap_send_reject(chan->conn, hdr->ident,
				  BT_L2CAP_REJ_NOT_UNDERSTOOD, NULL, 0);
		break;
	}
}
    4c60:	b005      	add	sp, #20
    4c62:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    4c66:	f7ff bf79 	b.w	4b5c <bt_l2cap_send_cb>
    4c6a:	b005      	add	sp, #20
    4c6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4c6e:	bf00      	nop
    4c70:	00013df4 	.word	0x00013df4
    4c74:	00013df9 	.word	0x00013df9
    4c78:	00013db4 	.word	0x00013db4
    4c7c:	00016192 	.word	0x00016192
    4c80:	00013dbb 	.word	0x00013dbb
    4c84:	00014721 	.word	0x00014721
    4c88:	0001474f 	.word	0x0001474f
    4c8c:	00014780 	.word	0x00014780
    4c90:	000161cd 	.word	0x000161cd
    4c94:	000147b1 	.word	0x000147b1
    4c98:	00013e3f 	.word	0x00013e3f
    4c9c:	00013e01 	.word	0x00013e01
    4ca0:	000147dd 	.word	0x000147dd

00004ca4 <bt_l2cap_le_lookup_tx_cid>:
}
#endif /* CONFIG_BLUETOOTH_CENTRAL */

struct bt_l2cap_chan *bt_l2cap_le_lookup_tx_cid(struct bt_conn *conn,
						u16_t cid)
{
    4ca4:	6c40      	ldr	r0, [r0, #68]	; 0x44
	struct bt_l2cap_chan *chan;

	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    4ca6:	b138      	cbz	r0, 4cb8 <bt_l2cap_le_lookup_tx_cid+0x14>
    4ca8:	3808      	subs	r0, #8
    4caa:	b128      	cbz	r0, 4cb8 <bt_l2cap_le_lookup_tx_cid+0x14>
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
    4cac:	f8b0 3054 	ldrh.w	r3, [r0, #84]	; 0x54
    4cb0:	428b      	cmp	r3, r1
    4cb2:	d001      	beq.n	4cb8 <bt_l2cap_le_lookup_tx_cid+0x14>
    4cb4:	6880      	ldr	r0, [r0, #8]
    4cb6:	e7f6      	b.n	4ca6 <bt_l2cap_le_lookup_tx_cid+0x2>
			return chan;
		}
	}

	return NULL;
}
    4cb8:	4770      	bx	lr

00004cba <bt_l2cap_le_lookup_rx_cid>:

struct bt_l2cap_chan *bt_l2cap_le_lookup_rx_cid(struct bt_conn *conn,
						u16_t cid)
{
    4cba:	6c40      	ldr	r0, [r0, #68]	; 0x44
	struct bt_l2cap_chan *chan;

	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    4cbc:	b130      	cbz	r0, 4ccc <bt_l2cap_le_lookup_rx_cid+0x12>
    4cbe:	3808      	subs	r0, #8
    4cc0:	b120      	cbz	r0, 4ccc <bt_l2cap_le_lookup_rx_cid+0x12>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
    4cc2:	8f03      	ldrh	r3, [r0, #56]	; 0x38
    4cc4:	428b      	cmp	r3, r1
    4cc6:	d001      	beq.n	4ccc <bt_l2cap_le_lookup_rx_cid+0x12>
    4cc8:	6880      	ldr	r0, [r0, #8]
    4cca:	e7f7      	b.n	4cbc <bt_l2cap_le_lookup_rx_cid+0x2>
			return chan;
		}
	}

	return NULL;
}
    4ccc:	4770      	bx	lr
	...

00004cd0 <bt_l2cap_recv>:

	chan->ops->recv(chan, buf);
}

void bt_l2cap_recv(struct bt_conn *conn, struct net_buf *buf)
{
    4cd0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	    conn->type == BT_CONN_TYPE_BR) {
		bt_l2cap_br_recv(conn, buf);
		return;
	}

	if (buf->len < sizeof(*hdr)) {
    4cd2:	898b      	ldrh	r3, [r1, #12]
    4cd4:	2b03      	cmp	r3, #3

	chan->ops->recv(chan, buf);
}

void bt_l2cap_recv(struct bt_conn *conn, struct net_buf *buf)
{
    4cd6:	4606      	mov	r6, r0
    4cd8:	460c      	mov	r4, r1
	    conn->type == BT_CONN_TYPE_BR) {
		bt_l2cap_br_recv(conn, buf);
		return;
	}

	if (buf->len < sizeof(*hdr)) {
    4cda:	d80a      	bhi.n	4cf2 <bt_l2cap_recv+0x22>
		BT_ERR("Too small L2CAP PDU received");
    4cdc:	4b16      	ldr	r3, [pc, #88]	; (4d38 <bt_l2cap_recv+0x68>)
    4cde:	9301      	str	r3, [sp, #4]
    4ce0:	4b16      	ldr	r3, [pc, #88]	; (4d3c <bt_l2cap_recv+0x6c>)
    4ce2:	9300      	str	r3, [sp, #0]
    4ce4:	4a16      	ldr	r2, [pc, #88]	; (4d40 <bt_l2cap_recv+0x70>)
    4ce6:	4b17      	ldr	r3, [pc, #92]	; (4d44 <bt_l2cap_recv+0x74>)
    4ce8:	4917      	ldr	r1, [pc, #92]	; (4d48 <bt_l2cap_recv+0x78>)
    4cea:	4818      	ldr	r0, [pc, #96]	; (4d4c <bt_l2cap_recv+0x7c>)
    4cec:	f7fc fbc8 	bl	1480 <printk>
    4cf0:	e01b      	b.n	4d2a <bt_l2cap_recv+0x5a>
		net_buf_unref(buf);
		return;
	}

	cid = sys_le16_to_cpu(hdr->cid);
    4cf2:	4608      	mov	r0, r1
	net_buf_pull(buf, sizeof(*hdr));
    4cf4:	2104      	movs	r1, #4
		BT_ERR("Too small L2CAP PDU received");
		net_buf_unref(buf);
		return;
	}

	cid = sys_le16_to_cpu(hdr->cid);
    4cf6:	f850 3f08 	ldr.w	r3, [r0, #8]!
    4cfa:	885d      	ldrh	r5, [r3, #2]
	net_buf_pull(buf, sizeof(*hdr));
    4cfc:	f00c ffa5 	bl	11c4a <net_buf_simple_pull>

	BT_DBG("Packet for CID %u len %u", cid, buf->len);

	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
    4d00:	4629      	mov	r1, r5
    4d02:	4630      	mov	r0, r6
    4d04:	f7ff ffd9 	bl	4cba <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    4d08:	b958      	cbnz	r0, 4d22 <bt_l2cap_recv+0x52>
		BT_WARN("Ignoring data for unknown CID 0x%04x", cid);
    4d0a:	4b0b      	ldr	r3, [pc, #44]	; (4d38 <bt_l2cap_recv+0x68>)
    4d0c:	9302      	str	r3, [sp, #8]
    4d0e:	4b10      	ldr	r3, [pc, #64]	; (4d50 <bt_l2cap_recv+0x80>)
    4d10:	9300      	str	r3, [sp, #0]
    4d12:	9501      	str	r5, [sp, #4]
    4d14:	4b0b      	ldr	r3, [pc, #44]	; (4d44 <bt_l2cap_recv+0x74>)
    4d16:	4a0f      	ldr	r2, [pc, #60]	; (4d54 <bt_l2cap_recv+0x84>)
    4d18:	490b      	ldr	r1, [pc, #44]	; (4d48 <bt_l2cap_recv+0x78>)
    4d1a:	480f      	ldr	r0, [pc, #60]	; (4d58 <bt_l2cap_recv+0x88>)
    4d1c:	f7fc fbb0 	bl	1480 <printk>
    4d20:	e003      	b.n	4d2a <bt_l2cap_recv+0x5a>
	}
#endif /* CONFIG_BLUETOOTH_L2CAP_DYNAMIC_CHANNEL */

	BT_DBG("chan %p len %u", chan, buf->len);

	chan->ops->recv(chan, buf);
    4d22:	6843      	ldr	r3, [r0, #4]
    4d24:	4621      	mov	r1, r4
    4d26:	691b      	ldr	r3, [r3, #16]
    4d28:	4798      	blx	r3
		net_buf_unref(buf);
		return;
	}

	l2cap_chan_recv(chan, buf);
	net_buf_unref(buf);
    4d2a:	4620      	mov	r0, r4
}
    4d2c:	b004      	add	sp, #16
    4d2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		net_buf_unref(buf);
		return;
	}

	l2cap_chan_recv(chan, buf);
	net_buf_unref(buf);
    4d32:	f00c bf4b 	b.w	11bcc <net_buf_unref>
    4d36:	bf00      	nop
    4d38:	00013df4 	.word	0x00013df4
    4d3c:	00013df9 	.word	0x00013df9
    4d40:	00013db4 	.word	0x00013db4
    4d44:	000161bf 	.word	0x000161bf
    4d48:	00013dbb 	.word	0x00013dbb
    4d4c:	0001480b 	.word	0x0001480b
    4d50:	00013e3f 	.word	0x00013e3f
    4d54:	00013e01 	.word	0x00013e01
    4d58:	00014838 	.word	0x00014838

00004d5c <bt_l2cap_update_conn_param>:
}

int bt_l2cap_update_conn_param(struct bt_conn *conn,
			       const struct bt_le_conn_param *param)
{
    4d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

static u8_t get_ident(void)
{
	static u8_t ident;

	ident++;
    4d60:	4b18      	ldr	r3, [pc, #96]	; (4dc4 <bt_l2cap_update_conn_param+0x68>)
    4d62:	781a      	ldrb	r2, [r3, #0]
	net_buf_unref(buf);
}

int bt_l2cap_update_conn_param(struct bt_conn *conn,
			       const struct bt_le_conn_param *param)
{
    4d64:	460c      	mov	r4, r1

static u8_t get_ident(void)
{
	static u8_t ident;

	ident++;
    4d66:	1c51      	adds	r1, r2, #1
	/* handle integer overflow (0 is not valid) */
	if (!ident) {
    4d68:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
		ident++;
    4d6c:	bf0a      	itet	eq
    4d6e:	3202      	addeq	r2, #2

static u8_t get_ident(void)
{
	static u8_t ident;

	ident++;
    4d70:	7019      	strbne	r1, [r3, #0]
	/* handle integer overflow (0 is not valid) */
	if (!ident) {
		ident++;
    4d72:	701a      	strbeq	r2, [r3, #0]
	net_buf_unref(buf);
}

int bt_l2cap_update_conn_param(struct bt_conn *conn,
			       const struct bt_le_conn_param *param)
{
    4d74:	4605      	mov	r5, r0
	return buf;
}

struct net_buf *bt_l2cap_create_pdu(struct net_buf_pool *pool, size_t reserve)
{
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    4d76:	2104      	movs	r1, #4
    4d78:	2000      	movs	r0, #0
	/* handle integer overflow (0 is not valid) */
	if (!ident) {
		ident++;
	}

	return ident;
    4d7a:	781e      	ldrb	r6, [r3, #0]
	return buf;
}

struct net_buf *bt_l2cap_create_pdu(struct net_buf_pool *pool, size_t reserve)
{
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    4d7c:	f7ff fd02 	bl	4784 <bt_conn_create_pdu>
{
	struct bt_l2cap_sig_hdr *hdr;

	buf = bt_l2cap_create_rsp(buf, 0);

	hdr = net_buf_add(buf, sizeof(*hdr));
    4d80:	f100 0808 	add.w	r8, r0, #8
	return buf;
}

struct net_buf *bt_l2cap_create_pdu(struct net_buf_pool *pool, size_t reserve)
{
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    4d84:	4607      	mov	r7, r0
{
	struct bt_l2cap_sig_hdr *hdr;

	buf = bt_l2cap_create_rsp(buf, 0);

	hdr = net_buf_add(buf, sizeof(*hdr));
    4d86:	2104      	movs	r1, #4
    4d88:	4640      	mov	r0, r8
    4d8a:	f00c ff3f 	bl	11c0c <net_buf_simple_add>
	hdr->code = code;
    4d8e:	2312      	movs	r3, #18
	hdr->ident = ident;
    4d90:	7046      	strb	r6, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
    4d92:	2108      	movs	r1, #8
    4d94:	2600      	movs	r6, #0
	struct bt_l2cap_sig_hdr *hdr;

	buf = bt_l2cap_create_rsp(buf, 0);

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->code = code;
    4d96:	7003      	strb	r3, [r0, #0]
	hdr->ident = ident;
	hdr->len = sys_cpu_to_le16(len);
    4d98:	7081      	strb	r1, [r0, #2]
    4d9a:	70c6      	strb	r6, [r0, #3]
	struct net_buf *buf;

	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
				      get_ident(), sizeof(*req));

	req = net_buf_add(buf, sizeof(*req));
    4d9c:	4640      	mov	r0, r8
    4d9e:	f00c ff35 	bl	11c0c <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
    4da2:	8823      	ldrh	r3, [r4, #0]
    4da4:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
    4da6:	8863      	ldrh	r3, [r4, #2]
    4da8:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
    4daa:	88a3      	ldrh	r3, [r4, #4]
    4dac:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
    4dae:	88e3      	ldrh	r3, [r4, #6]
    4db0:	80c3      	strh	r3, [r0, #6]
    4db2:	463a      	mov	r2, r7
    4db4:	4628      	mov	r0, r5
    4db6:	4633      	mov	r3, r6
    4db8:	2105      	movs	r1, #5
    4dba:	f7ff fecf 	bl	4b5c <bt_l2cap_send_cb>

	bt_l2cap_send(conn, BT_L2CAP_CID_LE_SIG, buf);

	return 0;
}
    4dbe:	4630      	mov	r0, r6
    4dc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4dc4:	20000cac 	.word	0x20000cac

00004dc8 <bt_l2cap_init>:
	static struct bt_l2cap_fixed_chan chan = {
		.cid	= BT_L2CAP_CID_LE_SIG,
		.accept	= l2cap_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
    4dc8:	4801      	ldr	r0, [pc, #4]	; (4dd0 <bt_l2cap_init+0x8>)
    4dca:	f7ff bdfb 	b.w	49c4 <bt_l2cap_le_fixed_chan_register>
    4dce:	bf00      	nop
    4dd0:	20000390 	.word	0x20000390

00004dd4 <att_exec_write_req>:

	BT_DBG("flags 0x%02x", req->flags);

	return att_exec_write_rsp(att, req->flags);
#endif /* CONFIG_BLUETOOTH_ATT_PREPARE_COUNT */
}
    4dd4:	2006      	movs	r0, #6
    4dd6:	4770      	bx	lr

00004dd8 <att_op_get_type>:
		ATT_COMMAND,
		att_signed_write_cmd },
};

static att_type_t att_op_get_type(u8_t op)
{
    4dd8:	b510      	push	{r4, lr}
	const struct att_handler *handler;
	int i;

	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
		if (op == handlers[i].op) {
    4dda:	490a      	ldr	r1, [pc, #40]	; (4e04 <att_op_get_type+0x2c>)
static att_type_t att_op_get_type(u8_t op)
{
	const struct att_handler *handler;
	int i;

	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    4ddc:	2300      	movs	r3, #0
		if (op == handlers[i].op) {
    4dde:	f811 4033 	ldrb.w	r4, [r1, r3, lsl #3]
    4de2:	4284      	cmp	r4, r0
    4de4:	ea4f 02c3 	mov.w	r2, r3, lsl #3
    4de8:	d103      	bne.n	4df2 <att_op_get_type+0x1a>
			return handlers[i].type;
    4dea:	4b06      	ldr	r3, [pc, #24]	; (4e04 <att_op_get_type+0x2c>)
    4dec:	4413      	add	r3, r2
    4dee:	7898      	ldrb	r0, [r3, #2]
    4df0:	bd10      	pop	{r4, pc}
static att_type_t att_op_get_type(u8_t op)
{
	const struct att_handler *handler;
	int i;

	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    4df2:	3301      	adds	r3, #1
    4df4:	2b1b      	cmp	r3, #27
    4df6:	d1f2      	bne.n	4dde <att_op_get_type+0x6>

	if (op & ATT_CMD_MASK) {
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
    4df8:	f010 0f40 	tst.w	r0, #64	; 0x40
    4dfc:	bf14      	ite	ne
    4dfe:	2000      	movne	r0, #0
    4e00:	2006      	moveq	r0, #6
}
    4e02:	bd10      	pop	{r4, pc}
    4e04:	0001620c 	.word	0x0001620c

00004e08 <att_req_destroy>:
};

static struct bt_att bt_req_pool[CONFIG_BLUETOOTH_MAX_CONN];

static void att_req_destroy(struct bt_att_req *req)
{
    4e08:	b510      	push	{r4, lr}
    4e0a:	4604      	mov	r4, r0
	BT_DBG("req %p", req);

	if (req->buf) {
    4e0c:	6900      	ldr	r0, [r0, #16]
    4e0e:	b108      	cbz	r0, 4e14 <att_req_destroy+0xc>
		net_buf_unref(req->buf);
    4e10:	f00c fedc 	bl	11bcc <net_buf_unref>
	}

	if (req->destroy) {
    4e14:	68a3      	ldr	r3, [r4, #8]
    4e16:	b10b      	cbz	r3, 4e1c <att_req_destroy+0x14>
		req->destroy(req);
    4e18:	4620      	mov	r0, r4
    4e1a:	4798      	blx	r3
	}

	memset(req, 0, sizeof(*req));
    4e1c:	4620      	mov	r0, r4
    4e1e:	2218      	movs	r2, #24
    4e20:	2100      	movs	r1, #0
}
    4e22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

	if (req->destroy) {
		req->destroy(req);
	}

	memset(req, 0, sizeof(*req));
    4e26:	f7fc b960 	b.w	10ea <memset>

00004e2a <att_notify>:

	return att_handle_rsp(att, buf->data, buf->len, 0);
}

static u8_t att_notify(struct bt_att *att, struct net_buf *buf)
{
    4e2a:	b508      	push	{r3, lr}
	struct bt_conn *conn = att->chan.chan.conn;
	u16_t handle;

	handle = net_buf_pull_le16(buf);
    4e2c:	f101 0008 	add.w	r0, r1, #8
    4e30:	f00c ff1b 	bl	11c6a <net_buf_simple_pull_le16>
	BT_DBG("handle 0x%04x", handle);

	bt_gatt_notification(conn, handle, buf->data, buf->len);

	return 0;
}
    4e34:	2000      	movs	r0, #0
    4e36:	bd08      	pop	{r3, pc}

00004e38 <read_group_cb>:
	struct bt_att_read_group_rsp *rsp;
	struct bt_att_group_data *group;
};

static u8_t read_group_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    4e38:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct read_group_data *data = user_data;
	struct bt_att *att = data->att;
    4e3c:	680d      	ldr	r5, [r1, #0]
	struct bt_att_read_group_rsp *rsp;
	struct bt_att_group_data *group;
};

static u8_t read_group_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    4e3e:	4606      	mov	r6, r0
    4e40:	460c      	mov	r4, r1
	struct bt_att *att = data->att;
	struct bt_conn *conn = att->chan.chan.conn;
	int read;

	/* Update group end_handle if attribute is not a service */
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    4e42:	f04f 0800 	mov.w	r8, #0
    4e46:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    4e4a:	a902      	add	r1, sp, #8
    4e4c:	6800      	ldr	r0, [r0, #0]

static u8_t read_group_cb(const struct bt_gatt_attr *attr, void *user_data)
{
	struct read_group_data *data = user_data;
	struct bt_att *att = data->att;
	struct bt_conn *conn = att->chan.chan.conn;
    4e4e:	682f      	ldr	r7, [r5, #0]
	int read;

	/* Update group end_handle if attribute is not a service */
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    4e50:	f88d 8008 	strb.w	r8, [sp, #8]
    4e54:	f8ad 300a 	strh.w	r3, [sp, #10]
    4e58:	f7fd f842 	bl	1ee0 <bt_uuid_cmp>
    4e5c:	b198      	cbz	r0, 4e86 <read_group_cb+0x4e>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    4e5e:	f642 0301 	movw	r3, #10241	; 0x2801
    4e62:	a903      	add	r1, sp, #12
    4e64:	6830      	ldr	r0, [r6, #0]
    4e66:	f88d 800c 	strb.w	r8, [sp, #12]
    4e6a:	f8ad 300e 	strh.w	r3, [sp, #14]
    4e6e:	f7fd f837 	bl	1ee0 <bt_uuid_cmp>
	struct bt_att *att = data->att;
	struct bt_conn *conn = att->chan.chan.conn;
	int read;

	/* Update group end_handle if attribute is not a service */
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    4e72:	b140      	cbz	r0, 4e86 <read_group_cb+0x4e>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
		if (data->group && attr->handle > data->group->end_handle) {
    4e74:	6923      	ldr	r3, [r4, #16]
    4e76:	2b00      	cmp	r3, #0
    4e78:	d043      	beq.n	4f02 <read_group_cb+0xca>
    4e7a:	8a32      	ldrh	r2, [r6, #16]
    4e7c:	8859      	ldrh	r1, [r3, #2]
    4e7e:	4291      	cmp	r1, r2
    4e80:	d23f      	bcs.n	4f02 <read_group_cb+0xca>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
    4e82:	805a      	strh	r2, [r3, #2]
    4e84:	e03d      	b.n	4f02 <read_group_cb+0xca>
		}
		return BT_GATT_ITER_CONTINUE;
	}

	/* If Group Type don't match skip */
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    4e86:	6861      	ldr	r1, [r4, #4]
    4e88:	6830      	ldr	r0, [r6, #0]
    4e8a:	f7fd f829 	bl	1ee0 <bt_uuid_cmp>
    4e8e:	b110      	cbz	r0, 4e96 <read_group_cb+0x5e>
		data->group = NULL;
    4e90:	2300      	movs	r3, #0
    4e92:	6123      	str	r3, [r4, #16]
    4e94:	e035      	b.n	4f02 <read_group_cb+0xca>
	}

	BT_DBG("handle 0x%04x", attr->handle);

	/* Stop if there is no space left */
	if (data->rsp->len &&
    4e96:	68e3      	ldr	r3, [r4, #12]
    4e98:	68a0      	ldr	r0, [r4, #8]
    4e9a:	781a      	ldrb	r2, [r3, #0]
    4e9c:	b13a      	cbz	r2, 4eae <read_group_cb+0x76>
    4e9e:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
    4ea2:	8981      	ldrh	r1, [r0, #12]
    4ea4:	1a5b      	subs	r3, r3, r1
    4ea6:	4293      	cmp	r3, r2
    4ea8:	da01      	bge.n	4eae <read_group_cb+0x76>
	    att->chan.tx.mtu - data->buf->len < data->rsp->len) {
		return BT_GATT_ITER_STOP;
    4eaa:	2000      	movs	r0, #0
    4eac:	e02a      	b.n	4f04 <read_group_cb+0xcc>
	}

	/* Fast foward to next group position */
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    4eae:	2104      	movs	r1, #4
    4eb0:	3008      	adds	r0, #8
    4eb2:	f00c feab 	bl	11c0c <net_buf_simple_add>

	/* Initialize group handle range */
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    4eb6:	8a33      	ldrh	r3, [r6, #16]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);

	/* Read attribute value and store in the buffer */
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    4eb8:	68a1      	ldr	r1, [r4, #8]
	    att->chan.tx.mtu - data->buf->len < data->rsp->len) {
		return BT_GATT_ITER_STOP;
	}

	/* Fast foward to next group position */
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    4eba:	6120      	str	r0, [r4, #16]

	/* Initialize group handle range */
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    4ebc:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
    4ebe:	8043      	strh	r3, [r0, #2]

	/* Read attribute value and store in the buffer */
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    4ec0:	898a      	ldrh	r2, [r1, #12]
    4ec2:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
    4ec6:	6889      	ldr	r1, [r1, #8]
    4ec8:	f8d6 8004 	ldr.w	r8, [r6, #4]
    4ecc:	1a9b      	subs	r3, r3, r2
    4ece:	2500      	movs	r5, #0
    4ed0:	440a      	add	r2, r1
    4ed2:	9500      	str	r5, [sp, #0]
    4ed4:	4631      	mov	r1, r6
    4ed6:	b29b      	uxth	r3, r3
    4ed8:	4638      	mov	r0, r7
    4eda:	47c0      	blx	r8
			  att->chan.tx.mtu - data->buf->len, 0);
	if (read < 0) {
    4edc:	1e01      	subs	r1, r0, #0
    4ede:	dbe4      	blt.n	4eaa <read_group_cb+0x72>
		/* TODO: Handle read errors */
		return BT_GATT_ITER_STOP;
	}

	if (!data->rsp->len) {
    4ee0:	68e0      	ldr	r0, [r4, #12]
    4ee2:	7802      	ldrb	r2, [r0, #0]
    4ee4:	1d0b      	adds	r3, r1, #4
    4ee6:	b90a      	cbnz	r2, 4eec <read_group_cb+0xb4>
		/* Set len to be the first group found */
		data->rsp->len = read + sizeof(*data->group);
    4ee8:	7003      	strb	r3, [r0, #0]
    4eea:	e006      	b.n	4efa <read_group_cb+0xc2>
	} else if (data->rsp->len != read + sizeof(*data->group)) {
    4eec:	429a      	cmp	r2, r3
    4eee:	d004      	beq.n	4efa <read_group_cb+0xc2>
		/* All groups entries should have the same size */
		data->buf->len -= sizeof(*data->group);
    4ef0:	68a2      	ldr	r2, [r4, #8]
    4ef2:	8993      	ldrh	r3, [r2, #12]
    4ef4:	3b04      	subs	r3, #4
    4ef6:	8193      	strh	r3, [r2, #12]
    4ef8:	e7d7      	b.n	4eaa <read_group_cb+0x72>
		return false;
	}

	net_buf_add(data->buf, read);
    4efa:	68a0      	ldr	r0, [r4, #8]
    4efc:	3008      	adds	r0, #8
    4efe:	f00c fe85 	bl	11c0c <net_buf_simple_add>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
		if (data->group && attr->handle > data->group->end_handle) {
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
		}
		return BT_GATT_ITER_CONTINUE;
    4f02:	2001      	movs	r0, #1

	net_buf_add(data->buf, read);

	/* Continue to find the end handle */
	return BT_GATT_ITER_CONTINUE;
}
    4f04:	b004      	add	sp, #16
    4f06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00004f0a <find_info_cb>:
	struct bt_att *att = data->att;

	BT_DBG("handle 0x%04x", attr->handle);

	/* Initialize rsp at first entry */
	if (!data->rsp) {
    4f0a:	688b      	ldr	r3, [r1, #8]
		struct bt_att_info_128 *info128;
	};
};

static u8_t find_info_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    4f0c:	b570      	push	{r4, r5, r6, lr}
    4f0e:	4605      	mov	r5, r0
    4f10:	460c      	mov	r4, r1
	struct find_info_data *data = user_data;
	struct bt_att *att = data->att;
    4f12:	680e      	ldr	r6, [r1, #0]

	BT_DBG("handle 0x%04x", attr->handle);

	/* Initialize rsp at first entry */
	if (!data->rsp) {
    4f14:	b963      	cbnz	r3, 4f30 <find_info_cb+0x26>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    4f16:	6848      	ldr	r0, [r1, #4]
    4f18:	2101      	movs	r1, #1
    4f1a:	3008      	adds	r0, #8
    4f1c:	f00c fe76 	bl	11c0c <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
    4f20:	682b      	ldr	r3, [r5, #0]

	BT_DBG("handle 0x%04x", attr->handle);

	/* Initialize rsp at first entry */
	if (!data->rsp) {
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    4f22:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
    4f24:	781b      	ldrb	r3, [r3, #0]
    4f26:	2b00      	cmp	r3, #0
    4f28:	bf0c      	ite	eq
    4f2a:	2301      	moveq	r3, #1
    4f2c:	2302      	movne	r3, #2
    4f2e:	7003      	strb	r3, [r0, #0]
				    BT_ATT_INFO_16 : BT_ATT_INFO_128;
	}

	switch (data->rsp->format) {
    4f30:	68a3      	ldr	r3, [r4, #8]
    4f32:	781b      	ldrb	r3, [r3, #0]
    4f34:	2b01      	cmp	r3, #1
    4f36:	d002      	beq.n	4f3e <find_info_cb+0x34>
    4f38:	2b02      	cmp	r3, #2
    4f3a:	d016      	beq.n	4f6a <find_info_cb+0x60>
    4f3c:	e032      	b.n	4fa4 <find_info_cb+0x9a>
	case BT_ATT_INFO_16:
		if (attr->uuid->type != BT_UUID_TYPE_16) {
    4f3e:	682b      	ldr	r3, [r5, #0]
    4f40:	781b      	ldrb	r3, [r3, #0]
    4f42:	2b00      	cmp	r3, #0
    4f44:	d12e      	bne.n	4fa4 <find_info_cb+0x9a>
			return BT_GATT_ITER_STOP;
		}

		/* Fast foward to next item position */
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
    4f46:	6860      	ldr	r0, [r4, #4]
    4f48:	2104      	movs	r1, #4
    4f4a:	3008      	adds	r0, #8
    4f4c:	f00c fe5e 	bl	11c0c <net_buf_simple_add>
    4f50:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(attr->handle);
    4f52:	8a2b      	ldrh	r3, [r5, #16]
    4f54:	8003      	strh	r3, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
    4f56:	682b      	ldr	r3, [r5, #0]

		if (att->chan.tx.mtu - data->buf->len >
    4f58:	6862      	ldr	r2, [r4, #4]
		}

		/* Fast foward to next item position */
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
		data->info16->handle = sys_cpu_to_le16(attr->handle);
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
    4f5a:	885b      	ldrh	r3, [r3, #2]
    4f5c:	8043      	strh	r3, [r0, #2]
	}

	switch (data->rsp->format) {
	case BT_ATT_INFO_16:
		if (attr->uuid->type != BT_UUID_TYPE_16) {
			return BT_GATT_ITER_STOP;
    4f5e:	8990      	ldrh	r0, [r2, #12]
    4f60:	f8b6 3056 	ldrh.w	r3, [r6, #86]	; 0x56
    4f64:	1a18      	subs	r0, r3, r0
    4f66:	2804      	cmp	r0, #4
    4f68:	e018      	b.n	4f9c <find_info_cb+0x92>
			return BT_GATT_ITER_CONTINUE;
		}

		break;
	case BT_ATT_INFO_128:
		if (attr->uuid->type != BT_UUID_TYPE_128) {
    4f6a:	682b      	ldr	r3, [r5, #0]
    4f6c:	781b      	ldrb	r3, [r3, #0]
    4f6e:	2b02      	cmp	r3, #2
    4f70:	d118      	bne.n	4fa4 <find_info_cb+0x9a>
			return BT_GATT_ITER_STOP;
		}

		/* Fast foward to next item position */
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
    4f72:	6860      	ldr	r0, [r4, #4]
    4f74:	2112      	movs	r1, #18
    4f76:	3008      	adds	r0, #8
    4f78:	f00c fe48 	bl	11c0c <net_buf_simple_add>
    4f7c:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(attr->handle);
    4f7e:	8a2b      	ldrh	r3, [r5, #16]
    4f80:	8003      	strh	r3, [r0, #0]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
    4f82:	6829      	ldr	r1, [r5, #0]
    4f84:	68e0      	ldr	r0, [r4, #12]
    4f86:	2210      	movs	r2, #16
    4f88:	3101      	adds	r1, #1
    4f8a:	3002      	adds	r0, #2
    4f8c:	f7fc f881 	bl	1092 <memcpy>
		       sizeof(data->info128->uuid));

		if (att->chan.tx.mtu - data->buf->len >
    4f90:	6862      	ldr	r2, [r4, #4]
	}

	switch (data->rsp->format) {
	case BT_ATT_INFO_16:
		if (attr->uuid->type != BT_UUID_TYPE_16) {
			return BT_GATT_ITER_STOP;
    4f92:	f8b6 3056 	ldrh.w	r3, [r6, #86]	; 0x56
    4f96:	8990      	ldrh	r0, [r2, #12]
    4f98:	1a18      	subs	r0, r3, r0
    4f9a:	2812      	cmp	r0, #18
    4f9c:	bf94      	ite	ls
    4f9e:	2000      	movls	r0, #0
    4fa0:	2001      	movhi	r0, #1
    4fa2:	bd70      	pop	{r4, r5, r6, pc}
    4fa4:	2000      	movs	r0, #0
			return BT_GATT_ITER_CONTINUE;
		}
	}

	return BT_GATT_ITER_STOP;
}
    4fa6:	bd70      	pop	{r4, r5, r6, pc}

00004fa8 <find_type_cb>:
	u8_t value_len;
	u8_t err;
};

static u8_t find_type_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    4fa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct find_type_data *data = user_data;
	struct bt_att *att = data->att;
    4fac:	680e      	ldr	r6, [r1, #0]
	u8_t value_len;
	u8_t err;
};

static u8_t find_type_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    4fae:	b088      	sub	sp, #32
    4fb0:	4605      	mov	r5, r0
    4fb2:	460c      	mov	r4, r1
	struct bt_conn *conn = att->chan.chan.conn;
	int read;
	u8_t uuid[16];

	/* Skip secondary services */
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    4fb4:	2700      	movs	r7, #0
    4fb6:	f642 0301 	movw	r3, #10241	; 0x2801
    4fba:	a902      	add	r1, sp, #8
    4fbc:	6800      	ldr	r0, [r0, #0]

static u8_t find_type_cb(const struct bt_gatt_attr *attr, void *user_data)
{
	struct find_type_data *data = user_data;
	struct bt_att *att = data->att;
	struct bt_conn *conn = att->chan.chan.conn;
    4fbe:	f8d6 8000 	ldr.w	r8, [r6]
	int read;
	u8_t uuid[16];

	/* Skip secondary services */
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    4fc2:	f88d 7008 	strb.w	r7, [sp, #8]
    4fc6:	f8ad 300a 	strh.w	r3, [sp, #10]
    4fca:	f7fc ff89 	bl	1ee0 <bt_uuid_cmp>
    4fce:	b910      	cbnz	r0, 4fd6 <find_type_cb+0x2e>
		data->group = NULL;
    4fd0:	2300      	movs	r3, #0
    4fd2:	60a3      	str	r3, [r4, #8]
    4fd4:	e036      	b.n	5044 <find_type_cb+0x9c>
		return BT_GATT_ITER_CONTINUE;
	}

	/* Update group end_handle if not a primary service */
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
    4fd6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    4fda:	a903      	add	r1, sp, #12
    4fdc:	6828      	ldr	r0, [r5, #0]
    4fde:	f88d 700c 	strb.w	r7, [sp, #12]
    4fe2:	f8ad 300e 	strh.w	r3, [sp, #14]
    4fe6:	f7fc ff7b 	bl	1ee0 <bt_uuid_cmp>
    4fea:	b138      	cbz	r0, 4ffc <find_type_cb+0x54>
		if (data->group && attr->handle > data->group->end_handle) {
    4fec:	68a3      	ldr	r3, [r4, #8]
    4fee:	b34b      	cbz	r3, 5044 <find_type_cb+0x9c>
    4ff0:	8a2a      	ldrh	r2, [r5, #16]
    4ff2:	8859      	ldrh	r1, [r3, #2]
    4ff4:	4291      	cmp	r1, r2
    4ff6:	d225      	bcs.n	5044 <find_type_cb+0x9c>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
    4ff8:	805a      	strh	r2, [r3, #2]
    4ffa:	e023      	b.n	5044 <find_type_cb+0x9c>
	}

	BT_DBG("handle 0x%04x", attr->handle);

	/* stop if there is no space left */
	if (att->chan.tx.mtu - data->buf->len < sizeof(*data->group)) {
    4ffc:	6862      	ldr	r2, [r4, #4]
    4ffe:	f8b6 3056 	ldrh.w	r3, [r6, #86]	; 0x56
    5002:	8992      	ldrh	r2, [r2, #12]
    5004:	1a9b      	subs	r3, r3, r2
    5006:	2b03      	cmp	r3, #3
    5008:	d91d      	bls.n	5046 <find_type_cb+0x9e>
		return BT_GATT_ITER_STOP;
	}

	/* Read attribute value and store in the buffer */
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
    500a:	2310      	movs	r3, #16
    500c:	9000      	str	r0, [sp, #0]
    500e:	eb0d 0203 	add.w	r2, sp, r3
    5012:	686e      	ldr	r6, [r5, #4]
    5014:	4629      	mov	r1, r5
    5016:	4640      	mov	r0, r8
    5018:	47b0      	blx	r6
	if (read < 0) {
    501a:	1e02      	subs	r2, r0, #0
    501c:	dbd8      	blt.n	4fd0 <find_type_cb+0x28>
		data->group = NULL;
		return BT_GATT_ITER_CONTINUE;
	}

	/* Check if data matches */
	if (read != data->value_len || memcmp(data->value, uuid, read)) {
    501e:	7c23      	ldrb	r3, [r4, #16]
    5020:	429a      	cmp	r2, r3
    5022:	d1d5      	bne.n	4fd0 <find_type_cb+0x28>
    5024:	a904      	add	r1, sp, #16
    5026:	68e0      	ldr	r0, [r4, #12]
    5028:	f7fc f803 	bl	1032 <memcmp>
    502c:	2800      	cmp	r0, #0
    502e:	d1cf      	bne.n	4fd0 <find_type_cb+0x28>
		data->group = NULL;
		return BT_GATT_ITER_CONTINUE;
	}

	/* If service has been found, error should be cleared */
	data->err = 0x00;
    5030:	7460      	strb	r0, [r4, #17]

	/* Fast foward to next item position */
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    5032:	6860      	ldr	r0, [r4, #4]
    5034:	2104      	movs	r1, #4
    5036:	3008      	adds	r0, #8
    5038:	f00c fde8 	bl	11c0c <net_buf_simple_add>
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    503c:	8a2b      	ldrh	r3, [r5, #16]

	/* If service has been found, error should be cleared */
	data->err = 0x00;

	/* Fast foward to next item position */
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    503e:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    5040:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
    5042:	8043      	strh	r3, [r0, #2]
	/* Update group end_handle if not a primary service */
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
		if (data->group && attr->handle > data->group->end_handle) {
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
		}
		return BT_GATT_ITER_CONTINUE;
    5044:	2001      	movs	r0, #1
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
	data->group->end_handle = sys_cpu_to_le16(attr->handle);

	/* continue to find the end_handle */
	return BT_GATT_ITER_CONTINUE;
}
    5046:	b008      	add	sp, #32
    5048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000504c <bt_att_connected>:
	bt_gatt_disconnected(ch->chan.conn);
	ch->chan.conn = NULL;
}

static void bt_att_connected(struct bt_l2cap_chan *chan)
{
    504c:	b510      	push	{r4, lr}

#if CONFIG_BLUETOOTH_ATT_PREPARE_COUNT > 0
	k_fifo_init(&att->prep_queue);
#endif

	ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    504e:	2317      	movs	r3, #23
	bt_gatt_disconnected(ch->chan.conn);
	ch->chan.conn = NULL;
}

static void bt_att_connected(struct bt_l2cap_chan *chan)
{
    5050:	4604      	mov	r4, r0

#if CONFIG_BLUETOOTH_ATT_PREPARE_COUNT > 0
	k_fifo_init(&att->prep_queue);
#endif

	ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    5052:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
	ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
    5056:	8743      	strh	r3, [r0, #58]	; 0x3a

	k_delayed_work_init(&att->timeout_work, att_timeout);
    5058:	4906      	ldr	r1, [pc, #24]	; (5074 <bt_att_connected+0x28>)
    505a:	30a0      	adds	r0, #160	; 0xa0
    505c:	f00e fbc2 	bl	137e4 <k_delayed_work_init>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    5060:	2300      	movs	r3, #0
    5062:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	list->tail = NULL;
    5066:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	sys_slist_init(&att->reqs);

	bt_gatt_connected(ch->chan.conn);
    506a:	6820      	ldr	r0, [r4, #0]
}
    506c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;

	k_delayed_work_init(&att->timeout_work, att_timeout);
	sys_slist_init(&att->reqs);

	bt_gatt_connected(ch->chan.conn);
    5070:	f001 bc80 	b.w	6974 <bt_gatt_connected>
    5074:	00005549 	.word	0x00005549

00005078 <check_perm>:
	return false;
}

static u8_t check_perm(struct bt_conn *conn, const struct bt_gatt_attr *attr,
		       u8_t mask)
{
    5078:	b510      	push	{r4, lr}
	if ((mask & BT_GATT_PERM_READ) &&
    507a:	f012 0f01 	tst.w	r2, #1
    507e:	7c8b      	ldrb	r3, [r1, #18]
    5080:	d004      	beq.n	508c <check_perm+0x14>
    5082:	f013 0f15 	tst.w	r3, #21
    5086:	d018      	beq.n	50ba <check_perm+0x42>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
    5088:	684c      	ldr	r4, [r1, #4]
    508a:	b1b4      	cbz	r4, 50ba <check_perm+0x42>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
	}

	if ((mask & BT_GATT_PERM_WRITE) &&
    508c:	0794      	lsls	r4, r2, #30
    508e:	d504      	bpl.n	509a <check_perm+0x22>
    5090:	f013 0f2a 	tst.w	r3, #42	; 0x2a
    5094:	d013      	beq.n	50be <check_perm+0x46>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
    5096:	6889      	ldr	r1, [r1, #8]
    5098:	b189      	cbz	r1, 50be <check_perm+0x46>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
	}

	mask &= attr->perm;
    509a:	401a      	ands	r2, r3
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
    509c:	f012 0f30 	tst.w	r2, #48	; 0x30
    50a0:	d002      	beq.n	50a8 <check_perm+0x30>
#if defined(CONFIG_BLUETOOTH_SMP)
		if (conn->sec_level < BT_SECURITY_HIGH) {
    50a2:	7a03      	ldrb	r3, [r0, #8]
    50a4:	2b02      	cmp	r3, #2
    50a6:	d90c      	bls.n	50c2 <check_perm+0x4a>
#else
		return BT_ATT_ERR_AUTHENTICATION;
#endif /* CONFIG_BLUETOOTH_SMP */
	}

	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
    50a8:	f012 020c 	ands.w	r2, r2, #12
    50ac:	d00a      	beq.n	50c4 <check_perm+0x4c>
#if defined(CONFIG_BLUETOOTH_SMP)
		if (!conn->encrypt) {
    50ae:	7a83      	ldrb	r3, [r0, #10]
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
    50b0:	2b00      	cmp	r3, #0
    50b2:	bf14      	ite	ne
    50b4:	2200      	movne	r2, #0
    50b6:	220f      	moveq	r2, #15
    50b8:	e004      	b.n	50c4 <check_perm+0x4c>
static u8_t check_perm(struct bt_conn *conn, const struct bt_gatt_attr *attr,
		       u8_t mask)
{
	if ((mask & BT_GATT_PERM_READ) &&
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
		return BT_ATT_ERR_READ_NOT_PERMITTED;
    50ba:	2202      	movs	r2, #2
    50bc:	e002      	b.n	50c4 <check_perm+0x4c>
	}

	if ((mask & BT_GATT_PERM_WRITE) &&
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
    50be:	2203      	movs	r2, #3
    50c0:	e000      	b.n	50c4 <check_perm+0x4c>

	mask &= attr->perm;
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
#if defined(CONFIG_BLUETOOTH_SMP)
		if (conn->sec_level < BT_SECURITY_HIGH) {
			return BT_ATT_ERR_AUTHENTICATION;
    50c2:	2205      	movs	r2, #5
		return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
#endif /* CONFIG_BLUETOOTH_SMP */
	}

	return 0;
}
    50c4:	4610      	mov	r0, r2
    50c6:	bd10      	pop	{r4, pc}

000050c8 <read_type_cb>:
	struct bt_att_data *item;
	u8_t err;
};

static u8_t read_type_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    50c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct read_type_data *data = user_data;
	struct bt_att *att = data->att;
    50cc:	680f      	ldr	r7, [r1, #0]
	struct bt_att_data *item;
	u8_t err;
};

static u8_t read_type_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    50ce:	4606      	mov	r6, r0
    50d0:	460c      	mov	r4, r1
	struct bt_att *att = data->att;
	struct bt_conn *conn = att->chan.chan.conn;
	int read;

	/* Skip if doesn't match */
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    50d2:	6800      	ldr	r0, [r0, #0]
    50d4:	6849      	ldr	r1, [r1, #4]

static u8_t read_type_cb(const struct bt_gatt_attr *attr, void *user_data)
{
	struct read_type_data *data = user_data;
	struct bt_att *att = data->att;
	struct bt_conn *conn = att->chan.chan.conn;
    50d6:	f8d7 9000 	ldr.w	r9, [r7]
	int read;

	/* Skip if doesn't match */
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    50da:	f7fc ff01 	bl	1ee0 <bt_uuid_cmp>
    50de:	4680      	mov	r8, r0
    50e0:	2800      	cmp	r0, #0
    50e2:	d14e      	bne.n	5182 <read_type_cb+0xba>
	 *
	 * If the first attribute in the set of requested attributes would
	 * cause an Error Response then no other attributes in the requested
	 * attributes can be considered.
	 */
	data->err = check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    50e4:	2215      	movs	r2, #21
    50e6:	4631      	mov	r1, r6
    50e8:	4648      	mov	r0, r9
    50ea:	f7ff ffc5 	bl	5078 <check_perm>
    50ee:	4605      	mov	r5, r0
    50f0:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    50f2:	b138      	cbz	r0, 5104 <read_type_cb+0x3c>
		if (data->rsp->len) {
    50f4:	68e3      	ldr	r3, [r4, #12]
    50f6:	781d      	ldrb	r5, [r3, #0]
    50f8:	2d00      	cmp	r5, #0
    50fa:	d043      	beq.n	5184 <read_type_cb+0xbc>
			data->err = 0x00;
    50fc:	f884 8014 	strb.w	r8, [r4, #20]
		}
		return BT_GATT_ITER_STOP;
    5100:	4645      	mov	r5, r8
    5102:	e03f      	b.n	5184 <read_type_cb+0xbc>

	/*
	 * If any attribute is founded in handle range it means that error
	 * should be changed from pre-set: attr not found error to no error.
	 */
	data->err = 0x00;
    5104:	7520      	strb	r0, [r4, #20]

	/* Fast foward to next item position */
	data->item = net_buf_add(data->buf, sizeof(*data->item));
    5106:	68a0      	ldr	r0, [r4, #8]
    5108:	2102      	movs	r1, #2
    510a:	3008      	adds	r0, #8
    510c:	f00c fd7e 	bl	11c0c <net_buf_simple_add>
	data->item->handle = sys_cpu_to_le16(attr->handle);
    5110:	8a33      	ldrh	r3, [r6, #16]

	/* Read attribute value and store in the buffer */
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    5112:	68a1      	ldr	r1, [r4, #8]
	 * should be changed from pre-set: attr not found error to no error.
	 */
	data->err = 0x00;

	/* Fast foward to next item position */
	data->item = net_buf_add(data->buf, sizeof(*data->item));
    5114:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(attr->handle);
    5116:	8003      	strh	r3, [r0, #0]

	/* Read attribute value and store in the buffer */
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    5118:	898a      	ldrh	r2, [r1, #12]
    511a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
    511e:	6889      	ldr	r1, [r1, #8]
    5120:	f8d6 8004 	ldr.w	r8, [r6, #4]
    5124:	9500      	str	r5, [sp, #0]
    5126:	1a9b      	subs	r3, r3, r2
    5128:	b29b      	uxth	r3, r3
    512a:	440a      	add	r2, r1
    512c:	4648      	mov	r0, r9
    512e:	4631      	mov	r1, r6
    5130:	47c0      	blx	r8
			  att->chan.tx.mtu - data->buf->len, 0);
	if (read < 0) {
    5132:	1e01      	subs	r1, r0, #0
    5134:	da08      	bge.n	5148 <read_type_cb+0x80>

static u8_t err_to_att(int err)
{
	BT_DBG("%d", err);

	if (err < 0 && err >= -0xff) {
    5136:	f101 03ff 	add.w	r3, r1, #255	; 0xff
    513a:	2bfe      	cmp	r3, #254	; 0xfe
		return -err;
    513c:	bf9a      	itte	ls
    513e:	4249      	negls	r1, r1
    5140:	b2c9      	uxtbls	r1, r1
	}

	return BT_ATT_ERR_UNLIKELY;
    5142:	210e      	movhi	r1, #14

	/* Read attribute value and store in the buffer */
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
			  att->chan.tx.mtu - data->buf->len, 0);
	if (read < 0) {
		data->err = err_to_att(read);
    5144:	7521      	strb	r1, [r4, #20]
		return BT_GATT_ITER_STOP;
    5146:	e01d      	b.n	5184 <read_type_cb+0xbc>
	}

	if (!data->rsp->len) {
    5148:	68e0      	ldr	r0, [r4, #12]
    514a:	7802      	ldrb	r2, [r0, #0]
    514c:	1c8b      	adds	r3, r1, #2
    514e:	b90a      	cbnz	r2, 5154 <read_type_cb+0x8c>
		/* Set len to be the first item found */
		data->rsp->len = read + sizeof(*data->item);
    5150:	7003      	strb	r3, [r0, #0]
    5152:	e006      	b.n	5162 <read_type_cb+0x9a>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
    5154:	429a      	cmp	r2, r3
    5156:	d004      	beq.n	5162 <read_type_cb+0x9a>
		/* All items should have the same size */
		data->buf->len -= sizeof(*data->item);
    5158:	68a2      	ldr	r2, [r4, #8]
    515a:	8993      	ldrh	r3, [r2, #12]
    515c:	3b02      	subs	r3, #2
    515e:	8193      	strh	r3, [r2, #12]
		return BT_GATT_ITER_STOP;
    5160:	e010      	b.n	5184 <read_type_cb+0xbc>
	}

	net_buf_add(data->buf, read);
    5162:	68a0      	ldr	r0, [r4, #8]
    5164:	3008      	adds	r0, #8
    5166:	f00c fd51 	bl	11c0c <net_buf_simple_add>

	/* return true only if there are still space for more items */
	return att->chan.tx.mtu - data->buf->len > data->rsp->len ?
    516a:	68a2      	ldr	r2, [r4, #8]
    516c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
    5170:	8995      	ldrh	r5, [r2, #12]
    5172:	68e2      	ldr	r2, [r4, #12]
    5174:	1b5b      	subs	r3, r3, r5
    5176:	7815      	ldrb	r5, [r2, #0]
    5178:	42ab      	cmp	r3, r5
    517a:	bfd4      	ite	le
    517c:	2500      	movle	r5, #0
    517e:	2501      	movgt	r5, #1
    5180:	e000      	b.n	5184 <read_type_cb+0xbc>
	struct bt_conn *conn = att->chan.chan.conn;
	int read;

	/* Skip if doesn't match */
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
		return BT_GATT_ITER_CONTINUE;
    5182:	2501      	movs	r5, #1
	net_buf_add(data->buf, read);

	/* return true only if there are still space for more items */
	return att->chan.tx.mtu - data->buf->len > data->rsp->len ?
	       BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
}
    5184:	4628      	mov	r0, r5
    5186:	b003      	add	sp, #12
    5188:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0000518c <att_cb.isra.4>:
	BT_DBG("conn %p att %p", conn, att);

	k_sem_give(&att->tx_sem);
}

static bt_conn_tx_cb_t att_cb(struct net_buf *buf)
    518c:	b508      	push	{r3, lr}
{
	switch (att_op_get_type(buf->data[0])) {
    518e:	7800      	ldrb	r0, [r0, #0]
    5190:	f7ff fe22 	bl	4dd8 <att_op_get_type>
    5194:	3801      	subs	r0, #1
    5196:	b2c0      	uxtb	r0, r0
    5198:	2804      	cmp	r0, #4
    519a:	bf9a      	itte	ls
    519c:	4b02      	ldrls	r3, [pc, #8]	; (51a8 <att_cb.isra.4+0x1c>)
    519e:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
    51a2:	4802      	ldrhi	r0, [pc, #8]	; (51ac <att_cb.isra.4+0x20>)
	case ATT_INDICATION:
		return att_req_sent;
	default:
		return att_pdu_sent;
	}
}
    51a4:	bd08      	pop	{r3, pc}
    51a6:	bf00      	nop
    51a8:	000161f8 	.word	0x000161f8
    51ac:	00005635 	.word	0x00005635

000051b0 <uuid_create>:
	return att_find_type_rsp(att, start_handle, end_handle, value,
				 buf->len);
}

static bool uuid_create(struct bt_uuid *uuid, struct net_buf *buf)
{
    51b0:	b510      	push	{r4, lr}
	switch (buf->len) {
    51b2:	898b      	ldrh	r3, [r1, #12]
    51b4:	2b02      	cmp	r3, #2
	return att_find_type_rsp(att, start_handle, end_handle, value,
				 buf->len);
}

static bool uuid_create(struct bt_uuid *uuid, struct net_buf *buf)
{
    51b6:	4604      	mov	r4, r0
	switch (buf->len) {
    51b8:	d009      	beq.n	51ce <uuid_create+0x1e>
    51ba:	2b10      	cmp	r3, #16
    51bc:	d110      	bne.n	51e0 <uuid_create+0x30>
	case 2:
		uuid->type = BT_UUID_TYPE_16;
		BT_UUID_16(uuid)->val = net_buf_pull_le16(buf);
		return true;
	case 16:
		uuid->type = BT_UUID_TYPE_128;
    51be:	2302      	movs	r3, #2
    51c0:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(BT_UUID_128(uuid)->val, buf->data, buf->len);
    51c4:	898a      	ldrh	r2, [r1, #12]
    51c6:	6889      	ldr	r1, [r1, #8]
    51c8:	f7fb ff63 	bl	1092 <memcpy>
    51cc:	e006      	b.n	51dc <uuid_create+0x2c>

static bool uuid_create(struct bt_uuid *uuid, struct net_buf *buf)
{
	switch (buf->len) {
	case 2:
		uuid->type = BT_UUID_TYPE_16;
    51ce:	2300      	movs	r3, #0
    51d0:	7003      	strb	r3, [r0, #0]
		BT_UUID_16(uuid)->val = net_buf_pull_le16(buf);
    51d2:	f101 0008 	add.w	r0, r1, #8
    51d6:	f00c fd48 	bl	11c6a <net_buf_simple_pull_le16>
    51da:	8060      	strh	r0, [r4, #2]
		return true;
	case 16:
		uuid->type = BT_UUID_TYPE_128;
		memcpy(BT_UUID_128(uuid)->val, buf->data, buf->len);
    51dc:	2001      	movs	r0, #1
    51de:	bd10      	pop	{r4, pc}
		return true;
	}

	return false;
    51e0:	2000      	movs	r0, #0
}
    51e2:	bd10      	pop	{r4, pc}

000051e4 <att_req_sent>:

	k_sem_give(&att->tx_sem);
}

static void att_req_sent(struct bt_conn *conn)
{
    51e4:	b510      	push	{r4, lr}

static struct bt_att *att_get(struct bt_conn *conn)
{
	struct bt_l2cap_chan *chan;

	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    51e6:	2104      	movs	r1, #4
    51e8:	f7ff fd5c 	bl	4ca4 <bt_l2cap_le_lookup_tx_cid>
    51ec:	4604      	mov	r4, r0
{
	struct bt_att *att = att_get(conn);

	BT_DBG("conn %p att %p att->req %p", conn, att, att->req);

	k_sem_give(&att->tx_sem);
    51ee:	30c8      	adds	r0, #200	; 0xc8
    51f0:	f00d fffe 	bl	131f0 <k_sem_give>

	/* Start timeout work */
	if (att->req) {
    51f4:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    51f8:	b143      	cbz	r3, 520c <att_req_sent+0x28>
 * @retval -EADDRINUSE Work item is pending on a different workqueue.
 */
static inline int k_delayed_work_submit(struct k_delayed_work *work,
					s32_t delay)
{
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    51fa:	f104 01a0 	add.w	r1, r4, #160	; 0xa0
    51fe:	f247 5230 	movw	r2, #30000	; 0x7530
    5202:	4803      	ldr	r0, [pc, #12]	; (5210 <att_req_sent+0x2c>)
		k_delayed_work_submit(&att->timeout_work, ATT_TIMEOUT);
	}
}
    5204:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5208:	f00e bb42 	b.w	13890 <k_delayed_work_submit_to_queue>
    520c:	bd10      	pop	{r4, pc}
    520e:	bf00      	nop
    5210:	20002238 	.word	0x20002238

00005214 <bt_att_accept>:
	att->req->buf = NULL;
}
#endif /* CONFIG_BLUETOOTH_SMP */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    5214:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_req_pool); i++) {
		struct bt_att *att = &bt_req_pool[i];

		if (att->chan.chan.conn) {
    5216:	4d15      	ldr	r5, [pc, #84]	; (526c <bt_att_accept+0x58>)
    5218:	682c      	ldr	r4, [r5, #0]
	att->req->buf = NULL;
}
#endif /* CONFIG_BLUETOOTH_SMP */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    521a:	460e      	mov	r6, r1
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_req_pool); i++) {
		struct bt_att *att = &bt_req_pool[i];

		if (att->chan.chan.conn) {
    521c:	b9b4      	cbnz	r4, 524c <bt_att_accept+0x38>
			continue;
		}

		att->chan.chan.ops = &ops;
    521e:	4b14      	ldr	r3, [pc, #80]	; (5270 <bt_att_accept+0x5c>)
    5220:	606b      	str	r3, [r5, #4]
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    5222:	f105 0390 	add.w	r3, r5, #144	; 0x90
    5226:	f3bf 8f5f 	dmb	sy
    522a:	e853 2f00 	ldrex	r2, [r3]
    522e:	e843 4100 	strex	r1, r4, [r3]
    5232:	2900      	cmp	r1, #0
    5234:	d1f9      	bne.n	522a <bt_att_accept+0x16>
    5236:	f3bf 8f5f 	dmb	sy
		atomic_set(att->flags, 0);
		k_sem_init(&att->tx_sem, CONFIG_BLUETOOTH_ATT_TX_MAX,
    523a:	2202      	movs	r2, #2
    523c:	f105 00c8 	add.w	r0, r5, #200	; 0xc8
    5240:	4611      	mov	r1, r2
    5242:	f00d ffcd 	bl	131e0 <k_sem_init>
			   CONFIG_BLUETOOTH_ATT_TX_MAX);

		*chan = &att->chan.chan;
    5246:	6035      	str	r5, [r6, #0]

		return 0;
    5248:	4620      	mov	r0, r4
    524a:	e00c      	b.n	5266 <bt_att_accept+0x52>
	}

	BT_ERR("No available ATT context for conn %p", conn);
    524c:	4b09      	ldr	r3, [pc, #36]	; (5274 <bt_att_accept+0x60>)
    524e:	9302      	str	r3, [sp, #8]
    5250:	4b09      	ldr	r3, [pc, #36]	; (5278 <bt_att_accept+0x64>)
    5252:	9001      	str	r0, [sp, #4]
    5254:	9300      	str	r3, [sp, #0]
    5256:	4a09      	ldr	r2, [pc, #36]	; (527c <bt_att_accept+0x68>)
    5258:	4b09      	ldr	r3, [pc, #36]	; (5280 <bt_att_accept+0x6c>)
    525a:	490a      	ldr	r1, [pc, #40]	; (5284 <bt_att_accept+0x70>)
    525c:	480a      	ldr	r0, [pc, #40]	; (5288 <bt_att_accept+0x74>)
    525e:	f7fc f90f 	bl	1480 <printk>

	return -ENOMEM;
    5262:	f06f 000b 	mvn.w	r0, #11
}
    5266:	b004      	add	sp, #16
    5268:	bd70      	pop	{r4, r5, r6, pc}
    526a:	bf00      	nop
    526c:	20000cb0 	.word	0x20000cb0
    5270:	200003bc 	.word	0x200003bc
    5274:	00013df4 	.word	0x00013df4
    5278:	00013df9 	.word	0x00013df9
    527c:	00013db4 	.word	0x00013db4
    5280:	000163b9 	.word	0x000163b9
    5284:	00013dbb 	.word	0x00013dbb
    5288:	0001486d 	.word	0x0001486d

0000528c <att_is_connected>:
	return 0;
}

static inline bool att_is_connected(struct bt_att *att)
{
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
    528c:	6803      	ldr	r3, [r0, #0]
    528e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
    5292:	2b03      	cmp	r3, #3
    5294:	d10a      	bne.n	52ac <att_is_connected+0x20>
 * @return Value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5296:	f3bf 8f5f 	dmb	sy
    529a:	f8d0 0090 	ldr.w	r0, [r0, #144]	; 0x90
    529e:	f3bf 8f5f 	dmb	sy
    52a2:	f3c0 0080 	ubfx	r0, r0, #2, #1
    52a6:	f080 0001 	eor.w	r0, r0, #1
    52aa:	4770      	bx	lr
    52ac:	2001      	movs	r0, #1
		!atomic_test_bit(att->flags, ATT_DISCONNECTED));
}
    52ae:	4770      	bx	lr

000052b0 <att_send_req>:

static int att_send_req(struct bt_att *att, struct bt_att_req *req)
{
    52b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    52b2:	4605      	mov	r5, r0
	BT_DBG("req %p", req);

	att->req = req;

	k_sem_take(&att->tx_sem, K_FOREVER);
    52b4:	f100 06c8 	add.w	r6, r0, #200	; 0xc8

static int att_send_req(struct bt_att *att, struct bt_att_req *req)
{
	BT_DBG("req %p", req);

	att->req = req;
    52b8:	f8c5 1094 	str.w	r1, [r5, #148]	; 0x94
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
		!atomic_test_bit(att->flags, ATT_DISCONNECTED));
}

static int att_send_req(struct bt_att *att, struct bt_att_req *req)
{
    52bc:	460c      	mov	r4, r1
	BT_DBG("req %p", req);

	att->req = req;

	k_sem_take(&att->tx_sem, K_FOREVER);
    52be:	4630      	mov	r0, r6
    52c0:	f04f 31ff 	mov.w	r1, #4294967295
    52c4:	f00d ffd6 	bl	13274 <k_sem_take>
	if (!att_is_connected(att)) {
    52c8:	4628      	mov	r0, r5
    52ca:	f7ff ffdf 	bl	528c <att_is_connected>
    52ce:	b978      	cbnz	r0, 52f0 <att_send_req+0x40>
		BT_WARN("Disconnected");
    52d0:	4b14      	ldr	r3, [pc, #80]	; (5324 <att_send_req+0x74>)
    52d2:	9301      	str	r3, [sp, #4]
    52d4:	4b14      	ldr	r3, [pc, #80]	; (5328 <att_send_req+0x78>)
    52d6:	9300      	str	r3, [sp, #0]
    52d8:	4a14      	ldr	r2, [pc, #80]	; (532c <att_send_req+0x7c>)
    52da:	4b15      	ldr	r3, [pc, #84]	; (5330 <att_send_req+0x80>)
    52dc:	4915      	ldr	r1, [pc, #84]	; (5334 <att_send_req+0x84>)
    52de:	4816      	ldr	r0, [pc, #88]	; (5338 <att_send_req+0x88>)
    52e0:	f7fc f8ce 	bl	1480 <printk>
		k_sem_give(&att->tx_sem);
    52e4:	4630      	mov	r0, r6
    52e6:	f00d ff83 	bl	131f0 <k_sem_give>
		return -ENOTCONN;
    52ea:	f06f 0038 	mvn.w	r0, #56	; 0x38
    52ee:	e017      	b.n	5320 <att_send_req+0x70>
	}

	/* Save request state so it can be resent */
	net_buf_simple_save(&req->buf->b, &req->state);
    52f0:	6926      	ldr	r6, [r4, #16]
 *  @param state Storage for the state.
 */
static inline void net_buf_simple_save(struct net_buf_simple *buf,
				       struct net_buf_simple_state *state)
{
	state->offset = net_buf_simple_headroom(buf);
    52f2:	f106 0008 	add.w	r0, r6, #8
    52f6:	f00c fcc0 	bl	11c7a <net_buf_simple_headroom>
	state->len = buf->len;
    52fa:	89b3      	ldrh	r3, [r6, #12]
 *  @param state Storage for the state.
 */
static inline void net_buf_simple_save(struct net_buf_simple *buf,
				       struct net_buf_simple_state *state)
{
	state->offset = net_buf_simple_headroom(buf);
    52fc:	81a0      	strh	r0, [r4, #12]
	state->len = buf->len;
    52fe:	81e3      	strh	r3, [r4, #14]

	/* Keep a reference for resending in case of an error */
	bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
    5300:	6920      	ldr	r0, [r4, #16]
    5302:	682d      	ldr	r5, [r5, #0]
    5304:	f00c fc7e 	bl	11c04 <net_buf_ref>
    5308:	6923      	ldr	r3, [r4, #16]
    530a:	4606      	mov	r6, r0
    530c:	6898      	ldr	r0, [r3, #8]
    530e:	f7ff ff3d 	bl	518c <att_cb.isra.4>
    5312:	4632      	mov	r2, r6
    5314:	4603      	mov	r3, r0
    5316:	2104      	movs	r1, #4
    5318:	4628      	mov	r0, r5
    531a:	f7ff fc1f 	bl	4b5c <bt_l2cap_send_cb>
			 net_buf_ref(req->buf), att_cb(req->buf));

	return 0;
    531e:	2000      	movs	r0, #0
}
    5320:	b002      	add	sp, #8
    5322:	bd70      	pop	{r4, r5, r6, pc}
    5324:	00013df4 	.word	0x00013df4
    5328:	00013e3f 	.word	0x00013e3f
    532c:	00013e01 	.word	0x00013e01
    5330:	000161df 	.word	0x000161df
    5334:	00013dbb 	.word	0x00013dbb
    5338:	000148a2 	.word	0x000148a2

0000533c <att_handle_rsp>:

	att_send_req(att, ATT_REQ(node));
}

static u8_t att_handle_rsp(struct bt_att *att, void *pdu, u16_t len, u8_t err)
{
    533c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    5340:	4604      	mov	r4, r0
	bt_att_func_t func;

	BT_DBG("err %u len %u: %s", err, len, bt_hex(pdu, len));

	/* Cancel timeout if ongoing */
	k_delayed_work_cancel(&att->timeout_work);
    5342:	30a0      	adds	r0, #160	; 0xa0

	att_send_req(att, ATT_REQ(node));
}

static u8_t att_handle_rsp(struct bt_att *att, void *pdu, u16_t len, u8_t err)
{
    5344:	461e      	mov	r6, r3
    5346:	460f      	mov	r7, r1
    5348:	4690      	mov	r8, r2
	bt_att_func_t func;

	BT_DBG("err %u len %u: %s", err, len, bt_hex(pdu, len));

	/* Cancel timeout if ongoing */
	k_delayed_work_cancel(&att->timeout_work);
    534a:	f00e fa69 	bl	13820 <k_delayed_work_cancel>

	if (!att->req) {
    534e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    5352:	b953      	cbnz	r3, 536a <att_handle_rsp+0x2e>
		BT_WARN("No pending ATT request");
    5354:	4b1c      	ldr	r3, [pc, #112]	; (53c8 <att_handle_rsp+0x8c>)
    5356:	9301      	str	r3, [sp, #4]
    5358:	4b1c      	ldr	r3, [pc, #112]	; (53cc <att_handle_rsp+0x90>)
    535a:	9300      	str	r3, [sp, #0]
    535c:	4a1c      	ldr	r2, [pc, #112]	; (53d0 <att_handle_rsp+0x94>)
    535e:	4b1d      	ldr	r3, [pc, #116]	; (53d4 <att_handle_rsp+0x98>)
    5360:	491d      	ldr	r1, [pc, #116]	; (53d8 <att_handle_rsp+0x9c>)
    5362:	481e      	ldr	r0, [pc, #120]	; (53dc <att_handle_rsp+0xa0>)
    5364:	f7fc f88c 	bl	1480 <printk>
		goto process;
    5368:	e01b      	b.n	53a2 <att_handle_rsp+0x66>
	}

	/* Release original buffer */
	if (att->req->buf) {
    536a:	6918      	ldr	r0, [r3, #16]
    536c:	b128      	cbz	r0, 537a <att_handle_rsp+0x3e>
		net_buf_unref(att->req->buf);
    536e:	f00c fc2d 	bl	11bcc <net_buf_unref>
		att->req->buf = NULL;
    5372:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    5376:	2200      	movs	r2, #0
    5378:	611a      	str	r2, [r3, #16]
	}

	/* Reset func so it can be reused by the callback */
	func = att->req->func;
    537a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
	att->req->func = NULL;

	func(att->chan.chan.conn, err, pdu, len, att->req);
    537e:	6820      	ldr	r0, [r4, #0]
		net_buf_unref(att->req->buf);
		att->req->buf = NULL;
	}

	/* Reset func so it can be reused by the callback */
	func = att->req->func;
    5380:	f8d3 9004 	ldr.w	r9, [r3, #4]
	att->req->func = NULL;
    5384:	2500      	movs	r5, #0
    5386:	605d      	str	r5, [r3, #4]

	func(att->chan.chan.conn, err, pdu, len, att->req);
    5388:	463a      	mov	r2, r7
    538a:	9300      	str	r3, [sp, #0]
    538c:	4631      	mov	r1, r6
    538e:	4643      	mov	r3, r8
    5390:	47c8      	blx	r9

	/* Don't destroy if callback had reused the request */
	if (!att->req->func) {
    5392:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    5396:	6843      	ldr	r3, [r0, #4]
    5398:	b90b      	cbnz	r3, 539e <att_handle_rsp+0x62>
		att_req_destroy(att->req);
    539a:	f7ff fd35 	bl	4e08 <att_req_destroy>
	}

	att->req = NULL;
    539e:	f8c4 5094 	str.w	r5, [r4, #148]	; 0x94
    53a2:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list)
{
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
    53a6:	b159      	cbz	r1, 53c0 <att_handle_rsp+0x84>
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list)
{
	sys_snode_t *node = list->head;

	list->head = node->next;
	if (list->tail == node) {
    53a8:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list)
{
	sys_snode_t *node = list->head;

	list->head = node->next;
    53ac:	680b      	ldr	r3, [r1, #0]
    53ae:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	if (list->tail == node) {
    53b2:	4291      	cmp	r1, r2
		list->tail = list->head;
    53b4:	bf08      	it	eq
    53b6:	f8c4 309c 	streq.w	r3, [r4, #156]	; 0x9c
	node = sys_slist_get(&att->reqs);
	if (!node) {
		return;
	}

	att_send_req(att, ATT_REQ(node));
    53ba:	4620      	mov	r0, r4
    53bc:	f7ff ff78 	bl	52b0 <att_send_req>
process:
	/* Process pending requests */
	att_process(att);

	return 0;
}
    53c0:	2000      	movs	r0, #0
    53c2:	b003      	add	sp, #12
    53c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    53c8:	00013df4 	.word	0x00013df4
    53cc:	00013e3f 	.word	0x00013e3f
    53d0:	00013e01 	.word	0x00013e01
    53d4:	00016369 	.word	0x00016369
    53d8:	00013dbb 	.word	0x00013dbb
    53dc:	000148bf 	.word	0x000148bf

000053e0 <att_confirm>:

static u8_t att_confirm(struct bt_att *att, struct net_buf *buf)
{
	BT_DBG("");

	return att_handle_rsp(att, buf->data, buf->len, 0);
    53e0:	898a      	ldrh	r2, [r1, #12]
    53e2:	6889      	ldr	r1, [r1, #8]
    53e4:	2300      	movs	r3, #0
    53e6:	f7ff bfa9 	b.w	533c <att_handle_rsp>

000053ea <att_handle_exec_write_rsp>:
    53ea:	f7ff bff9 	b.w	53e0 <att_confirm>

000053ee <att_handle_prepare_write_rsp>:
    53ee:	f7ff bff7 	b.w	53e0 <att_confirm>

000053f2 <att_handle_write_rsp>:
    53f2:	f7ff bff5 	b.w	53e0 <att_confirm>

000053f6 <att_handle_read_mult_rsp>:
    53f6:	f7ff bff3 	b.w	53e0 <att_confirm>

000053fa <att_handle_read_blob_rsp>:
    53fa:	f7ff bff1 	b.w	53e0 <att_confirm>

000053fe <att_handle_read_rsp>:
    53fe:	f7ff bfef 	b.w	53e0 <att_confirm>

00005402 <att_handle_read_type_rsp>:
    5402:	f7ff bfed 	b.w	53e0 <att_confirm>

00005406 <att_handle_find_type_rsp>:
    5406:	f7ff bfeb 	b.w	53e0 <att_confirm>

0000540a <att_handle_find_info_rsp>:
    540a:	f7ff bfe9 	b.w	53e0 <att_confirm>

0000540e <att_mtu_rsp>:

	return 0;
}

static u8_t att_mtu_rsp(struct bt_att *att, struct net_buf *buf)
{
    540e:	b410      	push	{r4}
    5410:	460a      	mov	r2, r1
	struct bt_att_exchange_mtu_rsp *rsp;
	u16_t mtu;

	if (!att) {
    5412:	b190      	cbz	r0, 543a <att_mtu_rsp+0x2c>
		return 0;
	}

	rsp = (void *)buf->data;
    5414:	6889      	ldr	r1, [r1, #8]

	mtu = sys_le16_to_cpu(rsp->mtu);
    5416:	880b      	ldrh	r3, [r1, #0]

	BT_DBG("Server MTU %u", mtu);

	/* Check if MTU is valid */
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
    5418:	2b16      	cmp	r3, #22
    541a:	d803      	bhi.n	5424 <att_mtu_rsp+0x16>
		return att_handle_rsp(att, NULL, 0, BT_ATT_ERR_INVALID_PDU);
    541c:	2200      	movs	r2, #0
    541e:	2304      	movs	r3, #4
    5420:	4611      	mov	r1, r2
    5422:	e007      	b.n	5434 <att_mtu_rsp+0x26>
	}

	att->chan.rx.mtu = min(mtu, BT_ATT_MTU);
    5424:	2b41      	cmp	r3, #65	; 0x41
    5426:	bf28      	it	cs
    5428:	2341      	movcs	r3, #65	; 0x41
    542a:	8743      	strh	r3, [r0, #58]	; 0x3a
	/* BLUETOOTH SPECIFICATION Version 4.2 [Vol 3, Part F] page 484:
	 *
	 * A device's Exchange MTU Request shall contain the same MTU as the
	 * device's Exchange MTU Response (i.e. the MTU shall be symmetric).
	 */
	att->chan.tx.mtu = att->chan.rx.mtu;
    542c:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56

	BT_DBG("Negotiated MTU %u", att->chan.rx.mtu);

	return att_handle_rsp(att, rsp, buf->len, 0);
    5430:	8992      	ldrh	r2, [r2, #12]
    5432:	2300      	movs	r3, #0
}
    5434:	bc10      	pop	{r4}
	 */
	att->chan.tx.mtu = att->chan.rx.mtu;

	BT_DBG("Negotiated MTU %u", att->chan.rx.mtu);

	return att_handle_rsp(att, rsp, buf->len, 0);
    5436:	f7ff bf81 	b.w	533c <att_handle_rsp>
}
    543a:	bc10      	pop	{r4}
    543c:	4770      	bx	lr

0000543e <att_error_rsp>:
	return bt_conn_security(conn, sec);
}
#endif /* CONFIG_BLUETOOTH_SMP */

static u8_t att_error_rsp(struct bt_att *att, struct net_buf *buf)
{
    543e:	b570      	push	{r4, r5, r6, lr}
    5440:	4604      	mov	r4, r0
	struct bt_att_error_rsp *rsp;
	u8_t err;

	rsp = (void *)buf->data;
    5442:	6888      	ldr	r0, [r1, #8]

	BT_DBG("request 0x%02x handle 0x%04x error 0x%02x", rsp->request,
	       sys_le16_to_cpu(rsp->handle), rsp->error);

	if (!att->req) {
    5444:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
    5448:	b342      	cbz	r2, 549c <att_error_rsp+0x5e>
		err = BT_ATT_ERR_UNLIKELY;
		goto done;
	}

	if (att->req->buf) {
    544a:	6913      	ldr	r3, [r2, #16]
    544c:	b133      	cbz	r3, 545c <att_error_rsp+0x1e>
 *  @param state Stored state.
 */
static inline void net_buf_simple_restore(struct net_buf_simple *buf,
					  struct net_buf_simple_state *state)
{
	buf->data = buf->__buf + state->offset;
    544e:	8991      	ldrh	r1, [r2, #12]
    5450:	f103 0510 	add.w	r5, r3, #16
    5454:	4429      	add	r1, r5
    5456:	6099      	str	r1, [r3, #8]
	buf->len = state->len;
    5458:	89d1      	ldrh	r1, [r2, #14]
    545a:	8199      	strh	r1, [r3, #12]
		net_buf_simple_restore(&att->req->buf->b, &att->req->state);
	}

	err = rsp->error;
#if defined(CONFIG_BLUETOOTH_SMP)
	if (att->req->retrying) {
    545c:	7d13      	ldrb	r3, [r2, #20]
	if (att->req->buf) {
		/* Restore state to be resent */
		net_buf_simple_restore(&att->req->buf->b, &att->req->state);
	}

	err = rsp->error;
    545e:	78c5      	ldrb	r5, [r0, #3]
#if defined(CONFIG_BLUETOOTH_SMP)
	if (att->req->retrying) {
    5460:	b9eb      	cbnz	r3, 549e <att_error_rsp+0x60>
#if defined(CONFIG_BLUETOOTH_SMP)
static int att_change_security(struct bt_conn *conn, u8_t err)
{
	bt_security_t sec;

	switch (err) {
    5462:	2d05      	cmp	r5, #5
	if (att->req->retrying) {
		goto done;
	}

	/* Check if security needs to be changed */
	if (!att_change_security(att->chan.chan.conn, err)) {
    5464:	6820      	ldr	r0, [r4, #0]
#if defined(CONFIG_BLUETOOTH_SMP)
static int att_change_security(struct bt_conn *conn, u8_t err)
{
	bt_security_t sec;

	switch (err) {
    5466:	d005      	beq.n	5474 <att_error_rsp+0x36>
    5468:	2d0f      	cmp	r5, #15
    546a:	d118      	bne.n	549e <att_error_rsp+0x60>
	case BT_ATT_ERR_INSUFFICIENT_ENCRYPTION:
		if (conn->sec_level >= BT_SECURITY_MEDIUM)
    546c:	7a03      	ldrb	r3, [r0, #8]
    546e:	2b01      	cmp	r3, #1
    5470:	d909      	bls.n	5486 <att_error_rsp+0x48>
    5472:	e014      	b.n	549e <att_error_rsp+0x60>
			return -EALREADY;
		sec = BT_SECURITY_MEDIUM;
		break;
	case BT_ATT_ERR_AUTHENTICATION:
		if (conn->sec_level < BT_SECURITY_MEDIUM) {
    5474:	7a03      	ldrb	r3, [r0, #8]
    5476:	2b01      	cmp	r3, #1
    5478:	d905      	bls.n	5486 <att_error_rsp+0x48>
			 * Note: When the link is not encrypted, the error code
			 * "Insufficient Authentication" does not indicate that
			 * MITM protection is required.
			 */
			sec = BT_SECURITY_MEDIUM;
		} else if (conn->sec_level < BT_SECURITY_HIGH) {
    547a:	2b02      	cmp	r3, #2
    547c:	d005      	beq.n	548a <att_error_rsp+0x4c>
			 * the link is currently encrypted, the error code
			 * 'Insufficient Authentication' indicates that MITM
			 * protection is required.
			 */
			sec = BT_SECURITY_HIGH;
		} else if (conn->sec_level < BT_SECURITY_FIPS) {
    547e:	2b03      	cmp	r3, #3
    5480:	d10d      	bne.n	549e <att_error_rsp+0x60>
			 * required but LE legacy pairing has occurred and the
			 * link is currently encrypted, the service request
			 * shall be rejected with the error code ''Insufficient
			 * Authentication'.
			 */
			sec = BT_SECURITY_FIPS;
    5482:	2104      	movs	r1, #4
    5484:	e002      	b.n	548c <att_error_rsp+0x4e>

	switch (err) {
	case BT_ATT_ERR_INSUFFICIENT_ENCRYPTION:
		if (conn->sec_level >= BT_SECURITY_MEDIUM)
			return -EALREADY;
		sec = BT_SECURITY_MEDIUM;
    5486:	2102      	movs	r1, #2
    5488:	e000      	b.n	548c <att_error_rsp+0x4e>
			 * Note: When unauthenticated pairing has occurred and
			 * the link is currently encrypted, the error code
			 * 'Insufficient Authentication' indicates that MITM
			 * protection is required.
			 */
			sec = BT_SECURITY_HIGH;
    548a:	2103      	movs	r1, #3
		break;
	default:
		return -EINVAL;
	}

	return bt_conn_security(conn, sec);
    548c:	f7fe fd6e 	bl	3f6c <bt_conn_security>
	if (att->req->retrying) {
		goto done;
	}

	/* Check if security needs to be changed */
	if (!att_change_security(att->chan.chan.conn, err)) {
    5490:	b928      	cbnz	r0, 549e <att_error_rsp+0x60>
		att->req->retrying = true;
    5492:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    5496:	2201      	movs	r2, #1
    5498:	751a      	strb	r2, [r3, #20]
		/* Wait security_changed: TODO: Handle fail case */
		return 0;
    549a:	bd70      	pop	{r4, r5, r6, pc}

	BT_DBG("request 0x%02x handle 0x%04x error 0x%02x", rsp->request,
	       sys_le16_to_cpu(rsp->handle), rsp->error);

	if (!att->req) {
		err = BT_ATT_ERR_UNLIKELY;
    549c:	250e      	movs	r5, #14
		return 0;
	}
#endif /* CONFIG_BLUETOOTH_SMP */

done:
	return att_handle_rsp(att, NULL, 0, err);
    549e:	2200      	movs	r2, #0
    54a0:	462b      	mov	r3, r5
    54a2:	4620      	mov	r0, r4
    54a4:	4611      	mov	r1, r2
}
    54a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return 0;
	}
#endif /* CONFIG_BLUETOOTH_SMP */

done:
	return att_handle_rsp(att, NULL, 0, err);
    54aa:	f7ff bf47 	b.w	533c <att_handle_rsp>

000054ae <att_reset>:

	return buf;
}

static void att_reset(struct bt_att *att)
{
    54ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    54b0:	f100 0390 	add.w	r3, r0, #144	; 0x90
    54b4:	4604      	mov	r4, r0
    54b6:	f3bf 8f5f 	dmb	sy
    54ba:	e853 2f00 	ldrex	r2, [r3]
    54be:	f042 0204 	orr.w	r2, r2, #4
    54c2:	e843 2100 	strex	r1, r2, [r3]
    54c6:	2900      	cmp	r1, #0
    54c8:	d1f7      	bne.n	54ba <att_reset+0xc>
    54ca:	f3bf 8f5f 	dmb	sy

	atomic_set_bit(att->flags, ATT_DISCONNECTED);

	/* Ensure that any waiters are woken up */
	for (i = 0; i < CONFIG_BLUETOOTH_ATT_TX_MAX; i++) {
		k_sem_give(&att->tx_sem);
    54ce:	f104 05c8 	add.w	r5, r4, #200	; 0xc8
    54d2:	4628      	mov	r0, r5
    54d4:	f00d fe8c 	bl	131f0 <k_sem_give>
    54d8:	4628      	mov	r0, r5
    54da:	f00d fe89 	bl	131f0 <k_sem_give>
    54de:	f8d4 5098 	ldr.w	r5, [r4, #152]	; 0x98
	}

	/* Notify pending requests */
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    54e2:	b97d      	cbnz	r5, 5504 <att_reset+0x56>
	}

	/* Reset list */
	sys_slist_init(&att->reqs);

	if (!att->req) {
    54e4:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    54e8:	2200      	movs	r2, #0
    54ea:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	list->tail = NULL;
    54ee:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
    54f2:	b1c3      	cbz	r3, 5526 <att_reset+0x78>
		return;
	}

	/* Notify outstanding request */
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
    54f4:	230e      	movs	r3, #14
    54f6:	4611      	mov	r1, r2
    54f8:	4620      	mov	r0, r4
}
    54fa:	b003      	add	sp, #12
    54fc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	if (!att->req) {
		return;
	}

	/* Notify outstanding request */
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
    5500:	f7ff bf1c 	b.w	533c <att_handle_rsp>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node)
{
	return node->next;
    5504:	682e      	ldr	r6, [r5, #0]
		k_sem_give(&att->tx_sem);
	}

	/* Notify pending requests */
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
		if (req->func) {
    5506:	686f      	ldr	r7, [r5, #4]
    5508:	b12f      	cbz	r7, 5516 <att_reset+0x68>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0, req);
    550a:	2300      	movs	r3, #0
    550c:	9500      	str	r5, [sp, #0]
    550e:	461a      	mov	r2, r3
    5510:	210e      	movs	r1, #14
    5512:	4618      	mov	r0, r3
    5514:	47b8      	blx	r7
		}

		att_req_destroy(req);
    5516:	4628      	mov	r0, r5
    5518:	f7ff fc76 	bl	4e08 <att_req_destroy>
	for (i = 0; i < CONFIG_BLUETOOTH_ATT_TX_MAX; i++) {
		k_sem_give(&att->tx_sem);
	}

	/* Notify pending requests */
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    551c:	2e00      	cmp	r6, #0
    551e:	d0e1      	beq.n	54e4 <att_reset+0x36>
    5520:	4635      	mov	r5, r6
    5522:	6836      	ldr	r6, [r6, #0]
    5524:	e7ef      	b.n	5506 <att_reset+0x58>
		return;
	}

	/* Notify outstanding request */
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
}
    5526:	b003      	add	sp, #12
    5528:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000552a <bt_att_disconnected>:

	bt_gatt_connected(ch->chan.conn);
}

static void bt_att_disconnected(struct bt_l2cap_chan *chan)
{
    552a:	b510      	push	{r4, lr}
    552c:	4604      	mov	r4, r0
	struct bt_att *att = ATT_CHAN(chan);
	struct bt_l2cap_le_chan *ch = BT_L2CAP_LE_CHAN(chan);

	BT_DBG("chan %p cid 0x%04x", ch, ch->tx.cid);

	att_reset(att);
    552e:	f7ff ffbe 	bl	54ae <att_reset>

	bt_gatt_disconnected(ch->chan.conn);
    5532:	6820      	ldr	r0, [r4, #0]
    5534:	f001 fa28 	bl	6988 <bt_gatt_disconnected>
	memset(att, 0, sizeof(*att));
    5538:	4620      	mov	r0, r4
    553a:	22dc      	movs	r2, #220	; 0xdc
    553c:	2100      	movs	r1, #0
}
    553e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	BT_DBG("chan %p cid 0x%04x", ch, ch->tx.cid);

	att_reset(att);

	bt_gatt_disconnected(ch->chan.conn);
	memset(att, 0, sizeof(*att));
    5542:	f7fb bdd2 	b.w	10ea <memset>
	...

00005548 <att_timeout>:
	/* Notify outstanding request */
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
}

static void att_timeout(struct k_work *work)
{
    5548:	b513      	push	{r0, r1, r4, lr}
	struct bt_att *att = CONTAINER_OF(work, struct bt_att, timeout_work);
	struct bt_l2cap_le_chan *ch = &att->chan;

	BT_ERR("ATT Timeout");
    554a:	4b0c      	ldr	r3, [pc, #48]	; (557c <att_timeout+0x34>)
    554c:	9301      	str	r3, [sp, #4]
    554e:	4b0c      	ldr	r3, [pc, #48]	; (5580 <att_timeout+0x38>)
    5550:	4a0c      	ldr	r2, [pc, #48]	; (5584 <att_timeout+0x3c>)
    5552:	490d      	ldr	r1, [pc, #52]	; (5588 <att_timeout+0x40>)
    5554:	9300      	str	r3, [sp, #0]
	/* Notify outstanding request */
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
}

static void att_timeout(struct k_work *work)
{
    5556:	4604      	mov	r4, r0
	struct bt_att *att = CONTAINER_OF(work, struct bt_att, timeout_work);
	struct bt_l2cap_le_chan *ch = &att->chan;

	BT_ERR("ATT Timeout");
    5558:	4b0c      	ldr	r3, [pc, #48]	; (558c <att_timeout+0x44>)
    555a:	480d      	ldr	r0, [pc, #52]	; (5590 <att_timeout+0x48>)
    555c:	f7fb ff90 	bl	1480 <printk>
	 * transaction shall be considered to have failed and the local higher
	 * layers shall be informed of this failure. No more attribute protocol
	 * requests, commands, indications or notifications shall be sent to the
	 * target device on this ATT Bearer.
	 */
	att_reset(att);
    5560:	f1a4 00a0 	sub.w	r0, r4, #160	; 0xa0
    5564:	f7ff ffa3 	bl	54ae <att_reset>

	/* Consider the channel disconnected */
	bt_gatt_disconnected(ch->chan.conn);
    5568:	f854 0ca0 	ldr.w	r0, [r4, #-160]
    556c:	f001 fa0c 	bl	6988 <bt_gatt_disconnected>
	ch->chan.conn = NULL;
    5570:	2300      	movs	r3, #0
    5572:	f844 3ca0 	str.w	r3, [r4, #-160]
}
    5576:	b002      	add	sp, #8
    5578:	bd10      	pop	{r4, pc}
    557a:	bf00      	nop
    557c:	00013df4 	.word	0x00013df4
    5580:	00013df9 	.word	0x00013df9
    5584:	00013db4 	.word	0x00013db4
    5588:	00013dbb 	.word	0x00013dbb
    558c:	00016378 	.word	0x00016378
    5590:	000148e6 	.word	0x000148e6

00005594 <bt_att_encrypt_change>:
}

#if defined(CONFIG_BLUETOOTH_SMP)
static void bt_att_encrypt_change(struct bt_l2cap_chan *chan,
				  u8_t hci_status)
{
    5594:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5596:	4604      	mov	r4, r0

	/*
	 * If status (HCI status of security procedure) is non-zero, notify
	 * outstanding request about security failure.
	 */
	if (hci_status) {
    5598:	460d      	mov	r5, r1
    559a:	b139      	cbz	r1, 55ac <bt_att_encrypt_change+0x18>
		att_handle_rsp(att, NULL, 0, BT_ATT_ERR_AUTHENTICATION);
    559c:	2200      	movs	r2, #0
    559e:	2305      	movs	r3, #5
    55a0:	4611      	mov	r1, r2

	/* Resend buffer */
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, att->req->buf,
			 att_cb(att->req->buf));
	att->req->buf = NULL;
}
    55a2:	b003      	add	sp, #12
    55a4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	/*
	 * If status (HCI status of security procedure) is non-zero, notify
	 * outstanding request about security failure.
	 */
	if (hci_status) {
		att_handle_rsp(att, NULL, 0, BT_ATT_ERR_AUTHENTICATION);
    55a8:	f7ff bec8 	b.w	533c <att_handle_rsp>
static void bt_att_encrypt_change(struct bt_l2cap_chan *chan,
				  u8_t hci_status)
{
	struct bt_att *att = ATT_CHAN(chan);
	struct bt_l2cap_le_chan *ch = BT_L2CAP_LE_CHAN(chan);
	struct bt_conn *conn = ch->chan.conn;
    55ac:	6806      	ldr	r6, [r0, #0]
	if (hci_status) {
		att_handle_rsp(att, NULL, 0, BT_ATT_ERR_AUTHENTICATION);
		return;
	}

	if (conn->sec_level == BT_SECURITY_LOW) {
    55ae:	7a33      	ldrb	r3, [r6, #8]
    55b0:	2b01      	cmp	r3, #1
    55b2:	d02e      	beq.n	5612 <bt_att_encrypt_change+0x7e>
		return;
	}

	if (!att->req || !att->req->retrying) {
    55b4:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
    55b8:	b35b      	cbz	r3, 5612 <bt_att_encrypt_change+0x7e>
    55ba:	7d1b      	ldrb	r3, [r3, #20]
    55bc:	b34b      	cbz	r3, 5612 <bt_att_encrypt_change+0x7e>
		return;
	}

	k_sem_take(&att->tx_sem, K_FOREVER);
    55be:	f100 07c8 	add.w	r7, r0, #200	; 0xc8
    55c2:	f04f 31ff 	mov.w	r1, #4294967295
    55c6:	4638      	mov	r0, r7
    55c8:	f00d fe54 	bl	13274 <k_sem_take>
	if (!att_is_connected(att)) {
    55cc:	4620      	mov	r0, r4
    55ce:	f7ff fe5d 	bl	528c <att_is_connected>
    55d2:	b978      	cbnz	r0, 55f4 <bt_att_encrypt_change+0x60>
		BT_WARN("Disconnected");
    55d4:	4b10      	ldr	r3, [pc, #64]	; (5618 <bt_att_encrypt_change+0x84>)
    55d6:	9301      	str	r3, [sp, #4]
    55d8:	4b10      	ldr	r3, [pc, #64]	; (561c <bt_att_encrypt_change+0x88>)
    55da:	9300      	str	r3, [sp, #0]
    55dc:	4a10      	ldr	r2, [pc, #64]	; (5620 <bt_att_encrypt_change+0x8c>)
    55de:	4b11      	ldr	r3, [pc, #68]	; (5624 <bt_att_encrypt_change+0x90>)
    55e0:	4911      	ldr	r1, [pc, #68]	; (5628 <bt_att_encrypt_change+0x94>)
    55e2:	4812      	ldr	r0, [pc, #72]	; (562c <bt_att_encrypt_change+0x98>)
    55e4:	f7fb ff4c 	bl	1480 <printk>
		k_sem_give(&att->tx_sem);
    55e8:	4638      	mov	r0, r7

	/* Resend buffer */
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, att->req->buf,
			 att_cb(att->req->buf));
	att->req->buf = NULL;
}
    55ea:	b003      	add	sp, #12
    55ec:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	}

	k_sem_take(&att->tx_sem, K_FOREVER);
	if (!att_is_connected(att)) {
		BT_WARN("Disconnected");
		k_sem_give(&att->tx_sem);
    55f0:	f00d bdfe 	b.w	131f0 <k_sem_give>
	}

	BT_DBG("Retrying");

	/* Resend buffer */
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, att->req->buf,
    55f4:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    55f8:	691f      	ldr	r7, [r3, #16]
    55fa:	68b8      	ldr	r0, [r7, #8]
    55fc:	f7ff fdc6 	bl	518c <att_cb.isra.4>
    5600:	463a      	mov	r2, r7
    5602:	4603      	mov	r3, r0
    5604:	2104      	movs	r1, #4
    5606:	4630      	mov	r0, r6
    5608:	f7ff faa8 	bl	4b5c <bt_l2cap_send_cb>
			 att_cb(att->req->buf));
	att->req->buf = NULL;
    560c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    5610:	611d      	str	r5, [r3, #16]
}
    5612:	b003      	add	sp, #12
    5614:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5616:	bf00      	nop
    5618:	00013df4 	.word	0x00013df4
    561c:	00013e3f 	.word	0x00013e3f
    5620:	00013e01 	.word	0x00013e01
    5624:	00016396 	.word	0x00016396
    5628:	00013dbb 	.word	0x00013dbb
    562c:	000148a2 	.word	0x000148a2

00005630 <att_prepare_write_req>:
    5630:	2006      	movs	r0, #6
    5632:	4770      	bx	lr

00005634 <att_pdu_sent>:
		k_delayed_work_submit(&att->timeout_work, ATT_TIMEOUT);
	}
}

static void att_pdu_sent(struct bt_conn *conn)
{
    5634:	b508      	push	{r3, lr}

static struct bt_att *att_get(struct bt_conn *conn)
{
	struct bt_l2cap_chan *chan;

	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    5636:	2104      	movs	r1, #4
    5638:	f7ff fb34 	bl	4ca4 <bt_l2cap_le_lookup_tx_cid>
	struct bt_att *att = att_get(conn);

	BT_DBG("conn %p att %p", conn, att);

	k_sem_give(&att->tx_sem);
}
    563c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
	struct bt_att *att = att_get(conn);

	BT_DBG("conn %p att %p", conn, att);

	k_sem_give(&att->tx_sem);
    5640:	30c8      	adds	r0, #200	; 0xc8
    5642:	f00d bdd5 	b.w	131f0 <k_sem_give>

00005646 <att_rsp_sent>:

	k_sem_give(&att->tx_sem);
}

static void att_rsp_sent(struct bt_conn *conn)
{
    5646:	b508      	push	{r3, lr}

static struct bt_att *att_get(struct bt_conn *conn)
{
	struct bt_l2cap_chan *chan;

	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    5648:	2104      	movs	r1, #4
    564a:	f7ff fb2b 	bl	4ca4 <bt_l2cap_le_lookup_tx_cid>
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    564e:	f3bf 8f5f 	dmb	sy
    5652:	f100 0390 	add.w	r3, r0, #144	; 0x90
    5656:	e853 2f00 	ldrex	r2, [r3]
    565a:	f022 0201 	bic.w	r2, r2, #1
    565e:	e843 2100 	strex	r1, r2, [r3]
    5662:	2900      	cmp	r1, #0
    5664:	d1f7      	bne.n	5656 <att_rsp_sent+0x10>
    5666:	f3bf 8f5f 	dmb	sy

#if defined(CONFIG_BLUETOOTH_ATT_ENFORCE_FLOW)
	atomic_clear_bit(att->flags, ATT_PENDING_RSP);
#endif /* CONFIG_BLUETOOTH_ATT_ENFORCE_FLOW */

	k_sem_give(&att->tx_sem);
    566a:	30c8      	adds	r0, #200	; 0xc8
}
    566c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

#if defined(CONFIG_BLUETOOTH_ATT_ENFORCE_FLOW)
	atomic_clear_bit(att->flags, ATT_PENDING_RSP);
#endif /* CONFIG_BLUETOOTH_ATT_ENFORCE_FLOW */

	k_sem_give(&att->tx_sem);
    5670:	f00d bdbe 	b.w	131f0 <k_sem_give>

00005674 <att_cfm_sent>:

	return CONTAINER_OF(chan, struct bt_att, chan);
}

static void att_cfm_sent(struct bt_conn *conn)
{
    5674:	b508      	push	{r3, lr}

static struct bt_att *att_get(struct bt_conn *conn)
{
	struct bt_l2cap_chan *chan;

	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    5676:	2104      	movs	r1, #4
    5678:	f7ff fb14 	bl	4ca4 <bt_l2cap_le_lookup_tx_cid>
    567c:	f3bf 8f5f 	dmb	sy
    5680:	f100 0390 	add.w	r3, r0, #144	; 0x90
    5684:	e853 2f00 	ldrex	r2, [r3]
    5688:	f022 0202 	bic.w	r2, r2, #2
    568c:	e843 2100 	strex	r1, r2, [r3]
    5690:	2900      	cmp	r1, #0
    5692:	d1f7      	bne.n	5684 <att_cfm_sent+0x10>
    5694:	f3bf 8f5f 	dmb	sy

#if defined(CONFIG_BLUETOOTH_ATT_ENFORCE_FLOW)
	atomic_clear_bit(att->flags, ATT_PENDING_CFM);
#endif /* CONFIG_BLUETOOTH_ATT_ENFORCE_FLOW */

	k_sem_give(&att->tx_sem);
    5698:	30c8      	adds	r0, #200	; 0xc8
}
    569a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

#if defined(CONFIG_BLUETOOTH_ATT_ENFORCE_FLOW)
	atomic_clear_bit(att->flags, ATT_PENDING_CFM);
#endif /* CONFIG_BLUETOOTH_ATT_ENFORCE_FLOW */

	k_sem_give(&att->tx_sem);
    569e:	f00d bda7 	b.w	131f0 <k_sem_give>
	...

000056a4 <att_chan_get>:
static struct bt_att *att_chan_get(struct bt_conn *conn)
{
	struct bt_l2cap_chan *chan;
	struct bt_att *att;

	if (conn->state != BT_CONN_CONNECTED) {
    56a4:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
    56a8:	2b03      	cmp	r3, #3
		send_err_rsp(chan->conn, hdr->code, 0, err);
	}
}

static struct bt_att *att_chan_get(struct bt_conn *conn)
{
    56aa:	b513      	push	{r0, r1, r4, lr}
	struct bt_l2cap_chan *chan;
	struct bt_att *att;

	if (conn->state != BT_CONN_CONNECTED) {
    56ac:	d008      	beq.n	56c0 <att_chan_get+0x1c>
		BT_WARN("Not connected");
    56ae:	4b18      	ldr	r3, [pc, #96]	; (5710 <att_chan_get+0x6c>)
    56b0:	9301      	str	r3, [sp, #4]
    56b2:	4b18      	ldr	r3, [pc, #96]	; (5714 <att_chan_get+0x70>)
    56b4:	9300      	str	r3, [sp, #0]
    56b6:	4a18      	ldr	r2, [pc, #96]	; (5718 <att_chan_get+0x74>)
    56b8:	4b18      	ldr	r3, [pc, #96]	; (571c <att_chan_get+0x78>)
    56ba:	4919      	ldr	r1, [pc, #100]	; (5720 <att_chan_get+0x7c>)
    56bc:	4819      	ldr	r0, [pc, #100]	; (5724 <att_chan_get+0x80>)
    56be:	e01f      	b.n	5700 <att_chan_get+0x5c>
		return NULL;
	}

	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
    56c0:	2104      	movs	r1, #4
    56c2:	f7ff fafa 	bl	4cba <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    56c6:	4604      	mov	r4, r0
    56c8:	b950      	cbnz	r0, 56e0 <att_chan_get+0x3c>
		BT_ERR("Unable to find ATT channel");
    56ca:	4b11      	ldr	r3, [pc, #68]	; (5710 <att_chan_get+0x6c>)
    56cc:	9301      	str	r3, [sp, #4]
    56ce:	4b16      	ldr	r3, [pc, #88]	; (5728 <att_chan_get+0x84>)
    56d0:	9300      	str	r3, [sp, #0]
    56d2:	4a16      	ldr	r2, [pc, #88]	; (572c <att_chan_get+0x88>)
    56d4:	4b11      	ldr	r3, [pc, #68]	; (571c <att_chan_get+0x78>)
    56d6:	4912      	ldr	r1, [pc, #72]	; (5720 <att_chan_get+0x7c>)
    56d8:	4815      	ldr	r0, [pc, #84]	; (5730 <att_chan_get+0x8c>)
    56da:	f7fb fed1 	bl	1480 <printk>
    56de:	e013      	b.n	5708 <att_chan_get+0x64>
 * @return Value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    56e0:	f3bf 8f5f 	dmb	sy
    56e4:	f8d0 3090 	ldr.w	r3, [r0, #144]	; 0x90
    56e8:	f3bf 8f5f 	dmb	sy
		return NULL;
	}

	att = ATT_CHAN(chan);
	if (atomic_test_bit(att->flags, ATT_DISCONNECTED)) {
    56ec:	075b      	lsls	r3, r3, #29
    56ee:	d50b      	bpl.n	5708 <att_chan_get+0x64>
		BT_WARN("ATT context flagged as disconnected");
    56f0:	4b07      	ldr	r3, [pc, #28]	; (5710 <att_chan_get+0x6c>)
    56f2:	9301      	str	r3, [sp, #4]
    56f4:	4b07      	ldr	r3, [pc, #28]	; (5714 <att_chan_get+0x70>)
    56f6:	9300      	str	r3, [sp, #0]
    56f8:	4a07      	ldr	r2, [pc, #28]	; (5718 <att_chan_get+0x74>)
    56fa:	4b08      	ldr	r3, [pc, #32]	; (571c <att_chan_get+0x78>)
    56fc:	4908      	ldr	r1, [pc, #32]	; (5720 <att_chan_get+0x7c>)
    56fe:	480d      	ldr	r0, [pc, #52]	; (5734 <att_chan_get+0x90>)
    5700:	f7fb febe 	bl	1480 <printk>
		return NULL;
    5704:	2000      	movs	r0, #0
    5706:	e000      	b.n	570a <att_chan_get+0x66>
    5708:	4620      	mov	r0, r4
	}

	return att;
}
    570a:	b002      	add	sp, #8
    570c:	bd10      	pop	{r4, pc}
    570e:	bf00      	nop
    5710:	00013df4 	.word	0x00013df4
    5714:	00013e3f 	.word	0x00013e3f
    5718:	00013e01 	.word	0x00013e01
    571c:	000163ac 	.word	0x000163ac
    5720:	00013dbb 	.word	0x00013dbb
    5724:	00014902 	.word	0x00014902
    5728:	00013df9 	.word	0x00013df9
    572c:	00013db4 	.word	0x00013db4
    5730:	00014920 	.word	0x00014920
    5734:	0001494b 	.word	0x0001494b

00005738 <write_cb>:
	u16_t offset;
	u8_t err;
};

static u8_t write_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    5738:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	int write;

	BT_DBG("handle 0x%04x offset %u", attr->handle, data->offset);

	/* Check attribute permissions */
	data->err = check_perm(data->conn, attr, BT_GATT_PERM_WRITE_MASK);
    573c:	680f      	ldr	r7, [r1, #0]
	u16_t offset;
	u8_t err;
};

static u8_t write_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    573e:	460c      	mov	r4, r1
    5740:	4606      	mov	r6, r0
	int write;

	BT_DBG("handle 0x%04x offset %u", attr->handle, data->offset);

	/* Check attribute permissions */
	data->err = check_perm(data->conn, attr, BT_GATT_PERM_WRITE_MASK);
    5742:	4601      	mov	r1, r0
    5744:	222a      	movs	r2, #42	; 0x2a
    5746:	4638      	mov	r0, r7
    5748:	f7ff fc96 	bl	5078 <check_perm>
    574c:	4605      	mov	r5, r0
    574e:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    5750:	b9d0      	cbnz	r0, 5788 <write_cb+0x50>
		return BT_GATT_ITER_STOP;
	}

	/* Read attribute value and store in the buffer */
	write = attr->write(data->conn, attr, data->value, data->len,
    5752:	8a62      	ldrh	r2, [r4, #18]
    5754:	9001      	str	r0, [sp, #4]
    5756:	9200      	str	r2, [sp, #0]
    5758:	7c23      	ldrb	r3, [r4, #16]
    575a:	f8d6 8008 	ldr.w	r8, [r6, #8]
    575e:	68e2      	ldr	r2, [r4, #12]
    5760:	4631      	mov	r1, r6
    5762:	4638      	mov	r0, r7
    5764:	47c0      	blx	r8
			    data->offset, 0);
	if (write < 0 || write != data->len) {
    5766:	2800      	cmp	r0, #0
    5768:	db02      	blt.n	5770 <write_cb+0x38>
    576a:	7c23      	ldrb	r3, [r4, #16]
    576c:	4298      	cmp	r0, r3
    576e:	d008      	beq.n	5782 <write_cb+0x4a>

static u8_t err_to_att(int err)
{
	BT_DBG("%d", err);

	if (err < 0 && err >= -0xff) {
    5770:	f100 03ff 	add.w	r3, r0, #255	; 0xff
    5774:	2bfe      	cmp	r3, #254	; 0xfe
		return -err;
    5776:	bf9a      	itte	ls
    5778:	4240      	negls	r0, r0
    577a:	b2c0      	uxtbls	r0, r0
	}

	return BT_ATT_ERR_UNLIKELY;
    577c:	200e      	movhi	r0, #14

	/* Read attribute value and store in the buffer */
	write = attr->write(data->conn, attr, data->value, data->len,
			    data->offset, 0);
	if (write < 0 || write != data->len) {
		data->err = err_to_att(write);
    577e:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
    5780:	e003      	b.n	578a <write_cb+0x52>
	}

	data->err = 0;
    5782:	7525      	strb	r5, [r4, #20]

	return BT_GATT_ITER_CONTINUE;
    5784:	2501      	movs	r5, #1
    5786:	e000      	b.n	578a <write_cb+0x52>
	BT_DBG("handle 0x%04x offset %u", attr->handle, data->offset);

	/* Check attribute permissions */
	data->err = check_perm(data->conn, attr, BT_GATT_PERM_WRITE_MASK);
	if (data->err) {
		return BT_GATT_ITER_STOP;
    5788:	2500      	movs	r5, #0
	}

	data->err = 0;

	return BT_GATT_ITER_CONTINUE;
}
    578a:	4628      	mov	r0, r5
    578c:	b002      	add	sp, #8
    578e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00005792 <read_cb>:
	struct bt_att_read_rsp *rsp;
	u8_t err;
};

static u8_t read_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    5792:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    5796:	4606      	mov	r6, r0
	struct bt_conn *conn = att->chan.chan.conn;
	int read;

	BT_DBG("handle 0x%04x", attr->handle);

	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    5798:	6888      	ldr	r0, [r1, #8]
};

static u8_t read_cb(const struct bt_gatt_attr *attr, void *user_data)
{
	struct read_data *data = user_data;
	struct bt_att *att = data->att;
    579a:	f8d1 9000 	ldr.w	r9, [r1]
	struct bt_att_read_rsp *rsp;
	u8_t err;
};

static u8_t read_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    579e:	460c      	mov	r4, r1
	struct bt_conn *conn = att->chan.chan.conn;
	int read;

	BT_DBG("handle 0x%04x", attr->handle);

	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    57a0:	3008      	adds	r0, #8
    57a2:	2100      	movs	r1, #0

static u8_t read_cb(const struct bt_gatt_attr *attr, void *user_data)
{
	struct read_data *data = user_data;
	struct bt_att *att = data->att;
	struct bt_conn *conn = att->chan.chan.conn;
    57a4:	f8d9 8000 	ldr.w	r8, [r9]
	int read;

	BT_DBG("handle 0x%04x", attr->handle);

	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    57a8:	f00c fa30 	bl	11c0c <net_buf_simple_add>

	/*
	 * If any attribute is founded in handle range it means that error
	 * should be changed from pre-set: invalid handle error to no error.
	 */
	data->err = 0x00;
    57ac:	2700      	movs	r7, #0
	struct bt_conn *conn = att->chan.chan.conn;
	int read;

	BT_DBG("handle 0x%04x", attr->handle);

	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    57ae:	60e0      	str	r0, [r4, #12]

	/*
	 * If any attribute is founded in handle range it means that error
	 * should be changed from pre-set: invalid handle error to no error.
	 */
	data->err = 0x00;
    57b0:	7427      	strb	r7, [r4, #16]

	/* Check attribute permissions */
	data->err = check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    57b2:	2215      	movs	r2, #21
    57b4:	4631      	mov	r1, r6
    57b6:	4640      	mov	r0, r8
    57b8:	f7ff fc5e 	bl	5078 <check_perm>
    57bc:	4605      	mov	r5, r0
    57be:	7420      	strb	r0, [r4, #16]
	if (data->err) {
    57c0:	b9f0      	cbnz	r0, 5800 <read_cb+0x6e>
		return BT_GATT_ITER_STOP;
	}

	/* Read attribute value and store in the buffer */
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    57c2:	68a1      	ldr	r1, [r4, #8]
    57c4:	f8b9 3056 	ldrh.w	r3, [r9, #86]	; 0x56
    57c8:	898a      	ldrh	r2, [r1, #12]
    57ca:	6889      	ldr	r1, [r1, #8]
    57cc:	88a0      	ldrh	r0, [r4, #4]
    57ce:	9000      	str	r0, [sp, #0]
    57d0:	1a9b      	subs	r3, r3, r2
    57d2:	6877      	ldr	r7, [r6, #4]
    57d4:	440a      	add	r2, r1
    57d6:	b29b      	uxth	r3, r3
    57d8:	4631      	mov	r1, r6
    57da:	4640      	mov	r0, r8
    57dc:	47b8      	blx	r7
			  att->chan.tx.mtu - data->buf->len, data->offset);
	if (read < 0) {
    57de:	1e01      	subs	r1, r0, #0
    57e0:	da08      	bge.n	57f4 <read_cb+0x62>

static u8_t err_to_att(int err)
{
	BT_DBG("%d", err);

	if (err < 0 && err >= -0xff) {
    57e2:	f101 03ff 	add.w	r3, r1, #255	; 0xff
    57e6:	2bfe      	cmp	r3, #254	; 0xfe
		return -err;
    57e8:	bf9a      	itte	ls
    57ea:	4249      	negls	r1, r1
    57ec:	b2c9      	uxtbls	r1, r1
	}

	return BT_ATT_ERR_UNLIKELY;
    57ee:	210e      	movhi	r1, #14

	/* Read attribute value and store in the buffer */
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
			  att->chan.tx.mtu - data->buf->len, data->offset);
	if (read < 0) {
		data->err = err_to_att(read);
    57f0:	7421      	strb	r1, [r4, #16]
		return BT_GATT_ITER_STOP;
    57f2:	e006      	b.n	5802 <read_cb+0x70>
	}

	net_buf_add(data->buf, read);
    57f4:	68a0      	ldr	r0, [r4, #8]
    57f6:	3008      	adds	r0, #8
    57f8:	f00c fa08 	bl	11c0c <net_buf_simple_add>

	return BT_GATT_ITER_CONTINUE;
    57fc:	2501      	movs	r5, #1
    57fe:	e000      	b.n	5802 <read_cb+0x70>
	data->err = 0x00;

	/* Check attribute permissions */
	data->err = check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
	if (data->err) {
		return BT_GATT_ITER_STOP;
    5800:	463d      	mov	r5, r7
	}

	net_buf_add(data->buf, read);

	return BT_GATT_ITER_CONTINUE;
}
    5802:	4628      	mov	r0, r5
    5804:	b003      	add	sp, #12
    5806:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0000580c <bt_att_create_pdu>:

	return att;
}

struct net_buf *bt_att_create_pdu(struct bt_conn *conn, u8_t op, size_t len)
{
    580c:	b530      	push	{r4, r5, lr}
    580e:	b085      	sub	sp, #20
    5810:	460d      	mov	r5, r1
    5812:	4614      	mov	r4, r2
	struct bt_att_hdr *hdr;
	struct net_buf *buf;
	struct bt_att *att;

	att = att_chan_get(conn);
    5814:	f7ff ff46 	bl	56a4 <att_chan_get>
	if (!att) {
    5818:	b1e8      	cbz	r0, 5856 <bt_att_create_pdu+0x4a>
		return NULL;
	}

	if (len + sizeof(op) > att->chan.tx.mtu) {
    581a:	f8b0 3056 	ldrh.w	r3, [r0, #86]	; 0x56
    581e:	1c62      	adds	r2, r4, #1
    5820:	429a      	cmp	r2, r3
    5822:	d90d      	bls.n	5840 <bt_att_create_pdu+0x34>
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
    5824:	490d      	ldr	r1, [pc, #52]	; (585c <bt_att_create_pdu+0x50>)
    5826:	9301      	str	r3, [sp, #4]
    5828:	4b0d      	ldr	r3, [pc, #52]	; (5860 <bt_att_create_pdu+0x54>)
    582a:	9103      	str	r1, [sp, #12]
    582c:	9202      	str	r2, [sp, #8]
    582e:	9300      	str	r3, [sp, #0]
    5830:	4a0c      	ldr	r2, [pc, #48]	; (5864 <bt_att_create_pdu+0x58>)
    5832:	4b0d      	ldr	r3, [pc, #52]	; (5868 <bt_att_create_pdu+0x5c>)
    5834:	490d      	ldr	r1, [pc, #52]	; (586c <bt_att_create_pdu+0x60>)
    5836:	480e      	ldr	r0, [pc, #56]	; (5870 <bt_att_create_pdu+0x64>)
    5838:	f7fb fe22 	bl	1480 <printk>
			att->chan.tx.mtu, len + sizeof(op));
		return NULL;
    583c:	2000      	movs	r0, #0
    583e:	e00a      	b.n	5856 <bt_att_create_pdu+0x4a>
	}

	buf = bt_l2cap_create_pdu(NULL, 0);
    5840:	2100      	movs	r1, #0
    5842:	4608      	mov	r0, r1
    5844:	f7ff f987 	bl	4b56 <bt_l2cap_create_pdu>

	hdr = net_buf_add(buf, sizeof(*hdr));
    5848:	2101      	movs	r1, #1
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
			att->chan.tx.mtu, len + sizeof(op));
		return NULL;
	}

	buf = bt_l2cap_create_pdu(NULL, 0);
    584a:	4604      	mov	r4, r0

	hdr = net_buf_add(buf, sizeof(*hdr));
    584c:	3008      	adds	r0, #8
    584e:	f00c f9dd 	bl	11c0c <net_buf_simple_add>
	hdr->code = op;
    5852:	7005      	strb	r5, [r0, #0]

	return buf;
    5854:	4620      	mov	r0, r4
}
    5856:	b005      	add	sp, #20
    5858:	bd30      	pop	{r4, r5, pc}
    585a:	bf00      	nop
    585c:	00013df4 	.word	0x00013df4
    5860:	00013e3f 	.word	0x00013e3f
    5864:	00013e01 	.word	0x00013e01
    5868:	00016384 	.word	0x00016384
    586c:	00013dbb 	.word	0x00013dbb
    5870:	0001497f 	.word	0x0001497f

00005874 <att_indicate>:

	return 0;
}

static u8_t att_indicate(struct bt_att *att, struct net_buf *buf)
{
    5874:	b510      	push	{r4, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    5876:	6804      	ldr	r4, [r0, #0]
	u16_t handle;

	handle = net_buf_pull_le16(buf);
    5878:	f101 0008 	add.w	r0, r1, #8
    587c:	f00c f9f5 	bl	11c6a <net_buf_simple_pull_le16>

	BT_DBG("handle 0x%04x", handle);

	bt_gatt_notification(conn, handle, buf->data, buf->len);

	buf = bt_att_create_pdu(conn, BT_ATT_OP_CONFIRM, 0);
    5880:	2200      	movs	r2, #0
    5882:	211e      	movs	r1, #30
    5884:	4620      	mov	r0, r4
    5886:	f7ff ffc1 	bl	580c <bt_att_create_pdu>
	if (!buf) {
    588a:	4602      	mov	r2, r0
    588c:	b120      	cbz	r0, 5898 <att_indicate+0x24>
		return 0;
	}

	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_cfm_sent);
    588e:	4b03      	ldr	r3, [pc, #12]	; (589c <att_indicate+0x28>)
    5890:	2104      	movs	r1, #4
    5892:	4620      	mov	r0, r4
    5894:	f7ff f962 	bl	4b5c <bt_l2cap_send_cb>

	return 0;
}
    5898:	2000      	movs	r0, #0
    589a:	bd10      	pop	{r4, pc}
    589c:	00005675 	.word	0x00005675

000058a0 <att_mtu_req>:

	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent);
}

static u8_t att_mtu_req(struct bt_att *att, struct net_buf *buf)
{
    58a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct net_buf *pdu;
	u16_t mtu_client, mtu_server;

	req = (void *)buf->data;

	mtu_client = sys_le16_to_cpu(req->mtu);
    58a4:	688b      	ldr	r3, [r1, #8]
    58a6:	881d      	ldrh	r5, [r3, #0]

	BT_DBG("Client MTU %u", mtu_client);

	/* Check if MTU is valid */
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    58a8:	2d16      	cmp	r5, #22

	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent);
}

static u8_t att_mtu_req(struct bt_att *att, struct net_buf *buf)
{
    58aa:	4606      	mov	r6, r0
	mtu_client = sys_le16_to_cpu(req->mtu);

	BT_DBG("Client MTU %u", mtu_client);

	/* Check if MTU is valid */
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    58ac:	d91f      	bls.n	58ee <att_mtu_req+0x4e>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent);
}

static u8_t att_mtu_req(struct bt_att *att, struct net_buf *buf)
{
	struct bt_conn *conn = att->chan.chan.conn;
    58ae:	f8d0 8000 	ldr.w	r8, [r0]
	/* Check if MTU is valid */
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
		return BT_ATT_ERR_INVALID_PDU;
	}

	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
    58b2:	2202      	movs	r2, #2
    58b4:	2103      	movs	r1, #3
    58b6:	4640      	mov	r0, r8
    58b8:	f7ff ffa8 	bl	580c <bt_att_create_pdu>
	if (!pdu) {
    58bc:	4607      	mov	r7, r0
    58be:	b1c8      	cbz	r0, 58f4 <att_mtu_req+0x54>

	mtu_server = BT_ATT_MTU;

	BT_DBG("Server MTU %u", mtu_server);

	rsp = net_buf_add(pdu, sizeof(*rsp));
    58c0:	2102      	movs	r1, #2
    58c2:	3008      	adds	r0, #8
    58c4:	f00c f9a2 	bl	11c0c <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
    58c8:	2400      	movs	r4, #0
    58ca:	2341      	movs	r3, #65	; 0x41
    58cc:	7003      	strb	r3, [r0, #0]
    58ce:	7044      	strb	r4, [r0, #1]

	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, pdu, att_rsp_sent);
    58d0:	4b0a      	ldr	r3, [pc, #40]	; (58fc <att_mtu_req+0x5c>)
    58d2:	4640      	mov	r0, r8
    58d4:	463a      	mov	r2, r7
    58d6:	2104      	movs	r1, #4
    58d8:	f7ff f940 	bl	4b5c <bt_l2cap_send_cb>
	/* BLUETOOTH SPECIFICATION Version 4.2 [Vol 3, Part F] page 484:
	 *
	 * A device's Exchange MTU Request shall contain the same MTU as the
	 * device's Exchange MTU Response (i.e. the MTU shall be symmetric).
	 */
	att->chan.rx.mtu = min(mtu_client, mtu_server);
    58dc:	2d41      	cmp	r5, #65	; 0x41
    58de:	bf28      	it	cs
    58e0:	2541      	movcs	r5, #65	; 0x41
    58e2:	8775      	strh	r5, [r6, #58]	; 0x3a
	att->chan.tx.mtu = att->chan.rx.mtu;
    58e4:	f8a6 5056 	strh.w	r5, [r6, #86]	; 0x56

	BT_DBG("Negotiated MTU %u", att->chan.rx.mtu);
	return 0;
    58e8:	4620      	mov	r0, r4
    58ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	BT_DBG("Client MTU %u", mtu_client);

	/* Check if MTU is valid */
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
		return BT_ATT_ERR_INVALID_PDU;
    58ee:	2004      	movs	r0, #4
    58f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
	if (!pdu) {
		return BT_ATT_ERR_UNLIKELY;
    58f4:	200e      	movs	r0, #14
	att->chan.rx.mtu = min(mtu_client, mtu_server);
	att->chan.tx.mtu = att->chan.rx.mtu;

	BT_DBG("Negotiated MTU %u", att->chan.rx.mtu);
	return 0;
}
    58f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    58fa:	bf00      	nop
    58fc:	00005647 	.word	0x00005647

00005900 <send_err_rsp.part.8>:
	default:
		return att_pdu_sent;
	}
}

static void send_err_rsp(struct bt_conn *conn, u8_t req, u16_t handle,
    5900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5904:	4688      	mov	r8, r1
    5906:	4617      	mov	r7, r2
	/* Ignore opcode 0x00 */
	if (!req) {
		return;
	}

	buf = bt_att_create_pdu(conn, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    5908:	2101      	movs	r1, #1
    590a:	2204      	movs	r2, #4
	default:
		return att_pdu_sent;
	}
}

static void send_err_rsp(struct bt_conn *conn, u8_t req, u16_t handle,
    590c:	4605      	mov	r5, r0
    590e:	461e      	mov	r6, r3
	/* Ignore opcode 0x00 */
	if (!req) {
		return;
	}

	buf = bt_att_create_pdu(conn, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    5910:	f7ff ff7c 	bl	580c <bt_att_create_pdu>
	if (!buf) {
    5914:	4604      	mov	r4, r0
    5916:	b180      	cbz	r0, 593a <send_err_rsp.part.8+0x3a>
		return;
	}

	rsp = net_buf_add(buf, sizeof(*rsp));
    5918:	2104      	movs	r1, #4
    591a:	3008      	adds	r0, #8
    591c:	f00c f976 	bl	11c0c <net_buf_simple_add>
	rsp->request = req;
    5920:	f880 8000 	strb.w	r8, [r0]
	rsp->handle = sys_cpu_to_le16(handle);
	rsp->error = err;
    5924:	70c6      	strb	r6, [r0, #3]
		return;
	}

	rsp = net_buf_add(buf, sizeof(*rsp));
	rsp->request = req;
	rsp->handle = sys_cpu_to_le16(handle);
    5926:	f8a0 7001 	strh.w	r7, [r0, #1]
	rsp->error = err;

	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent);
    592a:	4622      	mov	r2, r4
    592c:	4628      	mov	r0, r5
    592e:	4b04      	ldr	r3, [pc, #16]	; (5940 <send_err_rsp.part.8+0x40>)
    5930:	2104      	movs	r1, #4
}
    5932:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	rsp = net_buf_add(buf, sizeof(*rsp));
	rsp->request = req;
	rsp->handle = sys_cpu_to_le16(handle);
	rsp->error = err;

	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent);
    5936:	f7ff b911 	b.w	4b5c <bt_l2cap_send_cb>
    593a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    593e:	bf00      	nop
    5940:	00005647 	.word	0x00005647

00005944 <bt_att_recv>:

	return ATT_UNKNOWN;
}

static void bt_att_recv(struct bt_l2cap_chan *chan, struct net_buf *buf)
{
    5944:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_att_hdr *hdr = (void *)buf->data;
	const struct att_handler *handler;
	u8_t err;
	size_t i;

	if (buf->len < sizeof(*hdr)) {
    5946:	898b      	ldrh	r3, [r1, #12]

	return ATT_UNKNOWN;
}

static void bt_att_recv(struct bt_l2cap_chan *chan, struct net_buf *buf)
{
    5948:	b085      	sub	sp, #20
    594a:	4604      	mov	r4, r0
    594c:	460f      	mov	r7, r1
	struct bt_att_hdr *hdr = (void *)buf->data;
	const struct att_handler *handler;
	u8_t err;
	size_t i;

	if (buf->len < sizeof(*hdr)) {
    594e:	b943      	cbnz	r3, 5962 <bt_att_recv+0x1e>
		BT_ERR("Too small ATT PDU received");
    5950:	4b4c      	ldr	r3, [pc, #304]	; (5a84 <bt_att_recv+0x140>)
    5952:	9301      	str	r3, [sp, #4]
    5954:	4b4c      	ldr	r3, [pc, #304]	; (5a88 <bt_att_recv+0x144>)
    5956:	9300      	str	r3, [sp, #0]
    5958:	4a4c      	ldr	r2, [pc, #304]	; (5a8c <bt_att_recv+0x148>)
    595a:	4b4d      	ldr	r3, [pc, #308]	; (5a90 <bt_att_recv+0x14c>)
    595c:	494d      	ldr	r1, [pc, #308]	; (5a94 <bt_att_recv+0x150>)
    595e:	484e      	ldr	r0, [pc, #312]	; (5a98 <bt_att_recv+0x154>)
    5960:	e032      	b.n	59c8 <bt_att_recv+0x84>
}

static void bt_att_recv(struct bt_l2cap_chan *chan, struct net_buf *buf)
{
	struct bt_att *att = ATT_CHAN(chan);
	struct bt_att_hdr *hdr = (void *)buf->data;
    5962:	4608      	mov	r0, r1
		return;
	}

	BT_DBG("Received ATT code 0x%02x len %u", hdr->code, buf->len);

	net_buf_pull(buf, sizeof(*hdr));
    5964:	2101      	movs	r1, #1
}

static void bt_att_recv(struct bt_l2cap_chan *chan, struct net_buf *buf)
{
	struct bt_att *att = ATT_CHAN(chan);
	struct bt_att_hdr *hdr = (void *)buf->data;
    5966:	f850 5f08 	ldr.w	r5, [r0, #8]!
	BT_DBG("Received ATT code 0x%02x len %u", hdr->code, buf->len);

	net_buf_pull(buf, sizeof(*hdr));

	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
		if (hdr->code == handlers[i].op) {
    596a:	4e4c      	ldr	r6, [pc, #304]	; (5a9c <bt_att_recv+0x158>)
		return;
	}

	BT_DBG("Received ATT code 0x%02x len %u", hdr->code, buf->len);

	net_buf_pull(buf, sizeof(*hdr));
    596c:	f00c f96d 	bl	11c4a <net_buf_simple_pull>

	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
		if (hdr->code == handlers[i].op) {
    5970:	7828      	ldrb	r0, [r5, #0]

	BT_DBG("Received ATT code 0x%02x len %u", hdr->code, buf->len);

	net_buf_pull(buf, sizeof(*hdr));

	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    5972:	2200      	movs	r2, #0
		if (hdr->code == handlers[i].op) {
    5974:	f816 e032 	ldrb.w	lr, [r6, r2, lsl #3]
    5978:	4948      	ldr	r1, [pc, #288]	; (5a9c <bt_att_recv+0x158>)
    597a:	4586      	cmp	lr, r0
    597c:	ea4f 03c2 	mov.w	r3, r2, lsl #3
    5980:	468e      	mov	lr, r1
    5982:	d108      	bne.n	5996 <bt_att_recv+0x52>
		}
		return;
	}

	if (IS_ENABLED(CONFIG_BLUETOOTH_ATT_ENFORCE_FLOW)) {
		if (handler->type == ATT_REQUEST &&
    5984:	4419      	add	r1, r3
    5986:	788e      	ldrb	r6, [r1, #2]
    5988:	2e01      	cmp	r6, #1
    598a:	d120      	bne.n	59ce <bt_att_recv+0x8a>
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    598c:	f3bf 8f5f 	dmb	sy
    5990:	f104 0290 	add.w	r2, r4, #144	; 0x90
    5994:	e003      	b.n	599e <bt_att_recv+0x5a>

	BT_DBG("Received ATT code 0x%02x len %u", hdr->code, buf->len);

	net_buf_pull(buf, sizeof(*hdr));

	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    5996:	3201      	adds	r2, #1
    5998:	2a1b      	cmp	r2, #27
    599a:	d1eb      	bne.n	5974 <bt_att_recv+0x30>
    599c:	e05a      	b.n	5a54 <bt_att_recv+0x110>
    599e:	e852 1f00 	ldrex	r1, [r2]
    59a2:	f041 0001 	orr.w	r0, r1, #1
    59a6:	e842 0c00 	strex	ip, r0, [r2]
    59aa:	f1bc 0f00 	cmp.w	ip, #0
    59ae:	d1f6      	bne.n	599e <bt_att_recv+0x5a>
    59b0:	f3bf 8f5f 	dmb	sy
		}
		return;
	}

	if (IS_ENABLED(CONFIG_BLUETOOTH_ATT_ENFORCE_FLOW)) {
		if (handler->type == ATT_REQUEST &&
    59b4:	07c9      	lsls	r1, r1, #31
    59b6:	d526      	bpl.n	5a06 <bt_att_recv+0xc2>
		    atomic_test_and_set_bit(att->flags, ATT_PENDING_RSP)) {
			BT_WARN("Ignoring unexpected request");
    59b8:	4b32      	ldr	r3, [pc, #200]	; (5a84 <bt_att_recv+0x140>)
    59ba:	9301      	str	r3, [sp, #4]
    59bc:	4b38      	ldr	r3, [pc, #224]	; (5aa0 <bt_att_recv+0x15c>)
    59be:	9300      	str	r3, [sp, #0]
    59c0:	4a38      	ldr	r2, [pc, #224]	; (5aa4 <bt_att_recv+0x160>)
    59c2:	4b33      	ldr	r3, [pc, #204]	; (5a90 <bt_att_recv+0x14c>)
    59c4:	4933      	ldr	r1, [pc, #204]	; (5a94 <bt_att_recv+0x150>)
    59c6:	4838      	ldr	r0, [pc, #224]	; (5aa8 <bt_att_recv+0x164>)
    59c8:	f7fb fd5a 	bl	1480 <printk>
			return;
    59cc:	e057      	b.n	5a7e <bt_att_recv+0x13a>
		} else if (handler->type == ATT_INDICATION &&
    59ce:	2e05      	cmp	r6, #5
    59d0:	d119      	bne.n	5a06 <bt_att_recv+0xc2>
    59d2:	f3bf 8f5f 	dmb	sy
    59d6:	f104 0290 	add.w	r2, r4, #144	; 0x90
    59da:	e852 1f00 	ldrex	r1, [r2]
    59de:	f041 0002 	orr.w	r0, r1, #2
    59e2:	e842 0c00 	strex	ip, r0, [r2]
    59e6:	f1bc 0f00 	cmp.w	ip, #0
    59ea:	d1f6      	bne.n	59da <bt_att_recv+0x96>
    59ec:	f3bf 8f5f 	dmb	sy
    59f0:	078a      	lsls	r2, r1, #30
    59f2:	d508      	bpl.n	5a06 <bt_att_recv+0xc2>
			   atomic_test_and_set_bit(att->flags,
						   ATT_PENDING_CFM)) {
			BT_WARN("Ignoring unexpected indication");
    59f4:	4b23      	ldr	r3, [pc, #140]	; (5a84 <bt_att_recv+0x140>)
    59f6:	9301      	str	r3, [sp, #4]
    59f8:	4b29      	ldr	r3, [pc, #164]	; (5aa0 <bt_att_recv+0x15c>)
    59fa:	9300      	str	r3, [sp, #0]
    59fc:	4a29      	ldr	r2, [pc, #164]	; (5aa4 <bt_att_recv+0x160>)
    59fe:	4b24      	ldr	r3, [pc, #144]	; (5a90 <bt_att_recv+0x14c>)
    5a00:	4924      	ldr	r1, [pc, #144]	; (5a94 <bt_att_recv+0x150>)
    5a02:	482a      	ldr	r0, [pc, #168]	; (5aac <bt_att_recv+0x168>)
    5a04:	e7e0      	b.n	59c8 <bt_att_recv+0x84>
			return;
		}
	}

	if (buf->len < handler->expect_len) {
    5a06:	4473      	add	r3, lr
    5a08:	89ba      	ldrh	r2, [r7, #12]
    5a0a:	7859      	ldrb	r1, [r3, #1]
    5a0c:	4291      	cmp	r1, r2
    5a0e:	d910      	bls.n	5a32 <bt_att_recv+0xee>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
    5a10:	4b1c      	ldr	r3, [pc, #112]	; (5a84 <bt_att_recv+0x140>)
    5a12:	9303      	str	r3, [sp, #12]
    5a14:	782b      	ldrb	r3, [r5, #0]
    5a16:	9302      	str	r3, [sp, #8]
    5a18:	4b1b      	ldr	r3, [pc, #108]	; (5a88 <bt_att_recv+0x144>)
    5a1a:	9201      	str	r2, [sp, #4]
    5a1c:	9300      	str	r3, [sp, #0]
    5a1e:	4a1b      	ldr	r2, [pc, #108]	; (5a8c <bt_att_recv+0x148>)
    5a20:	4b1b      	ldr	r3, [pc, #108]	; (5a90 <bt_att_recv+0x14c>)
    5a22:	491c      	ldr	r1, [pc, #112]	; (5a94 <bt_att_recv+0x150>)
    5a24:	4822      	ldr	r0, [pc, #136]	; (5ab0 <bt_att_recv+0x16c>)
    5a26:	f7fb fd2b 	bl	1480 <printk>
		err = BT_ATT_ERR_INVALID_PDU;
	} else {
		err = handler->func(att, buf);
	}

	if (handler->type == ATT_REQUEST && err) {
    5a2a:	2e01      	cmp	r6, #1
    5a2c:	d127      	bne.n	5a7e <bt_att_recv+0x13a>
		}
	}

	if (buf->len < handler->expect_len) {
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
		err = BT_ATT_ERR_INVALID_PDU;
    5a2e:	2304      	movs	r3, #4
    5a30:	e007      	b.n	5a42 <bt_att_recv+0xfe>
	} else {
		err = handler->func(att, buf);
    5a32:	685b      	ldr	r3, [r3, #4]
    5a34:	4639      	mov	r1, r7
    5a36:	4620      	mov	r0, r4
    5a38:	4798      	blx	r3
	}

	if (handler->type == ATT_REQUEST && err) {
    5a3a:	2e01      	cmp	r6, #1

	if (buf->len < handler->expect_len) {
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
		err = BT_ATT_ERR_INVALID_PDU;
	} else {
		err = handler->func(att, buf);
    5a3c:	4603      	mov	r3, r0
	}

	if (handler->type == ATT_REQUEST && err) {
    5a3e:	d11e      	bne.n	5a7e <bt_att_recv+0x13a>
    5a40:	b1e8      	cbz	r0, 5a7e <bt_att_recv+0x13a>
		BT_DBG("ATT error 0x%02x", err);
		send_err_rsp(chan->conn, hdr->code, 0, err);
    5a42:	7829      	ldrb	r1, [r5, #0]
{
	struct bt_att_error_rsp *rsp;
	struct net_buf *buf;

	/* Ignore opcode 0x00 */
	if (!req) {
    5a44:	b1d9      	cbz	r1, 5a7e <bt_att_recv+0x13a>
    5a46:	2200      	movs	r2, #0
    5a48:	6820      	ldr	r0, [r4, #0]

	if (handler->type == ATT_REQUEST && err) {
		BT_DBG("ATT error 0x%02x", err);
		send_err_rsp(chan->conn, hdr->code, 0, err);
	}
}
    5a4a:	b005      	add	sp, #20
    5a4c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    5a50:	f7ff bf56 	b.w	5900 <send_err_rsp.part.8>
			break;
		}
	}

	if (!handler) {
		BT_WARN("Unknown ATT code 0x%02x", hdr->code);
    5a54:	4b0b      	ldr	r3, [pc, #44]	; (5a84 <bt_att_recv+0x140>)
    5a56:	9302      	str	r3, [sp, #8]
    5a58:	4b11      	ldr	r3, [pc, #68]	; (5aa0 <bt_att_recv+0x15c>)
    5a5a:	9001      	str	r0, [sp, #4]
    5a5c:	9300      	str	r3, [sp, #0]
    5a5e:	4a11      	ldr	r2, [pc, #68]	; (5aa4 <bt_att_recv+0x160>)
    5a60:	4b0b      	ldr	r3, [pc, #44]	; (5a90 <bt_att_recv+0x14c>)
    5a62:	490c      	ldr	r1, [pc, #48]	; (5a94 <bt_att_recv+0x150>)
    5a64:	4813      	ldr	r0, [pc, #76]	; (5ab4 <bt_att_recv+0x170>)
    5a66:	f7fb fd0b 	bl	1480 <printk>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
    5a6a:	782d      	ldrb	r5, [r5, #0]
    5a6c:	4628      	mov	r0, r5
    5a6e:	f7ff f9b3 	bl	4dd8 <att_op_get_type>
    5a72:	b120      	cbz	r0, 5a7e <bt_att_recv+0x13a>
{
	struct bt_att_error_rsp *rsp;
	struct net_buf *buf;

	/* Ignore opcode 0x00 */
	if (!req) {
    5a74:	b11d      	cbz	r5, 5a7e <bt_att_recv+0x13a>
    5a76:	2306      	movs	r3, #6
    5a78:	2200      	movs	r2, #0
    5a7a:	4629      	mov	r1, r5
    5a7c:	e7e4      	b.n	5a48 <bt_att_recv+0x104>

	if (handler->type == ATT_REQUEST && err) {
		BT_DBG("ATT error 0x%02x", err);
		send_err_rsp(chan->conn, hdr->code, 0, err);
	}
}
    5a7e:	b005      	add	sp, #20
    5a80:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5a82:	bf00      	nop
    5a84:	00013df4 	.word	0x00013df4
    5a88:	00013df9 	.word	0x00013df9
    5a8c:	00013db4 	.word	0x00013db4
    5a90:	000161ec 	.word	0x000161ec
    5a94:	00013dbb 	.word	0x00013dbb
    5a98:	000149b4 	.word	0x000149b4
    5a9c:	0001620c 	.word	0x0001620c
    5aa0:	00013e3f 	.word	0x00013e3f
    5aa4:	00013e01 	.word	0x00013e01
    5aa8:	000149df 	.word	0x000149df
    5aac:	00014a0b 	.word	0x00014a0b
    5ab0:	00014a3a 	.word	0x00014a3a
    5ab4:	00014a69 	.word	0x00014a69

00005ab8 <att_read_group_req>:

	return 0;
}

static u8_t att_read_group_req(struct bt_att *att, struct net_buf *buf)
{
    5ab8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
		struct bt_uuid_16 u16;
		struct bt_uuid_128 u128;
	} u;

	/* Type can only be UUID16 or UUID128 */
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    5abc:	898b      	ldrh	r3, [r1, #12]
    5abe:	2b06      	cmp	r3, #6

	return 0;
}

static u8_t att_read_group_req(struct bt_att *att, struct net_buf *buf)
{
    5ac0:	b08d      	sub	sp, #52	; 0x34
    5ac2:	4680      	mov	r8, r0
    5ac4:	460c      	mov	r4, r1
		struct bt_uuid_16 u16;
		struct bt_uuid_128 u128;
	} u;

	/* Type can only be UUID16 or UUID128 */
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    5ac6:	d001      	beq.n	5acc <att_read_group_req+0x14>
    5ac8:	2b14      	cmp	r3, #20
    5aca:	d115      	bne.n	5af8 <att_read_group_req+0x40>
		return BT_ATT_ERR_INVALID_PDU;
	}

	req = (void *)buf->data;
    5acc:	4620      	mov	r0, r4

	start_handle = sys_le16_to_cpu(req->start_handle);
	end_handle = sys_le16_to_cpu(req->end_handle);
	net_buf_pull(buf, sizeof(*req));
    5ace:	2104      	movs	r1, #4
	/* Type can only be UUID16 or UUID128 */
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
		return BT_ATT_ERR_INVALID_PDU;
	}

	req = (void *)buf->data;
    5ad0:	f850 3f08 	ldr.w	r3, [r0, #8]!
	return 0;
}

static u8_t att_read_group_req(struct bt_att *att, struct net_buf *buf)
{
	struct bt_conn *conn = att->chan.chan.conn;
    5ad4:	f8d8 9000 	ldr.w	r9, [r8]
		return BT_ATT_ERR_INVALID_PDU;
	}

	req = (void *)buf->data;

	start_handle = sys_le16_to_cpu(req->start_handle);
    5ad8:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    5ada:	885e      	ldrh	r6, [r3, #2]
	net_buf_pull(buf, sizeof(*req));

	if (!uuid_create(&u.uuid, buf)) {
    5adc:	af02      	add	r7, sp, #8

	req = (void *)buf->data;

	start_handle = sys_le16_to_cpu(req->start_handle);
	end_handle = sys_le16_to_cpu(req->end_handle);
	net_buf_pull(buf, sizeof(*req));
    5ade:	f00c f8b4 	bl	11c4a <net_buf_simple_pull>

	if (!uuid_create(&u.uuid, buf)) {
    5ae2:	4621      	mov	r1, r4
    5ae4:	4638      	mov	r0, r7
    5ae6:	f7ff fb63 	bl	51b0 <uuid_create>
    5aea:	b300      	cbz	r0, 5b2e <att_read_group_req+0x76>
}

static bool range_is_valid(u16_t start, u16_t end, u16_t *err)
{
	/* Handle 0 is invalid */
	if (!start || !end) {
    5aec:	b315      	cbz	r5, 5b34 <att_read_group_req+0x7c>
    5aee:	2400      	movs	r4, #0
    5af0:	b1fe      	cbz	r6, 5b32 <att_read_group_req+0x7a>
		}
		return false;
	}

	/* Check if range is valid */
	if (start > end) {
    5af2:	42b5      	cmp	r5, r6
    5af4:	d81e      	bhi.n	5b34 <att_read_group_req+0x7c>
    5af6:	e001      	b.n	5afc <att_read_group_req+0x44>
		struct bt_uuid_128 u128;
	} u;

	/* Type can only be UUID16 or UUID128 */
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
		return BT_ATT_ERR_INVALID_PDU;
    5af8:	2404      	movs	r4, #4
    5afa:	e058      	b.n	5bae <att_read_group_req+0xf6>
	 * Read By Group Type Request. The "Primary Service" and "Secondary
	 * Service" grouping types may be used in the Read By Group Type
	 * Request. The "Characteristic" grouping type shall not be used in
	 * the ATT Read By Group Type Request.
	 */
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    5afc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    5b00:	4669      	mov	r1, sp
    5b02:	4638      	mov	r0, r7
    5b04:	f88d 4000 	strb.w	r4, [sp]
    5b08:	f8ad 3002 	strh.w	r3, [sp, #2]
    5b0c:	f7fc f9e8 	bl	1ee0 <bt_uuid_cmp>
    5b10:	b9c0      	cbnz	r0, 5b44 <att_read_group_req+0x8c>
}

static u8_t att_read_group_rsp(struct bt_att *att, struct bt_uuid *uuid,
			       u16_t start_handle, u16_t end_handle)
{
	struct bt_conn *conn = att->chan.chan.conn;
    5b12:	f8d8 9000 	ldr.w	r9, [r8]
	struct read_group_data data;

	memset(&data, 0, sizeof(data));
    5b16:	2214      	movs	r2, #20
    5b18:	2100      	movs	r1, #0
    5b1a:	a807      	add	r0, sp, #28
    5b1c:	f7fb fae5 	bl	10ea <memset>

	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
    5b20:	2201      	movs	r2, #1
    5b22:	2111      	movs	r1, #17
    5b24:	4648      	mov	r0, r9
    5b26:	f7ff fe71 	bl	580c <bt_att_create_pdu>
    5b2a:	9009      	str	r0, [sp, #36]	; 0x24
				     sizeof(*data.rsp));
	if (!data.buf) {
    5b2c:	b9d0      	cbnz	r0, 5b64 <att_read_group_req+0xac>
	start_handle = sys_le16_to_cpu(req->start_handle);
	end_handle = sys_le16_to_cpu(req->end_handle);
	net_buf_pull(buf, sizeof(*req));

	if (!uuid_create(&u.uuid, buf)) {
		return BT_ATT_ERR_UNLIKELY;
    5b2e:	240e      	movs	r4, #14
    5b30:	e03d      	b.n	5bae <att_read_group_req+0xf6>
static bool range_is_valid(u16_t start, u16_t end, u16_t *err)
{
	/* Handle 0 is invalid */
	if (!start || !end) {
		if (err) {
			*err = 0;
    5b32:	4635      	mov	r5, r6
    5b34:	2301      	movs	r3, #1
    5b36:	462a      	mov	r2, r5
    5b38:	2110      	movs	r1, #16
    5b3a:	4648      	mov	r0, r9
    5b3c:	f7ff fee0 	bl	5900 <send_err_rsp.part.8>
	       start_handle, end_handle, bt_uuid_str(&u.uuid));

	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
		send_err_rsp(conn, BT_ATT_OP_READ_GROUP_REQ, err_handle,
			     BT_ATT_ERR_INVALID_HANDLE);
		return 0;
    5b40:	2400      	movs	r4, #0
    5b42:	e034      	b.n	5bae <att_read_group_req+0xf6>
	 * Service" grouping types may be used in the Read By Group Type
	 * Request. The "Characteristic" grouping type shall not be used in
	 * the ATT Read By Group Type Request.
	 */
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
    5b44:	f642 0301 	movw	r3, #10241	; 0x2801
    5b48:	a901      	add	r1, sp, #4
    5b4a:	4638      	mov	r0, r7
    5b4c:	f88d 4004 	strb.w	r4, [sp, #4]
    5b50:	f8ad 3006 	strh.w	r3, [sp, #6]
    5b54:	f7fc f9c4 	bl	1ee0 <bt_uuid_cmp>
	 * Read By Group Type Request. The "Primary Service" and "Secondary
	 * Service" grouping types may be used in the Read By Group Type
	 * Request. The "Characteristic" grouping type shall not be used in
	 * the ATT Read By Group Type Request.
	 */
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    5b58:	2800      	cmp	r0, #0
    5b5a:	d0da      	beq.n	5b12 <att_read_group_req+0x5a>
    5b5c:	2310      	movs	r3, #16
    5b5e:	462a      	mov	r2, r5
    5b60:	4619      	mov	r1, r3
    5b62:	e019      	b.n	5b98 <att_read_group_req+0xe0>
		return BT_ATT_ERR_UNLIKELY;
	}

	data.att = att;
	data.uuid = uuid;
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    5b64:	2101      	movs	r1, #1
    5b66:	3008      	adds	r0, #8
	if (!data.buf) {
		return BT_ATT_ERR_UNLIKELY;
	}

	data.att = att;
	data.uuid = uuid;
    5b68:	9708      	str	r7, [sp, #32]
				     sizeof(*data.rsp));
	if (!data.buf) {
		return BT_ATT_ERR_UNLIKELY;
	}

	data.att = att;
    5b6a:	f8cd 801c 	str.w	r8, [sp, #28]
	data.uuid = uuid;
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    5b6e:	f00c f84d 	bl	11c0c <net_buf_simple_add>
	data.rsp->len = 0;
    5b72:	2700      	movs	r7, #0
		return BT_ATT_ERR_UNLIKELY;
	}

	data.att = att;
	data.uuid = uuid;
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    5b74:	900a      	str	r0, [sp, #40]	; 0x28
	data.rsp->len = 0;
	data.group = NULL;

	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    5b76:	ab07      	add	r3, sp, #28
	}

	data.att = att;
	data.uuid = uuid;
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
	data.rsp->len = 0;
    5b78:	7007      	strb	r7, [r0, #0]
	data.group = NULL;

	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    5b7a:	4a0f      	ldr	r2, [pc, #60]	; (5bb8 <att_read_group_req+0x100>)

	data.att = att;
	data.uuid = uuid;
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
	data.rsp->len = 0;
	data.group = NULL;
    5b7c:	970b      	str	r7, [sp, #44]	; 0x2c

	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    5b7e:	4631      	mov	r1, r6
    5b80:	4628      	mov	r0, r5
    5b82:	f000 fddb 	bl	673c <bt_gatt_foreach_attr>

	if (!data.rsp->len) {
    5b86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    5b88:	781c      	ldrb	r4, [r3, #0]
    5b8a:	b94c      	cbnz	r4, 5ba0 <att_read_group_req+0xe8>
		net_buf_unref(data.buf);
    5b8c:	9809      	ldr	r0, [sp, #36]	; 0x24
    5b8e:	f00c f81d 	bl	11bcc <net_buf_unref>
    5b92:	230a      	movs	r3, #10
    5b94:	462a      	mov	r2, r5
    5b96:	2110      	movs	r1, #16
    5b98:	4648      	mov	r0, r9
    5b9a:	f7ff feb1 	bl	5900 <send_err_rsp.part.8>
    5b9e:	e006      	b.n	5bae <att_read_group_req+0xf6>
		send_err_rsp(conn, BT_ATT_OP_READ_GROUP_REQ, start_handle,
			     BT_ATT_ERR_ATTRIBUTE_NOT_FOUND);
		return 0;
	}

	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    5ba0:	4b06      	ldr	r3, [pc, #24]	; (5bbc <att_read_group_req+0x104>)
    5ba2:	9a09      	ldr	r2, [sp, #36]	; 0x24
    5ba4:	2104      	movs	r1, #4
    5ba6:	4648      	mov	r0, r9
    5ba8:	f7fe ffd8 	bl	4b5c <bt_l2cap_send_cb>

	return 0;
    5bac:	463c      	mov	r4, r7
			     BT_ATT_ERR_UNSUPPORTED_GROUP_TYPE);
		return 0;
	}

	return att_read_group_rsp(att, &u.uuid, start_handle, end_handle);
}
    5bae:	4620      	mov	r0, r4
    5bb0:	b00d      	add	sp, #52	; 0x34
    5bb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    5bb6:	bf00      	nop
    5bb8:	00004e39 	.word	0x00004e39
    5bbc:	00005647 	.word	0x00005647

00005bc0 <att_read_mult_req>:
	return att_read_rsp(att, BT_ATT_OP_READ_BLOB_REQ,
			    BT_ATT_OP_READ_BLOB_RSP, handle, offset);
}

static u8_t att_read_mult_req(struct bt_att *att, struct net_buf *buf)
{
    5bc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    5bc4:	6804      	ldr	r4, [r0, #0]
	return att_read_rsp(att, BT_ATT_OP_READ_BLOB_REQ,
			    BT_ATT_OP_READ_BLOB_RSP, handle, offset);
}

static u8_t att_read_mult_req(struct bt_att *att, struct net_buf *buf)
{
    5bc6:	b086      	sub	sp, #24
	struct bt_conn *conn = att->chan.chan.conn;
	struct read_data data;
	u16_t handle;

	memset(&data, 0, sizeof(data));
    5bc8:	2214      	movs	r2, #20
	return att_read_rsp(att, BT_ATT_OP_READ_BLOB_REQ,
			    BT_ATT_OP_READ_BLOB_RSP, handle, offset);
}

static u8_t att_read_mult_req(struct bt_att *att, struct net_buf *buf)
{
    5bca:	4606      	mov	r6, r0
    5bcc:	460d      	mov	r5, r1
	struct bt_conn *conn = att->chan.chan.conn;
	struct read_data data;
	u16_t handle;

	memset(&data, 0, sizeof(data));
    5bce:	a801      	add	r0, sp, #4
    5bd0:	2100      	movs	r1, #0
    5bd2:	f7fb fa8a 	bl	10ea <memset>

	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
    5bd6:	2200      	movs	r2, #0
    5bd8:	210f      	movs	r1, #15
    5bda:	4620      	mov	r0, r4
    5bdc:	f7ff fe16 	bl	580c <bt_att_create_pdu>
    5be0:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    5be2:	b348      	cbz	r0, 5c38 <att_read_mult_req+0x78>
		return BT_ATT_ERR_UNLIKELY;
	}

	data.att = att;
    5be4:	9601      	str	r6, [sp, #4]

	while (buf->len >= sizeof(u16_t)) {
		handle = net_buf_pull_le16(buf);
    5be6:	f105 0708 	add.w	r7, r5, #8
		 * permitted on any of the Characteristic Values.
		 *
		 * If handle is not valid then return invalid handle error.
		 * If handle is found error will be cleared by read_cb.
		 */
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    5bea:	f04f 0801 	mov.w	r8, #1
		return BT_ATT_ERR_UNLIKELY;
	}

	data.att = att;

	while (buf->len >= sizeof(u16_t)) {
    5bee:	89ab      	ldrh	r3, [r5, #12]
    5bf0:	2b01      	cmp	r3, #1
    5bf2:	d919      	bls.n	5c28 <att_read_mult_req+0x68>
		handle = net_buf_pull_le16(buf);
    5bf4:	4638      	mov	r0, r7
    5bf6:	f00c f838 	bl	11c6a <net_buf_simple_pull_le16>
		 * If handle is not valid then return invalid handle error.
		 * If handle is found error will be cleared by read_cb.
		 */
		data.err = BT_ATT_ERR_INVALID_HANDLE;

		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    5bfa:	ab01      	add	r3, sp, #4
    5bfc:	4a10      	ldr	r2, [pc, #64]	; (5c40 <att_read_mult_req+0x80>)
		 * permitted on any of the Characteristic Values.
		 *
		 * If handle is not valid then return invalid handle error.
		 * If handle is found error will be cleared by read_cb.
		 */
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    5bfe:	f88d 8014 	strb.w	r8, [sp, #20]

		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    5c02:	4601      	mov	r1, r0
	}

	data.att = att;

	while (buf->len >= sizeof(u16_t)) {
		handle = net_buf_pull_le16(buf);
    5c04:	4606      	mov	r6, r0
		 * If handle is not valid then return invalid handle error.
		 * If handle is found error will be cleared by read_cb.
		 */
		data.err = BT_ATT_ERR_INVALID_HANDLE;

		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    5c06:	f000 fd99 	bl	673c <bt_gatt_foreach_attr>

		/* Stop reading in case of error */
		if (data.err) {
    5c0a:	f89d 3014 	ldrb.w	r3, [sp, #20]
    5c0e:	2b00      	cmp	r3, #0
    5c10:	d0ed      	beq.n	5bee <att_read_mult_req+0x2e>
			net_buf_unref(data.buf);
    5c12:	9803      	ldr	r0, [sp, #12]
    5c14:	f00b ffda 	bl	11bcc <net_buf_unref>
    5c18:	f89d 3014 	ldrb.w	r3, [sp, #20]
    5c1c:	4632      	mov	r2, r6
    5c1e:	210e      	movs	r1, #14
    5c20:	4620      	mov	r0, r4
    5c22:	f7ff fe6d 	bl	5900 <send_err_rsp.part.8>
    5c26:	e005      	b.n	5c34 <att_read_mult_req+0x74>
				     data.err);
			return 0;
		}
	}

	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    5c28:	4b06      	ldr	r3, [pc, #24]	; (5c44 <att_read_mult_req+0x84>)
    5c2a:	9a03      	ldr	r2, [sp, #12]
    5c2c:	2104      	movs	r1, #4
    5c2e:	4620      	mov	r0, r4
    5c30:	f7fe ff94 	bl	4b5c <bt_l2cap_send_cb>

	return 0;
    5c34:	2000      	movs	r0, #0
    5c36:	e000      	b.n	5c3a <att_read_mult_req+0x7a>

	memset(&data, 0, sizeof(data));

	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
	if (!data.buf) {
		return BT_ATT_ERR_UNLIKELY;
    5c38:	200e      	movs	r0, #14
	}

	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);

	return 0;
}
    5c3a:	b006      	add	sp, #24
    5c3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5c40:	00005793 	.word	0x00005793
    5c44:	00005647 	.word	0x00005647

00005c48 <att_read_rsp>:
	return BT_GATT_ITER_CONTINUE;
}

static u8_t att_read_rsp(struct bt_att *att, u8_t op, u8_t rsp, u16_t handle,
			 u16_t offset)
{
    5c48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5c4c:	4604      	mov	r4, r0
    5c4e:	b086      	sub	sp, #24
    5c50:	460e      	mov	r6, r1
    5c52:	4690      	mov	r8, r2
	struct bt_conn *conn = att->chan.chan.conn;
	struct read_data data;

	if (!handle) {
    5c54:	461d      	mov	r5, r3
    5c56:	b38b      	cbz	r3, 5cbc <att_read_rsp+0x74>
}

static u8_t att_read_rsp(struct bt_att *att, u8_t op, u8_t rsp, u16_t handle,
			 u16_t offset)
{
	struct bt_conn *conn = att->chan.chan.conn;
    5c58:	6807      	ldr	r7, [r0, #0]

	if (!handle) {
		return BT_ATT_ERR_INVALID_HANDLE;
	}

	memset(&data, 0, sizeof(data));
    5c5a:	2214      	movs	r2, #20
    5c5c:	2100      	movs	r1, #0
    5c5e:	a801      	add	r0, sp, #4
    5c60:	f7fb fa43 	bl	10ea <memset>

	data.buf = bt_att_create_pdu(conn, rsp, 0);
    5c64:	2200      	movs	r2, #0
    5c66:	4641      	mov	r1, r8
    5c68:	4638      	mov	r0, r7
    5c6a:	f7ff fdcf 	bl	580c <bt_att_create_pdu>
    5c6e:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    5c70:	b330      	cbz	r0, 5cc0 <att_read_rsp+0x78>
		return BT_ATT_ERR_UNLIKELY;
	}

	data.att = att;
	data.offset = offset;
    5c72:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    5c76:	f8ad 3008 	strh.w	r3, [sp, #8]

	/* Pre-set error if no attr will be found in handle */
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    5c7a:	2301      	movs	r3, #1
    5c7c:	f88d 3014 	strb.w	r3, [sp, #20]

	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    5c80:	4a13      	ldr	r2, [pc, #76]	; (5cd0 <att_read_rsp+0x88>)
	data.buf = bt_att_create_pdu(conn, rsp, 0);
	if (!data.buf) {
		return BT_ATT_ERR_UNLIKELY;
	}

	data.att = att;
    5c82:	9401      	str	r4, [sp, #4]
	data.offset = offset;

	/* Pre-set error if no attr will be found in handle */
	data.err = BT_ATT_ERR_INVALID_HANDLE;

	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    5c84:	ab01      	add	r3, sp, #4
    5c86:	4629      	mov	r1, r5
    5c88:	4628      	mov	r0, r5
    5c8a:	f000 fd57 	bl	673c <bt_gatt_foreach_attr>

	/* In case of error discard data and respond with an error */
	if (data.err) {
    5c8e:	f89d 4014 	ldrb.w	r4, [sp, #20]
    5c92:	b164      	cbz	r4, 5cae <att_read_rsp+0x66>
		net_buf_unref(data.buf);
    5c94:	9803      	ldr	r0, [sp, #12]
    5c96:	f00b ff99 	bl	11bcc <net_buf_unref>
{
	struct bt_att_error_rsp *rsp;
	struct net_buf *buf;

	/* Ignore opcode 0x00 */
	if (!req) {
    5c9a:	b19e      	cbz	r6, 5cc4 <att_read_rsp+0x7c>
    5c9c:	f89d 3014 	ldrb.w	r3, [sp, #20]
    5ca0:	462a      	mov	r2, r5
    5ca2:	4631      	mov	r1, r6
    5ca4:	4638      	mov	r0, r7
    5ca6:	f7ff fe2b 	bl	5900 <send_err_rsp.part.8>
	/* In case of error discard data and respond with an error */
	if (data.err) {
		net_buf_unref(data.buf);
		/* Respond here since handle is set */
		send_err_rsp(conn, op, handle, data.err);
		return 0;
    5caa:	2400      	movs	r4, #0
    5cac:	e00b      	b.n	5cc6 <att_read_rsp+0x7e>
	}

	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    5cae:	4b09      	ldr	r3, [pc, #36]	; (5cd4 <att_read_rsp+0x8c>)
    5cb0:	9a03      	ldr	r2, [sp, #12]
    5cb2:	2104      	movs	r1, #4
    5cb4:	4638      	mov	r0, r7
    5cb6:	f7fe ff51 	bl	4b5c <bt_l2cap_send_cb>

	return 0;
    5cba:	e004      	b.n	5cc6 <att_read_rsp+0x7e>
{
	struct bt_conn *conn = att->chan.chan.conn;
	struct read_data data;

	if (!handle) {
		return BT_ATT_ERR_INVALID_HANDLE;
    5cbc:	2401      	movs	r4, #1
    5cbe:	e002      	b.n	5cc6 <att_read_rsp+0x7e>

	memset(&data, 0, sizeof(data));

	data.buf = bt_att_create_pdu(conn, rsp, 0);
	if (!data.buf) {
		return BT_ATT_ERR_UNLIKELY;
    5cc0:	240e      	movs	r4, #14
    5cc2:	e000      	b.n	5cc6 <att_read_rsp+0x7e>
	/* In case of error discard data and respond with an error */
	if (data.err) {
		net_buf_unref(data.buf);
		/* Respond here since handle is set */
		send_err_rsp(conn, op, handle, data.err);
		return 0;
    5cc4:	4634      	mov	r4, r6
	}

	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);

	return 0;
}
    5cc6:	4620      	mov	r0, r4
    5cc8:	b006      	add	sp, #24
    5cca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5cce:	bf00      	nop
    5cd0:	00005793 	.word	0x00005793
    5cd4:	00005647 	.word	0x00005647

00005cd8 <att_read_blob_req>:
	return att_read_rsp(att, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
			    handle, 0);
}

static u8_t att_read_blob_req(struct bt_att *att, struct net_buf *buf)
{
    5cd8:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_read_blob_req *req;
	u16_t handle, offset;

	req = (void *)buf->data;
    5cda:	688a      	ldr	r2, [r1, #8]
	handle = sys_le16_to_cpu(req->handle);
	offset = sys_le16_to_cpu(req->offset);

	BT_DBG("handle 0x%04x offset %u", handle, offset);

	return att_read_rsp(att, BT_ATT_OP_READ_BLOB_REQ,
    5cdc:	8813      	ldrh	r3, [r2, #0]
    5cde:	8852      	ldrh	r2, [r2, #2]
    5ce0:	9200      	str	r2, [sp, #0]
    5ce2:	210c      	movs	r1, #12
    5ce4:	220d      	movs	r2, #13
    5ce6:	f7ff ffaf 	bl	5c48 <att_read_rsp>
			    BT_ATT_OP_READ_BLOB_RSP, handle, offset);
}
    5cea:	b003      	add	sp, #12
    5cec:	f85d fb04 	ldr.w	pc, [sp], #4

00005cf0 <att_read_req>:

	return 0;
}

static u8_t att_read_req(struct bt_att *att, struct net_buf *buf)
{
    5cf0:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_read_req *req;
	u16_t handle;

	req = (void *)buf->data;

	handle = sys_le16_to_cpu(req->handle);
    5cf2:	688b      	ldr	r3, [r1, #8]

	BT_DBG("handle 0x%04x", handle);

	return att_read_rsp(att, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
    5cf4:	2200      	movs	r2, #0
    5cf6:	881b      	ldrh	r3, [r3, #0]
    5cf8:	9200      	str	r2, [sp, #0]
    5cfa:	210a      	movs	r1, #10
    5cfc:	220b      	movs	r2, #11
    5cfe:	f7ff ffa3 	bl	5c48 <att_read_rsp>
			    handle, 0);
}
    5d02:	b003      	add	sp, #12
    5d04:	f85d fb04 	ldr.w	pc, [sp], #4

00005d08 <att_read_type_req>:

	return 0;
}

static u8_t att_read_type_req(struct bt_att *att, struct net_buf *buf)
{
    5d08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
		struct bt_uuid_16 u16;
		struct bt_uuid_128 u128;
	} u;

	/* Type can only be UUID16 or UUID128 */
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    5d0c:	898b      	ldrh	r3, [r1, #12]
    5d0e:	2b06      	cmp	r3, #6

	return 0;
}

static u8_t att_read_type_req(struct bt_att *att, struct net_buf *buf)
{
    5d10:	b08d      	sub	sp, #52	; 0x34
    5d12:	4607      	mov	r7, r0
    5d14:	460e      	mov	r6, r1
		struct bt_uuid_16 u16;
		struct bt_uuid_128 u128;
	} u;

	/* Type can only be UUID16 or UUID128 */
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    5d16:	d001      	beq.n	5d1c <att_read_type_req+0x14>
    5d18:	2b14      	cmp	r3, #20
    5d1a:	d115      	bne.n	5d48 <att_read_type_req+0x40>
		return BT_ATT_ERR_INVALID_PDU;
	}

	req = (void *)buf->data;
    5d1c:	4630      	mov	r0, r6

	start_handle = sys_le16_to_cpu(req->start_handle);
	end_handle = sys_le16_to_cpu(req->end_handle);
	net_buf_pull(buf, sizeof(*req));
    5d1e:	2104      	movs	r1, #4
	/* Type can only be UUID16 or UUID128 */
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
		return BT_ATT_ERR_INVALID_PDU;
	}

	req = (void *)buf->data;
    5d20:	f850 3f08 	ldr.w	r3, [r0, #8]!
	return 0;
}

static u8_t att_read_type_req(struct bt_att *att, struct net_buf *buf)
{
	struct bt_conn *conn = att->chan.chan.conn;
    5d24:	f8d7 9000 	ldr.w	r9, [r7]
		return BT_ATT_ERR_INVALID_PDU;
	}

	req = (void *)buf->data;

	start_handle = sys_le16_to_cpu(req->start_handle);
    5d28:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    5d2a:	885c      	ldrh	r4, [r3, #2]
	net_buf_pull(buf, sizeof(*req));

	if (!uuid_create(&u.uuid, buf)) {
    5d2c:	f10d 0804 	add.w	r8, sp, #4

	req = (void *)buf->data;

	start_handle = sys_le16_to_cpu(req->start_handle);
	end_handle = sys_le16_to_cpu(req->end_handle);
	net_buf_pull(buf, sizeof(*req));
    5d30:	f00b ff8b 	bl	11c4a <net_buf_simple_pull>

	if (!uuid_create(&u.uuid, buf)) {
    5d34:	4631      	mov	r1, r6
    5d36:	4640      	mov	r0, r8
    5d38:	f7ff fa3a 	bl	51b0 <uuid_create>
    5d3c:	b1a0      	cbz	r0, 5d68 <att_read_type_req+0x60>
}

static bool range_is_valid(u16_t start, u16_t end, u16_t *err)
{
	/* Handle 0 is invalid */
	if (!start || !end) {
    5d3e:	b1b5      	cbz	r5, 5d6e <att_read_type_req+0x66>
    5d40:	b1a4      	cbz	r4, 5d6c <att_read_type_req+0x64>
		}
		return false;
	}

	/* Check if range is valid */
	if (start > end) {
    5d42:	42a5      	cmp	r5, r4
    5d44:	d813      	bhi.n	5d6e <att_read_type_req+0x66>
    5d46:	e001      	b.n	5d4c <att_read_type_req+0x44>
		struct bt_uuid_128 u128;
	} u;

	/* Type can only be UUID16 or UUID128 */
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
		return BT_ATT_ERR_INVALID_PDU;
    5d48:	2404      	movs	r4, #4
    5d4a:	e040      	b.n	5dce <att_read_type_req+0xc6>
			      u16_t start_handle, u16_t end_handle)
{
	struct bt_conn *conn = att->chan.chan.conn;
	struct read_type_data data;

	memset(&data, 0, sizeof(data));
    5d4c:	2218      	movs	r2, #24
}

static u8_t att_read_type_rsp(struct bt_att *att, struct bt_uuid *uuid,
			      u16_t start_handle, u16_t end_handle)
{
	struct bt_conn *conn = att->chan.chan.conn;
    5d4e:	683e      	ldr	r6, [r7, #0]
	struct read_type_data data;

	memset(&data, 0, sizeof(data));
    5d50:	2100      	movs	r1, #0
    5d52:	eb0d 0002 	add.w	r0, sp, r2
    5d56:	f7fb f9c8 	bl	10ea <memset>

	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
    5d5a:	2201      	movs	r2, #1
    5d5c:	2109      	movs	r1, #9
    5d5e:	4630      	mov	r0, r6
    5d60:	f7ff fd54 	bl	580c <bt_att_create_pdu>
    5d64:	9008      	str	r0, [sp, #32]
				     sizeof(*data.rsp));
	if (!data.buf) {
    5d66:	b950      	cbnz	r0, 5d7e <att_read_type_req+0x76>
	start_handle = sys_le16_to_cpu(req->start_handle);
	end_handle = sys_le16_to_cpu(req->end_handle);
	net_buf_pull(buf, sizeof(*req));

	if (!uuid_create(&u.uuid, buf)) {
		return BT_ATT_ERR_UNLIKELY;
    5d68:	240e      	movs	r4, #14
    5d6a:	e030      	b.n	5dce <att_read_type_req+0xc6>
static bool range_is_valid(u16_t start, u16_t end, u16_t *err)
{
	/* Handle 0 is invalid */
	if (!start || !end) {
		if (err) {
			*err = 0;
    5d6c:	4625      	mov	r5, r4
    5d6e:	2301      	movs	r3, #1
    5d70:	462a      	mov	r2, r5
    5d72:	2108      	movs	r1, #8
    5d74:	4648      	mov	r0, r9
    5d76:	f7ff fdc3 	bl	5900 <send_err_rsp.part.8>
	       start_handle, end_handle, bt_uuid_str(&u.uuid));

	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
		send_err_rsp(conn, BT_ATT_OP_READ_TYPE_REQ, err_handle,
			     BT_ATT_ERR_INVALID_HANDLE);
		return 0;
    5d7a:	2400      	movs	r4, #0
    5d7c:	e027      	b.n	5dce <att_read_type_req+0xc6>
		return BT_ATT_ERR_UNLIKELY;
	}

	data.att = att;
	data.uuid = uuid;
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    5d7e:	2101      	movs	r1, #1
    5d80:	3008      	adds	r0, #8
				     sizeof(*data.rsp));
	if (!data.buf) {
		return BT_ATT_ERR_UNLIKELY;
	}

	data.att = att;
    5d82:	9706      	str	r7, [sp, #24]
	data.uuid = uuid;
    5d84:	f8cd 801c 	str.w	r8, [sp, #28]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    5d88:	f00b ff40 	bl	11c0c <net_buf_simple_add>
	data.rsp->len = 0;
    5d8c:	2700      	movs	r7, #0

	/* Pre-set error if no attr will be found in handle */
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    5d8e:	230a      	movs	r3, #10
		return BT_ATT_ERR_UNLIKELY;
	}

	data.att = att;
	data.uuid = uuid;
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    5d90:	9009      	str	r0, [sp, #36]	; 0x24
	data.rsp->len = 0;

	/* Pre-set error if no attr will be found in handle */
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;

	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    5d92:	4621      	mov	r1, r4
	}

	data.att = att;
	data.uuid = uuid;
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
	data.rsp->len = 0;
    5d94:	7007      	strb	r7, [r0, #0]

	/* Pre-set error if no attr will be found in handle */
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;

	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    5d96:	4a10      	ldr	r2, [pc, #64]	; (5dd8 <att_read_type_req+0xd0>)
	data.uuid = uuid;
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
	data.rsp->len = 0;

	/* Pre-set error if no attr will be found in handle */
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    5d98:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c

	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    5d9c:	4628      	mov	r0, r5
    5d9e:	ab06      	add	r3, sp, #24
    5da0:	f000 fccc 	bl	673c <bt_gatt_foreach_attr>

	if (data.err) {
    5da4:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
    5da8:	b15c      	cbz	r4, 5dc2 <att_read_type_req+0xba>
		net_buf_unref(data.buf);
    5daa:	9808      	ldr	r0, [sp, #32]
    5dac:	f00b ff0e 	bl	11bcc <net_buf_unref>
    5db0:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    5db4:	462a      	mov	r2, r5
    5db6:	2108      	movs	r1, #8
    5db8:	4630      	mov	r0, r6
    5dba:	f7ff fda1 	bl	5900 <send_err_rsp.part.8>
		/* Response here since handle is set */
		send_err_rsp(conn, BT_ATT_OP_READ_TYPE_REQ, start_handle,
			     data.err);
		return 0;
    5dbe:	463c      	mov	r4, r7
    5dc0:	e005      	b.n	5dce <att_read_type_req+0xc6>
	}

	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    5dc2:	4b06      	ldr	r3, [pc, #24]	; (5ddc <att_read_type_req+0xd4>)
    5dc4:	9a08      	ldr	r2, [sp, #32]
    5dc6:	2104      	movs	r1, #4
    5dc8:	4630      	mov	r0, r6
    5dca:	f7fe fec7 	bl	4b5c <bt_l2cap_send_cb>
			     BT_ATT_ERR_INVALID_HANDLE);
		return 0;
	}

	return att_read_type_rsp(att, &u.uuid, start_handle, end_handle);
}
    5dce:	4620      	mov	r0, r4
    5dd0:	b00d      	add	sp, #52	; 0x34
    5dd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    5dd6:	bf00      	nop
    5dd8:	000050c9 	.word	0x000050c9
    5ddc:	00005647 	.word	0x00005647

00005de0 <att_find_type_req>:

	return 0;
}

static u8_t att_find_type_req(struct bt_att *att, struct net_buf *buf)
{
    5de0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    5de4:	f8d0 8000 	ldr.w	r8, [r0]

	return 0;
}

static u8_t att_find_type_req(struct bt_att *att, struct net_buf *buf)
{
    5de8:	4606      	mov	r6, r0
	struct bt_conn *conn = att->chan.chan.conn;
	struct bt_att_find_type_req *req;
	u16_t start_handle, end_handle, err_handle, type;
	u8_t *value;

	req = (void *)buf->data;
    5dea:	4608      	mov	r0, r1

	return 0;
}

static u8_t att_find_type_req(struct bt_att *att, struct net_buf *buf)
{
    5dec:	b086      	sub	sp, #24
	struct bt_conn *conn = att->chan.chan.conn;
	struct bt_att_find_type_req *req;
	u16_t start_handle, end_handle, err_handle, type;
	u8_t *value;

	req = (void *)buf->data;
    5dee:	f850 3f08 	ldr.w	r3, [r0, #8]!

	return 0;
}

static u8_t att_find_type_req(struct bt_att *att, struct net_buf *buf)
{
    5df2:	460f      	mov	r7, r1
	req = (void *)buf->data;

	start_handle = sys_le16_to_cpu(req->start_handle);
	end_handle = sys_le16_to_cpu(req->end_handle);
	type = sys_le16_to_cpu(req->type);
	value = net_buf_pull(buf, sizeof(*req));
    5df4:	2106      	movs	r1, #6
	u16_t start_handle, end_handle, err_handle, type;
	u8_t *value;

	req = (void *)buf->data;

	start_handle = sys_le16_to_cpu(req->start_handle);
    5df6:	881c      	ldrh	r4, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    5df8:	885d      	ldrh	r5, [r3, #2]
	type = sys_le16_to_cpu(req->type);
    5dfa:	f8b3 a004 	ldrh.w	sl, [r3, #4]
	value = net_buf_pull(buf, sizeof(*req));
    5dfe:	f00b ff24 	bl	11c4a <net_buf_simple_pull>
    5e02:	4681      	mov	r9, r0
}

static bool range_is_valid(u16_t start, u16_t end, u16_t *err)
{
	/* Handle 0 is invalid */
	if (!start || !end) {
    5e04:	b124      	cbz	r4, 5e10 <att_find_type_req+0x30>
    5e06:	b115      	cbz	r5, 5e0e <att_find_type_req+0x2e>
		}
		return false;
	}

	/* Check if range is valid */
	if (start > end) {
    5e08:	42ac      	cmp	r4, r5
    5e0a:	d801      	bhi.n	5e10 <att_find_type_req+0x30>
    5e0c:	e008      	b.n	5e20 <att_find_type_req+0x40>
static bool range_is_valid(u16_t start, u16_t end, u16_t *err)
{
	/* Handle 0 is invalid */
	if (!start || !end) {
		if (err) {
			*err = 0;
    5e0e:	462c      	mov	r4, r5
    5e10:	2301      	movs	r3, #1
    5e12:	4622      	mov	r2, r4
    5e14:	2106      	movs	r1, #6
    5e16:	4640      	mov	r0, r8
    5e18:	f7ff fd72 	bl	5900 <send_err_rsp.part.8>
	 * UUID for the specific primary service.
	 */
	if (type != BT_UUID_GATT_PRIMARY_VAL) {
		send_err_rsp(conn, BT_ATT_OP_FIND_TYPE_REQ, start_handle,
			     BT_ATT_ERR_ATTRIBUTE_NOT_FOUND);
		return 0;
    5e1c:	2500      	movs	r5, #0
    5e1e:	e037      	b.n	5e90 <att_find_type_req+0xb0>
	/* The Attribute Protocol Find By Type Value Request shall be used with
	 * the Attribute Type parameter set to the UUID for "Primary Service"
	 * and the Attribute Value set to the 16-bit Bluetooth UUID or 128-bit
	 * UUID for the specific primary service.
	 */
	if (type != BT_UUID_GATT_PRIMARY_VAL) {
    5e20:	f5ba 5f20 	cmp.w	sl, #10240	; 0x2800
    5e24:	d001      	beq.n	5e2a <att_find_type_req+0x4a>
    5e26:	230a      	movs	r3, #10
    5e28:	e7f3      	b.n	5e12 <att_find_type_req+0x32>
			     BT_ATT_ERR_ATTRIBUTE_NOT_FOUND);
		return 0;
	}

	return att_find_type_rsp(att, start_handle, end_handle, value,
				 buf->len);
    5e2a:	f8b7 800c 	ldrh.w	r8, [r7, #12]

static u8_t att_find_type_rsp(struct bt_att *att, u16_t start_handle,
			      u16_t end_handle, const void *value,
			      u8_t value_len)
{
	struct bt_conn *conn = att->chan.chan.conn;
    5e2e:	6837      	ldr	r7, [r6, #0]
	struct find_type_data data;

	memset(&data, 0, sizeof(data));
    5e30:	2214      	movs	r2, #20
    5e32:	2100      	movs	r1, #0
    5e34:	a801      	add	r0, sp, #4
    5e36:	f7fb f958 	bl	10ea <memset>

	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
    5e3a:	2200      	movs	r2, #0
    5e3c:	2107      	movs	r1, #7
    5e3e:	4638      	mov	r0, r7
    5e40:	f7ff fce4 	bl	580c <bt_att_create_pdu>
    5e44:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    5e46:	b310      	cbz	r0, 5e8e <att_find_type_req+0xae>
	data.group = NULL;
	data.value = value;
	data.value_len = value_len;

	/* Pre-set error in case no service will be found */
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    5e48:	230a      	movs	r3, #10
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
	if (!data.buf) {
		return BT_ATT_ERR_UNLIKELY;
	}

	data.att = att;
    5e4a:	9601      	str	r6, [sp, #4]
	data.group = NULL;
	data.value = value;
	data.value_len = value_len;

	/* Pre-set error in case no service will be found */
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    5e4c:	f88d 3015 	strb.w	r3, [sp, #21]

	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    5e50:	4629      	mov	r1, r5
	if (!data.buf) {
		return BT_ATT_ERR_UNLIKELY;
	}

	data.att = att;
	data.group = NULL;
    5e52:	2600      	movs	r6, #0
	data.value_len = value_len;

	/* Pre-set error in case no service will be found */
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;

	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    5e54:	ab01      	add	r3, sp, #4
    5e56:	4a10      	ldr	r2, [pc, #64]	; (5e98 <att_find_type_req+0xb8>)
	if (!data.buf) {
		return BT_ATT_ERR_UNLIKELY;
	}

	data.att = att;
	data.group = NULL;
    5e58:	9603      	str	r6, [sp, #12]
	data.value_len = value_len;

	/* Pre-set error in case no service will be found */
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;

	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    5e5a:	4620      	mov	r0, r4
		return BT_ATT_ERR_UNLIKELY;
	}

	data.att = att;
	data.group = NULL;
	data.value = value;
    5e5c:	f8cd 9010 	str.w	r9, [sp, #16]
	data.value_len = value_len;
    5e60:	f88d 8014 	strb.w	r8, [sp, #20]

	/* Pre-set error in case no service will be found */
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;

	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    5e64:	f000 fc6a 	bl	673c <bt_gatt_foreach_attr>

	/* If error has not been cleared, no service has been found */
	if (data.err) {
    5e68:	f89d 5015 	ldrb.w	r5, [sp, #21]
    5e6c:	b145      	cbz	r5, 5e80 <att_find_type_req+0xa0>
		net_buf_unref(data.buf);
    5e6e:	9802      	ldr	r0, [sp, #8]
    5e70:	f00b feac 	bl	11bcc <net_buf_unref>
    5e74:	f89d 3015 	ldrb.w	r3, [sp, #21]
    5e78:	4622      	mov	r2, r4
    5e7a:	2106      	movs	r1, #6
    5e7c:	4638      	mov	r0, r7
    5e7e:	e7cb      	b.n	5e18 <att_find_type_req+0x38>
		send_err_rsp(conn, BT_ATT_OP_FIND_TYPE_REQ, start_handle,
			     data.err);
		return 0;
	}

	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    5e80:	4b06      	ldr	r3, [pc, #24]	; (5e9c <att_find_type_req+0xbc>)
    5e82:	9a02      	ldr	r2, [sp, #8]
    5e84:	2104      	movs	r1, #4
    5e86:	4638      	mov	r0, r7
    5e88:	f7fe fe68 	bl	4b5c <bt_l2cap_send_cb>
    5e8c:	e000      	b.n	5e90 <att_find_type_req+0xb0>

	memset(&data, 0, sizeof(data));

	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
	if (!data.buf) {
		return BT_ATT_ERR_UNLIKELY;
    5e8e:	250e      	movs	r5, #14
		return 0;
	}

	return att_find_type_rsp(att, start_handle, end_handle, value,
				 buf->len);
}
    5e90:	4628      	mov	r0, r5
    5e92:	b006      	add	sp, #24
    5e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5e98:	00004fa9 	.word	0x00004fa9
    5e9c:	00005647 	.word	0x00005647

00005ea0 <att_find_info_req>:

	return 0;
}

static u8_t att_find_info_req(struct bt_att *att, struct net_buf *buf)
{
    5ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_conn *conn = att->chan.chan.conn;
	struct bt_att_find_info_req *req;
	u16_t start_handle, end_handle, err_handle;

	req = (void *)buf->data;
    5ea2:	688b      	ldr	r3, [r1, #8]
	return 0;
}

static u8_t att_find_info_req(struct bt_att *att, struct net_buf *buf)
{
	struct bt_conn *conn = att->chan.chan.conn;
    5ea4:	6806      	ldr	r6, [r0, #0]
	struct bt_att_find_info_req *req;
	u16_t start_handle, end_handle, err_handle;

	req = (void *)buf->data;

	start_handle = sys_le16_to_cpu(req->start_handle);
    5ea6:	881d      	ldrh	r5, [r3, #0]

	return 0;
}

static u8_t att_find_info_req(struct bt_att *att, struct net_buf *buf)
{
    5ea8:	b085      	sub	sp, #20
    5eaa:	4607      	mov	r7, r0
}

static bool range_is_valid(u16_t start, u16_t end, u16_t *err)
{
	/* Handle 0 is invalid */
	if (!start || !end) {
    5eac:	b12d      	cbz	r5, 5eba <att_find_info_req+0x1a>
	u16_t start_handle, end_handle, err_handle;

	req = (void *)buf->data;

	start_handle = sys_le16_to_cpu(req->start_handle);
	end_handle = sys_le16_to_cpu(req->end_handle);
    5eae:	885c      	ldrh	r4, [r3, #2]
}

static bool range_is_valid(u16_t start, u16_t end, u16_t *err)
{
	/* Handle 0 is invalid */
	if (!start || !end) {
    5eb0:	b114      	cbz	r4, 5eb8 <att_find_info_req+0x18>
		}
		return false;
	}

	/* Check if range is valid */
	if (start > end) {
    5eb2:	42a5      	cmp	r5, r4
    5eb4:	d801      	bhi.n	5eba <att_find_info_req+0x1a>
    5eb6:	e008      	b.n	5eca <att_find_info_req+0x2a>
static bool range_is_valid(u16_t start, u16_t end, u16_t *err)
{
	/* Handle 0 is invalid */
	if (!start || !end) {
		if (err) {
			*err = 0;
    5eb8:	4625      	mov	r5, r4
    5eba:	2301      	movs	r3, #1
    5ebc:	462a      	mov	r2, r5
    5ebe:	2104      	movs	r1, #4
    5ec0:	4630      	mov	r0, r6
    5ec2:	f7ff fd1d 	bl	5900 <send_err_rsp.part.8>
	       end_handle);

	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
		send_err_rsp(conn, BT_ATT_OP_FIND_INFO_REQ, err_handle,
			     BT_ATT_ERR_INVALID_HANDLE);
		return 0;
    5ec6:	2000      	movs	r0, #0
    5ec8:	e027      	b.n	5f1a <att_find_info_req+0x7a>
			      u16_t end_handle)
{
	struct bt_conn *conn = att->chan.chan.conn;
	struct find_info_data data;

	memset(&data, 0, sizeof(data));
    5eca:	2210      	movs	r2, #16
    5ecc:	2100      	movs	r1, #0
    5ece:	4668      	mov	r0, sp
    5ed0:	f7fb f90b 	bl	10ea <memset>

	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
    5ed4:	2200      	movs	r2, #0
    5ed6:	2105      	movs	r1, #5
    5ed8:	4630      	mov	r0, r6
    5eda:	f7ff fc97 	bl	580c <bt_att_create_pdu>
    5ede:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
    5ee0:	b1d0      	cbz	r0, 5f18 <att_find_info_req+0x78>
		return BT_ATT_ERR_UNLIKELY;
	}

	data.att = att;
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    5ee2:	4621      	mov	r1, r4
    5ee4:	466b      	mov	r3, sp
    5ee6:	4a0e      	ldr	r2, [pc, #56]	; (5f20 <att_find_info_req+0x80>)
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
	if (!data.buf) {
		return BT_ATT_ERR_UNLIKELY;
	}

	data.att = att;
    5ee8:	9700      	str	r7, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    5eea:	4628      	mov	r0, r5
    5eec:	f000 fc26 	bl	673c <bt_gatt_foreach_attr>

	if (!data.rsp) {
    5ef0:	9c02      	ldr	r4, [sp, #8]
    5ef2:	b954      	cbnz	r4, 5f0a <att_find_info_req+0x6a>
		net_buf_unref(data.buf);
    5ef4:	9801      	ldr	r0, [sp, #4]
    5ef6:	f00b fe69 	bl	11bcc <net_buf_unref>
    5efa:	4630      	mov	r0, r6
    5efc:	230a      	movs	r3, #10
    5efe:	462a      	mov	r2, r5
    5f00:	2104      	movs	r1, #4
    5f02:	f7ff fcfd 	bl	5900 <send_err_rsp.part.8>
		/* Respond since handle is set */
		send_err_rsp(conn, BT_ATT_OP_FIND_INFO_REQ, start_handle,
			     BT_ATT_ERR_ATTRIBUTE_NOT_FOUND);
		return 0;
    5f06:	4620      	mov	r0, r4
    5f08:	e007      	b.n	5f1a <att_find_info_req+0x7a>
	}

	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    5f0a:	4b06      	ldr	r3, [pc, #24]	; (5f24 <att_find_info_req+0x84>)
    5f0c:	9a01      	ldr	r2, [sp, #4]
    5f0e:	2104      	movs	r1, #4
    5f10:	4630      	mov	r0, r6
    5f12:	f7fe fe23 	bl	4b5c <bt_l2cap_send_cb>
    5f16:	e7d6      	b.n	5ec6 <att_find_info_req+0x26>

	memset(&data, 0, sizeof(data));

	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
	if (!data.buf) {
		return BT_ATT_ERR_UNLIKELY;
    5f18:	200e      	movs	r0, #14
			     BT_ATT_ERR_INVALID_HANDLE);
		return 0;
	}

	return att_find_info_rsp(att, start_handle, end_handle);
}
    5f1a:	b005      	add	sp, #20
    5f1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5f1e:	bf00      	nop
    5f20:	00004f0b 	.word	0x00004f0b
    5f24:	00005647 	.word	0x00005647

00005f28 <att_write_rsp.part.9.constprop.13>:
	data->err = 0;

	return BT_GATT_ITER_CONTINUE;
}

static u8_t att_write_rsp(struct bt_conn *conn, u8_t op, u8_t rsp,
    5f28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5f2c:	b086      	sub	sp, #24
    5f2e:	4690      	mov	r8, r2
    5f30:	4605      	mov	r5, r0
    5f32:	460e      	mov	r6, r1

	if (!handle) {
		return BT_ATT_ERR_INVALID_HANDLE;
	}

	memset(&data, 0, sizeof(data));
    5f34:	2218      	movs	r2, #24
    5f36:	2100      	movs	r1, #0
    5f38:	4668      	mov	r0, sp
	data->err = 0;

	return BT_GATT_ITER_CONTINUE;
}

static u8_t att_write_rsp(struct bt_conn *conn, u8_t op, u8_t rsp,
    5f3a:	461f      	mov	r7, r3

	if (!handle) {
		return BT_ATT_ERR_INVALID_HANDLE;
	}

	memset(&data, 0, sizeof(data));
    5f3c:	f7fb f8d5 	bl	10ea <memset>

	/* Only allocate buf if required to respond */
	if (rsp) {
    5f40:	f1b8 0f00 	cmp.w	r8, #0
    5f44:	d118      	bne.n	5f78 <att_write_rsp.part.9.constprop.13+0x50>
		}
	}

	data.conn = conn;
	data.op = op;
	data.offset = offset;
    5f46:	2300      	movs	r3, #0
    5f48:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
    5f4c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5f4e:	9303      	str	r3, [sp, #12]
	data.len = len;
    5f50:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    5f54:	f88d 3010 	strb.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    5f58:	2301      	movs	r3, #1
    5f5a:	f88d 3014 	strb.w	r3, [sp, #20]

	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    5f5e:	4a1c      	ldr	r2, [pc, #112]	; (5fd0 <att_write_rsp.part.9.constprop.13+0xa8>)
		if (!data.buf) {
			return BT_ATT_ERR_UNLIKELY;
		}
	}

	data.conn = conn;
    5f60:	9500      	str	r5, [sp, #0]
	data.offset = offset;
	data.value = value;
	data.len = len;
	data.err = BT_ATT_ERR_INVALID_HANDLE;

	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    5f62:	466b      	mov	r3, sp
    5f64:	4639      	mov	r1, r7
    5f66:	4638      	mov	r0, r7
			return BT_ATT_ERR_UNLIKELY;
		}
	}

	data.conn = conn;
	data.op = op;
    5f68:	f88d 6008 	strb.w	r6, [sp, #8]
	data.offset = offset;
	data.value = value;
	data.len = len;
	data.err = BT_ATT_ERR_INVALID_HANDLE;

	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    5f6c:	f000 fbe6 	bl	673c <bt_gatt_foreach_attr>

	if (data.err) {
    5f70:	f89d 4014 	ldrb.w	r4, [sp, #20]
    5f74:	b954      	cbnz	r4, 5f8c <att_write_rsp.part.9.constprop.13+0x64>
    5f76:	e01e      	b.n	5fb6 <att_write_rsp.part.9.constprop.13+0x8e>

	memset(&data, 0, sizeof(data));

	/* Only allocate buf if required to respond */
	if (rsp) {
		data.buf = bt_att_create_pdu(conn, rsp, 0);
    5f78:	2200      	movs	r2, #0
    5f7a:	4641      	mov	r1, r8
    5f7c:	4628      	mov	r0, r5
    5f7e:	f7ff fc45 	bl	580c <bt_att_create_pdu>
    5f82:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
    5f84:	2800      	cmp	r0, #0
    5f86:	d1de      	bne.n	5f46 <att_write_rsp.part.9.constprop.13+0x1e>
			return BT_ATT_ERR_UNLIKELY;
    5f88:	240e      	movs	r4, #14
    5f8a:	e01c      	b.n	5fc6 <att_write_rsp.part.9.constprop.13+0x9e>

	bt_gatt_foreach_attr(handle, handle, write_cb, &data);

	if (data.err) {
		/* In case of error discard data and respond with an error */
		if (rsp) {
    5f8c:	f1b8 0f00 	cmp.w	r8, #0
    5f90:	d00c      	beq.n	5fac <att_write_rsp.part.9.constprop.13+0x84>
			net_buf_unref(data.buf);
    5f92:	9801      	ldr	r0, [sp, #4]
    5f94:	f00b fe1a 	bl	11bcc <net_buf_unref>
{
	struct bt_att_error_rsp *rsp;
	struct net_buf *buf;

	/* Ignore opcode 0x00 */
	if (!req) {
    5f98:	b90e      	cbnz	r6, 5f9e <att_write_rsp.part.9.constprop.13+0x76>
		if (rsp) {
			net_buf_unref(data.buf);
			/* Respond here since handle is set */
			send_err_rsp(conn, op, handle, data.err);
		}
		return op == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    5f9a:	2400      	movs	r4, #0
    5f9c:	e013      	b.n	5fc6 <att_write_rsp.part.9.constprop.13+0x9e>
    5f9e:	f89d 3014 	ldrb.w	r3, [sp, #20]
    5fa2:	463a      	mov	r2, r7
    5fa4:	4631      	mov	r1, r6
    5fa6:	4628      	mov	r0, r5
    5fa8:	f7ff fcaa 	bl	5900 <send_err_rsp.part.8>
    5fac:	2e18      	cmp	r6, #24
    5fae:	d1f4      	bne.n	5f9a <att_write_rsp.part.9.constprop.13+0x72>
    5fb0:	f89d 4014 	ldrb.w	r4, [sp, #20]
    5fb4:	e007      	b.n	5fc6 <att_write_rsp.part.9.constprop.13+0x9e>
	}

	if (data.buf) {
    5fb6:	9a01      	ldr	r2, [sp, #4]
    5fb8:	2a00      	cmp	r2, #0
    5fba:	d0ee      	beq.n	5f9a <att_write_rsp.part.9.constprop.13+0x72>
		bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf,
    5fbc:	4b05      	ldr	r3, [pc, #20]	; (5fd4 <att_write_rsp.part.9.constprop.13+0xac>)
    5fbe:	2104      	movs	r1, #4
    5fc0:	4628      	mov	r0, r5
    5fc2:	f7fe fdcb 	bl	4b5c <bt_l2cap_send_cb>
				 att_rsp_sent);
	}

	return 0;
}
    5fc6:	4620      	mov	r0, r4
    5fc8:	b006      	add	sp, #24
    5fca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5fce:	bf00      	nop
    5fd0:	00005739 	.word	0x00005739
    5fd4:	00005647 	.word	0x00005647

00005fd8 <att_signed_write_cmd>:

	return att_write_rsp(conn, 0, 0, handle, 0, buf->data, buf->len);
}

static u8_t att_signed_write_cmd(struct bt_att *att, struct net_buf *buf)
{
    5fd8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	u16_t handle;
	int err;

	req = (void *)buf->data;

	handle = sys_le16_to_cpu(req->handle);
    5fdc:	460c      	mov	r4, r1
	return att_write_rsp(conn, 0, 0, handle, 0, buf->data, buf->len);
}

static u8_t att_signed_write_cmd(struct bt_att *att, struct net_buf *buf)
{
	struct bt_conn *conn = att->chan.chan.conn;
    5fde:	6806      	ldr	r6, [r0, #0]
	u16_t handle;
	int err;

	req = (void *)buf->data;

	handle = sys_le16_to_cpu(req->handle);
    5fe0:	f854 3f08 	ldr.w	r3, [r4, #8]!

	return att_write_rsp(conn, 0, 0, handle, 0, buf->data, buf->len);
}

static u8_t att_signed_write_cmd(struct bt_att *att, struct net_buf *buf)
{
    5fe4:	460d      	mov	r5, r1
	handle = sys_le16_to_cpu(req->handle);

	BT_DBG("handle 0x%04x", handle);

	/* Verifying data requires full buffer including attribute header */
	net_buf_push(buf, sizeof(struct bt_att_hdr));
    5fe6:	4620      	mov	r0, r4
    5fe8:	2101      	movs	r1, #1
	u16_t handle;
	int err;

	req = (void *)buf->data;

	handle = sys_le16_to_cpu(req->handle);
    5fea:	f8b3 8000 	ldrh.w	r8, [r3]

	BT_DBG("handle 0x%04x", handle);

	/* Verifying data requires full buffer including attribute header */
	net_buf_push(buf, sizeof(struct bt_att_hdr));
    5fee:	f00b fe24 	bl	11c3a <net_buf_simple_push>
	err = bt_smp_sign_verify(conn, buf);
    5ff2:	4629      	mov	r1, r5
    5ff4:	4630      	mov	r0, r6
    5ff6:	f002 f861 	bl	80bc <bt_smp_sign_verify>
	if (err) {
    5ffa:	4607      	mov	r7, r0
    5ffc:	b158      	cbz	r0, 6016 <att_signed_write_cmd+0x3e>
		BT_ERR("Error verifying data");
    5ffe:	4b14      	ldr	r3, [pc, #80]	; (6050 <att_signed_write_cmd+0x78>)
    6000:	9301      	str	r3, [sp, #4]
    6002:	4b14      	ldr	r3, [pc, #80]	; (6054 <att_signed_write_cmd+0x7c>)
    6004:	9300      	str	r3, [sp, #0]
    6006:	4a14      	ldr	r2, [pc, #80]	; (6058 <att_signed_write_cmd+0x80>)
    6008:	4b14      	ldr	r3, [pc, #80]	; (605c <att_signed_write_cmd+0x84>)
    600a:	4915      	ldr	r1, [pc, #84]	; (6060 <att_signed_write_cmd+0x88>)
    600c:	4815      	ldr	r0, [pc, #84]	; (6064 <att_signed_write_cmd+0x8c>)
    600e:	f7fb fa37 	bl	1480 <printk>
    6012:	2000      	movs	r0, #0
    6014:	e018      	b.n	6048 <att_signed_write_cmd+0x70>
		/* No response for this command */
		return 0;
	}

	net_buf_pull(buf, sizeof(struct bt_att_hdr));
    6016:	2101      	movs	r1, #1
    6018:	4620      	mov	r0, r4
    601a:	f00b fe16 	bl	11c4a <net_buf_simple_pull>
	net_buf_pull(buf, sizeof(*req));
    601e:	2102      	movs	r1, #2
    6020:	4620      	mov	r0, r4
    6022:	f00b fe12 	bl	11c4a <net_buf_simple_pull>
			  u16_t handle, u16_t offset, const void *value,
			  u8_t len)
{
	struct write_data data;

	if (!handle) {
    6026:	f1b8 0f00 	cmp.w	r8, #0
    602a:	d00c      	beq.n	6046 <att_signed_write_cmd+0x6e>
    602c:	7b2b      	ldrb	r3, [r5, #12]
    602e:	3b0c      	subs	r3, #12
    6030:	b2db      	uxtb	r3, r3
    6032:	9301      	str	r3, [sp, #4]
    6034:	68ab      	ldr	r3, [r5, #8]
    6036:	9300      	str	r3, [sp, #0]
    6038:	463a      	mov	r2, r7
    603a:	4643      	mov	r3, r8
    603c:	4639      	mov	r1, r7
    603e:	4630      	mov	r0, r6
    6040:	f7ff ff72 	bl	5f28 <att_write_rsp.part.9.constprop.13>
    6044:	e000      	b.n	6048 <att_signed_write_cmd+0x70>
		return BT_ATT_ERR_INVALID_HANDLE;
    6046:	2001      	movs	r0, #1
	net_buf_pull(buf, sizeof(struct bt_att_hdr));
	net_buf_pull(buf, sizeof(*req));

	return att_write_rsp(conn, 0, 0, handle, 0, buf->data,
			     buf->len - sizeof(struct bt_att_signature));
}
    6048:	b002      	add	sp, #8
    604a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    604e:	bf00      	nop
    6050:	00013df4 	.word	0x00013df4
    6054:	00013df9 	.word	0x00013df9
    6058:	00013db4 	.word	0x00013db4
    605c:	00016354 	.word	0x00016354
    6060:	00013dbb 	.word	0x00013dbb
    6064:	00014a91 	.word	0x00014a91

00006068 <att_write_req>:

	return 0;
}

static u8_t att_write_req(struct bt_att *att, struct net_buf *buf)
{
    6068:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    606a:	6805      	ldr	r5, [r0, #0]
	u16_t handle;

	handle = net_buf_pull_le16(buf);
    606c:	f101 0008 	add.w	r0, r1, #8

	return 0;
}

static u8_t att_write_req(struct bt_att *att, struct net_buf *buf)
{
    6070:	460c      	mov	r4, r1
	struct bt_conn *conn = att->chan.chan.conn;
	u16_t handle;

	handle = net_buf_pull_le16(buf);
    6072:	f00b fdfa 	bl	11c6a <net_buf_simple_pull_le16>
			  u16_t handle, u16_t offset, const void *value,
			  u8_t len)
{
	struct write_data data;

	if (!handle) {
    6076:	4603      	mov	r3, r0
    6078:	b148      	cbz	r0, 608e <att_write_req+0x26>
    607a:	7b22      	ldrb	r2, [r4, #12]
    607c:	9201      	str	r2, [sp, #4]
    607e:	68a2      	ldr	r2, [r4, #8]
    6080:	9200      	str	r2, [sp, #0]
    6082:	2112      	movs	r1, #18
    6084:	2213      	movs	r2, #19
    6086:	4628      	mov	r0, r5
    6088:	f7ff ff4e 	bl	5f28 <att_write_rsp.part.9.constprop.13>
    608c:	e000      	b.n	6090 <att_write_req+0x28>
		return BT_ATT_ERR_INVALID_HANDLE;
    608e:	2001      	movs	r0, #1

	BT_DBG("handle 0x%04x", handle);

	return att_write_rsp(conn, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
			     handle, 0, buf->data, buf->len);
}
    6090:	b003      	add	sp, #12
    6092:	bd30      	pop	{r4, r5, pc}

00006094 <att_write_cmd>:
	return att_exec_write_rsp(att, req->flags);
#endif /* CONFIG_BLUETOOTH_ATT_PREPARE_COUNT */
}

static u8_t att_write_cmd(struct bt_att *att, struct net_buf *buf)
{
    6094:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    6096:	6805      	ldr	r5, [r0, #0]
	u16_t handle;

	handle = net_buf_pull_le16(buf);
    6098:	f101 0008 	add.w	r0, r1, #8
	return att_exec_write_rsp(att, req->flags);
#endif /* CONFIG_BLUETOOTH_ATT_PREPARE_COUNT */
}

static u8_t att_write_cmd(struct bt_att *att, struct net_buf *buf)
{
    609c:	460c      	mov	r4, r1
	struct bt_conn *conn = att->chan.chan.conn;
	u16_t handle;

	handle = net_buf_pull_le16(buf);
    609e:	f00b fde4 	bl	11c6a <net_buf_simple_pull_le16>
			  u16_t handle, u16_t offset, const void *value,
			  u8_t len)
{
	struct write_data data;

	if (!handle) {
    60a2:	4603      	mov	r3, r0
    60a4:	b148      	cbz	r0, 60ba <att_write_cmd+0x26>
    60a6:	7b22      	ldrb	r2, [r4, #12]
    60a8:	9201      	str	r2, [sp, #4]
    60aa:	68a2      	ldr	r2, [r4, #8]
    60ac:	9200      	str	r2, [sp, #0]
    60ae:	2200      	movs	r2, #0
    60b0:	4611      	mov	r1, r2
    60b2:	4628      	mov	r0, r5
    60b4:	f7ff ff38 	bl	5f28 <att_write_rsp.part.9.constprop.13>
    60b8:	e000      	b.n	60bc <att_write_cmd+0x28>
		return BT_ATT_ERR_INVALID_HANDLE;
    60ba:	2001      	movs	r0, #1
	handle = net_buf_pull_le16(buf);

	BT_DBG("handle 0x%04x", handle);

	return att_write_rsp(conn, 0, 0, handle, 0, buf->data, buf->len);
}
    60bc:	b003      	add	sp, #12
    60be:	bd30      	pop	{r4, r5, pc}

000060c0 <bt_att_init>:

	return -ENOMEM;
}

void bt_att_init(void)
{
    60c0:	b508      	push	{r3, lr}
	static struct bt_l2cap_fixed_chan chan = {
		.cid		= BT_L2CAP_CID_ATT,
		.accept		= bt_att_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
    60c2:	4803      	ldr	r0, [pc, #12]	; (60d0 <bt_att_init+0x10>)
    60c4:	f7fe fc7e 	bl	49c4 <bt_l2cap_le_fixed_chan_register>

	bt_gatt_init();
}
    60c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		.accept		= bt_att_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);

	bt_gatt_init();
    60cc:	f000 ba98 	b.w	6600 <bt_gatt_init>
    60d0:	200003b0 	.word	0x200003b0

000060d4 <bt_att_req_send>:

	return 0;
}

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
    60d4:	b510      	push	{r4, lr}
    60d6:	460c      	mov	r4, r1
	struct bt_att *att;

	BT_DBG("conn %p req %p", conn, req);

	if (!conn || !req) {
    60d8:	b1d8      	cbz	r0, 6112 <bt_att_req_send+0x3e>
    60da:	b1d1      	cbz	r1, 6112 <bt_att_req_send+0x3e>
		return -EINVAL;
	}

	att = att_chan_get(conn);
    60dc:	f7ff fae2 	bl	56a4 <att_chan_get>
	if (!att) {
    60e0:	4602      	mov	r2, r0
    60e2:	b1c8      	cbz	r0, 6118 <bt_att_req_send+0x44>
		return -ENOTCONN;
	}

	/* Check if there is a request outstanding */
	if (att->req) {
    60e4:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
    60e8:	b173      	cbz	r3, 6108 <bt_att_req_send+0x34>
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node)
{
	node->next = NULL;

	if (!list->tail) {
    60ea:	f8d0 009c 	ldr.w	r0, [r0, #156]	; 0x9c
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node)
{
	node->next = NULL;
    60ee:	2300      	movs	r3, #0
    60f0:	6023      	str	r3, [r4, #0]

	if (!list->tail) {
    60f2:	b920      	cbnz	r0, 60fe <bt_att_req_send+0x2a>
		list->tail = node;
    60f4:	f8c2 409c 	str.w	r4, [r2, #156]	; 0x9c
		list->head = node;
    60f8:	f8c2 4098 	str.w	r4, [r2, #152]	; 0x98
    60fc:	bd10      	pop	{r4, pc}
	} else {
		list->tail->next = node;
    60fe:	6004      	str	r4, [r0, #0]
		list->tail = node;
    6100:	f8c2 409c 	str.w	r4, [r2, #156]	; 0x9c
		/* Queue the request to be send later */
		sys_slist_append(&att->reqs, &req->node);
		return 0;
    6104:	4618      	mov	r0, r3
    6106:	bd10      	pop	{r4, pc}
	}

	return att_send_req(att, req);
    6108:	4621      	mov	r1, r4
}
    610a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		/* Queue the request to be send later */
		sys_slist_append(&att->reqs, &req->node);
		return 0;
	}

	return att_send_req(att, req);
    610e:	f7ff b8cf 	b.w	52b0 <att_send_req>
	struct bt_att *att;

	BT_DBG("conn %p req %p", conn, req);

	if (!conn || !req) {
		return -EINVAL;
    6112:	f06f 0015 	mvn.w	r0, #21
    6116:	bd10      	pop	{r4, pc}
	}

	att = att_chan_get(conn);
	if (!att) {
		return -ENOTCONN;
    6118:	f06f 0038 	mvn.w	r0, #56	; 0x38
		sys_slist_append(&att->reqs, &req->node);
		return 0;
	}

	return att_send_req(att, req);
}
    611c:	bd10      	pop	{r4, pc}

0000611e <sc_ccc_cfg_changed>:

static struct bt_gatt_ccc_cfg sc_ccc_cfg[CONFIG_BLUETOOTH_MAX_PAIRED] = {};

static void sc_ccc_cfg_changed(const struct bt_gatt_attr *attr,
			       u16_t value)
{
    611e:	4770      	bx	lr

00006120 <find_next>:

static u8_t find_next(const struct bt_gatt_attr *attr, void *user_data)
{
	struct bt_gatt_attr **next = user_data;

	*next = (struct bt_gatt_attr *)attr;
    6120:	6008      	str	r0, [r1, #0]

	return BT_GATT_ITER_STOP;
}
    6122:	2000      	movs	r0, #0
    6124:	4770      	bx	lr

00006126 <gatt_ccc_changed>:
				 sizeof(value));
}

static void gatt_ccc_changed(const struct bt_gatt_attr *attr,
			     struct _bt_gatt_ccc *ccc)
{
    6126:	b470      	push	{r4, r5, r6}
	int i;
	u16_t value = 0x0000;
    6128:	2300      	movs	r3, #0
    612a:	684d      	ldr	r5, [r1, #4]

	for (i = 0; i < ccc->cfg_len; i++) {
    612c:	461a      	mov	r2, r3
		if (ccc->cfg[i].value > value) {
    612e:	260c      	movs	r6, #12
			     struct _bt_gatt_ccc *ccc)
{
	int i;
	u16_t value = 0x0000;

	for (i = 0; i < ccc->cfg_len; i++) {
    6130:	42aa      	cmp	r2, r5
    6132:	d008      	beq.n	6146 <gatt_ccc_changed+0x20>
		if (ccc->cfg[i].value > value) {
    6134:	680c      	ldr	r4, [r1, #0]
    6136:	fb06 4402 	mla	r4, r6, r2, r4
			     struct _bt_gatt_ccc *ccc)
{
	int i;
	u16_t value = 0x0000;

	for (i = 0; i < ccc->cfg_len; i++) {
    613a:	3201      	adds	r2, #1
		if (ccc->cfg[i].value > value) {
    613c:	8924      	ldrh	r4, [r4, #8]
    613e:	42a3      	cmp	r3, r4
    6140:	bf38      	it	cc
    6142:	4623      	movcc	r3, r4
    6144:	e7f4      	b.n	6130 <gatt_ccc_changed+0xa>
		}
	}

	BT_DBG("ccc %p value 0x%04x", ccc, value);

	if (value != ccc->value) {
    6146:	890a      	ldrh	r2, [r1, #8]
    6148:	429a      	cmp	r2, r3
    614a:	d004      	beq.n	6156 <gatt_ccc_changed+0x30>
		ccc->value = value;
    614c:	810b      	strh	r3, [r1, #8]
		ccc->cfg_changed(attr, value);
    614e:	68ca      	ldr	r2, [r1, #12]
	}
}
    6150:	bc70      	pop	{r4, r5, r6}

	BT_DBG("ccc %p value 0x%04x", ccc, value);

	if (value != ccc->value) {
		ccc->value = value;
		ccc->cfg_changed(attr, value);
    6152:	4619      	mov	r1, r3
    6154:	4710      	bx	r2
	}
}
    6156:	bc70      	pop	{r4, r5, r6}
    6158:	4770      	bx	lr

0000615a <gatt_indicate_rsp>:
	return 0;
}

static void gatt_indicate_rsp(struct bt_conn *conn, u8_t err,
			      const void *pdu, u16_t length, void *user_data)
{
    615a:	b410      	push	{r4}
    615c:	9b01      	ldr	r3, [sp, #4]
	struct bt_gatt_indicate_params *params = user_data;

	params->func(conn, params->attr, err);
    615e:	69dc      	ldr	r4, [r3, #28]
    6160:	460a      	mov	r2, r1
    6162:	6999      	ldr	r1, [r3, #24]
    6164:	4623      	mov	r3, r4
}
    6166:	bc10      	pop	{r4}
static void gatt_indicate_rsp(struct bt_conn *conn, u8_t err,
			      const void *pdu, u16_t length, void *user_data)
{
	struct bt_gatt_indicate_params *params = user_data;

	params->func(conn, params->attr, err);
    6168:	4718      	bx	r3
	...

0000616c <sc_indicate_rsp>:
static void sc_indicate_rsp(struct bt_conn *conn,
			    const struct bt_gatt_attr *attr, u8_t err)
{
	BT_DBG("err 0x%02x", err);

	k_sem_give(&sc_sem);
    616c:	4801      	ldr	r0, [pc, #4]	; (6174 <sc_indicate_rsp+0x8>)
    616e:	f00d b83f 	b.w	131f0 <k_sem_give>
    6172:	bf00      	nop
    6174:	200004c8 	.word	0x200004c8

00006178 <bt_gatt_attr_write_ccc>:
}

ssize_t bt_gatt_attr_write_ccc(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, const void *buf,
			       u16_t len, u16_t offset, u8_t flags)
{
    6178:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    617c:	4689      	mov	r9, r1
    617e:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
	struct _bt_gatt_ccc *ccc = attr->user_data;
    6182:	f8d9 500c 	ldr.w	r5, [r9, #12]
	u16_t value;
	size_t i;

	if (offset > sizeof(u16_t)) {
    6186:	2902      	cmp	r1, #2
}

ssize_t bt_gatt_attr_write_ccc(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, const void *buf,
			       u16_t len, u16_t offset, u8_t flags)
{
    6188:	4682      	mov	sl, r0
	struct _bt_gatt_ccc *ccc = attr->user_data;
	u16_t value;
	size_t i;

	if (offset > sizeof(u16_t)) {
    618a:	d854      	bhi.n	6236 <bt_gatt_attr_write_ccc+0xbe>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
	}

	if (offset + len > sizeof(u16_t)) {
    618c:	4419      	add	r1, r3
    618e:	2902      	cmp	r1, #2
    6190:	461e      	mov	r6, r3
    6192:	dc53      	bgt.n	623c <bt_gatt_attr_write_ccc+0xc4>
 *
 *  @return 16-bit integer in host endianness.
 */
static inline u16_t sys_get_le16(const u8_t src[2])
{
	return ((u16_t)src[1] << 8) | src[0];
    6194:	7857      	ldrb	r7, [r2, #1]
    6196:	7813      	ldrb	r3, [r2, #0]
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
	}

	value = sys_get_le16(buf);

	for (i = 0; i < ccc->cfg_len; i++) {
    6198:	2400      	movs	r4, #0
    619a:	ea43 2707 	orr.w	r7, r3, r7, lsl #8
		/* Check for existing configuration */
		if (!bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    619e:	f04f 080c 	mov.w	r8, #12
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
	}

	value = sys_get_le16(buf);

	for (i = 0; i < ccc->cfg_len; i++) {
    61a2:	686b      	ldr	r3, [r5, #4]
    61a4:	429c      	cmp	r4, r3
    61a6:	d206      	bcs.n	61b6 <bt_gatt_attr_write_ccc+0x3e>
		/* Check for existing configuration */
		if (!bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    61a8:	6829      	ldr	r1, [r5, #0]
    61aa:	4650      	mov	r0, sl
    61ac:	fb08 1104 	mla	r1, r8, r4, r1
    61b0:	f7fe f9da 	bl	4568 <bt_conn_addr_le_cmp>
    61b4:	b928      	cbnz	r0, 61c2 <bt_gatt_attr_write_ccc+0x4a>
			break;
		}
	}

	if (i == ccc->cfg_len) {
    61b6:	686b      	ldr	r3, [r5, #4]
    61b8:	429c      	cmp	r4, r3
    61ba:	d129      	bne.n	6210 <bt_gatt_attr_write_ccc+0x98>
    61bc:	2400      	movs	r4, #0
    61be:	220c      	movs	r2, #12
    61c0:	e008      	b.n	61d4 <bt_gatt_attr_write_ccc+0x5c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
	}

	value = sys_get_le16(buf);

	for (i = 0; i < ccc->cfg_len; i++) {
    61c2:	3401      	adds	r4, #1
    61c4:	e7ed      	b.n	61a2 <bt_gatt_attr_write_ccc+0x2a>
	}

	if (i == ccc->cfg_len) {
		for (i = 0; i < ccc->cfg_len; i++) {
			/* Check for unused configuration */
			if (ccc->cfg[i].valid) {
    61c6:	6828      	ldr	r0, [r5, #0]
    61c8:	fb02 f804 	mul.w	r8, r2, r4
    61cc:	4440      	add	r0, r8
    61ce:	7a81      	ldrb	r1, [r0, #10]
    61d0:	b119      	cbz	r1, 61da <bt_gatt_attr_write_ccc+0x62>
			break;
		}
	}

	if (i == ccc->cfg_len) {
		for (i = 0; i < ccc->cfg_len; i++) {
    61d2:	3401      	adds	r4, #1
    61d4:	429c      	cmp	r4, r3
    61d6:	d1f6      	bne.n	61c6 <bt_gatt_attr_write_ccc+0x4e>
    61d8:	e00d      	b.n	61f6 <bt_gatt_attr_write_ccc+0x7e>
	memcpy(dst, src, sizeof(*dst));
}

static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    61da:	2207      	movs	r2, #7
    61dc:	f10a 0154 	add.w	r1, sl, #84	; 0x54
    61e0:	f7fa ff57 	bl	1092 <memcpy>
				continue;
			}

			bt_addr_le_copy(&ccc->cfg[i].peer, &conn->le.dst);

			if (value) {
    61e4:	b127      	cbz	r7, 61f0 <bt_gatt_attr_write_ccc+0x78>
				ccc->cfg[i].valid = true;
    61e6:	682b      	ldr	r3, [r5, #0]
    61e8:	4498      	add	r8, r3
    61ea:	2301      	movs	r3, #1
    61ec:	f888 300a 	strb.w	r3, [r8, #10]
			}

			break;
		}

		if (i == ccc->cfg_len) {
    61f0:	686b      	ldr	r3, [r5, #4]
    61f2:	429c      	cmp	r4, r3
    61f4:	d112      	bne.n	621c <bt_gatt_attr_write_ccc+0xa4>
			BT_WARN("No space to store CCC cfg");
    61f6:	4b14      	ldr	r3, [pc, #80]	; (6248 <bt_gatt_attr_write_ccc+0xd0>)
    61f8:	9301      	str	r3, [sp, #4]
    61fa:	4b14      	ldr	r3, [pc, #80]	; (624c <bt_gatt_attr_write_ccc+0xd4>)
    61fc:	9300      	str	r3, [sp, #0]
    61fe:	4a14      	ldr	r2, [pc, #80]	; (6250 <bt_gatt_attr_write_ccc+0xd8>)
    6200:	4b14      	ldr	r3, [pc, #80]	; (6254 <bt_gatt_attr_write_ccc+0xdc>)
    6202:	4915      	ldr	r1, [pc, #84]	; (6258 <bt_gatt_attr_write_ccc+0xe0>)
    6204:	4815      	ldr	r0, [pc, #84]	; (625c <bt_gatt_attr_write_ccc+0xe4>)
    6206:	f7fb f93b 	bl	1480 <printk>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    620a:	f06f 0610 	mvn.w	r6, #16
    620e:	e017      	b.n	6240 <bt_gatt_attr_write_ccc+0xc8>
		}
	} else if (!value) {
    6210:	b927      	cbnz	r7, 621c <bt_gatt_attr_write_ccc+0xa4>
		/* free existing configuration for default value */
		ccc->cfg[i].valid = false;
    6212:	682a      	ldr	r2, [r5, #0]
    6214:	230c      	movs	r3, #12
    6216:	fb03 2304 	mla	r3, r3, r4, r2
    621a:	729f      	strb	r7, [r3, #10]
	}

	ccc->cfg[i].value = value;
    621c:	682b      	ldr	r3, [r5, #0]
    621e:	220c      	movs	r2, #12
    6220:	fb02 3404 	mla	r4, r2, r4, r3

	BT_DBG("handle 0x%04x value %u", attr->handle, ccc->cfg[i].value);

	/* Update cfg if don't match */
	if (ccc->cfg[i].value != ccc->value) {
    6224:	892b      	ldrh	r3, [r5, #8]
	} else if (!value) {
		/* free existing configuration for default value */
		ccc->cfg[i].valid = false;
	}

	ccc->cfg[i].value = value;
    6226:	8127      	strh	r7, [r4, #8]

	BT_DBG("handle 0x%04x value %u", attr->handle, ccc->cfg[i].value);

	/* Update cfg if don't match */
	if (ccc->cfg[i].value != ccc->value) {
    6228:	42bb      	cmp	r3, r7
    622a:	d009      	beq.n	6240 <bt_gatt_attr_write_ccc+0xc8>
		gatt_ccc_changed(attr, ccc);
    622c:	4629      	mov	r1, r5
    622e:	4648      	mov	r0, r9
    6230:	f7ff ff79 	bl	6126 <gatt_ccc_changed>
    6234:	e004      	b.n	6240 <bt_gatt_attr_write_ccc+0xc8>
	struct _bt_gatt_ccc *ccc = attr->user_data;
	u16_t value;
	size_t i;

	if (offset > sizeof(u16_t)) {
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    6236:	f06f 0606 	mvn.w	r6, #6
    623a:	e001      	b.n	6240 <bt_gatt_attr_write_ccc+0xc8>
	}

	if (offset + len > sizeof(u16_t)) {
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    623c:	f06f 060c 	mvn.w	r6, #12
	if (ccc->cfg[i].value != ccc->value) {
		gatt_ccc_changed(attr, ccc);
	}

	return len;
}
    6240:	4630      	mov	r0, r6
    6242:	b002      	add	sp, #8
    6244:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6248:	00013df4 	.word	0x00013df4
    624c:	00013e3f 	.word	0x00013e3f
    6250:	00013e01 	.word	0x00013e01
    6254:	00016402 	.word	0x00016402
    6258:	00013dbb 	.word	0x00013dbb
    625c:	00014ad9 	.word	0x00014ad9

00006260 <connected_cb>:
{
	return bt_att_get_mtu(conn);
}

static u8_t connected_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    6260:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    6264:	6882      	ldr	r2, [r0, #8]
    6266:	4b11      	ldr	r3, [pc, #68]	; (62ac <connected_cb+0x4c>)
    6268:	429a      	cmp	r2, r3
{
	return bt_att_get_mtu(conn);
}

static u8_t connected_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    626a:	4607      	mov	r7, r0
    626c:	4688      	mov	r8, r1
	struct bt_conn *conn = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    626e:	d11a      	bne.n	62a6 <connected_cb+0x46>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
    6270:	68c6      	ldr	r6, [r0, #12]

	/* If already enabled skip */
	if (ccc->value) {
    6272:	8934      	ldrh	r4, [r6, #8]
    6274:	b9bc      	cbnz	r4, 62a6 <connected_cb+0x46>
    6276:	f04f 090c 	mov.w	r9, #12
		return BT_GATT_ITER_CONTINUE;
	}

	for (i = 0; i < ccc->cfg_len; i++) {
    627a:	6873      	ldr	r3, [r6, #4]
    627c:	429c      	cmp	r4, r3
    627e:	d212      	bcs.n	62a6 <connected_cb+0x46>
		/* Ignore configuration for different peer */
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    6280:	6831      	ldr	r1, [r6, #0]
    6282:	fb09 f504 	mul.w	r5, r9, r4
    6286:	4429      	add	r1, r5
    6288:	4640      	mov	r0, r8
    628a:	f7fe f96d 	bl	4568 <bt_conn_addr_le_cmp>
    628e:	b940      	cbnz	r0, 62a2 <connected_cb+0x42>
			continue;
		}

		if (ccc->cfg[i].value) {
    6290:	6833      	ldr	r3, [r6, #0]
    6292:	441d      	add	r5, r3
    6294:	892b      	ldrh	r3, [r5, #8]
    6296:	b123      	cbz	r3, 62a2 <connected_cb+0x42>
			gatt_ccc_changed(attr, ccc);
    6298:	4631      	mov	r1, r6
    629a:	4638      	mov	r0, r7
    629c:	f7ff ff43 	bl	6126 <gatt_ccc_changed>
    62a0:	e001      	b.n	62a6 <connected_cb+0x46>
	/* If already enabled skip */
	if (ccc->value) {
		return BT_GATT_ITER_CONTINUE;
	}

	for (i = 0; i < ccc->cfg_len; i++) {
    62a2:	3401      	adds	r4, #1
    62a4:	e7e9      	b.n	627a <connected_cb+0x1a>
			return BT_GATT_ITER_CONTINUE;
		}
	}

	return BT_GATT_ITER_CONTINUE;
}
    62a6:	2001      	movs	r0, #1
    62a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    62ac:	00006179 	.word	0x00006179

000062b0 <gatt_register>:
};

static struct bt_gatt_service gatt_svc = BT_GATT_SERVICE(gatt_attrs);

static int gatt_register(struct bt_gatt_service *svc)
{
    62b0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    62b2:	4c21      	ldr	r4, [pc, #132]	; (6338 <gatt_register+0x88>)
	struct bt_gatt_service *last;
	u16_t handle;
	struct bt_gatt_attr *attrs = svc->attrs;
    62b4:	6802      	ldr	r2, [r0, #0]
	u16_t count = svc->attr_count;

	if (sys_slist_is_empty(&db)) {
    62b6:	6823      	ldr	r3, [r4, #0]
static int gatt_register(struct bt_gatt_service *svc)
{
	struct bt_gatt_service *last;
	u16_t handle;
	struct bt_gatt_attr *attrs = svc->attrs;
	u16_t count = svc->attr_count;
    62b8:	8881      	ldrh	r1, [r0, #4]

	if (sys_slist_is_empty(&db)) {
    62ba:	b15b      	cbz	r3, 62d4 <gatt_register+0x24>
    62bc:	6863      	ldr	r3, [r4, #4]
		handle = 0;
		goto populate;
	}

	last = SYS_SLIST_PEEK_TAIL_CONTAINER(&db, last, node);
    62be:	2b00      	cmp	r3, #0
    62c0:	d035      	beq.n	632e <gatt_register+0x7e>
	handle = last->attrs[last->attr_count - 1].handle;
    62c2:	f833 5c04 	ldrh.w	r5, [r3, #-4]
    62c6:	f853 3c08 	ldr.w	r3, [r3, #-8]
    62ca:	2614      	movs	r6, #20
    62cc:	fb06 3305 	mla	r3, r6, r5, r3
    62d0:	f833 3c04 	ldrh.w	r3, [r3, #-4]
    62d4:	2514      	movs	r5, #20
    62d6:	fb05 2501 	mla	r5, r5, r1, r2

populate:
	/* Populate the handles and append them to the list */
	for (; attrs && count; attrs++, count--) {
    62da:	b1d2      	cbz	r2, 6312 <gatt_register+0x62>
    62dc:	42aa      	cmp	r2, r5
    62de:	d018      	beq.n	6312 <gatt_register+0x62>
		if (!attrs->handle) {
    62e0:	8a11      	ldrh	r1, [r2, #16]
    62e2:	b919      	cbnz	r1, 62ec <gatt_register+0x3c>
			/* Allocate handle if not set already */
			attrs->handle = ++handle;
    62e4:	3301      	adds	r3, #1
    62e6:	b299      	uxth	r1, r3
    62e8:	8211      	strh	r1, [r2, #16]
    62ea:	e00f      	b.n	630c <gatt_register+0x5c>
		} else if (attrs->handle > handle) {
    62ec:	428b      	cmp	r3, r1
    62ee:	d30d      	bcc.n	630c <gatt_register+0x5c>
			/* Use existing handle if valid */
			handle = attrs->handle;
		} else {
			/* Service has conflicting handles */
			BT_ERR("Unable to register handle 0x%04x",
    62f0:	4b12      	ldr	r3, [pc, #72]	; (633c <gatt_register+0x8c>)
    62f2:	9302      	str	r3, [sp, #8]
    62f4:	4b12      	ldr	r3, [pc, #72]	; (6340 <gatt_register+0x90>)
    62f6:	9101      	str	r1, [sp, #4]
    62f8:	9300      	str	r3, [sp, #0]
    62fa:	4a12      	ldr	r2, [pc, #72]	; (6344 <gatt_register+0x94>)
    62fc:	4b12      	ldr	r3, [pc, #72]	; (6348 <gatt_register+0x98>)
    62fe:	4913      	ldr	r1, [pc, #76]	; (634c <gatt_register+0x9c>)
    6300:	4813      	ldr	r0, [pc, #76]	; (6350 <gatt_register+0xa0>)
    6302:	f7fb f8bd 	bl	1480 <printk>
			       attrs->handle);
			return -EINVAL;
    6306:	f06f 0015 	mvn.w	r0, #21
    630a:	e012      	b.n	6332 <gatt_register+0x82>
	last = SYS_SLIST_PEEK_TAIL_CONTAINER(&db, last, node);
	handle = last->attrs[last->attr_count - 1].handle;

populate:
	/* Populate the handles and append them to the list */
	for (; attrs && count; attrs++, count--) {
    630c:	3214      	adds	r2, #20
    630e:	460b      	mov	r3, r1
    6310:	e7e3      	b.n	62da <gatt_register+0x2a>
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node)
{
	node->next = NULL;
    6312:	2300      	movs	r3, #0
		BT_DBG("attr %p handle 0x%04x uuid %s perm 0x%02x",
		       attrs, attrs->handle, bt_uuid_str(attrs->uuid),
		       attrs->perm);
	}

	sys_slist_append(&db, &svc->node);
    6314:	f100 0208 	add.w	r2, r0, #8
    6318:	6083      	str	r3, [r0, #8]

	if (!list->tail) {
    631a:	6860      	ldr	r0, [r4, #4]
    631c:	4906      	ldr	r1, [pc, #24]	; (6338 <gatt_register+0x88>)
    631e:	b910      	cbnz	r0, 6326 <gatt_register+0x76>
		list->tail = node;
    6320:	604a      	str	r2, [r1, #4]
		list->head = node;
    6322:	600a      	str	r2, [r1, #0]
    6324:	e005      	b.n	6332 <gatt_register+0x82>
	} else {
		list->tail->next = node;
    6326:	6002      	str	r2, [r0, #0]
		list->tail = node;
    6328:	604a      	str	r2, [r1, #4]

	return 0;
    632a:	4618      	mov	r0, r3
    632c:	e001      	b.n	6332 <gatt_register+0x82>
		handle = 0;
		goto populate;
	}

	last = SYS_SLIST_PEEK_TAIL_CONTAINER(&db, last, node);
	handle = last->attrs[last->attr_count - 1].handle;
    632e:	681b      	ldr	r3, [r3, #0]
    6330:	deff      	udf	#255	; 0xff
	}

	sys_slist_append(&db, &svc->node);

	return 0;
}
    6332:	b004      	add	sp, #16
    6334:	bd70      	pop	{r4, r5, r6, pc}
    6336:	bf00      	nop
    6338:	20000d98 	.word	0x20000d98
    633c:	00013df4 	.word	0x00013df4
    6340:	00013df9 	.word	0x00013df9
    6344:	00013db4 	.word	0x00013db4
    6348:	000163f4 	.word	0x000163f4
    634c:	00013dbb 	.word	0x00013dbb
    6350:	00014b03 	.word	0x00014b03

00006354 <gatt_notify>:
	struct bt_gatt_indicate_params *params;
};

static int gatt_notify(struct bt_conn *conn, u16_t handle, const void *data,
		       size_t len)
{
    6354:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    6358:	468a      	mov	sl, r1
    635a:	4691      	mov	r9, r2
	struct net_buf *buf;
	struct bt_att_notify *nfy;

	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY, sizeof(*nfy) + len);
    635c:	211b      	movs	r1, #27
    635e:	1c9a      	adds	r2, r3, #2
	struct bt_gatt_indicate_params *params;
};

static int gatt_notify(struct bt_conn *conn, u16_t handle, const void *data,
		       size_t len)
{
    6360:	4680      	mov	r8, r0
    6362:	461e      	mov	r6, r3
	struct net_buf *buf;
	struct bt_att_notify *nfy;

	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY, sizeof(*nfy) + len);
    6364:	f7ff fa52 	bl	580c <bt_att_create_pdu>
	if (!buf) {
    6368:	4604      	mov	r4, r0
    636a:	b960      	cbnz	r0, 6386 <gatt_notify+0x32>
		BT_WARN("No buffer available to send notification");
    636c:	4b14      	ldr	r3, [pc, #80]	; (63c0 <gatt_notify+0x6c>)
    636e:	9301      	str	r3, [sp, #4]
    6370:	4b14      	ldr	r3, [pc, #80]	; (63c4 <gatt_notify+0x70>)
    6372:	9300      	str	r3, [sp, #0]
    6374:	4a14      	ldr	r2, [pc, #80]	; (63c8 <gatt_notify+0x74>)
    6376:	4b15      	ldr	r3, [pc, #84]	; (63cc <gatt_notify+0x78>)
    6378:	4915      	ldr	r1, [pc, #84]	; (63d0 <gatt_notify+0x7c>)
    637a:	4816      	ldr	r0, [pc, #88]	; (63d4 <gatt_notify+0x80>)
    637c:	f7fb f880 	bl	1480 <printk>
    6380:	f06f 000b 	mvn.w	r0, #11
    6384:	e018      	b.n	63b8 <gatt_notify+0x64>
		return -ENOMEM;
	}

	BT_DBG("conn %p handle 0x%04x", conn, handle);

	nfy = net_buf_add(buf, sizeof(*nfy));
    6386:	f100 0708 	add.w	r7, r0, #8
    638a:	2102      	movs	r1, #2
    638c:	4638      	mov	r0, r7
    638e:	f00b fc3d 	bl	11c0c <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
    6392:	4605      	mov	r5, r0

	net_buf_add(buf, len);
    6394:	4631      	mov	r1, r6
	}

	BT_DBG("conn %p handle 0x%04x", conn, handle);

	nfy = net_buf_add(buf, sizeof(*nfy));
	nfy->handle = sys_cpu_to_le16(handle);
    6396:	f825 ab02 	strh.w	sl, [r5], #2

	net_buf_add(buf, len);
    639a:	4638      	mov	r0, r7
    639c:	f00b fc36 	bl	11c0c <net_buf_simple_add>
	memcpy(nfy->value, data, len);
    63a0:	4632      	mov	r2, r6
    63a2:	4649      	mov	r1, r9
    63a4:	4628      	mov	r0, r5
    63a6:	f7fa fe74 	bl	1092 <memcpy>
    63aa:	4640      	mov	r0, r8
    63ac:	2300      	movs	r3, #0
    63ae:	4622      	mov	r2, r4
    63b0:	2104      	movs	r1, #4
    63b2:	f7fe fbd3 	bl	4b5c <bt_l2cap_send_cb>

	bt_l2cap_send(conn, BT_L2CAP_CID_ATT, buf);

	return 0;
    63b6:	2000      	movs	r0, #0
}
    63b8:	b002      	add	sp, #8
    63ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    63be:	bf00      	nop
    63c0:	00013df4 	.word	0x00013df4
    63c4:	00013e3f 	.word	0x00013e3f
    63c8:	00013e01 	.word	0x00013e01
    63cc:	000163c7 	.word	0x000163c7
    63d0:	00013dbb 	.word	0x00013dbb
    63d4:	00014b34 	.word	0x00014b34

000063d8 <gatt_indicate>:
	return err;
}

static int gatt_indicate(struct bt_conn *conn,
			 struct bt_gatt_indicate_params *params)
{
    63d8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct net_buf *buf;
	struct bt_att_indicate *ind;

	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    63dc:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
	return err;
}

static int gatt_indicate(struct bt_conn *conn,
			 struct bt_gatt_indicate_params *params)
{
    63de:	460c      	mov	r4, r1
	struct net_buf *buf;
	struct bt_att_indicate *ind;

	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    63e0:	3202      	adds	r2, #2
    63e2:	211d      	movs	r1, #29
	return err;
}

static int gatt_indicate(struct bt_conn *conn,
			 struct bt_gatt_indicate_params *params)
{
    63e4:	4680      	mov	r8, r0
	struct net_buf *buf;
	struct bt_att_indicate *ind;

	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    63e6:	f7ff fa11 	bl	580c <bt_att_create_pdu>
				sizeof(*ind) + params->len);
	if (!buf) {
    63ea:	4605      	mov	r5, r0
    63ec:	b960      	cbnz	r0, 6408 <gatt_indicate+0x30>
		BT_WARN("No buffer available to send indication");
    63ee:	4b1f      	ldr	r3, [pc, #124]	; (646c <gatt_indicate+0x94>)
    63f0:	9301      	str	r3, [sp, #4]
    63f2:	4b1f      	ldr	r3, [pc, #124]	; (6470 <gatt_indicate+0x98>)
    63f4:	9300      	str	r3, [sp, #0]
    63f6:	4a1f      	ldr	r2, [pc, #124]	; (6474 <gatt_indicate+0x9c>)
    63f8:	4b1f      	ldr	r3, [pc, #124]	; (6478 <gatt_indicate+0xa0>)
    63fa:	4920      	ldr	r1, [pc, #128]	; (647c <gatt_indicate+0xa4>)
    63fc:	4820      	ldr	r0, [pc, #128]	; (6480 <gatt_indicate+0xa8>)
    63fe:	f7fb f83f 	bl	1480 <printk>
    6402:	f06f 000b 	mvn.w	r0, #11
    6406:	e02d      	b.n	6464 <gatt_indicate+0x8c>
		return -ENOMEM;
	}

	BT_DBG("conn %p handle 0x%04x", conn, params->attr->handle);

	ind = net_buf_add(buf, sizeof(*ind));
    6408:	f100 0608 	add.w	r6, r0, #8
    640c:	2102      	movs	r1, #2
    640e:	4630      	mov	r0, r6
    6410:	f00b fbfc 	bl	11c0c <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(params->attr->handle);
    6414:	69a3      	ldr	r3, [r4, #24]

	net_buf_add(buf, params->len);
    6416:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
	}

	BT_DBG("conn %p handle 0x%04x", conn, params->attr->handle);

	ind = net_buf_add(buf, sizeof(*ind));
	ind->handle = sys_cpu_to_le16(params->attr->handle);
    6418:	8a1b      	ldrh	r3, [r3, #16]
    641a:	4607      	mov	r7, r0

	net_buf_add(buf, params->len);
    641c:	4630      	mov	r0, r6
	}

	BT_DBG("conn %p handle 0x%04x", conn, params->attr->handle);

	ind = net_buf_add(buf, sizeof(*ind));
	ind->handle = sys_cpu_to_le16(params->attr->handle);
    641e:	f827 3b02 	strh.w	r3, [r7], #2

	net_buf_add(buf, params->len);
    6422:	f00b fbf3 	bl	11c0c <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
    6426:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
    6428:	6a21      	ldr	r1, [r4, #32]
    642a:	4638      	mov	r0, r7
    642c:	f7fa fe31 	bl	1092 <memcpy>

	if (params) {
		struct bt_att_req *req = params;

		req->buf = buf;
		req->func = func;
    6430:	4b14      	ldr	r3, [pc, #80]	; (6484 <gatt_indicate+0xac>)
    6432:	6063      	str	r3, [r4, #4]
		req->destroy = destroy;
    6434:	2300      	movs	r3, #0
	int err;

	if (params) {
		struct bt_att_req *req = params;

		req->buf = buf;
    6436:	6125      	str	r5, [r4, #16]
		req->func = func;
		req->destroy = destroy;
    6438:	60a3      	str	r3, [r4, #8]

		err = bt_att_req_send(conn, req);
    643a:	4621      	mov	r1, r4
    643c:	4640      	mov	r0, r8
    643e:	f7ff fe49 	bl	60d4 <bt_att_req_send>
	} else {
		err = bt_att_send(conn, buf);
	}

	if (err) {
    6442:	4604      	mov	r4, r0
    6444:	b168      	cbz	r0, 6462 <gatt_indicate+0x8a>
		BT_ERR("Error sending ATT PDU: %d", err);
    6446:	4b09      	ldr	r3, [pc, #36]	; (646c <gatt_indicate+0x94>)
    6448:	9302      	str	r3, [sp, #8]
    644a:	4b0f      	ldr	r3, [pc, #60]	; (6488 <gatt_indicate+0xb0>)
    644c:	9001      	str	r0, [sp, #4]
    644e:	9300      	str	r3, [sp, #0]
    6450:	4a0e      	ldr	r2, [pc, #56]	; (648c <gatt_indicate+0xb4>)
    6452:	4b0f      	ldr	r3, [pc, #60]	; (6490 <gatt_indicate+0xb8>)
    6454:	4909      	ldr	r1, [pc, #36]	; (647c <gatt_indicate+0xa4>)
    6456:	480f      	ldr	r0, [pc, #60]	; (6494 <gatt_indicate+0xbc>)
    6458:	f7fb f812 	bl	1480 <printk>
		net_buf_unref(buf);
    645c:	4628      	mov	r0, r5
    645e:	f00b fbb5 	bl	11bcc <net_buf_unref>
		err = bt_att_req_send(conn, req);
	} else {
		err = bt_att_send(conn, buf);
	}

	if (err) {
    6462:	4620      	mov	r0, r4

	net_buf_add(buf, params->len);
	memcpy(ind->value, params->data, params->len);

	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
}
    6464:	b004      	add	sp, #16
    6466:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    646a:	bf00      	nop
    646c:	00013df4 	.word	0x00013df4
    6470:	00013e3f 	.word	0x00013e3f
    6474:	00013e01 	.word	0x00013e01
    6478:	00016419 	.word	0x00016419
    647c:	00013dbb 	.word	0x00013dbb
    6480:	00014b6d 	.word	0x00014b6d
    6484:	0000615b 	.word	0x0000615b
    6488:	00013df9 	.word	0x00013df9
    648c:	00013db4 	.word	0x00013db4
    6490:	000163ea 	.word	0x000163ea
    6494:	00014ba4 	.word	0x00014ba4

00006498 <notify_cb>:

static u8_t notify_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    6498:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	struct notify_data *data = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC)) {
    649c:	f642 1302 	movw	r3, #10498	; 0x2902

	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
}

static u8_t notify_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    64a0:	4605      	mov	r5, r0
    64a2:	460f      	mov	r7, r1
	struct notify_data *data = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC)) {
    64a4:	2400      	movs	r4, #0
    64a6:	4669      	mov	r1, sp
    64a8:	6800      	ldr	r0, [r0, #0]
    64aa:	f88d 4000 	strb.w	r4, [sp]
    64ae:	f8ad 3002 	strh.w	r3, [sp, #2]
    64b2:	f7fb fd15 	bl	1ee0 <bt_uuid_cmp>
    64b6:	b168      	cbz	r0, 64d4 <notify_cb+0x3c>
		/* Stop if we reach the next characteristic */
		if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
    64b8:	f642 0303 	movw	r3, #10243	; 0x2803
    64bc:	6828      	ldr	r0, [r5, #0]
    64be:	f88d 4004 	strb.w	r4, [sp, #4]
    64c2:	a901      	add	r1, sp, #4
    64c4:	f8ad 3006 	strh.w	r3, [sp, #6]
    64c8:	f7fb fd0a 	bl	1ee0 <bt_uuid_cmp>
			return BT_GATT_ITER_STOP;
    64cc:	1b00      	subs	r0, r0, r4
    64ce:	bf18      	it	ne
    64d0:	2001      	movne	r0, #1
    64d2:	e03b      	b.n	654c <notify_cb+0xb4>
		}
		return BT_GATT_ITER_CONTINUE;
	}

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    64d4:	68aa      	ldr	r2, [r5, #8]
    64d6:	4b1f      	ldr	r3, [pc, #124]	; (6554 <notify_cb+0xbc>)
    64d8:	429a      	cmp	r2, r3
    64da:	d001      	beq.n	64e0 <notify_cb+0x48>
		return BT_GATT_ITER_CONTINUE;
    64dc:	2001      	movs	r0, #1
    64de:	e035      	b.n	654c <notify_cb+0xb4>
	}

	ccc = attr->user_data;
    64e0:	f8d5 800c 	ldr.w	r8, [r5, #12]

	/* Notify all peers configured */
	for (i = 0; i < ccc->cfg_len; i++) {
    64e4:	4604      	mov	r4, r0

		if (ccc->value != data->type) {
			continue;
		}

		conn = bt_conn_lookup_addr_le(&ccc->cfg[i].peer);
    64e6:	f04f 090c 	mov.w	r9, #12
    64ea:	4682      	mov	sl, r0
	}

	ccc = attr->user_data;

	/* Notify all peers configured */
	for (i = 0; i < ccc->cfg_len; i++) {
    64ec:	f8d8 3004 	ldr.w	r3, [r8, #4]
    64f0:	429c      	cmp	r4, r3
    64f2:	d2f3      	bcs.n	64dc <notify_cb+0x44>
		struct bt_conn *conn;
		int err;

		if (ccc->value != data->type) {
    64f4:	f8b8 2008 	ldrh.w	r2, [r8, #8]
    64f8:	88bb      	ldrh	r3, [r7, #4]
    64fa:	429a      	cmp	r2, r3
    64fc:	d123      	bne.n	6546 <notify_cb+0xae>
			continue;
		}

		conn = bt_conn_lookup_addr_le(&ccc->cfg[i].peer);
    64fe:	f8d8 0000 	ldr.w	r0, [r8]
    6502:	fb09 0004 	mla	r0, r9, r4, r0
    6506:	f7fe f847 	bl	4598 <bt_conn_lookup_addr_le>
		if (!conn) {
    650a:	4606      	mov	r6, r0
    650c:	b1d8      	cbz	r0, 6546 <notify_cb+0xae>
			continue;
		}

		if (conn->state != BT_CONN_CONNECTED) {
    650e:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
    6512:	2b03      	cmp	r3, #3
    6514:	d002      	beq.n	651c <notify_cb+0x84>
			bt_conn_unref(conn);
    6516:	f7fe f882 	bl	461e <bt_conn_unref>
    651a:	e014      	b.n	6546 <notify_cb+0xae>
			continue;
		}

		if (data->type == BT_GATT_CCC_INDICATE) {
    651c:	88bb      	ldrh	r3, [r7, #4]
    651e:	2b02      	cmp	r3, #2
    6520:	d103      	bne.n	652a <notify_cb+0x92>
			err = gatt_indicate(conn, data->params);
    6522:	6979      	ldr	r1, [r7, #20]
    6524:	f7ff ff58 	bl	63d8 <gatt_indicate>
    6528:	e005      	b.n	6536 <notify_cb+0x9e>
		} else {
			err = gatt_notify(conn, data->attr->handle, data->data,
    652a:	68b9      	ldr	r1, [r7, #8]
    652c:	8a3b      	ldrh	r3, [r7, #16]
    652e:	68fa      	ldr	r2, [r7, #12]
    6530:	8a09      	ldrh	r1, [r1, #16]
    6532:	f7ff ff0f 	bl	6354 <gatt_notify>
    6536:	4605      	mov	r5, r0
					 data->len);
		}

		bt_conn_unref(conn);
    6538:	4630      	mov	r0, r6
    653a:	f7fe f870 	bl	461e <bt_conn_unref>

		if (err < 0) {
    653e:	2d00      	cmp	r5, #0
    6540:	db03      	blt.n	654a <notify_cb+0xb2>
			return BT_GATT_ITER_STOP;
		}

		data->err = 0;
    6542:	f8c7 a000 	str.w	sl, [r7]
	}

	ccc = attr->user_data;

	/* Notify all peers configured */
	for (i = 0; i < ccc->cfg_len; i++) {
    6546:	3401      	adds	r4, #1
    6548:	e7d0      	b.n	64ec <notify_cb+0x54>
		}

		bt_conn_unref(conn);

		if (err < 0) {
			return BT_GATT_ITER_STOP;
    654a:	2000      	movs	r0, #0

		data->err = 0;
	}

	return BT_GATT_ITER_CONTINUE;
}
    654c:	b002      	add	sp, #8
    654e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6552:	bf00      	nop
    6554:	00006179 	.word	0x00006179

00006558 <disconnected_cb>:
	struct bt_conn *conn = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    6558:	6882      	ldr	r2, [r0, #8]
    655a:	4b28      	ldr	r3, [pc, #160]	; (65fc <disconnected_cb+0xa4>)
    655c:	429a      	cmp	r2, r3

	return BT_GATT_ITER_CONTINUE;
}

static u8_t disconnected_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    655e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6562:	4607      	mov	r7, r0
    6564:	4688      	mov	r8, r1
	struct bt_conn *conn = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    6566:	d145      	bne.n	65f4 <disconnected_cb+0x9c>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
    6568:	68c4      	ldr	r4, [r0, #12]

	/* If already disabled skip */
	if (!ccc->value) {
    656a:	8923      	ldrh	r3, [r4, #8]
    656c:	2b00      	cmp	r3, #0
    656e:	d041      	beq.n	65f4 <disconnected_cb+0x9c>
    6570:	2600      	movs	r6, #0
    6572:	f04f 0a0c 	mov.w	sl, #12

				bt_conn_unref(tmp);
			}
		} else {
			/* Clear value if not paired */
			if (!bt_addr_le_is_bonded(&conn->le.dst)) {
    6576:	f101 0954 	add.w	r9, r1, #84	; 0x54
	/* If already disabled skip */
	if (!ccc->value) {
		return BT_GATT_ITER_CONTINUE;
	}

	for (i = 0; i < ccc->cfg_len; i++) {
    657a:	6863      	ldr	r3, [r4, #4]
    657c:	429e      	cmp	r6, r3
    657e:	d22e      	bcs.n	65de <disconnected_cb+0x86>
		/* Ignore configurations with disabled value */
		if (!ccc->cfg[i].value) {
    6580:	6821      	ldr	r1, [r4, #0]
    6582:	fb0a f506 	mul.w	r5, sl, r6
    6586:	4429      	add	r1, r5
    6588:	890b      	ldrh	r3, [r1, #8]
    658a:	b333      	cbz	r3, 65da <disconnected_cb+0x82>
			continue;
		}

		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    658c:	4640      	mov	r0, r8
    658e:	f7fd ffeb 	bl	4568 <bt_conn_addr_le_cmp>
    6592:	b170      	cbz	r0, 65b2 <disconnected_cb+0x5a>
			struct bt_conn *tmp;

			/* Skip if there is another peer connected */
			tmp = bt_conn_lookup_addr_le(&ccc->cfg[i].peer);
    6594:	6820      	ldr	r0, [r4, #0]
    6596:	4428      	add	r0, r5
    6598:	f7fd fffe 	bl	4598 <bt_conn_lookup_addr_le>
			if (tmp) {
    659c:	b1e8      	cbz	r0, 65da <disconnected_cb+0x82>
				if (tmp->state == BT_CONN_CONNECTED) {
    659e:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
    65a2:	2b03      	cmp	r3, #3
    65a4:	d102      	bne.n	65ac <disconnected_cb+0x54>
					bt_conn_unref(tmp);
    65a6:	f7fe f83a 	bl	461e <bt_conn_unref>
    65aa:	e023      	b.n	65f4 <disconnected_cb+0x9c>
					return BT_GATT_ITER_CONTINUE;
				}

				bt_conn_unref(tmp);
    65ac:	f7fe f837 	bl	461e <bt_conn_unref>
    65b0:	e013      	b.n	65da <disconnected_cb+0x82>
			}
		} else {
			/* Clear value if not paired */
			if (!bt_addr_le_is_bonded(&conn->le.dst)) {
    65b2:	4648      	mov	r0, r9
    65b4:	f7fd fab6 	bl	3b24 <bt_addr_le_is_bonded>
    65b8:	4601      	mov	r1, r0
    65ba:	6820      	ldr	r0, [r4, #0]
    65bc:	b941      	cbnz	r1, 65d0 <disconnected_cb+0x78>
				ccc->cfg[i].valid = false;
    65be:	1943      	adds	r3, r0, r5
				memset(&ccc->cfg[i].value, 0,
    65c0:	2202      	movs	r2, #2
				bt_conn_unref(tmp);
			}
		} else {
			/* Clear value if not paired */
			if (!bt_addr_le_is_bonded(&conn->le.dst)) {
				ccc->cfg[i].valid = false;
    65c2:	7299      	strb	r1, [r3, #10]
				memset(&ccc->cfg[i].value, 0,
    65c4:	6823      	ldr	r3, [r4, #0]
    65c6:	1958      	adds	r0, r3, r5
    65c8:	3008      	adds	r0, #8
    65ca:	f7fa fd8e 	bl	10ea <memset>
    65ce:	e004      	b.n	65da <disconnected_cb+0x82>
    65d0:	2207      	movs	r2, #7
    65d2:	4649      	mov	r1, r9
    65d4:	4428      	add	r0, r5
    65d6:	f7fa fd5c 	bl	1092 <memcpy>
	/* If already disabled skip */
	if (!ccc->value) {
		return BT_GATT_ITER_CONTINUE;
	}

	for (i = 0; i < ccc->cfg_len; i++) {
    65da:	3601      	adds	r6, #1
    65dc:	e7cd      	b.n	657a <disconnected_cb+0x22>
			}
		}
	}

	/* Reset value while disconnected */
	memset(&ccc->value, 0, sizeof(ccc->value));
    65de:	2202      	movs	r2, #2
    65e0:	2100      	movs	r1, #0
    65e2:	f104 0008 	add.w	r0, r4, #8
    65e6:	f7fa fd80 	bl	10ea <memset>
	if (ccc->cfg_changed) {
    65ea:	68e3      	ldr	r3, [r4, #12]
    65ec:	b113      	cbz	r3, 65f4 <disconnected_cb+0x9c>
		ccc->cfg_changed(attr, ccc->value);
    65ee:	8921      	ldrh	r1, [r4, #8]
    65f0:	4638      	mov	r0, r7
    65f2:	4798      	blx	r3
	}

	BT_DBG("ccc %p reseted", ccc);

	return BT_GATT_ITER_CONTINUE;
}
    65f4:	2001      	movs	r0, #1
    65f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    65fa:	bf00      	nop
    65fc:	00006179 	.word	0x00006179

00006600 <bt_gatt_init>:

	return 0;
}

void bt_gatt_init(void)
{
    6600:	b508      	push	{r3, lr}
	/* Register mandatory services */
	gatt_register(&gap_svc);
    6602:	4804      	ldr	r0, [pc, #16]	; (6614 <bt_gatt_init+0x14>)
    6604:	f7ff fe54 	bl	62b0 <gatt_register>
	gatt_register(&gatt_svc);
    6608:	4803      	ldr	r0, [pc, #12]	; (6618 <bt_gatt_init+0x18>)
}
    660a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

void bt_gatt_init(void)
{
	/* Register mandatory services */
	gatt_register(&gap_svc);
	gatt_register(&gatt_svc);
    660e:	f7ff be4f 	b.w	62b0 <gatt_register>
    6612:	bf00      	nop
    6614:	200004a8 	.word	0x200004a8
    6618:	200004bc 	.word	0x200004bc

0000661c <bt_gatt_attr_read>:
}

ssize_t bt_gatt_attr_read(struct bt_conn *conn, const struct bt_gatt_attr *attr,
			  void *buf, u16_t buf_len, u16_t offset,
			  const void *value, u16_t value_len)
{
    661c:	b510      	push	{r4, lr}
    661e:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    6622:	f8bd 4010 	ldrh.w	r4, [sp, #16]
	u16_t len;

	if (offset > value_len) {
    6626:	42a1      	cmp	r1, r4
}

ssize_t bt_gatt_attr_read(struct bt_conn *conn, const struct bt_gatt_attr *attr,
			  void *buf, u16_t buf_len, u16_t offset,
			  const void *value, u16_t value_len)
{
    6628:	4610      	mov	r0, r2
	u16_t len;

	if (offset > value_len) {
    662a:	d80a      	bhi.n	6642 <bt_gatt_attr_read+0x26>
    662c:	1a64      	subs	r4, r4, r1
    662e:	42a3      	cmp	r3, r4
    6630:	bfa8      	it	ge
    6632:	4623      	movge	r3, r4
    6634:	b29c      	uxth	r4, r3
	len = min(buf_len, value_len - offset);

	BT_DBG("handle 0x%04x offset %u length %u", attr->handle, offset,
	       len);

	memcpy(buf, value + offset, len);
    6636:	9b03      	ldr	r3, [sp, #12]
    6638:	4622      	mov	r2, r4
    663a:	4419      	add	r1, r3
    663c:	f7fa fd29 	bl	1092 <memcpy>

	return len;
    6640:	e001      	b.n	6646 <bt_gatt_attr_read+0x2a>
			  const void *value, u16_t value_len)
{
	u16_t len;

	if (offset > value_len) {
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    6642:	f06f 0406 	mvn.w	r4, #6
	       len);

	memcpy(buf, value + offset, len);

	return len;
}
    6646:	4620      	mov	r0, r4
    6648:	bd10      	pop	{r4, pc}

0000664a <read_appearance>:
}

static ssize_t read_appearance(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, void *buf,
			       u16_t len, u16_t offset)
{
    664a:	b530      	push	{r4, r5, lr}
    664c:	b087      	sub	sp, #28
	u16_t appearance = sys_cpu_to_le16(gap_appearance);
    664e:	ac06      	add	r4, sp, #24
    6650:	f240 3541 	movw	r5, #833	; 0x341
    6654:	f824 5d02 	strh.w	r5, [r4, #-2]!

	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
    6658:	2502      	movs	r5, #2
    665a:	9401      	str	r4, [sp, #4]
    665c:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
    6660:	9502      	str	r5, [sp, #8]
    6662:	9400      	str	r4, [sp, #0]
    6664:	f7ff ffda 	bl	661c <bt_gatt_attr_read>
				 sizeof(appearance));
}
    6668:	b007      	add	sp, #28
    666a:	bd30      	pop	{r4, r5, pc}

0000666c <read_name>:

static sys_slist_t db;

static ssize_t read_name(struct bt_conn *conn, const struct bt_gatt_attr *attr,
			 void *buf, u16_t len, u16_t offset)
{
    666c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, gap_name,
				 strlen(gap_name));
    6670:	4c0b      	ldr	r4, [pc, #44]	; (66a0 <read_name+0x34>)

static sys_slist_t db;

static ssize_t read_name(struct bt_conn *conn, const struct bt_gatt_attr *attr,
			 void *buf, u16_t len, u16_t offset)
{
    6672:	4605      	mov	r5, r0
	return bt_gatt_attr_read(conn, attr, buf, len, offset, gap_name,
				 strlen(gap_name));
    6674:	4620      	mov	r0, r4

static sys_slist_t db;

static ssize_t read_name(struct bt_conn *conn, const struct bt_gatt_attr *attr,
			 void *buf, u16_t len, u16_t offset)
{
    6676:	4698      	mov	r8, r3
    6678:	460e      	mov	r6, r1
    667a:	4617      	mov	r7, r2
	return bt_gatt_attr_read(conn, attr, buf, len, offset, gap_name,
				 strlen(gap_name));
    667c:	f7fa fcc4 	bl	1008 <strlen>
static sys_slist_t db;

static ssize_t read_name(struct bt_conn *conn, const struct bt_gatt_attr *attr,
			 void *buf, u16_t len, u16_t offset)
{
	return bt_gatt_attr_read(conn, attr, buf, len, offset, gap_name,
    6680:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    6684:	9300      	str	r3, [sp, #0]
    6686:	b280      	uxth	r0, r0
    6688:	9002      	str	r0, [sp, #8]
    668a:	9401      	str	r4, [sp, #4]
    668c:	4643      	mov	r3, r8
    668e:	463a      	mov	r2, r7
    6690:	4631      	mov	r1, r6
    6692:	4628      	mov	r0, r5
    6694:	f7ff ffc2 	bl	661c <bt_gatt_attr_read>
				 strlen(gap_name));
}
    6698:	b004      	add	sp, #16
    669a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    669e:	bf00      	nop
    66a0:	00013b6a 	.word	0x00013b6a

000066a4 <bt_gatt_attr_read_service>:
}

ssize_t bt_gatt_attr_read_service(struct bt_conn *conn,
				  const struct bt_gatt_attr *attr,
				  void *buf, u16_t len, u16_t offset)
{
    66a4:	b570      	push	{r4, r5, r6, lr}
	struct bt_uuid *uuid = attr->user_data;
    66a6:	68cc      	ldr	r4, [r1, #12]
}

ssize_t bt_gatt_attr_read_service(struct bt_conn *conn,
				  const struct bt_gatt_attr *attr,
				  void *buf, u16_t len, u16_t offset)
{
    66a8:	b086      	sub	sp, #24
	struct bt_uuid *uuid = attr->user_data;

	if (uuid->type == BT_UUID_TYPE_16) {
    66aa:	7826      	ldrb	r6, [r4, #0]
}

ssize_t bt_gatt_attr_read_service(struct bt_conn *conn,
				  const struct bt_gatt_attr *attr,
				  void *buf, u16_t len, u16_t offset)
{
    66ac:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
	struct bt_uuid *uuid = attr->user_data;

	if (uuid->type == BT_UUID_TYPE_16) {
    66b0:	b936      	cbnz	r6, 66c0 <bt_gatt_attr_read_service+0x1c>
		u16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
    66b2:	8866      	ldrh	r6, [r4, #2]
    66b4:	ac06      	add	r4, sp, #24
    66b6:	f824 6d02 	strh.w	r6, [r4, #-2]!

		return bt_gatt_attr_read(conn, attr, buf, len, offset,
    66ba:	2602      	movs	r6, #2
    66bc:	9602      	str	r6, [sp, #8]
    66be:	e002      	b.n	66c6 <bt_gatt_attr_read_service+0x22>
					 &uuid16, 2);
	}

	return bt_gatt_attr_read(conn, attr, buf, len, offset,
    66c0:	2610      	movs	r6, #16
    66c2:	9602      	str	r6, [sp, #8]
				 BT_UUID_128(uuid)->val, 16);
    66c4:	3401      	adds	r4, #1

		return bt_gatt_attr_read(conn, attr, buf, len, offset,
					 &uuid16, 2);
	}

	return bt_gatt_attr_read(conn, attr, buf, len, offset,
    66c6:	9401      	str	r4, [sp, #4]
    66c8:	9500      	str	r5, [sp, #0]
    66ca:	f7ff ffa7 	bl	661c <bt_gatt_attr_read>
				 BT_UUID_128(uuid)->val, 16);
}
    66ce:	b006      	add	sp, #24
    66d0:	bd70      	pop	{r4, r5, r6, pc}

000066d2 <bt_gatt_attr_read_ccc>:
}

ssize_t bt_gatt_attr_read_ccc(struct bt_conn *conn,
			      const struct bt_gatt_attr *attr, void *buf,
			      u16_t len, u16_t offset)
{
    66d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct _bt_gatt_ccc *ccc = attr->user_data;
    66d6:	68cd      	ldr	r5, [r1, #12]
}

ssize_t bt_gatt_attr_read_ccc(struct bt_conn *conn,
			      const struct bt_gatt_attr *attr, void *buf,
			      u16_t len, u16_t offset)
{
    66d8:	b087      	sub	sp, #28
    66da:	4607      	mov	r7, r0
    66dc:	4688      	mov	r8, r1
    66de:	4691      	mov	r9, r2
    66e0:	469a      	mov	sl, r3
	struct _bt_gatt_ccc *ccc = attr->user_data;
	u16_t value;
	size_t i;

	for (i = 0; i < ccc->cfg_len; i++) {
    66e2:	2400      	movs	r4, #0
    66e4:	f04f 0b0c 	mov.w	fp, #12
    66e8:	686b      	ldr	r3, [r5, #4]
    66ea:	429c      	cmp	r4, r3
    66ec:	d20e      	bcs.n	670c <bt_gatt_attr_read_ccc+0x3a>
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    66ee:	6829      	ldr	r1, [r5, #0]
    66f0:	fb0b f604 	mul.w	r6, fp, r4
    66f4:	4431      	add	r1, r6
    66f6:	4638      	mov	r0, r7
    66f8:	f7fd ff36 	bl	4568 <bt_conn_addr_le_cmp>
    66fc:	b108      	cbz	r0, 6702 <bt_gatt_attr_read_ccc+0x30>
{
	struct _bt_gatt_ccc *ccc = attr->user_data;
	u16_t value;
	size_t i;

	for (i = 0; i < ccc->cfg_len; i++) {
    66fe:	3401      	adds	r4, #1
    6700:	e7f2      	b.n	66e8 <bt_gatt_attr_read_ccc+0x16>
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
			continue;
		}

		value = sys_cpu_to_le16(ccc->cfg[i].value);
    6702:	682b      	ldr	r3, [r5, #0]
    6704:	441e      	add	r6, r3
    6706:	8933      	ldrh	r3, [r6, #8]
    6708:	f8ad 3016 	strh.w	r3, [sp, #22]
		break;
	}

	/* Default to disable if there is no cfg for the peer */
	if (i == ccc->cfg_len) {
    670c:	686b      	ldr	r3, [r5, #4]
    670e:	429c      	cmp	r4, r3
		value = 0x0000;
    6710:	bf04      	itt	eq
    6712:	2300      	moveq	r3, #0
    6714:	f8ad 3016 	strheq.w	r3, [sp, #22]
	}

	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
    6718:	2302      	movs	r3, #2
    671a:	9302      	str	r3, [sp, #8]
    671c:	f10d 0316 	add.w	r3, sp, #22
    6720:	9301      	str	r3, [sp, #4]
    6722:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
    6726:	9300      	str	r3, [sp, #0]
    6728:	464a      	mov	r2, r9
    672a:	4653      	mov	r3, sl
    672c:	4641      	mov	r1, r8
    672e:	4638      	mov	r0, r7
    6730:	f7ff ff74 	bl	661c <bt_gatt_attr_read>
				 sizeof(value));
}
    6734:	b007      	add	sp, #28
    6736:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0000673c <bt_gatt_foreach_attr>:
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
}

void bt_gatt_foreach_attr(u16_t start_handle, u16_t end_handle,
			  bt_gatt_attr_func_t func, void *user_data)
{
    673c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6740:	4699      	mov	r9, r3
    6742:	4b12      	ldr	r3, [pc, #72]	; (678c <bt_gatt_foreach_attr+0x50>)
    6744:	681c      	ldr	r4, [r3, #0]
    6746:	4606      	mov	r6, r0
    6748:	460f      	mov	r7, r1
    674a:	4690      	mov	r8, r2
	struct bt_gatt_service *svc;

	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    674c:	b1dc      	cbz	r4, 6786 <bt_gatt_foreach_attr+0x4a>
    674e:	3c08      	subs	r4, #8
		int i;

		for (i = 0; i < svc->attr_count; i++) {
			struct bt_gatt_attr *attr = &svc->attrs[i];
    6750:	f04f 0a14 	mov.w	sl, #20
void bt_gatt_foreach_attr(u16_t start_handle, u16_t end_handle,
			  bt_gatt_attr_func_t func, void *user_data)
{
	struct bt_gatt_service *svc;

	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    6754:	b1bc      	cbz	r4, 6786 <bt_gatt_foreach_attr+0x4a>
    6756:	2500      	movs	r5, #0
		int i;

		for (i = 0; i < svc->attr_count; i++) {
    6758:	88a3      	ldrh	r3, [r4, #4]
    675a:	429d      	cmp	r5, r3
    675c:	da0f      	bge.n	677e <bt_gatt_foreach_attr+0x42>
			struct bt_gatt_attr *attr = &svc->attrs[i];
    675e:	6820      	ldr	r0, [r4, #0]
    6760:	fb0a 0005 	mla	r0, sl, r5, r0

			/* Check if attribute handle is within range */
			if (attr->handle < start_handle ||
    6764:	8a03      	ldrh	r3, [r0, #16]
    6766:	42b3      	cmp	r3, r6
    6768:	d201      	bcs.n	676e <bt_gatt_foreach_attr+0x32>
	struct bt_gatt_service *svc;

	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
		int i;

		for (i = 0; i < svc->attr_count; i++) {
    676a:	3501      	adds	r5, #1
    676c:	e7f4      	b.n	6758 <bt_gatt_foreach_attr+0x1c>
			struct bt_gatt_attr *attr = &svc->attrs[i];

			/* Check if attribute handle is within range */
			if (attr->handle < start_handle ||
    676e:	42bb      	cmp	r3, r7
    6770:	d8fb      	bhi.n	676a <bt_gatt_foreach_attr+0x2e>
			    attr->handle > end_handle) {
				continue;
			}

			if (func(attr, user_data) == BT_GATT_ITER_STOP) {
    6772:	4649      	mov	r1, r9
    6774:	47c0      	blx	r8
    6776:	2800      	cmp	r0, #0
    6778:	d1f7      	bne.n	676a <bt_gatt_foreach_attr+0x2e>
    677a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node)
{
	return node->next;
    677e:	68a4      	ldr	r4, [r4, #8]
void bt_gatt_foreach_attr(u16_t start_handle, u16_t end_handle,
			  bt_gatt_attr_func_t func, void *user_data)
{
	struct bt_gatt_service *svc;

	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    6780:	b10c      	cbz	r4, 6786 <bt_gatt_foreach_attr+0x4a>
    6782:	3c08      	subs	r4, #8
    6784:	e7e6      	b.n	6754 <bt_gatt_foreach_attr+0x18>
    6786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    678a:	bf00      	nop
    678c:	20000d98 	.word	0x20000d98

00006790 <bt_gatt_indicate.part.9>:
	bt_gatt_foreach_attr(attr->handle, 0xffff, notify_cb, &nfy);

	return nfy.err;
}

int bt_gatt_indicate(struct bt_conn *conn,
    6790:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

	if (conn) {
		return gatt_indicate(conn, params);
	}

	nfy.err = -ENOTCONN;
    6792:	f06f 0338 	mvn.w	r3, #56	; 0x38
	nfy.type = BT_GATT_CCC_INDICATE;
	nfy.params = params;
    6796:	9005      	str	r0, [sp, #20]

	bt_gatt_foreach_attr(params->attr->handle, 0xffff, notify_cb, &nfy);
    6798:	6980      	ldr	r0, [r0, #24]

	if (conn) {
		return gatt_indicate(conn, params);
	}

	nfy.err = -ENOTCONN;
    679a:	9300      	str	r3, [sp, #0]
	nfy.type = BT_GATT_CCC_INDICATE;
    679c:	2302      	movs	r3, #2
    679e:	f8ad 3004 	strh.w	r3, [sp, #4]
	nfy.params = params;

	bt_gatt_foreach_attr(params->attr->handle, 0xffff, notify_cb, &nfy);
    67a2:	4a05      	ldr	r2, [pc, #20]	; (67b8 <bt_gatt_indicate.part.9+0x28>)
    67a4:	8a00      	ldrh	r0, [r0, #16]
    67a6:	466b      	mov	r3, sp
    67a8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    67ac:	f7ff ffc6 	bl	673c <bt_gatt_foreach_attr>

	return nfy.err;
}
    67b0:	9800      	ldr	r0, [sp, #0]
    67b2:	b007      	add	sp, #28
    67b4:	f85d fb04 	ldr.w	pc, [sp], #4
    67b8:	00006499 	.word	0x00006499

000067bc <sc_indicate.isra.10>:
	BT_DBG("err 0x%02x", err);

	k_sem_give(&sc_sem);
}

static void sc_indicate(struct bt_gatt_attr *start, struct bt_gatt_attr *end)
    67bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    67be:	4605      	mov	r5, r0
    67c0:	460c      	mov	r4, r1
{
	static struct bt_gatt_indicate_params params;
	u16_t sc_range[2];

	if (k_sem_take(&sc_sem, K_NO_WAIT)) {
    67c2:	4810      	ldr	r0, [pc, #64]	; (6804 <sc_indicate.isra.10+0x48>)
    67c4:	2100      	movs	r1, #0
    67c6:	f00c fd55 	bl	13274 <k_sem_take>
    67ca:	b120      	cbz	r0, 67d6 <sc_indicate.isra.10+0x1a>
		BT_DBG("Service Changed indicating, waiting until complete...");
		k_sem_take(&sc_sem, K_FOREVER);
    67cc:	f04f 31ff 	mov.w	r1, #4294967295
    67d0:	480c      	ldr	r0, [pc, #48]	; (6804 <sc_indicate.isra.10+0x48>)
    67d2:	f00c fd4f 	bl	13274 <k_sem_take>
	}

	sc_range[0] = sys_cpu_to_le16(start->handle);
    67d6:	882b      	ldrh	r3, [r5, #0]
	sc_range[1] = sys_cpu_to_le16(end->handle);

	params.attr = &gatt_attrs[2];
    67d8:	480b      	ldr	r0, [pc, #44]	; (6808 <sc_indicate.isra.10+0x4c>)
	if (k_sem_take(&sc_sem, K_NO_WAIT)) {
		BT_DBG("Service Changed indicating, waiting until complete...");
		k_sem_take(&sc_sem, K_FOREVER);
	}

	sc_range[0] = sys_cpu_to_le16(start->handle);
    67da:	f8ad 3004 	strh.w	r3, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(end->handle);
    67de:	8823      	ldrh	r3, [r4, #0]
    67e0:	f8ad 3006 	strh.w	r3, [sp, #6]

	params.attr = &gatt_attrs[2];
    67e4:	4b09      	ldr	r3, [pc, #36]	; (680c <sc_indicate.isra.10+0x50>)
    67e6:	6183      	str	r3, [r0, #24]
	params.func = sc_indicate_rsp;
    67e8:	4b09      	ldr	r3, [pc, #36]	; (6810 <sc_indicate.isra.10+0x54>)
    67ea:	61c3      	str	r3, [r0, #28]
	params.data = &sc_range[0];
    67ec:	ab01      	add	r3, sp, #4
    67ee:	6203      	str	r3, [r0, #32]
	params.len = sizeof(sc_range);
    67f0:	2304      	movs	r3, #4
    67f2:	8483      	strh	r3, [r0, #36]	; 0x24
    67f4:	f7ff ffcc 	bl	6790 <bt_gatt_indicate.part.9>

	if (!bt_gatt_indicate(NULL, &params)) {
    67f8:	b110      	cbz	r0, 6800 <sc_indicate.isra.10+0x44>
		return;
	}

	k_sem_give(&sc_sem);
    67fa:	4802      	ldr	r0, [pc, #8]	; (6804 <sc_indicate.isra.10+0x48>)
    67fc:	f00c fcf8 	bl	131f0 <k_sem_give>
}
    6800:	b003      	add	sp, #12
    6802:	bd30      	pop	{r4, r5, pc}
    6804:	200004c8 	.word	0x200004c8
    6808:	20000da0 	.word	0x20000da0
    680c:	200003f8 	.word	0x200003f8
    6810:	0000616d 	.word	0x0000616d

00006814 <bt_gatt_service_register>:

int bt_gatt_service_register(struct bt_gatt_service *svc)
{
    6814:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT(svc, "invalid parameters\n");
	__ASSERT(svc->attrs, "invalid parameters\n");
	__ASSERT(svc->attr_count, "invalid parameters\n");

	/* Do no allow to register mandatory services twice */
	if (!bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GAP) ||
    6816:	6803      	ldr	r3, [r0, #0]

	k_sem_give(&sc_sem);
}

int bt_gatt_service_register(struct bt_gatt_service *svc)
{
    6818:	4604      	mov	r4, r0
	__ASSERT(svc, "invalid parameters\n");
	__ASSERT(svc->attrs, "invalid parameters\n");
	__ASSERT(svc->attr_count, "invalid parameters\n");

	/* Do no allow to register mandatory services twice */
	if (!bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GAP) ||
    681a:	2500      	movs	r5, #0
    681c:	6818      	ldr	r0, [r3, #0]
    681e:	f88d 5000 	strb.w	r5, [sp]
    6822:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
    6826:	4669      	mov	r1, sp
    6828:	f8ad 3002 	strh.w	r3, [sp, #2]
    682c:	f7fb fb58 	bl	1ee0 <bt_uuid_cmp>
    6830:	b910      	cbnz	r0, 6838 <bt_gatt_service_register+0x24>
	    !bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GATT)) {
		return -EALREADY;
    6832:	f06f 0044 	mvn.w	r0, #68	; 0x44
    6836:	e01b      	b.n	6870 <bt_gatt_service_register+0x5c>
	__ASSERT(svc->attrs, "invalid parameters\n");
	__ASSERT(svc->attr_count, "invalid parameters\n");

	/* Do no allow to register mandatory services twice */
	if (!bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GAP) ||
	    !bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GATT)) {
    6838:	6823      	ldr	r3, [r4, #0]
    683a:	a901      	add	r1, sp, #4
    683c:	6818      	ldr	r0, [r3, #0]
    683e:	f88d 5004 	strb.w	r5, [sp, #4]
    6842:	f641 0301 	movw	r3, #6145	; 0x1801
    6846:	f8ad 3006 	strh.w	r3, [sp, #6]
    684a:	f7fb fb49 	bl	1ee0 <bt_uuid_cmp>
	__ASSERT(svc, "invalid parameters\n");
	__ASSERT(svc->attrs, "invalid parameters\n");
	__ASSERT(svc->attr_count, "invalid parameters\n");

	/* Do no allow to register mandatory services twice */
	if (!bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GAP) ||
    684e:	2800      	cmp	r0, #0
    6850:	d0ef      	beq.n	6832 <bt_gatt_service_register+0x1e>
	    !bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GATT)) {
		return -EALREADY;
	}

	err = gatt_register(svc);
    6852:	4620      	mov	r0, r4
    6854:	f7ff fd2c 	bl	62b0 <gatt_register>
	if (err < 0) {
    6858:	2800      	cmp	r0, #0
    685a:	db09      	blt.n	6870 <bt_gatt_service_register+0x5c>
		return err;
	}

	sc_indicate(&svc->attrs[0], &svc->attrs[svc->attr_count - 1]);
    685c:	6820      	ldr	r0, [r4, #0]
    685e:	88a3      	ldrh	r3, [r4, #4]
    6860:	2114      	movs	r1, #20
    6862:	fb01 0103 	mla	r1, r1, r3, r0
    6866:	3904      	subs	r1, #4
    6868:	3010      	adds	r0, #16
    686a:	f7ff ffa7 	bl	67bc <sc_indicate.isra.10>

	return 0;
    686e:	4628      	mov	r0, r5
}
    6870:	b003      	add	sp, #12
    6872:	bd30      	pop	{r4, r5, pc}

00006874 <bt_gatt_attr_next>:

	return BT_GATT_ITER_STOP;
}

struct bt_gatt_attr *bt_gatt_attr_next(const struct bt_gatt_attr *attr)
{
    6874:	b507      	push	{r0, r1, r2, lr}
	struct bt_gatt_attr *next = NULL;

	bt_gatt_foreach_attr(attr->handle + 1, attr->handle + 1, find_next,
    6876:	8a01      	ldrh	r1, [r0, #16]
	return BT_GATT_ITER_STOP;
}

struct bt_gatt_attr *bt_gatt_attr_next(const struct bt_gatt_attr *attr)
{
	struct bt_gatt_attr *next = NULL;
    6878:	ab02      	add	r3, sp, #8

	bt_gatt_foreach_attr(attr->handle + 1, attr->handle + 1, find_next,
    687a:	3101      	adds	r1, #1
    687c:	b289      	uxth	r1, r1
	return BT_GATT_ITER_STOP;
}

struct bt_gatt_attr *bt_gatt_attr_next(const struct bt_gatt_attr *attr)
{
	struct bt_gatt_attr *next = NULL;
    687e:	2200      	movs	r2, #0
    6880:	f843 2d04 	str.w	r2, [r3, #-4]!

	bt_gatt_foreach_attr(attr->handle + 1, attr->handle + 1, find_next,
    6884:	4608      	mov	r0, r1
    6886:	4a03      	ldr	r2, [pc, #12]	; (6894 <bt_gatt_attr_next+0x20>)
    6888:	f7ff ff58 	bl	673c <bt_gatt_foreach_attr>
			     &next);

	return next;
}
    688c:	9801      	ldr	r0, [sp, #4]
    688e:	b003      	add	sp, #12
    6890:	f85d fb04 	ldr.w	pc, [sp], #4
    6894:	00006121 	.word	0x00006121

00006898 <bt_gatt_attr_read_chrc>:
} __packed;

ssize_t bt_gatt_attr_read_chrc(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, void *buf,
			       u16_t len, u16_t offset)
{
    6898:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
    689c:	68ce      	ldr	r6, [r1, #12]
} __packed;

ssize_t bt_gatt_attr_read_chrc(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, void *buf,
			       u16_t len, u16_t offset)
{
    689e:	b08b      	sub	sp, #44	; 0x2c
    68a0:	4607      	mov	r7, r0
    68a2:	4699      	mov	r9, r3
	 * The Characteristic Value declaration contains the value of the
	 * characteristic. It is the first Attribute after the characteristic
	 * declaration. All characteristic definitions shall have a
	 * Characteristic Value declaration.
	 */
	next = bt_gatt_attr_next(attr);
    68a4:	4608      	mov	r0, r1
	struct bt_gatt_chrc *chrc = attr->user_data;
	struct gatt_chrc pdu;
	const struct bt_gatt_attr *next;
	u8_t value_len;

	pdu.properties = chrc->properties;
    68a6:	7933      	ldrb	r3, [r6, #4]
    68a8:	f88d 3014 	strb.w	r3, [sp, #20]
} __packed;

ssize_t bt_gatt_attr_read_chrc(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, void *buf,
			       u16_t len, u16_t offset)
{
    68ac:	460c      	mov	r4, r1
    68ae:	4690      	mov	r8, r2
	 * The Characteristic Value declaration contains the value of the
	 * characteristic. It is the first Attribute after the characteristic
	 * declaration. All characteristic definitions shall have a
	 * Characteristic Value declaration.
	 */
	next = bt_gatt_attr_next(attr);
    68b0:	f7ff ffe0 	bl	6874 <bt_gatt_attr_next>
	if (!next) {
    68b4:	4605      	mov	r5, r0
    68b6:	b980      	cbnz	r0, 68da <bt_gatt_attr_read_chrc+0x42>
		BT_WARN("No value for characteristic at 0x%04x", attr->handle);
    68b8:	4b18      	ldr	r3, [pc, #96]	; (691c <bt_gatt_attr_read_chrc+0x84>)
    68ba:	9302      	str	r3, [sp, #8]
    68bc:	8a23      	ldrh	r3, [r4, #16]
    68be:	9301      	str	r3, [sp, #4]
    68c0:	4b17      	ldr	r3, [pc, #92]	; (6920 <bt_gatt_attr_read_chrc+0x88>)
    68c2:	9300      	str	r3, [sp, #0]
    68c4:	4a17      	ldr	r2, [pc, #92]	; (6924 <bt_gatt_attr_read_chrc+0x8c>)
    68c6:	4b18      	ldr	r3, [pc, #96]	; (6928 <bt_gatt_attr_read_chrc+0x90>)
    68c8:	4918      	ldr	r1, [pc, #96]	; (692c <bt_gatt_attr_read_chrc+0x94>)
    68ca:	4819      	ldr	r0, [pc, #100]	; (6930 <bt_gatt_attr_read_chrc+0x98>)
    68cc:	f7fa fdd8 	bl	1480 <printk>
		pdu.value_handle = 0x0000;
    68d0:	f88d 5015 	strb.w	r5, [sp, #21]
    68d4:	f88d 5016 	strb.w	r5, [sp, #22]
    68d8:	e002      	b.n	68e0 <bt_gatt_attr_read_chrc+0x48>
	} else {
		pdu.value_handle = sys_cpu_to_le16(next->handle);
    68da:	8a03      	ldrh	r3, [r0, #16]
    68dc:	f8ad 3015 	strh.w	r3, [sp, #21]
	}
	value_len = sizeof(pdu.properties) + sizeof(pdu.value_handle);

	if (chrc->uuid->type == BT_UUID_TYPE_16) {
    68e0:	6831      	ldr	r1, [r6, #0]
    68e2:	780b      	ldrb	r3, [r1, #0]
    68e4:	b923      	cbnz	r3, 68f0 <bt_gatt_attr_read_chrc+0x58>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
    68e6:	884b      	ldrh	r3, [r1, #2]
    68e8:	f8ad 3017 	strh.w	r3, [sp, #23]
		value_len += 2;
    68ec:	2305      	movs	r3, #5
    68ee:	e006      	b.n	68fe <bt_gatt_attr_read_chrc+0x66>
	} else {
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
    68f0:	2210      	movs	r2, #16
    68f2:	3101      	adds	r1, #1
    68f4:	f10d 0017 	add.w	r0, sp, #23
    68f8:	f7fa fbcb 	bl	1092 <memcpy>
		value_len += 16;
    68fc:	2313      	movs	r3, #19
	}

	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
    68fe:	9302      	str	r3, [sp, #8]
    6900:	ab05      	add	r3, sp, #20
    6902:	9301      	str	r3, [sp, #4]
    6904:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
    6908:	9300      	str	r3, [sp, #0]
    690a:	4642      	mov	r2, r8
    690c:	464b      	mov	r3, r9
    690e:	4621      	mov	r1, r4
    6910:	4638      	mov	r0, r7
    6912:	f7ff fe83 	bl	661c <bt_gatt_attr_read>
}
    6916:	b00b      	add	sp, #44	; 0x2c
    6918:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    691c:	00013df4 	.word	0x00013df4
    6920:	00013e3f 	.word	0x00013e3f
    6924:	00013e01 	.word	0x00013e01
    6928:	000163d3 	.word	0x000163d3
    692c:	00013dbb 	.word	0x00013dbb
    6930:	00014bce 	.word	0x00014bce

00006934 <bt_gatt_notify>:
	return BT_GATT_ITER_CONTINUE;
}

int bt_gatt_notify(struct bt_conn *conn, const struct bt_gatt_attr *attr,
		   const void *data, u16_t len)
{
    6934:	b570      	push	{r4, r5, r6, lr}
    6936:	461d      	mov	r5, r3
    6938:	b086      	sub	sp, #24
    693a:	8a0c      	ldrh	r4, [r1, #16]
	struct notify_data nfy;

	__ASSERT(attr && attr->handle, "invalid parameters\n");

	if (conn) {
    693c:	b118      	cbz	r0, 6946 <bt_gatt_notify+0x12>
		return gatt_notify(conn, attr->handle, data, len);
    693e:	4621      	mov	r1, r4
    6940:	f7ff fd08 	bl	6354 <gatt_notify>
    6944:	e011      	b.n	696a <bt_gatt_notify+0x36>
	}

	nfy.err = -ENOTCONN;
    6946:	f06f 0338 	mvn.w	r3, #56	; 0x38
    694a:	9300      	str	r3, [sp, #0]
	nfy.attr = attr;
	nfy.type = BT_GATT_CCC_NOTIFY;
    694c:	2301      	movs	r3, #1
	if (conn) {
		return gatt_notify(conn, attr->handle, data, len);
	}

	nfy.err = -ENOTCONN;
	nfy.attr = attr;
    694e:	9102      	str	r1, [sp, #8]
	nfy.type = BT_GATT_CCC_NOTIFY;
    6950:	f8ad 3004 	strh.w	r3, [sp, #4]
	nfy.data = data;
    6954:	9203      	str	r2, [sp, #12]
	nfy.len = len;

	bt_gatt_foreach_attr(attr->handle, 0xffff, notify_cb, &nfy);
    6956:	4620      	mov	r0, r4
    6958:	466b      	mov	r3, sp
    695a:	4a05      	ldr	r2, [pc, #20]	; (6970 <bt_gatt_notify+0x3c>)

	nfy.err = -ENOTCONN;
	nfy.attr = attr;
	nfy.type = BT_GATT_CCC_NOTIFY;
	nfy.data = data;
	nfy.len = len;
    695c:	f8ad 5010 	strh.w	r5, [sp, #16]

	bt_gatt_foreach_attr(attr->handle, 0xffff, notify_cb, &nfy);
    6960:	f64f 71ff 	movw	r1, #65535	; 0xffff
    6964:	f7ff feea 	bl	673c <bt_gatt_foreach_attr>

	return nfy.err;
    6968:	9800      	ldr	r0, [sp, #0]
}
    696a:	b006      	add	sp, #24
    696c:	bd70      	pop	{r4, r5, r6, pc}
    696e:	bf00      	nop
    6970:	00006499 	.word	0x00006499

00006974 <bt_gatt_connected>:
#endif /* CONFIG_BLUETOOTH_GATT_CLIENT */

void bt_gatt_connected(struct bt_conn *conn)
{
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, connected_cb, conn);
    6974:	4603      	mov	r3, r0
    6976:	4a03      	ldr	r2, [pc, #12]	; (6984 <bt_gatt_connected+0x10>)
    6978:	f64f 71ff 	movw	r1, #65535	; 0xffff
    697c:	2001      	movs	r0, #1
    697e:	f7ff bedd 	b.w	673c <bt_gatt_foreach_attr>
    6982:	bf00      	nop
    6984:	00006261 	.word	0x00006261

00006988 <bt_gatt_disconnected>:
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    6988:	4603      	mov	r3, r0
    698a:	4a03      	ldr	r2, [pc, #12]	; (6998 <bt_gatt_disconnected+0x10>)
    698c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    6990:	2001      	movs	r0, #1
    6992:	f7ff bed3 	b.w	673c <bt_gatt_foreach_attr>
    6996:	bf00      	nop
    6998:	00006559 	.word	0x00006559

0000699c <sys_memcpy_swap>:
{
	__ASSERT(((src < dst && (src + length) <= dst) ||
		  (src > dst && (dst + length) <= src)),
		 "Source and destination buffers must not overlap");

	src += length - 1;
    699c:	1e53      	subs	r3, r2, #1
    699e:	4419      	add	r1, r3
    69a0:	3801      	subs	r0, #1
    69a2:	1a52      	subs	r2, r2, r1

	for (; length > 0; length--) {
    69a4:	42d1      	cmn	r1, r2
    69a6:	d004      	beq.n	69b2 <sys_memcpy_swap+0x16>
		*((u8_t *)dst++) = *((u8_t *)src--);
    69a8:	f811 3901 	ldrb.w	r3, [r1], #-1
    69ac:	f800 3f01 	strb.w	r3, [r0, #1]!
    69b0:	e7f8      	b.n	69a4 <sys_memcpy_swap+0x8>
	}
}
    69b2:	4770      	bx	lr

000069b4 <get_io_capa>:
static bool sc_local_pkey_valid;
static u8_t sc_public_key[64];

static u8_t get_io_capa(void)
{
	if (!bt_auth) {
    69b4:	4b10      	ldr	r3, [pc, #64]	; (69f8 <get_io_capa+0x44>)
    69b6:	681b      	ldr	r3, [r3, #0]
    69b8:	b1ab      	cbz	r3, 69e6 <get_io_capa+0x32>
		return BT_SMP_IO_NO_INPUT_OUTPUT;
	}

	/* Passkey Confirmation is valid only for LE SC */
	if (bt_auth->passkey_display && bt_auth->passkey_entry &&
    69ba:	681a      	ldr	r2, [r3, #0]
    69bc:	b132      	cbz	r2, 69cc <get_io_capa+0x18>
    69be:	6859      	ldr	r1, [r3, #4]
    69c0:	b121      	cbz	r1, 69cc <get_io_capa+0x18>
    69c2:	6899      	ldr	r1, [r3, #8]
    69c4:	b989      	cbnz	r1, 69ea <get_io_capa+0x36>
	    (bt_auth->passkey_confirm || !sc_supported)) {
    69c6:	490d      	ldr	r1, [pc, #52]	; (69fc <get_io_capa+0x48>)
    69c8:	7809      	ldrb	r1, [r1, #0]
    69ca:	b171      	cbz	r1, 69ea <get_io_capa+0x36>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
	}

	/* DisplayYesNo is useful only for LE SC */
	if (sc_supported && bt_auth->passkey_display &&
    69cc:	490b      	ldr	r1, [pc, #44]	; (69fc <get_io_capa+0x48>)
    69ce:	7809      	ldrb	r1, [r1, #0]
    69d0:	b111      	cbz	r1, 69d8 <get_io_capa+0x24>
    69d2:	b10a      	cbz	r2, 69d8 <get_io_capa+0x24>
    69d4:	6899      	ldr	r1, [r3, #8]
    69d6:	b951      	cbnz	r1, 69ee <get_io_capa+0x3a>
	    bt_auth->passkey_confirm) {
		return BT_SMP_IO_DISPLAY_YESNO;
	}

	if (bt_auth->passkey_entry) {
    69d8:	685b      	ldr	r3, [r3, #4]
    69da:	b953      	cbnz	r3, 69f2 <get_io_capa+0x3e>
		return BT_SMP_IO_KEYBOARD_ONLY;
	}

	if (bt_auth->passkey_display) {
		return BT_SMP_IO_DISPLAY_ONLY;
    69dc:	2a00      	cmp	r2, #0
    69de:	bf0c      	ite	eq
    69e0:	2003      	moveq	r0, #3
    69e2:	2000      	movne	r0, #0
    69e4:	4770      	bx	lr
	}

	return BT_SMP_IO_NO_INPUT_OUTPUT;
    69e6:	2003      	movs	r0, #3
    69e8:	4770      	bx	lr
	}

	/* Passkey Confirmation is valid only for LE SC */
	if (bt_auth->passkey_display && bt_auth->passkey_entry &&
	    (bt_auth->passkey_confirm || !sc_supported)) {
		return BT_SMP_IO_KEYBOARD_DISPLAY;
    69ea:	2004      	movs	r0, #4
    69ec:	4770      	bx	lr
	}

	/* DisplayYesNo is useful only for LE SC */
	if (sc_supported && bt_auth->passkey_display &&
	    bt_auth->passkey_confirm) {
		return BT_SMP_IO_DISPLAY_YESNO;
    69ee:	2001      	movs	r0, #1
    69f0:	4770      	bx	lr
	}

	if (bt_auth->passkey_entry) {
		return BT_SMP_IO_KEYBOARD_ONLY;
    69f2:	2002      	movs	r0, #2
	if (bt_auth->passkey_display) {
		return BT_SMP_IO_DISPLAY_ONLY;
	}

	return BT_SMP_IO_NO_INPUT_OUTPUT;
}
    69f4:	4770      	bx	lr
    69f6:	bf00      	nop
    69f8:	20002110 	.word	0x20002110
    69fc:	20000dc8 	.word	0x20000dc8

00006a00 <smp_security_request>:
}
#else
static u8_t smp_security_request(struct bt_smp *smp, struct net_buf *buf)
{
	return BT_SMP_ERR_CMD_NOTSUPP;
}
    6a00:	2007      	movs	r0, #7
    6a02:	4770      	bx	lr

00006a04 <bt_smp_accept>:

	return true;
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    6a04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_smp *smp = &bt_smp_pool[i];

		if (smp->chan.chan.conn) {
    6a06:	4a0c      	ldr	r2, [pc, #48]	; (6a38 <bt_smp_accept+0x34>)
    6a08:	6813      	ldr	r3, [r2, #0]
    6a0a:	b923      	cbnz	r3, 6a16 <bt_smp_accept+0x12>
			continue;
		}

		smp->chan.chan.ops = &ops;
    6a0c:	480b      	ldr	r0, [pc, #44]	; (6a3c <bt_smp_accept+0x38>)
    6a0e:	6050      	str	r0, [r2, #4]

		*chan = &smp->chan.chan;
    6a10:	600a      	str	r2, [r1, #0]

		return 0;
    6a12:	4618      	mov	r0, r3
    6a14:	e00c      	b.n	6a30 <bt_smp_accept+0x2c>
	}

	BT_ERR("No available SMP context for conn %p", conn);
    6a16:	4b0a      	ldr	r3, [pc, #40]	; (6a40 <bt_smp_accept+0x3c>)
    6a18:	9302      	str	r3, [sp, #8]
    6a1a:	4b0a      	ldr	r3, [pc, #40]	; (6a44 <bt_smp_accept+0x40>)
    6a1c:	9001      	str	r0, [sp, #4]
    6a1e:	9300      	str	r3, [sp, #0]
    6a20:	4a09      	ldr	r2, [pc, #36]	; (6a48 <bt_smp_accept+0x44>)
    6a22:	4b0a      	ldr	r3, [pc, #40]	; (6a4c <bt_smp_accept+0x48>)
    6a24:	490a      	ldr	r1, [pc, #40]	; (6a50 <bt_smp_accept+0x4c>)
    6a26:	480b      	ldr	r0, [pc, #44]	; (6a54 <bt_smp_accept+0x50>)
    6a28:	f7fa fd2a 	bl	1480 <printk>

	return -ENOMEM;
    6a2c:	f06f 000b 	mvn.w	r0, #11
}
    6a30:	b005      	add	sp, #20
    6a32:	f85d fb04 	ldr.w	pc, [sp], #4
    6a36:	bf00      	nop
    6a38:	20000e0c 	.word	0x20000e0c
    6a3c:	2000051c 	.word	0x2000051c
    6a40:	00013df4 	.word	0x00013df4
    6a44:	00013df9 	.word	0x00013df9
    6a48:	00013db4 	.word	0x00013db4
    6a4c:	00016530 	.word	0x00016530
    6a50:	00013dbb 	.word	0x00013dbb
    6a54:	00014c04 	.word	0x00014c04

00006a58 <atomic_set_bit>:
    6a58:	094b      	lsrs	r3, r1, #5
    6a5a:	2201      	movs	r2, #1
    6a5c:	f001 011f 	and.w	r1, r1, #31
    6a60:	fa02 f101 	lsl.w	r1, r2, r1
    6a64:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    6a68:	f3bf 8f5f 	dmb	sy
    6a6c:	e850 3f00 	ldrex	r3, [r0]
    6a70:	430b      	orrs	r3, r1
    6a72:	e840 3200 	strex	r2, r3, [r0]
    6a76:	2a00      	cmp	r2, #0
    6a78:	d1f8      	bne.n	6a6c <atomic_set_bit+0x14>
    6a7a:	f3bf 8f5f 	dmb	sy
    6a7e:	4770      	bx	lr

00006a80 <bt_smp_aes_cmac>:
 *          : len    ( length of the message in octets )
 * Output   : out    ( message authentication code )
 */
static int bt_smp_aes_cmac(const u8_t *key, const u8_t *in, size_t len,
			   u8_t *out)
{
    6a80:	b570      	push	{r4, r5, r6, lr}
    6a82:	b0c2      	sub	sp, #264	; 0x108
    6a84:	460d      	mov	r5, r1
    6a86:	4616      	mov	r6, r2
	struct tc_aes_key_sched_struct sched;
	struct tc_cmac_struct state;

	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
    6a88:	4601      	mov	r1, r0
    6a8a:	aa16      	add	r2, sp, #88	; 0x58
    6a8c:	4668      	mov	r0, sp
 *          : len    ( length of the message in octets )
 * Output   : out    ( message authentication code )
 */
static int bt_smp_aes_cmac(const u8_t *key, const u8_t *in, size_t len,
			   u8_t *out)
{
    6a8e:	461c      	mov	r4, r3
	struct tc_aes_key_sched_struct sched;
	struct tc_cmac_struct state;

	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
    6a90:	f7fb f860 	bl	1b54 <tc_cmac_setup>
    6a94:	b910      	cbnz	r0, 6a9c <bt_smp_aes_cmac+0x1c>
		return -EIO;
    6a96:	f06f 0004 	mvn.w	r0, #4
    6a9a:	e00d      	b.n	6ab8 <bt_smp_aes_cmac+0x38>
	}

	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
    6a9c:	4632      	mov	r2, r6
    6a9e:	4629      	mov	r1, r5
    6aa0:	4668      	mov	r0, sp
    6aa2:	f7fb f883 	bl	1bac <tc_cmac_update>
    6aa6:	2800      	cmp	r0, #0
    6aa8:	d0f5      	beq.n	6a96 <bt_smp_aes_cmac+0x16>
		return -EIO;
	}

	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
    6aaa:	4669      	mov	r1, sp
    6aac:	4620      	mov	r0, r4
    6aae:	f7fb f8e5 	bl	1c7c <tc_cmac_final>
    6ab2:	2800      	cmp	r0, #0
    6ab4:	d0ef      	beq.n	6a96 <bt_smp_aes_cmac+0x16>
		return -EIO;
	}

	return 0;
    6ab6:	2000      	movs	r0, #0
}
    6ab8:	b042      	add	sp, #264	; 0x108
    6aba:	bd70      	pop	{r4, r5, r6, pc}

00006abc <bt_smp_disconnected>:
	k_delayed_work_init(&smp->work, smp_timeout);
	smp_reset(smp);
}

static void bt_smp_disconnected(struct bt_l2cap_chan *chan)
{
    6abc:	b538      	push	{r3, r4, r5, lr}
	struct bt_smp *smp = CONTAINER_OF(chan, struct bt_smp, chan);
	struct bt_keys *keys = chan->conn->le.keys;
    6abe:	6803      	ldr	r3, [r0, #0]
    6ac0:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
	k_delayed_work_init(&smp->work, smp_timeout);
	smp_reset(smp);
}

static void bt_smp_disconnected(struct bt_l2cap_chan *chan)
{
    6ac2:	4605      	mov	r5, r0
	struct bt_keys *keys = chan->conn->le.keys;

	BT_DBG("chan %p cid 0x%04x", chan,
	       CONTAINER_OF(chan, struct bt_l2cap_le_chan, chan)->tx.cid);

	k_delayed_work_cancel(&smp->work);
    6ac4:	f500 70b8 	add.w	r0, r0, #368	; 0x170
    6ac8:	f00c feaa 	bl	13820 <k_delayed_work_cancel>

	if (keys) {
    6acc:	b164      	cbz	r4, 6ae8 <bt_smp_disconnected+0x2c>
		/*
		 * If debug keys were used for pairing remove them.
		 * No keys indicate no bonding so free keys storage.
		 */
		if (!keys->keys ||
    6ace:	89a3      	ldrh	r3, [r4, #12]
    6ad0:	b91b      	cbnz	r3, 6ada <bt_smp_disconnected+0x1e>
		    atomic_test_bit(keys->flags, BT_KEYS_DEBUG)) {
			bt_keys_clear(keys);
    6ad2:	4620      	mov	r0, r4
    6ad4:	f001 fc3c 	bl	8350 <bt_keys_clear>
    6ad8:	e006      	b.n	6ae8 <bt_smp_disconnected+0x2c>
		/*
		 * If debug keys were used for pairing remove them.
		 * No keys indicate no bonding so free keys storage.
		 */
		if (!keys->keys ||
		    atomic_test_bit(keys->flags, BT_KEYS_DEBUG)) {
    6ada:	2101      	movs	r1, #1
    6adc:	f104 0008 	add.w	r0, r4, #8
    6ae0:	f7fb fa6a 	bl	1fb8 <atomic_test_bit>
	if (keys) {
		/*
		 * If debug keys were used for pairing remove them.
		 * No keys indicate no bonding so free keys storage.
		 */
		if (!keys->keys ||
    6ae4:	2800      	cmp	r0, #0
    6ae6:	d1f4      	bne.n	6ad2 <bt_smp_disconnected+0x16>
		    atomic_test_bit(keys->flags, BT_KEYS_DEBUG)) {
			bt_keys_clear(keys);
		}
	}

	memset(smp, 0, sizeof(*smp));
    6ae8:	4628      	mov	r0, r5
    6aea:	f44f 72cc 	mov.w	r2, #408	; 0x198
    6aee:	2100      	movs	r1, #0
}
    6af0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		    atomic_test_bit(keys->flags, BT_KEYS_DEBUG)) {
			bt_keys_clear(keys);
		}
	}

	memset(smp, 0, sizeof(*smp));
    6af4:	f7fa baf9 	b.w	10ea <memset>

00006af8 <smp_ident_info>:
	/* return no error to avoid sending Pairing Failed in response */
	return 0;
}

static u8_t smp_ident_info(struct bt_smp *smp, struct net_buf *buf)
{
    6af8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    6afa:	4605      	mov	r5, r0
    6afc:	460a      	mov	r2, r1
	BT_DBG("");

	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    6afe:	3094      	adds	r0, #148	; 0x94
    6b00:	210a      	movs	r1, #10
    6b02:	f7fb fa59 	bl	1fb8 <atomic_test_bit>
    6b06:	b1e0      	cbz	r0, 6b42 <smp_ident_info+0x4a>
		struct bt_smp_ident_info *req = (void *)buf->data;
		struct bt_conn *conn = smp->chan.chan.conn;
		struct bt_keys *keys;

		keys = bt_keys_get_type(BT_KEYS_IRK, &conn->le.dst);
    6b08:	682c      	ldr	r4, [r5, #0]
static u8_t smp_ident_info(struct bt_smp *smp, struct net_buf *buf)
{
	BT_DBG("");

	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
		struct bt_smp_ident_info *req = (void *)buf->data;
    6b0a:	6896      	ldr	r6, [r2, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
		struct bt_keys *keys;

		keys = bt_keys_get_type(BT_KEYS_IRK, &conn->le.dst);
    6b0c:	3454      	adds	r4, #84	; 0x54
    6b0e:	4621      	mov	r1, r4
    6b10:	2002      	movs	r0, #2
    6b12:	f001 fbc9 	bl	82a8 <bt_keys_get_type>
		if (!keys) {
    6b16:	b978      	cbnz	r0, 6b38 <smp_ident_info+0x40>
			BT_ERR("Unable to get keys for %s",
    6b18:	4620      	mov	r0, r4
    6b1a:	f7fb f91d 	bl	1d58 <bt_addr_le_str>
    6b1e:	4b0d      	ldr	r3, [pc, #52]	; (6b54 <smp_ident_info+0x5c>)
    6b20:	9302      	str	r3, [sp, #8]
    6b22:	4b0d      	ldr	r3, [pc, #52]	; (6b58 <smp_ident_info+0x60>)
    6b24:	9001      	str	r0, [sp, #4]
    6b26:	9300      	str	r3, [sp, #0]
    6b28:	4a0c      	ldr	r2, [pc, #48]	; (6b5c <smp_ident_info+0x64>)
    6b2a:	4b0d      	ldr	r3, [pc, #52]	; (6b60 <smp_ident_info+0x68>)
    6b2c:	490d      	ldr	r1, [pc, #52]	; (6b64 <smp_ident_info+0x6c>)
    6b2e:	480e      	ldr	r0, [pc, #56]	; (6b68 <smp_ident_info+0x70>)
    6b30:	f7fa fca6 	bl	1480 <printk>
			       bt_addr_le_str(&conn->le.dst));
			return BT_SMP_ERR_UNSPECIFIED;
    6b34:	2008      	movs	r0, #8
    6b36:	e00a      	b.n	6b4e <smp_ident_info+0x56>
		}

		memcpy(keys->irk.val, req->irk, 16);
    6b38:	2210      	movs	r2, #16
    6b3a:	4631      	mov	r1, r6
    6b3c:	3030      	adds	r0, #48	; 0x30
    6b3e:	f7fa faa8 	bl	1092 <memcpy>
	}

	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
    6b42:	f105 0090 	add.w	r0, r5, #144	; 0x90
    6b46:	2109      	movs	r1, #9
    6b48:	f7ff ff86 	bl	6a58 <atomic_set_bit>

	return 0;
    6b4c:	2000      	movs	r0, #0
}
    6b4e:	b004      	add	sp, #16
    6b50:	bd70      	pop	{r4, r5, r6, pc}
    6b52:	bf00      	nop
    6b54:	00013df4 	.word	0x00013df4
    6b58:	00013df9 	.word	0x00013df9
    6b5c:	00013db4 	.word	0x00013db4
    6b60:	00016451 	.word	0x00016451
    6b64:	00013dbb 	.word	0x00013dbb
    6b68:	00014c39 	.word	0x00014c39

00006b6c <smp_encrypt_info>:
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
	}
}

static u8_t smp_encrypt_info(struct bt_smp *smp, struct net_buf *buf)
{
    6b6c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    6b6e:	4605      	mov	r5, r0
    6b70:	460a      	mov	r2, r1
	BT_DBG("");

	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    6b72:	3094      	adds	r0, #148	; 0x94
    6b74:	210a      	movs	r1, #10
    6b76:	f7fb fa1f 	bl	1fb8 <atomic_test_bit>
    6b7a:	b1e0      	cbz	r0, 6bb6 <smp_encrypt_info+0x4a>
		struct bt_smp_encrypt_info *req = (void *)buf->data;
		struct bt_conn *conn = smp->chan.chan.conn;
		struct bt_keys *keys;

		keys = bt_keys_get_type(BT_KEYS_LTK, &conn->le.dst);
    6b7c:	682c      	ldr	r4, [r5, #0]
static u8_t smp_encrypt_info(struct bt_smp *smp, struct net_buf *buf)
{
	BT_DBG("");

	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
		struct bt_smp_encrypt_info *req = (void *)buf->data;
    6b7e:	6896      	ldr	r6, [r2, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
		struct bt_keys *keys;

		keys = bt_keys_get_type(BT_KEYS_LTK, &conn->le.dst);
    6b80:	3454      	adds	r4, #84	; 0x54
    6b82:	4621      	mov	r1, r4
    6b84:	2004      	movs	r0, #4
    6b86:	f001 fb8f 	bl	82a8 <bt_keys_get_type>
		if (!keys) {
    6b8a:	b978      	cbnz	r0, 6bac <smp_encrypt_info+0x40>
			BT_ERR("Unable to get keys for %s",
    6b8c:	4620      	mov	r0, r4
    6b8e:	f7fb f8e3 	bl	1d58 <bt_addr_le_str>
    6b92:	4b0d      	ldr	r3, [pc, #52]	; (6bc8 <smp_encrypt_info+0x5c>)
    6b94:	9302      	str	r3, [sp, #8]
    6b96:	4b0d      	ldr	r3, [pc, #52]	; (6bcc <smp_encrypt_info+0x60>)
    6b98:	9001      	str	r0, [sp, #4]
    6b9a:	9300      	str	r3, [sp, #0]
    6b9c:	4a0c      	ldr	r2, [pc, #48]	; (6bd0 <smp_encrypt_info+0x64>)
    6b9e:	4b0d      	ldr	r3, [pc, #52]	; (6bd4 <smp_encrypt_info+0x68>)
    6ba0:	490d      	ldr	r1, [pc, #52]	; (6bd8 <smp_encrypt_info+0x6c>)
    6ba2:	480e      	ldr	r0, [pc, #56]	; (6bdc <smp_encrypt_info+0x70>)
    6ba4:	f7fa fc6c 	bl	1480 <printk>
			       bt_addr_le_str(&conn->le.dst));
			return BT_SMP_ERR_UNSPECIFIED;
    6ba8:	2008      	movs	r0, #8
    6baa:	e00a      	b.n	6bc2 <smp_encrypt_info+0x56>
		}

		memcpy(keys->ltk.val, req->ltk, 16);
    6bac:	2210      	movs	r2, #16
    6bae:	4631      	mov	r1, r6
    6bb0:	301a      	adds	r0, #26
    6bb2:	f7fa fa6e 	bl	1092 <memcpy>
	}

	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_MASTER_IDENT);
    6bb6:	f105 0090 	add.w	r0, r5, #144	; 0x90
    6bba:	2107      	movs	r1, #7
    6bbc:	f7ff ff4c 	bl	6a58 <atomic_set_bit>

	return 0;
    6bc0:	2000      	movs	r0, #0
}
    6bc2:	b004      	add	sp, #16
    6bc4:	bd70      	pop	{r4, r5, r6, pc}
    6bc6:	bf00      	nop
    6bc8:	00013df4 	.word	0x00013df4
    6bcc:	00013df9 	.word	0x00013df9
    6bd0:	00013db4 	.word	0x00013db4
    6bd4:	0001614b 	.word	0x0001614b
    6bd8:	00013dbb 	.word	0x00013dbb
    6bdc:	00014c39 	.word	0x00014c39

00006be0 <smp_chan_get>:
		return false;
	}
}

static struct bt_smp *smp_chan_get(struct bt_conn *conn)
{
    6be0:	b513      	push	{r0, r1, r4, lr}
	struct bt_l2cap_chan *chan;

	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
    6be2:	2106      	movs	r1, #6
    6be4:	f7fe f869 	bl	4cba <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    6be8:	4604      	mov	r4, r0
    6bea:	b948      	cbnz	r0, 6c00 <smp_chan_get+0x20>
		BT_ERR("Unable to find SMP channel");
    6bec:	4b06      	ldr	r3, [pc, #24]	; (6c08 <smp_chan_get+0x28>)
    6bee:	9301      	str	r3, [sp, #4]
    6bf0:	4b06      	ldr	r3, [pc, #24]	; (6c0c <smp_chan_get+0x2c>)
    6bf2:	9300      	str	r3, [sp, #0]
    6bf4:	4a06      	ldr	r2, [pc, #24]	; (6c10 <smp_chan_get+0x30>)
    6bf6:	4b07      	ldr	r3, [pc, #28]	; (6c14 <smp_chan_get+0x34>)
    6bf8:	4907      	ldr	r1, [pc, #28]	; (6c18 <smp_chan_get+0x38>)
    6bfa:	4808      	ldr	r0, [pc, #32]	; (6c1c <smp_chan_get+0x3c>)
    6bfc:	f7fa fc40 	bl	1480 <printk>
		return NULL;
	}

	return CONTAINER_OF(chan, struct bt_smp, chan);
}
    6c00:	4620      	mov	r0, r4
    6c02:	b002      	add	sp, #8
    6c04:	bd10      	pop	{r4, pc}
    6c06:	bf00      	nop
    6c08:	00013df4 	.word	0x00013df4
    6c0c:	00013df9 	.word	0x00013df9
    6c10:	00013db4 	.word	0x00013db4
    6c14:	00016523 	.word	0x00016523
    6c18:	00013dbb 	.word	0x00013dbb
    6c1c:	00014c63 	.word	0x00014c63

00006c20 <smp_create_pdu.isra.2>:
				      size_t len)
{
	struct bt_smp_hdr *hdr;
	struct net_buf *buf;

	buf = bt_l2cap_create_pdu(NULL, 0);
    6c20:	2100      	movs	r1, #0
	}

	return gen_method_sc[remote_io][get_io_capa()];
}

static struct net_buf *smp_create_pdu(struct bt_conn *conn, u8_t op,
    6c22:	b538      	push	{r3, r4, r5, lr}
    6c24:	4605      	mov	r5, r0
				      size_t len)
{
	struct bt_smp_hdr *hdr;
	struct net_buf *buf;

	buf = bt_l2cap_create_pdu(NULL, 0);
    6c26:	4608      	mov	r0, r1
    6c28:	f7fd ff95 	bl	4b56 <bt_l2cap_create_pdu>
	/* NULL is not a possible return due to K_FOREVER */

	hdr = net_buf_add(buf, sizeof(*hdr));
    6c2c:	2101      	movs	r1, #1
				      size_t len)
{
	struct bt_smp_hdr *hdr;
	struct net_buf *buf;

	buf = bt_l2cap_create_pdu(NULL, 0);
    6c2e:	4604      	mov	r4, r0
	/* NULL is not a possible return due to K_FOREVER */

	hdr = net_buf_add(buf, sizeof(*hdr));
    6c30:	3008      	adds	r0, #8
    6c32:	f00a ffeb 	bl	11c0c <net_buf_simple_add>
	hdr->code = op;
    6c36:	7005      	strb	r5, [r0, #0]

	return buf;
}
    6c38:	4620      	mov	r0, r4
    6c3a:	bd38      	pop	{r3, r4, r5, pc}

00006c3c <sys_mem_swap.constprop.13>:
 * Where n is an index and 'end' the last index of buf.
 *
 * @param buf A valid pointer on a memory area to swap
 * @param length Size of buf memory area
 */
static inline void sys_mem_swap(void *buf, size_t length)
    6c3c:	b510      	push	{r4, lr}
    6c3e:	1e42      	subs	r2, r0, #1
    6c40:	f100 0310 	add.w	r3, r0, #16
    6c44:	3008      	adds	r0, #8
	size_t i;

	for (i = 0; i < (length/2); i++) {
		u8_t tmp = ((u8_t *)buf)[i];

		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
    6c46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		u8_t tmp = ((u8_t *)buf)[i];
    6c4a:	f812 1f01 	ldrb.w	r1, [r2, #1]!

		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
    6c4e:	7014      	strb	r4, [r2, #0]
 */
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
    6c50:	4283      	cmp	r3, r0
		u8_t tmp = ((u8_t *)buf)[i];

		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
		((u8_t *)buf)[length - 1 - i] = tmp;
    6c52:	7019      	strb	r1, [r3, #0]
 */
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
    6c54:	d1f7      	bne.n	6c46 <sys_mem_swap.constprop.13+0xa>
		u8_t tmp = ((u8_t *)buf)[i];

		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
		((u8_t *)buf)[length - 1 - i] = tmp;
	}
}
    6c56:	bd10      	pop	{r4, pc}

00006c58 <smp_f6>:
}

static int smp_f6(const u8_t *w, const u8_t *n1, const u8_t *n2,
		  const u8_t *r, const u8_t *iocap, const bt_addr_le_t *a1,
		  const bt_addr_le_t *a2, u8_t *check)
{
    6c58:	b570      	push	{r4, r5, r6, lr}
    6c5a:	b096      	sub	sp, #88	; 0x58
    6c5c:	4605      	mov	r5, r0
    6c5e:	4616      	mov	r6, r2
	BT_DBG("w %s", bt_hex(w, 16));
	BT_DBG("n1 %s n2 %s", bt_hex(n1, 16), bt_hex(n2, 16));
	BT_DBG("r %s io_cap %s", bt_hex(r, 16), bt_hex(iocap, 3));
	BT_DBG("a1 %s a2 %s", bt_hex(a1, 7), bt_hex(a2, 7));

	sys_memcpy_swap(m, n1, 16);
    6c60:	a805      	add	r0, sp, #20
    6c62:	2210      	movs	r2, #16
}

static int smp_f6(const u8_t *w, const u8_t *n1, const u8_t *n2,
		  const u8_t *r, const u8_t *iocap, const bt_addr_le_t *a1,
		  const bt_addr_le_t *a2, u8_t *check)
{
    6c64:	461c      	mov	r4, r3
	BT_DBG("w %s", bt_hex(w, 16));
	BT_DBG("n1 %s n2 %s", bt_hex(n1, 16), bt_hex(n2, 16));
	BT_DBG("r %s io_cap %s", bt_hex(r, 16), bt_hex(iocap, 3));
	BT_DBG("a1 %s a2 %s", bt_hex(a1, 7), bt_hex(a2, 7));

	sys_memcpy_swap(m, n1, 16);
    6c66:	f7ff fe99 	bl	699c <sys_memcpy_swap>
	sys_memcpy_swap(m + 16, n2, 16);
    6c6a:	2210      	movs	r2, #16
    6c6c:	4631      	mov	r1, r6
    6c6e:	a809      	add	r0, sp, #36	; 0x24
    6c70:	f7ff fe94 	bl	699c <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, r, 16);
    6c74:	4621      	mov	r1, r4
    6c76:	2210      	movs	r2, #16
    6c78:	a80d      	add	r0, sp, #52	; 0x34
    6c7a:	f7ff fe8f 	bl	699c <sys_memcpy_swap>
	sys_memcpy_swap(m + 48, iocap, 3);
    6c7e:	2203      	movs	r2, #3
    6c80:	991a      	ldr	r1, [sp, #104]	; 0x68
    6c82:	a811      	add	r0, sp, #68	; 0x44
    6c84:	f7ff fe8a 	bl	699c <sys_memcpy_swap>

	m[51] = a1->type;
    6c88:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
    6c8a:	f814 3b01 	ldrb.w	r3, [r4], #1
    6c8e:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(m + 52, a1->a.val, 6);
    6c92:	4621      	mov	r1, r4
    6c94:	2206      	movs	r2, #6
    6c96:	a812      	add	r0, sp, #72	; 0x48
    6c98:	f7fa f9fb 	bl	1092 <memcpy>
	sys_memcpy_swap(m + 52, a1->a.val, 6);
    6c9c:	4621      	mov	r1, r4
    6c9e:	2206      	movs	r2, #6
    6ca0:	a812      	add	r0, sp, #72	; 0x48
    6ca2:	f7ff fe7b 	bl	699c <sys_memcpy_swap>

	m[58] = a2->type;
    6ca6:	9c1c      	ldr	r4, [sp, #112]	; 0x70
    6ca8:	f814 3b01 	ldrb.w	r3, [r4], #1
    6cac:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
	memcpy(m + 59, a2->a.val, 6);
    6cb0:	4621      	mov	r1, r4
    6cb2:	2206      	movs	r2, #6
    6cb4:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
    6cb8:	f7fa f9eb 	bl	1092 <memcpy>
	sys_memcpy_swap(m + 59, a2->a.val, 6);
    6cbc:	4621      	mov	r1, r4
    6cbe:	2206      	movs	r2, #6
    6cc0:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
    6cc4:	f7ff fe6a 	bl	699c <sys_memcpy_swap>

	sys_memcpy_swap(ws, w, 16);
    6cc8:	2210      	movs	r2, #16
    6cca:	4629      	mov	r1, r5
    6ccc:	a801      	add	r0, sp, #4
    6cce:	f7ff fe65 	bl	699c <sys_memcpy_swap>

	err = bt_smp_aes_cmac(ws, m, sizeof(m), check);
    6cd2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    6cd4:	2241      	movs	r2, #65	; 0x41
    6cd6:	a905      	add	r1, sp, #20
    6cd8:	a801      	add	r0, sp, #4
    6cda:	f7ff fed1 	bl	6a80 <bt_smp_aes_cmac>
	if (err) {
    6cde:	4604      	mov	r4, r0
    6ce0:	b910      	cbnz	r0, 6ce8 <smp_f6+0x90>
		return err;
	}

	BT_DBG("res %s", bt_hex(check, 16));

	sys_mem_swap(check, 16);
    6ce2:	981d      	ldr	r0, [sp, #116]	; 0x74
    6ce4:	f7ff ffaa 	bl	6c3c <sys_mem_swap.constprop.13>

	return 0;
}
    6ce8:	4620      	mov	r0, r4
    6cea:	b016      	add	sp, #88	; 0x58
    6cec:	bd70      	pop	{r4, r5, r6, pc}

00006cee <smp_f4>:
	return 0;
}

static int smp_f4(const u8_t *u, const u8_t *v, const u8_t *x,
		  u8_t z, u8_t res[16])
{
    6cee:	b570      	push	{r4, r5, r6, lr}
    6cf0:	b096      	sub	sp, #88	; 0x58
    6cf2:	4614      	mov	r4, r2
    6cf4:	460e      	mov	r6, r1
	 * Core Spec 4.2 Vol 3 Part H 2.2.5
	 *
	 * note:
	 * bt_smp_aes_cmac uses BE data and smp_f4 accept LE so we swap
	 */
	sys_memcpy_swap(m, u, 32);
    6cf6:	2220      	movs	r2, #32
    6cf8:	4601      	mov	r1, r0
    6cfa:	a805      	add	r0, sp, #20
	return 0;
}

static int smp_f4(const u8_t *u, const u8_t *v, const u8_t *x,
		  u8_t z, u8_t res[16])
{
    6cfc:	461d      	mov	r5, r3
	 * Core Spec 4.2 Vol 3 Part H 2.2.5
	 *
	 * note:
	 * bt_smp_aes_cmac uses BE data and smp_f4 accept LE so we swap
	 */
	sys_memcpy_swap(m, u, 32);
    6cfe:	f7ff fe4d 	bl	699c <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
    6d02:	2220      	movs	r2, #32
    6d04:	4631      	mov	r1, r6
    6d06:	a80d      	add	r0, sp, #52	; 0x34
    6d08:	f7ff fe48 	bl	699c <sys_memcpy_swap>
	m[64] = z;

	sys_memcpy_swap(xs, x, 16);
    6d0c:	4621      	mov	r1, r4
    6d0e:	2210      	movs	r2, #16
    6d10:	a801      	add	r0, sp, #4
	 * note:
	 * bt_smp_aes_cmac uses BE data and smp_f4 accept LE so we swap
	 */
	sys_memcpy_swap(m, u, 32);
	sys_memcpy_swap(m + 32, v, 32);
	m[64] = z;
    6d12:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54

	sys_memcpy_swap(xs, x, 16);
    6d16:	f7ff fe41 	bl	699c <sys_memcpy_swap>

	err = bt_smp_aes_cmac(xs, m, sizeof(m), res);
    6d1a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    6d1c:	2241      	movs	r2, #65	; 0x41
    6d1e:	a905      	add	r1, sp, #20
    6d20:	a801      	add	r0, sp, #4
    6d22:	f7ff fead 	bl	6a80 <bt_smp_aes_cmac>
	if (err) {
    6d26:	4604      	mov	r4, r0
    6d28:	b910      	cbnz	r0, 6d30 <smp_f4+0x42>
		return err;
	}

	sys_mem_swap(res, 16);
    6d2a:	981a      	ldr	r0, [sp, #104]	; 0x68
    6d2c:	f7ff ff86 	bl	6c3c <sys_mem_swap.constprop.13>

	BT_DBG("res %s", bt_hex(res, 16));

	return err;
}
    6d30:	4620      	mov	r0, r4
    6d32:	b016      	add	sp, #88	; 0x58
    6d34:	bd70      	pop	{r4, r5, r6, pc}
	...

00006d38 <smp_send>:
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
}

static void smp_send(struct bt_smp *smp, struct net_buf *buf,
		     bt_conn_tx_cb_t cb)
{
    6d38:	b510      	push	{r4, lr}
	bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb);
    6d3a:	4613      	mov	r3, r2
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
}

static void smp_send(struct bt_smp *smp, struct net_buf *buf,
		     bt_conn_tx_cb_t cb)
{
    6d3c:	4604      	mov	r4, r0
	bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb);
    6d3e:	460a      	mov	r2, r1
    6d40:	6800      	ldr	r0, [r0, #0]
    6d42:	2106      	movs	r1, #6
    6d44:	f7fd ff0a 	bl	4b5c <bt_l2cap_send_cb>
    6d48:	f504 71b8 	add.w	r1, r4, #368	; 0x170
    6d4c:	f247 5230 	movw	r2, #30000	; 0x7530
    6d50:	4802      	ldr	r0, [pc, #8]	; (6d5c <smp_send+0x24>)
	k_delayed_work_submit(&smp->work, SMP_TIMEOUT);
}
    6d52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6d56:	f00c bd9b 	b.w	13890 <k_delayed_work_submit_to_queue>
    6d5a:	bf00      	nop
    6d5c:	20002238 	.word	0x20002238

00006d60 <compute_and_check_and_send_slave_dhcheck>:
}
#endif /* CONFIG_BLUETOOTH_CENTRAL */

#if defined(CONFIG_BLUETOOTH_PERIPHERAL)
static u8_t compute_and_check_and_send_slave_dhcheck(struct bt_smp *smp)
{
    6d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u8_t re[16], e[16], r[16];

	memset(r, 0, sizeof(r));
    6d64:	2210      	movs	r2, #16
}
#endif /* CONFIG_BLUETOOTH_CENTRAL */

#if defined(CONFIG_BLUETOOTH_PERIPHERAL)
static u8_t compute_and_check_and_send_slave_dhcheck(struct bt_smp *smp)
{
    6d66:	b0a3      	sub	sp, #140	; 0x8c
    6d68:	4604      	mov	r4, r0
	u8_t re[16], e[16], r[16];

	memset(r, 0, sizeof(r));
    6d6a:	2100      	movs	r1, #0
    6d6c:	eb0d 0002 	add.w	r0, sp, r2
    6d70:	f7fa f9bb 	bl	10ea <memset>

	switch (smp->method) {
    6d74:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
    6d78:	2b03      	cmp	r3, #3
    6d7a:	f200 80b6 	bhi.w	6eea <compute_and_check_and_send_slave_dhcheck+0x18a>
    6d7e:	e8df f003 	tbb	[pc, r3]
    6d82:	0208      	.short	0x0208
    6d84:	0802      	.short	0x0802
	case JUST_WORKS:
	case PASSKEY_CONFIRM:
		break;
	case PASSKEY_DISPLAY:
	case PASSKEY_INPUT:
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
    6d86:	2204      	movs	r2, #4
    6d88:	f504 71b4 	add.w	r1, r4, #360	; 0x168
    6d8c:	a804      	add	r0, sp, #16
    6d8e:	f7fa f980 	bl	1092 <memcpy>
		  u8_t *ltk)
{
	static const u8_t salt[16] = { 0x6c, 0x88, 0x83, 0x91, 0xaa, 0xf5,
					  0xa5, 0x38, 0x60, 0x37, 0x0b, 0xdb,
					  0x5a, 0x60, 0x83, 0xbe };
	u8_t m[53] = { 0x00, /* counter */
    6d92:	ad14      	add	r5, sp, #80	; 0x50
    6d94:	2235      	movs	r2, #53	; 0x35
    6d96:	2100      	movs	r1, #0
    6d98:	4628      	mov	r0, r5
		return BT_SMP_ERR_UNSPECIFIED;
	}

	/* calculate LTK and mackey */
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
		   &smp->chan.chan.conn->le.init_addr,
    6d9a:	f8d4 a000 	ldr.w	sl, [r4]
		  u8_t *ltk)
{
	static const u8_t salt[16] = { 0x6c, 0x88, 0x83, 0x91, 0xaa, 0xf5,
					  0xa5, 0x38, 0x60, 0x37, 0x0b, 0xdb,
					  0x5a, 0x60, 0x83, 0xbe };
	u8_t m[53] = { 0x00, /* counter */
    6d9e:	f7fa f9a4 	bl	10ea <memset>
    6da2:	2362      	movs	r3, #98	; 0x62
    6da4:	f88d 3051 	strb.w	r3, [sp, #81]	; 0x51
    6da8:	2374      	movs	r3, #116	; 0x74
    6daa:	f88d 3052 	strb.w	r3, [sp, #82]	; 0x52
	int err;

	BT_DBG("w %s", bt_hex(w, 32));
	BT_DBG("n1 %s n2 %s", bt_hex(n1, 16), bt_hex(n2, 16));

	sys_memcpy_swap(ws, w, 32);
    6dae:	ae0c      	add	r6, sp, #48	; 0x30
		  u8_t *ltk)
{
	static const u8_t salt[16] = { 0x6c, 0x88, 0x83, 0x91, 0xaa, 0xf5,
					  0xa5, 0x38, 0x60, 0x37, 0x0b, 0xdb,
					  0x5a, 0x60, 0x83, 0xbe };
	u8_t m[53] = { 0x00, /* counter */
    6db0:	236c      	movs	r3, #108	; 0x6c
    6db2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
	int err;

	BT_DBG("w %s", bt_hex(w, 32));
	BT_DBG("n1 %s n2 %s", bt_hex(n1, 16), bt_hex(n2, 16));

	sys_memcpy_swap(ws, w, 32);
    6db6:	2220      	movs	r2, #32
		  u8_t *ltk)
{
	static const u8_t salt[16] = { 0x6c, 0x88, 0x83, 0x91, 0xaa, 0xf5,
					  0xa5, 0x38, 0x60, 0x37, 0x0b, 0xdb,
					  0x5a, 0x60, 0x83, 0xbe };
	u8_t m[53] = { 0x00, /* counter */
    6db8:	2365      	movs	r3, #101	; 0x65
	int err;

	BT_DBG("w %s", bt_hex(w, 32));
	BT_DBG("n1 %s n2 %s", bt_hex(n1, 16), bt_hex(n2, 16));

	sys_memcpy_swap(ws, w, 32);
    6dba:	f204 1127 	addw	r1, r4, #295	; 0x127
    6dbe:	4630      	mov	r0, r6
		  u8_t *ltk)
{
	static const u8_t salt[16] = { 0x6c, 0x88, 0x83, 0x91, 0xaa, 0xf5,
					  0xa5, 0x38, 0x60, 0x37, 0x0b, 0xdb,
					  0x5a, 0x60, 0x83, 0xbe };
	u8_t m[53] = { 0x00, /* counter */
    6dc0:	f04f 0b01 	mov.w	fp, #1
    6dc4:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
    6dc8:	f88d b083 	strb.w	fp, [sp, #131]	; 0x83
	int err;

	BT_DBG("w %s", bt_hex(w, 32));
	BT_DBG("n1 %s n2 %s", bt_hex(n1, 16), bt_hex(n2, 16));

	sys_memcpy_swap(ws, w, 32);
    6dcc:	f7ff fde6 	bl	699c <sys_memcpy_swap>

	err = bt_smp_aes_cmac(salt, ws, 32, t);
    6dd0:	ab08      	add	r3, sp, #32
    6dd2:	2220      	movs	r2, #32
    6dd4:	4631      	mov	r1, r6
    6dd6:	4848      	ldr	r0, [pc, #288]	; (6ef8 <compute_and_check_and_send_slave_dhcheck+0x198>)
	default:
		return BT_SMP_ERR_UNSPECIFIED;
	}

	/* calculate LTK and mackey */
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
    6dd8:	f104 08c7 	add.w	r8, r4, #199	; 0xc7
    6ddc:	f104 09b7 	add.w	r9, r4, #183	; 0xb7
		   &smp->chan.chan.conn->le.init_addr,
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
    6de0:	f204 1757 	addw	r7, r4, #343	; 0x157
	BT_DBG("w %s", bt_hex(w, 32));
	BT_DBG("n1 %s n2 %s", bt_hex(n1, 16), bt_hex(n2, 16));

	sys_memcpy_swap(ws, w, 32);

	err = bt_smp_aes_cmac(salt, ws, 32, t);
    6de4:	f7ff fe4c 	bl	6a80 <bt_smp_aes_cmac>
	if (err) {
    6de8:	bbd0      	cbnz	r0, 6e60 <compute_and_check_and_send_slave_dhcheck+0x100>
		return err;
	}

	BT_DBG("t %s", bt_hex(t, 16));

	sys_memcpy_swap(m + 5, n1, 16);
    6dea:	2210      	movs	r2, #16
    6dec:	4641      	mov	r1, r8
    6dee:	f10d 0055 	add.w	r0, sp, #85	; 0x55
    6df2:	f7ff fdd3 	bl	699c <sys_memcpy_swap>
	sys_memcpy_swap(m + 21, n2, 16);
    6df6:	2210      	movs	r2, #16
    6df8:	4649      	mov	r1, r9
    6dfa:	f10d 0065 	add.w	r0, sp, #101	; 0x65
    6dfe:	f7ff fdcd 	bl	699c <sys_memcpy_swap>
	m[37] = a1->type;
    6e02:	f89a 305b 	ldrb.w	r3, [sl, #91]	; 0x5b
    6e06:	f88d 3075 	strb.w	r3, [sp, #117]	; 0x75
	sys_memcpy_swap(m + 38, a1->a.val, 6);
    6e0a:	2206      	movs	r2, #6
    6e0c:	f10a 015c 	add.w	r1, sl, #92	; 0x5c
    6e10:	f10d 0076 	add.w	r0, sp, #118	; 0x76
    6e14:	f7ff fdc2 	bl	699c <sys_memcpy_swap>
	m[44] = a2->type;
    6e18:	f89a 3062 	ldrb.w	r3, [sl, #98]	; 0x62
    6e1c:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
	sys_memcpy_swap(m + 45, a2->a.val, 6);
    6e20:	2206      	movs	r2, #6
    6e22:	f10a 0163 	add.w	r1, sl, #99	; 0x63
    6e26:	f10d 007d 	add.w	r0, sp, #125	; 0x7d
    6e2a:	f7ff fdb7 	bl	699c <sys_memcpy_swap>

	err = bt_smp_aes_cmac(t, m, sizeof(m), mackey);
    6e2e:	463b      	mov	r3, r7
    6e30:	2235      	movs	r2, #53	; 0x35
    6e32:	4629      	mov	r1, r5
    6e34:	a808      	add	r0, sp, #32
    6e36:	f7ff fe23 	bl	6a80 <bt_smp_aes_cmac>
	if (err) {
    6e3a:	b988      	cbnz	r0, 6e60 <compute_and_check_and_send_slave_dhcheck+0x100>
		return err;
	}

	BT_DBG("mackey %1s", bt_hex(mackey, 16));

	sys_mem_swap(mackey, 16);
    6e3c:	4638      	mov	r0, r7

	/* calculate LTK and mackey */
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
		   &smp->chan.chan.conn->le.init_addr,
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
		   smp->tk)) {
    6e3e:	f104 0ad7 	add.w	sl, r4, #215	; 0xd7
		return err;
	}

	BT_DBG("mackey %1s", bt_hex(mackey, 16));

	sys_mem_swap(mackey, 16);
    6e42:	f7ff fefb 	bl	6c3c <sys_mem_swap.constprop.13>

	/* counter for ltk is 1 */
	m[0] = 0x01;

	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
    6e46:	4653      	mov	r3, sl
    6e48:	2235      	movs	r2, #53	; 0x35
    6e4a:	4629      	mov	r1, r5
    6e4c:	a808      	add	r0, sp, #32
	BT_DBG("mackey %1s", bt_hex(mackey, 16));

	sys_mem_swap(mackey, 16);

	/* counter for ltk is 1 */
	m[0] = 0x01;
    6e4e:	f88d b050 	strb.w	fp, [sp, #80]	; 0x50

	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
    6e52:	f7ff fe15 	bl	6a80 <bt_smp_aes_cmac>
	if (err) {
    6e56:	b918      	cbnz	r0, 6e60 <compute_and_check_and_send_slave_dhcheck+0x100>
		return err;
	}

	BT_DBG("ltk %s", bt_hex(ltk, 16));

	sys_mem_swap(ltk, 16);
    6e58:	4650      	mov	r0, sl
    6e5a:	f7ff feef 	bl	6c3c <sys_mem_swap.constprop.13>
    6e5e:	e001      	b.n	6e64 <compute_and_check_and_send_slave_dhcheck+0x104>
	default:
		return BT_SMP_ERR_UNSPECIFIED;
	}

	/* calculate LTK and mackey */
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
    6e60:	2800      	cmp	r0, #0
    6e62:	d142      	bne.n	6eea <compute_and_check_and_send_slave_dhcheck+0x18a>
		return BT_SMP_ERR_UNSPECIFIED;
	}

	/* calculate local DHKey check */
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
		   &smp->chan.chan.conn->le.resp_addr,
    6e64:	4622      	mov	r2, r4
		   smp->tk)) {
		return BT_SMP_ERR_UNSPECIFIED;
	}

	/* calculate local DHKey check */
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
    6e66:	4638      	mov	r0, r7
		   &smp->chan.chan.conn->le.resp_addr,
    6e68:	f852 3ba1 	ldr.w	r3, [r2], #161
		   smp->tk)) {
		return BT_SMP_ERR_UNSPECIFIED;
	}

	/* calculate local DHKey check */
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
    6e6c:	9503      	str	r5, [sp, #12]
		   &smp->chan.chan.conn->le.resp_addr,
		   &smp->chan.chan.conn->le.init_addr, e)) {
    6e6e:	f103 015b 	add.w	r1, r3, #91	; 0x5b
		return BT_SMP_ERR_UNSPECIFIED;
	}

	/* calculate local DHKey check */
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
		   &smp->chan.chan.conn->le.resp_addr,
    6e72:	3362      	adds	r3, #98	; 0x62
		   smp->tk)) {
		return BT_SMP_ERR_UNSPECIFIED;
	}

	/* calculate local DHKey check */
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
    6e74:	e88d 000c 	stmia.w	sp, {r2, r3}
    6e78:	9102      	str	r1, [sp, #8]
    6e7a:	ab04      	add	r3, sp, #16
    6e7c:	4642      	mov	r2, r8
    6e7e:	4649      	mov	r1, r9
    6e80:	f7ff feea 	bl	6c58 <smp_f6>
    6e84:	bb88      	cbnz	r0, 6eea <compute_and_check_and_send_slave_dhcheck+0x18a>
		return BT_SMP_ERR_UNSPECIFIED;
	}

	/* calculate remote DHKey check */
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
		   &smp->chan.chan.conn->le.init_addr,
    6e86:	4622      	mov	r2, r4
		   &smp->chan.chan.conn->le.init_addr, e)) {
		return BT_SMP_ERR_UNSPECIFIED;
	}

	/* calculate remote DHKey check */
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
    6e88:	4638      	mov	r0, r7
		   &smp->chan.chan.conn->le.init_addr,
    6e8a:	f852 3b9a 	ldr.w	r3, [r2], #154
		   &smp->chan.chan.conn->le.init_addr, e)) {
		return BT_SMP_ERR_UNSPECIFIED;
	}

	/* calculate remote DHKey check */
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
    6e8e:	9603      	str	r6, [sp, #12]
		   &smp->chan.chan.conn->le.init_addr,
		   &smp->chan.chan.conn->le.resp_addr, re)) {
    6e90:	f103 0162 	add.w	r1, r3, #98	; 0x62
		return BT_SMP_ERR_UNSPECIFIED;
	}

	/* calculate remote DHKey check */
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
		   &smp->chan.chan.conn->le.init_addr,
    6e94:	335b      	adds	r3, #91	; 0x5b
		   &smp->chan.chan.conn->le.init_addr, e)) {
		return BT_SMP_ERR_UNSPECIFIED;
	}

	/* calculate remote DHKey check */
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
    6e96:	e88d 000c 	stmia.w	sp, {r2, r3}
    6e9a:	9102      	str	r1, [sp, #8]
    6e9c:	ab04      	add	r3, sp, #16
    6e9e:	464a      	mov	r2, r9
    6ea0:	4641      	mov	r1, r8
    6ea2:	f7ff fed9 	bl	6c58 <smp_f6>
    6ea6:	bb00      	cbnz	r0, 6eea <compute_and_check_and_send_slave_dhcheck+0x18a>
		   &smp->chan.chan.conn->le.resp_addr, re)) {
		return BT_SMP_ERR_UNSPECIFIED;
	}

	/* compare received E with calculated remote */
	if (memcmp(smp->e, re, 16)) {
    6ea8:	2210      	movs	r2, #16
    6eaa:	4631      	mov	r1, r6
    6eac:	f204 1047 	addw	r0, r4, #327	; 0x147
    6eb0:	f7fa f8bf 	bl	1032 <memcmp>
    6eb4:	4607      	mov	r7, r0
    6eb6:	b9d0      	cbnz	r0, 6eee <compute_and_check_and_send_slave_dhcheck+0x18e>
	struct bt_smp_dhkey_check *req;
	struct net_buf *buf;

	BT_DBG("");

	buf = smp_create_pdu(smp->chan.chan.conn, BT_SMP_DHKEY_CHECK,
    6eb8:	200d      	movs	r0, #13
    6eba:	f7ff feb1 	bl	6c20 <smp_create_pdu.isra.2>
			     sizeof(*req));
	if (!buf) {
    6ebe:	4606      	mov	r6, r0
    6ec0:	b160      	cbz	r0, 6edc <compute_and_check_and_send_slave_dhcheck+0x17c>
		return BT_SMP_ERR_UNSPECIFIED;
	}

	req = net_buf_add(buf, sizeof(*req));
    6ec2:	2110      	movs	r1, #16
    6ec4:	3008      	adds	r0, #8
    6ec6:	f00a fea1 	bl	11c0c <net_buf_simple_add>
	memcpy(req->e, e, sizeof(req->e));
    6eca:	2210      	movs	r2, #16
    6ecc:	4629      	mov	r1, r5
    6ece:	f7fa f8e0 	bl	1092 <memcpy>

	smp_send(smp, buf, NULL);
    6ed2:	463a      	mov	r2, r7
    6ed4:	4631      	mov	r1, r6
    6ed6:	4620      	mov	r0, r4
    6ed8:	f7ff ff2e 	bl	6d38 <smp_send>
	}

	/* send local e */
	sc_smp_send_dhkey_check(smp, e);

	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    6edc:	f104 0094 	add.w	r0, r4, #148	; 0x94
    6ee0:	2101      	movs	r1, #1
    6ee2:	f7ff fdb9 	bl	6a58 <atomic_set_bit>
	return 0;
    6ee6:	2000      	movs	r0, #0
    6ee8:	e002      	b.n	6ef0 <compute_and_check_and_send_slave_dhcheck+0x190>
	case PASSKEY_DISPLAY:
	case PASSKEY_INPUT:
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
		break;
	default:
		return BT_SMP_ERR_UNSPECIFIED;
    6eea:	2008      	movs	r0, #8
    6eec:	e000      	b.n	6ef0 <compute_and_check_and_send_slave_dhcheck+0x190>
		return BT_SMP_ERR_UNSPECIFIED;
	}

	/* compare received E with calculated remote */
	if (memcmp(smp->e, re, 16)) {
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
    6eee:	200b      	movs	r0, #11
	/* send local e */
	sc_smp_send_dhkey_check(smp, e);

	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
	return 0;
}
    6ef0:	b023      	add	sp, #140	; 0x8c
    6ef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6ef6:	bf00      	nop
    6ef8:	0001653e 	.word	0x0001653e

00006efc <send_pairing_rsp>:
#endif /* CONFIG_BLUETOOTH_SIGNING */
}

#if defined(CONFIG_BLUETOOTH_PERIPHERAL)
static u8_t send_pairing_rsp(struct bt_smp *smp)
{
    6efc:	b538      	push	{r3, r4, r5, lr}
    6efe:	4605      	mov	r5, r0
	struct bt_conn *conn = smp->chan.chan.conn;
	struct bt_smp_pairing *rsp;
	struct net_buf *rsp_buf;

	rsp_buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
    6f00:	2002      	movs	r0, #2
    6f02:	f7ff fe8d 	bl	6c20 <smp_create_pdu.isra.2>
	if (!rsp_buf) {
    6f06:	4604      	mov	r4, r0
    6f08:	b178      	cbz	r0, 6f2a <send_pairing_rsp+0x2e>
		return BT_SMP_ERR_UNSPECIFIED;
	}

	rsp = net_buf_add(rsp_buf, sizeof(*rsp));
    6f0a:	2106      	movs	r1, #6
    6f0c:	3008      	adds	r0, #8
    6f0e:	f00a fe7d 	bl	11c0c <net_buf_simple_add>
	memcpy(rsp, smp->prsp + 1, sizeof(*rsp));
    6f12:	f105 01a1 	add.w	r1, r5, #161	; 0xa1
    6f16:	2206      	movs	r2, #6
    6f18:	f7fa f8bb 	bl	1092 <memcpy>

	smp_send(smp, rsp_buf, NULL);
    6f1c:	4628      	mov	r0, r5
    6f1e:	2200      	movs	r2, #0
    6f20:	4621      	mov	r1, r4
    6f22:	f7ff ff09 	bl	6d38 <smp_send>

	return 0;
    6f26:	2000      	movs	r0, #0
    6f28:	bd38      	pop	{r3, r4, r5, pc}
	struct bt_smp_pairing *rsp;
	struct net_buf *rsp_buf;

	rsp_buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
	if (!rsp_buf) {
		return BT_SMP_ERR_UNSPECIFIED;
    6f2a:	2008      	movs	r0, #8
	memcpy(rsp, smp->prsp + 1, sizeof(*rsp));

	smp_send(smp, rsp_buf, NULL);

	return 0;
}
    6f2c:	bd38      	pop	{r3, r4, r5, pc}
	...

00006f30 <smp_pairing_req>:

	return 0;
}

static u8_t smp_pairing_req(struct bt_smp *smp, struct net_buf *buf)
{
    6f30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_smp_pairing *req = (void *)buf->data;
    6f34:	688e      	ldr	r6, [r1, #8]
	struct bt_smp_pairing *rsp;
	int ret;

	BT_DBG("");

	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    6f36:	78f3      	ldrb	r3, [r6, #3]
    6f38:	3b07      	subs	r3, #7
    6f3a:	2b09      	cmp	r3, #9

	return 0;
}

static u8_t smp_pairing_req(struct bt_smp *smp, struct net_buf *buf)
{
    6f3c:	b087      	sub	sp, #28
    6f3e:	4605      	mov	r5, r0
	struct bt_smp_pairing *rsp;
	int ret;

	BT_DBG("");

	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    6f40:	f200 8140 	bhi.w	71c4 <smp_pairing_req+0x294>
#endif /* !CONFIG_BLUETOOTH_SMP_SC_ONLY */

static int smp_init(struct bt_smp *smp)
{
	/* Initialize SMP context without clearing L2CAP channel context */
	memset((u8_t *)smp + sizeof(smp->chan), 0,
    6f44:	f100 0890 	add.w	r8, r0, #144	; 0x90
    6f48:	2100      	movs	r1, #0
    6f4a:	22e0      	movs	r2, #224	; 0xe0
    6f4c:	4640      	mov	r0, r8
    6f4e:	f7fa f8cc 	bl	10ea <memset>
	       sizeof(*smp) - (sizeof(smp->chan) + sizeof(smp->work)));

	/* Generate local random number */
	if (bt_rand(smp->prnd, 16)) {
    6f52:	2110      	movs	r1, #16
    6f54:	f105 00b7 	add.w	r0, r5, #183	; 0xb7
    6f58:	f004 f86e 	bl	b038 <bt_rand>
    6f5c:	2800      	cmp	r0, #0
    6f5e:	f040 8133 	bne.w	71c8 <smp_pairing_req+0x298>
		return BT_SMP_ERR_UNSPECIFIED;
	}

	BT_DBG("prnd %s", bt_hex(smp->prnd, 16));

	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
    6f62:	2105      	movs	r1, #5
    6f64:	4640      	mov	r0, r8
    6f66:	f7ff fd77 	bl	6a58 <atomic_set_bit>
	if (ret) {
		return ret;
	}

	/* Store req for later use */
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
    6f6a:	2301      	movs	r3, #1
    6f6c:	f885 3099 	strb.w	r3, [r5, #153]	; 0x99
	memcpy(smp->preq + 1, req, sizeof(*req));
    6f70:	2206      	movs	r2, #6
    6f72:	4631      	mov	r1, r6
    6f74:	f105 009a 	add.w	r0, r5, #154	; 0x9a
    6f78:	f7fa f88b 	bl	1092 <memcpy>

	/* create rsp, it will be used later on */
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
    6f7c:	2302      	movs	r3, #2
    6f7e:	f885 30a0 	strb.w	r3, [r5, #160]	; 0xa0
	return 0;
}

static u8_t get_auth(u8_t auth)
{
	if (sc_supported) {
    6f82:	4b94      	ldr	r3, [pc, #592]	; (71d4 <smp_pairing_req+0x2a4>)

	/* create rsp, it will be used later on */
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
	rsp = (struct bt_smp_pairing *)&smp->prsp[1];

	rsp->auth_req = get_auth(req->auth_req);
    6f84:	78b4      	ldrb	r4, [r6, #2]
	return 0;
}

static u8_t get_auth(u8_t auth)
{
	if (sc_supported) {
    6f86:	781b      	ldrb	r3, [r3, #0]
    6f88:	b113      	cbz	r3, 6f90 <smp_pairing_req+0x60>
		auth &= BT_SMP_AUTH_MASK_SC;
    6f8a:	f004 040f 	and.w	r4, r4, #15
    6f8e:	e001      	b.n	6f94 <smp_pairing_req+0x64>
	} else {
		auth &= BT_SMP_AUTH_MASK;
    6f90:	f004 0407 	and.w	r4, r4, #7
	}

	if (get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) {
    6f94:	f7ff fd0e 	bl	69b4 <get_io_capa>
    6f98:	2803      	cmp	r0, #3
		auth &= ~(BT_SMP_AUTH_MITM);
    6f9a:	bf0c      	ite	eq
    6f9c:	f004 040b 	andeq.w	r4, r4, #11
	} else {
		auth |= BT_SMP_AUTH_MITM;
    6fa0:	f044 0404 	orrne.w	r4, r4, #4

	/* create rsp, it will be used later on */
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
	rsp = (struct bt_smp_pairing *)&smp->prsp[1];

	rsp->auth_req = get_auth(req->auth_req);
    6fa4:	f885 40a3 	strb.w	r4, [r5, #163]	; 0xa3
	rsp->io_capability = get_io_capa();
    6fa8:	f7ff fd04 	bl	69b4 <get_io_capa>
	rsp->oob_flag = BT_SMP_OOB_NOT_PRESENT;
    6fac:	f04f 0900 	mov.w	r9, #0
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
    6fb0:	2310      	movs	r3, #16
	/* create rsp, it will be used later on */
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
	rsp = (struct bt_smp_pairing *)&smp->prsp[1];

	rsp->auth_req = get_auth(req->auth_req);
	rsp->io_capability = get_io_capa();
    6fb2:	f885 00a1 	strb.w	r0, [r5, #161]	; 0xa1
	rsp->oob_flag = BT_SMP_OOB_NOT_PRESENT;
    6fb6:	f885 90a2 	strb.w	r9, [r5, #162]	; 0xa2
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
    6fba:	f885 30a4 	strb.w	r3, [r5, #164]	; 0xa4
	rsp->init_key_dist = (req->init_key_dist & RECV_KEYS);
    6fbe:	7933      	ldrb	r3, [r6, #4]
    6fc0:	f003 0303 	and.w	r3, r3, #3
    6fc4:	f885 30a5 	strb.w	r3, [r5, #165]	; 0xa5
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
    6fc8:	7973      	ldrb	r3, [r6, #5]

	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    6fca:	f014 0f08 	tst.w	r4, #8
	rsp->auth_req = get_auth(req->auth_req);
	rsp->io_capability = get_io_capa();
	rsp->oob_flag = BT_SMP_OOB_NOT_PRESENT;
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
	rsp->init_key_dist = (req->init_key_dist & RECV_KEYS);
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
    6fce:	f003 0301 	and.w	r3, r3, #1
    6fd2:	f885 30a6 	strb.w	r3, [r5, #166]	; 0xa6
    6fd6:	f105 0794 	add.w	r7, r5, #148	; 0x94

	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    6fda:	d00e      	beq.n	6ffa <smp_pairing_req+0xca>
    6fdc:	78b3      	ldrb	r3, [r6, #2]
    6fde:	071c      	lsls	r4, r3, #28
    6fe0:	d50b      	bpl.n	6ffa <smp_pairing_req+0xca>
	    (req->auth_req & BT_SMP_AUTH_SC)) {
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
    6fe2:	2105      	movs	r1, #5
    6fe4:	4638      	mov	r0, r7
    6fe6:	f7ff fd37 	bl	6a58 <atomic_set_bit>

		rsp->init_key_dist &= RECV_KEYS_SC;
    6fea:	f895 30a5 	ldrb.w	r3, [r5, #165]	; 0xa5
		rsp->resp_key_dist &= SEND_KEYS_SC;
    6fee:	f885 90a6 	strb.w	r9, [r5, #166]	; 0xa6

	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
	    (req->auth_req & BT_SMP_AUTH_SC)) {
		atomic_set_bit(smp->flags, SMP_FLAG_SC);

		rsp->init_key_dist &= RECV_KEYS_SC;
    6ff2:	f003 0302 	and.w	r3, r3, #2
    6ff6:	f885 30a5 	strb.w	r3, [r5, #165]	; 0xa5
		rsp->resp_key_dist &= SEND_KEYS_SC;
	}

	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
    6ffa:	f895 30a3 	ldrb.w	r3, [r5, #163]	; 0xa3
    6ffe:	0698      	lsls	r0, r3, #26
    7000:	d506      	bpl.n	7010 <smp_pairing_req+0xe0>
    7002:	78b3      	ldrb	r3, [r6, #2]
    7004:	0699      	lsls	r1, r3, #26
    7006:	d503      	bpl.n	7010 <smp_pairing_req+0xe0>
	    (req->auth_req & BT_SMP_AUTH_CT2)) {
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
    7008:	2111      	movs	r1, #17
    700a:	4638      	mov	r0, r7
    700c:	f7ff fd24 	bl	6a58 <atomic_set_bit>
	}

	smp->local_dist = rsp->resp_key_dist;
    7010:	f895 30a6 	ldrb.w	r3, [r5, #166]	; 0xa6
    7014:	f885 316d 	strb.w	r3, [r5, #365]	; 0x16d
	smp->remote_dist = rsp->init_key_dist;
    7018:	f895 30a5 	ldrb.w	r3, [r5, #165]	; 0xa5
    701c:	f885 316e 	strb.w	r3, [r5, #366]	; 0x16e

	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
    7020:	f895 30a3 	ldrb.w	r3, [r5, #163]	; 0xa3
    7024:	07da      	lsls	r2, r3, #31
    7026:	d506      	bpl.n	7036 <smp_pairing_req+0x106>
    7028:	78b3      	ldrb	r3, [r6, #2]
    702a:	07db      	lsls	r3, r3, #31
    702c:	d503      	bpl.n	7036 <smp_pairing_req+0x106>
	    (req->auth_req & BT_SMP_AUTH_BONDING)) {
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
    702e:	210a      	movs	r1, #10
    7030:	4638      	mov	r0, r7
    7032:	f7ff fd11 	bl	6a58 <atomic_set_bit>
	}

	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
    7036:	2103      	movs	r1, #3
    7038:	4638      	mov	r0, r7
    703a:	f7ff fd0d 	bl	6a58 <atomic_set_bit>

	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    703e:	2105      	movs	r1, #5
    7040:	4638      	mov	r0, r7
    7042:	f7fa ffb9 	bl	1fb8 <atomic_test_bit>
    7046:	7836      	ldrb	r6, [r6, #0]
    7048:	2800      	cmp	r0, #0
    704a:	f040 8087 	bne.w	715c <smp_pairing_req+0x22c>
static u8_t legacy_get_pair_method(struct bt_smp *smp, u8_t remote_io)
{
	struct bt_smp_pairing *req, *rsp;
	u8_t method;

	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY)
    704e:	2e04      	cmp	r6, #4
    7050:	d819      	bhi.n	7086 <smp_pairing_req+0x156>
    7052:	f895 209c 	ldrb.w	r2, [r5, #156]	; 0x9c
    7056:	f895 30a3 	ldrb.w	r3, [r5, #163]	; 0xa3
    705a:	4313      	orrs	r3, r2
    705c:	f003 0304 	and.w	r3, r3, #4

	req = (struct bt_smp_pairing *)&smp->preq[1];
	rsp = (struct bt_smp_pairing *)&smp->prsp[1];

	/* if none side requires MITM use JustWorks */
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
    7060:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    7064:	b183      	cbz	r3, 7088 <smp_pairing_req+0x158>
		return JUST_WORKS;
	}

	method = gen_method_legacy[remote_io][get_io_capa()];
    7066:	f7ff fca5 	bl	69b4 <get_io_capa>
    706a:	4b5b      	ldr	r3, [pc, #364]	; (71d8 <smp_pairing_req+0x2a8>)
    706c:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    7070:	441e      	add	r6, r3
    7072:	5c34      	ldrb	r4, [r6, r0]

	/* if both sides have KeyboardDisplay capabilities, initiator displays
	 * and responder inputs
	 */
	if (method == PASSKEY_ROLE) {
    7074:	2c04      	cmp	r4, #4
    7076:	d107      	bne.n	7088 <smp_pairing_req+0x158>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    7078:	682b      	ldr	r3, [r5, #0]
    707a:	78db      	ldrb	r3, [r3, #3]
			method = PASSKEY_DISPLAY;
		} else {
			method = PASSKEY_INPUT;
    707c:	2b00      	cmp	r3, #0
    707e:	bf0c      	ite	eq
    7080:	2402      	moveq	r4, #2
    7082:	2401      	movne	r4, #1
    7084:	e000      	b.n	7088 <smp_pairing_req+0x158>
{
	struct bt_smp_pairing *req, *rsp;
	u8_t method;

	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY)
		return JUST_WORKS;
    7086:	4604      	mov	r4, r0
{
	u8_t ret;

	BT_DBG("");

	smp->method = legacy_get_pair_method(smp, remote_io);
    7088:	f885 4098 	strb.w	r4, [r5, #152]	; 0x98

	/* ask for consent if pairing is not due to sending SecReq*/
	if (smp->method == JUST_WORKS &&
    708c:	b954      	cbnz	r4, 70a4 <smp_pairing_req+0x174>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    708e:	210c      	movs	r1, #12
    7090:	4638      	mov	r0, r7
    7092:	f7fa ff91 	bl	1fb8 <atomic_test_bit>
	BT_DBG("");

	smp->method = legacy_get_pair_method(smp, remote_io);

	/* ask for consent if pairing is not due to sending SecReq*/
	if (smp->method == JUST_WORKS &&
    7096:	b928      	cbnz	r0, 70a4 <smp_pairing_req+0x174>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    7098:	4e50      	ldr	r6, [pc, #320]	; (71dc <smp_pairing_req+0x2ac>)
    709a:	6833      	ldr	r3, [r6, #0]
    709c:	b113      	cbz	r3, 70a4 <smp_pairing_req+0x174>
	    bt_auth && bt_auth->pairing_confirm) {
    709e:	691b      	ldr	r3, [r3, #16]
    70a0:	2b00      	cmp	r3, #0
    70a2:	d17d      	bne.n	71a0 <smp_pairing_req+0x270>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
		bt_auth->pairing_confirm(smp->chan.chan.conn);
		return 0;
	}

	ret = send_pairing_rsp(smp);
    70a4:	4628      	mov	r0, r5
    70a6:	f7ff ff29 	bl	6efc <send_pairing_rsp>
	if (ret) {
    70aa:	4604      	mov	r4, r0
    70ac:	2800      	cmp	r0, #0
    70ae:	f040 808c 	bne.w	71ca <smp_pairing_req+0x29a>
		return ret;
	}

	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    70b2:	4640      	mov	r0, r8
    70b4:	2103      	movs	r1, #3
    70b6:	f7ff fccf 	bl	6a58 <atomic_set_bit>
	return method;
}

static u8_t legacy_request_tk(struct bt_smp *smp)
{
	struct bt_conn *conn = smp->chan.chan.conn;
    70ba:	682e      	ldr	r6, [r5, #0]
	/*
	 * Fail if we have keys that are stronger than keys that will be
	 * distributed in new pairing. This is to avoid replacing authenticated
	 * keys with unauthenticated ones.
	  */
	keys = bt_keys_find_addr(&conn->le.dst);
    70bc:	f106 0054 	add.w	r0, r6, #84	; 0x54
    70c0:	f001 f934 	bl	832c <bt_keys_find_addr>
	if (keys && atomic_test_bit(keys->flags, BT_KEYS_AUTHENTICATED) &&
    70c4:	b190      	cbz	r0, 70ec <smp_pairing_req+0x1bc>
    70c6:	4621      	mov	r1, r4
    70c8:	3008      	adds	r0, #8
    70ca:	f7fa ff75 	bl	1fb8 <atomic_test_bit>
    70ce:	b168      	cbz	r0, 70ec <smp_pairing_req+0x1bc>
    70d0:	f895 3098 	ldrb.w	r3, [r5, #152]	; 0x98
    70d4:	b953      	cbnz	r3, 70ec <smp_pairing_req+0x1bc>
	    smp->method == JUST_WORKS) {
		BT_ERR("JustWorks failed, authenticated keys present");
    70d6:	4b42      	ldr	r3, [pc, #264]	; (71e0 <smp_pairing_req+0x2b0>)
    70d8:	9301      	str	r3, [sp, #4]
    70da:	4b42      	ldr	r3, [pc, #264]	; (71e4 <smp_pairing_req+0x2b4>)
    70dc:	9300      	str	r3, [sp, #0]
    70de:	4a42      	ldr	r2, [pc, #264]	; (71e8 <smp_pairing_req+0x2b8>)
    70e0:	4b42      	ldr	r3, [pc, #264]	; (71ec <smp_pairing_req+0x2bc>)
    70e2:	4943      	ldr	r1, [pc, #268]	; (71f0 <smp_pairing_req+0x2c0>)
    70e4:	4843      	ldr	r0, [pc, #268]	; (71f4 <smp_pairing_req+0x2c4>)
    70e6:	f7fa f9cb 	bl	1480 <printk>
    70ea:	e06d      	b.n	71c8 <smp_pairing_req+0x298>
		return BT_SMP_ERR_UNSPECIFIED;
	}

	switch (smp->method) {
    70ec:	f895 4098 	ldrb.w	r4, [r5, #152]	; 0x98
    70f0:	2c01      	cmp	r4, #1
    70f2:	d01c      	beq.n	712e <smp_pairing_req+0x1fe>
    70f4:	d369      	bcc.n	71ca <smp_pairing_req+0x29a>
    70f6:	2c02      	cmp	r4, #2
    70f8:	d124      	bne.n	7144 <smp_pairing_req+0x214>
	case PASSKEY_DISPLAY:
		if (bt_rand(&passkey, sizeof(passkey))) {
    70fa:	2104      	movs	r1, #4
    70fc:	a805      	add	r0, sp, #20
    70fe:	f003 ff9b 	bl	b038 <bt_rand>
    7102:	4604      	mov	r4, r0
    7104:	2800      	cmp	r0, #0
    7106:	d15f      	bne.n	71c8 <smp_pairing_req+0x298>
			return BT_SMP_ERR_UNSPECIFIED;
		}

		passkey %= 1000000;
    7108:	9905      	ldr	r1, [sp, #20]
    710a:	4a3b      	ldr	r2, [pc, #236]	; (71f8 <smp_pairing_req+0x2c8>)
    710c:	fbb1 f3f2 	udiv	r3, r1, r2
    7110:	fb02 1113 	mls	r1, r2, r3, r1

		bt_auth->passkey_display(conn, passkey);
    7114:	4b31      	ldr	r3, [pc, #196]	; (71dc <smp_pairing_req+0x2ac>)
	case PASSKEY_DISPLAY:
		if (bt_rand(&passkey, sizeof(passkey))) {
			return BT_SMP_ERR_UNSPECIFIED;
		}

		passkey %= 1000000;
    7116:	9105      	str	r1, [sp, #20]

		bt_auth->passkey_display(conn, passkey);
    7118:	681b      	ldr	r3, [r3, #0]
    711a:	4630      	mov	r0, r6
    711c:	681b      	ldr	r3, [r3, #0]
    711e:	4798      	blx	r3

		passkey = sys_cpu_to_le32(passkey);
		memcpy(smp->tk, &passkey, sizeof(passkey));
    7120:	2204      	movs	r2, #4
    7122:	a905      	add	r1, sp, #20
    7124:	f105 00d7 	add.w	r0, r5, #215	; 0xd7
    7128:	f7f9 ffb3 	bl	1092 <memcpy>
    712c:	e04d      	b.n	71ca <smp_pairing_req+0x29a>

		break;
	case PASSKEY_INPUT:
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    712e:	2109      	movs	r1, #9
    7130:	4638      	mov	r0, r7
    7132:	f7ff fc91 	bl	6a58 <atomic_set_bit>
		bt_auth->passkey_entry(conn);
    7136:	4b29      	ldr	r3, [pc, #164]	; (71dc <smp_pairing_req+0x2ac>)
    7138:	681b      	ldr	r3, [r3, #0]
    713a:	4630      	mov	r0, r6
    713c:	685b      	ldr	r3, [r3, #4]
    713e:	4798      	blx	r3
	default:
		BT_ERR("Unknown pairing method (%u)", smp->method);
		return BT_SMP_ERR_UNSPECIFIED;
	}

	return 0;
    7140:	2400      	movs	r4, #0
    7142:	e042      	b.n	71ca <smp_pairing_req+0x29a>
		bt_auth->passkey_entry(conn);
		break;
	case JUST_WORKS:
		break;
	default:
		BT_ERR("Unknown pairing method (%u)", smp->method);
    7144:	4b26      	ldr	r3, [pc, #152]	; (71e0 <smp_pairing_req+0x2b0>)
    7146:	9302      	str	r3, [sp, #8]
    7148:	4b26      	ldr	r3, [pc, #152]	; (71e4 <smp_pairing_req+0x2b4>)
    714a:	9300      	str	r3, [sp, #0]
    714c:	9401      	str	r4, [sp, #4]
    714e:	4b27      	ldr	r3, [pc, #156]	; (71ec <smp_pairing_req+0x2bc>)
    7150:	4a25      	ldr	r2, [pc, #148]	; (71e8 <smp_pairing_req+0x2b8>)
    7152:	4927      	ldr	r1, [pc, #156]	; (71f0 <smp_pairing_req+0x2c0>)
    7154:	4829      	ldr	r0, [pc, #164]	; (71fc <smp_pairing_req+0x2cc>)
    7156:	f7fa f993 	bl	1480 <printk>
    715a:	e035      	b.n	71c8 <smp_pairing_req+0x298>

static u8_t get_pair_method(struct bt_smp *smp, u8_t remote_io)
{
	struct bt_smp_pairing *req, *rsp;

	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY)
    715c:	2e04      	cmp	r6, #4
    715e:	d811      	bhi.n	7184 <smp_pairing_req+0x254>
    7160:	f895 209c 	ldrb.w	r2, [r5, #156]	; 0x9c
    7164:	f895 30a3 	ldrb.w	r3, [r5, #163]	; 0xa3
    7168:	4313      	orrs	r3, r2
    716a:	f003 0304 	and.w	r3, r3, #4

	req = (struct bt_smp_pairing *)&smp->preq[1];
	rsp = (struct bt_smp_pairing *)&smp->prsp[1];

	/* if none side requires MITM use JustWorks */
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
    716e:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    7172:	b143      	cbz	r3, 7186 <smp_pairing_req+0x256>
		return JUST_WORKS;
	}

	return gen_method_sc[remote_io][get_io_capa()];
    7174:	f7ff fc1e 	bl	69b4 <get_io_capa>
    7178:	4b21      	ldr	r3, [pc, #132]	; (7200 <smp_pairing_req+0x2d0>)
    717a:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    717e:	441e      	add	r6, r3
    7180:	5c34      	ldrb	r4, [r6, r0]
    7182:	e000      	b.n	7186 <smp_pairing_req+0x256>
static u8_t get_pair_method(struct bt_smp *smp, u8_t remote_io)
{
	struct bt_smp_pairing *req, *rsp;

	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY)
		return JUST_WORKS;
    7184:	2400      	movs	r4, #0
#else
		return legacy_pairing_req(smp, req->io_capability);
#endif /* CONFIG_BLUETOOTH_SMP_SC_ONLY */
	}

	smp->method = get_pair_method(smp, req->io_capability);
    7186:	f885 4098 	strb.w	r4, [r5, #152]	; 0x98
	if (IS_ENABLED(CONFIG_BLUETOOTH_SMP_SC_ONLY) &&
	    smp->method == JUST_WORKS) {
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
	}

	if (smp->method == JUST_WORKS) {
    718a:	b994      	cbnz	r4, 71b2 <smp_pairing_req+0x282>
		if (IS_ENABLED(CONFIG_BLUETOOTH_SMP_SC_ONLY)) {
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
		}

		/* ask for consent if pairing is not due to sending SecReq*/
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    718c:	210c      	movs	r1, #12
    718e:	4638      	mov	r0, r7
    7190:	f7fa ff12 	bl	1fb8 <atomic_test_bit>
    7194:	b968      	cbnz	r0, 71b2 <smp_pairing_req+0x282>
    7196:	4e11      	ldr	r6, [pc, #68]	; (71dc <smp_pairing_req+0x2ac>)
    7198:	6833      	ldr	r3, [r6, #0]
    719a:	b153      	cbz	r3, 71b2 <smp_pairing_req+0x282>
		    bt_auth && bt_auth->pairing_confirm) {
    719c:	691b      	ldr	r3, [r3, #16]
    719e:	b143      	cbz	r3, 71b2 <smp_pairing_req+0x282>
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
    71a0:	4638      	mov	r0, r7
    71a2:	2109      	movs	r1, #9
    71a4:	f7ff fc58 	bl	6a58 <atomic_set_bit>
			bt_auth->pairing_confirm(smp->chan.chan.conn);
    71a8:	6833      	ldr	r3, [r6, #0]
    71aa:	6828      	ldr	r0, [r5, #0]
    71ac:	691b      	ldr	r3, [r3, #16]
    71ae:	4798      	blx	r3
			return 0;
    71b0:	e00b      	b.n	71ca <smp_pairing_req+0x29a>
		}
	}

	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
    71b2:	210c      	movs	r1, #12
    71b4:	4640      	mov	r0, r8
    71b6:	f7ff fc4f 	bl	6a58 <atomic_set_bit>
	return send_pairing_rsp(smp);
    71ba:	4628      	mov	r0, r5
    71bc:	f7ff fe9e 	bl	6efc <send_pairing_rsp>
    71c0:	4604      	mov	r4, r0
    71c2:	e002      	b.n	71ca <smp_pairing_req+0x29a>

	BT_DBG("");

	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
	    (req->max_key_size < BT_SMP_MIN_ENC_KEY_SIZE)) {
		return BT_SMP_ERR_ENC_KEY_SIZE;
    71c4:	2406      	movs	r4, #6
    71c6:	e000      	b.n	71ca <smp_pairing_req+0x29a>
	}

	ret = smp_init(smp);
	if (ret) {
		return ret;
    71c8:	2408      	movs	r4, #8
		}
	}

	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
	return send_pairing_rsp(smp);
}
    71ca:	4620      	mov	r0, r4
    71cc:	b007      	add	sp, #28
    71ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    71d2:	bf00      	nop
    71d4:	20000dc8 	.word	0x20000dc8
    71d8:	000164f7 	.word	0x000164f7
    71dc:	20002110 	.word	0x20002110
    71e0:	00013df4 	.word	0x00013df4
    71e4:	00013df9 	.word	0x00013df9
    71e8:	00013db4 	.word	0x00013db4
    71ec:	00016585 	.word	0x00016585
    71f0:	00013dbb 	.word	0x00013dbb
    71f4:	00014c8e 	.word	0x00014c8e
    71f8:	000f4240 	.word	0x000f4240
    71fc:	00014ccb 	.word	0x00014ccb
    7200:	00016460 	.word	0x00016460

00007204 <sc_send_public_key>:
	return BT_SMP_ERR_CMD_NOTSUPP;
}
#endif /* CONFIG_BLUETOOTH_PERIPHERAL */

static u8_t sc_send_public_key(struct bt_smp *smp)
{
    7204:	b570      	push	{r4, r5, r6, lr}
    7206:	4605      	mov	r5, r0
	struct bt_smp_public_key *req;
	struct net_buf *req_buf;

	req_buf = smp_create_pdu(smp->chan.chan.conn, BT_SMP_CMD_PUBLIC_KEY,
    7208:	200c      	movs	r0, #12
    720a:	f7ff fd09 	bl	6c20 <smp_create_pdu.isra.2>
				 sizeof(*req));
	if (!req_buf) {
    720e:	4604      	mov	r4, r0
    7210:	b1a0      	cbz	r0, 723c <sc_send_public_key+0x38>
		return BT_SMP_ERR_UNSPECIFIED;
	}

	req = net_buf_add(req_buf, sizeof(*req));
    7212:	2140      	movs	r1, #64	; 0x40
    7214:	3008      	adds	r0, #8
    7216:	f00a fcf9 	bl	11c0c <net_buf_simple_add>

	memcpy(req->x, sc_public_key, sizeof(req->x));
    721a:	2220      	movs	r2, #32
    721c:	4908      	ldr	r1, [pc, #32]	; (7240 <sc_send_public_key+0x3c>)
				 sizeof(*req));
	if (!req_buf) {
		return BT_SMP_ERR_UNSPECIFIED;
	}

	req = net_buf_add(req_buf, sizeof(*req));
    721e:	4606      	mov	r6, r0

	memcpy(req->x, sc_public_key, sizeof(req->x));
    7220:	f7f9 ff37 	bl	1092 <memcpy>
	memcpy(req->y, &sc_public_key[32], sizeof(req->y));
    7224:	2220      	movs	r2, #32
    7226:	18b0      	adds	r0, r6, r2
    7228:	4906      	ldr	r1, [pc, #24]	; (7244 <sc_send_public_key+0x40>)
    722a:	f7f9 ff32 	bl	1092 <memcpy>

	smp_send(smp, req_buf, NULL);
    722e:	4628      	mov	r0, r5
    7230:	2200      	movs	r2, #0
    7232:	4621      	mov	r1, r4
    7234:	f7ff fd80 	bl	6d38 <smp_send>

	if (IS_ENABLED(CONFIG_BLUETOOTH_USE_DEBUG_KEYS)) {
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
	}

	return 0;
    7238:	2000      	movs	r0, #0
    723a:	bd70      	pop	{r4, r5, r6, pc}
	struct net_buf *req_buf;

	req_buf = smp_create_pdu(smp->chan.chan.conn, BT_SMP_CMD_PUBLIC_KEY,
				 sizeof(*req));
	if (!req_buf) {
		return BT_SMP_ERR_UNSPECIFIED;
    723c:	2008      	movs	r0, #8
	if (IS_ENABLED(CONFIG_BLUETOOTH_USE_DEBUG_KEYS)) {
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
	}

	return 0;
}
    723e:	bd70      	pop	{r4, r5, r6, pc}
    7240:	20000dc9 	.word	0x20000dc9
    7244:	20000de9 	.word	0x20000de9

00007248 <smp_send_pairing_random>:

	return 0;
}

static u8_t smp_send_pairing_random(struct bt_smp *smp)
{
    7248:	b538      	push	{r3, r4, r5, lr}
    724a:	4605      	mov	r5, r0
	struct bt_conn *conn = smp->chan.chan.conn;
	struct bt_smp_pairing_random *req;
	struct net_buf *rsp_buf;

	rsp_buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
    724c:	2004      	movs	r0, #4
    724e:	f7ff fce7 	bl	6c20 <smp_create_pdu.isra.2>
	if (!rsp_buf) {
    7252:	4604      	mov	r4, r0
    7254:	b178      	cbz	r0, 7276 <smp_send_pairing_random+0x2e>
		return BT_SMP_ERR_UNSPECIFIED;
	}

	req = net_buf_add(rsp_buf, sizeof(*req));
    7256:	2110      	movs	r1, #16
    7258:	3008      	adds	r0, #8
    725a:	f00a fcd7 	bl	11c0c <net_buf_simple_add>
	memcpy(req->val, smp->prnd, sizeof(req->val));
    725e:	f105 01b7 	add.w	r1, r5, #183	; 0xb7
    7262:	2210      	movs	r2, #16
    7264:	f7f9 ff15 	bl	1092 <memcpy>

	smp_send(smp, rsp_buf, NULL);
    7268:	4628      	mov	r0, r5
    726a:	2200      	movs	r2, #0
    726c:	4621      	mov	r1, r4
    726e:	f7ff fd63 	bl	6d38 <smp_send>

	return 0;
    7272:	2000      	movs	r0, #0
    7274:	bd38      	pop	{r3, r4, r5, pc}
	struct bt_smp_pairing_random *req;
	struct net_buf *rsp_buf;

	rsp_buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
	if (!rsp_buf) {
		return BT_SMP_ERR_UNSPECIFIED;
    7276:	2008      	movs	r0, #8
	memcpy(req->val, smp->prnd, sizeof(req->val));

	smp_send(smp, rsp_buf, NULL);

	return 0;
}
    7278:	bd38      	pop	{r3, r4, r5, pc}

0000727a <smp_pairing_rsp>:
    727a:	2007      	movs	r0, #7
    727c:	4770      	bx	lr

0000727e <smp_signing_info>:
    727e:	2007      	movs	r0, #7
    7280:	4770      	bx	lr

00007282 <atomic_test_and_clear_bit>:
 * @param bit Bit number (starting from 0).
 *
 * @return 1 if the bit was set, 0 if it wasn't.
 */
static inline int atomic_test_and_clear_bit(atomic_t *target, int bit)
{
    7282:	b510      	push	{r4, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
    7284:	f001 021f 	and.w	r2, r1, #31
    7288:	2301      	movs	r3, #1
    728a:	4093      	lsls	r3, r2
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    728c:	0949      	lsrs	r1, r1, #5
    728e:	43dc      	mvns	r4, r3
    7290:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    7294:	f3bf 8f5f 	dmb	sy
    7298:	e850 2f00 	ldrex	r2, [r0]
    729c:	ea02 0104 	and.w	r1, r2, r4
    72a0:	e840 1e00 	strex	lr, r1, [r0]
    72a4:	f1be 0f00 	cmp.w	lr, #0
    72a8:	d1f6      	bne.n	7298 <atomic_test_and_clear_bit+0x16>
    72aa:	f3bf 8f5f 	dmb	sy
	atomic_val_t mask = ATOMIC_MASK(bit);
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);

	return (old & mask) != 0;
    72ae:	421a      	tst	r2, r3
}
    72b0:	bf14      	ite	ne
    72b2:	2001      	movne	r0, #1
    72b4:	2000      	moveq	r0, #0
    72b6:	bd10      	pop	{r4, pc}

000072b8 <smp_reset>:
	return BT_FEAT_SC(bt_dev.features);
}
#endif /* CONFIG_BLUETOOTH_BREDR */

static void smp_reset(struct bt_smp *smp)
{
    72b8:	b538      	push	{r3, r4, r5, lr}
    72ba:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    72bc:	6805      	ldr	r5, [r0, #0]

	k_delayed_work_cancel(&smp->work);
    72be:	f500 70b8 	add.w	r0, r0, #368	; 0x170
    72c2:	f00c faad 	bl	13820 <k_delayed_work_cancel>

	smp->method = JUST_WORKS;
    72c6:	2300      	movs	r3, #0
    72c8:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
	atomic_set(&smp->allowed_cmds, 0);
    72cc:	f104 0090 	add.w	r0, r4, #144	; 0x90
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    72d0:	f3bf 8f5f 	dmb	sy
    72d4:	e850 2f00 	ldrex	r2, [r0]
    72d8:	e840 3100 	strex	r1, r3, [r0]
    72dc:	2900      	cmp	r1, #0
    72de:	d1f9      	bne.n	72d4 <smp_reset+0x1c>
    72e0:	f3bf 8f5f 	dmb	sy
    72e4:	f3bf 8f5f 	dmb	sy
    72e8:	3494      	adds	r4, #148	; 0x94
    72ea:	e854 2f00 	ldrex	r2, [r4]
    72ee:	e844 3100 	strex	r1, r3, [r4]
    72f2:	2900      	cmp	r1, #0
    72f4:	d1f9      	bne.n	72ea <smp_reset+0x32>
    72f6:	f3bf 8f5f 	dmb	sy
	atomic_set(smp->flags, 0);

	if (conn->required_sec_level != conn->sec_level) {
    72fa:	7a2b      	ldrb	r3, [r5, #8]
    72fc:	7a6a      	ldrb	r2, [r5, #9]
    72fe:	429a      	cmp	r2, r3
		/* TODO report error */
		/* reset required security level in case of error */
		conn->required_sec_level = conn->sec_level;
    7300:	bf18      	it	ne
    7302:	726b      	strbne	r3, [r5, #9]
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
		return;
	}

	if (IS_ENABLED(CONFIG_BLUETOOTH_PERIPHERAL)) {
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
    7304:	2101      	movs	r1, #1
	}
}
    7306:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
		return;
	}

	if (IS_ENABLED(CONFIG_BLUETOOTH_PERIPHERAL)) {
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
    730a:	f7ff bba5 	b.w	6a58 <atomic_set_bit>

0000730e <smp_error>:
	bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb);
	k_delayed_work_submit(&smp->work, SMP_TIMEOUT);
}

static int smp_error(struct bt_smp *smp, u8_t reason)
{
    730e:	b570      	push	{r4, r5, r6, lr}
    7310:	4605      	mov	r5, r0
    7312:	460e      	mov	r6, r1
			sc_derive_link_key(smp);
		}
	}
#endif /* CONFIG_BLUETOOTH_BREDR */

	smp_reset(smp);
    7314:	f7ff ffd0 	bl	72b8 <smp_reset>
	struct net_buf *buf;

	/* reset context and report */
	smp_pairing_complete(smp, reason);

	buf = smp_create_pdu(smp->chan.chan.conn, BT_SMP_CMD_PAIRING_FAIL,
    7318:	2005      	movs	r0, #5
    731a:	f7ff fc81 	bl	6c20 <smp_create_pdu.isra.2>
			     sizeof(*rsp));
	if (!buf) {
    731e:	4604      	mov	r4, r0
    7320:	b160      	cbz	r0, 733c <smp_error+0x2e>
		return -ENOBUFS;
	}

	rsp = net_buf_add(buf, sizeof(*rsp));
    7322:	2101      	movs	r1, #1
    7324:	3008      	adds	r0, #8
    7326:	f00a fc71 	bl	11c0c <net_buf_simple_add>
	rsp->reason = reason;
    732a:	7006      	strb	r6, [r0, #0]
    732c:	6828      	ldr	r0, [r5, #0]
    732e:	2300      	movs	r3, #0
    7330:	4622      	mov	r2, r4
    7332:	2106      	movs	r1, #6
    7334:	f7fd fc12 	bl	4b5c <bt_l2cap_send_cb>

	/* SMP timer is not restarted for PairingFailed so don't use smp_send */
	bt_l2cap_send(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf);

	return 0;
    7338:	2000      	movs	r0, #0
    733a:	bd70      	pop	{r4, r5, r6, pc}
	smp_pairing_complete(smp, reason);

	buf = smp_create_pdu(smp->chan.chan.conn, BT_SMP_CMD_PAIRING_FAIL,
			     sizeof(*rsp));
	if (!buf) {
		return -ENOBUFS;
    733c:	f06f 0036 	mvn.w	r0, #54	; 0x36

	/* SMP timer is not restarted for PairingFailed so don't use smp_send */
	bt_l2cap_send(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf);

	return 0;
}
    7340:	bd70      	pop	{r4, r5, r6, pc}
	...

00007344 <bt_smp_dhkey_ready>:
	return 0;
}
#endif /* CONFIG_BLUETOOTH_PERIPHERAL */

static void bt_smp_dhkey_ready(const u8_t *dhkey)
{
    7344:	b510      	push	{r4, lr}
	int i;

	BT_DBG("%p", dhkey);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		if (atomic_test_and_clear_bit(bt_smp_pool[i].flags,
    7346:	2107      	movs	r1, #7
	return 0;
}
#endif /* CONFIG_BLUETOOTH_PERIPHERAL */

static void bt_smp_dhkey_ready(const u8_t *dhkey)
{
    7348:	4604      	mov	r4, r0
	int i;

	BT_DBG("%p", dhkey);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		if (atomic_test_and_clear_bit(bt_smp_pool[i].flags,
    734a:	4816      	ldr	r0, [pc, #88]	; (73a4 <bt_smp_dhkey_ready+0x60>)
    734c:	f7ff ff99 	bl	7282 <atomic_test_and_clear_bit>
    7350:	b338      	cbz	r0, 73a2 <bt_smp_dhkey_ready+0x5e>

	if (!smp) {
		return;
	}

	if (!dhkey) {
    7352:	b90c      	cbnz	r4, 7358 <bt_smp_dhkey_ready+0x14>
		smp_error(smp, BT_SMP_ERR_DHKEY_CHECK_FAILED);
    7354:	210b      	movs	r1, #11
    7356:	e01f      	b.n	7398 <bt_smp_dhkey_ready+0x54>
		return;
	}

	memcpy(smp->dhkey, dhkey, 32);
    7358:	4621      	mov	r1, r4
    735a:	2220      	movs	r2, #32
    735c:	4812      	ldr	r0, [pc, #72]	; (73a8 <bt_smp_dhkey_ready+0x64>)
    735e:	f7f9 fe98 	bl	1092 <memcpy>

	/* wait for user passkey confirmation */
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    7362:	2109      	movs	r1, #9
    7364:	480f      	ldr	r0, [pc, #60]	; (73a4 <bt_smp_dhkey_ready+0x60>)
    7366:	f7fa fe27 	bl	1fb8 <atomic_test_bit>
    736a:	b128      	cbz	r0, 7378 <bt_smp_dhkey_ready+0x34>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
    736c:	2108      	movs	r1, #8
    736e:	480d      	ldr	r0, [pc, #52]	; (73a4 <bt_smp_dhkey_ready+0x60>)
		if (err) {
			smp_error(smp, err);
		}
#endif /* CONFIG_BLUETOOTH_PERIPHERAL */
	}
}
    7370:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

	memcpy(smp->dhkey, dhkey, 32);

	/* wait for user passkey confirmation */
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
    7374:	f7ff bb70 	b.w	6a58 <atomic_set_bit>
		return;
	}

	/* wait for remote DHKey Check */
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
    7378:	210d      	movs	r1, #13
    737a:	480a      	ldr	r0, [pc, #40]	; (73a4 <bt_smp_dhkey_ready+0x60>)
    737c:	f7fa fe1c 	bl	1fb8 <atomic_test_bit>
    7380:	2800      	cmp	r0, #0
    7382:	d1f3      	bne.n	736c <bt_smp_dhkey_ready+0x28>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
		return;
	}

	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
    7384:	2108      	movs	r1, #8
    7386:	4807      	ldr	r0, [pc, #28]	; (73a4 <bt_smp_dhkey_ready+0x60>)
    7388:	f7fa fe16 	bl	1fb8 <atomic_test_bit>
    738c:	b148      	cbz	r0, 73a2 <bt_smp_dhkey_ready+0x5e>
			return;
		}
#endif /* CONFIG_BLUETOOTH_CENTRAL */

#if defined(CONFIG_BLUETOOTH_PERIPHERAL)
		err = compute_and_check_and_send_slave_dhcheck(smp);
    738e:	4807      	ldr	r0, [pc, #28]	; (73ac <bt_smp_dhkey_ready+0x68>)
    7390:	f7ff fce6 	bl	6d60 <compute_and_check_and_send_slave_dhcheck>
		if (err) {
    7394:	4601      	mov	r1, r0
    7396:	b120      	cbz	r0, 73a2 <bt_smp_dhkey_ready+0x5e>
			smp_error(smp, err);
    7398:	4804      	ldr	r0, [pc, #16]	; (73ac <bt_smp_dhkey_ready+0x68>)
		}
#endif /* CONFIG_BLUETOOTH_PERIPHERAL */
	}
}
    739a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif /* CONFIG_BLUETOOTH_CENTRAL */

#if defined(CONFIG_BLUETOOTH_PERIPHERAL)
		err = compute_and_check_and_send_slave_dhcheck(smp);
		if (err) {
			smp_error(smp, err);
    739e:	f7ff bfb6 	b.w	730e <smp_error>
    73a2:	bd10      	pop	{r4, pc}
    73a4:	20000ea0 	.word	0x20000ea0
    73a8:	20000f33 	.word	0x20000f33
    73ac:	20000e0c 	.word	0x20000e0c

000073b0 <bt_smp_recv>:
	{ smp_public_key,          sizeof(struct bt_smp_public_key) },
	{ smp_dhkey_check,         sizeof(struct bt_smp_dhkey_check) },
};

static void bt_smp_recv(struct bt_l2cap_chan *chan, struct net_buf *buf)
{
    73b0:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_smp *smp = CONTAINER_OF(chan, struct bt_smp, chan);
	struct bt_smp_hdr *hdr = (void *)buf->data;
	u8_t err;

	if (buf->len < sizeof(*hdr)) {
    73b2:	898b      	ldrh	r3, [r1, #12]
	{ smp_public_key,          sizeof(struct bt_smp_public_key) },
	{ smp_dhkey_check,         sizeof(struct bt_smp_dhkey_check) },
};

static void bt_smp_recv(struct bt_l2cap_chan *chan, struct net_buf *buf)
{
    73b4:	b085      	sub	sp, #20
    73b6:	4604      	mov	r4, r0
    73b8:	460d      	mov	r5, r1
	struct bt_smp *smp = CONTAINER_OF(chan, struct bt_smp, chan);
	struct bt_smp_hdr *hdr = (void *)buf->data;
	u8_t err;

	if (buf->len < sizeof(*hdr)) {
    73ba:	b953      	cbnz	r3, 73d2 <bt_smp_recv+0x22>
		BT_ERR("Too small SMP PDU received");
    73bc:	4b37      	ldr	r3, [pc, #220]	; (749c <bt_smp_recv+0xec>)
    73be:	9301      	str	r3, [sp, #4]
    73c0:	4b37      	ldr	r3, [pc, #220]	; (74a0 <bt_smp_recv+0xf0>)
    73c2:	9300      	str	r3, [sp, #0]
    73c4:	4a37      	ldr	r2, [pc, #220]	; (74a4 <bt_smp_recv+0xf4>)
    73c6:	4b38      	ldr	r3, [pc, #224]	; (74a8 <bt_smp_recv+0xf8>)
    73c8:	4938      	ldr	r1, [pc, #224]	; (74ac <bt_smp_recv+0xfc>)
    73ca:	4839      	ldr	r0, [pc, #228]	; (74b0 <bt_smp_recv+0x100>)
    73cc:	f7fa f858 	bl	1480 <printk>
		return;
    73d0:	e061      	b.n	7496 <bt_smp_recv+0xe6>
};

static void bt_smp_recv(struct bt_l2cap_chan *chan, struct net_buf *buf)
{
	struct bt_smp *smp = CONTAINER_OF(chan, struct bt_smp, chan);
	struct bt_smp_hdr *hdr = (void *)buf->data;
    73d2:	4608      	mov	r0, r1
		return;
	}

	BT_DBG("Received SMP code 0x%02x len %u", hdr->code, buf->len);

	net_buf_pull(buf, sizeof(*hdr));
    73d4:	2101      	movs	r1, #1
};

static void bt_smp_recv(struct bt_l2cap_chan *chan, struct net_buf *buf)
{
	struct bt_smp *smp = CONTAINER_OF(chan, struct bt_smp, chan);
	struct bt_smp_hdr *hdr = (void *)buf->data;
    73d6:	f850 6f08 	ldr.w	r6, [r0, #8]!
		return;
	}

	BT_DBG("Received SMP code 0x%02x len %u", hdr->code, buf->len);

	net_buf_pull(buf, sizeof(*hdr));
    73da:	f00a fc36 	bl	11c4a <net_buf_simple_pull>
	/*
	 * If SMP timeout occurred "no further SMP commands shall be sent over
	 * the L2CAP Security Manager Channel. A new SM procedure shall only be
	 * performed when a new physical link has been established."
	 */
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    73de:	2104      	movs	r1, #4
    73e0:	f104 0094 	add.w	r0, r4, #148	; 0x94
    73e4:	f7fa fde8 	bl	1fb8 <atomic_test_bit>
    73e8:	b160      	cbz	r0, 7404 <bt_smp_recv+0x54>
		BT_WARN("SMP command (code 0x%02x) received after timeout",
    73ea:	4b2c      	ldr	r3, [pc, #176]	; (749c <bt_smp_recv+0xec>)
    73ec:	9302      	str	r3, [sp, #8]
    73ee:	7833      	ldrb	r3, [r6, #0]
    73f0:	9301      	str	r3, [sp, #4]
    73f2:	4b30      	ldr	r3, [pc, #192]	; (74b4 <bt_smp_recv+0x104>)
    73f4:	9300      	str	r3, [sp, #0]
    73f6:	4a30      	ldr	r2, [pc, #192]	; (74b8 <bt_smp_recv+0x108>)
    73f8:	4b2b      	ldr	r3, [pc, #172]	; (74a8 <bt_smp_recv+0xf8>)
    73fa:	492c      	ldr	r1, [pc, #176]	; (74ac <bt_smp_recv+0xfc>)
    73fc:	482f      	ldr	r0, [pc, #188]	; (74bc <bt_smp_recv+0x10c>)
    73fe:	f7fa f83f 	bl	1480 <printk>
			hdr->code);
		return;
    7402:	e048      	b.n	7496 <bt_smp_recv+0xe6>
	}

	if (hdr->code >= ARRAY_SIZE(handlers) || !handlers[hdr->code].func) {
    7404:	7831      	ldrb	r1, [r6, #0]
    7406:	290d      	cmp	r1, #13
    7408:	d803      	bhi.n	7412 <bt_smp_recv+0x62>
    740a:	4f2d      	ldr	r7, [pc, #180]	; (74c0 <bt_smp_recv+0x110>)
    740c:	f857 3031 	ldr.w	r3, [r7, r1, lsl #3]
    7410:	b963      	cbnz	r3, 742c <bt_smp_recv+0x7c>
		BT_WARN("Unhandled SMP code 0x%02x", hdr->code);
    7412:	4b22      	ldr	r3, [pc, #136]	; (749c <bt_smp_recv+0xec>)
    7414:	9302      	str	r3, [sp, #8]
    7416:	4b27      	ldr	r3, [pc, #156]	; (74b4 <bt_smp_recv+0x104>)
    7418:	9101      	str	r1, [sp, #4]
    741a:	9300      	str	r3, [sp, #0]
    741c:	4923      	ldr	r1, [pc, #140]	; (74ac <bt_smp_recv+0xfc>)
    741e:	4b22      	ldr	r3, [pc, #136]	; (74a8 <bt_smp_recv+0xf8>)
    7420:	4a25      	ldr	r2, [pc, #148]	; (74b8 <bt_smp_recv+0x108>)
    7422:	4828      	ldr	r0, [pc, #160]	; (74c4 <bt_smp_recv+0x114>)
    7424:	f7fa f82c 	bl	1480 <printk>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
    7428:	2107      	movs	r1, #7
    742a:	e02e      	b.n	748a <bt_smp_recv+0xda>
		return;
	}

	if (!atomic_test_and_clear_bit(&smp->allowed_cmds, hdr->code)) {
    742c:	f104 0090 	add.w	r0, r4, #144	; 0x90
    7430:	f7ff ff27 	bl	7282 <atomic_test_and_clear_bit>
    7434:	b968      	cbnz	r0, 7452 <bt_smp_recv+0xa2>
		BT_WARN("Unexpected SMP code 0x%02x", hdr->code);
    7436:	4b19      	ldr	r3, [pc, #100]	; (749c <bt_smp_recv+0xec>)
    7438:	9302      	str	r3, [sp, #8]
    743a:	7833      	ldrb	r3, [r6, #0]
    743c:	9301      	str	r3, [sp, #4]
    743e:	4b1d      	ldr	r3, [pc, #116]	; (74b4 <bt_smp_recv+0x104>)
    7440:	9300      	str	r3, [sp, #0]
    7442:	491a      	ldr	r1, [pc, #104]	; (74ac <bt_smp_recv+0xfc>)
    7444:	4b18      	ldr	r3, [pc, #96]	; (74a8 <bt_smp_recv+0xf8>)
    7446:	4a1c      	ldr	r2, [pc, #112]	; (74b8 <bt_smp_recv+0x108>)
    7448:	481f      	ldr	r0, [pc, #124]	; (74c8 <bt_smp_recv+0x118>)
    744a:	f7fa f819 	bl	1480 <printk>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
    744e:	2108      	movs	r1, #8
    7450:	e01b      	b.n	748a <bt_smp_recv+0xda>
		return;
	}

	if (buf->len != handlers[hdr->code].expect_len) {
    7452:	7833      	ldrb	r3, [r6, #0]
    7454:	89aa      	ldrh	r2, [r5, #12]
    7456:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
    745a:	7909      	ldrb	r1, [r1, #4]
    745c:	4291      	cmp	r1, r2
    745e:	d00d      	beq.n	747c <bt_smp_recv+0xcc>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
    7460:	490e      	ldr	r1, [pc, #56]	; (749c <bt_smp_recv+0xec>)
    7462:	9302      	str	r3, [sp, #8]
    7464:	4b0e      	ldr	r3, [pc, #56]	; (74a0 <bt_smp_recv+0xf0>)
    7466:	9103      	str	r1, [sp, #12]
    7468:	9201      	str	r2, [sp, #4]
    746a:	9300      	str	r3, [sp, #0]
    746c:	490f      	ldr	r1, [pc, #60]	; (74ac <bt_smp_recv+0xfc>)
    746e:	4b0e      	ldr	r3, [pc, #56]	; (74a8 <bt_smp_recv+0xf8>)
    7470:	4a0c      	ldr	r2, [pc, #48]	; (74a4 <bt_smp_recv+0xf4>)
    7472:	4816      	ldr	r0, [pc, #88]	; (74cc <bt_smp_recv+0x11c>)
    7474:	f7fa f804 	bl	1480 <printk>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
    7478:	210a      	movs	r1, #10
    747a:	e006      	b.n	748a <bt_smp_recv+0xda>
		return;
	}

	err = handlers[hdr->code].func(smp, buf);
    747c:	4629      	mov	r1, r5
    747e:	f857 3033 	ldr.w	r3, [r7, r3, lsl #3]
    7482:	4620      	mov	r0, r4
    7484:	4798      	blx	r3
	if (err) {
    7486:	4601      	mov	r1, r0
    7488:	b128      	cbz	r0, 7496 <bt_smp_recv+0xe6>
		smp_error(smp, err);
    748a:	4620      	mov	r0, r4
	}
}
    748c:	b005      	add	sp, #20
    748e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		return;
	}

	err = handlers[hdr->code].func(smp, buf);
	if (err) {
		smp_error(smp, err);
    7492:	f7ff bf3c 	b.w	730e <smp_error>
	}
}
    7496:	b005      	add	sp, #20
    7498:	bdf0      	pop	{r4, r5, r6, r7, pc}
    749a:	bf00      	nop
    749c:	00013df4 	.word	0x00013df4
    74a0:	00013df9 	.word	0x00013df9
    74a4:	00013db4 	.word	0x00013db4
    74a8:	00016479 	.word	0x00016479
    74ac:	00013dbb 	.word	0x00013dbb
    74b0:	00014cf7 	.word	0x00014cf7
    74b4:	00013e3f 	.word	0x00013e3f
    74b8:	00013e01 	.word	0x00013e01
    74bc:	00014d22 	.word	0x00014d22
    74c0:	000162e4 	.word	0x000162e4
    74c4:	00014d63 	.word	0x00014d63
    74c8:	00014d8d 	.word	0x00014d8d
    74cc:	00014a3a 	.word	0x00014a3a

000074d0 <smp_pairing_failed>:

	return 0;
}

static u8_t smp_pairing_failed(struct bt_smp *smp, struct net_buf *buf)
{
    74d0:	b530      	push	{r4, r5, lr}
    74d2:	b085      	sub	sp, #20
	struct bt_conn *conn = smp->chan.chan.conn;
	struct bt_smp_pairing_fail *req = (void *)buf->data;

	BT_ERR("reason 0x%x", req->reason);
    74d4:	4b14      	ldr	r3, [pc, #80]	; (7528 <smp_pairing_failed+0x58>)
	return 0;
}

static u8_t smp_pairing_failed(struct bt_smp *smp, struct net_buf *buf)
{
	struct bt_conn *conn = smp->chan.chan.conn;
    74d6:	6805      	ldr	r5, [r0, #0]
	struct bt_smp_pairing_fail *req = (void *)buf->data;

	BT_ERR("reason 0x%x", req->reason);
    74d8:	9302      	str	r3, [sp, #8]
    74da:	688b      	ldr	r3, [r1, #8]
    74dc:	4a13      	ldr	r2, [pc, #76]	; (752c <smp_pairing_failed+0x5c>)
    74de:	781b      	ldrb	r3, [r3, #0]
    74e0:	9301      	str	r3, [sp, #4]

	return 0;
}

static u8_t smp_pairing_failed(struct bt_smp *smp, struct net_buf *buf)
{
    74e2:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
	struct bt_smp_pairing_fail *req = (void *)buf->data;

	BT_ERR("reason 0x%x", req->reason);
    74e4:	4b12      	ldr	r3, [pc, #72]	; (7530 <smp_pairing_failed+0x60>)
    74e6:	9300      	str	r3, [sp, #0]
    74e8:	4912      	ldr	r1, [pc, #72]	; (7534 <smp_pairing_failed+0x64>)
    74ea:	4b13      	ldr	r3, [pc, #76]	; (7538 <smp_pairing_failed+0x68>)
    74ec:	4813      	ldr	r0, [pc, #76]	; (753c <smp_pairing_failed+0x6c>)
    74ee:	f7f9 ffc7 	bl	1480 <printk>
	 * for now this to avoid warning about unused variable when debugs are
	 * disabled
	 */
	ARG_UNUSED(req);

	switch (smp->method) {
    74f2:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
    74f6:	3b01      	subs	r3, #1
    74f8:	2b02      	cmp	r3, #2
    74fa:	d804      	bhi.n	7506 <smp_pairing_failed+0x36>
	case PASSKEY_INPUT:
	case PASSKEY_DISPLAY:
	case PASSKEY_CONFIRM:
		bt_auth->cancel(conn);
    74fc:	4b10      	ldr	r3, [pc, #64]	; (7540 <smp_pairing_failed+0x70>)
    74fe:	681b      	ldr	r3, [r3, #0]
    7500:	4628      	mov	r0, r5
    7502:	68db      	ldr	r3, [r3, #12]
    7504:	4798      	blx	r3

	/*
	 * Pairing Failed command may be sent at any time during the pairing,
	 * so if there are any keys distributed, shall be cleared.
	 */
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
    7506:	2102      	movs	r1, #2
    7508:	f104 0094 	add.w	r0, r4, #148	; 0x94
    750c:	f7fa fd54 	bl	1fb8 <atomic_test_bit>
    7510:	b120      	cbz	r0, 751c <smp_pairing_failed+0x4c>
	    smp->chan.chan.conn->le.keys) {
    7512:	6823      	ldr	r3, [r4, #0]
    7514:	6fd8      	ldr	r0, [r3, #124]	; 0x7c

	/*
	 * Pairing Failed command may be sent at any time during the pairing,
	 * so if there are any keys distributed, shall be cleared.
	 */
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
    7516:	b108      	cbz	r0, 751c <smp_pairing_failed+0x4c>
	    smp->chan.chan.conn->le.keys) {
		bt_keys_clear(smp->chan.chan.conn->le.keys);
    7518:	f000 ff1a 	bl	8350 <bt_keys_clear>
			sc_derive_link_key(smp);
		}
	}
#endif /* CONFIG_BLUETOOTH_BREDR */

	smp_reset(smp);
    751c:	4620      	mov	r0, r4
    751e:	f7ff fecb 	bl	72b8 <smp_reset>

	smp_pairing_complete(smp, req->reason);

	/* return no error to avoid sending Pairing Failed in response */
	return 0;
}
    7522:	2000      	movs	r0, #0
    7524:	b005      	add	sp, #20
    7526:	bd30      	pop	{r4, r5, pc}
    7528:	00013df4 	.word	0x00013df4
    752c:	00013db4 	.word	0x00013db4
    7530:	00013df9 	.word	0x00013df9
    7534:	00013dbb 	.word	0x00013dbb
    7538:	0001643e 	.word	0x0001643e
    753c:	00014db8 	.word	0x00014db8
    7540:	20002110 	.word	0x20002110

00007544 <smp_timeout>:

	smp_reset(smp);
}

static void smp_timeout(struct k_work *work)
{
    7544:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_smp *smp = CONTAINER_OF(work, struct bt_smp, work);

	BT_ERR("SMP Timeout");
    7546:	4b11      	ldr	r3, [pc, #68]	; (758c <smp_timeout+0x48>)
    7548:	9301      	str	r3, [sp, #4]

	smp_reset(smp);
}

static void smp_timeout(struct k_work *work)
{
    754a:	4604      	mov	r4, r0
	struct bt_smp *smp = CONTAINER_OF(work, struct bt_smp, work);

	BT_ERR("SMP Timeout");
    754c:	4b10      	ldr	r3, [pc, #64]	; (7590 <smp_timeout+0x4c>)
    754e:	9300      	str	r3, [sp, #0]
    7550:	4910      	ldr	r1, [pc, #64]	; (7594 <smp_timeout+0x50>)
    7552:	4b11      	ldr	r3, [pc, #68]	; (7598 <smp_timeout+0x54>)
    7554:	4a11      	ldr	r2, [pc, #68]	; (759c <smp_timeout+0x58>)
	smp_reset(smp);
}

static void smp_timeout(struct k_work *work)
{
	struct bt_smp *smp = CONTAINER_OF(work, struct bt_smp, work);
    7556:	f5a0 75b8 	sub.w	r5, r0, #368	; 0x170

	/*
	 * If SMP timeout occurred during key distribution we should assume
	 * pairing failed and don't store any keys from this pairing.
	 */
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
    755a:	3cdc      	subs	r4, #220	; 0xdc

static void smp_timeout(struct k_work *work)
{
	struct bt_smp *smp = CONTAINER_OF(work, struct bt_smp, work);

	BT_ERR("SMP Timeout");
    755c:	4810      	ldr	r0, [pc, #64]	; (75a0 <smp_timeout+0x5c>)
    755e:	f7f9 ff8f 	bl	1480 <printk>

	/*
	 * If SMP timeout occurred during key distribution we should assume
	 * pairing failed and don't store any keys from this pairing.
	 */
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
    7562:	2102      	movs	r1, #2
    7564:	4620      	mov	r0, r4
    7566:	f7fa fd27 	bl	1fb8 <atomic_test_bit>
    756a:	b120      	cbz	r0, 7576 <smp_timeout+0x32>
	    smp->chan.chan.conn->le.keys) {
    756c:	682b      	ldr	r3, [r5, #0]
    756e:	6fd8      	ldr	r0, [r3, #124]	; 0x7c

	/*
	 * If SMP timeout occurred during key distribution we should assume
	 * pairing failed and don't store any keys from this pairing.
	 */
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
    7570:	b108      	cbz	r0, 7576 <smp_timeout+0x32>
	    smp->chan.chan.conn->le.keys) {
		bt_keys_clear(smp->chan.chan.conn->le.keys);
    7572:	f000 feed 	bl	8350 <bt_keys_clear>
			sc_derive_link_key(smp);
		}
	}
#endif /* CONFIG_BLUETOOTH_BREDR */

	smp_reset(smp);
    7576:	4628      	mov	r0, r5
    7578:	f7ff fe9e 	bl	72b8 <smp_reset>
		bt_keys_clear(smp->chan.chan.conn->le.keys);
	}

	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);

	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
    757c:	2104      	movs	r1, #4
    757e:	4620      	mov	r0, r4
}
    7580:	b003      	add	sp, #12
    7582:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		bt_keys_clear(smp->chan.chan.conn->le.keys);
	}

	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);

	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
    7586:	f7ff ba67 	b.w	6a58 <atomic_set_bit>
    758a:	bf00      	nop
    758c:	00013df4 	.word	0x00013df4
    7590:	00013df9 	.word	0x00013df9
    7594:	00013dbb 	.word	0x00013dbb
    7598:	000164eb 	.word	0x000164eb
    759c:	00013db4 	.word	0x00013db4
    75a0:	00014dd4 	.word	0x00014dd4

000075a4 <bt_smp_encrypt_change>:
	memset(smp, 0, sizeof(*smp));
}

static void bt_smp_encrypt_change(struct bt_l2cap_chan *chan,
				  u8_t hci_status)
{
    75a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    75a8:	4604      	mov	r4, r0
    75aa:	b08d      	sub	sp, #52	; 0x34
	struct bt_conn *conn = chan->conn;

	BT_DBG("chan %p conn %p handle %u encrypt 0x%02x hci status 0x%02x",
	       chan, conn, conn->handle, conn->encrypt, hci_status);

	if (hci_status) {
    75ac:	2900      	cmp	r1, #0
    75ae:	f040 80df 	bne.w	7770 <bt_smp_encrypt_change+0x1cc>
		return;
	}

	if (!smp || !conn->encrypt) {
    75b2:	6803      	ldr	r3, [r0, #0]
    75b4:	7a9b      	ldrb	r3, [r3, #10]
    75b6:	2b00      	cmp	r3, #0
    75b8:	f000 80da 	beq.w	7770 <bt_smp_encrypt_change+0x1cc>
		return;
	}

	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
    75bc:	f100 0594 	add.w	r5, r0, #148	; 0x94
    75c0:	2101      	movs	r1, #1
    75c2:	4628      	mov	r0, r5
    75c4:	f7ff fe5d 	bl	7282 <atomic_test_and_clear_bit>
    75c8:	2800      	cmp	r0, #0
    75ca:	f000 80d1 	beq.w	7770 <bt_smp_encrypt_change+0x1cc>
	 * enabled encryption.
	 *
	 * Since it is possible that slave might sent another Security Request
	 * eg with different AuthReq we should allow it.
	 */
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    75ce:	2103      	movs	r1, #3
    75d0:	4628      	mov	r0, r5
    75d2:	f7fa fcf1 	bl	1fb8 <atomic_test_bit>
    75d6:	b928      	cbnz	r0, 75e4 <bt_smp_encrypt_change+0x40>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
    75d8:	210b      	movs	r1, #11
    75da:	f104 0090 	add.w	r0, r4, #144	; 0x90
    75de:	f7ff fa3b 	bl	6a58 <atomic_set_bit>
    75e2:	e0c5      	b.n	7770 <bt_smp_encrypt_change+0x1cc>
		return;
	}

	/* derive BR/EDR LinkKey if supported by both sides */
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    75e4:	2105      	movs	r1, #5
    75e6:	4628      	mov	r0, r5
    75e8:	f7fa fce6 	bl	1fb8 <atomic_test_bit>
    75ec:	b1b8      	cbz	r0, 761e <bt_smp_encrypt_change+0x7a>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
    75ee:	f894 316d 	ldrb.w	r3, [r4, #365]	; 0x16d
    75f2:	071f      	lsls	r7, r3, #28
    75f4:	d507      	bpl.n	7606 <bt_smp_encrypt_change+0x62>
    75f6:	f894 316e 	ldrb.w	r3, [r4, #366]	; 0x16e
    75fa:	071e      	lsls	r6, r3, #28
    75fc:	d503      	bpl.n	7606 <bt_smp_encrypt_change+0x62>
		    (smp->remote_dist & BT_SMP_DIST_LINK_KEY)) {
			/*
			 * Link Key will be derived after key distribution to
			 * make sure remote device identity is known
			 */
			atomic_set_bit(smp->flags, SMP_FLAG_DERIVE_LK);
    75fe:	210e      	movs	r1, #14
    7600:	4628      	mov	r0, r5
    7602:	f7ff fa29 	bl	6a58 <atomic_set_bit>
		}
		/*
		 * Those are used as pairing finished indicator so generated
		 * but not distributed keys must be cleared here.
		 */
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
    7606:	f894 316d 	ldrb.w	r3, [r4, #365]	; 0x16d
    760a:	f023 0308 	bic.w	r3, r3, #8
    760e:	f884 316d 	strb.w	r3, [r4, #365]	; 0x16d
		smp->remote_dist &= ~BT_SMP_DIST_LINK_KEY;
    7612:	f894 316e 	ldrb.w	r3, [r4, #366]	; 0x16e
    7616:	f023 0308 	bic.w	r3, r3, #8
    761a:	f884 316e 	strb.w	r3, [r4, #366]	; 0x16e
	}

	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
    761e:	f894 316e 	ldrb.w	r3, [r4, #366]	; 0x16e
    7622:	07d8      	lsls	r0, r3, #31
    7624:	d501      	bpl.n	762a <bt_smp_encrypt_change+0x86>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
    7626:	2106      	movs	r1, #6
    7628:	e006      	b.n	7638 <bt_smp_encrypt_change+0x94>
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
    762a:	0799      	lsls	r1, r3, #30
    762c:	d501      	bpl.n	7632 <bt_smp_encrypt_change+0x8e>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
    762e:	2108      	movs	r1, #8
    7630:	e002      	b.n	7638 <bt_smp_encrypt_change+0x94>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    7632:	075a      	lsls	r2, r3, #29
    7634:	d504      	bpl.n	7640 <bt_smp_encrypt_change+0x9c>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    7636:	210a      	movs	r1, #10
    7638:	f104 0090 	add.w	r0, r4, #144	; 0x90
    763c:	f7ff fa0c 	bl	6a58 <atomic_set_bit>
	}

	atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
    7640:	4628      	mov	r0, r5
    7642:	2102      	movs	r1, #2
    7644:	f7ff fa08 	bl	6a58 <atomic_set_bit>
}
#endif /* !CONFIG_BLUETOOTH_SMP_SC_ONLY */

static void bt_smp_distribute_keys(struct bt_smp *smp)
{
	struct bt_conn *conn = smp->chan.chan.conn;
    7648:	6820      	ldr	r0, [r4, #0]
	struct bt_keys *keys = conn->le.keys;

	if (!keys) {
    764a:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
    764c:	b973      	cbnz	r3, 766c <bt_smp_encrypt_change+0xc8>
		BT_ERR("No keys space for %s", bt_addr_le_str(&conn->le.dst));
    764e:	3054      	adds	r0, #84	; 0x54
    7650:	f7fa fb82 	bl	1d58 <bt_addr_le_str>
    7654:	4b48      	ldr	r3, [pc, #288]	; (7778 <bt_smp_encrypt_change+0x1d4>)
    7656:	9302      	str	r3, [sp, #8]
    7658:	4b48      	ldr	r3, [pc, #288]	; (777c <bt_smp_encrypt_change+0x1d8>)
    765a:	9001      	str	r0, [sp, #4]
    765c:	9300      	str	r3, [sp, #0]
    765e:	4a48      	ldr	r2, [pc, #288]	; (7780 <bt_smp_encrypt_change+0x1dc>)
    7660:	4b48      	ldr	r3, [pc, #288]	; (7784 <bt_smp_encrypt_change+0x1e0>)
    7662:	4949      	ldr	r1, [pc, #292]	; (7788 <bt_smp_encrypt_change+0x1e4>)
    7664:	4849      	ldr	r0, [pc, #292]	; (778c <bt_smp_encrypt_change+0x1e8>)
    7666:	f7f9 ff0b 	bl	1480 <printk>
    766a:	e077      	b.n	775c <bt_smp_encrypt_change+0x1b8>
		return;
	}

#if !defined(CONFIG_BLUETOOTH_SMP_SC_ONLY)
	/* Distribute legacy pairing specific keys */
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    766c:	2105      	movs	r1, #5
    766e:	4628      	mov	r0, r5
    7670:	f7fa fca2 	bl	1fb8 <atomic_test_bit>
    7674:	4680      	mov	r8, r0
    7676:	2800      	cmp	r0, #0
    7678:	d170      	bne.n	775c <bt_smp_encrypt_change+0x1b8>
static void legacy_distribute_keys(struct bt_smp *smp)
{
	struct bt_conn *conn = smp->chan.chan.conn;
	struct bt_keys *keys = conn->le.keys;

	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
    767a:	f894 316d 	ldrb.w	r3, [r4, #365]	; 0x16d
    767e:	07db      	lsls	r3, r3, #31
    7680:	d56c      	bpl.n	775c <bt_smp_encrypt_change+0x1b8>
}

static void legacy_distribute_keys(struct bt_smp *smp)
{
	struct bt_conn *conn = smp->chan.chan.conn;
	struct bt_keys *keys = conn->le.keys;
    7682:	6823      	ldr	r3, [r4, #0]
		struct net_buf *buf;
		u8_t key[16];
		u64_t rand;
		u16_t ediv;

		bt_rand(key, sizeof(key));
    7684:	2110      	movs	r1, #16
    7686:	a808      	add	r0, sp, #32
}

static void legacy_distribute_keys(struct bt_smp *smp)
{
	struct bt_conn *conn = smp->chan.chan.conn;
	struct bt_keys *keys = conn->le.keys;
    7688:	6fde      	ldr	r6, [r3, #124]	; 0x7c
		struct net_buf *buf;
		u8_t key[16];
		u64_t rand;
		u16_t ediv;

		bt_rand(key, sizeof(key));
    768a:	f003 fcd5 	bl	b038 <bt_rand>
		bt_rand(&rand, sizeof(rand));
    768e:	2108      	movs	r1, #8
    7690:	a806      	add	r0, sp, #24
    7692:	f003 fcd1 	bl	b038 <bt_rand>
		bt_rand(&ediv, sizeof(ediv));
    7696:	2102      	movs	r1, #2
    7698:	f10d 0016 	add.w	r0, sp, #22
    769c:	f003 fccc 	bl	b038 <bt_rand>

		buf = smp_create_pdu(conn, BT_SMP_CMD_ENCRYPT_INFO,
    76a0:	2006      	movs	r0, #6
    76a2:	f7ff fabd 	bl	6c20 <smp_create_pdu.isra.2>
				     sizeof(*info));
		if (!buf) {
    76a6:	4607      	mov	r7, r0
    76a8:	b940      	cbnz	r0, 76bc <bt_smp_encrypt_change+0x118>
			BT_ERR("Unable to allocate Encrypt Info buffer");
    76aa:	4b33      	ldr	r3, [pc, #204]	; (7778 <bt_smp_encrypt_change+0x1d4>)
    76ac:	9301      	str	r3, [sp, #4]
    76ae:	4b33      	ldr	r3, [pc, #204]	; (777c <bt_smp_encrypt_change+0x1d8>)
    76b0:	9300      	str	r3, [sp, #0]
    76b2:	4a33      	ldr	r2, [pc, #204]	; (7780 <bt_smp_encrypt_change+0x1dc>)
    76b4:	4b36      	ldr	r3, [pc, #216]	; (7790 <bt_smp_encrypt_change+0x1ec>)
    76b6:	4934      	ldr	r1, [pc, #208]	; (7788 <bt_smp_encrypt_change+0x1e4>)
    76b8:	4836      	ldr	r0, [pc, #216]	; (7794 <bt_smp_encrypt_change+0x1f0>)
    76ba:	e023      	b.n	7704 <bt_smp_encrypt_change+0x160>
			return;
		}

		info = net_buf_add(buf, sizeof(*info));
    76bc:	2110      	movs	r1, #16
    76be:	3008      	adds	r0, #8
    76c0:	f00a faa4 	bl	11c0c <net_buf_simple_add>

		/* distributed only enc_size bytes of key */
		memcpy(info->ltk, key, keys->enc_size);
    76c4:	79f2      	ldrb	r2, [r6, #7]
    76c6:	a908      	add	r1, sp, #32
		if (!buf) {
			BT_ERR("Unable to allocate Encrypt Info buffer");
			return;
		}

		info = net_buf_add(buf, sizeof(*info));
    76c8:	4681      	mov	r9, r0

		/* distributed only enc_size bytes of key */
		memcpy(info->ltk, key, keys->enc_size);
    76ca:	f7f9 fce2 	bl	1092 <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
    76ce:	79f0      	ldrb	r0, [r6, #7]
    76d0:	280f      	cmp	r0, #15
    76d2:	d805      	bhi.n	76e0 <bt_smp_encrypt_change+0x13c>
			memset(info->ltk + keys->enc_size, 0,
    76d4:	f1c0 0210 	rsb	r2, r0, #16
    76d8:	4641      	mov	r1, r8
    76da:	4448      	add	r0, r9
    76dc:	f7f9 fd05 	bl	10ea <memset>
			       sizeof(info->ltk) - keys->enc_size);
		}

		smp_send(smp, buf, NULL);
    76e0:	4639      	mov	r1, r7
    76e2:	2200      	movs	r2, #0
    76e4:	4620      	mov	r0, r4
    76e6:	f7ff fb27 	bl	6d38 <smp_send>

		buf = smp_create_pdu(conn, BT_SMP_CMD_MASTER_IDENT,
    76ea:	2007      	movs	r0, #7
    76ec:	f7ff fa98 	bl	6c20 <smp_create_pdu.isra.2>
				     sizeof(*ident));
		if (!buf) {
    76f0:	4607      	mov	r7, r0
    76f2:	b950      	cbnz	r0, 770a <bt_smp_encrypt_change+0x166>
			BT_ERR("Unable to allocate Master Ident buffer");
    76f4:	4b20      	ldr	r3, [pc, #128]	; (7778 <bt_smp_encrypt_change+0x1d4>)
    76f6:	9301      	str	r3, [sp, #4]
    76f8:	4b20      	ldr	r3, [pc, #128]	; (777c <bt_smp_encrypt_change+0x1d8>)
    76fa:	9300      	str	r3, [sp, #0]
    76fc:	4a20      	ldr	r2, [pc, #128]	; (7780 <bt_smp_encrypt_change+0x1dc>)
    76fe:	4b24      	ldr	r3, [pc, #144]	; (7790 <bt_smp_encrypt_change+0x1ec>)
    7700:	4921      	ldr	r1, [pc, #132]	; (7788 <bt_smp_encrypt_change+0x1e4>)
    7702:	4825      	ldr	r0, [pc, #148]	; (7798 <bt_smp_encrypt_change+0x1f4>)
    7704:	f7f9 febc 	bl	1480 <printk>
    7708:	e028      	b.n	775c <bt_smp_encrypt_change+0x1b8>
			return;
		}

		ident = net_buf_add(buf, sizeof(*ident));
    770a:	210a      	movs	r1, #10
    770c:	3008      	adds	r0, #8
    770e:	f00a fa7d 	bl	11c0c <net_buf_simple_add>
		ident->rand = rand;
    7712:	9b06      	ldr	r3, [sp, #24]
    7714:	f8c0 3002 	str.w	r3, [r0, #2]
    7718:	9b07      	ldr	r3, [sp, #28]
    771a:	f8c0 3006 	str.w	r3, [r0, #6]
		ident->ediv = ediv;
    771e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    7722:	8003      	strh	r3, [r0, #0]

		smp_send(smp, buf, ident_sent);
    7724:	4639      	mov	r1, r7
    7726:	4620      	mov	r0, r4
    7728:	4a1c      	ldr	r2, [pc, #112]	; (779c <bt_smp_encrypt_change+0x1f8>)
    772a:	f7ff fb05 	bl	6d38 <smp_send>

		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    772e:	210a      	movs	r1, #10
    7730:	4628      	mov	r0, r5
    7732:	f7fa fc41 	bl	1fb8 <atomic_test_bit>
    7736:	b188      	cbz	r0, 775c <bt_smp_encrypt_change+0x1b8>
			bt_keys_add_type(keys, BT_KEYS_SLAVE_LTK);
    7738:	2101      	movs	r1, #1
    773a:	4630      	mov	r0, r6
    773c:	f000 fe04 	bl	8348 <bt_keys_add_type>

			memcpy(keys->slave_ltk.val, key,
    7740:	2210      	movs	r2, #16
    7742:	a908      	add	r1, sp, #32
    7744:	f106 0052 	add.w	r0, r6, #82	; 0x52
    7748:	f7f9 fca3 	bl	1092 <memcpy>
			       sizeof(keys->slave_ltk.val));
			keys->slave_ltk.rand = rand;
    774c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    7750:	e9c6 2312 	strd	r2, r3, [r6, #72]	; 0x48
			keys->slave_ltk.ediv = ediv;
    7754:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    7758:	f8a6 3050 	strh.w	r3, [r6, #80]	; 0x50
	}

	bt_smp_distribute_keys(smp);

	/* if all keys were distributed, pairing is done */
	if (!smp->local_dist && !smp->remote_dist) {
    775c:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
    7760:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    7764:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    7768:	b913      	cbnz	r3, 7770 <bt_smp_encrypt_change+0x1cc>
			sc_derive_link_key(smp);
		}
	}
#endif /* CONFIG_BLUETOOTH_BREDR */

	smp_reset(smp);
    776a:	4620      	mov	r0, r4
    776c:	f7ff fda4 	bl	72b8 <smp_reset>

	/* if all keys were distributed, pairing is done */
	if (!smp->local_dist && !smp->remote_dist) {
		smp_pairing_complete(smp, 0);
	}
}
    7770:	b00d      	add	sp, #52	; 0x34
    7772:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    7776:	bf00      	nop
    7778:	00013df4 	.word	0x00013df4
    777c:	00013df9 	.word	0x00013df9
    7780:	00013db4 	.word	0x00013db4
    7784:	0001654e 	.word	0x0001654e
    7788:	00013dbb 	.word	0x00013dbb
    778c:	00014df0 	.word	0x00014df0
    7790:	00016427 	.word	0x00016427
    7794:	00014e15 	.word	0x00014e15
    7798:	00014e4c 	.word	0x00014e4c
    779c:	00007871 	.word	0x00007871

000077a0 <smp_master_ident>:

	return 0;
}

static u8_t smp_master_ident(struct bt_smp *smp, struct net_buf *buf)
{
    77a0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    77a2:	4605      	mov	r5, r0
    77a4:	460a      	mov	r2, r1
	struct bt_conn *conn = smp->chan.chan.conn;
    77a6:	f850 6b94 	ldr.w	r6, [r0], #148

	BT_DBG("");

	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    77aa:	210a      	movs	r1, #10
    77ac:	f7fa fc04 	bl	1fb8 <atomic_test_bit>
    77b0:	b338      	cbz	r0, 7802 <smp_master_ident+0x62>
		struct bt_smp_master_ident *req = (void *)buf->data;
		struct bt_keys *keys;

		keys = bt_keys_get_type(BT_KEYS_LTK, &conn->le.dst);
    77b2:	3654      	adds	r6, #84	; 0x54
    77b4:	4631      	mov	r1, r6
    77b6:	2004      	movs	r0, #4
	struct bt_conn *conn = smp->chan.chan.conn;

	BT_DBG("");

	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
		struct bt_smp_master_ident *req = (void *)buf->data;
    77b8:	6894      	ldr	r4, [r2, #8]
		struct bt_keys *keys;

		keys = bt_keys_get_type(BT_KEYS_LTK, &conn->le.dst);
    77ba:	f000 fd75 	bl	82a8 <bt_keys_get_type>
		if (!keys) {
    77be:	b978      	cbnz	r0, 77e0 <smp_master_ident+0x40>
			BT_ERR("Unable to get keys for %s",
    77c0:	4630      	mov	r0, r6
    77c2:	f7fa fac9 	bl	1d58 <bt_addr_le_str>
    77c6:	4b1d      	ldr	r3, [pc, #116]	; (783c <smp_master_ident+0x9c>)
    77c8:	9302      	str	r3, [sp, #8]
    77ca:	4b1d      	ldr	r3, [pc, #116]	; (7840 <smp_master_ident+0xa0>)
    77cc:	9001      	str	r0, [sp, #4]
    77ce:	9300      	str	r3, [sp, #0]
    77d0:	4a1c      	ldr	r2, [pc, #112]	; (7844 <smp_master_ident+0xa4>)
    77d2:	4b1d      	ldr	r3, [pc, #116]	; (7848 <smp_master_ident+0xa8>)
    77d4:	491d      	ldr	r1, [pc, #116]	; (784c <smp_master_ident+0xac>)
    77d6:	481e      	ldr	r0, [pc, #120]	; (7850 <smp_master_ident+0xb0>)
    77d8:	f7f9 fe52 	bl	1480 <printk>
			       bt_addr_le_str(&conn->le.dst));
			return BT_SMP_ERR_UNSPECIFIED;
    77dc:	2008      	movs	r0, #8
    77de:	e02a      	b.n	7836 <smp_master_ident+0x96>
		}

		keys->ltk.ediv = req->ediv;
    77e0:	7862      	ldrb	r2, [r4, #1]
    77e2:	7823      	ldrb	r3, [r4, #0]
    77e4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    77e8:	8303      	strh	r3, [r0, #24]
		keys->ltk.rand = req->rand;
    77ea:	f8d4 2002 	ldr.w	r2, [r4, #2]
    77ee:	f8d4 3006 	ldr.w	r3, [r4, #6]
    77f2:	6143      	str	r3, [r0, #20]
    77f4:	6102      	str	r2, [r0, #16]

		smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
    77f6:	f895 316e 	ldrb.w	r3, [r5, #366]	; 0x16e
    77fa:	f023 0301 	bic.w	r3, r3, #1
    77fe:	f885 316e 	strb.w	r3, [r5, #366]	; 0x16e
	}

	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
    7802:	f895 316e 	ldrb.w	r3, [r5, #366]	; 0x16e
    7806:	079a      	lsls	r2, r3, #30
    7808:	d501      	bpl.n	780e <smp_master_ident+0x6e>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
    780a:	2108      	movs	r1, #8
    780c:	e002      	b.n	7814 <smp_master_ident+0x74>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    780e:	075b      	lsls	r3, r3, #29
    7810:	d504      	bpl.n	781c <smp_master_ident+0x7c>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    7812:	210a      	movs	r1, #10
    7814:	f105 0090 	add.w	r0, r5, #144	; 0x90
    7818:	f7ff f91e 	bl	6a58 <atomic_set_bit>
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
		bt_smp_distribute_keys(smp);
	}

	/* if all keys were distributed, pairing is done */
	if (!smp->local_dist && !smp->remote_dist) {
    781c:	f8d5 416c 	ldr.w	r4, [r5, #364]	; 0x16c
    7820:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
    7824:	f024 04ff 	bic.w	r4, r4, #255	; 0xff
    7828:	b924      	cbnz	r4, 7834 <smp_master_ident+0x94>
			sc_derive_link_key(smp);
		}
	}
#endif /* CONFIG_BLUETOOTH_BREDR */

	smp_reset(smp);
    782a:	4628      	mov	r0, r5
    782c:	f7ff fd44 	bl	72b8 <smp_reset>
	/* if all keys were distributed, pairing is done */
	if (!smp->local_dist && !smp->remote_dist) {
		smp_pairing_complete(smp, 0);
	}

	return 0;
    7830:	4620      	mov	r0, r4
    7832:	e000      	b.n	7836 <smp_master_ident+0x96>
    7834:	2000      	movs	r0, #0
}
    7836:	b004      	add	sp, #16
    7838:	bd70      	pop	{r4, r5, r6, pc}
    783a:	bf00      	nop
    783c:	00013df4 	.word	0x00013df4
    7840:	00013df9 	.word	0x00013df9
    7844:	00013db4 	.word	0x00013db4
    7848:	00016565 	.word	0x00016565
    784c:	00013dbb 	.word	0x00013dbb
    7850:	00014c39 	.word	0x00014c39

00007854 <bt_smp_connected>:
#endif /* CONFIG_BLUETOOTH_PERIPHERAL */
	}
}

static void bt_smp_connected(struct bt_l2cap_chan *chan)
{
    7854:	b510      	push	{r4, lr}
	struct bt_smp *smp = CONTAINER_OF(chan, struct bt_smp, chan);

	BT_DBG("chan %p cid 0x%04x", chan,
	       CONTAINER_OF(chan, struct bt_l2cap_le_chan, chan)->tx.cid);

	k_delayed_work_init(&smp->work, smp_timeout);
    7856:	4905      	ldr	r1, [pc, #20]	; (786c <bt_smp_connected+0x18>)
#endif /* CONFIG_BLUETOOTH_PERIPHERAL */
	}
}

static void bt_smp_connected(struct bt_l2cap_chan *chan)
{
    7858:	4604      	mov	r4, r0
	struct bt_smp *smp = CONTAINER_OF(chan, struct bt_smp, chan);

	BT_DBG("chan %p cid 0x%04x", chan,
	       CONTAINER_OF(chan, struct bt_l2cap_le_chan, chan)->tx.cid);

	k_delayed_work_init(&smp->work, smp_timeout);
    785a:	f500 70b8 	add.w	r0, r0, #368	; 0x170
    785e:	f00b ffc1 	bl	137e4 <k_delayed_work_init>
	smp_reset(smp);
    7862:	4620      	mov	r0, r4
}
    7864:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

	BT_DBG("chan %p cid 0x%04x", chan,
	       CONTAINER_OF(chan, struct bt_l2cap_le_chan, chan)->tx.cid);

	k_delayed_work_init(&smp->work, smp_timeout);
	smp_reset(smp);
    7868:	f7ff bd26 	b.w	72b8 <smp_reset>
    786c:	00007545 	.word	0x00007545

00007870 <ident_sent>:
	return 0;
}

#if !defined(CONFIG_BLUETOOTH_SMP_SC_ONLY)
static void ident_sent(struct bt_conn *conn)
{
    7870:	b508      	push	{r3, lr}

static void smp_check_complete(struct bt_conn *conn, u8_t dist_complete)
{
	struct bt_l2cap_chan *chan;

	if (conn->type == BT_CONN_TYPE_LE) {
    7872:	7883      	ldrb	r3, [r0, #2]
    7874:	b99b      	cbnz	r3, 789e <ident_sent+0x2e>
		struct bt_smp *smp;

		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
    7876:	2106      	movs	r1, #6
    7878:	f7fd fa14 	bl	4ca4 <bt_l2cap_le_lookup_tx_cid>
		__ASSERT(chan, "No SMP channel found");

		smp = CONTAINER_OF(chan, struct bt_smp, chan);
		smp->local_dist &= ~dist_complete;
    787c:	f890 216d 	ldrb.w	r2, [r0, #365]	; 0x16d
    7880:	f022 0201 	bic.w	r2, r2, #1
    7884:	f880 216d 	strb.w	r2, [r0, #365]	; 0x16d

		/* if all keys were distributed, pairing is done */
		if (!smp->local_dist && !smp->remote_dist) {
    7888:	f8d0 316c 	ldr.w	r3, [r0, #364]	; 0x16c
    788c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    7890:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    7894:	b91b      	cbnz	r3, 789e <ident_sent+0x2e>

#if !defined(CONFIG_BLUETOOTH_SMP_SC_ONLY)
static void ident_sent(struct bt_conn *conn)
{
	smp_check_complete(conn, BT_SMP_DIST_ENC_KEY);
}
    7896:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			sc_derive_link_key(smp);
		}
	}
#endif /* CONFIG_BLUETOOTH_BREDR */

	smp_reset(smp);
    789a:	f7ff bd0d 	b.w	72b8 <smp_reset>
    789e:	bd08      	pop	{r3, pc}

000078a0 <smp_dhkey_check>:

	return 0;
}

static u8_t smp_dhkey_check(struct bt_smp *smp, struct net_buf *buf)
{
    78a0:	b538      	push	{r3, r4, r5, lr}
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
		return 0;
	}

#if defined(CONFIG_BLUETOOTH_PERIPHERAL)
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_SLAVE) {
    78a2:	6803      	ldr	r3, [r0, #0]
    78a4:	78db      	ldrb	r3, [r3, #3]
    78a6:	2b01      	cmp	r3, #1

	return 0;
}

static u8_t smp_dhkey_check(struct bt_smp *smp, struct net_buf *buf)
{
    78a8:	4605      	mov	r5, r0
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
		return 0;
	}

#if defined(CONFIG_BLUETOOTH_PERIPHERAL)
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_SLAVE) {
    78aa:	d127      	bne.n	78fc <smp_dhkey_check+0x5c>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    78ac:	f100 0494 	add.w	r4, r0, #148	; 0x94
	return 0;
}

static u8_t smp_dhkey_check(struct bt_smp *smp, struct net_buf *buf)
{
	struct bt_smp_dhkey_check *req = (void *)buf->data;
    78b0:	6889      	ldr	r1, [r1, #8]
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    78b2:	f3bf 8f5f 	dmb	sy
    78b6:	e854 3f00 	ldrex	r3, [r4]
    78ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    78be:	e844 3200 	strex	r2, r3, [r4]
    78c2:	2a00      	cmp	r2, #0
    78c4:	d1f7      	bne.n	78b6 <smp_dhkey_check+0x16>
    78c6:	f3bf 8f5f 	dmb	sy
	}

#if defined(CONFIG_BLUETOOTH_PERIPHERAL)
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_SLAVE) {
		atomic_clear_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
		memcpy(smp->e, req->e, sizeof(smp->e));
    78ca:	2210      	movs	r2, #16
    78cc:	f205 1047 	addw	r0, r5, #327	; 0x147
    78d0:	f7f9 fbdf 	bl	1092 <memcpy>

		/* wait for DHKey being generated */
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
    78d4:	2107      	movs	r1, #7
    78d6:	4620      	mov	r0, r4
    78d8:	f7fa fb6e 	bl	1fb8 <atomic_test_bit>
    78dc:	b920      	cbnz	r0, 78e8 <smp_dhkey_check+0x48>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
			return 0;
		}

		/* waiting for user to confirm passkey */
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    78de:	2109      	movs	r1, #9
    78e0:	4620      	mov	r0, r4
    78e2:	f7fa fb69 	bl	1fb8 <atomic_test_bit>
    78e6:	b120      	cbz	r0, 78f2 <smp_dhkey_check+0x52>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
    78e8:	2108      	movs	r1, #8
    78ea:	4620      	mov	r0, r4
    78ec:	f7ff f8b4 	bl	6a58 <atomic_set_bit>
			return 0;
    78f0:	e004      	b.n	78fc <smp_dhkey_check+0x5c>
		}

		return compute_and_check_and_send_slave_dhcheck(smp);
    78f2:	4628      	mov	r0, r5
	}
#endif /* CONFIG_BLUETOOTH_PERIPHERAL */

	return 0;
}
    78f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
			return 0;
		}

		return compute_and_check_and_send_slave_dhcheck(smp);
    78f8:	f7ff ba32 	b.w	6d60 <compute_and_check_and_send_slave_dhcheck>
	}
#endif /* CONFIG_BLUETOOTH_PERIPHERAL */

	return 0;
}
    78fc:	2000      	movs	r0, #0
    78fe:	bd38      	pop	{r3, r4, r5, pc}

00007900 <smp_send_pairing_confirm>:
	return bt_encrypt_le(k, enc_data, enc_data);
}
#endif /* !CONFIG_BLUETOOTH_SMP_SC_ONLY */

static u8_t smp_send_pairing_confirm(struct bt_smp *smp)
{
    7900:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
	struct bt_smp_pairing_confirm *req;
	struct net_buf *buf;
	u8_t r;

	switch (smp->method) {
    7902:	f890 3098 	ldrb.w	r3, [r0, #152]	; 0x98
	return bt_encrypt_le(k, enc_data, enc_data);
}
#endif /* !CONFIG_BLUETOOTH_SMP_SC_ONLY */

static u8_t smp_send_pairing_confirm(struct bt_smp *smp)
{
    7906:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
	struct bt_smp_pairing_confirm *req;
	struct net_buf *buf;
	u8_t r;

	switch (smp->method) {
    7908:	2b03      	cmp	r3, #3
    790a:	d83c      	bhi.n	7986 <smp_send_pairing_confirm+0x86>
    790c:	e8df f003 	tbb	[pc, r3]
    7910:	0e02020e 	.word	0x0e02020e
		 * bit of Z is set equal to one and the least
		 * significant bit is made up from one bit of the
		 * passkey e.g. if the passkey bit is 1, then Z = 0x81
		 * and if the passkey bit is 0, then Z = 0x80.
		 */
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    7914:	f890 516c 	ldrb.w	r5, [r0, #364]	; 0x16c
    7918:	f8d0 3168 	ldr.w	r3, [r0, #360]	; 0x168
    791c:	fa23 f505 	lsr.w	r5, r3, r5
    7920:	f005 0501 	and.w	r5, r5, #1
		r |= 0x80;
    7924:	f065 057f 	orn	r5, r5, #127	; 0x7f
    7928:	b2ed      	uxtb	r5, r5
		break;
    792a:	e000      	b.n	792e <smp_send_pairing_confirm+0x2e>
	u8_t r;

	switch (smp->method) {
	case PASSKEY_CONFIRM:
	case JUST_WORKS:
		r = 0;
    792c:	2500      	movs	r5, #0
		break;
	default:
		return BT_SMP_ERR_UNSPECIFIED;
	}

	buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
    792e:	2003      	movs	r0, #3
    7930:	f7ff f976 	bl	6c20 <smp_create_pdu.isra.2>
	if (!buf) {
    7934:	4606      	mov	r6, r0
    7936:	b330      	cbz	r0, 7986 <smp_send_pairing_confirm+0x86>
		return BT_SMP_ERR_UNSPECIFIED;
	}

	req = net_buf_add(buf, sizeof(*req));
    7938:	2110      	movs	r1, #16
    793a:	3008      	adds	r0, #8
    793c:	f00a f966 	bl	11c0c <net_buf_simple_add>

	if (smp_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
    7940:	462b      	mov	r3, r5
    7942:	9000      	str	r0, [sp, #0]
    7944:	f104 02b7 	add.w	r2, r4, #183	; 0xb7
    7948:	f104 01e7 	add.w	r1, r4, #231	; 0xe7
    794c:	480f      	ldr	r0, [pc, #60]	; (798c <smp_send_pairing_confirm+0x8c>)
    794e:	f7ff f9ce 	bl	6cee <smp_f4>
    7952:	4605      	mov	r5, r0
    7954:	b118      	cbz	r0, 795e <smp_send_pairing_confirm+0x5e>
		net_buf_unref(buf);
    7956:	4630      	mov	r0, r6
    7958:	f00a f938 	bl	11bcc <net_buf_unref>
    795c:	e013      	b.n	7986 <smp_send_pairing_confirm+0x86>
		return BT_SMP_ERR_UNSPECIFIED;
	}

	smp_send(smp, buf, NULL);
    795e:	4602      	mov	r2, r0
    7960:	4631      	mov	r1, r6
    7962:	4620      	mov	r0, r4
    7964:	3494      	adds	r4, #148	; 0x94
    7966:	f7ff f9e7 	bl	6d38 <smp_send>
    796a:	f3bf 8f5f 	dmb	sy
    796e:	e854 3f00 	ldrex	r3, [r4]
    7972:	f023 0301 	bic.w	r3, r3, #1
    7976:	e844 3200 	strex	r2, r3, [r4]
    797a:	2a00      	cmp	r2, #0
    797c:	d1f7      	bne.n	796e <smp_send_pairing_confirm+0x6e>
    797e:	f3bf 8f5f 	dmb	sy

	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);

	return 0;
    7982:	4628      	mov	r0, r5
    7984:	e000      	b.n	7988 <smp_send_pairing_confirm+0x88>
		return BT_SMP_ERR_UNSPECIFIED;
	}

	buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
	if (!buf) {
		return BT_SMP_ERR_UNSPECIFIED;
    7986:	2008      	movs	r0, #8
	smp_send(smp, buf, NULL);

	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);

	return 0;
}
    7988:	b002      	add	sp, #8
    798a:	bd70      	pop	{r4, r5, r6, pc}
    798c:	20000dc9 	.word	0x20000dc9

00007990 <smp_public_key_slave.part.7>:

	return 0;
}

#if defined(CONFIG_BLUETOOTH_PERIPHERAL)
static u8_t smp_public_key_slave(struct bt_smp *smp)
    7990:	b538      	push	{r3, r4, r5, lr}
	err = sc_send_public_key(smp);
	if (err) {
		return err;
	}

	switch (smp->method) {
    7992:	f890 3098 	ldrb.w	r3, [r0, #152]	; 0x98

	return 0;
}

#if defined(CONFIG_BLUETOOTH_PERIPHERAL)
static u8_t smp_public_key_slave(struct bt_smp *smp)
    7996:	4604      	mov	r4, r0
	err = sc_send_public_key(smp);
	if (err) {
		return err;
	}

	switch (smp->method) {
    7998:	2b03      	cmp	r3, #3
    799a:	d845      	bhi.n	7a28 <smp_public_key_slave.part.7+0x98>
    799c:	e8df f003 	tbb	[pc, r3]
    79a0:	020b2802 	.word	0x020b2802
	case PASSKEY_CONFIRM:
	case JUST_WORKS:
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    79a4:	3090      	adds	r0, #144	; 0x90
    79a6:	2104      	movs	r1, #4
    79a8:	f7ff f856 	bl	6a58 <atomic_set_bit>

		err = smp_send_pairing_confirm(smp);
    79ac:	4620      	mov	r0, r4
    79ae:	f7ff ffa7 	bl	7900 <smp_send_pairing_confirm>
		if (err) {
    79b2:	b358      	cbz	r0, 7a0c <smp_public_key_slave.part.7+0x7c>
    79b4:	bd38      	pop	{r3, r4, r5, pc}
	return 0;
}

static u8_t display_passkey(struct bt_smp *smp)
{
	if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
    79b6:	2104      	movs	r1, #4
    79b8:	f500 70b4 	add.w	r0, r0, #360	; 0x168
    79bc:	f003 fb3c 	bl	b038 <bt_rand>
    79c0:	bb90      	cbnz	r0, 7a28 <smp_public_key_slave.part.7+0x98>
		return BT_SMP_ERR_UNSPECIFIED;
	}

	smp->passkey %= 1000000;
    79c2:	f8d4 1168 	ldr.w	r1, [r4, #360]	; 0x168
    79c6:	4a19      	ldr	r2, [pc, #100]	; (7a2c <smp_public_key_slave.part.7+0x9c>)
    79c8:	fbb1 f3f2 	udiv	r3, r1, r2
    79cc:	fb02 1113 	mls	r1, r2, r3, r1
	smp->passkey_round = 0;

	bt_auth->passkey_display(smp->chan.chan.conn, smp->passkey);
    79d0:	4b17      	ldr	r3, [pc, #92]	; (7a30 <smp_public_key_slave.part.7+0xa0>)
	if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
		return BT_SMP_ERR_UNSPECIFIED;
	}

	smp->passkey %= 1000000;
	smp->passkey_round = 0;
    79d2:	f884 016c 	strb.w	r0, [r4, #364]	; 0x16c

	bt_auth->passkey_display(smp->chan.chan.conn, smp->passkey);
    79d6:	4625      	mov	r5, r4
    79d8:	681b      	ldr	r3, [r3, #0]
    79da:	f855 0b90 	ldr.w	r0, [r5], #144
{
	if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
		return BT_SMP_ERR_UNSPECIFIED;
	}

	smp->passkey %= 1000000;
    79de:	f8c4 1168 	str.w	r1, [r4, #360]	; 0x168
	smp->passkey_round = 0;

	bt_auth->passkey_display(smp->chan.chan.conn, smp->passkey);
    79e2:	681b      	ldr	r3, [r3, #0]
    79e4:	4798      	blx	r3
		err = display_passkey(smp);
		if (err) {
			return err;
		}

		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    79e6:	2103      	movs	r1, #3
    79e8:	4628      	mov	r0, r5
    79ea:	f7ff f835 	bl	6a58 <atomic_set_bit>
    79ee:	e00d      	b.n	7a0c <smp_public_key_slave.part.7+0x7c>
		break;
	case PASSKEY_INPUT:
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    79f0:	2103      	movs	r1, #3
    79f2:	3090      	adds	r0, #144	; 0x90
    79f4:	f7ff f830 	bl	6a58 <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    79f8:	f104 0094 	add.w	r0, r4, #148	; 0x94
    79fc:	2109      	movs	r1, #9
    79fe:	f7ff f82b 	bl	6a58 <atomic_set_bit>
		bt_auth->passkey_entry(smp->chan.chan.conn);
    7a02:	4b0b      	ldr	r3, [pc, #44]	; (7a30 <smp_public_key_slave.part.7+0xa0>)
    7a04:	6820      	ldr	r0, [r4, #0]
    7a06:	681b      	ldr	r3, [r3, #0]
    7a08:	685b      	ldr	r3, [r3, #4]
    7a0a:	4798      	blx	r3
}
#endif /* CONFIG_BLUETOOTH_CENTRAL */

static u8_t generate_dhkey(struct bt_smp *smp)
{
	if (bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready)) {
    7a0c:	4909      	ldr	r1, [pc, #36]	; (7a34 <smp_public_key_slave.part.7+0xa4>)
    7a0e:	f104 00e7 	add.w	r0, r4, #231	; 0xe7
    7a12:	f7fc f9c5 	bl	3da0 <bt_dh_key_gen>
    7a16:	4605      	mov	r5, r0
    7a18:	b930      	cbnz	r0, 7a28 <smp_public_key_slave.part.7+0x98>
		return BT_SMP_ERR_UNSPECIFIED;
	}

	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
    7a1a:	f104 0094 	add.w	r0, r4, #148	; 0x94
    7a1e:	2107      	movs	r1, #7
    7a20:	f7ff f81a 	bl	6a58 <atomic_set_bit>
	return 0;
    7a24:	4628      	mov	r0, r5
    7a26:	bd38      	pop	{r3, r4, r5, pc}
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
		bt_auth->passkey_entry(smp->chan.chan.conn);
		break;
	default:
		return BT_SMP_ERR_UNSPECIFIED;
    7a28:	2008      	movs	r0, #8
	}

	return generate_dhkey(smp);
}
    7a2a:	bd38      	pop	{r3, r4, r5, pc}
    7a2c:	000f4240 	.word	0x000f4240
    7a30:	20002110 	.word	0x20002110
    7a34:	00007345 	.word	0x00007345

00007a38 <bt_smp_pkey_ready>:
		smp_error(smp, err);
	}
}

static void bt_smp_pkey_ready(const u8_t *pkey)
{
    7a38:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int i;

	BT_DBG("");

	if (!pkey) {
    7a3a:	4604      	mov	r4, r0
    7a3c:	4d15      	ldr	r5, [pc, #84]	; (7a94 <bt_smp_pkey_ready+0x5c>)
    7a3e:	b958      	cbnz	r0, 7a58 <bt_smp_pkey_ready+0x20>
		BT_WARN("Public key not available");
    7a40:	4b15      	ldr	r3, [pc, #84]	; (7a98 <bt_smp_pkey_ready+0x60>)
    7a42:	9301      	str	r3, [sp, #4]
    7a44:	4b15      	ldr	r3, [pc, #84]	; (7a9c <bt_smp_pkey_ready+0x64>)
    7a46:	9300      	str	r3, [sp, #0]
    7a48:	4a15      	ldr	r2, [pc, #84]	; (7aa0 <bt_smp_pkey_ready+0x68>)
    7a4a:	4b16      	ldr	r3, [pc, #88]	; (7aa4 <bt_smp_pkey_ready+0x6c>)
    7a4c:	4916      	ldr	r1, [pc, #88]	; (7aa8 <bt_smp_pkey_ready+0x70>)
    7a4e:	4817      	ldr	r0, [pc, #92]	; (7aac <bt_smp_pkey_ready+0x74>)
    7a50:	f7f9 fd16 	bl	1480 <printk>
		sc_local_pkey_valid = false;
    7a54:	702c      	strb	r4, [r5, #0]
    7a56:	e01a      	b.n	7a8e <bt_smp_pkey_ready+0x56>
		return;
	}

	memcpy(sc_public_key, pkey, 64);
    7a58:	4601      	mov	r1, r0
    7a5a:	2240      	movs	r2, #64	; 0x40
    7a5c:	4814      	ldr	r0, [pc, #80]	; (7ab0 <bt_smp_pkey_ready+0x78>)
    7a5e:	f7f9 fb18 	bl	1092 <memcpy>
	sc_local_pkey_valid = true;
    7a62:	2301      	movs	r3, #1

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_smp *smp = &bt_smp_pool[i];
		u8_t err;

		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
    7a64:	2106      	movs	r1, #6
    7a66:	4813      	ldr	r0, [pc, #76]	; (7ab4 <bt_smp_pkey_ready+0x7c>)
		sc_local_pkey_valid = false;
		return;
	}

	memcpy(sc_public_key, pkey, 64);
	sc_local_pkey_valid = true;
    7a68:	702b      	strb	r3, [r5, #0]

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_smp *smp = &bt_smp_pool[i];
		u8_t err;

		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
    7a6a:	f7fa faa5 	bl	1fb8 <atomic_test_bit>
    7a6e:	b170      	cbz	r0, 7a8e <bt_smp_pkey_ready+0x56>
#if defined(CONFIG_BLUETOOTH_PERIPHERAL)
static u8_t smp_public_key_slave(struct bt_smp *smp)
{
	u8_t err;

	err = sc_send_public_key(smp);
    7a70:	4811      	ldr	r0, [pc, #68]	; (7ab8 <bt_smp_pkey_ready+0x80>)
    7a72:	f7ff fbc7 	bl	7204 <sc_send_public_key>
	if (err) {
    7a76:	b918      	cbnz	r0, 7a80 <bt_smp_pkey_ready+0x48>
    7a78:	480f      	ldr	r0, [pc, #60]	; (7ab8 <bt_smp_pkey_ready+0x80>)
    7a7a:	f7ff ff89 	bl	7990 <smp_public_key_slave.part.7>
			continue;
		}

#if defined(CONFIG_BLUETOOTH_PERIPHERAL)
		err = smp_public_key_slave(smp);
		if (err) {
    7a7e:	b130      	cbz	r0, 7a8e <bt_smp_pkey_ready+0x56>
			smp_error(smp, err);
    7a80:	4601      	mov	r1, r0
    7a82:	480d      	ldr	r0, [pc, #52]	; (7ab8 <bt_smp_pkey_ready+0x80>)
		}
#endif /* CONFIG_BLUETOOTH_PERIPHERAL */
	}
}
    7a84:	b003      	add	sp, #12
    7a86:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		}

#if defined(CONFIG_BLUETOOTH_PERIPHERAL)
		err = smp_public_key_slave(smp);
		if (err) {
			smp_error(smp, err);
    7a8a:	f7ff bc40 	b.w	730e <smp_error>
		}
#endif /* CONFIG_BLUETOOTH_PERIPHERAL */
	}
}
    7a8e:	b003      	add	sp, #12
    7a90:	bd30      	pop	{r4, r5, pc}
    7a92:	bf00      	nop
    7a94:	20000e09 	.word	0x20000e09
    7a98:	00013df4 	.word	0x00013df4
    7a9c:	00013e3f 	.word	0x00013e3f
    7aa0:	00013e01 	.word	0x00013e01
    7aa4:	00016485 	.word	0x00016485
    7aa8:	00013dbb 	.word	0x00013dbb
    7aac:	00014e83 	.word	0x00014e83
    7ab0:	20000dc9 	.word	0x20000dc9
    7ab4:	20000ea0 	.word	0x20000ea0
    7ab8:	20000e0c 	.word	0x20000e0c

00007abc <smp_public_key>:
	return generate_dhkey(smp);
}
#endif /* CONFIG_BLUETOOTH_PERIPHERAL */

static u8_t smp_public_key(struct bt_smp *smp, struct net_buf *buf)
{
    7abc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_smp_public_key *req = (void *)buf->data;
    7abe:	688e      	ldr	r6, [r1, #8]
	u8_t err;

	BT_DBG("");

	memcpy(smp->pkey, req->x, 32);
    7ac0:	f100 04e7 	add.w	r4, r0, #231	; 0xe7
	return generate_dhkey(smp);
}
#endif /* CONFIG_BLUETOOTH_PERIPHERAL */

static u8_t smp_public_key(struct bt_smp *smp, struct net_buf *buf)
{
    7ac4:	4605      	mov	r5, r0
	struct bt_smp_public_key *req = (void *)buf->data;
	u8_t err;

	BT_DBG("");

	memcpy(smp->pkey, req->x, 32);
    7ac6:	2220      	movs	r2, #32
    7ac8:	4631      	mov	r1, r6
    7aca:	4620      	mov	r0, r4
    7acc:	f7f9 fae1 	bl	1092 <memcpy>
	memcpy(&smp->pkey[32], req->y, 32);
    7ad0:	2220      	movs	r2, #32
    7ad2:	18b1      	adds	r1, r6, r2
    7ad4:	f205 1007 	addw	r0, r5, #263	; 0x107
    7ad8:	f7f9 fadb 	bl	1092 <memcpy>

	/* mark key as debug if remote is using it */
	if (memcmp(smp->pkey, sc_debug_public_key, 64) == 0) {
    7adc:	2240      	movs	r2, #64	; 0x40
    7ade:	4914      	ldr	r1, [pc, #80]	; (7b30 <smp_public_key+0x74>)
    7ae0:	4620      	mov	r0, r4
    7ae2:	f7f9 faa6 	bl	1032 <memcmp>
    7ae6:	b968      	cbnz	r0, 7b04 <smp_public_key+0x48>
		BT_INFO("Remote is using Debug Public key");
    7ae8:	4b12      	ldr	r3, [pc, #72]	; (7b34 <smp_public_key+0x78>)
    7aea:	9301      	str	r3, [sp, #4]
    7aec:	9300      	str	r3, [sp, #0]
    7aee:	4912      	ldr	r1, [pc, #72]	; (7b38 <smp_public_key+0x7c>)
    7af0:	4b12      	ldr	r3, [pc, #72]	; (7b3c <smp_public_key+0x80>)
    7af2:	4a13      	ldr	r2, [pc, #76]	; (7b40 <smp_public_key+0x84>)
    7af4:	4813      	ldr	r0, [pc, #76]	; (7b44 <smp_public_key+0x88>)
    7af6:	f7f9 fcc3 	bl	1480 <printk>
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
    7afa:	210b      	movs	r1, #11
    7afc:	f105 0094 	add.w	r0, r5, #148	; 0x94
    7b00:	f7fe ffaa 	bl	6a58 <atomic_set_bit>

		return generate_dhkey(smp);
	}

#if defined(CONFIG_BLUETOOTH_PERIPHERAL)
	if (!sc_local_pkey_valid) {
    7b04:	4b10      	ldr	r3, [pc, #64]	; (7b48 <smp_public_key+0x8c>)
    7b06:	781c      	ldrb	r4, [r3, #0]
    7b08:	b934      	cbnz	r4, 7b18 <smp_public_key+0x5c>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
    7b0a:	f105 0094 	add.w	r0, r5, #148	; 0x94
    7b0e:	2106      	movs	r1, #6
    7b10:	f7fe ffa2 	bl	6a58 <atomic_set_bit>
		return 0;
    7b14:	4620      	mov	r0, r4
    7b16:	e009      	b.n	7b2c <smp_public_key+0x70>
#if defined(CONFIG_BLUETOOTH_PERIPHERAL)
static u8_t smp_public_key_slave(struct bt_smp *smp)
{
	u8_t err;

	err = sc_send_public_key(smp);
    7b18:	4628      	mov	r0, r5
    7b1a:	f7ff fb73 	bl	7204 <sc_send_public_key>
	if (err) {
    7b1e:	b928      	cbnz	r0, 7b2c <smp_public_key+0x70>
    7b20:	4628      	mov	r0, r5
		return err;
	}
#endif /* CONFIG_BLUETOOTH_PERIPHERAL */

	return 0;
}
    7b22:	b002      	add	sp, #8
    7b24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7b28:	f7ff bf32 	b.w	7990 <smp_public_key_slave.part.7>
    7b2c:	b002      	add	sp, #8
    7b2e:	bd70      	pop	{r4, r5, r6, pc}
    7b30:	000164ab 	.word	0x000164ab
    7b34:	00013aa0 	.word	0x00013aa0
    7b38:	00013dbb 	.word	0x00013dbb
    7b3c:	00016576 	.word	0x00016576
    7b40:	00013f64 	.word	0x00013f64
    7b44:	00014eac 	.word	0x00014eac
    7b48:	20000e09 	.word	0x20000e09

00007b4c <smp_c1>:

static int smp_c1(const u8_t k[16], const u8_t r[16],
		  const u8_t preq[7], const u8_t pres[7],
		  const bt_addr_le_t *ia, const bt_addr_le_t *ra,
		  u8_t enc_data[16])
{
    7b4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    7b50:	b089      	sub	sp, #36	; 0x24
    7b52:	461f      	mov	r7, r3
    7b54:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
    7b58:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
	BT_DBG("k %s r %s", bt_hex(k, 16), bt_hex(r, 16));
	BT_DBG("ia %s ra %s", bt_addr_le_str(ia), bt_addr_le_str(ra));
	BT_DBG("preq %s pres %s", bt_hex(preq, 7), bt_hex(pres, 7));

	/* pres, preq, rat and iat are concatenated to generate p1 */
	p1[0] = ia->type;
    7b5c:	f898 3000 	ldrb.w	r3, [r8]
    7b60:	f88d 3000 	strb.w	r3, [sp]

static int smp_c1(const u8_t k[16], const u8_t r[16],
		  const u8_t preq[7], const u8_t pres[7],
		  const bt_addr_le_t *ia, const bt_addr_le_t *ra,
		  u8_t enc_data[16])
{
    7b64:	4606      	mov	r6, r0
	BT_DBG("ia %s ra %s", bt_addr_le_str(ia), bt_addr_le_str(ra));
	BT_DBG("preq %s pres %s", bt_hex(preq, 7), bt_hex(pres, 7));

	/* pres, preq, rat and iat are concatenated to generate p1 */
	p1[0] = ia->type;
	p1[1] = ra->type;
    7b66:	f899 3000 	ldrb.w	r3, [r9]
    7b6a:	f88d 3001 	strb.w	r3, [sp, #1]

static int smp_c1(const u8_t k[16], const u8_t r[16],
		  const u8_t preq[7], const u8_t pres[7],
		  const bt_addr_le_t *ia, const bt_addr_le_t *ra,
		  u8_t enc_data[16])
{
    7b6e:	460c      	mov	r4, r1
	BT_DBG("preq %s pres %s", bt_hex(preq, 7), bt_hex(pres, 7));

	/* pres, preq, rat and iat are concatenated to generate p1 */
	p1[0] = ia->type;
	p1[1] = ra->type;
	memcpy(p1 + 2, preq, 7);
    7b70:	f10d 0002 	add.w	r0, sp, #2

static int smp_c1(const u8_t k[16], const u8_t r[16],
		  const u8_t preq[7], const u8_t pres[7],
		  const bt_addr_le_t *ia, const bt_addr_le_t *ra,
		  u8_t enc_data[16])
{
    7b74:	4611      	mov	r1, r2
	BT_DBG("preq %s pres %s", bt_hex(preq, 7), bt_hex(pres, 7));

	/* pres, preq, rat and iat are concatenated to generate p1 */
	p1[0] = ia->type;
	p1[1] = ra->type;
	memcpy(p1 + 2, preq, 7);
    7b76:	2207      	movs	r2, #7

static int smp_c1(const u8_t k[16], const u8_t r[16],
		  const u8_t preq[7], const u8_t pres[7],
		  const bt_addr_le_t *ia, const bt_addr_le_t *ra,
		  u8_t enc_data[16])
{
    7b78:	9d12      	ldr	r5, [sp, #72]	; 0x48
	BT_DBG("preq %s pres %s", bt_hex(preq, 7), bt_hex(pres, 7));

	/* pres, preq, rat and iat are concatenated to generate p1 */
	p1[0] = ia->type;
	p1[1] = ra->type;
	memcpy(p1 + 2, preq, 7);
    7b7a:	f7f9 fa8a 	bl	1092 <memcpy>
	memcpy(p1 + 9, pres, 7);
    7b7e:	2207      	movs	r2, #7
    7b80:	4639      	mov	r1, r7
    7b82:	f10d 0009 	add.w	r0, sp, #9
    7b86:	f7f9 fa84 	bl	1092 <memcpy>
    7b8a:	2300      	movs	r3, #0
static void xor_128(const u8_t p[16], const u8_t q[16], u8_t r[16])
{
	size_t len = 16;

	while (len--) {
		*r++ = *p++ ^ *q++;
    7b8c:	f814 1b01 	ldrb.w	r1, [r4], #1
    7b90:	f81d 2003 	ldrb.w	r2, [sp, r3]
    7b94:	404a      	eors	r2, r1
    7b96:	54ea      	strb	r2, [r5, r3]
    7b98:	3301      	adds	r3, #1
#if !defined(CONFIG_BLUETOOTH_SMP_SC_ONLY)
static void xor_128(const u8_t p[16], const u8_t q[16], u8_t r[16])
{
	size_t len = 16;

	while (len--) {
    7b9a:	2b10      	cmp	r3, #16
    7b9c:	d1f6      	bne.n	7b8c <smp_c1+0x40>
	/* c1 = e(k, e(k, r XOR p1) XOR p2) */

	/* Using enc_data as temporary output buffer */
	xor_128(r, p1, enc_data);

	err = bt_encrypt_le(k, enc_data, enc_data);
    7b9e:	462a      	mov	r2, r5
    7ba0:	4629      	mov	r1, r5
    7ba2:	4630      	mov	r0, r6
    7ba4:	f003 fa62 	bl	b06c <bt_encrypt_le>
	if (err) {
    7ba8:	4604      	mov	r4, r0
    7baa:	bb08      	cbnz	r0, 7bf0 <smp_c1+0xa4>
		return err;
	}

	/* ra is concatenated with ia and padding to generate p2 */
	memcpy(p2, ra->a.val, 6);
    7bac:	af04      	add	r7, sp, #16
    7bae:	2206      	movs	r2, #6
    7bb0:	f109 0101 	add.w	r1, r9, #1
    7bb4:	4638      	mov	r0, r7
    7bb6:	f7f9 fa6c 	bl	1092 <memcpy>
	memcpy(p2 + 6, ia->a.val, 6);
    7bba:	2206      	movs	r2, #6
    7bbc:	f108 0101 	add.w	r1, r8, #1
    7bc0:	f10d 0016 	add.w	r0, sp, #22
    7bc4:	f7f9 fa65 	bl	1092 <memcpy>
	memset(p2 + 12, 0, 4);
    7bc8:	2204      	movs	r2, #4
    7bca:	4621      	mov	r1, r4
    7bcc:	a807      	add	r0, sp, #28
    7bce:	f7f9 fa8c 	bl	10ea <memset>
    7bd2:	462b      	mov	r3, r5
static void xor_128(const u8_t p[16], const u8_t q[16], u8_t r[16])
{
	size_t len = 16;

	while (len--) {
		*r++ = *p++ ^ *q++;
    7bd4:	f813 1b01 	ldrb.w	r1, [r3], #1
    7bd8:	5d3a      	ldrb	r2, [r7, r4]
    7bda:	3401      	adds	r4, #1
    7bdc:	404a      	eors	r2, r1
#if !defined(CONFIG_BLUETOOTH_SMP_SC_ONLY)
static void xor_128(const u8_t p[16], const u8_t q[16], u8_t r[16])
{
	size_t len = 16;

	while (len--) {
    7bde:	2c10      	cmp	r4, #16
		*r++ = *p++ ^ *q++;
    7be0:	f803 2c01 	strb.w	r2, [r3, #-1]
#if !defined(CONFIG_BLUETOOTH_SMP_SC_ONLY)
static void xor_128(const u8_t p[16], const u8_t q[16], u8_t r[16])
{
	size_t len = 16;

	while (len--) {
    7be4:	d1f6      	bne.n	7bd4 <smp_c1+0x88>

	BT_DBG("p2 %s", bt_hex(p2, 16));

	xor_128(enc_data, p2, enc_data);

	return bt_encrypt_le(k, enc_data, enc_data);
    7be6:	462a      	mov	r2, r5
    7be8:	4629      	mov	r1, r5
    7bea:	4630      	mov	r0, r6
    7bec:	f003 fa3e 	bl	b06c <bt_encrypt_le>
}
    7bf0:	b009      	add	sp, #36	; 0x24
    7bf2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00007bf6 <legacy_pairing_confirm>:

	return 0;
}

static u8_t legacy_pairing_confirm(struct bt_smp *smp)
{
    7bf6:	b5f0      	push	{r4, r5, r6, r7, lr}
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
		return legacy_send_pairing_confirm(smp);
	}

	if (IS_ENABLED(CONFIG_BLUETOOTH_PERIPHERAL)) {
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    7bf8:	f100 0694 	add.w	r6, r0, #148	; 0x94

	return 0;
}

static u8_t legacy_pairing_confirm(struct bt_smp *smp)
{
    7bfc:	b085      	sub	sp, #20
    7bfe:	4605      	mov	r5, r0
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
		return legacy_send_pairing_confirm(smp);
	}

	if (IS_ENABLED(CONFIG_BLUETOOTH_PERIPHERAL)) {
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    7c00:	2109      	movs	r1, #9
    7c02:	4630      	mov	r0, r6
    7c04:	f7fa f9d8 	bl	1fb8 <atomic_test_bit>
    7c08:	bbb8      	cbnz	r0, 7c7a <legacy_pairing_confirm+0x84>
			atomic_set_bit(&smp->allowed_cmds,
    7c0a:	2104      	movs	r1, #4
    7c0c:	f105 0090 	add.w	r0, r5, #144	; 0x90
    7c10:	f7fe ff22 	bl	6a58 <atomic_set_bit>
{
	struct bt_conn *conn = smp->chan.chan.conn;
	struct bt_smp_pairing_confirm *req;
	struct net_buf *buf;

	buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
    7c14:	2003      	movs	r0, #3
	return 0;
}

static u8_t legacy_send_pairing_confirm(struct bt_smp *smp)
{
	struct bt_conn *conn = smp->chan.chan.conn;
    7c16:	682c      	ldr	r4, [r5, #0]
	struct bt_smp_pairing_confirm *req;
	struct net_buf *buf;

	buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
    7c18:	f7ff f802 	bl	6c20 <smp_create_pdu.isra.2>
	if (!buf) {
    7c1c:	4607      	mov	r7, r0
    7c1e:	b390      	cbz	r0, 7c86 <legacy_pairing_confirm+0x90>
		return BT_SMP_ERR_UNSPECIFIED;
	}

	req = net_buf_add(buf, sizeof(*req));
    7c20:	2110      	movs	r1, #16
    7c22:	3008      	adds	r0, #8
    7c24:	f009 fff2 	bl	11c0c <net_buf_simple_add>

	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
    7c28:	f104 0362 	add.w	r3, r4, #98	; 0x62
    7c2c:	345b      	adds	r4, #91	; 0x5b
		return BT_SMP_ERR_UNSPECIFIED;
	}

	req = net_buf_add(buf, sizeof(*req));

	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
    7c2e:	9002      	str	r0, [sp, #8]
    7c30:	9301      	str	r3, [sp, #4]
    7c32:	9400      	str	r4, [sp, #0]
    7c34:	f105 03a0 	add.w	r3, r5, #160	; 0xa0
    7c38:	f105 0299 	add.w	r2, r5, #153	; 0x99
    7c3c:	f105 01b7 	add.w	r1, r5, #183	; 0xb7
    7c40:	f105 00d7 	add.w	r0, r5, #215	; 0xd7
    7c44:	f7ff ff82 	bl	7b4c <smp_c1>
    7c48:	4604      	mov	r4, r0
    7c4a:	b118      	cbz	r0, 7c54 <legacy_pairing_confirm+0x5e>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
		net_buf_unref(buf);
    7c4c:	4638      	mov	r0, r7
    7c4e:	f009 ffbd 	bl	11bcc <net_buf_unref>
    7c52:	e018      	b.n	7c86 <legacy_pairing_confirm+0x90>
		return BT_SMP_ERR_UNSPECIFIED;
	}

	smp_send(smp, buf, NULL);
    7c54:	4602      	mov	r2, r0
    7c56:	4639      	mov	r1, r7
    7c58:	4628      	mov	r0, r5
    7c5a:	f7ff f86d 	bl	6d38 <smp_send>
    7c5e:	f3bf 8f5f 	dmb	sy
    7c62:	e856 3f00 	ldrex	r3, [r6]
    7c66:	f023 0301 	bic.w	r3, r3, #1
    7c6a:	e846 3200 	strex	r2, r3, [r6]
    7c6e:	2a00      	cmp	r2, #0
    7c70:	d1f7      	bne.n	7c62 <legacy_pairing_confirm+0x6c>
    7c72:	f3bf 8f5f 	dmb	sy

	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);

	return 0;
    7c76:	4620      	mov	r0, r4
    7c78:	e006      	b.n	7c88 <legacy_pairing_confirm+0x92>
			atomic_set_bit(&smp->allowed_cmds,
				       BT_SMP_CMD_PAIRING_RANDOM);
			return legacy_send_pairing_confirm(smp);
		}

		atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
    7c7a:	4630      	mov	r0, r6
    7c7c:	2100      	movs	r1, #0
    7c7e:	f7fe feeb 	bl	6a58 <atomic_set_bit>
	}

	return 0;
    7c82:	2000      	movs	r0, #0
    7c84:	e000      	b.n	7c88 <legacy_pairing_confirm+0x92>
	struct bt_smp_pairing_confirm *req;
	struct net_buf *buf;

	buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
	if (!buf) {
		return BT_SMP_ERR_UNSPECIFIED;
    7c86:	2008      	movs	r0, #8

		atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
	}

	return 0;
}
    7c88:	b005      	add	sp, #20
    7c8a:	bdf0      	pop	{r4, r5, r6, r7, pc}

00007c8c <smp_pairing_confirm>:
	return BT_SMP_ERR_CMD_NOTSUPP;
}
#endif /* CONFIG_BLUETOOTH_CENTRAL */

static u8_t smp_pairing_confirm(struct bt_smp *smp, struct net_buf *buf)
{
    7c8c:	b510      	push	{r4, lr}
	struct bt_smp_pairing_confirm *req = (void *)buf->data;

	BT_DBG("");

	memcpy(smp->pcnf, req->val, sizeof(smp->pcnf));
    7c8e:	2210      	movs	r2, #16
	return BT_SMP_ERR_CMD_NOTSUPP;
}
#endif /* CONFIG_BLUETOOTH_CENTRAL */

static u8_t smp_pairing_confirm(struct bt_smp *smp, struct net_buf *buf)
{
    7c90:	4604      	mov	r4, r0
	struct bt_smp_pairing_confirm *req = (void *)buf->data;

	BT_DBG("");

	memcpy(smp->pcnf, req->val, sizeof(smp->pcnf));
    7c92:	6889      	ldr	r1, [r1, #8]
    7c94:	30a7      	adds	r0, #167	; 0xa7
    7c96:	f7f9 f9fc 	bl	1092 <memcpy>
	if (!IS_ENABLED(CONFIG_BLUETOOTH_PERIPHERAL)) {
		return 0;
	}

#if !defined(CONFIG_BLUETOOTH_SMP_SC_ONLY)
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    7c9a:	f104 0294 	add.w	r2, r4, #148	; 0x94
    7c9e:	2105      	movs	r1, #5
    7ca0:	4610      	mov	r0, r2
    7ca2:	f7fa f989 	bl	1fb8 <atomic_test_bit>
    7ca6:	b920      	cbnz	r0, 7cb2 <smp_pairing_confirm+0x26>
		return legacy_pairing_confirm(smp);
    7ca8:	4620      	mov	r0, r4
	case JUST_WORKS:
	case PASSKEY_CONFIRM:
	default:
		return BT_SMP_ERR_UNSPECIFIED;
	}
}
    7caa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return 0;
	}

#if !defined(CONFIG_BLUETOOTH_SMP_SC_ONLY)
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
		return legacy_pairing_confirm(smp);
    7cae:	f7ff bfa2 	b.w	7bf6 <legacy_pairing_confirm>
	}
#endif /* !CONFIG_BLUETOOTH_SMP_SC_ONLY */

	switch (smp->method) {
    7cb2:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
    7cb6:	2b01      	cmp	r3, #1
    7cb8:	d002      	beq.n	7cc0 <smp_pairing_confirm+0x34>
    7cba:	2b02      	cmp	r3, #2
    7cbc:	d115      	bne.n	7cea <smp_pairing_confirm+0x5e>
    7cbe:	e00a      	b.n	7cd6 <smp_pairing_confirm+0x4a>
	case PASSKEY_DISPLAY:
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
		return smp_send_pairing_confirm(smp);
	case PASSKEY_INPUT:
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    7cc0:	2109      	movs	r1, #9
    7cc2:	4610      	mov	r0, r2
    7cc4:	f7fa f978 	bl	1fb8 <atomic_test_bit>
    7cc8:	b128      	cbz	r0, 7cd6 <smp_pairing_confirm+0x4a>
			atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
    7cca:	4610      	mov	r0, r2
    7ccc:	2100      	movs	r1, #0
    7cce:	f7fe fec3 	bl	6a58 <atomic_set_bit>
			return 0;
    7cd2:	2000      	movs	r0, #0
    7cd4:	bd10      	pop	{r4, pc}
		}

		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    7cd6:	f104 0090 	add.w	r0, r4, #144	; 0x90
    7cda:	2104      	movs	r1, #4
    7cdc:	f7fe febc 	bl	6a58 <atomic_set_bit>
		return smp_send_pairing_confirm(smp);
    7ce0:	4620      	mov	r0, r4
	case JUST_WORKS:
	case PASSKEY_CONFIRM:
	default:
		return BT_SMP_ERR_UNSPECIFIED;
	}
}
    7ce2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
			return 0;
		}

		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
		return smp_send_pairing_confirm(smp);
    7ce6:	f7ff be0b 	b.w	7900 <smp_send_pairing_confirm>
	case JUST_WORKS:
	case PASSKEY_CONFIRM:
	default:
		return BT_SMP_ERR_UNSPECIFIED;
    7cea:	2008      	movs	r0, #8
	}
}
    7cec:	bd10      	pop	{r4, pc}
	...

00007cf0 <smp_pairing_random>:

	return 0;
}

static u8_t smp_pairing_random(struct bt_smp *smp, struct net_buf *buf)
{
    7cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7cf4:	4604      	mov	r4, r0
	u32_t passkey;
	u8_t err;

	BT_DBG("");

	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    7cf6:	f100 05c7 	add.w	r5, r0, #199	; 0xc7

	return 0;
}

static u8_t smp_pairing_random(struct bt_smp *smp, struct net_buf *buf)
{
    7cfa:	b09e      	sub	sp, #120	; 0x78
	u32_t passkey;
	u8_t err;

	BT_DBG("");

	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    7cfc:	6889      	ldr	r1, [r1, #8]
    7cfe:	2210      	movs	r2, #16
    7d00:	4628      	mov	r0, r5

#if !defined(CONFIG_BLUETOOTH_SMP_SC_ONLY)
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    7d02:	f104 0694 	add.w	r6, r4, #148	; 0x94
	u32_t passkey;
	u8_t err;

	BT_DBG("");

	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    7d06:	f7f9 f9c4 	bl	1092 <memcpy>

#if !defined(CONFIG_BLUETOOTH_SMP_SC_ONLY)
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    7d0a:	2105      	movs	r1, #5
    7d0c:	4630      	mov	r0, r6
    7d0e:	f7fa f953 	bl	1fb8 <atomic_test_bit>
    7d12:	2800      	cmp	r0, #0
    7d14:	d13d      	bne.n	7d92 <smp_pairing_random+0xa2>
}
#endif /* CONFIG_BLUETOOTH_PERIPHERAL */

static u8_t legacy_pairing_random(struct bt_smp *smp)
{
	struct bt_conn *conn = smp->chan.chan.conn;
    7d16:	46a0      	mov	r8, r4
	int err;

	BT_DBG("");

	/* calculate confirmation */
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    7d18:	af0a      	add	r7, sp, #40	; 0x28
}
#endif /* CONFIG_BLUETOOTH_PERIPHERAL */

static u8_t legacy_pairing_random(struct bt_smp *smp)
{
	struct bt_conn *conn = smp->chan.chan.conn;
    7d1a:	f858 3bd7 	ldr.w	r3, [r8], #215
	int err;

	BT_DBG("");

	/* calculate confirmation */
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    7d1e:	9702      	str	r7, [sp, #8]
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
    7d20:	f103 0262 	add.w	r2, r3, #98	; 0x62
    7d24:	335b      	adds	r3, #91	; 0x5b
	int err;

	BT_DBG("");

	/* calculate confirmation */
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    7d26:	9201      	str	r2, [sp, #4]
    7d28:	9300      	str	r3, [sp, #0]
    7d2a:	f104 0299 	add.w	r2, r4, #153	; 0x99
    7d2e:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    7d32:	4629      	mov	r1, r5
    7d34:	4640      	mov	r0, r8
    7d36:	f7ff ff09 	bl	7b4c <smp_c1>
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
	if (err) {
    7d3a:	2800      	cmp	r0, #0
    7d3c:	f040 80b5 	bne.w	7eaa <smp_pairing_random+0x1ba>
		return BT_SMP_ERR_UNSPECIFIED;
	}

	BT_DBG("pcnf %s cfm %s", bt_hex(smp->pcnf, 16), bt_hex(tmp, 16));

	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
    7d40:	2210      	movs	r2, #16
    7d42:	4639      	mov	r1, r7
    7d44:	f104 00a7 	add.w	r0, r4, #167	; 0xa7
    7d48:	f7f9 f973 	bl	1032 <memcmp>
    7d4c:	2800      	cmp	r0, #0
    7d4e:	d17a      	bne.n	7e46 <smp_pairing_random+0x156>
	 * r1' is concatenated with r2' to generate r' which is used as
	 * the 128-bit input parameter plaintextData to security function e:
	 *
	 *    r' = r1' || r2'
	 */
	memcpy(out, r2, 8);
    7d50:	4629      	mov	r1, r5
    7d52:	2208      	movs	r2, #8
    7d54:	4638      	mov	r0, r7
    7d56:	f7f9 f99c 	bl	1092 <memcpy>
	memcpy(out + 8, r1, 8);
    7d5a:	2208      	movs	r2, #8
    7d5c:	f104 01b7 	add.w	r1, r4, #183	; 0xb7
    7d60:	a80c      	add	r0, sp, #48	; 0x30
    7d62:	f7f9 f996 	bl	1092 <memcpy>

	/* s1(k, r1 , r2) = e(k, r') */
	return bt_encrypt_le(k, out, out);
    7d66:	463a      	mov	r2, r7
    7d68:	4639      	mov	r1, r7
    7d6a:	4640      	mov	r0, r8
    7d6c:	f003 f97e 	bl	b06c <bt_encrypt_le>
		return 0;
	}

	if (IS_ENABLED(CONFIG_BLUETOOTH_PERIPHERAL)) {
		err = smp_s1(smp->tk, smp->prnd, smp->rrnd, tmp);
		if (err) {
    7d70:	4605      	mov	r5, r0
    7d72:	2800      	cmp	r0, #0
    7d74:	f040 8099 	bne.w	7eaa <smp_pairing_random+0x1ba>
			return BT_SMP_ERR_UNSPECIFIED;
		}

		memcpy(smp->tk, tmp, sizeof(smp->tk));
    7d78:	2210      	movs	r2, #16
    7d7a:	4639      	mov	r1, r7
    7d7c:	4640      	mov	r0, r8
    7d7e:	f7f9 f988 	bl	1092 <memcpy>
		BT_DBG("generated STK %s", bt_hex(smp->tk, 16));

		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    7d82:	4630      	mov	r0, r6
    7d84:	2101      	movs	r1, #1
    7d86:	f7fe fe67 	bl	6a58 <atomic_set_bit>

		smp_send_pairing_random(smp);
    7d8a:	4620      	mov	r0, r4
    7d8c:	f7ff fa5c 	bl	7248 <smp_send_pairing_random>
    7d90:	e08c      	b.n	7eac <smp_pairing_random+0x1bc>
		return compute_and_send_master_dhcheck(smp);
	}
#endif /* CONFIG_BLUETOOTH_CENTRAL */

#if defined(CONFIG_BLUETOOTH_PERIPHERAL)
	switch (smp->method) {
    7d92:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
    7d96:	2b03      	cmp	r3, #3
    7d98:	f200 8087 	bhi.w	7eaa <smp_pairing_random+0x1ba>
    7d9c:	e8df f003 	tbb	[pc, r3]
    7da0:	02383877 	.word	0x02383877

	BT_DBG("u %s", bt_hex(u, 32));
	BT_DBG("v %s", bt_hex(v, 32));
	BT_DBG("x %s y %s", bt_hex(x, 16), bt_hex(y, 16));

	sys_memcpy_swap(m, u, 32);
    7da4:	2220      	movs	r2, #32
    7da6:	f104 01e7 	add.w	r1, r4, #231	; 0xe7
    7daa:	a80a      	add	r0, sp, #40	; 0x28
    7dac:	f7fe fdf6 	bl	699c <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
    7db0:	2220      	movs	r2, #32
    7db2:	4940      	ldr	r1, [pc, #256]	; (7eb4 <smp_pairing_random+0x1c4>)
    7db4:	a812      	add	r0, sp, #72	; 0x48
    7db6:	f7fe fdf1 	bl	699c <sys_memcpy_swap>
	sys_memcpy_swap(m + 64, y, 16);
    7dba:	2210      	movs	r2, #16
    7dbc:	f104 01b7 	add.w	r1, r4, #183	; 0xb7
    7dc0:	a81a      	add	r0, sp, #104	; 0x68
    7dc2:	f7fe fdeb 	bl	699c <sys_memcpy_swap>

	sys_memcpy_swap(xs, x, 16);
    7dc6:	2210      	movs	r2, #16
    7dc8:	4629      	mov	r1, r5
    7dca:	a806      	add	r0, sp, #24
    7dcc:	f7fe fde6 	bl	699c <sys_memcpy_swap>

	/* reuse xs (key) as buffer for result */
	err = bt_smp_aes_cmac(xs, m, sizeof(m), xs);
    7dd0:	ab06      	add	r3, sp, #24
    7dd2:	2250      	movs	r2, #80	; 0x50
    7dd4:	a90a      	add	r1, sp, #40	; 0x28
    7dd6:	4618      	mov	r0, r3
    7dd8:	f7fe fe52 	bl	6a80 <bt_smp_aes_cmac>
	if (err) {
    7ddc:	2800      	cmp	r0, #0
    7dde:	d164      	bne.n	7eaa <smp_pairing_random+0x1ba>
		return err;
	}
	BT_DBG("res %s", bt_hex(xs, 16));

	memcpy(passkey, xs + 12, 4);
    7de0:	a909      	add	r1, sp, #36	; 0x24
    7de2:	2204      	movs	r2, #4
    7de4:	a805      	add	r0, sp, #20
    7de6:	f7f9 f954 	bl	1092 <memcpy>
    7dea:	9b05      	ldr	r3, [sp, #20]
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
    7dec:	4932      	ldr	r1, [pc, #200]	; (7eb8 <smp_pairing_random+0x1c8>)
    7dee:	ba1b      	rev	r3, r3
		if (smp_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd,
			   &passkey)) {
			return BT_SMP_ERR_UNSPECIFIED;
		}

		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    7df0:	4630      	mov	r0, r6
		return err;
	}
	BT_DBG("res %s", bt_hex(xs, 16));

	memcpy(passkey, xs + 12, 4);
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
    7df2:	fbb3 f2f1 	udiv	r2, r3, r1
    7df6:	fb01 3312 	mls	r3, r1, r2, r3
		if (smp_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd,
			   &passkey)) {
			return BT_SMP_ERR_UNSPECIFIED;
		}

		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    7dfa:	2109      	movs	r1, #9
		return err;
	}
	BT_DBG("res %s", bt_hex(xs, 16));

	memcpy(passkey, xs + 12, 4);
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
    7dfc:	9305      	str	r3, [sp, #20]
		if (smp_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd,
			   &passkey)) {
			return BT_SMP_ERR_UNSPECIFIED;
		}

		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    7dfe:	f7fe fe2b 	bl	6a58 <atomic_set_bit>
		bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
    7e02:	4b2e      	ldr	r3, [pc, #184]	; (7ebc <smp_pairing_random+0x1cc>)
    7e04:	9905      	ldr	r1, [sp, #20]
    7e06:	681b      	ldr	r3, [r3, #0]
    7e08:	6820      	ldr	r0, [r4, #0]
    7e0a:	689b      	ldr	r3, [r3, #8]
    7e0c:	4798      	blx	r3
		break;
    7e0e:	e03e      	b.n	7e8e <smp_pairing_random+0x19e>
		 * bit of Z is set equal to one and the least
		 * significant bit is made up from one bit of the
		 * passkey e.g. if the passkey bit is 1, then Z = 0x81
		 * and if the passkey bit is 0, then Z = 0x80.
		 */
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    7e10:	f894 216c 	ldrb.w	r2, [r4, #364]	; 0x16c
    7e14:	f8d4 3168 	ldr.w	r3, [r4, #360]	; 0x168
		break;
	default:
		return BT_SMP_ERR_UNSPECIFIED;
	}

	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
    7e18:	4926      	ldr	r1, [pc, #152]	; (7eb4 <smp_pairing_random+0x1c4>)
		 * bit of Z is set equal to one and the least
		 * significant bit is made up from one bit of the
		 * passkey e.g. if the passkey bit is 1, then Z = 0x81
		 * and if the passkey bit is 0, then Z = 0x80.
		 */
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    7e1a:	40d3      	lsrs	r3, r2
    7e1c:	f003 0301 	and.w	r3, r3, #1
		break;
	default:
		return BT_SMP_ERR_UNSPECIFIED;
	}

	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
    7e20:	f063 037f 	orn	r3, r3, #127	; 0x7f
    7e24:	af0a      	add	r7, sp, #40	; 0x28
    7e26:	9700      	str	r7, [sp, #0]
    7e28:	f003 0381 	and.w	r3, r3, #129	; 0x81
    7e2c:	462a      	mov	r2, r5
    7e2e:	f104 00e7 	add.w	r0, r4, #231	; 0xe7
    7e32:	f7fe ff5c 	bl	6cee <smp_f4>
    7e36:	bbc0      	cbnz	r0, 7eaa <smp_pairing_random+0x1ba>
		return BT_SMP_ERR_UNSPECIFIED;
	}

	BT_DBG("pcnf %s cfm %s", bt_hex(smp->pcnf, 16), bt_hex(cfm, 16));

	if (memcmp(smp->pcnf, cfm, 16)) {
    7e38:	2210      	movs	r2, #16
    7e3a:	4639      	mov	r1, r7
    7e3c:	f104 00a7 	add.w	r0, r4, #167	; 0xa7
    7e40:	f7f9 f8f7 	bl	1032 <memcmp>
    7e44:	b108      	cbz	r0, 7e4a <smp_pairing_random+0x15a>
		return BT_SMP_ERR_CONFIRM_FAILED;
    7e46:	2504      	movs	r5, #4
    7e48:	e030      	b.n	7eac <smp_pairing_random+0x1bc>
		err = sc_smp_check_confirm(smp);
		if (err) {
			return err;
		}

		atomic_set_bit(&smp->allowed_cmds,
    7e4a:	f104 0790 	add.w	r7, r4, #144	; 0x90
    7e4e:	2103      	movs	r1, #3

	if (memcmp(smp->pcnf, cfm, 16)) {
		return BT_SMP_ERR_CONFIRM_FAILED;
	}

	return 0;
    7e50:	4605      	mov	r5, r0
		err = sc_smp_check_confirm(smp);
		if (err) {
			return err;
		}

		atomic_set_bit(&smp->allowed_cmds,
    7e52:	4638      	mov	r0, r7
    7e54:	f7fe fe00 	bl	6a58 <atomic_set_bit>
			       BT_SMP_CMD_PAIRING_CONFIRM);
		smp_send_pairing_random(smp);
    7e58:	4620      	mov	r0, r4
    7e5a:	f7ff f9f5 	bl	7248 <smp_send_pairing_random>

		smp->passkey_round++;
    7e5e:	f894 316c 	ldrb.w	r3, [r4, #364]	; 0x16c
    7e62:	3301      	adds	r3, #1
    7e64:	b2db      	uxtb	r3, r3
		if (smp->passkey_round == 20) {
    7e66:	2b14      	cmp	r3, #20

		atomic_set_bit(&smp->allowed_cmds,
			       BT_SMP_CMD_PAIRING_CONFIRM);
		smp_send_pairing_random(smp);

		smp->passkey_round++;
    7e68:	f884 316c 	strb.w	r3, [r4, #364]	; 0x16c
		if (smp->passkey_round == 20) {
    7e6c:	d108      	bne.n	7e80 <smp_pairing_random+0x190>
			atomic_set_bit(&smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
    7e6e:	4638      	mov	r0, r7
    7e70:	210d      	movs	r1, #13
    7e72:	f7fe fdf1 	bl	6a58 <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    7e76:	210d      	movs	r1, #13
    7e78:	4630      	mov	r0, r6
    7e7a:	f7fe fded 	bl	6a58 <atomic_set_bit>
			return 0;
    7e7e:	e015      	b.n	7eac <smp_pairing_random+0x1bc>
		}

		if (bt_rand(smp->prnd, 16)) {
    7e80:	2110      	movs	r1, #16
    7e82:	f104 00b7 	add.w	r0, r4, #183	; 0xb7
    7e86:	f003 f8d7 	bl	b038 <bt_rand>
    7e8a:	b970      	cbnz	r0, 7eaa <smp_pairing_random+0x1ba>
    7e8c:	e00e      	b.n	7eac <smp_pairing_random+0x1bc>
		return 0;
	default:
		return BT_SMP_ERR_UNSPECIFIED;
	}

	atomic_set_bit(&smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
    7e8e:	210d      	movs	r1, #13
    7e90:	f104 0090 	add.w	r0, r4, #144	; 0x90
    7e94:	f7fe fde0 	bl	6a58 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    7e98:	210d      	movs	r1, #13
    7e9a:	4630      	mov	r0, r6
    7e9c:	f7fe fddc 	bl	6a58 <atomic_set_bit>
	smp_send_pairing_random(smp);
    7ea0:	4620      	mov	r0, r4
    7ea2:	f7ff f9d1 	bl	7248 <smp_send_pairing_random>
#endif /* CONFIG_BLUETOOTH_PERIPHERAL */

	return 0;
    7ea6:	2500      	movs	r5, #0
    7ea8:	e000      	b.n	7eac <smp_pairing_random+0x1bc>
			return BT_SMP_ERR_UNSPECIFIED;
		}

		return 0;
	default:
		return BT_SMP_ERR_UNSPECIFIED;
    7eaa:	2508      	movs	r5, #8
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
	smp_send_pairing_random(smp);
#endif /* CONFIG_BLUETOOTH_PERIPHERAL */

	return 0;
}
    7eac:	4628      	mov	r0, r5
    7eae:	b01e      	add	sp, #120	; 0x78
    7eb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7eb4:	20000dc9 	.word	0x20000dc9
    7eb8:	000f4240 	.word	0x000f4240
    7ebc:	20002110 	.word	0x20002110

00007ec0 <smp_ident_addr_info>:

	return 0;
}

static u8_t smp_ident_addr_info(struct bt_smp *smp, struct net_buf *buf)
{
    7ec0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
    7ec4:	688e      	ldr	r6, [r1, #8]
	return 0;
}

static u8_t smp_ident_addr_info(struct bt_smp *smp, struct net_buf *buf)
{
	struct bt_conn *conn = smp->chan.chan.conn;
    7ec6:	6804      	ldr	r4, [r0, #0]
	return BT_ADDR_IS_RPA(&addr->a);
}

static inline bool bt_addr_le_is_identity(const bt_addr_le_t *addr)
{
	if (addr->type == BT_ADDR_LE_PUBLIC) {
    7ec8:	7833      	ldrb	r3, [r6, #0]

	return 0;
}

static u8_t smp_ident_addr_info(struct bt_smp *smp, struct net_buf *buf)
{
    7eca:	4605      	mov	r5, r0
    7ecc:	b1d3      	cbz	r3, 7f04 <smp_ident_addr_info+0x44>
	struct bt_conn *conn = smp->chan.chan.conn;
	struct bt_smp_ident_addr_info *req = (void *)buf->data;

	BT_DBG("identity %s", bt_addr_le_str(&req->addr));

	if (!bt_addr_le_is_identity(&req->addr)) {
    7ece:	79b3      	ldrb	r3, [r6, #6]
    7ed0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    7ed4:	2bc0      	cmp	r3, #192	; 0xc0
    7ed6:	d015      	beq.n	7f04 <smp_ident_addr_info+0x44>
		BT_ERR("Invalid identity %s for %s",
    7ed8:	4630      	mov	r0, r6
    7eda:	f7f9 ff3d 	bl	1d58 <bt_addr_le_str>
    7ede:	4605      	mov	r5, r0
    7ee0:	f104 0054 	add.w	r0, r4, #84	; 0x54
    7ee4:	f7f9 ff38 	bl	1d58 <bt_addr_le_str>
    7ee8:	4b3a      	ldr	r3, [pc, #232]	; (7fd4 <smp_ident_addr_info+0x114>)
    7eea:	9303      	str	r3, [sp, #12]
    7eec:	4b3a      	ldr	r3, [pc, #232]	; (7fd8 <smp_ident_addr_info+0x118>)
    7eee:	9002      	str	r0, [sp, #8]
    7ef0:	9300      	str	r3, [sp, #0]
    7ef2:	9501      	str	r5, [sp, #4]
    7ef4:	4b39      	ldr	r3, [pc, #228]	; (7fdc <smp_ident_addr_info+0x11c>)
    7ef6:	4a3a      	ldr	r2, [pc, #232]	; (7fe0 <smp_ident_addr_info+0x120>)
    7ef8:	493a      	ldr	r1, [pc, #232]	; (7fe4 <smp_ident_addr_info+0x124>)
    7efa:	483b      	ldr	r0, [pc, #236]	; (7fe8 <smp_ident_addr_info+0x128>)
    7efc:	f7f9 fac0 	bl	1480 <printk>
		       bt_addr_le_str(&req->addr), bt_addr_le_str(&conn->le.dst));
		return BT_SMP_ERR_INVALID_PARAMS;
    7f00:	200a      	movs	r0, #10
    7f02:	e063      	b.n	7fcc <smp_ident_addr_info+0x10c>
	}

	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    7f04:	210a      	movs	r1, #10
    7f06:	f105 0094 	add.w	r0, r5, #148	; 0x94
    7f0a:	f7fa f855 	bl	1fb8 <atomic_test_bit>
    7f0e:	2800      	cmp	r0, #0
    7f10:	d042      	beq.n	7f98 <smp_ident_addr_info+0xd8>
		const bt_addr_le_t *dst;
		struct bt_keys *keys;

		keys = bt_keys_get_type(BT_KEYS_IRK, &conn->le.dst);
    7f12:	f104 0754 	add.w	r7, r4, #84	; 0x54
    7f16:	4639      	mov	r1, r7
    7f18:	2002      	movs	r0, #2
    7f1a:	f000 f9c5 	bl	82a8 <bt_keys_get_type>
		if (!keys) {
    7f1e:	4680      	mov	r8, r0
    7f20:	b978      	cbnz	r0, 7f42 <smp_ident_addr_info+0x82>
			BT_ERR("Unable to get keys for %s",
    7f22:	4638      	mov	r0, r7
    7f24:	f7f9 ff18 	bl	1d58 <bt_addr_le_str>
    7f28:	4b2a      	ldr	r3, [pc, #168]	; (7fd4 <smp_ident_addr_info+0x114>)
    7f2a:	9302      	str	r3, [sp, #8]
    7f2c:	4b2a      	ldr	r3, [pc, #168]	; (7fd8 <smp_ident_addr_info+0x118>)
    7f2e:	9001      	str	r0, [sp, #4]
    7f30:	9300      	str	r3, [sp, #0]
    7f32:	4a2b      	ldr	r2, [pc, #172]	; (7fe0 <smp_ident_addr_info+0x120>)
    7f34:	4b29      	ldr	r3, [pc, #164]	; (7fdc <smp_ident_addr_info+0x11c>)
    7f36:	492b      	ldr	r1, [pc, #172]	; (7fe4 <smp_ident_addr_info+0x124>)
    7f38:	482c      	ldr	r0, [pc, #176]	; (7fec <smp_ident_addr_info+0x12c>)
    7f3a:	f7f9 faa1 	bl	1480 <printk>
			       bt_addr_le_str(&conn->le.dst));
			return BT_SMP_ERR_UNSPECIFIED;
    7f3e:	2008      	movs	r0, #8
    7f40:	e044      	b.n	7fcc <smp_ident_addr_info+0x10c>
		 * We can't use conn->dst here as this might already contain
		 * identity address known from previous pairing. Since all keys
		 * are cleared on re-pairing we wouldn't store IRK distributed
		 * in new pairing.
		 */
		if (conn->role == BT_HCI_ROLE_MASTER) {
    7f42:	78e3      	ldrb	r3, [r4, #3]
    7f44:	b913      	cbnz	r3, 7f4c <smp_ident_addr_info+0x8c>
			dst = &conn->le.resp_addr;
    7f46:	f104 0162 	add.w	r1, r4, #98	; 0x62
    7f4a:	e001      	b.n	7f50 <smp_ident_addr_info+0x90>
		} else {
			dst = &conn->le.init_addr;
    7f4c:	f104 015b 	add.w	r1, r4, #91	; 0x5b
int bt_addr_le_create_nrpa(bt_addr_le_t *addr);
int bt_addr_le_create_static(bt_addr_le_t *addr);

static inline bool bt_addr_le_is_rpa(const bt_addr_le_t *addr)
{
	if (addr->type != BT_ADDR_LE_RANDOM) {
    7f50:	780b      	ldrb	r3, [r1, #0]
    7f52:	2b01      	cmp	r3, #1
    7f54:	d120      	bne.n	7f98 <smp_ident_addr_info+0xd8>
		}

		if (bt_addr_le_is_rpa(dst)) {
    7f56:	798b      	ldrb	r3, [r1, #6]
    7f58:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    7f5c:	2b40      	cmp	r3, #64	; 0x40
    7f5e:	d11b      	bne.n	7f98 <smp_ident_addr_info+0xd8>
	return memcmp(a, b, sizeof(*a));
}

static inline void bt_addr_copy(bt_addr_t *dst, const bt_addr_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    7f60:	2206      	movs	r2, #6
    7f62:	3101      	adds	r1, #1
    7f64:	f108 0040 	add.w	r0, r8, #64	; 0x40
    7f68:	f7f9 f893 	bl	1092 <memcpy>
	return BT_ADDR_IS_RPA(&addr->a);
}

static inline bool bt_addr_le_is_identity(const bt_addr_le_t *addr)
{
	if (addr->type == BT_ADDR_LE_PUBLIC) {
    7f6c:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
    7f70:	b193      	cbz	r3, 7f98 <smp_ident_addr_info+0xd8>
			 * Update connection address and notify about identity
			 * resolved only if connection wasn't already reported
			 * with identity address. This may happen if IRK was
			 * present before ie. due to re-pairing.
			 */
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
    7f72:	f894 305a 	ldrb.w	r3, [r4, #90]	; 0x5a
    7f76:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    7f7a:	2bc0      	cmp	r3, #192	; 0xc0
    7f7c:	d00c      	beq.n	7f98 <smp_ident_addr_info+0xd8>
	memcpy(dst, src, sizeof(*dst));
}

static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    7f7e:	2207      	movs	r2, #7
    7f80:	4631      	mov	r1, r6
    7f82:	4640      	mov	r0, r8
    7f84:	f7f9 f885 	bl	1092 <memcpy>
    7f88:	2207      	movs	r2, #7
    7f8a:	4631      	mov	r1, r6
    7f8c:	4638      	mov	r0, r7
    7f8e:	f7f9 f880 	bl	1092 <memcpy>
				bt_addr_le_copy(&keys->addr, &req->addr);
				bt_addr_le_copy(&conn->le.dst, &req->addr);

				bt_conn_identity_resolved(conn);
    7f92:	4620      	mov	r0, r4
    7f94:	f7fb ffc0 	bl	3f18 <bt_conn_identity_resolved>
			}
		}
	}

	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
    7f98:	f895 316e 	ldrb.w	r3, [r5, #366]	; 0x16e
    7f9c:	f023 0202 	bic.w	r2, r3, #2

	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    7fa0:	075b      	lsls	r3, r3, #29
				bt_conn_identity_resolved(conn);
			}
		}
	}

	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
    7fa2:	f885 216e 	strb.w	r2, [r5, #366]	; 0x16e

	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    7fa6:	d504      	bpl.n	7fb2 <smp_ident_addr_info+0xf2>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    7fa8:	210a      	movs	r1, #10
    7faa:	f105 0090 	add.w	r0, r5, #144	; 0x90
    7fae:	f7fe fd53 	bl	6a58 <atomic_set_bit>
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
		bt_smp_distribute_keys(smp);
	}

	/* if all keys were distributed, pairing is done */
	if (!smp->local_dist && !smp->remote_dist) {
    7fb2:	f8d5 416c 	ldr.w	r4, [r5, #364]	; 0x16c
    7fb6:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
    7fba:	f024 04ff 	bic.w	r4, r4, #255	; 0xff
    7fbe:	b924      	cbnz	r4, 7fca <smp_ident_addr_info+0x10a>
			sc_derive_link_key(smp);
		}
	}
#endif /* CONFIG_BLUETOOTH_BREDR */

	smp_reset(smp);
    7fc0:	4628      	mov	r0, r5
    7fc2:	f7ff f979 	bl	72b8 <smp_reset>
	/* if all keys were distributed, pairing is done */
	if (!smp->local_dist && !smp->remote_dist) {
		smp_pairing_complete(smp, 0);
	}

	return 0;
    7fc6:	4620      	mov	r0, r4
    7fc8:	e000      	b.n	7fcc <smp_ident_addr_info+0x10c>
    7fca:	2000      	movs	r0, #0
}
    7fcc:	b004      	add	sp, #16
    7fce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7fd2:	bf00      	nop
    7fd4:	00013df4 	.word	0x00013df4
    7fd8:	00013df9 	.word	0x00013df9
    7fdc:	00016497 	.word	0x00016497
    7fe0:	00013db4 	.word	0x00013db4
    7fe4:	00013dbb 	.word	0x00013dbb
    7fe8:	00014edd 	.word	0x00014edd
    7fec:	00014c39 	.word	0x00014c39

00007ff0 <bt_smp_send_security_req>:
	return CONTAINER_OF(chan, struct bt_smp, chan);
}

#if defined(CONFIG_BLUETOOTH_PERIPHERAL)
int bt_smp_send_security_req(struct bt_conn *conn)
{
    7ff0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7ff4:	4607      	mov	r7, r0
	struct bt_smp *smp;
	struct bt_smp_security_request *req;
	struct net_buf *req_buf;

	BT_DBG("");
	smp = smp_chan_get(conn);
    7ff6:	f7fe fdf3 	bl	6be0 <smp_chan_get>
	if (!smp) {
    7ffa:	4606      	mov	r6, r0
    7ffc:	2800      	cmp	r0, #0
    7ffe:	d04a      	beq.n	8096 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x96>
		return -ENOTCONN;
	}

	/* SMP Timeout */
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    8000:	f100 0294 	add.w	r2, r0, #148	; 0x94
    8004:	2104      	movs	r1, #4
    8006:	4610      	mov	r0, r2
    8008:	f7f9 ffd6 	bl	1fb8 <atomic_test_bit>
    800c:	2800      	cmp	r0, #0
    800e:	d145      	bne.n	809c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9c>
		return -EIO;
	}

	/* pairing is in progress */
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    8010:	2103      	movs	r1, #3
    8012:	4610      	mov	r0, r2
    8014:	f7f9 ffd0 	bl	1fb8 <atomic_test_bit>
    8018:	4604      	mov	r4, r0
    801a:	2800      	cmp	r0, #0
    801c:	d141      	bne.n	80a2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa2>
	return auth;
}

static bool sec_level_reachable(struct bt_conn *conn)
{
	switch (conn->required_sec_level) {
    801e:	7a7b      	ldrb	r3, [r7, #9]
    8020:	3b01      	subs	r3, #1
    8022:	2b03      	cmp	r3, #3
    8024:	d840      	bhi.n	80a8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa8>
    8026:	e8df f003 	tbb	[pc, r3]
    802a:	1212      	.short	0x1212
    802c:	0802      	.short	0x0802
	case BT_SECURITY_LOW:
	case BT_SECURITY_MEDIUM:
		return true;
	case BT_SECURITY_HIGH:
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT;
    802e:	f7fe fcc1 	bl	69b4 <get_io_capa>
    8032:	3803      	subs	r0, #3
    8034:	bf18      	it	ne
    8036:	2001      	movne	r0, #1
    8038:	e008      	b.n	804c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4c>
	case BT_SECURITY_FIPS:
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT &&
    803a:	f7fe fcbb 	bl	69b4 <get_io_capa>
    803e:	2803      	cmp	r0, #3
    8040:	bf1a      	itte	ne
    8042:	4b1d      	ldrne	r3, [pc, #116]	; (80b8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb8>)
    8044:	7818      	ldrbne	r0, [r3, #0]
    8046:	2000      	moveq	r0, #0
    8048:	f000 0001 	and.w	r0, r0, #1
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
		return -EBUSY;
	}

	/* early verify if required sec level if reachable */
	if (!sec_level_reachable(conn)) {
    804c:	b360      	cbz	r0, 80a8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa8>
		return -EINVAL;
	}

	req_buf = smp_create_pdu(conn, BT_SMP_CMD_SECURITY_REQUEST,
    804e:	200b      	movs	r0, #11
    8050:	f7fe fde6 	bl	6c20 <smp_create_pdu.isra.2>
				 sizeof(*req));
	if (!req_buf) {
    8054:	4680      	mov	r8, r0
    8056:	b350      	cbz	r0, 80ae <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xae>
		return -ENOBUFS;
	}

	req = net_buf_add(req_buf, sizeof(*req));
    8058:	2101      	movs	r1, #1
    805a:	3008      	adds	r0, #8
    805c:	f009 fdd6 	bl	11c0c <net_buf_simple_add>
	return 0;
}

static u8_t get_auth(u8_t auth)
{
	if (sc_supported) {
    8060:	4b15      	ldr	r3, [pc, #84]	; (80b8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb8>)
    8062:	781b      	ldrb	r3, [r3, #0]
    8064:	2b00      	cmp	r3, #0
		auth &= BT_SMP_AUTH_MASK_SC;
	} else {
		auth &= BT_SMP_AUTH_MASK;
    8066:	bf14      	ite	ne
    8068:	2509      	movne	r5, #9
    806a:	2501      	moveq	r5, #1
				 sizeof(*req));
	if (!req_buf) {
		return -ENOBUFS;
	}

	req = net_buf_add(req_buf, sizeof(*req));
    806c:	4681      	mov	r9, r0
		auth &= BT_SMP_AUTH_MASK_SC;
	} else {
		auth &= BT_SMP_AUTH_MASK;
	}

	if (get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) {
    806e:	f7fe fca1 	bl	69b4 <get_io_capa>
    8072:	2803      	cmp	r0, #3
		auth &= ~(BT_SMP_AUTH_MITM);
	} else {
		auth |= BT_SMP_AUTH_MITM;
    8074:	bf18      	it	ne
    8076:	f045 0504 	orrne.w	r5, r5, #4
    807a:	4638      	mov	r0, r7
	if (!req_buf) {
		return -ENOBUFS;
	}

	req = net_buf_add(req_buf, sizeof(*req));
	req->auth_req = get_auth(BT_SMP_AUTH_DEFAULT);
    807c:	f889 5000 	strb.w	r5, [r9]
    8080:	2300      	movs	r3, #0
    8082:	4642      	mov	r2, r8
    8084:	2106      	movs	r1, #6
    8086:	f7fc fd69 	bl	4b5c <bt_l2cap_send_cb>

	/* SMP timer is not restarted for SecRequest so don't use smp_send */
	bt_l2cap_send(conn, BT_L2CAP_CID_SMP, req_buf);

	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
    808a:	2105      	movs	r1, #5
    808c:	f106 0090 	add.w	r0, r6, #144	; 0x90
    8090:	f7fe fce2 	bl	6a58 <atomic_set_bit>

	return 0;
    8094:	e00d      	b.n	80b2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb2>
	struct net_buf *req_buf;

	BT_DBG("");
	smp = smp_chan_get(conn);
	if (!smp) {
		return -ENOTCONN;
    8096:	f06f 0438 	mvn.w	r4, #56	; 0x38
    809a:	e00a      	b.n	80b2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb2>
	}

	/* SMP Timeout */
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
		return -EIO;
    809c:	f06f 0404 	mvn.w	r4, #4
    80a0:	e007      	b.n	80b2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb2>
	}

	/* pairing is in progress */
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
		return -EBUSY;
    80a2:	f06f 040f 	mvn.w	r4, #15
    80a6:	e004      	b.n	80b2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb2>
	}

	/* early verify if required sec level if reachable */
	if (!sec_level_reachable(conn)) {
		return -EINVAL;
    80a8:	f06f 0415 	mvn.w	r4, #21
    80ac:	e001      	b.n	80b2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb2>
	}

	req_buf = smp_create_pdu(conn, BT_SMP_CMD_SECURITY_REQUEST,
				 sizeof(*req));
	if (!req_buf) {
		return -ENOBUFS;
    80ae:	f06f 0436 	mvn.w	r4, #54	; 0x36
	bt_l2cap_send(conn, BT_L2CAP_CID_SMP, req_buf);

	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);

	return 0;
}
    80b2:	4620      	mov	r0, r4
    80b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    80b8:	20000dc8 	.word	0x20000dc8

000080bc <bt_smp_sign_verify>:
    80bc:	f06f 0022 	mvn.w	r0, #34	; 0x22
    80c0:	4770      	bx	lr
	...

000080c4 <bt_smp_update_keys>:
	return -EINVAL;
}
#endif /* !CONFIG_BLUETOOTH_SMP_SC_ONLY */

void bt_smp_update_keys(struct bt_conn *conn)
{
    80c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    80c6:	b085      	sub	sp, #20
    80c8:	4604      	mov	r4, r0
	struct bt_smp *smp;

	smp = smp_chan_get(conn);
    80ca:	f7fe fd89 	bl	6be0 <smp_chan_get>
	if (!smp) {
    80ce:	4605      	mov	r5, r0
    80d0:	2800      	cmp	r0, #0
    80d2:	d069      	beq.n	81a8 <bt_smp_update_keys+0xe4>
		return;
	}

	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    80d4:	f100 0694 	add.w	r6, r0, #148	; 0x94
    80d8:	2103      	movs	r1, #3
    80da:	4630      	mov	r0, r6
    80dc:	f7f9 ff6c 	bl	1fb8 <atomic_test_bit>
    80e0:	2800      	cmp	r0, #0
    80e2:	d061      	beq.n	81a8 <bt_smp_update_keys+0xe4>

	/*
	 * If link was successfully encrypted cleanup old keys as from now on
	 * only keys distributed in this pairing or LTK from LE SC will be used.
	 */
	if (conn->le.keys) {
    80e4:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
    80e6:	b108      	cbz	r0, 80ec <bt_smp_update_keys+0x28>
		bt_keys_clear(conn->le.keys);
    80e8:	f000 f932 	bl	8350 <bt_keys_clear>
	}

	conn->le.keys = bt_keys_get_addr(&conn->le.dst);
    80ec:	f104 0754 	add.w	r7, r4, #84	; 0x54
    80f0:	4638      	mov	r0, r7
    80f2:	f000 f8a9 	bl	8248 <bt_keys_get_addr>
    80f6:	67e0      	str	r0, [r4, #124]	; 0x7c
	if (!conn->le.keys) {
    80f8:	b970      	cbnz	r0, 8118 <bt_smp_update_keys+0x54>
		BT_ERR("Unable to get keys for %s",
    80fa:	4638      	mov	r0, r7
    80fc:	f7f9 fe2c 	bl	1d58 <bt_addr_le_str>
    8100:	4b2a      	ldr	r3, [pc, #168]	; (81ac <bt_smp_update_keys+0xe8>)
    8102:	9302      	str	r3, [sp, #8]
    8104:	4b2a      	ldr	r3, [pc, #168]	; (81b0 <bt_smp_update_keys+0xec>)
    8106:	9001      	str	r0, [sp, #4]
    8108:	9300      	str	r3, [sp, #0]
    810a:	4a2a      	ldr	r2, [pc, #168]	; (81b4 <bt_smp_update_keys+0xf0>)
    810c:	4b2a      	ldr	r3, [pc, #168]	; (81b8 <bt_smp_update_keys+0xf4>)
    810e:	492b      	ldr	r1, [pc, #172]	; (81bc <bt_smp_update_keys+0xf8>)
    8110:	482b      	ldr	r0, [pc, #172]	; (81c0 <bt_smp_update_keys+0xfc>)
    8112:	f7f9 f9b5 	bl	1480 <printk>
		       bt_addr_le_str(&conn->le.dst));
		return;
    8116:	e047      	b.n	81a8 <bt_smp_update_keys+0xe4>
	}

	/* mark keys as debug */
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
    8118:	210b      	movs	r1, #11
    811a:	4630      	mov	r0, r6
    811c:	f7f9 ff4c 	bl	1fb8 <atomic_test_bit>
    8120:	b120      	cbz	r0, 812c <bt_smp_update_keys+0x68>
		atomic_set_bit(conn->le.keys->flags, BT_KEYS_DEBUG);
    8122:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
    8124:	2101      	movs	r1, #1
    8126:	3008      	adds	r0, #8
    8128:	f7fe fc96 	bl	6a58 <atomic_set_bit>
	/*
	 * store key type deducted from pairing method used
	 * it is important to store it since type is used to determine
	 * security level upon encryption
	 */
	switch (smp->method) {
    812c:	f895 3098 	ldrb.w	r3, [r5, #152]	; 0x98
    8130:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
    8132:	3b01      	subs	r3, #1
    8134:	2b02      	cmp	r3, #2
    8136:	d804      	bhi.n	8142 <bt_smp_update_keys+0x7e>
	case PASSKEY_DISPLAY:
	case PASSKEY_INPUT:
	case PASSKEY_CONFIRM:
		atomic_set_bit(conn->le.keys->flags, BT_KEYS_AUTHENTICATED);
    8138:	2100      	movs	r1, #0
    813a:	3008      	adds	r0, #8
    813c:	f7fe fc8c 	bl	6a58 <atomic_set_bit>
		break;
    8140:	e00c      	b.n	815c <bt_smp_update_keys+0x98>
    8142:	3008      	adds	r0, #8
    8144:	f3bf 8f5f 	dmb	sy
    8148:	e850 3f00 	ldrex	r3, [r0]
    814c:	f023 0301 	bic.w	r3, r3, #1
    8150:	e840 3200 	strex	r2, r3, [r0]
    8154:	2a00      	cmp	r2, #0
    8156:	d1f7      	bne.n	8148 <bt_smp_update_keys+0x84>
    8158:	f3bf 8f5f 	dmb	sy
		/* unauthenticated key, clear it */
		atomic_clear_bit(conn->le.keys->flags, BT_KEYS_AUTHENTICATED);
		break;
	}

	conn->le.keys->enc_size = get_encryption_key_size(smp);
    815c:	f895 10a4 	ldrb.w	r1, [r5, #164]	; 0xa4
    8160:	f895 309d 	ldrb.w	r3, [r5, #157]	; 0x9d
    8164:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
    8166:	428b      	cmp	r3, r1
    8168:	bf28      	it	cs
    816a:	460b      	movcs	r3, r1
    816c:	71d3      	strb	r3, [r2, #7]
	/*
	 * Store LTK if LE SC is used, this is safe since LE SC is mutually
	 * exclusive with legacy pairing. Other keys are added on keys
	 * distribution.
	 */
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC) &&
    816e:	2105      	movs	r1, #5
    8170:	4630      	mov	r0, r6
    8172:	f7f9 ff21 	bl	1fb8 <atomic_test_bit>
    8176:	b1b8      	cbz	r0, 81a8 <bt_smp_update_keys+0xe4>
	    atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    8178:	210a      	movs	r1, #10
    817a:	4630      	mov	r0, r6
    817c:	f7f9 ff1c 	bl	1fb8 <atomic_test_bit>
	/*
	 * Store LTK if LE SC is used, this is safe since LE SC is mutually
	 * exclusive with legacy pairing. Other keys are added on keys
	 * distribution.
	 */
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC) &&
    8180:	b190      	cbz	r0, 81a8 <bt_smp_update_keys+0xe4>
	    atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
		bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
    8182:	2120      	movs	r1, #32
    8184:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
    8186:	f000 f8df 	bl	8348 <bt_keys_add_type>
		memcpy(conn->le.keys->ltk.val, smp->tk,
    818a:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
    818c:	2210      	movs	r2, #16
    818e:	f105 01d7 	add.w	r1, r5, #215	; 0xd7
    8192:	301a      	adds	r0, #26
    8194:	f7f8 ff7d 	bl	1092 <memcpy>
		       sizeof(conn->le.keys->ltk.val));
		conn->le.keys->ltk.rand = 0;
    8198:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    819a:	2000      	movs	r0, #0
    819c:	2100      	movs	r1, #0
    819e:	e9c3 0104 	strd	r0, r1, [r3, #16]
		conn->le.keys->ltk.ediv = 0;
    81a2:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    81a4:	2200      	movs	r2, #0
    81a6:	831a      	strh	r2, [r3, #24]
	}
}
    81a8:	b005      	add	sp, #20
    81aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    81ac:	00013df4 	.word	0x00013df4
    81b0:	00013df9 	.word	0x00013df9
    81b4:	00013db4 	.word	0x00013db4
    81b8:	00016510 	.word	0x00016510
    81bc:	00013dbb 	.word	0x00013dbb
    81c0:	00014c39 	.word	0x00014c39

000081c4 <bt_smp_get_tk>:

bool bt_smp_get_tk(struct bt_conn *conn, u8_t *tk)
{
    81c4:	b570      	push	{r4, r5, r6, lr}
    81c6:	460e      	mov	r6, r1
	struct bt_smp *smp;
	u8_t enc_size;

	smp = smp_chan_get(conn);
    81c8:	f7fe fd0a 	bl	6be0 <smp_chan_get>
	if (!smp) {
    81cc:	4605      	mov	r5, r0
    81ce:	b908      	cbnz	r0, 81d4 <bt_smp_get_tk+0x10>
		return false;
    81d0:	2000      	movs	r0, #0
    81d2:	bd70      	pop	{r4, r5, r6, pc}
	}

	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    81d4:	2103      	movs	r1, #3
    81d6:	3094      	adds	r0, #148	; 0x94
    81d8:	f7f9 feee 	bl	1fb8 <atomic_test_bit>
    81dc:	2800      	cmp	r0, #0
    81de:	d0f7      	beq.n	81d0 <bt_smp_get_tk+0xc>
	/*
	 * The smaller value of the initiating and responding devices maximum
	 * encryption key length parameters shall be used as the encryption key
	 * size.
	 */
	return min(req->max_key_size, rsp->max_key_size);
    81e0:	f895 40a4 	ldrb.w	r4, [r5, #164]	; 0xa4
    81e4:	f895 309d 	ldrb.w	r3, [r5, #157]	; 0x9d
    81e8:	429c      	cmp	r4, r3
    81ea:	bf28      	it	cs
    81ec:	461c      	movcs	r4, r3

	/*
	 * We keep both legacy STK and LE SC LTK in TK.
	 * Also use only enc_size bytes of key for encryption.
	 */
	memcpy(tk, smp->tk, enc_size);
    81ee:	4622      	mov	r2, r4
    81f0:	f105 01d7 	add.w	r1, r5, #215	; 0xd7
    81f4:	4630      	mov	r0, r6
    81f6:	f7f8 ff4c 	bl	1092 <memcpy>
	if (enc_size < sizeof(smp->tk)) {
    81fa:	2c0f      	cmp	r4, #15
    81fc:	d805      	bhi.n	820a <bt_smp_get_tk+0x46>
		memset(tk + enc_size, 0, sizeof(smp->tk) - enc_size);
    81fe:	f1c4 0210 	rsb	r2, r4, #16
    8202:	2100      	movs	r1, #0
    8204:	1930      	adds	r0, r6, r4
    8206:	f7f8 ff70 	bl	10ea <memset>
	}

	return true;
    820a:	2001      	movs	r0, #1
}
    820c:	bd70      	pop	{r4, r5, r6, pc}
	...

00008210 <bt_smp_init>:
	return (bt_dev.supported_commands[34] & 0x02) &&
	       (bt_dev.supported_commands[34] & 0x04);
}

int bt_smp_init(void)
{
    8210:	b508      	push	{r3, lr}
	/*
	 * If controller based ECC is to be used it must support
	 * "LE Read Local P-256 Public Key" and "LE Generate DH Key" commands.
	 * Otherwise LE SC are not supported.
	 */
	return (bt_dev.supported_commands[34] & 0x02) &&
    8212:	4b09      	ldr	r3, [pc, #36]	; (8238 <bt_smp_init+0x28>)
	if (IS_ENABLED(CONFIG_BLUETOOTH_SMP_SC_ONLY) && !sc_supported) {
		BT_ERR("SC Only Mode selected but LE SC not supported");
		return -ENOENT;
	}

	bt_l2cap_le_fixed_chan_register(&chan);
    8214:	4809      	ldr	r0, [pc, #36]	; (823c <bt_smp_init+0x2c>)
	};
	static struct bt_pub_key_cb pub_key_cb = {
		.func           = bt_smp_pkey_ready,
	};

	sc_supported = le_sc_supported();
    8216:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
    821a:	f003 0306 	and.w	r3, r3, #6
    821e:	1f9a      	subs	r2, r3, #6
    8220:	4253      	negs	r3, r2
    8222:	4153      	adcs	r3, r2
    8224:	4a06      	ldr	r2, [pc, #24]	; (8240 <bt_smp_init+0x30>)
    8226:	7013      	strb	r3, [r2, #0]
	if (IS_ENABLED(CONFIG_BLUETOOTH_SMP_SC_ONLY) && !sc_supported) {
		BT_ERR("SC Only Mode selected but LE SC not supported");
		return -ENOENT;
	}

	bt_l2cap_le_fixed_chan_register(&chan);
    8228:	f7fc fbcc 	bl	49c4 <bt_l2cap_le_fixed_chan_register>
	}
#endif

	BT_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	bt_pub_key_gen(&pub_key_cb);
    822c:	4805      	ldr	r0, [pc, #20]	; (8244 <bt_smp_init+0x34>)
    822e:	f7fb fd4d 	bl	3ccc <bt_pub_key_gen>

	return smp_self_test();
}
    8232:	2000      	movs	r0, #0
    8234:	bd08      	pop	{r3, pc}
    8236:	bf00      	nop
    8238:	200002b0 	.word	0x200002b0
    823c:	20000510 	.word	0x20000510
    8240:	20000dc8 	.word	0x20000dc8
    8244:	20000530 	.word	0x20000530

00008248 <bt_keys_get_addr>:
#include "keys.h"

static struct bt_keys key_pool[CONFIG_BLUETOOTH_MAX_PAIRED];

struct bt_keys *bt_keys_get_addr(const bt_addr_le_t *addr)
{
    8248:	b537      	push	{r0, r1, r2, r4, r5, lr}
    824a:	4605      	mov	r5, r0
	return memcmp(a, b, sizeof(*a));
}

static inline int bt_addr_le_cmp(const bt_addr_le_t *a, const bt_addr_le_t *b)
{
	return memcmp(a, b, sizeof(*a));
    824c:	4601      	mov	r1, r0
    824e:	2207      	movs	r2, #7
    8250:	480b      	ldr	r0, [pc, #44]	; (8280 <bt_keys_get_addr+0x38>)
    8252:	f7f8 feee 	bl	1032 <memcmp>
	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		keys = &key_pool[i];

		if (!bt_addr_le_cmp(&keys->addr, addr)) {
    8256:	b170      	cbz	r0, 8276 <bt_keys_get_addr+0x2e>
			return keys;
		}

		if (!bt_addr_le_cmp(&keys->addr, BT_ADDR_LE_ANY)) {
    8258:	2400      	movs	r4, #0
    825a:	2207      	movs	r2, #7
    825c:	4669      	mov	r1, sp
    825e:	4808      	ldr	r0, [pc, #32]	; (8280 <bt_keys_get_addr+0x38>)
    8260:	9400      	str	r4, [sp, #0]
    8262:	f8cd 4003 	str.w	r4, [sp, #3]
    8266:	f7f8 fee4 	bl	1032 <memcmp>
    826a:	b930      	cbnz	r0, 827a <bt_keys_get_addr+0x32>
	memcpy(dst, src, sizeof(*dst));
}

static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    826c:	2207      	movs	r2, #7
    826e:	4629      	mov	r1, r5
    8270:	4803      	ldr	r0, [pc, #12]	; (8280 <bt_keys_get_addr+0x38>)
    8272:	f7f8 ff0e 	bl	1092 <memcpy>
	int i;

	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		keys = &key_pool[i];
    8276:	4802      	ldr	r0, [pc, #8]	; (8280 <bt_keys_get_addr+0x38>)
    8278:	e000      	b.n	827c <bt_keys_get_addr+0x34>
		}
	}

	BT_DBG("unable to create keys for %s", bt_addr_le_str(addr));

	return NULL;
    827a:	4620      	mov	r0, r4
}
    827c:	b003      	add	sp, #12
    827e:	bd30      	pop	{r4, r5, pc}
    8280:	20000fa8 	.word	0x20000fa8

00008284 <bt_keys_find>:
struct bt_keys *bt_keys_find(int type, const bt_addr_le_t *addr)
{
    8284:	b510      	push	{r4, lr}
	int i;

	BT_DBG("type %d %s", type, bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type) &&
    8286:	4c07      	ldr	r4, [pc, #28]	; (82a4 <bt_keys_find+0x20>)
    8288:	89a3      	ldrh	r3, [r4, #12]
    828a:	4203      	tst	r3, r0
    828c:	d101      	bne.n	8292 <bt_keys_find+0xe>
		    !bt_addr_le_cmp(&key_pool[i].addr, addr)) {
			return &key_pool[i];
		}
	}

	return NULL;
    828e:	2000      	movs	r0, #0
    8290:	bd10      	pop	{r4, pc}
	return memcmp(a, b, sizeof(*a));
}

static inline int bt_addr_le_cmp(const bt_addr_le_t *a, const bt_addr_le_t *b)
{
	return memcmp(a, b, sizeof(*a));
    8292:	2207      	movs	r2, #7
    8294:	4620      	mov	r0, r4
    8296:	f7f8 fecc 	bl	1032 <memcmp>
	int i;

	BT_DBG("type %d %s", type, bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type) &&
    829a:	2800      	cmp	r0, #0
    829c:	d1f7      	bne.n	828e <bt_keys_find+0xa>
		    !bt_addr_le_cmp(&key_pool[i].addr, addr)) {
			return &key_pool[i];
    829e:	4620      	mov	r0, r4
		}
	}

	return NULL;
}
    82a0:	bd10      	pop	{r4, pc}
    82a2:	bf00      	nop
    82a4:	20000fa8 	.word	0x20000fa8

000082a8 <bt_keys_get_type>:

struct bt_keys *bt_keys_get_type(int type, const bt_addr_le_t *addr)
{
    82a8:	b538      	push	{r3, r4, r5, lr}
    82aa:	4604      	mov	r4, r0
    82ac:	460d      	mov	r5, r1
	struct bt_keys *keys;

	BT_DBG("type %d %s", type, bt_addr_le_str(addr));

	keys = bt_keys_find(type, addr);
    82ae:	f7ff ffe9 	bl	8284 <bt_keys_find>
	if (keys) {
    82b2:	b930      	cbnz	r0, 82c2 <bt_keys_get_type+0x1a>
		return keys;
	}

	keys = bt_keys_get_addr(addr);
    82b4:	4628      	mov	r0, r5
    82b6:	f7ff ffc7 	bl	8248 <bt_keys_get_addr>
	if (!keys) {
    82ba:	b110      	cbz	r0, 82c2 <bt_keys_get_type+0x1a>
	return NULL;
}

void bt_keys_add_type(struct bt_keys *keys, int type)
{
	keys->keys |= type;
    82bc:	8983      	ldrh	r3, [r0, #12]
    82be:	4323      	orrs	r3, r4
    82c0:	8183      	strh	r3, [r0, #12]
	}

	bt_keys_add_type(keys, type);

	return keys;
}
    82c2:	bd38      	pop	{r3, r4, r5, pc}

000082c4 <bt_keys_find_irk>:

struct bt_keys *bt_keys_find_irk(const bt_addr_le_t *addr)
{
    82c4:	b570      	push	{r4, r5, r6, lr}
int bt_addr_le_create_nrpa(bt_addr_le_t *addr);
int bt_addr_le_create_static(bt_addr_le_t *addr);

static inline bool bt_addr_le_is_rpa(const bt_addr_le_t *addr)
{
	if (addr->type != BT_ADDR_LE_RANDOM) {
    82c6:	7803      	ldrb	r3, [r0, #0]
    82c8:	2b01      	cmp	r3, #1
    82ca:	4605      	mov	r5, r0
    82cc:	d001      	beq.n	82d2 <bt_keys_find_irk+0xe>
	int i;

	BT_DBG("%s", bt_addr_le_str(addr));

	if (!bt_addr_le_is_rpa(addr)) {
		return NULL;
    82ce:	2000      	movs	r0, #0
    82d0:	bd70      	pop	{r4, r5, r6, pc}
{
	int i;

	BT_DBG("%s", bt_addr_le_str(addr));

	if (!bt_addr_le_is_rpa(addr)) {
    82d2:	7983      	ldrb	r3, [r0, #6]
    82d4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    82d8:	2b40      	cmp	r3, #64	; 0x40
    82da:	d1f8      	bne.n	82ce <bt_keys_find_irk+0xa>
		return NULL;
	}

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
    82dc:	4c10      	ldr	r4, [pc, #64]	; (8320 <bt_keys_find_irk+0x5c>)
    82de:	89a3      	ldrh	r3, [r4, #12]
    82e0:	f013 0f02 	tst.w	r3, #2
    82e4:	4626      	mov	r6, r4
    82e6:	d103      	bne.n	82f0 <bt_keys_find_irk+0x2c>
			return &key_pool[i];
		}
	}

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
    82e8:	89b3      	ldrh	r3, [r6, #12]
    82ea:	079b      	lsls	r3, r3, #30
    82ec:	d5ef      	bpl.n	82ce <bt_keys_find_irk+0xa>
    82ee:	e009      	b.n	8304 <bt_keys_find_irk+0x40>
#define BT_ADDR_LE_NONE (&(bt_addr_le_t) { 0, \
			 { { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff } } })

static inline int bt_addr_cmp(const bt_addr_t *a, const bt_addr_t *b)
{
	return memcmp(a, b, sizeof(*a));
    82f0:	2206      	movs	r2, #6
    82f2:	f104 0140 	add.w	r1, r4, #64	; 0x40
    82f6:	3001      	adds	r0, #1
    82f8:	f7f8 fe9b 	bl	1032 <memcmp>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
			continue;
		}

		if (!bt_addr_cmp(&addr->a, &key_pool[i].irk.rpa)) {
    82fc:	2800      	cmp	r0, #0
    82fe:	d1f3      	bne.n	82e8 <bt_keys_find_irk+0x24>
			BT_DBG("cached RPA %s for %s",
			       bt_addr_str(&key_pool[i].irk.rpa),
			       bt_addr_le_str(&key_pool[i].addr));
			return &key_pool[i];
    8300:	4620      	mov	r0, r4
	}

	BT_DBG("No IRK for %s", bt_addr_le_str(addr));

	return NULL;
}
    8302:	bd70      	pop	{r4, r5, r6, pc}
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
			continue;
		}

		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
    8304:	3501      	adds	r5, #1
    8306:	4629      	mov	r1, r5
    8308:	4806      	ldr	r0, [pc, #24]	; (8324 <bt_keys_find_irk+0x60>)
    830a:	f7f9 fd80 	bl	1e0e <bt_rpa_irk_matches>
    830e:	2800      	cmp	r0, #0
    8310:	d0dd      	beq.n	82ce <bt_keys_find_irk+0xa>
	return memcmp(a, b, sizeof(*a));
}

static inline void bt_addr_copy(bt_addr_t *dst, const bt_addr_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    8312:	2206      	movs	r2, #6
    8314:	4629      	mov	r1, r5
    8316:	4804      	ldr	r0, [pc, #16]	; (8328 <bt_keys_find_irk+0x64>)
    8318:	f7f8 febb 	bl	1092 <memcpy>
			       bt_addr_str(&key_pool[i].irk.rpa),
			       bt_addr_le_str(&key_pool[i].addr));

			bt_addr_copy(&key_pool[i].irk.rpa, &addr->a);

			return &key_pool[i];
    831c:	4800      	ldr	r0, [pc, #0]	; (8320 <bt_keys_find_irk+0x5c>)
    831e:	bd70      	pop	{r4, r5, r6, pc}
    8320:	20000fa8 	.word	0x20000fa8
    8324:	20000fd8 	.word	0x20000fd8
    8328:	20000fe8 	.word	0x20000fe8

0000832c <bt_keys_find_addr>:
	return memcmp(a, b, sizeof(*a));
}

static inline int bt_addr_le_cmp(const bt_addr_le_t *a, const bt_addr_le_t *b)
{
	return memcmp(a, b, sizeof(*a));
    832c:	4601      	mov	r1, r0

	return NULL;
}

struct bt_keys *bt_keys_find_addr(const bt_addr_le_t *addr)
{
    832e:	b508      	push	{r3, lr}
    8330:	2207      	movs	r2, #7
    8332:	4804      	ldr	r0, [pc, #16]	; (8344 <bt_keys_find_addr+0x18>)
    8334:	f7f8 fe7d 	bl	1032 <memcmp>
	int i;

	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if (!bt_addr_le_cmp(&key_pool[i].addr, addr)) {
    8338:	2800      	cmp	r0, #0
			return &key_pool[i];
		}
	}

	return NULL;
}
    833a:	4802      	ldr	r0, [pc, #8]	; (8344 <bt_keys_find_addr+0x18>)
    833c:	bf18      	it	ne
    833e:	2000      	movne	r0, #0
    8340:	bd08      	pop	{r3, pc}
    8342:	bf00      	nop
    8344:	20000fa8 	.word	0x20000fa8

00008348 <bt_keys_add_type>:

void bt_keys_add_type(struct bt_keys *keys, int type)
{
	keys->keys |= type;
    8348:	8983      	ldrh	r3, [r0, #12]
    834a:	4319      	orrs	r1, r3
    834c:	8181      	strh	r1, [r0, #12]
    834e:	4770      	bx	lr

00008350 <bt_keys_clear>:

void bt_keys_clear(struct bt_keys *keys)
{
	BT_DBG("keys for %s", bt_addr_le_str(&keys->addr));

	memset(keys, 0, sizeof(*keys));
    8350:	2268      	movs	r2, #104	; 0x68
    8352:	2100      	movs	r1, #0
    8354:	f7f8 bec9 	b.w	10ea <memset>

00008358 <evt_create>:

static u64_t event_mask = DEFAULT_EVENT_MASK;
static u64_t le_event_mask = DEFAULT_LE_EVENT_MASK;

static void evt_create(struct net_buf *buf, u8_t evt, u8_t len)
{
    8358:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_hdr *hdr;

	hdr = net_buf_add(buf, sizeof(*hdr));
    835a:	3008      	adds	r0, #8

static u64_t event_mask = DEFAULT_EVENT_MASK;
static u64_t le_event_mask = DEFAULT_LE_EVENT_MASK;

static void evt_create(struct net_buf *buf, u8_t evt, u8_t len)
{
    835c:	460d      	mov	r5, r1
	struct bt_hci_evt_hdr *hdr;

	hdr = net_buf_add(buf, sizeof(*hdr));
    835e:	2102      	movs	r1, #2

static u64_t event_mask = DEFAULT_EVENT_MASK;
static u64_t le_event_mask = DEFAULT_LE_EVENT_MASK;

static void evt_create(struct net_buf *buf, u8_t evt, u8_t len)
{
    8360:	4614      	mov	r4, r2
	struct bt_hci_evt_hdr *hdr;

	hdr = net_buf_add(buf, sizeof(*hdr));
    8362:	f009 fc53 	bl	11c0c <net_buf_simple_add>
	hdr->evt = evt;
    8366:	7005      	strb	r5, [r0, #0]
	hdr->len = len;
    8368:	7044      	strb	r4, [r0, #1]
    836a:	bd38      	pop	{r3, r4, r5, pc}

0000836c <cmd_status>:

	return net_buf_add(*buf, plen);
}

static struct net_buf *cmd_status(u8_t status)
{
    836c:	b538      	push	{r3, r4, r5, lr}
    836e:	4605      	mov	r5, r0
	struct bt_hci_evt_cmd_status *cs;
	struct net_buf *buf;

	buf = bt_buf_get_cmd_complete(K_FOREVER);
    8370:	f04f 30ff 	mov.w	r0, #4294967295
    8374:	f7fb fc86 	bl	3c84 <bt_buf_get_cmd_complete>
	evt_create(buf, BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
    8378:	2204      	movs	r2, #4
static struct net_buf *cmd_status(u8_t status)
{
	struct bt_hci_evt_cmd_status *cs;
	struct net_buf *buf;

	buf = bt_buf_get_cmd_complete(K_FOREVER);
    837a:	4604      	mov	r4, r0
	evt_create(buf, BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
    837c:	210f      	movs	r1, #15
    837e:	f7ff ffeb 	bl	8358 <evt_create>

	cs = net_buf_add(buf, sizeof(*cs));
    8382:	2104      	movs	r1, #4
    8384:	f104 0008 	add.w	r0, r4, #8
    8388:	f009 fc40 	bl	11c0c <net_buf_simple_add>
	cs->status = status;
	cs->ncmd = 1;
    838c:	2301      	movs	r3, #1
    838e:	7043      	strb	r3, [r0, #1]
	cs->opcode = sys_cpu_to_le16(_opcode);
    8390:	4b02      	ldr	r3, [pc, #8]	; (839c <cmd_status+0x30>)

	buf = bt_buf_get_cmd_complete(K_FOREVER);
	evt_create(buf, BT_HCI_EVT_CMD_STATUS, sizeof(*cs));

	cs = net_buf_add(buf, sizeof(*cs));
	cs->status = status;
    8392:	7005      	strb	r5, [r0, #0]
	cs->ncmd = 1;
	cs->opcode = sys_cpu_to_le16(_opcode);
    8394:	881b      	ldrh	r3, [r3, #0]
    8396:	8043      	strh	r3, [r0, #2]

	return buf;
}
    8398:	4620      	mov	r0, r4
    839a:	bd38      	pop	{r3, r4, r5, pc}
    839c:	20001010 	.word	0x20001010

000083a0 <cmd_complete>:
	hdr->evt = evt;
	hdr->len = len;
}

static void *cmd_complete(struct net_buf **buf, u8_t plen)
{
    83a0:	b538      	push	{r3, r4, r5, lr}
    83a2:	4604      	mov	r4, r0
	struct bt_hci_evt_cmd_complete *cc;

	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    83a4:	f04f 30ff 	mov.w	r0, #4294967295
	hdr->evt = evt;
	hdr->len = len;
}

static void *cmd_complete(struct net_buf **buf, u8_t plen)
{
    83a8:	460d      	mov	r5, r1
	struct bt_hci_evt_cmd_complete *cc;

	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    83aa:	f7fb fc6b 	bl	3c84 <bt_buf_get_cmd_complete>

	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    83ae:	1cea      	adds	r2, r5, #3

static void *cmd_complete(struct net_buf **buf, u8_t plen)
{
	struct bt_hci_evt_cmd_complete *cc;

	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    83b0:	6020      	str	r0, [r4, #0]

	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    83b2:	b2d2      	uxtb	r2, r2
    83b4:	210e      	movs	r1, #14
    83b6:	f7ff ffcf 	bl	8358 <evt_create>

	cc = net_buf_add(*buf, sizeof(*cc));
    83ba:	6820      	ldr	r0, [r4, #0]
    83bc:	2103      	movs	r1, #3
    83be:	3008      	adds	r0, #8
    83c0:	f009 fc24 	bl	11c0c <net_buf_simple_add>
	cc->ncmd = 1;
    83c4:	2301      	movs	r3, #1
    83c6:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(_opcode);
    83c8:	4b05      	ldr	r3, [pc, #20]	; (83e0 <cmd_complete+0x40>)
    83ca:	881b      	ldrh	r3, [r3, #0]
    83cc:	f8a0 3001 	strh.w	r3, [r0, #1]

	return net_buf_add(*buf, plen);
    83d0:	6820      	ldr	r0, [r4, #0]
    83d2:	4629      	mov	r1, r5
    83d4:	3008      	adds	r0, #8
}
    83d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

	cc = net_buf_add(*buf, sizeof(*cc));
	cc->ncmd = 1;
	cc->opcode = sys_cpu_to_le16(_opcode);

	return net_buf_add(*buf, plen);
    83da:	f009 bc17 	b.w	11c0c <net_buf_simple_add>
    83de:	bf00      	nop
    83e0:	20001010 	.word	0x20001010

000083e4 <meta_evt>:

	return buf;
}

static void *meta_evt(struct net_buf *buf, u8_t subevt, u8_t melen)
{
    83e4:	b570      	push	{r4, r5, r6, lr}
    83e6:	4604      	mov	r4, r0
    83e8:	4615      	mov	r5, r2
	struct bt_hci_evt_le_meta_event *me;

	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    83ea:	3201      	adds	r2, #1

	return buf;
}

static void *meta_evt(struct net_buf *buf, u8_t subevt, u8_t melen)
{
    83ec:	460e      	mov	r6, r1
	struct bt_hci_evt_le_meta_event *me;

	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
	me = net_buf_add(buf, sizeof(*me));
    83ee:	3408      	adds	r4, #8

static void *meta_evt(struct net_buf *buf, u8_t subevt, u8_t melen)
{
	struct bt_hci_evt_le_meta_event *me;

	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    83f0:	b2d2      	uxtb	r2, r2
    83f2:	213e      	movs	r1, #62	; 0x3e
    83f4:	f7ff ffb0 	bl	8358 <evt_create>
	me = net_buf_add(buf, sizeof(*me));
    83f8:	2101      	movs	r1, #1
    83fa:	4620      	mov	r0, r4
    83fc:	f009 fc06 	bl	11c0c <net_buf_simple_add>
	me->subevent = subevt;
    8400:	7006      	strb	r6, [r0, #0]

	return net_buf_add(buf, melen);
    8402:	4629      	mov	r1, r5
    8404:	4620      	mov	r0, r4
}
    8406:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
	me = net_buf_add(buf, sizeof(*me));
	me->subevent = subevt;

	return net_buf_add(buf, melen);
    840a:	f009 bbff 	b.w	11c0c <net_buf_simple_add>
	...

00008410 <encrypt_change>:
static void encrypt_change(u8_t err, u16_t handle,
			   struct net_buf *buf)
{
	struct bt_hci_evt_encrypt_change *ep;

	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    8410:	4b0e      	ldr	r3, [pc, #56]	; (844c <encrypt_change+0x3c>)
	       sizeof(u16_t));
}

static void encrypt_change(u8_t err, u16_t handle,
			   struct net_buf *buf)
{
    8412:	b570      	push	{r4, r5, r6, lr}
    8414:	4615      	mov	r5, r2
	struct bt_hci_evt_encrypt_change *ep;

	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    8416:	e9d3 2300 	ldrd	r2, r3, [r3]
    841a:	2300      	movs	r3, #0
    841c:	f002 0280 	and.w	r2, r2, #128	; 0x80
    8420:	4313      	orrs	r3, r2
	       sizeof(u16_t));
}

static void encrypt_change(u8_t err, u16_t handle,
			   struct net_buf *buf)
{
    8422:	4604      	mov	r4, r0
    8424:	460e      	mov	r6, r1
	struct bt_hci_evt_encrypt_change *ep;

	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    8426:	d010      	beq.n	844a <encrypt_change+0x3a>
		return;
	}

	evt_create(buf, BT_HCI_EVT_ENCRYPT_CHANGE, sizeof(*ep));
    8428:	2204      	movs	r2, #4
    842a:	2108      	movs	r1, #8
    842c:	4628      	mov	r0, r5
    842e:	f7ff ff93 	bl	8358 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    8432:	2104      	movs	r1, #4
    8434:	f105 0008 	add.w	r0, r5, #8
    8438:	f009 fbe8 	bl	11c0c <net_buf_simple_add>

	ep->status = err;
	ep->handle = sys_cpu_to_le16(handle);
	ep->encrypt = !err ? 1 : 0;
    843c:	fab4 f384 	clz	r3, r4
    8440:	095b      	lsrs	r3, r3, #5
	}

	evt_create(buf, BT_HCI_EVT_ENCRYPT_CHANGE, sizeof(*ep));
	ep = net_buf_add(buf, sizeof(*ep));

	ep->status = err;
    8442:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    8444:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
    8448:	70c3      	strb	r3, [r0, #3]
    844a:	bd70      	pop	{r4, r5, r6, pc}
    844c:	20000538 	.word	0x20000538

00008450 <le_remote_feat_complete>:
}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_ENC */

static void le_remote_feat_complete(u8_t status, struct pdu_data *pdu_data,
				    u16_t handle, struct net_buf *buf)
{
    8450:	b570      	push	{r4, r5, r6, lr}
    8452:	4604      	mov	r4, r0
    8454:	4618      	mov	r0, r3
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    8456:	4b13      	ldr	r3, [pc, #76]	; (84a4 <le_remote_feat_complete+0x54>)
}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_ENC */

static void le_remote_feat_complete(u8_t status, struct pdu_data *pdu_data,
				    u16_t handle, struct net_buf *buf)
{
    8458:	4616      	mov	r6, r2
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    845a:	e9d3 2300 	ldrd	r2, r3, [r3]
    845e:	2200      	movs	r2, #0
    8460:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    8464:	4313      	orrs	r3, r2
}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_ENC */

static void le_remote_feat_complete(u8_t status, struct pdu_data *pdu_data,
				    u16_t handle, struct net_buf *buf)
{
    8466:	460d      	mov	r5, r1
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    8468:	d01b      	beq.n	84a2 <le_remote_feat_complete+0x52>
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
    846a:	4b0f      	ldr	r3, [pc, #60]	; (84a8 <le_remote_feat_complete+0x58>)
static void le_remote_feat_complete(u8_t status, struct pdu_data *pdu_data,
				    u16_t handle, struct net_buf *buf)
{
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    846c:	e9d3 2300 	ldrd	r2, r3, [r3]
    8470:	2300      	movs	r3, #0
    8472:	f002 0208 	and.w	r2, r2, #8
    8476:	4313      	orrs	r3, r2
    8478:	d013      	beq.n	84a2 <le_remote_feat_complete+0x52>
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
		return;
	}

	sep = meta_evt(buf, BT_HCI_EV_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));
    847a:	220b      	movs	r2, #11
    847c:	2104      	movs	r1, #4
    847e:	f7ff ffb1 	bl	83e4 <meta_evt>

	sep->status = status;
	sep->handle = sys_cpu_to_le16(handle);
	if (!status) {
		memcpy(&sep->features[0],
    8482:	2208      	movs	r2, #8
		return;
	}

	sep = meta_evt(buf, BT_HCI_EV_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));

	sep->status = status;
    8484:	7004      	strb	r4, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    8486:	f8a0 6001 	strh.w	r6, [r0, #1]
    848a:	3003      	adds	r0, #3
	if (!status) {
    848c:	b924      	cbnz	r4, 8498 <le_remote_feat_complete+0x48>
		memcpy(&sep->features[0],
    848e:	1d29      	adds	r1, r5, #4
		       &pdu_data->payload.llctrl.ctrldata.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
    8490:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	sep = meta_evt(buf, BT_HCI_EV_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));

	sep->status = status;
	sep->handle = sys_cpu_to_le16(handle);
	if (!status) {
		memcpy(&sep->features[0],
    8494:	f7f8 bdfd 	b.w	1092 <memcpy>
		       &pdu_data->payload.llctrl.ctrldata.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		memset(&sep->features[0], 0x00, sizeof(sep->features));
    8498:	2100      	movs	r1, #0
	}
}
    849a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	if (!status) {
		memcpy(&sep->features[0],
		       &pdu_data->payload.llctrl.ctrldata.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		memset(&sep->features[0], 0x00, sizeof(sep->features));
    849e:	f7f8 be24 	b.w	10ea <memset>
    84a2:	bd70      	pop	{r4, r5, r6, pc}
    84a4:	20000538 	.word	0x20000538
    84a8:	20000540 	.word	0x20000540

000084ac <bt_addr_le_to_str.constprop.55>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    84ac:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[7];

	switch (addr->type) {
    84ae:	7803      	ldrb	r3, [r0, #0]
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    84b0:	b088      	sub	sp, #32
    84b2:	4604      	mov	r4, r0
    84b4:	460e      	mov	r6, r1
    84b6:	ad06      	add	r5, sp, #24
				    size_t len)
{
	char type[7];

	switch (addr->type) {
    84b8:	b11b      	cbz	r3, 84c2 <bt_addr_le_to_str.constprop.55+0x16>
    84ba:	2b01      	cmp	r3, #1
    84bc:	d106      	bne.n	84cc <bt_addr_le_to_str.constprop.55+0x20>
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    84be:	490f      	ldr	r1, [pc, #60]	; (84fc <bt_addr_le_to_str.constprop.55+0x50>)
    84c0:	e000      	b.n	84c4 <bt_addr_le_to_str.constprop.55+0x18>
{
	char type[7];

	switch (addr->type) {
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    84c2:	490f      	ldr	r1, [pc, #60]	; (8500 <bt_addr_le_to_str.constprop.55+0x54>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    84c4:	4628      	mov	r0, r5
    84c6:	f7f8 fd95 	bl	ff4 <strcpy>
    84ca:	e004      	b.n	84d6 <bt_addr_le_to_str.constprop.55+0x2a>
		break;
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    84cc:	4a0d      	ldr	r2, [pc, #52]	; (8504 <bt_addr_le_to_str.constprop.55+0x58>)
    84ce:	2107      	movs	r1, #7
    84d0:	4628      	mov	r0, r5
    84d2:	f7f8 ffe3 	bl	149c <snprintk>
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    84d6:	7862      	ldrb	r2, [r4, #1]
    84d8:	9204      	str	r2, [sp, #16]
    84da:	78a2      	ldrb	r2, [r4, #2]
    84dc:	9203      	str	r2, [sp, #12]
    84de:	78e2      	ldrb	r2, [r4, #3]
    84e0:	9202      	str	r2, [sp, #8]
    84e2:	7922      	ldrb	r2, [r4, #4]
    84e4:	9201      	str	r2, [sp, #4]
    84e6:	7962      	ldrb	r2, [r4, #5]
    84e8:	9200      	str	r2, [sp, #0]
    84ea:	79a3      	ldrb	r3, [r4, #6]
    84ec:	9505      	str	r5, [sp, #20]
    84ee:	4a06      	ldr	r2, [pc, #24]	; (8508 <bt_addr_le_to_str.constprop.55+0x5c>)
    84f0:	211b      	movs	r1, #27
    84f2:	4630      	mov	r0, r6
    84f4:	f7f8 ffd2 	bl	149c <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
    84f8:	b008      	add	sp, #32
    84fa:	bd70      	pop	{r4, r5, r6, pc}
    84fc:	00013b22 	.word	0x00013b22
    8500:	00013b1b 	.word	0x00013b1b
    8504:	00013b29 	.word	0x00013b29
    8508:	00013b30 	.word	0x00013b30

0000850c <le_adv_ext_report.isra.51>:
		  offsetof(struct pdu_adv, payload) + adv->len];

}

#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
static void le_adv_ext_report(struct pdu_data *pdu_data, u8_t *b,
    850c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    8510:	4604      	mov	r4, r0
{
	struct pdu_adv *adv = (struct pdu_adv *)pdu_data;
	u8_t rssi;

	rssi = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
		 offsetof(struct pdu_adv, payload) + adv->len];
    8512:	7840      	ldrb	r0, [r0, #1]

	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=-%u dB",
    8514:	4e32      	ldr	r6, [pc, #200]	; (85e0 <le_adv_ext_report.isra.51+0xd4>)
    8516:	4d33      	ldr	r5, [pc, #204]	; (85e4 <le_adv_ext_report.isra.51+0xd8>)
		  offsetof(struct pdu_adv, payload) + adv->len];

}

#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
static void le_adv_ext_report(struct pdu_data *pdu_data, u8_t *b,
    8518:	b093      	sub	sp, #76	; 0x4c
			      struct net_buf *buf, u8_t phy)
{
	struct pdu_adv *adv = (struct pdu_adv *)pdu_data;
	u8_t rssi;

	rssi = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    851a:	4401      	add	r1, r0
		 offsetof(struct pdu_adv, payload) + adv->len];

	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=-%u dB",
    851c:	9607      	str	r6, [sp, #28]
    851e:	7a8b      	ldrb	r3, [r1, #10]
    8520:	9306      	str	r3, [sp, #24]
    8522:	7823      	ldrb	r3, [r4, #0]
    8524:	9003      	str	r0, [sp, #12]
    8526:	09d9      	lsrs	r1, r3, #7
    8528:	9105      	str	r1, [sp, #20]
    852a:	f3c3 1180 	ubfx	r1, r3, #6, #1
    852e:	f003 030f 	and.w	r3, r3, #15
    8532:	9104      	str	r1, [sp, #16]
    8534:	9302      	str	r3, [sp, #8]
    8536:	9201      	str	r2, [sp, #4]
    8538:	4b2b      	ldr	r3, [pc, #172]	; (85e8 <le_adv_ext_report.isra.51+0xdc>)
    853a:	9500      	str	r5, [sp, #0]
    853c:	4a2b      	ldr	r2, [pc, #172]	; (85ec <le_adv_ext_report.isra.51+0xe0>)
    853e:	492c      	ldr	r1, [pc, #176]	; (85f0 <le_adv_ext_report.isra.51+0xe4>)
    8540:	482c      	ldr	r0, [pc, #176]	; (85f4 <le_adv_ext_report.isra.51+0xe8>)
    8542:	f7f8 ff9d 	bl	1480 <printk>
		phy, adv->type, adv->len, adv->tx_addr, adv->rx_addr, rssi);

	if ((adv->type == PDU_ADV_TYPE_EXT_IND) && adv->len) {
    8546:	7823      	ldrb	r3, [r4, #0]
    8548:	f003 030f 	and.w	r3, r3, #15
    854c:	2b07      	cmp	r3, #7
    854e:	d144      	bne.n	85da <le_adv_ext_report.isra.51+0xce>
    8550:	7863      	ldrb	r3, [r4, #1]
    8552:	2b00      	cmp	r3, #0
    8554:	d041      	beq.n	85da <le_adv_ext_report.isra.51+0xce>

		p = (void *)&adv->payload.adv_ext_ind;
		h = (void *)p->ext_hdr_adi_adv_data;
		ptr = (u8_t *)h + sizeof(*h);

		BT_WARN("Ext. adv mode= 0x%x, hdr len= %u", p->adv_mode,
    8556:	78a3      	ldrb	r3, [r4, #2]
    8558:	4925      	ldr	r1, [pc, #148]	; (85f0 <le_adv_ext_report.isra.51+0xe4>)
    855a:	9603      	str	r6, [sp, #12]
    855c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
    8560:	099b      	lsrs	r3, r3, #6
    8562:	9202      	str	r2, [sp, #8]
    8564:	9301      	str	r3, [sp, #4]
    8566:	9500      	str	r5, [sp, #0]
    8568:	4b1f      	ldr	r3, [pc, #124]	; (85e8 <le_adv_ext_report.isra.51+0xdc>)
    856a:	4a20      	ldr	r2, [pc, #128]	; (85ec <le_adv_ext_report.isra.51+0xe0>)
    856c:	4822      	ldr	r0, [pc, #136]	; (85f8 <le_adv_ext_report.isra.51+0xec>)
    856e:	f7f8 ff87 	bl	1480 <printk>
			p->ext_hdr_len);

		if (!p->ext_hdr_len) {
    8572:	78a3      	ldrb	r3, [r4, #2]
    8574:	0699      	lsls	r1, r3, #26
    8576:	d030      	beq.n	85da <le_adv_ext_report.isra.51+0xce>
			goto no_ext_hdr;
		}

		if (h->adv_addr) {
    8578:	78e3      	ldrb	r3, [r4, #3]
    857a:	07da      	lsls	r2, r3, #31
		struct ext_adv_hdr *h;
		u8_t *ptr;

		p = (void *)&adv->payload.adv_ext_ind;
		h = (void *)p->ext_hdr_adi_adv_data;
		ptr = (u8_t *)h + sizeof(*h);
    857c:	f104 0704 	add.w	r7, r4, #4

		if (!p->ext_hdr_len) {
			goto no_ext_hdr;
		}

		if (h->adv_addr) {
    8580:	d51d      	bpl.n	85be <le_adv_ext_report.isra.51+0xb2>
			char addr_str[BT_ADDR_LE_STR_LEN];
			bt_addr_le_t addr;

			addr.type = adv->tx_addr;
    8582:	7823      	ldrb	r3, [r4, #0]
    8584:	f10d 0848 	add.w	r8, sp, #72	; 0x48
    8588:	f3c3 1380 	ubfx	r3, r3, #6, #1
    858c:	f808 3d24 	strb.w	r3, [r8, #-36]!
			memcpy(&addr.a.val[0], ptr, sizeof(bt_addr_t));
    8590:	2206      	movs	r2, #6
    8592:	4639      	mov	r1, r7
			ptr += BDADDR_SIZE;

			bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    8594:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
		if (h->adv_addr) {
			char addr_str[BT_ADDR_LE_STR_LEN];
			bt_addr_le_t addr;

			addr.type = adv->tx_addr;
			memcpy(&addr.a.val[0], ptr, sizeof(bt_addr_t));
    8598:	f10d 0025 	add.w	r0, sp, #37	; 0x25
    859c:	f7f8 fd79 	bl	1092 <memcpy>
			ptr += BDADDR_SIZE;

			bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    85a0:	4649      	mov	r1, r9
    85a2:	4640      	mov	r0, r8
    85a4:	f7ff ff82 	bl	84ac <bt_addr_le_to_str.constprop.55>

			BT_WARN("AdvA: %s", addr_str);
    85a8:	9602      	str	r6, [sp, #8]
    85aa:	e88d 0220 	stmia.w	sp, {r5, r9}
    85ae:	4b0e      	ldr	r3, [pc, #56]	; (85e8 <le_adv_ext_report.isra.51+0xdc>)
    85b0:	4a0e      	ldr	r2, [pc, #56]	; (85ec <le_adv_ext_report.isra.51+0xe0>)
    85b2:	490f      	ldr	r1, [pc, #60]	; (85f0 <le_adv_ext_report.isra.51+0xe4>)
    85b4:	4811      	ldr	r0, [pc, #68]	; (85fc <le_adv_ext_report.isra.51+0xf0>)
			char addr_str[BT_ADDR_LE_STR_LEN];
			bt_addr_le_t addr;

			addr.type = adv->tx_addr;
			memcpy(&addr.a.val[0], ptr, sizeof(bt_addr_t));
			ptr += BDADDR_SIZE;
    85b6:	f104 070a 	add.w	r7, r4, #10

			bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));

			BT_WARN("AdvA: %s", addr_str);
    85ba:	f7f8 ff61 	bl	1480 <printk>

		}

		if (h->tx_pwr) {
    85be:	78e3      	ldrb	r3, [r4, #3]
    85c0:	065b      	lsls	r3, r3, #25
    85c2:	d50a      	bpl.n	85da <le_adv_ext_report.isra.51+0xce>
			s8_t tx_pwr;

			tx_pwr = *(s8_t *)ptr;
			ptr++;

			BT_WARN("Tx pwr= %d dB", tx_pwr);
    85c4:	9602      	str	r6, [sp, #8]
    85c6:	f997 3000 	ldrsb.w	r3, [r7]
    85ca:	9301      	str	r3, [sp, #4]
    85cc:	9500      	str	r5, [sp, #0]
    85ce:	4b06      	ldr	r3, [pc, #24]	; (85e8 <le_adv_ext_report.isra.51+0xdc>)
    85d0:	4a06      	ldr	r2, [pc, #24]	; (85ec <le_adv_ext_report.isra.51+0xe0>)
    85d2:	4907      	ldr	r1, [pc, #28]	; (85f0 <le_adv_ext_report.isra.51+0xe4>)
    85d4:	480a      	ldr	r0, [pc, #40]	; (8600 <le_adv_ext_report.isra.51+0xf4>)
    85d6:	f7f8 ff53 	bl	1480 <printk>
		/* TODO: length check? */
	}

no_ext_hdr:
	return;
}
    85da:	b013      	add	sp, #76	; 0x4c
    85dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    85e0:	00013df4 	.word	0x00013df4
    85e4:	00013e3f 	.word	0x00013e3f
    85e8:	0001661c 	.word	0x0001661c
    85ec:	00013e01 	.word	0x00013e01
    85f0:	00013dbb 	.word	0x00013dbb
    85f4:	00014f08 	.word	0x00014f08
    85f8:	00014f56 	.word	0x00014f56
    85fc:	00014f87 	.word	0x00014f87
    8600:	00014fa0 	.word	0x00014fa0

00008604 <sys_get_le64>:
 *  @param src Location of the little-endian 64-bit integer to get.
 *
 *  @return 64-bit integer in host endianness.
 */
static inline u64_t sys_get_le64(const u8_t src[8])
{
    8604:	4603      	mov	r3, r0
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
}
    8606:	6800      	ldr	r0, [r0, #0]
    8608:	6859      	ldr	r1, [r3, #4]
    860a:	4770      	bx	lr

0000860c <hci_cmd_handle>:

	return 0;
}

struct net_buf *hci_cmd_handle(struct net_buf *cmd)
{
    860c:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_cmd_hdr *chdr;
	struct net_buf *evt = NULL;
	u16_t ocf;
	int err;

	if (cmd->len < sizeof(*chdr)) {
    860e:	8981      	ldrh	r1, [r0, #12]

	return 0;
}

struct net_buf *hci_cmd_handle(struct net_buf *cmd)
{
    8610:	b092      	sub	sp, #72	; 0x48
	struct bt_hci_evt_cc_status *ccst;
	struct bt_hci_cmd_hdr *chdr;
	struct net_buf *evt = NULL;
    8612:	2500      	movs	r5, #0
	u16_t ocf;
	int err;

	if (cmd->len < sizeof(*chdr)) {
    8614:	2902      	cmp	r1, #2

	return 0;
}

struct net_buf *hci_cmd_handle(struct net_buf *cmd)
{
    8616:	4604      	mov	r4, r0
	struct bt_hci_evt_cc_status *ccst;
	struct bt_hci_cmd_hdr *chdr;
	struct net_buf *evt = NULL;
    8618:	950d      	str	r5, [sp, #52]	; 0x34
	u16_t ocf;
	int err;

	if (cmd->len < sizeof(*chdr)) {
    861a:	d808      	bhi.n	862e <hci_cmd_handle+0x22>
		BT_ERR("No HCI Command header");
    861c:	4bab      	ldr	r3, [pc, #684]	; (88cc <hci_cmd_handle+0x2c0>)
    861e:	9301      	str	r3, [sp, #4]
    8620:	4bab      	ldr	r3, [pc, #684]	; (88d0 <hci_cmd_handle+0x2c4>)
    8622:	9300      	str	r3, [sp, #0]
    8624:	4aab      	ldr	r2, [pc, #684]	; (88d4 <hci_cmd_handle+0x2c8>)
    8626:	4bac      	ldr	r3, [pc, #688]	; (88d8 <hci_cmd_handle+0x2cc>)
    8628:	49ac      	ldr	r1, [pc, #688]	; (88dc <hci_cmd_handle+0x2d0>)
    862a:	48ad      	ldr	r0, [pc, #692]	; (88e0 <hci_cmd_handle+0x2d4>)
    862c:	e011      	b.n	8652 <hci_cmd_handle+0x46>
		return NULL;
	}

	chdr = (void *)cmd->data;
    862e:	6883      	ldr	r3, [r0, #8]
	/* store in a global for later CC/CS event creation */
	_opcode = sys_le16_to_cpu(chdr->opcode);
    8630:	4eac      	ldr	r6, [pc, #688]	; (88e4 <hci_cmd_handle+0x2d8>)
    8632:	781a      	ldrb	r2, [r3, #0]
    8634:	7858      	ldrb	r0, [r3, #1]

	if (cmd->len < chdr->param_len) {
    8636:	789b      	ldrb	r3, [r3, #2]
		return NULL;
	}

	chdr = (void *)cmd->data;
	/* store in a global for later CC/CS event creation */
	_opcode = sys_le16_to_cpu(chdr->opcode);
    8638:	ea42 2200 	orr.w	r2, r2, r0, lsl #8

	if (cmd->len < chdr->param_len) {
    863c:	428b      	cmp	r3, r1
		return NULL;
	}

	chdr = (void *)cmd->data;
	/* store in a global for later CC/CS event creation */
	_opcode = sys_le16_to_cpu(chdr->opcode);
    863e:	8032      	strh	r2, [r6, #0]

	if (cmd->len < chdr->param_len) {
    8640:	d90b      	bls.n	865a <hci_cmd_handle+0x4e>
		BT_ERR("Invalid HCI CMD packet length");
    8642:	4ba2      	ldr	r3, [pc, #648]	; (88cc <hci_cmd_handle+0x2c0>)
    8644:	9301      	str	r3, [sp, #4]
    8646:	4ba2      	ldr	r3, [pc, #648]	; (88d0 <hci_cmd_handle+0x2c4>)
    8648:	9300      	str	r3, [sp, #0]
    864a:	4aa2      	ldr	r2, [pc, #648]	; (88d4 <hci_cmd_handle+0x2c8>)
    864c:	4ba2      	ldr	r3, [pc, #648]	; (88d8 <hci_cmd_handle+0x2cc>)
    864e:	49a3      	ldr	r1, [pc, #652]	; (88dc <hci_cmd_handle+0x2d0>)
    8650:	48a5      	ldr	r0, [pc, #660]	; (88e8 <hci_cmd_handle+0x2dc>)
    8652:	f7f8 ff15 	bl	1480 <printk>
		return NULL;
    8656:	4628      	mov	r0, r5
    8658:	e2c6      	b.n	8be8 <hci_cmd_handle+0x5dc>
	}

	net_buf_pull(cmd, sizeof(*chdr));
    865a:	2103      	movs	r1, #3
    865c:	f104 0008 	add.w	r0, r4, #8
    8660:	f009 faf3 	bl	11c4a <net_buf_simple_pull>

	ocf = BT_OCF(_opcode);
    8664:	8833      	ldrh	r3, [r6, #0]
    8666:	f3c3 0209 	ubfx	r2, r3, #0, #10

	switch (BT_OGF(_opcode)) {
    866a:	0a9b      	lsrs	r3, r3, #10
    866c:	3b01      	subs	r3, #1
    866e:	2b07      	cmp	r3, #7
    8670:	f200 82b3 	bhi.w	8bda <hci_cmd_handle+0x5ce>
    8674:	e8df f013 	tbh	[pc, r3, lsl #1]
    8678:	02b10008 	.word	0x02b10008
    867c:	00340018 	.word	0x00340018
    8680:	02b102b1 	.word	0x02b102b1
    8684:	009902b1 	.word	0x009902b1
}

static int link_control_cmd_handle(u16_t  ocf, struct net_buf *cmd,
				   struct net_buf **evt)
{
	switch (ocf) {
    8688:	2a06      	cmp	r2, #6
    868a:	d007      	beq.n	869c <hci_cmd_handle+0x90>
    868c:	2a1d      	cmp	r2, #29
    868e:	f040 82a4 	bne.w	8bda <hci_cmd_handle+0x5ce>
{
	struct bt_hci_cp_read_remote_version_info *cmd = (void *)buf->data;
	u16_t handle;
	u32_t status;

	handle = sys_le16_to_cpu(cmd->handle);
    8692:	68a3      	ldr	r3, [r4, #8]
	status = ll_version_ind_send(handle);
    8694:	8818      	ldrh	r0, [r3, #0]
    8696:	f007 fe99 	bl	103cc <ll_version_ind_send>
    869a:	e295      	b.n	8bc8 <hci_cmd_handle+0x5bc>
    869c:	68a3      	ldr	r3, [r4, #8]
	struct bt_hci_cp_disconnect *cmd = (void *)buf->data;
	u16_t handle;
	u32_t status;

	handle = sys_le16_to_cpu(cmd->handle);
	status = ll_terminate_ind_send(handle, cmd->reason);
    869e:	7899      	ldrb	r1, [r3, #2]
    86a0:	8818      	ldrh	r0, [r3, #0]
    86a2:	f007 fea7 	bl	103f4 <ll_terminate_ind_send>
    86a6:	e28f      	b.n	8bc8 <hci_cmd_handle+0x5bc>
#endif

static int ctrl_bb_cmd_handle(u16_t  ocf, struct net_buf *cmd,
			      struct net_buf **evt)
{
	switch (ocf) {
    86a8:	2a01      	cmp	r2, #1
    86aa:	d011      	beq.n	86d0 <hci_cmd_handle+0xc4>
    86ac:	2a03      	cmp	r2, #3
    86ae:	f040 8294 	bne.w	8bda <hci_cmd_handle+0x5ce>

#if CONFIG_BLUETOOTH_CONTROLLER_DUP_FILTER_LEN > 0
	dup_count = -1;
#endif
	/* reset event masks */
	event_mask = DEFAULT_EVENT_MASK;
    86b2:	4b8e      	ldr	r3, [pc, #568]	; (88ec <hci_cmd_handle+0x2e0>)
    86b4:	f04f 30ff 	mov.w	r0, #4294967295
    86b8:	f641 71ff 	movw	r1, #8191	; 0x1fff
    86bc:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    86c0:	4b8b      	ldr	r3, [pc, #556]	; (88f0 <hci_cmd_handle+0x2e4>)
    86c2:	201f      	movs	r0, #31
    86c4:	2100      	movs	r1, #0
    86c6:	e9c3 0100 	strd	r0, r1, [r3]

	if (buf) {
		ll_reset();
    86ca:	f007 fd6f 	bl	101ac <ll_reset>
    86ce:	e21a      	b.n	8b06 <hci_cmd_handle+0x4fa>
static void set_event_mask(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_cp_set_event_mask *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;

	event_mask = sys_get_le64(cmd->events);
    86d0:	68a0      	ldr	r0, [r4, #8]
    86d2:	f7ff ff97 	bl	8604 <sys_get_le64>
    86d6:	4b85      	ldr	r3, [pc, #532]	; (88ec <hci_cmd_handle+0x2e0>)
    86d8:	e9c3 0100 	strd	r0, r1, [r3]

	ccst = cmd_complete(evt, sizeof(*ccst));
    86dc:	4611      	mov	r1, r2
    86de:	e213      	b.n	8b08 <hci_cmd_handle+0x4fc>
}

static int info_cmd_handle(u16_t  ocf, struct net_buf *cmd,
			   struct net_buf **evt)
{
	switch (ocf) {
    86e0:	3a01      	subs	r2, #1
    86e2:	2a08      	cmp	r2, #8
    86e4:	f200 8279 	bhi.w	8bda <hci_cmd_handle+0x5ce>
    86e8:	e8df f012 	tbh	[pc, r2, lsl #1]
    86ec:	001b0009 	.word	0x001b0009
    86f0:	02770045 	.word	0x02770045
    86f4:	02770277 	.word	0x02770277
    86f8:	02770277 	.word	0x02770277
    86fc:	0053      	.short	0x0053

static void read_local_version_info(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_rp_read_local_version_info *rp;

	rp = cmd_complete(evt, sizeof(*rp));
    86fe:	2109      	movs	r1, #9
    8700:	a80d      	add	r0, sp, #52	; 0x34
    8702:	f7ff fe4d 	bl	83a0 <cmd_complete>

	rp->status = 0x00;
    8706:	2300      	movs	r3, #0
	rp->hci_version = BT_HCI_VERSION_5_0;
    8708:	2209      	movs	r2, #9
{
	struct bt_hci_rp_read_local_version_info *rp;

	rp = cmd_complete(evt, sizeof(*rp));

	rp->status = 0x00;
    870a:	7003      	strb	r3, [r0, #0]
	rp->hci_version = BT_HCI_VERSION_5_0;
	rp->hci_revision = sys_cpu_to_le16(0);
    870c:	7083      	strb	r3, [r0, #2]
    870e:	70c3      	strb	r3, [r0, #3]
	rp->lmp_version = RADIO_BLE_VERSION_NUMBER;
	rp->manufacturer = sys_cpu_to_le16(RADIO_BLE_COMPANY_ID);
    8710:	f04f 33ff 	mov.w	r3, #4294967295
	struct bt_hci_rp_read_local_version_info *rp;

	rp = cmd_complete(evt, sizeof(*rp));

	rp->status = 0x00;
	rp->hci_version = BT_HCI_VERSION_5_0;
    8714:	7042      	strb	r2, [r0, #1]
	rp->hci_revision = sys_cpu_to_le16(0);
	rp->lmp_version = RADIO_BLE_VERSION_NUMBER;
    8716:	7102      	strb	r2, [r0, #4]
	rp->manufacturer = sys_cpu_to_le16(RADIO_BLE_COMPANY_ID);
    8718:	7143      	strb	r3, [r0, #5]
    871a:	7183      	strb	r3, [r0, #6]
	rp->lmp_subversion = sys_cpu_to_le16(RADIO_BLE_SUB_VERSION_NUMBER);
    871c:	71c3      	strb	r3, [r0, #7]
    871e:	7203      	strb	r3, [r0, #8]
    8720:	e259      	b.n	8bd6 <hci_cmd_handle+0x5ca>

static void read_supported_commands(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_rp_read_supported_commands *rp;

	rp = cmd_complete(evt, sizeof(*rp));
    8722:	2141      	movs	r1, #65	; 0x41
    8724:	a80d      	add	r0, sp, #52	; 0x34
    8726:	f7ff fe3b 	bl	83a0 <cmd_complete>

	rp->status = 0x00;
    872a:	2100      	movs	r1, #0

static void read_supported_commands(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_rp_read_supported_commands *rp;

	rp = cmd_complete(evt, sizeof(*rp));
    872c:	4604      	mov	r4, r0

	rp->status = 0x00;
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    872e:	2240      	movs	r2, #64	; 0x40
{
	struct bt_hci_rp_read_supported_commands *rp;

	rp = cmd_complete(evt, sizeof(*rp));

	rp->status = 0x00;
    8730:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    8734:	f7f8 fcd9 	bl	10ea <memset>
	/* Disconnect. */
	rp->commands[0] = (1 << 5);
    8738:	2320      	movs	r3, #32
    873a:	7063      	strb	r3, [r4, #1]
	/* Set Event Mask, and Reset. */
	rp->commands[5] = (1 << 6) | (1 << 7);
    873c:	23c0      	movs	r3, #192	; 0xc0
    873e:	71a3      	strb	r3, [r4, #6]
#if defined(CONFIG_BLUETOOTH_HCI_ACL_FLOW_CONTROL)
	/* Set FC, Host Buffer Size and Host Num Completed */
	rp->commands[10] = (1 << 5) | (1 << 6) | (1 << 7);
#endif
	/* Read Local Version Info, Read Local Supported Features. */
	rp->commands[14] = (1 << 3) | (1 << 5);
    8740:	2328      	movs	r3, #40	; 0x28
    8742:	73e3      	strb	r3, [r4, #15]
	/* Read BD ADDR. */
	rp->commands[15] = (1 << 1);
    8744:	2302      	movs	r3, #2
    8746:	7423      	strb	r3, [r4, #16]
	/* All LE commands in this octet. */
	rp->commands[25] = 0xF7;
    8748:	23f7      	movs	r3, #247	; 0xf7
    874a:	76a3      	strb	r3, [r4, #26]
	/* All LE commands in this octet. */
	rp->commands[26] = 0xFF;
    874c:	23ff      	movs	r3, #255	; 0xff
    874e:	76e3      	strb	r3, [r4, #27]
	/* All LE commands in this octet,
	 */
	rp->commands[27] = 0xFF;
    8750:	7723      	strb	r3, [r4, #28]
	/* LE Start Encryption, LE Long Term Key Req Reply,
	 * LE Long Term Key Req Neg Reply. and
	 * LE Read Supported States.
	 */
	rp->commands[28] = (1 << 0) | (1 << 1) | (1 << 2) | (1 << 3);
    8752:	230f      	movs	r3, #15
	/* LE Remote Conn Param Req and Neg Reply */
	rp->commands[33] = (1 << 4) | (1 << 5);

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	/* LE resolving list commands, LE Read Peer RPA */
	rp->commands[34] |= (1 << 3) | (1 << 4) | (1 << 5) | (1 << 6) | (1 << 7);
    8754:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
	rp->commands[27] = 0xFF;
	/* LE Start Encryption, LE Long Term Key Req Reply,
	 * LE Long Term Key Req Neg Reply. and
	 * LE Read Supported States.
	 */
	rp->commands[28] = (1 << 0) | (1 << 1) | (1 << 2) | (1 << 3);
    8758:	7763      	strb	r3, [r4, #29]

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	/* LE resolving list commands, LE Read Peer RPA */
	rp->commands[34] |= (1 << 3) | (1 << 4) | (1 << 5) | (1 << 6) | (1 << 7);
	/* LE Read Local RPA, LE Set AR Enable, Set RPA Timeout */
	rp->commands[35] |= (1 << 0) | (1 << 1) | (1 << 2);
    875a:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
	/* LE Set Data Length, and LE Read Suggested Data Length. */
	rp->commands[33] |= (1 << 6) | (1 << 7);
    875e:	21f0      	movs	r1, #240	; 0xf0
	/* LE Write Suggested Data Length. */
	rp->commands[34] |= (1 << 0);
    8760:	f062 0206 	orn	r2, r2, #6
	rp->commands[34] |= (1 << 1) | (1 << 2);
#endif

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
	/* LE Read Maximum Data Length. */
	rp->commands[35] |= (1 << 3);
    8764:	f043 030f 	orr.w	r3, r3, #15
	rp->commands[35] |= (1 << 0) | (1 << 1) | (1 << 2);
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
	/* LE Set Data Length, and LE Read Suggested Data Length. */
	rp->commands[33] |= (1 << 6) | (1 << 7);
    8768:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
	/* LE Write Suggested Data Length. */
	rp->commands[34] |= (1 << 0);
    876c:	f884 2023 	strb.w	r2, [r4, #35]	; 0x23
	rp->commands[34] |= (1 << 1) | (1 << 2);
#endif

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
	/* LE Read Maximum Data Length. */
	rp->commands[35] |= (1 << 3);
    8770:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    8774:	e22f      	b.n	8bd6 <hci_cmd_handle+0x5ca>

static void read_local_features(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_rp_read_local_features *rp;

	rp = cmd_complete(evt, sizeof(*rp));
    8776:	2109      	movs	r1, #9
    8778:	a80d      	add	r0, sp, #52	; 0x34
    877a:	f7ff fe11 	bl	83a0 <cmd_complete>

	rp->status = 0x00;
    877e:	2100      	movs	r1, #0

static void read_local_features(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_rp_read_local_features *rp;

	rp = cmd_complete(evt, sizeof(*rp));
    8780:	4604      	mov	r4, r0

	rp->status = 0x00;
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    8782:	2208      	movs	r2, #8
{
	struct bt_hci_rp_read_local_features *rp;

	rp = cmd_complete(evt, sizeof(*rp));

	rp->status = 0x00;
    8784:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    8788:	f7f8 fcaf 	bl	10ea <memset>
	/* BR/EDR not supported and LE supported */
	rp->features[4] = (1 << 5) | (1 << 6);
    878c:	2360      	movs	r3, #96	; 0x60
    878e:	7163      	strb	r3, [r4, #5]
    8790:	e221      	b.n	8bd6 <hci_cmd_handle+0x5ca>

static void read_bd_addr(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_rp_read_bd_addr *rp;

	rp = cmd_complete(evt, sizeof(*rp));
    8792:	2107      	movs	r1, #7
    8794:	a80d      	add	r0, sp, #52	; 0x34
    8796:	f7ff fe03 	bl	83a0 <cmd_complete>

	rp->status = 0x00;
    879a:	4601      	mov	r1, r0
    879c:	2300      	movs	r3, #0
    879e:	f801 3b01 	strb.w	r3, [r1], #1
	ll_addr_get(0, &rp->bdaddr.val[0]);
    87a2:	4618      	mov	r0, r3
    87a4:	f008 fc04 	bl	10fb0 <ll_addr_get>
    87a8:	e215      	b.n	8bd6 <hci_cmd_handle+0x5ca>
#endif /* CONFIG_BLUETOOTH_CONN */

static int controller_cmd_handle(u16_t  ocf, struct net_buf *cmd,
				 struct net_buf **evt)
{
	switch (ocf) {
    87aa:	3a01      	subs	r2, #1
    87ac:	2a31      	cmp	r2, #49	; 0x31
    87ae:	f200 8214 	bhi.w	8bda <hci_cmd_handle+0x5ce>
    87b2:	e8df f012 	tbh	[pc, r2, lsl #1]
    87b6:	0032      	.short	0x0032
    87b8:	00450039 	.word	0x00450039
    87bc:	00570212 	.word	0x00570212
    87c0:	00d300bb 	.word	0x00d300bb
    87c4:	00e100db 	.word	0x00e100db
    87c8:	021200e7 	.word	0x021200e7
    87cc:	02120212 	.word	0x02120212
    87d0:	005c0212 	.word	0x005c0212
    87d4:	006f0067 	.word	0x006f0067
    87d8:	01070073 	.word	0x01070073
    87dc:	02120212 	.word	0x02120212
    87e0:	00770102 	.word	0x00770102
    87e4:	0212009f 	.word	0x0212009f
    87e8:	00fa00f5 	.word	0x00fa00f5
    87ec:	021200aa 	.word	0x021200aa
    87f0:	02120212 	.word	0x02120212
    87f4:	011c0113 	.word	0x011c0113
    87f8:	013a0127 	.word	0x013a0127
    87fc:	02120144 	.word	0x02120144
    8800:	01560212 	.word	0x01560212
    8804:	0167015d 	.word	0x0167015d
    8808:	017a016f 	.word	0x017a016f
    880c:	01980189 	.word	0x01980189
    8810:	014a01a4 	.word	0x014a01a4
    8814:	01d901ae 	.word	0x01d901ae
    8818:	01f1      	.short	0x01f1
static void le_set_event_mask(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_cp_set_event_mask *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;

	le_event_mask = sys_get_le64(cmd->events);
    881a:	68a0      	ldr	r0, [r4, #8]
    881c:	f7ff fef2 	bl	8604 <sys_get_le64>
    8820:	4b33      	ldr	r3, [pc, #204]	; (88f0 <hci_cmd_handle+0x2e4>)
    8822:	e9c3 0100 	strd	r0, r1, [r3]
    8826:	e16e      	b.n	8b06 <hci_cmd_handle+0x4fa>

static void le_read_buffer_size(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_rp_le_read_buffer_size *rp;

	rp = cmd_complete(evt, sizeof(*rp));
    8828:	2104      	movs	r1, #4
    882a:	a80d      	add	r0, sp, #52	; 0x34
    882c:	f7ff fdb8 	bl	83a0 <cmd_complete>

	rp->status = 0x00;
    8830:	2300      	movs	r3, #0
    8832:	7003      	strb	r3, [r0, #0]

	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    8834:	221b      	movs	r2, #27
    8836:	7083      	strb	r3, [r0, #2]
	rp->le_max_num = RADIO_PACKET_COUNT_TX_MAX;
    8838:	2302      	movs	r3, #2

	rp = cmd_complete(evt, sizeof(*rp));

	rp->status = 0x00;

	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    883a:	7042      	strb	r2, [r0, #1]
	rp->le_max_num = RADIO_PACKET_COUNT_TX_MAX;
    883c:	70c3      	strb	r3, [r0, #3]
    883e:	e1ca      	b.n	8bd6 <hci_cmd_handle+0x5ca>

static void le_read_local_features(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_rp_le_read_local_features *rp;

	rp = cmd_complete(evt, sizeof(*rp));
    8840:	2109      	movs	r1, #9
    8842:	a80d      	add	r0, sp, #52	; 0x34
    8844:	f7ff fdac 	bl	83a0 <cmd_complete>

	rp->status = 0x00;
    8848:	2500      	movs	r5, #0

static void le_read_local_features(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_rp_le_read_local_features *rp;

	rp = cmd_complete(evt, sizeof(*rp));
    884a:	4604      	mov	r4, r0

	rp->status = 0x00;

	memset(&rp->features[0], 0x00, sizeof(rp->features));
    884c:	2208      	movs	r2, #8
{
	struct bt_hci_rp_le_read_local_features *rp;

	rp = cmd_complete(evt, sizeof(*rp));

	rp->status = 0x00;
    884e:	f800 5b01 	strb.w	r5, [r0], #1

	memset(&rp->features[0], 0x00, sizeof(rp->features));
    8852:	4629      	mov	r1, r5
    8854:	f7f8 fc49 	bl	10ea <memset>
	rp->features[0] = RADIO_BLE_FEAT & 0xFF;
    8858:	237f      	movs	r3, #127	; 0x7f
    885a:	7063      	strb	r3, [r4, #1]
	rp->features[1] = (RADIO_BLE_FEAT >> 8)  & 0xFF;
    885c:	2341      	movs	r3, #65	; 0x41
    885e:	70a3      	strb	r3, [r4, #2]
	rp->features[2] = (RADIO_BLE_FEAT >> 16)  & 0xFF;
    8860:	70e5      	strb	r5, [r4, #3]
    8862:	e1b8      	b.n	8bd6 <hci_cmd_handle+0x5ca>
static void le_set_random_address(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_cp_le_set_random_address *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;

	ll_addr_set(1, &cmd->bdaddr.val[0]);
    8864:	68a1      	ldr	r1, [r4, #8]
    8866:	2001      	movs	r0, #1
    8868:	f008 fbbc 	bl	10fe4 <ll_addr_set>
    886c:	e14b      	b.n	8b06 <hci_cmd_handle+0x4fa>

static void le_read_wl_size(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_rp_le_read_wl_size *rp;

	rp = cmd_complete(evt, sizeof(*rp));
    886e:	2102      	movs	r1, #2
    8870:	a80d      	add	r0, sp, #52	; 0x34
    8872:	f7ff fd95 	bl	83a0 <cmd_complete>
	rp->status = 0x00;
    8876:	2300      	movs	r3, #0
    8878:	7003      	strb	r3, [r0, #0]

static void le_read_wl_size(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_rp_le_read_wl_size *rp;

	rp = cmd_complete(evt, sizeof(*rp));
    887a:	4604      	mov	r4, r0
	rp->status = 0x00;

	rp->wl_size = ll_wl_size_get();
    887c:	f008 fbce 	bl	1101c <ll_wl_size_get>
    8880:	7060      	strb	r0, [r4, #1]
    8882:	e1a8      	b.n	8bd6 <hci_cmd_handle+0x5ca>

static void le_clear_wl(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_evt_cc_status *ccst;

	ccst = cmd_complete(evt, sizeof(*ccst));
    8884:	2101      	movs	r1, #1
    8886:	a80d      	add	r0, sp, #52	; 0x34
    8888:	f7ff fd8a 	bl	83a0 <cmd_complete>
    888c:	4604      	mov	r4, r0
	ccst->status = ll_wl_clear();
    888e:	f008 fbc7 	bl	11020 <ll_wl_clear>
    8892:	e132      	b.n	8afa <hci_cmd_handle+0x4ee>
{
	struct bt_hci_cp_le_add_dev_to_wl *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;
	u32_t status;

	status = ll_wl_add(&cmd->addr);
    8894:	68a0      	ldr	r0, [r4, #8]
    8896:	f008 fbd9 	bl	1104c <ll_wl_add>
    889a:	e0ec      	b.n	8a76 <hci_cmd_handle+0x46a>
{
	struct bt_hci_cp_le_rem_dev_from_wl *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;
	u32_t status;

	status = ll_wl_remove(&cmd->addr);
    889c:	68a0      	ldr	r0, [r4, #8]
    889e:	f008 fc0d 	bl	110bc <ll_wl_remove>
    88a2:	e0e8      	b.n	8a76 <hci_cmd_handle+0x46a>
    88a4:	68a0      	ldr	r0, [r4, #8]
{
	struct bt_hci_cp_le_encrypt *cmd = (void *)buf->data;
	struct bt_hci_rp_le_encrypt *rp;
	u8_t enc_data[16];

	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
    88a6:	aa0e      	add	r2, sp, #56	; 0x38
    88a8:	2300      	movs	r3, #0
    88aa:	f100 0110 	add.w	r1, r0, #16
    88ae:	f001 f8d5 	bl	9a5c <ecb_encrypt>

	rp = cmd_complete(evt, sizeof(*rp));
    88b2:	2111      	movs	r1, #17
    88b4:	a80d      	add	r0, sp, #52	; 0x34
    88b6:	f7ff fd73 	bl	83a0 <cmd_complete>

	rp->status = 0x00;
    88ba:	2300      	movs	r3, #0
    88bc:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
    88c0:	2210      	movs	r2, #16
    88c2:	a90e      	add	r1, sp, #56	; 0x38
    88c4:	f7f8 fbe5 	bl	1092 <memcpy>
    88c8:	e185      	b.n	8bd6 <hci_cmd_handle+0x5ca>
    88ca:	bf00      	nop
    88cc:	00013df4 	.word	0x00013df4
    88d0:	00013df9 	.word	0x00013df9
    88d4:	00013db4 	.word	0x00013db4
    88d8:	000165b5 	.word	0x000165b5
    88dc:	00013dbb 	.word	0x00013dbb
    88e0:	00014fbe 	.word	0x00014fbe
    88e4:	20001010 	.word	0x20001010
    88e8:	00014fe4 	.word	0x00014fe4
    88ec:	20000538 	.word	0x20000538
    88f0:	20000540 	.word	0x20000540
static void le_rand(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_rp_le_rand *rp;
	u8_t count = sizeof(rp->rand);

	rp = cmd_complete(evt, sizeof(*rp));
    88f4:	2109      	movs	r1, #9
    88f6:	a80d      	add	r0, sp, #52	; 0x34
    88f8:	f7ff fd52 	bl	83a0 <cmd_complete>
	rp->status = 0x00;
    88fc:	2300      	movs	r3, #0
    88fe:	f800 3b01 	strb.w	r3, [r0], #1

	bt_rand(rp->rand, count);
    8902:	2108      	movs	r1, #8
    8904:	f002 fb98 	bl	b038 <bt_rand>
    8908:	e165      	b.n	8bd6 <hci_cmd_handle+0x5ca>

static void le_read_supp_states(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_rp_le_read_supp_states *rp;

	rp = cmd_complete(evt, sizeof(*rp));
    890a:	2109      	movs	r1, #9
    890c:	a80d      	add	r0, sp, #52	; 0x34
    890e:	f7ff fd47 	bl	83a0 <cmd_complete>
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    8912:	23ff      	movs	r3, #255	; 0xff
	rp->status = 0x00;
    8914:	2200      	movs	r2, #0
    8916:	7043      	strb	r3, [r0, #1]
	dst[1] = val >> 8;
    8918:	7083      	strb	r3, [r0, #2]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    891a:	70c3      	strb	r3, [r0, #3]
	dst[1] = val >> 8;
    891c:	7103      	strb	r3, [r0, #4]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    891e:	7143      	strb	r3, [r0, #5]
	dst[1] = val >> 8;
    8920:	2303      	movs	r3, #3
    8922:	7002      	strb	r2, [r0, #0]
    8924:	7183      	strb	r3, [r0, #6]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    8926:	71c2      	strb	r2, [r0, #7]
	dst[1] = val >> 8;
    8928:	7202      	strb	r2, [r0, #8]
    892a:	e154      	b.n	8bd6 <hci_cmd_handle+0x5ca>
    892c:	68a0      	ldr	r0, [r4, #8]
	u8_t status;

	min_interval = sys_le16_to_cpu(cmd->min_interval);

#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
	status = ll_adv_params_set(0, 0, min_interval, cmd->type,
    892e:	2100      	movs	r1, #0
    8930:	7903      	ldrb	r3, [r0, #4]
    8932:	8802      	ldrh	r2, [r0, #0]
    8934:	910a      	str	r1, [sp, #40]	; 0x28
    8936:	9109      	str	r1, [sp, #36]	; 0x24
    8938:	9108      	str	r1, [sp, #32]
    893a:	9107      	str	r1, [sp, #28]
    893c:	9106      	str	r1, [sp, #24]
    893e:	9105      	str	r1, [sp, #20]
    8940:	7b84      	ldrb	r4, [r0, #14]
    8942:	9404      	str	r4, [sp, #16]
    8944:	7b44      	ldrb	r4, [r0, #13]
    8946:	9403      	str	r4, [sp, #12]
				   cmd->own_addr_type, cmd->direct_addr.type,
				   &cmd->direct_addr.a.val[0], cmd->channel_map,
    8948:	1dc4      	adds	r4, r0, #7
	u8_t status;

	min_interval = sys_le16_to_cpu(cmd->min_interval);

#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
	status = ll_adv_params_set(0, 0, min_interval, cmd->type,
    894a:	9402      	str	r4, [sp, #8]
    894c:	7984      	ldrb	r4, [r0, #6]
    894e:	9401      	str	r4, [sp, #4]
    8950:	7940      	ldrb	r0, [r0, #5]
    8952:	9000      	str	r0, [sp, #0]
    8954:	4608      	mov	r0, r1
    8956:	f008 febb 	bl	116d0 <ll_adv_params_set>
    895a:	e08c      	b.n	8a76 <hci_cmd_handle+0x46a>

static void le_read_adv_chan_tx_power(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_rp_le_read_chan_tx_power *rp;

	rp = cmd_complete(evt, sizeof(*rp));
    895c:	2102      	movs	r1, #2
    895e:	a80d      	add	r0, sp, #52	; 0x34
    8960:	f7ff fd1e 	bl	83a0 <cmd_complete>

	rp->status = 0x00;
    8964:	2300      	movs	r3, #0
    8966:	7003      	strb	r3, [r0, #0]

	rp->tx_power_level = 0;
    8968:	7043      	strb	r3, [r0, #1]
    896a:	e134      	b.n	8bd6 <hci_cmd_handle+0x5ca>
    896c:	68a3      	ldr	r3, [r4, #8]
static void le_set_adv_data(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_cp_le_set_adv_data *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;

	ll_adv_data_set(cmd->len, &cmd->data[0]);
    896e:	1c59      	adds	r1, r3, #1
    8970:	7818      	ldrb	r0, [r3, #0]
    8972:	f008 ffb3 	bl	118dc <ll_adv_data_set>
    8976:	e0c6      	b.n	8b06 <hci_cmd_handle+0x4fa>
    8978:	68a3      	ldr	r3, [r4, #8]
static void le_set_scan_rsp_data(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_cp_le_set_scan_rsp_data *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;

	ll_scan_data_set(cmd->len, &cmd->data[0]);
    897a:	1c59      	adds	r1, r3, #1
    897c:	7818      	ldrb	r0, [r3, #0]
    897e:	f009 f801 	bl	11984 <ll_scan_data_set>
    8982:	e0c0      	b.n	8b06 <hci_cmd_handle+0x4fa>
{
	struct bt_hci_cp_le_set_adv_enable *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;
	u32_t status;

	status = ll_adv_enable(cmd->enable);
    8984:	68a3      	ldr	r3, [r4, #8]
    8986:	7818      	ldrb	r0, [r3, #0]
    8988:	f009 f83c 	bl	11a04 <ll_adv_enable>

	ccst = cmd_complete(evt, sizeof(*ccst));
    898c:	2101      	movs	r1, #1
{
	struct bt_hci_cp_le_set_adv_enable *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;
	u32_t status;

	status = ll_adv_enable(cmd->enable);
    898e:	4604      	mov	r4, r0

	ccst = cmd_complete(evt, sizeof(*ccst));
    8990:	a80d      	add	r0, sp, #52	; 0x34
    8992:	f7ff fd05 	bl	83a0 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    8996:	2c00      	cmp	r4, #0
    8998:	bf0c      	ite	eq
    899a:	2300      	moveq	r3, #0
    899c:	230c      	movne	r3, #12
    899e:	e121      	b.n	8be4 <hci_cmd_handle+0x5d8>
	struct bt_hci_cp_le_ltk_req_reply *cmd = (void *)buf->data;
	struct bt_hci_rp_le_ltk_req_reply *rp;
	u32_t status;
	u16_t handle;

	handle = sys_le16_to_cpu(cmd->handle);
    89a0:	68a2      	ldr	r2, [r4, #8]
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
    89a2:	2100      	movs	r1, #0
	struct bt_hci_cp_le_ltk_req_reply *cmd = (void *)buf->data;
	struct bt_hci_rp_le_ltk_req_reply *rp;
	u32_t status;
	u16_t handle;

	handle = sys_le16_to_cpu(cmd->handle);
    89a4:	f832 4b02 	ldrh.w	r4, [r2], #2
    89a8:	e003      	b.n	89b2 <hci_cmd_handle+0x3a6>
	struct bt_hci_cp_le_ltk_req_neg_reply *cmd = (void *)buf->data;
	struct bt_hci_rp_le_ltk_req_neg_reply *rp;
	u32_t status;
	u16_t handle;

	handle = sys_le16_to_cpu(cmd->handle);
    89aa:	68a3      	ldr	r3, [r4, #8]
    89ac:	881c      	ldrh	r4, [r3, #0]
	status = ll_start_enc_req_send(handle, BT_HCI_ERR_PIN_OR_KEY_MISSING,
    89ae:	2200      	movs	r2, #0
    89b0:	2106      	movs	r1, #6
    89b2:	b2a0      	uxth	r0, r4
    89b4:	f007 fcb4 	bl	10320 <ll_start_enc_req_send>
    89b8:	e02a      	b.n	8a10 <hci_cmd_handle+0x404>
{
	struct bt_hci_cp_le_read_remote_features *cmd = (void *)buf->data;
	u32_t status;
	u16_t handle;

	handle = sys_le16_to_cpu(cmd->handle);
    89ba:	68a3      	ldr	r3, [r4, #8]
	status = ll_feature_req_send(handle);
    89bc:	8818      	ldrh	r0, [r3, #0]
    89be:	f007 fcf1 	bl	103a4 <ll_feature_req_send>
    89c2:	e101      	b.n	8bc8 <hci_cmd_handle+0x5bc>
    89c4:	68a2      	ldr	r2, [r4, #8]
	supervision_timeout = sys_le16_to_cpu(cmd->supervision_timeout);

	/** @todo if peer supports LE Conn Param Req,
	* use Req cmd (1) instead of Initiate cmd (0).
	*/
	status = ll_conn_update(handle, 0, 0, conn_interval_max,
    89c6:	8911      	ldrh	r1, [r2, #8]
    89c8:	8893      	ldrh	r3, [r2, #4]
    89ca:	8810      	ldrh	r0, [r2, #0]
    89cc:	9101      	str	r1, [sp, #4]
    89ce:	88d2      	ldrh	r2, [r2, #6]
    89d0:	9200      	str	r2, [sp, #0]
    89d2:	2200      	movs	r2, #0
    89d4:	4611      	mov	r1, r2
    89d6:	f007 fc69 	bl	102ac <ll_conn_update>
    89da:	e0f5      	b.n	8bc8 <hci_cmd_handle+0x5bc>
    89dc:	68a2      	ldr	r2, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
	interval_max = sys_le16_to_cpu(cmd->interval_max);
	latency = sys_le16_to_cpu(cmd->latency);
	timeout = sys_le16_to_cpu(cmd->timeout);

	status = ll_conn_update(handle, 2, 0, interval_max, latency,
    89de:	8911      	ldrh	r1, [r2, #8]
	u16_t latency;
	u16_t timeout;
	u32_t status;
	u16_t handle;

	handle = sys_le16_to_cpu(cmd->handle);
    89e0:	8814      	ldrh	r4, [r2, #0]
	interval_max = sys_le16_to_cpu(cmd->interval_max);
	latency = sys_le16_to_cpu(cmd->latency);
	timeout = sys_le16_to_cpu(cmd->timeout);

	status = ll_conn_update(handle, 2, 0, interval_max, latency,
    89e2:	8893      	ldrh	r3, [r2, #4]
    89e4:	9101      	str	r1, [sp, #4]
    89e6:	88d2      	ldrh	r2, [r2, #6]
    89e8:	9200      	str	r2, [sp, #0]
    89ea:	2200      	movs	r2, #0
    89ec:	e005      	b.n	89fa <hci_cmd_handle+0x3ee>
    89ee:	68a3      	ldr	r3, [r4, #8]
	struct bt_hci_cp_le_conn_param_req_neg_reply *cmd = (void *)buf->data;
	struct bt_hci_rp_le_conn_param_req_neg_reply *rp;
	u32_t status;
	u16_t handle;

	handle = sys_le16_to_cpu(cmd->handle);
    89f0:	881c      	ldrh	r4, [r3, #0]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);
    89f2:	789a      	ldrb	r2, [r3, #2]
    89f4:	2300      	movs	r3, #0
    89f6:	9301      	str	r3, [sp, #4]
    89f8:	9300      	str	r3, [sp, #0]
    89fa:	2102      	movs	r1, #2
    89fc:	b2a0      	uxth	r0, r4
    89fe:	f007 fc55 	bl	102ac <ll_conn_update>
    8a02:	e005      	b.n	8a10 <hci_cmd_handle+0x404>
    8a04:	68a3      	ldr	r3, [r4, #8]
	struct bt_hci_rp_le_set_data_len *rp;
	u32_t status;
	u16_t tx_octets;
	u16_t handle;

	handle = sys_le16_to_cpu(cmd->handle);
    8a06:	881c      	ldrh	r4, [r3, #0]
	tx_octets = sys_le16_to_cpu(cmd->tx_octets);
	/** @todo add reject_ext_ind support in ctrl.c */
	status = ll_length_req_send(handle, tx_octets);
    8a08:	8859      	ldrh	r1, [r3, #2]
    8a0a:	b2a0      	uxth	r0, r4
    8a0c:	f007 fd06 	bl	1041c <ll_length_req_send>
    8a10:	4605      	mov	r5, r0

	rp = cmd_complete(evt, sizeof(*rp));
    8a12:	2103      	movs	r1, #3
    8a14:	a80d      	add	r0, sp, #52	; 0x34
    8a16:	f7ff fcc3 	bl	83a0 <cmd_complete>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    8a1a:	2d00      	cmp	r5, #0
    8a1c:	bf0c      	ite	eq
    8a1e:	2300      	moveq	r3, #0
    8a20:	230c      	movne	r3, #12
    8a22:	7003      	strb	r3, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    8a24:	f8a0 4001 	strh.w	r4, [r0, #1]
    8a28:	e0d5      	b.n	8bd6 <hci_cmd_handle+0x5ca>

static void le_read_default_data_len(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_rp_le_read_default_data_len *rp;

	rp = cmd_complete(evt, sizeof(*rp));
    8a2a:	2105      	movs	r1, #5
    8a2c:	a80d      	add	r0, sp, #52	; 0x34
    8a2e:	f7ff fcb7 	bl	83a0 <cmd_complete>
    8a32:	4604      	mov	r4, r0

	ll_length_default_get(&rp->max_tx_octets, &rp->max_tx_time);
    8a34:	1cc1      	adds	r1, r0, #3
    8a36:	3001      	adds	r0, #1
    8a38:	f007 fd10 	bl	1045c <ll_length_default_get>
    8a3c:	e032      	b.n	8aa4 <hci_cmd_handle+0x498>
    8a3e:	68a3      	ldr	r3, [r4, #8]
{
	struct bt_hci_cp_le_write_default_data_len *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;
	u32_t status;

	status = ll_length_default_set(cmd->max_tx_octets, cmd->max_tx_time);
    8a40:	8859      	ldrh	r1, [r3, #2]
    8a42:	8818      	ldrh	r0, [r3, #0]
    8a44:	f007 fd14 	bl	10470 <ll_length_default_set>
    8a48:	e09c      	b.n	8b84 <hci_cmd_handle+0x578>

static void le_read_max_data_len(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_rp_le_read_max_data_len *rp;

	rp = cmd_complete(evt, sizeof(*rp));
    8a4a:	2109      	movs	r1, #9
    8a4c:	a80d      	add	r0, sp, #52	; 0x34
    8a4e:	f7ff fca7 	bl	83a0 <cmd_complete>
    8a52:	4604      	mov	r4, r0

	ll_length_max_get(&rp->max_tx_octets, &rp->max_tx_time,
    8a54:	1dc3      	adds	r3, r0, #7
    8a56:	1d42      	adds	r2, r0, #5
    8a58:	1cc1      	adds	r1, r0, #3
    8a5a:	3001      	adds	r0, #1
    8a5c:	f007 fd12 	bl	10484 <ll_length_max_get>
    8a60:	e020      	b.n	8aa4 <hci_cmd_handle+0x498>
    8a62:	68a0      	ldr	r0, [r4, #8]
{
	struct bt_hci_cp_le_add_dev_to_rl *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;
	u32_t status;

	status = ll_rl_add(&cmd->peer_id_addr, cmd->peer_irk, cmd->local_irk);
    8a64:	f100 0217 	add.w	r2, r0, #23
    8a68:	1dc1      	adds	r1, r0, #7
    8a6a:	f008 fd0f 	bl	1148c <ll_rl_add>
    8a6e:	e002      	b.n	8a76 <hci_cmd_handle+0x46a>
{
	struct bt_hci_cp_le_rem_dev_from_rl *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;
	u32_t status;

	status = ll_rl_remove(&cmd->peer_id_addr);
    8a70:	68a0      	ldr	r0, [r4, #8]
    8a72:	f008 fd73 	bl	1155c <ll_rl_remove>
    8a76:	4604      	mov	r4, r0

	ccst = cmd_complete(evt, sizeof(*ccst));
    8a78:	2101      	movs	r1, #1
    8a7a:	a80d      	add	r0, sp, #52	; 0x34
    8a7c:	f7ff fc90 	bl	83a0 <cmd_complete>
	ccst->status = status;
    8a80:	7004      	strb	r4, [r0, #0]
    8a82:	e0a8      	b.n	8bd6 <hci_cmd_handle+0x5ca>
}

static void le_clear_rl(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_evt_cc_status *ccst;
	ccst = cmd_complete(evt, sizeof(*ccst));
    8a84:	2101      	movs	r1, #1
    8a86:	a80d      	add	r0, sp, #52	; 0x34
    8a88:	f7ff fc8a 	bl	83a0 <cmd_complete>
    8a8c:	4604      	mov	r4, r0

	ccst->status = ll_rl_clear();
    8a8e:	f008 fce7 	bl	11460 <ll_rl_clear>
    8a92:	e032      	b.n	8afa <hci_cmd_handle+0x4ee>

static void le_read_rl_size(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_rp_le_read_rl_size *rp;

	rp = cmd_complete(evt, sizeof(*rp));
    8a94:	2102      	movs	r1, #2
    8a96:	a80d      	add	r0, sp, #52	; 0x34
    8a98:	f7ff fc82 	bl	83a0 <cmd_complete>
    8a9c:	4604      	mov	r4, r0

	rp->rl_size = ll_rl_size_get();
    8a9e:	f008 fcdd 	bl	1145c <ll_rl_size_get>
    8aa2:	7060      	strb	r0, [r4, #1]
	rp->status = 0x00;
    8aa4:	2300      	movs	r3, #0
    8aa6:	7023      	strb	r3, [r4, #0]
    8aa8:	e095      	b.n	8bd6 <hci_cmd_handle+0x5ca>
	memcpy(dst, src, sizeof(*dst));
}

static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    8aaa:	2207      	movs	r2, #7
    8aac:	68a1      	ldr	r1, [r4, #8]
    8aae:	a80e      	add	r0, sp, #56	; 0x38
    8ab0:	f7f8 faef 	bl	1092 <memcpy>
	struct bt_hci_cp_le_read_peer_rpa *cmd = (void *)buf->data;
	struct bt_hci_rp_le_read_peer_rpa *rp;
	bt_addr_le_t peer_id_addr;

	bt_addr_le_copy(&peer_id_addr, &cmd->peer_id_addr);
	rp = cmd_complete(evt, sizeof(*rp));
    8ab4:	2107      	movs	r1, #7
    8ab6:	a80d      	add	r0, sp, #52	; 0x34
    8ab8:	f7ff fc72 	bl	83a0 <cmd_complete>
    8abc:	4604      	mov	r4, r0

	rp->status = ll_rl_prpa_get(&peer_id_addr, &rp->peer_rpa);
    8abe:	1c41      	adds	r1, r0, #1
    8ac0:	a80e      	add	r0, sp, #56	; 0x38
    8ac2:	f008 fd7d 	bl	115c0 <ll_rl_prpa_get>
    8ac6:	e018      	b.n	8afa <hci_cmd_handle+0x4ee>
    8ac8:	2207      	movs	r2, #7
    8aca:	68a1      	ldr	r1, [r4, #8]
    8acc:	a80e      	add	r0, sp, #56	; 0x38
    8ace:	f7f8 fae0 	bl	1092 <memcpy>
	struct bt_hci_cp_le_read_local_rpa *cmd = (void *)buf->data;
	struct bt_hci_rp_le_read_local_rpa *rp;
	bt_addr_le_t peer_id_addr;

	bt_addr_le_copy(&peer_id_addr, &cmd->peer_id_addr);
	rp = cmd_complete(evt, sizeof(*rp));
    8ad2:	2107      	movs	r1, #7
    8ad4:	a80d      	add	r0, sp, #52	; 0x34
    8ad6:	f7ff fc63 	bl	83a0 <cmd_complete>
    8ada:	4604      	mov	r4, r0

	rp->status = ll_rl_lrpa_get(&peer_id_addr, &rp->local_rpa);
    8adc:	1c41      	adds	r1, r0, #1
    8ade:	a80e      	add	r0, sp, #56	; 0x38
    8ae0:	f008 fd86 	bl	115f0 <ll_rl_lrpa_get>
    8ae4:	e009      	b.n	8afa <hci_cmd_handle+0x4ee>

static void le_set_addr_res_enable(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_cp_le_set_addr_res_enable *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;
	u8_t enable = cmd->enable;
    8ae6:	68a3      	ldr	r3, [r4, #8]

	ccst = cmd_complete(evt, sizeof(*ccst));
    8ae8:	2101      	movs	r1, #1
    8aea:	a80d      	add	r0, sp, #52	; 0x34

static void le_set_addr_res_enable(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_cp_le_set_addr_res_enable *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;
	u8_t enable = cmd->enable;
    8aec:	781d      	ldrb	r5, [r3, #0]

	ccst = cmd_complete(evt, sizeof(*ccst));
    8aee:	f7ff fc57 	bl	83a0 <cmd_complete>
    8af2:	4604      	mov	r4, r0
	ccst->status = ll_rl_enable(enable);
    8af4:	4628      	mov	r0, r5
    8af6:	f008 fd93 	bl	11620 <ll_rl_enable>
    8afa:	7020      	strb	r0, [r4, #0]
    8afc:	e06b      	b.n	8bd6 <hci_cmd_handle+0x5ca>

static void le_set_rpa_timeout(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_cp_le_set_rpa_timeout *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;
	u16_t timeout = sys_le16_to_cpu(cmd->rpa_timeout);
    8afe:	68a3      	ldr	r3, [r4, #8]

	ll_rl_timeout_set(timeout);
    8b00:	8818      	ldrh	r0, [r3, #0]
    8b02:	f008 fd9f 	bl	11644 <ll_rl_timeout_set>

	ccst = cmd_complete(evt, sizeof(*ccst));
    8b06:	2101      	movs	r1, #1
    8b08:	a80d      	add	r0, sp, #52	; 0x34
    8b0a:	f7ff fc49 	bl	83a0 <cmd_complete>
	ccst->status = 0x00;
    8b0e:	2300      	movs	r3, #0
    8b10:	e068      	b.n	8be4 <hci_cmd_handle+0x5d8>
	struct bt_hci_cp_le_read_phy *cmd = (void *) buf->data;
	struct bt_hci_rp_le_read_phy *rp;
	u16_t handle;
	u32_t status;

	handle = sys_le16_to_cpu(cmd->handle);
    8b12:	68a3      	ldr	r3, [r4, #8]

	rp = cmd_complete(evt, sizeof(*rp));
    8b14:	2105      	movs	r1, #5
    8b16:	a80d      	add	r0, sp, #52	; 0x34
	struct bt_hci_cp_le_read_phy *cmd = (void *) buf->data;
	struct bt_hci_rp_le_read_phy *rp;
	u16_t handle;
	u32_t status;

	handle = sys_le16_to_cpu(cmd->handle);
    8b18:	881d      	ldrh	r5, [r3, #0]

	rp = cmd_complete(evt, sizeof(*rp));
    8b1a:	f7ff fc41 	bl	83a0 <cmd_complete>
	struct bt_hci_cp_le_read_phy *cmd = (void *) buf->data;
	struct bt_hci_rp_le_read_phy *rp;
	u16_t handle;
	u32_t status;

	handle = sys_le16_to_cpu(cmd->handle);
    8b1e:	b2ae      	uxth	r6, r5

	rp = cmd_complete(evt, sizeof(*rp));
    8b20:	4604      	mov	r4, r0

	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
    8b22:	1d02      	adds	r2, r0, #4
    8b24:	1cc1      	adds	r1, r0, #3
    8b26:	4630      	mov	r0, r6
    8b28:	f007 fcb5 	bl	10496 <ll_phy_get>
 * @return least significant bit set, 0 if @a op is 0
 */

static ALWAYS_INLINE unsigned int find_lsb_set(u32_t op)
{
	return __builtin_ffs(op);
    8b2c:	78e2      	ldrb	r2, [r4, #3]

	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
	rp->handle = sys_cpu_to_le16(handle);
    8b2e:	f8a4 5001 	strh.w	r5, [r4, #1]

	rp = cmd_complete(evt, sizeof(*rp));

	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);

	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    8b32:	2800      	cmp	r0, #0
    8b34:	bf0c      	ite	eq
    8b36:	2300      	moveq	r3, #0
    8b38:	230c      	movne	r3, #12
    8b3a:	7023      	strb	r3, [r4, #0]
    8b3c:	2a00      	cmp	r2, #0
    8b3e:	fa92 f3a2 	rbit	r3, r2
    8b42:	fab3 f383 	clz	r3, r3
    8b46:	7922      	ldrb	r2, [r4, #4]
    8b48:	bf08      	it	eq
    8b4a:	f04f 33ff 	moveq.w	r3, #4294967295
    8b4e:	3301      	adds	r3, #1
	rp->handle = sys_cpu_to_le16(handle);
	rp->tx_phy = find_lsb_set(rp->tx_phy);
    8b50:	70e3      	strb	r3, [r4, #3]
    8b52:	2a00      	cmp	r2, #0
    8b54:	fa92 f3a2 	rbit	r3, r2
    8b58:	fab3 f383 	clz	r3, r3
    8b5c:	bf08      	it	eq
    8b5e:	f04f 33ff 	moveq.w	r3, #4294967295
    8b62:	3301      	adds	r3, #1
	rp->rx_phy = find_lsb_set(rp->rx_phy);
    8b64:	7123      	strb	r3, [r4, #4]
    8b66:	e036      	b.n	8bd6 <hci_cmd_handle+0x5ca>
    8b68:	68a3      	ldr	r3, [r4, #8]
{
	struct bt_hci_cp_le_set_default_phy *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;
	u32_t status;

	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    8b6a:	781a      	ldrb	r2, [r3, #0]
    8b6c:	07d6      	lsls	r6, r2, #31
		cmd->tx_phys = 0x07;
    8b6e:	bf44      	itt	mi
    8b70:	2107      	movmi	r1, #7
    8b72:	7059      	strbmi	r1, [r3, #1]
	}
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    8b74:	0795      	lsls	r5, r2, #30
		cmd->rx_phys = 0x07;
    8b76:	bf44      	itt	mi
    8b78:	2207      	movmi	r2, #7
    8b7a:	709a      	strbmi	r2, [r3, #2]
	}

	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
    8b7c:	7899      	ldrb	r1, [r3, #2]
    8b7e:	7858      	ldrb	r0, [r3, #1]
    8b80:	f007 fc9e 	bl	104c0 <ll_phy_default_set>
    8b84:	4604      	mov	r4, r0

	ccst = cmd_complete(evt, sizeof(*ccst));
    8b86:	2101      	movs	r1, #1
    8b88:	a80d      	add	r0, sp, #52	; 0x34
    8b8a:	f7ff fc09 	bl	83a0 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_INVALID_LL_PARAM;
    8b8e:	2c00      	cmp	r4, #0
    8b90:	bf0c      	ite	eq
    8b92:	2300      	moveq	r3, #0
    8b94:	231e      	movne	r3, #30
    8b96:	e025      	b.n	8be4 <hci_cmd_handle+0x5d8>
    8b98:	68a1      	ldr	r1, [r4, #8]
	u16_t phy_opts;

	handle = sys_le16_to_cpu(cmd->handle);
	phy_opts = sys_le16_to_cpu(cmd->phy_opts);

	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    8b9a:	788a      	ldrb	r2, [r1, #2]
	u32_t status;
	u16_t handle;
	u16_t phy_opts;

	handle = sys_le16_to_cpu(cmd->handle);
	phy_opts = sys_le16_to_cpu(cmd->phy_opts);
    8b9c:	f8b1 3005 	ldrh.w	r3, [r1, #5]
	struct bt_hci_cp_le_set_phy *cmd = (void *)buf->data;
	u32_t status;
	u16_t handle;
	u16_t phy_opts;

	handle = sys_le16_to_cpu(cmd->handle);
    8ba0:	8808      	ldrh	r0, [r1, #0]
	phy_opts = sys_le16_to_cpu(cmd->phy_opts);

	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    8ba2:	07d4      	lsls	r4, r2, #31
		cmd->tx_phys = 0x07;
    8ba4:	bf44      	itt	mi
    8ba6:	2407      	movmi	r4, #7
    8ba8:	70cc      	strbmi	r4, [r1, #3]
	}
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    8baa:	0792      	lsls	r2, r2, #30
		cmd->rx_phys = 0x07;
    8bac:	bf44      	itt	mi
    8bae:	2207      	movmi	r2, #7
    8bb0:	710a      	strbmi	r2, [r1, #4]
	}
	if (phy_opts & 0x03) {
    8bb2:	f013 0203 	ands.w	r2, r3, #3
		phy_opts -= 1;
    8bb6:	bf1c      	itt	ne
    8bb8:	f103 33ff 	addne.w	r3, r3, #4294967295
		phy_opts &= 1;
    8bbc:	f003 0201 	andne.w	r2, r3, #1
	} else {
		phy_opts = 0;
	}

	status = ll_phy_req_send(handle, cmd->tx_phys, phy_opts,
    8bc0:	790b      	ldrb	r3, [r1, #4]
    8bc2:	78c9      	ldrb	r1, [r1, #3]
    8bc4:	f007 fc86 	bl	104d4 <ll_phy_req_send>
				 cmd->rx_phys);

	*evt = cmd_status((!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED);
    8bc8:	2800      	cmp	r0, #0
    8bca:	bf14      	ite	ne
    8bcc:	200c      	movne	r0, #12
    8bce:	2000      	moveq	r0, #0
    8bd0:	f7ff fbcc 	bl	836c <cmd_status>
    8bd4:	900d      	str	r0, [sp, #52]	; 0x34
	if (err == -EINVAL) {
		ccst = cmd_complete(&evt, sizeof(*ccst));
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
	}

	return evt;
    8bd6:	980d      	ldr	r0, [sp, #52]	; 0x34
    8bd8:	e006      	b.n	8be8 <hci_cmd_handle+0x5dc>
		err = -EINVAL;
		break;
	}

	if (err == -EINVAL) {
		ccst = cmd_complete(&evt, sizeof(*ccst));
    8bda:	2101      	movs	r1, #1
    8bdc:	a80d      	add	r0, sp, #52	; 0x34
    8bde:	f7ff fbdf 	bl	83a0 <cmd_complete>
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
    8be2:	2301      	movs	r3, #1
    8be4:	7003      	strb	r3, [r0, #0]
    8be6:	e7f6      	b.n	8bd6 <hci_cmd_handle+0x5ca>
	}

	return evt;
}
    8be8:	b012      	add	sp, #72	; 0x48
    8bea:	bd70      	pop	{r4, r5, r6, pc}

00008bec <hci_acl_handle>:

int hci_acl_handle(struct net_buf *buf)
{
    8bec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct pdu_data *pdu_data;
	u16_t handle;
	u8_t flags;
	u16_t len;

	if (buf->len < sizeof(*acl)) {
    8bf0:	8983      	ldrh	r3, [r0, #12]
    8bf2:	2b03      	cmp	r3, #3

	return evt;
}

int hci_acl_handle(struct net_buf *buf)
{
    8bf4:	4607      	mov	r7, r0
	struct pdu_data *pdu_data;
	u16_t handle;
	u8_t flags;
	u16_t len;

	if (buf->len < sizeof(*acl)) {
    8bf6:	d808      	bhi.n	8c0a <hci_acl_handle+0x1e>
		BT_ERR("No HCI ACL header");
    8bf8:	4b2d      	ldr	r3, [pc, #180]	; (8cb0 <hci_acl_handle+0xc4>)
    8bfa:	9301      	str	r3, [sp, #4]
    8bfc:	4b2d      	ldr	r3, [pc, #180]	; (8cb4 <hci_acl_handle+0xc8>)
    8bfe:	9300      	str	r3, [sp, #0]
    8c00:	4a2d      	ldr	r2, [pc, #180]	; (8cb8 <hci_acl_handle+0xcc>)
    8c02:	4b2e      	ldr	r3, [pc, #184]	; (8cbc <hci_acl_handle+0xd0>)
    8c04:	492e      	ldr	r1, [pc, #184]	; (8cc0 <hci_acl_handle+0xd4>)
    8c06:	482f      	ldr	r0, [pc, #188]	; (8cc4 <hci_acl_handle+0xd8>)
    8c08:	e012      	b.n	8c30 <hci_acl_handle+0x44>
		return -EINVAL;
	}

	acl = (void *)buf->data;
    8c0a:	f850 3f08 	ldr.w	r3, [r0, #8]!
	len = sys_le16_to_cpu(acl->len);
	handle = sys_le16_to_cpu(acl->handle);
	net_buf_pull(buf, sizeof(*acl));
    8c0e:	2104      	movs	r1, #4
		BT_ERR("No HCI ACL header");
		return -EINVAL;
	}

	acl = (void *)buf->data;
	len = sys_le16_to_cpu(acl->len);
    8c10:	f8b3 8002 	ldrh.w	r8, [r3, #2]
	handle = sys_le16_to_cpu(acl->handle);
    8c14:	881c      	ldrh	r4, [r3, #0]
	net_buf_pull(buf, sizeof(*acl));
    8c16:	f009 f818 	bl	11c4a <net_buf_simple_pull>

	if (buf->len < len) {
    8c1a:	89bb      	ldrh	r3, [r7, #12]
    8c1c:	4543      	cmp	r3, r8
    8c1e:	d20a      	bcs.n	8c36 <hci_acl_handle+0x4a>
		BT_ERR("Invalid HCI ACL packet length");
    8c20:	4b23      	ldr	r3, [pc, #140]	; (8cb0 <hci_acl_handle+0xc4>)
    8c22:	9301      	str	r3, [sp, #4]
    8c24:	4b23      	ldr	r3, [pc, #140]	; (8cb4 <hci_acl_handle+0xc8>)
    8c26:	9300      	str	r3, [sp, #0]
    8c28:	4a23      	ldr	r2, [pc, #140]	; (8cb8 <hci_acl_handle+0xcc>)
    8c2a:	4b24      	ldr	r3, [pc, #144]	; (8cbc <hci_acl_handle+0xd0>)
    8c2c:	4924      	ldr	r1, [pc, #144]	; (8cc0 <hci_acl_handle+0xd4>)
    8c2e:	4826      	ldr	r0, [pc, #152]	; (8cc8 <hci_acl_handle+0xdc>)
    8c30:	f7f8 fc26 	bl	1480 <printk>
    8c34:	e036      	b.n	8ca4 <hci_acl_handle+0xb8>

	/* assigning flags first because handle will be overwritten */
	flags = bt_acl_flags(handle);
	handle = bt_acl_handle(handle);

	radio_pdu_node_tx = radio_tx_mem_acquire();
    8c36:	f007 fd5d 	bl	106f4 <radio_tx_mem_acquire>
		BT_ERR("Invalid HCI ACL packet length");
		return -EINVAL;
	}

	/* assigning flags first because handle will be overwritten */
	flags = bt_acl_flags(handle);
    8c3a:	0b25      	lsrs	r5, r4, #12
	handle = bt_acl_handle(handle);
    8c3c:	f3c4 060b 	ubfx	r6, r4, #0, #12

	radio_pdu_node_tx = radio_tx_mem_acquire();
	if (!radio_pdu_node_tx) {
    8c40:	4604      	mov	r4, r0
    8c42:	b960      	cbnz	r0, 8c5e <hci_acl_handle+0x72>
		BT_ERR("Tx Buffer Overflow");
    8c44:	4b1a      	ldr	r3, [pc, #104]	; (8cb0 <hci_acl_handle+0xc4>)
    8c46:	9301      	str	r3, [sp, #4]
    8c48:	4b1a      	ldr	r3, [pc, #104]	; (8cb4 <hci_acl_handle+0xc8>)
    8c4a:	9300      	str	r3, [sp, #0]
    8c4c:	4a1a      	ldr	r2, [pc, #104]	; (8cb8 <hci_acl_handle+0xcc>)
    8c4e:	4b1b      	ldr	r3, [pc, #108]	; (8cbc <hci_acl_handle+0xd0>)
    8c50:	491b      	ldr	r1, [pc, #108]	; (8cc0 <hci_acl_handle+0xd4>)
    8c52:	481e      	ldr	r0, [pc, #120]	; (8ccc <hci_acl_handle+0xe0>)
    8c54:	f7f8 fc14 	bl	1480 <printk>
		return -ENOBUFS;
    8c58:	f06f 0036 	mvn.w	r0, #54	; 0x36
    8c5c:	e024      	b.n	8ca8 <hci_acl_handle+0xbc>
    8c5e:	7903      	ldrb	r3, [r0, #4]
	}

	pdu_data = (struct pdu_data *)radio_pdu_node_tx->pdu_data;
	if (flags == BT_ACL_START_NO_FLUSH || flags == BT_ACL_START) {
    8c60:	b10d      	cbz	r5, 8c66 <hci_acl_handle+0x7a>
    8c62:	2d02      	cmp	r5, #2
    8c64:	d101      	bne.n	8c6a <hci_acl_handle+0x7e>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
    8c66:	2202      	movs	r2, #2
    8c68:	e000      	b.n	8c6c <hci_acl_handle+0x80>
	} else {
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    8c6a:	2201      	movs	r2, #1
    8c6c:	f362 0301 	bfi	r3, r2, #0, #2
    8c70:	7123      	strb	r3, [r4, #4]
	}
	pdu_data->len = len;
    8c72:	f884 8005 	strb.w	r8, [r4, #5]
	memcpy(&pdu_data->payload.lldata[0], buf->data, len);
    8c76:	68b9      	ldr	r1, [r7, #8]
    8c78:	4642      	mov	r2, r8
    8c7a:	1de0      	adds	r0, r4, #7
    8c7c:	f7f8 fa09 	bl	1092 <memcpy>

	if (radio_tx_mem_enqueue(handle, radio_pdu_node_tx)) {
    8c80:	4621      	mov	r1, r4
    8c82:	4630      	mov	r0, r6
    8c84:	f007 fd42 	bl	1070c <radio_tx_mem_enqueue>
    8c88:	b170      	cbz	r0, 8ca8 <hci_acl_handle+0xbc>
		BT_ERR("Invalid Tx Enqueue");
    8c8a:	4b09      	ldr	r3, [pc, #36]	; (8cb0 <hci_acl_handle+0xc4>)
    8c8c:	9301      	str	r3, [sp, #4]
    8c8e:	4b09      	ldr	r3, [pc, #36]	; (8cb4 <hci_acl_handle+0xc8>)
    8c90:	9300      	str	r3, [sp, #0]
    8c92:	4a09      	ldr	r2, [pc, #36]	; (8cb8 <hci_acl_handle+0xcc>)
    8c94:	4b09      	ldr	r3, [pc, #36]	; (8cbc <hci_acl_handle+0xd0>)
    8c96:	490a      	ldr	r1, [pc, #40]	; (8cc0 <hci_acl_handle+0xd4>)
    8c98:	480d      	ldr	r0, [pc, #52]	; (8cd0 <hci_acl_handle+0xe4>)
    8c9a:	f7f8 fbf1 	bl	1480 <printk>
		radio_tx_mem_release(radio_pdu_node_tx);
    8c9e:	4620      	mov	r0, r4
    8ca0:	f007 fd2e 	bl	10700 <radio_tx_mem_release>
		return -EINVAL;
    8ca4:	f06f 0015 	mvn.w	r0, #21
	}

	return 0;
}
    8ca8:	b002      	add	sp, #8
    8caa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8cae:	bf00      	nop
    8cb0:	00013df4 	.word	0x00013df4
    8cb4:	00013df9 	.word	0x00013df9
    8cb8:	00013db4 	.word	0x00013db4
    8cbc:	000165ed 	.word	0x000165ed
    8cc0:	00013dbb 	.word	0x00013dbb
    8cc4:	00015012 	.word	0x00015012
    8cc8:	00015034 	.word	0x00015034
    8ccc:	00015062 	.word	0x00015062
    8cd0:	00015085 	.word	0x00015085

00008cd4 <hci_acl_encode>:
	}
}

#if defined(CONFIG_BLUETOOTH_CONN)
void hci_acl_encode(struct radio_pdu_node_rx *node_rx, struct net_buf *buf)
{
    8cd4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	u8_t *data;

	pdu_data = (struct pdu_data *)node_rx->pdu_data;
	handle = node_rx->hdr.handle;

	switch (pdu_data->ll_id) {
    8cd6:	7a03      	ldrb	r3, [r0, #8]
	u16_t handle_flags;
	u16_t handle;
	u8_t *data;

	pdu_data = (struct pdu_data *)node_rx->pdu_data;
	handle = node_rx->hdr.handle;
    8cd8:	88c5      	ldrh	r5, [r0, #6]

	switch (pdu_data->ll_id) {
    8cda:	f003 0303 	and.w	r3, r3, #3
    8cde:	3b01      	subs	r3, #1
    8ce0:	2b01      	cmp	r3, #1
	}
}

#if defined(CONFIG_BLUETOOTH_CONN)
void hci_acl_encode(struct radio_pdu_node_rx *node_rx, struct net_buf *buf)
{
    8ce2:	4604      	mov	r4, r0
	u8_t *data;

	pdu_data = (struct pdu_data *)node_rx->pdu_data;
	handle = node_rx->hdr.handle;

	switch (pdu_data->ll_id) {
    8ce4:	d81d      	bhi.n	8d22 <hci_acl_encode+0x4e>
	case PDU_DATA_LLID_DATA_CONTINUE:
	case PDU_DATA_LLID_DATA_START:
		acl = (void *)net_buf_add(buf, sizeof(*acl));
    8ce6:	f101 0608 	add.w	r6, r1, #8
    8cea:	4630      	mov	r0, r6
    8cec:	2104      	movs	r1, #4
    8cee:	f008 ff8d 	bl	11c0c <net_buf_simple_add>
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
    8cf2:	7a23      	ldrb	r3, [r4, #8]
    8cf4:	f003 0303 	and.w	r3, r3, #3
    8cf8:	2b02      	cmp	r3, #2
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
    8cfa:	bf0c      	ite	eq
    8cfc:	f445 5500 	orreq.w	r5, r5, #8192	; 0x2000
		} else {
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
    8d00:	f445 5580 	orrne.w	r5, r5, #4096	; 0x1000
		}
		acl->handle = sys_cpu_to_le16(handle_flags);
    8d04:	8005      	strh	r5, [r0, #0]
		acl->len = sys_cpu_to_le16(pdu_data->len);
    8d06:	7a63      	ldrb	r3, [r4, #9]
    8d08:	8043      	strh	r3, [r0, #2]
		data = (void *)net_buf_add(buf, pdu_data->len);
    8d0a:	7a61      	ldrb	r1, [r4, #9]
    8d0c:	4630      	mov	r0, r6
    8d0e:	f008 ff7d 	bl	11c0c <net_buf_simple_add>
		memcpy(data, &pdu_data->payload.lldata[0], pdu_data->len);
    8d12:	7a62      	ldrb	r2, [r4, #9]
    8d14:	f104 010b 	add.w	r1, r4, #11
	default:
		LL_ASSERT(0);
		break;
	}

}
    8d18:	b002      	add	sp, #8
    8d1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
		}
		acl->handle = sys_cpu_to_le16(handle_flags);
		acl->len = sys_cpu_to_le16(pdu_data->len);
		data = (void *)net_buf_add(buf, pdu_data->len);
		memcpy(data, &pdu_data->payload.lldata[0], pdu_data->len);
    8d1e:	f7f8 b9b8 	b.w	1092 <memcpy>
		}
#endif
		break;

	default:
		LL_ASSERT(0);
    8d22:	4b08      	ldr	r3, [pc, #32]	; (8d44 <hci_acl_encode+0x70>)
    8d24:	9301      	str	r3, [sp, #4]
    8d26:	4b08      	ldr	r3, [pc, #32]	; (8d48 <hci_acl_encode+0x74>)
    8d28:	9300      	str	r3, [sp, #0]
    8d2a:	4a08      	ldr	r2, [pc, #32]	; (8d4c <hci_acl_encode+0x78>)
    8d2c:	4b08      	ldr	r3, [pc, #32]	; (8d50 <hci_acl_encode+0x7c>)
    8d2e:	4909      	ldr	r1, [pc, #36]	; (8d54 <hci_acl_encode+0x80>)
    8d30:	4809      	ldr	r0, [pc, #36]	; (8d58 <hci_acl_encode+0x84>)
    8d32:	f7f8 fba5 	bl	1480 <printk>
    8d36:	4040      	eors	r0, r0
    8d38:	f380 8811 	msr	BASEPRI, r0
    8d3c:	f04f 0004 	mov.w	r0, #4
    8d40:	df02      	svc	2
    8d42:	bf00      	nop
    8d44:	00013df4 	.word	0x00013df4
    8d48:	00013df9 	.word	0x00013df9
    8d4c:	00013db4 	.word	0x00013db4
    8d50:	00016597 	.word	0x00016597
    8d54:	00013dbb 	.word	0x00013dbb
    8d58:	00014409 	.word	0x00014409

00008d5c <hci_evt_encode>:

}
#endif

void hci_evt_encode(struct radio_pdu_node_rx *node_rx, struct net_buf *buf)
{
    8d5c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct pdu_data *pdu_data;

	pdu_data = (struct pdu_data *)node_rx->pdu_data;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    8d5e:	7903      	ldrb	r3, [r0, #4]
			   struct pdu_data *pdu_data, struct net_buf *buf)
{
	u8_t *b = (u8_t *)node_rx;
	u16_t handle;

	handle = node_rx->hdr.handle;
    8d60:	88c6      	ldrh	r6, [r0, #6]
{
	struct pdu_data *pdu_data;

	pdu_data = (struct pdu_data *)node_rx->pdu_data;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    8d62:	2b01      	cmp	r3, #1

}
#endif

void hci_evt_encode(struct radio_pdu_node_rx *node_rx, struct net_buf *buf)
{
    8d64:	b091      	sub	sp, #68	; 0x44
    8d66:	4604      	mov	r4, r0
    8d68:	460d      	mov	r5, r1
	struct pdu_data *pdu_data;

	pdu_data = (struct pdu_data *)node_rx->pdu_data;
    8d6a:	f100 0708 	add.w	r7, r0, #8

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    8d6e:	f000 81d1 	beq.w	9114 <hci_evt_encode+0x3b8>
	u8_t *b = (u8_t *)node_rx;
	u16_t handle;

	handle = node_rx->hdr.handle;

	switch (node_rx->hdr.type) {
    8d72:	3b02      	subs	r3, #2
    8d74:	2b0a      	cmp	r3, #10
    8d76:	f200 81c7 	bhi.w	9108 <hci_evt_encode+0x3ac>
    8d7a:	e8df f013 	tbh	[pc, r3, lsl #1]
    8d7e:	000b      	.short	0x000b
    8d80:	005b0059 	.word	0x005b0059
    8d84:	00a50061 	.word	0x00a50061
    8d88:	00f900db 	.word	0x00f900db
    8d8c:	0136011e 	.word	0x0136011e
    8d90:	01710142 	.word	0x01710142
}

static void le_advertising_report(struct pdu_data *pdu_data, u8_t *b,
				  struct net_buf *buf)
{
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    8d94:	4ba8      	ldr	r3, [pc, #672]	; (9038 <hci_evt_encode+0x2dc>)
    8d96:	889a      	ldrh	r2, [r3, #4]
    8d98:	6818      	ldr	r0, [r3, #0]
    8d9a:	799b      	ldrb	r3, [r3, #6]
    8d9c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
	struct bt_hci_evt_le_advertising_info *adv_info;
	u8_t data_len;
	u8_t *rssi;
	u8_t info_len;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    8da0:	4ba6      	ldr	r3, [pc, #664]	; (903c <hci_evt_encode+0x2e0>)
}

static void le_advertising_report(struct pdu_data *pdu_data, u8_t *b,
				  struct net_buf *buf)
{
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    8da2:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
	struct bt_hci_evt_le_advertising_info *adv_info;
	u8_t data_len;
	u8_t *rssi;
	u8_t info_len;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    8da6:	e9d3 2300 	ldrd	r2, r3, [r3]
    8daa:	2200      	movs	r2, #0
    8dac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    8db0:	4313      	orrs	r3, r2
}

static void le_advertising_report(struct pdu_data *pdu_data, u8_t *b,
				  struct net_buf *buf)
{
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    8db2:	9009      	str	r0, [sp, #36]	; 0x24
	struct bt_hci_evt_le_advertising_info *adv_info;
	u8_t data_len;
	u8_t *rssi;
	u8_t info_len;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    8db4:	f000 8277 	beq.w	92a6 <hci_evt_encode+0x54a>
	    !(le_event_mask & BT_EVT_MASK_LE_ADVERTISING_REPORT)) {
    8db8:	4ba1      	ldr	r3, [pc, #644]	; (9040 <hci_evt_encode+0x2e4>)
	struct bt_hci_evt_le_advertising_info *adv_info;
	u8_t data_len;
	u8_t *rssi;
	u8_t info_len;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    8dba:	e9d3 2300 	ldrd	r2, r3, [r3]
    8dbe:	2300      	movs	r3, #0
    8dc0:	f002 0202 	and.w	r2, r2, #2
    8dc4:	4313      	orrs	r3, r2
    8dc6:	f000 826e 	beq.w	92a6 <hci_evt_encode+0x54a>
		}
	}
fill_report:
#endif

	if (adv->type != PDU_ADV_TYPE_DIRECT_IND) {
    8dca:	7a23      	ldrb	r3, [r4, #8]
    8dcc:	f003 030f 	and.w	r3, r3, #15
    8dd0:	2b01      	cmp	r3, #1
		data_len = (adv->len - BDADDR_SIZE);
    8dd2:	bf1d      	ittte	ne
    8dd4:	7a66      	ldrbne	r6, [r4, #9]
    8dd6:	3e06      	subne	r6, #6
    8dd8:	b2f6      	uxtbne	r6, r6
	} else {
		data_len = 0;
    8dda:	2600      	moveq	r6, #0
	}

	info_len = sizeof(struct bt_hci_evt_le_advertising_info) + data_len +
		   sizeof(*rssi);
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    8ddc:	f106 020b 	add.w	r2, r6, #11
    8de0:	b2d2      	uxtb	r2, r2
    8de2:	2102      	movs	r1, #2
    8de4:	4628      	mov	r0, r5
    8de6:	f7ff fafd 	bl	83e4 <meta_evt>
		       sizeof(*sep) + info_len);

	sep->num_reports = 1;
    8dea:	2301      	movs	r3, #1
    8dec:	7003      	strb	r3, [r0, #0]
	adv_info = (void *)(((u8_t *)sep) + sizeof(*sep));

	adv_info->evt_type = c_adv_type[adv->type];
    8dee:	7a23      	ldrb	r3, [r4, #8]
    8df0:	aa10      	add	r2, sp, #64	; 0x40
    8df2:	f003 030f 	and.w	r3, r3, #15
    8df6:	4413      	add	r3, r2
		data_len = 0;
	}

	info_len = sizeof(struct bt_hci_evt_le_advertising_info) + data_len +
		   sizeof(*rssi);
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    8df8:	4605      	mov	r5, r0
		       sizeof(*sep) + info_len);

	sep->num_reports = 1;
	adv_info = (void *)(((u8_t *)sep) + sizeof(*sep));

	adv_info->evt_type = c_adv_type[adv->type];
    8dfa:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
    8dfe:	7043      	strb	r3, [r0, #1]
	adv_info->addr.type = adv->tx_addr;
    8e00:	7a23      	ldrb	r3, [r4, #8]
    8e02:	f3c3 1380 	ubfx	r3, r3, #6, #1
    8e06:	7083      	strb	r3, [r0, #2]
	memcpy(&adv_info->addr.a.val[0], &adv->payload.adv_ind.addr[0],
    8e08:	f104 010a 	add.w	r1, r4, #10
    8e0c:	2206      	movs	r2, #6
    8e0e:	3003      	adds	r0, #3
    8e10:	f7f8 f93f 	bl	1092 <memcpy>
	       sizeof(bt_addr_t));

	adv_info->length = data_len;
	memcpy(&adv_info->data[0], &adv->payload.adv_ind.data[0], data_len);
    8e14:	350a      	adds	r5, #10
	adv_info->evt_type = c_adv_type[adv->type];
	adv_info->addr.type = adv->tx_addr;
	memcpy(&adv_info->addr.a.val[0], &adv->payload.adv_ind.addr[0],
	       sizeof(bt_addr_t));

	adv_info->length = data_len;
    8e16:	f805 6c01 	strb.w	r6, [r5, #-1]
	memcpy(&adv_info->data[0], &adv->payload.adv_ind.data[0], data_len);
    8e1a:	4632      	mov	r2, r6
    8e1c:	f107 0108 	add.w	r1, r7, #8
    8e20:	4628      	mov	r0, r5
    8e22:	f7f8 f936 	bl	1092 <memcpy>
	/* RSSI */
	rssi = &adv_info->data[0] + data_len;
	*rssi = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    8e26:	7a63      	ldrb	r3, [r4, #9]
    8e28:	441c      	add	r4, r3
    8e2a:	7aa3      	ldrb	r3, [r4, #10]
    8e2c:	55ab      	strb	r3, [r5, r6]
    8e2e:	e23a      	b.n	92a6 <hci_evt_encode+0x54a>
}

static void le_adv_ext_1M_report(struct pdu_data *pdu_data, u8_t *b,
				 struct net_buf *buf)
{
	le_adv_ext_report(pdu_data, b, buf, BIT(0));
    8e30:	2201      	movs	r2, #1
    8e32:	e000      	b.n	8e36 <hci_evt_encode+0xda>
}

static void le_adv_ext_coded_report(struct pdu_data *pdu_data, u8_t *b,
				    struct net_buf *buf)
{
	le_adv_ext_report(pdu_data, b, buf, BIT(2));
    8e34:	2204      	movs	r2, #4
    8e36:	4621      	mov	r1, r4
    8e38:	4638      	mov	r0, r7
    8e3a:	f7ff fb67 	bl	850c <le_adv_ext_report.isra.51>
    8e3e:	e232      	b.n	92a6 <hci_evt_encode+0x54a>
	struct pdu_adv *adv = (struct pdu_adv *)pdu_data;
	struct bt_hci_evt_le_scan_req_received *sep;

	/* TODO: fill handle when Adv Ext. feature is implemented. */

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    8e40:	4b7e      	ldr	r3, [pc, #504]	; (903c <hci_evt_encode+0x2e0>)
    8e42:	e9d3 2300 	ldrd	r2, r3, [r3]
    8e46:	2200      	movs	r2, #0
    8e48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    8e4c:	4313      	orrs	r3, r2
    8e4e:	f100 060a 	add.w	r6, r0, #10
    8e52:	d007      	beq.n	8e64 <hci_evt_encode+0x108>
	    !(le_event_mask & BT_EVT_MASK_LE_SCAN_REQ_RECEIVED)) {
    8e54:	4b7a      	ldr	r3, [pc, #488]	; (9040 <hci_evt_encode+0x2e4>)
	struct pdu_adv *adv = (struct pdu_adv *)pdu_data;
	struct bt_hci_evt_le_scan_req_received *sep;

	/* TODO: fill handle when Adv Ext. feature is implemented. */

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    8e56:	e9d3 2300 	ldrd	r2, r3, [r3]
    8e5a:	2300      	movs	r3, #0
    8e5c:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
    8e60:	4313      	orrs	r3, r2
    8e62:	d122      	bne.n	8eaa <hci_evt_encode+0x14e>
		bt_addr_le_t addr;
		u8_t handle;
		u8_t rssi;

		handle = 0;
		addr.type = adv->tx_addr;
    8e64:	7a23      	ldrb	r3, [r4, #8]
    8e66:	ad10      	add	r5, sp, #64	; 0x40
    8e68:	f3c3 1380 	ubfx	r3, r3, #6, #1
		memcpy(&addr.a.val[0], &adv->payload.scan_req.scan_addr[0],
    8e6c:	2206      	movs	r2, #6
    8e6e:	4631      	mov	r1, r6
    8e70:	f10d 001d 	add.w	r0, sp, #29
		bt_addr_le_t addr;
		u8_t handle;
		u8_t rssi;

		handle = 0;
		addr.type = adv->tx_addr;
    8e74:	f805 3d24 	strb.w	r3, [r5, #-36]!
		memcpy(&addr.a.val[0], &adv->payload.scan_req.scan_addr[0],
    8e78:	f7f8 f90b 	bl	1092 <memcpy>
		       sizeof(bt_addr_t));
		rssi = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    8e7c:	7a63      	ldrb	r3, [r4, #9]
    8e7e:	441c      	add	r4, r3
			 offsetof(struct pdu_adv, payload) + adv->len];

		bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    8e80:	4628      	mov	r0, r5

		handle = 0;
		addr.type = adv->tx_addr;
		memcpy(&addr.a.val[0], &adv->payload.scan_req.scan_addr[0],
		       sizeof(bt_addr_t));
		rssi = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    8e82:	7aa6      	ldrb	r6, [r4, #10]
			 offsetof(struct pdu_adv, payload) + adv->len];

		bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    8e84:	ac09      	add	r4, sp, #36	; 0x24
    8e86:	4621      	mov	r1, r4
    8e88:	f7ff fb10 	bl	84ac <bt_addr_le_to_str.constprop.55>

		BT_WARN("handle: %d, addr: %s, rssi: -%d dB.",
    8e8c:	4b6d      	ldr	r3, [pc, #436]	; (9044 <hci_evt_encode+0x2e8>)
    8e8e:	9304      	str	r3, [sp, #16]
    8e90:	2300      	movs	r3, #0
    8e92:	9301      	str	r3, [sp, #4]
    8e94:	4b6c      	ldr	r3, [pc, #432]	; (9048 <hci_evt_encode+0x2ec>)
    8e96:	9300      	str	r3, [sp, #0]
    8e98:	9603      	str	r6, [sp, #12]
    8e9a:	9402      	str	r4, [sp, #8]
    8e9c:	4b6b      	ldr	r3, [pc, #428]	; (904c <hci_evt_encode+0x2f0>)
    8e9e:	4a6c      	ldr	r2, [pc, #432]	; (9050 <hci_evt_encode+0x2f4>)
    8ea0:	496c      	ldr	r1, [pc, #432]	; (9054 <hci_evt_encode+0x2f8>)
    8ea2:	486d      	ldr	r0, [pc, #436]	; (9058 <hci_evt_encode+0x2fc>)
    8ea4:	f7f8 faec 	bl	1480 <printk>
    8ea8:	e1fd      	b.n	92a6 <hci_evt_encode+0x54a>
			handle, addr_str, rssi);

		return;
	}

	sep = meta_evt(buf, BT_HCI_EVT_LE_SCAN_REQ_RECEIVED, sizeof(*sep));
    8eaa:	2208      	movs	r2, #8
    8eac:	2113      	movs	r1, #19
    8eae:	4628      	mov	r0, r5
    8eb0:	f7ff fa98 	bl	83e4 <meta_evt>
	sep->handle = 0;
    8eb4:	2300      	movs	r3, #0
    8eb6:	7003      	strb	r3, [r0, #0]
	sep->addr.type = adv->tx_addr;
    8eb8:	7a23      	ldrb	r3, [r4, #8]
    8eba:	f3c3 1380 	ubfx	r3, r3, #6, #1
    8ebe:	7043      	strb	r3, [r0, #1]
	memcpy(&sep->addr.a.val[0], &adv->payload.scan_req.scan_addr[0],
    8ec0:	2206      	movs	r2, #6
    8ec2:	4631      	mov	r1, r6
    8ec4:	3002      	adds	r0, #2
    8ec6:	e15a      	b.n	917e <hci_evt_encode+0x422>
			     struct net_buf *buf)
{
	struct bt_hci_evt_le_conn_complete *sep;
	struct radio_le_conn_cmplt *radio_cc;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    8ec8:	4b5c      	ldr	r3, [pc, #368]	; (903c <hci_evt_encode+0x2e0>)
    8eca:	e9d3 2300 	ldrd	r2, r3, [r3]
    8ece:	2200      	movs	r2, #0
    8ed0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    8ed4:	4313      	orrs	r3, r2
    8ed6:	f000 81e6 	beq.w	92a6 <hci_evt_encode+0x54a>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE)) {
    8eda:	4b59      	ldr	r3, [pc, #356]	; (9040 <hci_evt_encode+0x2e4>)
			     struct net_buf *buf)
{
	struct bt_hci_evt_le_conn_complete *sep;
	struct radio_le_conn_cmplt *radio_cc;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    8edc:	e9d3 2300 	ldrd	r2, r3, [r3]
    8ee0:	2300      	movs	r3, #0
    8ee2:	f002 0201 	and.w	r2, r2, #1
    8ee6:	4313      	orrs	r3, r2
    8ee8:	f000 81dd 	beq.w	92a6 <hci_evt_encode+0x54a>
		return;
	}

	radio_cc = (struct radio_le_conn_cmplt *) (pdu_data->payload.lldata);

	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*sep));
    8eec:	2212      	movs	r2, #18
    8eee:	2101      	movs	r1, #1
    8ef0:	4628      	mov	r0, r5
    8ef2:	f7ff fa77 	bl	83e4 <meta_evt>

	sep->status = radio_cc->status;
    8ef6:	7ae3      	ldrb	r3, [r4, #11]
    8ef8:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    8efa:	f8a0 6001 	strh.w	r6, [r0, #1]
	sep->role = radio_cc->role;
    8efe:	7b23      	ldrb	r3, [r4, #12]
    8f00:	70c3      	strb	r3, [r0, #3]
	sep->peer_addr.type = radio_cc->peer_addr_type;
    8f02:	7b63      	ldrb	r3, [r4, #13]
    8f04:	7103      	strb	r3, [r0, #4]
		return;
	}

	radio_cc = (struct radio_le_conn_cmplt *) (pdu_data->payload.lldata);

	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*sep));
    8f06:	4605      	mov	r5, r0

	sep->status = radio_cc->status;
	sep->handle = sys_cpu_to_le16(handle);
	sep->role = radio_cc->role;
	sep->peer_addr.type = radio_cc->peer_addr_type;
	memcpy(&sep->peer_addr.a.val[0], &radio_cc->peer_addr[0], BDADDR_SIZE);
    8f08:	2206      	movs	r2, #6
    8f0a:	f104 010e 	add.w	r1, r4, #14
    8f0e:	3005      	adds	r0, #5
    8f10:	f7f8 f8bf 	bl	1092 <memcpy>
	sep->interval = sys_cpu_to_le16(radio_cc->interval);
    8f14:	8ba3      	ldrh	r3, [r4, #28]
    8f16:	f8a5 300b 	strh.w	r3, [r5, #11]
	sep->latency = sys_cpu_to_le16(radio_cc->latency);
    8f1a:	8be3      	ldrh	r3, [r4, #30]
    8f1c:	f8a5 300d 	strh.w	r3, [r5, #13]
	sep->supv_timeout = sys_cpu_to_le16(radio_cc->timeout);
    8f20:	8c23      	ldrh	r3, [r4, #32]
    8f22:	f8a5 300f 	strh.w	r3, [r5, #15]
	sep->clock_accuracy = radio_cc->mca;

	conn_count++;
    8f26:	4a4d      	ldr	r2, [pc, #308]	; (905c <hci_evt_encode+0x300>)
	sep->peer_addr.type = radio_cc->peer_addr_type;
	memcpy(&sep->peer_addr.a.val[0], &radio_cc->peer_addr[0], BDADDR_SIZE);
	sep->interval = sys_cpu_to_le16(radio_cc->interval);
	sep->latency = sys_cpu_to_le16(radio_cc->latency);
	sep->supv_timeout = sys_cpu_to_le16(radio_cc->timeout);
	sep->clock_accuracy = radio_cc->mca;
    8f28:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    8f2c:	746b      	strb	r3, [r5, #17]

	conn_count++;
    8f2e:	6813      	ldr	r3, [r2, #0]
    8f30:	3301      	adds	r3, #1
    8f32:	e01b      	b.n	8f6c <hci_evt_encode+0x210>
static void disconn_complete(struct pdu_data *pdu_data, u16_t handle,
			     struct net_buf *buf)
{
	struct bt_hci_evt_disconn_complete *ep;

	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
    8f34:	4b41      	ldr	r3, [pc, #260]	; (903c <hci_evt_encode+0x2e0>)
    8f36:	e9d3 2300 	ldrd	r2, r3, [r3]
    8f3a:	2300      	movs	r3, #0
    8f3c:	f002 0210 	and.w	r2, r2, #16
    8f40:	4313      	orrs	r3, r2
    8f42:	f000 81b0 	beq.w	92a6 <hci_evt_encode+0x54a>
		return;
	}

	evt_create(buf, BT_HCI_EVT_DISCONN_COMPLETE, sizeof(*ep));
    8f46:	2204      	movs	r2, #4
    8f48:	2105      	movs	r1, #5
    8f4a:	4628      	mov	r0, r5
    8f4c:	f7ff fa04 	bl	8358 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    8f50:	2104      	movs	r1, #4
    8f52:	f105 0008 	add.w	r0, r5, #8
    8f56:	f008 fe59 	bl	11c0c <net_buf_simple_add>

	ep->status = 0x00;
    8f5a:	2300      	movs	r3, #0
    8f5c:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    8f5e:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->reason = *((u8_t *)pdu_data);

	conn_count--;
    8f62:	4a3e      	ldr	r2, [pc, #248]	; (905c <hci_evt_encode+0x300>)
	evt_create(buf, BT_HCI_EVT_DISCONN_COMPLETE, sizeof(*ep));
	ep = net_buf_add(buf, sizeof(*ep));

	ep->status = 0x00;
	ep->handle = sys_cpu_to_le16(handle);
	ep->reason = *((u8_t *)pdu_data);
    8f64:	7a23      	ldrb	r3, [r4, #8]
    8f66:	70c3      	strb	r3, [r0, #3]

	conn_count--;
    8f68:	6813      	ldr	r3, [r2, #0]
    8f6a:	3b01      	subs	r3, #1
    8f6c:	6013      	str	r3, [r2, #0]
    8f6e:	e19a      	b.n	92a6 <hci_evt_encode+0x54a>
				    struct net_buf *buf)
{
	struct bt_hci_evt_le_conn_update_complete *sep;
	struct radio_le_conn_update_cmplt *radio_cu;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    8f70:	4b32      	ldr	r3, [pc, #200]	; (903c <hci_evt_encode+0x2e0>)
    8f72:	e9d3 2300 	ldrd	r2, r3, [r3]
    8f76:	2200      	movs	r2, #0
    8f78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    8f7c:	4313      	orrs	r3, r2
    8f7e:	f000 8192 	beq.w	92a6 <hci_evt_encode+0x54a>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
    8f82:	4b2f      	ldr	r3, [pc, #188]	; (9040 <hci_evt_encode+0x2e4>)
				    struct net_buf *buf)
{
	struct bt_hci_evt_le_conn_update_complete *sep;
	struct radio_le_conn_update_cmplt *radio_cu;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    8f84:	e9d3 2300 	ldrd	r2, r3, [r3]
    8f88:	2300      	movs	r3, #0
    8f8a:	f002 0204 	and.w	r2, r2, #4
    8f8e:	4313      	orrs	r3, r2
    8f90:	f000 8189 	beq.w	92a6 <hci_evt_encode+0x54a>
	}

	radio_cu = (struct radio_le_conn_update_cmplt *)
			(pdu_data->payload.lldata);

	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_UPDATE_COMPLETE, sizeof(*sep));
    8f94:	2209      	movs	r2, #9
    8f96:	2103      	movs	r1, #3
    8f98:	4628      	mov	r0, r5
    8f9a:	f7ff fa23 	bl	83e4 <meta_evt>

	sep->status = radio_cu->status;
    8f9e:	7ae3      	ldrb	r3, [r4, #11]
    8fa0:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    8fa2:	f8a0 6001 	strh.w	r6, [r0, #1]
	sep->interval = sys_cpu_to_le16(radio_cu->interval);
    8fa6:	89a3      	ldrh	r3, [r4, #12]
    8fa8:	f8a0 3003 	strh.w	r3, [r0, #3]
	sep->latency = sys_cpu_to_le16(radio_cu->latency);
    8fac:	89e3      	ldrh	r3, [r4, #14]
    8fae:	f8a0 3005 	strh.w	r3, [r0, #5]
	sep->supv_timeout = sys_cpu_to_le16(radio_cu->timeout);
    8fb2:	8a23      	ldrh	r3, [r4, #16]
    8fb4:	f8a0 3007 	strh.w	r3, [r0, #7]
    8fb8:	e175      	b.n	92a6 <hci_evt_encode+0x54a>
static void enc_refresh_complete(struct pdu_data *pdu_data, u16_t handle,
				 struct net_buf *buf)
{
	struct bt_hci_evt_encrypt_key_refresh_complete *ep;

	if (!(event_mask & BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE)) {
    8fba:	4b20      	ldr	r3, [pc, #128]	; (903c <hci_evt_encode+0x2e0>)
    8fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
    8fc0:	2200      	movs	r2, #0
    8fc2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    8fc6:	4313      	orrs	r3, r2
    8fc8:	f000 816d 	beq.w	92a6 <hci_evt_encode+0x54a>
		return;
	}

	evt_create(buf, BT_HCI_EVT_ENCRYPT_KEY_REFRESH_COMPLETE, sizeof(*ep));
    8fcc:	2203      	movs	r2, #3
    8fce:	2130      	movs	r1, #48	; 0x30
    8fd0:	4628      	mov	r0, r5
    8fd2:	f7ff f9c1 	bl	8358 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    8fd6:	2103      	movs	r1, #3
    8fd8:	f105 0008 	add.w	r0, r5, #8
    8fdc:	f008 fe16 	bl	11c0c <net_buf_simple_add>

	ep->status = 0x00;
    8fe0:	2300      	movs	r3, #0
    8fe2:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    8fe4:	f8a0 6001 	strh.w	r6, [r0, #1]
    8fe8:	e15d      	b.n	92a6 <hci_evt_encode+0x54a>
static void auth_payload_timeout_exp(struct pdu_data *pdu_data, u16_t handle,
				     struct net_buf *buf)
{
	struct bt_hci_evt_auth_payload_timeout_exp *ep;

	evt_create(buf, BT_HCI_EVT_AUTH_PAYLOAD_TIMEOUT_EXP, sizeof(*ep));
    8fea:	2202      	movs	r2, #2
    8fec:	2157      	movs	r1, #87	; 0x57
    8fee:	4628      	mov	r0, r5
    8ff0:	f7ff f9b2 	bl	8358 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    8ff4:	2102      	movs	r1, #2
    8ff6:	f105 0008 	add.w	r0, r5, #8
    8ffa:	f008 fe07 	bl	11c0c <net_buf_simple_add>

	ep->handle = sys_cpu_to_le16(handle);
    8ffe:	8006      	strh	r6, [r0, #0]
    9000:	e151      	b.n	92a6 <hci_evt_encode+0x54a>
			     struct net_buf *buf)
{
	struct bt_hci_evt_le_chan_sel_algo *sep;
	struct radio_le_chan_sel_algo *radio_le_chan_sel_algo;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9002:	4b0e      	ldr	r3, [pc, #56]	; (903c <hci_evt_encode+0x2e0>)
    9004:	e9d3 2300 	ldrd	r2, r3, [r3]
    9008:	2200      	movs	r2, #0
    900a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    900e:	4313      	orrs	r3, r2
    9010:	f000 8149 	beq.w	92a6 <hci_evt_encode+0x54a>
	    !(le_event_mask & BT_EVT_MASK_LE_CHAN_SEL_ALGO)) {
    9014:	4b0a      	ldr	r3, [pc, #40]	; (9040 <hci_evt_encode+0x2e4>)
			     struct net_buf *buf)
{
	struct bt_hci_evt_le_chan_sel_algo *sep;
	struct radio_le_chan_sel_algo *radio_le_chan_sel_algo;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9016:	e9d3 2300 	ldrd	r2, r3, [r3]
    901a:	2300      	movs	r3, #0
    901c:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
    9020:	4313      	orrs	r3, r2
    9022:	f000 8140 	beq.w	92a6 <hci_evt_encode+0x54a>
	}

	radio_le_chan_sel_algo = (struct radio_le_chan_sel_algo *)
					pdu_data->payload.lldata;

	sep = meta_evt(buf, BT_HCI_EVT_LE_CHAN_SEL_ALGO, sizeof(*sep));
    9026:	2203      	movs	r2, #3
    9028:	2114      	movs	r1, #20
    902a:	4628      	mov	r0, r5
    902c:	f7ff f9da 	bl	83e4 <meta_evt>

	sep->handle = sys_cpu_to_le16(handle);
    9030:	8006      	strh	r6, [r0, #0]
	sep->chan_sel_algo = radio_le_chan_sel_algo->chan_sel_algo;
    9032:	7ae3      	ldrb	r3, [r4, #11]
    9034:	7083      	strb	r3, [r0, #2]
    9036:	e136      	b.n	92a6 <hci_evt_encode+0x54a>
    9038:	00013a1f 	.word	0x00013a1f
    903c:	20000538 	.word	0x20000538
    9040:	20000540 	.word	0x20000540
    9044:	00013df4 	.word	0x00013df4
    9048:	00013e3f 	.word	0x00013e3f
    904c:	000165d8 	.word	0x000165d8
    9050:	00013e01 	.word	0x00013e01
    9054:	00013dbb 	.word	0x00013dbb
    9058:	000150a8 	.word	0x000150a8
    905c:	20001014 	.word	0x20001014
	struct radio_le_phy_upd_cmplt *radio_le_phy_upd_cmplt;

	radio_le_phy_upd_cmplt = (struct radio_le_phy_upd_cmplt *)
				 pdu_data->payload.lldata;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9060:	4b92      	ldr	r3, [pc, #584]	; (92ac <hci_evt_encode+0x550>)
    9062:	e9d3 2300 	ldrd	r2, r3, [r3]
    9066:	2200      	movs	r2, #0
    9068:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    906c:	4313      	orrs	r3, r2
    906e:	d007      	beq.n	9080 <hci_evt_encode+0x324>
	    !(le_event_mask & BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE)) {
    9070:	4b8f      	ldr	r3, [pc, #572]	; (92b0 <hci_evt_encode+0x554>)
	struct radio_le_phy_upd_cmplt *radio_le_phy_upd_cmplt;

	radio_le_phy_upd_cmplt = (struct radio_le_phy_upd_cmplt *)
				 pdu_data->payload.lldata;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9072:	e9d3 2300 	ldrd	r2, r3, [r3]
    9076:	2300      	movs	r3, #0
    9078:	f402 6200 	and.w	r2, r2, #2048	; 0x800
    907c:	4313      	orrs	r3, r2
    907e:	d123      	bne.n	90c8 <hci_evt_encode+0x36c>
    9080:	7b22      	ldrb	r2, [r4, #12]
    9082:	7b61      	ldrb	r1, [r4, #13]
	    !(le_event_mask & BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE)) {
		BT_WARN("handle: 0x%04x, status: %x, tx: %x, rx: %x.", handle,
    9084:	488b      	ldr	r0, [pc, #556]	; (92b4 <hci_evt_encode+0x558>)
    9086:	2a00      	cmp	r2, #0
    9088:	fa92 f3a2 	rbit	r3, r2
    908c:	fab3 f383 	clz	r3, r3
    9090:	fa91 f2a1 	rbit	r2, r1
    9094:	bf08      	it	eq
    9096:	f04f 33ff 	moveq.w	r3, #4294967295
    909a:	2900      	cmp	r1, #0
    909c:	fab2 f282 	clz	r2, r2
    90a0:	bf08      	it	eq
    90a2:	f04f 32ff 	moveq.w	r2, #4294967295
    90a6:	3301      	adds	r3, #1
    90a8:	3201      	adds	r2, #1
    90aa:	4983      	ldr	r1, [pc, #524]	; (92b8 <hci_evt_encode+0x55c>)
    90ac:	9105      	str	r1, [sp, #20]
    90ae:	9204      	str	r2, [sp, #16]
    90b0:	9303      	str	r3, [sp, #12]
    90b2:	7ae3      	ldrb	r3, [r4, #11]
    90b4:	9302      	str	r3, [sp, #8]
    90b6:	4b81      	ldr	r3, [pc, #516]	; (92bc <hci_evt_encode+0x560>)
    90b8:	9300      	str	r3, [sp, #0]
    90ba:	9601      	str	r6, [sp, #4]
    90bc:	4b80      	ldr	r3, [pc, #512]	; (92c0 <hci_evt_encode+0x564>)
    90be:	4a81      	ldr	r2, [pc, #516]	; (92c4 <hci_evt_encode+0x568>)
    90c0:	4981      	ldr	r1, [pc, #516]	; (92c8 <hci_evt_encode+0x56c>)
    90c2:	f7f8 f9dd 	bl	1480 <printk>
    90c6:	e0ee      	b.n	92a6 <hci_evt_encode+0x54a>
			find_lsb_set(radio_le_phy_upd_cmplt->tx),
			find_lsb_set(radio_le_phy_upd_cmplt->rx));
		return;
	}

	sep = meta_evt(buf, BT_HCI_EVT_LE_PHY_UPDATE_COMPLETE, sizeof(*sep));
    90c8:	2205      	movs	r2, #5
    90ca:	210c      	movs	r1, #12
    90cc:	4628      	mov	r0, r5
    90ce:	f7ff f989 	bl	83e4 <meta_evt>

	sep->status = radio_le_phy_upd_cmplt->status;
    90d2:	7ae3      	ldrb	r3, [r4, #11]
    90d4:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    90d6:	f8a0 6001 	strh.w	r6, [r0, #1]
    90da:	7b22      	ldrb	r2, [r4, #12]
    90dc:	2a00      	cmp	r2, #0
    90de:	fa92 f3a2 	rbit	r3, r2
    90e2:	fab3 f383 	clz	r3, r3
    90e6:	bf08      	it	eq
    90e8:	f04f 33ff 	moveq.w	r3, #4294967295
    90ec:	3301      	adds	r3, #1
	sep->tx_phy = find_lsb_set(radio_le_phy_upd_cmplt->tx);
    90ee:	70c3      	strb	r3, [r0, #3]
    90f0:	7b62      	ldrb	r2, [r4, #13]
    90f2:	fa92 f3a2 	rbit	r3, r2
    90f6:	2a00      	cmp	r2, #0
    90f8:	fab3 f383 	clz	r3, r3
    90fc:	bf08      	it	eq
    90fe:	f04f 33ff 	moveq.w	r3, #4294967295
    9102:	3301      	adds	r3, #1
	sep->rx_phy = find_lsb_set(radio_le_phy_upd_cmplt->rx);
    9104:	7103      	strb	r3, [r0, #4]
    9106:	e0ce      	b.n	92a6 <hci_evt_encode+0x54a>
			pdu_data->payload.profile.max);
		return;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PROFILE_ISR */

	default:
		LL_ASSERT(0);
    9108:	4b6b      	ldr	r3, [pc, #428]	; (92b8 <hci_evt_encode+0x55c>)
    910a:	9301      	str	r3, [sp, #4]
    910c:	4b6f      	ldr	r3, [pc, #444]	; (92cc <hci_evt_encode+0x570>)
    910e:	9300      	str	r3, [sp, #0]
    9110:	4b6f      	ldr	r3, [pc, #444]	; (92d0 <hci_evt_encode+0x574>)
    9112:	e0bd      	b.n	9290 <hci_evt_encode+0x534>
static void encode_data_ctrl(struct radio_pdu_node_rx *node_rx,
			     struct pdu_data *pdu_data, struct net_buf *buf)
{
	u16_t handle = node_rx->hdr.handle;

	switch (pdu_data->payload.llctrl.opcode) {
    9114:	7ac3      	ldrb	r3, [r0, #11]
    9116:	3b03      	subs	r3, #3
    9118:	2b12      	cmp	r3, #18
    911a:	f200 80b4 	bhi.w	9286 <hci_evt_encode+0x52a>
    911e:	e8df f003 	tbb	[pc, r3]
    9122:	b20a      	.short	0xb20a
    9124:	b29c31b2 	.word	0xb29c31b2
    9128:	3ab2b235 	.word	0x3ab2b235
    912c:	b25fb259 	.word	0xb25fb259
    9130:	7db2b2b2 	.word	0x7db2b2b2
    9134:	7d          	.byte	0x7d
    9135:	00          	.byte	0x00
static void le_ltk_request(struct pdu_data *pdu_data, u16_t handle,
			   struct net_buf *buf)
{
	struct bt_hci_evt_le_ltk_request *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9136:	4b5d      	ldr	r3, [pc, #372]	; (92ac <hci_evt_encode+0x550>)
    9138:	e9d3 2300 	ldrd	r2, r3, [r3]
    913c:	2200      	movs	r2, #0
    913e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    9142:	4313      	orrs	r3, r2
    9144:	f000 80af 	beq.w	92a6 <hci_evt_encode+0x54a>
	    !(le_event_mask & BT_EVT_MASK_LE_LTK_REQUEST)) {
    9148:	4b59      	ldr	r3, [pc, #356]	; (92b0 <hci_evt_encode+0x554>)
static void le_ltk_request(struct pdu_data *pdu_data, u16_t handle,
			   struct net_buf *buf)
{
	struct bt_hci_evt_le_ltk_request *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    914a:	e9d3 2300 	ldrd	r2, r3, [r3]
    914e:	2300      	movs	r3, #0
    9150:	f002 0210 	and.w	r2, r2, #16
    9154:	4313      	orrs	r3, r2
    9156:	f000 80a6 	beq.w	92a6 <hci_evt_encode+0x54a>
	    !(le_event_mask & BT_EVT_MASK_LE_LTK_REQUEST)) {
		return;
	}

	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
    915a:	220c      	movs	r2, #12
    915c:	2105      	movs	r1, #5
    915e:	4628      	mov	r0, r5
    9160:	f7ff f940 	bl	83e4 <meta_evt>

	sep->handle = sys_cpu_to_le16(handle);
	memcpy(&sep->rand, pdu_data->payload.llctrl.ctrldata.enc_req.rand,
    9164:	2208      	movs	r2, #8
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
	    !(le_event_mask & BT_EVT_MASK_LE_LTK_REQUEST)) {
		return;
	}

	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
    9166:	4605      	mov	r5, r0

	sep->handle = sys_cpu_to_le16(handle);
	memcpy(&sep->rand, pdu_data->payload.llctrl.ctrldata.enc_req.rand,
    9168:	f104 010c 	add.w	r1, r4, #12
		return;
	}

	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));

	sep->handle = sys_cpu_to_le16(handle);
    916c:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(&sep->rand, pdu_data->payload.llctrl.ctrldata.enc_req.rand,
    9170:	f7f7 ff8f 	bl	1092 <memcpy>
	       sizeof(u64_t));
	memcpy(&sep->ediv, pdu_data->payload.llctrl.ctrldata.enc_req.ediv,
    9174:	2202      	movs	r2, #2
    9176:	f104 0114 	add.w	r1, r4, #20
    917a:	f105 000a 	add.w	r0, r5, #10
    917e:	f7f7 ff88 	bl	1092 <memcpy>
    9182:	e090      	b.n	92a6 <hci_evt_encode+0x54a>
	case PDU_DATA_LLCTRL_TYPE_ENC_REQ:
		le_ltk_request(pdu_data, handle, buf);
		break;

	case PDU_DATA_LLCTRL_TYPE_START_ENC_RSP:
		encrypt_change(0x00, handle, buf);
    9184:	460a      	mov	r2, r1
    9186:	2000      	movs	r0, #0
    9188:	4631      	mov	r1, r6
    918a:	e026      	b.n	91da <hci_evt_encode+0x47e>
		break;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_ENC */

	case PDU_DATA_LLCTRL_TYPE_FEATURE_RSP:
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
    918c:	460b      	mov	r3, r1
    918e:	4632      	mov	r2, r6
    9190:	4639      	mov	r1, r7
    9192:	2000      	movs	r0, #0
    9194:	e068      	b.n	9268 <hci_evt_encode+0x50c>
static void remote_version_info(struct pdu_data *pdu_data, u16_t handle,
				struct net_buf *buf)
{
	struct bt_hci_evt_remote_version_info *ep;

	if (!(event_mask & BT_EVT_MASK_REMOTE_VERSION_INFO)) {
    9196:	4b45      	ldr	r3, [pc, #276]	; (92ac <hci_evt_encode+0x550>)
    9198:	e9d3 2300 	ldrd	r2, r3, [r3]
    919c:	2300      	movs	r3, #0
    919e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
    91a2:	4313      	orrs	r3, r2
    91a4:	d07f      	beq.n	92a6 <hci_evt_encode+0x54a>
		return;
	}

	evt_create(buf, BT_HCI_EVT_REMOTE_VERSION_INFO, sizeof(*ep));
    91a6:	2207      	movs	r2, #7
    91a8:	210c      	movs	r1, #12
    91aa:	4628      	mov	r0, r5
    91ac:	f7ff f8d4 	bl	8358 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    91b0:	2107      	movs	r1, #7
    91b2:	f105 0008 	add.w	r0, r5, #8
    91b6:	f008 fd29 	bl	11c0c <net_buf_simple_add>

	ep->status = 0x00;
    91ba:	2300      	movs	r3, #0
    91bc:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    91be:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->version =
	      pdu_data->payload.llctrl.ctrldata.version_ind.version_number;
    91c2:	7b23      	ldrb	r3, [r4, #12]
	evt_create(buf, BT_HCI_EVT_REMOTE_VERSION_INFO, sizeof(*ep));
	ep = net_buf_add(buf, sizeof(*ep));

	ep->status = 0x00;
	ep->handle = sys_cpu_to_le16(handle);
	ep->version =
    91c4:	70c3      	strb	r3, [r0, #3]
	      pdu_data->payload.llctrl.ctrldata.version_ind.version_number;
	ep->manufacturer =
		pdu_data->payload.llctrl.ctrldata.version_ind.company_id;
    91c6:	f8b4 300d 	ldrh.w	r3, [r4, #13]

	ep->status = 0x00;
	ep->handle = sys_cpu_to_le16(handle);
	ep->version =
	      pdu_data->payload.llctrl.ctrldata.version_ind.version_number;
	ep->manufacturer =
    91ca:	8083      	strh	r3, [r0, #4]
		pdu_data->payload.llctrl.ctrldata.version_ind.company_id;
	ep->subversion =
	      pdu_data->payload.llctrl.ctrldata.version_ind.sub_version_number;
    91cc:	f8b4 300f 	ldrh.w	r3, [r4, #15]
	ep->handle = sys_cpu_to_le16(handle);
	ep->version =
	      pdu_data->payload.llctrl.ctrldata.version_ind.version_number;
	ep->manufacturer =
		pdu_data->payload.llctrl.ctrldata.version_ind.company_id;
	ep->subversion =
    91d0:	7183      	strb	r3, [r0, #6]
    91d2:	e068      	b.n	92a6 <hci_evt_encode+0x54a>
		remote_version_info(pdu_data, handle, buf);
		break;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_ENC)
	case PDU_DATA_LLCTRL_TYPE_REJECT_IND:
		encrypt_change(pdu_data->payload.llctrl.ctrldata.reject_ind.
    91d4:	7b00      	ldrb	r0, [r0, #12]
    91d6:	460a      	mov	r2, r1
    91d8:	4631      	mov	r1, r6
    91da:	f7ff f919 	bl	8410 <encrypt_change>
    91de:	e062      	b.n	92a6 <hci_evt_encode+0x54a>
static void le_conn_param_req(struct pdu_data *pdu_data, u16_t handle,
			      struct net_buf *buf)
{
	struct bt_hci_evt_le_conn_param_req *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    91e0:	4b32      	ldr	r3, [pc, #200]	; (92ac <hci_evt_encode+0x550>)
    91e2:	e9d3 2300 	ldrd	r2, r3, [r3]
    91e6:	2200      	movs	r2, #0
    91e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    91ec:	4313      	orrs	r3, r2
    91ee:	d05a      	beq.n	92a6 <hci_evt_encode+0x54a>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
    91f0:	4b2f      	ldr	r3, [pc, #188]	; (92b0 <hci_evt_encode+0x554>)
static void le_conn_param_req(struct pdu_data *pdu_data, u16_t handle,
			      struct net_buf *buf)
{
	struct bt_hci_evt_le_conn_param_req *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    91f2:	e9d3 2300 	ldrd	r2, r3, [r3]
    91f6:	2300      	movs	r3, #0
    91f8:	f002 0220 	and.w	r2, r2, #32
    91fc:	4313      	orrs	r3, r2
    91fe:	d052      	beq.n	92a6 <hci_evt_encode+0x54a>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
		return;
	}

	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_PARAM_REQ, sizeof(*sep));
    9200:	220a      	movs	r2, #10
    9202:	2106      	movs	r1, #6
    9204:	4628      	mov	r0, r5
    9206:	f7ff f8ed 	bl	83e4 <meta_evt>

	sep->handle = sys_cpu_to_le16(handle);
    920a:	8006      	strh	r6, [r0, #0]
	sep->interval_min =
		pdu_data->payload.llctrl.ctrldata.conn_param_req.interval_min;
    920c:	89a3      	ldrh	r3, [r4, #12]
	}

	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_PARAM_REQ, sizeof(*sep));

	sep->handle = sys_cpu_to_le16(handle);
	sep->interval_min =
    920e:	8043      	strh	r3, [r0, #2]
		pdu_data->payload.llctrl.ctrldata.conn_param_req.interval_min;
	sep->interval_max =
		pdu_data->payload.llctrl.ctrldata.conn_param_req.interval_max;
    9210:	89e3      	ldrh	r3, [r4, #14]
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_PARAM_REQ, sizeof(*sep));

	sep->handle = sys_cpu_to_le16(handle);
	sep->interval_min =
		pdu_data->payload.llctrl.ctrldata.conn_param_req.interval_min;
	sep->interval_max =
    9212:	8083      	strh	r3, [r0, #4]
		pdu_data->payload.llctrl.ctrldata.conn_param_req.interval_max;
	sep->latency = pdu_data->payload.llctrl.ctrldata.conn_param_req.latency;
    9214:	8a23      	ldrh	r3, [r4, #16]
    9216:	80c3      	strh	r3, [r0, #6]
	sep->timeout = pdu_data->payload.llctrl.ctrldata.conn_param_req.timeout;
    9218:	8a63      	ldrh	r3, [r4, #18]
    921a:	e01c      	b.n	9256 <hci_evt_encode+0x4fa>
static void le_data_len_change(struct pdu_data *pdu_data, u16_t handle,
			       struct net_buf *buf)
{
	struct bt_hci_evt_le_data_len_change *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    921c:	4b23      	ldr	r3, [pc, #140]	; (92ac <hci_evt_encode+0x550>)
    921e:	e9d3 2300 	ldrd	r2, r3, [r3]
    9222:	2200      	movs	r2, #0
    9224:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    9228:	4313      	orrs	r3, r2
    922a:	d03c      	beq.n	92a6 <hci_evt_encode+0x54a>
	    !(le_event_mask & BT_EVT_MASK_LE_DATA_LEN_CHANGE)) {
    922c:	4b20      	ldr	r3, [pc, #128]	; (92b0 <hci_evt_encode+0x554>)
static void le_data_len_change(struct pdu_data *pdu_data, u16_t handle,
			       struct net_buf *buf)
{
	struct bt_hci_evt_le_data_len_change *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    922e:	e9d3 2300 	ldrd	r2, r3, [r3]
    9232:	2300      	movs	r3, #0
    9234:	f002 0240 	and.w	r2, r2, #64	; 0x40
    9238:	4313      	orrs	r3, r2
    923a:	d034      	beq.n	92a6 <hci_evt_encode+0x54a>
	    !(le_event_mask & BT_EVT_MASK_LE_DATA_LEN_CHANGE)) {
		return;
	}

	sep = meta_evt(buf, BT_HCI_EVT_LE_DATA_LEN_CHANGE, sizeof(*sep));
    923c:	220a      	movs	r2, #10
    923e:	2107      	movs	r1, #7
    9240:	4628      	mov	r0, r5
    9242:	f7ff f8cf 	bl	83e4 <meta_evt>

	sep->handle = sys_cpu_to_le16(handle);
    9246:	8006      	strh	r6, [r0, #0]
	sep->max_tx_octets =
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_tx_octets;
    9248:	8a23      	ldrh	r3, [r4, #16]
	}

	sep = meta_evt(buf, BT_HCI_EVT_LE_DATA_LEN_CHANGE, sizeof(*sep));

	sep->handle = sys_cpu_to_le16(handle);
	sep->max_tx_octets =
    924a:	8043      	strh	r3, [r0, #2]
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_tx_octets;
	sep->max_tx_time =
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_tx_time;
    924c:	8a63      	ldrh	r3, [r4, #18]
	sep = meta_evt(buf, BT_HCI_EVT_LE_DATA_LEN_CHANGE, sizeof(*sep));

	sep->handle = sys_cpu_to_le16(handle);
	sep->max_tx_octets =
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_tx_octets;
	sep->max_tx_time =
    924e:	8083      	strh	r3, [r0, #4]
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_tx_time;
	sep->max_rx_octets =
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_rx_octets;
    9250:	89a3      	ldrh	r3, [r4, #12]
	sep->handle = sys_cpu_to_le16(handle);
	sep->max_tx_octets =
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_tx_octets;
	sep->max_tx_time =
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_tx_time;
	sep->max_rx_octets =
    9252:	80c3      	strh	r3, [r0, #6]
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_rx_octets;
	sep->max_rx_time =
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_rx_time;
    9254:	89e3      	ldrh	r3, [r4, #14]
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_tx_octets;
	sep->max_tx_time =
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_tx_time;
	sep->max_rx_octets =
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_rx_octets;
	sep->max_rx_time =
    9256:	8103      	strh	r3, [r0, #8]
    9258:	e025      	b.n	92a6 <hci_evt_encode+0x54a>
    925a:	7b03      	ldrb	r3, [r0, #12]

static void le_unknown_rsp(struct pdu_data *pdu_data, u16_t handle,
			   struct net_buf *buf)
{

	switch (pdu_data->payload.llctrl.ctrldata.unknown_rsp.type) {
    925c:	2b0e      	cmp	r3, #14
    925e:	d106      	bne.n	926e <hci_evt_encode+0x512>
	case PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ:
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    9260:	460b      	mov	r3, r1
    9262:	4632      	mov	r2, r6
    9264:	2100      	movs	r1, #0
    9266:	201a      	movs	r0, #26
    9268:	f7ff f8f2 	bl	8450 <le_remote_feat_complete>
    926c:	e01b      	b.n	92a6 <hci_evt_encode+0x54a>
					    NULL, handle, buf);
		break;

	default:
		BT_WARN("type: 0x%02x",
    926e:	4a12      	ldr	r2, [pc, #72]	; (92b8 <hci_evt_encode+0x55c>)
    9270:	9301      	str	r3, [sp, #4]
    9272:	4b12      	ldr	r3, [pc, #72]	; (92bc <hci_evt_encode+0x560>)
    9274:	9202      	str	r2, [sp, #8]
    9276:	9300      	str	r3, [sp, #0]
    9278:	4a12      	ldr	r2, [pc, #72]	; (92c4 <hci_evt_encode+0x568>)
    927a:	4b16      	ldr	r3, [pc, #88]	; (92d4 <hci_evt_encode+0x578>)
    927c:	4912      	ldr	r1, [pc, #72]	; (92c8 <hci_evt_encode+0x56c>)
    927e:	4816      	ldr	r0, [pc, #88]	; (92d8 <hci_evt_encode+0x57c>)
    9280:	f7f8 f8fe 	bl	1480 <printk>
    9284:	e00f      	b.n	92a6 <hci_evt_encode+0x54a>
	case PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP:
		le_unknown_rsp(pdu_data, handle, buf);
		break;

	default:
		LL_ASSERT(0);
    9286:	4b0c      	ldr	r3, [pc, #48]	; (92b8 <hci_evt_encode+0x55c>)
    9288:	9301      	str	r3, [sp, #4]
    928a:	4b10      	ldr	r3, [pc, #64]	; (92cc <hci_evt_encode+0x570>)
    928c:	9300      	str	r3, [sp, #0]
    928e:	4b13      	ldr	r3, [pc, #76]	; (92dc <hci_evt_encode+0x580>)
    9290:	4a13      	ldr	r2, [pc, #76]	; (92e0 <hci_evt_encode+0x584>)
    9292:	490d      	ldr	r1, [pc, #52]	; (92c8 <hci_evt_encode+0x56c>)
    9294:	4813      	ldr	r0, [pc, #76]	; (92e4 <hci_evt_encode+0x588>)
    9296:	f7f8 f8f3 	bl	1480 <printk>
    929a:	4040      	eors	r0, r0
    929c:	f380 8811 	msr	BASEPRI, r0
    92a0:	f04f 0004 	mov.w	r0, #4
    92a4:	df02      	svc	2
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
		encode_control(node_rx, pdu_data, buf);
	} else {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
    92a6:	b011      	add	sp, #68	; 0x44
    92a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    92aa:	bf00      	nop
    92ac:	20000538 	.word	0x20000538
    92b0:	20000540 	.word	0x20000540
    92b4:	000150dc 	.word	0x000150dc
    92b8:	00013df4 	.word	0x00013df4
    92bc:	00013e3f 	.word	0x00013e3f
    92c0:	000165c4 	.word	0x000165c4
    92c4:	00013e01 	.word	0x00013e01
    92c8:	00013dbb 	.word	0x00013dbb
    92cc:	00013df9 	.word	0x00013df9
    92d0:	000165fc 	.word	0x000165fc
    92d4:	000165a6 	.word	0x000165a6
    92d8:	00015118 	.word	0x00015118
    92dc:	0001660b 	.word	0x0001660b
    92e0:	00013db4 	.word	0x00013db4
    92e4:	00014409 	.word	0x00014409

000092e8 <hci_num_cmplt_encode>:

void hci_num_cmplt_encode(struct net_buf *buf, u16_t handle, u8_t num)
{
    92e8:	b570      	push	{r4, r5, r6, lr}
    92ea:	4606      	mov	r6, r0
    92ec:	460d      	mov	r5, r1
    92ee:	4614      	mov	r4, r2
	u8_t len;

	num_handles = 1;

	len = (sizeof(*ep) + (sizeof(*hc) * num_handles));
	evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);
    92f0:	2113      	movs	r1, #19
    92f2:	2205      	movs	r2, #5
    92f4:	f7ff f830 	bl	8358 <evt_create>

	ep = net_buf_add(buf, len);
    92f8:	2105      	movs	r1, #5
    92fa:	f106 0008 	add.w	r0, r6, #8
    92fe:	f008 fc85 	bl	11c0c <net_buf_simple_add>
	ep->num_handles = num_handles;
    9302:	2301      	movs	r3, #1
    9304:	7003      	strb	r3, [r0, #0]
	hc = &ep->h[0];
	hc->handle = sys_cpu_to_le16(handle);
    9306:	f8a0 5001 	strh.w	r5, [r0, #1]
	hc->count = sys_cpu_to_le16(num);
    930a:	f8a0 4003 	strh.w	r4, [r0, #3]
    930e:	bd70      	pop	{r4, r5, r6, pc}

00009310 <hci_get_class>:
{
	struct pdu_data *pdu_data;

	pdu_data = (struct pdu_data *)node_rx->pdu_data;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    9310:	7903      	ldrb	r3, [r0, #4]
    9312:	2b01      	cmp	r3, #1
    9314:	d006      	beq.n	9324 <hci_get_class+0x14>
    9316:	3b02      	subs	r3, #2
    9318:	b2db      	uxtb	r3, r3
    931a:	2b0a      	cmp	r3, #10
    931c:	d80a      	bhi.n	9334 <hci_get_class+0x24>
    931e:	4a07      	ldr	r2, [pc, #28]	; (933c <hci_get_class+0x2c>)
    9320:	56d0      	ldrsb	r0, [r2, r3]
    9322:	4770      	bx	lr
			return HCI_CLASS_EVT_CONNECTION;
		default:
			return -1;
		}

	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
    9324:	7a03      	ldrb	r3, [r0, #8]
    9326:	f003 0303 	and.w	r3, r3, #3
    932a:	2b03      	cmp	r3, #3
		return HCI_CLASS_EVT_CONNECTION;
	} else {
		return HCI_CLASS_ACL_DATA;
    932c:	bf0c      	ite	eq
    932e:	2002      	moveq	r0, #2
    9330:	2003      	movne	r0, #3
    9332:	4770      	bx	lr
{
	struct pdu_data *pdu_data;

	pdu_data = (struct pdu_data *)node_rx->pdu_data;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    9334:	f04f 30ff 	mov.w	r0, #4294967295
	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
		return HCI_CLASS_EVT_CONNECTION;
	} else {
		return HCI_CLASS_ACL_DATA;
	}
}
    9338:	4770      	bx	lr
    933a:	bf00      	nop
    933c:	0001662e 	.word	0x0001662e

00009340 <hci_init>:

#if CONFIG_BLUETOOTH_CONTROLLER_DUP_FILTER_LEN > 0
	dup_count = -1;
#endif
	/* reset event masks */
	event_mask = DEFAULT_EVENT_MASK;
    9340:	4b06      	ldr	r3, [pc, #24]	; (935c <hci_init+0x1c>)
    9342:	f04f 30ff 	mov.w	r0, #4294967295
    9346:	f641 71ff 	movw	r1, #8191	; 0x1fff
    934a:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    934e:	4b04      	ldr	r3, [pc, #16]	; (9360 <hci_init+0x20>)
    9350:	201f      	movs	r0, #31
    9352:	2100      	movs	r1, #0
    9354:	e9c3 0100 	strd	r0, r1, [r3]
    9358:	4770      	bx	lr
    935a:	bf00      	nop
    935c:	20000538 	.word	0x20000538
    9360:	20000540 	.word	0x20000540

00009364 <_hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int _hci_driver_init(struct device *unused)
{
    9364:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
    9366:	4802      	ldr	r0, [pc, #8]	; (9370 <_hci_driver_init+0xc>)
    9368:	f7fa fb56 	bl	3a18 <bt_hci_driver_register>

	return 0;
}
    936c:	2000      	movs	r0, #0
    936e:	bd08      	pop	{r3, pc}
    9370:	0001663c 	.word	0x0001663c

00009374 <recv_thread>:
	return buf;
}
#endif

static void recv_thread(void *p1, void *p2, void *p3)
{
    9374:	b530      	push	{r4, r5, lr}
	default:
		LL_ASSERT(0);
		break;
	}

	radio_rx_fc_set(node_rx->hdr.handle, 0);
    9376:	2500      	movs	r5, #0
	return buf;
}
#endif

static void recv_thread(void *p1, void *p2, void *p3)
{
    9378:	b085      	sub	sp, #20

		/* process host buffers first if any */
		buf = process_hbuf();

#else
		node_rx = k_fifo_get(&recv_fifo, K_FOREVER);
    937a:	f04f 31ff 	mov.w	r1, #4294967295
    937e:	4827      	ldr	r0, [pc, #156]	; (941c <recv_thread+0xa8>)
    9380:	f009 fd18 	bl	12db4 <k_queue_get>
#endif
		BT_DBG("unblocked");

		if (node_rx && !buf) {
    9384:	4604      	mov	r4, r0
    9386:	2800      	cmp	r0, #0
    9388:	d045      	beq.n	9416 <recv_thread+0xa2>
	return buf;
}

static inline struct net_buf *process_node(struct radio_pdu_node_rx *node_rx)
{
	s8_t class = hci_get_class(node_rx);
    938a:	f7ff ffc1 	bl	9310 <hci_get_class>
					  s8_t class)
{
	struct net_buf *buf = NULL;

	/* Check if we need to generate an HCI event or ACL data */
	switch (class) {
    938e:	1e03      	subs	r3, r0, #0
    9390:	9403      	str	r4, [sp, #12]
    9392:	db1c      	blt.n	93ce <recv_thread+0x5a>
    9394:	2b02      	cmp	r3, #2
    9396:	dd0b      	ble.n	93b0 <recv_thread+0x3c>
    9398:	2b03      	cmp	r3, #3
    939a:	d118      	bne.n	93ce <recv_thread+0x5a>
		}
		break;
#if defined(CONFIG_BLUETOOTH_CONN)
	case HCI_CLASS_ACL_DATA:
		/* generate ACL data */
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
    939c:	f04f 31ff 	mov.w	r1, #4294967295
    93a0:	f7fa fc5e 	bl	3c60 <bt_buf_get_rx>
    93a4:	4604      	mov	r4, r0
		hci_acl_encode(node_rx, buf);
    93a6:	4601      	mov	r1, r0
    93a8:	9803      	ldr	r0, [sp, #12]
    93aa:	f7ff fc93 	bl	8cd4 <hci_acl_encode>
    93ae:	e01e      	b.n	93ee <recv_thread+0x7a>
	/* Check if we need to generate an HCI event or ACL data */
	switch (class) {
	case HCI_CLASS_EVT_DISCARDABLE:
	case HCI_CLASS_EVT_REQUIRED:
	case HCI_CLASS_EVT_CONNECTION:
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
    93b0:	2b01      	cmp	r3, #1
			buf = bt_buf_get_rx(BT_BUF_EVT, K_NO_WAIT);
    93b2:	bf0e      	itee	eq
    93b4:	2100      	moveq	r1, #0
		} else {
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    93b6:	f04f 31ff 	movne.w	r1, #4294967295
    93ba:	2001      	movne	r0, #1
    93bc:	f7fa fc50 	bl	3c60 <bt_buf_get_rx>
    93c0:	4604      	mov	r4, r0
		}
		if (buf) {
    93c2:	b1a0      	cbz	r0, 93ee <recv_thread+0x7a>
			hci_evt_encode(node_rx, buf);
    93c4:	4601      	mov	r1, r0
    93c6:	9803      	ldr	r0, [sp, #12]
    93c8:	f7ff fcc8 	bl	8d5c <hci_evt_encode>
    93cc:	e00f      	b.n	93ee <recv_thread+0x7a>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
		hci_acl_encode(node_rx, buf);
		break;
#endif
	default:
		LL_ASSERT(0);
    93ce:	4b14      	ldr	r3, [pc, #80]	; (9420 <recv_thread+0xac>)
    93d0:	9301      	str	r3, [sp, #4]
    93d2:	4b14      	ldr	r3, [pc, #80]	; (9424 <recv_thread+0xb0>)
    93d4:	9300      	str	r3, [sp, #0]
    93d6:	4a14      	ldr	r2, [pc, #80]	; (9428 <recv_thread+0xb4>)
    93d8:	4b14      	ldr	r3, [pc, #80]	; (942c <recv_thread+0xb8>)
    93da:	4915      	ldr	r1, [pc, #84]	; (9430 <recv_thread+0xbc>)
    93dc:	4815      	ldr	r0, [pc, #84]	; (9434 <recv_thread+0xc0>)
    93de:	f7f8 f84f 	bl	1480 <printk>
    93e2:	4040      	eors	r0, r0
    93e4:	f380 8811 	msr	BASEPRI, r0
    93e8:	f04f 0004 	mov.w	r0, #4
    93ec:	df02      	svc	2
		break;
	}

	radio_rx_fc_set(node_rx->hdr.handle, 0);
    93ee:	9b03      	ldr	r3, [sp, #12]
    93f0:	2100      	movs	r1, #0
    93f2:	88d8      	ldrh	r0, [r3, #6]
    93f4:	f007 f952 	bl	1069c <radio_rx_fc_set>
	node_rx->hdr.onion.next = 0;
    93f8:	a804      	add	r0, sp, #16
    93fa:	f850 3d04 	ldr.w	r3, [r0, #-4]!
    93fe:	601d      	str	r5, [r3, #0]
	radio_rx_mem_release(&node_rx);
    9400:	f007 f8d4 	bl	105ac <radio_rx_mem_release>
		if (node_rx && !buf) {
			/* process regular node from radio */
			buf = process_node(node_rx);
		}

		if (buf) {
    9404:	b13c      	cbz	r4, 9416 <recv_thread+0xa2>
			if (buf->len) {
    9406:	89a3      	ldrh	r3, [r4, #12]
				BT_DBG("Packet in: type:%u len:%u",
					bt_buf_get_type(buf), buf->len);
				bt_recv(buf);
    9408:	4620      	mov	r0, r4
			/* process regular node from radio */
			buf = process_node(node_rx);
		}

		if (buf) {
			if (buf->len) {
    940a:	b113      	cbz	r3, 9412 <recv_thread+0x9e>
				BT_DBG("Packet in: type:%u len:%u",
					bt_buf_get_type(buf), buf->len);
				bt_recv(buf);
    940c:	f7f9 fcb8 	bl	2d80 <bt_recv>
    9410:	e001      	b.n	9416 <recv_thread+0xa2>
			} else {
				net_buf_unref(buf);
    9412:	f008 fbdb 	bl	11bcc <net_buf_unref>
			}
		}

		k_yield();
    9416:	f009 fe23 	bl	13060 <k_yield>
		if (k_uptime_get_32() - rx_ts > K_SECONDS(5)) {
			STACK_ANALYZE("recv thread stack", recv_thread_stack);
			rx_ts = k_uptime_get_32();
		}
#endif
	}
    941a:	e7ae      	b.n	937a <recv_thread+0x6>
    941c:	20000788 	.word	0x20000788
    9420:	00013df4 	.word	0x00013df4
    9424:	00013df9 	.word	0x00013df9
    9428:	00013db4 	.word	0x00013db4
    942c:	0001666c 	.word	0x0001666c
    9430:	00013dbb 	.word	0x00013dbb
    9434:	00014409 	.word	0x00014409

00009438 <prio_recv_thread>:
static sys_slist_t hbuf_pend;
static s32_t hbuf_count;
#endif

static void prio_recv_thread(void *p1, void *p2, void *p3)
{
    9438:	b537      	push	{r0, r1, r2, r4, r5, lr}
	while (1) {
		struct radio_pdu_node_rx *node_rx;
		u8_t num_cmplt;
		u16_t handle;

		while ((num_cmplt = radio_rx_get(&node_rx, &handle))) {
    943a:	f10d 0102 	add.w	r1, sp, #2
    943e:	a801      	add	r0, sp, #4
    9440:	f007 f878 	bl	10534 <radio_rx_get>
    9444:	4604      	mov	r4, r0
    9446:	b180      	cbz	r0, 946a <prio_recv_thread+0x32>
#if defined(CONFIG_BLUETOOTH_CONN)
			struct net_buf *buf;

			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    9448:	f04f 31ff 	mov.w	r1, #4294967295
    944c:	2001      	movs	r0, #1
    944e:	f7fa fc07 	bl	3c60 <bt_buf_get_rx>
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    9452:	4622      	mov	r2, r4

		while ((num_cmplt = radio_rx_get(&node_rx, &handle))) {
#if defined(CONFIG_BLUETOOTH_CONN)
			struct net_buf *buf;

			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    9454:	4605      	mov	r5, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    9456:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    945a:	f7ff ff45 	bl	92e8 <hci_num_cmplt_encode>
			BT_DBG("Num Complete: 0x%04x:%u", handle, num_cmplt);
			bt_recv_prio(buf);
    945e:	4628      	mov	r0, r5
    9460:	f7fa f9e2 	bl	3828 <bt_recv_prio>
			k_yield();
    9464:	f009 fdfc 	bl	13060 <k_yield>
    9468:	e7e7      	b.n	943a <prio_recv_thread+0x2>
#endif
		}

		if (node_rx) {
    946a:	9b01      	ldr	r3, [sp, #4]
    946c:	b133      	cbz	r3, 947c <prio_recv_thread+0x44>

			radio_rx_dequeue();
    946e:	f007 fb91 	bl	10b94 <radio_rx_dequeue>

			BT_DBG("RX node enqueue");
			k_fifo_put(&recv_fifo, node_rx);
    9472:	9901      	ldr	r1, [sp, #4]
    9474:	4804      	ldr	r0, [pc, #16]	; (9488 <prio_recv_thread+0x50>)
    9476:	f009 fc4d 	bl	12d14 <k_queue_append>
    947a:	e7de      	b.n	943a <prio_recv_thread+0x2>

			continue;
		}

		BT_DBG("sem take...");
		k_sem_take(&sem_prio_recv, K_FOREVER);
    947c:	f04f 31ff 	mov.w	r1, #4294967295
    9480:	4802      	ldr	r0, [pc, #8]	; (948c <prio_recv_thread+0x54>)
    9482:	f009 fef7 	bl	13274 <k_sem_take>
    9486:	e7d8      	b.n	943a <prio_recv_thread+0x2>
    9488:	20000788 	.word	0x20000788
    948c:	20000760 	.word	0x20000760

00009490 <hci_driver_send>:

	return 0;
}

static int hci_driver_send(struct net_buf *buf)
{
    9490:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	u8_t type;
	int err;

	BT_DBG("enter");

	if (!buf->len) {
    9492:	8983      	ldrh	r3, [r0, #12]

	return 0;
}

static int hci_driver_send(struct net_buf *buf)
{
    9494:	4604      	mov	r4, r0
	u8_t type;
	int err;

	BT_DBG("enter");

	if (!buf->len) {
    9496:	b953      	cbnz	r3, 94ae <hci_driver_send+0x1e>
		BT_ERR("Empty HCI packet");
    9498:	4b18      	ldr	r3, [pc, #96]	; (94fc <hci_driver_send+0x6c>)
    949a:	9301      	str	r3, [sp, #4]
    949c:	4b18      	ldr	r3, [pc, #96]	; (9500 <hci_driver_send+0x70>)
    949e:	9300      	str	r3, [sp, #0]
    94a0:	4a18      	ldr	r2, [pc, #96]	; (9504 <hci_driver_send+0x74>)
    94a2:	4b19      	ldr	r3, [pc, #100]	; (9508 <hci_driver_send+0x78>)
    94a4:	4919      	ldr	r1, [pc, #100]	; (950c <hci_driver_send+0x7c>)
    94a6:	481a      	ldr	r0, [pc, #104]	; (9510 <hci_driver_send+0x80>)
    94a8:	f7f7 ffea 	bl	1480 <printk>
    94ac:	e01d      	b.n	94ea <hci_driver_send+0x5a>
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return *(u8_t *)net_buf_user_data(buf);
    94ae:	89c3      	ldrh	r3, [r0, #14]
    94b0:	4403      	add	r3, r0
    94b2:	3313      	adds	r3, #19
    94b4:	f023 0303 	bic.w	r3, r3, #3
    94b8:	781b      	ldrb	r3, [r3, #0]
		return -EINVAL;
	}

	type = bt_buf_get_type(buf);
	switch (type) {
    94ba:	b12b      	cbz	r3, 94c8 <hci_driver_send+0x38>
    94bc:	2b02      	cmp	r3, #2
    94be:	d109      	bne.n	94d4 <hci_driver_send+0x44>
#if defined(CONFIG_BLUETOOTH_CONN)
	case BT_BUF_ACL_OUT:
		err = hci_acl_handle(buf);
    94c0:	f7ff fb94 	bl	8bec <hci_acl_handle>
	default:
		BT_ERR("Unknown HCI type %u", type);
		return -EINVAL;
	}

	if (!err) {
    94c4:	b9c0      	cbnz	r0, 94f8 <hci_driver_send+0x68>
    94c6:	e013      	b.n	94f0 <hci_driver_send+0x60>

static int cmd_handle(struct net_buf *buf)
{
	struct net_buf *evt;

	evt = hci_cmd_handle(buf);
    94c8:	f7ff f8a0 	bl	860c <hci_cmd_handle>
	if (evt) {
    94cc:	b180      	cbz	r0, 94f0 <hci_driver_send+0x60>
		BT_DBG("Replying with event of %u bytes", evt->len);
		bt_recv_prio(evt);
    94ce:	f7fa f9ab 	bl	3828 <bt_recv_prio>
    94d2:	e00d      	b.n	94f0 <hci_driver_send+0x60>
#endif
	case BT_BUF_CMD:
		err = cmd_handle(buf);
		break;
	default:
		BT_ERR("Unknown HCI type %u", type);
    94d4:	4a09      	ldr	r2, [pc, #36]	; (94fc <hci_driver_send+0x6c>)
    94d6:	9301      	str	r3, [sp, #4]
    94d8:	4b09      	ldr	r3, [pc, #36]	; (9500 <hci_driver_send+0x70>)
    94da:	9202      	str	r2, [sp, #8]
    94dc:	9300      	str	r3, [sp, #0]
    94de:	4a09      	ldr	r2, [pc, #36]	; (9504 <hci_driver_send+0x74>)
    94e0:	4b09      	ldr	r3, [pc, #36]	; (9508 <hci_driver_send+0x78>)
    94e2:	490a      	ldr	r1, [pc, #40]	; (950c <hci_driver_send+0x7c>)
    94e4:	480b      	ldr	r0, [pc, #44]	; (9514 <hci_driver_send+0x84>)
    94e6:	f7f7 ffcb 	bl	1480 <printk>
		return -EINVAL;
    94ea:	f06f 0015 	mvn.w	r0, #21
    94ee:	e003      	b.n	94f8 <hci_driver_send+0x68>
	}

	if (!err) {
		net_buf_unref(buf);
    94f0:	4620      	mov	r0, r4
    94f2:	f008 fb6b 	bl	11bcc <net_buf_unref>
    94f6:	2000      	movs	r0, #0
	}

	BT_DBG("exit: %d", err);

	return err;
}
    94f8:	b004      	add	sp, #16
    94fa:	bd10      	pop	{r4, pc}
    94fc:	00013df4 	.word	0x00013df4
    9500:	00013df9 	.word	0x00013df9
    9504:	00013db4 	.word	0x00013db4
    9508:	0001664c 	.word	0x0001664c
    950c:	00013dbb 	.word	0x00013dbb
    9510:	00015135 	.word	0x00015135
    9514:	00015156 	.word	0x00015156

00009518 <hci_driver_open>:

static int hci_driver_open(void)
{
    9518:	b510      	push	{r4, lr}
	u32_t err;

	DEBUG_INIT();

	err = ll_init(&sem_prio_recv);
    951a:	481a      	ldr	r0, [pc, #104]	; (9584 <hci_driver_open+0x6c>)

	return err;
}

static int hci_driver_open(void)
{
    951c:	b086      	sub	sp, #24
	u32_t err;

	DEBUG_INIT();

	err = ll_init(&sem_prio_recv);
    951e:	f007 fcb7 	bl	10e90 <ll_init>
	if (err) {
    9522:	4604      	mov	r4, r0
    9524:	b158      	cbz	r0, 953e <hci_driver_open+0x26>
		BT_ERR("LL initialization failed: %u", err);
    9526:	4b18      	ldr	r3, [pc, #96]	; (9588 <hci_driver_open+0x70>)
    9528:	9302      	str	r3, [sp, #8]
    952a:	4b18      	ldr	r3, [pc, #96]	; (958c <hci_driver_open+0x74>)
    952c:	9001      	str	r0, [sp, #4]
    952e:	9300      	str	r3, [sp, #0]
    9530:	4a17      	ldr	r2, [pc, #92]	; (9590 <hci_driver_open+0x78>)
    9532:	4b18      	ldr	r3, [pc, #96]	; (9594 <hci_driver_open+0x7c>)
    9534:	4918      	ldr	r1, [pc, #96]	; (9598 <hci_driver_open+0x80>)
    9536:	4819      	ldr	r0, [pc, #100]	; (959c <hci_driver_open+0x84>)
    9538:	f7f7 ffa2 	bl	1480 <printk>
		return err;
    953c:	e01f      	b.n	957e <hci_driver_open+0x66>
	}

#if defined(CONFIG_BLUETOOTH_HCI_ACL_FLOW_CONTROL)
	hci_init(&hbuf_signal);
#else
	hci_init(NULL);
    953e:	f7ff feff 	bl	9340 <hci_init>
#endif

	k_thread_create(&prio_recv_thread_data, prio_recv_thread_stack,
    9542:	f06f 0309 	mvn.w	r3, #9
    9546:	9303      	str	r3, [sp, #12]
    9548:	f44f 723b 	mov.w	r2, #748	; 0x2ec
    954c:	4b14      	ldr	r3, [pc, #80]	; (95a0 <hci_driver_open+0x88>)
    954e:	4915      	ldr	r1, [pc, #84]	; (95a4 <hci_driver_open+0x8c>)
    9550:	9405      	str	r4, [sp, #20]
    9552:	9404      	str	r4, [sp, #16]
    9554:	9402      	str	r4, [sp, #8]
    9556:	9401      	str	r4, [sp, #4]
    9558:	9400      	str	r4, [sp, #0]
    955a:	4813      	ldr	r0, [pc, #76]	; (95a8 <hci_driver_open+0x90>)
    955c:	f00a f850 	bl	13600 <k_thread_create>
			K_THREAD_STACK_SIZEOF(prio_recv_thread_stack),
			prio_recv_thread,
			NULL, NULL, NULL, K_PRIO_COOP(6), 0, K_NO_WAIT);

	k_thread_create(&recv_thread_data, recv_thread_stack,
    9560:	f06f 0308 	mvn.w	r3, #8
    9564:	9303      	str	r3, [sp, #12]
    9566:	9405      	str	r4, [sp, #20]
    9568:	9404      	str	r4, [sp, #16]
    956a:	9402      	str	r4, [sp, #8]
    956c:	9401      	str	r4, [sp, #4]
    956e:	9400      	str	r4, [sp, #0]
    9570:	4b0e      	ldr	r3, [pc, #56]	; (95ac <hci_driver_open+0x94>)
    9572:	490f      	ldr	r1, [pc, #60]	; (95b0 <hci_driver_open+0x98>)
    9574:	480f      	ldr	r0, [pc, #60]	; (95b4 <hci_driver_open+0x9c>)
    9576:	f240 522c 	movw	r2, #1324	; 0x52c
    957a:	f00a f841 	bl	13600 <k_thread_create>
			NULL, NULL, NULL, K_PRIO_COOP(7), 0, K_NO_WAIT);

	BT_DBG("Success.");

	return 0;
}
    957e:	4620      	mov	r0, r4
    9580:	b006      	add	sp, #24
    9582:	bd10      	pop	{r4, pc}
    9584:	20000760 	.word	0x20000760
    9588:	00013df4 	.word	0x00013df4
    958c:	00013df9 	.word	0x00013df9
    9590:	00013db4 	.word	0x00013db4
    9594:	0001665c 	.word	0x0001665c
    9598:	00013dbb 	.word	0x00013dbb
    959c:	0001517a 	.word	0x0001517a
    95a0:	00009439 	.word	0x00009439
    95a4:	20002e94 	.word	0x20002e94
    95a8:	200021b8 	.word	0x200021b8
    95ac:	00009375 	.word	0x00009375
    95b0:	2000249c 	.word	0x2000249c
    95b4:	20002128 	.word	0x20002128

000095b8 <mayfly_init>:
} mft[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT];

static void *mfl[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT][2];

void mayfly_init(void)
{
    95b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	while (callee_id--) {
		u8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
			memq_init(mfl[callee_id][caller_id],
    95bc:	4f0e      	ldr	r7, [pc, #56]	; (95f8 <mayfly_init+0x40>)
    95be:	f8df 803c 	ldr.w	r8, [pc, #60]	; 95fc <mayfly_init+0x44>

void mayfly_init(void)
{
	u8_t callee_id;

	callee_id = MAYFLY_CALLEE_COUNT;
    95c2:	2404      	movs	r4, #4
	while (callee_id--) {
    95c4:	3c01      	subs	r4, #1
    95c6:	b2e4      	uxtb	r4, r4
    95c8:	2cff      	cmp	r4, #255	; 0xff
    95ca:	d012      	beq.n	95f2 <mayfly_init+0x3a>
		u8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
			memq_init(mfl[callee_id][caller_id],
    95cc:	2630      	movs	r6, #48	; 0x30
    95ce:	2504      	movs	r5, #4
    95d0:	4366      	muls	r6, r4
	callee_id = MAYFLY_CALLEE_COUNT;
	while (callee_id--) {
		u8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
    95d2:	3d01      	subs	r5, #1
    95d4:	b2ed      	uxtb	r5, r5
    95d6:	2dff      	cmp	r5, #255	; 0xff
    95d8:	d0f4      	beq.n	95c4 <mayfly_init+0xc>
			memq_init(mfl[callee_id][caller_id],
    95da:	210c      	movs	r1, #12
    95dc:	fb01 6105 	mla	r1, r1, r5, r6
    95e0:	4439      	add	r1, r7
    95e2:	eb05 0084 	add.w	r0, r5, r4, lsl #2
    95e6:	1d0a      	adds	r2, r1, #4
    95e8:	eb08 00c0 	add.w	r0, r8, r0, lsl #3
    95ec:	f000 f981 	bl	98f2 <memq_init>
    95f0:	e7ef      	b.n	95d2 <mayfly_init+0x1a>
    95f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    95f6:	bf00      	nop
    95f8:	20001098 	.word	0x20001098
    95fc:	20001018 	.word	0x20001018

00009600 <mayfly_enable>:
		}
	}
}

void mayfly_enable(u8_t caller_id, u8_t callee_id, u8_t enable)
{
    9600:	b4f0      	push	{r4, r5, r6, r7}
    9602:	4603      	mov	r3, r0
    9604:	460e      	mov	r6, r1
    9606:	4f11      	ldr	r7, [pc, #68]	; (964c <mayfly_enable+0x4c>)
    9608:	240c      	movs	r4, #12
    960a:	2530      	movs	r5, #48	; 0x30
	if (enable) {
    960c:	b172      	cbz	r2, 962c <mayfly_enable+0x2c>
		if (mft[callee_id][caller_id].enable_req ==
    960e:	4369      	muls	r1, r5
    9610:	fb04 1100 	mla	r1, r4, r0, r1
    9614:	4439      	add	r1, r7
    9616:	7a48      	ldrb	r0, [r1, #9]
    9618:	7a0c      	ldrb	r4, [r1, #8]
    961a:	42a0      	cmp	r0, r4
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
    961c:	bf04      	itt	eq
    961e:	3001      	addeq	r0, #1
    9620:	7208      	strbeq	r0, [r1, #8]
		}

		mayfly_enable_cb(caller_id, callee_id, enable);
    9622:	4631      	mov	r1, r6
    9624:	4618      	mov	r0, r3
			mft[callee_id][caller_id].disable_req++;

			mayfly_pend(caller_id, callee_id);
		}
	}
}
    9626:	bcf0      	pop	{r4, r5, r6, r7}
		if (mft[callee_id][caller_id].enable_req ==
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
		}

		mayfly_enable_cb(caller_id, callee_id, enable);
    9628:	f007 bb96 	b.w	10d58 <mayfly_enable_cb>
	} else {
		if (mft[callee_id][caller_id].disable_req ==
    962c:	434d      	muls	r5, r1
    962e:	fb04 5300 	mla	r3, r4, r0, r5
    9632:	443b      	add	r3, r7
    9634:	7a9c      	ldrb	r4, [r3, #10]
    9636:	7ada      	ldrb	r2, [r3, #11]
    9638:	42a2      	cmp	r2, r4
    963a:	d104      	bne.n	9646 <mayfly_enable+0x46>
		    mft[callee_id][caller_id].disable_ack) {
			mft[callee_id][caller_id].disable_req++;
    963c:	3201      	adds	r2, #1
    963e:	729a      	strb	r2, [r3, #10]

			mayfly_pend(caller_id, callee_id);
		}
	}
}
    9640:	bcf0      	pop	{r4, r5, r6, r7}
	} else {
		if (mft[callee_id][caller_id].disable_req ==
		    mft[callee_id][caller_id].disable_ack) {
			mft[callee_id][caller_id].disable_req++;

			mayfly_pend(caller_id, callee_id);
    9642:	f007 bbef 	b.w	10e24 <mayfly_pend>
		}
	}
}
    9646:	bcf0      	pop	{r4, r5, r6, r7}
    9648:	4770      	bx	lr
    964a:	bf00      	nop
    964c:	20001098 	.word	0x20001098

00009650 <mayfly_enqueue>:

u32_t mayfly_enqueue(u8_t caller_id, u8_t callee_id, u8_t chain,
			struct mayfly *m)
{
    9650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9652:	4605      	mov	r5, r0
    9654:	460e      	mov	r6, r1
    9656:	461c      	mov	r4, r3
	u8_t state;
	u8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
    9658:	b10a      	cbz	r2, 965e <mayfly_enqueue+0xe>
    965a:	2301      	movs	r3, #1
    965c:	e015      	b.n	968a <mayfly_enqueue+0x3a>
			struct mayfly *m)
{
	u8_t state;
	u8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    965e:	f007 fbcf 	bl	10e00 <mayfly_prio_is_equal>
    9662:	2800      	cmp	r0, #0
    9664:	d0f9      	beq.n	965a <mayfly_enqueue+0xa>
		!mayfly_is_enabled(caller_id, callee_id) ||
    9666:	4631      	mov	r1, r6
    9668:	4628      	mov	r0, r5
    966a:	f007 fba1 	bl	10db0 <mayfly_is_enabled>
			struct mayfly *m)
{
	u8_t state;
	u8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    966e:	2800      	cmp	r0, #0
    9670:	d0f3      	beq.n	965a <mayfly_enqueue+0xa>
		!mayfly_is_enabled(caller_id, callee_id) ||
		(mft[callee_id][caller_id].disable_req !=
    9672:	2330      	movs	r3, #48	; 0x30
    9674:	220c      	movs	r2, #12
    9676:	4373      	muls	r3, r6
    9678:	fb02 3305 	mla	r3, r2, r5, r3
    967c:	4a19      	ldr	r2, [pc, #100]	; (96e4 <mayfly_enqueue+0x94>)
    967e:	4413      	add	r3, r2
{
	u8_t state;
	u8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
    9680:	7a9a      	ldrb	r2, [r3, #10]
    9682:	7adb      	ldrb	r3, [r3, #11]
    9684:	1ad3      	subs	r3, r2, r3
    9686:	bf18      	it	ne
    9688:	2301      	movne	r3, #1
		(mft[callee_id][caller_id].disable_req !=
		 mft[callee_id][caller_id].disable_ack);

	/* shadow the ack */
	ack = m->_ack;
    968a:	7862      	ldrb	r2, [r4, #1]

	/* already in queue */
	state = (m->_req - ack) & 0x03;
    968c:	7820      	ldrb	r0, [r4, #0]
    968e:	1a80      	subs	r0, r0, r2
	if (state != 0) {
    9690:	f010 0703 	ands.w	r7, r0, #3
    9694:	d00a      	beq.n	96ac <mayfly_enqueue+0x5c>
		if (chain) {
    9696:	b12b      	cbz	r3, 96a4 <mayfly_enqueue+0x54>
			if (state != 1) {
    9698:	2f01      	cmp	r7, #1
    969a:	d020      	beq.n	96de <mayfly_enqueue+0x8e>
				/* mark as ready in queue */
				m->_req = ack + 1;
    969c:	3201      	adds	r2, #1
    969e:	b2d2      	uxtb	r2, r2
    96a0:	7022      	strb	r2, [r4, #0]
    96a2:	e017      	b.n	96d4 <mayfly_enqueue+0x84>
			/* already ready */
			return 1;
		}

		/* mark as done in queue, and fall thru */
		m->_req = ack + 2;
    96a4:	3202      	adds	r2, #2
    96a6:	b2d2      	uxtb	r2, r2
    96a8:	7022      	strb	r2, [r4, #0]
    96aa:	e000      	b.n	96ae <mayfly_enqueue+0x5e>
	}

	/* handle mayfly(s) that can be inline */
	if (!chain) {
    96ac:	b923      	cbnz	r3, 96b8 <mayfly_enqueue+0x68>
		/* call fp */
		m->fp(m->param);
    96ae:	68e3      	ldr	r3, [r4, #12]
    96b0:	68a0      	ldr	r0, [r4, #8]
    96b2:	4798      	blx	r3

		return 0;
    96b4:	2000      	movs	r0, #0
    96b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	/* new, add as ready in the queue */
	m->_req = ack + 1;
    96b8:	3201      	adds	r2, #1
    96ba:	b2d2      	uxtb	r2, r2
    96bc:	7022      	strb	r2, [r4, #0]
	memq_enqueue(m, m->_link, &mft[callee_id][caller_id].tail);
    96be:	2230      	movs	r2, #48	; 0x30
    96c0:	4372      	muls	r2, r6
    96c2:	230c      	movs	r3, #12
    96c4:	fb03 2305 	mla	r3, r3, r5, r2
    96c8:	4a07      	ldr	r2, [pc, #28]	; (96e8 <mayfly_enqueue+0x98>)
    96ca:	6861      	ldr	r1, [r4, #4]
    96cc:	441a      	add	r2, r3
    96ce:	4620      	mov	r0, r4
    96d0:	f000 f912 	bl	98f8 <memq_enqueue>

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
    96d4:	4631      	mov	r1, r6
    96d6:	4628      	mov	r0, r5
    96d8:	f007 fba4 	bl	10e24 <mayfly_pend>
    96dc:	e7ea      	b.n	96b4 <mayfly_enqueue+0x64>

				return 0;
			}

			/* already ready */
			return 1;
    96de:	4638      	mov	r0, r7

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);

	return 0;
}
    96e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    96e2:	bf00      	nop
    96e4:	20001098 	.word	0x20001098
    96e8:	2000109c 	.word	0x2000109c

000096ec <mayfly_run>:

void mayfly_run(u8_t callee_id)
{
    96ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	while (caller_id--) {
		void *link;
		struct mayfly *m = 0;

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].tail,
    96f0:	f8df b104 	ldr.w	fp, [pc, #260]	; 97f8 <mayfly_run+0x10c>

	return 0;
}

void mayfly_run(u8_t callee_id)
{
    96f4:	b087      	sub	sp, #28
	u8_t disable = 0;
	u8_t enable = 0;
    96f6:	2700      	movs	r7, #0

	return 0;
}

void mayfly_run(u8_t callee_id)
{
    96f8:	4605      	mov	r5, r0
	u8_t disable = 0;
	u8_t enable = 0;
	u8_t caller_id;

	/* iterate through each caller queue to this callee_id */
	caller_id = MAYFLY_CALLER_COUNT;
    96fa:	2404      	movs	r4, #4
	return 0;
}

void mayfly_run(u8_t callee_id)
{
	u8_t disable = 0;
    96fc:	9700      	str	r7, [sp, #0]
    96fe:	46d8      	mov	r8, fp
	u8_t enable = 0;
	u8_t caller_id;

	/* iterate through each caller queue to this callee_id */
	caller_id = MAYFLY_CALLER_COUNT;
	while (caller_id--) {
    9700:	3c01      	subs	r4, #1
    9702:	b2e4      	uxtb	r4, r4
    9704:	2cff      	cmp	r4, #255	; 0xff
    9706:	d06b      	beq.n	97e0 <mayfly_run+0xf4>
		void *link;
		struct mayfly *m = 0;
    9708:	f10d 0a18 	add.w	sl, sp, #24
    970c:	2300      	movs	r3, #0
    970e:	f84a 3d04 	str.w	r3, [sl, #-4]!

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].tail,
    9712:	230c      	movs	r3, #12
    9714:	4363      	muls	r3, r4
    9716:	2630      	movs	r6, #48	; 0x30
    9718:	fb06 3105 	mla	r1, r6, r5, r3
    971c:	eb0b 0001 	add.w	r0, fp, r1
    9720:	4652      	mov	r2, sl
    9722:	f85b 1001 	ldr.w	r1, [fp, r1]
    9726:	6840      	ldr	r0, [r0, #4]
    9728:	9301      	str	r3, [sp, #4]
    972a:	f000 f8ec 	bl	9906 <memq_peek>
			}

			/* dequeue if not re-pended */
			req = m->_req;
			if (((req - m->_ack) & 0x03) != 1) {
				memq_dequeue(mft[callee_id][caller_id].tail,
    972e:	9602      	str	r6, [sp, #8]
	while (caller_id--) {
		void *link;
		struct mayfly *m = 0;

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].tail,
    9730:	4681      	mov	r9, r0
				 mft[callee_id][caller_id].head,
				 (void **)&m);
		while (link) {
    9732:	f1b9 0f00 	cmp.w	r9, #0
    9736:	d03a      	beq.n	97ae <mayfly_run+0xc2>
			u8_t state;
			u8_t req;

			/* execute work if ready */
			req = m->_req;
    9738:	9b05      	ldr	r3, [sp, #20]
    973a:	781e      	ldrb	r6, [r3, #0]
			state = (req - m->_ack) & 0x03;
    973c:	785a      	ldrb	r2, [r3, #1]
    973e:	1ab6      	subs	r6, r6, r2
    9740:	f006 0603 	and.w	r6, r6, #3
			if (state == 1) {
    9744:	2e01      	cmp	r6, #1
    9746:	d104      	bne.n	9752 <mayfly_run+0x66>
				/* mark mayfly as ran */
				m->_ack--;
    9748:	3a01      	subs	r2, #1
    974a:	705a      	strb	r2, [r3, #1]

				/* call the mayfly function */
				m->fp(m->param);
    974c:	6898      	ldr	r0, [r3, #8]
    974e:	68da      	ldr	r2, [r3, #12]
    9750:	4790      	blx	r2
			}

			/* dequeue if not re-pended */
			req = m->_req;
    9752:	9a05      	ldr	r2, [sp, #20]
    9754:	7813      	ldrb	r3, [r2, #0]
			if (((req - m->_ack) & 0x03) != 1) {
    9756:	7852      	ldrb	r2, [r2, #1]
				/* call the mayfly function */
				m->fp(m->param);
			}

			/* dequeue if not re-pended */
			req = m->_req;
    9758:	b2db      	uxtb	r3, r3
			if (((req - m->_ack) & 0x03) != 1) {
    975a:	1a9a      	subs	r2, r3, r2
    975c:	f002 0203 	and.w	r2, r2, #3
    9760:	2a01      	cmp	r2, #1
    9762:	9303      	str	r3, [sp, #12]
    9764:	d00d      	beq.n	9782 <mayfly_run+0x96>
				memq_dequeue(mft[callee_id][caller_id].tail,
    9766:	9b02      	ldr	r3, [sp, #8]
    9768:	9a01      	ldr	r2, [sp, #4]
    976a:	fb03 2105 	mla	r1, r3, r5, r2
    976e:	4441      	add	r1, r8
    9770:	2200      	movs	r2, #0
    9772:	6848      	ldr	r0, [r1, #4]
    9774:	f000 f8d1 	bl	991a <memq_dequeue>
					     &mft[callee_id][caller_id].head,
					     0);

				/* release link into dequeued mayfly struct */
				m->_link = link;
    9778:	9a05      	ldr	r2, [sp, #20]

				/* reset mayfly state to idle */
				m->_ack = req;
    977a:	9b03      	ldr	r3, [sp, #12]
				memq_dequeue(mft[callee_id][caller_id].tail,
					     &mft[callee_id][caller_id].head,
					     0);

				/* release link into dequeued mayfly struct */
				m->_link = link;
    977c:	f8c2 9004 	str.w	r9, [r2, #4]

				/* reset mayfly state to idle */
				m->_ack = req;
    9780:	7053      	strb	r3, [r2, #1]
			}

			/* fetch next mayfly in callee queue, if any */
			link = memq_peek(mft[callee_id][caller_id].tail,
    9782:	9a01      	ldr	r2, [sp, #4]
    9784:	9b02      	ldr	r3, [sp, #8]
    9786:	fb03 2305 	mla	r3, r3, r5, r2
    978a:	eb08 0003 	add.w	r0, r8, r3
    978e:	4652      	mov	r2, sl
    9790:	f858 1003 	ldr.w	r1, [r8, r3]
    9794:	6840      	ldr	r0, [r0, #4]
    9796:	f000 f8b6 	bl	9906 <memq_peek>
					 (void **)&m);

			/* yield out of mayfly_run if a mayfly function was
			 * called.
			 */
			if (state == 1) {
    979a:	2e01      	cmp	r6, #1
				/* reset mayfly state to idle */
				m->_ack = req;
			}

			/* fetch next mayfly in callee queue, if any */
			link = memq_peek(mft[callee_id][caller_id].tail,
    979c:	4681      	mov	r9, r0
					 (void **)&m);

			/* yield out of mayfly_run if a mayfly function was
			 * called.
			 */
			if (state == 1) {
    979e:	d1c8      	bne.n	9732 <mayfly_run+0x46>
				/* pend callee (tailchain) if mayfly queue is
				 * not empty or all caller queues are not
				 * processed.
				 */
				if (caller_id || link) {
    97a0:	b904      	cbnz	r4, 97a4 <mayfly_run+0xb8>
    97a2:	b120      	cbz	r0, 97ae <mayfly_run+0xc2>
					mayfly_pend(callee_id, callee_id);
    97a4:	4629      	mov	r1, r5
    97a6:	4628      	mov	r0, r5
    97a8:	f007 fb3c 	bl	10e24 <mayfly_pend>
    97ac:	e020      	b.n	97f0 <mayfly_run+0x104>
					return;
				}
			}
		}

		if (mft[callee_id][caller_id].disable_req !=
    97ae:	2230      	movs	r2, #48	; 0x30
    97b0:	230c      	movs	r3, #12
    97b2:	436a      	muls	r2, r5
    97b4:	fb03 2204 	mla	r2, r3, r4, r2
    97b8:	4442      	add	r2, r8
    97ba:	7a91      	ldrb	r1, [r2, #10]
    97bc:	7ad0      	ldrb	r0, [r2, #11]
    97be:	4288      	cmp	r0, r1
		    mft[callee_id][caller_id].disable_ack) {
			disable = 1;

			mft[callee_id][caller_id].disable_ack =
    97c0:	bf1e      	ittt	ne
    97c2:	72d1      	strbne	r1, [r2, #11]
			}
		}

		if (mft[callee_id][caller_id].disable_req !=
		    mft[callee_id][caller_id].disable_ack) {
			disable = 1;
    97c4:	2201      	movne	r2, #1
    97c6:	9200      	strne	r2, [sp, #0]

			mft[callee_id][caller_id].disable_ack =
				mft[callee_id][caller_id].disable_req;
		}

		if (mft[callee_id][caller_id].enable_req !=
    97c8:	2230      	movs	r2, #48	; 0x30
    97ca:	436a      	muls	r2, r5
    97cc:	fb03 2304 	mla	r3, r3, r4, r2
    97d0:	4443      	add	r3, r8
    97d2:	7a1a      	ldrb	r2, [r3, #8]
    97d4:	7a59      	ldrb	r1, [r3, #9]
    97d6:	4291      	cmp	r1, r2
		    mft[callee_id][caller_id].enable_ack) {
			enable = 1;

			mft[callee_id][caller_id].enable_ack =
    97d8:	bf1c      	itt	ne
    97da:	725a      	strbne	r2, [r3, #9]
				mft[callee_id][caller_id].disable_req;
		}

		if (mft[callee_id][caller_id].enable_req !=
		    mft[callee_id][caller_id].enable_ack) {
			enable = 1;
    97dc:	2701      	movne	r7, #1
    97de:	e78f      	b.n	9700 <mayfly_run+0x14>
			mft[callee_id][caller_id].enable_ack =
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
    97e0:	9b00      	ldr	r3, [sp, #0]
    97e2:	b12b      	cbz	r3, 97f0 <mayfly_run+0x104>
    97e4:	b927      	cbnz	r7, 97f0 <mayfly_run+0x104>
		mayfly_enable_cb(callee_id, callee_id, 0);
    97e6:	463a      	mov	r2, r7
    97e8:	4629      	mov	r1, r5
    97ea:	4628      	mov	r0, r5
    97ec:	f007 fab4 	bl	10d58 <mayfly_enable_cb>
	}
}
    97f0:	b007      	add	sp, #28
    97f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    97f6:	bf00      	nop
    97f8:	20001098 	.word	0x20001098

000097fc <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, u16_t mem_size, u16_t mem_count,
	      void **mem_head)
{
    97fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	*mem_head = mem_pool;
    97fe:	6018      	str	r0, [r3, #0]

	/* Store free mem_count after the list's next pointer at an aligned
	 * memory location to ensure atomic read/write (in ARM for now).
	 */
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    9800:	1dc3      	adds	r3, r0, #7

#include "mem.h"

void mem_init(void *mem_pool, u16_t mem_size, u16_t mem_count,
	      void **mem_head)
{
    9802:	4605      	mov	r5, r0
	*mem_head = mem_pool;

	/* Store free mem_count after the list's next pointer at an aligned
	 * memory location to ensure atomic read/write (in ARM for now).
	 */
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    9804:	f023 0303 	bic.w	r3, r3, #3

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    9808:	1e50      	subs	r0, r2, #1

#include "mem.h"

void mem_init(void *mem_pool, u16_t mem_size, u16_t mem_count,
	      void **mem_head)
{
    980a:	460e      	mov	r6, r1
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    980c:	b280      	uxth	r0, r0

#include "mem.h"

void mem_init(void *mem_pool, u16_t mem_size, u16_t mem_count,
	      void **mem_head)
{
    980e:	4614      	mov	r4, r2
	*mem_head = mem_pool;

	/* Store free mem_count after the list's next pointer at an aligned
	 * memory location to ensure atomic read/write (in ARM for now).
	 */
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    9810:	801a      	strh	r2, [r3, #0]

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    9812:	2100      	movs	r1, #0
    9814:	2204      	movs	r2, #4
    9816:	fb06 5000 	mla	r0, r6, r0, r5
    981a:	f7f7 fc66 	bl	10ea <memset>
    981e:	3c02      	subs	r4, #2
    9820:	b2a4      	uxth	r4, r4
	       sizeof(mem_pool));
	while (mem_count--) {
    9822:	f64f 77ff 	movw	r7, #65535	; 0xffff
    9826:	42bc      	cmp	r4, r7
    9828:	d00d      	beq.n	9846 <mem_init+0x4a>
		u32_t next;

		next = (u32_t)((u8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
    982a:	fb04 6006 	mla	r0, r4, r6, r6
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
	       sizeof(mem_pool));
	while (mem_count--) {
		u32_t next;

		next = (u32_t)((u8_t *) mem_pool +
    982e:	182b      	adds	r3, r5, r0
			       (mem_size * (mem_count + 1)));
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    9830:	2204      	movs	r2, #4
    9832:	1b80      	subs	r0, r0, r6
    9834:	eb0d 0102 	add.w	r1, sp, r2
    9838:	4428      	add	r0, r5
    983a:	3c01      	subs	r4, #1
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
	       sizeof(mem_pool));
	while (mem_count--) {
		u32_t next;

		next = (u32_t)((u8_t *) mem_pool +
    983c:	9301      	str	r3, [sp, #4]
    983e:	b2a4      	uxth	r4, r4
			       (mem_size * (mem_count + 1)));
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    9840:	f7f7 fc27 	bl	1092 <memcpy>
    9844:	e7ef      	b.n	9826 <mem_init+0x2a>
		       (void *)&next, sizeof(next));
	}
}
    9846:	b003      	add	sp, #12
    9848:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000984a <mem_acquire>:

void *mem_acquire(void **mem_head)
{
    984a:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (*mem_head) {
    984c:	6805      	ldr	r5, [r0, #0]
		       (void *)&next, sizeof(next));
	}
}

void *mem_acquire(void **mem_head)
{
    984e:	4606      	mov	r6, r0
	if (*mem_head) {
    9850:	b195      	cbz	r5, 9878 <mem_acquire+0x2e>
		u16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    9852:	1deb      	adds	r3, r5, #7
    9854:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
    9858:	2204      	movs	r2, #4
		u16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    985a:	881c      	ldrh	r4, [r3, #0]
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
    985c:	4629      	mov	r1, r5
    985e:	eb0d 0002 	add.w	r0, sp, r2
    9862:	f7f7 fc16 	bl	1092 <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
    9866:	9b01      	ldr	r3, [sp, #4]
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
					       sizeof(mem_head)));
		free_count--;
    9868:	3c01      	subs	r4, #1
    986a:	b2a4      	uxth	r4, r4

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));

		/* Store free mem_count after the list's next pointer */
		if (head) {
    986c:	b11b      	cbz	r3, 9876 <mem_acquire+0x2c>
			*((u16_t *)MROUND((u8_t *)head + sizeof(head))) =
    986e:	1dda      	adds	r2, r3, #7
    9870:	f022 0203 	bic.w	r2, r2, #3
    9874:	8014      	strh	r4, [r2, #0]
				free_count;
		}

		*mem_head = head;
    9876:	6033      	str	r3, [r6, #0]
		return mem;
	}

	return NULL;
}
    9878:	4628      	mov	r0, r5
    987a:	b002      	add	sp, #8
    987c:	bd70      	pop	{r4, r5, r6, pc}

0000987e <mem_release>:
void mem_release(void *mem, void **mem_head)
{
	u16_t free_count = 0;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
    987e:	680b      	ldr	r3, [r1, #0]

	return NULL;
}

void mem_release(void *mem, void **mem_head)
{
    9880:	b570      	push	{r4, r5, r6, lr}
    9882:	4606      	mov	r6, r0
    9884:	460d      	mov	r5, r1
	u16_t free_count = 0;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
    9886:	b123      	cbz	r3, 9892 <mem_release+0x14>
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    9888:	3307      	adds	r3, #7
    988a:	f023 0303 	bic.w	r3, r3, #3
    988e:	881c      	ldrh	r4, [r3, #0]
    9890:	e000      	b.n	9894 <mem_release+0x16>
	return NULL;
}

void mem_release(void *mem, void **mem_head)
{
	u16_t free_count = 0;
    9892:	461c      	mov	r4, r3
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
					       sizeof(mem_head)));
	}
	free_count++;

	memcpy(mem, mem_head, sizeof(mem));
    9894:	2204      	movs	r2, #4
    9896:	4629      	mov	r1, r5
    9898:	4630      	mov	r0, r6
    989a:	f7f7 fbfa 	bl	1092 <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
    989e:	1df2      	adds	r2, r6, #7
    98a0:	f022 0203 	bic.w	r2, r2, #3
    98a4:	1c63      	adds	r3, r4, #1
    98a6:	8013      	strh	r3, [r2, #0]

	*mem_head = mem;
    98a8:	602e      	str	r6, [r5, #0]
    98aa:	bd70      	pop	{r4, r5, r6, pc}

000098ac <mem_free_count_get>:
u16_t mem_free_count_get(void *mem_head)
{
	u16_t free_count = 0;

	/* Get the free count from the list */
	if (mem_head) {
    98ac:	b118      	cbz	r0, 98b6 <mem_free_count_get+0xa>
		free_count = *((u16_t *)MROUND((u8_t *)mem_head +
    98ae:	3007      	adds	r0, #7
    98b0:	f020 0003 	bic.w	r0, r0, #3
    98b4:	8800      	ldrh	r0, [r0, #0]
					       sizeof(mem_head)));
	}

	return free_count;
}
    98b6:	4770      	bx	lr

000098b8 <mem_get>:

void *mem_get(void *mem_pool, u16_t mem_size, u16_t index)
{
	return ((void *)((u8_t *)mem_pool + (mem_size * index)));
}
    98b8:	fb02 0001 	mla	r0, r2, r1, r0
    98bc:	4770      	bx	lr

000098be <mem_index_get>:

u16_t mem_index_get(void *mem, void *mem_pool, u16_t mem_size)
{
	return ((u16_t)((u8_t *)mem - (u8_t *)mem_pool) / mem_size);
    98be:	1a40      	subs	r0, r0, r1
    98c0:	b280      	uxth	r0, r0
}
    98c2:	fbb0 f0f2 	udiv	r0, r0, r2
    98c6:	4770      	bx	lr

000098c8 <mem_rcopy>:

void mem_rcopy(u8_t *dst, u8_t const *src, u16_t len)
{
	src += len;
    98c8:	440a      	add	r2, r1
    98ca:	3801      	subs	r0, #1
	while (len--) {
    98cc:	428a      	cmp	r2, r1
    98ce:	d004      	beq.n	98da <mem_rcopy+0x12>
		*dst++ = *--src;
    98d0:	f812 3d01 	ldrb.w	r3, [r2, #-1]!
    98d4:	f800 3f01 	strb.w	r3, [r0, #1]!
    98d8:	e7f8      	b.n	98cc <mem_rcopy+0x4>
	}
}
    98da:	4770      	bx	lr

000098dc <mem_nz>:

u8_t mem_nz(u8_t *src, u16_t len)
{
    98dc:	4401      	add	r1, r0
	while (len--) {
    98de:	4288      	cmp	r0, r1
    98e0:	d005      	beq.n	98ee <mem_nz+0x12>
		if (*src++) {
    98e2:	f810 3b01 	ldrb.w	r3, [r0], #1
    98e6:	2b00      	cmp	r3, #0
    98e8:	d0f9      	beq.n	98de <mem_nz+0x2>
			return 1;
    98ea:	2001      	movs	r0, #1
		}
	}

	return 0;
}
    98ec:	4770      	bx	lr
		if (*src++) {
			return 1;
		}
	}

	return 0;
    98ee:	2000      	movs	r0, #0
    98f0:	4770      	bx	lr

000098f2 <memq_init>:
inline void *memq_peek(void *tail, void *head, void **mem);

void *memq_init(void *link, void **head, void **tail)
{
	/* head and tail pointer to the initial link node */
	*head = *tail = link;
    98f2:	6010      	str	r0, [r2, #0]
    98f4:	6008      	str	r0, [r1, #0]

	return link;
}
    98f6:	4770      	bx	lr

000098f8 <memq_enqueue>:

void *memq_enqueue(void *mem, void *link, void **tail)
{
	/* make the current tail link node point to new link node */
	*((void **)*tail) = link;
    98f8:	6813      	ldr	r3, [r2, #0]
    98fa:	6019      	str	r1, [r3, #0]

	/* assign mem to current tail link node */
	*((void **)*tail + 1) = mem;
    98fc:	6813      	ldr	r3, [r2, #0]
    98fe:	6058      	str	r0, [r3, #4]

	/* increment the tail! */
	*tail = link;
    9900:	6011      	str	r1, [r2, #0]

	return link;
}
    9902:	4608      	mov	r0, r1
    9904:	4770      	bx	lr

00009906 <memq_peek>:
void *memq_peek(void *tail, void *head, void **mem)
{
	void *link;

	/* if head and tail are equal, then queue empty */
	if (head == tail) {
    9906:	4281      	cmp	r1, r0
    9908:	d003      	beq.n	9912 <memq_peek+0xc>

	/* pick the head link node */
	link = head;

	/* extract the element node */
	if (mem) {
    990a:	b122      	cbz	r2, 9916 <memq_peek+0x10>
		*mem = *((void **)link + 1);
    990c:	684b      	ldr	r3, [r1, #4]
    990e:	6013      	str	r3, [r2, #0]
    9910:	e001      	b.n	9916 <memq_peek+0x10>
{
	void *link;

	/* if head and tail are equal, then queue empty */
	if (head == tail) {
		return 0;
    9912:	2000      	movs	r0, #0
    9914:	4770      	bx	lr
    9916:	4608      	mov	r0, r1
	if (mem) {
		*mem = *((void **)link + 1);
	}

	return link;
}
    9918:	4770      	bx	lr

0000991a <memq_dequeue>:
void *memq_dequeue(void *tail, void **head, void **mem)
{
	void *link;

	/* use memq peek to get the link and mem */
	link = memq_peek(tail, *head, mem);
    991a:	680b      	ldr	r3, [r1, #0]
void *memq_peek(void *tail, void *head, void **mem)
{
	void *link;

	/* if head and tail are equal, then queue empty */
	if (head == tail) {
    991c:	4283      	cmp	r3, r0
    991e:	d003      	beq.n	9928 <memq_dequeue+0xe>

	/* pick the head link node */
	link = head;

	/* extract the element node */
	if (mem) {
    9920:	b12a      	cbz	r2, 992e <memq_dequeue+0x14>
		*mem = *((void **)link + 1);
    9922:	6858      	ldr	r0, [r3, #4]
    9924:	6010      	str	r0, [r2, #0]
    9926:	e002      	b.n	992e <memq_dequeue+0x14>

	/* use memq peek to get the link and mem */
	link = memq_peek(tail, *head, mem);

	/* increment the head to next link node */
	*head = *((void **)link);
    9928:	2300      	movs	r3, #0
    992a:	681b      	ldr	r3, [r3, #0]
    992c:	deff      	udf	#255	; 0xff
    992e:	681a      	ldr	r2, [r3, #0]
    9930:	600a      	str	r2, [r1, #0]

	return link;
}
    9932:	4618      	mov	r0, r3
    9934:	4770      	bx	lr

00009936 <util_ones_count_get>:

#include <zephyr/types.h>
#include "util.h"

u8_t util_ones_count_get(u8_t *octets, u8_t octets_len)
{
    9936:	b510      	push	{r4, lr}
    9938:	1e42      	subs	r2, r0, #1
	u8_t one_count = 0;
    993a:	2000      	movs	r0, #0

	while (octets_len--) {
    993c:	3901      	subs	r1, #1
    993e:	b2c9      	uxtb	r1, r1
    9940:	29ff      	cmp	r1, #255	; 0xff
    9942:	d008      	beq.n	9956 <util_ones_count_get+0x20>
		u8_t bite;

		bite = *octets;
    9944:	f812 3f01 	ldrb.w	r3, [r2, #1]!
		while (bite) {
    9948:	2b00      	cmp	r3, #0
    994a:	d0f7      	beq.n	993c <util_ones_count_get+0x6>
			bite &= (bite - 1);
    994c:	1e5c      	subs	r4, r3, #1
			one_count++;
    994e:	3001      	adds	r0, #1
	while (octets_len--) {
		u8_t bite;

		bite = *octets;
		while (bite) {
			bite &= (bite - 1);
    9950:	4023      	ands	r3, r4
			one_count++;
    9952:	b2c0      	uxtb	r0, r0
    9954:	e7f8      	b.n	9948 <util_ones_count_get+0x12>
		}
		octets++;
	}

	return one_count;
}
    9956:	bd10      	pop	{r4, pc}

00009958 <cntr_init>:

static u8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
    9958:	4b05      	ldr	r3, [pc, #20]	; (9970 <cntr_init+0x18>)
    995a:	2200      	movs	r2, #0
    995c:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	NRF_RTC->EVTENSET = (RTC_EVTENSET_COMPARE0_Msk |
    9960:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    9964:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
			     RTC_EVTENSET_COMPARE1_Msk);
	NRF_RTC->INTENSET = (RTC_INTENSET_COMPARE0_Msk |
    9968:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    996c:	4770      	bx	lr
    996e:	bf00      	nop
    9970:	4000b000 	.word	0x4000b000

00009974 <cntr_start>:
			     RTC_INTENSET_COMPARE1_Msk);
}

u32_t cntr_start(void)
{
	if (_refcount++) {
    9974:	4b05      	ldr	r3, [pc, #20]	; (998c <cntr_start+0x18>)
    9976:	7818      	ldrb	r0, [r3, #0]
    9978:	1c42      	adds	r2, r0, #1
    997a:	701a      	strb	r2, [r3, #0]
    997c:	2301      	movs	r3, #1
    997e:	b910      	cbnz	r0, 9986 <cntr_start+0x12>
		return 1;
	}

	NRF_RTC->TASKS_START = 1;
    9980:	4a03      	ldr	r2, [pc, #12]	; (9990 <cntr_start+0x1c>)
    9982:	6013      	str	r3, [r2, #0]

	return 0;
    9984:	4770      	bx	lr
}

u32_t cntr_start(void)
{
	if (_refcount++) {
		return 1;
    9986:	4618      	mov	r0, r3
	}

	NRF_RTC->TASKS_START = 1;

	return 0;
}
    9988:	4770      	bx	lr
    998a:	bf00      	nop
    998c:	20001158 	.word	0x20001158
    9990:	4000b000 	.word	0x4000b000

00009994 <cntr_stop>:

u32_t cntr_stop(void)
{
    9994:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT(_refcount);
    9996:	4b0f      	ldr	r3, [pc, #60]	; (99d4 <cntr_stop+0x40>)
    9998:	7818      	ldrb	r0, [r3, #0]
    999a:	b978      	cbnz	r0, 99bc <cntr_stop+0x28>
    999c:	4b0e      	ldr	r3, [pc, #56]	; (99d8 <cntr_stop+0x44>)
    999e:	9301      	str	r3, [sp, #4]
    99a0:	4b0e      	ldr	r3, [pc, #56]	; (99dc <cntr_stop+0x48>)
    99a2:	9300      	str	r3, [sp, #0]
    99a4:	4a0e      	ldr	r2, [pc, #56]	; (99e0 <cntr_stop+0x4c>)
    99a6:	4b0f      	ldr	r3, [pc, #60]	; (99e4 <cntr_stop+0x50>)
    99a8:	490f      	ldr	r1, [pc, #60]	; (99e8 <cntr_stop+0x54>)
    99aa:	4810      	ldr	r0, [pc, #64]	; (99ec <cntr_stop+0x58>)
    99ac:	f7f7 fd68 	bl	1480 <printk>
    99b0:	4040      	eors	r0, r0
    99b2:	f380 8811 	msr	BASEPRI, r0
    99b6:	f04f 0004 	mov.w	r0, #4
    99ba:	df02      	svc	2

	if (--_refcount) {
    99bc:	3801      	subs	r0, #1
    99be:	b2c0      	uxtb	r0, r0
    99c0:	7018      	strb	r0, [r3, #0]
    99c2:	2301      	movs	r3, #1
    99c4:	b910      	cbnz	r0, 99cc <cntr_stop+0x38>
		return 1;
	}

	NRF_RTC->TASKS_STOP = 1;
    99c6:	4a0a      	ldr	r2, [pc, #40]	; (99f0 <cntr_stop+0x5c>)
    99c8:	6053      	str	r3, [r2, #4]

	return 0;
    99ca:	e000      	b.n	99ce <cntr_stop+0x3a>
u32_t cntr_stop(void)
{
	LL_ASSERT(_refcount);

	if (--_refcount) {
		return 1;
    99cc:	4618      	mov	r0, r3
	}

	NRF_RTC->TASKS_STOP = 1;

	return 0;
}
    99ce:	b003      	add	sp, #12
    99d0:	f85d fb04 	ldr.w	pc, [sp], #4
    99d4:	20001158 	.word	0x20001158
    99d8:	00013df4 	.word	0x00013df4
    99dc:	00013df9 	.word	0x00013df9
    99e0:	00013db4 	.word	0x00013db4
    99e4:	00016678 	.word	0x00016678
    99e8:	00013dbb 	.word	0x00013dbb
    99ec:	000151b2 	.word	0x000151b2
    99f0:	4000b000 	.word	0x4000b000

000099f4 <cntr_cnt_get>:

u32_t cntr_cnt_get(void)
{
	return NRF_RTC->COUNTER;
    99f4:	4b01      	ldr	r3, [pc, #4]	; (99fc <cntr_cnt_get+0x8>)
    99f6:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
}
    99fa:	4770      	bx	lr
    99fc:	4000b000 	.word	0x4000b000

00009a00 <cntr_cmp_set>:

void cntr_cmp_set(u8_t cmp, u32_t value)
{
	NRF_RTC->CC[cmp] = value;
    9a00:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    9a04:	4b01      	ldr	r3, [pc, #4]	; (9a0c <cntr_cmp_set+0xc>)
    9a06:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
    9a0a:	4770      	bx	lr
    9a0c:	4000b000 	.word	0x4000b000

00009a10 <do_ecb>:
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
	do {
		NRF_ECB->TASKS_STOPECB = 1;
    9a10:	4b11      	ldr	r3, [pc, #68]	; (9a58 <do_ecb+0x48>)
	u8_t clear_text[16];
	u8_t cipher_text[16];
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
    9a12:	b570      	push	{r4, r5, r6, lr}
	do {
		NRF_ECB->TASKS_STOPECB = 1;
    9a14:	2201      	movs	r2, #1
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
		NRF_ECB->EVENTS_ENDECB = 0;
    9a16:	2400      	movs	r4, #0
    9a18:	461d      	mov	r5, r3
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
	do {
		NRF_ECB->TASKS_STOPECB = 1;
    9a1a:	605a      	str	r2, [r3, #4]
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
    9a1c:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
    9a20:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
    9a24:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
		NRF_ECB->TASKS_STARTECB = 1;
    9a28:	601a      	str	r2, [r3, #0]
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
    9a2a:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
    9a2e:	b931      	cbnz	r1, 9a3e <do_ecb+0x2e>
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
    9a30:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
		NRF_ECB->TASKS_STOPECB = 1;
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
		NRF_ECB->EVENTS_ENDECB = 0;
		NRF_ECB->EVENTS_ERRORECB = 0;
		NRF_ECB->TASKS_STARTECB = 1;
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
    9a34:	b919      	cbnz	r1, 9a3e <do_ecb+0x2e>
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
		       (NRF_ECB->ECBDATAPTR != 0)) {
    9a36:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
		NRF_ECB->EVENTS_ENDECB = 0;
		NRF_ECB->EVENTS_ERRORECB = 0;
		NRF_ECB->TASKS_STARTECB = 1;
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
    9a3a:	2900      	cmp	r1, #0
    9a3c:	d1f5      	bne.n	9a2a <do_ecb+0x1a>
		       (NRF_ECB->ECBDATAPTR != 0)) {
			/*__WFE();*/
		}
		NRF_ECB->TASKS_STOPECB = 1;
    9a3e:	606a      	str	r2, [r5, #4]
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
    9a40:	f8d5 1104 	ldr.w	r1, [r5, #260]	; 0x104
    9a44:	2900      	cmp	r1, #0
    9a46:	d1e8      	bne.n	9a1a <do_ecb+0xa>
    9a48:	f8d3 6504 	ldr.w	r6, [r3, #1284]	; 0x504
    9a4c:	2e00      	cmp	r6, #0
    9a4e:	d0e4      	beq.n	9a1a <do_ecb+0xa>

	NRF_ECB->ECBDATAPTR = 0;
    9a50:	4b01      	ldr	r3, [pc, #4]	; (9a58 <do_ecb+0x48>)
    9a52:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
    9a56:	bd70      	pop	{r4, r5, r6, pc}
    9a58:	4000e000 	.word	0x4000e000

00009a5c <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(u8_t const *const key_le, u8_t const *const clear_text_le,
		 u8_t * const cipher_text_le, u8_t * const cipher_text_be)
{
    9a5c:	b570      	push	{r4, r5, r6, lr}
    9a5e:	b08c      	sub	sp, #48	; 0x30
    9a60:	460e      	mov	r6, r1
    9a62:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
    9a64:	4601      	mov	r1, r0
    9a66:	2210      	movs	r2, #16
    9a68:	4668      	mov	r0, sp
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(u8_t const *const key_le, u8_t const *const clear_text_le,
		 u8_t * const cipher_text_le, u8_t * const cipher_text_be)
{
    9a6a:	461c      	mov	r4, r3
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
    9a6c:	f7ff ff2c 	bl	98c8 <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
    9a70:	2210      	movs	r2, #16
    9a72:	eb0d 0002 	add.w	r0, sp, r2
    9a76:	4631      	mov	r1, r6
    9a78:	f7ff ff26 	bl	98c8 <mem_rcopy>

	do_ecb(&ecb);
    9a7c:	4668      	mov	r0, sp
    9a7e:	f7ff ffc7 	bl	9a10 <do_ecb>

	if (cipher_text_le) {
    9a82:	b125      	cbz	r5, 9a8e <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
    9a84:	2210      	movs	r2, #16
    9a86:	a908      	add	r1, sp, #32
    9a88:	4628      	mov	r0, r5
    9a8a:	f7ff ff1d 	bl	98c8 <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
    9a8e:	b124      	cbz	r4, 9a9a <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
    9a90:	2210      	movs	r2, #16
    9a92:	a908      	add	r1, sp, #32
    9a94:	4620      	mov	r0, r4
    9a96:	f7f7 fafc 	bl	1092 <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
    9a9a:	b00c      	add	sp, #48	; 0x30
    9a9c:	bd70      	pop	{r4, r5, r6, pc}
	...

00009aa0 <isr_radio>:

static radio_isr_fp sfp_radio_isr;

void isr_radio(void)
{
	if (sfp_radio_isr) {
    9aa0:	4b02      	ldr	r3, [pc, #8]	; (9aac <isr_radio+0xc>)
    9aa2:	681b      	ldr	r3, [r3, #0]
    9aa4:	b103      	cbz	r3, 9aa8 <isr_radio+0x8>
		sfp_radio_isr();
    9aa6:	4718      	bx	r3
    9aa8:	4770      	bx	lr
    9aaa:	bf00      	nop
    9aac:	20001370 	.word	0x20001370

00009ab0 <radio_isr_set>:
	}
}

void radio_isr_set(radio_isr_fp fp_radio_isr)
{
	sfp_radio_isr = fp_radio_isr;	/* atomic assignment of 32-bit word */
    9ab0:	4b06      	ldr	r3, [pc, #24]	; (9acc <radio_isr_set+0x1c>)
    9ab2:	6018      	str	r0, [r3, #0]

	NRF_RADIO->INTENSET = (0 |
    9ab4:	4b06      	ldr	r3, [pc, #24]	; (9ad0 <radio_isr_set+0x20>)
    9ab6:	2210      	movs	r2, #16
    9ab8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
  \details Clears the pending bit of an external interrupt.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    9abc:	4b05      	ldr	r3, [pc, #20]	; (9ad4 <radio_isr_set+0x24>)
    9abe:	2202      	movs	r2, #2
    9ac0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
				/* | RADIO_INTENSET_RSSIEND_Msk |
				 */
	    );

	NVIC_ClearPendingIRQ(RADIO_IRQn);
	irq_enable(RADIO_IRQn);
    9ac4:	2001      	movs	r0, #1
    9ac6:	f008 bb3d 	b.w	12144 <_arch_irq_enable>
    9aca:	bf00      	nop
    9acc:	20001370 	.word	0x20001370
    9ad0:	40001000 	.word	0x40001000
    9ad4:	e000e100 	.word	0xe000e100

00009ad8 <radio_reset>:
}

void radio_reset(void)
{
    9ad8:	b508      	push	{r3, lr}
	irq_disable(RADIO_IRQn);
    9ada:	2001      	movs	r0, #1
    9adc:	f008 fb40 	bl	12160 <_arch_irq_disable>

	NRF_RADIO->POWER =
    9ae0:	4b03      	ldr	r3, [pc, #12]	; (9af0 <radio_reset+0x18>)
    9ae2:	2200      	movs	r2, #0
    9ae4:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
	    ((RADIO_POWER_POWER_Disabled << RADIO_POWER_POWER_Pos) &
	     RADIO_POWER_POWER_Msk);
	NRF_RADIO->POWER =
    9ae8:	2201      	movs	r2, #1
    9aea:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
    9aee:	bd08      	pop	{r3, pc}
    9af0:	40001000 	.word	0x40001000

00009af4 <radio_phy_set>:

void radio_phy_set(u8_t phy, u8_t flags)
{
	u32_t mode;

	switch (phy) {
    9af4:	2802      	cmp	r0, #2
		break;
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_SOC_SERIES_NRF52X */
	}

	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
    9af6:	4b03      	ldr	r3, [pc, #12]	; (9b04 <radio_phy_set+0x10>)
	u32_t mode;

	switch (phy) {
	case BIT(0):
	default:
		mode = RADIO_MODE_MODE_Ble_1Mbit;
    9af8:	bf0c      	ite	eq
    9afa:	2204      	moveq	r2, #4
    9afc:	2203      	movne	r2, #3
		break;
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_SOC_SERIES_NRF52X */
	}

	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
    9afe:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    9b02:	4770      	bx	lr
    9b04:	40001000 	.word	0x40001000

00009b08 <radio_tx_power_set>:
}

void radio_tx_power_set(u32_t power)
{
	/* TODO map power to h/w values. */
	NRF_RADIO->TXPOWER = power;
    9b08:	4b01      	ldr	r3, [pc, #4]	; (9b10 <radio_tx_power_set+0x8>)
    9b0a:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    9b0e:	4770      	bx	lr
    9b10:	40001000 	.word	0x40001000

00009b14 <radio_freq_chan_set>:
}

void radio_freq_chan_set(u32_t chan)
{
	NRF_RADIO->FREQUENCY = chan;
    9b14:	4b01      	ldr	r3, [pc, #4]	; (9b1c <radio_freq_chan_set+0x8>)
    9b16:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    9b1a:	4770      	bx	lr
    9b1c:	40001000 	.word	0x40001000

00009b20 <radio_whiten_iv_set>:
}

void radio_whiten_iv_set(u32_t iv)
{
	NRF_RADIO->DATAWHITEIV = iv;
    9b20:	4b01      	ldr	r3, [pc, #4]	; (9b28 <radio_whiten_iv_set+0x8>)
    9b22:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
    9b26:	4770      	bx	lr
    9b28:	40001000 	.word	0x40001000

00009b2c <radio_aa_set>:
}

void radio_aa_set(u8_t *aa)
{
	NRF_RADIO->TXADDRESS =
    9b2c:	4a0a      	ldr	r2, [pc, #40]	; (9b58 <radio_aa_set+0x2c>)
    9b2e:	2300      	movs	r3, #0
    9b30:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
	    (((0UL) << RADIO_TXADDRESS_TXADDRESS_Pos) &
	     RADIO_TXADDRESS_TXADDRESS_Msk);
	NRF_RADIO->RXADDRESSES =
    9b34:	2301      	movs	r3, #1
    9b36:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	    ((RADIO_RXADDRESSES_ADDR0_Enabled) << RADIO_RXADDRESSES_ADDR0_Pos);
	NRF_RADIO->PREFIX0 = aa[3];
    9b3a:	78c3      	ldrb	r3, [r0, #3]
    9b3c:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
    9b40:	7843      	ldrb	r3, [r0, #1]
    9b42:	7881      	ldrb	r1, [r0, #2]
    9b44:	041b      	lsls	r3, r3, #16
    9b46:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    9b4a:	7801      	ldrb	r1, [r0, #0]
    9b4c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    9b50:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
    9b54:	4770      	bx	lr
    9b56:	bf00      	nop
    9b58:	40001000 	.word	0x40001000

00009b5c <radio_pkt_configure>:
	}
#elif defined(CONFIG_SOC_SERIES_NRF52X)
	extra = 0;

	phy = (flags >> 1) & 0x07; /* phy */
	switch (phy) {
    9b5c:	f3c2 0342 	ubfx	r3, r2, #1, #3
	case BIT(0):
	default:
		extra |= (RADIO_PCNF0_PLEN_8bit << RADIO_PCNF0_PLEN_Pos) &
    9b60:	2b02      	cmp	r3, #2
    9b62:	bf0c      	ite	eq
    9b64:	f04f 7380 	moveq.w	r3, #16777216	; 0x1000000
    9b68:	2300      	movne	r3, #0
	}

	/* To use same Data Channel PDU structure with nRF5 specific overhead
	 * byte, include the S1 field in radio packet configuration.
	 */
	if (dc) {
    9b6a:	07d2      	lsls	r2, r2, #31
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
			    RADIO_PCNF0_S0LEN_Msk) |
			   ((((u32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) &
			    RADIO_PCNF0_LFLEN_Msk) |
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
			    RADIO_PCNF0_S1LEN_Msk) |
    9b6c:	f1c0 0208 	rsb	r2, r0, #8
    9b70:	ea4f 4202 	mov.w	r2, r2, lsl #16
    9b74:	f000 000f 	and.w	r0, r0, #15
    9b78:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
    9b7c:	f440 7080 	orr.w	r0, r0, #256	; 0x100

	/* To use same Data Channel PDU structure with nRF5 specific overhead
	 * byte, include the S1 field in radio packet configuration.
	 */
	if (dc) {
		extra |= (RADIO_PCNF0_S1INCL_Include <<
    9b80:	bf48      	it	mi
    9b82:	f443 1380 	orrmi.w	r3, r3, #1048576	; 0x100000
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
			    RADIO_PCNF0_S0LEN_Msk) |
			   ((((u32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) &
			    RADIO_PCNF0_LFLEN_Msk) |
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
			    RADIO_PCNF0_S1LEN_Msk) |
    9b86:	4310      	orrs	r0, r2
    9b88:	4318      	orrs	r0, r3
			       RADIO_PCNF1_STATLEN_Msk) |
			     (((3UL) << RADIO_PCNF1_BALEN_Pos) &
			       RADIO_PCNF1_BALEN_Msk) |
			     (((RADIO_PCNF1_ENDIAN_Little) <<
			       RADIO_PCNF1_ENDIAN_Pos) &
			      RADIO_PCNF1_ENDIAN_Msk) |
    9b8a:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
		extra |= (RADIO_PCNF0_S1INCL_Include <<
			  RADIO_PCNF0_S1INCL_Pos) & RADIO_PCNF0_S1INCL_Msk;
	}
#endif /* CONFIG_SOC_SERIES_NRF52X */

	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
    9b8e:	4b04      	ldr	r3, [pc, #16]	; (9ba0 <radio_pkt_configure+0x44>)
			       RADIO_PCNF1_STATLEN_Msk) |
			     (((3UL) << RADIO_PCNF1_BALEN_Pos) &
			       RADIO_PCNF1_BALEN_Msk) |
			     (((RADIO_PCNF1_ENDIAN_Little) <<
			       RADIO_PCNF1_ENDIAN_Pos) &
			      RADIO_PCNF1_ENDIAN_Msk) |
    9b90:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
		extra |= (RADIO_PCNF0_S1INCL_Include <<
			  RADIO_PCNF0_S1INCL_Pos) & RADIO_PCNF0_S1INCL_Msk;
	}
#endif /* CONFIG_SOC_SERIES_NRF52X */

	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
    9b94:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
			    RADIO_PCNF0_LFLEN_Msk) |
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
			    RADIO_PCNF0_S1LEN_Msk) |
			   extra;

	NRF_RADIO->PCNF1 = (((((u32_t)max_len) << RADIO_PCNF1_MAXLEN_Pos) &
    9b98:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    9b9c:	4770      	bx	lr
    9b9e:	bf00      	nop
    9ba0:	40001000 	.word	0x40001000

00009ba4 <radio_pkt_rx_set>:
    9ba4:	4b01      	ldr	r3, [pc, #4]	; (9bac <radio_pkt_rx_set+0x8>)
    9ba6:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    9baa:	4770      	bx	lr
    9bac:	40001000 	.word	0x40001000

00009bb0 <radio_pkt_tx_set>:
	NRF_RADIO->PACKETPTR = (u32_t)rx_packet;
}

void radio_pkt_tx_set(void *tx_packet)
{
	NRF_RADIO->PACKETPTR = (u32_t)tx_packet;
    9bb0:	4b01      	ldr	r3, [pc, #4]	; (9bb8 <radio_pkt_tx_set+0x8>)
    9bb2:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    9bb6:	4770      	bx	lr
    9bb8:	40001000 	.word	0x40001000

00009bbc <radio_tx_ready_delay_get>:
#else /* !CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW */
	return 131; /* floor(129.5 + 1.6) */
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW */
#endif /* !CONFIG_SOC_NRF52840 */
#endif /* CONFIG_SOC_SERIES_NRF52X */
}
    9bbc:	208c      	movs	r0, #140	; 0x8c
    9bbe:	4770      	bx	lr

00009bc0 <radio_tx_chain_delay_get>:
	}
#else /* !CONFIG_SOC_NRF52840 */
	return 1; /* ceil(0.6) */
#endif /* !CONFIG_SOC_NRF52840 */
#endif /* CONFIG_SOC_SERIES_NRF52X */
}
    9bc0:	2001      	movs	r0, #1
    9bc2:	4770      	bx	lr

00009bc4 <radio_rx_ready_delay_get>:
#else /* !CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW */
	return 130; /* ceil(129.5 + 0.2) */
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW */
#endif /* !CONFIG_SOC_NRF52840 */
#endif /* CONFIG_SOC_SERIES_NRF52X */
}
    9bc4:	208c      	movs	r0, #140	; 0x8c
    9bc6:	4770      	bx	lr

00009bc8 <radio_rx_chain_delay_get>:
		} else {
			return 20; /* ciel(19.6) */
		}
	}
#else /* !CONFIG_SOC_NRF52840 */
	switch (phy) {
    9bc8:	2802      	cmp	r0, #2
	case BIT(1):
		return 5; /* ceil(5) */
	}
#endif /* !CONFIG_SOC_NRF52840 */
#endif /* CONFIG_SOC_SERIES_NRF52X */
}
    9bca:	bf0c      	ite	eq
    9bcc:	2005      	moveq	r0, #5
    9bce:	200a      	movne	r0, #10
    9bd0:	4770      	bx	lr
	...

00009bd4 <radio_rx_enable>:

void radio_rx_enable(void)
{
	NRF_RADIO->TASKS_RXEN = 1;
    9bd4:	4b01      	ldr	r3, [pc, #4]	; (9bdc <radio_rx_enable+0x8>)
    9bd6:	2201      	movs	r2, #1
    9bd8:	605a      	str	r2, [r3, #4]
    9bda:	4770      	bx	lr
    9bdc:	40001000 	.word	0x40001000

00009be0 <radio_tx_enable>:
}

void radio_tx_enable(void)
{
	NRF_RADIO->TASKS_TXEN = 1;
    9be0:	4b01      	ldr	r3, [pc, #4]	; (9be8 <radio_tx_enable+0x8>)
    9be2:	2201      	movs	r2, #1
    9be4:	601a      	str	r2, [r3, #0]
    9be6:	4770      	bx	lr
    9be8:	40001000 	.word	0x40001000

00009bec <radio_disable>:
	NRF_PPI->CHENCLR = PPI_CHEN_CH8_Msk | PPI_CHEN_CH11_Msk;
	NRF_PPI->TASKS_CHG[0].DIS = 1;
	NRF_PPI->TASKS_CHG[1].DIS = 1;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW */

	NRF_RADIO->SHORTS = 0;
    9bec:	4b03      	ldr	r3, [pc, #12]	; (9bfc <radio_disable+0x10>)
    9bee:	2200      	movs	r2, #0
    9bf0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	NRF_RADIO->TASKS_DISABLE = 1;
    9bf4:	2201      	movs	r2, #1
    9bf6:	611a      	str	r2, [r3, #16]
    9bf8:	4770      	bx	lr
    9bfa:	bf00      	nop
    9bfc:	40001000 	.word	0x40001000

00009c00 <radio_status_reset>:
}

void radio_status_reset(void)
{
	NRF_RADIO->EVENTS_READY = 0;
    9c00:	4b06      	ldr	r3, [pc, #24]	; (9c1c <radio_status_reset+0x1c>)
    9c02:	2200      	movs	r2, #0
    9c04:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_ADDRESS = 0;
    9c08:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_RADIO->EVENTS_PAYLOAD = 0;
    9c0c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	NRF_RADIO->EVENTS_END = 0;
    9c10:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
    9c14:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    9c18:	4770      	bx	lr
    9c1a:	bf00      	nop
    9c1c:	40001000 	.word	0x40001000

00009c20 <radio_is_ready>:
}

u32_t radio_is_ready(void)
{
	return (NRF_RADIO->EVENTS_READY != 0);
    9c20:	4b03      	ldr	r3, [pc, #12]	; (9c30 <radio_is_ready+0x10>)
    9c22:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
    9c26:	3000      	adds	r0, #0
    9c28:	bf18      	it	ne
    9c2a:	2001      	movne	r0, #1
    9c2c:	4770      	bx	lr
    9c2e:	bf00      	nop
    9c30:	40001000 	.word	0x40001000

00009c34 <radio_is_done>:

u32_t radio_is_done(void)
{
	return (NRF_RADIO->EVENTS_END != 0);
    9c34:	4b03      	ldr	r3, [pc, #12]	; (9c44 <radio_is_done+0x10>)
    9c36:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
    9c3a:	3000      	adds	r0, #0
    9c3c:	bf18      	it	ne
    9c3e:	2001      	movne	r0, #1
    9c40:	4770      	bx	lr
    9c42:	bf00      	nop
    9c44:	40001000 	.word	0x40001000

00009c48 <radio_is_idle>:
	return (NRF_RADIO->EVENTS_DISABLED != 0);
}

u32_t radio_is_idle(void)
{
	return (NRF_RADIO->STATE == 0);
    9c48:	4b03      	ldr	r3, [pc, #12]	; (9c58 <radio_is_idle+0x10>)
    9c4a:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
    9c4e:	fab0 f080 	clz	r0, r0
    9c52:	0940      	lsrs	r0, r0, #5
    9c54:	4770      	bx	lr
    9c56:	bf00      	nop
    9c58:	40001000 	.word	0x40001000

00009c5c <radio_crc_configure>:

void radio_crc_configure(u32_t polynomial, u32_t iv)
{
	NRF_RADIO->CRCCNF =
    9c5c:	4b04      	ldr	r3, [pc, #16]	; (9c70 <radio_crc_configure+0x14>)
    9c5e:	f240 1203 	movw	r2, #259	; 0x103
    9c62:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	    (((RADIO_CRCCNF_SKIPADDR_Skip) << RADIO_CRCCNF_SKIPADDR_Pos) &
	     RADIO_CRCCNF_SKIPADDR_Msk) |
	    (((RADIO_CRCCNF_LEN_Three) << RADIO_CRCCNF_LEN_Pos) &
	       RADIO_CRCCNF_LEN_Msk);
	NRF_RADIO->CRCPOLY = polynomial;
    9c66:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
    9c6a:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
    9c6e:	4770      	bx	lr
    9c70:	40001000 	.word	0x40001000

00009c74 <radio_crc_is_valid>:
}

u32_t radio_crc_is_valid(void)
{
	return (NRF_RADIO->CRCSTATUS != 0);
    9c74:	4b03      	ldr	r3, [pc, #12]	; (9c84 <radio_crc_is_valid+0x10>)
    9c76:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
    9c7a:	3000      	adds	r0, #0
    9c7c:	bf18      	it	ne
    9c7e:	2001      	movne	r0, #1
    9c80:	4770      	bx	lr
    9c82:	bf00      	nop
    9c84:	40001000 	.word	0x40001000

00009c88 <radio_pkt_empty_get>:
			(RADIO_PDU_LEN_MAX + 3) : PDU_AC_SIZE_MAX];

void *radio_pkt_empty_get(void)
{
	return _pkt_empty;
}
    9c88:	4800      	ldr	r0, [pc, #0]	; (9c8c <radio_pkt_empty_get+0x4>)
    9c8a:	4770      	bx	lr
    9c8c:	20001260 	.word	0x20001260

00009c90 <radio_pkt_scratch_get>:

void *radio_pkt_scratch_get(void)
{
	return _pkt_scratch;
}
    9c90:	4800      	ldr	r0, [pc, #0]	; (9c94 <radio_pkt_scratch_get+0x4>)
    9c92:	4770      	bx	lr
    9c94:	2000115c 	.word	0x2000115c

00009c98 <radio_switch_complete_and_rx>:
#endif /* CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW */

void radio_switch_complete_and_rx(u8_t phy)
{
#if defined(CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
    9c98:	4b02      	ldr	r3, [pc, #8]	; (9ca4 <radio_switch_complete_and_rx+0xc>)
    9c9a:	220b      	movs	r2, #11
    9c9c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    9ca0:	4770      	bx	lr
    9ca2:	bf00      	nop
    9ca4:	40001000 	.word	0x40001000

00009ca8 <radio_switch_complete_and_tx>:
}

void radio_switch_complete_and_tx(u8_t phy, u8_t flags)
{
#if defined(CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
    9ca8:	4b02      	ldr	r3, [pc, #8]	; (9cb4 <radio_switch_complete_and_tx+0xc>)
    9caa:	2207      	movs	r2, #7
    9cac:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    9cb0:	4770      	bx	lr
    9cb2:	bf00      	nop
    9cb4:	40001000 	.word	0x40001000

00009cb8 <radio_switch_complete_and_disable>:
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW */
}

void radio_switch_complete_and_disable(void)
{
	NRF_RADIO->SHORTS =
    9cb8:	4b02      	ldr	r3, [pc, #8]	; (9cc4 <radio_switch_complete_and_disable+0xc>)
    9cba:	2203      	movs	r2, #3
    9cbc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    9cc0:	4770      	bx	lr
    9cc2:	bf00      	nop
    9cc4:	40001000 	.word	0x40001000

00009cc8 <radio_rssi_measure>:
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW */
}

void radio_rssi_measure(void)
{
	NRF_RADIO->SHORTS |=
    9cc8:	4a03      	ldr	r2, [pc, #12]	; (9cd8 <radio_rssi_measure+0x10>)
    9cca:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    9cce:	f443 7388 	orr.w	r3, r3, #272	; 0x110
    9cd2:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    9cd6:	4770      	bx	lr
    9cd8:	40001000 	.word	0x40001000

00009cdc <radio_rssi_get>:
	     RADIO_SHORTS_DISABLED_RSSISTOP_Msk);
}

u32_t radio_rssi_get(void)
{
	return NRF_RADIO->RSSISAMPLE;
    9cdc:	4b01      	ldr	r3, [pc, #4]	; (9ce4 <radio_rssi_get+0x8>)
    9cde:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
    9ce2:	4770      	bx	lr
    9ce4:	40001000 	.word	0x40001000

00009ce8 <radio_rssi_status_reset>:

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
    9ce8:	4b02      	ldr	r3, [pc, #8]	; (9cf4 <radio_rssi_status_reset+0xc>)
    9cea:	2200      	movs	r2, #0
    9cec:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    9cf0:	4770      	bx	lr
    9cf2:	bf00      	nop
    9cf4:	40001000 	.word	0x40001000

00009cf8 <radio_rssi_is_ready>:
}

u32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
    9cf8:	4b03      	ldr	r3, [pc, #12]	; (9d08 <radio_rssi_is_ready+0x10>)
    9cfa:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
    9cfe:	3000      	adds	r0, #0
    9d00:	bf18      	it	ne
    9d02:	2001      	movne	r0, #1
    9d04:	4770      	bx	lr
    9d06:	bf00      	nop
    9d08:	40001000 	.word	0x40001000

00009d0c <radio_filter_configure>:

void radio_filter_configure(u8_t bitmask_enable, u8_t bitmask_addr_type,
			    u8_t *bdaddr)
{
    9d0c:	b530      	push	{r4, r5, lr}
    9d0e:	2400      	movs	r4, #0
    9d10:	00a3      	lsls	r3, r4, #2
    9d12:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    9d16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
	u8_t index;

	for (index = 0; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
			((u32_t)bdaddr[2] << 16) |
			((u32_t)bdaddr[1] << 8) |
    9d1a:	6815      	ldr	r5, [r2, #0]
			    u8_t *bdaddr)
{
	u8_t index;

	for (index = 0; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
    9d1c:	f8c3 5600 	str.w	r5, [r3, #1536]	; 0x600
    9d20:	3401      	adds	r4, #1
			((u32_t)bdaddr[2] << 16) |
			((u32_t)bdaddr[1] << 8) |
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((u32_t)bdaddr[5] << 8) | bdaddr[4];
    9d22:	8895      	ldrh	r5, [r2, #4]
    9d24:	f8c3 5620 	str.w	r5, [r3, #1568]	; 0x620
void radio_filter_configure(u8_t bitmask_enable, u8_t bitmask_addr_type,
			    u8_t *bdaddr)
{
	u8_t index;

	for (index = 0; index < 8; index++) {
    9d28:	2c08      	cmp	r4, #8
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
			((u32_t)bdaddr[2] << 16) |
			((u32_t)bdaddr[1] << 8) |
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((u32_t)bdaddr[5] << 8) | bdaddr[4];
		bdaddr += 6;
    9d2a:	f102 0206 	add.w	r2, r2, #6
void radio_filter_configure(u8_t bitmask_enable, u8_t bitmask_addr_type,
			    u8_t *bdaddr)
{
	u8_t index;

	for (index = 0; index < 8; index++) {
    9d2e:	d1ef      	bne.n	9d10 <radio_filter_configure+0x4>
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((u32_t)bdaddr[5] << 8) | bdaddr[4];
		bdaddr += 6;
	}

	NRF_RADIO->DACNF = ((u32_t)bitmask_addr_type << 8) | bitmask_enable;
    9d30:	4b02      	ldr	r3, [pc, #8]	; (9d3c <radio_filter_configure+0x30>)
    9d32:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
    9d36:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
    9d3a:	bd30      	pop	{r4, r5, pc}
    9d3c:	40001000 	.word	0x40001000

00009d40 <radio_filter_disable>:
}

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
    9d40:	4a03      	ldr	r2, [pc, #12]	; (9d50 <radio_filter_disable+0x10>)
    9d42:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
    9d46:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    9d4a:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
    9d4e:	4770      	bx	lr
    9d50:	40001000 	.word	0x40001000

00009d54 <radio_filter_status_reset>:
}

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
    9d54:	4b03      	ldr	r3, [pc, #12]	; (9d64 <radio_filter_status_reset+0x10>)
    9d56:	2200      	movs	r2, #0
    9d58:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	NRF_RADIO->EVENTS_DEVMISS = 0;
    9d5c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    9d60:	4770      	bx	lr
    9d62:	bf00      	nop
    9d64:	40001000 	.word	0x40001000

00009d68 <radio_filter_has_match>:
}

u32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
    9d68:	4b03      	ldr	r3, [pc, #12]	; (9d78 <radio_filter_has_match+0x10>)
    9d6a:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
    9d6e:	3000      	adds	r0, #0
    9d70:	bf18      	it	ne
    9d72:	2001      	movne	r0, #1
    9d74:	4770      	bx	lr
    9d76:	bf00      	nop
    9d78:	40001000 	.word	0x40001000

00009d7c <radio_bc_configure>:

void radio_bc_configure(u32_t n)
{
	NRF_RADIO->BCC = n;
    9d7c:	4b04      	ldr	r3, [pc, #16]	; (9d90 <radio_bc_configure+0x14>)
    9d7e:	f8c3 0560 	str.w	r0, [r3, #1376]	; 0x560
	NRF_RADIO->SHORTS |= RADIO_SHORTS_ADDRESS_BCSTART_Msk;
    9d82:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    9d86:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    9d8a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    9d8e:	4770      	bx	lr
    9d90:	40001000 	.word	0x40001000

00009d94 <radio_tmr_status_reset>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
}

void radio_tmr_status_reset(void)
{
	NRF_RTC0->EVTENCLR = RTC_EVTENCLR_COMPARE2_Msk;
    9d94:	4b05      	ldr	r3, [pc, #20]	; (9dac <radio_tmr_status_reset+0x18>)
    9d96:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    9d9a:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
	NRF_PPI->CHENCLR =
    9d9e:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
    9da2:	22ff      	movs	r2, #255	; 0xff
    9da4:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    9da8:	4770      	bx	lr
    9daa:	bf00      	nop
    9dac:	4000b000 	.word	0x4000b000

00009db0 <radio_tmr_tifs_set>:
}

void radio_tmr_tifs_set(u32_t tifs)
{
#if defined(CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
    9db0:	4b01      	ldr	r3, [pc, #4]	; (9db8 <radio_tmr_tifs_set+0x8>)
    9db2:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
    9db6:	4770      	bx	lr
    9db8:	40001000 	.word	0x40001000

00009dbc <radio_tmr_start>:
	NRF_TIMER1->CC[sw_tifs_toggle] = tifs;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW */
}

u32_t radio_tmr_start(u8_t trx, u32_t ticks_start, u32_t remainder)
{
    9dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
    9dbe:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
    9dc2:	4c23      	ldr	r4, [pc, #140]	; (9e50 <radio_tmr_start+0x94>)
    9dc4:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
    9dc8:	42a3      	cmp	r3, r4
		ticks_start--;
		remainder += 30517578UL;
    9dca:	bf88      	it	hi
    9dcc:	f102 72e8 	addhi.w	r2, r2, #30408704	; 0x1d00000
	}
	remainder /= 1000000UL;

	NRF_TIMER0->TASKS_CLEAR = 1;
    9dd0:	4c20      	ldr	r4, [pc, #128]	; (9e54 <radio_tmr_start+0x98>)
{
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
		ticks_start--;
		remainder += 30517578UL;
	}
	remainder /= 1000000UL;
    9dd2:	4b21      	ldr	r3, [pc, #132]	; (9e58 <radio_tmr_start+0x9c>)

u32_t radio_tmr_start(u8_t trx, u32_t ticks_start, u32_t remainder)
{
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
		ticks_start--;
		remainder += 30517578UL;
    9dd4:	bf88      	it	hi
    9dd6:	f502 32d4 	addhi.w	r2, r2, #108544	; 0x1a800
	}
	remainder /= 1000000UL;

	NRF_TIMER0->TASKS_CLEAR = 1;
	NRF_TIMER0->MODE = 0;
    9dda:	f04f 0600 	mov.w	r6, #0

u32_t radio_tmr_start(u8_t trx, u32_t ticks_start, u32_t remainder)
{
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
		ticks_start--;
		remainder += 30517578UL;
    9dde:	bf88      	it	hi
    9de0:	f502 72a5 	addhi.w	r2, r2, #330	; 0x14a
	}
	remainder /= 1000000UL;

	NRF_TIMER0->TASKS_CLEAR = 1;
    9de4:	f04f 0501 	mov.w	r5, #1
{
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
		ticks_start--;
		remainder += 30517578UL;
	}
	remainder /= 1000000UL;
    9de8:	fbb2 f2f3 	udiv	r2, r2, r3

	NRF_TIMER0->TASKS_CLEAR = 1;
	NRF_TIMER0->MODE = 0;
	NRF_TIMER0->PRESCALER = 4;
    9dec:	f04f 0304 	mov.w	r3, #4
		ticks_start--;
		remainder += 30517578UL;
	}
	remainder /= 1000000UL;

	NRF_TIMER0->TASKS_CLEAR = 1;
    9df0:	60e5      	str	r5, [r4, #12]
	NRF_TIMER0->MODE = 0;
    9df2:	f8c4 6504 	str.w	r6, [r4, #1284]	; 0x504
	NRF_TIMER0->PRESCALER = 4;
    9df6:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
	NRF_TIMER0->BITMODE = 2;	/* 24 - bit */

	NRF_TIMER0->CC[0] = remainder;
	NRF_TIMER0->EVENTS_COMPARE[0] = 0;

	NRF_RTC0->CC[2] = ticks_start;
    9dfa:	4b18      	ldr	r3, [pc, #96]	; (9e5c <radio_tmr_start+0xa0>)
}

u32_t radio_tmr_start(u8_t trx, u32_t ticks_start, u32_t remainder)
{
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
		ticks_start--;
    9dfc:	bf88      	it	hi
    9dfe:	f101 31ff 	addhi.w	r1, r1, #4294967295
	remainder /= 1000000UL;

	NRF_TIMER0->TASKS_CLEAR = 1;
	NRF_TIMER0->MODE = 0;
	NRF_TIMER0->PRESCALER = 4;
	NRF_TIMER0->BITMODE = 2;	/* 24 - bit */
    9e02:	2702      	movs	r7, #2
    9e04:	f8c4 7508 	str.w	r7, [r4, #1288]	; 0x508

	NRF_TIMER0->CC[0] = remainder;
    9e08:	f8c4 2540 	str.w	r2, [r4, #1344]	; 0x540
	NRF_TIMER0->EVENTS_COMPARE[0] = 0;
    9e0c:	f8c4 6140 	str.w	r6, [r4, #320]	; 0x140

	NRF_RTC0->CC[2] = ticks_start;
    9e10:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
	NRF_RTC0->EVTENSET = RTC_EVTENSET_COMPARE2_Msk;
    9e14:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    9e18:	f8c3 1344 	str.w	r1, [r3, #836]	; 0x344
	NRF_RTC0->EVENTS_COMPARE[2] = 0;
    9e1c:	f8c3 6148 	str.w	r6, [r3, #328]	; 0x148

	NRF_PPI->CH[1].EEP = (u32_t)&(NRF_RTC0->EVENTS_COMPARE[2]);
    9e20:	490f      	ldr	r1, [pc, #60]	; (9e60 <radio_tmr_start+0xa4>)
    9e22:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
    9e26:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    9e2a:	f5a1 5140 	sub.w	r1, r1, #12288	; 0x3000
    9e2e:	3908      	subs	r1, #8
	NRF_PPI->CH[1].TEP = (u32_t)&(NRF_TIMER0->TASKS_START);
    9e30:	f8c3 451c 	str.w	r4, [r3, #1308]	; 0x51c
	NRF_PPI->CHENSET = PPI_CHEN_CH1_Msk;
    9e34:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504

	if (trx) {
		NRF_PPI->CH[0].EEP =
    9e38:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510

	NRF_PPI->CH[1].EEP = (u32_t)&(NRF_RTC0->EVENTS_COMPARE[2]);
	NRF_PPI->CH[1].TEP = (u32_t)&(NRF_TIMER0->TASKS_START);
	NRF_PPI->CHENSET = PPI_CHEN_CH1_Msk;

	if (trx) {
    9e3c:	b108      	cbz	r0, 9e42 <radio_tmr_start+0x86>
		NRF_PPI->CH[0].EEP =
			(u32_t)&(NRF_TIMER0->EVENTS_COMPARE[0]);
		NRF_PPI->CH[0].TEP =
    9e3e:	4909      	ldr	r1, [pc, #36]	; (9e64 <radio_tmr_start+0xa8>)
    9e40:	e000      	b.n	9e44 <radio_tmr_start+0x88>
			(u32_t)&(NRF_RADIO->TASKS_TXEN);
		NRF_PPI->CHENSET = PPI_CHEN_CH0_Msk;
	} else {
		NRF_PPI->CH[0].EEP =
			(u32_t)&(NRF_TIMER0->EVENTS_COMPARE[0]);
		NRF_PPI->CH[0].TEP =
    9e42:	4909      	ldr	r1, [pc, #36]	; (9e68 <radio_tmr_start+0xac>)
    9e44:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
	NRF_PPI->CHG[0] = PPI_CHG_CH9_Msk | PPI_CHG_CH12_Msk;
	NRF_PPI->CHG[1] = PPI_CHG_CH10_Msk | PPI_CHG_CH13_Msk;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW */

	return remainder;
}
    9e48:	4610      	mov	r0, r2
	} else {
		NRF_PPI->CH[0].EEP =
			(u32_t)&(NRF_TIMER0->EVENTS_COMPARE[0]);
		NRF_PPI->CH[0].TEP =
			(u32_t)&(NRF_RADIO->TASKS_RXEN);
		NRF_PPI->CHENSET = PPI_CHEN_CH0_Msk;
    9e4a:	f8c3 5504 	str.w	r5, [r3, #1284]	; 0x504
	NRF_PPI->CHG[0] = PPI_CHG_CH9_Msk | PPI_CHG_CH12_Msk;
	NRF_PPI->CHG[1] = PPI_CHG_CH10_Msk | PPI_CHG_CH13_Msk;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW */

	return remainder;
}
    9e4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9e50:	7ff0bdbf 	.word	0x7ff0bdbf
    9e54:	40008000 	.word	0x40008000
    9e58:	000f4240 	.word	0x000f4240
    9e5c:	4000b000 	.word	0x4000b000
    9e60:	4000b148 	.word	0x4000b148
    9e64:	40001000 	.word	0x40001000
    9e68:	40001004 	.word	0x40001004

00009e6c <radio_tmr_stop>:

void radio_tmr_stop(void)
{
	NRF_TIMER0->TASKS_STOP = 1;
    9e6c:	4b02      	ldr	r3, [pc, #8]	; (9e78 <radio_tmr_stop+0xc>)
    9e6e:	2201      	movs	r2, #1
    9e70:	605a      	str	r2, [r3, #4]
	NRF_TIMER0->TASKS_SHUTDOWN = 1;
    9e72:	611a      	str	r2, [r3, #16]
    9e74:	4770      	bx	lr
    9e76:	bf00      	nop
    9e78:	40008000 	.word	0x40008000

00009e7c <radio_tmr_hcto_configure>:
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW */
}

void radio_tmr_hcto_configure(u32_t hcto)
{
	NRF_TIMER0->CC[2] = hcto;
    9e7c:	4b0e      	ldr	r3, [pc, #56]	; (9eb8 <radio_tmr_hcto_configure+0x3c>)
	NRF_TIMER0->EVENTS_COMPARE[2] = 0;
    9e7e:	2200      	movs	r2, #0
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW */
}

void radio_tmr_hcto_configure(u32_t hcto)
{
	NRF_TIMER0->CC[2] = hcto;
    9e80:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
	NRF_TIMER0->EVENTS_COMPARE[2] = 0;
    9e84:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

	NRF_PPI->CH[4].EEP = (u32_t)&(NRF_RADIO->EVENTS_ADDRESS);
    9e88:	f503 33b8 	add.w	r3, r3, #94208	; 0x17000
    9e8c:	4a0b      	ldr	r2, [pc, #44]	; (9ebc <radio_tmr_hcto_configure+0x40>)
    9e8e:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
	NRF_PPI->CH[4].TEP = (u32_t)&(NRF_TIMER0->TASKS_CAPTURE[2]);
    9e92:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
    9e96:	3244      	adds	r2, #68	; 0x44
    9e98:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	NRF_PPI->CH[5].EEP = (u32_t)&(NRF_TIMER0->EVENTS_COMPARE[2]);
    9e9c:	f502 7280 	add.w	r2, r2, #256	; 0x100
    9ea0:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
	NRF_PPI->CH[5].TEP = (u32_t)&(NRF_RADIO->TASKS_DISABLE);
    9ea4:	f5a2 42e2 	sub.w	r2, r2, #28928	; 0x7100
    9ea8:	3a38      	subs	r2, #56	; 0x38
    9eaa:	f8c3 253c 	str.w	r2, [r3, #1340]	; 0x53c
	NRF_PPI->CHENSET = (PPI_CHEN_CH4_Msk | PPI_CHEN_CH5_Msk);
    9eae:	2230      	movs	r2, #48	; 0x30
    9eb0:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    9eb4:	4770      	bx	lr
    9eb6:	bf00      	nop
    9eb8:	40008000 	.word	0x40008000
    9ebc:	40001104 	.word	0x40001104

00009ec0 <radio_tmr_aa_capture>:
}

void radio_tmr_aa_capture(void)
{
	NRF_PPI->CH[2].EEP = (u32_t)&(NRF_RADIO->EVENTS_READY);
    9ec0:	4b0b      	ldr	r3, [pc, #44]	; (9ef0 <radio_tmr_aa_capture+0x30>)
    9ec2:	4a0c      	ldr	r2, [pc, #48]	; (9ef4 <radio_tmr_aa_capture+0x34>)
    9ec4:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
	NRF_PPI->CH[2].TEP = (u32_t)&(NRF_TIMER0->TASKS_CAPTURE[0]);
    9ec8:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
    9ecc:	3240      	adds	r2, #64	; 0x40
    9ece:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	NRF_PPI->CH[3].EEP = (u32_t)&(NRF_RADIO->EVENTS_ADDRESS);
    9ed2:	f5a2 42de 	sub.w	r2, r2, #28416	; 0x6f00
    9ed6:	3a3c      	subs	r2, #60	; 0x3c
    9ed8:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
	NRF_PPI->CH[3].TEP = (u32_t)&(NRF_TIMER0->TASKS_CAPTURE[1]);
    9edc:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
    9ee0:	3240      	adds	r2, #64	; 0x40
    9ee2:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
	NRF_PPI->CHENSET = (PPI_CHEN_CH2_Msk | PPI_CHEN_CH3_Msk);
    9ee6:	220c      	movs	r2, #12
    9ee8:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    9eec:	4770      	bx	lr
    9eee:	bf00      	nop
    9ef0:	4001f000 	.word	0x4001f000
    9ef4:	40001100 	.word	0x40001100

00009ef8 <radio_tmr_aa_get>:
}

u32_t radio_tmr_aa_get(void)
{
	return (NRF_TIMER0->CC[1] - NRF_TIMER0->CC[0]);
    9ef8:	4b03      	ldr	r3, [pc, #12]	; (9f08 <radio_tmr_aa_get+0x10>)
    9efa:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
    9efe:	f8d3 3540 	ldr.w	r3, [r3, #1344]	; 0x540
}
    9f02:	1ac0      	subs	r0, r0, r3
    9f04:	4770      	bx	lr
    9f06:	bf00      	nop
    9f08:	40008000 	.word	0x40008000

00009f0c <radio_tmr_end_capture>:

void radio_tmr_end_capture(void)
{
	NRF_PPI->CH[7].EEP = (u32_t)&(NRF_RADIO->EVENTS_END);
    9f0c:	4b06      	ldr	r3, [pc, #24]	; (9f28 <radio_tmr_end_capture+0x1c>)
    9f0e:	4a07      	ldr	r2, [pc, #28]	; (9f2c <radio_tmr_end_capture+0x20>)
    9f10:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
	NRF_PPI->CH[7].TEP = (u32_t)&(NRF_TIMER0->TASKS_CAPTURE[2]);
    9f14:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
    9f18:	323c      	adds	r2, #60	; 0x3c
    9f1a:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
	NRF_PPI->CHENSET = PPI_CHEN_CH7_Msk;
    9f1e:	2280      	movs	r2, #128	; 0x80
    9f20:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    9f24:	4770      	bx	lr
    9f26:	bf00      	nop
    9f28:	4001f000 	.word	0x4001f000
    9f2c:	4000110c 	.word	0x4000110c

00009f30 <radio_tmr_end_get>:
}

u32_t radio_tmr_end_get(void)
{
	return NRF_TIMER0->CC[2];
    9f30:	4b01      	ldr	r3, [pc, #4]	; (9f38 <radio_tmr_end_get+0x8>)
    9f32:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
    9f36:	4770      	bx	lr
    9f38:	40008000 	.word	0x40008000

00009f3c <radio_ccm_rx_pkt_set>:

static u8_t MALIGN(4) _ccm_scratch[(RADIO_PDU_LEN_MAX - 4) + 16];

void *radio_ccm_rx_pkt_set(struct ccm *ccm, void *pkt)
{
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    9f3c:	4b15      	ldr	r3, [pc, #84]	; (9f94 <radio_ccm_rx_pkt_set+0x58>)
}

static u8_t MALIGN(4) _ccm_scratch[(RADIO_PDU_LEN_MAX - 4) + 16];

void *radio_ccm_rx_pkt_set(struct ccm *ccm, void *pkt)
{
    9f3e:	b510      	push	{r4, lr}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    9f40:	2200      	movs	r2, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    9f42:	2402      	movs	r4, #2

static u8_t MALIGN(4) _ccm_scratch[(RADIO_PDU_LEN_MAX - 4) + 16];

void *radio_ccm_rx_pkt_set(struct ccm *ccm, void *pkt)
{
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    9f44:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    9f48:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	NRF_CCM->MODE =
    9f4c:	4c12      	ldr	r4, [pc, #72]	; (9f98 <radio_ccm_rx_pkt_set+0x5c>)
    9f4e:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
	    ((CCM_MODE_LENGTH_Extended << CCM_MODE_LENGTH_Pos) &
	       CCM_MODE_LENGTH_Msk) |
#endif
	    ((CCM_MODE_MODE_Decryption << CCM_MODE_MODE_Pos) &
	     CCM_MODE_MODE_Msk);
	NRF_CCM->CNFPTR = (u32_t)ccm;
    9f52:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)_pkt_scratch;
    9f56:	4811      	ldr	r0, [pc, #68]	; (9f9c <radio_ccm_rx_pkt_set+0x60>)
    9f58:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)pkt;
    9f5c:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
    9f60:	490f      	ldr	r1, [pc, #60]	; (9fa0 <radio_ccm_rx_pkt_set+0x64>)
    9f62:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = 0;
    9f66:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDKSGEN = 0;
	NRF_CCM->EVENTS_ENDCRYPT = 0;
	NRF_CCM->EVENTS_ERROR = 0;

	NRF_PPI->CH[6].EEP = (u32_t)&(NRF_RADIO->EVENTS_ADDRESS);
    9f6a:	490e      	ldr	r1, [pc, #56]	; (9fa4 <radio_ccm_rx_pkt_set+0x68>)
	NRF_CCM->CNFPTR = (u32_t)ccm;
	NRF_CCM->INPTR = (u32_t)_pkt_scratch;
	NRF_CCM->OUTPTR = (u32_t)pkt;
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
	NRF_CCM->SHORTS = 0;
	NRF_CCM->EVENTS_ENDKSGEN = 0;
    9f6c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_CCM->EVENTS_ENDCRYPT = 0;
    9f70:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
    9f74:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

	NRF_PPI->CH[6].EEP = (u32_t)&(NRF_RADIO->EVENTS_ADDRESS);
    9f78:	4a0b      	ldr	r2, [pc, #44]	; (9fa8 <radio_ccm_rx_pkt_set+0x6c>)
    9f7a:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	NRF_PPI->CH[6].TEP = (u32_t)&(NRF_CCM->TASKS_CRYPT);
    9f7e:	f501 415f 	add.w	r1, r1, #57088	; 0xdf00
    9f82:	f8c2 1544 	str.w	r1, [r2, #1348]	; 0x544
	NRF_PPI->CHENSET = PPI_CHEN_CH6_Msk;
    9f86:	2140      	movs	r1, #64	; 0x40
    9f88:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504

	NRF_CCM->TASKS_KSGEN = 1;
    9f8c:	2201      	movs	r2, #1
    9f8e:	601a      	str	r2, [r3, #0]

	return _pkt_scratch;
}
    9f90:	bd10      	pop	{r4, pc}
    9f92:	bf00      	nop
    9f94:	4000f000 	.word	0x4000f000
    9f98:	01000001 	.word	0x01000001
    9f9c:	2000115c 	.word	0x2000115c
    9fa0:	20001264 	.word	0x20001264
    9fa4:	40001104 	.word	0x40001104
    9fa8:	4001f000 	.word	0x4001f000

00009fac <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
    9fac:	b510      	push	{r4, lr}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    9fae:	4b10      	ldr	r3, [pc, #64]	; (9ff0 <radio_ccm_tx_pkt_set+0x44>)
    9fb0:	2200      	movs	r2, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    9fb2:	2402      	movs	r4, #2
	return _pkt_scratch;
}

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    9fb4:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    9fb8:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	NRF_CCM->MODE =
    9fbc:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
    9fc0:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
	    ((CCM_MODE_LENGTH_Extended << CCM_MODE_LENGTH_Pos) &
	       CCM_MODE_LENGTH_Msk) |
#endif
	    ((CCM_MODE_MODE_Encryption << CCM_MODE_MODE_Pos) &
	     CCM_MODE_MODE_Msk);
	NRF_CCM->CNFPTR = (u32_t)ccm;
    9fc4:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)pkt;
    9fc8:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
    9fcc:	4809      	ldr	r0, [pc, #36]	; (9ff4 <radio_ccm_tx_pkt_set+0x48>)
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
    9fce:	490a      	ldr	r1, [pc, #40]	; (9ff8 <radio_ccm_tx_pkt_set+0x4c>)
#endif
	    ((CCM_MODE_MODE_Encryption << CCM_MODE_MODE_Pos) &
	     CCM_MODE_MODE_Msk);
	NRF_CCM->CNFPTR = (u32_t)ccm;
	NRF_CCM->INPTR = (u32_t)pkt;
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
    9fd0:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
    9fd4:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
    9fd8:	2101      	movs	r1, #1
    9fda:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDKSGEN = 0;
    9fde:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_CCM->EVENTS_ENDCRYPT = 0;
    9fe2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
    9fe6:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

	NRF_CCM->TASKS_KSGEN = 1;
    9fea:	6019      	str	r1, [r3, #0]

	return _pkt_scratch;
}
    9fec:	bd10      	pop	{r4, pc}
    9fee:	bf00      	nop
    9ff0:	4000f000 	.word	0x4000f000
    9ff4:	2000115c 	.word	0x2000115c
    9ff8:	20001264 	.word	0x20001264

00009ffc <radio_ccm_is_done>:

u32_t radio_ccm_is_done(void)
{
	NRF_CCM->INTENSET = CCM_INTENSET_ENDCRYPT_Msk;
    9ffc:	4b0c      	ldr	r3, [pc, #48]	; (a030 <radio_ccm_is_done+0x34>)
    9ffe:	2202      	movs	r2, #2
    a000:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
    a004:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    a008:	4a09      	ldr	r2, [pc, #36]	; (a030 <radio_ccm_is_done+0x34>)
    a00a:	b919      	cbnz	r1, a014 <radio_ccm_is_done+0x18>
    a00c:	bf20      	wfe
  \brief   Send Event
  \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 */
__attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
{
  __ASM volatile ("sev");
    a00e:	bf40      	sev
  \details Wait For Event is a hint instruction that permits the processor to enter
    a low-power state until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
{
  __ASM volatile ("wfe");
    a010:	bf20      	wfe
    a012:	e7f7      	b.n	a004 <radio_ccm_is_done+0x8>
		__WFE();
		__SEV();
		__WFE();
	}
	NRF_CCM->INTENCLR = CCM_INTENCLR_ENDCRYPT_Msk;
    a014:	2302      	movs	r3, #2
    a016:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    a01a:	4b06      	ldr	r3, [pc, #24]	; (a034 <radio_ccm_is_done+0x38>)
    a01c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    a020:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
	NVIC_ClearPendingIRQ(CCM_AAR_IRQn);

	return (NRF_CCM->EVENTS_ERROR == 0);
    a024:	f8d2 0108 	ldr.w	r0, [r2, #264]	; 0x108
}
    a028:	fab0 f080 	clz	r0, r0
    a02c:	0940      	lsrs	r0, r0, #5
    a02e:	4770      	bx	lr
    a030:	4000f000 	.word	0x4000f000
    a034:	e000e100 	.word	0xe000e100

0000a038 <radio_ccm_mic_is_valid>:

u32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
    a038:	4b03      	ldr	r3, [pc, #12]	; (a048 <radio_ccm_mic_is_valid+0x10>)
    a03a:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
    a03e:	3000      	adds	r0, #0
    a040:	bf18      	it	ne
    a042:	2001      	movne	r0, #1
    a044:	4770      	bx	lr
    a046:	bf00      	nop
    a048:	4000f000 	.word	0x4000f000

0000a04c <radio_ar_configure>:

static u8_t MALIGN(4) _aar_scratch[3];

void radio_ar_configure(u32_t nirk, void *irk)
{
    a04c:	b510      	push	{r4, lr}
	NRF_AAR->ENABLE = 1;
    a04e:	4c0e      	ldr	r4, [pc, #56]	; (a088 <radio_ar_configure+0x3c>)
    a050:	2301      	movs	r3, #1
    a052:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	NRF_AAR->NIRK = nirk;
	NRF_AAR->IRKPTR = (u32_t)irk;
	NRF_AAR->ADDRPTR = (u32_t)NRF_RADIO->PACKETPTR;
    a056:	4b0d      	ldr	r3, [pc, #52]	; (a08c <radio_ar_configure+0x40>)
static u8_t MALIGN(4) _aar_scratch[3];

void radio_ar_configure(u32_t nirk, void *irk)
{
	NRF_AAR->ENABLE = 1;
	NRF_AAR->NIRK = nirk;
    a058:	f8c4 0504 	str.w	r0, [r4, #1284]	; 0x504
	NRF_AAR->IRKPTR = (u32_t)irk;
    a05c:	f8c4 1508 	str.w	r1, [r4, #1288]	; 0x508
	NRF_AAR->ADDRPTR = (u32_t)NRF_RADIO->PACKETPTR;
    a060:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
    a064:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
	NRF_AAR->SCRATCHPTR = (u32_t)_aar_scratch[0];
    a068:	2300      	movs	r3, #0
    a06a:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514

	radio_bc_configure(64);
    a06e:	2040      	movs	r0, #64	; 0x40
    a070:	f7ff fe84 	bl	9d7c <radio_bc_configure>

	NRF_PPI->CH[6].EEP = (u32_t)&(NRF_RADIO->EVENTS_BCMATCH);
    a074:	4b06      	ldr	r3, [pc, #24]	; (a090 <radio_ar_configure+0x44>)
    a076:	4a07      	ldr	r2, [pc, #28]	; (a094 <radio_ar_configure+0x48>)
    a078:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
	NRF_PPI->CH[6].TEP = (u32_t)&(NRF_AAR->TASKS_START);
	NRF_PPI->CHENSET = PPI_CHEN_CH6_Msk;
    a07c:	2240      	movs	r2, #64	; 0x40
	NRF_AAR->SCRATCHPTR = (u32_t)_aar_scratch[0];

	radio_bc_configure(64);

	NRF_PPI->CH[6].EEP = (u32_t)&(NRF_RADIO->EVENTS_BCMATCH);
	NRF_PPI->CH[6].TEP = (u32_t)&(NRF_AAR->TASKS_START);
    a07e:	f8c3 4544 	str.w	r4, [r3, #1348]	; 0x544
	NRF_PPI->CHENSET = PPI_CHEN_CH6_Msk;
    a082:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    a086:	bd10      	pop	{r4, pc}
    a088:	4000f000 	.word	0x4000f000
    a08c:	40001000 	.word	0x40001000
    a090:	4001f000 	.word	0x4001f000
    a094:	40001128 	.word	0x40001128

0000a098 <radio_ar_match_get>:
}

u32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
    a098:	4b01      	ldr	r3, [pc, #4]	; (a0a0 <radio_ar_match_get+0x8>)
    a09a:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
    a09e:	4770      	bx	lr
    a0a0:	4000f000 	.word	0x4000f000

0000a0a4 <radio_ar_status_reset>:
	NRF_RADIO->EVENTS_BCMATCH = 0;
}

u32_t radio_bc_has_match(void)
{
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
    a0a4:	4b07      	ldr	r3, [pc, #28]	; (a0c4 <radio_ar_status_reset+0x20>)
    a0a6:	f8d3 2128 	ldr.w	r2, [r3, #296]	; 0x128
	return NRF_AAR->STATUS;
}

void radio_ar_status_reset(void)
{
	if (radio_bc_has_match()) {
    a0aa:	b13a      	cbz	r2, a0bc <radio_ar_status_reset+0x18>
		NRF_AAR->EVENTS_END = 0;
    a0ac:	4a06      	ldr	r2, [pc, #24]	; (a0c8 <radio_ar_status_reset+0x24>)
    a0ae:	2100      	movs	r1, #0
    a0b0:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
		NRF_AAR->EVENTS_RESOLVED = 0;
    a0b4:	f8c2 1104 	str.w	r1, [r2, #260]	; 0x104
		NRF_AAR->EVENTS_NOTRESOLVED = 0;
    a0b8:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
	NRF_RADIO->SHORTS |= RADIO_SHORTS_ADDRESS_BCSTART_Msk;
}

void radio_bc_status_reset(void)
{
	NRF_RADIO->EVENTS_BCMATCH = 0;
    a0bc:	2200      	movs	r2, #0
    a0be:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    a0c2:	4770      	bx	lr
    a0c4:	40001000 	.word	0x40001000
    a0c8:	4000f000 	.word	0x4000f000

0000a0cc <radio_ar_has_match>:
}

u32_t radio_bc_has_match(void)
{
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
    a0cc:	4b07      	ldr	r3, [pc, #28]	; (a0ec <radio_ar_has_match+0x20>)
    a0ce:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
}

u32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
			(NRF_AAR->EVENTS_END) &&
    a0d2:	b148      	cbz	r0, a0e8 <radio_ar_has_match+0x1c>
    a0d4:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
    a0d8:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	radio_bc_status_reset();
}

u32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
    a0dc:	b120      	cbz	r0, a0e8 <radio_ar_has_match+0x1c>
			(NRF_AAR->EVENTS_END) &&
			(NRF_AAR->EVENTS_RESOLVED));
    a0de:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
}

u32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
			(NRF_AAR->EVENTS_END) &&
    a0e2:	3000      	adds	r0, #0
    a0e4:	bf18      	it	ne
    a0e6:	2001      	movne	r0, #1
			(NRF_AAR->EVENTS_RESOLVED));
}
    a0e8:	4770      	bx	lr
    a0ea:	bf00      	nop
    a0ec:	40001000 	.word	0x40001000

0000a0f0 <rand_init>:

static struct rand *rng;

void rand_init(u8_t *context, u8_t context_len)
{
	LL_ASSERT(context_len > sizeof(struct rand));
    a0f0:	2904      	cmp	r1, #4
};

static struct rand *rng;

void rand_init(u8_t *context, u8_t context_len)
{
    a0f2:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT(context_len > sizeof(struct rand));
    a0f4:	d80f      	bhi.n	a116 <rand_init+0x26>
    a0f6:	4b11      	ldr	r3, [pc, #68]	; (a13c <rand_init+0x4c>)
    a0f8:	9301      	str	r3, [sp, #4]
    a0fa:	4b11      	ldr	r3, [pc, #68]	; (a140 <rand_init+0x50>)
    a0fc:	9300      	str	r3, [sp, #0]
    a0fe:	4a11      	ldr	r2, [pc, #68]	; (a144 <rand_init+0x54>)
    a100:	4b11      	ldr	r3, [pc, #68]	; (a148 <rand_init+0x58>)
    a102:	4912      	ldr	r1, [pc, #72]	; (a14c <rand_init+0x5c>)
    a104:	4812      	ldr	r0, [pc, #72]	; (a150 <rand_init+0x60>)
    a106:	f7f7 f9bb 	bl	1480 <printk>
    a10a:	4040      	eors	r0, r0
    a10c:	f380 8811 	msr	BASEPRI, r0
    a110:	f04f 0004 	mov.w	r0, #4
    a114:	df02      	svc	2

	rng = (struct rand *)context;
    a116:	4b0f      	ldr	r3, [pc, #60]	; (a154 <rand_init+0x64>)
	rng->count = context_len - sizeof(struct rand) + 1;
    a118:	3903      	subs	r1, #3

void rand_init(u8_t *context, u8_t context_len)
{
	LL_ASSERT(context_len > sizeof(struct rand));

	rng = (struct rand *)context;
    a11a:	6018      	str	r0, [r3, #0]
	rng->count = context_len - sizeof(struct rand) + 1;
	rng->first = rng->last = 0;

	NRF_RNG->CONFIG = RNG_CONFIG_DERCEN_Msk;
    a11c:	4b0e      	ldr	r3, [pc, #56]	; (a158 <rand_init+0x68>)
void rand_init(u8_t *context, u8_t context_len)
{
	LL_ASSERT(context_len > sizeof(struct rand));

	rng = (struct rand *)context;
	rng->count = context_len - sizeof(struct rand) + 1;
    a11e:	7001      	strb	r1, [r0, #0]
	rng->first = rng->last = 0;

	NRF_RNG->CONFIG = RNG_CONFIG_DERCEN_Msk;
    a120:	2201      	movs	r2, #1
{
	LL_ASSERT(context_len > sizeof(struct rand));

	rng = (struct rand *)context;
	rng->count = context_len - sizeof(struct rand) + 1;
	rng->first = rng->last = 0;
    a122:	2100      	movs	r1, #0
    a124:	7081      	strb	r1, [r0, #2]
    a126:	7041      	strb	r1, [r0, #1]

	NRF_RNG->CONFIG = RNG_CONFIG_DERCEN_Msk;
    a128:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	NRF_RNG->EVENTS_VALRDY = 0;
    a12c:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
	NRF_RNG->INTENSET = RNG_INTENSET_VALRDY_Msk;
    a130:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

	NRF_RNG->TASKS_START = 1;
    a134:	601a      	str	r2, [r3, #0]
}
    a136:	b003      	add	sp, #12
    a138:	f85d fb04 	ldr.w	pc, [sp], #4
    a13c:	00013df4 	.word	0x00013df4
    a140:	00013df9 	.word	0x00013df9
    a144:	00013db4 	.word	0x00013db4
    a148:	00016682 	.word	0x00016682
    a14c:	00013dbb 	.word	0x00013dbb
    a150:	000151dd 	.word	0x000151dd
    a154:	20001374 	.word	0x20001374
    a158:	4000d000 	.word	0x4000d000

0000a15c <rand_get>:
{
	u8_t reserved;
	u8_t first;

	while (octets) {
		if (rng->first == rng->last) {
    a15c:	4b16      	ldr	r3, [pc, #88]	; (a1b8 <rand_get+0x5c>)
    a15e:	681a      	ldr	r2, [r3, #0]

	NRF_RNG->TASKS_START = 1;
}

size_t rand_get(size_t octets, u8_t *rand)
{
    a160:	b530      	push	{r4, r5, lr}
    a162:	180c      	adds	r4, r1, r0
	u8_t reserved;
	u8_t first;

	while (octets) {
    a164:	428c      	cmp	r4, r1
    a166:	eba4 0001 	sub.w	r0, r4, r1
    a16a:	7853      	ldrb	r3, [r2, #1]
    a16c:	d00f      	beq.n	a18e <rand_get+0x32>
		if (rng->first == rng->last) {
    a16e:	7895      	ldrb	r5, [r2, #2]
    a170:	429d      	cmp	r5, r3
    a172:	d00d      	beq.n	a190 <rand_get+0x34>
			break;
		}

		rand[--octets] = rng->rand[rng->first];
    a174:	4413      	add	r3, r2
    a176:	78db      	ldrb	r3, [r3, #3]
    a178:	f804 3d01 	strb.w	r3, [r4, #-1]!

		first = rng->first + 1;
    a17c:	7853      	ldrb	r3, [r2, #1]
		if (first == rng->count) {
    a17e:	7810      	ldrb	r0, [r2, #0]
			break;
		}

		rand[--octets] = rng->rand[rng->first];

		first = rng->first + 1;
    a180:	3301      	adds	r3, #1
    a182:	b2db      	uxtb	r3, r3
		if (first == rng->count) {
			first = 0;
    a184:	4298      	cmp	r0, r3
    a186:	bf08      	it	eq
    a188:	2300      	moveq	r3, #0
		}
		rng->first = first;
    a18a:	7053      	strb	r3, [r2, #1]
    a18c:	e7ea      	b.n	a164 <rand_get+0x8>
    a18e:	2000      	movs	r0, #0
	}

	reserved = RAND_RESERVED;
	first = rng->first;
	while (reserved--) {
    a190:	2105      	movs	r1, #5
    a192:	3901      	subs	r1, #1
    a194:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    a198:	d00d      	beq.n	a1b6 <rand_get+0x5a>
		if (first == rng->last) {
    a19a:	7894      	ldrb	r4, [r2, #2]
    a19c:	429c      	cmp	r4, r3
    a19e:	d103      	bne.n	a1a8 <rand_get+0x4c>
			NRF_RNG->TASKS_START = 1;
    a1a0:	4b06      	ldr	r3, [pc, #24]	; (a1bc <rand_get+0x60>)
    a1a2:	2201      	movs	r2, #1
    a1a4:	601a      	str	r2, [r3, #0]

			break;
    a1a6:	bd30      	pop	{r4, r5, pc}
		}

		first++;
    a1a8:	3301      	adds	r3, #1
		if (first == rng->count) {
    a1aa:	7814      	ldrb	r4, [r2, #0]
			NRF_RNG->TASKS_START = 1;

			break;
		}

		first++;
    a1ac:	b2db      	uxtb	r3, r3
		if (first == rng->count) {
			first = 0;
    a1ae:	429c      	cmp	r4, r3
    a1b0:	bf08      	it	eq
    a1b2:	2300      	moveq	r3, #0
    a1b4:	e7ed      	b.n	a192 <rand_get+0x36>
		}
	}

	return octets;
}
    a1b6:	bd30      	pop	{r4, r5, pc}
    a1b8:	20001374 	.word	0x20001374
    a1bc:	4000d000 	.word	0x4000d000

0000a1c0 <isr_rand>:

void isr_rand(void *param)
{
	ARG_UNUSED(param);

	if (NRF_RNG->EVENTS_VALRDY) {
    a1c0:	4a14      	ldr	r2, [pc, #80]	; (a214 <isr_rand+0x54>)
    a1c2:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100

	return octets;
}

void isr_rand(void *param)
{
    a1c6:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(param);

	if (NRF_RNG->EVENTS_VALRDY) {
    a1c8:	b31b      	cbz	r3, a212 <isr_rand+0x52>
		u8_t last;

		last = rng->last + 1;
    a1ca:	4b13      	ldr	r3, [pc, #76]	; (a218 <isr_rand+0x58>)
    a1cc:	6819      	ldr	r1, [r3, #0]
    a1ce:	7888      	ldrb	r0, [r1, #2]
		if (last == rng->count) {
    a1d0:	780c      	ldrb	r4, [r1, #0]
			last = 0;
		}

		if (last == rng->first) {
    a1d2:	784d      	ldrb	r5, [r1, #1]
	ARG_UNUSED(param);

	if (NRF_RNG->EVENTS_VALRDY) {
		u8_t last;

		last = rng->last + 1;
    a1d4:	1c43      	adds	r3, r0, #1
    a1d6:	b2db      	uxtb	r3, r3
		if (last == rng->count) {
			last = 0;
    a1d8:	42a3      	cmp	r3, r4
    a1da:	bf08      	it	eq
    a1dc:	2300      	moveq	r3, #0
		}

		if (last == rng->first) {
    a1de:	429d      	cmp	r5, r3
    a1e0:	d105      	bne.n	a1ee <isr_rand+0x2e>
			/* this condition should not happen
			 * , but due to probable bug in HW
			 * , new value could be generated
			 * before task is stopped.
			 */
			NRF_RNG->TASKS_STOP = 1;
    a1e2:	2301      	movs	r3, #1
    a1e4:	6053      	str	r3, [r2, #4]
			NRF_RNG->EVENTS_VALRDY = 0;
    a1e6:	2300      	movs	r3, #0
    a1e8:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

			return;
    a1ec:	bd30      	pop	{r4, r5, pc}
		}

		rng->rand[rng->last] = NRF_RNG->VALUE;
    a1ee:	4408      	add	r0, r1
    a1f0:	f8d2 5508 	ldr.w	r5, [r2, #1288]	; 0x508
    a1f4:	70c5      	strb	r5, [r0, #3]
		last = rng->last + 1;
		if (last == rng->count) {
			last = 0;
		}

		NRF_RNG->EVENTS_VALRDY = 0;
    a1f6:	2000      	movs	r0, #0

			return;
		}

		rng->rand[rng->last] = NRF_RNG->VALUE;
		rng->last = last;
    a1f8:	708b      	strb	r3, [r1, #2]
		last = rng->last + 1;
		if (last == rng->count) {
			last = 0;
		}

		NRF_RNG->EVENTS_VALRDY = 0;
    a1fa:	f8c2 0100 	str.w	r0, [r2, #256]	; 0x100
		}

		rng->rand[rng->last] = NRF_RNG->VALUE;
		rng->last = last;

		last = rng->last + 1;
    a1fe:	3301      	adds	r3, #1
			last = 0;
		}

		NRF_RNG->EVENTS_VALRDY = 0;

		if (last == rng->first) {
    a200:	7849      	ldrb	r1, [r1, #1]
		}

		rng->rand[rng->last] = NRF_RNG->VALUE;
		rng->last = last;

		last = rng->last + 1;
    a202:	b2db      	uxtb	r3, r3
		if (last == rng->count) {
			last = 0;
    a204:	429c      	cmp	r4, r3
    a206:	bf08      	it	eq
    a208:	2300      	moveq	r3, #0
		}

		NRF_RNG->EVENTS_VALRDY = 0;

		if (last == rng->first) {
    a20a:	4299      	cmp	r1, r3
			NRF_RNG->TASKS_STOP = 1;
    a20c:	bf04      	itt	eq
    a20e:	2301      	moveq	r3, #1
    a210:	6053      	streq	r3, [r2, #4]
    a212:	bd30      	pop	{r4, r5, pc}
    a214:	4000d000 	.word	0x4000d000
    a218:	20001374 	.word	0x20001374

0000a21c <ticker_dequeue>:

	return id;
}

static u32_t ticker_dequeue(struct ticker_instance *instance, u8_t id)
{
    a21c:	b5f0      	push	{r4, r5, r6, r7, lr}
	u32_t timeout;
	u32_t total;

	/* find the ticker's position in ticker list */
	node = &instance->node[0];
	previous = instance->ticker_id_head;
    a21e:	7e03      	ldrb	r3, [r0, #24]
	u8_t current;
	u32_t timeout;
	u32_t total;

	/* find the ticker's position in ticker list */
	node = &instance->node[0];
    a220:	6804      	ldr	r4, [r0, #0]
	previous = instance->ticker_id_head;
	current = previous;
    a222:	461a      	mov	r2, r3
	total = 0;
    a224:	2600      	movs	r6, #0
	ticker_current = 0;
	while (current != TICKER_NULL) {
    a226:	2aff      	cmp	r2, #255	; 0xff
    a228:	d00c      	beq.n	a244 <ticker_dequeue+0x28>

		ticker_current = &node[current];
    a22a:	eb02 07c2 	add.w	r7, r2, r2, lsl #3

		if (current == id) {
    a22e:	428a      	cmp	r2, r1
	current = previous;
	total = 0;
	ticker_current = 0;
	while (current != TICKER_NULL) {

		ticker_current = &node[current];
    a230:	eb04 0587 	add.w	r5, r4, r7, lsl #2
    a234:	f814 7027 	ldrb.w	r7, [r4, r7, lsl #2]

		if (current == id) {
    a238:	d006      	beq.n	a248 <ticker_dequeue+0x2c>
			break;
		}

		total += ticker_current->ticks_to_expire;
    a23a:	68ab      	ldr	r3, [r5, #8]
    a23c:	441e      	add	r6, r3
		previous = current;
		current = ticker_current->next;
    a23e:	4613      	mov	r3, r2
    a240:	463a      	mov	r2, r7
    a242:	e7f0      	b.n	a226 <ticker_dequeue+0xa>
	}

	/* ticker not in active list */
	if (current == TICKER_NULL) {
		return 0;
    a244:	2000      	movs	r0, #0
    a246:	bdf0      	pop	{r4, r5, r6, r7, pc}
	}

	/* ticker is the first in the list */
	if (previous == current) {
    a248:	4293      	cmp	r3, r2
    a24a:	d100      	bne.n	a24e <ticker_dequeue+0x32>
		instance->ticker_id_head = ticker_current->next;
    a24c:	7607      	strb	r7, [r0, #24]
	timeout = ticker_current->ticks_to_expire;

	/* link previous ticker with next of this ticker
	 * i.e. removing the ticker from list
	 */
	node[previous].next = ticker_current->next;
    a24e:	b21b      	sxth	r3, r3
    a250:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    a254:	7829      	ldrb	r1, [r5, #0]
	if (previous == current) {
		instance->ticker_id_head = ticker_current->next;
	}

	/* remaining timeout between next timeout */
	timeout = ticker_current->ticks_to_expire;
    a256:	68aa      	ldr	r2, [r5, #8]

	/* link previous ticker with next of this ticker
	 * i.e. removing the ticker from list
	 */
	node[previous].next = ticker_current->next;
    a258:	f804 1023 	strb.w	r1, [r4, r3, lsl #2]

	/* if this is not the last ticker, increment the
	 * next ticker by this ticker timeout
	 */
	if (ticker_current->next != TICKER_NULL) {
    a25c:	782b      	ldrb	r3, [r5, #0]
    a25e:	2bff      	cmp	r3, #255	; 0xff
    a260:	d006      	beq.n	a270 <ticker_dequeue+0x54>
		node[ticker_current->next].ticks_to_expire += timeout;
    a262:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    a266:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    a26a:	6899      	ldr	r1, [r3, #8]
    a26c:	4411      	add	r1, r2
    a26e:	6099      	str	r1, [r3, #8]
	}

	return (total + timeout);
    a270:	18b0      	adds	r0, r6, r2
    a272:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000a274 <prepare_ticks_to_expire>:
	instance->fp_sched(CALL_ID_WORKER, CALL_ID_JOB, 1);
}

static void prepare_ticks_to_expire(struct ticker_node *ticker,
				    u32_t ticks_current, u32_t ticks_at_start)
{
    a274:	b530      	push	{r4, r5, lr}
	u32_t ticks_to_expire = ticker->ticks_to_expire;
	u16_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;

	/* Calculate ticks to expire for this new node */
	if (((ticks_at_start - ticks_current) & 0x00800000) == 0) {
    a276:	1a55      	subs	r5, r2, r1
    a278:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
}

static void prepare_ticks_to_expire(struct ticker_node *ticker,
				    u32_t ticks_current, u32_t ticks_at_start)
{
	u32_t ticks_to_expire = ticker->ticks_to_expire;
    a27c:	6884      	ldr	r4, [r0, #8]
	u16_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
    a27e:	8a83      	ldrh	r3, [r0, #20]

	/* Calculate ticks to expire for this new node */
	if (((ticks_at_start - ticks_current) & 0x00800000) == 0) {
    a280:	d103      	bne.n	a28a <prepare_ticks_to_expire+0x16>
		ticks_to_expire +=
    a282:	f025 427f 	bic.w	r2, r5, #4278190080	; 0xff000000
    a286:	4422      	add	r2, r4
    a288:	e00c      	b.n	a2a4 <prepare_ticks_to_expire+0x30>
	return cntr_cnt_get();
}

u32_t ticker_ticks_diff_get(u32_t ticks_now, u32_t ticks_old)
{
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    a28a:	1a8a      	subs	r2, r1, r2
    a28c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	} else {
		u32_t delta_current_start;

		delta_current_start =
		    ticker_ticks_diff_get(ticks_current, ticks_at_start);
		if (ticks_to_expire > delta_current_start) {
    a290:	4294      	cmp	r4, r2
    a292:	d901      	bls.n	a298 <prepare_ticks_to_expire+0x24>
			ticks_to_expire -= delta_current_start;
    a294:	1aa2      	subs	r2, r4, r2
    a296:	e005      	b.n	a2a4 <prepare_ticks_to_expire+0x30>
    a298:	1b1b      	subs	r3, r3, r4
		} else {
			ticks_to_expire_minus +=
    a29a:	fa12 f383 	uxtah	r3, r2, r3
    a29e:	b29b      	uxth	r3, r3
			    (delta_current_start - ticks_to_expire);
			ticks_to_expire = 0;
    a2a0:	2200      	movs	r2, #0
    a2a2:	e004      	b.n	a2ae <prepare_ticks_to_expire+0x3a>
		}
	}

	/* Handle any drifts requested */
	if (ticks_to_expire > ticks_to_expire_minus) {
    a2a4:	429a      	cmp	r2, r3
    a2a6:	d902      	bls.n	a2ae <prepare_ticks_to_expire+0x3a>
		ticks_to_expire -= ticks_to_expire_minus;
    a2a8:	1ad3      	subs	r3, r2, r3
		ticks_to_expire_minus = 0;
    a2aa:	2200      	movs	r2, #0
    a2ac:	e002      	b.n	a2b4 <prepare_ticks_to_expire+0x40>
	} else {
		ticks_to_expire_minus -= ticks_to_expire;
    a2ae:	1a9b      	subs	r3, r3, r2
    a2b0:	b29a      	uxth	r2, r3
		ticks_to_expire = 0;
    a2b2:	2300      	movs	r3, #0
	}

	ticker->ticks_to_expire = ticks_to_expire;
    a2b4:	6083      	str	r3, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    a2b6:	8282      	strh	r2, [r0, #20]
    a2b8:	bd30      	pop	{r4, r5, pc}

0000a2ba <ticker_instance1_cmp_set>:
	cntr_cmp_set(0, value);
}

static void ticker_instance1_cmp_set(u32_t value)
{
	cntr_cmp_set(1, value);
    a2ba:	4601      	mov	r1, r0
    a2bc:	2001      	movs	r0, #1
    a2be:	f7ff bb9f 	b.w	9a00 <cntr_cmp_set>

0000a2c2 <ticker_instance0_cmp_set>:
	}
}

static void ticker_instance0_cmp_set(u32_t value)
{
	cntr_cmp_set(0, value);
    a2c2:	4601      	mov	r1, r0
    a2c4:	2000      	movs	r0, #0
    a2c6:	f7ff bb9b 	b.w	9a00 <cntr_cmp_set>
	...

0000a2cc <ticker_instance1_sched>:
		break;
	}
}

static void ticker_instance1_sched(u8_t caller_id, u8_t callee_id, u8_t chain)
{
    a2cc:	b507      	push	{r0, r1, r2, lr}
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
    a2ce:	2803      	cmp	r0, #3
    a2d0:	d820      	bhi.n	a314 <ticker_instance1_sched+0x48>
    a2d2:	e8df f000 	tbb	[pc, r0]
    a2d6:	0802      	.short	0x0802
    a2d8:	160c      	.short	0x160c
	case CALL_ID_TRIGGER:
		switch (callee_id) {
    a2da:	2901      	cmp	r1, #1
    a2dc:	d11a      	bne.n	a314 <ticker_instance1_sched+0x48>
				0, 0, link,
				&_instance[1],
				(void *)ticker_worker
			};

			mayfly_enqueue(MAYFLY_CALL_ID_0,
    a2de:	4b15      	ldr	r3, [pc, #84]	; (a334 <ticker_instance1_sched+0x68>)
    a2e0:	2102      	movs	r1, #2
    a2e2:	2000      	movs	r0, #0
    a2e4:	e011      	b.n	a30a <ticker_instance1_sched+0x3e>
			break;
		}
		break;

	case CALL_ID_WORKER:
		switch (callee_id) {
    a2e6:	2902      	cmp	r1, #2
    a2e8:	d114      	bne.n	a314 <ticker_instance1_sched+0x48>
				0, 0, link,
				(void *)&_instance[1],
				(void *)ticker_job
			};

			mayfly_enqueue(MAYFLY_CALL_ID_2,
    a2ea:	4b13      	ldr	r3, [pc, #76]	; (a338 <ticker_instance1_sched+0x6c>)
    a2ec:	e007      	b.n	a2fe <ticker_instance1_sched+0x32>
			break;
		}
		break;

	case CALL_ID_JOB:
		switch (callee_id) {
    a2ee:	2901      	cmp	r1, #1
    a2f0:	d003      	beq.n	a2fa <ticker_instance1_sched+0x2e>
    a2f2:	2902      	cmp	r1, #2
    a2f4:	d10e      	bne.n	a314 <ticker_instance1_sched+0x48>
				0, 0, link,
				(void *)&_instance[1],
				(void *)ticker_job
			};

			mayfly_enqueue(MAYFLY_CALL_ID_2,
    a2f6:	4b11      	ldr	r3, [pc, #68]	; (a33c <ticker_instance1_sched+0x70>)
    a2f8:	e001      	b.n	a2fe <ticker_instance1_sched+0x32>
				0, 0, link,
				(void *)&_instance[1],
				(void *)ticker_worker
			};

			mayfly_enqueue(MAYFLY_CALL_ID_2,
    a2fa:	4b11      	ldr	r3, [pc, #68]	; (a340 <ticker_instance1_sched+0x74>)
    a2fc:	2102      	movs	r1, #2
				0, 0, link,
				(void *)&_instance[1],
				(void *)ticker_job
			};

			mayfly_enqueue(MAYFLY_CALL_ID_2,
    a2fe:	4608      	mov	r0, r1
    a300:	e003      	b.n	a30a <ticker_instance1_sched+0x3e>
			break;
		}
		break;

	case CALL_ID_USER:
		switch (callee_id) {
    a302:	2902      	cmp	r1, #2
    a304:	d106      	bne.n	a314 <ticker_instance1_sched+0x48>
				(void *)&_instance[1],
				(void *)ticker_job
			};

			/* TODO: scheduler lock, if OS used */
			mayfly_enqueue(MAYFLY_CALL_ID_PROGRAM,
    a306:	4b0f      	ldr	r3, [pc, #60]	; (a344 <ticker_instance1_sched+0x78>)
    a308:	2003      	movs	r0, #3

	default:
		LL_ASSERT(0);
		break;
	}
}
    a30a:	b003      	add	sp, #12
    a30c:	f85d eb04 	ldr.w	lr, [sp], #4
				(void *)&_instance[1],
				(void *)ticker_job
			};

			/* TODO: scheduler lock, if OS used */
			mayfly_enqueue(MAYFLY_CALL_ID_PROGRAM,
    a310:	f7ff b99e 	b.w	9650 <mayfly_enqueue>
			break;
		}
		break;

	default:
		LL_ASSERT(0);
    a314:	4b0c      	ldr	r3, [pc, #48]	; (a348 <ticker_instance1_sched+0x7c>)
    a316:	9301      	str	r3, [sp, #4]
    a318:	4b0c      	ldr	r3, [pc, #48]	; (a34c <ticker_instance1_sched+0x80>)
    a31a:	9300      	str	r3, [sp, #0]
    a31c:	4a0c      	ldr	r2, [pc, #48]	; (a350 <ticker_instance1_sched+0x84>)
    a31e:	4b0d      	ldr	r3, [pc, #52]	; (a354 <ticker_instance1_sched+0x88>)
    a320:	490d      	ldr	r1, [pc, #52]	; (a358 <ticker_instance1_sched+0x8c>)
    a322:	480e      	ldr	r0, [pc, #56]	; (a35c <ticker_instance1_sched+0x90>)
    a324:	f7f7 f8ac 	bl	1480 <printk>
    a328:	4040      	eors	r0, r0
    a32a:	f380 8811 	msr	BASEPRI, r0
    a32e:	f04f 0004 	mov.w	r0, #4
    a332:	df02      	svc	2
    a334:	20000598 	.word	0x20000598
    a338:	200005a8 	.word	0x200005a8
    a33c:	200005b8 	.word	0x200005b8
    a340:	200005d8 	.word	0x200005d8
    a344:	200005c8 	.word	0x200005c8
    a348:	00013df4 	.word	0x00013df4
    a34c:	00013df9 	.word	0x00013df9
    a350:	00013db4 	.word	0x00013db4
    a354:	000166fb 	.word	0x000166fb
    a358:	00013dbb 	.word	0x00013dbb
    a35c:	00014409 	.word	0x00014409

0000a360 <ticker_instance0_sched>:

	return 0;
}

static void ticker_instance0_sched(u8_t caller_id, u8_t callee_id, u8_t chain)
{
    a360:	b513      	push	{r0, r1, r4, lr}
    a362:	460c      	mov	r4, r1
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
    a364:	2803      	cmp	r0, #3
    a366:	d825      	bhi.n	a3b4 <ticker_instance0_sched+0x54>
    a368:	e8df f000 	tbb	[pc, r0]
    a36c:	1a0d0702 	.word	0x1a0d0702
	case CALL_ID_TRIGGER:
		switch (callee_id) {
    a370:	2901      	cmp	r1, #1
    a372:	d11f      	bne.n	a3b4 <ticker_instance0_sched+0x54>
				0, 0, link,
				&_instance[0],
				(void *)ticker_worker
			};

			mayfly_enqueue(MAYFLY_CALL_ID_0,
    a374:	4b17      	ldr	r3, [pc, #92]	; (a3d4 <ticker_instance0_sched+0x74>)
    a376:	2100      	movs	r1, #0
    a378:	e010      	b.n	a39c <ticker_instance0_sched+0x3c>
			break;
		}
		break;

	case CALL_ID_WORKER:
		switch (callee_id) {
    a37a:	2902      	cmp	r1, #2
    a37c:	d11a      	bne.n	a3b4 <ticker_instance0_sched+0x54>
				0, 0, link,
				(void *)&_instance[0],
				(void *)ticker_job
			};

			mayfly_enqueue(MAYFLY_CALL_ID_0,
    a37e:	4b16      	ldr	r3, [pc, #88]	; (a3d8 <ticker_instance0_sched+0x78>)
    a380:	2101      	movs	r1, #1
    a382:	2000      	movs	r0, #0
    a384:	e011      	b.n	a3aa <ticker_instance0_sched+0x4a>
			break;
		}
		break;

	case CALL_ID_JOB:
		switch (callee_id) {
    a386:	2901      	cmp	r1, #1
    a388:	d004      	beq.n	a394 <ticker_instance0_sched+0x34>
    a38a:	2902      	cmp	r1, #2
    a38c:	d112      	bne.n	a3b4 <ticker_instance0_sched+0x54>
				0, 0, link,
				(void *)&_instance[0],
				(void *)ticker_job
			};

			mayfly_enqueue(MAYFLY_CALL_ID_1,
    a38e:	4b13      	ldr	r3, [pc, #76]	; (a3dc <ticker_instance0_sched+0x7c>)
    a390:	2101      	movs	r1, #1
    a392:	e003      	b.n	a39c <ticker_instance0_sched+0x3c>
				0, 0, link,
				(void *)&_instance[0],
				(void *)ticker_worker
			};

			mayfly_enqueue(MAYFLY_CALL_ID_1,
    a394:	4b12      	ldr	r3, [pc, #72]	; (a3e0 <ticker_instance0_sched+0x80>)
    a396:	2100      	movs	r1, #0
    a398:	4620      	mov	r0, r4
    a39a:	e006      	b.n	a3aa <ticker_instance0_sched+0x4a>
				0, 0, link,
				(void *)&_instance[0],
				(void *)ticker_job
			};

			mayfly_enqueue(MAYFLY_CALL_ID_1,
    a39c:	4608      	mov	r0, r1
    a39e:	e004      	b.n	a3aa <ticker_instance0_sched+0x4a>
			break;
		}
		break;

	case CALL_ID_USER:
		switch (callee_id) {
    a3a0:	2902      	cmp	r1, #2
    a3a2:	d107      	bne.n	a3b4 <ticker_instance0_sched+0x54>
				(void *)&_instance[0],
				(void *)ticker_job
			};

			/* TODO: scheduler lock, if OS used */
			mayfly_enqueue(MAYFLY_CALL_ID_PROGRAM,
    a3a4:	4b0f      	ldr	r3, [pc, #60]	; (a3e4 <ticker_instance0_sched+0x84>)
    a3a6:	2101      	movs	r1, #1
    a3a8:	2003      	movs	r0, #3

	default:
		LL_ASSERT(0);
		break;
	}
}
    a3aa:	b002      	add	sp, #8
    a3ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				(void *)&_instance[0],
				(void *)ticker_job
			};

			/* TODO: scheduler lock, if OS used */
			mayfly_enqueue(MAYFLY_CALL_ID_PROGRAM,
    a3b0:	f7ff b94e 	b.w	9650 <mayfly_enqueue>
			break;
		}
		break;

	default:
		LL_ASSERT(0);
    a3b4:	4b0c      	ldr	r3, [pc, #48]	; (a3e8 <ticker_instance0_sched+0x88>)
    a3b6:	9301      	str	r3, [sp, #4]
    a3b8:	4b0c      	ldr	r3, [pc, #48]	; (a3ec <ticker_instance0_sched+0x8c>)
    a3ba:	9300      	str	r3, [sp, #0]
    a3bc:	4a0c      	ldr	r2, [pc, #48]	; (a3f0 <ticker_instance0_sched+0x90>)
    a3be:	4b0d      	ldr	r3, [pc, #52]	; (a3f4 <ticker_instance0_sched+0x94>)
    a3c0:	490d      	ldr	r1, [pc, #52]	; (a3f8 <ticker_instance0_sched+0x98>)
    a3c2:	480e      	ldr	r0, [pc, #56]	; (a3fc <ticker_instance0_sched+0x9c>)
    a3c4:	f7f7 f85c 	bl	1480 <printk>
    a3c8:	4040      	eors	r0, r0
    a3ca:	f380 8811 	msr	BASEPRI, r0
    a3ce:	f04f 0004 	mov.w	r0, #4
    a3d2:	df02      	svc	2
    a3d4:	20000548 	.word	0x20000548
    a3d8:	20000558 	.word	0x20000558
    a3dc:	20000578 	.word	0x20000578
    a3e0:	20000568 	.word	0x20000568
    a3e4:	20000588 	.word	0x20000588
    a3e8:	00013df4 	.word	0x00013df4
    a3ec:	00013df9 	.word	0x00013df9
    a3f0:	00013db4 	.word	0x00013db4
    a3f4:	000166c5 	.word	0x000166c5
    a3f8:	00013dbb 	.word	0x00013dbb
    a3fc:	00014409 	.word	0x00014409

0000a400 <ticker_instance1_caller_id_get>:
	return 0;
}

static u8_t ticker_instance1_caller_id_get(u8_t user_id)
{
	switch (user_id) {
    a400:	2802      	cmp	r0, #2

	return 0;
}

static u8_t ticker_instance1_caller_id_get(u8_t user_id)
{
    a402:	b507      	push	{r0, r1, r2, lr}
	switch (user_id) {
    a404:	d011      	beq.n	a42a <ticker_instance1_caller_id_get+0x2a>
    a406:	2803      	cmp	r0, #3
    a408:	d00f      	beq.n	a42a <ticker_instance1_caller_id_get+0x2a>
		return CALL_ID_USER;

	case MAYFLY_CALL_ID_0:
	case MAYFLY_CALL_ID_1:
	default:
		LL_ASSERT(0);
    a40a:	4b09      	ldr	r3, [pc, #36]	; (a430 <ticker_instance1_caller_id_get+0x30>)
    a40c:	9301      	str	r3, [sp, #4]
    a40e:	4b09      	ldr	r3, [pc, #36]	; (a434 <ticker_instance1_caller_id_get+0x34>)
    a410:	9300      	str	r3, [sp, #0]
    a412:	4a09      	ldr	r2, [pc, #36]	; (a438 <ticker_instance1_caller_id_get+0x38>)
    a414:	4b09      	ldr	r3, [pc, #36]	; (a43c <ticker_instance1_caller_id_get+0x3c>)
    a416:	490a      	ldr	r1, [pc, #40]	; (a440 <ticker_instance1_caller_id_get+0x40>)
    a418:	480a      	ldr	r0, [pc, #40]	; (a444 <ticker_instance1_caller_id_get+0x44>)
    a41a:	f7f7 f831 	bl	1480 <printk>
    a41e:	4040      	eors	r0, r0
    a420:	f380 8811 	msr	BASEPRI, r0
    a424:	f04f 0004 	mov.w	r0, #4
    a428:	df02      	svc	2
		break;
	}

	return 0;
}
    a42a:	b003      	add	sp, #12
    a42c:	f85d fb04 	ldr.w	pc, [sp], #4
    a430:	00013df4 	.word	0x00013df4
    a434:	00013df9 	.word	0x00013df9
    a438:	00013db4 	.word	0x00013db4
    a43c:	000166a6 	.word	0x000166a6
    a440:	00013dbb 	.word	0x00013dbb
    a444:	00014409 	.word	0x00014409

0000a448 <ticker_instance0_caller_id_get>:
 ****************************************************************************/
#include "util/mayfly.h"

static u8_t ticker_instance0_caller_id_get(u8_t user_id)
{
	switch (user_id) {
    a448:	2801      	cmp	r0, #1
 *       import it.
 ****************************************************************************/
#include "util/mayfly.h"

static u8_t ticker_instance0_caller_id_get(u8_t user_id)
{
    a44a:	b507      	push	{r0, r1, r2, lr}
	switch (user_id) {
    a44c:	d012      	beq.n	a474 <ticker_instance0_caller_id_get+0x2c>
    a44e:	d313      	bcc.n	a478 <ticker_instance0_caller_id_get+0x30>
    a450:	2803      	cmp	r0, #3
    a452:	d012      	beq.n	a47a <ticker_instance0_caller_id_get+0x32>
	case MAYFLY_CALL_ID_PROGRAM:
		return CALL_ID_USER;

	case MAYFLY_CALL_ID_2:
	default:
		LL_ASSERT(0);
    a454:	4b0a      	ldr	r3, [pc, #40]	; (a480 <ticker_instance0_caller_id_get+0x38>)
    a456:	9301      	str	r3, [sp, #4]
    a458:	4b0a      	ldr	r3, [pc, #40]	; (a484 <ticker_instance0_caller_id_get+0x3c>)
    a45a:	9300      	str	r3, [sp, #0]
    a45c:	4a0a      	ldr	r2, [pc, #40]	; (a488 <ticker_instance0_caller_id_get+0x40>)
    a45e:	4b0b      	ldr	r3, [pc, #44]	; (a48c <ticker_instance0_caller_id_get+0x44>)
    a460:	490b      	ldr	r1, [pc, #44]	; (a490 <ticker_instance0_caller_id_get+0x48>)
    a462:	480c      	ldr	r0, [pc, #48]	; (a494 <ticker_instance0_caller_id_get+0x4c>)
    a464:	f7f7 f80c 	bl	1480 <printk>
    a468:	4040      	eors	r0, r0
    a46a:	f380 8811 	msr	BASEPRI, r0
    a46e:	f04f 0004 	mov.w	r0, #4
    a472:	df02      	svc	2
	switch (user_id) {
	case MAYFLY_CALL_ID_0:
		return CALL_ID_WORKER;

	case MAYFLY_CALL_ID_1:
		return CALL_ID_JOB;
    a474:	2002      	movs	r0, #2
    a476:	e000      	b.n	a47a <ticker_instance0_caller_id_get+0x32>

static u8_t ticker_instance0_caller_id_get(u8_t user_id)
{
	switch (user_id) {
	case MAYFLY_CALL_ID_0:
		return CALL_ID_WORKER;
    a478:	2001      	movs	r0, #1
		LL_ASSERT(0);
		break;
	}

	return 0;
}
    a47a:	b003      	add	sp, #12
    a47c:	f85d fb04 	ldr.w	pc, [sp], #4
    a480:	00013df4 	.word	0x00013df4
    a484:	00013df9 	.word	0x00013df9
    a488:	00013db4 	.word	0x00013db4
    a48c:	000166dc 	.word	0x000166dc
    a490:	00013dbb 	.word	0x00013dbb
    a494:	00014409 	.word	0x00014409

0000a498 <ticker_worker>:

	return (total + timeout);
}

static inline void ticker_worker(struct ticker_instance *instance)
{
    a498:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	u32_t ticks_expired;
	u8_t ticker_id_head;

	/* Defer worker if job running */
	instance->worker_trigger = 1;
	if (instance->job_guard) {
    a49c:	7f05      	ldrb	r5, [r0, #28]
	u32_t ticks_elapsed;
	u32_t ticks_expired;
	u8_t ticker_id_head;

	/* Defer worker if job running */
	instance->worker_trigger = 1;
    a49e:	2301      	movs	r3, #1

	return (total + timeout);
}

static inline void ticker_worker(struct ticker_instance *instance)
{
    a4a0:	4604      	mov	r4, r0
	u32_t ticks_elapsed;
	u32_t ticks_expired;
	u8_t ticker_id_head;

	/* Defer worker if job running */
	instance->worker_trigger = 1;
    a4a2:	7743      	strb	r3, [r0, #29]
	if (instance->job_guard) {
    a4a4:	2d00      	cmp	r5, #0
    a4a6:	d14b      	bne.n	a540 <ticker_worker+0xa8>
		return;
	}

	/* If no tickers to expire, do nothing */
	if (instance->ticker_id_head == TICKER_NULL) {
    a4a8:	7e03      	ldrb	r3, [r0, #24]
    a4aa:	2bff      	cmp	r3, #255	; 0xff
    a4ac:	d102      	bne.n	a4b4 <ticker_worker+0x1c>
		instance->worker_trigger = 0;
    a4ae:	7745      	strb	r5, [r0, #29]

		return;
    a4b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	}

	/* ticks_elapsed is collected here, job will use it */
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
    a4b4:	f7ff fa9e 	bl	99f4 <cntr_cnt_get>
	return cntr_cnt_get();
}

u32_t ticker_ticks_diff_get(u32_t ticks_now, u32_t ticks_old)
{
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    a4b8:	6967      	ldr	r7, [r4, #20]

	/* initialise actual elapsed ticks being consumed */
	ticks_expired = 0;

	/* auto variable containing the head of tickers expiring */
	ticker_id_head = instance->ticker_id_head;
    a4ba:	7e26      	ldrb	r6, [r4, #24]

	/* expire all tickers within ticks_elapsed and collect ticks_expired */
	node = &instance->node[0];
    a4bc:	f8d4 8000 	ldr.w	r8, [r4]
	return cntr_cnt_get();
}

u32_t ticker_ticks_diff_get(u32_t ticks_now, u32_t ticks_old)
{
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    a4c0:	1bc0      	subs	r0, r0, r7
    a4c2:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
	/* auto variable containing the head of tickers expiring */
	ticker_id_head = instance->ticker_id_head;

	/* expire all tickers within ticks_elapsed and collect ticks_expired */
	node = &instance->node[0];
	while (ticker_id_head != TICKER_NULL) {
    a4c6:	2eff      	cmp	r6, #255	; 0xff
    a4c8:	d006      	beq.n	a4d8 <ticker_worker+0x40>
		struct ticker_node *ticker;
		u32_t ticks_to_expire;

		/* auto variable for current ticker node */
		ticker = &node[ticker_id_head];
    a4ca:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
    a4ce:	eb08 0186 	add.w	r1, r8, r6, lsl #2

		/* Do nothing if ticker did not expire */
		ticks_to_expire = ticker->ticks_to_expire;
    a4d2:	688b      	ldr	r3, [r1, #8]
		if (ticks_elapsed < ticks_to_expire) {
    a4d4:	42bb      	cmp	r3, r7
    a4d6:	d90a      	bls.n	a4ee <ticker_worker+0x56>
			DEBUG_TICKER_TASK(0);
		}
	}

	/* queue the elapsed value */
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
    a4d8:	7aa2      	ldrb	r2, [r4, #10]
    a4da:	7ae3      	ldrb	r3, [r4, #11]
    a4dc:	4293      	cmp	r3, r2
    a4de:	d122      	bne.n	a526 <ticker_worker+0x8e>
		u8_t last;

		last = instance->ticks_elapsed_last + 1;
    a4e0:	3301      	adds	r3, #1
    a4e2:	b2db      	uxtb	r3, r3
		if (last == DOUBLE_BUFFER_SIZE) {
			last = 0;
    a4e4:	2b02      	cmp	r3, #2
    a4e6:	bf08      	it	eq
    a4e8:	2300      	moveq	r3, #0
		}
		instance->ticks_elapsed_last = last;
    a4ea:	72e3      	strb	r3, [r4, #11]
    a4ec:	e01b      	b.n	a526 <ticker_worker+0x8e>
		if (ticks_elapsed < ticks_to_expire) {
			break;
		}

		/* decrement ticks_elapsed and collect expired ticks */
		ticks_elapsed -= ticks_to_expire;
    a4ee:	1aff      	subs	r7, r7, r3
		ticks_expired += ticks_to_expire;
    a4f0:	441d      	add	r5, r3

		/* move to next ticker */
		ticker_id_head = ticker->next;

		/* skip if not scheduled to execute */
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
    a4f2:	788a      	ldrb	r2, [r1, #2]
    a4f4:	784b      	ldrb	r3, [r1, #1]
		/* decrement ticks_elapsed and collect expired ticks */
		ticks_elapsed -= ticks_to_expire;
		ticks_expired += ticks_to_expire;

		/* move to next ticker */
		ticker_id_head = ticker->next;
    a4f6:	f818 6026 	ldrb.w	r6, [r8, r6, lsl #2]

		/* skip if not scheduled to execute */
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
    a4fa:	1a9b      	subs	r3, r3, r2
    a4fc:	b2db      	uxtb	r3, r3
    a4fe:	2b01      	cmp	r3, #1
    a500:	d1e1      	bne.n	a4c6 <ticker_worker+0x2e>
		}

		/* scheduled timeout is acknowledged to be complete */
		ticker->ack--;

		if (ticker->timeout_func) {
    a502:	f8d1 900c 	ldr.w	r9, [r1, #12]
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
			continue;
		}

		/* scheduled timeout is acknowledged to be complete */
		ticker->ack--;
    a506:	3a01      	subs	r2, #1
    a508:	708a      	strb	r2, [r1, #2]

		if (ticker->timeout_func) {
    a50a:	f1b9 0f00 	cmp.w	r9, #0
    a50e:	d0da      	beq.n	a4c6 <ticker_worker+0x2e>
			DEBUG_TICKER_TASK(1);
			ticker->timeout_func(((instance->ticks_current +
    a510:	6963      	ldr	r3, [r4, #20]
    a512:	8a88      	ldrh	r0, [r1, #20]
    a514:	8b4a      	ldrh	r2, [r1, #26]
    a516:	1a18      	subs	r0, r3, r0
    a518:	4428      	add	r0, r5
    a51a:	690b      	ldr	r3, [r1, #16]
    a51c:	6a09      	ldr	r1, [r1, #32]
    a51e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a522:	47c8      	blx	r9
    a524:	e7cf      	b.n	a4c6 <ticker_worker+0x2e>
		if (last == DOUBLE_BUFFER_SIZE) {
			last = 0;
		}
		instance->ticks_elapsed_last = last;
	}
	instance->ticks_elapsed[instance->ticks_elapsed_last] =
    a526:	7ae3      	ldrb	r3, [r4, #11]
    a528:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	    ticks_expired;

	instance->worker_trigger = 0;

	instance->fp_sched(CALL_ID_WORKER, CALL_ID_JOB, 1);
    a52c:	2201      	movs	r2, #1
		if (last == DOUBLE_BUFFER_SIZE) {
			last = 0;
		}
		instance->ticks_elapsed_last = last;
	}
	instance->ticks_elapsed[instance->ticks_elapsed_last] =
    a52e:	60dd      	str	r5, [r3, #12]
	    ticks_expired;

	instance->worker_trigger = 0;
    a530:	2300      	movs	r3, #0
    a532:	7763      	strb	r3, [r4, #29]

	instance->fp_sched(CALL_ID_WORKER, CALL_ID_JOB, 1);
    a534:	2102      	movs	r1, #2
    a536:	6a63      	ldr	r3, [r4, #36]	; 0x24
    a538:	4610      	mov	r0, r2
}
    a53a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	instance->ticks_elapsed[instance->ticks_elapsed_last] =
	    ticks_expired;

	instance->worker_trigger = 0;

	instance->fp_sched(CALL_ID_WORKER, CALL_ID_JOB, 1);
    a53e:	4718      	bx	r3
    a540:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000a544 <ticker_job>:
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
		  COUNTER_CMP_OFFSET_MIN) > ticker_ticks_diff_get(cc, ctr));
}

static inline void ticker_job(struct ticker_instance *instance)
{
    a544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u8_t flag_compare_update;

	DEBUG_TICKER_JOB(1);

	/* Defer worker, as job is now running */
	if (instance->worker_trigger) {
    a548:	7f42      	ldrb	r2, [r0, #29]
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
		  COUNTER_CMP_OFFSET_MIN) > ticker_ticks_diff_get(cc, ctr));
}

static inline void ticker_job(struct ticker_instance *instance)
{
    a54a:	b091      	sub	sp, #68	; 0x44
    a54c:	4682      	mov	sl, r0
	u8_t flag_compare_update;

	DEBUG_TICKER_JOB(1);

	/* Defer worker, as job is now running */
	if (instance->worker_trigger) {
    a54e:	2a00      	cmp	r2, #0
    a550:	f040 83a8 	bne.w	aca4 <ticker_job+0x760>
		return;
	}
	instance->job_guard = 1;

	/* Back up the previous known tick */
	ticks_previous = instance->ticks_current;
    a554:	6943      	ldr	r3, [r0, #20]
    a556:	9305      	str	r3, [sp, #20]

	/* Update current tick with the elapsed value from queue, and dequeue */
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    a558:	7ac1      	ldrb	r1, [r0, #11]
    a55a:	7a83      	ldrb	r3, [r0, #10]
	if (instance->worker_trigger) {
		DEBUG_TICKER_JOB(0);

		return;
	}
	instance->job_guard = 1;
    a55c:	f04f 0b01 	mov.w	fp, #1

	/* Back up the previous known tick */
	ticks_previous = instance->ticks_current;

	/* Update current tick with the elapsed value from queue, and dequeue */
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    a560:	4299      	cmp	r1, r3
	if (instance->worker_trigger) {
		DEBUG_TICKER_JOB(0);

		return;
	}
	instance->job_guard = 1;
    a562:	f880 b01c 	strb.w	fp, [r0, #28]

	/* Back up the previous known tick */
	ticks_previous = instance->ticks_current;

	/* Update current tick with the elapsed value from queue, and dequeue */
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    a566:	d010      	beq.n	a58a <ticker_job+0x46>
		u8_t first;

		first = instance->ticks_elapsed_first + 1;
    a568:	445b      	add	r3, fp
    a56a:	b2db      	uxtb	r3, r3
		if (first == DOUBLE_BUFFER_SIZE) {
			first = 0;
    a56c:	2b02      	cmp	r3, #2
    a56e:	bf08      	it	eq
    a570:	2300      	moveq	r3, #0
		}
		instance->ticks_elapsed_first = first;
    a572:	7283      	strb	r3, [r0, #10]

		ticks_elapsed =
    a574:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    a578:	68db      	ldr	r3, [r3, #12]
    a57a:	9303      	str	r3, [sp, #12]
		    instance->ticks_elapsed[instance->ticks_elapsed_first];

		instance->ticks_current += ticks_elapsed;
		instance->ticks_current &= 0x00FFFFFF;
    a57c:	9a03      	ldr	r2, [sp, #12]
    a57e:	9b05      	ldr	r3, [sp, #20]
    a580:	4413      	add	r3, r2
    a582:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    a586:	6143      	str	r3, [r0, #20]
    a588:	e001      	b.n	a58e <ticker_job+0x4a>

		flag_elapsed = 1;
	} else {
		/* No elapsed value in queue */
		flag_elapsed = 0;
    a58a:	4693      	mov	fp, r2
		ticks_elapsed = 0;
    a58c:	9203      	str	r2, [sp, #12]
	flag_compare_update = 0;

	/* Remember the old head, so as to decide if new compare needs to be
	 * set.
	 */
	ticker_id_old_head = instance->ticker_id_head;
    a58e:	f89a 3018 	ldrb.w	r3, [sl, #24]
    a592:	9306      	str	r3, [sp, #24]
	struct ticker_node *node;
	struct ticker_user *users;
	u8_t count_user;

	pending = 0;
	node = &instance->node[0];
    a594:	f8da 3000 	ldr.w	r3, [sl]
    a598:	9304      	str	r3, [sp, #16]
	users = &instance->user[0];
    a59a:	f8da 3004 	ldr.w	r3, [sl, #4]
    a59e:	930b      	str	r3, [sp, #44]	; 0x2c
	count_user = instance->count_user;
    a5a0:	f89a 5009 	ldrb.w	r5, [sl, #9]
		flag_elapsed = 0;
		ticks_elapsed = 0;
	}

	/* Initialise internal re-insert list */
	insert_head = TICKER_NULL;
    a5a4:	23ff      	movs	r3, #255	; 0xff
    a5a6:	9302      	str	r3, [sp, #8]
	u8_t pending;
	struct ticker_node *node;
	struct ticker_user *users;
	u8_t count_user;

	pending = 0;
    a5a8:	2300      	movs	r3, #0
				/* Update the index upto which management is
				 * complete.
				 */
				user->middle = prev;

				pending = 1;
    a5aa:	9309      	str	r3, [sp, #36]	; 0x24

	pending = 0;
	node = &instance->node[0];
	users = &instance->user[0];
	count_user = instance->count_user;
	while (count_user--) {
    a5ac:	2d00      	cmp	r5, #0
    a5ae:	f000 80ee 	beq.w	a78e <ticker_job+0x24a>
		struct ticker_user *user;
		struct ticker_user_op *user_ops;

		user = &users[count_user];
    a5b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c

	pending = 0;
	node = &instance->node[0];
	users = &instance->user[0];
	count_user = instance->count_user;
	while (count_user--) {
    a5b4:	3d01      	subs	r5, #1
    a5b6:	b2ed      	uxtb	r5, r5
		struct ticker_user *user;
		struct ticker_user_op *user_ops;

		user = &users[count_user];
    a5b8:	eb03 07c5 	add.w	r7, r3, r5, lsl #3
		user_ops = &user->user_op[0];
    a5bc:	687b      	ldr	r3, [r7, #4]
    a5be:	9307      	str	r3, [sp, #28]
		while (user->middle != user->last) {
    a5c0:	78f9      	ldrb	r1, [r7, #3]
    a5c2:	f897 8002 	ldrb.w	r8, [r7, #2]
    a5c6:	4588      	cmp	r8, r1
    a5c8:	d0f0      	beq.n	a5ac <ticker_job+0x68>
			struct ticker_node *ticker;
			u8_t state;
			u8_t prev;
			u8_t middle;

			user_op = &user_ops[user->middle];
    a5ca:	232c      	movs	r3, #44	; 0x2c
    a5cc:	fb18 f203 	smulbb	r2, r8, r3
    a5d0:	9b07      	ldr	r3, [sp, #28]

			/* Traverse queue (no dequeue) */
			prev = user->middle;
			middle = user->middle + 1;
			if (middle == user->count_user_op) {
    a5d2:	7838      	ldrb	r0, [r7, #0]
			struct ticker_node *ticker;
			u8_t state;
			u8_t prev;
			u8_t middle;

			user_op = &user_ops[user->middle];
    a5d4:	189e      	adds	r6, r3, r2

			/* Traverse queue (no dequeue) */
			prev = user->middle;
			middle = user->middle + 1;
    a5d6:	f108 0301 	add.w	r3, r8, #1
    a5da:	b2db      	uxtb	r3, r3
			if (middle == user->count_user_op) {
				middle = 0;
    a5dc:	4298      	cmp	r0, r3
    a5de:	bf08      	it	eq
    a5e0:	2300      	moveq	r3, #0
			}
			user->middle = middle;
    a5e2:	70bb      	strb	r3, [r7, #2]

			ticker = &node[user_op->id];

			/* if op is start, then skip update and stop ops */
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
    a5e4:	9b07      	ldr	r3, [sp, #28]
    a5e6:	5c9a      	ldrb	r2, [r3, r2]
    a5e8:	2a03      	cmp	r2, #3
    a5ea:	d9ea      	bls.n	a5c2 <ticker_job+0x7e>
			state = (ticker->req - ticker->ack) & 0xff;

			/* if not started or update not required,
			 * set status and continue.
			 */
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP)
    a5ec:	2a05      	cmp	r2, #5
    a5ee:	d817      	bhi.n	a620 <ticker_job+0xdc>
			if (middle == user->count_user_op) {
				middle = 0;
			}
			user->middle = middle;

			ticker = &node[user_op->id];
    a5f0:	7871      	ldrb	r1, [r6, #1]
    a5f2:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
    a5f6:	930a      	str	r3, [sp, #40]	; 0x28
    a5f8:	980a      	ldr	r0, [sp, #40]	; 0x28
    a5fa:	9b04      	ldr	r3, [sp, #16]
    a5fc:	eb03 0480 	add.w	r4, r3, r0, lsl #2
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
				continue;
			}

			/* determine the ticker state */
			state = (ticker->req - ticker->ack) & 0xff;
    a600:	7863      	ldrb	r3, [r4, #1]
    a602:	78a0      	ldrb	r0, [r4, #2]
    a604:	1a1b      	subs	r3, r3, r0

			/* if not started or update not required,
			 * set status and continue.
			 */
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP)
			    || (state == 0)
    a606:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    a60a:	d009      	beq.n	a620 <ticker_job+0xdc>
			    || ((user_op->op == TICKER_USER_OP_TYPE_UPDATE)
    a60c:	2a04      	cmp	r2, #4
    a60e:	d10b      	bne.n	a628 <ticker_job+0xe4>
				&&
				(user_op->params.update.ticks_drift_plus == 0)
				&&
    a610:	6872      	ldr	r2, [r6, #4]
    a612:	b94a      	cbnz	r2, a628 <ticker_job+0xe4>
				(user_op->params.update.ticks_drift_minus ==
				 0)
				&& (user_op->params.update.ticks_slot_plus ==
				    0)
				&& (user_op->params.update.ticks_slot_minus ==
    a614:	68b2      	ldr	r2, [r6, #8]
    a616:	b93a      	cbnz	r2, a628 <ticker_job+0xe4>
				    0)
				&& (user_op->params.update.lazy == 0)
				&& (user_op->params.update.force == 0)
    a618:	68f2      	ldr	r2, [r6, #12]
    a61a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    a61e:	b91a      	cbnz	r2, a628 <ticker_job+0xe4>
			    )
			    ) {
				user_op->op = TICKER_USER_OP_TYPE_NONE;
    a620:	2300      	movs	r3, #0
    a622:	7033      	strb	r3, [r6, #0]
				user_op->status = TICKER_STATUS_FAILURE;
    a624:	2001      	movs	r0, #1
    a626:	e0a0      	b.n	a76a <ticker_job+0x226>

				continue;
			}

			/* Delete node, if not expired */
			if (state == 1) {
    a628:	2b01      	cmp	r3, #1
    a62a:	f040 80a6 	bne.w	a77a <ticker_job+0x236>
				ticker->ticks_to_expire =
				    ticker_dequeue(instance,
    a62e:	4650      	mov	r0, sl
    a630:	f7ff fdf4 	bl	a21c <ticker_dequeue>
						      user_op->id);

				/* Handle drift of ticker by re-inserting
				 * it back.
				 */
				if (user_op->op ==
    a634:	7833      	ldrb	r3, [r6, #0]
				continue;
			}

			/* Delete node, if not expired */
			if (state == 1) {
				ticker->ticks_to_expire =
    a636:	60a0      	str	r0, [r4, #8]
						      user_op->id);

				/* Handle drift of ticker by re-inserting
				 * it back.
				 */
				if (user_op->op ==
    a638:	2b04      	cmp	r3, #4
			}

			/* Delete node, if not expired */
			if (state == 1) {
				ticker->ticks_to_expire =
				    ticker_dequeue(instance,
    a63a:	4681      	mov	r9, r0
						      user_op->id);

				/* Handle drift of ticker by re-inserting
				 * it back.
				 */
				if (user_op->op ==
    a63c:	f040 8086 	bne.w	a74c <ticker_job+0x208>
					TICKER_USER_OP_TYPE_UPDATE) {
					ticker_job_node_update(ticker,
    a640:	f8da 8014 	ldr.w	r8, [sl, #20]
					  u8_t *insert_head)
{
	u32_t ticks_now;
	u32_t ticks_to_expire = ticker->ticks_to_expire;

	ticks_now = cntr_cnt_get();
    a644:	f7ff f9d6 	bl	99f4 <cntr_cnt_get>
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    a648:	9b03      	ldr	r3, [sp, #12]
					  u8_t *insert_head)
{
	u32_t ticks_now;
	u32_t ticks_to_expire = ticker->ticks_to_expire;

	ticks_now = cntr_cnt_get();
    a64a:	9008      	str	r0, [sp, #32]
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    a64c:	ebc8 0e00 	rsb	lr, r8, r0
    a650:	f02e 4e7f 	bic.w	lr, lr, #4278190080	; 0xff000000
    a654:	4473      	add	r3, lr
	if (ticks_to_expire > ticks_elapsed) {
    a656:	4599      	cmp	r9, r3
		ticks_to_expire -= ticks_elapsed;
	} else {
		ticker->ticks_to_expire_minus +=
    a658:	bf9d      	ittte	ls
    a65a:	f8b4 e014 	ldrhls.w	lr, [r4, #20]
    a65e:	ebc9 0e0e 	rsbls	lr, r9, lr
    a662:	449e      	addls	lr, r3
	u32_t ticks_to_expire = ticker->ticks_to_expire;

	ticks_now = cntr_cnt_get();
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
	if (ticks_to_expire > ticks_elapsed) {
		ticks_to_expire -= ticks_elapsed;
    a664:	ebc3 0e09 	rsbhi	lr, r3, r9
		ticker->ticks_to_expire_minus +=
		    (ticks_elapsed - ticks_to_expire);
		ticks_to_expire = 0;
	}

	if ((ticker->ticks_periodic != 0)
    a668:	6863      	ldr	r3, [r4, #4]
	ticks_now = cntr_cnt_get();
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
	if (ticks_to_expire > ticks_elapsed) {
		ticks_to_expire -= ticks_elapsed;
	} else {
		ticker->ticks_to_expire_minus +=
    a66a:	bf9c      	itt	ls
    a66c:	f8a4 e014 	strhls.w	lr, [r4, #20]
		    (ticks_elapsed - ticks_to_expire);
		ticks_to_expire = 0;
    a670:	f04f 0e00 	movls.w	lr, #0
	}

	if ((ticker->ticks_periodic != 0)
    a674:	2b00      	cmp	r3, #0
    a676:	d043      	beq.n	a700 <ticker_job+0x1bc>
	    && (user_op->params.update.lazy != 0)
    a678:	89b3      	ldrh	r3, [r6, #12]
    a67a:	2b00      	cmp	r3, #0
    a67c:	d040      	beq.n	a700 <ticker_job+0x1bc>
	    ) {
		user_op->params.update.lazy--;
    a67e:	3b01      	subs	r3, #1
    a680:	81b3      	strh	r3, [r6, #12]

		while ((ticks_to_expire > ticker->ticks_periodic)
    a682:	6860      	ldr	r0, [r4, #4]
    a684:	4570      	cmp	r0, lr
    a686:	d21e      	bcs.n	a6c6 <ticker_job+0x182>
		       && (ticker->lazy_current >
    a688:	f8b4 c01a 	ldrh.w	ip, [r4, #26]
    a68c:	89b3      	ldrh	r3, [r6, #12]
    a68e:	4563      	cmp	r3, ip
    a690:	d219      	bcs.n	a6c6 <ticker_job+0x182>

static u8_t ticker_remainder_decrement(struct ticker_node *ticker)
{
	u8_t decrement = 0;

	if ((ticker->remainder_current >= 0x80000000)
    a692:	6a21      	ldr	r1, [r4, #32]
    a694:	4b8f      	ldr	r3, [pc, #572]	; (a8d4 <ticker_job+0x390>)
    a696:	4a90      	ldr	r2, [pc, #576]	; (a8d8 <ticker_job+0x394>)
    a698:	440b      	add	r3, r1
    a69a:	4293      	cmp	r3, r2
	    || (ticker->remainder_current <= (30517578UL / 2))) {
		decrement++;
		ticker->remainder_current += 30517578UL;
    a69c:	bf82      	ittt	hi
    a69e:	4b8f      	ldrhi	r3, [pc, #572]	; (a8dc <ticker_job+0x398>)
    a6a0:	185b      	addhi	r3, r3, r1
    a6a2:	6223      	strhi	r3, [r4, #32]
	}
	ticker->remainder_current -= ticker->remainder_periodic;
    a6a4:	6a23      	ldr	r3, [r4, #32]
    a6a6:	69e1      	ldr	r1, [r4, #28]
{
	u8_t decrement = 0;

	if ((ticker->remainder_current >= 0x80000000)
	    || (ticker->remainder_current <= (30517578UL / 2))) {
		decrement++;
    a6a8:	bf8c      	ite	hi
    a6aa:	f04f 0901 	movhi.w	r9, #1
	return 0;
}

static u8_t ticker_remainder_decrement(struct ticker_node *ticker)
{
	u8_t decrement = 0;
    a6ae:	f04f 0900 	movls.w	r9, #0
	if ((ticker->remainder_current >= 0x80000000)
	    || (ticker->remainder_current <= (30517578UL / 2))) {
		decrement++;
		ticker->remainder_current += 30517578UL;
	}
	ticker->remainder_current -= ticker->remainder_periodic;
    a6b2:	1a5b      	subs	r3, r3, r1
		user_op->params.update.lazy--;

		while ((ticks_to_expire > ticker->ticks_periodic)
		       && (ticker->lazy_current >
			   user_op->params.update.lazy)) {
			ticks_to_expire -=
    a6b4:	4481      	add	r9, r0
			    (ticker->ticks_periodic +
			     ticker_remainder_decrement(ticker));
			ticker->lazy_current--;
    a6b6:	f10c 3cff 	add.w	ip, ip, #4294967295
	if ((ticker->remainder_current >= 0x80000000)
	    || (ticker->remainder_current <= (30517578UL / 2))) {
		decrement++;
		ticker->remainder_current += 30517578UL;
	}
	ticker->remainder_current -= ticker->remainder_periodic;
    a6ba:	6223      	str	r3, [r4, #32]
		user_op->params.update.lazy--;

		while ((ticks_to_expire > ticker->ticks_periodic)
		       && (ticker->lazy_current >
			   user_op->params.update.lazy)) {
			ticks_to_expire -=
    a6bc:	ebc9 0e0e 	rsb	lr, r9, lr
			    (ticker->ticks_periodic +
			     ticker_remainder_decrement(ticker));
			ticker->lazy_current--;
    a6c0:	f8a4 c01a 	strh.w	ip, [r4, #26]
    a6c4:	e7de      	b.n	a684 <ticker_job+0x140>
		}

		while (ticker->lazy_current < user_op->params.update.lazy) {
    a6c6:	f8b4 c01a 	ldrh.w	ip, [r4, #26]
    a6ca:	89b3      	ldrh	r3, [r6, #12]
    a6cc:	459c      	cmp	ip, r3
    a6ce:	d216      	bcs.n	a6fe <ticker_job+0x1ba>
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
}

static u8_t ticker_remainder_increment(struct ticker_node *ticker)
{
	ticker->remainder_current += ticker->remainder_periodic;
    a6d0:	6a21      	ldr	r1, [r4, #32]
    a6d2:	69e3      	ldr	r3, [r4, #28]
	if ((ticker->remainder_current < 0x80000000)
    a6d4:	4a80      	ldr	r2, [pc, #512]	; (a8d8 <ticker_job+0x394>)
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
}

static u8_t ticker_remainder_increment(struct ticker_node *ticker)
{
	ticker->remainder_current += ticker->remainder_periodic;
    a6d6:	440b      	add	r3, r1
	if ((ticker->remainder_current < 0x80000000)
    a6d8:	497e      	ldr	r1, [pc, #504]	; (a8d4 <ticker_job+0x390>)
    a6da:	4419      	add	r1, r3
    a6dc:	4291      	cmp	r1, r2
	    && (ticker->remainder_current > (30517578UL / 2))) {
		ticker->remainder_current -= 30517578UL;
    a6de:	bf95      	itete	ls
    a6e0:	497f      	ldrls	r1, [pc, #508]	; (a8e0 <ticker_job+0x39c>)
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
}

static u8_t ticker_remainder_increment(struct ticker_node *ticker)
{
	ticker->remainder_current += ticker->remainder_periodic;
    a6e2:	6223      	strhi	r3, [r4, #32]
	if ((ticker->remainder_current < 0x80000000)
	    && (ticker->remainder_current > (30517578UL / 2))) {
		ticker->remainder_current -= 30517578UL;
    a6e4:	18c9      	addls	r1, r1, r3
		return 1;
	}
	return 0;
    a6e6:	2300      	movhi	r3, #0
{
	ticker->remainder_current += ticker->remainder_periodic;
	if ((ticker->remainder_current < 0x80000000)
	    && (ticker->remainder_current > (30517578UL / 2))) {
		ticker->remainder_current -= 30517578UL;
		return 1;
    a6e8:	bf98      	it	ls
    a6ea:	2301      	movls	r3, #1
			     ticker_remainder_decrement(ticker));
			ticker->lazy_current--;
		}

		while (ticker->lazy_current < user_op->params.update.lazy) {
			ticks_to_expire +=
    a6ec:	4403      	add	r3, r0
			    ticker->ticks_periodic +
			    ticker_remainder_increment(ticker);
			ticker->lazy_current++;
    a6ee:	f10c 0c01 	add.w	ip, ip, #1
static u8_t ticker_remainder_increment(struct ticker_node *ticker)
{
	ticker->remainder_current += ticker->remainder_periodic;
	if ((ticker->remainder_current < 0x80000000)
	    && (ticker->remainder_current > (30517578UL / 2))) {
		ticker->remainder_current -= 30517578UL;
    a6f2:	bf98      	it	ls
    a6f4:	6221      	strls	r1, [r4, #32]
			     ticker_remainder_decrement(ticker));
			ticker->lazy_current--;
		}

		while (ticker->lazy_current < user_op->params.update.lazy) {
			ticks_to_expire +=
    a6f6:	449e      	add	lr, r3
			    ticker->ticks_periodic +
			    ticker_remainder_increment(ticker);
			ticker->lazy_current++;
    a6f8:	f8a4 c01a 	strh.w	ip, [r4, #26]
    a6fc:	e7e3      	b.n	a6c6 <ticker_job+0x182>
		}

		ticker->lazy_periodic = user_op->params.update.lazy;
    a6fe:	8323      	strh	r3, [r4, #24]
	}

	ticker->ticks_to_expire =
    a700:	88b3      	ldrh	r3, [r6, #4]
	    ticks_to_expire + user_op->params.update.ticks_drift_plus;
	ticker->ticks_to_expire_minus +=
    a702:	8aa1      	ldrh	r1, [r4, #20]
	    user_op->params.update.ticks_drift_minus;
	prepare_ticks_to_expire(ticker, ticks_current, ticks_now);
    a704:	9a08      	ldr	r2, [sp, #32]
		}

		ticker->lazy_periodic = user_op->params.update.lazy;
	}

	ticker->ticks_to_expire =
    a706:	4473      	add	r3, lr
    a708:	60a3      	str	r3, [r4, #8]
	    ticks_to_expire + user_op->params.update.ticks_drift_plus;
	ticker->ticks_to_expire_minus +=
    a70a:	88f3      	ldrh	r3, [r6, #6]
    a70c:	440b      	add	r3, r1
    a70e:	82a3      	strh	r3, [r4, #20]
	    user_op->params.update.ticks_drift_minus;
	prepare_ticks_to_expire(ticker, ticks_current, ticks_now);
    a710:	4641      	mov	r1, r8
    a712:	4620      	mov	r0, r4
    a714:	f7ff fdae 	bl	a274 <prepare_ticks_to_expire>

	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
    a718:	8ae2      	ldrh	r2, [r4, #22]
    a71a:	8933      	ldrh	r3, [r6, #8]
    a71c:	4413      	add	r3, r2
    a71e:	b29b      	uxth	r3, r3
    a720:	82e3      	strh	r3, [r4, #22]
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
    a722:	8972      	ldrh	r2, [r6, #10]
    a724:	4293      	cmp	r3, r2
		ticker->ticks_slot -=
    a726:	bf8c      	ite	hi
    a728:	1a9b      	subhi	r3, r3, r2
		    user_op->params.update.ticks_slot_minus;
	} else {
		ticker->ticks_slot = 0;
    a72a:	2300      	movls	r3, #0
    a72c:	82e3      	strh	r3, [r4, #22]
	}

	if (user_op->params.update.force != 0) {
    a72e:	7bb3      	ldrb	r3, [r6, #14]
    a730:	b103      	cbz	r3, a734 <ticker_job+0x1f0>
		ticker->force = user_op->params.update.force;
    a732:	70e3      	strb	r3, [r4, #3]
	}

	ticker->next = *insert_head;
    a734:	9b04      	ldr	r3, [sp, #16]
    a736:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a738:	f89d 1008 	ldrb.w	r1, [sp, #8]
    a73c:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
	*insert_head = user_op->id;
    a740:	7873      	ldrb	r3, [r6, #1]
    a742:	9302      	str	r3, [sp, #8]
							  insert_head);

					/* set schedule status of node
					 * as updating.
					 */
					ticker->req++;
    a744:	7863      	ldrb	r3, [r4, #1]
    a746:	3301      	adds	r3, #1
    a748:	7063      	strb	r3, [r4, #1]
    a74a:	e00c      	b.n	a766 <ticker_job+0x222>
				} else {
					/* reset schedule status of node */
					ticker->req = ticker->ack;
    a74c:	78a3      	ldrb	r3, [r4, #2]
    a74e:	7063      	strb	r3, [r4, #1]

					if (instance->
    a750:	7873      	ldrb	r3, [r6, #1]
    a752:	f89a 2019 	ldrb.w	r2, [sl, #25]
    a756:	429a      	cmp	r2, r3
					    ticker_id_slot_previous ==
					    user_op->id) {
						instance->
						    ticker_id_slot_previous =
    a758:	bf01      	itttt	eq
    a75a:	23ff      	moveq	r3, #255	; 0xff
    a75c:	f88a 3019 	strbeq.w	r3, [sl, #25]
						    TICKER_NULL;
						instance->
						    ticks_slot_previous = 0;
    a760:	2300      	moveq	r3, #0
    a762:	f8aa 301a 	strheq.w	r3, [sl, #26]
				}

				/* op success, @todo update may fail during
				 * actual insert! need to design that yet.
				 */
				user_op->op = TICKER_USER_OP_TYPE_NONE;
    a766:	2000      	movs	r0, #0
    a768:	7030      	strb	r0, [r6, #0]
				user_op->status = TICKER_STATUS_SUCCESS;
				if (user_op->fp_op_func) {
    a76a:	6a73      	ldr	r3, [r6, #36]	; 0x24

				/* op success, @todo update may fail during
				 * actual insert! need to design that yet.
				 */
				user_op->op = TICKER_USER_OP_TYPE_NONE;
				user_op->status = TICKER_STATUS_SUCCESS;
    a76c:	6230      	str	r0, [r6, #32]
				if (user_op->fp_op_func) {
    a76e:	2b00      	cmp	r3, #0
    a770:	f43f af26 	beq.w	a5c0 <ticker_job+0x7c>
					user_op->fp_op_func(
    a774:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    a776:	4798      	blx	r3
    a778:	e722      	b.n	a5c0 <ticker_job+0x7c>
				/* update on expired node requested, deferi
				 * update until bottom half finishes.
				 */
				/* sched job to run after worker bottom half.
				 */
				instance->fp_sched(CALL_ID_JOB,
    a77a:	2102      	movs	r1, #2
    a77c:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
    a780:	2201      	movs	r2, #1
    a782:	4608      	mov	r0, r1
    a784:	4798      	blx	r3
						   CALL_ID_JOB, 1);

				/* Update the index upto which management is
				 * complete.
				 */
				user->middle = prev;
    a786:	f887 8002 	strb.w	r8, [r7, #2]

				pending = 1;
    a78a:	2301      	movs	r3, #1
    a78c:	e70d      	b.n	a5aa <ticker_job+0x66>

	/* Initialise internal re-insert list */
	insert_head = TICKER_NULL;

	/* Initialise flag used to update next compare value */
	flag_compare_update = 0;
    a78e:	f89a 3018 	ldrb.w	r3, [sl, #24]
    a792:	9a06      	ldr	r2, [sp, #24]
    a794:	1a9b      	subs	r3, r3, r2
    a796:	bf18      	it	ne
    a798:	2301      	movne	r3, #1
    a79a:	9307      	str	r3, [sp, #28]
	if (instance->ticker_id_head != ticker_id_old_head) {
		flag_compare_update = 1;
	}

	/* Handle expired tickers */
	if (flag_elapsed) {
    a79c:	f1bb 0f00 	cmp.w	fp, #0
    a7a0:	d06f      	beq.n	a882 <ticker_job+0x33e>
					u8_t *insert_head)
{
	struct ticker_node *node;
	u32_t ticks_expired;

	node = &instance->node[0];
    a7a2:	f8da 9000 	ldr.w	r9, [sl]

		/* decrement ticks_slot_previous */
		if (instance->ticks_slot_previous > ticks_to_expire) {
			instance->ticks_slot_previous -= ticks_to_expire;
		} else {
			instance->ticker_id_slot_previous = TICKER_NULL;
    a7a6:	f04f 0bff 	mov.w	fp, #255	; 0xff
	struct ticker_node *node;
	u32_t ticks_expired;

	node = &instance->node[0];
	ticks_expired = 0;
	while (instance->ticker_id_head != TICKER_NULL) {
    a7aa:	f89a 8018 	ldrb.w	r8, [sl, #24]
    a7ae:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    a7b2:	d05e      	beq.n	a872 <ticker_job+0x32e>
		u8_t id_expired;
		u32_t ticks_to_expire;

		/* auto variable for current ticker node */
		id_expired = instance->ticker_id_head;
		ticker = &node[id_expired];
    a7b4:	fa0f f788 	sxth.w	r7, r8
    a7b8:	eb07 07c7 	add.w	r7, r7, r7, lsl #3
    a7bc:	eb09 0487 	add.w	r4, r9, r7, lsl #2

		/* Do nothing if ticker did not expire */
		ticks_to_expire = ticker->ticks_to_expire;
		if (ticks_elapsed < ticks_to_expire) {
    a7c0:	9b03      	ldr	r3, [sp, #12]
		/* auto variable for current ticker node */
		id_expired = instance->ticker_id_head;
		ticker = &node[id_expired];

		/* Do nothing if ticker did not expire */
		ticks_to_expire = ticker->ticks_to_expire;
    a7c2:	68a6      	ldr	r6, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
    a7c4:	429e      	cmp	r6, r3
    a7c6:	d902      	bls.n	a7ce <ticker_job+0x28a>
			ticker->ticks_to_expire -= ticks_elapsed;
    a7c8:	1af6      	subs	r6, r6, r3
    a7ca:	60a6      	str	r6, [r4, #8]
    a7cc:	e051      	b.n	a872 <ticker_job+0x32e>
		/* decrement ticks_elapsed and collect expired ticks */
		ticks_elapsed -= ticks_to_expire;
		ticks_expired += ticks_to_expire;

		/* decrement ticks_slot_previous */
		if (instance->ticks_slot_previous > ticks_to_expire) {
    a7ce:	f8ba 301a 	ldrh.w	r3, [sl, #26]
    a7d2:	429e      	cmp	r6, r3
			instance->ticks_slot_previous -= ticks_to_expire;
    a7d4:	bf32      	itee	cc
    a7d6:	1b9b      	subcc	r3, r3, r6
		} else {
			instance->ticker_id_slot_previous = TICKER_NULL;
			instance->ticks_slot_previous = 0;
    a7d8:	2300      	movcs	r3, #0

		/* decrement ticks_slot_previous */
		if (instance->ticks_slot_previous > ticks_to_expire) {
			instance->ticks_slot_previous -= ticks_to_expire;
		} else {
			instance->ticker_id_slot_previous = TICKER_NULL;
    a7da:	f88a b019 	strbcs.w	fp, [sl, #25]
			instance->ticks_slot_previous = 0;
    a7de:	f8aa 301a 	strh.w	r3, [sl, #26]
		}

		/* save current ticks_slot_previous */
		if (ticker->ticks_slot != 0) {
    a7e2:	8ae3      	ldrh	r3, [r4, #22]
			break;
		}

		/* decrement ticks_elapsed and collect expired ticks */
		ticks_elapsed -= ticks_to_expire;
		ticks_expired += ticks_to_expire;
    a7e4:	4435      	add	r5, r6
			instance->ticker_id_slot_previous = TICKER_NULL;
			instance->ticks_slot_previous = 0;
		}

		/* save current ticks_slot_previous */
		if (ticker->ticks_slot != 0) {
    a7e6:	b123      	cbz	r3, a7f2 <ticker_job+0x2ae>
			instance->ticker_id_slot_previous = id_expired;
    a7e8:	f88a 8019 	strb.w	r8, [sl, #25]
			instance->ticks_slot_previous = ticker->ticks_slot;
    a7ec:	8ae3      	ldrh	r3, [r4, #22]
    a7ee:	f8aa 301a 	strh.w	r3, [sl, #26]
		}

		/* ticker expired, set ticks_to_expire zero */
		ticker->ticks_to_expire = 0;
    a7f2:	2300      	movs	r3, #0
    a7f4:	60a3      	str	r3, [r4, #8]

		/* remove the expired ticker from head */
		instance->ticker_id_head = ticker->next;
    a7f6:	f819 2027 	ldrb.w	r2, [r9, r7, lsl #2]
    a7fa:	f88a 2018 	strb.w	r2, [sl, #24]

		/* ticker will be restarted if periodic */
		if (ticker->ticks_periodic != 0) {
    a7fe:	f8d4 e004 	ldr.w	lr, [r4, #4]
    a802:	f1be 0f00 	cmp.w	lr, #0
    a806:	d02a      	beq.n	a85e <ticker_job+0x31a>
    a808:	8b20      	ldrh	r0, [r4, #24]
			u32_t count;

			count = 1 + ticker->lazy_periodic;

			ticks_to_expire = 0;
    a80a:	469c      	mov	ip, r3
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
}

static u8_t ticker_remainder_increment(struct ticker_node *ticker)
{
	ticker->remainder_current += ticker->remainder_periodic;
    a80c:	6a21      	ldr	r1, [r4, #32]
    a80e:	69e2      	ldr	r2, [r4, #28]
	if ((ticker->remainder_current < 0x80000000)
    a810:	4b31      	ldr	r3, [pc, #196]	; (a8d8 <ticker_job+0x394>)
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
}

static u8_t ticker_remainder_increment(struct ticker_node *ticker)
{
	ticker->remainder_current += ticker->remainder_periodic;
    a812:	440a      	add	r2, r1
	if ((ticker->remainder_current < 0x80000000)
    a814:	492f      	ldr	r1, [pc, #188]	; (a8d4 <ticker_job+0x390>)
    a816:	4411      	add	r1, r2
    a818:	4299      	cmp	r1, r3
	    && (ticker->remainder_current > (30517578UL / 2))) {
		ticker->remainder_current -= 30517578UL;
    a81a:	bf95      	itete	ls
    a81c:	4930      	ldrls	r1, [pc, #192]	; (a8e0 <ticker_job+0x39c>)
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
}

static u8_t ticker_remainder_increment(struct ticker_node *ticker)
{
	ticker->remainder_current += ticker->remainder_periodic;
    a81e:	6222      	strhi	r2, [r4, #32]
	if ((ticker->remainder_current < 0x80000000)
	    && (ticker->remainder_current > (30517578UL / 2))) {
		ticker->remainder_current -= 30517578UL;
    a820:	1889      	addls	r1, r1, r2
		return 1;
	}
	return 0;
    a822:	2200      	movhi	r2, #0
{
	ticker->remainder_current += ticker->remainder_periodic;
	if ((ticker->remainder_current < 0x80000000)
	    && (ticker->remainder_current > (30517578UL / 2))) {
		ticker->remainder_current -= 30517578UL;
		return 1;
    a824:	bf9c      	itt	ls
    a826:	2201      	movls	r2, #1
static u8_t ticker_remainder_increment(struct ticker_node *ticker)
{
	ticker->remainder_current += ticker->remainder_periodic;
	if ((ticker->remainder_current < 0x80000000)
	    && (ticker->remainder_current > (30517578UL / 2))) {
		ticker->remainder_current -= 30517578UL;
    a828:	6221      	strls	r1, [r4, #32]

			count = 1 + ticker->lazy_periodic;

			ticks_to_expire = 0;
			while (count--) {
				ticks_to_expire +=
    a82a:	4472      	add	r2, lr
			u32_t count;

			count = 1 + ticker->lazy_periodic;

			ticks_to_expire = 0;
			while (count--) {
    a82c:	f110 30ff 	adds.w	r0, r0, #4294967295
				ticks_to_expire +=
    a830:	4494      	add	ip, r2
			u32_t count;

			count = 1 + ticker->lazy_periodic;

			ticks_to_expire = 0;
			while (count--) {
    a832:	d2eb      	bcs.n	a80c <ticker_job+0x2c8>
				    ticker->ticks_periodic +
				    ticker_remainder_increment(ticker);
			}

			ticker->ticks_to_expire = ticks_to_expire;
			prepare_ticks_to_expire(ticker,
    a834:	9b05      	ldr	r3, [sp, #20]
				ticks_to_expire +=
				    ticker->ticks_periodic +
				    ticker_remainder_increment(ticker);
			}

			ticker->ticks_to_expire = ticks_to_expire;
    a836:	f8c4 c008 	str.w	ip, [r4, #8]
			prepare_ticks_to_expire(ticker,
    a83a:	195a      	adds	r2, r3, r5
    a83c:	f8da 1014 	ldr.w	r1, [sl, #20]
    a840:	4620      	mov	r0, r4
    a842:	f7ff fd17 	bl	a274 <prepare_ticks_to_expire>
						    instance->ticks_current,
						    (ticks_previous +
						     ticks_expired));
			ticker->lazy_current = ticker->lazy_periodic;
    a846:	8b23      	ldrh	r3, [r4, #24]
    a848:	8363      	strh	r3, [r4, #26]
			ticker->force = 0;
    a84a:	2300      	movs	r3, #0
    a84c:	70e3      	strb	r3, [r4, #3]

			ticker->next = *insert_head;
    a84e:	f89d 3008 	ldrb.w	r3, [sp, #8]
    a852:	f809 3027 	strb.w	r3, [r9, r7, lsl #2]
			*insert_head = id_expired;

			/* set schedule status of node as restarting. */
			ticker->req++;
    a856:	7863      	ldrb	r3, [r4, #1]
    a858:	3301      	adds	r3, #1
    a85a:	7063      	strb	r3, [r4, #1]
    a85c:	e003      	b.n	a866 <ticker_job+0x322>
		} else {
			/* reset schedule status of node */
			ticker->req = ticker->ack;
    a85e:	78a3      	ldrb	r3, [r4, #2]
    a860:	f8dd 8008 	ldr.w	r8, [sp, #8]
    a864:	7063      	strb	r3, [r4, #1]
			ticker->ticks_to_expire -= ticks_elapsed;
			break;
		}

		/* decrement ticks_elapsed and collect expired ticks */
		ticks_elapsed -= ticks_to_expire;
    a866:	9b03      	ldr	r3, [sp, #12]
    a868:	f8cd 8008 	str.w	r8, [sp, #8]
    a86c:	1b9b      	subs	r3, r3, r6
    a86e:	9303      	str	r3, [sp, #12]
    a870:	e79b      	b.n	a7aa <ticker_job+0x266>
		ticker_job_worker_bottom_half(instance, ticks_previous,
						 ticks_elapsed, &insert_head);

		/* detect change in head of the list */
		if (instance->ticker_id_head != ticker_id_old_head) {
			flag_compare_update = 1;
    a872:	9a07      	ldr	r2, [sp, #28]
	if (flag_elapsed) {
		ticker_job_worker_bottom_half(instance, ticks_previous,
						 ticks_elapsed, &insert_head);

		/* detect change in head of the list */
		if (instance->ticker_id_head != ticker_id_old_head) {
    a874:	f89a 3018 	ldrb.w	r3, [sl, #24]
			flag_compare_update = 1;
    a878:	9906      	ldr	r1, [sp, #24]
    a87a:	428b      	cmp	r3, r1
    a87c:	bf18      	it	ne
    a87e:	2201      	movne	r2, #1
    a880:	9207      	str	r2, [sp, #28]
{
	struct ticker_node *node;
	struct ticker_user *users;
	u8_t count_user;

	node = &instance->node[0];
    a882:	f8da 3000 	ldr.w	r3, [sl]
    a886:	9304      	str	r3, [sp, #16]
	users = &instance->user[0];
    a888:	f8da 3004 	ldr.w	r3, [sl, #4]
    a88c:	930e      	str	r3, [sp, #56]	; 0x38
	count_user = instance->count_user;
    a88e:	f89a 3009 	ldrb.w	r3, [sl, #9]
    a892:	9305      	str	r3, [sp, #20]
	while (count_user--) {
    a894:	9b05      	ldr	r3, [sp, #20]
    a896:	2b00      	cmp	r3, #0
    a898:	f000 812d 	beq.w	aaf6 <ticker_job+0x5b2>
    a89c:	9b05      	ldr	r3, [sp, #20]
    a89e:	3b01      	subs	r3, #1
    a8a0:	b2db      	uxtb	r3, r3
    a8a2:	9305      	str	r3, [sp, #20]
		struct ticker_user *user;
		u8_t user_ops_first;

		user = &users[count_user];
    a8a4:	9a05      	ldr	r2, [sp, #20]
    a8a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a8a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    a8ac:	9308      	str	r3, [sp, #32]
		user_ops_first = user->first;
    a8ae:	f893 9001 	ldrb.w	r9, [r3, #1]
		while ((insert_head != TICKER_NULL)
    a8b2:	9b02      	ldr	r3, [sp, #8]
    a8b4:	2bff      	cmp	r3, #255	; 0xff
    a8b6:	d01d      	beq.n	a8f4 <ticker_job+0x3b0>
			struct ticker_node *ticker;
			u32_t status;

			if (insert_head != TICKER_NULL) {
				id_insert = insert_head;
				ticker = &node[id_insert];
    a8b8:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
    a8bc:	9a04      	ldr	r2, [sp, #16]
				insert_head = ticker->next;
    a8be:	f8dd 8008 	ldr.w	r8, [sp, #8]
			struct ticker_node *ticker;
			u32_t status;

			if (insert_head != TICKER_NULL) {
				id_insert = insert_head;
				ticker = &node[id_insert];
    a8c2:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    a8c6:	eb02 0483 	add.w	r4, r2, r3, lsl #2
				insert_head = ticker->next;
    a8ca:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
    a8ce:	9302      	str	r3, [sp, #8]

				user_op = 0;
    a8d0:	2500      	movs	r5, #0
    a8d2:	e04d      	b.n	a970 <ticker_job+0x42c>
    a8d4:	ff172b5a 	.word	0xff172b5a
    a8d8:	7f172b59 	.word	0x7f172b59
    a8dc:	01d1a94a 	.word	0x01d1a94a
    a8e0:	fe2e56b6 	.word	0xfe2e56b6
				if (_user_op != TICKER_USER_OP_TYPE_START) {
					continue;
				}

				if (((ticker->req - ticker->ack) & 0xff) != 0) {
					user_op->op = TICKER_USER_OP_TYPE_NONE;
    a8e4:	2300      	movs	r3, #0
    a8e6:	548b      	strb	r3, [r1, r2]
					user_op->status =
					    TICKER_STATUS_FAILURE;

					if (user_op->fp_op_func) {
    a8e8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
					continue;
				}

				if (((ticker->req - ticker->ack) & 0xff) != 0) {
					user_op->op = TICKER_USER_OP_TYPE_NONE;
					user_op->status =
    a8ea:	2001      	movs	r0, #1
    a8ec:	6228      	str	r0, [r5, #32]
					    TICKER_STATUS_FAILURE;

					if (user_op->fp_op_func) {
    a8ee:	b10b      	cbz	r3, a8f4 <ticker_job+0x3b0>
						user_op->
    a8f0:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    a8f2:	4798      	blx	r3
		u8_t user_ops_first;

		user = &users[count_user];
		user_ops_first = user->first;
		while ((insert_head != TICKER_NULL)
		       || (user_ops_first != user->middle)
    a8f4:	9b08      	ldr	r3, [sp, #32]
    a8f6:	789b      	ldrb	r3, [r3, #2]
    a8f8:	454b      	cmp	r3, r9
    a8fa:	d0cb      	beq.n	a894 <ticker_job+0x350>
				user_op = 0;
				_user_op = TICKER_USER_OP_TYPE_START;
			} else {
				u8_t first;

				user_op = &user->user_op[user_ops_first];
    a8fc:	232c      	movs	r3, #44	; 0x2c
    a8fe:	fb19 f203 	smulbb	r2, r9, r3
    a902:	9b08      	ldr	r3, [sp, #32]
    a904:	6859      	ldr	r1, [r3, #4]
				first = user_ops_first + 1;
    a906:	f109 0301 	add.w	r3, r9, #1
    a90a:	fa5f f983 	uxtb.w	r9, r3
				if (first == user->count_user_op) {
    a90e:	9b08      	ldr	r3, [sp, #32]
    a910:	781b      	ldrb	r3, [r3, #0]
					first = 0;
    a912:	454b      	cmp	r3, r9
    a914:	bf08      	it	eq
    a916:	f04f 0900 	moveq.w	r9, #0
				user_ops_first = first;

				_user_op = user_op->op;
				id_insert = user_op->id;
				ticker = &node[id_insert];
				if (_user_op != TICKER_USER_OP_TYPE_START) {
    a91a:	5c8b      	ldrb	r3, [r1, r2]
    a91c:	2b03      	cmp	r3, #3
				user_op = 0;
				_user_op = TICKER_USER_OP_TYPE_START;
			} else {
				u8_t first;

				user_op = &user->user_op[user_ops_first];
    a91e:	eb01 0502 	add.w	r5, r1, r2
				user_ops_first = first;

				_user_op = user_op->op;
				id_insert = user_op->id;
				ticker = &node[id_insert];
				if (_user_op != TICKER_USER_OP_TYPE_START) {
    a922:	d1e7      	bne.n	a8f4 <ticker_job+0x3b0>
					first = 0;
				}
				user_ops_first = first;

				_user_op = user_op->op;
				id_insert = user_op->id;
    a924:	f895 8001 	ldrb.w	r8, [r5, #1]
				ticker = &node[id_insert];
    a928:	9b04      	ldr	r3, [sp, #16]
    a92a:	eb08 04c8 	add.w	r4, r8, r8, lsl #3
    a92e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
				if (_user_op != TICKER_USER_OP_TYPE_START) {
					continue;
				}

				if (((ticker->req - ticker->ack) & 0xff) != 0) {
    a932:	7863      	ldrb	r3, [r4, #1]
    a934:	78a6      	ldrb	r6, [r4, #2]
    a936:	1b9e      	subs	r6, r3, r6
    a938:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
    a93c:	d1d2      	bne.n	a8e4 <ticker_job+0x3a0>

					continue;
				}

				ticker->ticks_periodic =
				    user_op->params.start.ticks_periodic;
    a93e:	68eb      	ldr	r3, [r5, #12]
					}

					continue;
				}

				ticker->ticks_periodic =
    a940:	6063      	str	r3, [r4, #4]
				    user_op->params.start.ticks_periodic;
				ticker->remainder_periodic =
				    user_op->params.start.remainder_periodic;
    a942:	692b      	ldr	r3, [r5, #16]
					continue;
				}

				ticker->ticks_periodic =
				    user_op->params.start.ticks_periodic;
				ticker->remainder_periodic =
    a944:	61e3      	str	r3, [r4, #28]
				    user_op->params.start.remainder_periodic;
				ticker->lazy_periodic =
				    user_op->params.start.lazy;
    a946:	8aab      	ldrh	r3, [r5, #20]

				ticker->ticks_periodic =
				    user_op->params.start.ticks_periodic;
				ticker->remainder_periodic =
				    user_op->params.start.remainder_periodic;
				ticker->lazy_periodic =
    a948:	8323      	strh	r3, [r4, #24]
				    user_op->params.start.lazy;
				ticker->ticks_slot =
				    user_op->params.start.ticks_slot;
    a94a:	8aeb      	ldrh	r3, [r5, #22]
				    user_op->params.start.ticks_periodic;
				ticker->remainder_periodic =
				    user_op->params.start.remainder_periodic;
				ticker->lazy_periodic =
				    user_op->params.start.lazy;
				ticker->ticks_slot =
    a94c:	82e3      	strh	r3, [r4, #22]
				    user_op->params.start.ticks_slot;
				ticker->timeout_func =
				    user_op->params.start.fp_timeout_func;
    a94e:	69ab      	ldr	r3, [r5, #24]
				    user_op->params.start.remainder_periodic;
				ticker->lazy_periodic =
				    user_op->params.start.lazy;
				ticker->ticks_slot =
				    user_op->params.start.ticks_slot;
				ticker->timeout_func =
    a950:	60e3      	str	r3, [r4, #12]
				    user_op->params.start.fp_timeout_func;
				ticker->context =
				    user_op->params.start.context;
    a952:	69eb      	ldr	r3, [r5, #28]
				    user_op->params.start.lazy;
				ticker->ticks_slot =
				    user_op->params.start.ticks_slot;
				ticker->timeout_func =
				    user_op->params.start.fp_timeout_func;
				ticker->context =
    a954:	6123      	str	r3, [r4, #16]
				    user_op->params.start.context;

				ticker->ticks_to_expire =
				    user_op->params.start.ticks_first;
    a956:	68ab      	ldr	r3, [r5, #8]
				ticker->timeout_func =
				    user_op->params.start.fp_timeout_func;
				ticker->context =
				    user_op->params.start.context;

				ticker->ticks_to_expire =
    a958:	60a3      	str	r3, [r4, #8]
				    user_op->params.start.ticks_first;
				ticker->ticks_to_expire_minus = 0;
    a95a:	82a6      	strh	r6, [r4, #20]
				prepare_ticks_to_expire(ticker,
    a95c:	686a      	ldr	r2, [r5, #4]
    a95e:	f8da 1014 	ldr.w	r1, [sl, #20]
    a962:	4620      	mov	r0, r4
    a964:	f7ff fc86 	bl	a274 <prepare_ticks_to_expire>
							    start.
							    ticks_at_start);

				ticker->remainder_current = 0;
				ticker->lazy_current = 0;
				ticker->force = 1;
    a968:	2301      	movs	r3, #1
							    ticks_current,
							    user_op->params.
							    start.
							    ticks_at_start);

				ticker->remainder_current = 0;
    a96a:	6226      	str	r6, [r4, #32]
				ticker->lazy_current = 0;
    a96c:	8366      	strh	r6, [r4, #26]
				ticker->force = 1;
    a96e:	70e3      	strb	r3, [r4, #3]
			}

			/* Prepare to insert */
			ticker->next = TICKER_NULL;
    a970:	23ff      	movs	r3, #255	; 0xff
    a972:	7023      	strb	r3, [r4, #0]
	u32_t ticks_to_expire;
	u32_t ticks_to_expire_current;
	u32_t ticks_slot_previous;

	node = &instance->node[0];
	ticker_new = &node[id];
    a974:	fa0f f388 	sxth.w	r3, r8
    a978:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    a97c:	009b      	lsls	r3, r3, #2
    a97e:	930f      	str	r3, [sp, #60]	; 0x3c
    a980:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	u8_t collide;
	u32_t ticks_to_expire;
	u32_t ticks_to_expire_current;
	u32_t ticks_slot_previous;

	node = &instance->node[0];
    a982:	f8da 2000 	ldr.w	r2, [sl]
	ticks_to_expire = ticker_new->ticks_to_expire;

	collide = ticker_id_slot_previous = TICKER_NULL;
	current = instance->ticker_id_head;
	previous = current;
	ticks_slot_previous = instance->ticks_slot_previous;
    a986:	f8ba 101a 	ldrh.w	r1, [sl, #26]
    a98a:	9103      	str	r1, [sp, #12]
	u32_t ticks_to_expire;
	u32_t ticks_to_expire_current;
	u32_t ticks_slot_previous;

	node = &instance->node[0];
	ticker_new = &node[id];
    a98c:	eb02 0b03 	add.w	fp, r2, r3
	ticks_to_expire = ticker_new->ticks_to_expire;

	collide = ticker_id_slot_previous = TICKER_NULL;
	current = instance->ticker_id_head;
    a990:	f89a 3018 	ldrb.w	r3, [sl, #24]
	u32_t ticks_to_expire_current;
	u32_t ticks_slot_previous;

	node = &instance->node[0];
	ticker_new = &node[id];
	ticks_to_expire = ticker_new->ticks_to_expire;
    a994:	f8db 0008 	ldr.w	r0, [fp, #8]

	collide = ticker_id_slot_previous = TICKER_NULL;
	current = instance->ticker_id_head;
	previous = current;
    a998:	930a      	str	r3, [sp, #40]	; 0x28

	node = &instance->node[0];
	ticker_new = &node[id];
	ticks_to_expire = ticker_new->ticks_to_expire;

	collide = ticker_id_slot_previous = TICKER_NULL;
    a99a:	26ff      	movs	r6, #255	; 0xff
	current = instance->ticker_id_head;
	previous = current;
	ticks_slot_previous = instance->ticks_slot_previous;
	while ((current != TICKER_NULL)
    a99c:	2bff      	cmp	r3, #255	; 0xff
    a99e:	d01c      	beq.n	a9da <ticker_job+0x496>
	       &&
	       (ticks_to_expire >
		(ticks_to_expire_current =
		 (ticker_current = &node[current])->ticks_to_expire))
    a9a0:	eb03 0cc3 	add.w	ip, r3, r3, lsl #3
    a9a4:	eb02 0e8c 	add.w	lr, r2, ip, lsl #2
	previous = current;
	ticks_slot_previous = instance->ticks_slot_previous;
	while ((current != TICKER_NULL)
	       &&
	       (ticks_to_expire >
		(ticks_to_expire_current =
    a9a8:	f8de 1008 	ldr.w	r1, [lr, #8]
	collide = ticker_id_slot_previous = TICKER_NULL;
	current = instance->ticker_id_head;
	previous = current;
	ticks_slot_previous = instance->ticks_slot_previous;
	while ((current != TICKER_NULL)
	       &&
    a9ac:	4288      	cmp	r0, r1
    a9ae:	d914      	bls.n	a9da <ticker_job+0x496>
		(ticks_to_expire_current =
		 (ticker_current = &node[current])->ticks_to_expire))
	    ) {
		ticks_to_expire -= ticks_to_expire_current;

		if (ticker_current->ticks_slot != 0) {
    a9b0:	f8be e016 	ldrh.w	lr, [lr, #22]
	       &&
	       (ticks_to_expire >
		(ticks_to_expire_current =
		 (ticker_current = &node[current])->ticks_to_expire))
	    ) {
		ticks_to_expire -= ticks_to_expire_current;
    a9b4:	1a40      	subs	r0, r0, r1

		if (ticker_current->ticks_slot != 0) {
    a9b6:	f1be 0f00 	cmp.w	lr, #0
    a9ba:	d003      	beq.n	a9c4 <ticker_job+0x480>
			ticks_slot_previous = ticker_current->ticks_slot;
    a9bc:	f8cd e00c 	str.w	lr, [sp, #12]
    a9c0:	461e      	mov	r6, r3
    a9c2:	e006      	b.n	a9d2 <ticker_job+0x48e>
			ticker_id_slot_previous = current;
		} else {
			if (ticks_slot_previous > ticks_to_expire_current) {
    a9c4:	9f03      	ldr	r7, [sp, #12]
    a9c6:	42b9      	cmp	r1, r7
				ticks_slot_previous -= ticks_to_expire_current;
    a9c8:	bf3a      	itte	cc
    a9ca:	1a79      	subcc	r1, r7, r1
    a9cc:	9103      	strcc	r1, [sp, #12]
			} else {
				ticks_slot_previous = 0;
    a9ce:	f8cd e00c 	strcs.w	lr, [sp, #12]
			}
		}
		previous = current;
		current = ticker_current->next;
    a9d2:	930a      	str	r3, [sp, #40]	; 0x28
    a9d4:	f812 302c 	ldrb.w	r3, [r2, ip, lsl #2]
    a9d8:	e7e0      	b.n	a99c <ticker_job+0x458>
	}

	collide = ticker_by_slot_get(&node[0], current, ticks_to_expire +
				ticker_new->ticks_slot);
    a9da:	f8bb 1016 	ldrh.w	r1, [fp, #22]
    a9de:	910b      	str	r1, [sp, #44]	; 0x2c
		}
		previous = current;
		current = ticker_current->next;
	}

	collide = ticker_by_slot_get(&node[0], current, ticks_to_expire +
    a9e0:	eb01 0c00 	add.w	ip, r1, r0
    a9e4:	4619      	mov	r1, r3
 * Static Functions
 ****************************************************************************/
static u8_t ticker_by_slot_get(struct ticker_node *node, u8_t ticker_id_head,
			       u32_t ticks_slot)
{
	while (ticker_id_head != TICKER_NULL) {
    a9e6:	29ff      	cmp	r1, #255	; 0xff
    a9e8:	d014      	beq.n	aa14 <ticker_job+0x4d0>
		struct ticker_node *ticker;
		u32_t ticks_to_expire;

		ticker = &node[ticker_id_head];
    a9ea:	fa0f fe81 	sxth.w	lr, r1
    a9ee:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
    a9f2:	eb02 078e 	add.w	r7, r2, lr, lsl #2
    a9f6:	970c      	str	r7, [sp, #48]	; 0x30
		ticks_to_expire = ticker->ticks_to_expire;
    a9f8:	68bf      	ldr	r7, [r7, #8]
    a9fa:	970d      	str	r7, [sp, #52]	; 0x34

		if (ticks_slot <= ticks_to_expire) {
    a9fc:	4567      	cmp	r7, ip
    a9fe:	d208      	bcs.n	aa12 <ticker_job+0x4ce>
			return TICKER_NULL;
		}

		if (ticker->ticks_slot) {
    aa00:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    aa02:	8aff      	ldrh	r7, [r7, #22]
    aa04:	b937      	cbnz	r7, aa14 <ticker_job+0x4d0>
			break;
		}

		ticks_slot -= ticks_to_expire;
    aa06:	990d      	ldr	r1, [sp, #52]	; 0x34
    aa08:	ebc1 0c0c 	rsb	ip, r1, ip
		ticker_id_head = ticker->next;
    aa0c:	f812 102e 	ldrb.w	r1, [r2, lr, lsl #2]
    aa10:	e7e9      	b.n	a9e6 <ticker_job+0x4a2>

		ticker = &node[ticker_id_head];
		ticks_to_expire = ticker->ticks_to_expire;

		if (ticks_slot <= ticks_to_expire) {
			return TICKER_NULL;
    aa12:	21ff      	movs	r1, #255	; 0xff
	}

	collide = ticker_by_slot_get(&node[0], current, ticks_to_expire +
				ticker_new->ticks_slot);

	if ((ticker_new->ticks_slot == 0)
    aa14:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    aa16:	b127      	cbz	r7, aa22 <ticker_job+0x4de>
	    || ((ticks_slot_previous <= ticks_to_expire)
    aa18:	9f03      	ldr	r7, [sp, #12]
    aa1a:	42b8      	cmp	r0, r7
    aa1c:	d31b      	bcc.n	aa56 <ticker_job+0x512>
		&& (collide == TICKER_NULL))
    aa1e:	29ff      	cmp	r1, #255	; 0xff
    aa20:	d11f      	bne.n	aa62 <ticker_job+0x51e>
	    ) {
		ticker_new->ticks_to_expire = ticks_to_expire;
		ticker_new->next = current;

		if (previous == current) {
    aa22:	990a      	ldr	r1, [sp, #40]	; 0x28

	if ((ticker_new->ticks_slot == 0)
	    || ((ticks_slot_previous <= ticks_to_expire)
		&& (collide == TICKER_NULL))
	    ) {
		ticker_new->ticks_to_expire = ticks_to_expire;
    aa24:	f8cb 0008 	str.w	r0, [fp, #8]
		ticker_new->next = current;

		if (previous == current) {
    aa28:	428b      	cmp	r3, r1
	if ((ticker_new->ticks_slot == 0)
	    || ((ticks_slot_previous <= ticks_to_expire)
		&& (collide == TICKER_NULL))
	    ) {
		ticker_new->ticks_to_expire = ticks_to_expire;
		ticker_new->next = current;
    aa2a:	f88b 3000 	strb.w	r3, [fp]

		if (previous == current) {
			instance->ticker_id_head = id;
		} else {
			node[previous].next = id;
    aa2e:	bf17      	itett	ne
    aa30:	f9bd b028 	ldrshne.w	fp, [sp, #40]	; 0x28
	    ) {
		ticker_new->ticks_to_expire = ticks_to_expire;
		ticker_new->next = current;

		if (previous == current) {
			instance->ticker_id_head = id;
    aa34:	f88a 8018 	strbeq.w	r8, [sl, #24]
		} else {
			node[previous].next = id;
    aa38:	eb0b 0bcb 	addne.w	fp, fp, fp, lsl #3
    aa3c:	f802 802b 	strbne.w	r8, [r2, fp, lsl #2]
		}

		if (current != TICKER_NULL) {
    aa40:	2bff      	cmp	r3, #255	; 0xff
    aa42:	f000 8125 	beq.w	ac90 <ticker_job+0x74c>
			node[current].ticks_to_expire -= ticks_to_expire;
    aa46:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    aa4a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    aa4e:	689a      	ldr	r2, [r3, #8]
    aa50:	1a10      	subs	r0, r2, r0
    aa52:	6098      	str	r0, [r3, #8]
    aa54:	e11c      	b.n	ac90 <ticker_job+0x74c>

			/* Prepare to insert */
			ticker->next = TICKER_NULL;

			/* If insert collides advance to next interval */
			while (id_insert !=
    aa56:	45b0      	cmp	r8, r6
    aa58:	f000 811a 	beq.w	ac90 <ticker_job+0x74c>
			       (id_collide =
				ticker_enqueue(instance, id_insert))) {
				struct ticker_node *ticker_preempt;

				ticker_preempt = (id_collide != TICKER_NULL) ?
					&node[id_collide] : 0;
    aa5c:	2eff      	cmp	r6, #255	; 0xff
    aa5e:	d104      	bne.n	aa6a <ticker_job+0x526>
    aa60:	e01f      	b.n	aaa2 <ticker_job+0x55e>

			/* Prepare to insert */
			ticker->next = TICKER_NULL;

			/* If insert collides advance to next interval */
			while (id_insert !=
    aa62:	4588      	cmp	r8, r1
    aa64:	f000 8114 	beq.w	ac90 <ticker_job+0x74c>
    aa68:	460e      	mov	r6, r1
			       (id_collide =
				ticker_enqueue(instance, id_insert))) {
				struct ticker_node *ticker_preempt;

				ticker_preempt = (id_collide != TICKER_NULL) ?
					&node[id_collide] : 0;
    aa6a:	b237      	sxth	r7, r6

				if (ticker_preempt
    aa6c:	9b04      	ldr	r3, [sp, #16]
			       (id_collide =
				ticker_enqueue(instance, id_insert))) {
				struct ticker_node *ticker_preempt;

				ticker_preempt = (id_collide != TICKER_NULL) ?
					&node[id_collide] : 0;
    aa6e:	eb07 07c7 	add.w	r7, r7, r7, lsl #3

				if (ticker_preempt
    aa72:	eb13 0b87 	adds.w	fp, r3, r7, lsl #2
    aa76:	d014      	beq.n	aaa2 <ticker_job+0x55e>
				    && (ticker->force > ticker_preempt->force)
    aa78:	78e2      	ldrb	r2, [r4, #3]
    aa7a:	f89b 3003 	ldrb.w	r3, [fp, #3]
    aa7e:	429a      	cmp	r2, r3
    aa80:	d90f      	bls.n	aaa2 <ticker_job+0x55e>
				    ) {
					/* dequeue and get the reminder of ticks
					 * to expire.
					 */
					ticker_preempt->ticks_to_expire =
					    ticker_dequeue(instance,
    aa82:	4631      	mov	r1, r6
    aa84:	4650      	mov	r0, sl
    aa86:	f7ff fbc9 	bl	a21c <ticker_dequeue>
							      id_collide);

					/* unschedule node */
					ticker_preempt->req =
    aa8a:	f89b 3002 	ldrb.w	r3, [fp, #2]
    aa8e:	f88b 3001 	strb.w	r3, [fp, #1]
					    ticker_preempt->ack;

					/* enqueue for re-insertion */
					ticker_preempt->next = insert_head;
    aa92:	9b04      	ldr	r3, [sp, #16]
    aa94:	f89d 2008 	ldrb.w	r2, [sp, #8]
				    && (ticker->force > ticker_preempt->force)
				    ) {
					/* dequeue and get the reminder of ticks
					 * to expire.
					 */
					ticker_preempt->ticks_to_expire =
    aa98:	f8cb 0008 	str.w	r0, [fp, #8]
					/* unschedule node */
					ticker_preempt->req =
					    ticker_preempt->ack;

					/* enqueue for re-insertion */
					ticker_preempt->next = insert_head;
    aa9c:	f803 2027 	strb.w	r2, [r3, r7, lsl #2]
    aaa0:	e019      	b.n	aad6 <ticker_job+0x592>
					insert_head = id_collide;
				} else if (ticker->ticks_periodic != 0) {
    aaa2:	6861      	ldr	r1, [r4, #4]
    aaa4:	b1c9      	cbz	r1, aada <ticker_job+0x596>
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
}

static u8_t ticker_remainder_increment(struct ticker_node *ticker)
{
	ticker->remainder_current += ticker->remainder_periodic;
    aaa6:	6a22      	ldr	r2, [r4, #32]
    aaa8:	69e3      	ldr	r3, [r4, #28]
	if ((ticker->remainder_current < 0x80000000)
    aaaa:	4880      	ldr	r0, [pc, #512]	; (acac <ticker_job+0x768>)
				} else if (ticker->ticks_periodic != 0) {
					ticker->ticks_to_expire +=
					    ticker->ticks_periodic +
					    ticker_remainder_increment
					    (ticker);
					ticker->lazy_current++;
    aaac:	9e02      	ldr	r6, [sp, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
}

static u8_t ticker_remainder_increment(struct ticker_node *ticker)
{
	ticker->remainder_current += ticker->remainder_periodic;
    aaae:	4413      	add	r3, r2
	if ((ticker->remainder_current < 0x80000000)
    aab0:	4a7f      	ldr	r2, [pc, #508]	; (acb0 <ticker_job+0x76c>)
    aab2:	441a      	add	r2, r3
    aab4:	4282      	cmp	r2, r0
	    && (ticker->remainder_current > (30517578UL / 2))) {
		ticker->remainder_current -= 30517578UL;
    aab6:	bf96      	itet	ls
    aab8:	4a7e      	ldrls	r2, [pc, #504]	; (acb4 <ticker_job+0x770>)
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
}

static u8_t ticker_remainder_increment(struct ticker_node *ticker)
{
	ticker->remainder_current += ticker->remainder_periodic;
    aaba:	6223      	strhi	r3, [r4, #32]
	if ((ticker->remainder_current < 0x80000000)
	    && (ticker->remainder_current > (30517578UL / 2))) {
		ticker->remainder_current -= 30517578UL;
    aabc:	18d2      	addls	r2, r2, r3

					/* enqueue for re-insertion */
					ticker_preempt->next = insert_head;
					insert_head = id_collide;
				} else if (ticker->ticks_periodic != 0) {
					ticker->ticks_to_expire +=
    aabe:	68a3      	ldr	r3, [r4, #8]
static u8_t ticker_remainder_increment(struct ticker_node *ticker)
{
	ticker->remainder_current += ticker->remainder_periodic;
	if ((ticker->remainder_current < 0x80000000)
	    && (ticker->remainder_current > (30517578UL / 2))) {
		ticker->remainder_current -= 30517578UL;
    aac0:	bf98      	it	ls
    aac2:	6222      	strls	r2, [r4, #32]

					/* enqueue for re-insertion */
					ticker_preempt->next = insert_head;
					insert_head = id_collide;
				} else if (ticker->ticks_periodic != 0) {
					ticker->ticks_to_expire +=
    aac4:	4419      	add	r1, r3
					    ticker->ticks_periodic +
					    ticker_remainder_increment
					    (ticker);
					ticker->lazy_current++;
    aac6:	8b63      	ldrh	r3, [r4, #26]
	if ((ticker->remainder_current < 0x80000000)
	    && (ticker->remainder_current > (30517578UL / 2))) {
		ticker->remainder_current -= 30517578UL;
		return 1;
	}
	return 0;
    aac8:	bf8c      	ite	hi
    aaca:	2200      	movhi	r2, #0
{
	ticker->remainder_current += ticker->remainder_periodic;
	if ((ticker->remainder_current < 0x80000000)
	    && (ticker->remainder_current > (30517578UL / 2))) {
		ticker->remainder_current -= 30517578UL;
		return 1;
    aacc:	2201      	movls	r2, #1

					/* enqueue for re-insertion */
					ticker_preempt->next = insert_head;
					insert_head = id_collide;
				} else if (ticker->ticks_periodic != 0) {
					ticker->ticks_to_expire +=
    aace:	440a      	add	r2, r1
					    ticker->ticks_periodic +
					    ticker_remainder_increment
					    (ticker);
					ticker->lazy_current++;
    aad0:	3301      	adds	r3, #1

					/* enqueue for re-insertion */
					ticker_preempt->next = insert_head;
					insert_head = id_collide;
				} else if (ticker->ticks_periodic != 0) {
					ticker->ticks_to_expire +=
    aad2:	60a2      	str	r2, [r4, #8]
					    ticker->ticks_periodic +
					    ticker_remainder_increment
					    (ticker);
					ticker->lazy_current++;
    aad4:	8363      	strh	r3, [r4, #26]
    aad6:	9602      	str	r6, [sp, #8]
    aad8:	e752      	b.n	a980 <ticker_job+0x43c>
			if (id_insert == id_collide) {
				ticker->req = ticker->ack + 1;

				status = TICKER_STATUS_SUCCESS;
			} else {
				status = TICKER_STATUS_FAILURE;
    aada:	2001      	movs	r0, #1
			}

			if (user_op) {
    aadc:	2d00      	cmp	r5, #0
    aade:	f43f aee8 	beq.w	a8b2 <ticker_job+0x36e>
				user_op->op = TICKER_USER_OP_TYPE_NONE;
    aae2:	2300      	movs	r3, #0
    aae4:	702b      	strb	r3, [r5, #0]
				user_op->status = status;

				if (user_op->fp_op_func) {
    aae6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
				status = TICKER_STATUS_FAILURE;
			}

			if (user_op) {
				user_op->op = TICKER_USER_OP_TYPE_NONE;
				user_op->status = status;
    aae8:	6228      	str	r0, [r5, #32]

				if (user_op->fp_op_func) {
    aaea:	2b00      	cmp	r3, #0
    aaec:	f43f aee1 	beq.w	a8b2 <ticker_job+0x36e>
					user_op->fp_op_func(user_op->status,
    aaf0:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    aaf2:	4798      	blx	r3
    aaf4:	e6dd      	b.n	a8b2 <ticker_job+0x36e>

	/* Handle insertions */
	ticker_job_list_insert(instance, insert_head);

	/* detect change in head of the list */
	if (instance->ticker_id_head != ticker_id_old_head) {
    aaf6:	f89a 3018 	ldrb.w	r3, [sl, #24]
    aafa:	9a06      	ldr	r2, [sp, #24]
    aafc:	4293      	cmp	r3, r2
		flag_compare_update = 1;
	}

	/* Processing any list inquiries */
	if (!pending) {
    aafe:	9b09      	ldr	r3, [sp, #36]	; 0x24

	/* Handle insertions */
	ticker_job_list_insert(instance, insert_head);

	/* detect change in head of the list */
	if (instance->ticker_id_head != ticker_id_old_head) {
    ab00:	d102      	bne.n	ab08 <ticker_job+0x5c4>
		flag_compare_update = 1;
	}

	/* Processing any list inquiries */
	if (!pending) {
    ab02:	2b00      	cmp	r3, #0
    ab04:	d162      	bne.n	abcc <ticker_job+0x688>
    ab06:	e004      	b.n	ab12 <ticker_job+0x5ce>
    ab08:	2b00      	cmp	r3, #0
    ab0a:	f040 80c6 	bne.w	ac9a <ticker_job+0x756>
	/* Handle insertions */
	ticker_job_list_insert(instance, insert_head);

	/* detect change in head of the list */
	if (instance->ticker_id_head != ticker_id_old_head) {
		flag_compare_update = 1;
    ab0e:	2301      	movs	r3, #1
    ab10:	9307      	str	r3, [sp, #28]
    ab12:	f89a 4009 	ldrb.w	r4, [sl, #9]
static inline void ticker_job_list_inquire(struct ticker_instance *instance)
{
	struct ticker_user *users;
	u8_t count_user;

	users = &instance->user[0];
    ab16:	f8da 7004 	ldr.w	r7, [sl, #4]
    ab1a:	3c01      	subs	r4, #1
    ab1c:	b2e4      	uxtb	r4, r4
		while (user->first != user->last) {
			struct ticker_user_op *user_op;
			ticker_op_func fp_op_func;
			u8_t first;

			user_op = &user->user_op[user->first];
    ab1e:	f04f 082c 	mov.w	r8, #44	; 0x2c
	struct ticker_user *users;
	u8_t count_user;

	users = &instance->user[0];
	count_user = instance->count_user;
	while (count_user--) {
    ab22:	2cff      	cmp	r4, #255	; 0xff
    ab24:	d052      	beq.n	abcc <ticker_job+0x688>
		struct ticker_user *user;

		user = &users[count_user];
    ab26:	eb07 05c4 	add.w	r5, r7, r4, lsl #3
		while (user->first != user->last) {
    ab2a:	786b      	ldrb	r3, [r5, #1]
    ab2c:	78ea      	ldrb	r2, [r5, #3]
    ab2e:	429a      	cmp	r2, r3
    ab30:	d049      	beq.n	abc6 <ticker_job+0x682>
			struct ticker_user_op *user_op;
			ticker_op_func fp_op_func;
			u8_t first;

			user_op = &user->user_op[user->first];
    ab32:	fb13 f208 	smulbb	r2, r3, r8
    ab36:	6869      	ldr	r1, [r5, #4]
    ab38:	188b      	adds	r3, r1, r2
			fp_op_func = 0;

			switch (user_op->op) {
    ab3a:	5c8a      	ldrb	r2, [r1, r2]
    ab3c:	2a01      	cmp	r2, #1
    ab3e:	d032      	beq.n	aba6 <ticker_job+0x662>
    ab40:	2a02      	cmp	r2, #2
    ab42:	d137      	bne.n	abb4 <ticker_job+0x670>
				    TICKER_STATUS_SUCCESS;
				fp_op_func = user_op->fp_op_func;
				break;

			case TICKER_USER_OP_TYPE_SLOT_GET:
				ticker_by_next_slot_get(instance,
    ab44:	f8d3 c004 	ldr.w	ip, [r3, #4]
    ab48:	689a      	ldr	r2, [r3, #8]
	struct ticker_node *ticker;
	u32_t _ticks_to_expire;

	node = instance->node;

	_ticker_id_head = *ticker_id_head;
    ab4a:	f89c 1000 	ldrb.w	r1, [ip]
				    TICKER_STATUS_SUCCESS;
				fp_op_func = user_op->fp_op_func;
				break;

			case TICKER_USER_OP_TYPE_SLOT_GET:
				ticker_by_next_slot_get(instance,
    ab4e:	f8d3 900c 	ldr.w	r9, [r3, #12]
	struct ticker_node *node;
	u8_t _ticker_id_head;
	struct ticker_node *ticker;
	u32_t _ticks_to_expire;

	node = instance->node;
    ab52:	f8da 0000 	ldr.w	r0, [sl]
    ab56:	f8da e014 	ldr.w	lr, [sl, #20]

	_ticker_id_head = *ticker_id_head;
	_ticks_to_expire = *ticks_to_expire;
	if ((_ticker_id_head == TICKER_NULL)
    ab5a:	29ff      	cmp	r1, #255	; 0xff
    ab5c:	d002      	beq.n	ab64 <ticker_job+0x620>
	    || (*ticks_current != instance->ticks_current)) {
    ab5e:	6816      	ldr	r6, [r2, #0]
    ab60:	4576      	cmp	r6, lr
    ab62:	d005      	beq.n	ab70 <ticker_job+0x62c>
		_ticker_id_head = instance->ticker_id_head;
    ab64:	f89a 1018 	ldrb.w	r1, [sl, #24]
		*ticks_current = instance->ticks_current;
    ab68:	f8c2 e000 	str.w	lr, [r2]
		_ticks_to_expire = 0;
    ab6c:	2200      	movs	r2, #0
    ab6e:	e012      	b.n	ab96 <ticker_job+0x652>
	} else {
		ticker = &node[_ticker_id_head];
    ab70:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
	u32_t _ticks_to_expire;

	node = instance->node;

	_ticker_id_head = *ticker_id_head;
	_ticks_to_expire = *ticks_to_expire;
    ab74:	f8d9 2000 	ldr.w	r2, [r9]
		_ticker_id_head = instance->ticker_id_head;
		*ticks_current = instance->ticks_current;
		_ticks_to_expire = 0;
	} else {
		ticker = &node[_ticker_id_head];
		_ticker_id_head = ticker->next;
    ab78:	f810 1021 	ldrb.w	r1, [r0, r1, lsl #2]
    ab7c:	e00b      	b.n	ab96 <ticker_job+0x652>
	}

	while ((_ticker_id_head != TICKER_NULL)
	       && ((ticker = &node[_ticker_id_head])->ticks_slot == 0)
    ab7e:	eb01 0bc1 	add.w	fp, r1, r1, lsl #3
    ab82:	eb00 0e8b 	add.w	lr, r0, fp, lsl #2
    ab86:	f8be 6016 	ldrh.w	r6, [lr, #22]
    ab8a:	f8de e008 	ldr.w	lr, [lr, #8]
    ab8e:	b92e      	cbnz	r6, ab9c <ticker_job+0x658>
	    ) {
		_ticks_to_expire += ticker->ticks_to_expire;
		_ticker_id_head = ticker->next;
    ab90:	f810 102b 	ldrb.w	r1, [r0, fp, lsl #2]
	}

	while ((_ticker_id_head != TICKER_NULL)
	       && ((ticker = &node[_ticker_id_head])->ticks_slot == 0)
	    ) {
		_ticks_to_expire += ticker->ticks_to_expire;
    ab94:	4472      	add	r2, lr
	} else {
		ticker = &node[_ticker_id_head];
		_ticker_id_head = ticker->next;
	}

	while ((_ticker_id_head != TICKER_NULL)
    ab96:	29ff      	cmp	r1, #255	; 0xff
    ab98:	d1f1      	bne.n	ab7e <ticker_job+0x63a>
    ab9a:	e000      	b.n	ab9e <ticker_job+0x65a>
		_ticks_to_expire += ticker->ticks_to_expire;
		_ticker_id_head = ticker->next;
	}

	if (_ticker_id_head != TICKER_NULL) {
		_ticks_to_expire += ticker->ticks_to_expire;
    ab9c:	4472      	add	r2, lr
	}

	*ticker_id_head = _ticker_id_head;
    ab9e:	f88c 1000 	strb.w	r1, [ip]
	*ticks_to_expire = _ticks_to_expire;
    aba2:	f8c9 2000 	str.w	r2, [r9]
							   user_op->
							   params.
							   slot_get.
							   ticks_to_expire);

				user_op->status =
    aba6:	2200      	movs	r2, #0
    aba8:	621a      	str	r2, [r3, #32]
				    TICKER_STATUS_SUCCESS;
				fp_op_func = user_op->fp_op_func;
    abaa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
			default:
				/* do nothing for other ops */
				break;
			}

			if (fp_op_func) {
    abac:	b112      	cbz	r2, abb4 <ticker_job+0x670>
				fp_op_func(user_op->status,
    abae:	6a99      	ldr	r1, [r3, #40]	; 0x28
    abb0:	6a18      	ldr	r0, [r3, #32]
    abb2:	4790      	blx	r2
					   user_op->op_context);
			}

			first = user->first + 1;
    abb4:	786b      	ldrb	r3, [r5, #1]
			if (first == user->count_user_op) {
    abb6:	782a      	ldrb	r2, [r5, #0]
			if (fp_op_func) {
				fp_op_func(user_op->status,
					   user_op->op_context);
			}

			first = user->first + 1;
    abb8:	3301      	adds	r3, #1
    abba:	b2db      	uxtb	r3, r3
			if (first == user->count_user_op) {
				first = 0;
    abbc:	429a      	cmp	r2, r3
    abbe:	bf08      	it	eq
    abc0:	2300      	moveq	r3, #0
			}
			user->first = first;
    abc2:	706b      	strb	r3, [r5, #1]
    abc4:	e7b1      	b.n	ab2a <ticker_job+0x5e6>
    abc6:	3c01      	subs	r4, #1
    abc8:	b2e4      	uxtb	r4, r4
    abca:	e7aa      	b.n	ab22 <ticker_job+0x5de>
		/* Handle inquiries */
		ticker_job_list_inquire(instance);
	}

	/* Permit worker job to run */
	instance->job_guard = 0;
    abcc:	2300      	movs	r3, #0
    abce:	f88a 301c 	strb.w	r3, [sl, #28]

	/* update compare if head changed */
	if (flag_compare_update) {
    abd2:	9b07      	ldr	r3, [sp, #28]
    abd4:	2b00      	cmp	r3, #0
    abd6:	d04f      	beq.n	ac78 <ticker_job+0x734>
	u32_t ctr_post;
	u32_t ctr;
	u32_t cc;
	u32_t i;

	if (instance->ticker_id_head == TICKER_NULL) {
    abd8:	f89a 3018 	ldrb.w	r3, [sl, #24]
    abdc:	2bff      	cmp	r3, #255	; 0xff
    abde:	d106      	bne.n	abee <ticker_job+0x6aa>
		if (cntr_stop() == 0) {
    abe0:	f7fe fed8 	bl	9994 <cntr_stop>
    abe4:	2800      	cmp	r0, #0
    abe6:	d147      	bne.n	ac78 <ticker_job+0x734>
			instance->ticks_slot_previous = 0;
    abe8:	f8aa 001a 	strh.w	r0, [sl, #26]
    abec:	e044      	b.n	ac78 <ticker_job+0x734>
		}

		return;
	}

	if (ticker_id_old_head == TICKER_NULL) {
    abee:	9b06      	ldr	r3, [sp, #24]
    abf0:	2bff      	cmp	r3, #255	; 0xff
    abf2:	d107      	bne.n	ac04 <ticker_job+0x6c0>
		u32_t ticks_current;

		ticks_current = cntr_cnt_get();
    abf4:	f7fe fefe 	bl	99f4 <cntr_cnt_get>
    abf8:	4604      	mov	r4, r0

		if (cntr_start() == 0) {
    abfa:	f7fe febb 	bl	9974 <cntr_start>
    abfe:	b908      	cbnz	r0, ac04 <ticker_job+0x6c0>
			instance->ticks_current = ticks_current;
    ac00:	f8ca 4014 	str.w	r4, [sl, #20]
		}
	}

	node = &instance->node[0];
	ticker = &node[instance->ticker_id_head];
	ticks_to_expire = ticker->ticks_to_expire;
    ac04:	f89a 3018 	ldrb.w	r3, [sl, #24]
    ac08:	f8da 2000 	ldr.w	r2, [sl]
    ac0c:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    ac10:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    ac14:	260a      	movs	r6, #10
    ac16:	689d      	ldr	r5, [r3, #8]
		u32_t ticks_elapsed;

		LL_ASSERT(i);
		i--;

		ctr = cntr_cnt_get();
    ac18:	f7fe feec 	bl	99f4 <cntr_cnt_get>
		cc = instance->ticks_current;
    ac1c:	f8da 3014 	ldr.w	r3, [sl, #20]
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
				COUNTER_CMP_OFFSET_MIN;
		cc += ((ticks_elapsed < ticks_to_expire) ?
		       ticks_to_expire : ticks_elapsed);
    ac20:	1ac2      	subs	r2, r0, r3
    ac22:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    ac26:	3203      	adds	r2, #3

		ctr = cntr_cnt_get();
		cc = instance->ticks_current;
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
				COUNTER_CMP_OFFSET_MIN;
		cc += ((ticks_elapsed < ticks_to_expire) ?
    ac28:	42aa      	cmp	r2, r5
    ac2a:	bf2c      	ite	cs
    ac2c:	189b      	addcs	r3, r3, r2
    ac2e:	195b      	addcc	r3, r3, r5
		       ticks_to_expire : ticks_elapsed);
		cc &= 0x00FFFFFF;
    ac30:	f023 447f 	bic.w	r4, r3, #4278190080	; 0xff000000
		u32_t ticks_elapsed;

		LL_ASSERT(i);
		i--;

		ctr = cntr_cnt_get();
    ac34:	4607      	mov	r7, r0
				COUNTER_CMP_OFFSET_MIN;
		cc += ((ticks_elapsed < ticks_to_expire) ?
		       ticks_to_expire : ticks_elapsed);
		cc &= 0x00FFFFFF;

		instance->fp_cmp_set(cc);
    ac36:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
    ac3a:	4620      	mov	r0, r4
    ac3c:	4798      	blx	r3

		ctr_post = cntr_cnt_get();
    ac3e:	f7fe fed9 	bl	99f4 <cntr_cnt_get>
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
		  COUNTER_CMP_OFFSET_MIN) > ticker_ticks_diff_get(cc, ctr));
    ac42:	1bc0      	subs	r0, r0, r7
    ac44:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    ac48:	1be4      	subs	r4, r4, r7
    ac4a:	3003      	adds	r0, #3
    ac4c:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
    ac50:	42a0      	cmp	r0, r4
    ac52:	d911      	bls.n	ac78 <ticker_job+0x734>
	 */
	i = 10;
	do {
		u32_t ticks_elapsed;

		LL_ASSERT(i);
    ac54:	3e01      	subs	r6, #1
    ac56:	d1df      	bne.n	ac18 <ticker_job+0x6d4>
    ac58:	4b17      	ldr	r3, [pc, #92]	; (acb8 <ticker_job+0x774>)
    ac5a:	9301      	str	r3, [sp, #4]
    ac5c:	4b17      	ldr	r3, [pc, #92]	; (acbc <ticker_job+0x778>)
    ac5e:	9300      	str	r3, [sp, #0]
    ac60:	4a17      	ldr	r2, [pc, #92]	; (acc0 <ticker_job+0x77c>)
    ac62:	4b18      	ldr	r3, [pc, #96]	; (acc4 <ticker_job+0x780>)
    ac64:	4918      	ldr	r1, [pc, #96]	; (acc8 <ticker_job+0x784>)
    ac66:	4819      	ldr	r0, [pc, #100]	; (accc <ticker_job+0x788>)
    ac68:	f7f6 fc0a 	bl	1480 <printk>
    ac6c:	4040      	eors	r0, r0
    ac6e:	f380 8811 	msr	BASEPRI, r0
    ac72:	f04f 0004 	mov.w	r0, #4
    ac76:	df02      	svc	2
	if (flag_compare_update) {
		ticker_job_compare_update(instance, ticker_id_old_head);
	}

	/* trigger worker if deferred */
	if (instance->worker_trigger) {
    ac78:	f89a 301d 	ldrb.w	r3, [sl, #29]
    ac7c:	b193      	cbz	r3, aca4 <ticker_job+0x760>
		instance->fp_sched(CALL_ID_JOB, CALL_ID_WORKER, 1);
    ac7e:	2201      	movs	r2, #1
    ac80:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
    ac84:	4611      	mov	r1, r2
    ac86:	2002      	movs	r0, #2
	}

	DEBUG_TICKER_JOB(0);
}
    ac88:	b011      	add	sp, #68	; 0x44
    ac8a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		ticker_job_compare_update(instance, ticker_id_old_head);
	}

	/* trigger worker if deferred */
	if (instance->worker_trigger) {
		instance->fp_sched(CALL_ID_JOB, CALL_ID_WORKER, 1);
    ac8e:	4718      	bx	r3
				}
			}

			/* Update flags */
			if (id_insert == id_collide) {
				ticker->req = ticker->ack + 1;
    ac90:	78a3      	ldrb	r3, [r4, #2]
    ac92:	3301      	adds	r3, #1
    ac94:	7063      	strb	r3, [r4, #1]

				status = TICKER_STATUS_SUCCESS;
    ac96:	2000      	movs	r0, #0
    ac98:	e720      	b.n	aadc <ticker_job+0x598>
		/* Handle inquiries */
		ticker_job_list_inquire(instance);
	}

	/* Permit worker job to run */
	instance->job_guard = 0;
    ac9a:	f89d 3014 	ldrb.w	r3, [sp, #20]
    ac9e:	f88a 301c 	strb.w	r3, [sl, #28]
    aca2:	e799      	b.n	abd8 <ticker_job+0x694>
	if (instance->worker_trigger) {
		instance->fp_sched(CALL_ID_JOB, CALL_ID_WORKER, 1);
	}

	DEBUG_TICKER_JOB(0);
}
    aca4:	b011      	add	sp, #68	; 0x44
    aca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    acaa:	bf00      	nop
    acac:	7f172b59 	.word	0x7f172b59
    acb0:	ff172b5a 	.word	0xff172b5a
    acb4:	fe2e56b6 	.word	0xfe2e56b6
    acb8:	00013df4 	.word	0x00013df4
    acbc:	00013df9 	.word	0x00013df9
    acc0:	00013db4 	.word	0x00013db4
    acc4:	0001668c 	.word	0x0001668c
    acc8:	00013dbb 	.word	0x00013dbb
    accc:	00015220 	.word	0x00015220

0000acd0 <ticker_init>:
/*****************************************************************************
 * Public Interface
 ****************************************************************************/
u32_t ticker_init(u8_t instance_index, u8_t count_node, void *node,
		  u8_t count_user, void *user, u8_t count_op, void *user_op)
{
    acd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    acd4:	468c      	mov	ip, r1
    acd6:	9f06      	ldr	r7, [sp, #24]
    acd8:	f89d 401c 	ldrb.w	r4, [sp, #28]
    acdc:	9908      	ldr	r1, [sp, #32]
	    || (sizeof(struct ticker_user_op) != TICKER_USER_OP_T_SIZE)
	    ) {
		return TICKER_STATUS_FAILURE;
	}

	switch (instance_index) {
    acde:	b148      	cbz	r0, acf4 <ticker_init+0x24>
    ace0:	2801      	cmp	r0, #1
    ace2:	d139      	bne.n	ad58 <ticker_init+0x88>
		instance->fp_sched = ticker_instance0_sched;
		instance->fp_cmp_set = ticker_instance0_cmp_set;
		break;

	case 1:
		instance->fp_caller_id_get = ticker_instance1_caller_id_get;
    ace4:	4d1e      	ldr	r5, [pc, #120]	; (ad60 <ticker_init+0x90>)
    ace6:	4e1f      	ldr	r6, [pc, #124]	; (ad64 <ticker_init+0x94>)
    ace8:	64ee      	str	r6, [r5, #76]	; 0x4c
		instance->fp_sched = ticker_instance1_sched;
    acea:	4e1f      	ldr	r6, [pc, #124]	; (ad68 <ticker_init+0x98>)
    acec:	652e      	str	r6, [r5, #80]	; 0x50
		instance->fp_cmp_set = ticker_instance1_cmp_set;
    acee:	4e1f      	ldr	r6, [pc, #124]	; (ad6c <ticker_init+0x9c>)
    acf0:	656e      	str	r6, [r5, #84]	; 0x54
		break;
    acf2:	e006      	b.n	ad02 <ticker_init+0x32>
		return TICKER_STATUS_FAILURE;
	}

	switch (instance_index) {
	case 0:
		instance->fp_caller_id_get = ticker_instance0_caller_id_get;
    acf4:	4d1a      	ldr	r5, [pc, #104]	; (ad60 <ticker_init+0x90>)
    acf6:	4e1e      	ldr	r6, [pc, #120]	; (ad70 <ticker_init+0xa0>)
    acf8:	622e      	str	r6, [r5, #32]
		instance->fp_sched = ticker_instance0_sched;
    acfa:	4e1e      	ldr	r6, [pc, #120]	; (ad74 <ticker_init+0xa4>)
    acfc:	626e      	str	r6, [r5, #36]	; 0x24
		instance->fp_cmp_set = ticker_instance0_cmp_set;
    acfe:	4e1e      	ldr	r6, [pc, #120]	; (ad78 <ticker_init+0xa8>)
    ad00:	62ae      	str	r6, [r5, #40]	; 0x28

	default:
		return TICKER_STATUS_FAILURE;
	}

	instance->count_node = count_node;
    ad02:	4d17      	ldr	r5, [pc, #92]	; (ad60 <ticker_init+0x90>)
    ad04:	262c      	movs	r6, #44	; 0x2c
    ad06:	fb06 f800 	mul.w	r8, r6, r0
    ad0a:	eb05 0e08 	add.w	lr, r5, r8
	instance->node = node;
    ad0e:	f845 2008 	str.w	r2, [r5, r8]

	default:
		return TICKER_STATUS_FAILURE;
	}

	instance->count_node = count_node;
    ad12:	f88e c008 	strb.w	ip, [lr, #8]
	instance->node = node;

	instance->count_user = count_user;
    ad16:	f88e 3009 	strb.w	r3, [lr, #9]
	instance->user = user;
    ad1a:	f8ce 7004 	str.w	r7, [lr, #4]

	/** @todo check if enough ticker_user_op supplied */

	users = &instance->user[0];
	while (count_user--) {
    ad1e:	3b01      	subs	r3, #1
    ad20:	b2db      	uxtb	r3, r3
    ad22:	2bff      	cmp	r3, #255	; 0xff
    ad24:	d00b      	beq.n	ad3e <ticker_init+0x6e>
		users[count_user].user_op = user_op_;
    ad26:	b21a      	sxth	r2, r3
    ad28:	eb07 0ec2 	add.w	lr, r7, r2, lsl #3
    ad2c:	f8ce 1004 	str.w	r1, [lr, #4]
		user_op_ += users[count_user].count_user_op;
    ad30:	f817 2032 	ldrb.w	r2, [r7, r2, lsl #3]
		count_op -= users[count_user].count_user_op;
    ad34:	1aa4      	subs	r4, r4, r2
	/** @todo check if enough ticker_user_op supplied */

	users = &instance->user[0];
	while (count_user--) {
		users[count_user].user_op = user_op_;
		user_op_ += users[count_user].count_user_op;
    ad36:	fb02 1106 	mla	r1, r2, r6, r1
		count_op -= users[count_user].count_user_op;
    ad3a:	b2e4      	uxtb	r4, r4
    ad3c:	e7ef      	b.n	ad1e <ticker_init+0x4e>
	}

	if (count_op) {
    ad3e:	b95c      	cbnz	r4, ad58 <ticker_init+0x88>
		return TICKER_STATUS_FAILURE;
	}

	instance->ticker_id_head = TICKER_NULL;
    ad40:	222c      	movs	r2, #44	; 0x2c
    ad42:	fb02 5000 	mla	r0, r2, r0, r5
    ad46:	7603      	strb	r3, [r0, #24]
	instance->ticker_id_slot_previous = TICKER_NULL;
    ad48:	7643      	strb	r3, [r0, #25]
	instance->ticks_slot_previous = 0;
    ad4a:	8344      	strh	r4, [r0, #26]
	instance->ticks_current = 0;
    ad4c:	6144      	str	r4, [r0, #20]
	instance->ticks_elapsed_first = 0;
    ad4e:	7284      	strb	r4, [r0, #10]
	instance->ticks_elapsed_last = 0;
    ad50:	72c4      	strb	r4, [r0, #11]

	return TICKER_STATUS_SUCCESS;
    ad52:	4620      	mov	r0, r4
    ad54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		user_op_ += users[count_user].count_user_op;
		count_op -= users[count_user].count_user_op;
	}

	if (count_op) {
		return TICKER_STATUS_FAILURE;
    ad58:	2001      	movs	r0, #1
	instance->ticks_current = 0;
	instance->ticks_elapsed_first = 0;
	instance->ticks_elapsed_last = 0;

	return TICKER_STATUS_SUCCESS;
}
    ad5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ad5e:	bf00      	nop
    ad60:	200013c0 	.word	0x200013c0
    ad64:	0000a401 	.word	0x0000a401
    ad68:	0000a2cd 	.word	0x0000a2cd
    ad6c:	0000a2bb 	.word	0x0000a2bb
    ad70:	0000a449 	.word	0x0000a449
    ad74:	0000a361 	.word	0x0000a361
    ad78:	0000a2c3 	.word	0x0000a2c3

0000ad7c <ticker_trigger>:

void ticker_trigger(u8_t instance_index)
{
	DEBUG_TICKER_ISR(1);

	if (_instance[instance_index].fp_sched) {
    ad7c:	4a05      	ldr	r2, [pc, #20]	; (ad94 <ticker_trigger+0x18>)
    ad7e:	232c      	movs	r3, #44	; 0x2c
    ad80:	fb03 2000 	mla	r0, r3, r0, r2
    ad84:	6a43      	ldr	r3, [r0, #36]	; 0x24
    ad86:	b11b      	cbz	r3, ad90 <ticker_trigger+0x14>
		_instance[instance_index].fp_sched(CALL_ID_TRIGGER,
    ad88:	2201      	movs	r2, #1
    ad8a:	4611      	mov	r1, r2
    ad8c:	2000      	movs	r0, #0
    ad8e:	4718      	bx	r3
    ad90:	4770      	bx	lr
    ad92:	bf00      	nop
    ad94:	200013c0 	.word	0x200013c0

0000ad98 <ticker_start>:
u32_t ticker_start(u8_t instance_index, u8_t user_id, u8_t _ticker_id,
		   u32_t ticks_anchor, u32_t ticks_first, u32_t ticks_periodic,
		   u32_t remainder_periodic, u16_t lazy, u16_t ticks_slot,
		   ticker_timeout_func ticker_timeout_func, void *context,
		   ticker_op_func fp_op_func, void *op_context)
{
    ad98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	u8_t last;
	struct ticker_instance *instance = &_instance[instance_index];
	struct ticker_user *user;
	struct ticker_user_op *user_op;

	user = &instance->user[user_id];
    ad9a:	4d22      	ldr	r5, [pc, #136]	; (ae24 <ticker_start+0x8c>)
    ad9c:	242c      	movs	r4, #44	; 0x2c
    ad9e:	fb04 5000 	mla	r0, r4, r0, r5
    ada2:	fa0f fc81 	sxth.w	ip, r1
    ada6:	f8d0 e004 	ldr.w	lr, [r0, #4]
    adaa:	eb0e 07cc 	add.w	r7, lr, ip, lsl #3

	last = user->last + 1;
	if (last >= user->count_user_op) {
    adae:	f81e e03c 	ldrb.w	lr, [lr, ip, lsl #3]
	struct ticker_user *user;
	struct ticker_user_op *user_op;

	user = &instance->user[user_id];

	last = user->last + 1;
    adb2:	78fe      	ldrb	r6, [r7, #3]
    adb4:	1c75      	adds	r5, r6, #1
    adb6:	b2ed      	uxtb	r5, r5
	if (last >= user->count_user_op) {
		last = 0;
    adb8:	45ae      	cmp	lr, r5
    adba:	bf98      	it	ls
    adbc:	2500      	movls	r5, #0
	}

	if (last == user->first) {
    adbe:	f897 e001 	ldrb.w	lr, [r7, #1]
    adc2:	45ae      	cmp	lr, r5
    adc4:	d02b      	beq.n	ae1e <ticker_start+0x86>
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
    adc6:	f8d7 e004 	ldr.w	lr, [r7, #4]
    adca:	fb16 f604 	smulbb	r6, r6, r4
    adce:	eb0e 0406 	add.w	r4, lr, r6
	user_op->op = TICKER_USER_OP_TYPE_START;
    add2:	f04f 0c03 	mov.w	ip, #3
    add6:	f80e c006 	strb.w	ip, [lr, r6]
	user_op->id = _ticker_id;
	user_op->params.start.ticks_at_start = ticks_anchor;
    adda:	6063      	str	r3, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
    addc:	9b06      	ldr	r3, [sp, #24]
    adde:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
    ade0:	9b07      	ldr	r3, [sp, #28]
    ade2:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
    ade4:	9b08      	ldr	r3, [sp, #32]
    ade6:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
    ade8:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    adec:	82e3      	strh	r3, [r4, #22]
	user_op->params.start.lazy = lazy;
    adee:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    adf2:	82a3      	strh	r3, [r4, #20]
	user_op->params.start.fp_timeout_func = ticker_timeout_func;
    adf4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    adf6:	61a3      	str	r3, [r4, #24]
	user_op->params.start.context = context;
    adf8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    adfa:	61e3      	str	r3, [r4, #28]
	user_op->status = TICKER_STATUS_BUSY;
	user_op->fp_op_func = fp_op_func;
    adfc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    adfe:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->params.start.remainder_periodic = remainder_periodic;
	user_op->params.start.ticks_slot = ticks_slot;
	user_op->params.start.lazy = lazy;
	user_op->params.start.fp_timeout_func = ticker_timeout_func;
	user_op->params.start.context = context;
	user_op->status = TICKER_STATUS_BUSY;
    ae00:	2602      	movs	r6, #2
	user_op->fp_op_func = fp_op_func;
	user_op->op_context = op_context;
    ae02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
	user_op->op = TICKER_USER_OP_TYPE_START;
	user_op->id = _ticker_id;
    ae04:	7062      	strb	r2, [r4, #1]
	user_op->params.start.remainder_periodic = remainder_periodic;
	user_op->params.start.ticks_slot = ticks_slot;
	user_op->params.start.lazy = lazy;
	user_op->params.start.fp_timeout_func = ticker_timeout_func;
	user_op->params.start.context = context;
	user_op->status = TICKER_STATUS_BUSY;
    ae06:	6226      	str	r6, [r4, #32]
	user_op->fp_op_func = fp_op_func;
	user_op->op_context = op_context;
    ae08:	62a3      	str	r3, [r4, #40]	; 0x28

	user->last = last;
    ae0a:	70fd      	strb	r5, [r7, #3]

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
    ae0c:	6a45      	ldr	r5, [r0, #36]	; 0x24
    ae0e:	6a03      	ldr	r3, [r0, #32]
    ae10:	4608      	mov	r0, r1
    ae12:	4798      	blx	r3
    ae14:	2200      	movs	r2, #0
    ae16:	4631      	mov	r1, r6
    ae18:	47a8      	blx	r5

	return user_op->status;
    ae1a:	6a20      	ldr	r0, [r4, #32]
    ae1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (last >= user->count_user_op) {
		last = 0;
	}

	if (last == user->first) {
		return TICKER_STATUS_FAILURE;
    ae1e:	2001      	movs	r0, #1
	user->last = last;

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);

	return user_op->status;
}
    ae20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ae22:	bf00      	nop
    ae24:	200013c0 	.word	0x200013c0

0000ae28 <ticker_update>:

u32_t ticker_update(u8_t instance_index, u8_t user_id, u8_t _ticker_id,
		    u16_t ticks_drift_plus, u16_t ticks_drift_minus,
		    u16_t ticks_slot_plus, u16_t ticks_slot_minus, u16_t lazy,
		    u8_t force, ticker_op_func fp_op_func, void *op_context)
{
    ae28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct ticker_instance *instance = &_instance[instance_index];
	u8_t last;
	struct ticker_user *user;
	struct ticker_user_op *user_op;

	user = &instance->user[user_id];
    ae2a:	4d21      	ldr	r5, [pc, #132]	; (aeb0 <ticker_update+0x88>)
    ae2c:	242c      	movs	r4, #44	; 0x2c
    ae2e:	fb04 5000 	mla	r0, r4, r0, r5
    ae32:	fa0f fc81 	sxth.w	ip, r1
    ae36:	f8d0 e004 	ldr.w	lr, [r0, #4]
    ae3a:	eb0e 07cc 	add.w	r7, lr, ip, lsl #3

	last = user->last + 1;
	if (last >= user->count_user_op) {
    ae3e:	f81e e03c 	ldrb.w	lr, [lr, ip, lsl #3]
	struct ticker_user *user;
	struct ticker_user_op *user_op;

	user = &instance->user[user_id];

	last = user->last + 1;
    ae42:	78fe      	ldrb	r6, [r7, #3]
    ae44:	1c75      	adds	r5, r6, #1
    ae46:	b2ed      	uxtb	r5, r5
	if (last >= user->count_user_op) {
		last = 0;
    ae48:	45ae      	cmp	lr, r5
    ae4a:	bf98      	it	ls
    ae4c:	2500      	movls	r5, #0
	}

	if (last == user->first) {
    ae4e:	f897 e001 	ldrb.w	lr, [r7, #1]
    ae52:	45ae      	cmp	lr, r5
    ae54:	d02a      	beq.n	aeac <ticker_update+0x84>
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
    ae56:	f8d7 e004 	ldr.w	lr, [r7, #4]
    ae5a:	fb16 f604 	smulbb	r6, r6, r4
    ae5e:	eb0e 0406 	add.w	r4, lr, r6
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
    ae62:	f04f 0c04 	mov.w	ip, #4
    ae66:	f80e c006 	strb.w	ip, [lr, r6]
	user_op->id = _ticker_id;
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
    ae6a:	80a3      	strh	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
    ae6c:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    ae70:	80e3      	strh	r3, [r4, #6]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
    ae72:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    ae76:	8123      	strh	r3, [r4, #8]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
    ae78:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    ae7c:	8163      	strh	r3, [r4, #10]
	user_op->params.update.lazy = lazy;
    ae7e:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    ae82:	81a3      	strh	r3, [r4, #12]
	user_op->params.update.force = force;
    ae84:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    ae88:	73a3      	strb	r3, [r4, #14]
	user_op->status = TICKER_STATUS_BUSY;
	user_op->fp_op_func = fp_op_func;
    ae8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ae8c:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
	user_op->params.update.lazy = lazy;
	user_op->params.update.force = force;
	user_op->status = TICKER_STATUS_BUSY;
    ae8e:	2602      	movs	r6, #2
	user_op->fp_op_func = fp_op_func;
	user_op->op_context = op_context;
    ae90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
	user_op->id = _ticker_id;
    ae92:	7062      	strb	r2, [r4, #1]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
	user_op->params.update.lazy = lazy;
	user_op->params.update.force = force;
	user_op->status = TICKER_STATUS_BUSY;
    ae94:	6226      	str	r6, [r4, #32]
	user_op->fp_op_func = fp_op_func;
	user_op->op_context = op_context;
    ae96:	62a3      	str	r3, [r4, #40]	; 0x28

	user->last = last;
    ae98:	70fd      	strb	r5, [r7, #3]

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
    ae9a:	6a45      	ldr	r5, [r0, #36]	; 0x24
    ae9c:	6a03      	ldr	r3, [r0, #32]
    ae9e:	4608      	mov	r0, r1
    aea0:	4798      	blx	r3
    aea2:	2200      	movs	r2, #0
    aea4:	4631      	mov	r1, r6
    aea6:	47a8      	blx	r5

	return user_op->status;
    aea8:	6a20      	ldr	r0, [r4, #32]
    aeaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (last >= user->count_user_op) {
		last = 0;
	}

	if (last == user->first) {
		return TICKER_STATUS_FAILURE;
    aeac:	2001      	movs	r0, #1
	user->last = last;

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);

	return user_op->status;
}
    aeae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    aeb0:	200013c0 	.word	0x200013c0

0000aeb4 <ticker_stop>:

u32_t ticker_stop(u8_t instance_index, u8_t user_id, u8_t _ticker_id,
		  ticker_op_func fp_op_func, void *op_context)
{
    aeb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct ticker_instance *instance = &_instance[instance_index];
	u8_t last;
	struct ticker_user *user;
	struct ticker_user_op *user_op;

	user = &instance->user[user_id];
    aeb6:	4c19      	ldr	r4, [pc, #100]	; (af1c <ticker_stop+0x68>)
    aeb8:	252c      	movs	r5, #44	; 0x2c
    aeba:	fb05 4000 	mla	r0, r5, r0, r4
    aebe:	fa0f fc81 	sxth.w	ip, r1
    aec2:	f8d0 e004 	ldr.w	lr, [r0, #4]
    aec6:	eb0e 07cc 	add.w	r7, lr, ip, lsl #3

	last = user->last + 1;
	if (last >= user->count_user_op) {
    aeca:	f81e e03c 	ldrb.w	lr, [lr, ip, lsl #3]
	struct ticker_user *user;
	struct ticker_user_op *user_op;

	user = &instance->user[user_id];

	last = user->last + 1;
    aece:	78fe      	ldrb	r6, [r7, #3]
    aed0:	1c74      	adds	r4, r6, #1
    aed2:	b2e4      	uxtb	r4, r4
	if (last >= user->count_user_op) {
		last = 0;
    aed4:	45a6      	cmp	lr, r4
    aed6:	bf98      	it	ls
    aed8:	2400      	movls	r4, #0
	}

	if (last == user->first) {
    aeda:	f897 e001 	ldrb.w	lr, [r7, #1]
    aede:	45a6      	cmp	lr, r4
    aee0:	d019      	beq.n	af16 <ticker_stop+0x62>
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
    aee2:	f8d7 e004 	ldr.w	lr, [r7, #4]
    aee6:	fb16 f605 	smulbb	r6, r6, r5
    aeea:	eb0e 0506 	add.w	r5, lr, r6
	user_op->op = TICKER_USER_OP_TYPE_STOP;
    aeee:	f04f 0c05 	mov.w	ip, #5
    aef2:	f80e c006 	strb.w	ip, [lr, r6]
	user_op->id = _ticker_id;
	user_op->status = TICKER_STATUS_BUSY;
	user_op->fp_op_func = fp_op_func;
    aef6:	626b      	str	r3, [r5, #36]	; 0x24
	}

	user_op = &user->user_op[user->last];
	user_op->op = TICKER_USER_OP_TYPE_STOP;
	user_op->id = _ticker_id;
	user_op->status = TICKER_STATUS_BUSY;
    aef8:	2602      	movs	r6, #2
	user_op->fp_op_func = fp_op_func;
	user_op->op_context = op_context;
    aefa:	9b06      	ldr	r3, [sp, #24]
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
	user_op->op = TICKER_USER_OP_TYPE_STOP;
	user_op->id = _ticker_id;
    aefc:	706a      	strb	r2, [r5, #1]
	user_op->status = TICKER_STATUS_BUSY;
    aefe:	622e      	str	r6, [r5, #32]
	user_op->fp_op_func = fp_op_func;
	user_op->op_context = op_context;
    af00:	62ab      	str	r3, [r5, #40]	; 0x28

	user->last = last;
    af02:	70fc      	strb	r4, [r7, #3]

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
    af04:	6a44      	ldr	r4, [r0, #36]	; 0x24
    af06:	6a03      	ldr	r3, [r0, #32]
    af08:	4608      	mov	r0, r1
    af0a:	4798      	blx	r3
    af0c:	2200      	movs	r2, #0
    af0e:	4631      	mov	r1, r6
    af10:	47a0      	blx	r4

	return user_op->status;
    af12:	6a28      	ldr	r0, [r5, #32]
    af14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (last >= user->count_user_op) {
		last = 0;
	}

	if (last == user->first) {
		return TICKER_STATUS_FAILURE;
    af16:	2001      	movs	r0, #1
	user->last = last;

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);

	return user_op->status;
}
    af18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    af1a:	bf00      	nop
    af1c:	200013c0 	.word	0x200013c0

0000af20 <ticker_next_slot_get>:

u32_t ticker_next_slot_get(u8_t instance_index, u8_t user_id, u8_t *_ticker_id,
			   u32_t *ticks_current, u32_t *ticks_to_expire,
			   ticker_op_func fp_op_func, void *op_context)
{
    af20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
	u8_t last;
	struct ticker_user *user;
	struct ticker_user_op *user_op;

	user = &instance->user[user_id];
    af24:	4d1c      	ldr	r5, [pc, #112]	; (af98 <ticker_next_slot_get+0x78>)
    af26:	242c      	movs	r4, #44	; 0x2c
    af28:	fb04 5000 	mla	r0, r4, r0, r5
    af2c:	fa0f fc81 	sxth.w	ip, r1
    af30:	f8d0 e004 	ldr.w	lr, [r0, #4]
    af34:	eb0e 07cc 	add.w	r7, lr, ip, lsl #3

	last = user->last + 1;
	if (last >= user->count_user_op) {
    af38:	f81e e03c 	ldrb.w	lr, [lr, ip, lsl #3]
	struct ticker_user *user;
	struct ticker_user_op *user_op;

	user = &instance->user[user_id];

	last = user->last + 1;
    af3c:	78fe      	ldrb	r6, [r7, #3]
    af3e:	1c75      	adds	r5, r6, #1
    af40:	b2ed      	uxtb	r5, r5
	if (last >= user->count_user_op) {
		last = 0;
    af42:	45ae      	cmp	lr, r5
    af44:	bf98      	it	ls
    af46:	2500      	movls	r5, #0
	}

	if (last == user->first) {
    af48:	f897 e001 	ldrb.w	lr, [r7, #1]
    af4c:	45ae      	cmp	lr, r5
    af4e:	d020      	beq.n	af92 <ticker_next_slot_get+0x72>
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
    af50:	f8d7 e004 	ldr.w	lr, [r7, #4]
    af54:	fb16 f604 	smulbb	r6, r6, r4
    af58:	eb0e 0406 	add.w	r4, lr, r6
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
    af5c:	f04f 0802 	mov.w	r8, #2
    af60:	f80e 8006 	strb.w	r8, [lr, r6]
	user_op->id = TICKER_NULL;
	user_op->params.slot_get.ticker_id = _ticker_id;
	user_op->params.slot_get.ticks_current = ticks_current;
    af64:	60a3      	str	r3, [r4, #8]
	user_op->params.slot_get.ticks_to_expire = ticks_to_expire;
    af66:	9b06      	ldr	r3, [sp, #24]
    af68:	60e3      	str	r3, [r4, #12]
	user_op->status = TICKER_STATUS_BUSY;
	user_op->fp_op_func = fp_op_func;
    af6a:	9b07      	ldr	r3, [sp, #28]
    af6c:	6263      	str	r3, [r4, #36]	; 0x24
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
	user_op->id = TICKER_NULL;
    af6e:	26ff      	movs	r6, #255	; 0xff
	user_op->params.slot_get.ticker_id = _ticker_id;
	user_op->params.slot_get.ticks_current = ticks_current;
	user_op->params.slot_get.ticks_to_expire = ticks_to_expire;
	user_op->status = TICKER_STATUS_BUSY;
	user_op->fp_op_func = fp_op_func;
	user_op->op_context = op_context;
    af70:	9b08      	ldr	r3, [sp, #32]
	}

	user_op = &user->user_op[user->last];
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
	user_op->id = TICKER_NULL;
	user_op->params.slot_get.ticker_id = _ticker_id;
    af72:	6062      	str	r2, [r4, #4]
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
	user_op->id = TICKER_NULL;
    af74:	7066      	strb	r6, [r4, #1]
	user_op->params.slot_get.ticker_id = _ticker_id;
	user_op->params.slot_get.ticks_current = ticks_current;
	user_op->params.slot_get.ticks_to_expire = ticks_to_expire;
	user_op->status = TICKER_STATUS_BUSY;
    af76:	f8c4 8020 	str.w	r8, [r4, #32]
	user_op->fp_op_func = fp_op_func;
	user_op->op_context = op_context;
    af7a:	62a3      	str	r3, [r4, #40]	; 0x28

	user->last = last;
    af7c:	70fd      	strb	r5, [r7, #3]

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
    af7e:	6a45      	ldr	r5, [r0, #36]	; 0x24
    af80:	6a03      	ldr	r3, [r0, #32]
    af82:	4608      	mov	r0, r1
    af84:	4798      	blx	r3
    af86:	2200      	movs	r2, #0
    af88:	4641      	mov	r1, r8
    af8a:	47a8      	blx	r5

	return user_op->status;
    af8c:	6a20      	ldr	r0, [r4, #32]
    af8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (last >= user->count_user_op) {
		last = 0;
	}

	if (last == user->first) {
		return TICKER_STATUS_FAILURE;
    af92:	2001      	movs	r0, #1
	user->last = last;

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);

	return user_op->status;
}
    af94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    af98:	200013c0 	.word	0x200013c0

0000af9c <ticker_job_idle_get>:

u32_t ticker_job_idle_get(u8_t instance_index, u8_t user_id,
			  ticker_op_func fp_op_func, void *op_context)
{
    af9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct ticker_instance *instance = &_instance[instance_index];
	u8_t last;
	struct ticker_user *user;
	struct ticker_user_op *user_op;

	user = &instance->user[user_id];
    af9e:	4c19      	ldr	r4, [pc, #100]	; (b004 <ticker_job_idle_get+0x68>)
    afa0:	252c      	movs	r5, #44	; 0x2c
    afa2:	fb05 4000 	mla	r0, r5, r0, r4
    afa6:	fa0f fc81 	sxth.w	ip, r1
    afaa:	f8d0 e004 	ldr.w	lr, [r0, #4]
    afae:	eb0e 07cc 	add.w	r7, lr, ip, lsl #3

	last = user->last + 1;
	if (last >= user->count_user_op) {
    afb2:	f81e e03c 	ldrb.w	lr, [lr, ip, lsl #3]
	struct ticker_user *user;
	struct ticker_user_op *user_op;

	user = &instance->user[user_id];

	last = user->last + 1;
    afb6:	78fe      	ldrb	r6, [r7, #3]
    afb8:	1c74      	adds	r4, r6, #1
    afba:	b2e4      	uxtb	r4, r4
	if (last >= user->count_user_op) {
		last = 0;
    afbc:	45a6      	cmp	lr, r4
    afbe:	bf98      	it	ls
    afc0:	2400      	movls	r4, #0
	}

	if (last == user->first) {
    afc2:	f897 e001 	ldrb.w	lr, [r7, #1]
    afc6:	45a6      	cmp	lr, r4
    afc8:	d019      	beq.n	affe <ticker_job_idle_get+0x62>
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
    afca:	f8d7 e004 	ldr.w	lr, [r7, #4]
    afce:	fb16 f605 	smulbb	r6, r6, r5
    afd2:	eb0e 0506 	add.w	r5, lr, r6
	user_op->op = TICKER_USER_OP_TYPE_IDLE_GET;
    afd6:	f04f 0c01 	mov.w	ip, #1
    afda:	f80e c006 	strb.w	ip, [lr, r6]
	user_op->id = TICKER_NULL;
    afde:	26ff      	movs	r6, #255	; 0xff
    afe0:	706e      	strb	r6, [r5, #1]
	user_op->status = TICKER_STATUS_BUSY;
    afe2:	2602      	movs	r6, #2
	user_op->fp_op_func = fp_op_func;
    afe4:	626a      	str	r2, [r5, #36]	; 0x24
	}

	user_op = &user->user_op[user->last];
	user_op->op = TICKER_USER_OP_TYPE_IDLE_GET;
	user_op->id = TICKER_NULL;
	user_op->status = TICKER_STATUS_BUSY;
    afe6:	622e      	str	r6, [r5, #32]
	user_op->fp_op_func = fp_op_func;
	user_op->op_context = op_context;
    afe8:	62ab      	str	r3, [r5, #40]	; 0x28

	user->last = last;
    afea:	70fc      	strb	r4, [r7, #3]

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
    afec:	6a44      	ldr	r4, [r0, #36]	; 0x24
    afee:	6a03      	ldr	r3, [r0, #32]
    aff0:	4608      	mov	r0, r1
    aff2:	4798      	blx	r3
    aff4:	2200      	movs	r2, #0
    aff6:	4631      	mov	r1, r6
    aff8:	47a0      	blx	r4

	return user_op->status;
    affa:	6a28      	ldr	r0, [r5, #32]
    affc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (last >= user->count_user_op) {
		last = 0;
	}

	if (last == user->first) {
		return TICKER_STATUS_FAILURE;
    affe:	2001      	movs	r0, #1
	user->last = last;

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);

	return user_op->status;
}
    b000:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b002:	bf00      	nop
    b004:	200013c0 	.word	0x200013c0

0000b008 <ticker_job_sched>:

void ticker_job_sched(u8_t instance_index, u8_t user_id)
{
    b008:	b510      	push	{r4, lr}
	struct ticker_instance *instance = &_instance[instance_index];

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
    b00a:	4a07      	ldr	r2, [pc, #28]	; (b028 <ticker_job_sched+0x20>)
    b00c:	232c      	movs	r3, #44	; 0x2c
    b00e:	fb03 2000 	mla	r0, r3, r0, r2
    b012:	6a44      	ldr	r4, [r0, #36]	; 0x24
    b014:	6a03      	ldr	r3, [r0, #32]
    b016:	4608      	mov	r0, r1
    b018:	4798      	blx	r3
    b01a:	4623      	mov	r3, r4
    b01c:	2200      	movs	r2, #0
    b01e:	2102      	movs	r1, #2
}
    b020:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void ticker_job_sched(u8_t instance_index, u8_t user_id)
{
	struct ticker_instance *instance = &_instance[instance_index];

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
    b024:	4718      	bx	r3
    b026:	bf00      	nop
    b028:	200013c0 	.word	0x200013c0

0000b02c <ticker_ticks_now_get>:
}

u32_t ticker_ticks_now_get(void)
{
	return cntr_cnt_get();
    b02c:	f7fe bce2 	b.w	99f4 <cntr_cnt_get>

0000b030 <ticker_ticks_diff_get>:
}

u32_t ticker_ticks_diff_get(u32_t ticks_now, u32_t ticks_old)
{
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    b030:	1a40      	subs	r0, r0, r1
}
    b032:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b036:	4770      	bx	lr

0000b038 <bt_rand>:
#include "hal/ecb.h"

K_MUTEX_DEFINE(mutex_rand);

int bt_rand(void *buf, size_t len)
{
    b038:	b538      	push	{r3, r4, r5, lr}
    b03a:	4605      	mov	r5, r0
    b03c:	460c      	mov	r4, r1
	while (len) {
    b03e:	b18c      	cbz	r4, b064 <bt_rand+0x2c>
		k_mutex_lock(&mutex_rand, K_FOREVER);
    b040:	f04f 31ff 	mov.w	r1, #4294967295
    b044:	4808      	ldr	r0, [pc, #32]	; (b068 <bt_rand+0x30>)
    b046:	f007 fb43 	bl	126d0 <k_mutex_lock>
		len = rand_get(len, buf);
    b04a:	4620      	mov	r0, r4
    b04c:	4629      	mov	r1, r5
    b04e:	f7ff f885 	bl	a15c <rand_get>
    b052:	4604      	mov	r4, r0
		k_mutex_unlock(&mutex_rand);
    b054:	4804      	ldr	r0, [pc, #16]	; (b068 <bt_rand+0x30>)
    b056:	f007 fb9f 	bl	12798 <k_mutex_unlock>
		if (len) {
    b05a:	b11c      	cbz	r4, b064 <bt_rand+0x2c>
    b05c:	bf20      	wfe
  \brief   Send Event
  \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 */
__attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
{
  __ASM volatile ("sev");
    b05e:	bf40      	sev
  \details Wait For Event is a hint instruction that permits the processor to enter
    a low-power state until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
{
  __ASM volatile ("wfe");
    b060:	bf20      	wfe
    b062:	e7ec      	b.n	b03e <bt_rand+0x6>
			cpu_sleep();
		}
	}

	return 0;
}
    b064:	2000      	movs	r0, #0
    b066:	bd38      	pop	{r3, r4, r5, pc}
    b068:	20000774 	.word	0x20000774

0000b06c <bt_encrypt_le>:

int bt_encrypt_le(const u8_t key[16], const u8_t plaintext[16],
		  u8_t enc_data[16])
{
    b06c:	b508      	push	{r3, lr}
	BT_DBG("key %s plaintext %s", bt_hex(key, 16), bt_hex(plaintext, 16));

	ecb_encrypt(key, plaintext, enc_data, NULL);
    b06e:	2300      	movs	r3, #0
    b070:	f7fe fcf4 	bl	9a5c <ecb_encrypt>

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
}
    b074:	2000      	movs	r0, #0
    b076:	bd08      	pop	{r3, pc}

0000b078 <cpu_sleep>:
    b078:	bf20      	wfe
  \brief   Send Event
  \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 */
__attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
{
  __ASM volatile ("sev");
    b07a:	bf40      	sev
  \details Wait For Event is a hint instruction that permits the processor to enter
    a low-power state until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
{
  __ASM volatile ("wfe");
    b07c:	bf20      	wfe
    b07e:	4770      	bx	lr

0000b080 <ticker_if_done>:
}
#endif

static void ticker_if_done(u32_t status, void *ops_context)
{
	*((u32_t volatile *)ops_context) = status;
    b080:	6008      	str	r0, [r1, #0]
    b082:	4770      	bx	lr

0000b084 <prepare_reduced>:
{
	/* It is acceptable that ticker_update will fail, if ticker is stopped;
	 * for example, scan ticker is stopped on connection estblishment but
	 * is also preempted.
	 */
	if (status == 0) {
    b084:	b918      	cbnz	r0, b08e <prepare_reduced+0xa>
		struct shdr *hdr = (struct shdr *)op_context;

		hdr->ticks_xtal_to_start |= ((u32_t)1 << 31);
    b086:	680b      	ldr	r3, [r1, #0]
    b088:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    b08c:	600b      	str	r3, [r1, #0]
    b08e:	4770      	bx	lr

0000b090 <prepare_normal>:
{
	/* It is acceptable that ticker_update will fail, if ticker is stopped;
	 * for example, scan ticker is stopped on connection estblishment but
	 * is also preempted.
	 */
	if (status == 0) {
    b090:	b918      	cbnz	r0, b09a <prepare_normal+0xa>
		struct shdr *hdr = (struct shdr *)op_context;

		hdr->ticks_xtal_to_start &= ~((u32_t)1 << 31);
    b092:	680b      	ldr	r3, [r1, #0]
    b094:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    b098:	600b      	str	r3, [r1, #0]
    b09a:	4770      	bx	lr

0000b09c <chan_sel_remap>:
	}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_XTAL_ADVANCED */
}

static u8_t chan_sel_remap(u8_t *chan_map, u8_t chan_index)
{
    b09c:	b570      	push	{r4, r5, r6, lr}
    b09e:	1d02      	adds	r2, r0, #4
    b0a0:	1e45      	subs	r5, r0, #1
	u8_t chan_next;
	u8_t byte_count;

	chan_next = 0;
    b0a2:	2000      	movs	r0, #0
	byte_count = 5;
	while (byte_count--) {
    b0a4:	4295      	cmp	r5, r2
    b0a6:	d011      	beq.n	b0cc <chan_sel_remap+0x30>
		u8_t bite;
		u8_t bit_count;

		bite = *chan_map;
    b0a8:	f815 6f01 	ldrb.w	r6, [r5, #1]!
		bit_count = 8;
		while (bit_count--) {
    b0ac:	2400      	movs	r4, #0
    b0ae:	1903      	adds	r3, r0, r4
    b0b0:	2c08      	cmp	r4, #8
    b0b2:	b2db      	uxtb	r3, r3
    b0b4:	d008      	beq.n	b0c8 <chan_sel_remap+0x2c>
			if (bite & 0x01) {
    b0b6:	f016 0f01 	tst.w	r6, #1
    b0ba:	d002      	beq.n	b0c2 <chan_sel_remap+0x26>
				if (chan_index == 0) {
    b0bc:	b139      	cbz	r1, b0ce <chan_sel_remap+0x32>
					break;
				}
				chan_index--;
    b0be:	3901      	subs	r1, #1
    b0c0:	b2c9      	uxtb	r1, r1
			}
			chan_next++;
			bite >>= 1;
    b0c2:	0876      	lsrs	r6, r6, #1
    b0c4:	3401      	adds	r4, #1
    b0c6:	e7f2      	b.n	b0ae <chan_sel_remap+0x12>
    b0c8:	4618      	mov	r0, r3
    b0ca:	e7eb      	b.n	b0a4 <chan_sel_remap+0x8>
    b0cc:	bd70      	pop	{r4, r5, r6, pc}
    b0ce:	4618      	mov	r0, r3

		chan_map++;
	}

	return chan_next;
}
    b0d0:	bd70      	pop	{r4, r5, r6, pc}
	...

0000b0d4 <packet_rx_acquired_count_get>:
	}
}

static u8_t packet_rx_acquired_count_get(void)
{
	if (_radio.packet_rx_acquire >=
    b0d4:	4b09      	ldr	r3, [pc, #36]	; (b0fc <packet_rx_acquired_count_get+0x28>)
    b0d6:	f893 01be 	ldrb.w	r0, [r3, #446]	; 0x1be
	    _radio.packet_rx_last) {
    b0da:	f893 21bd 	ldrb.w	r2, [r3, #445]	; 0x1bd
	}
}

static u8_t packet_rx_acquired_count_get(void)
{
	if (_radio.packet_rx_acquire >=
    b0de:	4290      	cmp	r0, r2
	    _radio.packet_rx_last) {
		return (_radio.packet_rx_acquire -
			_radio.packet_rx_last);
	} else {
		return (_radio.packet_rx_count -
			_radio.packet_rx_last +
    b0e0:	bf3b      	ittet	cc
    b0e2:	f893 21bd 	ldrbcc.w	r2, [r3, #445]	; 0x1bd
	if (_radio.packet_rx_acquire >=
	    _radio.packet_rx_last) {
		return (_radio.packet_rx_acquire -
			_radio.packet_rx_last);
	} else {
		return (_radio.packet_rx_count -
    b0e6:	f893 31bc 	ldrbcc.w	r3, [r3, #444]	; 0x1bc
static u8_t packet_rx_acquired_count_get(void)
{
	if (_radio.packet_rx_acquire >=
	    _radio.packet_rx_last) {
		return (_radio.packet_rx_acquire -
			_radio.packet_rx_last);
    b0ea:	f893 31bd 	ldrbcs.w	r3, [r3, #445]	; 0x1bd
	} else {
		return (_radio.packet_rx_count -
    b0ee:	18c0      	addcc	r0, r0, r3

static u8_t packet_rx_acquired_count_get(void)
{
	if (_radio.packet_rx_acquire >=
	    _radio.packet_rx_last) {
		return (_radio.packet_rx_acquire -
    b0f0:	bf2c      	ite	cs
    b0f2:	1ac0      	subcs	r0, r0, r3
			_radio.packet_rx_last);
	} else {
		return (_radio.packet_rx_count -
    b0f4:	1a80      	subcc	r0, r0, r2
    b0f6:	b2c0      	uxtb	r0, r0
			_radio.packet_rx_last +
			_radio.packet_rx_acquire);
	}
}
    b0f8:	4770      	bx	lr
    b0fa:	bf00      	nop
    b0fc:	20001470 	.word	0x20001470

0000b100 <packet_rx_reserve_get>:

static struct radio_pdu_node_rx *packet_rx_reserve_get(u8_t count)
{
    b100:	b508      	push	{r3, lr}
    b102:	4601      	mov	r1, r0
	struct radio_pdu_node_rx *radio_pdu_node_rx;

	if (count > packet_rx_acquired_count_get()) {
    b104:	f7ff ffe6 	bl	b0d4 <packet_rx_acquired_count_get>
    b108:	4288      	cmp	r0, r1
		return 0;
	}

	radio_pdu_node_rx = _radio.packet_rx[_radio.packet_rx_last];
    b10a:	bf21      	itttt	cs
    b10c:	4b05      	ldrcs	r3, [pc, #20]	; (b124 <packet_rx_reserve_get+0x24>)
    b10e:	f893 21bd 	ldrbcs.w	r2, [r3, #445]	; 0x1bd
    b112:	f8d3 31b8 	ldrcs.w	r3, [r3, #440]	; 0x1b8
    b116:	f853 0022 	ldrcs.w	r0, [r3, r2, lsl #2]
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    b11a:	bf26      	itte	cs
    b11c:	2301      	movcs	r3, #1
    b11e:	7103      	strbcs	r3, [r0, #4]
static struct radio_pdu_node_rx *packet_rx_reserve_get(u8_t count)
{
	struct radio_pdu_node_rx *radio_pdu_node_rx;

	if (count > packet_rx_acquired_count_get()) {
		return 0;
    b120:	2000      	movcc	r0, #0

	radio_pdu_node_rx = _radio.packet_rx[_radio.packet_rx_last];
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;

	return radio_pdu_node_rx;
}
    b122:	bd08      	pop	{r3, pc}
    b124:	20001470 	.word	0x20001470

0000b128 <packet_rx_allocate>:

	*pdu_data_tx = _pdu_data_tx;
}

static void packet_rx_allocate(u8_t max)
{
    b128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u8_t acquire;

	if (max > _radio.link_rx_data_quota) {
    b12c:	4d1e      	ldr	r5, [pc, #120]	; (b1a8 <packet_rx_allocate+0x80>)
		max = _radio.link_rx_data_quota;
	}

	acquire = _radio.packet_rx_acquire + 1;
    b12e:	f895 41be 	ldrb.w	r4, [r5, #446]	; 0x1be

static void packet_rx_allocate(u8_t max)
{
	u8_t acquire;

	if (max > _radio.link_rx_data_quota) {
    b132:	f895 61d0 	ldrb.w	r6, [r5, #464]	; 0x1d0
		max = _radio.link_rx_data_quota;
	}

	acquire = _radio.packet_rx_acquire + 1;
	if (acquire == _radio.packet_rx_count) {
    b136:	f895 31bc 	ldrb.w	r3, [r5, #444]	; 0x1bc

	if (max > _radio.link_rx_data_quota) {
		max = _radio.link_rx_data_quota;
	}

	acquire = _radio.packet_rx_acquire + 1;
    b13a:	3401      	adds	r4, #1
    b13c:	b2e4      	uxtb	r4, r4
	if (acquire == _radio.packet_rx_count) {
		acquire = 0;
    b13e:	42a3      	cmp	r3, r4
    b140:	bf08      	it	eq
    b142:	2400      	moveq	r4, #0
		_radio.packet_rx[_radio.packet_rx_acquire] = radio_pdu_node_rx;
		_radio.packet_rx_acquire = acquire;

		acquire = _radio.packet_rx_acquire + 1;
		if (acquire == _radio.packet_rx_count) {
			acquire = 0;
    b144:	4286      	cmp	r6, r0
    b146:	bf28      	it	cs
    b148:	4606      	movcs	r6, r0
	acquire = _radio.packet_rx_acquire + 1;
	if (acquire == _radio.packet_rx_count) {
		acquire = 0;
	}

	while ((max--) && (acquire != _radio.packet_rx_last)) {
    b14a:	46a8      	mov	r8, r5
    b14c:	b356      	cbz	r6, b1a4 <packet_rx_allocate+0x7c>
    b14e:	f895 31bd 	ldrb.w	r3, [r5, #445]	; 0x1bd
    b152:	429c      	cmp	r4, r3
    b154:	d026      	beq.n	b1a4 <packet_rx_allocate+0x7c>
		void *link;
		struct radio_pdu_node_rx *radio_pdu_node_rx;

		link = mem_acquire(&_radio.link_rx_free);
    b156:	4815      	ldr	r0, [pc, #84]	; (b1ac <packet_rx_allocate+0x84>)
    b158:	f7fe fb77 	bl	984a <mem_acquire>
		if (!link) {
    b15c:	4607      	mov	r7, r0
    b15e:	b308      	cbz	r0, b1a4 <packet_rx_allocate+0x7c>
			break;
		}

		radio_pdu_node_rx = mem_acquire(&_radio.pkt_rx_data_free);
    b160:	4813      	ldr	r0, [pc, #76]	; (b1b0 <packet_rx_allocate+0x88>)
    b162:	f7fe fb72 	bl	984a <mem_acquire>
		if (!radio_pdu_node_rx) {
    b166:	b928      	cbnz	r0, b174 <packet_rx_allocate+0x4c>
			mem_release(link, &_radio.link_rx_free);
    b168:	4638      	mov	r0, r7
    b16a:	4910      	ldr	r1, [pc, #64]	; (b1ac <packet_rx_allocate+0x84>)
			acquire = 0;
		}

		_radio.link_rx_data_quota--;
	}
}
    b16c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			break;
		}

		radio_pdu_node_rx = mem_acquire(&_radio.pkt_rx_data_free);
		if (!radio_pdu_node_rx) {
			mem_release(link, &_radio.link_rx_free);
    b170:	f7fe bb85 	b.w	987e <mem_release>
			break;
		}

		radio_pdu_node_rx->hdr.onion.link = link;
    b174:	6007      	str	r7, [r0, #0]

		_radio.packet_rx[_radio.packet_rx_acquire] = radio_pdu_node_rx;
    b176:	f898 21be 	ldrb.w	r2, [r8, #446]	; 0x1be
    b17a:	f8d8 31b8 	ldr.w	r3, [r8, #440]	; 0x1b8
    b17e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
		_radio.packet_rx_acquire = acquire;
    b182:	f888 41be 	strb.w	r4, [r8, #446]	; 0x1be

		acquire = _radio.packet_rx_acquire + 1;
		if (acquire == _radio.packet_rx_count) {
    b186:	f898 31bc 	ldrb.w	r3, [r8, #444]	; 0x1bc
		radio_pdu_node_rx->hdr.onion.link = link;

		_radio.packet_rx[_radio.packet_rx_acquire] = radio_pdu_node_rx;
		_radio.packet_rx_acquire = acquire;

		acquire = _radio.packet_rx_acquire + 1;
    b18a:	3401      	adds	r4, #1
    b18c:	b2e4      	uxtb	r4, r4
		if (acquire == _radio.packet_rx_count) {
			acquire = 0;
    b18e:	42a3      	cmp	r3, r4
    b190:	bf08      	it	eq
    b192:	2400      	moveq	r4, #0
		}

		_radio.link_rx_data_quota--;
    b194:	f895 31d0 	ldrb.w	r3, [r5, #464]	; 0x1d0
    b198:	3e01      	subs	r6, #1
    b19a:	3b01      	subs	r3, #1
    b19c:	f885 31d0 	strb.w	r3, [r5, #464]	; 0x1d0
    b1a0:	b2f6      	uxtb	r6, r6
    b1a2:	e7d3      	b.n	b14c <packet_rx_allocate+0x24>
    b1a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b1a8:	20001470 	.word	0x20001470
    b1ac:	20001634 	.word	0x20001634
    b1b0:	2000161c 	.word	0x2000161c

0000b1b4 <common_init>:
	/* memory allocations */
	common_init();
}

static void common_init(void)
{
    b1b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	void *link;

	/* initialise connection pool. */
	if (_radio.connection_count) {
    b1b6:	4d3d      	ldr	r5, [pc, #244]	; (b2ac <common_init+0xf8>)
    b1b8:	f895 218c 	ldrb.w	r2, [r5, #396]	; 0x18c
    b1bc:	b142      	cbz	r2, b1d0 <common_init+0x1c>
		mem_init(_radio.conn_pool, CONNECTION_T_SIZE,
    b1be:	f505 73c4 	add.w	r3, r5, #392	; 0x188
    b1c2:	f44f 718c 	mov.w	r1, #280	; 0x118
    b1c6:	f8d5 0184 	ldr.w	r0, [r5, #388]	; 0x184
    b1ca:	f7fe fb17 	bl	97fc <mem_init>
    b1ce:	e001      	b.n	b1d4 <common_init+0x20>
			 _radio.connection_count,
			 &_radio.conn_free);
	} else {
		_radio.conn_free = NULL;
    b1d0:	f8c5 2188 	str.w	r2, [r5, #392]	; 0x188
	}

	/* initialise rx pool. */
	mem_init(_radio.pkt_rx_data_pool,
    b1d4:	4c35      	ldr	r4, [pc, #212]	; (b2ac <common_init+0xf8>)
    b1d6:	f895 21b6 	ldrb.w	r2, [r5, #438]	; 0x1b6
    b1da:	f8b5 11b4 	ldrh.w	r1, [r5, #436]	; 0x1b4
    b1de:	f8d5 01a8 	ldr.w	r0, [r5, #424]	; 0x1a8
    b1e2:	f504 73d6 	add.w	r3, r4, #428	; 0x1ac
    b1e6:	f7fe fb09 	bl	97fc <mem_init>
		 _radio.packet_rx_data_size,
		 _radio.packet_rx_data_count,
		 &_radio.pkt_rx_data_free);

	/* initialise rx link pool. */
	mem_init(_radio.link_rx_pool, (sizeof(void *) * 2),
    b1ea:	f895 11bc 	ldrb.w	r1, [r5, #444]	; 0x1bc
    b1ee:	f895 218c 	ldrb.w	r2, [r5, #396]	; 0x18c
    b1f2:	f8d5 01c0 	ldr.w	r0, [r5, #448]	; 0x1c0
    b1f6:	440a      	add	r2, r1
    b1f8:	f504 73e2 	add.w	r3, r4, #452	; 0x1c4
    b1fc:	2108      	movs	r1, #8
    b1fe:	f7fe fafd 	bl	97fc <mem_init>
		 (_radio.packet_rx_count + _radio.connection_count),
		 &_radio.link_rx_free);

	/* initialise ctrl tx pool. */
	mem_init(_radio.pkt_tx_ctrl_pool, PACKET_TX_CTRL_SIZE_MIN,
    b202:	f504 73ec 	add.w	r3, r4, #472	; 0x1d8
    b206:	2202      	movs	r2, #2
    b208:	2124      	movs	r1, #36	; 0x24
    b20a:	f8d5 01d4 	ldr.w	r0, [r5, #468]	; 0x1d4
    b20e:	f7fe faf5 	bl	97fc <mem_init>
		 PACKET_MEM_COUNT_TX_CTRL, &_radio.pkt_tx_ctrl_free);

	/* initialise data tx pool. */
	mem_init(_radio.pkt_tx_data_pool, _radio.packet_tx_data_size,
    b212:	f895 21f0 	ldrb.w	r2, [r5, #496]	; 0x1f0
    b216:	f8d5 01dc 	ldr.w	r0, [r5, #476]	; 0x1dc
    b21a:	f8b5 11e4 	ldrh.w	r1, [r5, #484]	; 0x1e4
    b21e:	3a01      	subs	r2, #1
    b220:	f504 73f0 	add.w	r3, r4, #480	; 0x1e0
    b224:	b292      	uxth	r2, r2
    b226:	f7fe fae9 	bl	97fc <mem_init>
		 (_radio.packet_tx_count - 1), &_radio.pkt_tx_data_free);

	/* initialise the event-cum-data memq */
	link = mem_acquire(&_radio.link_rx_free);
    b22a:	f504 70e2 	add.w	r0, r4, #452	; 0x1c4
    b22e:	f7fe fb0c 	bl	984a <mem_acquire>
	LL_ASSERT(link);
    b232:	b978      	cbnz	r0, b254 <common_init+0xa0>
    b234:	4b1e      	ldr	r3, [pc, #120]	; (b2b0 <common_init+0xfc>)
    b236:	9301      	str	r3, [sp, #4]
    b238:	4b1e      	ldr	r3, [pc, #120]	; (b2b4 <common_init+0x100>)
    b23a:	9300      	str	r3, [sp, #0]
    b23c:	4a1e      	ldr	r2, [pc, #120]	; (b2b8 <common_init+0x104>)
    b23e:	4b1f      	ldr	r3, [pc, #124]	; (b2bc <common_init+0x108>)
    b240:	491f      	ldr	r1, [pc, #124]	; (b2c0 <common_init+0x10c>)
    b242:	4820      	ldr	r0, [pc, #128]	; (b2c4 <common_init+0x110>)
    b244:	f7f6 f91c 	bl	1480 <printk>
    b248:	4040      	eors	r0, r0
    b24a:	f380 8811 	msr	BASEPRI, r0
    b24e:	f04f 0004 	mov.w	r0, #4
    b252:	df02      	svc	2
	memq_init(link, &_radio.link_rx_head, (void *)&_radio.link_rx_tail);
    b254:	f504 72e6 	add.w	r2, r4, #460	; 0x1cc
    b258:	f504 71e4 	add.w	r1, r4, #456	; 0x1c8
    b25c:	f7fe fb49 	bl	98f2 <memq_init>

	/* initialise advertiser channel map */
	_radio.advertiser.chl_map = 0x07;
    b260:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
    b264:	f043 0338 	orr.w	r3, r3, #56	; 0x38
    b268:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
	/* initialise connection channel map */
	_radio.data_chan_map[0] = 0xFF;
	_radio.data_chan_map[1] = 0xFF;
	_radio.data_chan_map[2] = 0xFF;
	_radio.data_chan_map[3] = 0xFF;
	_radio.data_chan_map[4] = 0x1F;
    b26c:	231f      	movs	r3, #31
    b26e:	f884 319a 	strb.w	r3, [r4, #410]	; 0x19a
	_radio.data_chan_count = 37;
    b272:	2325      	movs	r3, #37	; 0x25
    b274:	f884 319b 	strb.w	r3, [r4, #411]	; 0x19b

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
	/* Initialize the DLE defaults */
	_radio.default_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
    b278:	231b      	movs	r3, #27
    b27a:	f8a4 319e 	strh.w	r3, [r4, #414]	; 0x19e
	_radio.default_tx_time = RADIO_LL_LENGTH_TIME_RX_MIN;
    b27e:	f44f 73a4 	mov.w	r3, #328	; 0x148

	/* initialise advertiser channel map */
	_radio.advertiser.chl_map = 0x07;

	/* initialise connection channel map */
	_radio.data_chan_map[0] = 0xFF;
    b282:	20ff      	movs	r0, #255	; 0xff
	_radio.data_chan_count = 37;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
	/* Initialize the DLE defaults */
	_radio.default_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
	_radio.default_tx_time = RADIO_LL_LENGTH_TIME_RX_MIN;
    b284:	f8a4 31a0 	strh.w	r3, [r4, #416]	; 0x1a0
	_radio.default_phy_tx = BIT(0);
	_radio.default_phy_rx = BIT(0);

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY_2M)
	/* Initialize the DLE defaults */
	_radio.default_phy_tx |= BIT(1);
    b288:	2303      	movs	r3, #3

	/* initialise advertiser channel map */
	_radio.advertiser.chl_map = 0x07;

	/* initialise connection channel map */
	_radio.data_chan_map[0] = 0xFF;
    b28a:	f884 0196 	strb.w	r0, [r4, #406]	; 0x196
	_radio.data_chan_map[1] = 0xFF;
    b28e:	f884 0197 	strb.w	r0, [r4, #407]	; 0x197
	_radio.data_chan_map[2] = 0xFF;
    b292:	f884 0198 	strb.w	r0, [r4, #408]	; 0x198
	_radio.data_chan_map[3] = 0xFF;
    b296:	f884 0199 	strb.w	r0, [r4, #409]	; 0x199
	_radio.default_phy_tx = BIT(0);
	_radio.default_phy_rx = BIT(0);

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY_2M)
	/* Initialize the DLE defaults */
	_radio.default_phy_tx |= BIT(1);
    b29a:	f8a4 31a2 	strh.w	r3, [r4, #418]	; 0x1a2
	_radio.default_phy_rx |= BIT(1);
    b29e:	f8a4 31a4 	strh.w	r3, [r4, #420]	; 0x1a4
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PHY_CODED */
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PHY */

	/* allocate the rx queue */
	packet_rx_allocate(0xFF);
}
    b2a2:	b003      	add	sp, #12
    b2a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	_radio.default_phy_rx |= BIT(2);
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PHY_CODED */
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PHY */

	/* allocate the rx queue */
	packet_rx_allocate(0xFF);
    b2a8:	f7ff bf3e 	b.w	b128 <packet_rx_allocate>
    b2ac:	20001470 	.word	0x20001470
    b2b0:	00013df4 	.word	0x00013df4
    b2b4:	00013df9 	.word	0x00013df9
    b2b8:	00013db4 	.word	0x00013db4
    b2bc:	00016744 	.word	0x00016744
    b2c0:	00013dbb 	.word	0x00013dbb
    b2c4:	00015243 	.word	0x00015243

0000b2c8 <tx_cmplt_get>:
	return 0;
}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PHY */

static u8_t tx_cmplt_get(u16_t *handle, u8_t *first, u8_t last)
{
    b2c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u8_t _first;
	u8_t cmplt;

	_first = *first;
    b2cc:	780c      	ldrb	r4, [r1, #0]
	if (_first == last) {
    b2ce:	4294      	cmp	r4, r2
	return 0;
}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PHY */

static u8_t tx_cmplt_get(u16_t *handle, u8_t *first, u8_t last)
{
    b2d0:	4681      	mov	r9, r0
    b2d2:	460f      	mov	r7, r1
    b2d4:	4690      	mov	r8, r2
	u8_t _first;
	u8_t cmplt;

	_first = *first;
	if (_first == last) {
    b2d6:	d03d      	beq.n	b354 <tx_cmplt_get+0x8c>
		return 0;
	}

	cmplt = 0;
	*handle = _radio.pkt_release[_first].handle;
    b2d8:	4e20      	ldr	r6, [pc, #128]	; (b35c <tx_cmplt_get+0x94>)
    b2da:	f8d6 31ec 	ldr.w	r3, [r6, #492]	; 0x1ec
    b2de:	f833 3034 	ldrh.w	r3, [r3, r4, lsl #3]
    b2e2:	8003      	strh	r3, [r0, #0]
	_first = *first;
	if (_first == last) {
		return 0;
	}

	cmplt = 0;
    b2e4:	2500      	movs	r5, #0
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
		     ((pdu_data_tx->ll_id == PDU_DATA_LLID_DATA_START) ||
		      (pdu_data_tx->ll_id == PDU_DATA_LLID_DATA_CONTINUE)))) {

			/* data packet, hence count num cmplt */
			_radio.pkt_release[_first].node_tx =
    b2e6:	f04f 0a01 	mov.w	sl, #1
				(struct radio_pdu_node_tx *)1;

			cmplt++;
		} else {
			/* ctrl packet, hence not num cmplt */
			_radio.pkt_release[_first].node_tx =
    b2ea:	f04f 0b02 	mov.w	fp, #2
	*handle = _radio.pkt_release[_first].handle;
	do {
		struct radio_pdu_node_tx *node_tx;
		struct pdu_data *pdu_data_tx;

		if (*handle != _radio.pkt_release[_first].handle) {
    b2ee:	b223      	sxth	r3, r4
    b2f0:	f8d6 11ec 	ldr.w	r1, [r6, #492]	; 0x1ec
    b2f4:	f8b9 0000 	ldrh.w	r0, [r9]
    b2f8:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
    b2fc:	f831 3033 	ldrh.w	r3, [r1, r3, lsl #3]
    b300:	4298      	cmp	r0, r3
    b302:	d123      	bne.n	b34c <tx_cmplt_get+0x84>
			break;
		}

		node_tx = _radio.pkt_release[_first].node_tx;
    b304:	6850      	ldr	r0, [r2, #4]
		/*@FIXME: assign before first 3 if conditions */
		pdu_data_tx = (struct pdu_data *)node_tx->pdu_data;
		if ((!node_tx) || (node_tx == (struct radio_pdu_node_tx *)1) ||
    b306:	2801      	cmp	r0, #1
    b308:	f020 0103 	bic.w	r1, r0, #3
    b30c:	d90a      	bls.n	b324 <tx_cmplt_get+0x5c>
    b30e:	b171      	cbz	r1, b32e <tx_cmplt_get+0x66>
		    ((((u32_t)node_tx & ~(0x00000003)) != 0) &&
    b310:	1d03      	adds	r3, r0, #4
    b312:	d00c      	beq.n	b32e <tx_cmplt_get+0x66>
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
    b314:	7943      	ldrb	r3, [r0, #5]
    b316:	b153      	cbz	r3, b32e <tx_cmplt_get+0x66>
    b318:	7903      	ldrb	r3, [r0, #4]
    b31a:	f003 0303 	and.w	r3, r3, #3
    b31e:	3b01      	subs	r3, #1
    b320:	2b01      	cmp	r3, #1
    b322:	d804      	bhi.n	b32e <tx_cmplt_get+0x66>

			/* data packet, hence count num cmplt */
			_radio.pkt_release[_first].node_tx =
				(struct radio_pdu_node_tx *)1;

			cmplt++;
    b324:	3501      	adds	r5, #1
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
		     ((pdu_data_tx->ll_id == PDU_DATA_LLID_DATA_START) ||
		      (pdu_data_tx->ll_id == PDU_DATA_LLID_DATA_CONTINUE)))) {

			/* data packet, hence count num cmplt */
			_radio.pkt_release[_first].node_tx =
    b326:	f8c2 a004 	str.w	sl, [r2, #4]
				(struct radio_pdu_node_tx *)1;

			cmplt++;
    b32a:	b2ed      	uxtb	r5, r5
    b32c:	e001      	b.n	b332 <tx_cmplt_get+0x6a>
		} else {
			/* ctrl packet, hence not num cmplt */
			_radio.pkt_release[_first].node_tx =
    b32e:	f8c2 b004 	str.w	fp, [r2, #4]
				(struct radio_pdu_node_tx *)2;
		}

		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
    b332:	b111      	cbz	r1, b33a <tx_cmplt_get+0x72>
			mem_release(node_tx, &_radio.pkt_tx_data_free);
    b334:	490a      	ldr	r1, [pc, #40]	; (b360 <tx_cmplt_get+0x98>)
    b336:	f7fe faa2 	bl	987e <mem_release>
		}

		_first = _first + 1;
    b33a:	3401      	adds	r4, #1
		if (_first == _radio.packet_tx_count) {
    b33c:	f896 31f0 	ldrb.w	r3, [r6, #496]	; 0x1f0

		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
			mem_release(node_tx, &_radio.pkt_tx_data_free);
		}

		_first = _first + 1;
    b340:	b2e4      	uxtb	r4, r4
		if (_first == _radio.packet_tx_count) {
			_first = 0;
    b342:	42a3      	cmp	r3, r4
    b344:	bf08      	it	eq
    b346:	2400      	moveq	r4, #0
		}

	} while (_first != last);
    b348:	4544      	cmp	r4, r8
    b34a:	d1d0      	bne.n	b2ee <tx_cmplt_get+0x26>

	*first = _first;
    b34c:	703c      	strb	r4, [r7, #0]

	return cmplt;
    b34e:	4628      	mov	r0, r5
    b350:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	u8_t _first;
	u8_t cmplt;

	_first = *first;
	if (_first == last) {
		return 0;
    b354:	2000      	movs	r0, #0
	} while (_first != last);

	*first = _first;

	return cmplt;
}
    b356:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b35a:	bf00      	nop
    b35c:	20001470 	.word	0x20001470
    b360:	20001650 	.word	0x20001650

0000b364 <connection_get>:

	return 0;
}

static struct connection *connection_get(u16_t handle)
{
    b364:	b510      	push	{r4, lr}
	struct connection *conn;

	if (handle < _radio.connection_count) {
    b366:	4b09      	ldr	r3, [pc, #36]	; (b38c <connection_get+0x28>)
    b368:	f893 218c 	ldrb.w	r2, [r3, #396]	; 0x18c
    b36c:	4282      	cmp	r2, r0

	return 0;
}

static struct connection *connection_get(u16_t handle)
{
    b36e:	4604      	mov	r4, r0
	struct connection *conn;

	if (handle < _radio.connection_count) {
    b370:	d90a      	bls.n	b388 <connection_get+0x24>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE, handle);
    b372:	4602      	mov	r2, r0
    b374:	f44f 718c 	mov.w	r1, #280	; 0x118
    b378:	f8d3 0184 	ldr.w	r0, [r3, #388]	; 0x184
    b37c:	f7fe fa9c 	bl	98b8 <mem_get>
		if ((conn) && (conn->handle == handle)) {
    b380:	b110      	cbz	r0, b388 <connection_get+0x24>
    b382:	8c03      	ldrh	r3, [r0, #32]
    b384:	42a3      	cmp	r3, r4
    b386:	d000      	beq.n	b38a <connection_get+0x26>
			return conn;
		}
	}

	return 0;
    b388:	2000      	movs	r0, #0
}
    b38a:	bd10      	pop	{r4, pc}
    b38c:	20001470 	.word	0x20001470

0000b390 <role_disable>:
		LL_ASSERT(0);
	}
}

static u32_t role_disable(u8_t ticker_id_primary, u8_t ticker_id_stop)
{
    b390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b394:	b086      	sub	sp, #24
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    b396:	2302      	movs	r3, #2
	u32_t ret;

	/* Determine xtal, active and start ticks. Stop directed adv stop
	 * ticker.
	 */
	switch (ticker_id_primary) {
    b398:	2805      	cmp	r0, #5
		LL_ASSERT(0);
	}
}

static u32_t role_disable(u8_t ticker_id_primary, u8_t ticker_id_stop)
{
    b39a:	4605      	mov	r5, r0
    b39c:	4688      	mov	r8, r1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    b39e:	9302      	str	r3, [sp, #8]
	u32_t ret;

	/* Determine xtal, active and start ticks. Stop directed adv stop
	 * ticker.
	 */
	switch (ticker_id_primary) {
    b3a0:	d007      	beq.n	b3b2 <role_disable+0x22>
    b3a2:	2806      	cmp	r0, #6
    b3a4:	d126      	bne.n	b3f4 <role_disable+0x64>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
			  (ret_cb == TICKER_STATUS_FAILURE));
		break;

	case RADIO_TICKER_ID_SCAN:
		ticks_xtal_to_start =
    b3a6:	4b90      	ldr	r3, [pc, #576]	; (b5e8 <role_disable+0x258>)
    b3a8:	f8d3 614c 	ldr.w	r6, [r3, #332]	; 0x14c
			_radio.scanner.hdr.ticks_xtal_to_start;
		ticks_active_to_start =
    b3ac:	f8d3 7150 	ldr.w	r7, [r3, #336]	; 0x150
			_radio.scanner.hdr.ticks_active_to_start;
		break;
    b3b0:	e03b      	b.n	b42a <role_disable+0x9a>
	/* Determine xtal, active and start ticks. Stop directed adv stop
	 * ticker.
	 */
	switch (ticker_id_primary) {
	case RADIO_TICKER_ID_ADV:
		ticks_xtal_to_start =
    b3b2:	4b8d      	ldr	r3, [pc, #564]	; (b5e8 <role_disable+0x258>)
    b3b4:	f8d3 6094 	ldr.w	r6, [r3, #148]	; 0x94
			_radio.advertiser.hdr.ticks_xtal_to_start;
		ticks_active_to_start =
    b3b8:	f8d3 7098 	ldr.w	r7, [r3, #152]	; 0x98
			_radio.advertiser.hdr.ticks_active_to_start;

		/* Stop ticker "may" be in use for direct adv,
		 * hence stop may fail if ticker not used.
		 */
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    b3bc:	ab02      	add	r3, sp, #8
    b3be:	9300      	str	r3, [sp, #0]
    b3c0:	460a      	mov	r2, r1
    b3c2:	4b8a      	ldr	r3, [pc, #552]	; (b5ec <role_disable+0x25c>)
    b3c4:	2103      	movs	r1, #3
    b3c6:	2000      	movs	r0, #0
    b3c8:	f7ff fd74 	bl	aeb4 <ticker_stop>
				  RADIO_TICKER_USER_ID_APP, ticker_id_stop,
				  ticker_if_done, (void *)&ret_cb);
		if (ret == TICKER_STATUS_BUSY) {
    b3cc:	2802      	cmp	r0, #2
    b3ce:	d002      	beq.n	b3d6 <role_disable+0x46>
			while (ret_cb == TICKER_STATUS_BUSY) {
				cpu_sleep();
			}
		}

		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
    b3d0:	9b02      	ldr	r3, [sp, #8]
    b3d2:	b933      	cbnz	r3, b3e2 <role_disable+0x52>
    b3d4:	e029      	b.n	b42a <role_disable+0x9a>
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
				  RADIO_TICKER_USER_ID_APP, ticker_id_stop,
				  ticker_if_done, (void *)&ret_cb);
		if (ret == TICKER_STATUS_BUSY) {
			/* wait for ticker to be stopped */
			while (ret_cb == TICKER_STATUS_BUSY) {
    b3d6:	9b02      	ldr	r3, [sp, #8]
    b3d8:	2b02      	cmp	r3, #2
    b3da:	d1f9      	bne.n	b3d0 <role_disable+0x40>
				cpu_sleep();
    b3dc:	f7ff fe4c 	bl	b078 <cpu_sleep>
    b3e0:	e7f9      	b.n	b3d6 <role_disable+0x46>
			}
		}

		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
    b3e2:	9b02      	ldr	r3, [sp, #8]
    b3e4:	2b01      	cmp	r3, #1
    b3e6:	d020      	beq.n	b42a <role_disable+0x9a>
    b3e8:	4b81      	ldr	r3, [pc, #516]	; (b5f0 <role_disable+0x260>)
    b3ea:	9301      	str	r3, [sp, #4]
    b3ec:	4b81      	ldr	r3, [pc, #516]	; (b5f4 <role_disable+0x264>)
    b3ee:	9300      	str	r3, [sp, #0]
    b3f0:	4b81      	ldr	r3, [pc, #516]	; (b5f8 <role_disable+0x268>)
    b3f2:	e0c9      	b.n	b588 <role_disable+0x1f8>
			_radio.scanner.hdr.ticks_xtal_to_start;
		ticks_active_to_start =
			_radio.scanner.hdr.ticks_active_to_start;
		break;
	default:
		if (ticker_id_primary >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    b3f4:	d909      	bls.n	b40a <role_disable+0x7a>
			struct connection *conn;
			u16_t conn_handle;

			conn_handle = ticker_id_primary -
				      RADIO_TICKER_ID_FIRST_CONNECTION;
			conn = connection_get(conn_handle);
    b3f6:	3807      	subs	r0, #7
    b3f8:	b280      	uxth	r0, r0
    b3fa:	f7ff ffb3 	bl	b364 <connection_get>
			if (!conn) {
    b3fe:	2800      	cmp	r0, #0
    b400:	f000 80ed 	beq.w	b5de <role_disable+0x24e>
				return 1;
			}

			ticks_xtal_to_start =
				conn->hdr.ticks_xtal_to_start;
			ticks_active_to_start =
    b404:	e890 00c0 	ldmia.w	r0, {r6, r7}
    b408:	e00f      	b.n	b42a <role_disable+0x9a>
				conn->hdr.ticks_active_to_start;
		} else {
			LL_ASSERT(0);
    b40a:	4b79      	ldr	r3, [pc, #484]	; (b5f0 <role_disable+0x260>)
    b40c:	9301      	str	r3, [sp, #4]
    b40e:	4b79      	ldr	r3, [pc, #484]	; (b5f4 <role_disable+0x264>)
    b410:	9300      	str	r3, [sp, #0]
    b412:	4b79      	ldr	r3, [pc, #484]	; (b5f8 <role_disable+0x268>)
    b414:	4a79      	ldr	r2, [pc, #484]	; (b5fc <role_disable+0x26c>)
    b416:	497a      	ldr	r1, [pc, #488]	; (b600 <role_disable+0x270>)
    b418:	487a      	ldr	r0, [pc, #488]	; (b604 <role_disable+0x274>)
    b41a:	f7f6 f831 	bl	1480 <printk>
    b41e:	4040      	eors	r0, r0
    b420:	f380 8811 	msr	BASEPRI, r0
    b424:	f04f 0004 	mov.w	r0, #4
    b428:	df02      	svc	2
		}
		break;
	}

	LL_ASSERT(!_radio.ticker_id_stop);
    b42a:	4c6f      	ldr	r4, [pc, #444]	; (b5e8 <role_disable+0x258>)
    b42c:	7ba3      	ldrb	r3, [r4, #14]
    b42e:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    b432:	b143      	cbz	r3, b446 <role_disable+0xb6>
    b434:	4b6e      	ldr	r3, [pc, #440]	; (b5f0 <role_disable+0x260>)
    b436:	9301      	str	r3, [sp, #4]
    b438:	4b6e      	ldr	r3, [pc, #440]	; (b5f4 <role_disable+0x264>)
    b43a:	9300      	str	r3, [sp, #0]
    b43c:	4a6f      	ldr	r2, [pc, #444]	; (b5fc <role_disable+0x26c>)
    b43e:	4b6e      	ldr	r3, [pc, #440]	; (b5f8 <role_disable+0x268>)
    b440:	496f      	ldr	r1, [pc, #444]	; (b600 <role_disable+0x270>)
    b442:	4871      	ldr	r0, [pc, #452]	; (b608 <role_disable+0x278>)
    b444:	e7e9      	b.n	b41a <role_disable+0x8a>
	_radio.ticker_id_stop = ticker_id_primary;

	/* Step 1: Is Primary started? Stop the Primary ticker */
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    b446:	ab02      	add	r3, sp, #8
    b448:	9300      	str	r3, [sp, #0]
    b44a:	462a      	mov	r2, r5
    b44c:	4b67      	ldr	r3, [pc, #412]	; (b5ec <role_disable+0x25c>)
		}
		break;
	}

	LL_ASSERT(!_radio.ticker_id_stop);
	_radio.ticker_id_stop = ticker_id_primary;
    b44e:	73a5      	strb	r5, [r4, #14]

	/* Step 1: Is Primary started? Stop the Primary ticker */
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    b450:	2103      	movs	r1, #3
    b452:	f7ff fd2f 	bl	aeb4 <ticker_stop>
			  RADIO_TICKER_USER_ID_APP, ticker_id_primary,
			  ticker_if_done, (void *)&ret_cb);

	if (ret == TICKER_STATUS_BUSY) {
    b456:	2802      	cmp	r0, #2
    b458:	d004      	beq.n	b464 <role_disable+0xd4>
		while (ret_cb == TICKER_STATUS_BUSY) {
			cpu_sleep();
		}
	}

	if (ret_cb != TICKER_STATUS_SUCCESS) {
    b45a:	9b02      	ldr	r3, [sp, #8]
    b45c:	2b00      	cmp	r3, #0
    b45e:	f040 80ba 	bne.w	b5d6 <role_disable+0x246>
    b462:	e00d      	b.n	b480 <role_disable+0xf0>
			  RADIO_TICKER_USER_ID_APP, ticker_id_primary,
			  ticker_if_done, (void *)&ret_cb);

	if (ret == TICKER_STATUS_BUSY) {
		/* if inside our event, enable Job. */
		if (_radio.ticker_id_event == ticker_id_primary) {
    b464:	7b63      	ldrb	r3, [r4, #13]
    b466:	429d      	cmp	r5, r3
    b468:	d104      	bne.n	b474 <role_disable+0xe4>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
    b46a:	2201      	movs	r2, #1
    b46c:	4611      	mov	r1, r2
    b46e:	2003      	movs	r0, #3
    b470:	f7fe f8c6 	bl	9600 <mayfly_enable>
				      RADIO_TICKER_USER_ID_JOB, 1);
		}

		/* wait for ticker to be stopped */
		while (ret_cb == TICKER_STATUS_BUSY) {
    b474:	9b02      	ldr	r3, [sp, #8]
    b476:	2b02      	cmp	r3, #2
    b478:	d1ef      	bne.n	b45a <role_disable+0xca>
			cpu_sleep();
    b47a:	f7ff fdfd 	bl	b078 <cpu_sleep>
    b47e:	e7f9      	b.n	b474 <role_disable+0xe4>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
		goto role_disable_cleanup;
	}

	/* Inside our event, gracefully handle XTAL and Radio actives */
	if ((_radio.ticker_id_prepare == ticker_id_primary)
    b480:	7b23      	ldrb	r3, [r4, #12]
    b482:	429d      	cmp	r5, r3
    b484:	d004      	beq.n	b490 <role_disable+0x100>
	    || (_radio.ticker_id_event == ticker_id_primary)) {
    b486:	4b58      	ldr	r3, [pc, #352]	; (b5e8 <role_disable+0x258>)
    b488:	7b5b      	ldrb	r3, [r3, #13]
    b48a:	429d      	cmp	r5, r3
    b48c:	f040 809f 	bne.w	b5ce <role_disable+0x23e>
				       u32_t ticks_active_to_start)
{
	static void *s_link[2];
	static struct mayfly s_mfy_radio_inactive = {0, 0, s_link, NULL,
		mayfly_radio_inactive};
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    b490:	ab06      	add	r3, sp, #24
    b492:	2202      	movs	r2, #2
    b494:	f843 2d0c 	str.w	r2, [r3, #-12]!
	u32_t ret;

	/* Step 2: Is caller before Event? Stop Event */
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    b498:	2200      	movs	r2, #0
    b49a:	9300      	str	r3, [sp, #0]
    b49c:	2103      	movs	r1, #3
    b49e:	4b53      	ldr	r3, [pc, #332]	; (b5ec <role_disable+0x25c>)
    b4a0:	4610      	mov	r0, r2
    b4a2:	f7ff fd07 	bl	aeb4 <ticker_stop>
			  RADIO_TICKER_USER_ID_APP, RADIO_TICKER_ID_EVENT,
			  ticker_if_done, (void *)&ret_cb);

	if (ret == TICKER_STATUS_BUSY) {
    b4a6:	2802      	cmp	r0, #2
    b4a8:	d107      	bne.n	b4ba <role_disable+0x12a>
		mayfly_enable(RADIO_TICKER_USER_ID_APP,
    b4aa:	2201      	movs	r2, #1
    b4ac:	4611      	mov	r1, r2
    b4ae:	2003      	movs	r0, #3
    b4b0:	f7fe f8a6 	bl	9600 <mayfly_enable>
			      RADIO_TICKER_USER_ID_JOB, 1);

		LL_ASSERT(ret_cb != TICKER_STATUS_BUSY);
    b4b4:	9b03      	ldr	r3, [sp, #12]
    b4b6:	2b02      	cmp	r3, #2
    b4b8:	d053      	beq.n	b562 <role_disable+0x1d2>
	}

	if (ret_cb == TICKER_STATUS_SUCCESS) {
    b4ba:	9803      	ldr	r0, [sp, #12]
    b4bc:	2202      	movs	r2, #2
    b4be:	2800      	cmp	r0, #0
    b4c0:	d138      	bne.n	b534 <role_disable+0x1a4>
		static void *s_link[2];
		static struct mayfly s_mfy_xtal_stop = {0, 0, s_link, NULL,
			mayfly_xtal_stop};
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    b4c2:	9204      	str	r2, [sp, #16]
		u32_t ret;

		/* Reset the stored ticker id in prepare phase. */
		LL_ASSERT(_radio.ticker_id_prepare);
    b4c4:	7b23      	ldrb	r3, [r4, #12]
    b4c6:	b943      	cbnz	r3, b4da <role_disable+0x14a>
    b4c8:	4b49      	ldr	r3, [pc, #292]	; (b5f0 <role_disable+0x260>)
    b4ca:	9301      	str	r3, [sp, #4]
    b4cc:	4b49      	ldr	r3, [pc, #292]	; (b5f4 <role_disable+0x264>)
    b4ce:	9300      	str	r3, [sp, #0]
    b4d0:	4a4a      	ldr	r2, [pc, #296]	; (b5fc <role_disable+0x26c>)
    b4d2:	4b4e      	ldr	r3, [pc, #312]	; (b60c <role_disable+0x27c>)
    b4d4:	494a      	ldr	r1, [pc, #296]	; (b600 <role_disable+0x270>)
    b4d6:	484e      	ldr	r0, [pc, #312]	; (b610 <role_disable+0x280>)
    b4d8:	e79f      	b.n	b41a <role_disable+0x8a>
		_radio.ticker_id_prepare = 0;
    b4da:	4b43      	ldr	r3, [pc, #268]	; (b5e8 <role_disable+0x258>)
    b4dc:	7318      	strb	r0, [r3, #12]

		/* Step 2.1: Is caller between Primary and Marker0?
		 * Stop the Marker0 event
		 */
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    b4de:	ab04      	add	r3, sp, #16
    b4e0:	9300      	str	r3, [sp, #0]
    b4e2:	2201      	movs	r2, #1
    b4e4:	4b41      	ldr	r3, [pc, #260]	; (b5ec <role_disable+0x25c>)
    b4e6:	2103      	movs	r1, #3
    b4e8:	f7ff fce4 	bl	aeb4 <ticker_stop>
				  RADIO_TICKER_USER_ID_APP,
				  RADIO_TICKER_ID_MARKER_0,
				  ticker_if_done, (void *)&ret_cb);

		if (ret == TICKER_STATUS_BUSY) {
    b4ec:	2802      	cmp	r0, #2
    b4ee:	d107      	bne.n	b500 <role_disable+0x170>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
    b4f0:	2201      	movs	r2, #1
    b4f2:	4611      	mov	r1, r2
    b4f4:	2003      	movs	r0, #3
    b4f6:	f7fe f883 	bl	9600 <mayfly_enable>
				      RADIO_TICKER_USER_ID_JOB, 1);

			LL_ASSERT(ret_cb != TICKER_STATUS_BUSY);
    b4fa:	9b04      	ldr	r3, [sp, #16]
    b4fc:	2b02      	cmp	r3, #2
    b4fe:	d030      	beq.n	b562 <role_disable+0x1d2>
		}

		if (ret_cb == TICKER_STATUS_SUCCESS) {
    b500:	9a04      	ldr	r2, [sp, #16]
    b502:	b91a      	cbnz	r2, b50c <role_disable+0x17c>
			/* Step 2.1.1: Check and deassert Radio Active or XTAL
			 * start
			 */
			if (ticks_active_to_start > ticks_xtal_to_start) {
    b504:	42b7      	cmp	r7, r6
    b506:	d90d      	bls.n	b524 <role_disable+0x194>
				u32_t retval;

				/* radio active asserted, handle deasserting
				 * here
				 */
				retval = mayfly_enqueue(
    b508:	4b42      	ldr	r3, [pc, #264]	; (b614 <role_disable+0x284>)
    b50a:	e00c      	b.n	b526 <role_disable+0x196>
						RADIO_TICKER_USER_ID_APP,
						RADIO_TICKER_USER_ID_WORKER, 0,
						&s_mfy_xtal_stop);
				LL_ASSERT(!retval);
			}
		} else if (ret_cb == TICKER_STATUS_FAILURE) {
    b50c:	9b04      	ldr	r3, [sp, #16]
    b50e:	2b01      	cmp	r3, #1
    b510:	d157      	bne.n	b5c2 <role_disable+0x232>
			u32_t retval;

			/* Step 2.1.2: Deassert Radio Active and XTAL start */

			/* radio active asserted, handle deasserting here */
			retval = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    b512:	2200      	movs	r2, #0
    b514:	4611      	mov	r1, r2
    b516:	4b3f      	ldr	r3, [pc, #252]	; (b614 <role_disable+0x284>)
    b518:	2003      	movs	r0, #3
    b51a:	f7fe f899 	bl	9650 <mayfly_enqueue>
						RADIO_TICKER_USER_ID_WORKER, 0,
						&s_mfy_radio_inactive);
			LL_ASSERT(!retval);
    b51e:	4602      	mov	r2, r0
    b520:	2800      	cmp	r0, #0
    b522:	d140      	bne.n	b5a6 <role_disable+0x216>

			/* XTAL started, handle XTAL stop here */
			retval = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    b524:	4b3c      	ldr	r3, [pc, #240]	; (b618 <role_disable+0x288>)
    b526:	4611      	mov	r1, r2
    b528:	2003      	movs	r0, #3
    b52a:	f7fe f891 	bl	9650 <mayfly_enqueue>
						RADIO_TICKER_USER_ID_WORKER, 0,
						&s_mfy_xtal_stop);
			LL_ASSERT(!retval);
    b52e:	2800      	cmp	r0, #0
    b530:	d04d      	beq.n	b5ce <role_disable+0x23e>
    b532:	e038      	b.n	b5a6 <role_disable+0x216>
		} else {
			LL_ASSERT(0);
		}
	} else if (ret_cb == TICKER_STATUS_FAILURE) {
    b534:	9d03      	ldr	r5, [sp, #12]
    b536:	2d01      	cmp	r5, #1
    b538:	d143      	bne.n	b5c2 <role_disable+0x232>
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    b53a:	ab06      	add	r3, sp, #24
		 * (role dependent)
		 */
		/* Stop ticker "may" be in use for direct adv or scanner,
		 * hence stop may fail if ticker not used.
		 */
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    b53c:	2103      	movs	r1, #3
			LL_ASSERT(!retval);
		} else {
			LL_ASSERT(0);
		}
	} else if (ret_cb == TICKER_STATUS_FAILURE) {
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    b53e:	f843 2d04 	str.w	r2, [r3, #-4]!
		 * (role dependent)
		 */
		/* Stop ticker "may" be in use for direct adv or scanner,
		 * hence stop may fail if ticker not used.
		 */
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    b542:	2000      	movs	r0, #0
    b544:	9300      	str	r3, [sp, #0]
    b546:	4642      	mov	r2, r8
    b548:	4b28      	ldr	r3, [pc, #160]	; (b5ec <role_disable+0x25c>)
    b54a:	f7ff fcb3 	bl	aeb4 <ticker_stop>
				  RADIO_TICKER_USER_ID_APP, ticker_id_stop,
				  ticker_if_done, (void *)&ret_cb);

		if (ret == TICKER_STATUS_BUSY) {
    b54e:	2802      	cmp	r0, #2
    b550:	d110      	bne.n	b574 <role_disable+0x1e4>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
    b552:	462a      	mov	r2, r5
    b554:	4629      	mov	r1, r5
    b556:	2003      	movs	r0, #3
    b558:	f7fe f852 	bl	9600 <mayfly_enable>
				      RADIO_TICKER_USER_ID_JOB, 1);

			LL_ASSERT(ret_cb != TICKER_STATUS_BUSY);
    b55c:	9b05      	ldr	r3, [sp, #20]
    b55e:	2b02      	cmp	r3, #2
    b560:	d108      	bne.n	b574 <role_disable+0x1e4>
    b562:	4b23      	ldr	r3, [pc, #140]	; (b5f0 <role_disable+0x260>)
    b564:	9301      	str	r3, [sp, #4]
    b566:	4b23      	ldr	r3, [pc, #140]	; (b5f4 <role_disable+0x264>)
    b568:	9300      	str	r3, [sp, #0]
    b56a:	4a24      	ldr	r2, [pc, #144]	; (b5fc <role_disable+0x26c>)
    b56c:	4b27      	ldr	r3, [pc, #156]	; (b60c <role_disable+0x27c>)
    b56e:	4924      	ldr	r1, [pc, #144]	; (b600 <role_disable+0x270>)
    b570:	482a      	ldr	r0, [pc, #168]	; (b61c <role_disable+0x28c>)
    b572:	e752      	b.n	b41a <role_disable+0x8a>
		}

		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
    b574:	9b05      	ldr	r3, [sp, #20]
    b576:	b15b      	cbz	r3, b590 <role_disable+0x200>
    b578:	9b05      	ldr	r3, [sp, #20]
    b57a:	2b01      	cmp	r3, #1
    b57c:	d008      	beq.n	b590 <role_disable+0x200>
    b57e:	4b1c      	ldr	r3, [pc, #112]	; (b5f0 <role_disable+0x260>)
    b580:	9301      	str	r3, [sp, #4]
    b582:	4b1c      	ldr	r3, [pc, #112]	; (b5f4 <role_disable+0x264>)
    b584:	9300      	str	r3, [sp, #0]
    b586:	4b21      	ldr	r3, [pc, #132]	; (b60c <role_disable+0x27c>)
    b588:	4a1c      	ldr	r2, [pc, #112]	; (b5fc <role_disable+0x26c>)
    b58a:	491d      	ldr	r1, [pc, #116]	; (b600 <role_disable+0x270>)
    b58c:	4824      	ldr	r0, [pc, #144]	; (b620 <role_disable+0x290>)
    b58e:	e744      	b.n	b41a <role_disable+0x8a>
			  (ret_cb == TICKER_STATUS_FAILURE));

		if (_radio.role != ROLE_NONE) {
    b590:	7be3      	ldrb	r3, [r4, #15]
    b592:	b1e3      	cbz	r3, b5ce <role_disable+0x23e>
			static struct mayfly s_mfy_radio_stop = {0, 0, s_link,
				NULL, mayfly_radio_stop};
			u32_t retval;

			/* Radio state STOP is supplied in params */
			s_mfy_radio_stop.param = (void *)STATE_STOP;
    b594:	4b23      	ldr	r3, [pc, #140]	; (b624 <role_disable+0x294>)
    b596:	2204      	movs	r2, #4
    b598:	609a      	str	r2, [r3, #8]

			/* Stop Radio Tx/Rx */
			retval = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    b59a:	2200      	movs	r2, #0
    b59c:	4611      	mov	r1, r2
    b59e:	2003      	movs	r0, #3
    b5a0:	f7fe f856 	bl	9650 <mayfly_enqueue>
						RADIO_TICKER_USER_ID_WORKER, 0,
						&s_mfy_radio_stop);
			LL_ASSERT(!retval);
    b5a4:	b140      	cbz	r0, b5b8 <role_disable+0x228>
    b5a6:	4b12      	ldr	r3, [pc, #72]	; (b5f0 <role_disable+0x260>)
    b5a8:	9301      	str	r3, [sp, #4]
    b5aa:	4b12      	ldr	r3, [pc, #72]	; (b5f4 <role_disable+0x264>)
    b5ac:	9300      	str	r3, [sp, #0]
    b5ae:	4a13      	ldr	r2, [pc, #76]	; (b5fc <role_disable+0x26c>)
    b5b0:	4b16      	ldr	r3, [pc, #88]	; (b60c <role_disable+0x27c>)
    b5b2:	4913      	ldr	r1, [pc, #76]	; (b600 <role_disable+0x270>)
    b5b4:	481c      	ldr	r0, [pc, #112]	; (b628 <role_disable+0x298>)
    b5b6:	e730      	b.n	b41a <role_disable+0x8a>

			/* wait for radio ISR to exit */
			while (_radio.role != ROLE_NONE) {
    b5b8:	7be3      	ldrb	r3, [r4, #15]
    b5ba:	b143      	cbz	r3, b5ce <role_disable+0x23e>
				cpu_sleep();
    b5bc:	f7ff fd5c 	bl	b078 <cpu_sleep>
    b5c0:	e7fa      	b.n	b5b8 <role_disable+0x228>
			}
		}
	} else {
		LL_ASSERT(0);
    b5c2:	4b0b      	ldr	r3, [pc, #44]	; (b5f0 <role_disable+0x260>)
    b5c4:	9301      	str	r3, [sp, #4]
    b5c6:	4b0b      	ldr	r3, [pc, #44]	; (b5f4 <role_disable+0x264>)
    b5c8:	9300      	str	r3, [sp, #0]
    b5ca:	4b10      	ldr	r3, [pc, #64]	; (b60c <role_disable+0x27c>)
    b5cc:	e722      	b.n	b414 <role_disable+0x84>

		role_active_disable(ticker_id_stop,
				    ticks_xtal_to_start, ticks_active_to_start);
	}

	if (!_radio.ticker_id_stop) {
    b5ce:	7ba3      	ldrb	r3, [r4, #14]
    b5d0:	b90b      	cbnz	r3, b5d6 <role_disable+0x246>
		ret_cb = TICKER_STATUS_FAILURE;
    b5d2:	2301      	movs	r3, #1
    b5d4:	9302      	str	r3, [sp, #8]
	}

role_disable_cleanup:
	_radio.ticker_id_stop = 0;
    b5d6:	2300      	movs	r3, #0
    b5d8:	73a3      	strb	r3, [r4, #14]

	return ret_cb;
    b5da:	9802      	ldr	r0, [sp, #8]
    b5dc:	e000      	b.n	b5e0 <role_disable+0x250>

			conn_handle = ticker_id_primary -
				      RADIO_TICKER_ID_FIRST_CONNECTION;
			conn = connection_get(conn_handle);
			if (!conn) {
				return 1;
    b5de:	2001      	movs	r0, #1

role_disable_cleanup:
	_radio.ticker_id_stop = 0;

	return ret_cb;
}
    b5e0:	b006      	add	sp, #24
    b5e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b5e6:	bf00      	nop
    b5e8:	20001470 	.word	0x20001470
    b5ec:	0000b081 	.word	0x0000b081
    b5f0:	00013df4 	.word	0x00013df4
    b5f4:	00013df9 	.word	0x00013df9
    b5f8:	000168d5 	.word	0x000168d5
    b5fc:	00013db4 	.word	0x00013db4
    b600:	00013dbb 	.word	0x00013dbb
    b604:	00014409 	.word	0x00014409
    b608:	000152a9 	.word	0x000152a9
    b60c:	0001686e 	.word	0x0001686e
    b610:	0001530e 	.word	0x0001530e
    b614:	20000628 	.word	0x20000628
    b618:	20000618 	.word	0x20000618
    b61c:	000152e1 	.word	0x000152e1
    b620:	00015269 	.word	0x00015269
    b624:	200005f8 	.word	0x200005f8
    b628:	00015348 	.word	0x00015348

0000b62c <mayfly_xtal_retain>:
	DEBUG_RADIO_CLOSE(0);
}

#if defined(CONFIG_BLUETOOTH_CONTROLLER_XTAL_ADVANCED)
static void mayfly_xtal_retain(u8_t caller_id, u8_t retain)
{
    b62c:	b513      	push	{r0, r1, r4, lr}
    b62e:	4b1f      	ldr	r3, [pc, #124]	; (b6ac <mayfly_xtal_retain+0x80>)
    b630:	4604      	mov	r4, r0
	static u8_t s_xtal_retained;

	if (retain) {
		if (!s_xtal_retained) {
    b632:	781a      	ldrb	r2, [r3, #0]
#if defined(CONFIG_BLUETOOTH_CONTROLLER_XTAL_ADVANCED)
static void mayfly_xtal_retain(u8_t caller_id, u8_t retain)
{
	static u8_t s_xtal_retained;

	if (retain) {
    b634:	b311      	cbz	r1, b67c <mayfly_xtal_retain+0x50>
		if (!s_xtal_retained) {
    b636:	2a00      	cmp	r2, #0
    b638:	d135      	bne.n	b6a6 <mayfly_xtal_retain+0x7a>
			static struct mayfly s_mfy_xtal_start = {0, 0, s_link,
				NULL, mayfly_xtal_start};
			u32_t retval;

			/* Only user id job will try to retain the XTAL. */
			LL_ASSERT(caller_id == RADIO_TICKER_USER_ID_JOB);
    b63a:	2801      	cmp	r0, #1
    b63c:	d008      	beq.n	b650 <mayfly_xtal_retain+0x24>
    b63e:	4b1c      	ldr	r3, [pc, #112]	; (b6b0 <mayfly_xtal_retain+0x84>)
    b640:	9301      	str	r3, [sp, #4]
    b642:	4b1c      	ldr	r3, [pc, #112]	; (b6b4 <mayfly_xtal_retain+0x88>)
    b644:	9300      	str	r3, [sp, #0]
    b646:	4a1c      	ldr	r2, [pc, #112]	; (b6b8 <mayfly_xtal_retain+0x8c>)
    b648:	4b1c      	ldr	r3, [pc, #112]	; (b6bc <mayfly_xtal_retain+0x90>)
    b64a:	491d      	ldr	r1, [pc, #116]	; (b6c0 <mayfly_xtal_retain+0x94>)
    b64c:	481d      	ldr	r0, [pc, #116]	; (b6c4 <mayfly_xtal_retain+0x98>)
    b64e:	e00d      	b.n	b66c <mayfly_xtal_retain+0x40>

			s_xtal_retained = 1;
    b650:	7018      	strb	r0, [r3, #0]

			retval = mayfly_enqueue(caller_id,
    b652:	4b1d      	ldr	r3, [pc, #116]	; (b6c8 <mayfly_xtal_retain+0x9c>)
    b654:	4611      	mov	r1, r2
    b656:	f7fd fffb 	bl	9650 <mayfly_enqueue>
						RADIO_TICKER_USER_ID_WORKER, 0,
						&s_mfy_xtal_start);
			LL_ASSERT(!retval);
    b65a:	b320      	cbz	r0, b6a6 <mayfly_xtal_retain+0x7a>
    b65c:	4b14      	ldr	r3, [pc, #80]	; (b6b0 <mayfly_xtal_retain+0x84>)
    b65e:	9301      	str	r3, [sp, #4]
    b660:	4b14      	ldr	r3, [pc, #80]	; (b6b4 <mayfly_xtal_retain+0x88>)
    b662:	9300      	str	r3, [sp, #0]
    b664:	4a14      	ldr	r2, [pc, #80]	; (b6b8 <mayfly_xtal_retain+0x8c>)
    b666:	4b15      	ldr	r3, [pc, #84]	; (b6bc <mayfly_xtal_retain+0x90>)
    b668:	4915      	ldr	r1, [pc, #84]	; (b6c0 <mayfly_xtal_retain+0x94>)
    b66a:	4818      	ldr	r0, [pc, #96]	; (b6cc <mayfly_xtal_retain+0xa0>)
    b66c:	f7f5 ff08 	bl	1480 <printk>
    b670:	4040      	eors	r0, r0
    b672:	f380 8811 	msr	BASEPRI, r0
    b676:	f04f 0004 	mov.w	r0, #4
    b67a:	df02      	svc	2
		}
	} else {
		if (s_xtal_retained) {
    b67c:	b19a      	cbz	r2, b6a6 <mayfly_xtal_retain+0x7a>
				{0, 0, s_link[1], NULL, mayfly_xtal_stop}
			};
			struct mayfly *p_mfy_xtal_stop = NULL;
			u32_t retval;

			s_xtal_retained = 0;
    b67e:	7019      	strb	r1, [r3, #0]

			switch (caller_id) {
    b680:	b160      	cbz	r0, b69c <mayfly_xtal_retain+0x70>
    b682:	2801      	cmp	r0, #1
    b684:	d101      	bne.n	b68a <mayfly_xtal_retain+0x5e>
			case RADIO_TICKER_USER_ID_WORKER:
				p_mfy_xtal_stop = &s_mfy_xtal_stop[0];
				break;

			case RADIO_TICKER_USER_ID_JOB:
				p_mfy_xtal_stop = &s_mfy_xtal_stop[1];
    b686:	4b12      	ldr	r3, [pc, #72]	; (b6d0 <mayfly_xtal_retain+0xa4>)
    b688:	e009      	b.n	b69e <mayfly_xtal_retain+0x72>
				break;

			default:
				LL_ASSERT(0);
    b68a:	4b09      	ldr	r3, [pc, #36]	; (b6b0 <mayfly_xtal_retain+0x84>)
    b68c:	9301      	str	r3, [sp, #4]
    b68e:	4b09      	ldr	r3, [pc, #36]	; (b6b4 <mayfly_xtal_retain+0x88>)
    b690:	9300      	str	r3, [sp, #0]
    b692:	4a09      	ldr	r2, [pc, #36]	; (b6b8 <mayfly_xtal_retain+0x8c>)
    b694:	4b09      	ldr	r3, [pc, #36]	; (b6bc <mayfly_xtal_retain+0x90>)
    b696:	490a      	ldr	r1, [pc, #40]	; (b6c0 <mayfly_xtal_retain+0x94>)
    b698:	480e      	ldr	r0, [pc, #56]	; (b6d4 <mayfly_xtal_retain+0xa8>)
    b69a:	e7e7      	b.n	b66c <mayfly_xtal_retain+0x40>

			s_xtal_retained = 0;

			switch (caller_id) {
			case RADIO_TICKER_USER_ID_WORKER:
				p_mfy_xtal_stop = &s_mfy_xtal_stop[0];
    b69c:	4b0e      	ldr	r3, [pc, #56]	; (b6d8 <mayfly_xtal_retain+0xac>)
			default:
				LL_ASSERT(0);
				break;
			}

			retval = mayfly_enqueue(caller_id,
    b69e:	2200      	movs	r2, #0
    b6a0:	4611      	mov	r1, r2
    b6a2:	4620      	mov	r0, r4
    b6a4:	e7d7      	b.n	b656 <mayfly_xtal_retain+0x2a>
						RADIO_TICKER_USER_ID_WORKER, 0,
						p_mfy_xtal_stop);
			LL_ASSERT(!retval);
		}
	}
}
    b6a6:	b002      	add	sp, #8
    b6a8:	bd10      	pop	{r4, pc}
    b6aa:	bf00      	nop
    b6ac:	2000144c 	.word	0x2000144c
    b6b0:	00013df4 	.word	0x00013df4
    b6b4:	00013df9 	.word	0x00013df9
    b6b8:	00013db4 	.word	0x00013db4
    b6bc:	000167eb 	.word	0x000167eb
    b6c0:	00013dbb 	.word	0x00013dbb
    b6c4:	00015371 	.word	0x00015371
    b6c8:	200005e8 	.word	0x200005e8
    b6cc:	00015348 	.word	0x00015348
    b6d0:	20000668 	.word	0x20000668
    b6d4:	00014409 	.word	0x00014409
    b6d8:	20000658 	.word	0x20000658

0000b6dc <rx_packet_set>:

	DEBUG_RADIO_START_M(0);
}

static void rx_packet_set(struct connection *conn, struct pdu_data *pdu_data_rx)
{
    b6dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#else /* !CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */
	max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
	phy = conn->phy_rx;
    b6de:	f890 4033 	ldrb.w	r4, [r0, #51]	; 0x33
{
	u16_t max_rx_octets;
	u8_t phy;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
	max_rx_octets = conn->max_rx_octets;
    b6e2:	8e05      	ldrh	r5, [r0, #48]	; 0x30

	DEBUG_RADIO_START_M(0);
}

static void rx_packet_set(struct connection *conn, struct pdu_data *pdu_data_rx)
{
    b6e4:	4606      	mov	r6, r0
#else /* !CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */
	max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
	phy = conn->phy_rx;
    b6e6:	f3c4 04c2 	ubfx	r4, r4, #3, #3

	DEBUG_RADIO_START_M(0);
}

static void rx_packet_set(struct connection *conn, struct pdu_data *pdu_data_rx)
{
    b6ea:	460f      	mov	r7, r1
	phy = conn->phy_rx;
#else /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */
	phy = 0;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */

	radio_phy_set(phy, 0);
    b6ec:	4620      	mov	r0, r4
    b6ee:	2100      	movs	r1, #0
    b6f0:	f7fe fa00 	bl	9af4 <radio_phy_set>

	if (conn->enc_rx) {
    b6f4:	f896 30c0 	ldrb.w	r3, [r6, #192]	; 0xc0
    b6f8:	f013 0f10 	tst.w	r3, #16
    b6fc:	ea4f 0244 	mov.w	r2, r4, lsl #1
    b700:	d00c      	beq.n	b71c <rx_packet_set+0x40>
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
    b702:	1d29      	adds	r1, r5, #4
    b704:	f042 0201 	orr.w	r2, r2, #1
    b708:	b2c9      	uxtb	r1, r1
    b70a:	2008      	movs	r0, #8
    b70c:	f7fe fa26 	bl	9b5c <radio_pkt_configure>

		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&conn->ccm_rx,
    b710:	4639      	mov	r1, r7
    b712:	f106 00c1 	add.w	r0, r6, #193	; 0xc1
    b716:	f7fe fc11 	bl	9f3c <radio_ccm_rx_pkt_set>
    b71a:	e006      	b.n	b72a <rx_packet_set+0x4e>
						      pdu_data_rx));
	} else {
		radio_pkt_configure(8, max_rx_octets, (phy << 1) | 0x01);
    b71c:	2008      	movs	r0, #8
    b71e:	f042 0201 	orr.w	r2, r2, #1
    b722:	b2e9      	uxtb	r1, r5
    b724:	f7fe fa1a 	bl	9b5c <radio_pkt_configure>

		radio_pkt_rx_set(pdu_data_rx);
    b728:	4638      	mov	r0, r7
	}
}
    b72a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&conn->ccm_rx,
						      pdu_data_rx));
	} else {
		radio_pkt_configure(8, max_rx_octets, (phy << 1) | 0x01);

		radio_pkt_rx_set(pdu_data_rx);
    b72e:	f7fe ba39 	b.w	9ba4 <radio_pkt_rx_set>
	...

0000b734 <prepare_pdu_data_tx>:
	}
}

static void prepare_pdu_data_tx(struct connection *conn,
				struct pdu_data **pdu_data_tx)
{
    b734:	b570      	push	{r4, r5, r6, lr}
	struct pdu_data *_pdu_data_tx;

	/*@FIXME: assign before checking first 3 conditions */
	_pdu_data_tx = (struct pdu_data *)conn->pkt_tx_head->pdu_data;

	if ((conn->empty != 0) || /* empty packet */
    b736:	f890 30c0 	ldrb.w	r3, [r0, #192]	; 0xc0
	}
}

static void prepare_pdu_data_tx(struct connection *conn,
				struct pdu_data **pdu_data_tx)
{
    b73a:	4604      	mov	r4, r0
	struct pdu_data *_pdu_data_tx;

	/*@FIXME: assign before checking first 3 conditions */
	_pdu_data_tx = (struct pdu_data *)conn->pkt_tx_head->pdu_data;

	if ((conn->empty != 0) || /* empty packet */
    b73c:	0618      	lsls	r0, r3, #24
	}
}

static void prepare_pdu_data_tx(struct connection *conn,
				struct pdu_data **pdu_data_tx)
{
    b73e:	460e      	mov	r6, r1
	struct pdu_data *_pdu_data_tx;

	/*@FIXME: assign before checking first 3 conditions */
	_pdu_data_tx = (struct pdu_data *)conn->pkt_tx_head->pdu_data;

	if ((conn->empty != 0) || /* empty packet */
    b740:	d430      	bmi.n	b7a4 <prepare_pdu_data_tx+0x70>
				struct pdu_data **pdu_data_tx)
{
	struct pdu_data *_pdu_data_tx;

	/*@FIXME: assign before checking first 3 conditions */
	_pdu_data_tx = (struct pdu_data *)conn->pkt_tx_head->pdu_data;
    b742:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104

	if ((conn->empty != 0) || /* empty packet */
    b746:	b368      	cbz	r0, b7a4 <prepare_pdu_data_tx+0x70>
	   /* no ctrl or data packet */
	   (conn->pkt_tx_head == 0) ||
    b748:	0719      	lsls	r1, r3, #28
				struct pdu_data **pdu_data_tx)
{
	struct pdu_data *_pdu_data_tx;

	/*@FIXME: assign before checking first 3 conditions */
	_pdu_data_tx = (struct pdu_data *)conn->pkt_tx_head->pdu_data;
    b74a:	f100 0204 	add.w	r2, r0, #4

	if ((conn->empty != 0) || /* empty packet */
	   /* no ctrl or data packet */
	   (conn->pkt_tx_head == 0) ||
    b74e:	d543      	bpl.n	b7d8 <prepare_pdu_data_tx+0xa4>
	   /* data tx paused, only control packets allowed */
	   ((conn->pause_tx) && (_pdu_data_tx != 0) &&
    b750:	7941      	ldrb	r1, [r0, #5]
    b752:	2900      	cmp	r1, #0
    b754:	d040      	beq.n	b7d8 <prepare_pdu_data_tx+0xa4>
	    (_pdu_data_tx->len != 0) &&
    b756:	7901      	ldrb	r1, [r0, #4]
    b758:	f001 0103 	and.w	r1, r1, #3
    b75c:	2903      	cmp	r1, #3
    b75e:	d121      	bne.n	b7a4 <prepare_pdu_data_tx+0x70>
	    ((_pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    b760:	f894 1044 	ldrb.w	r1, [r4, #68]	; 0x44
    b764:	f011 0f01 	tst.w	r1, #1
    b768:	f003 0140 	and.w	r1, r3, #64	; 0x40
    b76c:	79c3      	ldrb	r3, [r0, #7]
    b76e:	d10b      	bne.n	b788 <prepare_pdu_data_tx+0x54>
	     ((conn->role.master.role == 0) &&
    b770:	b909      	cbnz	r1, b776 <prepare_pdu_data_tx+0x42>
	      (((conn->refresh == 0) &&
    b772:	2b02      	cmp	r3, #2
    b774:	e003      	b.n	b77e <prepare_pdu_data_tx+0x4a>
		(_pdu_data_tx->payload.llctrl.opcode !=
		 PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_START_ENC_RSP) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_REJECT_IND) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
	       ((conn->refresh != 0) &&
    b776:	1e99      	subs	r1, r3, #2
    b778:	2901      	cmp	r1, #1
    b77a:	d92d      	bls.n	b7d8 <prepare_pdu_data_tx+0xa4>
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
    b77c:	2b0b      	cmp	r3, #11
    b77e:	d02b      	beq.n	b7d8 <prepare_pdu_data_tx+0xa4>
	      (((conn->refresh == 0) &&
		(_pdu_data_tx->payload.llctrl.opcode !=
		 PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_START_ENC_RSP) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_REJECT_IND) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    b780:	2b11      	cmp	r3, #17
    b782:	d80f      	bhi.n	b7a4 <prepare_pdu_data_tx+0x70>
    b784:	492d      	ldr	r1, [pc, #180]	; (b83c <prepare_pdu_data_tx+0x108>)
    b786:	e009      	b.n	b79c <prepare_pdu_data_tx+0x68>
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_START_ENC_RSP) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_REJECT_IND) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
	     ((conn->role.slave.role != 0) &&
    b788:	b909      	cbnz	r1, b78e <prepare_pdu_data_tx+0x5a>
	      (((conn->refresh == 0) &&
    b78a:	2b02      	cmp	r3, #2
    b78c:	e002      	b.n	b794 <prepare_pdu_data_tx+0x60>
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_START_ENC_REQ) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_START_ENC_RSP) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_REJECT_IND) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
	       ((conn->refresh != 0) &&
    b78e:	2b02      	cmp	r3, #2
    b790:	d022      	beq.n	b7d8 <prepare_pdu_data_tx+0xa4>
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
    b792:	2b04      	cmp	r3, #4
    b794:	d020      	beq.n	b7d8 <prepare_pdu_data_tx+0xa4>
	      (((conn->refresh == 0) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_START_ENC_REQ) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_START_ENC_RSP) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_REJECT_IND) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    b796:	2b11      	cmp	r3, #17
    b798:	d804      	bhi.n	b7a4 <prepare_pdu_data_tx+0x70>
    b79a:	4929      	ldr	r1, [pc, #164]	; (b840 <prepare_pdu_data_tx+0x10c>)
    b79c:	fa21 f303 	lsr.w	r3, r1, r3
    b7a0:	07db      	lsls	r3, r3, #31
    b7a2:	d419      	bmi.n	b7d8 <prepare_pdu_data_tx+0xa4>

static struct pdu_data *empty_tx_enqueue(struct connection *conn)
{
	struct pdu_data *pdu_data_tx;

	conn->empty = 1;
    b7a4:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    b7a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b7ac:	f884 30c0 	strb.w	r3, [r4, #192]	; 0xc0

	pdu_data_tx = (struct pdu_data *)radio_pkt_empty_get();
    b7b0:	f7fe fa6a 	bl	9c88 <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    b7b4:	7803      	ldrb	r3, [r0, #0]
    b7b6:	2201      	movs	r2, #1
    b7b8:	f362 0301 	bfi	r3, r2, #0, #2
    b7bc:	7003      	strb	r3, [r0, #0]
	pdu_data_tx->len = 0;
    b7be:	2300      	movs	r3, #0
    b7c0:	7043      	strb	r3, [r0, #1]
	if (conn->pkt_tx_head) {
    b7c2:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
    b7c6:	7803      	ldrb	r3, [r0, #0]
    b7c8:	b112      	cbz	r2, b7d0 <prepare_pdu_data_tx+0x9c>
		pdu_data_tx->md = 1;
    b7ca:	f043 0310 	orr.w	r3, r3, #16
    b7ce:	e001      	b.n	b7d4 <prepare_pdu_data_tx+0xa0>
	} else {
		pdu_data_tx->md = 0;
    b7d0:	f362 1304 	bfi	r3, r2, #4, #1
    b7d4:	7003      	strb	r3, [r0, #0]
    b7d6:	e029      	b.n	b82c <prepare_pdu_data_tx+0xf8>
	} else {
		u16_t max_tx_octets;

		_pdu_data_tx =
			(struct pdu_data *)(conn->pkt_tx_head->pdu_data +
					    conn->packet_tx_head_offset);
    b7d8:	f894 3115 	ldrb.w	r3, [r4, #277]	; 0x115

		if (!conn->packet_tx_head_len) {
    b7dc:	f894 1114 	ldrb.w	r1, [r4, #276]	; 0x114
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND))))))) {
			_pdu_data_tx = empty_tx_enqueue(conn);
	} else {
		u16_t max_tx_octets;

		_pdu_data_tx =
    b7e0:	18d0      	adds	r0, r2, r3
			(struct pdu_data *)(conn->pkt_tx_head->pdu_data +
					    conn->packet_tx_head_offset);

		if (!conn->packet_tx_head_len) {
    b7e2:	b911      	cbnz	r1, b7ea <prepare_pdu_data_tx+0xb6>
			conn->packet_tx_head_len = _pdu_data_tx->len;
    b7e4:	7841      	ldrb	r1, [r0, #1]
    b7e6:	f884 1114 	strb.w	r1, [r4, #276]	; 0x114
		}

		if (conn->packet_tx_head_offset) {
    b7ea:	b123      	cbz	r3, b7f6 <prepare_pdu_data_tx+0xc2>
			_pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    b7ec:	5cd1      	ldrb	r1, [r2, r3]
    b7ee:	2501      	movs	r5, #1
    b7f0:	f365 0101 	bfi	r1, r5, #0, #2
    b7f4:	54d1      	strb	r1, [r2, r3]
		}

		_pdu_data_tx->len = conn->packet_tx_head_len -
    b7f6:	f894 1114 	ldrb.w	r1, [r4, #276]	; 0x114
    b7fa:	f894 5115 	ldrb.w	r5, [r4, #277]	; 0x115
    b7fe:	1b4d      	subs	r5, r1, r5
    b800:	b2ed      	uxtb	r5, r5
    b802:	7045      	strb	r5, [r0, #1]
		    conn->packet_tx_head_offset;
		_pdu_data_tx->md = 0;
    b804:	5cd1      	ldrb	r1, [r2, r3]
    b806:	f36f 1104 	bfc	r1, #4, #1
    b80a:	54d1      	strb	r1, [r2, r3]

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
		max_tx_octets = conn->max_tx_octets;
    b80c:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
#else /* !CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */
		max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

		if (_pdu_data_tx->len > max_tx_octets) {
    b80e:	42a9      	cmp	r1, r5
			_pdu_data_tx->len = max_tx_octets;
    b810:	bf3f      	itttt	cc
    b812:	7041      	strbcc	r1, [r0, #1]
			_pdu_data_tx->md = 1;
    b814:	5cd1      	ldrbcc	r1, [r2, r3]
    b816:	f041 0110 	orrcc.w	r1, r1, #16
    b81a:	54d1      	strbcc	r1, [r2, r3]
		}

		if (conn->pkt_tx_head->next) {
    b81c:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
    b820:	6809      	ldr	r1, [r1, #0]
    b822:	b119      	cbz	r1, b82c <prepare_pdu_data_tx+0xf8>
			_pdu_data_tx->md = 1;
    b824:	5cd1      	ldrb	r1, [r2, r3]
    b826:	f041 0110 	orr.w	r1, r1, #16
    b82a:	54d1      	strb	r1, [r2, r3]
		}
	}

	_pdu_data_tx->rfu = 0;
    b82c:	7803      	ldrb	r3, [r0, #0]
    b82e:	f36f 1347 	bfc	r3, #5, #3
    b832:	7003      	strb	r3, [r0, #0]

#if !defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH_CLEAR)
	_pdu_data_tx->resv = 0;
    b834:	2300      	movs	r3, #0
    b836:	7083      	strb	r3, [r0, #2]
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH_CLEAR */

	*pdu_data_tx = _pdu_data_tx;
    b838:	6030      	str	r0, [r6, #0]
    b83a:	bd70      	pop	{r4, r5, r6, pc}
    b83c:	00022040 	.word	0x00022040
    b840:	00022060 	.word	0x00022060

0000b844 <tx_packet_set>:
		radio_pkt_rx_set(pdu_data_rx);
	}
}

static void tx_packet_set(struct connection *conn, struct pdu_data *pdu_data_tx)
{
    b844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b846:	460f      	mov	r7, r1
#else /* !CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */
	max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
	phy = conn->phy_tx;
    b848:	f890 1032 	ldrb.w	r1, [r0, #50]	; 0x32
{
	u16_t max_tx_octets;
	u8_t phy, flags;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
	max_tx_octets = conn->max_tx_octets;
    b84c:	8dc5      	ldrh	r5, [r0, #46]	; 0x2e
#else /* !CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */
	max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
	phy = conn->phy_tx;
    b84e:	f3c1 04c2 	ubfx	r4, r1, #3, #3
		radio_pkt_rx_set(pdu_data_rx);
	}
}

static void tx_packet_set(struct connection *conn, struct pdu_data *pdu_data_tx)
{
    b852:	4606      	mov	r6, r0
#else /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */
	phy = 0;
	flags = 0;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */

	radio_phy_set(phy, flags);
    b854:	09c9      	lsrs	r1, r1, #7
    b856:	4620      	mov	r0, r4
    b858:	f7fe f94c 	bl	9af4 <radio_phy_set>

	if (conn->enc_tx) {
    b85c:	f896 30c0 	ldrb.w	r3, [r6, #192]	; 0xc0
    b860:	f013 0f20 	tst.w	r3, #32
    b864:	ea4f 0244 	mov.w	r2, r4, lsl #1
    b868:	d00c      	beq.n	b884 <tx_packet_set+0x40>
		radio_pkt_configure(8, (max_tx_octets + 4), (phy << 1) | 0x01);
    b86a:	1d29      	adds	r1, r5, #4
    b86c:	f042 0201 	orr.w	r2, r2, #1
    b870:	b2c9      	uxtb	r1, r1
    b872:	2008      	movs	r0, #8
    b874:	f7fe f972 	bl	9b5c <radio_pkt_configure>

		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&conn->ccm_tx,
    b878:	4639      	mov	r1, r7
    b87a:	f106 00e2 	add.w	r0, r6, #226	; 0xe2
    b87e:	f7fe fb95 	bl	9fac <radio_ccm_tx_pkt_set>
    b882:	e006      	b.n	b892 <tx_packet_set+0x4e>
						      pdu_data_tx));
	} else {
		radio_pkt_configure(8, max_tx_octets, (phy << 1) | 0x01);
    b884:	2008      	movs	r0, #8
    b886:	f042 0201 	orr.w	r2, r2, #1
    b88a:	b2e9      	uxtb	r1, r5
    b88c:	f7fe f966 	bl	9b5c <radio_pkt_configure>

		radio_pkt_tx_set(pdu_data_tx);
    b890:	4638      	mov	r0, r7
	}
}
    b892:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&conn->ccm_tx,
						      pdu_data_tx));
	} else {
		radio_pkt_configure(8, max_tx_octets, (phy << 1) | 0x01);

		radio_pkt_tx_set(pdu_data_tx);
    b896:	f7fe b98b 	b.w	9bb0 <radio_pkt_tx_set>
	...

0000b89c <packet_rx_enqueue>:
		       &s_mfy_callback);
#endif
}

static void packet_rx_enqueue(void)
{
    b89c:	b513      	push	{r0, r1, r4, lr}
	void *link;
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	u8_t last;

	LL_ASSERT(_radio.packet_rx_last != _radio.packet_rx_acquire);
    b89e:	4a1f      	ldr	r2, [pc, #124]	; (b91c <packet_rx_enqueue+0x80>)
    b8a0:	f892 31bd 	ldrb.w	r3, [r2, #445]	; 0x1bd
    b8a4:	f892 11be 	ldrb.w	r1, [r2, #446]	; 0x1be
    b8a8:	4299      	cmp	r1, r3
    b8aa:	d108      	bne.n	b8be <packet_rx_enqueue+0x22>
    b8ac:	4b1c      	ldr	r3, [pc, #112]	; (b920 <packet_rx_enqueue+0x84>)
    b8ae:	9301      	str	r3, [sp, #4]
    b8b0:	4b1c      	ldr	r3, [pc, #112]	; (b924 <packet_rx_enqueue+0x88>)
    b8b2:	9300      	str	r3, [sp, #0]
    b8b4:	4a1c      	ldr	r2, [pc, #112]	; (b928 <packet_rx_enqueue+0x8c>)
    b8b6:	4b1d      	ldr	r3, [pc, #116]	; (b92c <packet_rx_enqueue+0x90>)
    b8b8:	491d      	ldr	r1, [pc, #116]	; (b930 <packet_rx_enqueue+0x94>)
    b8ba:	481e      	ldr	r0, [pc, #120]	; (b934 <packet_rx_enqueue+0x98>)
    b8bc:	e021      	b.n	b902 <packet_rx_enqueue+0x66>

	/* Remember the rx node and acquired link mem */
	radio_pdu_node_rx = _radio.packet_rx[_radio.packet_rx_last];
    b8be:	f892 11bd 	ldrb.w	r1, [r2, #445]	; 0x1bd
    b8c2:	f8d2 31b8 	ldr.w	r3, [r2, #440]	; 0x1b8
    b8c6:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]

	/* serialize release queue with rx queue by storing reference to last
	 * element in release queue
	 */
	radio_pdu_node_rx->hdr.onion.packet_release_last =
	    _radio.packet_release_last;
    b8ca:	f892 31f4 	ldrb.w	r3, [r2, #500]	; 0x1f4

	LL_ASSERT(_radio.packet_rx_last != _radio.packet_rx_acquire);

	/* Remember the rx node and acquired link mem */
	radio_pdu_node_rx = _radio.packet_rx[_radio.packet_rx_last];
	link = radio_pdu_node_rx->hdr.onion.link;
    b8ce:	6801      	ldr	r1, [r0, #0]

	/* serialize release queue with rx queue by storing reference to last
	 * element in release queue
	 */
	radio_pdu_node_rx->hdr.onion.packet_release_last =
    b8d0:	7003      	strb	r3, [r0, #0]
	    _radio.packet_release_last;

	/* dequeue from acquired rx queue */
	last = _radio.packet_rx_last + 1;
    b8d2:	f892 31bd 	ldrb.w	r3, [r2, #445]	; 0x1bd
	if (last == _radio.packet_rx_count) {
    b8d6:	f892 41bc 	ldrb.w	r4, [r2, #444]	; 0x1bc
	 */
	radio_pdu_node_rx->hdr.onion.packet_release_last =
	    _radio.packet_release_last;

	/* dequeue from acquired rx queue */
	last = _radio.packet_rx_last + 1;
    b8da:	3301      	adds	r3, #1
    b8dc:	b2db      	uxtb	r3, r3
	if (last == _radio.packet_rx_count) {
		last = 0;
    b8de:	429c      	cmp	r4, r3
    b8e0:	bf08      	it	eq
    b8e2:	2300      	moveq	r3, #0
	}
	_radio.packet_rx_last = last;
    b8e4:	f882 31bd 	strb.w	r3, [r2, #445]	; 0x1bd

	/* Enqueue into event-cum-data queue */
	link = memq_enqueue(radio_pdu_node_rx, link,
    b8e8:	f502 72e6 	add.w	r2, r2, #460	; 0x1cc
    b8ec:	f7fe f804 	bl	98f8 <memq_enqueue>
			    (void *)&_radio.link_rx_tail);
	LL_ASSERT(link);
    b8f0:	b978      	cbnz	r0, b912 <packet_rx_enqueue+0x76>
    b8f2:	4b0b      	ldr	r3, [pc, #44]	; (b920 <packet_rx_enqueue+0x84>)
    b8f4:	9301      	str	r3, [sp, #4]
    b8f6:	4b0b      	ldr	r3, [pc, #44]	; (b924 <packet_rx_enqueue+0x88>)
    b8f8:	9300      	str	r3, [sp, #0]
    b8fa:	4a0b      	ldr	r2, [pc, #44]	; (b928 <packet_rx_enqueue+0x8c>)
    b8fc:	4b0b      	ldr	r3, [pc, #44]	; (b92c <packet_rx_enqueue+0x90>)
    b8fe:	490c      	ldr	r1, [pc, #48]	; (b930 <packet_rx_enqueue+0x94>)
    b900:	480d      	ldr	r0, [pc, #52]	; (b938 <packet_rx_enqueue+0x9c>)
    b902:	f7f5 fdbd 	bl	1480 <printk>
    b906:	4040      	eors	r0, r0
    b908:	f380 8811 	msr	BASEPRI, r0
    b90c:	f04f 0004 	mov.w	r0, #4
    b910:	df02      	svc	2

	/* callback to trigger application action */
	packet_rx_callback();
}
    b912:	b002      	add	sp, #8
    b914:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	/* Inline call of callback. If JOB configured as lower priority then
	 * callback will tailchain at end of every radio ISR. If JOB configured
	 * as same then call inline so as to have callback for every radio ISR.
	 */
#if (RADIO_TICKER_USER_ID_WORKER_PRIO == RADIO_TICKER_USER_ID_JOB_PRIO)
	radio_event_callback();
    b918:	f005 bab4 	b.w	10e84 <radio_event_callback>
    b91c:	20001470 	.word	0x20001470
    b920:	00013df4 	.word	0x00013df4
    b924:	00013df9 	.word	0x00013df9
    b928:	00013db4 	.word	0x00013db4
    b92c:	00016a79 	.word	0x00016a79
    b930:	00013dbb 	.word	0x00013dbb
    b934:	000153a1 	.word	0x000153a1
    b938:	00015243 	.word	0x00015243

0000b93c <rx_fc_lock>:
	packet_rx_allocate(0xff);
}

static void rx_fc_lock(u16_t handle)
{
	if (_radio.fc_req == _radio.fc_ack) {
    b93c:	4a0b      	ldr	r2, [pc, #44]	; (b96c <rx_fc_lock+0x30>)
    b93e:	f892 31fc 	ldrb.w	r3, [r2, #508]	; 0x1fc
    b942:	f892 11fd 	ldrb.w	r1, [r2, #509]	; 0x1fd
    b946:	4299      	cmp	r1, r3
    b948:	d10e      	bne.n	b968 <rx_fc_lock+0x2c>
		u8_t req;

		_radio.fc_handle[_radio.fc_req] = handle;
    b94a:	f892 31fc 	ldrb.w	r3, [r2, #508]	; 0x1fc
    b94e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    b952:	f8a3 01f6 	strh.w	r0, [r3, #502]	; 0x1f6
		req = _radio.fc_req + 1;
    b956:	f892 31fc 	ldrb.w	r3, [r2, #508]	; 0x1fc
    b95a:	3301      	adds	r3, #1
    b95c:	b2db      	uxtb	r3, r3
		if (req == TRIPLE_BUFFER_SIZE) {
			req = 0;
    b95e:	2b03      	cmp	r3, #3
    b960:	bf08      	it	eq
    b962:	2300      	moveq	r3, #0
		}
		_radio.fc_req = req;
    b964:	f882 31fc 	strb.w	r3, [r2, #508]	; 0x1fc
    b968:	4770      	bx	lr
    b96a:	bf00      	nop
    b96c:	20001470 	.word	0x20001470

0000b970 <ticker_success_assert>:
{
	*((u32_t volatile *)ops_context) = status;
}

static void ticker_success_assert(u32_t status, void *params)
{
    b970:	b507      	push	{r0, r1, r2, lr}
	ARG_UNUSED(params);

	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    b972:	b178      	cbz	r0, b994 <ticker_success_assert+0x24>
    b974:	4b09      	ldr	r3, [pc, #36]	; (b99c <ticker_success_assert+0x2c>)
    b976:	9301      	str	r3, [sp, #4]
    b978:	4b09      	ldr	r3, [pc, #36]	; (b9a0 <ticker_success_assert+0x30>)
    b97a:	9300      	str	r3, [sp, #0]
    b97c:	4a09      	ldr	r2, [pc, #36]	; (b9a4 <ticker_success_assert+0x34>)
    b97e:	4b0a      	ldr	r3, [pc, #40]	; (b9a8 <ticker_success_assert+0x38>)
    b980:	490a      	ldr	r1, [pc, #40]	; (b9ac <ticker_success_assert+0x3c>)
    b982:	480b      	ldr	r0, [pc, #44]	; (b9b0 <ticker_success_assert+0x40>)
    b984:	f7f5 fd7c 	bl	1480 <printk>
    b988:	4040      	eors	r0, r0
    b98a:	f380 8811 	msr	BASEPRI, r0
    b98e:	f04f 0004 	mov.w	r0, #4
    b992:	df02      	svc	2
}
    b994:	b003      	add	sp, #12
    b996:	f85d fb04 	ldr.w	pc, [sp], #4
    b99a:	bf00      	nop
    b99c:	00013df4 	.word	0x00013df4
    b9a0:	00013df9 	.word	0x00013df9
    b9a4:	00013db4 	.word	0x00013db4
    b9a8:	0001690a 	.word	0x0001690a
    b9ac:	00013dbb 	.word	0x00013dbb
    b9b0:	000153f4 	.word	0x000153f4

0000b9b4 <ticker_stop_adv_assert>:

static void ticker_stop_adv_assert(u32_t status, void *params)
{
	ARG_UNUSED(params);

	if (status == TICKER_STATUS_FAILURE) {
    b9b4:	2801      	cmp	r0, #1

	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
}

static void ticker_stop_adv_assert(u32_t status, void *params)
{
    b9b6:	b507      	push	{r0, r1, r2, lr}
	ARG_UNUSED(params);

	if (status == TICKER_STATUS_FAILURE) {
    b9b8:	d116      	bne.n	b9e8 <ticker_stop_adv_assert+0x34>
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_ADV) {
    b9ba:	4b0d      	ldr	r3, [pc, #52]	; (b9f0 <ticker_stop_adv_assert+0x3c>)
    b9bc:	7b9a      	ldrb	r2, [r3, #14]
    b9be:	2a05      	cmp	r2, #5
    b9c0:	d102      	bne.n	b9c8 <ticker_stop_adv_assert+0x14>
			 * while in role_disable. Let the role_disable
			 * be made aware of, so it can return failure
			 * (to stop Adv role as it is now transitioned
			 * to Slave role).
			 */
			_radio.ticker_id_stop = 0;
    b9c2:	2200      	movs	r2, #0
    b9c4:	739a      	strb	r2, [r3, #14]
    b9c6:	e00f      	b.n	b9e8 <ticker_stop_adv_assert+0x34>
		} else {
			LL_ASSERT(0);
    b9c8:	4b0a      	ldr	r3, [pc, #40]	; (b9f4 <ticker_stop_adv_assert+0x40>)
    b9ca:	9301      	str	r3, [sp, #4]
    b9cc:	4b0a      	ldr	r3, [pc, #40]	; (b9f8 <ticker_stop_adv_assert+0x44>)
    b9ce:	9300      	str	r3, [sp, #0]
    b9d0:	4a0a      	ldr	r2, [pc, #40]	; (b9fc <ticker_stop_adv_assert+0x48>)
    b9d2:	4b0b      	ldr	r3, [pc, #44]	; (ba00 <ticker_stop_adv_assert+0x4c>)
    b9d4:	490b      	ldr	r1, [pc, #44]	; (ba04 <ticker_stop_adv_assert+0x50>)
    b9d6:	480c      	ldr	r0, [pc, #48]	; (ba08 <ticker_stop_adv_assert+0x54>)
    b9d8:	f7f5 fd52 	bl	1480 <printk>
    b9dc:	4040      	eors	r0, r0
    b9de:	f380 8811 	msr	BASEPRI, r0
    b9e2:	f04f 0004 	mov.w	r0, #4
    b9e6:	df02      	svc	2
		}
	}
}
    b9e8:	b003      	add	sp, #12
    b9ea:	f85d fb04 	ldr.w	pc, [sp], #4
    b9ee:	bf00      	nop
    b9f0:	20001470 	.word	0x20001470
    b9f4:	00013df4 	.word	0x00013df4
    b9f8:	00013df9 	.word	0x00013df9
    b9fc:	00013db4 	.word	0x00013db4
    ba00:	00016920 	.word	0x00016920
    ba04:	00013dbb 	.word	0x00013dbb
    ba08:	00014409 	.word	0x00014409

0000ba0c <ticker_stop_scan_assert>:

static void ticker_stop_scan_assert(u32_t status, void *params)
{
	ARG_UNUSED(params);

	if (status == TICKER_STATUS_FAILURE) {
    ba0c:	2801      	cmp	r0, #1
		}
	}
}

static void ticker_stop_scan_assert(u32_t status, void *params)
{
    ba0e:	b507      	push	{r0, r1, r2, lr}
	ARG_UNUSED(params);

	if (status == TICKER_STATUS_FAILURE) {
    ba10:	d116      	bne.n	ba40 <ticker_stop_scan_assert+0x34>
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_SCAN) {
    ba12:	4b0d      	ldr	r3, [pc, #52]	; (ba48 <ticker_stop_scan_assert+0x3c>)
    ba14:	7b9a      	ldrb	r2, [r3, #14]
    ba16:	2a06      	cmp	r2, #6
    ba18:	d102      	bne.n	ba20 <ticker_stop_scan_assert+0x14>
			 * while in role_disable. Let the role_disable
			 * be made aware of, so it can return failure
			 * (to stop Scan role as it is now transitioned
			 * to Master role).
			 */
			_radio.ticker_id_stop = 0;
    ba1a:	2200      	movs	r2, #0
    ba1c:	739a      	strb	r2, [r3, #14]
    ba1e:	e00f      	b.n	ba40 <ticker_stop_scan_assert+0x34>
		} else {
			LL_ASSERT(0);
    ba20:	4b0a      	ldr	r3, [pc, #40]	; (ba4c <ticker_stop_scan_assert+0x40>)
    ba22:	9301      	str	r3, [sp, #4]
    ba24:	4b0a      	ldr	r3, [pc, #40]	; (ba50 <ticker_stop_scan_assert+0x44>)
    ba26:	9300      	str	r3, [sp, #0]
    ba28:	4a0a      	ldr	r2, [pc, #40]	; (ba54 <ticker_stop_scan_assert+0x48>)
    ba2a:	4b0b      	ldr	r3, [pc, #44]	; (ba58 <ticker_stop_scan_assert+0x4c>)
    ba2c:	490b      	ldr	r1, [pc, #44]	; (ba5c <ticker_stop_scan_assert+0x50>)
    ba2e:	480c      	ldr	r0, [pc, #48]	; (ba60 <ticker_stop_scan_assert+0x54>)
    ba30:	f7f5 fd26 	bl	1480 <printk>
    ba34:	4040      	eors	r0, r0
    ba36:	f380 8811 	msr	BASEPRI, r0
    ba3a:	f04f 0004 	mov.w	r0, #4
    ba3e:	df02      	svc	2
		}
	}
}
    ba40:	b003      	add	sp, #12
    ba42:	f85d fb04 	ldr.w	pc, [sp], #4
    ba46:	bf00      	nop
    ba48:	20001470 	.word	0x20001470
    ba4c:	00013df4 	.word	0x00013df4
    ba50:	00013df9 	.word	0x00013df9
    ba54:	00013db4 	.word	0x00013db4
    ba58:	00016b8c 	.word	0x00016b8c
    ba5c:	00013dbb 	.word	0x00013dbb
    ba60:	00014409 	.word	0x00014409

0000ba64 <ticker_update_adv_assert>:

static void ticker_update_adv_assert(u32_t status, void *params)
{
    ba64:	b507      	push	{r0, r1, r2, lr}
	ARG_UNUSED(params);

	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
    ba66:	b198      	cbz	r0, ba90 <ticker_update_adv_assert+0x2c>
    ba68:	4b0b      	ldr	r3, [pc, #44]	; (ba98 <ticker_update_adv_assert+0x34>)
    ba6a:	7b9b      	ldrb	r3, [r3, #14]
    ba6c:	2b05      	cmp	r3, #5
    ba6e:	d00f      	beq.n	ba90 <ticker_update_adv_assert+0x2c>
    ba70:	4b0a      	ldr	r3, [pc, #40]	; (ba9c <ticker_update_adv_assert+0x38>)
    ba72:	9301      	str	r3, [sp, #4]
    ba74:	4b0a      	ldr	r3, [pc, #40]	; (baa0 <ticker_update_adv_assert+0x3c>)
    ba76:	9300      	str	r3, [sp, #0]
    ba78:	4a0a      	ldr	r2, [pc, #40]	; (baa4 <ticker_update_adv_assert+0x40>)
    ba7a:	4b0b      	ldr	r3, [pc, #44]	; (baa8 <ticker_update_adv_assert+0x44>)
    ba7c:	490b      	ldr	r1, [pc, #44]	; (baac <ticker_update_adv_assert+0x48>)
    ba7e:	480c      	ldr	r0, [pc, #48]	; (bab0 <ticker_update_adv_assert+0x4c>)
    ba80:	f7f5 fcfe 	bl	1480 <printk>
    ba84:	4040      	eors	r0, r0
    ba86:	f380 8811 	msr	BASEPRI, r0
    ba8a:	f04f 0004 	mov.w	r0, #4
    ba8e:	df02      	svc	2
		  (_radio.ticker_id_stop == RADIO_TICKER_ID_ADV));
}
    ba90:	b003      	add	sp, #12
    ba92:	f85d fb04 	ldr.w	pc, [sp], #4
    ba96:	bf00      	nop
    ba98:	20001470 	.word	0x20001470
    ba9c:	00013df4 	.word	0x00013df4
    baa0:	00013df9 	.word	0x00013df9
    baa4:	00013db4 	.word	0x00013db4
    baa8:	00016712 	.word	0x00016712
    baac:	00013dbb 	.word	0x00013dbb
    bab0:	00015421 	.word	0x00015421

0000bab4 <ticker_update_slave_assert>:

static void ticker_update_slave_assert(u32_t status, void *params)
{
    bab4:	b507      	push	{r0, r1, r2, lr}
	u8_t ticker_id = (u32_t)params & 0xFF;

	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
    bab6:	b1a0      	cbz	r0, bae2 <ticker_update_slave_assert+0x2e>
    bab8:	4b0b      	ldr	r3, [pc, #44]	; (bae8 <ticker_update_slave_assert+0x34>)
    baba:	7b9b      	ldrb	r3, [r3, #14]
    babc:	b2c9      	uxtb	r1, r1
    babe:	4299      	cmp	r1, r3
    bac0:	d00f      	beq.n	bae2 <ticker_update_slave_assert+0x2e>
    bac2:	4b0a      	ldr	r3, [pc, #40]	; (baec <ticker_update_slave_assert+0x38>)
    bac4:	9301      	str	r3, [sp, #4]
    bac6:	4b0a      	ldr	r3, [pc, #40]	; (baf0 <ticker_update_slave_assert+0x3c>)
    bac8:	9300      	str	r3, [sp, #0]
    baca:	4a0a      	ldr	r2, [pc, #40]	; (baf4 <ticker_update_slave_assert+0x40>)
    bacc:	4b0a      	ldr	r3, [pc, #40]	; (baf8 <ticker_update_slave_assert+0x44>)
    bace:	490b      	ldr	r1, [pc, #44]	; (bafc <ticker_update_slave_assert+0x48>)
    bad0:	480b      	ldr	r0, [pc, #44]	; (bb00 <ticker_update_slave_assert+0x4c>)
    bad2:	f7f5 fcd5 	bl	1480 <printk>
    bad6:	4040      	eors	r0, r0
    bad8:	f380 8811 	msr	BASEPRI, r0
    badc:	f04f 0004 	mov.w	r0, #4
    bae0:	df02      	svc	2
		  (_radio.ticker_id_stop == ticker_id));
}
    bae2:	b003      	add	sp, #12
    bae4:	f85d fb04 	ldr.w	pc, [sp], #4
    bae8:	20001470 	.word	0x20001470
    baec:	00013df4 	.word	0x00013df4
    baf0:	00013df9 	.word	0x00013df9
    baf4:	00013db4 	.word	0x00013db4
    baf8:	00016822 	.word	0x00016822
    bafc:	00013dbb 	.word	0x00013dbb
    bb00:	00015470 	.word	0x00015470

0000bb04 <ticker_op_latency_cancelled>:
{
	mem_release(node_tx, &_radio.pkt_tx_data_free);
}

static void ticker_op_latency_cancelled(u32_t ticker_status, void *params)
{
    bb04:	b507      	push	{r0, r1, r2, lr}
	struct connection *conn;

	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
    bb06:	b178      	cbz	r0, bb28 <ticker_op_latency_cancelled+0x24>
    bb08:	4b0c      	ldr	r3, [pc, #48]	; (bb3c <ticker_op_latency_cancelled+0x38>)
    bb0a:	9301      	str	r3, [sp, #4]
    bb0c:	4b0c      	ldr	r3, [pc, #48]	; (bb40 <ticker_op_latency_cancelled+0x3c>)
    bb0e:	9300      	str	r3, [sp, #0]
    bb10:	4a0c      	ldr	r2, [pc, #48]	; (bb44 <ticker_op_latency_cancelled+0x40>)
    bb12:	4b0d      	ldr	r3, [pc, #52]	; (bb48 <ticker_op_latency_cancelled+0x44>)
    bb14:	490d      	ldr	r1, [pc, #52]	; (bb4c <ticker_op_latency_cancelled+0x48>)
    bb16:	480e      	ldr	r0, [pc, #56]	; (bb50 <ticker_op_latency_cancelled+0x4c>)
    bb18:	f7f5 fcb2 	bl	1480 <printk>
    bb1c:	4040      	eors	r0, r0
    bb1e:	f380 8811 	msr	BASEPRI, r0
    bb22:	f04f 0004 	mov.w	r0, #4
    bb26:	df02      	svc	2

	conn = (struct connection *)params;
	conn->role.slave.latency_cancel = 0;
    bb28:	f891 3044 	ldrb.w	r3, [r1, #68]	; 0x44
    bb2c:	f360 1304 	bfi	r3, r0, #4, #1
    bb30:	f881 3044 	strb.w	r3, [r1, #68]	; 0x44
}
    bb34:	b003      	add	sp, #12
    bb36:	f85d fb04 	ldr.w	pc, [sp], #4
    bb3a:	bf00      	nop
    bb3c:	00013df4 	.word	0x00013df4
    bb40:	00013df9 	.word	0x00013df9
    bb44:	00013db4 	.word	0x00013db4
    bb48:	00016891 	.word	0x00016891
    bb4c:	00013dbb 	.word	0x00013dbb
    bb50:	000154c7 	.word	0x000154c7

0000bb54 <ticker_job_disable>:
static void ticker_job_disable(u32_t status, void *op_context)
{
	ARG_UNUSED(status);
	ARG_UNUSED(op_context);

	if (_radio.state != STATE_NONE) {
    bb54:	4b04      	ldr	r3, [pc, #16]	; (bb68 <ticker_job_disable+0x14>)
    bb56:	7c1b      	ldrb	r3, [r3, #16]
    bb58:	b123      	cbz	r3, bb64 <ticker_job_disable+0x10>
		mayfly_enable(RADIO_TICKER_USER_ID_JOB,
    bb5a:	2101      	movs	r1, #1
    bb5c:	2200      	movs	r2, #0
    bb5e:	4608      	mov	r0, r1
    bb60:	f7fd bd4e 	b.w	9600 <mayfly_enable>
    bb64:	4770      	bx	lr
    bb66:	bf00      	nop
    bb68:	20001470 	.word	0x20001470

0000bb6c <event_stop>:
	}
}

static void event_stop(u32_t ticks_at_expire, u32_t remainder,
		       u16_t lazy, void *context)
{
    bb6c:	b507      	push	{r0, r1, r2, lr}
	ARG_UNUSED(lazy);

	/* Radio state requested (stop or abort) stored in context is supplied
	 * in params.
	 */
	s_mfy_radio_stop.param = context;
    bb6e:	4a0e      	ldr	r2, [pc, #56]	; (bba8 <event_stop+0x3c>)
    bb70:	6093      	str	r3, [r2, #8]

	/* Stop Radio Tx/Rx */
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    bb72:	4613      	mov	r3, r2
    bb74:	2200      	movs	r2, #0
    bb76:	4611      	mov	r1, r2
    bb78:	4610      	mov	r0, r2
    bb7a:	f7fd fd69 	bl	9650 <mayfly_enqueue>
				RADIO_TICKER_USER_ID_WORKER, 0,
				&s_mfy_radio_stop);
	LL_ASSERT(!retval);
    bb7e:	b178      	cbz	r0, bba0 <event_stop+0x34>
    bb80:	4b0a      	ldr	r3, [pc, #40]	; (bbac <event_stop+0x40>)
    bb82:	9301      	str	r3, [sp, #4]
    bb84:	4b0a      	ldr	r3, [pc, #40]	; (bbb0 <event_stop+0x44>)
    bb86:	9300      	str	r3, [sp, #0]
    bb88:	4a0a      	ldr	r2, [pc, #40]	; (bbb4 <event_stop+0x48>)
    bb8a:	4b0b      	ldr	r3, [pc, #44]	; (bbb8 <event_stop+0x4c>)
    bb8c:	490b      	ldr	r1, [pc, #44]	; (bbbc <event_stop+0x50>)
    bb8e:	480c      	ldr	r0, [pc, #48]	; (bbc0 <event_stop+0x54>)
    bb90:	f7f5 fc76 	bl	1480 <printk>
    bb94:	4040      	eors	r0, r0
    bb96:	f380 8811 	msr	BASEPRI, r0
    bb9a:	f04f 0004 	mov.w	r0, #4
    bb9e:	df02      	svc	2
}
    bba0:	b003      	add	sp, #12
    bba2:	f85d fb04 	ldr.w	pc, [sp], #4
    bba6:	bf00      	nop
    bba8:	20000688 	.word	0x20000688
    bbac:	00013df4 	.word	0x00013df4
    bbb0:	00013df9 	.word	0x00013df9
    bbb4:	00013db4 	.word	0x00013db4
    bbb8:	00016b4b 	.word	0x00016b4b
    bbbc:	00013dbb 	.word	0x00013dbb
    bbc0:	00015348 	.word	0x00015348

0000bbc4 <event_adv_stop>:
	DEBUG_RADIO_START_A(0);
}

void event_adv_stop(u32_t ticks_at_expire, u32_t remainder, u16_t lazy,
		    void *context)
{
    bbc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ARG_UNUSED(context);

	/* Abort an event, if any, to avoid Rx queue corruption used by Radio
	 * ISR.
	 */
	event_stop(0, 0, 0, (void *)STATE_ABORT);
    bbc6:	2200      	movs	r2, #0
    bbc8:	4611      	mov	r1, r2
    bbca:	4610      	mov	r0, r2
    bbcc:	2305      	movs	r3, #5
    bbce:	f7ff ffcd 	bl	bb6c <event_stop>

	/* Stop Direct Adv */
	ticker_status =
    bbd2:	f241 3355 	movw	r3, #4949	; 0x1355
    bbd6:	2100      	movs	r1, #0
    bbd8:	9300      	str	r3, [sp, #0]
    bbda:	2205      	movs	r2, #5
    bbdc:	4b1a      	ldr	r3, [pc, #104]	; (bc48 <event_adv_stop+0x84>)
    bbde:	4608      	mov	r0, r1
    bbe0:	f7ff f968 	bl	aeb4 <ticker_stop>
	    ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
			RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_ID_ADV,
			ticker_success_assert, (void *)__LINE__);
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    bbe4:	f030 0502 	bics.w	r5, r0, #2
    bbe8:	d008      	beq.n	bbfc <event_adv_stop+0x38>
    bbea:	4b18      	ldr	r3, [pc, #96]	; (bc4c <event_adv_stop+0x88>)
    bbec:	9301      	str	r3, [sp, #4]
    bbee:	4b18      	ldr	r3, [pc, #96]	; (bc50 <event_adv_stop+0x8c>)
    bbf0:	9300      	str	r3, [sp, #0]
    bbf2:	4a18      	ldr	r2, [pc, #96]	; (bc54 <event_adv_stop+0x90>)
    bbf4:	4b18      	ldr	r3, [pc, #96]	; (bc58 <event_adv_stop+0x94>)
    bbf6:	4919      	ldr	r1, [pc, #100]	; (bc5c <event_adv_stop+0x98>)
    bbf8:	4819      	ldr	r0, [pc, #100]	; (bc60 <event_adv_stop+0x9c>)
    bbfa:	e00c      	b.n	bc16 <event_adv_stop+0x52>
		  (ticker_status == TICKER_STATUS_BUSY));

	/* Prepare the rx packet structure */
	radio_pdu_node_rx = packet_rx_reserve_get(1);
    bbfc:	2001      	movs	r0, #1
    bbfe:	f7ff fa7f 	bl	b100 <packet_rx_reserve_get>
	LL_ASSERT(radio_pdu_node_rx);
    bc02:	4604      	mov	r4, r0
    bc04:	b978      	cbnz	r0, bc26 <event_adv_stop+0x62>
    bc06:	4b11      	ldr	r3, [pc, #68]	; (bc4c <event_adv_stop+0x88>)
    bc08:	9301      	str	r3, [sp, #4]
    bc0a:	4b11      	ldr	r3, [pc, #68]	; (bc50 <event_adv_stop+0x8c>)
    bc0c:	9300      	str	r3, [sp, #0]
    bc0e:	4a11      	ldr	r2, [pc, #68]	; (bc54 <event_adv_stop+0x90>)
    bc10:	4b11      	ldr	r3, [pc, #68]	; (bc58 <event_adv_stop+0x94>)
    bc12:	4912      	ldr	r1, [pc, #72]	; (bc5c <event_adv_stop+0x98>)
    bc14:	4813      	ldr	r0, [pc, #76]	; (bc64 <event_adv_stop+0xa0>)
    bc16:	f7f5 fc33 	bl	1480 <printk>
    bc1a:	4040      	eors	r0, r0
    bc1c:	f380 8811 	msr	BASEPRI, r0
    bc20:	f04f 0004 	mov.w	r0, #4
    bc24:	df02      	svc	2

	/** Connection handle */
	radio_pdu_node_rx->hdr.handle = 0xffff;
    bc26:	f64f 73ff 	movw	r3, #65535	; 0xffff
    bc2a:	80c3      	strh	r3, [r0, #6]
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    bc2c:	2306      	movs	r3, #6
    bc2e:	7103      	strb	r3, [r0, #4]

	/* prepare connection complete structure */
	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
	radio_le_conn_cmplt =
		(struct radio_le_conn_cmplt *)&pdu_data_rx->payload;
	memset(radio_le_conn_cmplt, 0x00, sizeof(struct radio_le_conn_cmplt));
    bc30:	2218      	movs	r2, #24
    bc32:	4629      	mov	r1, r5
    bc34:	300b      	adds	r0, #11
    bc36:	f7f5 fa58 	bl	10ea <memset>
	radio_le_conn_cmplt->status = 0x3c;
    bc3a:	233c      	movs	r3, #60	; 0x3c
    bc3c:	72e3      	strb	r3, [r4, #11]

	/* enqueue connection complete structure into queue */
	packet_rx_enqueue();
}
    bc3e:	b003      	add	sp, #12
    bc40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		(struct radio_le_conn_cmplt *)&pdu_data_rx->payload;
	memset(radio_le_conn_cmplt, 0x00, sizeof(struct radio_le_conn_cmplt));
	radio_le_conn_cmplt->status = 0x3c;

	/* enqueue connection complete structure into queue */
	packet_rx_enqueue();
    bc44:	f7ff be2a 	b.w	b89c <packet_rx_enqueue>
    bc48:	0000b971 	.word	0x0000b971
    bc4c:	00013df4 	.word	0x00013df4
    bc50:	00013df9 	.word	0x00013df9
    bc54:	00013db4 	.word	0x00013db4
    bc58:	00016b7d 	.word	0x00016b7d
    bc5c:	00013dbb 	.word	0x00013dbb
    bc60:	000154fb 	.word	0x000154fb
    bc64:	00015549 	.word	0x00015549

0000bc68 <event_active>:
	}
}

static void event_active(u32_t ticks_at_expire, u32_t remainder,
			 u16_t lazy, void *context)
{
    bc68:	b507      	push	{r0, r1, r2, lr}
	ARG_UNUSED(ticks_at_expire);
	ARG_UNUSED(remainder);
	ARG_UNUSED(lazy);
	ARG_UNUSED(context);

	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    bc6a:	2200      	movs	r2, #0
    bc6c:	4b0c      	ldr	r3, [pc, #48]	; (bca0 <event_active+0x38>)
    bc6e:	4611      	mov	r1, r2
    bc70:	4610      	mov	r0, r2
    bc72:	f7fd fced 	bl	9650 <mayfly_enqueue>
				RADIO_TICKER_USER_ID_WORKER, 0,
				&s_mfy_radio_active);
	LL_ASSERT(!retval);
    bc76:	b178      	cbz	r0, bc98 <event_active+0x30>
    bc78:	4b0a      	ldr	r3, [pc, #40]	; (bca4 <event_active+0x3c>)
    bc7a:	9301      	str	r3, [sp, #4]
    bc7c:	4b0a      	ldr	r3, [pc, #40]	; (bca8 <event_active+0x40>)
    bc7e:	9300      	str	r3, [sp, #0]
    bc80:	4a0a      	ldr	r2, [pc, #40]	; (bcac <event_active+0x44>)
    bc82:	4b0b      	ldr	r3, [pc, #44]	; (bcb0 <event_active+0x48>)
    bc84:	490b      	ldr	r1, [pc, #44]	; (bcb4 <event_active+0x4c>)
    bc86:	480c      	ldr	r0, [pc, #48]	; (bcb8 <event_active+0x50>)
    bc88:	f7f5 fbfa 	bl	1480 <printk>
    bc8c:	4040      	eors	r0, r0
    bc8e:	f380 8811 	msr	BASEPRI, r0
    bc92:	f04f 0004 	mov.w	r0, #4
    bc96:	df02      	svc	2
}
    bc98:	b003      	add	sp, #12
    bc9a:	f85d fb04 	ldr.w	pc, [sp], #4
    bc9e:	bf00      	nop
    bca0:	20000638 	.word	0x20000638
    bca4:	00013df4 	.word	0x00013df4
    bca8:	00013df9 	.word	0x00013df9
    bcac:	00013db4 	.word	0x00013db4
    bcb0:	00016761 	.word	0x00016761
    bcb4:	00013dbb 	.word	0x00013dbb
    bcb8:	00015348 	.word	0x00015348

0000bcbc <event_xtal>:
	clock_control_on(_radio.hf_clock, NULL);
}

static void event_xtal(u32_t ticks_at_expire, u32_t remainder,
		       u16_t lazy, void *context)
{
    bcbc:	b507      	push	{r0, r1, r2, lr}
	ARG_UNUSED(ticks_at_expire);
	ARG_UNUSED(remainder);
	ARG_UNUSED(lazy);
	ARG_UNUSED(context);

	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    bcbe:	2200      	movs	r2, #0
    bcc0:	4b0c      	ldr	r3, [pc, #48]	; (bcf4 <event_xtal+0x38>)
    bcc2:	4611      	mov	r1, r2
    bcc4:	4610      	mov	r0, r2
    bcc6:	f7fd fcc3 	bl	9650 <mayfly_enqueue>
				RADIO_TICKER_USER_ID_WORKER, 0,
				&s_mfy_xtal_start);
	LL_ASSERT(!retval);
    bcca:	b178      	cbz	r0, bcec <event_xtal+0x30>
    bccc:	4b0a      	ldr	r3, [pc, #40]	; (bcf8 <event_xtal+0x3c>)
    bcce:	9301      	str	r3, [sp, #4]
    bcd0:	4b0a      	ldr	r3, [pc, #40]	; (bcfc <event_xtal+0x40>)
    bcd2:	9300      	str	r3, [sp, #0]
    bcd4:	4a0a      	ldr	r2, [pc, #40]	; (bd00 <event_xtal+0x44>)
    bcd6:	4b0b      	ldr	r3, [pc, #44]	; (bd04 <event_xtal+0x48>)
    bcd8:	490b      	ldr	r1, [pc, #44]	; (bd08 <event_xtal+0x4c>)
    bcda:	480c      	ldr	r0, [pc, #48]	; (bd0c <event_xtal+0x50>)
    bcdc:	f7f5 fbd0 	bl	1480 <printk>
    bce0:	4040      	eors	r0, r0
    bce2:	f380 8811 	msr	BASEPRI, r0
    bce6:	f04f 0004 	mov.w	r0, #4
    bcea:	df02      	svc	2
}
    bcec:	b003      	add	sp, #12
    bcee:	f85d fb04 	ldr.w	pc, [sp], #4
    bcf2:	bf00      	nop
    bcf4:	20000678 	.word	0x20000678
    bcf8:	00013df4 	.word	0x00013df4
    bcfc:	00013df9 	.word	0x00013df9
    bd00:	00013db4 	.word	0x00013db4
    bd04:	000169ae 	.word	0x000169ae
    bd08:	00013dbb 	.word	0x00013dbb
    bd0c:	00015348 	.word	0x00015348

0000bd10 <mayfly_radio_active>:
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
		  (_radio.ticker_id_stop == ticker_id));
}

static void mayfly_radio_active(void *params)
{
    bd10:	b507      	push	{r0, r1, r2, lr}
    bd12:	4a12      	ldr	r2, [pc, #72]	; (bd5c <mayfly_radio_active+0x4c>)
	static u8_t s_active;

	if ((u32_t)params) {
		if (s_active++) {
    bd14:	7813      	ldrb	r3, [r2, #0]

static void mayfly_radio_active(void *params)
{
	static u8_t s_active;

	if ((u32_t)params) {
    bd16:	b120      	cbz	r0, bd22 <mayfly_radio_active+0x12>
		if (s_active++) {
    bd18:	1c59      	adds	r1, r3, #1
    bd1a:	7011      	strb	r1, [r2, #0]
    bd1c:	b9db      	cbnz	r3, bd56 <mayfly_radio_active+0x46>
			return;
		}

		DEBUG_RADIO_ACTIVE(1);

		radio_active_callback(1);
    bd1e:	2001      	movs	r0, #1
    bd20:	e014      	b.n	bd4c <mayfly_radio_active+0x3c>
	} else {
		LL_ASSERT(s_active);
    bd22:	b97b      	cbnz	r3, bd44 <mayfly_radio_active+0x34>
    bd24:	4b0e      	ldr	r3, [pc, #56]	; (bd60 <mayfly_radio_active+0x50>)
    bd26:	9301      	str	r3, [sp, #4]
    bd28:	4b0e      	ldr	r3, [pc, #56]	; (bd64 <mayfly_radio_active+0x54>)
    bd2a:	9300      	str	r3, [sp, #0]
    bd2c:	4a0e      	ldr	r2, [pc, #56]	; (bd68 <mayfly_radio_active+0x58>)
    bd2e:	4b0f      	ldr	r3, [pc, #60]	; (bd6c <mayfly_radio_active+0x5c>)
    bd30:	490f      	ldr	r1, [pc, #60]	; (bd70 <mayfly_radio_active+0x60>)
    bd32:	4810      	ldr	r0, [pc, #64]	; (bd74 <mayfly_radio_active+0x64>)
    bd34:	f7f5 fba4 	bl	1480 <printk>
    bd38:	4040      	eors	r0, r0
    bd3a:	f380 8811 	msr	BASEPRI, r0
    bd3e:	f04f 0004 	mov.w	r0, #4
    bd42:	df02      	svc	2

		if (--s_active) {
    bd44:	3b01      	subs	r3, #1
    bd46:	b2db      	uxtb	r3, r3
    bd48:	7013      	strb	r3, [r2, #0]
    bd4a:	b923      	cbnz	r3, bd56 <mayfly_radio_active+0x46>

		DEBUG_RADIO_ACTIVE(0);

		radio_active_callback(0);
	}
}
    bd4c:	b003      	add	sp, #12
    bd4e:	f85d eb04 	ldr.w	lr, [sp], #4
			return;
		}

		DEBUG_RADIO_ACTIVE(0);

		radio_active_callback(0);
    bd52:	f005 b895 	b.w	10e80 <radio_active_callback>
	}
}
    bd56:	b003      	add	sp, #12
    bd58:	f85d fb04 	ldr.w	pc, [sp], #4
    bd5c:	20001440 	.word	0x20001440
    bd60:	00013df4 	.word	0x00013df4
    bd64:	00013df9 	.word	0x00013df9
    bd68:	00013db4 	.word	0x00013db4
    bd6c:	00016962 	.word	0x00016962
    bd70:	00013dbb 	.word	0x00013dbb
    bd74:	0001557c 	.word	0x0001557c

0000bd78 <mayfly_radio_inactive>:

static void mayfly_radio_inactive(void *params)
{
	ARG_UNUSED(params);

	mayfly_radio_active(0);
    bd78:	2000      	movs	r0, #0
    bd7a:	f7ff bfc9 	b.w	bd10 <mayfly_radio_active>
	...

0000bd80 <mayfly_radio_stop>:
	}
}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_SCHED_ADVANCED */

static void mayfly_radio_stop(void *params)
{
    bd80:	b507      	push	{r0, r1, r2, lr}
	enum state state = (enum state)((u32_t)params & 0xff);
    bd82:	b2c0      	uxtb	r0, r0
	u32_t radio_used;

	LL_ASSERT((state == STATE_STOP) || (state == STATE_ABORT));
    bd84:	1f03      	subs	r3, r0, #4
    bd86:	2b01      	cmp	r3, #1
    bd88:	d90f      	bls.n	bdaa <mayfly_radio_stop+0x2a>
    bd8a:	4b11      	ldr	r3, [pc, #68]	; (bdd0 <mayfly_radio_stop+0x50>)
    bd8c:	9301      	str	r3, [sp, #4]
    bd8e:	4b11      	ldr	r3, [pc, #68]	; (bdd4 <mayfly_radio_stop+0x54>)
    bd90:	9300      	str	r3, [sp, #0]
    bd92:	4a11      	ldr	r2, [pc, #68]	; (bdd8 <mayfly_radio_stop+0x58>)
    bd94:	4b11      	ldr	r3, [pc, #68]	; (bddc <mayfly_radio_stop+0x5c>)
    bd96:	4912      	ldr	r1, [pc, #72]	; (bde0 <mayfly_radio_stop+0x60>)
    bd98:	4812      	ldr	r0, [pc, #72]	; (bde4 <mayfly_radio_stop+0x64>)
    bd9a:	f7f5 fb71 	bl	1480 <printk>
    bd9e:	4040      	eors	r0, r0
    bda0:	f380 8811 	msr	BASEPRI, r0
    bda4:	f04f 0004 	mov.w	r0, #4
    bda8:	df02      	svc	2

	radio_used = ((_radio.state != STATE_NONE) &&
    bdaa:	4a0f      	ldr	r2, [pc, #60]	; (bde8 <mayfly_radio_stop+0x68>)
    bdac:	7c13      	ldrb	r3, [r2, #16]
		      (_radio.state != STATE_STOP) &&
    bdae:	b143      	cbz	r3, bdc2 <mayfly_radio_stop+0x42>
	enum state state = (enum state)((u32_t)params & 0xff);
	u32_t radio_used;

	LL_ASSERT((state == STATE_STOP) || (state == STATE_ABORT));

	radio_used = ((_radio.state != STATE_NONE) &&
    bdb0:	3b04      	subs	r3, #4
    bdb2:	2b01      	cmp	r3, #1
    bdb4:	d905      	bls.n	bdc2 <mayfly_radio_stop+0x42>
		      (_radio.state != STATE_STOP) &&
		      (_radio.state != STATE_ABORT));
	if (radio_used || !radio_is_idle()) {
		if (radio_used) {
			_radio.state = state;
    bdb6:	7410      	strb	r0, [r2, #16]
		}

		/** @todo try designing so as to not to abort tx packet */
		radio_disable();
	}
}
    bdb8:	b003      	add	sp, #12
    bdba:	f85d eb04 	ldr.w	lr, [sp], #4
		if (radio_used) {
			_radio.state = state;
		}

		/** @todo try designing so as to not to abort tx packet */
		radio_disable();
    bdbe:	f7fd bf15 	b.w	9bec <radio_disable>
	LL_ASSERT((state == STATE_STOP) || (state == STATE_ABORT));

	radio_used = ((_radio.state != STATE_NONE) &&
		      (_radio.state != STATE_STOP) &&
		      (_radio.state != STATE_ABORT));
	if (radio_used || !radio_is_idle()) {
    bdc2:	f7fd ff41 	bl	9c48 <radio_is_idle>
    bdc6:	2800      	cmp	r0, #0
    bdc8:	d0f6      	beq.n	bdb8 <mayfly_radio_stop+0x38>
		}

		/** @todo try designing so as to not to abort tx packet */
		radio_disable();
	}
}
    bdca:	b003      	add	sp, #12
    bdcc:	f85d fb04 	ldr.w	pc, [sp], #4
    bdd0:	00013df4 	.word	0x00013df4
    bdd4:	00013df9 	.word	0x00013df9
    bdd8:	00013db4 	.word	0x00013db4
    bddc:	000168c3 	.word	0x000168c3
    bde0:	00013dbb 	.word	0x00013dbb
    bde4:	000155a6 	.word	0x000155a6
    bde8:	20001470 	.word	0x20001470

0000bdec <pdu_node_tx_release>:
	}
}

static void pdu_node_tx_release(u16_t handle,
				struct radio_pdu_node_tx *node_tx)
{
    bdec:	b537      	push	{r0, r1, r2, r4, r5, lr}
	u8_t last;

	last = _radio.packet_release_last + 1;
    bdee:	4a18      	ldr	r2, [pc, #96]	; (be50 <pdu_node_tx_release+0x64>)
    bdf0:	f892 31f4 	ldrb.w	r3, [r2, #500]	; 0x1f4
	if (last == _radio.packet_tx_count) {
    bdf4:	f892 41f0 	ldrb.w	r4, [r2, #496]	; 0x1f0
static void pdu_node_tx_release(u16_t handle,
				struct radio_pdu_node_tx *node_tx)
{
	u8_t last;

	last = _radio.packet_release_last + 1;
    bdf8:	3301      	adds	r3, #1
    bdfa:	b2db      	uxtb	r3, r3
	if (last == _radio.packet_tx_count) {
		last = 0;
    bdfc:	429c      	cmp	r4, r3
    bdfe:	bf08      	it	eq
    be00:	2300      	moveq	r3, #0
	}

	LL_ASSERT(last != _radio.packet_release_first);
    be02:	f892 41f3 	ldrb.w	r4, [r2, #499]	; 0x1f3
    be06:	429c      	cmp	r4, r3
    be08:	d10f      	bne.n	be2a <pdu_node_tx_release+0x3e>
    be0a:	4b12      	ldr	r3, [pc, #72]	; (be54 <pdu_node_tx_release+0x68>)
    be0c:	9301      	str	r3, [sp, #4]
    be0e:	4b12      	ldr	r3, [pc, #72]	; (be58 <pdu_node_tx_release+0x6c>)
    be10:	9300      	str	r3, [sp, #0]
    be12:	4a12      	ldr	r2, [pc, #72]	; (be5c <pdu_node_tx_release+0x70>)
    be14:	4b12      	ldr	r3, [pc, #72]	; (be60 <pdu_node_tx_release+0x74>)
    be16:	4913      	ldr	r1, [pc, #76]	; (be64 <pdu_node_tx_release+0x78>)
    be18:	4813      	ldr	r0, [pc, #76]	; (be68 <pdu_node_tx_release+0x7c>)
    be1a:	f7f5 fb31 	bl	1480 <printk>
    be1e:	4040      	eors	r0, r0
    be20:	f380 8811 	msr	BASEPRI, r0
    be24:	f04f 0004 	mov.w	r0, #4
    be28:	df02      	svc	2

	/* Enqueue app mem for release */
	_radio.pkt_release[_radio.packet_release_last].handle = handle;
    be2a:	f892 51f4 	ldrb.w	r5, [r2, #500]	; 0x1f4
    be2e:	f8d2 41ec 	ldr.w	r4, [r2, #492]	; 0x1ec
    be32:	f824 0035 	strh.w	r0, [r4, r5, lsl #3]
	_radio.pkt_release[_radio.packet_release_last].node_tx = node_tx;
    be36:	f892 01f4 	ldrb.w	r0, [r2, #500]	; 0x1f4
    be3a:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
    be3e:	6061      	str	r1, [r4, #4]
	_radio.packet_release_last = last;
    be40:	f882 31f4 	strb.w	r3, [r2, #500]	; 0x1f4

	/* callback to trigger application action */
	packet_rx_callback();
}
    be44:	b003      	add	sp, #12
    be46:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	/* Inline call of callback. If JOB configured as lower priority then
	 * callback will tailchain at end of every radio ISR. If JOB configured
	 * as same then call inline so as to have callback for every radio ISR.
	 */
#if (RADIO_TICKER_USER_ID_WORKER_PRIO == RADIO_TICKER_USER_ID_JOB_PRIO)
	radio_event_callback();
    be4a:	f005 b81b 	b.w	10e84 <radio_event_callback>
    be4e:	bf00      	nop
    be50:	20001470 	.word	0x20001470
    be54:	00013df4 	.word	0x00013df4
    be58:	00013df9 	.word	0x00013df9
    be5c:	00013db4 	.word	0x00013db4
    be60:	00016af7 	.word	0x00016af7
    be64:	00013dbb 	.word	0x00013dbb
    be68:	000155f7 	.word	0x000155f7

0000be6c <packet_tx_enqueue>:
	/* callback to trigger application action */
	packet_rx_callback();
}

static void packet_tx_enqueue(u8_t max)
{
    be6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
    be70:	4d26      	ldr	r5, [pc, #152]	; (bf0c <packet_tx_enqueue+0xa0>)
	/* callback to trigger application action */
	packet_rx_callback();
}

static void packet_tx_enqueue(u8_t max)
{
    be72:	4606      	mov	r6, r0
    be74:	46a8      	mov	r8, r5
		struct connection *conn;
		u8_t first;

		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
		node_tx_new = pdu_data_q_tx->node_tx;
		node_tx_new->next = NULL;
    be76:	2700      	movs	r7, #0
	packet_rx_callback();
}

static void packet_tx_enqueue(u8_t max)
{
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
    be78:	2e00      	cmp	r6, #0
    be7a:	d044      	beq.n	bf06 <packet_tx_enqueue+0x9a>
    be7c:	f895 31f1 	ldrb.w	r3, [r5, #497]	; 0x1f1
    be80:	f895 21f2 	ldrb.w	r2, [r5, #498]	; 0x1f2
    be84:	429a      	cmp	r2, r3
    be86:	d03e      	beq.n	bf06 <packet_tx_enqueue+0x9a>
		struct pdu_data_q_tx *pdu_data_q_tx;
		struct radio_pdu_node_tx *node_tx_new;
		struct connection *conn;
		u8_t first;

		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
    be88:	f895 91f1 	ldrb.w	r9, [r5, #497]	; 0x1f1
    be8c:	f8d5 a1e8 	ldr.w	sl, [r5, #488]	; 0x1e8
		node_tx_new = pdu_data_q_tx->node_tx;
		node_tx_new->next = NULL;
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    be90:	f8d5 0184 	ldr.w	r0, [r5, #388]	; 0x184
    be94:	f83a 2039 	ldrh.w	r2, [sl, r9, lsl #3]
		struct pdu_data_q_tx *pdu_data_q_tx;
		struct radio_pdu_node_tx *node_tx_new;
		struct connection *conn;
		u8_t first;

		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
    be98:	eb0a 03c9 	add.w	r3, sl, r9, lsl #3
		node_tx_new = pdu_data_q_tx->node_tx;
		node_tx_new->next = NULL;
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    be9c:	f44f 718c 	mov.w	r1, #280	; 0x118
		struct radio_pdu_node_tx *node_tx_new;
		struct connection *conn;
		u8_t first;

		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
		node_tx_new = pdu_data_q_tx->node_tx;
    bea0:	685c      	ldr	r4, [r3, #4]
		node_tx_new->next = NULL;
    bea2:	6027      	str	r7, [r4, #0]
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    bea4:	f7fd fd08 	bl	98b8 <mem_get>
				pdu_data_q_tx->handle);

		if (conn->handle == pdu_data_q_tx->handle) {
    bea8:	f83a 3039 	ldrh.w	r3, [sl, r9, lsl #3]
    beac:	8c02      	ldrh	r2, [r0, #32]
    beae:	429a      	cmp	r2, r3
    beb0:	d112      	bne.n	bed8 <packet_tx_enqueue+0x6c>
			if (conn->pkt_tx_data == 0) {
    beb2:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
    beb6:	b943      	cbnz	r3, beca <packet_tx_enqueue+0x5e>
				conn->pkt_tx_data = node_tx_new;

				if (conn->pkt_tx_head == 0) {
    beb8:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
				pdu_data_q_tx->handle);

		if (conn->handle == pdu_data_q_tx->handle) {
			if (conn->pkt_tx_data == 0) {
				conn->pkt_tx_data = node_tx_new;
    bebc:	f8c0 410c 	str.w	r4, [r0, #268]	; 0x10c

				if (conn->pkt_tx_head == 0) {
    bec0:	b91b      	cbnz	r3, beca <packet_tx_enqueue+0x5e>
					conn->pkt_tx_head = node_tx_new;
    bec2:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
					conn->pkt_tx_last = NULL;
    bec6:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
				}
			}

			if (conn->pkt_tx_last) {
    beca:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
    bece:	b103      	cbz	r3, bed2 <packet_tx_enqueue+0x66>
				conn->pkt_tx_last->next = node_tx_new;
    bed0:	601c      	str	r4, [r3, #0]
			}

			conn->pkt_tx_last = node_tx_new;
    bed2:	f8c0 4110 	str.w	r4, [r0, #272]	; 0x110
    bed6:	e008      	b.n	beea <packet_tx_enqueue+0x7e>
			pdu_data_tx = (struct pdu_data *)node_tx_new->pdu_data;

			/* By setting it resv, when app gets num cmplt, no
			 * num cmplt is counted, but the buffer is released
			 */
			pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    bed8:	7923      	ldrb	r3, [r4, #4]
    beda:	f36f 0301 	bfc	r3, #0, #2
    bede:	7123      	strb	r3, [r4, #4]

			pdu_node_tx_release(pdu_data_q_tx->handle, node_tx_new);
    bee0:	4621      	mov	r1, r4
    bee2:	f83a 0039 	ldrh.w	r0, [sl, r9, lsl #3]
    bee6:	f7ff ff81 	bl	bdec <pdu_node_tx_release>
		}

		first = _radio.packet_tx_first + 1;
    beea:	f898 31f1 	ldrb.w	r3, [r8, #497]	; 0x1f1
		if (first == _radio.packet_tx_count) {
    beee:	f898 21f0 	ldrb.w	r2, [r8, #496]	; 0x1f0
			pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;

			pdu_node_tx_release(pdu_data_q_tx->handle, node_tx_new);
		}

		first = _radio.packet_tx_first + 1;
    bef2:	3301      	adds	r3, #1
    bef4:	b2db      	uxtb	r3, r3
		if (first == _radio.packet_tx_count) {
			first = 0;
    bef6:	429a      	cmp	r2, r3
    bef8:	bf08      	it	eq
    befa:	2300      	moveq	r3, #0
    befc:	3e01      	subs	r6, #1
		}
		_radio.packet_tx_first = first;
    befe:	f888 31f1 	strb.w	r3, [r8, #497]	; 0x1f1
    bf02:	b2f6      	uxtb	r6, r6
    bf04:	e7b8      	b.n	be78 <packet_tx_enqueue+0xc>
    bf06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    bf0a:	bf00      	nop
    bf0c:	20001470 	.word	0x20001470

0000bf10 <event_common_prepare>:
				 u32_t *ticks_active_to_start,
				 u32_t ticks_preempt_to_start,
				 u8_t ticker_id,
				 ticker_timeout_func ticker_timeout_fp,
				 void *context)
{
    bf10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u32_t ticker_status;
	u32_t _ticks_xtal_to_start = *ticks_xtal_to_start;
    bf14:	6814      	ldr	r4, [r2, #0]
	u32_t _ticks_active_to_start = *ticks_active_to_start;
    bf16:	681d      	ldr	r5, [r3, #0]
				 u32_t *ticks_active_to_start,
				 u32_t ticks_preempt_to_start,
				 u8_t ticker_id,
				 ticker_timeout_func ticker_timeout_fp,
				 void *context)
{
    bf18:	b08d      	sub	sp, #52	; 0x34
	u32_t ticks_to_start;

	/* in case this event is short prepare, xtal to start duration will be
	 * active to start duration.
	 */
	if (_ticks_xtal_to_start & ((u32_t)1 << 31)) {
    bf1a:	2c00      	cmp	r4, #0
				 u32_t *ticks_active_to_start,
				 u32_t ticks_preempt_to_start,
				 u8_t ticker_id,
				 ticker_timeout_func ticker_timeout_fp,
				 void *context)
{
    bf1c:	4680      	mov	r8, r0
    bf1e:	910b      	str	r1, [sp, #44]	; 0x2c
    bf20:	4617      	mov	r7, r2
    bf22:	469a      	mov	sl, r3
    bf24:	f89d 905c 	ldrb.w	r9, [sp, #92]	; 0x5c
	u32_t ticks_to_start;

	/* in case this event is short prepare, xtal to start duration will be
	 * active to start duration.
	 */
	if (_ticks_xtal_to_start & ((u32_t)1 << 31)) {
    bf28:	da03      	bge.n	bf32 <event_common_prepare+0x22>
		_ticks_xtal_to_start =
    bf2a:	9c16      	ldr	r4, [sp, #88]	; 0x58
    bf2c:	42ac      	cmp	r4, r5
    bf2e:	bf38      	it	cc
    bf30:	462c      	movcc	r4, r5

	/* decide whether its XTAL start or active event that is the current
	 * execution context and accordingly setup the ticker for the other
	 * event (XTAL or active event). These are oneshot ticker.
	 */
	if (_ticks_active_to_start < _ticks_xtal_to_start) {
    bf32:	42ac      	cmp	r4, r5
    bf34:	4e58      	ldr	r6, [pc, #352]	; (c098 <event_common_prepare+0x188>)
    bf36:	d916      	bls.n	bf66 <event_common_prepare+0x56>

		/* XTAL is before Active */
		ticks_to_active = _ticks_xtal_to_start - _ticks_active_to_start;
		ticks_to_start = _ticks_xtal_to_start;

		ticker_status =
    bf38:	f241 1310 	movw	r3, #4368	; 0x1110
    bf3c:	9308      	str	r3, [sp, #32]
    bf3e:	4b57      	ldr	r3, [pc, #348]	; (c09c <event_common_prepare+0x18c>)
    bf40:	9305      	str	r3, [sp, #20]
    bf42:	2100      	movs	r1, #0
    bf44:	1b63      	subs	r3, r4, r5
    bf46:	9300      	str	r3, [sp, #0]
    bf48:	9607      	str	r6, [sp, #28]
    bf4a:	4643      	mov	r3, r8
    bf4c:	9106      	str	r1, [sp, #24]
    bf4e:	9104      	str	r1, [sp, #16]
    bf50:	9103      	str	r1, [sp, #12]
    bf52:	9102      	str	r1, [sp, #8]
    bf54:	9101      	str	r1, [sp, #4]
    bf56:	2201      	movs	r2, #1
    bf58:	4608      	mov	r0, r1
    bf5a:	f7fe ff1d 	bl	ad98 <ticker_start>
				     RADIO_TICKER_ID_MARKER_0, ticks_at_expire,
				     ticks_to_active, TICKER_NULL_PERIOD,
				     TICKER_NULL_REMAINDER, TICKER_NULL_LAZY,
				     TICKER_NULL_SLOT, event_active, NULL,
				     ticker_success_assert, (void *)__LINE__);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    bf5e:	f030 0302 	bics.w	r3, r0, #2
    bf62:	d171      	bne.n	c048 <event_common_prepare+0x138>
    bf64:	e025      	b.n	bfb2 <event_common_prepare+0xa2>
			  (ticker_status == TICKER_STATUS_BUSY));

		event_xtal(0, 0, 0, NULL);
	} else if (_ticks_active_to_start > _ticks_xtal_to_start) {
    bf66:	d21d      	bcs.n	bfa4 <event_common_prepare+0x94>

		/* Active is before XTAL */
		ticks_to_xtal = _ticks_active_to_start - _ticks_xtal_to_start;
		ticks_to_start = _ticks_active_to_start;

		event_active(0, 0, 0, NULL);
    bf68:	2300      	movs	r3, #0
    bf6a:	461a      	mov	r2, r3
    bf6c:	4619      	mov	r1, r3
    bf6e:	4618      	mov	r0, r3
    bf70:	f7ff fe7a 	bl	bc68 <event_active>

		ticker_status =
    bf74:	f241 1325 	movw	r3, #4389	; 0x1125
    bf78:	2100      	movs	r1, #0
    bf7a:	9308      	str	r3, [sp, #32]
		event_xtal(0, 0, 0, NULL);
	} else if (_ticks_active_to_start > _ticks_xtal_to_start) {
		u32_t ticks_to_xtal;

		/* Active is before XTAL */
		ticks_to_xtal = _ticks_active_to_start - _ticks_xtal_to_start;
    bf7c:	1b2c      	subs	r4, r5, r4
		ticks_to_start = _ticks_active_to_start;

		event_active(0, 0, 0, NULL);

		ticker_status =
    bf7e:	4b48      	ldr	r3, [pc, #288]	; (c0a0 <event_common_prepare+0x190>)
    bf80:	9305      	str	r3, [sp, #20]
    bf82:	9607      	str	r6, [sp, #28]
    bf84:	4643      	mov	r3, r8
    bf86:	9106      	str	r1, [sp, #24]
    bf88:	9104      	str	r1, [sp, #16]
    bf8a:	9103      	str	r1, [sp, #12]
    bf8c:	9102      	str	r1, [sp, #8]
    bf8e:	9101      	str	r1, [sp, #4]
    bf90:	9400      	str	r4, [sp, #0]
    bf92:	2201      	movs	r2, #1
    bf94:	4608      	mov	r0, r1
    bf96:	f7fe feff 	bl	ad98 <ticker_start>
				     RADIO_TICKER_ID_MARKER_0, ticks_at_expire,
				     ticks_to_xtal, TICKER_NULL_PERIOD,
				     TICKER_NULL_REMAINDER, TICKER_NULL_LAZY,
				     TICKER_NULL_SLOT, event_xtal, NULL,
				     ticker_success_assert, (void *)__LINE__);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    bf9a:	f030 0302 	bics.w	r3, r0, #2
    bf9e:	d153      	bne.n	c048 <event_common_prepare+0x138>
    bfa0:	462c      	mov	r4, r5
    bfa2:	e00b      	b.n	bfbc <event_common_prepare+0xac>
		/* Active and XTAL are at the same time,
		 * no ticker required to be setup.
		 */
		ticks_to_start = _ticks_xtal_to_start;

		event_active(0, 0, 0, NULL);
    bfa4:	2300      	movs	r3, #0
    bfa6:	461a      	mov	r2, r3
    bfa8:	4619      	mov	r1, r3
    bfaa:	4618      	mov	r0, r3
    bfac:	f7ff fe5c 	bl	bc68 <event_active>
		event_xtal(0, 0, 0, NULL);
    bfb0:	2300      	movs	r3, #0
    bfb2:	461a      	mov	r2, r3
    bfb4:	4619      	mov	r1, r3
    bfb6:	4618      	mov	r0, r3
    bfb8:	f7ff fe80 	bl	bcbc <event_xtal>
	}

	/* remember the remainder to be used in pkticker */
	_radio.remainder_anchor = remainder;
    bfbc:	f8df b104 	ldr.w	fp, [pc, #260]	; c0c4 <event_common_prepare+0x1b4>
    bfc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    bfc2:	f8cb 3008 	str.w	r3, [fp, #8]

	/* setup the start ticker */
	ticker_status =
    bfc6:	f241 133d 	movw	r3, #4413	; 0x113d
    bfca:	9308      	str	r3, [sp, #32]
    bfcc:	9b19      	ldr	r3, [sp, #100]	; 0x64
    bfce:	9306      	str	r3, [sp, #24]
    bfd0:	2200      	movs	r2, #0
    bfd2:	9b18      	ldr	r3, [sp, #96]	; 0x60
    bfd4:	9305      	str	r3, [sp, #20]
    bfd6:	9204      	str	r2, [sp, #16]
    bfd8:	9203      	str	r2, [sp, #12]
    bfda:	9202      	str	r2, [sp, #8]
    bfdc:	9201      	str	r2, [sp, #4]
    bfde:	4611      	mov	r1, r2
    bfe0:	4610      	mov	r0, r2
    bfe2:	9607      	str	r6, [sp, #28]
    bfe4:	9400      	str	r4, [sp, #0]
    bfe6:	4643      	mov	r3, r8
    bfe8:	f7fe fed6 	bl	ad98 <ticker_start>
			     ticks_at_expire, ticks_to_start,
			     TICKER_NULL_PERIOD, TICKER_NULL_REMAINDER,
			     TICKER_NULL_LAZY, TICKER_NULL_SLOT,
			     ticker_timeout_fp, context, ticker_success_assert,
			     (void *)__LINE__);
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    bfec:	f030 0202 	bics.w	r2, r0, #2
    bff0:	d12a      	bne.n	c048 <event_common_prepare+0x138>
				     ticker_success_assert, (void *)__LINE__);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
			  (ticker_status == TICKER_STATUS_BUSY));
	}
#else
	event_stop(0, 0, 0, (void *)STATE_ABORT);
    bff2:	2305      	movs	r3, #5
    bff4:	4611      	mov	r1, r2
    bff6:	4610      	mov	r0, r2
    bff8:	f7ff fdb8 	bl	bb6c <event_stop>
#endif
#undef RADIO_DEFERRED_PREEMPT

	/** Handle change in _ticks_active_to_start */
	if (_radio.ticks_active_to_start != _ticks_active_to_start) {
    bffc:	f8db 3200 	ldr.w	r3, [fp, #512]	; 0x200
    c000:	429d      	cmp	r5, r3
    c002:	d02a      	beq.n	c05a <event_common_prepare+0x14a>
		u32_t ticks_to_start_new =
    c004:	683a      	ldr	r2, [r7, #0]
			((_radio.ticks_active_to_start <
			  (*ticks_xtal_to_start & ~(((u32_t)1 << 31)))) ?
			 (*ticks_xtal_to_start & ~(((u32_t)1 << 31))) :
			 _radio.ticks_active_to_start);

		*ticks_active_to_start = _radio.ticks_active_to_start;
    c006:	f8ca 3000 	str.w	r3, [sl]
#endif
#undef RADIO_DEFERRED_PREEMPT

	/** Handle change in _ticks_active_to_start */
	if (_radio.ticks_active_to_start != _ticks_active_to_start) {
		u32_t ticks_to_start_new =
    c00a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
    c00e:	429a      	cmp	r2, r3
    c010:	bf38      	it	cc
    c012:	461a      	movcc	r2, r3
			 (*ticks_xtal_to_start & ~(((u32_t)1 << 31))) :
			 _radio.ticks_active_to_start);

		*ticks_active_to_start = _radio.ticks_active_to_start;

		if ((*ticks_xtal_to_start) & ((u32_t)1 << 31)) {
    c014:	683b      	ldr	r3, [r7, #0]
    c016:	2b00      	cmp	r3, #0
			*ticks_xtal_to_start &= ~(((u32_t)1 << 31));
    c018:	bfb8      	it	lt
    c01a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
		}

		/* drift the primary as required due to active line change */
		ticker_status =
    c01e:	f241 116a 	movw	r1, #4458	; 0x116a
			 _radio.ticks_active_to_start);

		*ticks_active_to_start = _radio.ticks_active_to_start;

		if ((*ticks_xtal_to_start) & ((u32_t)1 << 31)) {
			*ticks_xtal_to_start &= ~(((u32_t)1 << 31));
    c022:	bfb8      	it	lt
    c024:	603b      	strlt	r3, [r7, #0]
		}

		/* drift the primary as required due to active line change */
		ticker_status =
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    c026:	b292      	uxth	r2, r2
    c028:	b2a3      	uxth	r3, r4
		if ((*ticks_xtal_to_start) & ((u32_t)1 << 31)) {
			*ticks_xtal_to_start &= ~(((u32_t)1 << 31));
		}

		/* drift the primary as required due to active line change */
		ticker_status =
    c02a:	9106      	str	r1, [sp, #24]
    c02c:	2100      	movs	r1, #0
    c02e:	9302      	str	r3, [sp, #8]
    c030:	9201      	str	r2, [sp, #4]
    c032:	9200      	str	r2, [sp, #0]
    c034:	9605      	str	r6, [sp, #20]
    c036:	9104      	str	r1, [sp, #16]
    c038:	9103      	str	r1, [sp, #12]
    c03a:	464a      	mov	r2, r9
    c03c:	4608      	mov	r0, r1
    c03e:	f7fe fef3 	bl	ae28 <ticker_update>
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
				      RADIO_TICKER_USER_ID_WORKER, ticker_id,
				      ticks_to_start, ticks_to_start_new,
				      ticks_to_start_new, ticks_to_start, 0, 0,
				      ticker_success_assert, (void *)__LINE__);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    c042:	f030 0302 	bics.w	r3, r0, #2
    c046:	d008      	beq.n	c05a <event_common_prepare+0x14a>
    c048:	4b16      	ldr	r3, [pc, #88]	; (c0a4 <event_common_prepare+0x194>)
    c04a:	9301      	str	r3, [sp, #4]
    c04c:	4b16      	ldr	r3, [pc, #88]	; (c0a8 <event_common_prepare+0x198>)
    c04e:	9300      	str	r3, [sp, #0]
    c050:	4a16      	ldr	r2, [pc, #88]	; (c0ac <event_common_prepare+0x19c>)
    c052:	4b17      	ldr	r3, [pc, #92]	; (c0b0 <event_common_prepare+0x1a0>)
    c054:	4917      	ldr	r1, [pc, #92]	; (c0b4 <event_common_prepare+0x1a4>)
    c056:	4818      	ldr	r0, [pc, #96]	; (c0b8 <event_common_prepare+0x1a8>)
    c058:	e013      	b.n	c082 <event_common_prepare+0x172>
			  (ticker_status == TICKER_STATUS_BUSY));
	}

	/* route all packets queued for connections */
	packet_tx_enqueue(0xFF);
    c05a:	20ff      	movs	r0, #255	; 0xff
    c05c:	f7ff ff06 	bl	be6c <packet_tx_enqueue>
		static void *s_link[2];
		static struct mayfly s_mfy_xtal_stop_calc = {0, 0, s_link, NULL,
			mayfly_xtal_stop_calc};
		u32_t retval;

		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
    c060:	4b16      	ldr	r3, [pc, #88]	; (c0bc <event_common_prepare+0x1ac>)

		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    c062:	2201      	movs	r2, #1
    c064:	4611      	mov	r1, r2
    c066:	2000      	movs	r0, #0
		static void *s_link[2];
		static struct mayfly s_mfy_xtal_stop_calc = {0, 0, s_link, NULL,
			mayfly_xtal_stop_calc};
		u32_t retval;

		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
    c068:	f8c3 9008 	str.w	r9, [r3, #8]

		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    c06c:	f7fd faf0 	bl	9650 <mayfly_enqueue>
					RADIO_TICKER_USER_ID_JOB, 1,
					&s_mfy_xtal_stop_calc);
		LL_ASSERT(!retval);
    c070:	b178      	cbz	r0, c092 <event_common_prepare+0x182>
    c072:	4b0c      	ldr	r3, [pc, #48]	; (c0a4 <event_common_prepare+0x194>)
    c074:	9301      	str	r3, [sp, #4]
    c076:	4b0c      	ldr	r3, [pc, #48]	; (c0a8 <event_common_prepare+0x198>)
    c078:	9300      	str	r3, [sp, #0]
    c07a:	4a0c      	ldr	r2, [pc, #48]	; (c0ac <event_common_prepare+0x19c>)
    c07c:	4b0c      	ldr	r3, [pc, #48]	; (c0b0 <event_common_prepare+0x1a0>)
    c07e:	490d      	ldr	r1, [pc, #52]	; (c0b4 <event_common_prepare+0x1a4>)
    c080:	480f      	ldr	r0, [pc, #60]	; (c0c0 <event_common_prepare+0x1b0>)
    c082:	f7f5 f9fd 	bl	1480 <printk>
    c086:	4040      	eors	r0, r0
    c088:	f380 8811 	msr	BASEPRI, r0
    c08c:	f04f 0004 	mov.w	r0, #4
    c090:	df02      	svc	2
	}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_XTAL_ADVANCED */
}
    c092:	b00d      	add	sp, #52	; 0x34
    c094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c098:	0000b971 	.word	0x0000b971
    c09c:	0000bc69 	.word	0x0000bc69
    c0a0:	0000bcbd 	.word	0x0000bcbd
    c0a4:	00013df4 	.word	0x00013df4
    c0a8:	00013df9 	.word	0x00013df9
    c0ac:	00013db4 	.word	0x00013db4
    c0b0:	00016aa3 	.word	0x00016aa3
    c0b4:	00013dbb 	.word	0x00013dbb
    c0b8:	000154fb 	.word	0x000154fb
    c0bc:	20000608 	.word	0x20000608
    c0c0:	00015348 	.word	0x00015348
    c0c4:	20001470 	.word	0x20001470

0000c0c8 <connection_release>:
	/* callback to trigger application action */
	packet_rx_callback();
}

static void connection_release(struct connection *conn)
{
    c0c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	u32_t ticker_status;

	/* Enable Ticker Job, we are in a radio event which disabled it if
	 * worker0 and job0 priority where same.
	 */
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    c0ca:	2201      	movs	r2, #1
	/* callback to trigger application action */
	packet_rx_callback();
}

static void connection_release(struct connection *conn)
{
    c0cc:	4604      	mov	r4, r0
	u32_t ticker_status;

	/* Enable Ticker Job, we are in a radio event which disabled it if
	 * worker0 and job0 priority where same.
	 */
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    c0ce:	4611      	mov	r1, r2
    c0d0:	2000      	movs	r0, #0
    c0d2:	f7fd fa95 	bl	9600 <mayfly_enable>
	/** @todo correctly stop tickers ensuring crystal and radio active are
	 * placed in right states
	 */

	/* Stop Master/Slave role ticker */
	ticker_status =
    c0d6:	f894 2020 	ldrb.w	r2, [r4, #32]
    c0da:	2100      	movs	r1, #0
    c0dc:	f641 4378 	movw	r3, #7288	; 0x1c78
    c0e0:	3207      	adds	r2, #7
    c0e2:	9300      	str	r3, [sp, #0]
    c0e4:	4608      	mov	r0, r1
    c0e6:	4b3f      	ldr	r3, [pc, #252]	; (c1e4 <connection_release+0x11c>)
    c0e8:	b2d2      	uxtb	r2, r2
    c0ea:	f7fe fee3 	bl	aeb4 <ticker_stop>
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
			    RADIO_TICKER_USER_ID_WORKER,
			    (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle),
			    ticker_success_assert, (void *)__LINE__);
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    c0ee:	f030 0102 	bics.w	r1, r0, #2
    c0f2:	d11f      	bne.n	c134 <connection_release+0x6c>
		  (ticker_status == TICKER_STATUS_BUSY));

	/* Stop Marker 0 and event single-shot tickers */
	if ((_radio.state == STATE_ABORT) &&
    c0f4:	4b3c      	ldr	r3, [pc, #240]	; (c1e8 <connection_release+0x120>)
    c0f6:	7c1a      	ldrb	r2, [r3, #16]
    c0f8:	2a05      	cmp	r2, #5
    c0fa:	461d      	mov	r5, r3
    c0fc:	d13a      	bne.n	c174 <connection_release+0xac>
	    (_radio.ticker_id_prepare == (RADIO_TICKER_ID_FIRST_CONNECTION +
    c0fe:	7b1a      	ldrb	r2, [r3, #12]
			    ticker_success_assert, (void *)__LINE__);
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
		  (ticker_status == TICKER_STATUS_BUSY));

	/* Stop Marker 0 and event single-shot tickers */
	if ((_radio.state == STATE_ABORT) &&
    c100:	8c23      	ldrh	r3, [r4, #32]
    c102:	3307      	adds	r3, #7
    c104:	429a      	cmp	r2, r3
    c106:	d135      	bne.n	c174 <connection_release+0xac>
	    (_radio.ticker_id_prepare == (RADIO_TICKER_ID_FIRST_CONNECTION +
					  conn->handle))) {
		ticker_status =
    c108:	f641 4384 	movw	r3, #7300	; 0x1c84
    c10c:	9300      	str	r3, [sp, #0]
    c10e:	2201      	movs	r2, #1
    c110:	4b34      	ldr	r3, [pc, #208]	; (c1e4 <connection_release+0x11c>)
    c112:	4608      	mov	r0, r1
    c114:	f7fe fece 	bl	aeb4 <ticker_stop>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
				    RADIO_TICKER_USER_ID_WORKER,
				    RADIO_TICKER_ID_MARKER_0,
				    ticker_success_assert, (void *)__LINE__);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    c118:	f030 0202 	bics.w	r2, r0, #2
    c11c:	d10a      	bne.n	c134 <connection_release+0x6c>
			  (ticker_status == TICKER_STATUS_BUSY));
		ticker_status =
    c11e:	f641 438b 	movw	r3, #7307	; 0x1c8b
    c122:	9300      	str	r3, [sp, #0]
    c124:	4611      	mov	r1, r2
    c126:	4b2f      	ldr	r3, [pc, #188]	; (c1e4 <connection_release+0x11c>)
    c128:	4610      	mov	r0, r2
    c12a:	f7fe fec3 	bl	aeb4 <ticker_stop>
		    ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
				RADIO_TICKER_USER_ID_WORKER,
				RADIO_TICKER_ID_EVENT,
				ticker_success_assert, (void *)__LINE__);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    c12e:	f030 0302 	bics.w	r3, r0, #2
    c132:	d01f      	beq.n	c174 <connection_release+0xac>
    c134:	4b2d      	ldr	r3, [pc, #180]	; (c1ec <connection_release+0x124>)
    c136:	9301      	str	r3, [sp, #4]
    c138:	4b2d      	ldr	r3, [pc, #180]	; (c1f0 <connection_release+0x128>)
    c13a:	9300      	str	r3, [sp, #0]
    c13c:	4a2d      	ldr	r2, [pc, #180]	; (c1f4 <connection_release+0x12c>)
    c13e:	4b2e      	ldr	r3, [pc, #184]	; (c1f8 <connection_release+0x130>)
    c140:	492e      	ldr	r1, [pc, #184]	; (c1fc <connection_release+0x134>)
    c142:	482f      	ldr	r0, [pc, #188]	; (c200 <connection_release+0x138>)
    c144:	f7f5 f99c 	bl	1480 <printk>
    c148:	4040      	eors	r0, r0
    c14a:	f380 8811 	msr	BASEPRI, r0
    c14e:	f04f 0004 	mov.w	r0, #4
    c152:	df02      	svc	2
			  (ticker_status == TICKER_STATUS_BUSY));
	}

	/* flush and release, data packet before ctrl */
	while ((conn->pkt_tx_head != conn->pkt_tx_ctrl) &&
    c154:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
    c158:	4299      	cmp	r1, r3
    c15a:	d01e      	beq.n	c19a <connection_release+0xd2>
		/* By setting it resv, when app gets num cmplt, no num cmplt
		 * is counted, but the buffer is released
		 */
		node_tx = conn->pkt_tx_head;
		pdu_data_tx = (struct pdu_data *)node_tx->pdu_data;
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    c15c:	790b      	ldrb	r3, [r1, #4]
    c15e:	f36f 0301 	bfc	r3, #0, #2
    c162:	710b      	strb	r3, [r1, #4]

		conn->pkt_tx_head = conn->pkt_tx_head->next;
    c164:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104

		pdu_node_tx_release(conn->handle, node_tx);
    c168:	8c20      	ldrh	r0, [r4, #32]
		 */
		node_tx = conn->pkt_tx_head;
		pdu_data_tx = (struct pdu_data *)node_tx->pdu_data;
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;

		conn->pkt_tx_head = conn->pkt_tx_head->next;
    c16a:	681b      	ldr	r3, [r3, #0]
    c16c:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104

		pdu_node_tx_release(conn->handle, node_tx);
    c170:	f7ff fe3c 	bl	bdec <pdu_node_tx_release>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
			  (ticker_status == TICKER_STATUS_BUSY));
	}

	/* flush and release, data packet before ctrl */
	while ((conn->pkt_tx_head != conn->pkt_tx_ctrl) &&
    c174:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
    c178:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    c17c:	4299      	cmp	r1, r3
    c17e:	d1e9      	bne.n	c154 <connection_release+0x8c>
    c180:	e00b      	b.n	c19a <connection_release+0xd2>

		pdu_node_tx_release(conn->handle, node_tx);
	}

	/* flush and release, ctrl packet before data */
	while ((conn->pkt_tx_head) &&
    c182:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
    c186:	4298      	cmp	r0, r3
    c188:	d00b      	beq.n	c1a2 <connection_release+0xda>
	       (conn->pkt_tx_head != conn->pkt_tx_data)) {
		void *release;

		release = conn->pkt_tx_head;
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    c18a:	6803      	ldr	r3, [r0, #0]
    c18c:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
		conn->pkt_tx_ctrl = conn->pkt_tx_head;
    c190:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108

		mem_release(release, &_radio.pkt_tx_ctrl_free);
    c194:	491b      	ldr	r1, [pc, #108]	; (c204 <connection_release+0x13c>)
    c196:	f7fd fb72 	bl	987e <mem_release>

		pdu_node_tx_release(conn->handle, node_tx);
	}

	/* flush and release, ctrl packet before data */
	while ((conn->pkt_tx_head) &&
    c19a:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    c19e:	2800      	cmp	r0, #0
    c1a0:	d1ef      	bne.n	c182 <connection_release+0xba>
		conn->pkt_tx_head = conn->pkt_tx_head->next;
		conn->pkt_tx_ctrl = conn->pkt_tx_head;

		mem_release(release, &_radio.pkt_tx_ctrl_free);
	}
	conn->pkt_tx_ctrl = NULL;
    c1a2:	2300      	movs	r3, #0
    c1a4:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108

	/* flush and release, rest of data */
	while (conn->pkt_tx_head) {
    c1a8:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
    c1ac:	b171      	cbz	r1, c1cc <connection_release+0x104>
		/* By setting it resv, when app gets num cmplt, no num cmplt
		 * is counted, but the buffer is released
		 */
		node_tx = conn->pkt_tx_head;
		pdu_data_tx = (struct pdu_data *)node_tx->pdu_data;
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    c1ae:	790b      	ldrb	r3, [r1, #4]
    c1b0:	f36f 0301 	bfc	r3, #0, #2
    c1b4:	710b      	strb	r3, [r1, #4]

		conn->pkt_tx_head = conn->pkt_tx_head->next;
    c1b6:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
		conn->pkt_tx_data = conn->pkt_tx_head;

		pdu_node_tx_release(conn->handle, node_tx);
    c1ba:	8c20      	ldrh	r0, [r4, #32]
		 */
		node_tx = conn->pkt_tx_head;
		pdu_data_tx = (struct pdu_data *)node_tx->pdu_data;
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;

		conn->pkt_tx_head = conn->pkt_tx_head->next;
    c1bc:	681b      	ldr	r3, [r3, #0]
    c1be:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
		conn->pkt_tx_data = conn->pkt_tx_head;
    c1c2:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c

		pdu_node_tx_release(conn->handle, node_tx);
    c1c6:	f7ff fe11 	bl	bdec <pdu_node_tx_release>
    c1ca:	e7ed      	b.n	c1a8 <connection_release+0xe0>
	}

	conn->handle = 0xffff;
    c1cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
    c1d0:	8423      	strh	r3, [r4, #32]

	/* reset mutex */
	if (_radio.conn_upd == conn) {
    c1d2:	f8d5 3204 	ldr.w	r3, [r5, #516]	; 0x204
    c1d6:	429c      	cmp	r4, r3
		_radio.conn_upd = NULL;
    c1d8:	bf04      	itt	eq
    c1da:	4b03      	ldreq	r3, [pc, #12]	; (c1e8 <connection_release+0x120>)
    c1dc:	f8c3 1204 	streq.w	r1, [r3, #516]	; 0x204
	}
}
    c1e0:	b003      	add	sp, #12
    c1e2:	bd30      	pop	{r4, r5, pc}
    c1e4:	0000b971 	.word	0x0000b971
    c1e8:	20001470 	.word	0x20001470
    c1ec:	00013df4 	.word	0x00013df4
    c1f0:	00013df9 	.word	0x00013df9
    c1f4:	00013db4 	.word	0x00013db4
    c1f8:	00016b28 	.word	0x00016b28
    c1fc:	00013dbb 	.word	0x00013dbb
    c200:	000154fb 	.word	0x000154fb
    c204:	20001648 	.word	0x20001648

0000c208 <chan_set>:
#endif /* RADIO_UNIT_TEST */
#endif /* CONFIG_BLUETOOTH_CONTROLLER_CHAN_SEL_2 */

static void chan_set(u32_t chan)
{
	switch (chan) {
    c208:	2826      	cmp	r0, #38	; 0x26
}
#endif /* RADIO_UNIT_TEST */
#endif /* CONFIG_BLUETOOTH_CONTROLLER_CHAN_SEL_2 */

static void chan_set(u32_t chan)
{
    c20a:	b513      	push	{r0, r1, r4, lr}
    c20c:	4604      	mov	r4, r0
	switch (chan) {
    c20e:	d005      	beq.n	c21c <chan_set+0x14>
    c210:	2827      	cmp	r0, #39	; 0x27
    c212:	d005      	beq.n	c220 <chan_set+0x18>
    c214:	2825      	cmp	r0, #37	; 0x25
    c216:	d105      	bne.n	c224 <chan_set+0x1c>
	case 37:
		radio_freq_chan_set(2);
    c218:	2002      	movs	r0, #2
    c21a:	e007      	b.n	c22c <chan_set+0x24>
		break;

	case 38:
		radio_freq_chan_set(26);
    c21c:	201a      	movs	r0, #26
    c21e:	e005      	b.n	c22c <chan_set+0x24>
		break;

	case 39:
		radio_freq_chan_set(80);
    c220:	2050      	movs	r0, #80	; 0x50
    c222:	e003      	b.n	c22c <chan_set+0x24>
		break;

	default:
		if (chan < 11) {
    c224:	280a      	cmp	r0, #10
    c226:	d809      	bhi.n	c23c <chan_set+0x34>
			radio_freq_chan_set(4 + (2 * chan));
    c228:	3002      	adds	r0, #2
    c22a:	0040      	lsls	r0, r0, #1
    c22c:	f7fd fc72 	bl	9b14 <radio_freq_chan_set>
			LL_ASSERT(0);
		}
		break;
	}

	radio_whiten_iv_set(chan);
    c230:	4620      	mov	r0, r4
}
    c232:	b002      	add	sp, #8
    c234:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			LL_ASSERT(0);
		}
		break;
	}

	radio_whiten_iv_set(chan);
    c238:	f7fd bc72 	b.w	9b20 <radio_whiten_iv_set>
		break;

	default:
		if (chan < 11) {
			radio_freq_chan_set(4 + (2 * chan));
		} else if (chan < 40) {
    c23c:	2827      	cmp	r0, #39	; 0x27
    c23e:	d801      	bhi.n	c244 <chan_set+0x3c>
			radio_freq_chan_set(28 + (2 * (chan - 11)));
    c240:	3003      	adds	r0, #3
    c242:	e7f2      	b.n	c22a <chan_set+0x22>
		} else {
			LL_ASSERT(0);
    c244:	4b07      	ldr	r3, [pc, #28]	; (c264 <chan_set+0x5c>)
    c246:	9301      	str	r3, [sp, #4]
    c248:	4b07      	ldr	r3, [pc, #28]	; (c268 <chan_set+0x60>)
    c24a:	9300      	str	r3, [sp, #0]
    c24c:	4a07      	ldr	r2, [pc, #28]	; (c26c <chan_set+0x64>)
    c24e:	4b08      	ldr	r3, [pc, #32]	; (c270 <chan_set+0x68>)
    c250:	4908      	ldr	r1, [pc, #32]	; (c274 <chan_set+0x6c>)
    c252:	4809      	ldr	r0, [pc, #36]	; (c278 <chan_set+0x70>)
    c254:	f7f5 f914 	bl	1480 <printk>
    c258:	4040      	eors	r0, r0
    c25a:	f380 8811 	msr	BASEPRI, r0
    c25e:	f04f 0004 	mov.w	r0, #4
    c262:	df02      	svc	2
    c264:	00013df4 	.word	0x00013df4
    c268:	00013df9 	.word	0x00013df9
    c26c:	00013db4 	.word	0x00013db4
    c270:	00016a21 	.word	0x00016a21
    c274:	00013dbb 	.word	0x00013dbb
    c278:	00014409 	.word	0x00014409

0000c27c <adv_setup>:

	DEBUG_RADIO_PREPARE_A(0);
}

static void adv_setup(void)
{
    c27c:	b570      	push	{r4, r5, r6, lr}
	u8_t bitmap;
	u8_t chan;
	u8_t upd = 0;

	/* Use latest adv data PDU buffer */
	if (_radio.advertiser.adv_data.first !=
    c27e:	4c32      	ldr	r4, [pc, #200]	; (c348 <adv_setup+0xcc>)
    c280:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
    c284:	f894 20f5 	ldrb.w	r2, [r4, #245]	; 0xf5
    c288:	429a      	cmp	r2, r3
    c28a:	d008      	beq.n	c29e <adv_setup+0x22>
	    _radio.advertiser.adv_data.last) {
		u8_t first;

		first = _radio.advertiser.adv_data.first + 1;
    c28c:	3301      	adds	r3, #1
    c28e:	b2db      	uxtb	r3, r3
		if (first == DOUBLE_BUFFER_SIZE) {
			first = 0;
    c290:	2b02      	cmp	r3, #2
    c292:	bf08      	it	eq
    c294:	2300      	moveq	r3, #0
		}
		_radio.advertiser.adv_data.first = first;
    c296:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
		upd = 1;
    c29a:	2201      	movs	r2, #1
    c29c:	e000      	b.n	c2a0 <adv_setup+0x24>
static void adv_setup(void)
{
	struct pdu_adv *pdu;
	u8_t bitmap;
	u8_t chan;
	u8_t upd = 0;
    c29e:	2200      	movs	r2, #0
		_radio.advertiser.adv_data.first = first;
		upd = 1;
	}

	/* Use latest scan data PDU buffer */
	if (_radio.advertiser.scan_data.first != _radio.
    c2a0:	f894 3144 	ldrb.w	r3, [r4, #324]	; 0x144
    c2a4:	f894 1145 	ldrb.w	r1, [r4, #325]	; 0x145
    c2a8:	4299      	cmp	r1, r3
    c2aa:	d007      	beq.n	c2bc <adv_setup+0x40>
	    advertiser.scan_data.last) {
		u8_t first;

		first = _radio.advertiser.scan_data.first + 1;
    c2ac:	3301      	adds	r3, #1
    c2ae:	b2db      	uxtb	r3, r3
		if (first == DOUBLE_BUFFER_SIZE) {
			first = 0;
    c2b0:	2b02      	cmp	r3, #2
    c2b2:	bf08      	it	eq
    c2b4:	2300      	moveq	r3, #0
		}
		_radio.advertiser.scan_data.first = first;
    c2b6:	f884 3144 	strb.w	r3, [r4, #324]	; 0x144
		upd = 1;
    c2ba:	2201      	movs	r2, #1
	}

	pdu = (struct pdu_adv *)
    c2bc:	f894 50f4 	ldrb.w	r5, [r4, #244]	; 0xf4
    c2c0:	4921      	ldr	r1, [pc, #132]	; (c348 <adv_setup+0xcc>)
    c2c2:	2027      	movs	r0, #39	; 0x27
    c2c4:	fb00 4505 	mla	r5, r0, r5, r4
    c2c8:	35a0      	adds	r5, #160	; 0xa0
    c2ca:	1dae      	adds	r6, r5, #6
		_radio.advertiser.adv_data.data[
			_radio.advertiser.adv_data.first];
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	if (upd) {
    c2cc:	b14a      	cbz	r2, c2e2 <adv_setup+0x66>
		struct pdu_adv *scan_pdu = (struct pdu_adv *)
    c2ce:	f891 3144 	ldrb.w	r3, [r1, #324]	; 0x144
    c2d2:	fb00 1003 	mla	r0, r0, r3, r1
			_radio.advertiser.scan_data.first];

		/* Copy the address from the adv packet we will send into the
		 * scan response.
		 */
		memcpy(&scan_pdu->payload.scan_rsp.addr[0],
    c2d6:	2206      	movs	r2, #6
    c2d8:	f105 0108 	add.w	r1, r5, #8
    c2dc:	30f8      	adds	r0, #248	; 0xf8
    c2de:	f7f4 fed8 	bl	1092 <memcpy>
		       &pdu->payload.adv_ind.addr[0], BDADDR_SIZE);
	}
#else
	ARG_UNUSED(upd);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */
	radio_pkt_tx_set(pdu);
    c2e2:	4630      	mov	r0, r6
    c2e4:	f7fd fc64 	bl	9bb0 <radio_pkt_tx_set>
	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
    c2e8:	79ab      	ldrb	r3, [r5, #6]
    c2ea:	f003 030f 	and.w	r3, r3, #15
    c2ee:	2b02      	cmp	r3, #2
    c2f0:	d00a      	beq.n	c308 <adv_setup+0x8c>
    c2f2:	2b07      	cmp	r3, #7
    c2f4:	d008      	beq.n	c308 <adv_setup+0x8c>
	    (!IS_ENABLED(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT) ||
	     (pdu->type != PDU_ADV_TYPE_EXT_IND))) {
		_radio.state = STATE_TX;
    c2f6:	2302      	movs	r3, #2
		radio_tmr_tifs_set(RADIO_TIFS);
    c2f8:	2096      	movs	r0, #150	; 0x96
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */
	radio_pkt_tx_set(pdu);
	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
	    (!IS_ENABLED(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT) ||
	     (pdu->type != PDU_ADV_TYPE_EXT_IND))) {
		_radio.state = STATE_TX;
    c2fa:	7423      	strb	r3, [r4, #16]
		radio_tmr_tifs_set(RADIO_TIFS);
    c2fc:	f7fd fd58 	bl	9db0 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    c300:	2000      	movs	r0, #0
    c302:	f7fd fcc9 	bl	9c98 <radio_switch_complete_and_rx>
    c306:	e003      	b.n	c310 <adv_setup+0x94>
	} else {
		_radio.state = STATE_CLOSE;
    c308:	2303      	movs	r3, #3
    c30a:	7423      	strb	r3, [r4, #16]
		radio_switch_complete_and_disable();
    c30c:	f7fd fcd4 	bl	9cb8 <radio_switch_complete_and_disable>
	}

	bitmap = _radio.advertiser.chl_map_current;
    c310:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    c314:	f3c3 0342 	ubfx	r3, r3, #1, #3
    c318:	b2da      	uxtb	r2, r3
    c31a:	4611      	mov	r1, r2
	chan = 0;
	while ((bitmap & 0x01) == 0) {
    c31c:	2000      	movs	r0, #0
    c31e:	07ce      	lsls	r6, r1, #31
    c320:	f100 0501 	add.w	r5, r0, #1
    c324:	d402      	bmi.n	c32c <adv_setup+0xb0>
		chan++;
		bitmap >>= 1;
    c326:	0849      	lsrs	r1, r1, #1
    c328:	4628      	mov	r0, r5
    c32a:	e7f8      	b.n	c31e <adv_setup+0xa2>
	}
	_radio.advertiser.chl_map_current &=
    c32c:	3a01      	subs	r2, #1
    c32e:	4013      	ands	r3, r2
    c330:	f894 20a4 	ldrb.w	r2, [r4, #164]	; 0xa4
		(_radio.advertiser.chl_map_current - 1);

	chan_set(37 + chan);
    c334:	b2c0      	uxtb	r0, r0
	chan = 0;
	while ((bitmap & 0x01) == 0) {
		chan++;
		bitmap >>= 1;
	}
	_radio.advertiser.chl_map_current &=
    c336:	f363 0243 	bfi	r2, r3, #1, #3
    c33a:	f884 20a4 	strb.w	r2, [r4, #164]	; 0xa4
		(_radio.advertiser.chl_map_current - 1);

	chan_set(37 + chan);
    c33e:	3025      	adds	r0, #37	; 0x25
}
    c340:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bitmap >>= 1;
	}
	_radio.advertiser.chl_map_current &=
		(_radio.advertiser.chl_map_current - 1);

	chan_set(37 + chan);
    c344:	f7ff bf60 	b.w	c208 <chan_set>
    c348:	20001470 	.word	0x20001470

0000c34c <isr_rx_scan_report>:

	return 1;
}

static u32_t isr_rx_scan_report(u8_t rssi_ready)
{
    c34c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    c34e:	4606      	mov	r6, r0
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	struct pdu_adv *pdu_adv_rx;

	radio_pdu_node_rx = packet_rx_reserve_get(3);
    c350:	2003      	movs	r0, #3
    c352:	f7fe fed5 	bl	b100 <packet_rx_reserve_get>
	if (radio_pdu_node_rx == 0) {
    c356:	2800      	cmp	r0, #0
    c358:	d032      	beq.n	c3c0 <isr_rx_scan_report+0x74>
		return 1;
	}

	/* Prepare the report (adv or scan resp) */
	radio_pdu_node_rx->hdr.handle = 0xffff;
    c35a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    c35e:	80c3      	strh	r3, [r0, #6]
	if (0) {
#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
	} else if (_radio.scanner.phy) {
    c360:	4b19      	ldr	r3, [pc, #100]	; (c3c8 <isr_rx_scan_report+0x7c>)
    c362:	f893 315d 	ldrb.w	r3, [r3, #349]	; 0x15d
    c366:	075a      	lsls	r2, r3, #29
    c368:	d018      	beq.n	c39c <isr_rx_scan_report+0x50>
		switch (_radio.scanner.phy) {
    c36a:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c36e:	b2da      	uxtb	r2, r3
    c370:	2a01      	cmp	r2, #1
    c372:	d011      	beq.n	c398 <isr_rx_scan_report+0x4c>
    c374:	2a04      	cmp	r2, #4
    c376:	d012      	beq.n	c39e <isr_rx_scan_report+0x52>
			radio_pdu_node_rx->hdr.type =
				NODE_RX_TYPE_EXT_CODED_REPORT;
			break;

		default:
			LL_ASSERT(0);
    c378:	4b14      	ldr	r3, [pc, #80]	; (c3cc <isr_rx_scan_report+0x80>)
    c37a:	9301      	str	r3, [sp, #4]
    c37c:	4b14      	ldr	r3, [pc, #80]	; (c3d0 <isr_rx_scan_report+0x84>)
    c37e:	9300      	str	r3, [sp, #0]
    c380:	4a14      	ldr	r2, [pc, #80]	; (c3d4 <isr_rx_scan_report+0x88>)
    c382:	4b15      	ldr	r3, [pc, #84]	; (c3d8 <isr_rx_scan_report+0x8c>)
    c384:	4915      	ldr	r1, [pc, #84]	; (c3dc <isr_rx_scan_report+0x90>)
    c386:	4816      	ldr	r0, [pc, #88]	; (c3e0 <isr_rx_scan_report+0x94>)
    c388:	f7f5 f87a 	bl	1480 <printk>
    c38c:	4040      	eors	r0, r0
    c38e:	f380 8811 	msr	BASEPRI, r0
    c392:	f04f 0004 	mov.w	r0, #4
    c396:	df02      	svc	2
	if (0) {
#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
	} else if (_radio.scanner.phy) {
		switch (_radio.scanner.phy) {
		case BIT(0):
			radio_pdu_node_rx->hdr.type =
    c398:	2303      	movs	r3, #3
    c39a:	e000      	b.n	c39e <isr_rx_scan_report+0x52>
			LL_ASSERT(0);
			break;
		}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */
	} else {
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    c39c:	2302      	movs	r3, #2
	}

	/* save the RSSI value */
	pdu_adv_rx = (struct pdu_adv *)radio_pdu_node_rx->pdu_data;
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
    c39e:	7a44      	ldrb	r4, [r0, #9]
			LL_ASSERT(0);
			break;
		}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */
	} else {
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    c3a0:	7103      	strb	r3, [r0, #4]
	}

	/* save the RSSI value */
	pdu_adv_rx = (struct pdu_adv *)radio_pdu_node_rx->pdu_data;
    c3a2:	f100 0508 	add.w	r5, r0, #8
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
    c3a6:	3402      	adds	r4, #2
			     pdu_adv_rx->len] =
    c3a8:	b126      	cbz	r6, c3b4 <isr_rx_scan_report+0x68>
		(rssi_ready) ? (radio_rssi_get() & 0x7f) : 0x7f;
    c3aa:	f7fd fc97 	bl	9cdc <radio_rssi_get>
	}

	/* save the RSSI value */
	pdu_adv_rx = (struct pdu_adv *)radio_pdu_node_rx->pdu_data;
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
			     pdu_adv_rx->len] =
    c3ae:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    c3b2:	e000      	b.n	c3b6 <isr_rx_scan_report+0x6a>
    c3b4:	207f      	movs	r0, #127	; 0x7f
    c3b6:	5528      	strb	r0, [r5, r4]
		(rssi_ready) ? (radio_rssi_get() & 0x7f) : 0x7f;

	packet_rx_enqueue();
    c3b8:	f7ff fa70 	bl	b89c <packet_rx_enqueue>

	return 0;
    c3bc:	2000      	movs	r0, #0
    c3be:	e000      	b.n	c3c2 <isr_rx_scan_report+0x76>
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	struct pdu_adv *pdu_adv_rx;

	radio_pdu_node_rx = packet_rx_reserve_get(3);
	if (radio_pdu_node_rx == 0) {
		return 1;
    c3c0:	2001      	movs	r0, #1
		(rssi_ready) ? (radio_rssi_get() & 0x7f) : 0x7f;

	packet_rx_enqueue();

	return 0;
}
    c3c2:	b002      	add	sp, #8
    c3c4:	bd70      	pop	{r4, r5, r6, pc}
    c3c6:	bf00      	nop
    c3c8:	20001470 	.word	0x20001470
    c3cc:	00013df4 	.word	0x00013df4
    c3d0:	00013df9 	.word	0x00013df9
    c3d4:	00013db4 	.word	0x00013db4
    c3d8:	00016943 	.word	0x00016943
    c3dc:	00013dbb 	.word	0x00013dbb
    c3e0:	00014409 	.word	0x00014409
    c3e4:	00000000 	.word	0x00000000

0000c3e8 <isr_rx_scan>:

static inline u32_t isr_rx_scan(u8_t irkmatch_id, u8_t rssi_ready)
{
    c3e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct pdu_adv *pdu_adv_rx;

	pdu_adv_rx = (struct pdu_adv *)
		_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
    c3ec:	4fc8      	ldr	r7, [pc, #800]	; (c710 <isr_rx_scan+0x328>)
    c3ee:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
    c3f2:	f897 21bd 	ldrb.w	r2, [r7, #445]	; 0x1bd

	return 0;
}

static inline u32_t isr_rx_scan(u8_t irkmatch_id, u8_t rssi_ready)
{
    c3f6:	b093      	sub	sp, #76	; 0x4c
	struct pdu_adv *pdu_adv_rx;

	pdu_adv_rx = (struct pdu_adv *)
		_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
    c3f8:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]

	/* Initiator */
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    c3fc:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c

	return 0;
}

static inline u32_t isr_rx_scan(u8_t irkmatch_id, u8_t rssi_ready)
{
    c400:	9010      	str	r0, [sp, #64]	; 0x40
    c402:	460c      	mov	r4, r1

	pdu_adv_rx = (struct pdu_adv *)
		_radio.packet_rx[_radio.packet_rx_last]->pdu_data;

	/* Initiator */
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    c404:	2b00      	cmp	r3, #0
    c406:	f000 8216 	beq.w	c836 <isr_rx_scan+0x44e>
    c40a:	f897 31fe 	ldrb.w	r3, [r7, #510]	; 0x1fe
    c40e:	b133      	cbz	r3, c41e <isr_rx_scan+0x36>
				      (_radio.fc_req == _radio.fc_ack)) &&
    c410:	f897 31fc 	ldrb.w	r3, [r7, #508]	; 0x1fc

	pdu_adv_rx = (struct pdu_adv *)
		_radio.packet_rx[_radio.packet_rx_last]->pdu_data;

	/* Initiator */
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    c414:	f897 21fd 	ldrb.w	r2, [r7, #509]	; 0x1fd
    c418:	429a      	cmp	r2, r3
    c41a:	f040 820c 	bne.w	c836 <isr_rx_scan+0x44e>
				      (_radio.fc_req == _radio.fc_ack)) &&
    c41e:	7a33      	ldrb	r3, [r6, #8]
    c420:	0718      	lsls	r0, r3, #28
    c422:	d006      	beq.n	c432 <isr_rx_scan+0x4a>
	    (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) &&
	      (((_radio.scanner.filter_policy & 0x01) != 0) ||
	       ((_radio.scanner.adv_addr_type == pdu_adv_rx->tx_addr) &&
		(memcmp(&_radio.scanner.adv_addr[0],
			&pdu_adv_rx->payload.adv_ind.addr[0],
			BDADDR_SIZE) == 0)))) ||
    c424:	7a33      	ldrb	r3, [r6, #8]
    c426:	f003 020f 	and.w	r2, r3, #15
    c42a:	2a01      	cmp	r2, #1
    c42c:	f040 8203 	bne.w	c836 <isr_rx_scan+0x44e>
    c430:	e02c      	b.n	c48c <isr_rx_scan+0xa4>

	/* Initiator */
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
				      (_radio.fc_req == _radio.fc_ack)) &&
	    (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) &&
	      (((_radio.scanner.filter_policy & 0x01) != 0) ||
    c432:	f897 215d 	ldrb.w	r2, [r7, #349]	; 0x15d
		_radio.packet_rx[_radio.packet_rx_last]->pdu_data;

	/* Initiator */
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
				      (_radio.fc_req == _radio.fc_ack)) &&
	    (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) &&
    c436:	06d1      	lsls	r1, r2, #27
    c438:	d519      	bpl.n	c46e <isr_rx_scan+0x86>
		*/
	       (((_radio.scanner.filter_policy & 0x02) != 0) &&
		(pdu_adv_rx->rx_addr != 0) &&
		((pdu_adv_rx->payload.direct_ind.tgt_addr[5] & 0xc0) ==
		 0x40))))) &&
	    ((radio_tmr_end_get() + 502) <
    c43a:	f7fd fd79 	bl	9f30 <radio_tmr_end_get>
		* is resolvable private address
		*/
	       (((_radio.scanner.filter_policy & 0x02) != 0) &&
		(pdu_adv_rx->rx_addr != 0) &&
		((pdu_adv_rx->payload.direct_ind.tgt_addr[5] & 0xc0) ==
		 0x40))))) &&
    c43e:	4db5      	ldr	r5, [pc, #724]	; (c714 <isr_rx_scan+0x32c>)
    c440:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
	    ((radio_tmr_end_get() + 502) <
	     TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot))) {
    c444:	f8df 92c8 	ldr.w	r9, [pc, #712]	; c710 <isr_rx_scan+0x328>
		* is resolvable private address
		*/
	       (((_radio.scanner.filter_policy & 0x02) != 0) &&
		(pdu_adv_rx->rx_addr != 0) &&
		((pdu_adv_rx->payload.direct_ind.tgt_addr[5] & 0xc0) ==
		 0x40))))) &&
    c448:	f500 78fb 	add.w	r8, r0, #502	; 0x1f6
    c44c:	2207      	movs	r2, #7
    c44e:	fba3 0105 	umull	r0, r1, r3, r5
    c452:	fb02 1103 	mla	r1, r2, r3, r1
    c456:	a3ac      	add	r3, pc, #688	; (adr r3, c708 <isr_rx_scan+0x320>)
    c458:	e9d3 2300 	ldrd	r2, r3, [r3]
    c45c:	f7f3 feda 	bl	214 <__aeabi_uldivmod>
    c460:	4580      	cmp	r8, r0
    c462:	f04f 0a00 	mov.w	sl, #0
    c466:	950e      	str	r5, [sp, #56]	; 0x38
    c468:	f080 81e5 	bcs.w	c836 <isr_rx_scan+0x44e>
    c46c:	e02d      	b.n	c4ca <isr_rx_scan+0xe2>

	/* Initiator */
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
				      (_radio.fc_req == _radio.fc_ack)) &&
	    (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) &&
	      (((_radio.scanner.filter_policy & 0x01) != 0) ||
    c46e:	f3c2 1280 	ubfx	r2, r2, #6, #1
    c472:	f3c3 1380 	ubfx	r3, r3, #6, #1
    c476:	429a      	cmp	r2, r3
    c478:	d1d4      	bne.n	c424 <isr_rx_scan+0x3c>
	       ((_radio.scanner.adv_addr_type == pdu_adv_rx->tx_addr) &&
		(memcmp(&_radio.scanner.adv_addr[0],
    c47a:	2206      	movs	r2, #6
    c47c:	f106 010a 	add.w	r1, r6, #10
    c480:	48a5      	ldr	r0, [pc, #660]	; (c718 <isr_rx_scan+0x330>)
    c482:	f7f4 fdd6 	bl	1032 <memcmp>
	/* Initiator */
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
				      (_radio.fc_req == _radio.fc_ack)) &&
	    (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) &&
	      (((_radio.scanner.filter_policy & 0x01) != 0) ||
	       ((_radio.scanner.adv_addr_type == pdu_adv_rx->tx_addr) &&
    c486:	2800      	cmp	r0, #0
    c488:	d0d7      	beq.n	c43a <isr_rx_scan+0x52>
    c48a:	e7cb      	b.n	c424 <isr_rx_scan+0x3c>
		(memcmp(&_radio.scanner.adv_addr[0],
			&pdu_adv_rx->payload.adv_ind.addr[0],
			BDADDR_SIZE) == 0)))) ||
	     ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
	      (/* allow directed adv packets addressed to this device */
	       ((_radio.scanner.init_addr_type == pdu_adv_rx->rx_addr) &&
    c48c:	f897 215d 	ldrb.w	r2, [r7, #349]	; 0x15d
	      (((_radio.scanner.filter_policy & 0x01) != 0) ||
	       ((_radio.scanner.adv_addr_type == pdu_adv_rx->tx_addr) &&
		(memcmp(&_radio.scanner.adv_addr[0],
			&pdu_adv_rx->payload.adv_ind.addr[0],
			BDADDR_SIZE) == 0)))) ||
	     ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
    c490:	09db      	lsrs	r3, r3, #7
    c492:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    c496:	d004      	beq.n	c4a2 <isr_rx_scan+0xba>
			&pdu_adv_rx->payload.direct_ind.tgt_addr[0],
			BDADDR_SIZE) == 0)) ||
	       /* allow directed adv packets where initiator address
		* is resolvable private address
		*/
	       (((_radio.scanner.filter_policy & 0x02) != 0) &&
    c498:	f897 315d 	ldrb.w	r3, [r7, #349]	; 0x15d
	     ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
	      (/* allow directed adv packets addressed to this device */
	       ((_radio.scanner.init_addr_type == pdu_adv_rx->rx_addr) &&
		(memcmp(&_radio.scanner.init_addr[0],
			&pdu_adv_rx->payload.direct_ind.tgt_addr[0],
			BDADDR_SIZE) == 0)) ||
    c49c:	069d      	lsls	r5, r3, #26
    c49e:	d409      	bmi.n	c4b4 <isr_rx_scan+0xcc>
    c4a0:	e1c9      	b.n	c836 <isr_rx_scan+0x44e>
			&pdu_adv_rx->payload.adv_ind.addr[0],
			BDADDR_SIZE) == 0)))) ||
	     ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
	      (/* allow directed adv packets addressed to this device */
	       ((_radio.scanner.init_addr_type == pdu_adv_rx->rx_addr) &&
		(memcmp(&_radio.scanner.init_addr[0],
    c4a2:	2206      	movs	r2, #6
    c4a4:	f106 0110 	add.w	r1, r6, #16
    c4a8:	489c      	ldr	r0, [pc, #624]	; (c71c <isr_rx_scan+0x334>)
    c4aa:	f7f4 fdc2 	bl	1032 <memcmp>
		(memcmp(&_radio.scanner.adv_addr[0],
			&pdu_adv_rx->payload.adv_ind.addr[0],
			BDADDR_SIZE) == 0)))) ||
	     ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
	      (/* allow directed adv packets addressed to this device */
	       ((_radio.scanner.init_addr_type == pdu_adv_rx->rx_addr) &&
    c4ae:	2800      	cmp	r0, #0
    c4b0:	d0c3      	beq.n	c43a <isr_rx_scan+0x52>
    c4b2:	e7f1      	b.n	c498 <isr_rx_scan+0xb0>
			&pdu_adv_rx->payload.direct_ind.tgt_addr[0],
			BDADDR_SIZE) == 0)) ||
	       /* allow directed adv packets where initiator address
		* is resolvable private address
		*/
	       (((_radio.scanner.filter_policy & 0x02) != 0) &&
    c4b4:	7a33      	ldrb	r3, [r6, #8]
    c4b6:	0618      	lsls	r0, r3, #24
    c4b8:	f140 81bd 	bpl.w	c836 <isr_rx_scan+0x44e>
		(pdu_adv_rx->rx_addr != 0) &&
    c4bc:	7d73      	ldrb	r3, [r6, #21]
    c4be:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    c4c2:	2b40      	cmp	r3, #64	; 0x40
    c4c4:	f040 81b7 	bne.w	c836 <isr_rx_scan+0x44e>
    c4c8:	e7b7      	b.n	c43a <isr_rx_scan+0x52>
		u32_t conn_offset_us;
		u32_t ticker_status;
		u32_t conn_space_us;

		if (IS_ENABLED(CONFIG_BLUETOOTH_CONTROLLER_CHAN_SEL_2)) {
			radio_pdu_node_rx = packet_rx_reserve_get(4);
    c4ca:	2004      	movs	r0, #4
    c4cc:	f7fe fe18 	bl	b100 <packet_rx_reserve_get>
		} else {
			radio_pdu_node_rx = packet_rx_reserve_get(3);
		}

		if (radio_pdu_node_rx == 0) {
    c4d0:	4680      	mov	r8, r0
    c4d2:	2800      	cmp	r0, #0
    c4d4:	f000 8240 	beq.w	c958 <isr_rx_scan+0x570>
			return 1;
		}

		_radio.state = STATE_STOP;
    c4d8:	f04f 0b04 	mov.w	fp, #4

		/* acquire the master context from scanner */
		conn = _radio.scanner.conn;
    c4dc:	f8d9 417c 	ldr.w	r4, [r9, #380]	; 0x17c

		if (radio_pdu_node_rx == 0) {
			return 1;
		}

		_radio.state = STATE_STOP;
    c4e0:	f889 b010 	strb.w	fp, [r9, #16]

		/* acquire the master context from scanner */
		conn = _radio.scanner.conn;
		_radio.scanner.conn = NULL;
    c4e4:	f8c9 a17c 	str.w	sl, [r9, #380]	; 0x17c

		/* Tx the connect request packet */
		pdu_adv_tx = (struct pdu_adv *)radio_pkt_scratch_get();
    c4e8:	f7fd fbd2 	bl	9c90 <radio_pkt_scratch_get>
		pdu_adv_tx->type = PDU_ADV_TYPE_CONNECT_IND;
    c4ec:	7803      	ldrb	r3, [r0, #0]

		if (IS_ENABLED(CONFIG_BLUETOOTH_CONTROLLER_CHAN_SEL_2)) {
			pdu_adv_tx->chan_sel = 1;
    c4ee:	f003 03d0 	and.w	r3, r3, #208	; 0xd0
    c4f2:	f043 0325 	orr.w	r3, r3, #37	; 0x25
    c4f6:	7003      	strb	r3, [r0, #0]
		} else {
			pdu_adv_tx->chan_sel = 0;
		}

		pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    c4f8:	f899 315d 	ldrb.w	r3, [r9, #349]	; 0x15d
    c4fc:	7802      	ldrb	r2, [r0, #0]
    c4fe:	09db      	lsrs	r3, r3, #7
    c500:	f363 1286 	bfi	r2, r3, #6, #1
    c504:	7002      	strb	r2, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    c506:	7a33      	ldrb	r3, [r6, #8]
    c508:	b2d2      	uxtb	r2, r2
    c50a:	f3c3 1380 	ubfx	r3, r3, #6, #1
    c50e:	f363 12c7 	bfi	r2, r3, #7, #1
		pdu_adv_tx->len = sizeof(struct pdu_adv_payload_connect_ind);
    c512:	2322      	movs	r3, #34	; 0x22
    c514:	7043      	strb	r3, [r0, #1]
		memcpy(&pdu_adv_tx->payload.connect_ind.init_addr[0],
    c516:	1c83      	adds	r3, r0, #2
		/* acquire the master context from scanner */
		conn = _radio.scanner.conn;
		_radio.scanner.conn = NULL;

		/* Tx the connect request packet */
		pdu_adv_tx = (struct pdu_adv *)radio_pkt_scratch_get();
    c518:	4605      	mov	r5, r0
		} else {
			pdu_adv_tx->chan_sel = 0;
		}

		pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    c51a:	7002      	strb	r2, [r0, #0]
		pdu_adv_tx->len = sizeof(struct pdu_adv_payload_connect_ind);
		memcpy(&pdu_adv_tx->payload.connect_ind.init_addr[0],
    c51c:	f509 71b2 	add.w	r1, r9, #356	; 0x164
    c520:	2206      	movs	r2, #6
    c522:	4618      	mov	r0, r3
    c524:	930f      	str	r3, [sp, #60]	; 0x3c
    c526:	f7f4 fdb4 	bl	1092 <memcpy>
		       &_radio.scanner.init_addr[0], BDADDR_SIZE);
		memcpy(&pdu_adv_tx->payload.connect_ind.adv_addr[0],
    c52a:	f105 0308 	add.w	r3, r5, #8
    c52e:	4618      	mov	r0, r3
    c530:	2206      	movs	r2, #6
    c532:	f106 010a 	add.w	r1, r6, #10
    c536:	930a      	str	r3, [sp, #40]	; 0x28
    c538:	f7f4 fdab 	bl	1092 <memcpy>
			 &pdu_adv_rx->payload.adv_ind.addr[0], BDADDR_SIZE);
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.
    c53c:	465a      	mov	r2, fp
    c53e:	f104 0110 	add.w	r1, r4, #16
    c542:	f105 000e 	add.w	r0, r5, #14
    c546:	f7f4 fda4 	bl	1092 <memcpy>
		       access_addr[0], &conn->access_addr[0], 4);
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.crc_init[0],
    c54a:	f104 0114 	add.w	r1, r4, #20
    c54e:	2203      	movs	r2, #3
    c550:	f105 0012 	add.w	r0, r5, #18
    c554:	f7f4 fd9d 	bl	1092 <memcpy>
		       &conn->crc_init[0], 3);
		pdu_adv_tx->payload.connect_ind.lldata. win_size = 1;
    c558:	2301      	movs	r3, #1
    c55a:	756b      	strb	r3, [r5, #21]

		conn_interval_us =
    c55c:	f8b9 3170 	ldrh.w	r3, [r9, #368]	; 0x170
    c560:	f240 42e2 	movw	r2, #1250	; 0x4e2
    c564:	4353      	muls	r3, r2
    c566:	930d      	str	r3, [sp, #52]	; 0x34
			(u32_t)_radio.scanner.conn_interval * 1250;

		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
    c568:	f7fd fce2 	bl	9f30 <radio_tmr_end_get>
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
    c56c:	4651      	mov	r1, sl
		pdu_adv_tx->payload.connect_ind.lldata. win_size = 1;

		conn_interval_us =
			(u32_t)_radio.scanner.conn_interval * 1250;

		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
    c56e:	f500 6bdb 	add.w	fp, r0, #1752	; 0x6d8
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
    c572:	4650      	mov	r0, sl
    c574:	f7fd fb24 	bl	9bc0 <radio_tx_chain_delay_get>
		conn_offset_us -= radio_tx_ready_delay_get(0, 0);
    c578:	4651      	mov	r1, sl

		conn_interval_us =
			(u32_t)_radio.scanner.conn_interval * 1250;

		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
    c57a:	ebc0 0b0b 	rsb	fp, r0, fp
		conn_offset_us -= radio_tx_ready_delay_get(0, 0);
    c57e:	4650      	mov	r0, sl
    c580:	f7fd fb1c 	bl	9bbc <radio_tx_ready_delay_get>
    c584:	ebc0 000b 	rsb	r0, r0, fp

		if (_radio.scanner.win_offset_us == 0) {
    c588:	f8d9 b180 	ldr.w	fp, [r9, #384]	; 0x180
    c58c:	f1bb 0f00 	cmp.w	fp, #0
    c590:	d107      	bne.n	c5a2 <isr_rx_scan+0x1ba>
			conn_space_us = conn_offset_us;
			pdu_adv_tx->payload.connect_ind.lldata.win_offset = 0;
    c592:	f885 b016 	strb.w	fp, [r5, #22]
    c596:	f885 b017 	strb.w	fp, [r5, #23]
		conn_interval_us =
			(u32_t)_radio.scanner.conn_interval * 1250;

		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
		conn_offset_us -= radio_tx_ready_delay_get(0, 0);
    c59a:	4683      	mov	fp, r0
    c59c:	e00d      	b.n	c5ba <isr_rx_scan+0x1d2>
			pdu_adv_tx->payload.connect_ind.lldata.win_offset = 0;
		} else {
			conn_space_us = _radio.scanner.win_offset_us;
			while ((conn_space_us & ((u32_t)1 << 31)) ||
			       (conn_space_us < conn_offset_us)) {
				conn_space_us += conn_interval_us;
    c59e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    c5a0:	449b      	add	fp, r3
		if (_radio.scanner.win_offset_us == 0) {
			conn_space_us = conn_offset_us;
			pdu_adv_tx->payload.connect_ind.lldata.win_offset = 0;
		} else {
			conn_space_us = _radio.scanner.win_offset_us;
			while ((conn_space_us & ((u32_t)1 << 31)) ||
    c5a2:	f1bb 0f00 	cmp.w	fp, #0
    c5a6:	dbfa      	blt.n	c59e <isr_rx_scan+0x1b6>
    c5a8:	4583      	cmp	fp, r0
    c5aa:	d3f8      	bcc.n	c59e <isr_rx_scan+0x1b6>
			       (conn_space_us < conn_offset_us)) {
				conn_space_us += conn_interval_us;
			}
			pdu_adv_tx->payload.connect_ind.lldata.win_offset =
    c5ac:	ebc0 000b 	rsb	r0, r0, fp
    c5b0:	f240 43e2 	movw	r3, #1250	; 0x4e2
    c5b4:	fbb0 f0f3 	udiv	r0, r0, r3
    c5b8:	82e8      	strh	r0, [r5, #22]
				(conn_space_us - conn_offset_us) / 1250;
		}

		pdu_adv_tx->payload.connect_ind.lldata.interval =
    c5ba:	f8b7 3170 	ldrh.w	r3, [r7, #368]	; 0x170
    c5be:	832b      	strh	r3, [r5, #24]
			_radio.scanner.conn_interval;
		pdu_adv_tx->payload.connect_ind.lldata.latency =
    c5c0:	f8b7 3172 	ldrh.w	r3, [r7, #370]	; 0x172
    c5c4:	836b      	strh	r3, [r5, #26]
			_radio.scanner.conn_latency;
		pdu_adv_tx->payload.connect_ind.lldata.timeout =
    c5c6:	f8b7 3174 	ldrh.w	r3, [r7, #372]	; 0x174
    c5ca:	83ab      	strh	r3, [r5, #28]
			_radio.scanner.conn_timeout;
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.chan_map[0],
    c5cc:	f104 0117 	add.w	r1, r4, #23
    c5d0:	2205      	movs	r2, #5
    c5d2:	f105 001e 	add.w	r0, r5, #30
    c5d6:	f7f4 fd5c 	bl	1092 <memcpy>
		       &conn->data_chan_map[0],
		       sizeof(pdu_adv_tx->payload.connect_ind.lldata.chan_map));
		pdu_adv_tx->payload.connect_ind.lldata.hop =
    c5da:	7fa2      	ldrb	r2, [r4, #30]
    c5dc:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
			pdu_adv_tx->payload.connect_ind.lldata.win_offset =
				(conn_space_us - conn_offset_us) / 1250;
		}

		pdu_adv_tx->payload.connect_ind.lldata.interval =
			_radio.scanner.conn_interval;
    c5e0:	f8df 912c 	ldr.w	r9, [pc, #300]	; c710 <isr_rx_scan+0x328>
		pdu_adv_tx->payload.connect_ind.lldata.timeout =
			_radio.scanner.conn_timeout;
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.chan_map[0],
		       &conn->data_chan_map[0],
		       sizeof(pdu_adv_tx->payload.connect_ind.lldata.chan_map));
		pdu_adv_tx->payload.connect_ind.lldata.hop =
    c5e4:	f362 0304 	bfi	r3, r2, #0, #5
    c5e8:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
			conn->data_chan_hop;
		pdu_adv_tx->payload.connect_ind.lldata.sca = _radio.sca;
    c5ec:	f897 219c 	ldrb.w	r2, [r7, #412]	; 0x19c
    c5f0:	f362 1347 	bfi	r3, r2, #5, #3
    c5f4:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23

		radio_switch_complete_and_disable();
    c5f8:	f7fd fb5e 	bl	9cb8 <radio_switch_complete_and_disable>

		radio_pkt_tx_set(pdu_adv_tx);
    c5fc:	4628      	mov	r0, r5
    c5fe:	f7fd fad7 	bl	9bb0 <radio_pkt_tx_set>

		/* assert if radio packet ptr is not set and radio started tx */
		LL_ASSERT(!radio_is_ready());
    c602:	f7fd fb0d 	bl	9c20 <radio_is_ready>
    c606:	b140      	cbz	r0, c61a <isr_rx_scan+0x232>
    c608:	4b45      	ldr	r3, [pc, #276]	; (c720 <isr_rx_scan+0x338>)
    c60a:	9301      	str	r3, [sp, #4]
    c60c:	4b45      	ldr	r3, [pc, #276]	; (c724 <isr_rx_scan+0x33c>)
    c60e:	9300      	str	r3, [sp, #0]
    c610:	4a45      	ldr	r2, [pc, #276]	; (c728 <isr_rx_scan+0x340>)
    c612:	4b46      	ldr	r3, [pc, #280]	; (c72c <isr_rx_scan+0x344>)
    c614:	4946      	ldr	r1, [pc, #280]	; (c730 <isr_rx_scan+0x348>)
    c616:	4847      	ldr	r0, [pc, #284]	; (c734 <isr_rx_scan+0x34c>)
    c618:	e052      	b.n	c6c0 <isr_rx_scan+0x2d8>
    c61a:	9011      	str	r0, [sp, #68]	; 0x44

		radio_tmr_end_capture();
    c61c:	f7fd fc76 	bl	9f0c <radio_tmr_end_capture>
		 * {cpu_sleep();}
		 * radio_status_reset();
		 */

		/* Populate the master context */
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    c620:	f44f 728c 	mov.w	r2, #280	; 0x118
    c624:	f8d9 1184 	ldr.w	r1, [r9, #388]	; 0x184
    c628:	4620      	mov	r0, r4
    c62a:	f7fd f948 	bl	98be <mem_index_get>
					     CONNECTION_T_SIZE);

		/* Prepare the rx packet structure */
		radio_pdu_node_rx->hdr.handle = conn->handle;
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    c62e:	f04f 0a06 	mov.w	sl, #6

		/* prepare connection complete structure */
		pdu_data = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
		radio_le_conn_cmplt =
		    (struct radio_le_conn_cmplt *)&pdu_data->payload;
		radio_le_conn_cmplt->status = 0x00;
    c632:	9b11      	ldr	r3, [sp, #68]	; 0x44
		 * {cpu_sleep();}
		 * radio_status_reset();
		 */

		/* Populate the master context */
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    c634:	8420      	strh	r0, [r4, #32]
					     CONNECTION_T_SIZE);

		/* Prepare the rx packet structure */
		radio_pdu_node_rx->hdr.handle = conn->handle;
    c636:	f8a8 0006 	strh.w	r0, [r8, #6]
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    c63a:	f888 a004 	strb.w	sl, [r8, #4]

		/* prepare connection complete structure */
		pdu_data = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
		radio_le_conn_cmplt =
		    (struct radio_le_conn_cmplt *)&pdu_data->payload;
		radio_le_conn_cmplt->status = 0x00;
    c63e:	f888 300b 	strb.w	r3, [r8, #11]
		radio_le_conn_cmplt->role = 0x00;
    c642:	f888 300c 	strb.w	r3, [r8, #12]
		radio_le_conn_cmplt->peer_addr_type = pdu_adv_tx->rx_addr;
    c646:	782b      	ldrb	r3, [r5, #0]
		memcpy(&radio_le_conn_cmplt->peer_addr[0],
    c648:	990a      	ldr	r1, [sp, #40]	; 0x28
		pdu_data = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
		radio_le_conn_cmplt =
		    (struct radio_le_conn_cmplt *)&pdu_data->payload;
		radio_le_conn_cmplt->status = 0x00;
		radio_le_conn_cmplt->role = 0x00;
		radio_le_conn_cmplt->peer_addr_type = pdu_adv_tx->rx_addr;
    c64a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    c64e:	f888 300d 	strb.w	r3, [r8, #13]
		memcpy(&radio_le_conn_cmplt->peer_addr[0],
    c652:	4652      	mov	r2, sl
    c654:	f108 000e 	add.w	r0, r8, #14
    c658:	f7f4 fd1b 	bl	1092 <memcpy>
		       &pdu_adv_tx->payload.connect_ind.adv_addr[0],
		       BDADDR_SIZE);
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
    c65c:	782b      	ldrb	r3, [r5, #0]
		memcpy(&radio_le_conn_cmplt->own_addr[0],
    c65e:	990f      	ldr	r1, [sp, #60]	; 0x3c
		radio_le_conn_cmplt->role = 0x00;
		radio_le_conn_cmplt->peer_addr_type = pdu_adv_tx->rx_addr;
		memcpy(&radio_le_conn_cmplt->peer_addr[0],
		       &pdu_adv_tx->payload.connect_ind.adv_addr[0],
		       BDADDR_SIZE);
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
    c660:	f3c3 1380 	ubfx	r3, r3, #6, #1
		memcpy(&radio_le_conn_cmplt->own_addr[0],
    c664:	4652      	mov	r2, sl
		radio_le_conn_cmplt->role = 0x00;
		radio_le_conn_cmplt->peer_addr_type = pdu_adv_tx->rx_addr;
		memcpy(&radio_le_conn_cmplt->peer_addr[0],
		       &pdu_adv_tx->payload.connect_ind.adv_addr[0],
		       BDADDR_SIZE);
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
    c666:	f888 3014 	strb.w	r3, [r8, #20]
		memcpy(&radio_le_conn_cmplt->own_addr[0],
    c66a:	f108 0015 	add.w	r0, r8, #21
    c66e:	f7f4 fd10 	bl	1092 <memcpy>
		       &pdu_adv_tx->payload.connect_ind.init_addr[0],
		       BDADDR_SIZE);
		radio_le_conn_cmplt->peer_irk_index = irkmatch_id;
    c672:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    c676:	f888 301b 	strb.w	r3, [r8, #27]
		radio_le_conn_cmplt->interval = _radio.scanner.conn_interval;
    c67a:	f8b9 3170 	ldrh.w	r3, [r9, #368]	; 0x170
    c67e:	f8a8 301c 	strh.w	r3, [r8, #28]
		radio_le_conn_cmplt->latency = _radio.scanner. conn_latency;
    c682:	f8b9 3172 	ldrh.w	r3, [r9, #370]	; 0x172
    c686:	f8a8 301e 	strh.w	r3, [r8, #30]
		radio_le_conn_cmplt->timeout = _radio.scanner.conn_timeout;
    c68a:	f8b9 3174 	ldrh.w	r3, [r9, #372]	; 0x174
    c68e:	f8a8 3020 	strh.w	r3, [r8, #32]
		radio_le_conn_cmplt->mca =
			pdu_adv_tx->payload.connect_ind.lldata.sca;
    c692:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    c696:	f3c3 1342 	ubfx	r3, r3, #5, #3
		       BDADDR_SIZE);
		radio_le_conn_cmplt->peer_irk_index = irkmatch_id;
		radio_le_conn_cmplt->interval = _radio.scanner.conn_interval;
		radio_le_conn_cmplt->latency = _radio.scanner. conn_latency;
		radio_le_conn_cmplt->timeout = _radio.scanner.conn_timeout;
		radio_le_conn_cmplt->mca =
    c69a:	f888 3022 	strb.w	r3, [r8, #34]	; 0x22
			pdu_adv_tx->payload.connect_ind.lldata.sca;

		/* enqueue connection complete structure into queue */
		rx_fc_lock(conn->handle);
    c69e:	8c20      	ldrh	r0, [r4, #32]
    c6a0:	f7ff f94c 	bl	b93c <rx_fc_lock>
		packet_rx_enqueue();
    c6a4:	f7ff f8fa 	bl	b89c <packet_rx_enqueue>
		/* Use Channel Selection Algorithm #2 if peer too supports it */
		if (IS_ENABLED(CONFIG_BLUETOOTH_CONTROLLER_CHAN_SEL_2)) {
			struct radio_le_chan_sel_algo *le_chan_sel_algo;

			/* Generate LE Channel Selection Algorithm event */
			radio_pdu_node_rx = packet_rx_reserve_get(3);
    c6a8:	2003      	movs	r0, #3
    c6aa:	f7fe fd29 	bl	b100 <packet_rx_reserve_get>
			LL_ASSERT(radio_pdu_node_rx);
    c6ae:	b978      	cbnz	r0, c6d0 <isr_rx_scan+0x2e8>
    c6b0:	4b1b      	ldr	r3, [pc, #108]	; (c720 <isr_rx_scan+0x338>)
    c6b2:	9301      	str	r3, [sp, #4]
    c6b4:	4b1b      	ldr	r3, [pc, #108]	; (c724 <isr_rx_scan+0x33c>)
    c6b6:	9300      	str	r3, [sp, #0]
    c6b8:	4a1b      	ldr	r2, [pc, #108]	; (c728 <isr_rx_scan+0x340>)
    c6ba:	4b1c      	ldr	r3, [pc, #112]	; (c72c <isr_rx_scan+0x344>)
    c6bc:	491c      	ldr	r1, [pc, #112]	; (c730 <isr_rx_scan+0x348>)
    c6be:	481e      	ldr	r0, [pc, #120]	; (c738 <isr_rx_scan+0x350>)
    c6c0:	f7f4 fede 	bl	1480 <printk>
    c6c4:	4040      	eors	r0, r0
    c6c6:	f380 8811 	msr	BASEPRI, r0
    c6ca:	f04f 0004 	mov.w	r0, #4
    c6ce:	df02      	svc	2

			radio_pdu_node_rx->hdr.handle = conn->handle;
    c6d0:	8c23      	ldrh	r3, [r4, #32]
    c6d2:	80c3      	strh	r3, [r0, #6]
			radio_pdu_node_rx->hdr.type =
    c6d4:	230b      	movs	r3, #11
    c6d6:	7103      	strb	r3, [r0, #4]
			pdu_data = (struct pdu_data *)
				radio_pdu_node_rx->pdu_data;
			le_chan_sel_algo = (struct radio_le_chan_sel_algo *)
				&pdu_data->payload;

			if (pdu_adv_rx->chan_sel) {
    c6d8:	7a33      	ldrb	r3, [r6, #8]
    c6da:	f003 0320 	and.w	r3, r3, #32
    c6de:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    c6e2:	b35b      	cbz	r3, c73c <isr_rx_scan+0x354>
				u16_t aa_ls =
    c6e4:	7c23      	ldrb	r3, [r4, #16]
    c6e6:	7c61      	ldrb	r1, [r4, #17]
					((u16_t)conn->access_addr[1] << 8) |
					conn->access_addr[0];
				u16_t aa_ms =
    c6e8:	7ca2      	ldrb	r2, [r4, #18]
				radio_pdu_node_rx->pdu_data;
			le_chan_sel_algo = (struct radio_le_chan_sel_algo *)
				&pdu_data->payload;

			if (pdu_adv_rx->chan_sel) {
				u16_t aa_ls =
    c6ea:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
					((u16_t)conn->access_addr[1] << 8) |
					conn->access_addr[0];
				u16_t aa_ms =
    c6ee:	7ce3      	ldrb	r3, [r4, #19]
    c6f0:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
					((u16_t)conn->access_addr[3] << 8) |
					 conn->access_addr[2];

				conn->data_chan_sel = 1;
    c6f4:	7f22      	ldrb	r2, [r4, #28]
				conn->data_chan_id = aa_ms ^ aa_ls;
    c6f6:	404b      	eors	r3, r1
    c6f8:	83e3      	strh	r3, [r4, #30]
					conn->access_addr[0];
				u16_t aa_ms =
					((u16_t)conn->access_addr[3] << 8) |
					 conn->access_addr[2];

				conn->data_chan_sel = 1;
    c6fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
				conn->data_chan_id = aa_ms ^ aa_ls;

				le_chan_sel_algo->chan_sel_algo = 0x01;
    c6fe:	2301      	movs	r3, #1
					conn->access_addr[0];
				u16_t aa_ms =
					((u16_t)conn->access_addr[3] << 8) |
					 conn->access_addr[2];

				conn->data_chan_sel = 1;
    c700:	7722      	strb	r2, [r4, #28]
				conn->data_chan_id = aa_ms ^ aa_ls;

				le_chan_sel_algo->chan_sel_algo = 0x01;
    c702:	72c3      	strb	r3, [r0, #11]
    c704:	e01b      	b.n	c73e <isr_rx_scan+0x356>
    c706:	bf00      	nop
    c708:	3b9aca00 	.word	0x3b9aca00
    c70c:	00000000 	.word	0x00000000
    c710:	20001470 	.word	0x20001470
    c714:	1afd498d 	.word	0x1afd498d
    c718:	200015ce 	.word	0x200015ce
    c71c:	200015d4 	.word	0x200015d4
    c720:	00013df4 	.word	0x00013df4
    c724:	00013df9 	.word	0x00013df9
    c728:	00013db4 	.word	0x00013db4
    c72c:	0001698b 	.word	0x0001698b
    c730:	00013dbb 	.word	0x00013dbb
    c734:	0001563c 	.word	0x0001563c
    c738:	00015549 	.word	0x00015549
			} else {
				le_chan_sel_algo->chan_sel_algo = 0x00;
    c73c:	72c2      	strb	r2, [r0, #11]
			}

			packet_rx_enqueue();
    c73e:	f7ff f8ad 	bl	b89c <packet_rx_enqueue>
		}

		/* Calculate master slot */
		conn->hdr.ticks_slot = _radio.scanner.ticks_conn_slot;
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    c742:	f8d7 6200 	ldr.w	r6, [r7, #512]	; 0x200

			packet_rx_enqueue();
		}

		/* Calculate master slot */
		conn->hdr.ticks_slot = _radio.scanner.ticks_conn_slot;
    c746:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
    c74a:	60e3      	str	r3, [r4, #12]
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
		conn->hdr.ticks_xtal_to_start =
    c74c:	2327      	movs	r3, #39	; 0x27
			TICKER_US_TO_TICKS(RADIO_TICKER_XTAL_OFFSET_US);
		conn->hdr.ticks_preempt_to_start =
			TICKER_US_TO_TICKS(RADIO_TICKER_PREEMPT_PART_MIN_US);
		ticks_slot_offset =
    c74e:	429e      	cmp	r6, r3
		/* Calculate master slot */
		conn->hdr.ticks_slot = _radio.scanner.ticks_conn_slot;
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
		conn->hdr.ticks_xtal_to_start =
			TICKER_US_TO_TICKS(RADIO_TICKER_XTAL_OFFSET_US);
		conn->hdr.ticks_preempt_to_start =
    c750:	f04f 0500 	mov.w	r5, #0
			packet_rx_enqueue();
		}

		/* Calculate master slot */
		conn->hdr.ticks_slot = _radio.scanner.ticks_conn_slot;
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    c754:	6066      	str	r6, [r4, #4]
		conn->hdr.ticks_xtal_to_start =
    c756:	6023      	str	r3, [r4, #0]
			TICKER_US_TO_TICKS(RADIO_TICKER_XTAL_OFFSET_US);
		conn->hdr.ticks_preempt_to_start =
			TICKER_US_TO_TICKS(RADIO_TICKER_PREEMPT_PART_MIN_US);
		ticks_slot_offset =
    c758:	bf38      	it	cc
    c75a:	461e      	movcc	r6, r3
			 conn->hdr.ticks_xtal_to_start) ?
			conn->hdr.ticks_xtal_to_start :
			conn->hdr.ticks_active_to_start;

		/* Stop Scanner */
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    c75c:	f240 43d7 	movw	r3, #1239	; 0x4d7
    c760:	2206      	movs	r2, #6
		/* Calculate master slot */
		conn->hdr.ticks_slot = _radio.scanner.ticks_conn_slot;
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
		conn->hdr.ticks_xtal_to_start =
			TICKER_US_TO_TICKS(RADIO_TICKER_XTAL_OFFSET_US);
		conn->hdr.ticks_preempt_to_start =
    c762:	60a5      	str	r5, [r4, #8]
			 conn->hdr.ticks_xtal_to_start) ?
			conn->hdr.ticks_xtal_to_start :
			conn->hdr.ticks_active_to_start;

		/* Stop Scanner */
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    c764:	4629      	mov	r1, r5
    c766:	9300      	str	r3, [sp, #0]
    c768:	4628      	mov	r0, r5
    c76a:	4b81      	ldr	r3, [pc, #516]	; (c970 <isr_rx_scan+0x588>)
				     RADIO_TICKER_USER_ID_WORKER,
				     RADIO_TICKER_ID_FIRST_CONNECTION +
				     conn->handle,
				     (_radio.ticks_anchor - ticks_slot_offset),
				     TICKER_US_TO_TICKS(conn_space_us),
				     TICKER_US_TO_TICKS(conn_interval_us),
    c76c:	f8df a228 	ldr.w	sl, [pc, #552]	; c998 <isr_rx_scan+0x5b0>
			 conn->hdr.ticks_xtal_to_start) ?
			conn->hdr.ticks_xtal_to_start :
			conn->hdr.ticks_active_to_start;

		/* Stop Scanner */
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    c770:	f7fe fba0 	bl	aeb4 <ticker_stop>
					    RADIO_TICKER_USER_ID_WORKER,
					    RADIO_TICKER_ID_SCAN,
					    ticker_stop_scan_assert,
					    (void *)__LINE__);
		ticker_stop_scan_assert(ticker_status, (void *)__LINE__);
    c774:	f44f 619b 	mov.w	r1, #1240	; 0x4d8
    c778:	f7ff f948 	bl	ba0c <ticker_stop_scan_assert>

		/* Scanner stop can expire while here in this ISR.
		 * Deferred attempt to stop can fail as it would have
		 * expired, hence ignore failure.
		 */
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    c77c:	462b      	mov	r3, r5
    c77e:	2204      	movs	r2, #4
    c780:	4629      	mov	r1, r5
    c782:	9500      	str	r5, [sp, #0]
    c784:	4628      	mov	r0, r5
    c786:	f7fe fb95 	bl	aeb4 <ticker_stop>
				     RADIO_TICKER_USER_ID_WORKER,
				     RADIO_TICKER_ID_FIRST_CONNECTION +
				     conn->handle,
				     (_radio.ticks_anchor - ticks_slot_offset),
				     TICKER_US_TO_TICKS(conn_space_us),
				     TICKER_US_TO_TICKS(conn_interval_us),
    c78a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    c78c:	fba3 230a 	umull	r2, r3, r3, sl
    c790:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    c794:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    c798:	a373      	add	r3, pc, #460	; (adr r3, c968 <isr_rx_scan+0x580>)
    c79a:	e9d3 2300 	ldrd	r2, r3, [r3]
    c79e:	f7f3 fd39 	bl	214 <__aeabi_uldivmod>
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
			    RADIO_TICKER_USER_ID_WORKER,
			    RADIO_TICKER_ID_SCAN_STOP, NULL, NULL);

		/* Start master */
		ticker_status =
    c7a2:	687b      	ldr	r3, [r7, #4]
    c7a4:	f894 7020 	ldrb.w	r7, [r4, #32]
    c7a8:	9406      	str	r4, [sp, #24]
    c7aa:	3707      	adds	r7, #7
    c7ac:	ebc6 0803 	rsb	r8, r6, r3
    c7b0:	b2fb      	uxtb	r3, r7
    c7b2:	930d      	str	r3, [sp, #52]	; 0x34
    c7b4:	f240 43ef 	movw	r3, #1263	; 0x4ef
    c7b8:	9308      	str	r3, [sp, #32]
    c7ba:	4b6e      	ldr	r3, [pc, #440]	; (c974 <isr_rx_scan+0x58c>)
    c7bc:	9307      	str	r3, [sp, #28]
    c7be:	4b6e      	ldr	r3, [pc, #440]	; (c978 <isr_rx_scan+0x590>)
    c7c0:	9305      	str	r3, [sp, #20]
    c7c2:	68e3      	ldr	r3, [r4, #12]
    c7c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    c7c6:	9503      	str	r5, [sp, #12]
    c7c8:	441e      	add	r6, r3
    c7ca:	b2b6      	uxth	r6, r6
    c7cc:	9604      	str	r6, [sp, #16]
    c7ce:	2307      	movs	r3, #7
    c7d0:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
    c7d4:	4343      	muls	r3, r0
    c7d6:	fb02 3301 	mla	r3, r2, r1, r3
				     RADIO_TICKER_USER_ID_WORKER,
				     RADIO_TICKER_ID_FIRST_CONNECTION +
				     conn->handle,
				     (_radio.ticks_anchor - ticks_slot_offset),
				     TICKER_US_TO_TICKS(conn_space_us),
				     TICKER_US_TO_TICKS(conn_interval_us),
    c7da:	4681      	mov	r9, r0
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
			    RADIO_TICKER_USER_ID_WORKER,
			    RADIO_TICKER_ID_SCAN_STOP, NULL, NULL);

		/* Start master */
		ticker_status =
    c7dc:	fba0 0102 	umull	r0, r1, r0, r2
    c7e0:	1a36      	subs	r6, r6, r0
    c7e2:	4419      	add	r1, r3
    c7e4:	eb67 0701 	sbc.w	r7, r7, r1
    c7e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    c7ec:	2300      	movs	r3, #0
    c7ee:	4630      	mov	r0, r6
    c7f0:	4639      	mov	r1, r7
    c7f2:	f7f3 fd0f 	bl	214 <__aeabi_uldivmod>
    c7f6:	a35c      	add	r3, pc, #368	; (adr r3, c968 <isr_rx_scan+0x580>)
    c7f8:	e9d3 2300 	ldrd	r2, r3, [r3]
    c7fc:	9002      	str	r0, [sp, #8]
    c7fe:	fbab 010a 	umull	r0, r1, fp, sl
    c802:	f8cd 9004 	str.w	r9, [sp, #4]
    c806:	f7f3 fd05 	bl	214 <__aeabi_uldivmod>
    c80a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    c80e:	9000      	str	r0, [sp, #0]
    c810:	4643      	mov	r3, r8
    c812:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    c814:	4629      	mov	r1, r5
    c816:	4628      	mov	r0, r5
    c818:	f7fe fabe 	bl	ad98 <ticker_start>
				     TICKER_REMAINDER(conn_interval_us),
				     TICKER_NULL_LAZY,
				     (ticks_slot_offset + conn->hdr.ticks_slot),
				     event_master_prepare, conn,
				     ticker_success_assert, (void *)__LINE__);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    c81c:	f030 0002 	bics.w	r0, r0, #2
    c820:	f000 809d 	beq.w	c95e <isr_rx_scan+0x576>
    c824:	4b55      	ldr	r3, [pc, #340]	; (c97c <isr_rx_scan+0x594>)
    c826:	9301      	str	r3, [sp, #4]
    c828:	4b55      	ldr	r3, [pc, #340]	; (c980 <isr_rx_scan+0x598>)
    c82a:	9300      	str	r3, [sp, #0]
    c82c:	4a55      	ldr	r2, [pc, #340]	; (c984 <isr_rx_scan+0x59c>)
    c82e:	4b56      	ldr	r3, [pc, #344]	; (c988 <isr_rx_scan+0x5a0>)
    c830:	4956      	ldr	r1, [pc, #344]	; (c98c <isr_rx_scan+0x5a4>)
    c832:	4857      	ldr	r0, [pc, #348]	; (c990 <isr_rx_scan+0x5a8>)
    c834:	e744      	b.n	c6c0 <isr_rx_scan+0x2d8>

		return 0;
	}

	/* Active scanner */
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    c836:	7a33      	ldrb	r3, [r6, #8]
    c838:	f013 020f 	ands.w	r2, r3, #15
    c83c:	d001      	beq.n	c842 <isr_rx_scan+0x45a>
    c83e:	2a06      	cmp	r2, #6
    c840:	d14d      	bne.n	c8de <isr_rx_scan+0x4f6>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
    c842:	f897 115d 	ldrb.w	r1, [r7, #349]	; 0x15d
		 (_radio.scanner.type != 0) &&
    c846:	f8df 8154 	ldr.w	r8, [pc, #340]	; c99c <isr_rx_scan+0x5b4>
		return 0;
	}

	/* Active scanner */
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
    c84a:	0709      	lsls	r1, r1, #28
    c84c:	d543      	bpl.n	c8d6 <isr_rx_scan+0x4ee>
		 (_radio.scanner.type != 0) &&
    c84e:	f8d8 117c 	ldr.w	r1, [r8, #380]	; 0x17c
    c852:	2900      	cmp	r1, #0
    c854:	d13f      	bne.n	c8d6 <isr_rx_scan+0x4ee>
		 (_radio.scanner.conn == 0)) {
		struct pdu_adv *pdu_adv_tx;
		u32_t err;

		/* save the adv packet */
		err = isr_rx_scan_report(rssi_ready);
    c856:	4620      	mov	r0, r4
    c858:	f7ff fd78 	bl	c34c <isr_rx_scan_report>
		if (err) {
    c85c:	4604      	mov	r4, r0
    c85e:	2800      	cmp	r0, #0
    c860:	d17c      	bne.n	c95c <isr_rx_scan+0x574>
			return err;
		}

		/* prepare the scan request packet */
		pdu_adv_tx = (struct pdu_adv *)radio_pkt_scratch_get();
    c862:	f7fd fa15 	bl	9c90 <radio_pkt_scratch_get>
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    c866:	7803      	ldrb	r3, [r0, #0]
    c868:	2203      	movs	r2, #3
    c86a:	f362 0303 	bfi	r3, r2, #0, #4
    c86e:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    c870:	f898 315d 	ldrb.w	r3, [r8, #349]	; 0x15d
    c874:	7802      	ldrb	r2, [r0, #0]
    c876:	09db      	lsrs	r3, r3, #7
    c878:	f363 1286 	bfi	r2, r3, #6, #1
    c87c:	7002      	strb	r2, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    c87e:	7a33      	ldrb	r3, [r6, #8]
    c880:	b2d2      	uxtb	r2, r2
    c882:	f3c3 1380 	ubfx	r3, r3, #6, #1
    c886:	f363 12c7 	bfi	r2, r3, #7, #1
		pdu_adv_tx->len = sizeof(struct pdu_adv_payload_scan_req);
    c88a:	230c      	movs	r3, #12
		if (err) {
			return err;
		}

		/* prepare the scan request packet */
		pdu_adv_tx = (struct pdu_adv *)radio_pkt_scratch_get();
    c88c:	4605      	mov	r5, r0
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
		pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
		pdu_adv_tx->len = sizeof(struct pdu_adv_payload_scan_req);
    c88e:	7043      	strb	r3, [r0, #1]

		/* prepare the scan request packet */
		pdu_adv_tx = (struct pdu_adv *)radio_pkt_scratch_get();
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
		pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    c890:	7002      	strb	r2, [r0, #0]
		pdu_adv_tx->len = sizeof(struct pdu_adv_payload_scan_req);
		memcpy(&pdu_adv_tx->payload.scan_req.scan_addr[0],
    c892:	f508 71b2 	add.w	r1, r8, #356	; 0x164
    c896:	2206      	movs	r2, #6
    c898:	3002      	adds	r0, #2
    c89a:	f7f4 fbfa 	bl	1092 <memcpy>
		       &_radio.scanner.init_addr[0], BDADDR_SIZE);
		memcpy(&pdu_adv_tx->payload.scan_req.adv_addr[0],
    c89e:	2206      	movs	r2, #6
    c8a0:	f106 010a 	add.w	r1, r6, #10
    c8a4:	f105 0008 	add.w	r0, r5, #8
    c8a8:	f7f4 fbf3 	bl	1092 <memcpy>
		       &pdu_adv_rx->payload.adv_ind.addr[0], BDADDR_SIZE);

		/* switch scanner state to active */
		_radio.scanner.state = 1;
    c8ac:	f898 315c 	ldrb.w	r3, [r8, #348]	; 0x15c
    c8b0:	f043 0302 	orr.w	r3, r3, #2
    c8b4:	f888 315c 	strb.w	r3, [r8, #348]	; 0x15c
		_radio.state = STATE_TX;

		radio_tmr_tifs_set(RADIO_TIFS);
    c8b8:	2096      	movs	r0, #150	; 0x96
		memcpy(&pdu_adv_tx->payload.scan_req.adv_addr[0],
		       &pdu_adv_rx->payload.adv_ind.addr[0], BDADDR_SIZE);

		/* switch scanner state to active */
		_radio.scanner.state = 1;
		_radio.state = STATE_TX;
    c8ba:	2302      	movs	r3, #2
    c8bc:	f888 3010 	strb.w	r3, [r8, #16]

		radio_tmr_tifs_set(RADIO_TIFS);
    c8c0:	f7fd fa76 	bl	9db0 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    c8c4:	4620      	mov	r0, r4
    c8c6:	f7fd f9e7 	bl	9c98 <radio_switch_complete_and_rx>
		radio_pkt_tx_set(pdu_adv_tx);
    c8ca:	4628      	mov	r0, r5
    c8cc:	f7fd f970 	bl	9bb0 <radio_pkt_tx_set>
		radio_tmr_end_capture();
    c8d0:	f7fd fb1c 	bl	9f0c <radio_tmr_end_capture>
    c8d4:	e042      	b.n	c95c <isr_rx_scan+0x574>

		return 0;
	}
	/* Passive scanner or scan responses */
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    c8d6:	b912      	cbnz	r2, c8de <isr_rx_scan+0x4f6>
#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND) &&
		   (_radio.scanner.phy)) ||
#endif /* CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
		   (_radio.scanner.state != 0))) &&
    c8d8:	7a73      	ldrb	r3, [r6, #9]
    c8da:	bbb3      	cbnz	r3, c94a <isr_rx_scan+0x562>
    c8dc:	e03c      	b.n	c958 <isr_rx_scan+0x570>
		radio_tmr_end_capture();

		return 0;
	}
	/* Passive scanner or scan responses */
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    c8de:	2a01      	cmp	r2, #1
    c8e0:	d005      	beq.n	c8ee <isr_rx_scan+0x506>
		     * is resolvable private address
		     */
		    (((_radio.scanner.filter_policy & 0x02) != 0) &&
		     (pdu_adv_rx->rx_addr != 0) &&
		     ((pdu_adv_rx->payload.direct_ind.tgt_addr[5] & 0xc0) == 0x40)))) ||
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
    c8e2:	7a33      	ldrb	r3, [r6, #8]
		    /* allow directed adv packets where initiator address
		     * is resolvable private address
		     */
		    (((_radio.scanner.filter_policy & 0x02) != 0) &&
		     (pdu_adv_rx->rx_addr != 0) &&
		     ((pdu_adv_rx->payload.direct_ind.tgt_addr[5] & 0xc0) == 0x40)))) ||
    c8e4:	f003 020b 	and.w	r2, r3, #11
    c8e8:	2a02      	cmp	r2, #2
    c8ea:	d11d      	bne.n	c928 <isr_rx_scan+0x540>
    c8ec:	e7f4      	b.n	c8d8 <isr_rx_scan+0x4f0>
	}
	/* Passive scanner or scan responses */
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
		   (/* allow directed adv packets addressed to this device */
		    ((_radio.scanner.init_addr_type == pdu_adv_rx->rx_addr) &&
    c8ee:	f897 215d 	ldrb.w	r2, [r7, #349]	; 0x15d

		return 0;
	}
	/* Passive scanner or scan responses */
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
    c8f2:	09db      	lsrs	r3, r3, #7
    c8f4:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    c8f8:	d004      	beq.n	c904 <isr_rx_scan+0x51c>
			     &pdu_adv_rx->payload.direct_ind.tgt_addr[0],
			     BDADDR_SIZE) == 0)) ||
		    /* allow directed adv packets where initiator address
		     * is resolvable private address
		     */
		    (((_radio.scanner.filter_policy & 0x02) != 0) &&
    c8fa:	f897 315d 	ldrb.w	r3, [r7, #349]	; 0x15d
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
		   (/* allow directed adv packets addressed to this device */
		    ((_radio.scanner.init_addr_type == pdu_adv_rx->rx_addr) &&
		     (memcmp(&_radio.scanner.init_addr[0],
			     &pdu_adv_rx->payload.direct_ind.tgt_addr[0],
			     BDADDR_SIZE) == 0)) ||
    c8fe:	069a      	lsls	r2, r3, #26
    c900:	d409      	bmi.n	c916 <isr_rx_scan+0x52e>
    c902:	e7ee      	b.n	c8e2 <isr_rx_scan+0x4fa>
	/* Passive scanner or scan responses */
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
		   (/* allow directed adv packets addressed to this device */
		    ((_radio.scanner.init_addr_type == pdu_adv_rx->rx_addr) &&
		     (memcmp(&_radio.scanner.init_addr[0],
    c904:	2206      	movs	r2, #6
    c906:	f106 0110 	add.w	r1, r6, #16
    c90a:	4822      	ldr	r0, [pc, #136]	; (c994 <isr_rx_scan+0x5ac>)
    c90c:	f7f4 fb91 	bl	1032 <memcmp>
	}
	/* Passive scanner or scan responses */
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
		   (/* allow directed adv packets addressed to this device */
		    ((_radio.scanner.init_addr_type == pdu_adv_rx->rx_addr) &&
    c910:	2800      	cmp	r0, #0
    c912:	d0e1      	beq.n	c8d8 <isr_rx_scan+0x4f0>
    c914:	e7f1      	b.n	c8fa <isr_rx_scan+0x512>
			     &pdu_adv_rx->payload.direct_ind.tgt_addr[0],
			     BDADDR_SIZE) == 0)) ||
		    /* allow directed adv packets where initiator address
		     * is resolvable private address
		     */
		    (((_radio.scanner.filter_policy & 0x02) != 0) &&
    c916:	7a33      	ldrb	r3, [r6, #8]
    c918:	061b      	lsls	r3, r3, #24
    c91a:	d5e2      	bpl.n	c8e2 <isr_rx_scan+0x4fa>
		     (pdu_adv_rx->rx_addr != 0) &&
    c91c:	7d73      	ldrb	r3, [r6, #21]
    c91e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    c922:	2b40      	cmp	r3, #64	; 0x40
    c924:	d1dd      	bne.n	c8e2 <isr_rx_scan+0x4fa>
    c926:	e7d7      	b.n	c8d8 <isr_rx_scan+0x4f0>
		     ((pdu_adv_rx->payload.direct_ind.tgt_addr[5] & 0xc0) == 0x40)))) ||
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
    c928:	f003 030f 	and.w	r3, r3, #15
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND) ||
    c92c:	2b07      	cmp	r3, #7
    c92e:	d104      	bne.n	c93a <isr_rx_scan+0x552>
#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND) &&
    c930:	f897 315d 	ldrb.w	r3, [r7, #349]	; 0x15d
    c934:	f013 0f07 	tst.w	r3, #7
    c938:	e005      	b.n	c946 <isr_rx_scan+0x55e>
		   (_radio.scanner.phy)) ||
    c93a:	2b04      	cmp	r3, #4
    c93c:	d10c      	bne.n	c958 <isr_rx_scan+0x570>
#endif /* CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
    c93e:	f897 315c 	ldrb.w	r3, [r7, #348]	; 0x15c
    c942:	f013 0f02 	tst.w	r3, #2
    c946:	d1c7      	bne.n	c8d8 <isr_rx_scan+0x4f0>
    c948:	e006      	b.n	c958 <isr_rx_scan+0x570>
		   (_radio.scanner.state != 0))) &&
		 (pdu_adv_rx->len != 0) && (!_radio.scanner.conn)) {
    c94a:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
    c94e:	b91b      	cbnz	r3, c958 <isr_rx_scan+0x570>
		u32_t err;

		/* save the scan response packet */
		err = isr_rx_scan_report(rssi_ready);
    c950:	4620      	mov	r0, r4
    c952:	f7ff fcfb 	bl	c34c <isr_rx_scan_report>
		if (err) {
    c956:	b910      	cbnz	r0, c95e <isr_rx_scan+0x576>
	else {
		/* ignore and close this rx/tx chain ( code below ) */
		return 1;
	}

	return 1;
    c958:	2001      	movs	r0, #1
    c95a:	e000      	b.n	c95e <isr_rx_scan+0x576>
    c95c:	4620      	mov	r0, r4
}
    c95e:	b013      	add	sp, #76	; 0x4c
    c960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c964:	f3af 8000 	nop.w
    c968:	1afd498d 	.word	0x1afd498d
    c96c:	00000007 	.word	0x00000007
    c970:	0000ba0d 	.word	0x0000ba0d
    c974:	0000b971 	.word	0x0000b971
    c978:	0000e2cd 	.word	0x0000e2cd
    c97c:	00013df4 	.word	0x00013df4
    c980:	00013df9 	.word	0x00013df9
    c984:	00013db4 	.word	0x00013db4
    c988:	0001698b 	.word	0x0001698b
    c98c:	00013dbb 	.word	0x00013dbb
    c990:	000154fb 	.word	0x000154fb
    c994:	200015d4 	.word	0x200015d4
    c998:	3b9aca00 	.word	0x3b9aca00
    c99c:	20001470 	.word	0x20001470

0000c9a0 <terminate_ind_rx_enqueue>:
		_radio.conn_upd = NULL;
	}
}

static void terminate_ind_rx_enqueue(struct connection *conn, u8_t reason)
{
    c9a0:	b513      	push	{r0, r1, r4, lr}
    c9a2:	4603      	mov	r3, r0
    c9a4:	460a      	mov	r2, r1
	void *link;

	/* Prepare the rx packet structure */
	radio_pdu_node_rx =
		(struct radio_pdu_node_rx *)&conn->llcp_terminate.radio_pdu_node_rx;
	LL_ASSERT(radio_pdu_node_rx->hdr.onion.link);
    c9a6:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
{
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	void *link;

	/* Prepare the rx packet structure */
	radio_pdu_node_rx =
    c9aa:	30a8      	adds	r0, #168	; 0xa8
		(struct radio_pdu_node_rx *)&conn->llcp_terminate.radio_pdu_node_rx;
	LL_ASSERT(radio_pdu_node_rx->hdr.onion.link);
    c9ac:	b941      	cbnz	r1, c9c0 <terminate_ind_rx_enqueue+0x20>
    c9ae:	4b18      	ldr	r3, [pc, #96]	; (ca10 <terminate_ind_rx_enqueue+0x70>)
    c9b0:	9301      	str	r3, [sp, #4]
    c9b2:	4b18      	ldr	r3, [pc, #96]	; (ca14 <terminate_ind_rx_enqueue+0x74>)
    c9b4:	9300      	str	r3, [sp, #0]
    c9b6:	4a18      	ldr	r2, [pc, #96]	; (ca18 <terminate_ind_rx_enqueue+0x78>)
    c9b8:	4b18      	ldr	r3, [pc, #96]	; (ca1c <terminate_ind_rx_enqueue+0x7c>)
    c9ba:	4919      	ldr	r1, [pc, #100]	; (ca20 <terminate_ind_rx_enqueue+0x80>)
    c9bc:	4819      	ldr	r0, [pc, #100]	; (ca24 <terminate_ind_rx_enqueue+0x84>)
    c9be:	e019      	b.n	c9f4 <terminate_ind_rx_enqueue+0x54>

	radio_pdu_node_rx->hdr.handle = conn->handle;
    c9c0:	8c1c      	ldrh	r4, [r3, #32]
    c9c2:	f8a3 40ae 	strh.w	r4, [r3, #174]	; 0xae
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
	*((u8_t *)radio_pdu_node_rx->pdu_data) = reason;
    c9c6:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	radio_pdu_node_rx =
		(struct radio_pdu_node_rx *)&conn->llcp_terminate.radio_pdu_node_rx;
	LL_ASSERT(radio_pdu_node_rx->hdr.onion.link);

	radio_pdu_node_rx->hdr.handle = conn->handle;
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    c9ca:	2407      	movs	r4, #7

	/* Serialize release queue with rx queue by storing reference to
	 * last element in release queue
	 */
	radio_pdu_node_rx->hdr.onion.packet_release_last =
	    _radio.packet_release_last;
    c9cc:	4a16      	ldr	r2, [pc, #88]	; (ca28 <terminate_ind_rx_enqueue+0x88>)
	radio_pdu_node_rx =
		(struct radio_pdu_node_rx *)&conn->llcp_terminate.radio_pdu_node_rx;
	LL_ASSERT(radio_pdu_node_rx->hdr.onion.link);

	radio_pdu_node_rx->hdr.handle = conn->handle;
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    c9ce:	f883 40ac 	strb.w	r4, [r3, #172]	; 0xac

	/* Serialize release queue with rx queue by storing reference to
	 * last element in release queue
	 */
	radio_pdu_node_rx->hdr.onion.packet_release_last =
	    _radio.packet_release_last;
    c9d2:	f892 41f4 	ldrb.w	r4, [r2, #500]	; 0x1f4
	link = radio_pdu_node_rx->hdr.onion.link;

	/* Serialize release queue with rx queue by storing reference to
	 * last element in release queue
	 */
	radio_pdu_node_rx->hdr.onion.packet_release_last =
    c9d6:	f883 40a8 	strb.w	r4, [r3, #168]	; 0xa8
	    _radio.packet_release_last;

	/* Enqueue into event-cum-data queue */
	link = memq_enqueue(radio_pdu_node_rx, link,
    c9da:	f502 72e6 	add.w	r2, r2, #460	; 0x1cc
    c9de:	f7fc ff8b 	bl	98f8 <memq_enqueue>
			    (void *)&_radio.link_rx_tail);
	LL_ASSERT(link);
    c9e2:	b978      	cbnz	r0, ca04 <terminate_ind_rx_enqueue+0x64>
    c9e4:	4b0a      	ldr	r3, [pc, #40]	; (ca10 <terminate_ind_rx_enqueue+0x70>)
    c9e6:	9301      	str	r3, [sp, #4]
    c9e8:	4b0a      	ldr	r3, [pc, #40]	; (ca14 <terminate_ind_rx_enqueue+0x74>)
    c9ea:	9300      	str	r3, [sp, #0]
    c9ec:	4a0a      	ldr	r2, [pc, #40]	; (ca18 <terminate_ind_rx_enqueue+0x78>)
    c9ee:	4b0b      	ldr	r3, [pc, #44]	; (ca1c <terminate_ind_rx_enqueue+0x7c>)
    c9f0:	490b      	ldr	r1, [pc, #44]	; (ca20 <terminate_ind_rx_enqueue+0x80>)
    c9f2:	480e      	ldr	r0, [pc, #56]	; (ca2c <terminate_ind_rx_enqueue+0x8c>)
    c9f4:	f7f4 fd44 	bl	1480 <printk>
    c9f8:	4040      	eors	r0, r0
    c9fa:	f380 8811 	msr	BASEPRI, r0
    c9fe:	f04f 0004 	mov.w	r0, #4
    ca02:	df02      	svc	2

	/* callback to trigger application action */
	packet_rx_callback();
}
    ca04:	b002      	add	sp, #8
    ca06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	/* Inline call of callback. If JOB configured as lower priority then
	 * callback will tailchain at end of every radio ISR. If JOB configured
	 * as same then call inline so as to have callback for every radio ISR.
	 */
#if (RADIO_TICKER_USER_ID_WORKER_PRIO == RADIO_TICKER_USER_ID_JOB_PRIO)
	radio_event_callback();
    ca0a:	f004 ba3b 	b.w	10e84 <radio_event_callback>
    ca0e:	bf00      	nop
    ca10:	00013df4 	.word	0x00013df4
    ca14:	00013df9 	.word	0x00013df9
    ca18:	00013db4 	.word	0x00013db4
    ca1c:	0001672b 	.word	0x0001672b
    ca20:	00013dbb 	.word	0x00013dbb
    ca24:	0001566f 	.word	0x0001566f
    ca28:	20001470 	.word	0x20001470
    ca2c:	00015243 	.word	0x00015243

0000ca30 <prepare_normal_set>:
	}
}

static void prepare_normal_set(struct shdr *hdr, u8_t ticker_user_id,
			       u8_t ticker_id)
{
    ca30:	b530      	push	{r4, r5, lr}
	if (hdr->ticks_xtal_to_start & ((u32_t)1 << 31)) {
    ca32:	6804      	ldr	r4, [r0, #0]
    ca34:	2c00      	cmp	r4, #0
	}
}

static void prepare_normal_set(struct shdr *hdr, u8_t ticker_user_id,
			       u8_t ticker_id)
{
    ca36:	b089      	sub	sp, #36	; 0x24
	if (hdr->ticks_xtal_to_start & ((u32_t)1 << 31)) {
    ca38:	da27      	bge.n	ca8a <prepare_normal_set+0x5a>
		u32_t ticks_drift_minus =
			(hdr->ticks_xtal_to_start & (~((u32_t)1 << 31))) -
			ticks_prepare_to_start;

		ticker_status =
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    ca3a:	6885      	ldr	r5, [r0, #8]
    ca3c:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
    ca40:	6844      	ldr	r4, [r0, #4]
			ticks_active_to_start : hdr->ticks_preempt_to_start;
		u32_t ticks_drift_minus =
			(hdr->ticks_xtal_to_start & (~((u32_t)1 << 31))) -
			ticks_prepare_to_start;

		ticker_status =
    ca42:	9006      	str	r0, [sp, #24]
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    ca44:	42a5      	cmp	r5, r4
    ca46:	bf2c      	ite	cs
    ca48:	1b5c      	subcs	r4, r3, r5
    ca4a:	1b1c      	subcc	r4, r3, r4
			ticks_active_to_start : hdr->ticks_preempt_to_start;
		u32_t ticks_drift_minus =
			(hdr->ticks_xtal_to_start & (~((u32_t)1 << 31))) -
			ticks_prepare_to_start;

		ticker_status =
    ca4c:	4b10      	ldr	r3, [pc, #64]	; (ca90 <prepare_normal_set+0x60>)
    ca4e:	9305      	str	r3, [sp, #20]
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    ca50:	b2a4      	uxth	r4, r4
			ticks_active_to_start : hdr->ticks_preempt_to_start;
		u32_t ticks_drift_minus =
			(hdr->ticks_xtal_to_start & (~((u32_t)1 << 31))) -
			ticks_prepare_to_start;

		ticker_status =
    ca52:	2300      	movs	r3, #0
    ca54:	9304      	str	r3, [sp, #16]
    ca56:	9303      	str	r3, [sp, #12]
    ca58:	9302      	str	r3, [sp, #8]
    ca5a:	4618      	mov	r0, r3
    ca5c:	9401      	str	r4, [sp, #4]
    ca5e:	9400      	str	r4, [sp, #0]
    ca60:	f7fe f9e2 	bl	ae28 <ticker_update>
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
				      ticker_user_id,
				      ticker_id, 0, ticks_drift_minus,
				      ticks_drift_minus, 0, 0, 0,
				      prepare_normal, hdr);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    ca64:	f030 0302 	bics.w	r3, r0, #2
    ca68:	d00f      	beq.n	ca8a <prepare_normal_set+0x5a>
    ca6a:	4b0a      	ldr	r3, [pc, #40]	; (ca94 <prepare_normal_set+0x64>)
    ca6c:	9301      	str	r3, [sp, #4]
    ca6e:	4b0a      	ldr	r3, [pc, #40]	; (ca98 <prepare_normal_set+0x68>)
    ca70:	9300      	str	r3, [sp, #0]
    ca72:	4a0a      	ldr	r2, [pc, #40]	; (ca9c <prepare_normal_set+0x6c>)
    ca74:	4b0a      	ldr	r3, [pc, #40]	; (caa0 <prepare_normal_set+0x70>)
    ca76:	490b      	ldr	r1, [pc, #44]	; (caa4 <prepare_normal_set+0x74>)
    ca78:	480b      	ldr	r0, [pc, #44]	; (caa8 <prepare_normal_set+0x78>)
    ca7a:	f7f4 fd01 	bl	1480 <printk>
    ca7e:	4040      	eors	r0, r0
    ca80:	f380 8811 	msr	BASEPRI, r0
    ca84:	f04f 0004 	mov.w	r0, #4
    ca88:	df02      	svc	2
			  (ticker_status == TICKER_STATUS_BUSY));
	}
}
    ca8a:	b009      	add	sp, #36	; 0x24
    ca8c:	bd30      	pop	{r4, r5, pc}
    ca8e:	bf00      	nop
    ca90:	0000b091 	.word	0x0000b091
    ca94:	00013df4 	.word	0x00013df4
    ca98:	00013df9 	.word	0x00013df9
    ca9c:	00013db4 	.word	0x00013db4
    caa0:	000167fe 	.word	0x000167fe
    caa4:	00013dbb 	.word	0x00013dbb
    caa8:	000154fb 	.word	0x000154fb

0000caac <preempt_calc>:

#if (RADIO_TICKER_PREEMPT_PART_US <= RADIO_TICKER_PREEMPT_PART_MIN_US)
static u32_t preempt_calc(struct shdr *hdr, u8_t ticker_id,
			  u32_t ticks_at_expire)
{
    caac:	b570      	push	{r4, r5, r6, lr}
    caae:	4615      	mov	r5, r2
    cab0:	460e      	mov	r6, r1
    cab2:	4604      	mov	r4, r0
	u32_t diff =
		ticker_ticks_diff_get(ticker_ticks_now_get(), ticks_at_expire);
    cab4:	f7fe faba 	bl	b02c <ticker_ticks_now_get>

#if (RADIO_TICKER_PREEMPT_PART_US <= RADIO_TICKER_PREEMPT_PART_MIN_US)
static u32_t preempt_calc(struct shdr *hdr, u8_t ticker_id,
			  u32_t ticks_at_expire)
{
	u32_t diff =
    cab8:	4629      	mov	r1, r5
    caba:	f7fe fab9 	bl	b030 <ticker_ticks_diff_get>
		ticker_ticks_diff_get(ticker_ticks_now_get(), ticks_at_expire);

	diff += 3;
    cabe:	1cc5      	adds	r5, r0, #3
	if (diff > TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US)) {
    cac0:	2d09      	cmp	r5, #9
    cac2:	d90e      	bls.n	cae2 <preempt_calc+0x36>
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_WORKER, 0);
    cac4:	2100      	movs	r1, #0
    cac6:	4608      	mov	r0, r1
    cac8:	f7fe fdb0 	bl	b62c <mayfly_xtal_retain>

		prepare_normal_set(hdr, RADIO_TICKER_USER_ID_WORKER, ticker_id);
    cacc:	4620      	mov	r0, r4
    cace:	4632      	mov	r2, r6
    cad0:	2100      	movs	r1, #0
    cad2:	f7ff ffad 	bl	ca30 <prepare_normal_set>

		diff += hdr->ticks_preempt_to_start;
    cad6:	68a0      	ldr	r0, [r4, #8]
    cad8:	4428      	add	r0, r5
		if (diff <
    cada:	2826      	cmp	r0, #38	; 0x26
    cadc:	d803      	bhi.n	cae6 <preempt_calc+0x3a>
			TICKER_US_TO_TICKS(RADIO_TICKER_PREEMPT_PART_MAX_US)) {
			hdr->ticks_preempt_to_start = diff;
    cade:	60a0      	str	r0, [r4, #8]
    cae0:	e001      	b.n	cae6 <preempt_calc+0x3a>
		}

		return 1;
	}

	return 0;
    cae2:	2000      	movs	r0, #0
    cae4:	bd70      	pop	{r4, r5, r6, pc}
		if (diff <
			TICKER_US_TO_TICKS(RADIO_TICKER_PREEMPT_PART_MAX_US)) {
			hdr->ticks_preempt_to_start = diff;
		}

		return 1;
    cae6:	2001      	movs	r0, #1
	}

	return 0;
}
    cae8:	bd70      	pop	{r4, r5, r6, pc}
	...

0000caec <mayfly_xtal_stop_calc>:
 * close and issues a conn param req or does a conn update.
 *
 * @todo Detect drift for overlapping tickers.
 */
static void mayfly_xtal_stop_calc(void *params)
{
    caec:	b500      	push	{lr}
    caee:	b08d      	sub	sp, #52	; 0x34
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    caf0:	2302      	movs	r3, #2
    caf2:	9309      	str	r3, [sp, #36]	; 0x24
	u32_t ticks_to_expire;
	u32_t ticks_current;
	u8_t ticker_id;
	u32_t ret;

	ticker_id = 0xff;
    caf4:	23ff      	movs	r3, #255	; 0xff
    caf6:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	ticks_to_expire = 0;
	ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    cafa:	ab09      	add	r3, sp, #36	; 0x24
    cafc:	9302      	str	r3, [sp, #8]
    cafe:	4b49      	ldr	r3, [pc, #292]	; (cc24 <mayfly_xtal_stop_calc+0x138>)
    cb00:	9301      	str	r3, [sp, #4]
    cb02:	ab0a      	add	r3, sp, #40	; 0x28
	u32_t ticks_current;
	u8_t ticker_id;
	u32_t ret;

	ticker_id = 0xff;
	ticks_to_expire = 0;
    cb04:	2000      	movs	r0, #0
	ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    cb06:	9300      	str	r3, [sp, #0]
    cb08:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    cb0c:	ab0b      	add	r3, sp, #44	; 0x2c
    cb0e:	2101      	movs	r1, #1
	u32_t ticks_current;
	u8_t ticker_id;
	u32_t ret;

	ticker_id = 0xff;
	ticks_to_expire = 0;
    cb10:	900a      	str	r0, [sp, #40]	; 0x28
	ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    cb12:	f7fe fa05 	bl	af20 <ticker_next_slot_get>
				   RADIO_TICKER_USER_ID_JOB, &ticker_id,
				   &ticks_current, &ticks_to_expire,
				   ticker_if_done, (void *)&ret_cb);

	if (ret == TICKER_STATUS_BUSY) {
    cb16:	2802      	cmp	r0, #2
    cb18:	d00a      	beq.n	cb30 <mayfly_xtal_stop_calc+0x44>
			ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
					 RADIO_TICKER_USER_ID_JOB);
		}
	}

	LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    cb1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cb1c:	b183      	cbz	r3, cb40 <mayfly_xtal_stop_calc+0x54>
    cb1e:	4b42      	ldr	r3, [pc, #264]	; (cc28 <mayfly_xtal_stop_calc+0x13c>)
    cb20:	9301      	str	r3, [sp, #4]
    cb22:	4b42      	ldr	r3, [pc, #264]	; (cc2c <mayfly_xtal_stop_calc+0x140>)
    cb24:	9300      	str	r3, [sp, #0]
    cb26:	4a42      	ldr	r2, [pc, #264]	; (cc30 <mayfly_xtal_stop_calc+0x144>)
    cb28:	4b42      	ldr	r3, [pc, #264]	; (cc34 <mayfly_xtal_stop_calc+0x148>)
    cb2a:	4943      	ldr	r1, [pc, #268]	; (cc38 <mayfly_xtal_stop_calc+0x14c>)
    cb2c:	4843      	ldr	r0, [pc, #268]	; (cc3c <mayfly_xtal_stop_calc+0x150>)
    cb2e:	e04d      	b.n	cbcc <mayfly_xtal_stop_calc+0xe0>
				   RADIO_TICKER_USER_ID_JOB, &ticker_id,
				   &ticks_current, &ticks_to_expire,
				   ticker_if_done, (void *)&ret_cb);

	if (ret == TICKER_STATUS_BUSY) {
		while (ret_cb == TICKER_STATUS_BUSY) {
    cb30:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cb32:	2b02      	cmp	r3, #2
    cb34:	d1f1      	bne.n	cb1a <mayfly_xtal_stop_calc+0x2e>
			ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    cb36:	2101      	movs	r1, #1
    cb38:	2000      	movs	r0, #0
    cb3a:	f7fe fa65 	bl	b008 <ticker_job_sched>
    cb3e:	e7f7      	b.n	cb30 <mayfly_xtal_stop_calc+0x44>
		}
	}

	LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);

	if ((ticker_id != 0xff) &&
    cb40:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    cb44:	2bff      	cmp	r3, #255	; 0xff
    cb46:	d049      	beq.n	cbdc <mayfly_xtal_stop_calc+0xf0>
    cb48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cb4a:	2ba8      	cmp	r3, #168	; 0xa8
    cb4c:	d846      	bhi.n	cbdc <mayfly_xtal_stop_calc+0xf0>
	    (ticks_to_expire <
	     TICKER_US_TO_TICKS(CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD))) {
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_JOB, 1);
    cb4e:	2101      	movs	r1, #1
    cb50:	4608      	mov	r0, r1
    cb52:	f7fe fd6b 	bl	b62c <mayfly_xtal_retain>

		if (ticker_id >= RADIO_TICKER_ID_ADV) {
    cb56:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    cb5a:	2a04      	cmp	r2, #4
    cb5c:	d95f      	bls.n	cc1e <mayfly_xtal_stop_calc+0x132>
			u32_t ticks_prepare_to_start;
			struct connection *conn = NULL;
			struct shdr *hdr = NULL;

			/* Select the role's scheduling header */
			if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    cb5e:	2a06      	cmp	r2, #6
    cb60:	d909      	bls.n	cb76 <mayfly_xtal_stop_calc+0x8a>
				conn = mem_get(_radio.conn_pool,
    cb62:	4b37      	ldr	r3, [pc, #220]	; (cc40 <mayfly_xtal_stop_calc+0x154>)
    cb64:	3a07      	subs	r2, #7
    cb66:	b292      	uxth	r2, r2
    cb68:	f44f 718c 	mov.w	r1, #280	; 0x118
    cb6c:	f8d3 0184 	ldr.w	r0, [r3, #388]	; 0x184
    cb70:	f7fc fea2 	bl	98b8 <mem_get>
    cb74:	e005      	b.n	cb82 <mayfly_xtal_stop_calc+0x96>
						RADIO_TICKER_ID_FIRST_CONNECTION));
				hdr = &conn->hdr;
			} else if (ticker_id == RADIO_TICKER_ID_ADV) {
				hdr = &_radio.advertiser.hdr;
			} else if (ticker_id == RADIO_TICKER_ID_SCAN) {
				hdr = &_radio.scanner.hdr;
    cb76:	4b33      	ldr	r3, [pc, #204]	; (cc44 <mayfly_xtal_stop_calc+0x158>)
    cb78:	f103 00b8 	add.w	r0, r3, #184	; 0xb8
    cb7c:	2a05      	cmp	r2, #5
    cb7e:	bf08      	it	eq
    cb80:	4618      	moveq	r0, r3
			}

			/* compensate for reduced next ticker's prepare or
			 * reduce next ticker's prepare.
			 */
			ticks_prepare_to_start =
    cb82:	6881      	ldr	r1, [r0, #8]
    cb84:	6843      	ldr	r3, [r0, #4]
    cb86:	428b      	cmp	r3, r1
    cb88:	bf38      	it	cc
    cb8a:	460b      	movcc	r3, r1
				(hdr->ticks_active_to_start >
				 hdr->ticks_preempt_to_start) ?
				hdr->ticks_active_to_start :
				hdr->ticks_preempt_to_start;
			if ((hdr->ticks_xtal_to_start & ((u32_t)1 << 31)) != 0) {
    cb8c:	6801      	ldr	r1, [r0, #0]
    cb8e:	2900      	cmp	r1, #0
    cb90:	db45      	blt.n	cc1e <mayfly_xtal_stop_calc+0x132>
						    ticks_prepare_to_start);
			} else {
				/* Postpone the primary because we dont have
				 * to start xtal.
				 */
				if (hdr->ticks_xtal_to_start >
    cb92:	428b      	cmp	r3, r1
    cb94:	d243      	bcs.n	cc1e <mayfly_xtal_stop_calc+0x132>
						hdr->ticks_xtal_to_start -
						ticks_prepare_to_start;
					u32_t ticker_status;

					ticker_status =
						ticker_update(
    cb96:	1acb      	subs	r3, r1, r3
    cb98:	b29b      	uxth	r3, r3
					u32_t ticks_drift_plus =
						hdr->ticks_xtal_to_start -
						ticks_prepare_to_start;
					u32_t ticker_status;

					ticker_status =
    cb9a:	9006      	str	r0, [sp, #24]
    cb9c:	492a      	ldr	r1, [pc, #168]	; (cc48 <mayfly_xtal_stop_calc+0x15c>)
    cb9e:	9105      	str	r1, [sp, #20]
    cba0:	2000      	movs	r0, #0
    cba2:	9302      	str	r3, [sp, #8]
    cba4:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    cba8:	9004      	str	r0, [sp, #16]
    cbaa:	9003      	str	r0, [sp, #12]
    cbac:	9001      	str	r0, [sp, #4]
    cbae:	9000      	str	r0, [sp, #0]
    cbb0:	2101      	movs	r1, #1
    cbb2:	f7fe f939 	bl	ae28 <ticker_update>
							      ticks_drift_plus, 0,
							      0, ticks_drift_plus,
							      0, 0,
							      prepare_reduced,
							      hdr);
					LL_ASSERT((TICKER_STATUS_SUCCESS ==
    cbb6:	f030 0302 	bics.w	r3, r0, #2
    cbba:	d030      	beq.n	cc1e <mayfly_xtal_stop_calc+0x132>
    cbbc:	4b1a      	ldr	r3, [pc, #104]	; (cc28 <mayfly_xtal_stop_calc+0x13c>)
    cbbe:	9301      	str	r3, [sp, #4]
    cbc0:	4b1a      	ldr	r3, [pc, #104]	; (cc2c <mayfly_xtal_stop_calc+0x140>)
    cbc2:	9300      	str	r3, [sp, #0]
    cbc4:	4a1a      	ldr	r2, [pc, #104]	; (cc30 <mayfly_xtal_stop_calc+0x144>)
    cbc6:	4b1b      	ldr	r3, [pc, #108]	; (cc34 <mayfly_xtal_stop_calc+0x148>)
    cbc8:	491b      	ldr	r1, [pc, #108]	; (cc38 <mayfly_xtal_stop_calc+0x14c>)
    cbca:	4820      	ldr	r0, [pc, #128]	; (cc4c <mayfly_xtal_stop_calc+0x160>)
    cbcc:	f7f4 fc58 	bl	1480 <printk>
    cbd0:	4040      	eors	r0, r0
    cbd2:	f380 8811 	msr	BASEPRI, r0
    cbd6:	f04f 0004 	mov.w	r0, #4
    cbda:	df02      	svc	2
				}
			}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_SCHED_ADVANCED */
		}
	} else {
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_JOB, 0);
    cbdc:	2100      	movs	r1, #0
    cbde:	2001      	movs	r0, #1
    cbe0:	f7fe fd24 	bl	b62c <mayfly_xtal_retain>

		if ((ticker_id != 0xff) && (ticker_id >= RADIO_TICKER_ID_ADV)) {
    cbe4:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    cbe8:	1f53      	subs	r3, r2, #5
    cbea:	b2db      	uxtb	r3, r3
    cbec:	2bf9      	cmp	r3, #249	; 0xf9
    cbee:	d816      	bhi.n	cc1e <mayfly_xtal_stop_calc+0x132>
			struct shdr *hdr = NULL;

			/* Select the role's scheduling header */
			if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    cbf0:	2a06      	cmp	r2, #6
    cbf2:	d909      	bls.n	cc08 <mayfly_xtal_stop_calc+0x11c>
				struct connection *conn;

				conn = mem_get(_radio.conn_pool,
    cbf4:	4b12      	ldr	r3, [pc, #72]	; (cc40 <mayfly_xtal_stop_calc+0x154>)
    cbf6:	3a07      	subs	r2, #7
    cbf8:	b292      	uxth	r2, r2
    cbfa:	f44f 718c 	mov.w	r1, #280	; 0x118
    cbfe:	f8d3 0184 	ldr.w	r0, [r3, #388]	; 0x184
    cc02:	f7fc fe59 	bl	98b8 <mem_get>
    cc06:	e005      	b.n	cc14 <mayfly_xtal_stop_calc+0x128>
						RADIO_TICKER_ID_FIRST_CONNECTION));
				hdr = &conn->hdr;
			} else if (ticker_id == RADIO_TICKER_ID_ADV) {
				hdr = &_radio.advertiser.hdr;
			} else if (ticker_id == RADIO_TICKER_ID_SCAN) {
				hdr = &_radio.scanner.hdr;
    cc08:	4b0e      	ldr	r3, [pc, #56]	; (cc44 <mayfly_xtal_stop_calc+0x158>)
    cc0a:	f103 00b8 	add.w	r0, r3, #184	; 0xb8
    cc0e:	2a05      	cmp	r2, #5
    cc10:	bf08      	it	eq
    cc12:	4618      	moveq	r0, r3
			} else {
				LL_ASSERT(0);
			}

			/* Use normal prepare */
			prepare_normal_set(hdr, RADIO_TICKER_USER_ID_JOB,
    cc14:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    cc18:	2101      	movs	r1, #1
    cc1a:	f7ff ff09 	bl	ca30 <prepare_normal_set>
					   ticker_id);
		}
	}
}
    cc1e:	b00d      	add	sp, #52	; 0x34
    cc20:	f85d fb04 	ldr.w	pc, [sp], #4
    cc24:	0000b081 	.word	0x0000b081
    cc28:	00013df4 	.word	0x00013df4
    cc2c:	00013df9 	.word	0x00013df9
    cc30:	00013db4 	.word	0x00013db4
    cc34:	00016ac8 	.word	0x00016ac8
    cc38:	00013dbb 	.word	0x00013dbb
    cc3c:	000156b2 	.word	0x000156b2
    cc40:	20001470 	.word	0x20001470
    cc44:	20001504 	.word	0x20001504
    cc48:	0000b085 	.word	0x0000b085
    cc4c:	000156df 	.word	0x000156df

0000cc50 <radio_event_adv_prepare>:
			    0x555555);
}

void radio_event_adv_prepare(u32_t ticks_at_expire, u32_t remainder,
			     u16_t lazy, void *context)
{
    cc50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(lazy);
	ARG_UNUSED(context);

	DEBUG_RADIO_PREPARE_A(1);

	LL_ASSERT(!_radio.ticker_id_prepare);
    cc52:	4a12      	ldr	r2, [pc, #72]	; (cc9c <radio_event_adv_prepare+0x4c>)
    cc54:	7b13      	ldrb	r3, [r2, #12]
    cc56:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    cc5a:	b17b      	cbz	r3, cc7c <radio_event_adv_prepare+0x2c>
    cc5c:	4b10      	ldr	r3, [pc, #64]	; (cca0 <radio_event_adv_prepare+0x50>)
    cc5e:	9301      	str	r3, [sp, #4]
    cc60:	4b10      	ldr	r3, [pc, #64]	; (cca4 <radio_event_adv_prepare+0x54>)
    cc62:	9300      	str	r3, [sp, #0]
    cc64:	4a10      	ldr	r2, [pc, #64]	; (cca8 <radio_event_adv_prepare+0x58>)
    cc66:	4b11      	ldr	r3, [pc, #68]	; (ccac <radio_event_adv_prepare+0x5c>)
    cc68:	4911      	ldr	r1, [pc, #68]	; (ccb0 <radio_event_adv_prepare+0x60>)
    cc6a:	4812      	ldr	r0, [pc, #72]	; (ccb4 <radio_event_adv_prepare+0x64>)
    cc6c:	f7f4 fc08 	bl	1480 <printk>
    cc70:	4040      	eors	r0, r0
    cc72:	f380 8811 	msr	BASEPRI, r0
    cc76:	f04f 0004 	mov.w	r0, #4
    cc7a:	df02      	svc	2
	_radio.ticker_id_prepare = RADIO_TICKER_ID_ADV;
    cc7c:	2305      	movs	r3, #5
    cc7e:	7313      	strb	r3, [r2, #12]

	event_common_prepare(ticks_at_expire, remainder,
    cc80:	9403      	str	r4, [sp, #12]
    cc82:	4c0d      	ldr	r4, [pc, #52]	; (ccb8 <radio_event_adv_prepare+0x68>)
    cc84:	9402      	str	r4, [sp, #8]
    cc86:	9301      	str	r3, [sp, #4]
    cc88:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
    cc8c:	9300      	str	r3, [sp, #0]
    cc8e:	f102 0398 	add.w	r3, r2, #152	; 0x98
    cc92:	3294      	adds	r2, #148	; 0x94
    cc94:	f7ff f93c 	bl	bf10 <event_common_prepare>
			     &_radio.advertiser.hdr.ticks_active_to_start,
			     _radio.advertiser.hdr.ticks_preempt_to_start,
			     RADIO_TICKER_ID_ADV, event_adv, NULL);

	DEBUG_RADIO_PREPARE_A(0);
}
    cc98:	b004      	add	sp, #16
    cc9a:	bd10      	pop	{r4, pc}
    cc9c:	20001470 	.word	0x20001470
    cca0:	00013df4 	.word	0x00013df4
    cca4:	00013df9 	.word	0x00013df9
    cca8:	00013db4 	.word	0x00013db4
    ccac:	00016a8b 	.word	0x00016a8b
    ccb0:	00013dbb 	.word	0x00013dbb
    ccb4:	0001572d 	.word	0x0001572d
    ccb8:	0000cd11 	.word	0x0000cd11

0000ccbc <adv_scan_configure.constprop.29>:
	radio_reset();
	radio_tx_power_set(0);
	radio_isr_set(isr);
}

static void adv_scan_configure(u8_t phy, u8_t flags)
    ccbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
{
	u32_t aa = 0x8e89bed6;
    ccbe:	ad02      	add	r5, sp, #8
    ccc0:	4b10      	ldr	r3, [pc, #64]	; (cd04 <adv_scan_configure.constprop.29+0x48>)
    ccc2:	f845 3d04 	str.w	r3, [r5, #-4]!
	radio_reset();
	radio_tx_power_set(0);
	radio_isr_set(isr);
}

static void adv_scan_configure(u8_t phy, u8_t flags)
    ccc6:	4604      	mov	r4, r0
	return access_addr;
}

static void adv_scan_conn_configure(void)
{
	radio_reset();
    ccc8:	f7fc ff06 	bl	9ad8 <radio_reset>
	radio_tx_power_set(0);
    cccc:	2000      	movs	r0, #0
    ccce:	f7fc ff1b 	bl	9b08 <radio_tx_power_set>
	radio_isr_set(isr);
    ccd2:	480d      	ldr	r0, [pc, #52]	; (cd08 <adv_scan_configure.constprop.29+0x4c>)
    ccd4:	f7fc feec 	bl	9ab0 <radio_isr_set>
static void adv_scan_configure(u8_t phy, u8_t flags)
{
	u32_t aa = 0x8e89bed6;

	adv_scan_conn_configure();
	radio_phy_set(phy, flags);
    ccd8:	2101      	movs	r1, #1
    ccda:	4620      	mov	r0, r4
    ccdc:	f7fc ff0a 	bl	9af4 <radio_phy_set>
	radio_aa_set((u8_t *)&aa);
    cce0:	4628      	mov	r0, r5
    cce2:	f7fc ff23 	bl	9b2c <radio_aa_set>
	radio_pkt_configure(8, PDU_AC_PAYLOAD_SIZE_MAX, (phy << 1));
    cce6:	0062      	lsls	r2, r4, #1
    cce8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    ccec:	2125      	movs	r1, #37	; 0x25
    ccee:	2008      	movs	r0, #8
    ccf0:	f7fc ff34 	bl	9b5c <radio_pkt_configure>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    ccf4:	4905      	ldr	r1, [pc, #20]	; (cd0c <adv_scan_configure.constprop.29+0x50>)
    ccf6:	f240 605b 	movw	r0, #1627	; 0x65b
    ccfa:	f7fc ffaf 	bl	9c5c <radio_crc_configure>
			    0x555555);
}
    ccfe:	b003      	add	sp, #12
    cd00:	bd30      	pop	{r4, r5, pc}
    cd02:	bf00      	nop
    cd04:	8e89bed6 	.word	0x8e89bed6
    cd08:	0000e471 	.word	0x0000e471
    cd0c:	00555555 	.word	0x00555555

0000cd10 <event_adv>:
	ARG_UNUSED(lazy);
	ARG_UNUSED(context);

	DEBUG_RADIO_START_A(1);

	LL_ASSERT(_radio.role == ROLE_NONE);
    cd10:	4b38      	ldr	r3, [pc, #224]	; (cdf4 <event_adv+0xe4>)
    cd12:	7bda      	ldrb	r2, [r3, #15]
	chan_set(37 + chan);
}

static void event_adv(u32_t ticks_at_expire, u32_t remainder,
		      u16_t lazy, void *context)
{
    cd14:	b573      	push	{r0, r1, r4, r5, r6, lr}
    cd16:	4605      	mov	r5, r0
	ARG_UNUSED(lazy);
	ARG_UNUSED(context);

	DEBUG_RADIO_START_A(1);

	LL_ASSERT(_radio.role == ROLE_NONE);
    cd18:	f002 01ff 	and.w	r1, r2, #255	; 0xff
    cd1c:	461c      	mov	r4, r3
    cd1e:	b142      	cbz	r2, cd32 <event_adv+0x22>
    cd20:	4b35      	ldr	r3, [pc, #212]	; (cdf8 <event_adv+0xe8>)
    cd22:	9301      	str	r3, [sp, #4]
    cd24:	4b35      	ldr	r3, [pc, #212]	; (cdfc <event_adv+0xec>)
    cd26:	9300      	str	r3, [sp, #0]
    cd28:	4a35      	ldr	r2, [pc, #212]	; (ce00 <event_adv+0xf0>)
    cd2a:	4b36      	ldr	r3, [pc, #216]	; (ce04 <event_adv+0xf4>)
    cd2c:	4936      	ldr	r1, [pc, #216]	; (ce08 <event_adv+0xf8>)
    cd2e:	4837      	ldr	r0, [pc, #220]	; (ce0c <event_adv+0xfc>)
    cd30:	e00b      	b.n	cd4a <event_adv+0x3a>
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV);
    cd32:	7b1b      	ldrb	r3, [r3, #12]
    cd34:	b2db      	uxtb	r3, r3
    cd36:	2b05      	cmp	r3, #5
    cd38:	d00f      	beq.n	cd5a <event_adv+0x4a>
    cd3a:	4b2f      	ldr	r3, [pc, #188]	; (cdf8 <event_adv+0xe8>)
    cd3c:	9301      	str	r3, [sp, #4]
    cd3e:	4b2f      	ldr	r3, [pc, #188]	; (cdfc <event_adv+0xec>)
    cd40:	9300      	str	r3, [sp, #0]
    cd42:	4a2f      	ldr	r2, [pc, #188]	; (ce00 <event_adv+0xf0>)
    cd44:	4b2f      	ldr	r3, [pc, #188]	; (ce04 <event_adv+0xf4>)
    cd46:	4930      	ldr	r1, [pc, #192]	; (ce08 <event_adv+0xf8>)
    cd48:	4831      	ldr	r0, [pc, #196]	; (ce10 <event_adv+0x100>)
    cd4a:	f7f4 fb99 	bl	1480 <printk>
    cd4e:	4040      	eors	r0, r0
    cd50:	f380 8811 	msr	BASEPRI, r0
    cd54:	f04f 0004 	mov.w	r0, #4
    cd58:	df02      	svc	2
	 */

	_radio.role = ROLE_ADV;
	_radio.ticker_id_prepare = 0;
	_radio.ticker_id_event = RADIO_TICKER_ID_ADV;
	_radio.ticks_anchor = ticks_at_expire;
    cd5a:	6060      	str	r0, [r4, #4]

#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
	/* TODO: if coded we use S8? */
	adv_scan_configure(_radio.advertiser.phy_p, 1);
    cd5c:	f894 00a5 	ldrb.w	r0, [r4, #165]	; 0xa5
	/** @todo check if XTAL is started,
	 * options 1: abort Radio Start,
	 * 2: wait for XTAL start.
	 */

	_radio.role = ROLE_ADV;
    cd60:	2201      	movs	r2, #1
	_radio.ticker_id_event = RADIO_TICKER_ID_ADV;
	_radio.ticks_anchor = ticks_at_expire;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
	/* TODO: if coded we use S8? */
	adv_scan_configure(_radio.advertiser.phy_p, 1);
    cd62:	f000 0007 	and.w	r0, r0, #7
	/** @todo check if XTAL is started,
	 * options 1: abort Radio Start,
	 * 2: wait for XTAL start.
	 */

	_radio.role = ROLE_ADV;
    cd66:	73e2      	strb	r2, [r4, #15]
	_radio.ticker_id_prepare = 0;
    cd68:	7321      	strb	r1, [r4, #12]
	_radio.ticker_id_event = RADIO_TICKER_ID_ADV;
    cd6a:	7363      	strb	r3, [r4, #13]
	_radio.ticks_anchor = ticks_at_expire;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
	/* TODO: if coded we use S8? */
	adv_scan_configure(_radio.advertiser.phy_p, 1);
    cd6c:	f7ff ffa6 	bl	ccbc <adv_scan_configure.constprop.29>
#else /* !CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */
	adv_scan_configure(0, 0);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */

	_radio.advertiser.chl_map_current = _radio.advertiser.chl_map;
    cd70:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
    cd74:	f894 20a4 	ldrb.w	r2, [r4, #164]	; 0xa4
    cd78:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    cd7c:	f363 0243 	bfi	r2, r3, #1, #3
    cd80:	f884 20a4 	strb.w	r2, [r4, #164]	; 0xa4
	adv_setup();
    cd84:	f7ff fa7a 	bl	c27c <adv_setup>

	/* Setup Radio Filter */
	if (_radio.advertiser.filter_policy) {
    cd88:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
    cd8c:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    cd90:	d006      	beq.n	cda0 <event_adv+0x90>

		struct ll_filter *wl = ctrl_filter_get();
    cd92:	f004 f93f 	bl	11014 <ctrl_filter_get>

		radio_filter_configure(wl->enable_bitmask,
    cd96:	1c82      	adds	r2, r0, #2
    cd98:	7841      	ldrb	r1, [r0, #1]
    cd9a:	7800      	ldrb	r0, [r0, #0]
    cd9c:	f7fc ffb6 	bl	9d0c <radio_filter_configure>
				       wl->addr_type_bitmask,
				       (u8_t *)wl->bdaddr);
	}

	radio_tmr_start(1,
    cda0:	4e14      	ldr	r6, [pc, #80]	; (cdf4 <event_adv+0xe4>)
    cda2:	68a2      	ldr	r2, [r4, #8]
    cda4:	f105 0109 	add.w	r1, r5, #9
    cda8:	2001      	movs	r0, #1
    cdaa:	f7fd f807 	bl	9dbc <radio_tmr_start>
			ticks_at_expire +
			TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US),
			_radio.remainder_anchor);
	radio_tmr_end_capture();
    cdae:	f7fd f8ad 	bl	9f0c <radio_tmr_end_capture>

#if (defined(CONFIG_BLUETOOTH_CONTROLLER_XTAL_ADVANCED) && \
     (RADIO_TICKER_PREEMPT_PART_US <= RADIO_TICKER_PREEMPT_PART_MIN_US))
	/* check if preempt to start has changed */
	if (preempt_calc(&_radio.advertiser.hdr, RADIO_TICKER_ID_ADV,
    cdb2:	462a      	mov	r2, r5
    cdb4:	2105      	movs	r1, #5
    cdb6:	f106 0094 	add.w	r0, r6, #148	; 0x94
    cdba:	f7ff fe77 	bl	caac <preempt_calc>
    cdbe:	4603      	mov	r3, r0
    cdc0:	b130      	cbz	r0, cdd0 <event_adv+0xc0>
			 ticks_at_expire) != 0) {
		_radio.state = STATE_STOP;
    cdc2:	2304      	movs	r3, #4
    cdc4:	7433      	strb	r3, [r6, #16]
			  (ticker_status == TICKER_STATUS_BUSY));
#endif
	}

	DEBUG_RADIO_START_A(0);
}
    cdc6:	b002      	add	sp, #8
    cdc8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
     (RADIO_TICKER_PREEMPT_PART_US <= RADIO_TICKER_PREEMPT_PART_MIN_US))
	/* check if preempt to start has changed */
	if (preempt_calc(&_radio.advertiser.hdr, RADIO_TICKER_ID_ADV,
			 ticks_at_expire) != 0) {
		_radio.state = STATE_STOP;
		radio_disable();
    cdcc:	f7fc bf0e 	b.w	9bec <radio_disable>
	{
	/* Ticker Job Silence */
#if (RADIO_TICKER_USER_ID_WORKER_PRIO == RADIO_TICKER_USER_ID_JOB_PRIO)
		u32_t ticker_status;

		ticker_status =
    cdd0:	4a10      	ldr	r2, [pc, #64]	; (ce14 <event_adv+0x104>)
    cdd2:	4601      	mov	r1, r0
    cdd4:	f7fe f8e2 	bl	af9c <ticker_job_idle_get>
		    ticker_job_idle_get(RADIO_TICKER_INSTANCE_ID_RADIO,
					RADIO_TICKER_USER_ID_WORKER,
					ticker_job_disable, NULL);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    cdd8:	f030 0302 	bics.w	r3, r0, #2
    cddc:	d008      	beq.n	cdf0 <event_adv+0xe0>
    cdde:	4b06      	ldr	r3, [pc, #24]	; (cdf8 <event_adv+0xe8>)
    cde0:	9301      	str	r3, [sp, #4]
    cde2:	4b06      	ldr	r3, [pc, #24]	; (cdfc <event_adv+0xec>)
    cde4:	9300      	str	r3, [sp, #0]
    cde6:	4a06      	ldr	r2, [pc, #24]	; (ce00 <event_adv+0xf0>)
    cde8:	4b06      	ldr	r3, [pc, #24]	; (ce04 <event_adv+0xf4>)
    cdea:	4907      	ldr	r1, [pc, #28]	; (ce08 <event_adv+0xf8>)
    cdec:	480a      	ldr	r0, [pc, #40]	; (ce18 <event_adv+0x108>)
    cdee:	e7ac      	b.n	cd4a <event_adv+0x3a>
			  (ticker_status == TICKER_STATUS_BUSY));
#endif
	}

	DEBUG_RADIO_START_A(0);
}
    cdf0:	b002      	add	sp, #8
    cdf2:	bd70      	pop	{r4, r5, r6, pc}
    cdf4:	20001470 	.word	0x20001470
    cdf8:	00013df4 	.word	0x00013df4
    cdfc:	00013df9 	.word	0x00013df9
    ce00:	00013db4 	.word	0x00013db4
    ce04:	00016b0b 	.word	0x00016b0b
    ce08:	00013dbb 	.word	0x00013dbb
    ce0c:	00015768 	.word	0x00015768
    ce10:	000157e1 	.word	0x000157e1
    ce14:	0000bb55 	.word	0x0000bb55
    ce18:	000154fb 	.word	0x000154fb

0000ce1c <mayfly_xtal_start>:
static void mayfly_xtal_start(void *params)
{
	ARG_UNUSED(params);

	/* turn on 16MHz clock, non-blocking mode. */
	clock_control_on(_radio.hf_clock, NULL);
    ce1c:	4b02      	ldr	r3, [pc, #8]	; (ce28 <mayfly_xtal_start+0xc>)
    ce1e:	6818      	ldr	r0, [r3, #0]
    ce20:	6843      	ldr	r3, [r0, #4]
    ce22:	2100      	movs	r1, #0
    ce24:	681b      	ldr	r3, [r3, #0]
    ce26:	4718      	bx	r3
    ce28:	20001470 	.word	0x20001470

0000ce2c <mayfly_xtal_stop>:

static void mayfly_xtal_stop(void *params)
{
	ARG_UNUSED(params);

	clock_control_off(_radio.hf_clock, NULL);
    ce2c:	4b02      	ldr	r3, [pc, #8]	; (ce38 <mayfly_xtal_stop+0xc>)
    ce2e:	6818      	ldr	r0, [r3, #0]
static inline int clock_control_off(struct device *dev,
				    clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->off(dev, sys);
    ce30:	6843      	ldr	r3, [r0, #4]
    ce32:	2100      	movs	r1, #0
    ce34:	685b      	ldr	r3, [r3, #4]
    ce36:	4718      	bx	r3
    ce38:	20001470 	.word	0x20001470

0000ce3c <chan_sel_2>:
	return prn_e;
}

static u8_t chan_sel_2(u16_t counter, u16_t chan_id, u8_t *chan_map,
		       u8_t chan_count)
{
    ce3c:	b5f0      	push	{r4, r5, r6, r7, lr}
static u16_t chan_prn(u16_t counter, u16_t chan_id)
{
	u8_t iterate;
	u16_t prn_e;

	prn_e = counter ^ chan_id;
    ce3e:	4048      	eors	r0, r1
    ce40:	2603      	movs	r6, #3
	return o;
}

static u16_t chan_perm(u16_t i)
{
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    ce42:	0a07      	lsrs	r7, r0, #8
    ce44:	2408      	movs	r4, #8
static u8_t chan_rev_8(u8_t i)
{
	u8_t iterate;
	u8_t o;

	o = 0;
    ce46:	2500      	movs	r5, #0
	for (iterate = 0; iterate < 8; iterate++) {
		o <<= 1;
		o |= (i & 1);
    ce48:	f007 0e01 	and.w	lr, r7, #1
    ce4c:	3c01      	subs	r4, #1
    ce4e:	ea4e 0545 	orr.w	r5, lr, r5, lsl #1
{
	u8_t iterate;
	u8_t o;

	o = 0;
	for (iterate = 0; iterate < 8; iterate++) {
    ce52:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
		o <<= 1;
		o |= (i & 1);
    ce56:	b2ed      	uxtb	r5, r5
		i >>= 1;
    ce58:	ea4f 0757 	mov.w	r7, r7, lsr #1
{
	u8_t iterate;
	u8_t o;

	o = 0;
	for (iterate = 0; iterate < 8; iterate++) {
    ce5c:	d1f4      	bne.n	ce48 <chan_sel_2+0xc>
	return o;
}

static u16_t chan_perm(u16_t i)
{
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    ce5e:	022d      	lsls	r5, r5, #8
    ce60:	b22f      	sxth	r7, r5
    ce62:	b2c0      	uxtb	r0, r0
    ce64:	f04f 0e08 	mov.w	lr, #8
	u8_t o;

	o = 0;
	for (iterate = 0; iterate < 8; iterate++) {
		o <<= 1;
		o |= (i & 1);
    ce68:	f000 0501 	and.w	r5, r0, #1
    ce6c:	ea45 0544 	orr.w	r5, r5, r4, lsl #1
    ce70:	b2ec      	uxtb	r4, r5
    ce72:	f10e 35ff 	add.w	r5, lr, #4294967295
{
	u8_t iterate;
	u8_t o;

	o = 0;
	for (iterate = 0; iterate < 8; iterate++) {
    ce76:	f015 0eff 	ands.w	lr, r5, #255	; 0xff
		o <<= 1;
		o |= (i & 1);
		i >>= 1;
    ce7a:	ea4f 0050 	mov.w	r0, r0, lsr #1
{
	u8_t iterate;
	u8_t o;

	o = 0;
	for (iterate = 0; iterate < 8; iterate++) {
    ce7e:	d1f3      	bne.n	ce68 <chan_sel_2+0x2c>
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
}

static u16_t chan_mam(u16_t a, u16_t b)
{
	return ((u32_t)a * 17 + b) & 0xFFFF;
    ce80:	433c      	orrs	r4, r7
    ce82:	eb04 1404 	add.w	r4, r4, r4, lsl #4
    ce86:	3e01      	subs	r6, #1
    ce88:	440c      	add	r4, r1
	u8_t iterate;
	u16_t prn_e;

	prn_e = counter ^ chan_id;

	for (iterate = 0; iterate < 3; iterate++) {
    ce8a:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
}

static u16_t chan_mam(u16_t a, u16_t b)
{
	return ((u32_t)a * 17 + b) & 0xFFFF;
    ce8e:	b2a0      	uxth	r0, r4
	u8_t iterate;
	u16_t prn_e;

	prn_e = counter ^ chan_id;

	for (iterate = 0; iterate < 3; iterate++) {
    ce90:	d1d7      	bne.n	ce42 <chan_sel_2+0x6>
		prn_e = chan_perm(prn_e);
		prn_e = chan_mam(prn_e, chan_id);
	}

	prn_e ^= chan_id;
    ce92:	ea81 0400 	eor.w	r4, r1, r0
{
	u8_t chan_next;
	u16_t prn_e;

	prn_e = chan_prn(counter, chan_id);
	chan_next = prn_e % 37;
    ce96:	2025      	movs	r0, #37	; 0x25
    ce98:	fbb4 f1f0 	udiv	r1, r4, r0
    ce9c:	fb00 4011 	mls	r0, r0, r1, r4
    cea0:	b2c0      	uxtb	r0, r0

	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    cea2:	08c1      	lsrs	r1, r0, #3
    cea4:	f000 0507 	and.w	r5, r0, #7
    cea8:	5c51      	ldrb	r1, [r2, r1]
    ceaa:	4129      	asrs	r1, r5
    ceac:	07c9      	lsls	r1, r1, #31
    ceae:	d408      	bmi.n	cec2 <chan_sel_2+0x86>
		u8_t chan_index;

		chan_index = ((u32_t)chan_count * prn_e) >> 16;
		chan_next = chan_sel_remap(chan_map, chan_index);
    ceb0:	fb04 f103 	mul.w	r1, r4, r3
    ceb4:	f3c1 4107 	ubfx	r1, r1, #16, #8
    ceb8:	4610      	mov	r0, r2
	} else {
		/* channel can be used, return it */
	}

	return chan_next;
}
    ceba:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}

	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
		u8_t chan_index;

		chan_index = ((u32_t)chan_count * prn_e) >> 16;
		chan_next = chan_sel_remap(chan_map, chan_index);
    cebe:	f7fe b8ed 	b.w	b09c <chan_sel_remap>
	} else {
		/* channel can be used, return it */
	}

	return chan_next;
}
    cec2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000cec4 <connection_configure>:
	/* store the next event counter value */
	conn->event_counter = event_counter + 1;
}

static void connection_configure(struct connection *conn)
{
    cec4:	b510      	push	{r4, lr}
    cec6:	4604      	mov	r4, r0
	return access_addr;
}

static void adv_scan_conn_configure(void)
{
	radio_reset();
    cec8:	f7fc fe06 	bl	9ad8 <radio_reset>
	radio_tx_power_set(0);
    cecc:	2000      	movs	r0, #0
    cece:	f7fc fe1b 	bl	9b08 <radio_tx_power_set>
	radio_isr_set(isr);
    ced2:	480a      	ldr	r0, [pc, #40]	; (cefc <connection_configure+0x38>)
    ced4:	f7fc fdec 	bl	9ab0 <radio_isr_set>
}

static void connection_configure(struct connection *conn)
{
	adv_scan_conn_configure();
	radio_aa_set(conn->access_addr);
    ced8:	f104 0010 	add.w	r0, r4, #16
    cedc:	f7fc fe26 	bl	9b2c <radio_aa_set>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    cee0:	7d63      	ldrb	r3, [r4, #21]
    cee2:	7da1      	ldrb	r1, [r4, #22]
    cee4:	021b      	lsls	r3, r3, #8
    cee6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    ceea:	7d21      	ldrb	r1, [r4, #20]
    ceec:	f240 605b 	movw	r0, #1627	; 0x65b
    cef0:	4319      	orrs	r1, r3
			    (((u32_t)conn->crc_init[2] << 16) |
			     ((u32_t)conn->crc_init[1] << 8) |
			     ((u32_t)conn->crc_init[0])));
}
    cef2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

static void connection_configure(struct connection *conn)
{
	adv_scan_conn_configure();
	radio_aa_set(conn->access_addr);
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    cef6:	f7fc beb1 	b.w	9c5c <radio_crc_configure>
    cefa:	bf00      	nop
    cefc:	0000e471 	.word	0x0000e471

0000cf00 <event_slave>:
	DEBUG_RADIO_PREPARE_S(0);
}

static void event_slave(u32_t ticks_at_expire, u32_t remainder, u16_t lazy,
			void *context)
{
    cf00:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    cf04:	461c      	mov	r4, r3
	ARG_UNUSED(remainder);
	ARG_UNUSED(lazy);

	DEBUG_RADIO_START_S(1);

	LL_ASSERT(_radio.role == ROLE_NONE);
    cf06:	4b6d      	ldr	r3, [pc, #436]	; (d0bc <event_slave+0x1bc>)
    cf08:	7bd9      	ldrb	r1, [r3, #15]
	DEBUG_RADIO_PREPARE_S(0);
}

static void event_slave(u32_t ticks_at_expire, u32_t remainder, u16_t lazy,
			void *context)
{
    cf0a:	4607      	mov	r7, r0
	ARG_UNUSED(remainder);
	ARG_UNUSED(lazy);

	DEBUG_RADIO_START_S(1);

	LL_ASSERT(_radio.role == ROLE_NONE);
    cf0c:	f001 02ff 	and.w	r2, r1, #255	; 0xff
    cf10:	461d      	mov	r5, r3
    cf12:	b141      	cbz	r1, cf26 <event_slave+0x26>
    cf14:	4b6a      	ldr	r3, [pc, #424]	; (d0c0 <event_slave+0x1c0>)
    cf16:	9301      	str	r3, [sp, #4]
    cf18:	4b6a      	ldr	r3, [pc, #424]	; (d0c4 <event_slave+0x1c4>)
    cf1a:	9300      	str	r3, [sp, #0]
    cf1c:	4a6a      	ldr	r2, [pc, #424]	; (d0c8 <event_slave+0x1c8>)
    cf1e:	4b6b      	ldr	r3, [pc, #428]	; (d0cc <event_slave+0x1cc>)
    cf20:	496b      	ldr	r1, [pc, #428]	; (d0d0 <event_slave+0x1d0>)
    cf22:	486c      	ldr	r0, [pc, #432]	; (d0d4 <event_slave+0x1d4>)
    cf24:	e00d      	b.n	cf42 <event_slave+0x42>

	conn = (struct connection *)context;
	LL_ASSERT(_radio.ticker_id_prepare ==
    cf26:	7b1b      	ldrb	r3, [r3, #12]
    cf28:	8c21      	ldrh	r1, [r4, #32]
    cf2a:	b2db      	uxtb	r3, r3
    cf2c:	3107      	adds	r1, #7
    cf2e:	428b      	cmp	r3, r1
    cf30:	d00f      	beq.n	cf52 <event_slave+0x52>
    cf32:	4b63      	ldr	r3, [pc, #396]	; (d0c0 <event_slave+0x1c0>)
    cf34:	9301      	str	r3, [sp, #4]
    cf36:	4b63      	ldr	r3, [pc, #396]	; (d0c4 <event_slave+0x1c4>)
    cf38:	9300      	str	r3, [sp, #0]
    cf3a:	4a63      	ldr	r2, [pc, #396]	; (d0c8 <event_slave+0x1c8>)
    cf3c:	4b63      	ldr	r3, [pc, #396]	; (d0cc <event_slave+0x1cc>)
    cf3e:	4964      	ldr	r1, [pc, #400]	; (d0d0 <event_slave+0x1d0>)
    cf40:	4865      	ldr	r0, [pc, #404]	; (d0d8 <event_slave+0x1d8>)
    cf42:	f7f4 fa9d 	bl	1480 <printk>
    cf46:	4040      	eors	r0, r0
    cf48:	f380 8811 	msr	BASEPRI, r0
    cf4c:	f04f 0004 	mov.w	r0, #4
    cf50:	df02      	svc	2
	_radio.state = STATE_RX;
	_radio.ticker_id_prepare = 0;
	_radio.ticker_id_event =
		(RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
	_radio.ticks_anchor = ticks_at_expire;
	_radio.packet_counter = 0;
    cf52:	f885 2194 	strb.w	r2, [r5, #404]	; 0x194
	_radio.crc_expire = 0;
    cf56:	f885 2195 	strb.w	r2, [r5, #405]	; 0x195

	conn = (struct connection *)context;
	LL_ASSERT(_radio.ticker_id_prepare ==
		  (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle));

	_radio.role = ROLE_SLAVE;
    cf5a:	2103      	movs	r1, #3
	_radio.state = STATE_RX;
	_radio.ticker_id_prepare = 0;
	_radio.ticker_id_event =
    cf5c:	b2db      	uxtb	r3, r3

	conn = (struct connection *)context;
	LL_ASSERT(_radio.ticker_id_prepare ==
		  (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle));

	_radio.role = ROLE_SLAVE;
    cf5e:	73e9      	strb	r1, [r5, #15]
	_radio.state = STATE_RX;
	_radio.ticker_id_prepare = 0;
    cf60:	732a      	strb	r2, [r5, #12]
	_radio.ticker_id_event =
    cf62:	736b      	strb	r3, [r5, #13]
	_radio.packet_counter = 0;
	_radio.crc_expire = 0;

	_radio.conn_curr = conn;

	conn->latency_event = conn->latency_prepare;
    cf64:	8d23      	ldrh	r3, [r4, #40]	; 0x28
		(RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
	_radio.ticks_anchor = ticks_at_expire;
	_radio.packet_counter = 0;
	_radio.crc_expire = 0;

	_radio.conn_curr = conn;
    cf66:	f8c5 4190 	str.w	r4, [r5, #400]	; 0x190
	conn = (struct connection *)context;
	LL_ASSERT(_radio.ticker_id_prepare ==
		  (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle));

	_radio.role = ROLE_SLAVE;
	_radio.state = STATE_RX;
    cf6a:	2101      	movs	r1, #1
	_radio.packet_counter = 0;
	_radio.crc_expire = 0;

	_radio.conn_curr = conn;

	conn->latency_event = conn->latency_prepare;
    cf6c:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn->latency_prepare = 0;
    cf6e:	8522      	strh	r2, [r4, #40]	; 0x28
	_radio.role = ROLE_SLAVE;
	_radio.state = STATE_RX;
	_radio.ticker_id_prepare = 0;
	_radio.ticker_id_event =
		(RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
	_radio.ticks_anchor = ticks_at_expire;
    cf70:	6068      	str	r0, [r5, #4]
	_radio.conn_curr = conn;

	conn->latency_event = conn->latency_prepare;
	conn->latency_prepare = 0;

	connection_configure(conn);
    cf72:	4620      	mov	r0, r4
	conn = (struct connection *)context;
	LL_ASSERT(_radio.ticker_id_prepare ==
		  (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle));

	_radio.role = ROLE_SLAVE;
	_radio.state = STATE_RX;
    cf74:	7429      	strb	r1, [r5, #16]
	_radio.conn_curr = conn;

	conn->latency_event = conn->latency_prepare;
	conn->latency_prepare = 0;

	connection_configure(conn);
    cf76:	f7ff ffa5 	bl	cec4 <connection_configure>

	radio_tmr_tifs_set(RADIO_TIFS);
    cf7a:	2096      	movs	r0, #150	; 0x96
    cf7c:	f7fc ff18 	bl	9db0 <radio_tmr_tifs_set>

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
	radio_switch_complete_and_tx(conn->phy_tx, conn->phy_flags);
    cf80:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    cf84:	09c1      	lsrs	r1, r0, #7
    cf86:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    cf8a:	f7fc fe8d 	bl	9ca8 <radio_switch_complete_and_tx>
#else /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */
	radio_switch_complete_and_tx(0, 0);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */

	rx_packet_set(conn, (struct pdu_data *)
		      _radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    cf8e:	f895 21bd 	ldrb.w	r2, [r5, #445]	; 0x1bd
    cf92:	f8d5 31b8 	ldr.w	r3, [r5, #440]	; 0x1b8
    cf96:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
	radio_switch_complete_and_tx(conn->phy_tx, conn->phy_flags);
#else /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */
	radio_switch_complete_and_tx(0, 0);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */

	rx_packet_set(conn, (struct pdu_data *)
    cf9a:	4620      	mov	r0, r4
    cf9c:	3108      	adds	r1, #8
    cf9e:	f7fe fb9d 	bl	b6dc <rx_packet_set>
		      _radio.packet_rx[_radio.packet_rx_last]->pdu_data);

	/* Setup Radio Channel */
	if (conn->data_chan_sel) {
    cfa2:	7f23      	ldrb	r3, [r4, #28]
    cfa4:	f013 0f40 	tst.w	r3, #64	; 0x40
    cfa8:	f104 0217 	add.w	r2, r4, #23
    cfac:	d008      	beq.n	cfc0 <event_slave+0xc0>
#if defined(CONFIG_BLUETOOTH_CONTROLLER_CHAN_SEL_2)
		data_chan_use = chan_sel_2(conn->event_counter - 1,
    cfae:	8c60      	ldrh	r0, [r4, #34]	; 0x22
    cfb0:	8be1      	ldrh	r1, [r4, #30]
    cfb2:	3801      	subs	r0, #1
    cfb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    cfb8:	b280      	uxth	r0, r0
    cfba:	f7ff ff3f 	bl	ce3c <chan_sel_2>
    cfbe:	e01e      	b.n	cffe <event_slave+0xfe>
static u8_t chan_sel_1(u8_t *chan_use, u8_t hop, u16_t latency, u8_t *chan_map,
		       u8_t chan_count)
{
	u8_t chan_next;

	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    cfc0:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
    cfc2:	7fa1      	ldrb	r1, [r4, #30]
    cfc4:	7fe6      	ldrb	r6, [r4, #31]
    cfc6:	fb00 1101 	mla	r1, r0, r1, r1
    cfca:	4431      	add	r1, r6
    cfcc:	2025      	movs	r0, #37	; 0x25
    cfce:	fb91 f6f0 	sdiv	r6, r1, r0
    cfd2:	fb00 1116 	mls	r1, r0, r6, r1
    cfd6:	b2c8      	uxtb	r0, r1
	*chan_use = chan_next;

	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    cfd8:	08c6      	lsrs	r6, r0, #3
		       u8_t chan_count)
{
	u8_t chan_next;

	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
	*chan_use = chan_next;
    cfda:	77e0      	strb	r0, [r4, #31]

	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    cfdc:	5d96      	ldrb	r6, [r2, r6]
    cfde:	f001 0107 	and.w	r1, r1, #7
    cfe2:	fa46 f101 	asr.w	r1, r6, r1
    cfe6:	07c9      	lsls	r1, r1, #31
	} else {
		data_chan_use = chan_sel_1(&conn->data_chan_use,
					   conn->data_chan_hop,
					   conn->latency_event,
					   &conn->data_chan_map[0],
					   conn->data_chan_count);
    cfe8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	u8_t chan_next;

	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
	*chan_use = chan_next;

	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    cfec:	d407      	bmi.n	cffe <event_slave+0xfe>
		u8_t chan_index;

		chan_index = chan_next % chan_count;
    cfee:	fbb0 f1f3 	udiv	r1, r0, r3
    cff2:	fb03 0111 	mls	r1, r3, r1, r0
		chan_next = chan_sel_remap(chan_map, chan_index);
    cff6:	b2c9      	uxtb	r1, r1
    cff8:	4610      	mov	r0, r2
    cffa:	f7fe f84f 	bl	b09c <chan_sel_remap>
					   conn->data_chan_hop,
					   conn->latency_event,
					   &conn->data_chan_map[0],
					   conn->data_chan_count);
	}
	chan_set(data_chan_use);
    cffe:	f7ff f903 	bl	c208 <chan_set>

	/* current window widening */
	conn->role.slave.window_widening_event_us +=
    d002:	6d62      	ldr	r2, [r4, #84]	; 0x54
    d004:	6d23      	ldr	r3, [r4, #80]	; 0x50
    d006:	4413      	add	r3, r2
		conn->role.slave.window_widening_prepare_us;
	conn->role.slave.window_widening_prepare_us = 0;
    d008:	2200      	movs	r2, #0
    d00a:	6522      	str	r2, [r4, #80]	; 0x50
	if (conn->role.slave.window_widening_event_us >
	    conn->role.slave.window_widening_max_us) {
    d00c:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
					   conn->data_chan_count);
	}
	chan_set(data_chan_use);

	/* current window widening */
	conn->role.slave.window_widening_event_us +=
    d00e:	6563      	str	r3, [r4, #84]	; 0x54
		conn->role.slave.window_widening_prepare_us;
	conn->role.slave.window_widening_prepare_us = 0;
	if (conn->role.slave.window_widening_event_us >
    d010:	4293      	cmp	r3, r2
	    conn->role.slave.window_widening_max_us) {
		conn->role.slave.window_widening_event_us =
    d012:	bf88      	it	hi
    d014:	6562      	strhi	r2, [r4, #84]	; 0x54
			conn->role.slave.window_widening_max_us;
	}

	/* current window size */
	conn->role.slave.window_size_event_us +=
    d016:	6da3      	ldr	r3, [r4, #88]	; 0x58
    d018:	6de2      	ldr	r2, [r4, #92]	; 0x5c
		conn->role.slave.window_size_prepare_us;
	conn->role.slave.window_size_prepare_us = 0;
    d01a:	2000      	movs	r0, #0
		conn->role.slave.window_widening_event_us =
			conn->role.slave.window_widening_max_us;
	}

	/* current window size */
	conn->role.slave.window_size_event_us +=
    d01c:	4413      	add	r3, r2
    d01e:	65e3      	str	r3, [r4, #92]	; 0x5c
		conn->role.slave.window_size_prepare_us;
	conn->role.slave.window_size_prepare_us = 0;

	remainder_us =
    d020:	68aa      	ldr	r2, [r5, #8]
	}

	/* current window size */
	conn->role.slave.window_size_event_us +=
		conn->role.slave.window_size_prepare_us;
	conn->role.slave.window_size_prepare_us = 0;
    d022:	65a0      	str	r0, [r4, #88]	; 0x58

	remainder_us =
    d024:	f107 0109 	add.w	r1, r7, #9
    d028:	f7fc fec8 	bl	9dbc <radio_tmr_start>
    d02c:	4680      	mov	r8, r0
		radio_tmr_start(0, ticks_at_expire +
				TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US),
				_radio.remainder_anchor);
	radio_tmr_aa_capture();
    d02e:	f7fc ff47 	bl	9ec0 <radio_tmr_aa_capture>
	hcto = remainder_us + (RADIO_TICKER_JITTER_US << 2) +
    d032:	6de3      	ldr	r3, [r4, #92]	; 0x5c
	       (conn->role.slave.window_widening_event_us << 1) +
	       conn->role.slave.window_size_event_us;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
	hcto += radio_rx_ready_delay_get(conn->phy_rx);
    d034:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
	remainder_us =
		radio_tmr_start(0, ticks_at_expire +
				TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US),
				_radio.remainder_anchor);
	radio_tmr_aa_capture();
	hcto = remainder_us + (RADIO_TICKER_JITTER_US << 2) +
    d038:	6d66      	ldr	r6, [r4, #84]	; 0x54
    d03a:	3340      	adds	r3, #64	; 0x40
	       (conn->role.slave.window_widening_event_us << 1) +
	       conn->role.slave.window_size_event_us;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
	hcto += radio_rx_ready_delay_get(conn->phy_rx);
    d03c:	f3c0 00c2 	ubfx	r0, r0, #3, #3
	remainder_us =
		radio_tmr_start(0, ticks_at_expire +
				TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US),
				_radio.remainder_anchor);
	radio_tmr_aa_capture();
	hcto = remainder_us + (RADIO_TICKER_JITTER_US << 2) +
    d040:	eb03 0646 	add.w	r6, r3, r6, lsl #1
	       (conn->role.slave.window_widening_event_us << 1) +
	       conn->role.slave.window_size_event_us;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
	hcto += radio_rx_ready_delay_get(conn->phy_rx);
    d044:	f7fc fdbe 	bl	9bc4 <radio_rx_ready_delay_get>
	hcto += addr_us_get(conn->phy_rx);
    d048:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
	packet_rx_allocate(0xFF);
}

static inline u32_t addr_us_get(u8_t phy)
{
	switch (phy) {
    d04c:	f3c3 03c2 	ubfx	r3, r3, #3, #3
	remainder_us =
		radio_tmr_start(0, ticks_at_expire +
				TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US),
				_radio.remainder_anchor);
	radio_tmr_aa_capture();
	hcto = remainder_us + (RADIO_TICKER_JITTER_US << 2) +
    d050:	4446      	add	r6, r8
	packet_rx_allocate(0xFF);
}

static inline u32_t addr_us_get(u8_t phy)
{
	switch (phy) {
    d052:	2b02      	cmp	r3, #2
	hcto = remainder_us + (RADIO_TICKER_JITTER_US << 2) +
	       (conn->role.slave.window_widening_event_us << 1) +
	       conn->role.slave.window_size_event_us;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
	hcto += radio_rx_ready_delay_get(conn->phy_rx);
    d054:	4430      	add	r0, r6
	packet_rx_allocate(0xFF);
}

static inline u32_t addr_us_get(u8_t phy)
{
	switch (phy) {
    d056:	d005      	beq.n	d064 <event_slave+0x164>
	default:
	case BIT(0):
		return 40;
    d058:	2b04      	cmp	r3, #4
    d05a:	bf0c      	ite	eq
    d05c:	f44f 73bc 	moveq.w	r3, #376	; 0x178
    d060:	2328      	movne	r3, #40	; 0x28
    d062:	e000      	b.n	d066 <event_slave+0x166>
	case BIT(1):
		return 24;
    d064:	2318      	movs	r3, #24
#else /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */
	hcto += radio_rx_ready_delay_get(0);
	hcto += addr_us_get(0);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */

	radio_tmr_hcto_configure(hcto);
    d066:	4418      	add	r0, r3
    d068:	f7fc ff08 	bl	9e7c <radio_tmr_hcto_configure>
	radio_tmr_end_capture();
    d06c:	f7fc ff4e 	bl	9f0c <radio_tmr_end_capture>
#endif /* CONFIG_BLUETOOTH_CONTROLLER_CONN_RSSI */

#if (defined(CONFIG_BLUETOOTH_CONTROLLER_XTAL_ADVANCED) && \
     (RADIO_TICKER_PREEMPT_PART_US <= RADIO_TICKER_PREEMPT_PART_MIN_US))
	/* check if preempt to start has changed */
	if (preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
    d070:	f894 1020 	ldrb.w	r1, [r4, #32]
    d074:	3107      	adds	r1, #7
    d076:	463a      	mov	r2, r7
    d078:	b2c9      	uxtb	r1, r1
    d07a:	4620      	mov	r0, r4
    d07c:	f7ff fd16 	bl	caac <preempt_calc>
    d080:	4603      	mov	r3, r0
    d082:	b120      	cbz	r0, d08e <event_slave+0x18e>
				      conn->handle), ticks_at_expire) != 0) {
		_radio.state = STATE_STOP;
    d084:	2304      	movs	r3, #4
    d086:	742b      	strb	r3, [r5, #16]
		radio_disable();
    d088:	f7fc fdb0 	bl	9bec <radio_disable>
    d08c:	e00f      	b.n	d0ae <event_slave+0x1ae>
	{
	/* Ticker Job Silence */
#if (RADIO_TICKER_USER_ID_WORKER_PRIO == RADIO_TICKER_USER_ID_JOB_PRIO)
		u32_t ticker_status;

		ticker_status =
    d08e:	4a13      	ldr	r2, [pc, #76]	; (d0dc <event_slave+0x1dc>)
    d090:	4601      	mov	r1, r0
    d092:	f7fd ff83 	bl	af9c <ticker_job_idle_get>
			ticker_job_idle_get(RADIO_TICKER_INSTANCE_ID_RADIO,
					    RADIO_TICKER_USER_ID_WORKER,
					    ticker_job_disable, NULL);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    d096:	f030 0302 	bics.w	r3, r0, #2
    d09a:	d008      	beq.n	d0ae <event_slave+0x1ae>
    d09c:	4b08      	ldr	r3, [pc, #32]	; (d0c0 <event_slave+0x1c0>)
    d09e:	9301      	str	r3, [sp, #4]
    d0a0:	4b08      	ldr	r3, [pc, #32]	; (d0c4 <event_slave+0x1c4>)
    d0a2:	9300      	str	r3, [sp, #0]
    d0a4:	4a08      	ldr	r2, [pc, #32]	; (d0c8 <event_slave+0x1c8>)
    d0a6:	4b09      	ldr	r3, [pc, #36]	; (d0cc <event_slave+0x1cc>)
    d0a8:	4909      	ldr	r1, [pc, #36]	; (d0d0 <event_slave+0x1d0>)
    d0aa:	480d      	ldr	r0, [pc, #52]	; (d0e0 <event_slave+0x1e0>)
    d0ac:	e749      	b.n	cf42 <event_slave+0x42>
			  (ticker_status == TICKER_STATUS_BUSY));
#endif
	}

	/* Route the tx packet to respective connections */
	packet_tx_enqueue(2);
    d0ae:	2002      	movs	r0, #2

	DEBUG_RADIO_START_S(0);
}
    d0b0:	b002      	add	sp, #8
    d0b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			  (ticker_status == TICKER_STATUS_BUSY));
#endif
	}

	/* Route the tx packet to respective connections */
	packet_tx_enqueue(2);
    d0b6:	f7fe bed9 	b.w	be6c <packet_tx_enqueue>
    d0ba:	bf00      	nop
    d0bc:	20001470 	.word	0x20001470
    d0c0:	00013df4 	.word	0x00013df4
    d0c4:	00013df9 	.word	0x00013df9
    d0c8:	00013db4 	.word	0x00013db4
    d0cc:	00016956 	.word	0x00016956
    d0d0:	00013dbb 	.word	0x00013dbb
    d0d4:	00015768 	.word	0x00015768
    d0d8:	00015820 	.word	0x00015820
    d0dc:	0000bb55 	.word	0x0000bb55
    d0e0:	000154fb 	.word	0x000154fb

0000d0e4 <ctrl_tx_enqueue>:
	p->next = node_tx;
}

static void ctrl_tx_enqueue(struct connection *conn,
			    struct radio_pdu_node_tx *node_tx)
{
    d0e4:	b510      	push	{r4, lr}
	/* check if a packet was tx-ed and not acked by peer */
	if (
	    /* An explicit empty PDU is not enqueued */
	    (conn->empty == 0) &&
    d0e6:	f890 40c0 	ldrb.w	r4, [r0, #192]	; 0xc0
    d0ea:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108

static void ctrl_tx_enqueue(struct connection *conn,
			    struct radio_pdu_node_tx *node_tx)
{
	/* check if a packet was tx-ed and not acked by peer */
	if (
    d0ee:	f014 0f80 	tst.w	r4, #128	; 0x80
    d0f2:	d119      	bne.n	d128 <ctrl_tx_enqueue+0x44>
	    /* An explicit empty PDU is not enqueued */
	    (conn->empty == 0) &&
	    /* and data/ctrl packet is in the head */
	    (conn->pkt_tx_head) && (
    d0f4:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
			    struct radio_pdu_node_tx *node_tx)
{
	/* check if a packet was tx-ed and not acked by peer */
	if (
	    /* An explicit empty PDU is not enqueued */
	    (conn->empty == 0) &&
    d0f8:	b1b2      	cbz	r2, d128 <ctrl_tx_enqueue+0x44>
	    /* and data/ctrl packet is in the head */
	    (conn->pkt_tx_head) && (
    d0fa:	0724      	lsls	r4, r4, #28
    d0fc:	d501      	bpl.n	d102 <ctrl_tx_enqueue+0x1e>
				    /* data PDU tx is not paused */
				    (conn->pause_tx == 0) ||
    d0fe:	429a      	cmp	r2, r3
    d100:	d112      	bne.n	d128 <ctrl_tx_enqueue+0x44>

		/* if data transmited once, keep it at head of the tx list,
		 * as we will insert a ctrl after it, hence advance the
		 * data pointer
		 */
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
    d102:	f8d0 410c 	ldr.w	r4, [r0, #268]	; 0x10c
    d106:	42a2      	cmp	r2, r4
			conn->pkt_tx_data = conn->pkt_tx_data->next;
    d108:	bf04      	itt	eq
    d10a:	6814      	ldreq	r4, [r2, #0]
    d10c:	f8c0 410c 	streq.w	r4, [r0, #268]	; 0x10c
		}

		/* if no ctrl packet already queued, new ctrl added will be
		 * the ctrl pointer and is inserted after head.
		 */
		if (!conn->pkt_tx_ctrl) {
    d110:	b91b      	cbnz	r3, d11a <ctrl_tx_enqueue+0x36>
			node_tx->next = conn->pkt_tx_head->next;
    d112:	6813      	ldr	r3, [r2, #0]
    d114:	600b      	str	r3, [r1, #0]
			conn->pkt_tx_head->next = node_tx;
    d116:	6011      	str	r1, [r2, #0]
    d118:	e00c      	b.n	d134 <ctrl_tx_enqueue+0x50>
{
	struct radio_pdu_node_tx *p;

	/* TODO: optimise by having a ctrl_last member. */
	p = conn->pkt_tx_ctrl;
	while (p->next != conn->pkt_tx_data) {
    d11a:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
    d11e:	681c      	ldr	r4, [r3, #0]
    d120:	4294      	cmp	r4, r2
    d122:	d011      	beq.n	d148 <ctrl_tx_enqueue+0x64>
    d124:	4623      	mov	r3, r4
    d126:	e7fa      	b.n	d11e <ctrl_tx_enqueue+0x3a>
		/* No packet needing ACK. */

		/* If first ctrl packet then add it as head else add it to the
		 * tail of the ctrl packets.
		 */
		if (!conn->pkt_tx_ctrl) {
    d128:	b93b      	cbnz	r3, d13a <ctrl_tx_enqueue+0x56>
			node_tx->next = conn->pkt_tx_head;
    d12a:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    d12e:	600b      	str	r3, [r1, #0]
			conn->pkt_tx_head = node_tx;
    d130:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
			conn->pkt_tx_ctrl = node_tx;
    d134:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    d138:	e008      	b.n	d14c <ctrl_tx_enqueue+0x68>
{
	struct radio_pdu_node_tx *p;

	/* TODO: optimise by having a ctrl_last member. */
	p = conn->pkt_tx_ctrl;
	while (p->next != conn->pkt_tx_data) {
    d13a:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
    d13e:	681c      	ldr	r4, [r3, #0]
    d140:	4294      	cmp	r4, r2
    d142:	d001      	beq.n	d148 <ctrl_tx_enqueue+0x64>
    d144:	4623      	mov	r3, r4
    d146:	e7fa      	b.n	d13e <ctrl_tx_enqueue+0x5a>
		p = p->next;
	}

	node_tx->next = p->next;
    d148:	600a      	str	r2, [r1, #0]
	p->next = node_tx;
    d14a:	6019      	str	r1, [r3, #0]
			ctrl_tx_enqueue_tail(conn, node_tx);
		}
	}

	/* Update last pointer if ctrl added at end of tx list */
	if (node_tx->next == 0) {
    d14c:	680b      	ldr	r3, [r1, #0]
    d14e:	b90b      	cbnz	r3, d154 <ctrl_tx_enqueue+0x70>
		conn->pkt_tx_last = node_tx;
    d150:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
    d154:	bd10      	pop	{r4, pc}
	...

0000d158 <start_enc_rsp_send>:
	ctrl_tx_enqueue(conn, node_tx);
}

static void start_enc_rsp_send(struct connection *conn,
			       struct pdu_data *pdu_ctrl_tx)
{
    d158:	b513      	push	{r0, r1, r4, lr}
	struct radio_pdu_node_tx *node_tx = NULL;

	if (!pdu_ctrl_tx) {
    d15a:	460b      	mov	r3, r1
	ctrl_tx_enqueue(conn, node_tx);
}

static void start_enc_rsp_send(struct connection *conn,
			       struct pdu_data *pdu_ctrl_tx)
{
    d15c:	4604      	mov	r4, r0
	struct radio_pdu_node_tx *node_tx = NULL;

	if (!pdu_ctrl_tx) {
    d15e:	b9b1      	cbnz	r1, d18e <start_enc_rsp_send+0x36>
		/* acquire tx mem */
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    d160:	4814      	ldr	r0, [pc, #80]	; (d1b4 <start_enc_rsp_send+0x5c>)
    d162:	f7fc fb72 	bl	984a <mem_acquire>
		LL_ASSERT(node_tx);
    d166:	4601      	mov	r1, r0
    d168:	b978      	cbnz	r0, d18a <start_enc_rsp_send+0x32>
    d16a:	4b13      	ldr	r3, [pc, #76]	; (d1b8 <start_enc_rsp_send+0x60>)
    d16c:	9301      	str	r3, [sp, #4]
    d16e:	4b13      	ldr	r3, [pc, #76]	; (d1bc <start_enc_rsp_send+0x64>)
    d170:	9300      	str	r3, [sp, #0]
    d172:	4a13      	ldr	r2, [pc, #76]	; (d1c0 <start_enc_rsp_send+0x68>)
    d174:	4b13      	ldr	r3, [pc, #76]	; (d1c4 <start_enc_rsp_send+0x6c>)
    d176:	4914      	ldr	r1, [pc, #80]	; (d1c8 <start_enc_rsp_send+0x70>)
    d178:	4814      	ldr	r0, [pc, #80]	; (d1cc <start_enc_rsp_send+0x74>)
    d17a:	f7f4 f981 	bl	1480 <printk>
    d17e:	4040      	eors	r0, r0
    d180:	f380 8811 	msr	BASEPRI, r0
    d184:	f04f 0004 	mov.w	r0, #4
    d188:	df02      	svc	2

		pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
    d18a:	1d03      	adds	r3, r0, #4
    d18c:	e000      	b.n	d190 <start_enc_rsp_send+0x38>
}

static void start_enc_rsp_send(struct connection *conn,
			       struct pdu_data *pdu_ctrl_tx)
{
	struct radio_pdu_node_tx *node_tx = NULL;
    d18e:	2100      	movs	r1, #0
		LL_ASSERT(node_tx);

		pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	}

	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d190:	781a      	ldrb	r2, [r3, #0]
    d192:	f042 0203 	orr.w	r2, r2, #3
    d196:	701a      	strb	r2, [r3, #0]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata);
    d198:	2201      	movs	r2, #1
    d19a:	705a      	strb	r2, [r3, #1]
	pdu_ctrl_tx->payload.llctrl.opcode =
    d19c:	2206      	movs	r2, #6
    d19e:	70da      	strb	r2, [r3, #3]
		PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;

	if (node_tx) {
    d1a0:	b129      	cbz	r1, d1ae <start_enc_rsp_send+0x56>
		ctrl_tx_enqueue(conn, node_tx);
    d1a2:	4620      	mov	r0, r4
	}
}
    d1a4:	b002      	add	sp, #8
    d1a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata);
	pdu_ctrl_tx->payload.llctrl.opcode =
		PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;

	if (node_tx) {
		ctrl_tx_enqueue(conn, node_tx);
    d1aa:	f7ff bf9b 	b.w	d0e4 <ctrl_tx_enqueue>
	}
}
    d1ae:	b002      	add	sp, #8
    d1b0:	bd10      	pop	{r4, pc}
    d1b2:	bf00      	nop
    d1b4:	20001648 	.word	0x20001648
    d1b8:	00013df4 	.word	0x00013df4
    d1bc:	00013df9 	.word	0x00013df9
    d1c0:	00013db4 	.word	0x00013db4
    d1c4:	000167d8 	.word	0x000167d8
    d1c8:	00013dbb 	.word	0x00013dbb
    d1cc:	00015870 	.word	0x00015870

0000d1d0 <pause_enc_rsp_send>:

static void pause_enc_rsp_send(struct connection *conn)
{
    d1d0:	b513      	push	{r0, r1, r4, lr}
    d1d2:	4604      	mov	r4, r0
	struct radio_pdu_node_tx *node_tx;
	struct pdu_data *pdu_ctrl_tx;

	/* acquire tx mem */
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    d1d4:	4811      	ldr	r0, [pc, #68]	; (d21c <pause_enc_rsp_send+0x4c>)
    d1d6:	f7fc fb38 	bl	984a <mem_acquire>
	LL_ASSERT(node_tx);
    d1da:	4601      	mov	r1, r0
    d1dc:	b978      	cbnz	r0, d1fe <pause_enc_rsp_send+0x2e>
    d1de:	4b10      	ldr	r3, [pc, #64]	; (d220 <pause_enc_rsp_send+0x50>)
    d1e0:	9301      	str	r3, [sp, #4]
    d1e2:	4b10      	ldr	r3, [pc, #64]	; (d224 <pause_enc_rsp_send+0x54>)
    d1e4:	9300      	str	r3, [sp, #0]
    d1e6:	4a10      	ldr	r2, [pc, #64]	; (d228 <pause_enc_rsp_send+0x58>)
    d1e8:	4b10      	ldr	r3, [pc, #64]	; (d22c <pause_enc_rsp_send+0x5c>)
    d1ea:	4911      	ldr	r1, [pc, #68]	; (d230 <pause_enc_rsp_send+0x60>)
    d1ec:	4811      	ldr	r0, [pc, #68]	; (d234 <pause_enc_rsp_send+0x64>)
    d1ee:	f7f4 f947 	bl	1480 <printk>
    d1f2:	4040      	eors	r0, r0
    d1f4:	f380 8811 	msr	BASEPRI, r0
    d1f8:	f04f 0004 	mov.w	r0, #4
    d1fc:	df02      	svc	2

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d1fe:	7903      	ldrb	r3, [r0, #4]
    d200:	f043 0303 	orr.w	r3, r3, #3
    d204:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata);
    d206:	2301      	movs	r3, #1
    d208:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode =
    d20a:	230b      	movs	r3, #11
    d20c:	71c3      	strb	r3, [r0, #7]
		PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;

	ctrl_tx_enqueue(conn, node_tx);
    d20e:	4620      	mov	r0, r4
}
    d210:	b002      	add	sp, #8
    d212:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata);
	pdu_ctrl_tx->payload.llctrl.opcode =
		PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;

	ctrl_tx_enqueue(conn, node_tx);
    d216:	f7ff bf65 	b.w	d0e4 <ctrl_tx_enqueue>
    d21a:	bf00      	nop
    d21c:	20001648 	.word	0x20001648
    d220:	00013df4 	.word	0x00013df4
    d224:	00013df9 	.word	0x00013df9
    d228:	00013db4 	.word	0x00013db4
    d22c:	000169c6 	.word	0x000169c6
    d230:	00013dbb 	.word	0x00013dbb
    d234:	00015870 	.word	0x00015870

0000d238 <reject_ind_ext_send>:
}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

static void reject_ind_ext_send(struct connection *conn,
				u8_t reject_opcode, u8_t error_code)
{
    d238:	b573      	push	{r0, r1, r4, r5, r6, lr}
    d23a:	4604      	mov	r4, r0
	struct radio_pdu_node_tx *node_tx;
	struct pdu_data *pdu_ctrl_tx;

	/* acquire tx mem */
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    d23c:	4813      	ldr	r0, [pc, #76]	; (d28c <reject_ind_ext_send+0x54>)
}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

static void reject_ind_ext_send(struct connection *conn,
				u8_t reject_opcode, u8_t error_code)
{
    d23e:	460e      	mov	r6, r1
    d240:	4615      	mov	r5, r2
	struct radio_pdu_node_tx *node_tx;
	struct pdu_data *pdu_ctrl_tx;

	/* acquire tx mem */
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    d242:	f7fc fb02 	bl	984a <mem_acquire>
	LL_ASSERT(node_tx);
    d246:	b978      	cbnz	r0, d268 <reject_ind_ext_send+0x30>
    d248:	4b11      	ldr	r3, [pc, #68]	; (d290 <reject_ind_ext_send+0x58>)
    d24a:	9301      	str	r3, [sp, #4]
    d24c:	4b11      	ldr	r3, [pc, #68]	; (d294 <reject_ind_ext_send+0x5c>)
    d24e:	9300      	str	r3, [sp, #0]
    d250:	4a11      	ldr	r2, [pc, #68]	; (d298 <reject_ind_ext_send+0x60>)
    d252:	4b12      	ldr	r3, [pc, #72]	; (d29c <reject_ind_ext_send+0x64>)
    d254:	4912      	ldr	r1, [pc, #72]	; (d2a0 <reject_ind_ext_send+0x68>)
    d256:	4813      	ldr	r0, [pc, #76]	; (d2a4 <reject_ind_ext_send+0x6c>)
    d258:	f7f4 f912 	bl	1480 <printk>
    d25c:	4040      	eors	r0, r0
    d25e:	f380 8811 	msr	BASEPRI, r0
    d262:	f04f 0004 	mov.w	r0, #4
    d266:	df02      	svc	2

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d268:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
		sizeof(struct pdu_data_llctrl_reject_ext_ind);
	pdu_ctrl_tx->payload.llctrl.opcode =
		PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
	pdu_ctrl_tx->payload.llctrl.ctrldata.reject_ext_ind.reject_opcode =
    d26a:	7206      	strb	r6, [r0, #8]
	/* acquire tx mem */
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
	LL_ASSERT(node_tx);

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d26c:	f043 0303 	orr.w	r3, r3, #3
    d270:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
    d272:	2303      	movs	r3, #3
    d274:	7143      	strb	r3, [r0, #5]
		sizeof(struct pdu_data_llctrl_reject_ext_ind);
	pdu_ctrl_tx->payload.llctrl.opcode =
    d276:	2311      	movs	r3, #17
    d278:	71c3      	strb	r3, [r0, #7]
		PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
	pdu_ctrl_tx->payload.llctrl.ctrldata.reject_ext_ind.reject_opcode =
		reject_opcode;
	pdu_ctrl_tx->payload.llctrl.ctrldata.reject_ext_ind.error_code =
    d27a:	7245      	strb	r5, [r0, #9]
		error_code;

	ctrl_tx_enqueue(conn, node_tx);
    d27c:	4601      	mov	r1, r0
    d27e:	4620      	mov	r0, r4
}
    d280:	b002      	add	sp, #8
    d282:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	pdu_ctrl_tx->payload.llctrl.ctrldata.reject_ext_ind.reject_opcode =
		reject_opcode;
	pdu_ctrl_tx->payload.llctrl.ctrldata.reject_ext_ind.error_code =
		error_code;

	ctrl_tx_enqueue(conn, node_tx);
    d286:	f7ff bf2d 	b.w	d0e4 <ctrl_tx_enqueue>
    d28a:	bf00      	nop
    d28c:	20001648 	.word	0x20001648
    d290:	00013df4 	.word	0x00013df4
    d294:	00013df9 	.word	0x00013df9
    d298:	00013db4 	.word	0x00013db4
    d29c:	0001685a 	.word	0x0001685a
    d2a0:	00013dbb 	.word	0x00013dbb
    d2a4:	00015870 	.word	0x00015870

0000d2a8 <event_connection_prepare>:
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PHY */

static void event_connection_prepare(u32_t ticks_at_expire,
				     u32_t remainder, u16_t lazy,
				     struct connection *conn)
{
    d2a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u16_t event_counter;

	LL_ASSERT(!_radio.ticker_id_prepare);
    d2ac:	4db1      	ldr	r5, [pc, #708]	; (d574 <event_connection_prepare+0x2cc>)
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PHY */

static void event_connection_prepare(u32_t ticks_at_expire,
				     u32_t remainder, u16_t lazy,
				     struct connection *conn)
{
    d2ae:	b08f      	sub	sp, #60	; 0x3c
    d2b0:	461c      	mov	r4, r3
	u16_t event_counter;

	LL_ASSERT(!_radio.ticker_id_prepare);
    d2b2:	7b2b      	ldrb	r3, [r5, #12]
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PHY */

static void event_connection_prepare(u32_t ticks_at_expire,
				     u32_t remainder, u16_t lazy,
				     struct connection *conn)
{
    d2b4:	910c      	str	r1, [sp, #48]	; 0x30
    d2b6:	4681      	mov	r9, r0
	u16_t event_counter;

	LL_ASSERT(!_radio.ticker_id_prepare);
    d2b8:	b143      	cbz	r3, d2cc <event_connection_prepare+0x24>
    d2ba:	4baf      	ldr	r3, [pc, #700]	; (d578 <event_connection_prepare+0x2d0>)
    d2bc:	9301      	str	r3, [sp, #4]
    d2be:	4baf      	ldr	r3, [pc, #700]	; (d57c <event_connection_prepare+0x2d4>)
    d2c0:	9300      	str	r3, [sp, #0]
    d2c2:	4aaf      	ldr	r2, [pc, #700]	; (d580 <event_connection_prepare+0x2d8>)
    d2c4:	4baf      	ldr	r3, [pc, #700]	; (d584 <event_connection_prepare+0x2dc>)
    d2c6:	49b0      	ldr	r1, [pc, #704]	; (d588 <event_connection_prepare+0x2e0>)
    d2c8:	48b0      	ldr	r0, [pc, #704]	; (d58c <event_connection_prepare+0x2e4>)
    d2ca:	e0cf      	b.n	d46c <event_connection_prepare+0x1c4>
	_radio.ticker_id_prepare =
    d2cc:	f894 3020 	ldrb.w	r3, [r4, #32]
    d2d0:	3307      	adds	r3, #7
    d2d2:	b2db      	uxtb	r3, r3
    d2d4:	732b      	strb	r3, [r5, #12]
	    RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle;

	/* Calc window widening */
	if (conn->role.slave.role != 0) {
    d2d6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    d2da:	07df      	lsls	r7, r3, #31
    d2dc:	d509      	bpl.n	d2f2 <event_connection_prepare+0x4a>
		conn->role.slave.window_widening_prepare_us +=
    d2de:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    d2e0:	6d21      	ldr	r1, [r4, #80]	; 0x50
    d2e2:	fb02 3303 	mla	r3, r2, r3, r3
    d2e6:	440b      	add	r3, r1
		    conn->role.slave.window_widening_periodic_us * (lazy + 1);
		if (conn->role.slave.window_widening_prepare_us >
		    conn->role.slave.window_widening_max_us) {
    d2e8:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
	_radio.ticker_id_prepare =
	    RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle;

	/* Calc window widening */
	if (conn->role.slave.role != 0) {
		conn->role.slave.window_widening_prepare_us +=
    d2ea:	6523      	str	r3, [r4, #80]	; 0x50
		    conn->role.slave.window_widening_periodic_us * (lazy + 1);
		if (conn->role.slave.window_widening_prepare_us >
    d2ec:	428b      	cmp	r3, r1
		    conn->role.slave.window_widening_max_us) {
			conn->role.slave.window_widening_prepare_us =
    d2ee:	bf88      	it	hi
    d2f0:	6521      	strhi	r1, [r4, #80]	; 0x50
				conn->role.slave.window_widening_max_us;
		}
	}

	/* save the latency for use in event */
	conn->latency_prepare += lazy;
    d2f2:	8d23      	ldrh	r3, [r4, #40]	; 0x28

	/* calc current event counter value */
	event_counter = conn->event_counter + conn->latency_prepare;
    d2f4:	f8b4 8022 	ldrh.w	r8, [r4, #34]	; 0x22
				conn->role.slave.window_widening_max_us;
		}
	}

	/* save the latency for use in event */
	conn->latency_prepare += lazy;
    d2f8:	441a      	add	r2, r3
    d2fa:	b292      	uxth	r2, r2

	/* calc current event counter value */
	event_counter = conn->event_counter + conn->latency_prepare;
    d2fc:	4490      	add	r8, r2
				conn->role.slave.window_widening_max_us;
		}
	}

	/* save the latency for use in event */
	conn->latency_prepare += lazy;
    d2fe:	8522      	strh	r2, [r4, #40]	; 0x28

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
	/* check if PHY Req procedure is requested and no other procedure
	 * using instant is active.
	 */
	if ((conn->llcp_ack == conn->llcp_req) &&
    d300:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
    d304:	f894 2069 	ldrb.w	r2, [r4, #105]	; 0x69
    d308:	429a      	cmp	r2, r3

	/* save the latency for use in event */
	conn->latency_prepare += lazy;

	/* calc current event counter value */
	event_counter = conn->event_counter + conn->latency_prepare;
    d30a:	fa1f f888 	uxth.w	r8, r8

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
	/* check if PHY Req procedure is requested and no other procedure
	 * using instant is active.
	 */
	if ((conn->llcp_ack == conn->llcp_req) &&
    d30e:	f040 80bc 	bne.w	d48a <event_connection_prepare+0x1e2>
    d312:	f894 20bd 	ldrb.w	r2, [r4, #189]	; 0xbd
    d316:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
    d31a:	429a      	cmp	r2, r3
    d31c:	f000 8620 	beq.w	df60 <event_connection_prepare+0xcb8>
	    (conn->llcp_phy.ack != conn->llcp_phy.req)) {
		/* Stop previous event, to avoid Radio DMA corrupting the
		 * rx queue
		 */
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    d320:	2200      	movs	r2, #0
    d322:	2305      	movs	r3, #5
    d324:	4611      	mov	r1, r2
    d326:	4610      	mov	r0, r2
    d328:	f7fe fc20 	bl	bb6c <event_stop>
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
static inline void event_phy_req_prep(struct connection *conn)
{
	switch (conn->llcp_phy.state) {
    d32c:	f894 30be 	ldrb.w	r3, [r4, #190]	; 0xbe
    d330:	f003 0203 	and.w	r2, r3, #3
    d334:	2a03      	cmp	r2, #3
    d336:	f200 8091 	bhi.w	d45c <event_connection_prepare+0x1b4>
    d33a:	e8df f002 	tbb	[pc, r2]
    d33e:	9f02      	.short	0x9f02
    d340:	3d9f      	.short	0x3d9f
	{
		struct pdu_data_llctrl_phy_req_rsp *pr;
		struct radio_pdu_node_tx *node_tx;
		struct pdu_data *pdu_ctrl_tx;

		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    d342:	4893      	ldr	r0, [pc, #588]	; (d590 <event_connection_prepare+0x2e8>)
    d344:	f7fc fa81 	bl	984a <mem_acquire>
		if (!node_tx) {
    d348:	4601      	mov	r1, r0
    d34a:	2800      	cmp	r0, #0
    d34c:	f000 8096 	beq.w	d47c <event_connection_prepare+0x1d4>
			break;
		}

		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    d350:	f894 30be 	ldrb.w	r3, [r4, #190]	; 0xbe
    d354:	2201      	movs	r2, #1
    d356:	f362 0301 	bfi	r3, r2, #0, #2
    d35a:	f884 30be 	strb.w	r3, [r4, #190]	; 0xbe

		/* update preferred phy */
		conn->phy_pref_tx = conn->llcp_phy.tx;
    d35e:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
    d362:	b2db      	uxtb	r3, r3
    d364:	f3c3 0082 	ubfx	r0, r3, #2, #3
    d368:	f360 0202 	bfi	r2, r0, #0, #3
		conn->phy_pref_rx = conn->llcp_phy.rx;
    d36c:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    d370:	095b      	lsrs	r3, r3, #5
    d372:	f363 0002 	bfi	r0, r3, #0, #3
    d376:	f884 0033 	strb.w	r0, [r4, #51]	; 0x33
		conn->phy_pref_flags = conn->llcp_phy.flags;
    d37a:	f894 00bf 	ldrb.w	r0, [r4, #191]	; 0xbf
    d37e:	4613      	mov	r3, r2
    d380:	f360 1386 	bfi	r3, r0, #6, #1
    d384:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32

		/* place the phy req packet as next in tx queue */
		pdu_ctrl_tx = (struct pdu_data *) node_tx->pdu_data;
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d388:	790b      	ldrb	r3, [r1, #4]
    d38a:	f043 0303 	orr.w	r3, r3, #3
    d38e:	710b      	strb	r3, [r1, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
    d390:	2303      	movs	r3, #3
    d392:	714b      	strb	r3, [r1, #5]
				   sizeof(struct pdu_data_llctrl_phy_req_rsp);
		pdu_ctrl_tx->payload.llctrl.opcode =
    d394:	2316      	movs	r3, #22
    d396:	71cb      	strb	r3, [r1, #7]
			PDU_DATA_LLCTRL_TYPE_PHY_REQ;

		pr = (struct pdu_data_llctrl_phy_req_rsp *)
		     &pdu_ctrl_tx->payload.llctrl.ctrldata.phy_req;
		pr->tx_phys = conn->llcp_phy.tx;
    d398:	f894 30be 	ldrb.w	r3, [r4, #190]	; 0xbe
    d39c:	f3c3 0382 	ubfx	r3, r3, #2, #3
    d3a0:	720b      	strb	r3, [r1, #8]
		pr->rx_phys = conn->llcp_phy.rx;
    d3a2:	f894 30be 	ldrb.w	r3, [r4, #190]	; 0xbe
    d3a6:	f3c3 1342 	ubfx	r3, r3, #5, #3
    d3aa:	724b      	strb	r3, [r1, #9]

		ctrl_tx_enqueue(conn, node_tx);
    d3ac:	4620      	mov	r0, r4
    d3ae:	f7ff fe99 	bl	d0e4 <ctrl_tx_enqueue>

		/* Start Procedure Timeout (TODO: this shall not replace
		 * terminate procedure).
		 */
		conn->procedure_expire = conn->procedure_reload;
    d3b2:	8f23      	ldrh	r3, [r4, #56]	; 0x38
    d3b4:	8763      	strh	r3, [r4, #58]	; 0x3a
    d3b6:	e061      	b.n	d47c <event_connection_prepare+0x1d4>
	break;

	case LLCP_PHY_STATE_UPD:
	{
		/* Procedure complete */
		conn->llcp_phy.ack = conn->llcp_phy.req;
    d3b8:	f894 20bc 	ldrb.w	r2, [r4, #188]	; 0xbc
    d3bc:	f884 20bd 	strb.w	r2, [r4, #189]	; 0xbd

		/* select only one tx phy, prefer 2M */
		if (conn->llcp_phy.tx & BIT(1)) {
    d3c0:	f3c3 0282 	ubfx	r2, r3, #2, #3
    d3c4:	0796      	lsls	r6, r2, #30
    d3c6:	d501      	bpl.n	d3cc <event_connection_prepare+0x124>
			conn->llcp_phy.tx = BIT(1);
    d3c8:	2202      	movs	r2, #2
    d3ca:	e009      	b.n	d3e0 <event_connection_prepare+0x138>
		} else if (conn->llcp_phy.tx & BIT(0)) {
    d3cc:	07d0      	lsls	r0, r2, #31
    d3ce:	d501      	bpl.n	d3d4 <event_connection_prepare+0x12c>
			conn->llcp_phy.tx = BIT(0);
    d3d0:	2201      	movs	r2, #1
    d3d2:	e005      	b.n	d3e0 <event_connection_prepare+0x138>
		} else if (conn->llcp_phy.tx & BIT(2)) {
    d3d4:	f002 0204 	and.w	r2, r2, #4
    d3d8:	f002 01ff 	and.w	r1, r2, #255	; 0xff
    d3dc:	b11a      	cbz	r2, d3e6 <event_connection_prepare+0x13e>
			conn->llcp_phy.tx = BIT(2);
    d3de:	2204      	movs	r2, #4
    d3e0:	f362 0384 	bfi	r3, r2, #2, #3
    d3e4:	e001      	b.n	d3ea <event_connection_prepare+0x142>
		} else {
			conn->llcp_phy.tx = 0;
    d3e6:	f361 0384 	bfi	r3, r1, #2, #3
    d3ea:	f884 30be 	strb.w	r3, [r4, #190]	; 0xbe
		}

		/* select only one rx phy, prefer 2M */
		if (conn->llcp_phy.rx & BIT(1)) {
    d3ee:	f894 30be 	ldrb.w	r3, [r4, #190]	; 0xbe
    d3f2:	095a      	lsrs	r2, r3, #5
    d3f4:	0791      	lsls	r1, r2, #30
    d3f6:	d501      	bpl.n	d3fc <event_connection_prepare+0x154>
			conn->llcp_phy.rx = BIT(1);
    d3f8:	2202      	movs	r2, #2
    d3fa:	e009      	b.n	d410 <event_connection_prepare+0x168>
		} else if (conn->llcp_phy.rx & BIT(0)) {
    d3fc:	07d7      	lsls	r7, r2, #31
    d3fe:	d501      	bpl.n	d404 <event_connection_prepare+0x15c>
			conn->llcp_phy.rx = BIT(0);
    d400:	2201      	movs	r2, #1
    d402:	e005      	b.n	d410 <event_connection_prepare+0x168>
		} else if (conn->llcp_phy.rx & BIT(2)) {
    d404:	f002 0204 	and.w	r2, r2, #4
    d408:	f002 01ff 	and.w	r1, r2, #255	; 0xff
    d40c:	b11a      	cbz	r2, d416 <event_connection_prepare+0x16e>
			conn->llcp_phy.rx = BIT(2);
    d40e:	2204      	movs	r2, #4
    d410:	f362 1347 	bfi	r3, r2, #5, #3
    d414:	e001      	b.n	d41a <event_connection_prepare+0x172>
		} else {
			conn->llcp_phy.rx = 0;
    d416:	f361 1347 	bfi	r3, r1, #5, #3
    d41a:	f884 30be 	strb.w	r3, [r4, #190]	; 0xbe
		}

		/* Initiate PHY Update Ind */
		conn->llcp.phy_upd_ind.tx = conn->llcp_phy.tx;
    d41e:	f894 20be 	ldrb.w	r2, [r4, #190]	; 0xbe
    d422:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
    d426:	f3c2 0182 	ubfx	r1, r2, #2, #3
    d42a:	f361 0384 	bfi	r3, r1, #2, #3
		conn->llcp.phy_upd_ind.rx = conn->llcp_phy.rx;
    d42e:	0952      	lsrs	r2, r2, #5
    d430:	f362 1347 	bfi	r3, r2, #5, #3
		/* conn->llcp.phy_upd_ind.instant = 0; */
		conn->llcp.phy_upd_ind.initiate = 1;
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    d434:	f894 20bf 	ldrb.w	r2, [r4, #191]	; 0xbf

		/* Initiate PHY Update Ind */
		conn->llcp.phy_upd_ind.tx = conn->llcp_phy.tx;
		conn->llcp.phy_upd_ind.rx = conn->llcp_phy.rx;
		/* conn->llcp.phy_upd_ind.instant = 0; */
		conn->llcp.phy_upd_ind.initiate = 1;
    d438:	b2db      	uxtb	r3, r3
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    d43a:	f043 0301 	orr.w	r3, r3, #1
    d43e:	f3c2 0240 	ubfx	r2, r2, #1, #1
    d442:	f362 0341 	bfi	r3, r2, #1, #1
    d446:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c

		conn->llcp_type = LLCP_PHY_UPD;
    d44a:	2307      	movs	r3, #7
    d44c:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
		conn->llcp_ack--;
    d450:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
    d454:	3b01      	subs	r3, #1
    d456:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    d45a:	e00f      	b.n	d47c <event_connection_prepare+0x1d4>
	case LLCP_PHY_STATE_RSP_WAIT:
		/* no nothing */
		break;

	default:
		LL_ASSERT(0);
    d45c:	4b46      	ldr	r3, [pc, #280]	; (d578 <event_connection_prepare+0x2d0>)
    d45e:	9301      	str	r3, [sp, #4]
    d460:	4b46      	ldr	r3, [pc, #280]	; (d57c <event_connection_prepare+0x2d4>)
    d462:	9300      	str	r3, [sp, #0]
    d464:	4b4b      	ldr	r3, [pc, #300]	; (d594 <event_connection_prepare+0x2ec>)
    d466:	4a46      	ldr	r2, [pc, #280]	; (d580 <event_connection_prepare+0x2d8>)
    d468:	4947      	ldr	r1, [pc, #284]	; (d588 <event_connection_prepare+0x2e0>)
    d46a:	484b      	ldr	r0, [pc, #300]	; (d598 <event_connection_prepare+0x2f0>)
    d46c:	f7f4 f808 	bl	1480 <printk>
    d470:	4040      	eors	r0, r0
    d472:	f380 8811 	msr	BASEPRI, r0
    d476:	f04f 0004 	mov.w	r0, #4
    d47a:	df02      	svc	2
		event_phy_req_prep(conn);
	}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PHY */

	/* check if procedure is requested */
	if (conn->llcp_ack != conn->llcp_req) {
    d47c:	f894 2069 	ldrb.w	r2, [r4, #105]	; 0x69
    d480:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
    d484:	429a      	cmp	r2, r3
    d486:	f000 856b 	beq.w	df60 <event_connection_prepare+0xcb8>
		/* Stop previous event, to avoid Radio DMA corrupting the
		 * rx queue
		 */
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    d48a:	2200      	movs	r2, #0
    d48c:	2305      	movs	r3, #5
    d48e:	4611      	mov	r1, r2
    d490:	4610      	mov	r0, r2
    d492:	f7fe fb6b 	bl	bb6c <event_stop>

		switch (conn->llcp_type) {
    d496:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
    d49a:	3b01      	subs	r3, #1
    d49c:	2b06      	cmp	r3, #6
    d49e:	f200 8558 	bhi.w	df52 <event_connection_prepare+0xcaa>
    d4a2:	e8df f013 	tbh	[pc, r3, lsl #1]
    d4a6:	0007      	.short	0x0007
    d4a8:	02f102ad 	.word	0x02f102ad
    d4ac:	04520424 	.word	0x04520424
    d4b0:	04c404ab 	.word	0x04c404ab
					   u32_t ticks_at_expire)
{
	struct connection *conn_upd;
	u16_t instant_latency;

	conn_upd = _radio.conn_upd;
    d4b4:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204

	/* set mutex */
	if (!conn_upd) {
    d4b8:	b912      	cbnz	r2, d4c0 <event_connection_prepare+0x218>
		_radio.conn_upd = conn;
    d4ba:	4b2e      	ldr	r3, [pc, #184]	; (d574 <event_connection_prepare+0x2cc>)
    d4bc:	f8c3 4204 	str.w	r4, [r3, #516]	; 0x204
	}

	instant_latency =
		((event_counter - conn->llcp.connection_update.instant) &
		 0xffff);
	if (conn->llcp.connection_update.state) {
    d4c0:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
    d4c4:	f013 0307 	ands.w	r3, r3, #7
    d4c8:	f000 80d9 	beq.w	d67e <event_connection_prepare+0x3d6>
		if (((conn_upd == 0) || (conn_upd == conn)) &&
    d4cc:	b112      	cbz	r2, d4d4 <event_connection_prepare+0x22c>
    d4ce:	4294      	cmp	r4, r2
    d4d0:	f040 8546 	bne.w	df60 <event_connection_prepare+0xcb8>
    d4d4:	3b04      	subs	r3, #4
    d4d6:	2b01      	cmp	r3, #1
    d4d8:	f240 8542 	bls.w	df60 <event_connection_prepare+0xcb8>
#endif /* CONFIG_BLUETOOTH_CONTROLLER_SCHED_ADVANCED */
			struct radio_pdu_node_tx *node_tx;
			struct pdu_data *pdu_ctrl_tx;
			u8_t state;

			node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    d4dc:	482c      	ldr	r0, [pc, #176]	; (d590 <event_connection_prepare+0x2e8>)
    d4de:	f7fc f9b4 	bl	984a <mem_acquire>
			if (!node_tx) {
    d4e2:	4601      	mov	r1, r0
    d4e4:	2800      	cmp	r0, #0
    d4e6:	f000 853b 	beq.w	df60 <event_connection_prepare+0xcb8>
			pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_SCHED_ADVANCED)
			fp_mayfly_select_or_use = mayfly_sched_win_offset_use;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_SCHED_ADVANCED */
			state = conn->llcp.connection_update.state;
    d4ea:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
    d4ee:	f003 0307 	and.w	r3, r3, #7
			if ((state == LLCP_CONN_STATE_RSP) &&
    d4f2:	2b03      	cmp	r3, #3
    d4f4:	d104      	bne.n	d500 <event_connection_prepare+0x258>
    d4f6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    d4fa:	07de      	lsls	r6, r3, #31
    d4fc:	d507      	bpl.n	d50e <event_connection_prepare+0x266>
    d4fe:	e07d      	b.n	d5fc <event_connection_prepare+0x354>
				fp_mayfly_select_or_use =
					mayfly_sched_win_offset_select;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_SCHED_ADVANCED */
			}

			switch (state) {
    d500:	2b02      	cmp	r3, #2
    d502:	d04b      	beq.n	d59c <event_connection_prepare+0x2f4>
    d504:	2b03      	cmp	r3, #3
    d506:	d079      	beq.n	d5fc <event_connection_prepare+0x354>
    d508:	2b01      	cmp	r3, #1
    d50a:	f040 80b2 	bne.w	d672 <event_connection_prepare+0x3ca>
			case LLCP_CONN_STATE_INITIATE:
				if (conn->role.master.role == 0) {
    d50e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    d512:	f013 0301 	ands.w	r3, r3, #1
    d516:	d141      	bne.n	d59c <event_connection_prepare+0x2f4>
			  u32_t ticks_at_expire,
			  struct mayfly *mayfly_sched_offset,
			  void (*fp_mayfly_select_or_use)(void *))
{
	/* move to in progress */
	conn->llcp.connection_update.state = LLCP_CONN_STATE_INPROG;
    d518:	f894 2095 	ldrb.w	r2, [r4, #149]	; 0x95
    d51c:	f363 0202 	bfi	r2, r3, #0, #3
    d520:	f884 2095 	strb.w	r2, [r4, #149]	; 0x95

	/* set instant */
	conn->llcp.connection_update.instant =
    d524:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
    d526:	3206      	adds	r2, #6
    d528:	4442      	add	r2, r8
    d52a:	f8a4 2074 	strh.w	r2, [r4, #116]	; 0x74
		event_counter + conn->latency + 6;

	/* place the conn update req packet as next in tx queue */
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d52e:	790a      	ldrb	r2, [r1, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
		sizeof(struct pdu_data_llctrl_conn_update_ind);
	pdu_ctrl_tx->payload.llctrl.opcode =
    d530:	71cb      	strb	r3, [r1, #7]
	/* set instant */
	conn->llcp.connection_update.instant =
		event_counter + conn->latency + 6;

	/* place the conn update req packet as next in tx queue */
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d532:	f042 0203 	orr.w	r2, r2, #3
    d536:	710a      	strb	r2, [r1, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
    d538:	220c      	movs	r2, #12
    d53a:	714a      	strb	r2, [r1, #5]
		sizeof(struct pdu_data_llctrl_conn_update_ind);
	pdu_ctrl_tx->payload.llctrl.opcode =
		PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.win_size =
		conn->llcp.connection_update.win_size;
    d53c:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
		sizeof(struct pdu_data_llctrl_conn_update_ind);
	pdu_ctrl_tx->payload.llctrl.opcode =
		PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.win_size =
    d540:	720b      	strb	r3, [r1, #8]
		conn->llcp.connection_update.win_size;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.
		win_offset = conn->llcp.connection_update.win_offset_us / 1250;
    d542:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    d546:	f240 42e2 	movw	r2, #1250	; 0x4e2
    d54a:	fbb3 f3f2 	udiv	r3, r3, r2
    d54e:	f8a1 3009 	strh.w	r3, [r1, #9]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.interval =
    d552:	f8b4 306c 	ldrh.w	r3, [r4, #108]	; 0x6c
    d556:	f8a1 300b 	strh.w	r3, [r1, #11]
		conn->llcp.connection_update.interval;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.latency =
    d55a:	f8b4 306e 	ldrh.w	r3, [r4, #110]	; 0x6e
    d55e:	f8a1 300d 	strh.w	r3, [r1, #13]
		conn->llcp.connection_update.latency;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.timeout =
    d562:	f8b4 3070 	ldrh.w	r3, [r4, #112]	; 0x70
    d566:	f8a1 300f 	strh.w	r3, [r1, #15]
		conn->llcp.connection_update.timeout;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.instant =
    d56a:	f8b4 3074 	ldrh.w	r3, [r4, #116]	; 0x74
    d56e:	f8a1 3011 	strh.w	r3, [r1, #17]
    d572:	e3b8      	b.n	dce6 <event_connection_prepare+0xa3e>
    d574:	20001470 	.word	0x20001470
    d578:	00013df4 	.word	0x00013df4
    d57c:	00013df9 	.word	0x00013df9
    d580:	00013db4 	.word	0x00013db4
    d584:	0001676e 	.word	0x0001676e
    d588:	00013dbb 	.word	0x00013dbb
    d58c:	0001572d 	.word	0x0001572d
    d590:	20001648 	.word	0x20001648
    d594:	00016b15 	.word	0x00016b15
    d598:	00014409 	.word	0x00014409
					    struct pdu_data *pdu_ctrl_tx,
					    u32_t ticks_at_expire,
					    struct mayfly *mayfly_sched_offset)
{
	/* move to wait for conn_update/rsp/rej */
	conn->llcp.connection_update.state = LLCP_CONN_STATE_RSP_WAIT;
    d59c:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
    d5a0:	2205      	movs	r2, #5
    d5a2:	f362 0302 	bfi	r3, r2, #0, #3
    d5a6:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95

	/* place the conn param req packet as next in tx queue */
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d5aa:	790b      	ldrb	r3, [r1, #4]
    d5ac:	f043 0303 	orr.w	r3, r3, #3
    d5b0:	710b      	strb	r3, [r1, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
    d5b2:	2318      	movs	r3, #24
    d5b4:	714b      	strb	r3, [r1, #5]
		sizeof(struct pdu_data_llctrl_conn_param_req);
	pdu_ctrl_tx->payload.llctrl.opcode =
    d5b6:	230f      	movs	r3, #15
    d5b8:	71cb      	strb	r3, [r1, #7]
		PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.interval_min =
    d5ba:	f8b4 306c 	ldrh.w	r3, [r4, #108]	; 0x6c
    d5be:	810b      	strh	r3, [r1, #8]
		conn->llcp.connection_update.interval;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.interval_max =
    d5c0:	f8b4 306c 	ldrh.w	r3, [r4, #108]	; 0x6c
    d5c4:	814b      	strh	r3, [r1, #10]
		conn->llcp.connection_update.interval;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.latency =
    d5c6:	f8b4 306e 	ldrh.w	r3, [r4, #110]	; 0x6e
    d5ca:	818b      	strh	r3, [r1, #12]
		conn->llcp.connection_update.latency;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.timeout =
    d5cc:	f8b4 3070 	ldrh.w	r3, [r4, #112]	; 0x70
    d5d0:	81cb      	strh	r3, [r1, #14]
		conn->llcp.connection_update.timeout;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.preferred_periodicity = 0;
    d5d2:	2300      	movs	r3, #0
    d5d4:	740b      	strb	r3, [r1, #16]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.reference_conn_event_count = event_counter;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset0 = 0x0000;
    d5d6:	74cb      	strb	r3, [r1, #19]
    d5d8:	750b      	strb	r3, [r1, #20]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset1 = 0xffff;
    d5da:	f04f 33ff 	mov.w	r3, #4294967295
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.latency =
		conn->llcp.connection_update.latency;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.timeout =
		conn->llcp.connection_update.timeout;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.preferred_periodicity = 0;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.reference_conn_event_count = event_counter;
    d5de:	f8a1 8011 	strh.w	r8, [r1, #17]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset0 = 0x0000;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset1 = 0xffff;
    d5e2:	754b      	strb	r3, [r1, #21]
    d5e4:	758b      	strb	r3, [r1, #22]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset2 = 0xffff;
    d5e6:	75cb      	strb	r3, [r1, #23]
    d5e8:	760b      	strb	r3, [r1, #24]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset3 = 0xffff;
    d5ea:	764b      	strb	r3, [r1, #25]
    d5ec:	768b      	strb	r3, [r1, #26]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset4 = 0xffff;
    d5ee:	76cb      	strb	r3, [r1, #27]
    d5f0:	770b      	strb	r3, [r1, #28]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset5 = 0xffff;
    d5f2:	774b      	strb	r3, [r1, #29]
    d5f4:	778b      	strb	r3, [r1, #30]

	/* Start Procedure Timeout */
	conn->procedure_expire = conn->procedure_reload;
    d5f6:	8f23      	ldrh	r3, [r4, #56]	; 0x38
    d5f8:	8763      	strh	r3, [r4, #58]	; 0x3a
    d5fa:	e374      	b.n	dce6 <event_connection_prepare+0xa3e>

static inline void event_conn_update_st_rsp(struct connection *conn,
					    struct pdu_data *pdu_ctrl_tx)
{
	/* procedure request acked */
	conn->llcp_ack = conn->llcp_req;
    d5fc:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
    d600:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69

	/* reset mutex */
	_radio.conn_upd = NULL;
    d604:	2300      	movs	r3, #0
    d606:	f8c5 3204 	str.w	r3, [r5, #516]	; 0x204

	/** @todo REJECT_IND_EXT */

	/* place the conn param rsp packet as next in tx queue */
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d60a:	790b      	ldrb	r3, [r1, #4]
    d60c:	f043 0303 	orr.w	r3, r3, #3
    d610:	710b      	strb	r3, [r1, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
    d612:	2318      	movs	r3, #24
    d614:	714b      	strb	r3, [r1, #5]
		sizeof(struct pdu_data_llctrl_conn_param_rsp);
	pdu_ctrl_tx->payload.llctrl.opcode =
    d616:	2310      	movs	r3, #16
    d618:	71cb      	strb	r3, [r1, #7]
		PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.interval_min =
    d61a:	f8b4 306c 	ldrh.w	r3, [r4, #108]	; 0x6c
    d61e:	810b      	strh	r3, [r1, #8]
		conn->llcp.connection_update.interval;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.interval_max =
    d620:	f8b4 306c 	ldrh.w	r3, [r4, #108]	; 0x6c
    d624:	814b      	strh	r3, [r1, #10]
		conn->llcp.connection_update.interval;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.latency =
    d626:	f8b4 306e 	ldrh.w	r3, [r4, #110]	; 0x6e
    d62a:	818b      	strh	r3, [r1, #12]
		conn->llcp.connection_update.latency;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.timeout =
    d62c:	f8b4 3070 	ldrh.w	r3, [r4, #112]	; 0x70
    d630:	81cb      	strh	r3, [r1, #14]
		conn->llcp.connection_update.timeout;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.preferred_periodicity =
		conn->llcp.connection_update.preferred_periodicity;
    d632:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
		conn->llcp.connection_update.interval;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.latency =
		conn->llcp.connection_update.latency;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.timeout =
		conn->llcp.connection_update.timeout;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.preferred_periodicity =
    d636:	740b      	strb	r3, [r1, #16]
		conn->llcp.connection_update.preferred_periodicity;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.reference_conn_event_count =
    d638:	f8b4 3074 	ldrh.w	r3, [r4, #116]	; 0x74
    d63c:	f8a1 3011 	strh.w	r3, [r1, #17]
		conn->llcp.connection_update.instant;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset0 =
    d640:	f8b4 3076 	ldrh.w	r3, [r4, #118]	; 0x76
    d644:	f8a1 3013 	strh.w	r3, [r1, #19]
		conn->llcp.connection_update.offset0;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset1 =
    d648:	f8b4 3078 	ldrh.w	r3, [r4, #120]	; 0x78
    d64c:	f8a1 3015 	strh.w	r3, [r1, #21]
		conn->llcp.connection_update.offset1;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset2 =
    d650:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
    d654:	f8a1 3017 	strh.w	r3, [r1, #23]
		conn->llcp.connection_update.offset2;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset3 =
    d658:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
    d65c:	f8a1 3019 	strh.w	r3, [r1, #25]
		conn->llcp.connection_update.offset3;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset4 =
    d660:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
    d664:	f8a1 301b 	strh.w	r3, [r1, #27]
		conn->llcp.connection_update.offset4;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset5 =
    d668:	f8b4 3080 	ldrh.w	r3, [r4, #128]	; 0x80
    d66c:	f8a1 301d 	strh.w	r3, [r1, #29]
    d670:	e339      	b.n	dce6 <event_connection_prepare+0xa3e>
			case LLCP_CONN_STATE_RSP:
				event_conn_update_st_rsp(conn, pdu_ctrl_tx);
				break;

			default:
				LL_ASSERT(0);
    d672:	4b87      	ldr	r3, [pc, #540]	; (d890 <event_connection_prepare+0x5e8>)
    d674:	9301      	str	r3, [sp, #4]
    d676:	4b87      	ldr	r3, [pc, #540]	; (d894 <event_connection_prepare+0x5ec>)
    d678:	9300      	str	r3, [sp, #0]
    d67a:	4b87      	ldr	r3, [pc, #540]	; (d898 <event_connection_prepare+0x5f0>)
    d67c:	e6f3      	b.n	d466 <event_connection_prepare+0x1be>
	/* set mutex */
	if (!conn_upd) {
		_radio.conn_upd = conn;
	}

	instant_latency =
    d67e:	f8b4 7074 	ldrh.w	r7, [r4, #116]	; 0x74
    d682:	ebc7 0708 	rsb	r7, r7, r8
    d686:	b2bf      	uxth	r7, r7
				break;
			}

			ctrl_tx_enqueue(conn, node_tx);
		}
	} else if (instant_latency <= 0x7FFF) {
    d688:	0438      	lsls	r0, r7, #16
    d68a:	f100 8469 	bmi.w	df60 <event_connection_prepare+0xcb8>
		u16_t conn_interval_new;
		u16_t latency;
		u32_t mayfly_was_enabled;

		/* procedure request acked */
		conn->llcp_ack = conn->llcp_req;
    d68e:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
    d692:	f884 2069 	strb.w	r2, [r4, #105]	; 0x69
		 * due to conn update at this event.
		 */
		_radio.ticker_id_prepare = 0;

		/* reset mutex */
		if (_radio.conn_upd == conn) {
    d696:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
		conn->llcp_ack = conn->llcp_req;

		/* Reset ticker_id_prepare as role is not continued further
		 * due to conn update at this event.
		 */
		_radio.ticker_id_prepare = 0;
    d69a:	732b      	strb	r3, [r5, #12]

		/* reset mutex */
		if (_radio.conn_upd == conn) {
    d69c:	4294      	cmp	r4, r2
			_radio.conn_upd = NULL;
    d69e:	bf04      	itt	eq
    d6a0:	4a7e      	ldreq	r2, [pc, #504]	; (d89c <event_connection_prepare+0x5f4>)
    d6a2:	f8c2 3204 	streq.w	r3, [r2, #516]	; 0x204
		}

		/* Prepare the rx packet structure */
		if ((conn->llcp.connection_update.interval !=
    d6a6:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
    d6a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    d6aa:	429a      	cmp	r2, r3
    d6ac:	d10c      	bne.n	d6c8 <event_connection_prepare+0x420>
		     conn->conn_interval) ||
		    (conn->llcp.connection_update.latency != conn->latency) ||
    d6ae:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
    d6b0:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    d6b2:	f8b4 1070 	ldrh.w	r1, [r4, #112]	; 0x70
    d6b6:	4353      	muls	r3, r2
    d6b8:	227d      	movs	r2, #125	; 0x7d
    d6ba:	4353      	muls	r3, r2
    d6bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    d6c0:	fb93 f3f2 	sdiv	r3, r3, r2
    d6c4:	4299      	cmp	r1, r3
    d6c6:	d01a      	beq.n	d6fe <event_connection_prepare+0x456>
		    (conn->llcp.connection_update.timeout !=
		     (conn->conn_interval * conn->supervision_reload * 125 / 1000))) {
			radio_pdu_node_rx = packet_rx_reserve_get(2);
    d6c8:	2002      	movs	r0, #2
    d6ca:	f7fd fd19 	bl	b100 <packet_rx_reserve_get>
			LL_ASSERT(radio_pdu_node_rx);
    d6ce:	b928      	cbnz	r0, d6dc <event_connection_prepare+0x434>
    d6d0:	4b6f      	ldr	r3, [pc, #444]	; (d890 <event_connection_prepare+0x5e8>)
    d6d2:	9301      	str	r3, [sp, #4]
    d6d4:	4b6f      	ldr	r3, [pc, #444]	; (d894 <event_connection_prepare+0x5ec>)
    d6d6:	9300      	str	r3, [sp, #0]
    d6d8:	4b6f      	ldr	r3, [pc, #444]	; (d898 <event_connection_prepare+0x5f0>)
    d6da:	e36b      	b.n	ddb4 <event_connection_prepare+0xb0c>

			radio_pdu_node_rx->hdr.handle = conn->handle;
    d6dc:	8c23      	ldrh	r3, [r4, #32]
    d6de:	80c3      	strh	r3, [r0, #6]
			radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    d6e0:	2308      	movs	r3, #8
    d6e2:	7103      	strb	r3, [r0, #4]
			pdu_data_rx =
				(struct pdu_data *)radio_pdu_node_rx->pdu_data;
			radio_le_conn_update_cmplt =
				(struct radio_le_conn_update_cmplt *)
				&pdu_data_rx->payload;
			radio_le_conn_update_cmplt->status = 0x00;
    d6e4:	2300      	movs	r3, #0
    d6e6:	72c3      	strb	r3, [r0, #11]
			radio_le_conn_update_cmplt->interval =
    d6e8:	f8b4 306c 	ldrh.w	r3, [r4, #108]	; 0x6c
    d6ec:	8183      	strh	r3, [r0, #12]
				conn->llcp.connection_update.interval;
			radio_le_conn_update_cmplt->latency =
    d6ee:	f8b4 306e 	ldrh.w	r3, [r4, #110]	; 0x6e
    d6f2:	81c3      	strh	r3, [r0, #14]
				conn->llcp.connection_update.latency;
			radio_le_conn_update_cmplt->timeout =
    d6f4:	f8b4 3070 	ldrh.w	r3, [r4, #112]	; 0x70
    d6f8:	8203      	strh	r3, [r0, #16]
				conn->llcp.connection_update.timeout;

			/* enqueue connection update complete structure
			 * into queue.
			 */
			packet_rx_enqueue();
    d6fa:	f7fe f8cf 	bl	b89c <packet_rx_enqueue>
		}

		/* restore to normal prepare */
		if (conn->hdr.ticks_xtal_to_start & ((u32_t)1 << 31)) {
    d6fe:	6823      	ldr	r3, [r4, #0]
    d700:	f8d4 8004 	ldr.w	r8, [r4, #4]
    d704:	2b00      	cmp	r3, #0
    d706:	da0a      	bge.n	d71e <event_connection_prepare+0x476>
			u32_t ticks_prepare_to_start =
    d708:	68a2      	ldr	r2, [r4, #8]
				(conn->hdr.ticks_active_to_start >
				 conn->hdr.ticks_preempt_to_start) ?
				conn->hdr.ticks_active_to_start :
				conn->hdr.ticks_preempt_to_start;

			conn->hdr.ticks_xtal_to_start &= ~((u32_t)1 << 31);
    d70a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    d70e:	6023      	str	r3, [r4, #0]
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
    d710:	4542      	cmp	r2, r8
    d712:	bf2c      	ite	cs
    d714:	ebc3 0302 	rsbcs	r3, r3, r2
    d718:	ebc3 0308 	rsbcc	r3, r3, r8
    d71c:	4499      	add	r9, r3
					    ticks_prepare_to_start);
		}

		/* compensate for instant_latency due to laziness */
		conn_interval_old = instant_latency * conn->conn_interval;
    d71e:	f8b4 b024 	ldrh.w	fp, [r4, #36]	; 0x24
		latency = conn_interval_old /
			conn->llcp.connection_update.interval;
    d722:	f8b4 606c 	ldrh.w	r6, [r4, #108]	; 0x6c
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
					    ticks_prepare_to_start);
		}

		/* compensate for instant_latency due to laziness */
		conn_interval_old = instant_latency * conn->conn_interval;
    d726:	fb17 f30b 	smulbb	r3, r7, fp
    d72a:	b299      	uxth	r1, r3
		latency = conn_interval_old /
    d72c:	fbb1 faf6 	udiv	sl, r1, r6
			conn->llcp.connection_update.interval;
		conn_interval_new = latency *
    d730:	fb16 f20a 	smulbb	r2, r6, sl
    d734:	b293      	uxth	r3, r2
			conn->llcp.connection_update.interval;
		if (conn_interval_new > conn_interval_old) {
    d736:	4299      	cmp	r1, r3
    d738:	4a59      	ldr	r2, [pc, #356]	; (d8a0 <event_connection_prepare+0x5f8>)
    d73a:	d214      	bcs.n	d766 <event_connection_prepare+0x4be>
			ticks_at_expire +=
    d73c:	1a5b      	subs	r3, r3, r1
    d73e:	f240 1e23 	movw	lr, #291	; 0x123
    d742:	17d9      	asrs	r1, r3, #31
    d744:	fb0e fe03 	mul.w	lr, lr, r3
    d748:	fb02 ee01 	mla	lr, r2, r1, lr
    d74c:	fba3 0102 	umull	r0, r1, r3, r2
    d750:	4471      	add	r1, lr
    d752:	a34d      	add	r3, pc, #308	; (adr r3, d888 <event_connection_prepare+0x5e0>)
    d754:	e9d3 2300 	ldrd	r2, r3, [r3]
    d758:	f7f2 fd5c 	bl	214 <__aeabi_uldivmod>
    d75c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    d760:	eb00 0309 	add.w	r3, r0, r9
    d764:	e013      	b.n	d78e <event_connection_prepare+0x4e6>
				TICKER_US_TO_TICKS((conn_interval_new -
						    conn_interval_old) * 1250);
		} else {
			ticks_at_expire -=
    d766:	1acb      	subs	r3, r1, r3
    d768:	f240 1e23 	movw	lr, #291	; 0x123
    d76c:	17d9      	asrs	r1, r3, #31
    d76e:	fb0e fe03 	mul.w	lr, lr, r3
    d772:	fb02 ee01 	mla	lr, r2, r1, lr
    d776:	fba3 0102 	umull	r0, r1, r3, r2
    d77a:	4471      	add	r1, lr
    d77c:	a342      	add	r3, pc, #264	; (adr r3, d888 <event_connection_prepare+0x5e0>)
    d77e:	e9d3 2300 	ldrd	r2, r3, [r3]
    d782:	f7f2 fd47 	bl	214 <__aeabi_uldivmod>
    d786:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    d78a:	ebc0 0309 	rsb	r3, r0, r9
    d78e:	930b      	str	r3, [sp, #44]	; 0x2c
				TICKER_US_TO_TICKS((conn_interval_old -
						    conn_interval_new) * 1250);
		}
		conn->latency_prepare -= (instant_latency - latency);
    d790:	8d23      	ldrh	r3, [r4, #40]	; 0x28
			 conn->hdr.ticks_xtal_to_start) ?
			conn->hdr.ticks_xtal_to_start :
			conn->hdr.ticks_active_to_start;
		conn_interval_us = conn->llcp.connection_update.interval * 1250;
		periodic_us = conn_interval_us;
		if (conn->role.slave.role != 0) {
    d792:	f894 1044 	ldrb.w	r1, [r4, #68]	; 0x44
		} else {
			ticks_at_expire -=
				TICKER_US_TO_TICKS((conn_interval_old -
						    conn_interval_new) * 1250);
		}
		conn->latency_prepare -= (instant_latency - latency);
    d796:	1bdb      	subs	r3, r3, r7
    d798:	4453      	add	r3, sl
    d79a:	8523      	strh	r3, [r4, #40]	; 0x28

		/* calculate the offset, window widening and interval */
		ticks_slot_offset =
    d79c:	6823      	ldr	r3, [r4, #0]
    d79e:	4598      	cmp	r8, r3
    d7a0:	bf38      	it	cc
    d7a2:	4698      	movcc	r8, r3
			(conn->hdr.ticks_active_to_start <
			 conn->hdr.ticks_xtal_to_start) ?
			conn->hdr.ticks_xtal_to_start :
			conn->hdr.ticks_active_to_start;
		conn_interval_us = conn->llcp.connection_update.interval * 1250;
    d7a4:	f240 49e2 	movw	r9, #1250	; 0x4e2
    d7a8:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
						    conn_interval_new) * 1250);
		}
		conn->latency_prepare -= (instant_latency - latency);

		/* calculate the offset, window widening and interval */
		ticks_slot_offset =
    d7ac:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
			 conn->hdr.ticks_xtal_to_start) ?
			conn->hdr.ticks_xtal_to_start :
			conn->hdr.ticks_active_to_start;
		conn_interval_us = conn->llcp.connection_update.interval * 1250;
		periodic_us = conn_interval_us;
		if (conn->role.slave.role != 0) {
    d7b0:	f011 0f01 	tst.w	r1, #1
		ticks_slot_offset =
			(conn->hdr.ticks_active_to_start <
			 conn->hdr.ticks_xtal_to_start) ?
			conn->hdr.ticks_xtal_to_start :
			conn->hdr.ticks_active_to_start;
		conn_interval_us = conn->llcp.connection_update.interval * 1250;
    d7b4:	fb09 f606 	mul.w	r6, r9, r6
    d7b8:	930c      	str	r3, [sp, #48]	; 0x30
    d7ba:	f8df 80f0 	ldr.w	r8, [pc, #240]	; d8ac <event_connection_prepare+0x604>
		periodic_us = conn_interval_us;
		if (conn->role.slave.role != 0) {
    d7be:	d077      	beq.n	d8b0 <event_connection_prepare+0x608>
			conn->role.slave.window_widening_prepare_us -=
    d7c0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    d7c2:	6d22      	ldr	r2, [r4, #80]	; 0x50
				conn->role.slave.window_widening_periodic_us *
				instant_latency;

			conn->role.slave.window_widening_periodic_us =
				(((gc_lookup_ppm[_radio.sca] +
    d7c4:	4837      	ldr	r0, [pc, #220]	; (d8a4 <event_connection_prepare+0x5fc>)
			conn->hdr.ticks_xtal_to_start :
			conn->hdr.ticks_active_to_start;
		conn_interval_us = conn->llcp.connection_update.interval * 1250;
		periodic_us = conn_interval_us;
		if (conn->role.slave.role != 0) {
			conn->role.slave.window_widening_prepare_us -=
    d7c6:	fb03 2217 	mls	r2, r3, r7, r2
    d7ca:	6522      	str	r2, [r4, #80]	; 0x50
				conn->role.slave.window_widening_periodic_us *
				instant_latency;

			conn->role.slave.window_widening_periodic_us =
				(((gc_lookup_ppm[_radio.sca] +
    d7cc:	f895 319c 	ldrb.w	r3, [r5, #412]	; 0x19c
				   gc_lookup_ppm[conn->role.slave.sca]) *
    d7d0:	f3c1 0142 	ubfx	r1, r1, #1, #3
				  conn_interval_us) + (1000000 - 1)) / 1000000;
    d7d4:	f830 5013 	ldrh.w	r5, [r0, r3, lsl #1]
    d7d8:	f830 3011 	ldrh.w	r3, [r0, r1, lsl #1]
			conn->role.slave.window_widening_max_us =
				(conn_interval_us >> 1) - RADIO_TIFS;
			conn->role.slave.window_size_prepare_us =
    d7dc:	f894 1094 	ldrb.w	r1, [r4, #148]	; 0x94
				instant_latency;

			conn->role.slave.window_widening_periodic_us =
				(((gc_lookup_ppm[_radio.sca] +
				   gc_lookup_ppm[conn->role.slave.sca]) *
				  conn_interval_us) + (1000000 - 1)) / 1000000;
    d7e0:	441d      	add	r5, r3
    d7e2:	4375      	muls	r5, r6
    d7e4:	f505 2374 	add.w	r3, r5, #999424	; 0xf4000
    d7e8:	f203 233f 	addw	r3, r3, #575	; 0x23f
    d7ec:	4d2e      	ldr	r5, [pc, #184]	; (d8a8 <event_connection_prepare+0x600>)
    d7ee:	fbb3 f5f5 	udiv	r5, r3, r5
			conn->role.slave.window_widening_max_us =
				(conn_interval_us >> 1) - RADIO_TIFS;
    d7f2:	0873      	lsrs	r3, r6, #1
			conn->role.slave.window_size_prepare_us =
				conn->llcp.connection_update.win_size * 1250;
			conn->role.slave.ticks_to_offset = 0;

			conn->role.slave.window_widening_prepare_us +=
				conn->role.slave.window_widening_periodic_us *
    d7f4:	fb05 f00a 	mul.w	r0, r5, sl
			conn->role.slave.window_widening_periodic_us =
				(((gc_lookup_ppm[_radio.sca] +
				   gc_lookup_ppm[conn->role.slave.sca]) *
				  conn_interval_us) + (1000000 - 1)) / 1000000;
			conn->role.slave.window_widening_max_us =
				(conn_interval_us >> 1) - RADIO_TIFS;
    d7f8:	3b96      	subs	r3, #150	; 0x96
			conn->role.slave.window_size_prepare_us =
    d7fa:	fb09 f101 	mul.w	r1, r9, r1
				conn->llcp.connection_update.win_size * 1250;
			conn->role.slave.ticks_to_offset = 0;

			conn->role.slave.window_widening_prepare_us +=
    d7fe:	4402      	add	r2, r0
				  conn_interval_us) + (1000000 - 1)) / 1000000;
			conn->role.slave.window_widening_max_us =
				(conn_interval_us >> 1) - RADIO_TIFS;
			conn->role.slave.window_size_prepare_us =
				conn->llcp.connection_update.win_size * 1250;
			conn->role.slave.ticks_to_offset = 0;
    d800:	2700      	movs	r7, #0

			conn->role.slave.window_widening_prepare_us +=
    d802:	429a      	cmp	r2, r3
    d804:	bf94      	ite	ls
    d806:	6522      	strls	r2, [r4, #80]	; 0x50
    d808:	6523      	strhi	r3, [r4, #80]	; 0x50
		if (conn->role.slave.role != 0) {
			conn->role.slave.window_widening_prepare_us -=
				conn->role.slave.window_widening_periodic_us *
				instant_latency;

			conn->role.slave.window_widening_periodic_us =
    d80a:	64a5      	str	r5, [r4, #72]	; 0x48
				(((gc_lookup_ppm[_radio.sca] +
				   gc_lookup_ppm[conn->role.slave.sca]) *
				  conn_interval_us) + (1000000 - 1)) / 1000000;
			conn->role.slave.window_widening_max_us =
    d80c:	64e3      	str	r3, [r4, #76]	; 0x4c
				(conn_interval_us >> 1) - RADIO_TIFS;
			conn->role.slave.window_size_prepare_us =
    d80e:	65a1      	str	r1, [r4, #88]	; 0x58
			    conn->role.slave.window_widening_max_us) {
				conn->role.slave.window_widening_prepare_us =
					conn->role.slave.window_widening_max_us;
			}

			ticks_at_expire -=
    d810:	a31d      	add	r3, pc, #116	; (adr r3, d888 <event_connection_prepare+0x5e0>)
    d812:	e9d3 2300 	ldrd	r2, r3, [r3]
				  conn_interval_us) + (1000000 - 1)) / 1000000;
			conn->role.slave.window_widening_max_us =
				(conn_interval_us >> 1) - RADIO_TIFS;
			conn->role.slave.window_size_prepare_us =
				conn->llcp.connection_update.win_size * 1250;
			conn->role.slave.ticks_to_offset = 0;
    d816:	6667      	str	r7, [r4, #100]	; 0x64
			    conn->role.slave.window_widening_max_us) {
				conn->role.slave.window_widening_prepare_us =
					conn->role.slave.window_widening_max_us;
			}

			ticks_at_expire -=
    d818:	fba0 0108 	umull	r0, r1, r0, r8
    d81c:	f7f2 fcfa 	bl	214 <__aeabi_uldivmod>
    d820:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d822:	1a1b      	subs	r3, r3, r0
    d824:	930b      	str	r3, [sp, #44]	; 0x2c
				TICKER_US_TO_TICKS(conn->role.slave.window_widening_periodic_us *
						   latency);
			ticks_win_offset =
				TICKER_US_TO_TICKS((conn->llcp.connection_update.win_offset_us /
    d826:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d828:	fbb3 f0f9 	udiv	r0, r3, r9
    d82c:	fb09 f000 	mul.w	r0, r9, r0
			}

			ticks_at_expire -=
				TICKER_US_TO_TICKS(conn->role.slave.window_widening_periodic_us *
						   latency);
			ticks_win_offset =
    d830:	a315      	add	r3, pc, #84	; (adr r3, d888 <event_connection_prepare+0x5e0>)
    d832:	e9d3 2300 	ldrd	r2, r3, [r3]
    d836:	fba0 0108 	umull	r0, r1, r0, r8
    d83a:	f7f2 fceb 	bl	214 <__aeabi_uldivmod>
				TICKER_US_TO_TICKS((conn->llcp.connection_update.win_offset_us /
						    1250) * 1250);
			periodic_us -=
				conn->role.slave.window_widening_periodic_us;

			if (conn->llcp.connection_update.is_internal == 2) {
    d83e:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
    d842:	f003 0218 	and.w	r2, r3, #24
    d846:	2a10      	cmp	r2, #16
			}

			ticks_at_expire -=
				TICKER_US_TO_TICKS(conn->role.slave.window_widening_periodic_us *
						   latency);
			ticks_win_offset =
    d848:	f020 497f 	bic.w	r9, r0, #4278190080	; 0xff000000
				TICKER_US_TO_TICKS((conn->llcp.connection_update.win_offset_us /
						    1250) * 1250);
			periodic_us -=
    d84c:	eba6 0505 	sub.w	r5, r6, r5
				conn->role.slave.window_widening_periodic_us;

			if (conn->llcp.connection_update.is_internal == 2) {
    d850:	d139      	bne.n	d8c6 <event_connection_prepare+0x61e>
		(conn->llcp_version.sub_version_number >= RADIO_BLE_SUB_VERSION_NUMBER));
}

static u32_t conn_update_req(struct connection *conn)
{
	if (conn->llcp_req != conn->llcp_ack) {
    d852:	f894 1068 	ldrb.w	r1, [r4, #104]	; 0x68
    d856:	f894 2069 	ldrb.w	r2, [r4, #105]	; 0x69
    d85a:	428a      	cmp	r2, r1
    d85c:	d133      	bne.n	d8c6 <event_connection_prepare+0x61e>

static u32_t is_peer_compatible(struct connection *conn)
{
	return ((conn->llcp_version.rx) &&
		(conn->llcp_version.version_number >= RADIO_BLE_VERSION_NUMBER) &&
		(conn->llcp_version.company_id == RADIO_BLE_COMPANY_ID) &&
    d85e:	f894 109c 	ldrb.w	r1, [r4, #156]	; 0x9c
    d862:	0789      	lsls	r1, r1, #30
    d864:	d52f      	bpl.n	d8c6 <event_connection_prepare+0x61e>
	return 0;
}

static u32_t is_peer_compatible(struct connection *conn)
{
	return ((conn->llcp_version.rx) &&
    d866:	f894 109d 	ldrb.w	r1, [r4, #157]	; 0x9d
    d86a:	2908      	cmp	r1, #8
    d86c:	d92b      	bls.n	d8c6 <event_connection_prepare+0x61e>
		(conn->llcp_version.version_number >= RADIO_BLE_VERSION_NUMBER) &&
    d86e:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
    d872:	f64f 70ff 	movw	r0, #65535	; 0xffff
    d876:	4281      	cmp	r1, r0
    d878:	d125      	bne.n	d8c6 <event_connection_prepare+0x61e>
		(conn->llcp_version.company_id == RADIO_BLE_COMPANY_ID) &&
    d87a:	f8b4 00a0 	ldrh.w	r0, [r4, #160]	; 0xa0
    d87e:	4288      	cmp	r0, r1
    d880:	d121      	bne.n	d8c6 <event_connection_prepare+0x61e>
    d882:	f000 bce1 	b.w	e248 <event_connection_prepare+0xfa0>
    d886:	bf00      	nop
    d888:	1afd498d 	.word	0x1afd498d
    d88c:	00000007 	.word	0x00000007
    d890:	00013df4 	.word	0x00013df4
    d894:	00013df9 	.word	0x00013df9
    d898:	00016997 	.word	0x00016997
    d89c:	20001470 	.word	0x20001470
    d8a0:	09ce5400 	.word	0x09ce5400
    d8a4:	00016798 	.word	0x00016798
    d8a8:	000f4240 	.word	0x000f4240
    d8ac:	3b9aca00 	.word	0x3b9aca00

			if (conn->llcp.connection_update.is_internal == 2) {
				conn_update_req(conn);
			}
		} else {
			ticks_win_offset =
    d8b0:	990c      	ldr	r1, [sp, #48]	; 0x30
    d8b2:	a3b7      	add	r3, pc, #732	; (adr r3, db90 <event_connection_prepare+0x8e8>)
    d8b4:	e9d3 2300 	ldrd	r2, r3, [r3]
    d8b8:	fba1 0108 	umull	r0, r1, r1, r8
    d8bc:	f7f2 fcaa 	bl	214 <__aeabi_uldivmod>
			(conn->hdr.ticks_active_to_start <
			 conn->hdr.ticks_xtal_to_start) ?
			conn->hdr.ticks_xtal_to_start :
			conn->hdr.ticks_active_to_start;
		conn_interval_us = conn->llcp.connection_update.interval * 1250;
		periodic_us = conn_interval_us;
    d8c0:	4635      	mov	r5, r6

			if (conn->llcp.connection_update.is_internal == 2) {
				conn_update_req(conn);
			}
		} else {
			ticks_win_offset =
    d8c2:	f020 497f 	bic.w	r9, r0, #4278190080	; 0xff000000
				TICKER_US_TO_TICKS(conn->llcp.connection_update.win_offset_us);
		}
		conn->conn_interval = conn->llcp.connection_update.interval;
		conn->latency = conn->llcp.connection_update.latency;
    d8c6:	f8b4 206e 	ldrh.w	r2, [r4, #110]	; 0x6e
			}
		} else {
			ticks_win_offset =
				TICKER_US_TO_TICKS(conn->llcp.connection_update.win_offset_us);
		}
		conn->conn_interval = conn->llcp.connection_update.interval;
    d8ca:	f8b4 306c 	ldrh.w	r3, [r4, #108]	; 0x6c
		conn->latency = conn->llcp.connection_update.latency;
		conn->supervision_reload =
    d8ce:	f8b4 1070 	ldrh.w	r1, [r4, #112]	; 0x70
			}
		} else {
			ticks_win_offset =
				TICKER_US_TO_TICKS(conn->llcp.connection_update.win_offset_us);
		}
		conn->conn_interval = conn->llcp.connection_update.interval;
    d8d2:	84a3      	strh	r3, [r4, #36]	; 0x24
		conn->latency = conn->llcp.connection_update.latency;
		conn->supervision_reload =
    d8d4:	f242 7310 	movw	r3, #10000	; 0x2710
    d8d8:	434b      	muls	r3, r1
    d8da:	fbb3 f3f6 	udiv	r3, r3, r6
    d8de:	86a3      	strh	r3, [r4, #52]	; 0x34
			RADIO_CONN_EVENTS((conn->llcp.connection_update.timeout
					   * 10 * 1000), conn_interval_us);
		conn->procedure_reload =
    d8e0:	4bad      	ldr	r3, [pc, #692]	; (db98 <event_connection_prepare+0x8f0>)
    d8e2:	fbb3 f3f6 	udiv	r3, r3, r6
    d8e6:	8723      	strh	r3, [r4, #56]	; 0x38
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);

#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_PING)
		/* APTO in no. of connection events */
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    d8e8:	4bac      	ldr	r3, [pc, #688]	; (db9c <event_connection_prepare+0x8f4>)
    d8ea:	fbb3 f6f6 	udiv	r6, r3, r6
						      conn_interval_us);
		/* Dispatch LE Ping PDU 6 connection events (that peer would
		 * listen to) before 30s timeout
		 * TODO: "peer listens to" is greater than 30s due to latency
		 */
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    d8ee:	1d93      	adds	r3, r2, #6
		conn->procedure_reload =
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);

#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_PING)
		/* APTO in no. of connection events */
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    d8f0:	b2b6      	uxth	r6, r6
						      conn_interval_us);
		/* Dispatch LE Ping PDU 6 connection events (that peer would
		 * listen to) before 30s timeout
		 * TODO: "peer listens to" is greater than 30s due to latency
		 */
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    d8f2:	429e      	cmp	r6, r3
    d8f4:	bfc4      	itt	gt
    d8f6:	f5c2 437f 	rsbgt	r3, r2, #65280	; 0xff00
    d8fa:	33fa      	addgt	r3, #250	; 0xfa
		conn->procedure_reload =
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);

#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_PING)
		/* APTO in no. of connection events */
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    d8fc:	f8a4 6040 	strh.w	r6, [r4, #64]	; 0x40
						      conn_interval_us);
		/* Dispatch LE Ping PDU 6 connection events (that peer would
		 * listen to) before 30s timeout
		 * TODO: "peer listens to" is greater than 30s due to latency
		 */
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    d900:	bfc8      	it	gt
    d902:	18f6      	addgt	r6, r6, r3
				     (conn->apto_reload - (conn->latency + 6)) :
				     conn->apto_reload;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

		if (!conn->llcp.connection_update.is_internal) {
    d904:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
		} else {
			ticks_win_offset =
				TICKER_US_TO_TICKS(conn->llcp.connection_update.win_offset_us);
		}
		conn->conn_interval = conn->llcp.connection_update.interval;
		conn->latency = conn->llcp.connection_update.latency;
    d908:	84e2      	strh	r2, [r4, #38]	; 0x26
						      conn_interval_us);
		/* Dispatch LE Ping PDU 6 connection events (that peer would
		 * listen to) before 30s timeout
		 * TODO: "peer listens to" is greater than 30s due to latency
		 */
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    d90a:	bfc8      	it	gt
    d90c:	b2b6      	uxthgt	r6, r6
				     (conn->apto_reload - (conn->latency + 6)) :
				     conn->apto_reload;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

		if (!conn->llcp.connection_update.is_internal) {
    d90e:	f013 0318 	ands.w	r3, r3, #24
			conn->supervision_expire = 0;
    d912:	bf08      	it	eq
    d914:	86e3      	strheq	r3, [r4, #54]	; 0x36
		}

		/* disable ticker job, in order to chain stop and start
		 * to avoid RTC being stopped if no tickers active.
		 */
		mayfly_was_enabled =
    d916:	2101      	movs	r1, #1
						      conn_interval_us);
		/* Dispatch LE Ping PDU 6 connection events (that peer would
		 * listen to) before 30s timeout
		 * TODO: "peer listens to" is greater than 30s due to latency
		 */
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    d918:	87a6      	strh	r6, [r4, #60]	; 0x3c
		}

		/* disable ticker job, in order to chain stop and start
		 * to avoid RTC being stopped if no tickers active.
		 */
		mayfly_was_enabled =
    d91a:	2000      	movs	r0, #0
    d91c:	f003 fa48 	bl	10db0 <mayfly_is_enabled>
			mayfly_is_enabled(RADIO_TICKER_USER_ID_WORKER,
					  RADIO_TICKER_USER_ID_JOB);
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    d920:	2200      	movs	r2, #0
		}

		/* disable ticker job, in order to chain stop and start
		 * to avoid RTC being stopped if no tickers active.
		 */
		mayfly_was_enabled =
    d922:	900c      	str	r0, [sp, #48]	; 0x30
			mayfly_is_enabled(RADIO_TICKER_USER_ID_WORKER,
					  RADIO_TICKER_USER_ID_JOB);
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    d924:	2101      	movs	r1, #1
    d926:	4610      	mov	r0, r2
    d928:	f7fb fe6a 	bl	9600 <mayfly_enable>
			      RADIO_TICKER_USER_ID_JOB, 0);

		/* start slave/master with new timings */
		ticker_status =
    d92c:	f894 2020 	ldrb.w	r2, [r4, #32]
    d930:	f241 53db 	movw	r3, #5595	; 0x15db
    d934:	2100      	movs	r1, #0
    d936:	3207      	adds	r2, #7
    d938:	9300      	str	r3, [sp, #0]
    d93a:	b2d2      	uxtb	r2, r2
    d93c:	4b98      	ldr	r3, [pc, #608]	; (dba0 <event_connection_prepare+0x8f8>)
    d93e:	4608      	mov	r0, r1
    d940:	f7fd fab8 	bl	aeb4 <ticker_stop>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
				    RADIO_TICKER_USER_ID_WORKER,
				    RADIO_TICKER_ID_FIRST_CONNECTION +
				    conn->handle, ticker_success_assert,
				    (void *)__LINE__);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    d944:	f030 0702 	bics.w	r7, r0, #2
    d948:	d146      	bne.n	d9d8 <event_connection_prepare+0x730>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
				     RADIO_TICKER_USER_ID_WORKER,
				     RADIO_TICKER_ID_FIRST_CONNECTION +
				     conn->handle,
				     ticks_at_expire, ticks_win_offset,
				     TICKER_US_TO_TICKS(periodic_us),
    d94a:	fba5 ab08 	umull	sl, fp, r5, r8
    d94e:	a390      	add	r3, pc, #576	; (adr r3, db90 <event_connection_prepare+0x8e8>)
    d950:	e9d3 2300 	ldrd	r2, r3, [r3]
    d954:	4650      	mov	r0, sl
    d956:	4659      	mov	r1, fp
    d958:	f7f2 fc5c 	bl	214 <__aeabi_uldivmod>
				    conn->handle, ticker_success_assert,
				    (void *)__LINE__);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
			  (ticker_status == TICKER_STATUS_BUSY));
		ticker_status =
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    d95c:	4a91      	ldr	r2, [pc, #580]	; (dba4 <event_connection_prepare+0x8fc>)
    d95e:	f894 6020 	ldrb.w	r6, [r4, #32]
    d962:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
    d966:	2307      	movs	r3, #7
    d968:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    d96c:	2100      	movs	r1, #0
    d96e:	4343      	muls	r3, r0
    d970:	fb02 3301 	mla	r3, r2, r1, r3
    d974:	fba0 0102 	umull	r0, r1, r0, r2
    d978:	ebba 0000 	subs.w	r0, sl, r0
    d97c:	4419      	add	r1, r3
    d97e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    d982:	f04f 0300 	mov.w	r3, #0
    d986:	eb6b 0101 	sbc.w	r1, fp, r1
    d98a:	f7f2 fc43 	bl	214 <__aeabi_uldivmod>
    d98e:	68e3      	ldr	r3, [r4, #12]
    d990:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    d992:	4985      	ldr	r1, [pc, #532]	; (dba8 <event_connection_prepare+0x900>)
				    RADIO_TICKER_ID_FIRST_CONNECTION +
				    conn->handle, ticker_success_assert,
				    (void *)__LINE__);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
			  (ticker_status == TICKER_STATUS_BUSY));
		ticker_status =
    d994:	9002      	str	r0, [sp, #8]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    d996:	441a      	add	r2, r3
    d998:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
				    RADIO_TICKER_ID_FIRST_CONNECTION +
				    conn->handle, ticker_success_assert,
				    (void *)__LINE__);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
			  (ticker_status == TICKER_STATUS_BUSY));
		ticker_status =
    d99c:	9406      	str	r4, [sp, #24]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    d99e:	f013 0f01 	tst.w	r3, #1
    d9a2:	f106 0607 	add.w	r6, r6, #7
    d9a6:	4b81      	ldr	r3, [pc, #516]	; (dbac <event_connection_prepare+0x904>)
				    RADIO_TICKER_ID_FIRST_CONNECTION +
				    conn->handle, ticker_success_assert,
				    (void *)__LINE__);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
			  (ticker_status == TICKER_STATUS_BUSY));
		ticker_status =
    d9a8:	9703      	str	r7, [sp, #12]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    d9aa:	bf08      	it	eq
    d9ac:	460b      	moveq	r3, r1
				    RADIO_TICKER_ID_FIRST_CONNECTION +
				    conn->handle, ticker_success_assert,
				    (void *)__LINE__);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
			  (ticker_status == TICKER_STATUS_BUSY));
		ticker_status =
    d9ae:	f241 51eb 	movw	r1, #5611	; 0x15eb
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    d9b2:	b292      	uxth	r2, r2
				    RADIO_TICKER_ID_FIRST_CONNECTION +
				    conn->handle, ticker_success_assert,
				    (void *)__LINE__);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
			  (ticker_status == TICKER_STATUS_BUSY));
		ticker_status =
    d9b4:	9108      	str	r1, [sp, #32]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    d9b6:	b2f6      	uxtb	r6, r6
				    RADIO_TICKER_ID_FIRST_CONNECTION +
				    conn->handle, ticker_success_assert,
				    (void *)__LINE__);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
			  (ticker_status == TICKER_STATUS_BUSY));
		ticker_status =
    d9b8:	4979      	ldr	r1, [pc, #484]	; (dba0 <event_connection_prepare+0x8f8>)
    d9ba:	9107      	str	r1, [sp, #28]
    d9bc:	9305      	str	r3, [sp, #20]
    d9be:	9204      	str	r2, [sp, #16]
    d9c0:	9501      	str	r5, [sp, #4]
    d9c2:	f8cd 9000 	str.w	r9, [sp]
    d9c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d9c8:	4632      	mov	r2, r6
    d9ca:	4639      	mov	r1, r7
    d9cc:	4638      	mov	r0, r7
    d9ce:	f7fd f9e3 	bl	ad98 <ticker_start>
				     (ticks_slot_offset + conn->hdr.ticks_slot),
				     (conn->role.slave.role != 0) ?
				     event_slave_prepare : event_master_prepare,
				     conn, ticker_success_assert,
				     (void *)__LINE__);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    d9d2:	f030 0002 	bics.w	r0, r0, #2
    d9d6:	d008      	beq.n	d9ea <event_connection_prepare+0x742>
    d9d8:	4b75      	ldr	r3, [pc, #468]	; (dbb0 <event_connection_prepare+0x908>)
    d9da:	9301      	str	r3, [sp, #4]
    d9dc:	4b75      	ldr	r3, [pc, #468]	; (dbb4 <event_connection_prepare+0x90c>)
    d9de:	9300      	str	r3, [sp, #0]
    d9e0:	4a75      	ldr	r2, [pc, #468]	; (dbb8 <event_connection_prepare+0x910>)
    d9e2:	4b76      	ldr	r3, [pc, #472]	; (dbbc <event_connection_prepare+0x914>)
    d9e4:	4976      	ldr	r1, [pc, #472]	; (dbc0 <event_connection_prepare+0x918>)
    d9e6:	4877      	ldr	r0, [pc, #476]	; (dbc4 <event_connection_prepare+0x91c>)
    d9e8:	e540      	b.n	d46c <event_connection_prepare+0x1c4>
			  (ticker_status == TICKER_STATUS_BUSY));

		/* enable ticker job, if disabled in this function */
		if (mayfly_was_enabled) {
    d9ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d9ec:	2b00      	cmp	r3, #0
    d9ee:	f000 844f 	beq.w	e290 <event_connection_prepare+0xfe8>
			mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    d9f2:	2201      	movs	r2, #1
    d9f4:	4611      	mov	r1, r2
			     (conn->role.slave.role != 0) ? event_slave : event_master,
			     conn);

	/* store the next event counter value */
	conn->event_counter = event_counter + 1;
}
    d9f6:	b00f      	add	sp, #60	; 0x3c
    d9f8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
			  (ticker_status == TICKER_STATUS_BUSY));

		/* enable ticker job, if disabled in this function */
		if (mayfly_was_enabled) {
			mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    d9fc:	f7fb be00 	b.w	9600 <mayfly_enable>
}

static inline void event_ch_map_prep(struct connection *conn,
				     u16_t event_counter)
{
	if (conn->llcp.chan_map.initiate) {
    da00:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
    da04:	b313      	cbz	r3, da4c <event_connection_prepare+0x7a4>
		struct radio_pdu_node_tx *node_tx;

		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    da06:	4870      	ldr	r0, [pc, #448]	; (dbc8 <event_connection_prepare+0x920>)
    da08:	f7fb ff1f 	bl	984a <mem_acquire>
		if (node_tx) {
    da0c:	4606      	mov	r6, r0
    da0e:	2800      	cmp	r0, #0
    da10:	f000 82a6 	beq.w	df60 <event_connection_prepare+0xcb8>
			struct pdu_data *pdu_ctrl_tx =
				(struct pdu_data *)node_tx->pdu_data;

			/* reset initiate flag */
			conn->llcp.chan_map.initiate = 0;
    da14:	2300      	movs	r3, #0
    da16:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c

			/* set instant */
			conn->llcp.chan_map.instant =
    da1a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    da1c:	3306      	adds	r3, #6
    da1e:	4443      	add	r3, r8
    da20:	f8a4 3072 	strh.w	r3, [r4, #114]	; 0x72
				event_counter + conn->latency + 6;

			/* place the channel map req packet as next in
			 * tx queue
			 */
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    da24:	7903      	ldrb	r3, [r0, #4]
    da26:	f043 0303 	orr.w	r3, r3, #3
    da2a:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    da2c:	2308      	movs	r3, #8
    da2e:	7143      	strb	r3, [r0, #5]
						    ctrldata) +
				sizeof(struct pdu_data_llctrl_chan_map_ind);
			pdu_ctrl_tx->payload.llctrl.opcode =
    da30:	2301      	movs	r3, #1
    da32:	71c3      	strb	r3, [r0, #7]
				PDU_DATA_LLCTRL_TYPE_CHAN_MAP_IND;
			memcpy(&pdu_ctrl_tx->payload.llctrl.
    da34:	f104 016d 	add.w	r1, r4, #109	; 0x6d
    da38:	2205      	movs	r2, #5
    da3a:	3008      	adds	r0, #8
    da3c:	f7f3 fb29 	bl	1092 <memcpy>
			       ctrldata.chan_map_ind.chm[0],
			       &conn->llcp.chan_map.chm[0],
			       sizeof(pdu_ctrl_tx->payload.
				      llctrl.ctrldata.chan_map_ind.chm));
			pdu_ctrl_tx->payload.llctrl.ctrldata.chan_map_ind.instant =
    da40:	f8b4 3072 	ldrh.w	r3, [r4, #114]	; 0x72
    da44:	f8a6 300d 	strh.w	r3, [r6, #13]
				conn->llcp.chan_map.instant;

			ctrl_tx_enqueue(conn, node_tx);
    da48:	4631      	mov	r1, r6
    da4a:	e14c      	b.n	dce6 <event_connection_prepare+0xa3e>
		}
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
    da4c:	f8b4 3072 	ldrh.w	r3, [r4, #114]	; 0x72
    da50:	ebc3 0308 	rsb	r3, r3, r8
    da54:	b29b      	uxth	r3, r3
    da56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    da5a:	f280 8281 	bge.w	df60 <event_connection_prepare+0xcb8>
			    <= 0x7FFF) {
		/* procedure request acked */
		conn->llcp_ack = conn->llcp_req;
    da5e:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
    da62:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69

		/* copy to active channel map */
		memcpy(&conn->data_chan_map[0],
    da66:	f104 0617 	add.w	r6, r4, #23
    da6a:	2205      	movs	r2, #5
    da6c:	f104 016d 	add.w	r1, r4, #109	; 0x6d
    da70:	4630      	mov	r0, r6
    da72:	f7f3 fb0e 	bl	1092 <memcpy>
		       &conn->llcp.chan_map.chm[0],
		       sizeof(conn->data_chan_map));
		conn->data_chan_count =
			util_ones_count_get(&conn->data_chan_map[0],
    da76:	2105      	movs	r1, #5
    da78:	4630      	mov	r0, r6
    da7a:	f7fb ff5c 	bl	9936 <util_ones_count_get>

		/* copy to active channel map */
		memcpy(&conn->data_chan_map[0],
		       &conn->llcp.chan_map.chm[0],
		       sizeof(conn->data_chan_map));
		conn->data_chan_count =
    da7e:	7f23      	ldrb	r3, [r4, #28]
    da80:	f360 0305 	bfi	r3, r0, #0, #6
    da84:	7723      	strb	r3, [r4, #28]
    da86:	e26b      	b.n	df60 <event_connection_prepare+0xcb8>
#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_ENC)
static inline void event_enc_prep(struct connection *conn)
{
	struct radio_pdu_node_tx *node_tx;

	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    da88:	f8df a148 	ldr.w	sl, [pc, #328]	; dbd4 <event_connection_prepare+0x92c>
    da8c:	f50a 70ec 	add.w	r0, sl, #472	; 0x1d8
    da90:	f7fb fedb 	bl	984a <mem_acquire>
	if (node_tx) {
    da94:	4607      	mov	r7, r0
    da96:	2800      	cmp	r0, #0
    da98:	f000 8262 	beq.w	df60 <event_connection_prepare+0xcb8>

		/* procedure request acked */
		conn->llcp_ack = conn->llcp_req;

		/* master sends encrypted enc start rsp in control priority */
		if (conn->role.master.role == 0) {
    da9c:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
	if (node_tx) {
		struct pdu_data *pdu_ctrl_tx =
			(struct pdu_data *)node_tx->pdu_data;

		/* procedure request acked */
		conn->llcp_ack = conn->llcp_req;
    daa0:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
    daa4:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69

		/* master sends encrypted enc start rsp in control priority */
		if (conn->role.master.role == 0) {
    daa8:	f016 0601 	ands.w	r6, r6, #1
    daac:	d145      	bne.n	db3a <event_connection_prepare+0x892>
			/* calc the Session Key */
			ecb_encrypt(&conn->llcp.encryption.ltk[0],
    daae:	f104 0ac1 	add.w	sl, r4, #193	; 0xc1
    dab2:	4653      	mov	r3, sl
    dab4:	4632      	mov	r2, r6
    dab6:	f104 0187 	add.w	r1, r4, #135	; 0x87
    daba:	f104 0077 	add.w	r0, r4, #119	; 0x77
    dabe:	f7fb ffcd 	bl	9a5c <ecb_encrypt>
				    &conn->llcp.encryption.skd[0],
				    NULL, &conn->ccm_rx.key[0]);

			/* copy the Session Key */
			memcpy(&conn->ccm_tx.key[0], &conn->ccm_rx.key[0],
    dac2:	4651      	mov	r1, sl
    dac4:	2210      	movs	r2, #16
    dac6:	f104 00e2 	add.w	r0, r4, #226	; 0xe2
    daca:	f7f3 fae2 	bl	1092 <memcpy>
			       sizeof(conn->ccm_tx.key));

			/* copy the IV */
			memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
    dace:	f104 01da 	add.w	r1, r4, #218	; 0xda
    dad2:	2208      	movs	r2, #8
    dad4:	f104 00fb 	add.w	r0, r4, #251	; 0xfb
    dad8:	f7f3 fadb 	bl	1092 <memcpy>
			conn->ccm_tx.counter = 0;

			/* set direction: slave to master = 0,
			 * master to slave = 1
			 */
			conn->ccm_rx.direction = 0;
    dadc:	f894 30d9 	ldrb.w	r3, [r4, #217]	; 0xd9
			/* copy the IV */
			memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
			       sizeof(conn->ccm_tx.iv));

			/* initialise counter */
			conn->ccm_rx.counter = 0;
    dae0:	f884 60d1 	strb.w	r6, [r4, #209]	; 0xd1
			conn->ccm_tx.counter = 0;

			/* set direction: slave to master = 0,
			 * master to slave = 1
			 */
			conn->ccm_rx.direction = 0;
    dae4:	f366 0300 	bfi	r3, r6, #0, #1
    dae8:	f884 30d9 	strb.w	r3, [r4, #217]	; 0xd9
			conn->ccm_tx.direction = 1;
    daec:	f894 30fa 	ldrb.w	r3, [r4, #250]	; 0xfa
			/* copy the IV */
			memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
			       sizeof(conn->ccm_tx.iv));

			/* initialise counter */
			conn->ccm_rx.counter = 0;
    daf0:	f884 60d2 	strb.w	r6, [r4, #210]	; 0xd2

			/* set direction: slave to master = 0,
			 * master to slave = 1
			 */
			conn->ccm_rx.direction = 0;
			conn->ccm_tx.direction = 1;
    daf4:	f043 0301 	orr.w	r3, r3, #1
    daf8:	f884 30fa 	strb.w	r3, [r4, #250]	; 0xfa

			/* enable receive and transmit encryption */
			conn->enc_rx = 1;
    dafc:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
			/* copy the IV */
			memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
			       sizeof(conn->ccm_tx.iv));

			/* initialise counter */
			conn->ccm_rx.counter = 0;
    db00:	f884 60d3 	strb.w	r6, [r4, #211]	; 0xd3
			conn->ccm_rx.direction = 0;
			conn->ccm_tx.direction = 1;

			/* enable receive and transmit encryption */
			conn->enc_rx = 1;
			conn->enc_tx = 1;
    db04:	f043 0330 	orr.w	r3, r3, #48	; 0x30
			/* copy the IV */
			memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
			       sizeof(conn->ccm_tx.iv));

			/* initialise counter */
			conn->ccm_rx.counter = 0;
    db08:	f884 60d4 	strb.w	r6, [r4, #212]	; 0xd4
    db0c:	f884 60d5 	strb.w	r6, [r4, #213]	; 0xd5
    db10:	f884 60d6 	strb.w	r6, [r4, #214]	; 0xd6
    db14:	f884 60d7 	strb.w	r6, [r4, #215]	; 0xd7
    db18:	f884 60d8 	strb.w	r6, [r4, #216]	; 0xd8
			conn->ccm_tx.counter = 0;
    db1c:	f8a4 60f2 	strh.w	r6, [r4, #242]	; 0xf2
    db20:	f8a4 60f4 	strh.w	r6, [r4, #244]	; 0xf4
    db24:	f8a4 60f6 	strh.w	r6, [r4, #246]	; 0xf6
    db28:	f8a4 60f8 	strh.w	r6, [r4, #248]	; 0xf8
			conn->ccm_rx.direction = 0;
			conn->ccm_tx.direction = 1;

			/* enable receive and transmit encryption */
			conn->enc_rx = 1;
			conn->enc_tx = 1;
    db2c:	f884 30c0 	strb.w	r3, [r4, #192]	; 0xc0

			/* send enc start resp */
			start_enc_rsp_send(conn, pdu_ctrl_tx);
    db30:	1d39      	adds	r1, r7, #4
    db32:	4620      	mov	r0, r4
    db34:	f7ff fb10 	bl	d158 <start_enc_rsp_send>
    db38:	e0d4      	b.n	dce4 <event_connection_prepare+0xa3c>
		/* slave send reject ind or start enc req at control priority */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_FAST_ENC)
		else {
#else /* !CONFIG_BLUETOOTH_CONTROLLER_FAST_ENC */
		else if (!conn->pause_tx || conn->refresh) {
    db3a:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    db3e:	f003 0348 	and.w	r3, r3, #72	; 0x48
    db42:	2b08      	cmp	r3, #8
    db44:	f000 80b9 	beq.w	dcba <event_connection_prepare+0xa12>
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_FAST_ENC */

			/* ll ctrl packet */
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    db48:	7903      	ldrb	r3, [r0, #4]
    db4a:	f043 0303 	orr.w	r3, r3, #3
    db4e:	7103      	strb	r3, [r0, #4]

			/* place the reject ind packet as next in tx queue */
			if (conn->llcp.encryption.error_code) {
    db50:	f894 606c 	ldrb.w	r6, [r4, #108]	; 0x6c
    db54:	b156      	cbz	r6, db6c <event_connection_prepare+0x8c4>
				pdu_ctrl_tx->len =
    db56:	2302      	movs	r3, #2
    db58:	7143      	strb	r3, [r0, #5]
				    offsetof(struct pdu_data_llctrl, ctrldata) +
				    sizeof(struct pdu_data_llctrl_reject_ind);
				pdu_ctrl_tx->payload.llctrl.opcode =
    db5a:	230d      	movs	r3, #13
    db5c:	71c3      	strb	r3, [r0, #7]
					PDU_DATA_LLCTRL_TYPE_REJECT_IND;
				pdu_ctrl_tx->payload.llctrl.ctrldata.reject_ind.error_code =
					conn->llcp.encryption.error_code;
    db5e:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
				pdu_ctrl_tx->len =
				    offsetof(struct pdu_data_llctrl, ctrldata) +
				    sizeof(struct pdu_data_llctrl_reject_ind);
				pdu_ctrl_tx->payload.llctrl.opcode =
					PDU_DATA_LLCTRL_TYPE_REJECT_IND;
				pdu_ctrl_tx->payload.llctrl.ctrldata.reject_ind.error_code =
    db62:	7203      	strb	r3, [r0, #8]
					conn->llcp.encryption.error_code;

				conn->llcp.encryption.error_code = 0;
    db64:	2300      	movs	r3, #0
    db66:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
    db6a:	e0bb      	b.n	dce4 <event_connection_prepare+0xa3c>
{
	struct radio_pdu_node_tx *node_tx;
	struct pdu_data *pdu_ctrl_tx;

	/* acquire tx mem */
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    db6c:	f50a 70ec 	add.w	r0, sl, #472	; 0x1d8
    db70:	f7fb fe6b 	bl	984a <mem_acquire>
	LL_ASSERT(node_tx);
    db74:	4682      	mov	sl, r0
    db76:	bb78      	cbnz	r0, dbd8 <event_connection_prepare+0x930>
    db78:	4b0d      	ldr	r3, [pc, #52]	; (dbb0 <event_connection_prepare+0x908>)
    db7a:	9301      	str	r3, [sp, #4]
    db7c:	4b0d      	ldr	r3, [pc, #52]	; (dbb4 <event_connection_prepare+0x90c>)
    db7e:	9300      	str	r3, [sp, #0]
    db80:	4a0d      	ldr	r2, [pc, #52]	; (dbb8 <event_connection_prepare+0x910>)
    db82:	4b12      	ldr	r3, [pc, #72]	; (dbcc <event_connection_prepare+0x924>)
    db84:	490e      	ldr	r1, [pc, #56]	; (dbc0 <event_connection_prepare+0x918>)
    db86:	4812      	ldr	r0, [pc, #72]	; (dbd0 <event_connection_prepare+0x928>)
    db88:	e470      	b.n	d46c <event_connection_prepare+0x1c4>
    db8a:	bf00      	nop
    db8c:	f3af 8000 	nop.w
    db90:	1afd498d 	.word	0x1afd498d
    db94:	00000007 	.word	0x00000007
    db98:	02625a00 	.word	0x02625a00
    db9c:	01c9c380 	.word	0x01c9c380
    dba0:	0000b971 	.word	0x0000b971
    dba4:	1afd498d 	.word	0x1afd498d
    dba8:	0000e2cd 	.word	0x0000e2cd
    dbac:	0000e2d1 	.word	0x0000e2d1
    dbb0:	00013df4 	.word	0x00013df4
    dbb4:	00013df9 	.word	0x00013df9
    dbb8:	00013db4 	.word	0x00013db4
    dbbc:	00016997 	.word	0x00016997
    dbc0:	00013dbb 	.word	0x00013dbb
    dbc4:	000154fb 	.word	0x000154fb
    dbc8:	20001648 	.word	0x20001648
    dbcc:	00016787 	.word	0x00016787
    dbd0:	00015870 	.word	0x00015870
    dbd4:	20001470 	.word	0x20001470

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    dbd8:	7903      	ldrb	r3, [r0, #4]
    dbda:	f043 0303 	orr.w	r3, r3, #3
    dbde:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata)
    dbe0:	230d      	movs	r3, #13
    dbe2:	7143      	strb	r3, [r0, #5]
		+ sizeof(struct pdu_data_llctrl_enc_rsp);
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
    dbe4:	f04f 0b04 	mov.w	fp, #4
	/** @todo */
	memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.enc_rsp.skds[0], 0xaa,
    dbe8:	f100 0308 	add.w	r3, r0, #8

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata)
		+ sizeof(struct pdu_data_llctrl_enc_rsp);
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
    dbec:	f880 b007 	strb.w	fp, [r0, #7]
	/** @todo */
	memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.enc_rsp.skds[0], 0xaa,
    dbf0:	2208      	movs	r2, #8
    dbf2:	21aa      	movs	r1, #170	; 0xaa
    dbf4:	4618      	mov	r0, r3
    dbf6:	930d      	str	r3, [sp, #52]	; 0x34
    dbf8:	f7f3 fa77 	bl	10ea <memset>
		sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.enc_rsp.skds));
	/** @todo */
	memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.enc_rsp.ivs[0], 0xbb,
    dbfc:	f10a 0310 	add.w	r3, sl, #16
    dc00:	465a      	mov	r2, fp
    dc02:	21bb      	movs	r1, #187	; 0xbb
    dc04:	4618      	mov	r0, r3
    dc06:	930b      	str	r3, [sp, #44]	; 0x2c
    dc08:	f7f3 fa6f 	bl	10ea <memset>
	       sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.enc_rsp.ivs));

	/* things from slave stored for session key calculation */
	memcpy(&conn->llcp.encryption.skd[8],
    dc0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    dc0e:	2208      	movs	r2, #8
    dc10:	4619      	mov	r1, r3
    dc12:	f104 008f 	add.w	r0, r4, #143	; 0x8f
    dc16:	f7f3 fa3c 	bl	1092 <memcpy>
	       &pdu_ctrl_tx->payload.llctrl.ctrldata.enc_rsp.skds[0], 8);
	memcpy(&conn->ccm_rx.iv[4],
    dc1a:	465a      	mov	r2, fp
    dc1c:	990b      	ldr	r1, [sp, #44]	; 0x2c
    dc1e:	f104 00de 	add.w	r0, r4, #222	; 0xde
    dc22:	f7f3 fa36 	bl	1092 <memcpy>
	       &pdu_ctrl_tx->payload.llctrl.ctrldata.enc_rsp.ivs[0], 4);

	ctrl_tx_enqueue(conn, node_tx);
    dc26:	4651      	mov	r1, sl
    dc28:	4620      	mov	r0, r4
				 */
				enc_rsp_send(conn);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_FAST_ENC */

				/* calc the Session Key */
				ecb_encrypt(&conn->llcp.encryption.ltk[0],
    dc2a:	f104 0ac1 	add.w	sl, r4, #193	; 0xc1
	memcpy(&conn->llcp.encryption.skd[8],
	       &pdu_ctrl_tx->payload.llctrl.ctrldata.enc_rsp.skds[0], 8);
	memcpy(&conn->ccm_rx.iv[4],
	       &pdu_ctrl_tx->payload.llctrl.ctrldata.enc_rsp.ivs[0], 4);

	ctrl_tx_enqueue(conn, node_tx);
    dc2e:	f7ff fa59 	bl	d0e4 <ctrl_tx_enqueue>
				 */
				enc_rsp_send(conn);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_FAST_ENC */

				/* calc the Session Key */
				ecb_encrypt(&conn->llcp.encryption.ltk[0],
    dc32:	4653      	mov	r3, sl
    dc34:	4632      	mov	r2, r6
    dc36:	f104 0187 	add.w	r1, r4, #135	; 0x87
    dc3a:	f104 0077 	add.w	r0, r4, #119	; 0x77
    dc3e:	f7fb ff0d 	bl	9a5c <ecb_encrypt>
					    &conn->llcp.encryption.skd[0], NULL,
					    &conn->ccm_rx.key[0]);

				/* copy the Session Key */
				memcpy(&conn->ccm_tx.key[0],
    dc42:	2210      	movs	r2, #16
    dc44:	4651      	mov	r1, sl
    dc46:	f104 00e2 	add.w	r0, r4, #226	; 0xe2
    dc4a:	f7f3 fa22 	bl	1092 <memcpy>
				       &conn->ccm_rx.key[0],
				       sizeof(conn->ccm_tx.key));

				/* copy the IV */
				memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
    dc4e:	2208      	movs	r2, #8
    dc50:	f104 01da 	add.w	r1, r4, #218	; 0xda
    dc54:	f104 00fb 	add.w	r0, r4, #251	; 0xfb
    dc58:	f7f3 fa1b 	bl	1092 <memcpy>
				conn->ccm_tx.counter = 0;

				/* set direction: slave to master = 0,
				 * master to slave = 1
				 */
				conn->ccm_rx.direction = 1;
    dc5c:	f894 30d9 	ldrb.w	r3, [r4, #217]	; 0xd9
				/* copy the IV */
				memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
				       sizeof(conn->ccm_tx.iv));

				/* initialise counter */
				conn->ccm_rx.counter = 0;
    dc60:	f884 60d1 	strb.w	r6, [r4, #209]	; 0xd1
				conn->ccm_tx.counter = 0;

				/* set direction: slave to master = 0,
				 * master to slave = 1
				 */
				conn->ccm_rx.direction = 1;
    dc64:	f043 0301 	orr.w	r3, r3, #1
    dc68:	f884 30d9 	strb.w	r3, [r4, #217]	; 0xd9
				conn->ccm_tx.direction = 0;
    dc6c:	f894 30fa 	ldrb.w	r3, [r4, #250]	; 0xfa
				/* copy the IV */
				memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
				       sizeof(conn->ccm_tx.iv));

				/* initialise counter */
				conn->ccm_rx.counter = 0;
    dc70:	f884 60d2 	strb.w	r6, [r4, #210]	; 0xd2

				/* set direction: slave to master = 0,
				 * master to slave = 1
				 */
				conn->ccm_rx.direction = 1;
				conn->ccm_tx.direction = 0;
    dc74:	f366 0300 	bfi	r3, r6, #0, #1
    dc78:	f884 30fa 	strb.w	r3, [r4, #250]	; 0xfa

				/* enable receive encryption (transmit turned
				 * on when start enc resp from master is
				 * received)
				 */
				conn->enc_rx = 1;
    dc7c:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
				/* copy the IV */
				memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
				       sizeof(conn->ccm_tx.iv));

				/* initialise counter */
				conn->ccm_rx.counter = 0;
    dc80:	f884 60d3 	strb.w	r6, [r4, #211]	; 0xd3

				/* enable receive encryption (transmit turned
				 * on when start enc resp from master is
				 * received)
				 */
				conn->enc_rx = 1;
    dc84:	f043 0310 	orr.w	r3, r3, #16
    dc88:	f884 30c0 	strb.w	r3, [r4, #192]	; 0xc0

				/* prepare the start enc req */
				pdu_ctrl_tx->len =
    dc8c:	2301      	movs	r3, #1
				/* copy the IV */
				memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
				       sizeof(conn->ccm_tx.iv));

				/* initialise counter */
				conn->ccm_rx.counter = 0;
    dc8e:	f884 60d4 	strb.w	r6, [r4, #212]	; 0xd4
    dc92:	f884 60d5 	strb.w	r6, [r4, #213]	; 0xd5
    dc96:	f884 60d6 	strb.w	r6, [r4, #214]	; 0xd6
    dc9a:	f884 60d7 	strb.w	r6, [r4, #215]	; 0xd7
    dc9e:	f884 60d8 	strb.w	r6, [r4, #216]	; 0xd8
				conn->ccm_tx.counter = 0;
    dca2:	f8a4 60f2 	strh.w	r6, [r4, #242]	; 0xf2
    dca6:	f8a4 60f4 	strh.w	r6, [r4, #244]	; 0xf4
    dcaa:	f8a4 60f6 	strh.w	r6, [r4, #246]	; 0xf6
    dcae:	f8a4 60f8 	strh.w	r6, [r4, #248]	; 0xf8
				 * received)
				 */
				conn->enc_rx = 1;

				/* prepare the start enc req */
				pdu_ctrl_tx->len =
    dcb2:	717b      	strb	r3, [r7, #5]
					offsetof(struct pdu_data_llctrl,
						 ctrldata);
				pdu_ctrl_tx->payload.llctrl.opcode =
    dcb4:	2305      	movs	r3, #5
    dcb6:	71fb      	strb	r3, [r7, #7]
    dcb8:	e014      	b.n	dce4 <event_connection_prepare+0xa3c>
			}

#if !defined(CONFIG_BLUETOOTH_CONTROLLER_FAST_ENC)
		} else {
			/* enable transmit encryption */
			_radio.conn_curr->enc_tx = 1;
    dcba:	f8da 0190 	ldr.w	r0, [sl, #400]	; 0x190
    dcbe:	f890 30c0 	ldrb.w	r3, [r0, #192]	; 0xc0
    dcc2:	f043 0320 	orr.w	r3, r3, #32
    dcc6:	f880 30c0 	strb.w	r3, [r0, #192]	; 0xc0

			start_enc_rsp_send(_radio.conn_curr, NULL);
    dcca:	2100      	movs	r1, #0
    dccc:	f7ff fa44 	bl	d158 <start_enc_rsp_send>

			/* resume data packet rx and tx */
			_radio.conn_curr->pause_rx = 0;
    dcd0:	f8da 2190 	ldr.w	r2, [sl, #400]	; 0x190
    dcd4:	f892 30c0 	ldrb.w	r3, [r2, #192]	; 0xc0
			_radio.conn_curr->pause_tx = 0;
    dcd8:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    dcdc:	f36f 03c3 	bfc	r3, #3, #1
    dce0:	f882 30c0 	strb.w	r3, [r2, #192]	; 0xc0
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_FAST_ENC */

		}

		ctrl_tx_enqueue(conn, node_tx);
    dce4:	4639      	mov	r1, r7
    dce6:	4620      	mov	r0, r4
    dce8:	f7ff f9fc 	bl	d0e4 <ctrl_tx_enqueue>
    dcec:	e138      	b.n	df60 <event_connection_prepare+0xcb8>

static inline void event_fex_prep(struct connection *conn)
{
	struct radio_pdu_node_tx *node_tx;

	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    dcee:	48bb      	ldr	r0, [pc, #748]	; (dfdc <event_connection_prepare+0xd34>)
    dcf0:	f7fb fdab 	bl	984a <mem_acquire>
	if (node_tx) {
    dcf4:	4606      	mov	r6, r0
    dcf6:	2800      	cmp	r0, #0
    dcf8:	f000 8132 	beq.w	df60 <event_connection_prepare+0xcb8>
		struct pdu_data *pdu_ctrl_tx =
			(struct pdu_data *)node_tx->pdu_data;

		/* procedure request acked */
		conn->llcp_ack = conn->llcp_req;
    dcfc:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
    dd00:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69

		/* use initial feature bitmap */
		conn->llcp_features = RADIO_BLE_FEAT;
    dd04:	f244 137f 	movw	r3, #16767	; 0x417f
    dd08:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98

		/* place the feature exchange req packet as next in tx queue */
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    dd0c:	7903      	ldrb	r3, [r0, #4]
    dd0e:	f043 0303 	orr.w	r3, r3, #3
    dd12:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
    dd14:	2309      	movs	r3, #9
    dd16:	7143      	strb	r3, [r0, #5]
			sizeof(struct pdu_data_llctrl_feature_req);
		pdu_ctrl_tx->payload.llctrl.opcode =
    dd18:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    dd1c:	f013 0f01 	tst.w	r3, #1
    dd20:	bf0c      	ite	eq
    dd22:	2308      	moveq	r3, #8
    dd24:	230e      	movne	r3, #14
			(conn->role.master.role == 0) ?
			PDU_DATA_LLCTRL_TYPE_FEATURE_REQ :
			PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ;
		memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[0],
    dd26:	2208      	movs	r2, #8

		/* place the feature exchange req packet as next in tx queue */
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
			sizeof(struct pdu_data_llctrl_feature_req);
		pdu_ctrl_tx->payload.llctrl.opcode =
    dd28:	71c3      	strb	r3, [r0, #7]
			(conn->role.master.role == 0) ?
			PDU_DATA_LLCTRL_TYPE_FEATURE_REQ :
			PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ;
		memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[0],
    dd2a:	2100      	movs	r1, #0
    dd2c:	4410      	add	r0, r2
    dd2e:	f7f3 f9dc 	bl	10ea <memset>
		       0x00,
		       sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features));
		pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[0] =
    dd32:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    dd36:	7233      	strb	r3, [r6, #8]
			conn->llcp_features & 0xFF;
		pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[1] =
    dd38:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    dd3c:	0a1b      	lsrs	r3, r3, #8
    dd3e:	7273      	strb	r3, [r6, #9]
			(conn->llcp_features >> 8) & 0xFF;
		pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[2] =
    dd40:	f8b4 309a 	ldrh.w	r3, [r4, #154]	; 0x9a
    dd44:	72b3      	strb	r3, [r6, #10]
			(conn->llcp_features >> 16) & 0xFF;

		ctrl_tx_enqueue(conn, node_tx);
    dd46:	4631      	mov	r1, r6
    dd48:	e06b      	b.n	de22 <event_connection_prepare+0xb7a>
}

static inline void event_vex_prep(struct connection *conn)
{

	if (conn->llcp_version.tx == 0) {
    dd4a:	f894 309c 	ldrb.w	r3, [r4, #156]	; 0x9c
    dd4e:	07d8      	lsls	r0, r3, #31
    dd50:	d421      	bmi.n	dd96 <event_connection_prepare+0xaee>
		struct radio_pdu_node_tx *node_tx;

		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    dd52:	48a2      	ldr	r0, [pc, #648]	; (dfdc <event_connection_prepare+0xd34>)
    dd54:	f7fb fd79 	bl	984a <mem_acquire>
		if (node_tx) {
    dd58:	4601      	mov	r1, r0
    dd5a:	2800      	cmp	r0, #0
    dd5c:	f000 8100 	beq.w	df60 <event_connection_prepare+0xcb8>
			struct pdu_data *pdu_ctrl_tx =
				(struct pdu_data *)node_tx->pdu_data;

			/* procedure request acked */
			conn->llcp_ack = conn->llcp_req;
    dd60:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
    dd64:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69

			/* set version ind tx-ed flag */
			conn->llcp_version.tx = 1;
    dd68:	f894 309c 	ldrb.w	r3, [r4, #156]	; 0x9c
    dd6c:	f043 0301 	orr.w	r3, r3, #1
    dd70:	f884 309c 	strb.w	r3, [r4, #156]	; 0x9c

			/* place the version ind packet as next in tx queue */
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    dd74:	7903      	ldrb	r3, [r0, #4]
    dd76:	f043 0303 	orr.w	r3, r3, #3
    dd7a:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    dd7c:	2306      	movs	r3, #6
    dd7e:	7143      	strb	r3, [r0, #5]
						    ctrldata) +
				sizeof(struct pdu_data_llctrl_version_ind);
			pdu_ctrl_tx->payload.llctrl.opcode =
    dd80:	230c      	movs	r3, #12
    dd82:	71c3      	strb	r3, [r0, #7]
				PDU_DATA_LLCTRL_TYPE_VERSION_IND;
			pdu_ctrl_tx->payload.llctrl.ctrldata.version_ind.version_number =
    dd84:	2309      	movs	r3, #9
    dd86:	7203      	strb	r3, [r0, #8]
				RADIO_BLE_VERSION_NUMBER;
			pdu_ctrl_tx->payload.llctrl.ctrldata.version_ind.company_id =
    dd88:	f04f 33ff 	mov.w	r3, #4294967295
    dd8c:	7243      	strb	r3, [r0, #9]
    dd8e:	7283      	strb	r3, [r0, #10]
				RADIO_BLE_COMPANY_ID;
			pdu_ctrl_tx->payload.llctrl.ctrldata.version_ind.sub_version_number =
    dd90:	72c3      	strb	r3, [r0, #11]
    dd92:	7303      	strb	r3, [r0, #12]
    dd94:	e045      	b.n	de22 <event_connection_prepare+0xb7a>
			/* Start Procedure Timeout (@todo this shall not
			 * replace terminate procedure)
			 */
			conn->procedure_expire = conn->procedure_reload;
		}
	} else if (conn->llcp_version.rx != 0) {
    dd96:	0799      	lsls	r1, r3, #30
    dd98:	d529      	bpl.n	ddee <event_connection_prepare+0xb46>
		struct radio_pdu_node_rx *radio_pdu_node_rx;
		struct pdu_data *pdu_ctrl_rx;

		/* procedure request acked */
		conn->llcp_ack = conn->llcp_req;
    dd9a:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
    dd9e:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69

		/* Prepare the rx packet structure */
		radio_pdu_node_rx = packet_rx_reserve_get(2);
    dda2:	2002      	movs	r0, #2
    dda4:	f7fd f9ac 	bl	b100 <packet_rx_reserve_get>
		LL_ASSERT(radio_pdu_node_rx);
    dda8:	b948      	cbnz	r0, ddbe <event_connection_prepare+0xb16>
    ddaa:	4b8d      	ldr	r3, [pc, #564]	; (dfe0 <event_connection_prepare+0xd38>)
    ddac:	9301      	str	r3, [sp, #4]
    ddae:	4b8d      	ldr	r3, [pc, #564]	; (dfe4 <event_connection_prepare+0xd3c>)
    ddb0:	9300      	str	r3, [sp, #0]
    ddb2:	4b8d      	ldr	r3, [pc, #564]	; (dfe8 <event_connection_prepare+0xd40>)
    ddb4:	4a8d      	ldr	r2, [pc, #564]	; (dfec <event_connection_prepare+0xd44>)
    ddb6:	498e      	ldr	r1, [pc, #568]	; (dff0 <event_connection_prepare+0xd48>)
    ddb8:	488e      	ldr	r0, [pc, #568]	; (dff4 <event_connection_prepare+0xd4c>)
    ddba:	f7ff bb57 	b.w	d46c <event_connection_prepare+0x1c4>

		radio_pdu_node_rx->hdr.handle = conn->handle;
    ddbe:	8c23      	ldrh	r3, [r4, #32]
    ddc0:	80c3      	strh	r3, [r0, #6]
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    ddc2:	2301      	movs	r3, #1
    ddc4:	7103      	strb	r3, [r0, #4]

		/* prepare version ind structure */
		pdu_ctrl_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    ddc6:	7a03      	ldrb	r3, [r0, #8]
    ddc8:	f043 0303 	orr.w	r3, r3, #3
    ddcc:	7203      	strb	r3, [r0, #8]
		pdu_ctrl_rx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
    ddce:	2306      	movs	r3, #6
    ddd0:	7243      	strb	r3, [r0, #9]
			sizeof(struct pdu_data_llctrl_version_ind);
		pdu_ctrl_rx->payload.llctrl.opcode =
    ddd2:	230c      	movs	r3, #12
    ddd4:	72c3      	strb	r3, [r0, #11]
			PDU_DATA_LLCTRL_TYPE_VERSION_IND;
		pdu_ctrl_rx->payload.llctrl.ctrldata.version_ind.version_number =
			conn->llcp_version.version_number;
    ddd6:	f894 309d 	ldrb.w	r3, [r4, #157]	; 0x9d
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
		pdu_ctrl_rx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
			sizeof(struct pdu_data_llctrl_version_ind);
		pdu_ctrl_rx->payload.llctrl.opcode =
			PDU_DATA_LLCTRL_TYPE_VERSION_IND;
		pdu_ctrl_rx->payload.llctrl.ctrldata.version_ind.version_number =
    ddda:	7303      	strb	r3, [r0, #12]
			conn->llcp_version.version_number;
		pdu_ctrl_rx->payload.llctrl.ctrldata.version_ind.company_id =
    dddc:	f8b4 309e 	ldrh.w	r3, [r4, #158]	; 0x9e
    dde0:	f8a0 300d 	strh.w	r3, [r0, #13]
			conn->llcp_version.company_id;
		pdu_ctrl_rx->payload.llctrl.ctrldata.version_ind.sub_version_number =
    dde4:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
    dde8:	f8a0 300f 	strh.w	r3, [r0, #15]
    ddec:	e0ae      	b.n	df4c <event_connection_prepare+0xca4>

		/* enqueue version ind structure into rx queue */
		packet_rx_enqueue();
	} else {
		/* tx-ed but no rx, and new request placed */
		LL_ASSERT(0);
    ddee:	4b7c      	ldr	r3, [pc, #496]	; (dfe0 <event_connection_prepare+0xd38>)
    ddf0:	9301      	str	r3, [sp, #4]
    ddf2:	4b7c      	ldr	r3, [pc, #496]	; (dfe4 <event_connection_prepare+0xd3c>)
    ddf4:	9300      	str	r3, [sp, #0]
    ddf6:	4b7c      	ldr	r3, [pc, #496]	; (dfe8 <event_connection_prepare+0xd40>)
    ddf8:	f7ff bb35 	b.w	d466 <event_connection_prepare+0x1be>
#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_PING)
static inline void event_ping_prep(struct connection *conn)
{
	struct radio_pdu_node_tx *node_tx;

	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    ddfc:	4877      	ldr	r0, [pc, #476]	; (dfdc <event_connection_prepare+0xd34>)
    ddfe:	f7fb fd24 	bl	984a <mem_acquire>
	if (node_tx) {
    de02:	4601      	mov	r1, r0
    de04:	2800      	cmp	r0, #0
    de06:	f000 80ab 	beq.w	df60 <event_connection_prepare+0xcb8>
		struct pdu_data *pdu_ctrl_tx =
			(struct pdu_data *)node_tx->pdu_data;

		/* procedure request acked */
		conn->llcp_ack = conn->llcp_req;
    de0a:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
    de0e:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69

		/* place the ping req packet as next in tx queue */
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    de12:	7903      	ldrb	r3, [r0, #4]
    de14:	f043 0303 	orr.w	r3, r3, #3
    de18:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata);
    de1a:	2301      	movs	r3, #1
    de1c:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->payload.llctrl.opcode =
    de1e:	2312      	movs	r3, #18
    de20:	71c3      	strb	r3, [r0, #7]
			PDU_DATA_LLCTRL_TYPE_PING_REQ;

		ctrl_tx_enqueue(conn, node_tx);
    de22:	4620      	mov	r0, r4
    de24:	f7ff f95e 	bl	d0e4 <ctrl_tx_enqueue>

		/* Start Procedure Timeout (@todo this shall not replace
		 * terminate procedure)
		 */
		conn->procedure_expire = conn->procedure_reload;
    de28:	8f23      	ldrh	r3, [r4, #56]	; 0x38
    de2a:	8763      	strh	r3, [r4, #58]	; 0x3a
    de2c:	e098      	b.n	df60 <event_connection_prepare+0xcb8>
}

static inline void event_phy_upd_ind_prep(struct connection *conn,
					  u16_t event_counter)
{
	if (conn->llcp.phy_upd_ind.initiate) {
    de2e:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
    de32:	07da      	lsls	r2, r3, #31
    de34:	d532      	bpl.n	de9c <event_connection_prepare+0xbf4>
		struct radio_pdu_node_tx *node_tx;

		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    de36:	4869      	ldr	r0, [pc, #420]	; (dfdc <event_connection_prepare+0xd34>)
    de38:	f7fb fd07 	bl	984a <mem_acquire>
		if (node_tx) {
    de3c:	4601      	mov	r1, r0
    de3e:	2800      	cmp	r0, #0
    de40:	f000 808e 	beq.w	df60 <event_connection_prepare+0xcb8>
			struct pdu_data *pdu_ctrl_tx = (struct pdu_data *)
						       node_tx->pdu_data;
			struct pdu_data_llctrl_phy_upd_ind *p;

			/* reset initiate flag */
			conn->llcp.phy_upd_ind.initiate = 0;
    de44:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
    de48:	f36f 0300 	bfc	r3, #0, #1
    de4c:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c

			/* Check if both tx and rx PHY unchanged */
			if (!((conn->llcp.phy_upd_ind.tx |
    de50:	b2db      	uxtb	r3, r3
    de52:	f3c3 0282 	ubfx	r2, r3, #2, #3
    de56:	ea52 1353 	orrs.w	r3, r2, r3, lsr #5

				/* 0 instant */
				conn->llcp.phy_upd_ind.instant = 0;
			} else {
				/* set instant */
				conn->llcp.phy_upd_ind.instant = event_counter +
    de5a:	bf13      	iteet	ne
    de5c:	8ce3      	ldrhne	r3, [r4, #38]	; 0x26

			/* Check if both tx and rx PHY unchanged */
			if (!((conn->llcp.phy_upd_ind.tx |
			       conn->llcp.phy_upd_ind.rx) & 0x07)) {
				/* Procedure complete */
				conn->llcp_ack = conn->llcp_req;
    de5e:	f894 2068 	ldrbeq.w	r2, [r4, #104]	; 0x68
    de62:	f884 2069 	strbeq.w	r2, [r4, #105]	; 0x69

				/* 0 instant */
				conn->llcp.phy_upd_ind.instant = 0;
			} else {
				/* set instant */
				conn->llcp.phy_upd_ind.instant = event_counter +
    de66:	3306      	addne	r3, #6
    de68:	bf18      	it	ne
    de6a:	4443      	addne	r3, r8
    de6c:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
			}

			/* place the phy update ind packet as next in
			 * tx queue
			 */
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    de70:	7903      	ldrb	r3, [r0, #4]
    de72:	f043 0303 	orr.w	r3, r3, #3
    de76:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    de78:	2305      	movs	r3, #5
    de7a:	7143      	strb	r3, [r0, #5]
						    ctrldata) +
				sizeof(struct pdu_data_llctrl_phy_upd_ind);
			pdu_ctrl_tx->payload.llctrl.opcode =
    de7c:	2318      	movs	r3, #24
    de7e:	71c3      	strb	r3, [r0, #7]
				PDU_DATA_LLCTRL_TYPE_PHY_UPD_IND;
			p = &pdu_ctrl_tx->payload.llctrl.ctrldata.phy_upd_ind;
			p->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
    de80:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
    de84:	f3c3 0382 	ubfx	r3, r3, #2, #3
    de88:	7203      	strb	r3, [r0, #8]
			p->s_to_m_phy = conn->llcp.phy_upd_ind.rx;
    de8a:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
    de8e:	f3c3 1342 	ubfx	r3, r3, #5, #3
    de92:	7243      	strb	r3, [r0, #9]
			p->instant = conn->llcp.phy_upd_ind.instant;
    de94:	f8b4 306e 	ldrh.w	r3, [r4, #110]	; 0x6e
    de98:	8143      	strh	r3, [r0, #10]
    de9a:	e724      	b.n	dce6 <event_connection_prepare+0xa3e>

			ctrl_tx_enqueue(conn, node_tx);
		}
	} else if (((event_counter - conn->llcp.phy_upd_ind.instant) & 0xFFFF)
    de9c:	f8b4 206e 	ldrh.w	r2, [r4, #110]	; 0x6e
    dea0:	ebc2 0208 	rsb	r2, r2, r8
    dea4:	b292      	uxth	r2, r2
    dea6:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    deaa:	da59      	bge.n	df60 <event_connection_prepare+0xcb8>
		struct radio_le_phy_upd_cmplt *p;
		struct pdu_data *pdu_data;
		u8_t old_tx, old_rx;

		/* procedure request acked */
		conn->llcp_ack = conn->llcp_req;
    deac:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
    deb0:	f884 2069 	strb.w	r2, [r4, #105]	; 0x69

		/* apply new phy */
		old_tx = conn->phy_tx;
		old_rx = conn->phy_rx;
		if (conn->llcp.phy_upd_ind.tx) {
    deb4:	f013 0f1c 	tst.w	r3, #28

		/* procedure request acked */
		conn->llcp_ack = conn->llcp_req;

		/* apply new phy */
		old_tx = conn->phy_tx;
    deb8:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
		old_rx = conn->phy_rx;
    debc:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
		if (conn->llcp.phy_upd_ind.tx) {
			conn->phy_tx = conn->llcp.phy_upd_ind.tx;
    dec0:	bf18      	it	ne
    dec2:	f3c3 0682 	ubfxne	r6, r3, #2, #3

		/* procedure request acked */
		conn->llcp_ack = conn->llcp_req;

		/* apply new phy */
		old_tx = conn->phy_tx;
    dec6:	f3c2 00c2 	ubfx	r0, r2, #3, #3
		old_rx = conn->phy_rx;
		if (conn->llcp.phy_upd_ind.tx) {
			conn->phy_tx = conn->llcp.phy_upd_ind.tx;
    deca:	bf1c      	itt	ne
    decc:	f366 02c5 	bfine	r2, r6, #3, #3
    ded0:	f884 2032 	strbne.w	r2, [r4, #50]	; 0x32
		}
		if (conn->llcp.phy_upd_ind.rx) {
    ded4:	f013 0fe0 	tst.w	r3, #224	; 0xe0
			conn->phy_rx = conn->llcp.phy_upd_ind.rx;
    ded8:	bf1f      	itttt	ne
    deda:	f894 2033 	ldrbne.w	r2, [r4, #51]	; 0x33
    dede:	095e      	lsrne	r6, r3, #5
    dee0:	f366 02c5 	bfine	r2, r6, #3, #3
    dee4:	f884 2033 	strbne.w	r2, [r4, #51]	; 0x33
		}
		conn->phy_flags = conn->phy_pref_flags;
    dee8:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
    deec:	4616      	mov	r6, r2
    deee:	f3c2 1280 	ubfx	r2, r2, #6, #1
    def2:	f362 16c7 	bfi	r6, r2, #7, #1

		/* generate event if phy changed or initiated by cmd */
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
    def6:	079b      	lsls	r3, r3, #30
		/* procedure request acked */
		conn->llcp_ack = conn->llcp_req;

		/* apply new phy */
		old_tx = conn->phy_tx;
		old_rx = conn->phy_rx;
    def8:	f3c1 01c2 	ubfx	r1, r1, #3, #3
			conn->phy_tx = conn->llcp.phy_upd_ind.tx;
		}
		if (conn->llcp.phy_upd_ind.rx) {
			conn->phy_rx = conn->llcp.phy_upd_ind.rx;
		}
		conn->phy_flags = conn->phy_pref_flags;
    defc:	f884 6032 	strb.w	r6, [r4, #50]	; 0x32

		/* generate event if phy changed or initiated by cmd */
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
    df00:	d40a      	bmi.n	df18 <event_connection_prepare+0xc70>
    df02:	b2f3      	uxtb	r3, r6
    df04:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    df08:	4283      	cmp	r3, r0
    df0a:	d105      	bne.n	df18 <event_connection_prepare+0xc70>
		    (conn->phy_rx == old_rx)) {
    df0c:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
			conn->phy_rx = conn->llcp.phy_upd_ind.rx;
		}
		conn->phy_flags = conn->phy_pref_flags;

		/* generate event if phy changed or initiated by cmd */
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
    df10:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    df14:	428b      	cmp	r3, r1
    df16:	d023      	beq.n	df60 <event_connection_prepare+0xcb8>
		    (conn->phy_rx == old_rx)) {
			return;
		}

		node_rx = packet_rx_reserve_get(2);
    df18:	2002      	movs	r0, #2
    df1a:	f7fd f8f1 	bl	b100 <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
    df1e:	b928      	cbnz	r0, df2c <event_connection_prepare+0xc84>
    df20:	4b2f      	ldr	r3, [pc, #188]	; (dfe0 <event_connection_prepare+0xd38>)
    df22:	9301      	str	r3, [sp, #4]
    df24:	4b2f      	ldr	r3, [pc, #188]	; (dfe4 <event_connection_prepare+0xd3c>)
    df26:	9300      	str	r3, [sp, #0]
    df28:	4b33      	ldr	r3, [pc, #204]	; (dff8 <event_connection_prepare+0xd50>)
    df2a:	e14b      	b.n	e1c4 <event_connection_prepare+0xf1c>

		node_rx->hdr.handle = conn->handle;
    df2c:	8c23      	ldrh	r3, [r4, #32]
    df2e:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    df30:	230c      	movs	r3, #12
    df32:	7103      	strb	r3, [r0, #4]

		pdu_data = (struct pdu_data *)&node_rx->pdu_data;
		p = (struct radio_le_phy_upd_cmplt *)&pdu_data->payload;
		p->status = 0;
    df34:	2300      	movs	r3, #0
    df36:	72c3      	strb	r3, [r0, #11]
		p->tx = conn->phy_tx;
    df38:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
    df3c:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    df40:	7303      	strb	r3, [r0, #12]
		p->rx = conn->phy_rx;
    df42:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    df46:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    df4a:	7343      	strb	r3, [r0, #13]

		packet_rx_enqueue();
    df4c:	f7fd fca6 	bl	b89c <packet_rx_enqueue>
    df50:	e006      	b.n	df60 <event_connection_prepare+0xcb8>
			event_phy_upd_ind_prep(conn, event_counter);
			break;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PHY */

		default:
			LL_ASSERT(0);
    df52:	4b23      	ldr	r3, [pc, #140]	; (dfe0 <event_connection_prepare+0xd38>)
    df54:	9301      	str	r3, [sp, #4]
    df56:	4b23      	ldr	r3, [pc, #140]	; (dfe4 <event_connection_prepare+0xd3c>)
    df58:	9300      	str	r3, [sp, #0]
    df5a:	4b28      	ldr	r3, [pc, #160]	; (dffc <event_connection_prepare+0xd54>)
    df5c:	f7ff ba83 	b.w	d466 <event_connection_prepare+0x1be>
			break;
		}
	}

	/* Terminate Procedure Request */
	if (conn->llcp_terminate.ack != conn->llcp_terminate.req) {
    df60:	f894 20a5 	ldrb.w	r2, [r4, #165]	; 0xa5
    df64:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    df68:	429a      	cmp	r2, r3
    df6a:	d01d      	beq.n	dfa8 <event_connection_prepare+0xd00>
		struct radio_pdu_node_tx *node_tx;

		/* Stop previous event, to avoid Radio DMA corrupting the rx
		 * queue
		 */
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    df6c:	2200      	movs	r2, #0
    df6e:	4611      	mov	r1, r2
    df70:	4610      	mov	r0, r2
    df72:	2305      	movs	r3, #5
    df74:	f7fd fdfa 	bl	bb6c <event_stop>

		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    df78:	4818      	ldr	r0, [pc, #96]	; (dfdc <event_connection_prepare+0xd34>)
    df7a:	f7fb fc66 	bl	984a <mem_acquire>
		if (node_tx) {
    df7e:	4601      	mov	r1, r0
    df80:	b190      	cbz	r0, dfa8 <event_connection_prepare+0xd00>
			struct pdu_data *pdu_ctrl_tx =
			    (struct pdu_data *)node_tx->pdu_data;

			/* Terminate Procedure acked */
			conn->llcp_terminate.ack = conn->llcp_terminate.req;
    df82:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    df86:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5

			/* place the terminate ind packet in tx queue */
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    df8a:	7903      	ldrb	r3, [r0, #4]
    df8c:	f043 0303 	orr.w	r3, r3, #3
    df90:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len =
    df92:	2302      	movs	r3, #2
    df94:	7143      	strb	r3, [r0, #5]
				offsetof(struct pdu_data_llctrl, ctrldata) +
				sizeof(struct pdu_data_llctrl_terminate_ind);
			pdu_ctrl_tx->payload.llctrl.opcode =
    df96:	71c3      	strb	r3, [r0, #7]
				PDU_DATA_LLCTRL_TYPE_TERMINATE_IND;
			pdu_ctrl_tx->payload.llctrl.ctrldata.terminate_ind.
				error_code = conn->llcp_terminate.reason_own;
    df98:	f894 30a6 	ldrb.w	r3, [r4, #166]	; 0xa6
    df9c:	7203      	strb	r3, [r0, #8]

			ctrl_tx_enqueue(conn, node_tx);
    df9e:	4620      	mov	r0, r4
    dfa0:	f7ff f8a0 	bl	d0e4 <ctrl_tx_enqueue>

			/* Terminate Procedure timeout is started, will
			 * replace any other timeout running
			 */
			conn->procedure_expire = conn->procedure_reload;
    dfa4:	8f23      	ldrh	r3, [r4, #56]	; 0x38
    dfa6:	8763      	strh	r3, [r4, #58]	; 0x3a
		}
	}

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
	/* check if procedure is requested */
	if (conn->llcp_length.ack != conn->llcp_length.req) {
    dfa8:	f894 20b5 	ldrb.w	r2, [r4, #181]	; 0xb5
    dfac:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
    dfb0:	429a      	cmp	r2, r3
    dfb2:	f000 812c 	beq.w	e20e <event_connection_prepare+0xf66>
		/* Stop previous event, to avoid Radio DMA corrupting the
		 * rx queue
		 */
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    dfb6:	2200      	movs	r2, #0
    dfb8:	2305      	movs	r3, #5
    dfba:	4611      	mov	r1, r2
    dfbc:	4610      	mov	r0, r2
    dfbe:	f7fd fdd5 	bl	bb6c <event_stop>
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
static inline void event_len_prep(struct connection *conn)
{
	switch (conn->llcp_length.state) {
    dfc2:	f894 30b6 	ldrb.w	r3, [r4, #182]	; 0xb6
    dfc6:	f003 0303 	and.w	r3, r3, #3
    dfca:	2b03      	cmp	r3, #3
    dfcc:	f200 8118 	bhi.w	e200 <event_connection_prepare+0xf58>
    dfd0:	e8df f013 	tbh	[pc, r3, lsl #1]
    dfd4:	011d0016 	.word	0x011d0016
    dfd8:	0053011d 	.word	0x0053011d
    dfdc:	20001648 	.word	0x20001648
    dfe0:	00013df4 	.word	0x00013df4
    dfe4:	00013df9 	.word	0x00013df9
    dfe8:	00016a01 	.word	0x00016a01
    dfec:	00013db4 	.word	0x00013db4
    dff0:	00013dbb 	.word	0x00013dbb
    dff4:	00015549 	.word	0x00015549
    dff8:	000168f3 	.word	0x000168f3
    dffc:	0001676e 	.word	0x0001676e
		struct pdu_data_llctrl_length_req_rsp *lr;
		struct radio_pdu_node_tx *node_tx;
		struct pdu_data *pdu_ctrl_tx;
		u16_t free_count_rx;

		free_count_rx = packet_rx_acquired_count_get() +
    e000:	f7fd f868 	bl	b0d4 <packet_rx_acquired_count_get>
    e004:	4606      	mov	r6, r0
			mem_free_count_get(_radio.pkt_rx_data_free);
    e006:	f8d5 01ac 	ldr.w	r0, [r5, #428]	; 0x1ac
    e00a:	4fa3      	ldr	r7, [pc, #652]	; (e298 <event_connection_prepare+0xff0>)
    e00c:	f7fb fc4e 	bl	98ac <mem_free_count_get>
		struct pdu_data_llctrl_length_req_rsp *lr;
		struct radio_pdu_node_tx *node_tx;
		struct pdu_data *pdu_ctrl_tx;
		u16_t free_count_rx;

		free_count_rx = packet_rx_acquired_count_get() +
    e010:	4430      	add	r0, r6
    e012:	b280      	uxth	r0, r0
			mem_free_count_get(_radio.pkt_rx_data_free);
		LL_ASSERT(free_count_rx <= 0xFF);
    e014:	28ff      	cmp	r0, #255	; 0xff
    e016:	d83c      	bhi.n	e092 <event_connection_prepare+0xdea>

		if (_radio.packet_rx_data_count != free_count_rx) {
    e018:	f897 31b6 	ldrb.w	r3, [r7, #438]	; 0x1b6
    e01c:	4283      	cmp	r3, r0
    e01e:	f040 80f6 	bne.w	e20e <event_connection_prepare+0xf66>
			break;
		}

		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    e022:	f507 70ec 	add.w	r0, r7, #472	; 0x1d8
    e026:	f7fb fc10 	bl	984a <mem_acquire>
		if (!node_tx) {
    e02a:	4601      	mov	r1, r0
    e02c:	2800      	cmp	r0, #0
    e02e:	f000 80ee 	beq.w	e20e <event_connection_prepare+0xf66>
			break;
		}

		/* wait for resp before completing the procedure */
		conn->llcp_length.state = LLCP_LENGTH_STATE_ACK_WAIT;
    e032:	f894 30b6 	ldrb.w	r3, [r4, #182]	; 0xb6
    e036:	2201      	movs	r2, #1
    e038:	f362 0301 	bfi	r3, r2, #0, #2
    e03c:	f884 30b6 	strb.w	r3, [r4, #182]	; 0xb6

		/* set the default tx octets to requested value */
		conn->default_tx_octets = conn->llcp_length.tx_octets;
    e040:	f8b4 30ba 	ldrh.w	r3, [r4, #186]	; 0xba
    e044:	85a3      	strh	r3, [r4, #44]	; 0x2c

		/* place the length req packet as next in tx queue */
		pdu_ctrl_tx = (struct pdu_data *) node_tx->pdu_data;
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e046:	7903      	ldrb	r3, [r0, #4]
			PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;

		lr = (struct pdu_data_llctrl_length_req_rsp *)
			&pdu_ctrl_tx->payload.llctrl.ctrldata.length_req;
		lr->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
		lr->max_rx_time = ((RADIO_LL_LENGTH_OCTETS_RX_MAX + 14) << 3);
    e048:	72c2      	strb	r2, [r0, #11]
		/* set the default tx octets to requested value */
		conn->default_tx_octets = conn->llcp_length.tx_octets;

		/* place the length req packet as next in tx queue */
		pdu_ctrl_tx = (struct pdu_data *) node_tx->pdu_data;
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e04a:	f043 0303 	orr.w	r3, r3, #3
    e04e:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
    e050:	2309      	movs	r3, #9
    e052:	7143      	strb	r3, [r0, #5]
			sizeof(struct pdu_data_llctrl_length_req_rsp);
		pdu_ctrl_tx->payload.llctrl.opcode =
    e054:	2314      	movs	r3, #20
    e056:	71c3      	strb	r3, [r0, #7]
			PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;

		lr = (struct pdu_data_llctrl_length_req_rsp *)
			&pdu_ctrl_tx->payload.llctrl.ctrldata.length_req;
		lr->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
    e058:	231b      	movs	r3, #27
    e05a:	7203      	strb	r3, [r0, #8]
    e05c:	2300      	movs	r3, #0
    e05e:	7243      	strb	r3, [r0, #9]
		lr->max_rx_time = ((RADIO_LL_LENGTH_OCTETS_RX_MAX + 14) << 3);
    e060:	2348      	movs	r3, #72	; 0x48
    e062:	7283      	strb	r3, [r0, #10]
		lr->max_tx_octets = conn->default_tx_octets;
    e064:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    e066:	8183      	strh	r3, [r0, #12]
		lr->max_tx_time = ((conn->default_tx_octets + 14) << 3);
    e068:	330e      	adds	r3, #14
    e06a:	00db      	lsls	r3, r3, #3
    e06c:	81c3      	strh	r3, [r0, #14]

		ctrl_tx_enqueue(conn, node_tx);
    e06e:	4620      	mov	r0, r4
    e070:	f7ff f838 	bl	d0e4 <ctrl_tx_enqueue>

		/* Start Procedure Timeout (@todo this shall not replace
		 * terminate procedure).
		 */
		conn->procedure_expire = conn->procedure_reload;
    e074:	8f23      	ldrh	r3, [r4, #56]	; 0x38
    e076:	8763      	strh	r3, [r4, #58]	; 0x3a
    e078:	e0c9      	b.n	e20e <event_connection_prepare+0xf66>
		/* Ensure the rx pool is not in use.
		 * This is important to be able to re-size the pool
		 * ensuring there is no chance that an operation on
		 * the pool is pre-empted causing memory corruption.
		 */
		free_count_rx = packet_rx_acquired_count_get() +
    e07a:	f7fd f82b 	bl	b0d4 <packet_rx_acquired_count_get>
    e07e:	4606      	mov	r6, r0
			mem_free_count_get(_radio.pkt_rx_data_free);
    e080:	f8d5 01ac 	ldr.w	r0, [r5, #428]	; 0x1ac
    e084:	4f84      	ldr	r7, [pc, #528]	; (e298 <event_connection_prepare+0xff0>)
    e086:	f7fb fc11 	bl	98ac <mem_free_count_get>
		/* Ensure the rx pool is not in use.
		 * This is important to be able to re-size the pool
		 * ensuring there is no chance that an operation on
		 * the pool is pre-empted causing memory corruption.
		 */
		free_count_rx = packet_rx_acquired_count_get() +
    e08a:	4430      	add	r0, r6
    e08c:	b280      	uxth	r0, r0
			mem_free_count_get(_radio.pkt_rx_data_free);
		LL_ASSERT(free_count_rx <= 0xFF);
    e08e:	28ff      	cmp	r0, #255	; 0xff
    e090:	d909      	bls.n	e0a6 <event_connection_prepare+0xdfe>
    e092:	4b82      	ldr	r3, [pc, #520]	; (e29c <event_connection_prepare+0xff4>)
    e094:	9301      	str	r3, [sp, #4]
    e096:	4b82      	ldr	r3, [pc, #520]	; (e2a0 <event_connection_prepare+0xff8>)
    e098:	9300      	str	r3, [sp, #0]
    e09a:	4a82      	ldr	r2, [pc, #520]	; (e2a4 <event_connection_prepare+0xffc>)
    e09c:	4b82      	ldr	r3, [pc, #520]	; (e2a8 <event_connection_prepare+0x1000>)
    e09e:	4983      	ldr	r1, [pc, #524]	; (e2ac <event_connection_prepare+0x1004>)
    e0a0:	4883      	ldr	r0, [pc, #524]	; (e2b0 <event_connection_prepare+0x1008>)
    e0a2:	f7ff b9e3 	b.w	d46c <event_connection_prepare+0x1c4>

		if (_radio.packet_rx_data_count != free_count_rx) {
    e0a6:	f897 31b6 	ldrb.w	r3, [r7, #438]	; 0x1b6
    e0aa:	4283      	cmp	r3, r0
    e0ac:	f040 80a8 	bne.w	e200 <event_connection_prepare+0xf58>
			 */
			LL_ASSERT(0);
		}

		/* Procedure complete */
		conn->llcp_length.ack = conn->llcp_length.req;
    e0b0:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
    e0b4:	f884 30b5 	strb.w	r3, [r4, #181]	; 0xb5
		conn->procedure_expire = 0;

		/* resume data packet tx */
		_radio.conn_curr->pause_tx = 0;
    e0b8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
			LL_ASSERT(0);
		}

		/* Procedure complete */
		conn->llcp_length.ack = conn->llcp_length.req;
		conn->procedure_expire = 0;
    e0bc:	2100      	movs	r1, #0
    e0be:	8761      	strh	r1, [r4, #58]	; 0x3a

		/* resume data packet tx */
		_radio.conn_curr->pause_tx = 0;
    e0c0:	f893 20c0 	ldrb.w	r2, [r3, #192]	; 0xc0
    e0c4:	f361 02c3 	bfi	r2, r1, #3, #1
    e0c8:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

		/* Use the new rx octets in the connection */
		conn->max_rx_octets = conn->llcp_length.rx_octets;
    e0cc:	f8b4 30b8 	ldrh.w	r3, [r4, #184]	; 0xb8
    e0d0:	8623      	strh	r3, [r4, #48]	; 0x30
		 * rule that the rx buffers are allocated in application
		 * context.
		 * Design mem_* such that mem_init could interrupt mem_acquire,
		 * when the pool is full?
		 */
		free_count_conn = mem_free_count_get(_radio.conn_free);
    e0d2:	f8d7 0188 	ldr.w	r0, [r7, #392]	; 0x188
    e0d6:	f7fb fbe9 	bl	98ac <mem_free_count_get>
		if (_radio.advertiser.conn) {
    e0da:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
    e0de:	b10b      	cbz	r3, e0e4 <event_connection_prepare+0xe3c>
			free_count_conn++;
    e0e0:	3001      	adds	r0, #1
    e0e2:	b280      	uxth	r0, r0
		}
		if (_radio.scanner.conn) {
    e0e4:	f8d5 317c 	ldr.w	r3, [r5, #380]	; 0x17c
    e0e8:	b10b      	cbz	r3, e0ee <event_connection_prepare+0xe46>
			free_count_conn++;
    e0ea:	3001      	adds	r0, #1
    e0ec:	b280      	uxth	r0, r0
		}
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
    e0ee:	8e26      	ldrh	r6, [r4, #48]	; 0x30
					     conn->max_rx_octets);
		/* Resize to lower or higher size if this is the only active
		 * connection, or resize to only higher sizes as there may be
		 * other connections using the current size.
		 */
		if (((free_count_conn + 1) == _radio.connection_count) ||
    e0f0:	f895 318c 	ldrb.w	r3, [r5, #396]	; 0x18c
			free_count_conn++;
		}
		if (_radio.scanner.conn) {
			free_count_conn++;
		}
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
    e0f4:	360e      	adds	r6, #14
					     conn->max_rx_octets);
		/* Resize to lower or higher size if this is the only active
		 * connection, or resize to only higher sizes as there may be
		 * other connections using the current size.
		 */
		if (((free_count_conn + 1) == _radio.connection_count) ||
    e0f6:	3001      	adds	r0, #1
			free_count_conn++;
		}
		if (_radio.scanner.conn) {
			free_count_conn++;
		}
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
    e0f8:	f026 0603 	bic.w	r6, r6, #3
					     conn->max_rx_octets);
		/* Resize to lower or higher size if this is the only active
		 * connection, or resize to only higher sizes as there may be
		 * other connections using the current size.
		 */
		if (((free_count_conn + 1) == _radio.connection_count) ||
    e0fc:	4298      	cmp	r0, r3
			free_count_conn++;
		}
		if (_radio.scanner.conn) {
			free_count_conn++;
		}
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
    e0fe:	b2b6      	uxth	r6, r6
					     conn->max_rx_octets);
		/* Resize to lower or higher size if this is the only active
		 * connection, or resize to only higher sizes as there may be
		 * other connections using the current size.
		 */
		if (((free_count_conn + 1) == _radio.connection_count) ||
    e100:	d004      	beq.n	e10c <event_connection_prepare+0xe64>
    e102:	4b65      	ldr	r3, [pc, #404]	; (e298 <event_connection_prepare+0xff0>)
    e104:	f8b3 31b4 	ldrh.w	r3, [r3, #436]	; 0x1b4
    e108:	42b3      	cmp	r3, r6
    e10a:	d252      	bcs.n	e1b2 <event_connection_prepare+0xf0a>
		    (packet_rx_data_size > _radio.packet_rx_data_size)) {
			/* as rx mem is to be re-sized, release acquired
			 * memq link.
			 */
			while (_radio.packet_rx_acquire !=
    e10c:	4f62      	ldr	r7, [pc, #392]	; (e298 <event_connection_prepare+0xff0>)
    e10e:	f895 31be 	ldrb.w	r3, [r5, #446]	; 0x1be
				_radio.packet_rx_last) {
    e112:	f895 11bd 	ldrb.w	r1, [r5, #445]	; 0x1bd
		if (((free_count_conn + 1) == _radio.connection_count) ||
		    (packet_rx_data_size > _radio.packet_rx_data_size)) {
			/* as rx mem is to be re-sized, release acquired
			 * memq link.
			 */
			while (_radio.packet_rx_acquire !=
    e116:	4a60      	ldr	r2, [pc, #384]	; (e298 <event_connection_prepare+0xff0>)
    e118:	428b      	cmp	r3, r1
    e11a:	d024      	beq.n	e166 <event_connection_prepare+0xebe>
				_radio.packet_rx_last) {

				struct radio_pdu_node_rx *node_rx;

				if (_radio.packet_rx_acquire == 0) {
    e11c:	b90b      	cbnz	r3, e122 <event_connection_prepare+0xe7a>
					_radio.packet_rx_acquire =
    e11e:	f897 31bc 	ldrb.w	r3, [r7, #444]	; 0x1bc
					_radio.packet_rx_acquire -= 1;
				}

				node_rx = _radio.packet_rx[
						_radio.packet_rx_acquire];
				mem_release(node_rx->hdr.onion.link,
    e122:	4964      	ldr	r1, [pc, #400]	; (e2b4 <event_connection_prepare+0x100c>)

				if (_radio.packet_rx_acquire == 0) {
					_radio.packet_rx_acquire =
						_radio.packet_rx_count - 1;
				} else {
					_radio.packet_rx_acquire -= 1;
    e124:	3b01      	subs	r3, #1
    e126:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
				}

				node_rx = _radio.packet_rx[
    e12a:	f895 21be 	ldrb.w	r2, [r5, #446]	; 0x1be
    e12e:	f8d5 31b8 	ldr.w	r3, [r5, #440]	; 0x1b8
						_radio.packet_rx_acquire];
				mem_release(node_rx->hdr.onion.link,
    e132:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    e136:	6818      	ldr	r0, [r3, #0]
    e138:	f7fb fba1 	bl	987e <mem_release>
					&_radio.link_rx_free);

				LL_ASSERT(_radio.link_rx_data_quota <
    e13c:	f895 21bc 	ldrb.w	r2, [r5, #444]	; 0x1bc
    e140:	f895 31d0 	ldrb.w	r3, [r5, #464]	; 0x1d0
    e144:	3a01      	subs	r2, #1
    e146:	4293      	cmp	r3, r2
    e148:	db09      	blt.n	e15e <event_connection_prepare+0xeb6>
    e14a:	4b54      	ldr	r3, [pc, #336]	; (e29c <event_connection_prepare+0xff4>)
    e14c:	9301      	str	r3, [sp, #4]
    e14e:	4b54      	ldr	r3, [pc, #336]	; (e2a0 <event_connection_prepare+0xff8>)
    e150:	9300      	str	r3, [sp, #0]
    e152:	4a54      	ldr	r2, [pc, #336]	; (e2a4 <event_connection_prepare+0xffc>)
    e154:	4b54      	ldr	r3, [pc, #336]	; (e2a8 <event_connection_prepare+0x1000>)
    e156:	4955      	ldr	r1, [pc, #340]	; (e2ac <event_connection_prepare+0x1004>)
    e158:	4857      	ldr	r0, [pc, #348]	; (e2b8 <event_connection_prepare+0x1010>)
    e15a:	f7ff b987 	b.w	d46c <event_connection_prepare+0x1c4>
					  (_radio.packet_rx_count - 1));
				_radio.link_rx_data_quota++;
    e15e:	3301      	adds	r3, #1
    e160:	f887 31d0 	strb.w	r3, [r7, #464]	; 0x1d0
    e164:	e7d3      	b.n	e10e <event_connection_prepare+0xe66>
				 * later down in code.
				 */
			}

			/* calculate the new rx node size and new count */
			if (conn->max_rx_octets < (PDU_AC_SIZE_MAX + 1)) {
    e166:	8e23      	ldrh	r3, [r4, #48]	; 0x30
				_radio.packet_rx_data_size =
					packet_rx_data_size;
			}
			_radio.packet_rx_data_count =
				_radio.packet_rx_data_pool_size /
				_radio.packet_rx_data_size;
    e168:	484b      	ldr	r0, [pc, #300]	; (e298 <event_connection_prepare+0xff0>)
				 * later down in code.
				 */
			}

			/* calculate the new rx node size and new count */
			if (conn->max_rx_octets < (PDU_AC_SIZE_MAX + 1)) {
    e16a:	2b27      	cmp	r3, #39	; 0x27
				_radio.packet_rx_data_size =
    e16c:	bf9a      	itte	ls
    e16e:	2330      	movls	r3, #48	; 0x30
    e170:	f8a2 31b4 	strhls.w	r3, [r2, #436]	; 0x1b4
				    MROUND(offsetof(struct radio_pdu_node_rx,
						    pdu_data) +
					   (PDU_AC_SIZE_MAX + 1));
			} else {
				_radio.packet_rx_data_size =
    e174:	f8a2 61b4 	strhhi.w	r6, [r2, #436]	; 0x1b4
					packet_rx_data_size;
			}
			_radio.packet_rx_data_count =
				_radio.packet_rx_data_pool_size /
				_radio.packet_rx_data_size;
    e178:	f8b5 11b4 	ldrh.w	r1, [r5, #436]	; 0x1b4
					   (PDU_AC_SIZE_MAX + 1));
			} else {
				_radio.packet_rx_data_size =
					packet_rx_data_size;
			}
			_radio.packet_rx_data_count =
    e17c:	f8b5 21b2 	ldrh.w	r2, [r5, #434]	; 0x1b2
    e180:	fbb2 f2f1 	udiv	r2, r2, r1
    e184:	b2d2      	uxtb	r2, r2
    e186:	f885 21b6 	strb.w	r2, [r5, #438]	; 0x1b6
				_radio.packet_rx_data_pool_size /
				_radio.packet_rx_data_size;
			LL_ASSERT(_radio.packet_rx_data_count);
    e18a:	b94a      	cbnz	r2, e1a0 <event_connection_prepare+0xef8>
    e18c:	4b43      	ldr	r3, [pc, #268]	; (e29c <event_connection_prepare+0xff4>)
    e18e:	9301      	str	r3, [sp, #4]
    e190:	4b43      	ldr	r3, [pc, #268]	; (e2a0 <event_connection_prepare+0xff8>)
    e192:	9300      	str	r3, [sp, #0]
    e194:	4a43      	ldr	r2, [pc, #268]	; (e2a4 <event_connection_prepare+0xffc>)
    e196:	4b44      	ldr	r3, [pc, #272]	; (e2a8 <event_connection_prepare+0x1000>)
    e198:	4944      	ldr	r1, [pc, #272]	; (e2ac <event_connection_prepare+0x1004>)
    e19a:	4848      	ldr	r0, [pc, #288]	; (e2bc <event_connection_prepare+0x1014>)
    e19c:	f7ff b966 	b.w	d46c <event_connection_prepare+0x1c4>

			/* re-size (re-init) the free rx pool */
			mem_init(_radio.pkt_rx_data_pool,
    e1a0:	f500 73d6 	add.w	r3, r0, #428	; 0x1ac
    e1a4:	f8d0 01a8 	ldr.w	r0, [r0, #424]	; 0x1a8
    e1a8:	f7fb fb28 	bl	97fc <mem_init>
				 &_radio.pkt_rx_data_free);

			/* allocate the rx queue include one extra for
			 * generating event in following lines.
			 */
			packet_rx_allocate(4);
    e1ac:	2004      	movs	r0, #4
    e1ae:	f7fc ffbb 	bl	b128 <packet_rx_allocate>
		}

		/* Prepare the rx packet structure */
		node_rx = packet_rx_reserve_get(2);
    e1b2:	2002      	movs	r0, #2
    e1b4:	f7fc ffa4 	bl	b100 <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
    e1b8:	b948      	cbnz	r0, e1ce <event_connection_prepare+0xf26>
    e1ba:	4b38      	ldr	r3, [pc, #224]	; (e29c <event_connection_prepare+0xff4>)
    e1bc:	9301      	str	r3, [sp, #4]
    e1be:	4b38      	ldr	r3, [pc, #224]	; (e2a0 <event_connection_prepare+0xff8>)
    e1c0:	9300      	str	r3, [sp, #0]
    e1c2:	4b39      	ldr	r3, [pc, #228]	; (e2a8 <event_connection_prepare+0x1000>)
    e1c4:	4a37      	ldr	r2, [pc, #220]	; (e2a4 <event_connection_prepare+0xffc>)
    e1c6:	4939      	ldr	r1, [pc, #228]	; (e2ac <event_connection_prepare+0x1004>)
    e1c8:	483d      	ldr	r0, [pc, #244]	; (e2c0 <event_connection_prepare+0x1018>)
    e1ca:	f7ff b94f 	b.w	d46c <event_connection_prepare+0x1c4>
		node_rx->hdr.handle = conn->handle;
    e1ce:	8c23      	ldrh	r3, [r4, #32]
    e1d0:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    e1d2:	2301      	movs	r3, #1
    e1d4:	7103      	strb	r3, [r0, #4]

		/* prepare length rsp structure */
		pdu_ctrl_rx = (struct pdu_data *) node_rx->pdu_data;
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    e1d6:	7a03      	ldrb	r3, [r0, #8]
    e1d8:	f043 0303 	orr.w	r3, r3, #3
    e1dc:	7203      	strb	r3, [r0, #8]
		pdu_ctrl_rx->len = offsetof(struct pdu_data_llctrl,
    e1de:	2309      	movs	r3, #9
    e1e0:	7243      	strb	r3, [r0, #9]
					    ctrldata) +
			sizeof(struct pdu_data_llctrl_length_req_rsp);
		pdu_ctrl_rx->payload.llctrl.opcode =
    e1e2:	2315      	movs	r3, #21
    e1e4:	72c3      	strb	r3, [r0, #11]
			PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;

		lr = (struct pdu_data_llctrl_length_req_rsp *)
			&pdu_ctrl_rx->payload.llctrl.ctrldata.length_req;
		lr->max_rx_octets = conn->max_rx_octets;
    e1e6:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    e1e8:	8183      	strh	r3, [r0, #12]
		lr->max_rx_time = ((conn->max_rx_octets + 14) << 3);
    e1ea:	330e      	adds	r3, #14
    e1ec:	00db      	lsls	r3, r3, #3
    e1ee:	81c3      	strh	r3, [r0, #14]
		lr->max_tx_octets = conn->max_tx_octets;
    e1f0:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
    e1f2:	8203      	strh	r3, [r0, #16]
		lr->max_tx_time = ((conn->max_tx_octets + 14) << 3);
    e1f4:	330e      	adds	r3, #14
    e1f6:	00db      	lsls	r3, r3, #3
    e1f8:	8243      	strh	r3, [r0, #18]

		/* enqueue version ind structure into rx queue */
		packet_rx_enqueue();
    e1fa:	f7fd fb4f 	bl	b89c <packet_rx_enqueue>
    e1fe:	e006      	b.n	e20e <event_connection_prepare+0xf66>
	case LLCP_LENGTH_STATE_RSP_WAIT:
		/* no nothing */
		break;

	default:
		LL_ASSERT(0);
    e200:	4b26      	ldr	r3, [pc, #152]	; (e29c <event_connection_prepare+0xff4>)
    e202:	9301      	str	r3, [sp, #4]
    e204:	4b26      	ldr	r3, [pc, #152]	; (e2a0 <event_connection_prepare+0xff8>)
    e206:	9300      	str	r3, [sp, #0]
    e208:	4b27      	ldr	r3, [pc, #156]	; (e2a8 <event_connection_prepare+0x1000>)
    e20a:	f7ff b92c 	b.w	d466 <event_connection_prepare+0x1be>
		event_len_prep(conn);
	}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

	/* Setup XTAL startup and radio active events */
	event_common_prepare(ticks_at_expire, remainder,
    e20e:	f894 1044 	ldrb.w	r1, [r4, #68]	; 0x44
    e212:	f894 3020 	ldrb.w	r3, [r4, #32]
    e216:	482b      	ldr	r0, [pc, #172]	; (e2c4 <event_connection_prepare+0x101c>)
    e218:	68a2      	ldr	r2, [r4, #8]
    e21a:	9403      	str	r4, [sp, #12]
    e21c:	f011 0f01 	tst.w	r1, #1
    e220:	f103 0307 	add.w	r3, r3, #7
    e224:	4928      	ldr	r1, [pc, #160]	; (e2c8 <event_connection_prepare+0x1020>)
    e226:	b2db      	uxtb	r3, r3
    e228:	bf08      	it	eq
    e22a:	4601      	moveq	r1, r0
    e22c:	e88d 000c 	stmia.w	sp, {r2, r3}
    e230:	9102      	str	r1, [sp, #8]
    e232:	1d23      	adds	r3, r4, #4
    e234:	4622      	mov	r2, r4
    e236:	990c      	ldr	r1, [sp, #48]	; 0x30
    e238:	4648      	mov	r0, r9
			     (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle),
			     (conn->role.slave.role != 0) ? event_slave : event_master,
			     conn);

	/* store the next event counter value */
	conn->event_counter = event_counter + 1;
    e23a:	f108 0801 	add.w	r8, r8, #1
		event_len_prep(conn);
	}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

	/* Setup XTAL startup and radio active events */
	event_common_prepare(ticks_at_expire, remainder,
    e23e:	f7fd fe67 	bl	bf10 <event_common_prepare>
			     (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle),
			     (conn->role.slave.role != 0) ? event_slave : event_master,
			     conn);

	/* store the next event counter value */
	conn->event_counter = event_counter + 1;
    e242:	f8a4 8022 	strh.w	r8, [r4, #34]	; 0x22
    e246:	e023      	b.n	e290 <event_connection_prepare+0xfe8>
	if ((conn->role.master.role == 0) || (is_peer_compatible(conn))) {
		/** Perform slave intiated conn param req */
		conn->llcp.connection_update.win_size = 1;
		conn->llcp.connection_update.win_offset_us = 0;
		conn->llcp.connection_update.interval = conn->conn_interval;
		conn->llcp.connection_update.latency = conn->latency;
    e248:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
    e24a:	f8a4 006e 	strh.w	r0, [r4, #110]	; 0x6e
		conn->llcp.connection_update.timeout = conn->conn_interval *
    e24e:	8ea0      	ldrh	r0, [r4, #52]	; 0x34

	if ((conn->role.master.role == 0) || (is_peer_compatible(conn))) {
		/** Perform slave intiated conn param req */
		conn->llcp.connection_update.win_size = 1;
		conn->llcp.connection_update.win_offset_us = 0;
		conn->llcp.connection_update.interval = conn->conn_interval;
    e250:	f8a4 b06c 	strh.w	fp, [r4, #108]	; 0x6c
		conn->llcp.connection_update.latency = conn->latency;
		conn->llcp.connection_update.timeout = conn->conn_interval *
    e254:	fb0b fb00 	mul.w	fp, fp, r0
    e258:	207d      	movs	r0, #125	; 0x7d
    e25a:	fb00 fb0b 	mul.w	fp, r0, fp
    e25e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    e262:	fb9b fbf0 	sdiv	fp, fp, r0
			conn->supervision_reload * 125 / 1000;
		/* conn->llcp.connection_update.instant     = 0; */
		conn->llcp.connection_update.state =
    e266:	2002      	movs	r0, #2
		return 1;
	}

	if ((conn->role.master.role == 0) || (is_peer_compatible(conn))) {
		/** Perform slave intiated conn param req */
		conn->llcp.connection_update.win_size = 1;
    e268:	2101      	movs	r1, #1
		conn->llcp.connection_update.interval = conn->conn_interval;
		conn->llcp.connection_update.latency = conn->latency;
		conn->llcp.connection_update.timeout = conn->conn_interval *
			conn->supervision_reload * 125 / 1000;
		/* conn->llcp.connection_update.instant     = 0; */
		conn->llcp.connection_update.state =
    e26a:	f360 0302 	bfi	r3, r0, #0, #3
			(conn->role.master.role == 0) ?
			LLCP_CONN_STATE_INITIATE : LLCP_CONN_STATE_REQ;
		conn->llcp.connection_update.is_internal = 1;
    e26e:	f361 03c4 	bfi	r3, r1, #3, #2

		conn->llcp_type = LLCP_CONNECTION_UPDATE;
		conn->llcp_ack--;
    e272:	3a01      	subs	r2, #1
		return 1;
	}

	if ((conn->role.master.role == 0) || (is_peer_compatible(conn))) {
		/** Perform slave intiated conn param req */
		conn->llcp.connection_update.win_size = 1;
    e274:	f884 1094 	strb.w	r1, [r4, #148]	; 0x94
		conn->llcp.connection_update.win_offset_us = 0;
    e278:	f8c4 708c 	str.w	r7, [r4, #140]	; 0x8c
		conn->llcp.connection_update.interval = conn->conn_interval;
		conn->llcp.connection_update.latency = conn->latency;
		conn->llcp.connection_update.timeout = conn->conn_interval *
    e27c:	f8a4 b070 	strh.w	fp, [r4, #112]	; 0x70
			conn->supervision_reload * 125 / 1000;
		/* conn->llcp.connection_update.instant     = 0; */
		conn->llcp.connection_update.state =
			(conn->role.master.role == 0) ?
			LLCP_CONN_STATE_INITIATE : LLCP_CONN_STATE_REQ;
		conn->llcp.connection_update.is_internal = 1;
    e280:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95

		conn->llcp_type = LLCP_CONNECTION_UPDATE;
    e284:	f884 106a 	strb.w	r1, [r4, #106]	; 0x6a
		conn->llcp_ack--;
    e288:	f884 2069 	strb.w	r2, [r4, #105]	; 0x69
    e28c:	f7ff bb1b 	b.w	d8c6 <event_connection_prepare+0x61e>
			     (conn->role.slave.role != 0) ? event_slave : event_master,
			     conn);

	/* store the next event counter value */
	conn->event_counter = event_counter + 1;
}
    e290:	b00f      	add	sp, #60	; 0x3c
    e292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e296:	bf00      	nop
    e298:	20001470 	.word	0x20001470
    e29c:	00013df4 	.word	0x00013df4
    e2a0:	00013df9 	.word	0x00013df9
    e2a4:	00013db4 	.word	0x00013db4
    e2a8:	00016882 	.word	0x00016882
    e2ac:	00013dbb 	.word	0x00013dbb
    e2b0:	000158c2 	.word	0x000158c2
    e2b4:	20001634 	.word	0x20001634
    e2b8:	000158f9 	.word	0x000158f9
    e2bc:	00015953 	.word	0x00015953
    e2c0:	00015899 	.word	0x00015899
    e2c4:	0000e2d5 	.word	0x0000e2d5
    e2c8:	0000cf01 	.word	0x0000cf01

0000e2cc <event_master_prepare>:
static void event_master_prepare(u32_t ticks_at_expire, u32_t remainder,
				 u16_t lazy, void *context)
{
	DEBUG_RADIO_PREPARE_M(1);

	event_connection_prepare(ticks_at_expire, remainder, lazy, context);
    e2cc:	f7fe bfec 	b.w	d2a8 <event_connection_prepare>

0000e2d0 <event_slave_prepare>:
    e2d0:	f7fe bfea 	b.w	d2a8 <event_connection_prepare>

0000e2d4 <event_master>:
	DEBUG_RADIO_PREPARE_M(0);
}

static void event_master(u32_t ticks_at_expire, u32_t remainder, u16_t lazy,
			 void *context)
{
    e2d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    e2d6:	461c      	mov	r4, r3
	ARG_UNUSED(remainder);
	ARG_UNUSED(lazy);

	DEBUG_RADIO_START_M(1);

	LL_ASSERT(_radio.role == ROLE_NONE);
    e2d8:	4b5b      	ldr	r3, [pc, #364]	; (e448 <event_master+0x174>)
    e2da:	7bd9      	ldrb	r1, [r3, #15]
	DEBUG_RADIO_PREPARE_M(0);
}

static void event_master(u32_t ticks_at_expire, u32_t remainder, u16_t lazy,
			 void *context)
{
    e2dc:	b085      	sub	sp, #20
    e2de:	4607      	mov	r7, r0
	ARG_UNUSED(remainder);
	ARG_UNUSED(lazy);

	DEBUG_RADIO_START_M(1);

	LL_ASSERT(_radio.role == ROLE_NONE);
    e2e0:	f001 02ff 	and.w	r2, r1, #255	; 0xff
    e2e4:	461d      	mov	r5, r3
    e2e6:	b141      	cbz	r1, e2fa <event_master+0x26>
    e2e8:	4b58      	ldr	r3, [pc, #352]	; (e44c <event_master+0x178>)
    e2ea:	9301      	str	r3, [sp, #4]
    e2ec:	4b58      	ldr	r3, [pc, #352]	; (e450 <event_master+0x17c>)
    e2ee:	9300      	str	r3, [sp, #0]
    e2f0:	4a58      	ldr	r2, [pc, #352]	; (e454 <event_master+0x180>)
    e2f2:	4b59      	ldr	r3, [pc, #356]	; (e458 <event_master+0x184>)
    e2f4:	4959      	ldr	r1, [pc, #356]	; (e45c <event_master+0x188>)
    e2f6:	485a      	ldr	r0, [pc, #360]	; (e460 <event_master+0x18c>)
    e2f8:	e00d      	b.n	e316 <event_master+0x42>

	conn = (struct connection *)context;
	LL_ASSERT(_radio.ticker_id_prepare ==
    e2fa:	7b1b      	ldrb	r3, [r3, #12]
    e2fc:	8c21      	ldrh	r1, [r4, #32]
    e2fe:	b2db      	uxtb	r3, r3
    e300:	3107      	adds	r1, #7
    e302:	428b      	cmp	r3, r1
    e304:	d00f      	beq.n	e326 <event_master+0x52>
    e306:	4b51      	ldr	r3, [pc, #324]	; (e44c <event_master+0x178>)
    e308:	9301      	str	r3, [sp, #4]
    e30a:	4b51      	ldr	r3, [pc, #324]	; (e450 <event_master+0x17c>)
    e30c:	9300      	str	r3, [sp, #0]
    e30e:	4a51      	ldr	r2, [pc, #324]	; (e454 <event_master+0x180>)
    e310:	4b51      	ldr	r3, [pc, #324]	; (e458 <event_master+0x184>)
    e312:	4952      	ldr	r1, [pc, #328]	; (e45c <event_master+0x188>)
    e314:	4853      	ldr	r0, [pc, #332]	; (e464 <event_master+0x190>)
    e316:	f7f3 f8b3 	bl	1480 <printk>
    e31a:	4040      	eors	r0, r0
    e31c:	f380 8811 	msr	BASEPRI, r0
    e320:	f04f 0004 	mov.w	r0, #4
    e324:	df02      	svc	2
	_radio.state = STATE_TX;
	_radio.ticker_id_prepare = 0;
	_radio.ticker_id_event =
	    (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
	_radio.ticks_anchor = ticks_at_expire;
	_radio.packet_counter = 0;
    e326:	f885 2194 	strb.w	r2, [r5, #404]	; 0x194
	_radio.crc_expire = 0;
    e32a:	f885 2195 	strb.w	r2, [r5, #405]	; 0x195

	conn = (struct connection *)context;
	LL_ASSERT(_radio.ticker_id_prepare ==
		  (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle));

	_radio.role = ROLE_MASTER;
    e32e:	2104      	movs	r1, #4
	_radio.state = STATE_TX;
	_radio.ticker_id_prepare = 0;
	_radio.ticker_id_event =
    e330:	b2db      	uxtb	r3, r3

	conn = (struct connection *)context;
	LL_ASSERT(_radio.ticker_id_prepare ==
		  (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle));

	_radio.role = ROLE_MASTER;
    e332:	73e9      	strb	r1, [r5, #15]
	_radio.state = STATE_TX;
	_radio.ticker_id_prepare = 0;
    e334:	732a      	strb	r2, [r5, #12]
	_radio.ticker_id_event =
    e336:	736b      	strb	r3, [r5, #13]
	_radio.packet_counter = 0;
	_radio.crc_expire = 0;

	_radio.conn_curr = conn;

	conn->latency_event = conn->latency_prepare;
    e338:	8d23      	ldrh	r3, [r4, #40]	; 0x28
	    (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
	_radio.ticks_anchor = ticks_at_expire;
	_radio.packet_counter = 0;
	_radio.crc_expire = 0;

	_radio.conn_curr = conn;
    e33a:	f8c5 4190 	str.w	r4, [r5, #400]	; 0x190
	conn = (struct connection *)context;
	LL_ASSERT(_radio.ticker_id_prepare ==
		  (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle));

	_radio.role = ROLE_MASTER;
	_radio.state = STATE_TX;
    e33e:	2002      	movs	r0, #2
	_radio.packet_counter = 0;
	_radio.crc_expire = 0;

	_radio.conn_curr = conn;

	conn->latency_event = conn->latency_prepare;
    e340:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn->latency_prepare = 0;
    e342:	8522      	strh	r2, [r4, #40]	; 0x28
	conn = (struct connection *)context;
	LL_ASSERT(_radio.ticker_id_prepare ==
		  (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle));

	_radio.role = ROLE_MASTER;
	_radio.state = STATE_TX;
    e344:	7428      	strb	r0, [r5, #16]
	_radio.ticker_id_prepare = 0;
	_radio.ticker_id_event =
	    (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
	_radio.ticks_anchor = ticks_at_expire;
    e346:	606f      	str	r7, [r5, #4]

	conn->latency_event = conn->latency_prepare;
	conn->latency_prepare = 0;

	/* Route the tx packet to respective connections */
	packet_tx_enqueue(2);
    e348:	f7fd fd90 	bl	be6c <packet_tx_enqueue>

	/* prepare transmit packet */
	prepare_pdu_data_tx(conn, &pdu_data_tx);
    e34c:	a903      	add	r1, sp, #12
    e34e:	4620      	mov	r0, r4
    e350:	f7fd f9f0 	bl	b734 <prepare_pdu_data_tx>

	pdu_data_tx->sn = conn->sn;
    e354:	9b03      	ldr	r3, [sp, #12]
    e356:	f894 10c0 	ldrb.w	r1, [r4, #192]	; 0xc0
    e35a:	781a      	ldrb	r2, [r3, #0]
    e35c:	f361 02c3 	bfi	r2, r1, #3, #1
    e360:	701a      	strb	r2, [r3, #0]
	pdu_data_tx->nesn = conn->nesn;
    e362:	f894 20c0 	ldrb.w	r2, [r4, #192]	; 0xc0
    e366:	7819      	ldrb	r1, [r3, #0]
    e368:	f3c2 0240 	ubfx	r2, r2, #1, #1
    e36c:	f362 0182 	bfi	r1, r2, #2, #1
    e370:	7019      	strb	r1, [r3, #0]

	connection_configure(conn);
    e372:	4620      	mov	r0, r4
    e374:	f7fe fda6 	bl	cec4 <connection_configure>

	radio_tmr_tifs_set(RADIO_TIFS);
    e378:	2096      	movs	r0, #150	; 0x96
    e37a:	f7fb fd19 	bl	9db0 <radio_tmr_tifs_set>

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
	radio_switch_complete_and_rx(conn->phy_rx);
    e37e:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    e382:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    e386:	f7fb fc87 	bl	9c98 <radio_switch_complete_and_rx>
#else /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */
	radio_switch_complete_and_rx(0);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */

	tx_packet_set(conn, pdu_data_tx);
    e38a:	9903      	ldr	r1, [sp, #12]
    e38c:	4620      	mov	r0, r4
    e38e:	f7fd fa59 	bl	b844 <tx_packet_set>

	/* Setup Radio Channel */
	if (conn->data_chan_sel) {
    e392:	7f23      	ldrb	r3, [r4, #28]
    e394:	f013 0f40 	tst.w	r3, #64	; 0x40
    e398:	f104 0217 	add.w	r2, r4, #23
    e39c:	d008      	beq.n	e3b0 <event_master+0xdc>
#if defined(CONFIG_BLUETOOTH_CONTROLLER_CHAN_SEL_2)
		data_chan_use = chan_sel_2(conn->event_counter - 1,
    e39e:	8c60      	ldrh	r0, [r4, #34]	; 0x22
    e3a0:	8be1      	ldrh	r1, [r4, #30]
    e3a2:	3801      	subs	r0, #1
    e3a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    e3a8:	b280      	uxth	r0, r0
    e3aa:	f7fe fd47 	bl	ce3c <chan_sel_2>
    e3ae:	e01e      	b.n	e3ee <event_master+0x11a>
static u8_t chan_sel_1(u8_t *chan_use, u8_t hop, u16_t latency, u8_t *chan_map,
		       u8_t chan_count)
{
	u8_t chan_next;

	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    e3b0:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
    e3b2:	7fa1      	ldrb	r1, [r4, #30]
    e3b4:	7fe6      	ldrb	r6, [r4, #31]
    e3b6:	fb00 1101 	mla	r1, r0, r1, r1
    e3ba:	4431      	add	r1, r6
    e3bc:	2025      	movs	r0, #37	; 0x25
    e3be:	fb91 f6f0 	sdiv	r6, r1, r0
    e3c2:	fb00 1116 	mls	r1, r0, r6, r1
    e3c6:	b2c8      	uxtb	r0, r1
	*chan_use = chan_next;

	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    e3c8:	08c6      	lsrs	r6, r0, #3
		       u8_t chan_count)
{
	u8_t chan_next;

	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
	*chan_use = chan_next;
    e3ca:	77e0      	strb	r0, [r4, #31]

	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    e3cc:	5d96      	ldrb	r6, [r2, r6]
    e3ce:	f001 0107 	and.w	r1, r1, #7
    e3d2:	fa46 f101 	asr.w	r1, r6, r1
    e3d6:	07c9      	lsls	r1, r1, #31
	} else {
		data_chan_use = chan_sel_1(&conn->data_chan_use,
					   conn->data_chan_hop,
					   conn->latency_event,
					   &conn->data_chan_map[0],
					   conn->data_chan_count);
    e3d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	u8_t chan_next;

	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
	*chan_use = chan_next;

	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    e3dc:	d407      	bmi.n	e3ee <event_master+0x11a>
		u8_t chan_index;

		chan_index = chan_next % chan_count;
    e3de:	fbb0 f1f3 	udiv	r1, r0, r3
    e3e2:	fb03 0111 	mls	r1, r3, r1, r0
		chan_next = chan_sel_remap(chan_map, chan_index);
    e3e6:	b2c9      	uxtb	r1, r1
    e3e8:	4610      	mov	r0, r2
    e3ea:	f7fc fe57 	bl	b09c <chan_sel_remap>
					   conn->data_chan_hop,
					   conn->latency_event,
					   &conn->data_chan_map[0],
					   conn->data_chan_count);
	}
	chan_set(data_chan_use);
    e3ee:	f7fd ff0b 	bl	c208 <chan_set>
	     (conn->supervision_expire <= 6)) ||
	    ((conn->role.master.connect_expire != 0) &&
	     (conn->role.master.connect_expire <= 6)))
#endif
	{
		radio_tmr_start(1, ticks_at_expire +
    e3f2:	68aa      	ldr	r2, [r5, #8]
    e3f4:	f107 0109 	add.w	r1, r7, #9
    e3f8:	2001      	movs	r0, #1
    e3fa:	f7fb fcdf 	bl	9dbc <radio_tmr_start>
				TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US),
				_radio.remainder_anchor);
		radio_tmr_end_capture();
    e3fe:	f7fb fd85 	bl	9f0c <radio_tmr_end_capture>

#if (defined(CONFIG_BLUETOOTH_CONTROLLER_XTAL_ADVANCED) && \
     (RADIO_TICKER_PREEMPT_PART_US <= RADIO_TICKER_PREEMPT_PART_MIN_US))
	/* check if preempt to start has changed */
	if (0 !=
	    preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
    e402:	f894 1020 	ldrb.w	r1, [r4, #32]
    e406:	3107      	adds	r1, #7
    e408:	463a      	mov	r2, r7
    e40a:	b2c9      	uxtb	r1, r1
    e40c:	4620      	mov	r0, r4
    e40e:	f7fe fb4d 	bl	caac <preempt_calc>
#endif

#if (defined(CONFIG_BLUETOOTH_CONTROLLER_XTAL_ADVANCED) && \
     (RADIO_TICKER_PREEMPT_PART_US <= RADIO_TICKER_PREEMPT_PART_MIN_US))
	/* check if preempt to start has changed */
	if (0 !=
    e412:	4603      	mov	r3, r0
    e414:	b128      	cbz	r0, e422 <event_master+0x14e>
	    preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
				      conn->handle), ticks_at_expire)) {
		_radio.state = STATE_STOP;
    e416:	4b0c      	ldr	r3, [pc, #48]	; (e448 <event_master+0x174>)
    e418:	2204      	movs	r2, #4
    e41a:	741a      	strb	r2, [r3, #16]
		radio_disable();
    e41c:	f7fb fbe6 	bl	9bec <radio_disable>
    e420:	e00f      	b.n	e442 <event_master+0x16e>
	{
	/* Ticker Job Silence */
#if (RADIO_TICKER_USER_ID_WORKER_PRIO == RADIO_TICKER_USER_ID_JOB_PRIO)
		u32_t ticker_status;

		ticker_status =
    e422:	4a11      	ldr	r2, [pc, #68]	; (e468 <event_master+0x194>)
    e424:	4601      	mov	r1, r0
    e426:	f7fc fdb9 	bl	af9c <ticker_job_idle_get>
			ticker_job_idle_get(RADIO_TICKER_INSTANCE_ID_RADIO,
					    RADIO_TICKER_USER_ID_WORKER,
					    ticker_job_disable, NULL);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    e42a:	f030 0302 	bics.w	r3, r0, #2
    e42e:	d008      	beq.n	e442 <event_master+0x16e>
    e430:	4b06      	ldr	r3, [pc, #24]	; (e44c <event_master+0x178>)
    e432:	9301      	str	r3, [sp, #4]
    e434:	4b06      	ldr	r3, [pc, #24]	; (e450 <event_master+0x17c>)
    e436:	9300      	str	r3, [sp, #0]
    e438:	4a06      	ldr	r2, [pc, #24]	; (e454 <event_master+0x180>)
    e43a:	4b07      	ldr	r3, [pc, #28]	; (e458 <event_master+0x184>)
    e43c:	4907      	ldr	r1, [pc, #28]	; (e45c <event_master+0x188>)
    e43e:	480b      	ldr	r0, [pc, #44]	; (e46c <event_master+0x198>)
    e440:	e769      	b.n	e316 <event_master+0x42>
			  (ticker_status == TICKER_STATUS_BUSY));
#endif
	}

	DEBUG_RADIO_START_M(0);
}
    e442:	b005      	add	sp, #20
    e444:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e446:	bf00      	nop
    e448:	20001470 	.word	0x20001470
    e44c:	00013df4 	.word	0x00013df4
    e450:	00013df9 	.word	0x00013df9
    e454:	00013db4 	.word	0x00013db4
    e458:	000169b9 	.word	0x000169b9
    e45c:	00013dbb 	.word	0x00013dbb
    e460:	00015768 	.word	0x00015768
    e464:	00015820 	.word	0x00015820
    e468:	0000bb55 	.word	0x0000bb55
    e46c:	000154fb 	.word	0x000154fb

0000e470 <isr>:

	DEBUG_RADIO_CLOSE(0);
}

static void isr(void)
{
    e470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e474:	b08f      	sub	sp, #60	; 0x3c
	u8_t rssi_ready;

	DEBUG_RADIO_ISR(1);

	/* Read radio status and events */
	trx_done = radio_is_done();
    e476:	f7fb fbdd 	bl	9c34 <radio_is_done>
    e47a:	b2c7      	uxtb	r7, r0
	if (trx_done) {
    e47c:	b197      	cbz	r7, e4a4 <isr+0x34>
		 * and generate the profiling event at the end of the ISR.
		 */
		radio_tmr_sample();
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PROFILE_ISR */

		crc_ok = radio_crc_is_valid();
    e47e:	f7fb fbf9 	bl	9c74 <radio_crc_is_valid>
    e482:	fa5f f980 	uxtb.w	r9, r0
		devmatch_ok = radio_filter_has_match();
    e486:	f7fb fc6f 	bl	9d68 <radio_filter_has_match>
    e48a:	fa5f f880 	uxtb.w	r8, r0
		irkmatch_ok = radio_ar_has_match();
    e48e:	f7fb fe1d 	bl	a0cc <radio_ar_has_match>
    e492:	b2c5      	uxtb	r5, r0
		irkmatch_id = radio_ar_match_get();
    e494:	f7fb fe00 	bl	a098 <radio_ar_match_get>
    e498:	fa5f fa80 	uxtb.w	sl, r0
		rssi_ready = radio_rssi_is_ready();
    e49c:	f7fb fc2c 	bl	9cf8 <radio_rssi_is_ready>
    e4a0:	b2c6      	uxtb	r6, r0
    e4a2:	e005      	b.n	e4b0 <isr+0x40>
	} else {
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready = 0;
    e4a4:	463e      	mov	r6, r7
		irkmatch_id = 0xFF;
    e4a6:	f04f 0aff 	mov.w	sl, #255	; 0xff
		devmatch_ok = radio_filter_has_match();
		irkmatch_ok = radio_ar_has_match();
		irkmatch_id = radio_ar_match_get();
		rssi_ready = radio_rssi_is_ready();
	} else {
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready = 0;
    e4aa:	463d      	mov	r5, r7
    e4ac:	46b8      	mov	r8, r7
    e4ae:	46b9      	mov	r9, r7
	radio_tmr_status_reset();
	radio_filter_status_reset();
	radio_ar_status_reset();
	radio_rssi_status_reset();

	switch (_radio.state) {
    e4b0:	4cab      	ldr	r4, [pc, #684]	; (e760 <isr+0x2f0>)
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready = 0;
		irkmatch_id = 0xFF;
	}

	/* Clear radio status and events */
	radio_status_reset();
    e4b2:	f7fb fba5 	bl	9c00 <radio_status_reset>
	radio_tmr_status_reset();
    e4b6:	f7fb fc6d 	bl	9d94 <radio_tmr_status_reset>
	radio_filter_status_reset();
    e4ba:	f7fb fc4b 	bl	9d54 <radio_filter_status_reset>
	radio_ar_status_reset();
    e4be:	f7fb fdf1 	bl	a0a4 <radio_ar_status_reset>
	radio_rssi_status_reset();
    e4c2:	f7fb fc11 	bl	9ce8 <radio_rssi_status_reset>

	switch (_radio.state) {
    e4c6:	7c23      	ldrb	r3, [r4, #16]
    e4c8:	2b05      	cmp	r3, #5
    e4ca:	f201 8585 	bhi.w	ffd8 <isr+0x1b68>
    e4ce:	e8df f013 	tbh	[pc, r3, lsl #1]
    e4d2:	0dce      	.short	0x0dce
    e4d4:	000600ae 	.word	0x000600ae
    e4d8:	0b810b81 	.word	0x0b810b81
    e4dc:	0b81      	.short	0x0b81

static inline void isr_radio_state_tx(void)
{
	u32_t hcto;

	_radio.state = STATE_RX;
    e4de:	2301      	movs	r3, #1
    e4e0:	7423      	strb	r3, [r4, #16]

	hcto = radio_tmr_end_get() + RADIO_TIFS + 4 + 1; /* 1us, end jitter */
    e4e2:	f7fb fd25 	bl	9f30 <radio_tmr_end_get>
    e4e6:	4605      	mov	r5, r0

	radio_tmr_tifs_set(RADIO_TIFS);
    e4e8:	2096      	movs	r0, #150	; 0x96
    e4ea:	f7fb fc61 	bl	9db0 <radio_tmr_tifs_set>

	switch (_radio.role) {
    e4ee:	7be3      	ldrb	r3, [r4, #15]
    e4f0:	3b01      	subs	r3, #1
    e4f2:	2b03      	cmp	r3, #3
    e4f4:	f200 8094 	bhi.w	e620 <isr+0x1b0>
    e4f8:	e8df f003 	tbb	[pc, r3]
    e4fc:	49492802 	.word	0x49492802
	case ROLE_ADV:
		radio_switch_complete_and_tx(0, 0);
    e500:	2100      	movs	r1, #0
    e502:	4608      	mov	r0, r1
    e504:	f7fb fbd0 	bl	9ca8 <radio_switch_complete_and_tx>
		radio_pkt_rx_set(radio_pkt_scratch_get());
    e508:	f7fb fbc2 	bl	9c90 <radio_pkt_scratch_get>
    e50c:	f7fb fb4a 	bl	9ba4 <radio_pkt_rx_set>

		/* assert if radio packet ptr is not set and radio started rx */
		LL_ASSERT(!radio_is_ready());
    e510:	f7fb fb86 	bl	9c20 <radio_is_ready>
    e514:	2800      	cmp	r0, #0
    e516:	d152      	bne.n	e5be <isr+0x14e>

		if (_radio.advertiser.filter_policy && _radio.nirk) {
    e518:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
    e51c:	4990      	ldr	r1, [pc, #576]	; (e760 <isr+0x2f0>)
    e51e:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    e522:	d004      	beq.n	e52e <isr+0xbe>
    e524:	7c48      	ldrb	r0, [r1, #17]
    e526:	b110      	cbz	r0, e52e <isr+0xbe>
			radio_ar_configure(_radio.nirk, _radio.irk);
    e528:	3112      	adds	r1, #18
    e52a:	f7fb fd8f 	bl	a04c <radio_ar_configure>
		}

		hcto += radio_rx_chain_delay_get(0, 0);
    e52e:	2100      	movs	r1, #0
    e530:	4608      	mov	r0, r1
    e532:	f7fb fb49 	bl	9bc8 <radio_rx_chain_delay_get>
		hcto += addr_us_get(0);
    e536:	35c3      	adds	r5, #195	; 0xc3
		hcto -= radio_tx_chain_delay_get(0, 0);
    e538:	2100      	movs	r1, #0
		if (_radio.advertiser.filter_policy && _radio.nirk) {
			radio_ar_configure(_radio.nirk, _radio.irk);
		}

		hcto += radio_rx_chain_delay_get(0, 0);
		hcto += addr_us_get(0);
    e53a:	4405      	add	r5, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    e53c:	4608      	mov	r0, r1
    e53e:	f7fb fb3f 	bl	9bc0 <radio_tx_chain_delay_get>

		radio_tmr_hcto_configure(hcto);
    e542:	1a28      	subs	r0, r5, r0
    e544:	f7fb fc9a 	bl	9e7c <radio_tmr_hcto_configure>
    e548:	f001 bb5a 	b.w	fc00 <isr+0x1790>
#endif /* CONFIG_BLUETOOTH_CONTROLLER_SCAN_REQ_RSSI */

		break;

	case ROLE_SCAN:
		radio_switch_complete_and_tx(0, 0);
    e54c:	2100      	movs	r1, #0
    e54e:	4608      	mov	r0, r1
    e550:	f7fb fbaa 	bl	9ca8 <radio_switch_complete_and_tx>
		radio_pkt_rx_set(_radio.packet_rx[_radio.packet_rx_last]->
    e554:	f894 21bd 	ldrb.w	r2, [r4, #445]	; 0x1bd
    e558:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    e55c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    e560:	3008      	adds	r0, #8
    e562:	f7fb fb1f 	bl	9ba4 <radio_pkt_rx_set>
				    pdu_data);

		/* assert if radio packet ptr is not set and radio started rx */
		LL_ASSERT(!radio_is_ready());
    e566:	f7fb fb5b 	bl	9c20 <radio_is_ready>
    e56a:	4604      	mov	r4, r0
    e56c:	bb38      	cbnz	r0, e5be <isr+0x14e>

		hcto += radio_rx_chain_delay_get(0, 0);
    e56e:	4601      	mov	r1, r0
    e570:	f7fb fb2a 	bl	9bc8 <radio_rx_chain_delay_get>
		hcto += addr_us_get(0);
    e574:	35c3      	adds	r5, #195	; 0xc3
    e576:	4405      	add	r5, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    e578:	4621      	mov	r1, r4
    e57a:	4620      	mov	r0, r4
    e57c:	f7fb fb20 	bl	9bc0 <radio_tx_chain_delay_get>

		radio_tmr_hcto_configure(hcto);
    e580:	1a28      	subs	r0, r5, r0
    e582:	f7fb fc7b 	bl	9e7c <radio_tmr_hcto_configure>
		radio_rssi_measure();
    e586:	f7fb fb9f 	bl	9cc8 <radio_rssi_measure>
    e58a:	f001 bd70 	b.w	1006e <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x6f>
		/* fall thru */

	case ROLE_SLAVE:

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
		radio_switch_complete_and_tx(_radio.conn_curr->phy_tx,
    e58e:	f8d4 3190 	ldr.w	r3, [r4, #400]	; 0x190
    e592:	4e73      	ldr	r6, [pc, #460]	; (e760 <isr+0x2f0>)
					     _radio.conn_curr->phy_flags);
    e594:	f893 0032 	ldrb.w	r0, [r3, #50]	; 0x32
		/* fall thru */

	case ROLE_SLAVE:

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
		radio_switch_complete_and_tx(_radio.conn_curr->phy_tx,
    e598:	09c1      	lsrs	r1, r0, #7
    e59a:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    e59e:	f7fb fb83 	bl	9ca8 <radio_switch_complete_and_tx>
#else /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */
		radio_switch_complete_and_tx(0, 0);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */

		rx_packet_set(_radio.conn_curr, (struct pdu_data *)_radio.
			      packet_rx[_radio.packet_rx_last]->pdu_data);
    e5a2:	f894 21bd 	ldrb.w	r2, [r4, #445]	; 0x1bd
    e5a6:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
					     _radio.conn_curr->phy_flags);
#else /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */
		radio_switch_complete_and_tx(0, 0);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */

		rx_packet_set(_radio.conn_curr, (struct pdu_data *)_radio.
    e5aa:	f8d4 0190 	ldr.w	r0, [r4, #400]	; 0x190
    e5ae:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    e5b2:	3108      	adds	r1, #8
    e5b4:	f7fd f892 	bl	b6dc <rx_packet_set>
			      packet_rx[_radio.packet_rx_last]->pdu_data);

		/* assert if radio packet ptr is not set and radio started rx */
		LL_ASSERT(!radio_is_ready());
    e5b8:	f7fb fb32 	bl	9c20 <radio_is_ready>
    e5bc:	b130      	cbz	r0, e5cc <isr+0x15c>
    e5be:	4b69      	ldr	r3, [pc, #420]	; (e764 <isr+0x2f4>)
    e5c0:	9301      	str	r3, [sp, #4]
    e5c2:	4b69      	ldr	r3, [pc, #420]	; (e768 <isr+0x2f8>)
    e5c4:	9300      	str	r3, [sp, #0]
    e5c6:	4b69      	ldr	r3, [pc, #420]	; (e76c <isr+0x2fc>)
    e5c8:	f000 bca0 	b.w	ef0c <isr+0xa9c>

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
		hcto += radio_rx_chain_delay_get(_radio.conn_curr->phy_tx,
    e5cc:	f8d6 3190 	ldr.w	r3, [r6, #400]	; 0x190
						 _radio.conn_curr->phy_flags);
    e5d0:	f893 0032 	ldrb.w	r0, [r3, #50]	; 0x32

		/* assert if radio packet ptr is not set and radio started rx */
		LL_ASSERT(!radio_is_ready());

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
		hcto += radio_rx_chain_delay_get(_radio.conn_curr->phy_tx,
    e5d4:	09c1      	lsrs	r1, r0, #7
    e5d6:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    e5da:	f7fb faf5 	bl	9bc8 <radio_rx_chain_delay_get>
						 _radio.conn_curr->phy_flags);
		hcto += addr_us_get(_radio.conn_curr->phy_rx);
    e5de:	f8d6 3190 	ldr.w	r3, [r6, #400]	; 0x190
{
	u32_t hcto;

	_radio.state = STATE_RX;

	hcto = radio_tmr_end_get() + RADIO_TIFS + 4 + 1; /* 1us, end jitter */
    e5e2:	359b      	adds	r5, #155	; 0x9b

		/* assert if radio packet ptr is not set and radio started rx */
		LL_ASSERT(!radio_is_ready());

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
		hcto += radio_rx_chain_delay_get(_radio.conn_curr->phy_tx,
    e5e4:	4405      	add	r5, r0
						 _radio.conn_curr->phy_flags);
		hcto += addr_us_get(_radio.conn_curr->phy_rx);
    e5e6:	f893 0033 	ldrb.w	r0, [r3, #51]	; 0x33
    e5ea:	f3c0 00c2 	ubfx	r0, r0, #3, #3
	packet_rx_allocate(0xFF);
}

static inline u32_t addr_us_get(u8_t phy)
{
	switch (phy) {
    e5ee:	2802      	cmp	r0, #2
    e5f0:	d005      	beq.n	e5fe <isr+0x18e>
	default:
	case BIT(0):
		return 40;
    e5f2:	2804      	cmp	r0, #4
    e5f4:	bf0c      	ite	eq
    e5f6:	f44f 72bc 	moveq.w	r2, #376	; 0x178
    e5fa:	2228      	movne	r2, #40	; 0x28
    e5fc:	e000      	b.n	e600 <isr+0x190>
	case BIT(1):
		return 24;
    e5fe:	2218      	movs	r2, #24
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
		hcto += radio_rx_chain_delay_get(_radio.conn_curr->phy_tx,
						 _radio.conn_curr->phy_flags);
		hcto += addr_us_get(_radio.conn_curr->phy_rx);
		hcto -= radio_tx_chain_delay_get(_radio.conn_curr->phy_rx,
						 _radio.conn_curr->phy_flags);
    e600:	f893 1032 	ldrb.w	r1, [r3, #50]	; 0x32

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
		hcto += radio_rx_chain_delay_get(_radio.conn_curr->phy_tx,
						 _radio.conn_curr->phy_flags);
		hcto += addr_us_get(_radio.conn_curr->phy_rx);
		hcto -= radio_tx_chain_delay_get(_radio.conn_curr->phy_rx,
    e604:	09c9      	lsrs	r1, r1, #7
		LL_ASSERT(!radio_is_ready());

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
		hcto += radio_rx_chain_delay_get(_radio.conn_curr->phy_tx,
						 _radio.conn_curr->phy_flags);
		hcto += addr_us_get(_radio.conn_curr->phy_rx);
    e606:	4415      	add	r5, r2
		hcto -= radio_tx_chain_delay_get(_radio.conn_curr->phy_rx,
    e608:	f7fb fada 	bl	9bc0 <radio_tx_chain_delay_get>
		hcto += radio_rx_chain_delay_get(0, 0);
		hcto += addr_us_get(0);
		hcto -= radio_tx_chain_delay_get(0, 0);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */

		radio_tmr_hcto_configure(hcto);
    e60c:	1a28      	subs	r0, r5, r0
    e60e:	f7fb fc35 	bl	9e7c <radio_tmr_hcto_configure>
		radio_tmr_end_capture();
    e612:	f7fb fc7b 	bl	9f0c <radio_tmr_end_capture>
		/* TODO: use timebox for tx enqueue (instead of 1 packet
		 * that is routed, which may not be for the current connection)
		 * try to route as much tx packet in queue into corresponding
		 * connection's tx list.
		 */
		packet_tx_enqueue(1);
    e616:	2001      	movs	r0, #1
    e618:	f7fd fc28 	bl	be6c <packet_tx_enqueue>
    e61c:	f001 bd27 	b.w	1006e <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x6f>

		break;

	case ROLE_NONE:
	default:
		LL_ASSERT(0);
    e620:	4b50      	ldr	r3, [pc, #320]	; (e764 <isr+0x2f4>)
    e622:	9301      	str	r3, [sp, #4]
    e624:	4b50      	ldr	r3, [pc, #320]	; (e768 <isr+0x2f8>)
    e626:	9300      	str	r3, [sp, #0]
    e628:	4b50      	ldr	r3, [pc, #320]	; (e76c <isr+0x2fc>)
    e62a:	f001 bcda 	b.w	ffe2 <isr+0x1b72>
				      u8_t devmatch_ok, u8_t irkmatch_ok,
				      u8_t irkmatch_id, u8_t rssi_ready)
{
	u32_t err;

	if (!((trx_done) || ((SILENT_CONNECTION) &&
    e62e:	b92f      	cbnz	r7, e63c <isr+0x1cc>
			     (_radio.role == ROLE_SLAVE)))) {
		_radio.state = STATE_CLOSE;
    e630:	2303      	movs	r3, #3
    e632:	7423      	strb	r3, [r4, #16]
		radio_disable();
    e634:	f7fb fada 	bl	9bec <radio_disable>
    e638:	f001 bd19 	b.w	1006e <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x6f>

		return;
	}

	switch (_radio.role) {
    e63c:	7be3      	ldrb	r3, [r4, #15]
    e63e:	3b01      	subs	r3, #1
    e640:	2b03      	cmp	r3, #3
    e642:	f201 82c1 	bhi.w	fbc8 <isr+0x1758>
    e646:	e8df f013 	tbh	[pc, r3, lsl #1]
    e64a:	0004      	.short	0x0004
    e64c:	02680248 	.word	0x02680248
    e650:	0268      	.short	0x0268
	case ROLE_ADV:
		if (crc_ok) {
    e652:	f1b9 0f00 	cmp.w	r9, #0
    e656:	d0eb      	beq.n	e630 <isr+0x1c0>
			       u8_t irkmatch_id, u8_t rssi_ready)
{
	struct pdu_adv *pdu_adv, *_pdu_adv;
	struct radio_pdu_node_rx *radio_pdu_node_rx;

	pdu_adv = (struct pdu_adv *)radio_pkt_scratch_get();
    e658:	f7fb fb1a 	bl	9c90 <radio_pkt_scratch_get>
	_pdu_adv = (struct pdu_adv *)&_radio.advertiser.adv_data.data
		[_radio.advertiser.adv_data.first][0];

	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
    e65c:	7803      	ldrb	r3, [r0, #0]
    e65e:	f003 020f 	and.w	r2, r3, #15
    e662:	2a03      	cmp	r2, #3
			       u8_t irkmatch_id, u8_t rssi_ready)
{
	struct pdu_adv *pdu_adv, *_pdu_adv;
	struct radio_pdu_node_rx *radio_pdu_node_rx;

	pdu_adv = (struct pdu_adv *)radio_pkt_scratch_get();
    e664:	4607      	mov	r7, r0
	_pdu_adv = (struct pdu_adv *)&_radio.advertiser.adv_data.data
		[_radio.advertiser.adv_data.first][0];

	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
    e666:	d13b      	bne.n	e6e0 <isr+0x270>
    e668:	7843      	ldrb	r3, [r0, #1]
    e66a:	2b0c      	cmp	r3, #12
    e66c:	d1e0      	bne.n	e630 <isr+0x1c0>
	    (pdu_adv->len == sizeof(struct pdu_adv_payload_scan_req)) &&
	    (((_radio.advertiser.filter_policy & 0x01) == 0) ||
    e66e:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
	     (devmatch_ok) || (irkmatch_ok)) &&
    e672:	0658      	lsls	r0, r3, #25
    e674:	d504      	bpl.n	e680 <isr+0x210>
	_pdu_adv = (struct pdu_adv *)&_radio.advertiser.adv_data.data
		[_radio.advertiser.adv_data.first][0];

	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
	    (pdu_adv->len == sizeof(struct pdu_adv_payload_scan_req)) &&
	    (((_radio.advertiser.filter_policy & 0x01) == 0) ||
    e676:	f1b8 0f00 	cmp.w	r8, #0
    e67a:	d101      	bne.n	e680 <isr+0x210>
	     (devmatch_ok) || (irkmatch_ok)) &&
    e67c:	2d00      	cmp	r5, #0
    e67e:	d0d7      	beq.n	e630 <isr+0x1c0>
{
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	struct pdu_adv *pdu_adv;
	u8_t pdu_len;

	radio_pdu_node_rx = packet_rx_reserve_get(3);
    e680:	2003      	movs	r0, #3
    e682:	f7fc fd3d 	bl	b100 <packet_rx_reserve_get>
	if (radio_pdu_node_rx == 0) {
    e686:	2800      	cmp	r0, #0
    e688:	d0d2      	beq.n	e630 <isr+0x1c0>
		return 1;
	}

	/* Prepare the report (scan req) */
	radio_pdu_node_rx->hdr.handle = 0xffff;
    e68a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    e68e:	80c3      	strh	r3, [r0, #6]
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_SCAN_REQ;
    e690:	2305      	movs	r3, #5
    e692:	7103      	strb	r3, [r0, #4]
	/* Make a copy of PDU into Rx node (as the received PDU is in the
	 * scratch buffer), and save the RSSI value.
	 */
	pdu_adv = (struct pdu_adv *)radio_pdu_node_rx->pdu_data;
	pdu_len = offsetof(struct pdu_adv, payload) + pdu_adv_rx->len;
	memcpy(pdu_adv, pdu_adv_rx, pdu_len);
    e694:	f897 8001 	ldrb.w	r8, [r7, #1]
    e698:	f108 0802 	add.w	r8, r8, #2
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_SCAN_REQ;

	/* Make a copy of PDU into Rx node (as the received PDU is in the
	 * scratch buffer), and save the RSSI value.
	 */
	pdu_adv = (struct pdu_adv *)radio_pdu_node_rx->pdu_data;
    e69c:	f100 0508 	add.w	r5, r0, #8
	pdu_len = offsetof(struct pdu_adv, payload) + pdu_adv_rx->len;
	memcpy(pdu_adv, pdu_adv_rx, pdu_len);
    e6a0:	fa5f f888 	uxtb.w	r8, r8
    e6a4:	4642      	mov	r2, r8
    e6a6:	4639      	mov	r1, r7
    e6a8:	4628      	mov	r0, r5
    e6aa:	f7f2 fcf2 	bl	1092 <memcpy>
	((u8_t *)pdu_adv)[pdu_len] =
    e6ae:	b126      	cbz	r6, e6ba <isr+0x24a>
		(rssi_ready) ? (radio_rssi_get() & 0x7f) : 0x7f;
    e6b0:	f7fb fb14 	bl	9cdc <radio_rssi_get>
	 * scratch buffer), and save the RSSI value.
	 */
	pdu_adv = (struct pdu_adv *)radio_pdu_node_rx->pdu_data;
	pdu_len = offsetof(struct pdu_adv, payload) + pdu_adv_rx->len;
	memcpy(pdu_adv, pdu_adv_rx, pdu_len);
	((u8_t *)pdu_adv)[pdu_len] =
    e6b4:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    e6b8:	e000      	b.n	e6bc <isr+0x24c>
    e6ba:	207f      	movs	r0, #127	; 0x7f
    e6bc:	f805 0008 	strb.w	r0, [r5, r8]
		(rssi_ready) ? (radio_rssi_get() & 0x7f) : 0x7f;

	packet_rx_enqueue();
    e6c0:	f7fd f8ec 	bl	b89c <packet_rx_enqueue>
			/* Scan Response will not be transmitted */
			return err;
		}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_SCAN_REQ_NOTIFY */

		_radio.state = STATE_CLOSE;
    e6c4:	2303      	movs	r3, #3
    e6c6:	7423      	strb	r3, [r4, #16]

		radio_switch_complete_and_disable();
    e6c8:	f7fb faf6 	bl	9cb8 <radio_switch_complete_and_disable>

		radio_pkt_tx_set(&_radio.advertiser.scan_data.
    e6cc:	f894 3144 	ldrb.w	r3, [r4, #324]	; 0x144
    e6d0:	2027      	movs	r0, #39	; 0x27
    e6d2:	fb00 4003 	mla	r0, r0, r3, r4
    e6d6:	30f6      	adds	r0, #246	; 0xf6
    e6d8:	f7fb fa6a 	bl	9bb0 <radio_pkt_tx_set>
    e6dc:	f001 bcc7 	b.w	1006e <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x6f>
		     data[_radio.advertiser.scan_data.first][0]);

		return 0;
	} else if ((pdu_adv->type == PDU_ADV_TYPE_CONNECT_IND) &&
    e6e0:	2a05      	cmp	r2, #5
    e6e2:	d1a5      	bne.n	e630 <isr+0x1c0>
    e6e4:	7842      	ldrb	r2, [r0, #1]
    e6e6:	2a22      	cmp	r2, #34	; 0x22
    e6e8:	d1a2      	bne.n	e630 <isr+0x1c0>
		   (pdu_adv->len == sizeof(struct pdu_adv_payload_connect_ind)) &&
		   (((_radio.advertiser.filter_policy & 0x02) == 0) ||
    e6ea:	f894 20a5 	ldrb.w	r2, [r4, #165]	; 0xa5
		radio_pkt_tx_set(&_radio.advertiser.scan_data.
		     data[_radio.advertiser.scan_data.first][0]);

		return 0;
	} else if ((pdu_adv->type == PDU_ADV_TYPE_CONNECT_IND) &&
		   (pdu_adv->len == sizeof(struct pdu_adv_payload_connect_ind)) &&
    e6ee:	09d2      	lsrs	r2, r2, #7
    e6f0:	d004      	beq.n	e6fc <isr+0x28c>
		   (((_radio.advertiser.filter_policy & 0x02) == 0) ||
    e6f2:	f1b8 0f00 	cmp.w	r8, #0
    e6f6:	d101      	bne.n	e6fc <isr+0x28c>
		    (devmatch_ok) || (irkmatch_ok)) &&
    e6f8:	2d00      	cmp	r5, #0
    e6fa:	d099      	beq.n	e630 <isr+0x1c0>
{
	struct pdu_adv *pdu_adv, *_pdu_adv;
	struct radio_pdu_node_rx *radio_pdu_node_rx;

	pdu_adv = (struct pdu_adv *)radio_pkt_scratch_get();
	_pdu_adv = (struct pdu_adv *)&_radio.advertiser.adv_data.data
    e6fc:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
    e700:	f04f 0927 	mov.w	r9, #39	; 0x27
    e704:	fb09 4902 	mla	r9, r9, r2, r4
    e708:	f109 09a0 	add.w	r9, r9, #160	; 0xa0

		return 0;
	} else if ((pdu_adv->type == PDU_ADV_TYPE_CONNECT_IND) &&
		   (pdu_adv->len == sizeof(struct pdu_adv_payload_connect_ind)) &&
		   (((_radio.advertiser.filter_policy & 0x02) == 0) ||
		    (devmatch_ok) || (irkmatch_ok)) &&
    e70c:	f899 2006 	ldrb.w	r2, [r9, #6]
    e710:	f002 010f 	and.w	r1, r2, #15
    e714:	2901      	cmp	r1, #1
    e716:	d004      	beq.n	e722 <isr+0x2b2>
		     !memcmp(_pdu_adv->payload.direct_ind.adv_addr,
			     pdu_adv->payload.connect_ind.adv_addr,
			     BDADDR_SIZE) &&
		     !memcmp(_pdu_adv->payload.direct_ind.tgt_addr,
			     pdu_adv->payload.connect_ind.init_addr,
			     BDADDR_SIZE))) &&
    e718:	f894 21fe 	ldrb.w	r2, [r4, #510]	; 0x1fe
		   ((_radio.fc_ena == 0) || (_radio.fc_req == _radio.fc_ack)) &&
    e71c:	4b10      	ldr	r3, [pc, #64]	; (e760 <isr+0x2f0>)
		     !memcmp(_pdu_adv->payload.direct_ind.adv_addr,
			     pdu_adv->payload.connect_ind.adv_addr,
			     BDADDR_SIZE) &&
		     !memcmp(_pdu_adv->payload.direct_ind.tgt_addr,
			     pdu_adv->payload.connect_ind.init_addr,
			     BDADDR_SIZE))) &&
    e71e:	b372      	cbz	r2, e77e <isr+0x30e>
    e720:	e026      	b.n	e770 <isr+0x300>
		return 0;
	} else if ((pdu_adv->type == PDU_ADV_TYPE_CONNECT_IND) &&
		   (pdu_adv->len == sizeof(struct pdu_adv_payload_connect_ind)) &&
		   (((_radio.advertiser.filter_policy & 0x02) == 0) ||
		    (devmatch_ok) || (irkmatch_ok)) &&
		   ((_pdu_adv->type != PDU_ADV_TYPE_DIRECT_IND) ||
    e722:	f3c2 1180 	ubfx	r1, r2, #6, #1
    e726:	ebb1 1fd3 	cmp.w	r1, r3, lsr #7
    e72a:	d181      	bne.n	e630 <isr+0x1c0>
		    ((_pdu_adv->tx_addr == pdu_adv->rx_addr) &&
    e72c:	f3c3 1380 	ubfx	r3, r3, #6, #1
    e730:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    e734:	f47f af7c 	bne.w	e630 <isr+0x1c0>
		     (_pdu_adv->rx_addr == pdu_adv->tx_addr) &&
		     !memcmp(_pdu_adv->payload.direct_ind.adv_addr,
    e738:	2206      	movs	r2, #6
    e73a:	f107 0108 	add.w	r1, r7, #8
    e73e:	f109 0008 	add.w	r0, r9, #8
    e742:	f7f2 fc76 	bl	1032 <memcmp>
		   (pdu_adv->len == sizeof(struct pdu_adv_payload_connect_ind)) &&
		   (((_radio.advertiser.filter_policy & 0x02) == 0) ||
		    (devmatch_ok) || (irkmatch_ok)) &&
		   ((_pdu_adv->type != PDU_ADV_TYPE_DIRECT_IND) ||
		    ((_pdu_adv->tx_addr == pdu_adv->rx_addr) &&
		     (_pdu_adv->rx_addr == pdu_adv->tx_addr) &&
    e746:	2800      	cmp	r0, #0
    e748:	f47f af72 	bne.w	e630 <isr+0x1c0>
		     !memcmp(_pdu_adv->payload.direct_ind.adv_addr,
			     pdu_adv->payload.connect_ind.adv_addr,
			     BDADDR_SIZE) &&
		     !memcmp(_pdu_adv->payload.direct_ind.tgt_addr,
    e74c:	2206      	movs	r2, #6
    e74e:	1cb9      	adds	r1, r7, #2
    e750:	f109 000e 	add.w	r0, r9, #14
    e754:	f7f2 fc6d 	bl	1032 <memcmp>
		   ((_pdu_adv->type != PDU_ADV_TYPE_DIRECT_IND) ||
		    ((_pdu_adv->tx_addr == pdu_adv->rx_addr) &&
		     (_pdu_adv->rx_addr == pdu_adv->tx_addr) &&
		     !memcmp(_pdu_adv->payload.direct_ind.adv_addr,
			     pdu_adv->payload.connect_ind.adv_addr,
			     BDADDR_SIZE) &&
    e758:	2800      	cmp	r0, #0
    e75a:	d0dd      	beq.n	e718 <isr+0x2a8>
    e75c:	e768      	b.n	e630 <isr+0x1c0>
    e75e:	bf00      	nop
    e760:	20001470 	.word	0x20001470
    e764:	00013df4 	.word	0x00013df4
    e768:	00013df9 	.word	0x00013df9
    e76c:	00016b56 	.word	0x00016b56
		     !memcmp(_pdu_adv->payload.direct_ind.tgt_addr,
			     pdu_adv->payload.connect_ind.init_addr,
			     BDADDR_SIZE))) &&
		   ((_radio.fc_ena == 0) || (_radio.fc_req == _radio.fc_ack)) &&
    e770:	f893 21fc 	ldrb.w	r2, [r3, #508]	; 0x1fc
    e774:	f893 31fd 	ldrb.w	r3, [r3, #509]	; 0x1fd
    e778:	4293      	cmp	r3, r2
    e77a:	f47f af59 	bne.w	e630 <isr+0x1c0>
    e77e:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
		   (_radio.advertiser.conn)) {
    e782:	4e68      	ldr	r6, [pc, #416]	; (e924 <isr+0x4b4>)
			     pdu_adv->payload.connect_ind.adv_addr,
			     BDADDR_SIZE) &&
		     !memcmp(_pdu_adv->payload.direct_ind.tgt_addr,
			     pdu_adv->payload.connect_ind.init_addr,
			     BDADDR_SIZE))) &&
		   ((_radio.fc_ena == 0) || (_radio.fc_req == _radio.fc_ack)) &&
    e784:	2b00      	cmp	r3, #0
    e786:	f43f af53 	beq.w	e630 <isr+0x1c0>
		u32_t conn_offset_us;
		u32_t rx_ready_delay;
		u32_t ticker_status;

		if (IS_ENABLED(CONFIG_BLUETOOTH_CONTROLLER_CHAN_SEL_2)) {
			radio_pdu_node_rx = packet_rx_reserve_get(4);
    e78a:	2004      	movs	r0, #4
    e78c:	f7fc fcb8 	bl	b100 <packet_rx_reserve_get>
		} else {
			radio_pdu_node_rx = packet_rx_reserve_get(3);
		}

		if (radio_pdu_node_rx == 0) {
    e790:	4680      	mov	r8, r0
    e792:	2800      	cmp	r0, #0
    e794:	f43f af4c 	beq.w	e630 <isr+0x1c0>
			return 1;
		}

		_radio.state = STATE_STOP;
    e798:	f04f 0b04 	mov.w	fp, #4
    e79c:	f886 b010 	strb.w	fp, [r6, #16]
		radio_disable();
    e7a0:	f7fb fa24 	bl	9bec <radio_disable>

		/* acquire the slave context from advertiser */
		conn = _radio.advertiser.conn;
    e7a4:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
		_radio.advertiser.conn = NULL;

		/* Populate the slave context */
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    e7a8:	f8d6 1184 	ldr.w	r1, [r6, #388]	; 0x184
		_radio.state = STATE_STOP;
		radio_disable();

		/* acquire the slave context from advertiser */
		conn = _radio.advertiser.conn;
		_radio.advertiser.conn = NULL;
    e7ac:	2300      	movs	r3, #0

		/* Populate the slave context */
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    e7ae:	f44f 728c 	mov.w	r2, #280	; 0x118
    e7b2:	4628      	mov	r0, r5
		_radio.state = STATE_STOP;
		radio_disable();

		/* acquire the slave context from advertiser */
		conn = _radio.advertiser.conn;
		_radio.advertiser.conn = NULL;
    e7b4:	f8c6 3148 	str.w	r3, [r6, #328]	; 0x148

		/* Populate the slave context */
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    e7b8:	f7fb f881 	bl	98be <mem_index_get>
			CONNECTION_T_SIZE);
		memcpy(&conn->crc_init[0],
    e7bc:	2203      	movs	r2, #3
		/* acquire the slave context from advertiser */
		conn = _radio.advertiser.conn;
		_radio.advertiser.conn = NULL;

		/* Populate the slave context */
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    e7be:	8428      	strh	r0, [r5, #32]
			CONNECTION_T_SIZE);
		memcpy(&conn->crc_init[0],
    e7c0:	f107 0112 	add.w	r1, r7, #18
    e7c4:	f105 0014 	add.w	r0, r5, #20
    e7c8:	f7f2 fc63 	bl	1092 <memcpy>
		       &pdu_adv->payload.connect_ind.lldata.crc_init[0],
		       3);
		memcpy(&conn->access_addr[0],
    e7cc:	f105 0310 	add.w	r3, r5, #16
    e7d0:	4618      	mov	r0, r3
    e7d2:	465a      	mov	r2, fp
		       &pdu_adv->payload.connect_ind.lldata.access_addr[0],
		       4);
		memcpy(&conn->data_chan_map[0],
    e7d4:	f105 0617 	add.w	r6, r5, #23
		conn->handle = mem_index_get(conn, _radio.conn_pool,
			CONNECTION_T_SIZE);
		memcpy(&conn->crc_init[0],
		       &pdu_adv->payload.connect_ind.lldata.crc_init[0],
		       3);
		memcpy(&conn->access_addr[0],
    e7d8:	f107 010e 	add.w	r1, r7, #14
    e7dc:	930a      	str	r3, [sp, #40]	; 0x28
    e7de:	f7f2 fc58 	bl	1092 <memcpy>
		       &pdu_adv->payload.connect_ind.lldata.access_addr[0],
		       4);
		memcpy(&conn->data_chan_map[0],
    e7e2:	2205      	movs	r2, #5
    e7e4:	f107 011e 	add.w	r1, r7, #30
    e7e8:	4630      	mov	r0, r6
    e7ea:	f7f2 fc52 	bl	1092 <memcpy>
		       &pdu_adv->payload.connect_ind.lldata.chan_map[0],
		       sizeof(conn->data_chan_map));
		conn->data_chan_count =
			util_ones_count_get(&conn->data_chan_map[0],
    e7ee:	2105      	movs	r1, #5
    e7f0:	4630      	mov	r0, r6
    e7f2:	f7fb f8a0 	bl	9936 <util_ones_count_get>
		       &pdu_adv->payload.connect_ind.lldata.access_addr[0],
		       4);
		memcpy(&conn->data_chan_map[0],
		       &pdu_adv->payload.connect_ind.lldata.chan_map[0],
		       sizeof(conn->data_chan_map));
		conn->data_chan_count =
    e7f6:	7f2a      	ldrb	r2, [r5, #28]
		conn->conn_interval =
			pdu_adv->payload.connect_ind.lldata.interval;
		conn_interval_us =
			pdu_adv->payload.connect_ind.lldata.interval * 1250;
		conn->latency = pdu_adv->payload.connect_ind.lldata.latency;
		memcpy((void *)&conn->role.slave.force, &conn->access_addr[0],
    e7f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
		       &pdu_adv->payload.connect_ind.lldata.access_addr[0],
		       4);
		memcpy(&conn->data_chan_map[0],
		       &pdu_adv->payload.connect_ind.lldata.chan_map[0],
		       sizeof(conn->data_chan_map));
		conn->data_chan_count =
    e7fa:	f360 0205 	bfi	r2, r0, #0, #6
    e7fe:	772a      	strb	r2, [r5, #28]
			util_ones_count_get(&conn->data_chan_map[0],
					    sizeof(conn->data_chan_map));
		conn->data_chan_hop = pdu_adv->payload.connect_ind.lldata.hop;
    e800:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
    e804:	f3c2 0204 	ubfx	r2, r2, #0, #5
    e808:	77aa      	strb	r2, [r5, #30]
		conn->conn_interval =
			pdu_adv->payload.connect_ind.lldata.interval;
    e80a:	8b3a      	ldrh	r2, [r7, #24]
		       sizeof(conn->data_chan_map));
		conn->data_chan_count =
			util_ones_count_get(&conn->data_chan_map[0],
					    sizeof(conn->data_chan_map));
		conn->data_chan_hop = pdu_adv->payload.connect_ind.lldata.hop;
		conn->conn_interval =
    e80c:	84aa      	strh	r2, [r5, #36]	; 0x24
			pdu_adv->payload.connect_ind.lldata.interval;
		conn_interval_us =
    e80e:	8b3a      	ldrh	r2, [r7, #24]
    e810:	f240 46e2 	movw	r6, #1250	; 0x4e2
    e814:	4356      	muls	r6, r2
			pdu_adv->payload.connect_ind.lldata.interval * 1250;
		conn->latency = pdu_adv->payload.connect_ind.lldata.latency;
    e816:	8b7a      	ldrh	r2, [r7, #26]
    e818:	84ea      	strh	r2, [r5, #38]	; 0x26
		memcpy((void *)&conn->role.slave.force, &conn->access_addr[0],
    e81a:	4619      	mov	r1, r3
    e81c:	465a      	mov	r2, fp
    e81e:	f105 0060 	add.w	r0, r5, #96	; 0x60
    e822:	f7f2 fc36 	bl	1092 <memcpy>
		       sizeof(conn->role.slave.force));
		conn->supervision_reload =
    e826:	8bba      	ldrh	r2, [r7, #28]
    e828:	f242 7310 	movw	r3, #10000	; 0x2710
    e82c:	4353      	muls	r3, r2
						      conn_interval_us);
		/* Dispatch LE Ping PDU 6 connection events (that peer would
		 * listen to) before 30s timeout
		 * TODO: "peer listens to" is greater than 30s due to latency
		 */
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    e82e:	8cea      	ldrh	r2, [r5, #38]	; 0x26
		conn_interval_us =
			pdu_adv->payload.connect_ind.lldata.interval * 1250;
		conn->latency = pdu_adv->payload.connect_ind.lldata.latency;
		memcpy((void *)&conn->role.slave.force, &conn->access_addr[0],
		       sizeof(conn->role.slave.force));
		conn->supervision_reload =
    e830:	fbb3 f3f6 	udiv	r3, r3, r6
						      conn_interval_us);
		/* Dispatch LE Ping PDU 6 connection events (that peer would
		 * listen to) before 30s timeout
		 * TODO: "peer listens to" is greater than 30s due to latency
		 */
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    e834:	1d91      	adds	r1, r2, #6
		conn_interval_us =
			pdu_adv->payload.connect_ind.lldata.interval * 1250;
		conn->latency = pdu_adv->payload.connect_ind.lldata.latency;
		memcpy((void *)&conn->role.slave.force, &conn->access_addr[0],
		       sizeof(conn->role.slave.force));
		conn->supervision_reload =
    e836:	86ab      	strh	r3, [r5, #52]	; 0x34
			RADIO_CONN_EVENTS((pdu_adv->payload.connect_ind.lldata.timeout
					   * 10 * 1000), conn_interval_us);
		conn->procedure_reload = RADIO_CONN_EVENTS((40 * 1000 * 1000),
    e838:	4b3b      	ldr	r3, [pc, #236]	; (e928 <isr+0x4b8>)
    e83a:	fbb3 f3f6 	udiv	r3, r3, r6
    e83e:	872b      	strh	r3, [r5, #56]	; 0x38
							   conn_interval_us);

#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_PING)
		/* APTO in no. of connection events */
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    e840:	4b3a      	ldr	r3, [pc, #232]	; (e92c <isr+0x4bc>)
    e842:	fbb3 f3f6 	udiv	r3, r3, r6
    e846:	b29b      	uxth	r3, r3
						      conn_interval_us);
		/* Dispatch LE Ping PDU 6 connection events (that peer would
		 * listen to) before 30s timeout
		 * TODO: "peer listens to" is greater than 30s due to latency
		 */
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    e848:	428b      	cmp	r3, r1
    e84a:	bfc4      	itt	gt
    e84c:	f5c2 427f 	rsbgt	r2, r2, #65280	; 0xff00
    e850:	32fa      	addgt	r2, #250	; 0xfa
		conn->procedure_reload = RADIO_CONN_EVENTS((40 * 1000 * 1000),
							   conn_interval_us);

#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_PING)
		/* APTO in no. of connection events */
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    e852:	f8a5 3040 	strh.w	r3, [r5, #64]	; 0x40
						      conn_interval_us);
		/* Dispatch LE Ping PDU 6 connection events (that peer would
		 * listen to) before 30s timeout
		 * TODO: "peer listens to" is greater than 30s due to latency
		 */
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    e856:	bfc4      	itt	gt
    e858:	189b      	addgt	r3, r3, r2
    e85a:	b29b      	uxthgt	r3, r3
    e85c:	87ab      	strh	r3, [r5, #60]	; 0x3c
				     (conn->apto_reload - (conn->latency + 6)) :
				     conn->apto_reload;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

		/* Prepare the rx packet structure */
		radio_pdu_node_rx->hdr.handle = conn->handle;
    e85e:	8c2b      	ldrh	r3, [r5, #32]
    e860:	f8a8 3006 	strh.w	r3, [r8, #6]
		pdu_data = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
		radio_le_conn_cmplt =
			(struct radio_le_conn_cmplt *)&pdu_data->payload;
		radio_le_conn_cmplt->status = 0x00;
		radio_le_conn_cmplt->role = 0x01;
		radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    e864:	4639      	mov	r1, r7
				     conn->apto_reload;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

		/* Prepare the rx packet structure */
		radio_pdu_node_rx->hdr.handle = conn->handle;
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    e866:	2306      	movs	r3, #6

		/* prepare connection complete structure */
		pdu_data = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
		radio_le_conn_cmplt =
			(struct radio_le_conn_cmplt *)&pdu_data->payload;
		radio_le_conn_cmplt->status = 0x00;
    e868:	2200      	movs	r2, #0
		radio_le_conn_cmplt->role = 0x01;
    e86a:	f04f 0b01 	mov.w	fp, #1
				     conn->apto_reload;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

		/* Prepare the rx packet structure */
		radio_pdu_node_rx->hdr.handle = conn->handle;
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    e86e:	f888 3004 	strb.w	r3, [r8, #4]

		/* prepare connection complete structure */
		pdu_data = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
		radio_le_conn_cmplt =
			(struct radio_le_conn_cmplt *)&pdu_data->payload;
		radio_le_conn_cmplt->status = 0x00;
    e872:	f888 200b 	strb.w	r2, [r8, #11]
		radio_le_conn_cmplt->role = 0x01;
    e876:	f888 b00c 	strb.w	fp, [r8, #12]
		radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    e87a:	f811 2b02 	ldrb.w	r2, [r1], #2
		memcpy(&radio_le_conn_cmplt->peer_addr[0],
    e87e:	930a      	str	r3, [sp, #40]	; 0x28
		pdu_data = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
		radio_le_conn_cmplt =
			(struct radio_le_conn_cmplt *)&pdu_data->payload;
		radio_le_conn_cmplt->status = 0x00;
		radio_le_conn_cmplt->role = 0x01;
		radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    e880:	f3c2 1280 	ubfx	r2, r2, #6, #1
    e884:	f888 200d 	strb.w	r2, [r8, #13]
		memcpy(&radio_le_conn_cmplt->peer_addr[0],
    e888:	f108 000e 	add.w	r0, r8, #14
    e88c:	461a      	mov	r2, r3
    e88e:	f7f2 fc00 	bl	1092 <memcpy>
		       &pdu_adv->payload.connect_ind.init_addr[0],
		       BDADDR_SIZE);
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
    e892:	4639      	mov	r1, r7
		memcpy(&radio_le_conn_cmplt->own_addr[0],
    e894:	9b0a      	ldr	r3, [sp, #40]	; 0x28
		radio_le_conn_cmplt->role = 0x01;
		radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
		memcpy(&radio_le_conn_cmplt->peer_addr[0],
		       &pdu_adv->payload.connect_ind.init_addr[0],
		       BDADDR_SIZE);
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
    e896:	f811 2b08 	ldrb.w	r2, [r1], #8
    e89a:	f3c2 12c0 	ubfx	r2, r2, #7, #1
    e89e:	f888 2014 	strb.w	r2, [r8, #20]
		memcpy(&radio_le_conn_cmplt->own_addr[0],
    e8a2:	f108 0015 	add.w	r0, r8, #21
    e8a6:	461a      	mov	r2, r3
    e8a8:	f7f2 fbf3 	bl	1092 <memcpy>
		       &pdu_adv->payload.connect_ind.adv_addr[0], BDADDR_SIZE);
		radio_le_conn_cmplt->peer_irk_index = irkmatch_id;
    e8ac:	f888 a01b 	strb.w	sl, [r8, #27]
		radio_le_conn_cmplt->interval =
			pdu_adv->payload.connect_ind.lldata.interval;
    e8b0:	8b3b      	ldrh	r3, [r7, #24]
		       BDADDR_SIZE);
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
		memcpy(&radio_le_conn_cmplt->own_addr[0],
		       &pdu_adv->payload.connect_ind.adv_addr[0], BDADDR_SIZE);
		radio_le_conn_cmplt->peer_irk_index = irkmatch_id;
		radio_le_conn_cmplt->interval =
    e8b2:	f8a8 301c 	strh.w	r3, [r8, #28]
			pdu_adv->payload.connect_ind.lldata.interval;
		radio_le_conn_cmplt->latency =
			pdu_adv->payload.connect_ind.lldata.latency;
    e8b6:	8b7b      	ldrh	r3, [r7, #26]
		memcpy(&radio_le_conn_cmplt->own_addr[0],
		       &pdu_adv->payload.connect_ind.adv_addr[0], BDADDR_SIZE);
		radio_le_conn_cmplt->peer_irk_index = irkmatch_id;
		radio_le_conn_cmplt->interval =
			pdu_adv->payload.connect_ind.lldata.interval;
		radio_le_conn_cmplt->latency =
    e8b8:	f8a8 301e 	strh.w	r3, [r8, #30]
			pdu_adv->payload.connect_ind.lldata.latency;
		radio_le_conn_cmplt->timeout =
			pdu_adv->payload.connect_ind.lldata.timeout;
    e8bc:	8bbb      	ldrh	r3, [r7, #28]
		radio_le_conn_cmplt->peer_irk_index = irkmatch_id;
		radio_le_conn_cmplt->interval =
			pdu_adv->payload.connect_ind.lldata.interval;
		radio_le_conn_cmplt->latency =
			pdu_adv->payload.connect_ind.lldata.latency;
		radio_le_conn_cmplt->timeout =
    e8be:	f8a8 3020 	strh.w	r3, [r8, #32]
			pdu_adv->payload.connect_ind.lldata.timeout;
		radio_le_conn_cmplt->mca =
			pdu_adv->payload.connect_ind.lldata.sca;
    e8c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
    e8c6:	f3c3 1342 	ubfx	r3, r3, #5, #3
			pdu_adv->payload.connect_ind.lldata.interval;
		radio_le_conn_cmplt->latency =
			pdu_adv->payload.connect_ind.lldata.latency;
		radio_le_conn_cmplt->timeout =
			pdu_adv->payload.connect_ind.lldata.timeout;
		radio_le_conn_cmplt->mca =
    e8ca:	f888 3022 	strb.w	r3, [r8, #34]	; 0x22
			pdu_adv->payload.connect_ind.lldata.sca;

		/* enqueue connection complete structure into queue */
		rx_fc_lock(conn->handle);
    e8ce:	8c28      	ldrh	r0, [r5, #32]
    e8d0:	f7fd f834 	bl	b93c <rx_fc_lock>
		packet_rx_enqueue();
    e8d4:	f7fc ffe2 	bl	b89c <packet_rx_enqueue>
		/* Use Channel Selection Algorithm #2 if peer too supports it */
		if (IS_ENABLED(CONFIG_BLUETOOTH_CONTROLLER_CHAN_SEL_2)) {
			struct radio_le_chan_sel_algo *le_chan_sel_algo;

			/* Generate LE Channel Selection Algorithm event */
			radio_pdu_node_rx = packet_rx_reserve_get(3);
    e8d8:	2003      	movs	r0, #3
    e8da:	f7fc fc11 	bl	b100 <packet_rx_reserve_get>
			LL_ASSERT(radio_pdu_node_rx);
    e8de:	b930      	cbnz	r0, e8ee <isr+0x47e>
    e8e0:	4b13      	ldr	r3, [pc, #76]	; (e930 <isr+0x4c0>)
    e8e2:	9301      	str	r3, [sp, #4]
    e8e4:	4b13      	ldr	r3, [pc, #76]	; (e934 <isr+0x4c4>)
    e8e6:	9300      	str	r3, [sp, #0]
    e8e8:	4b13      	ldr	r3, [pc, #76]	; (e938 <isr+0x4c8>)
    e8ea:	f001 bafe 	b.w	feea <isr+0x1a7a>

			radio_pdu_node_rx->hdr.handle = conn->handle;
    e8ee:	8c2b      	ldrh	r3, [r5, #32]
    e8f0:	80c3      	strh	r3, [r0, #6]
			radio_pdu_node_rx->hdr.type =
    e8f2:	230b      	movs	r3, #11
    e8f4:	7103      	strb	r3, [r0, #4]
			pdu_data = (struct pdu_data *)
				radio_pdu_node_rx->pdu_data;
			le_chan_sel_algo = (struct radio_le_chan_sel_algo *)
				&pdu_data->payload;

			if (pdu_adv->chan_sel) {
    e8f6:	783b      	ldrb	r3, [r7, #0]
    e8f8:	f003 0320 	and.w	r3, r3, #32
    e8fc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    e900:	b1e3      	cbz	r3, e93c <isr+0x4cc>
				u16_t aa_ls =
    e902:	7c2b      	ldrb	r3, [r5, #16]
    e904:	7c69      	ldrb	r1, [r5, #17]
					((u16_t)conn->access_addr[1] << 8) |
					conn->access_addr[0];
				u16_t aa_ms =
    e906:	7caa      	ldrb	r2, [r5, #18]
				radio_pdu_node_rx->pdu_data;
			le_chan_sel_algo = (struct radio_le_chan_sel_algo *)
				&pdu_data->payload;

			if (pdu_adv->chan_sel) {
				u16_t aa_ls =
    e908:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
					((u16_t)conn->access_addr[1] << 8) |
					conn->access_addr[0];
				u16_t aa_ms =
    e90c:	7ceb      	ldrb	r3, [r5, #19]
    e90e:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
					((u16_t)conn->access_addr[3] << 8) |
					 conn->access_addr[2];

				conn->data_chan_sel = 1;
    e912:	7f2a      	ldrb	r2, [r5, #28]
				conn->data_chan_id = aa_ms ^ aa_ls;
    e914:	404b      	eors	r3, r1
					conn->access_addr[0];
				u16_t aa_ms =
					((u16_t)conn->access_addr[3] << 8) |
					 conn->access_addr[2];

				conn->data_chan_sel = 1;
    e916:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    e91a:	772a      	strb	r2, [r5, #28]
				conn->data_chan_id = aa_ms ^ aa_ls;
    e91c:	83eb      	strh	r3, [r5, #30]

				le_chan_sel_algo->chan_sel_algo = 0x01;
    e91e:	f880 b00b 	strb.w	fp, [r0, #11]
    e922:	e00c      	b.n	e93e <isr+0x4ce>
    e924:	20001470 	.word	0x20001470
    e928:	02625a00 	.word	0x02625a00
    e92c:	01c9c380 	.word	0x01c9c380
    e930:	00013df4 	.word	0x00013df4
    e934:	00013df9 	.word	0x00013df9
    e938:	00016ba4 	.word	0x00016ba4
			} else {
				le_chan_sel_algo->chan_sel_algo = 0x00;
    e93c:	72c2      	strb	r2, [r0, #11]
			}

			packet_rx_enqueue();
    e93e:	f7fc ffad 	bl	b89c <packet_rx_enqueue>
		}

		/* calculate the window widening */
		conn->role.slave.sca = pdu_adv->payload.connect_ind.lldata.sca;
    e942:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
    e946:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
		conn->role.slave.window_widening_periodic_us =
			(((gc_lookup_ppm[_radio.sca] +
    e94a:	49bf      	ldr	r1, [pc, #764]	; (ec48 <isr+0x7d8>)

			packet_rx_enqueue();
		}

		/* calculate the window widening */
		conn->role.slave.sca = pdu_adv->payload.connect_ind.lldata.sca;
    e94c:	0952      	lsrs	r2, r2, #5
    e94e:	f362 0343 	bfi	r3, r2, #1, #3
    e952:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
		conn->role.slave.window_widening_periodic_us =
			(((gc_lookup_ppm[_radio.sca] +
    e956:	f894 319c 	ldrb.w	r3, [r4, #412]	; 0x19c
			packet_rx_enqueue();
		}

		/* calculate the window widening */
		conn->role.slave.sca = pdu_adv->payload.connect_ind.lldata.sca;
		conn->role.slave.window_widening_periodic_us =
    e95a:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
    e95e:	f831 3012 	ldrh.w	r3, [r1, r2, lsl #1]
    e962:	4aba      	ldr	r2, [pc, #744]	; (ec4c <isr+0x7dc>)
    e964:	4403      	add	r3, r0
    e966:	4373      	muls	r3, r6
    e968:	f503 2374 	add.w	r3, r3, #999424	; 0xf4000
    e96c:	f203 233f 	addw	r3, r3, #575	; 0x23f
    e970:	fbb3 f3f2 	udiv	r3, r3, r2
    e974:	64ab      	str	r3, [r5, #72]	; 0x48
			(((gc_lookup_ppm[_radio.sca] +
			   gc_lookup_ppm[conn->role.slave.sca]) *
			  conn_interval_us) + (1000000 - 1)) / 1000000;
		conn->role.slave.window_widening_max_us =
    e976:	0873      	lsrs	r3, r6, #1
    e978:	3b96      	subs	r3, #150	; 0x96
    e97a:	64eb      	str	r3, [r5, #76]	; 0x4c
			(conn_interval_us >> 1) - RADIO_TIFS;
		conn->role.slave.window_size_event_us =
    e97c:	7d7b      	ldrb	r3, [r7, #21]
    e97e:	f240 4be2 	movw	fp, #1250	; 0x4e2
			pdu_adv->payload.connect_ind.lldata.win_size * 1250;
		conn->role.slave.window_size_prepare_us = 0;
    e982:	f04f 0800 	mov.w	r8, #0
			(((gc_lookup_ppm[_radio.sca] +
			   gc_lookup_ppm[conn->role.slave.sca]) *
			  conn_interval_us) + (1000000 - 1)) / 1000000;
		conn->role.slave.window_widening_max_us =
			(conn_interval_us >> 1) - RADIO_TIFS;
		conn->role.slave.window_size_event_us =
    e986:	fb0b f303 	mul.w	r3, fp, r3
    e98a:	65eb      	str	r3, [r5, #92]	; 0x5c
			pdu_adv->payload.connect_ind.lldata.win_size * 1250;
		conn->role.slave.window_size_prepare_us = 0;
    e98c:	f8c5 8058 	str.w	r8, [r5, #88]	; 0x58

		rx_ready_delay = radio_rx_ready_delay_get(0);
    e990:	4640      	mov	r0, r8
    e992:	f7fb f917 	bl	9bc4 <radio_rx_ready_delay_get>

		/* calculate slave slot */
		conn->hdr.ticks_slot =
    e996:	49ae      	ldr	r1, [pc, #696]	; (ec50 <isr+0x7e0>)
			(conn_interval_us >> 1) - RADIO_TIFS;
		conn->role.slave.window_size_event_us =
			pdu_adv->payload.connect_ind.lldata.win_size * 1250;
		conn->role.slave.window_size_prepare_us = 0;

		rx_ready_delay = radio_rx_ready_delay_get(0);
    e998:	900a      	str	r0, [sp, #40]	; 0x28

		/* calculate slave slot */
		conn->hdr.ticks_slot =
			TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    e99a:	f200 4052 	addw	r0, r0, #1106	; 0x452
		conn->role.slave.window_size_prepare_us = 0;

		rx_ready_delay = radio_rx_ready_delay_get(0);

		/* calculate slave slot */
		conn->hdr.ticks_slot =
    e99e:	a3a8      	add	r3, pc, #672	; (adr r3, ec40 <isr+0x7d0>)
    e9a0:	e9d3 2300 	ldrd	r2, r3, [r3]
    e9a4:	fba0 0101 	umull	r0, r1, r0, r1
    e9a8:	f7f1 fc34 	bl	214 <__aeabi_uldivmod>
			TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
					   rx_ready_delay + 328 + RADIO_TIFS +
					   328);
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    e9ac:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
    e9b0:	606b      	str	r3, [r5, #4]
		conn->hdr.ticks_xtal_to_start =
    e9b2:	2227      	movs	r2, #39	; 0x27
			TICKER_US_TO_TICKS(RADIO_TICKER_XTAL_OFFSET_US);
		conn->hdr.ticks_preempt_to_start =
			TICKER_US_TO_TICKS(RADIO_TICKER_PREEMPT_PART_MIN_US);
		ticks_slot_offset =
    e9b4:	4293      	cmp	r3, r2
    e9b6:	bf38      	it	cc
    e9b8:	4613      	movcc	r3, r2
		conn->role.slave.window_size_prepare_us = 0;

		rx_ready_delay = radio_rx_ready_delay_get(0);

		/* calculate slave slot */
		conn->hdr.ticks_slot =
    e9ba:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
		conn->hdr.ticks_xtal_to_start =
			TICKER_US_TO_TICKS(RADIO_TICKER_XTAL_OFFSET_US);
		conn->hdr.ticks_preempt_to_start =
			TICKER_US_TO_TICKS(RADIO_TICKER_PREEMPT_PART_MIN_US);
		ticks_slot_offset =
    e9be:	469a      	mov	sl, r3
			(conn->hdr.ticks_active_to_start <
			 conn->hdr.ticks_xtal_to_start) ?
			conn->hdr.ticks_xtal_to_start :
			conn->hdr.ticks_active_to_start;
		conn_interval_us -=
    e9c0:	6cab      	ldr	r3, [r5, #72]	; 0x48
		conn->hdr.ticks_slot =
			TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
					   rx_ready_delay + 328 + RADIO_TIFS +
					   328);
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
		conn->hdr.ticks_xtal_to_start =
    e9c2:	602a      	str	r2, [r5, #0]
		conn->role.slave.window_size_prepare_us = 0;

		rx_ready_delay = radio_rx_ready_delay_get(0);

		/* calculate slave slot */
		conn->hdr.ticks_slot =
    e9c4:	60e8      	str	r0, [r5, #12]
					   rx_ready_delay + 328 + RADIO_TIFS +
					   328);
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
		conn->hdr.ticks_xtal_to_start =
			TICKER_US_TO_TICKS(RADIO_TICKER_XTAL_OFFSET_US);
		conn->hdr.ticks_preempt_to_start =
    e9c6:	f8c5 8008 	str.w	r8, [r5, #8]
		ticks_slot_offset =
			(conn->hdr.ticks_active_to_start <
			 conn->hdr.ticks_xtal_to_start) ?
			conn->hdr.ticks_xtal_to_start :
			conn->hdr.ticks_active_to_start;
		conn_interval_us -=
    e9ca:	1af6      	subs	r6, r6, r3
			conn->role.slave.window_widening_periodic_us;

		conn_offset_us = radio_tmr_end_get();
    e9cc:	f7fb fab0 	bl	9f30 <radio_tmr_end_get>
    e9d0:	900b      	str	r0, [sp, #44]	; 0x2c
    e9d2:	8af8      	ldrh	r0, [r7, #22]
		conn_offset_us +=
			((u64_t)pdu_adv->payload.connect_ind.lldata.win_offset +
			 1) * 1250;
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
    e9d4:	4641      	mov	r1, r8
    e9d6:	fb00 bb0b 	mla	fp, r0, fp, fp
    e9da:	4640      	mov	r0, r8
    e9dc:	f7fb f8f0 	bl	9bc0 <radio_tx_chain_delay_get>
    e9e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e9e2:	f1ab 0b20 	sub.w	fp, fp, #32
    e9e6:	449b      	add	fp, r3
		conn_offset_us -= rx_ready_delay;
		conn_offset_us -= RADIO_TICKER_JITTER_US << 1;
    e9e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e9ea:	ebc0 000b 	rsb	r0, r0, fp
    e9ee:	1ac3      	subs	r3, r0, r3
    e9f0:	930a      	str	r3, [sp, #40]	; 0x28

		/* Stop Advertiser */
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    e9f2:	f240 33ae 	movw	r3, #942	; 0x3ae
    e9f6:	9300      	str	r3, [sp, #0]
    e9f8:	2205      	movs	r2, #5
    e9fa:	4b96      	ldr	r3, [pc, #600]	; (ec54 <isr+0x7e4>)
    e9fc:	f8df b250 	ldr.w	fp, [pc, #592]	; ec50 <isr+0x7e0>
    ea00:	4641      	mov	r1, r8
    ea02:	4640      	mov	r0, r8
    ea04:	f7fc fa56 	bl	aeb4 <ticker_stop>
					    RADIO_TICKER_USER_ID_WORKER,
					    RADIO_TICKER_ID_ADV,
					    ticker_stop_adv_assert,
					    (void *)__LINE__);
		ticker_stop_adv_assert(ticker_status, (void *)__LINE__);
    ea08:	f240 31af 	movw	r1, #943	; 0x3af
    ea0c:	f7fc ffd2 	bl	b9b4 <ticker_stop_adv_assert>

		/* Stop Direct Adv Stopper */
		if (_pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    ea10:	f899 3006 	ldrb.w	r3, [r9, #6]
    ea14:	f003 030f 	and.w	r3, r3, #15
    ea18:	2b01      	cmp	r3, #1
    ea1a:	d107      	bne.n	ea2c <isr+0x5bc>
			/* Advertiser stop can expire while here in this ISR.
			 * Deferred attempt to stop can fail as it would have
			 * expired, hence ignore failure.
			 */
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    ea1c:	f8cd 8000 	str.w	r8, [sp]
    ea20:	4643      	mov	r3, r8
    ea22:	2203      	movs	r2, #3
    ea24:	4641      	mov	r1, r8
    ea26:	4640      	mov	r0, r8
    ea28:	f7fc fa44 	bl	aeb4 <ticker_stop>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
		     RADIO_TICKER_USER_ID_WORKER,
		     RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle,
		     (_radio.ticks_anchor - ticks_slot_offset),
		     TICKER_US_TO_TICKS(conn_offset_us),
		     TICKER_US_TO_TICKS(conn_interval_us),
    ea2c:	fba6 670b 	umull	r6, r7, r6, fp
    ea30:	a383      	add	r3, pc, #524	; (adr r3, ec40 <isr+0x7d0>)
    ea32:	e9d3 2300 	ldrd	r2, r3, [r3]
    ea36:	4630      	mov	r0, r6
    ea38:	4639      	mov	r1, r7
    ea3a:	f7f1 fbeb 	bl	214 <__aeabi_uldivmod>
				    RADIO_TICKER_USER_ID_WORKER,
				    RADIO_TICKER_ID_ADV_STOP, NULL, NULL);
		}

		/* Start Slave */
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    ea3e:	f895 3020 	ldrb.w	r3, [r5, #32]
    ea42:	6864      	ldr	r4, [r4, #4]
    ea44:	9506      	str	r5, [sp, #24]
    ea46:	3307      	adds	r3, #7
    ea48:	b2db      	uxtb	r3, r3
    ea4a:	930b      	str	r3, [sp, #44]	; 0x2c
    ea4c:	f240 33c6 	movw	r3, #966	; 0x3c6
    ea50:	9308      	str	r3, [sp, #32]
    ea52:	4b81      	ldr	r3, [pc, #516]	; (ec58 <isr+0x7e8>)
    ea54:	9307      	str	r3, [sp, #28]
    ea56:	4b81      	ldr	r3, [pc, #516]	; (ec5c <isr+0x7ec>)
    ea58:	9305      	str	r3, [sp, #20]
    ea5a:	68eb      	ldr	r3, [r5, #12]
    ea5c:	4a80      	ldr	r2, [pc, #512]	; (ec60 <isr+0x7f0>)
    ea5e:	ebca 0404 	rsb	r4, sl, r4
    ea62:	449a      	add	sl, r3
    ea64:	fa1f f38a 	uxth.w	r3, sl
		     RADIO_TICKER_USER_ID_WORKER,
		     RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle,
		     (_radio.ticks_anchor - ticks_slot_offset),
		     TICKER_US_TO_TICKS(conn_offset_us),
		     TICKER_US_TO_TICKS(conn_interval_us),
    ea68:	4680      	mov	r8, r0
				    RADIO_TICKER_USER_ID_WORKER,
				    RADIO_TICKER_ID_ADV_STOP, NULL, NULL);
		}

		/* Start Slave */
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    ea6a:	9304      	str	r3, [sp, #16]
    ea6c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    ea70:	2307      	movs	r3, #7
    ea72:	2100      	movs	r1, #0
    ea74:	4343      	muls	r3, r0
    ea76:	fb02 3301 	mla	r3, r2, r1, r3
    ea7a:	fba0 0102 	umull	r0, r1, r0, r2
    ea7e:	1a30      	subs	r0, r6, r0
    ea80:	4419      	add	r1, r3
    ea82:	eb67 0101 	sbc.w	r1, r7, r1
    ea86:	2500      	movs	r5, #0
    ea88:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    ea8c:	2300      	movs	r3, #0
    ea8e:	9503      	str	r5, [sp, #12]
    ea90:	f7f1 fbc0 	bl	214 <__aeabi_uldivmod>
    ea94:	990a      	ldr	r1, [sp, #40]	; 0x28
    ea96:	9002      	str	r0, [sp, #8]
    ea98:	f028 437f 	bic.w	r3, r8, #4278190080	; 0xff000000
    ea9c:	9301      	str	r3, [sp, #4]
    ea9e:	fba1 010b 	umull	r0, r1, r1, fp
    eaa2:	a367      	add	r3, pc, #412	; (adr r3, ec40 <isr+0x7d0>)
    eaa4:	e9d3 2300 	ldrd	r2, r3, [r3]
    eaa8:	f7f1 fbb4 	bl	214 <__aeabi_uldivmod>
    eaac:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    eab0:	9000      	str	r0, [sp, #0]
    eab2:	4623      	mov	r3, r4
    eab4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    eab6:	4629      	mov	r1, r5
    eab8:	4628      	mov	r0, r5
    eaba:	f7fc f96d 	bl	ad98 <ticker_start>
		     TICKER_US_TO_TICKS(conn_interval_us),
		     TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
		     (ticks_slot_offset + conn->hdr.ticks_slot),
		     event_slave_prepare, conn, ticker_success_assert,
		     (void *)__LINE__);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    eabe:	f030 0302 	bics.w	r3, r0, #2
    eac2:	f001 82d4 	beq.w	1006e <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x6f>
    eac6:	4b67      	ldr	r3, [pc, #412]	; (ec64 <isr+0x7f4>)
    eac8:	9301      	str	r3, [sp, #4]
    eaca:	4b67      	ldr	r3, [pc, #412]	; (ec68 <isr+0x7f8>)
    eacc:	9300      	str	r3, [sp, #0]
    eace:	4a67      	ldr	r2, [pc, #412]	; (ec6c <isr+0x7fc>)
    ead0:	4b67      	ldr	r3, [pc, #412]	; (ec70 <isr+0x800>)
    ead2:	4968      	ldr	r1, [pc, #416]	; (ec74 <isr+0x804>)
    ead4:	4868      	ldr	r0, [pc, #416]	; (ec78 <isr+0x808>)
    ead6:	f001 ba87 	b.w	ffe8 <isr+0x1b78>
			radio_disable();
		}
		break;

	case ROLE_SCAN:
		if ((crc_ok) &&
    eada:	f1b9 0f00 	cmp.w	r9, #0
    eade:	d10b      	bne.n	eaf8 <isr+0x688>
			err = isr_rx_scan(irkmatch_id, rssi_ready);
		} else {
			err = 1;
		}
		if (err) {
			_radio.state = STATE_CLOSE;
    eae0:	2303      	movs	r3, #3
    eae2:	7423      	strb	r3, [r4, #16]
			radio_disable();
    eae4:	f7fb f882 	bl	9bec <radio_disable>
			/* switch scanner state to idle */
			_radio.scanner.state = 0;
    eae8:	f894 315c 	ldrb.w	r3, [r4, #348]	; 0x15c
    eaec:	f36f 0341 	bfc	r3, #1, #1
    eaf0:	f884 315c 	strb.w	r3, [r4, #348]	; 0x15c
    eaf4:	f001 babb 	b.w	1006e <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x6f>
		}
		break;

	case ROLE_SCAN:
		if ((crc_ok) &&
		    (((_radio.scanner.filter_policy & 0x01) == 0) ||
    eaf8:	f894 315d 	ldrb.w	r3, [r4, #349]	; 0x15d
			radio_disable();
		}
		break;

	case ROLE_SCAN:
		if ((crc_ok) &&
    eafc:	06d9      	lsls	r1, r3, #27
    eafe:	d504      	bpl.n	eb0a <isr+0x69a>
		    (((_radio.scanner.filter_policy & 0x01) == 0) ||
    eb00:	f1b8 0f00 	cmp.w	r8, #0
    eb04:	d101      	bne.n	eb0a <isr+0x69a>
		     (devmatch_ok) || (irkmatch_ok))) {
    eb06:	2d00      	cmp	r5, #0
    eb08:	d0ea      	beq.n	eae0 <isr+0x670>
			err = isr_rx_scan(irkmatch_id, rssi_ready);
    eb0a:	4631      	mov	r1, r6
    eb0c:	4650      	mov	r0, sl
    eb0e:	f7fd fc6b 	bl	c3e8 <isr_rx_scan>
		} else {
			err = 1;
		}
		if (err) {
    eb12:	2800      	cmp	r0, #0
    eb14:	f001 82ab 	beq.w	1006e <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x6f>
    eb18:	e7e2      	b.n	eae0 <isr+0x670>
#else /* !CONFIG_BLUETOOTH_CONTROLLER_CONN_RSSI */
	ARG_UNUSED(rssi_ready);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_CONN_RSSI */

	/* Increment packet counter for this connection event */
	_radio.packet_counter++;
    eb1a:	f894 2194 	ldrb.w	r2, [r4, #404]	; 0x194

	/* received data packet */
	radio_pdu_node_rx = _radio.packet_rx[_radio.packet_rx_last];
    eb1e:	f894 11bd 	ldrb.w	r1, [r4, #445]	; 0x1bd
#else /* !CONFIG_BLUETOOTH_CONTROLLER_CONN_RSSI */
	ARG_UNUSED(rssi_ready);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_CONN_RSSI */

	/* Increment packet counter for this connection event */
	_radio.packet_counter++;
    eb22:	4b56      	ldr	r3, [pc, #344]	; (ec7c <isr+0x80c>)
    eb24:	3201      	adds	r2, #1
    eb26:	f884 2194 	strb.w	r2, [r4, #404]	; 0x194

	/* received data packet */
	radio_pdu_node_rx = _radio.packet_rx[_radio.packet_rx_last];
    eb2a:	f8d4 21b8 	ldr.w	r2, [r4, #440]	; 0x1b8
    eb2e:	f852 7021 	ldr.w	r7, [r2, r1, lsl #2]
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    eb32:	2201      	movs	r2, #1
    eb34:	713a      	strb	r2, [r7, #4]

	if (crc_ok) {
    eb36:	f1b9 0f00 	cmp.w	r9, #0
    eb3a:	f000 87a5 	beq.w	fa88 <isr+0x1618>
	struct pdu_data *pdu_data_tx;
	u8_t terminate = 0;
	u8_t nack = 0;

	/* Reset CRC expiry counter */
	_radio.crc_expire = 0;
    eb3e:	2000      	movs	r0, #0

	/* Ack for transmitted data */
	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
	if (pdu_data_rx->nesn != _radio.conn_curr->sn) {
    eb40:	f8d3 5190 	ldr.w	r5, [r3, #400]	; 0x190
	struct pdu_data *pdu_data_tx;
	u8_t terminate = 0;
	u8_t nack = 0;

	/* Reset CRC expiry counter */
	_radio.crc_expire = 0;
    eb44:	f883 0195 	strb.w	r0, [r3, #405]	; 0x195

	/* Ack for transmitted data */
	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
	if (pdu_data_rx->nesn != _radio.conn_curr->sn) {
    eb48:	f895 30c0 	ldrb.w	r3, [r5, #192]	; 0xc0
    eb4c:	7a39      	ldrb	r1, [r7, #8]
    eb4e:	401a      	ands	r2, r3
    eb50:	f3c1 0180 	ubfx	r1, r1, #2, #1
    eb54:	4291      	cmp	r1, r2
    eb56:	f000 814a 	beq.w	edee <isr+0x97e>

		/* Increment serial number */
		_radio.conn_curr->sn++;
    eb5a:	f082 0201 	eor.w	r2, r2, #1
    eb5e:	f362 0300 	bfi	r3, r2, #0, #1
    eb62:	f885 30c0 	strb.w	r3, [r5, #192]	; 0xc0

		if (_radio.conn_curr->empty == 0) {
    eb66:	b2db      	uxtb	r3, r3
    eb68:	061a      	lsls	r2, r3, #24
    eb6a:	f100 812f 	bmi.w	edcc <isr+0x95c>
			struct radio_pdu_node_tx *node_tx;
			u8_t pdu_data_tx_len, pdu_data_tx_ll_id;

			node_tx = _radio.conn_curr->pkt_tx_head;
    eb6e:	f8d5 8104 	ldr.w	r8, [r5, #260]	; 0x104
			pdu_data_tx = (struct pdu_data *)
    eb72:	f895 2115 	ldrb.w	r2, [r5, #277]	; 0x115
				(node_tx->pdu_data +
    eb76:	f108 0004 	add.w	r0, r8, #4
		if (_radio.conn_curr->empty == 0) {
			struct radio_pdu_node_tx *node_tx;
			u8_t pdu_data_tx_len, pdu_data_tx_ll_id;

			node_tx = _radio.conn_curr->pkt_tx_head;
			pdu_data_tx = (struct pdu_data *)
    eb7a:	eb00 0a02 	add.w	sl, r0, r2
				(node_tx->pdu_data +
				 _radio.conn_curr->packet_tx_head_offset);

			pdu_data_tx_len = pdu_data_tx->len;
    eb7e:	f89a 6001 	ldrb.w	r6, [sl, #1]
			pdu_data_tx_ll_id = pdu_data_tx->ll_id;

			if (pdu_data_tx_len != 0) {
    eb82:	2e00      	cmp	r6, #0
    eb84:	f000 80eb 	beq.w	ed5e <isr+0x8ee>
			pdu_data_tx = (struct pdu_data *)
				(node_tx->pdu_data +
				 _radio.conn_curr->packet_tx_head_offset);

			pdu_data_tx_len = pdu_data_tx->len;
			pdu_data_tx_ll_id = pdu_data_tx->ll_id;
    eb88:	5c81      	ldrb	r1, [r0, r2]

			if (pdu_data_tx_len != 0) {
				/* if encrypted increment tx counter */
				if (_radio.conn_curr->enc_tx) {
    eb8a:	069b      	lsls	r3, r3, #26
			pdu_data_tx = (struct pdu_data *)
				(node_tx->pdu_data +
				 _radio.conn_curr->packet_tx_head_offset);

			pdu_data_tx_len = pdu_data_tx->len;
			pdu_data_tx_ll_id = pdu_data_tx->ll_id;
    eb8c:	f001 0103 	and.w	r1, r1, #3

			if (pdu_data_tx_len != 0) {
				/* if encrypted increment tx counter */
				if (_radio.conn_curr->enc_tx) {
    eb90:	d50a      	bpl.n	eba8 <isr+0x738>
					_radio.conn_curr->ccm_tx.counter++;
    eb92:	f8d5 20f2 	ldr.w	r2, [r5, #242]	; 0xf2
    eb96:	f8d5 30f6 	ldr.w	r3, [r5, #246]	; 0xf6
    eb9a:	3201      	adds	r2, #1
    eb9c:	f143 0300 	adc.w	r3, r3, #0
    eba0:	f8c5 20f2 	str.w	r2, [r5, #242]	; 0xf2
    eba4:	f8c5 30f6 	str.w	r3, [r5, #246]	; 0xf6
				}

				/* process ctrl packet on tx cmplt */
				if (pdu_data_tx_ll_id == PDU_DATA_LLID_CTRL) {
    eba8:	2903      	cmp	r1, #3
    ebaa:	f040 80da 	bne.w	ed62 <isr+0x8f2>
static inline u8_t isr_rx_conn_pkt_ack(struct pdu_data *pdu_data_tx,
				       struct radio_pdu_node_tx **node_tx)
{
	u8_t terminate = 0;

	switch (pdu_data_tx->payload.llctrl.opcode) {
    ebae:	f89a 3003 	ldrb.w	r3, [sl, #3]
    ebb2:	3b02      	subs	r3, #2
    ebb4:	2b14      	cmp	r3, #20
    ebb6:	f200 80d4 	bhi.w	ed62 <isr+0x8f2>
    ebba:	e8df f003 	tbb	[pc, r3]
    ebbe:	240b      	.short	0x240b
    ebc0:	d2d2d29d 	.word	0xd2d2d29d
    ebc4:	6c63d2d2 	.word	0x6c63d2d2
    ebc8:	d2d2a4d2 	.word	0xd2d2a4d2
    ebcc:	d2d2d2d2 	.word	0xd2d2d2d2
    ebd0:	d2b0      	.short	0xd2b0
    ebd2:	c8          	.byte	0xc8
    ebd3:	00          	.byte	0x00
	case PDU_DATA_LLCTRL_TYPE_TERMINATE_IND:
		_radio.state = STATE_CLOSE;
    ebd4:	2303      	movs	r3, #3
    ebd6:	7423      	strb	r3, [r4, #16]
		radio_disable();
    ebd8:	f7fb f808 	bl	9bec <radio_disable>

		/* assert if radio packet ptr is not set and radio started tx */
		LL_ASSERT(!radio_is_ready());
    ebdc:	f7fb f820 	bl	9c20 <radio_is_ready>
    ebe0:	b128      	cbz	r0, ebee <isr+0x77e>
    ebe2:	4b20      	ldr	r3, [pc, #128]	; (ec64 <isr+0x7f4>)
    ebe4:	9301      	str	r3, [sp, #4]
    ebe6:	4b20      	ldr	r3, [pc, #128]	; (ec68 <isr+0x7f8>)
    ebe8:	9300      	str	r3, [sp, #0]
    ebea:	4b25      	ldr	r3, [pc, #148]	; (ec80 <isr+0x810>)
    ebec:	e18e      	b.n	ef0c <isr+0xa9c>

		terminate_ind_rx_enqueue(_radio.conn_curr,
		     (pdu_data_tx->payload.llctrl.ctrldata.terminate_ind.
    ebee:	f89a 1004 	ldrb.w	r1, [sl, #4]
		radio_disable();

		/* assert if radio packet ptr is not set and radio started tx */
		LL_ASSERT(!radio_is_ready());

		terminate_ind_rx_enqueue(_radio.conn_curr,
    ebf2:	4b22      	ldr	r3, [pc, #136]	; (ec7c <isr+0x80c>)
    ebf4:	2913      	cmp	r1, #19
    ebf6:	bf08      	it	eq
    ebf8:	2116      	moveq	r1, #22
    ebfa:	f8d3 0190 	ldr.w	r0, [r3, #400]	; 0x190
    ebfe:	f7fd fecf 	bl	c9a0 <terminate_ind_rx_enqueue>
		      error_code == 0x13) ?  0x16 :
		     pdu_data_tx->payload.llctrl.ctrldata.terminate_ind.
		     error_code);

		/* Ack received, hence terminate */
		terminate = 1;
    ec02:	2501      	movs	r5, #1
    ec04:	e0ae      	b.n	ed64 <isr+0x8f4>
		break;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_ENC)
	case PDU_DATA_LLCTRL_TYPE_ENC_REQ:
		/* things from master stored for session key calculation */
		memcpy(&_radio.conn_curr->llcp.encryption.skd[0],
    ec06:	2208      	movs	r2, #8
    ec08:	f10a 010e 	add.w	r1, sl, #14
    ec0c:	f105 0087 	add.w	r0, r5, #135	; 0x87
    ec10:	f7f2 fa3f 	bl	1092 <memcpy>
		       &pdu_data_tx->payload.llctrl.ctrldata.enc_req.skdm[0],
		       8);
		memcpy(&_radio.conn_curr->ccm_rx.iv[0],
    ec14:	f8d4 0190 	ldr.w	r0, [r4, #400]	; 0x190
    ec18:	2204      	movs	r2, #4
    ec1a:	f10a 0116 	add.w	r1, sl, #22
    ec1e:	30da      	adds	r0, #218	; 0xda
    ec20:	f7f2 fa37 	bl	1092 <memcpy>
		       &pdu_data_tx->payload.llctrl.ctrldata.enc_req.ivm[0],
		       4);

		/* pause data packet tx */
		_radio.conn_curr->pause_tx = 1;
    ec24:	f8d4 3190 	ldr.w	r3, [r4, #400]	; 0x190
    ec28:	f893 20c0 	ldrb.w	r2, [r3, #192]	; 0xc0
    ec2c:	f042 0208 	orr.w	r2, r2, #8
    ec30:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

		/* Start Procedure Timeout (this will not replace terminate
		 * procedure which always gets place before any packets
		 * going out, hence safe by design).
		 */
		_radio.conn_curr->procedure_expire =
    ec34:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
    ec36:	875a      	strh	r2, [r3, #58]	; 0x3a
    ec38:	e093      	b.n	ed62 <isr+0x8f2>
    ec3a:	bf00      	nop
    ec3c:	f3af 8000 	nop.w
    ec40:	1afd498d 	.word	0x1afd498d
    ec44:	00000007 	.word	0x00000007
    ec48:	00016798 	.word	0x00016798
    ec4c:	000f4240 	.word	0x000f4240
    ec50:	3b9aca00 	.word	0x3b9aca00
    ec54:	0000b9b5 	.word	0x0000b9b5
    ec58:	0000b971 	.word	0x0000b971
    ec5c:	0000e2d1 	.word	0x0000e2d1
    ec60:	1afd498d 	.word	0x1afd498d
    ec64:	00013df4 	.word	0x00013df4
    ec68:	00013df9 	.word	0x00013df9
    ec6c:	00013db4 	.word	0x00013db4
    ec70:	00016ba4 	.word	0x00016ba4
    ec74:	00013dbb 	.word	0x00013dbb
    ec78:	000154fb 	.word	0x000154fb
    ec7c:	20001470 	.word	0x20001470
    ec80:	00016b69 	.word	0x00016b69
		 */
		break;

	case PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_REQ:
		/* pause data packet tx */
		_radio.conn_curr->pause_tx = 1;
    ec84:	f895 30c0 	ldrb.w	r3, [r5, #192]	; 0xc0

		/* key refresh */
		_radio.conn_curr->refresh = 1;
    ec88:	f043 0348 	orr.w	r3, r3, #72	; 0x48
    ec8c:	f885 30c0 	strb.w	r3, [r5, #192]	; 0xc0

		/* Start Procedure Timeout (this will not replace terminate
		 * procedure which always gets place before any packets
		 * going out, hence safe by design).
		 */
		_radio.conn_curr->procedure_expire =
    ec90:	8f2b      	ldrh	r3, [r5, #56]	; 0x38
    ec92:	876b      	strh	r3, [r5, #58]	; 0x3a
    ec94:	e065      	b.n	ed62 <isr+0x8f2>
			_radio.conn_curr->procedure_reload;
		break;

	case PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP:
		if (_radio.role == ROLE_MASTER) {
    ec96:	f894 a00f 	ldrb.w	sl, [r4, #15]
    ec9a:	fa5f fa8a 	uxtb.w	sl, sl
    ec9e:	f1ba 0f04 	cmp.w	sl, #4
    eca2:	d129      	bne.n	ecf8 <isr+0x888>
				struct radio_pdu_node_tx *node_tx)
{
	struct pdu_data *pdu_ctrl_tx;

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    eca4:	f898 3004 	ldrb.w	r3, [r8, #4]
    eca8:	f043 0303 	orr.w	r3, r3, #3
    ecac:	f888 3004 	strb.w	r3, [r8, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata)
    ecb0:	2317      	movs	r3, #23
    ecb2:	f888 3005 	strb.w	r3, [r8, #5]
		+ sizeof(struct pdu_data_llctrl_enc_req);
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    ecb6:	2303      	movs	r3, #3
    ecb8:	f888 3007 	strb.w	r3, [r8, #7]
	memcpy(&pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.rand[0],
    ecbc:	f105 016d 	add.w	r1, r5, #109	; 0x6d
    ecc0:	2208      	movs	r2, #8
    ecc2:	3004      	adds	r0, #4
    ecc4:	f7f2 f9e5 	bl	1092 <memcpy>
	       &conn->llcp.encryption.rand[0],
	       sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.rand));
	pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.ediv[0] =
		conn->llcp.encryption.ediv[0];
    ecc8:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
		+ sizeof(struct pdu_data_llctrl_enc_req);
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
	memcpy(&pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.rand[0],
	       &conn->llcp.encryption.rand[0],
	       sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.rand));
	pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.ediv[0] =
    eccc:	f888 3010 	strb.w	r3, [r8, #16]
		conn->llcp.encryption.ediv[0];
	pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.ediv[1] =
		conn->llcp.encryption.ediv[1];
    ecd0:	f895 3076 	ldrb.w	r3, [r5, #118]	; 0x76
	memcpy(&pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.rand[0],
	       &conn->llcp.encryption.rand[0],
	       sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.rand));
	pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.ediv[0] =
		conn->llcp.encryption.ediv[0];
	pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.ediv[1] =
    ecd4:	f888 3011 	strb.w	r3, [r8, #17]
		conn->llcp.encryption.ediv[1];
	/** @todo */
	memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.skdm[0], 0xcc,
    ecd8:	2208      	movs	r2, #8
    ecda:	21cc      	movs	r1, #204	; 0xcc
    ecdc:	f108 0012 	add.w	r0, r8, #18
    ece0:	f7f2 fa03 	bl	10ea <memset>
		sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.skdm));
	/** @todo */
	memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.ivm[0], 0xdd,
    ece4:	f108 001a 	add.w	r0, r8, #26
    ece8:	4652      	mov	r2, sl
    ecea:	21dd      	movs	r1, #221	; 0xdd
		if (_radio.role == ROLE_MASTER) {
			/* reused tx-ed PDU and send enc req */
			enc_req_reused_send(_radio.conn_curr, *node_tx);

			/* dont release ctrl PDU memory */
			*node_tx = NULL;
    ecec:	f04f 0800 	mov.w	r8, #0
		conn->llcp.encryption.ediv[1];
	/** @todo */
	memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.skdm[0], 0xcc,
		sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.skdm));
	/** @todo */
	memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.ivm[0], 0xdd,
    ecf0:	f7f2 f9fb 	bl	10ea <memset>
}

static inline u8_t isr_rx_conn_pkt_ack(struct pdu_data *pdu_data_tx,
				       struct radio_pdu_node_tx **node_tx)
{
	u8_t terminate = 0;
    ecf4:	4645      	mov	r5, r8
    ecf6:	e035      	b.n	ed64 <isr+0x8f4>

			/* dont release ctrl PDU memory */
			*node_tx = NULL;
		} else {
			/* pause data packet tx */
			_radio.conn_curr->pause_tx = 1;
    ecf8:	f895 30c0 	ldrb.w	r3, [r5, #192]	; 0xc0
    ecfc:	f043 0308 	orr.w	r3, r3, #8
    ed00:	f885 30c0 	strb.w	r3, [r5, #192]	; 0xc0
    ed04:	e02d      	b.n	ed62 <isr+0x8f2>
		}
		break;

	case PDU_DATA_LLCTRL_TYPE_REJECT_IND:
		/* resume data packet rx and tx */
		_radio.conn_curr->pause_rx = 0;
    ed06:	f895 30c0 	ldrb.w	r3, [r5, #192]	; 0xc0
		_radio.conn_curr->pause_tx = 0;
    ed0a:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    ed0e:	f36f 03c3 	bfc	r3, #3, #1
    ed12:	f885 30c0 	strb.w	r3, [r5, #192]	; 0xc0

		/* Procedure complete */
		_radio.conn_curr->procedure_expire = 0;
    ed16:	2300      	movs	r3, #0
    ed18:	876b      	strh	r3, [r5, #58]	; 0x3a
}

static inline u8_t isr_rx_conn_pkt_ack(struct pdu_data *pdu_data_tx,
				       struct radio_pdu_node_tx **node_tx)
{
	u8_t terminate = 0;
    ed1a:	461d      	mov	r5, r3
    ed1c:	e022      	b.n	ed64 <isr+0x8f4>
		break;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_ENC */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
	case PDU_DATA_LLCTRL_TYPE_LENGTH_REQ:
		if ((_radio.conn_curr->llcp_length.req !=
    ed1e:	f895 20b4 	ldrb.w	r2, [r5, #180]	; 0xb4
    ed22:	f895 30b5 	ldrb.w	r3, [r5, #181]	; 0xb5
    ed26:	429a      	cmp	r2, r3
    ed28:	d01b      	beq.n	ed62 <isr+0x8f2>
		     _radio.conn_curr->llcp_length.ack) &&
    ed2a:	f895 30b6 	ldrb.w	r3, [r5, #182]	; 0xb6
    ed2e:	f003 0203 	and.w	r2, r3, #3
    ed32:	2a01      	cmp	r2, #1
    ed34:	d115      	bne.n	ed62 <isr+0x8f2>
		    (_radio.conn_curr->llcp_length.state ==
		     LLCP_LENGTH_STATE_ACK_WAIT)){
			/* pause data packet tx */
			_radio.conn_curr->pause_tx = 1;
    ed36:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
    ed3a:	f042 0208 	orr.w	r2, r2, #8
    ed3e:	f885 20c0 	strb.w	r2, [r5, #192]	; 0xc0

			/* wait for response */
			_radio.conn_curr->llcp_length.state =
    ed42:	2202      	movs	r2, #2
    ed44:	f362 0301 	bfi	r3, r2, #0, #2
    ed48:	f885 30b6 	strb.w	r3, [r5, #182]	; 0xb6
    ed4c:	e009      	b.n	ed62 <isr+0x8f2>
		break;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
	case PDU_DATA_LLCTRL_TYPE_PHY_REQ:
		_radio.conn_curr->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
    ed4e:	f895 30be 	ldrb.w	r3, [r5, #190]	; 0xbe
    ed52:	2202      	movs	r2, #2
    ed54:	f362 0301 	bfi	r3, r2, #0, #2
    ed58:	f885 30be 	strb.w	r3, [r5, #190]	; 0xbe
    ed5c:	e001      	b.n	ed62 <isr+0x8f2>
isr_rx_conn_pkt(struct radio_pdu_node_rx *radio_pdu_node_rx,
		struct radio_pdu_node_tx **tx_release, u8_t *rx_enqueue)
{
	struct pdu_data *pdu_data_rx;
	struct pdu_data *pdu_data_tx;
	u8_t terminate = 0;
    ed5e:	4635      	mov	r5, r6
    ed60:	e000      	b.n	ed64 <isr+0x8f4>
}

static inline u8_t isr_rx_conn_pkt_ack(struct pdu_data *pdu_data_tx,
				       struct radio_pdu_node_tx **node_tx)
{
	u8_t terminate = 0;
    ed62:	2500      	movs	r5, #0
						isr_rx_conn_pkt_ack(pdu_data_tx,
								    &node_tx);
				}
			}

			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    ed64:	f8d4 3190 	ldr.w	r3, [r4, #400]	; 0x190
    ed68:	f893 2115 	ldrb.w	r2, [r3, #277]	; 0x115
    ed6c:	4416      	add	r6, r2
			if (_radio.conn_curr->packet_tx_head_offset ==
    ed6e:	f893 2114 	ldrb.w	r2, [r3, #276]	; 0x114
						isr_rx_conn_pkt_ack(pdu_data_tx,
								    &node_tx);
				}
			}

			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    ed72:	b2f6      	uxtb	r6, r6
			if (_radio.conn_curr->packet_tx_head_offset ==
    ed74:	42b2      	cmp	r2, r6
						isr_rx_conn_pkt_ack(pdu_data_tx,
								    &node_tx);
				}
			}

			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    ed76:	f883 6115 	strb.w	r6, [r3, #277]	; 0x115
			if (_radio.conn_curr->packet_tx_head_offset ==
    ed7a:	d12c      	bne.n	edd6 <isr+0x966>
{
	_radio.conn_curr->packet_tx_head_len = 0;
	_radio.conn_curr->packet_tx_head_offset = 0;

	/* release */
	if (_radio.conn_curr->pkt_tx_head == _radio.conn_curr->pkt_tx_ctrl) {
    ed7c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    ed80:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
}

static inline struct radio_pdu_node_tx *
isr_rx_conn_pkt_release(struct radio_pdu_node_tx *node_tx)
{
	_radio.conn_curr->packet_tx_head_len = 0;
    ed84:	2000      	movs	r0, #0
	_radio.conn_curr->packet_tx_head_offset = 0;

	/* release */
	if (_radio.conn_curr->pkt_tx_head == _radio.conn_curr->pkt_tx_ctrl) {
    ed86:	428a      	cmp	r2, r1
}

static inline struct radio_pdu_node_tx *
isr_rx_conn_pkt_release(struct radio_pdu_node_tx *node_tx)
{
	_radio.conn_curr->packet_tx_head_len = 0;
    ed88:	f883 0114 	strb.w	r0, [r3, #276]	; 0x114
	_radio.conn_curr->packet_tx_head_offset = 0;
    ed8c:	f883 0115 	strb.w	r0, [r3, #277]	; 0x115

	/* release */
	if (_radio.conn_curr->pkt_tx_head == _radio.conn_curr->pkt_tx_ctrl) {
    ed90:	d112      	bne.n	edb8 <isr+0x948>
		if (node_tx) {
    ed92:	f1b8 0f00 	cmp.w	r8, #0
    ed96:	d01e      	beq.n	edd6 <isr+0x966>
			_radio.conn_curr->pkt_tx_ctrl =
			    _radio.conn_curr->pkt_tx_ctrl->next;
    ed98:	6811      	ldr	r1, [r2, #0]
			_radio.conn_curr->pkt_tx_head =
				_radio.conn_curr->pkt_tx_ctrl;
			if (_radio.conn_curr->pkt_tx_ctrl ==
    ed9a:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
	_radio.conn_curr->packet_tx_head_offset = 0;

	/* release */
	if (_radio.conn_curr->pkt_tx_head == _radio.conn_curr->pkt_tx_ctrl) {
		if (node_tx) {
			_radio.conn_curr->pkt_tx_ctrl =
    ed9e:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
			    _radio.conn_curr->pkt_tx_ctrl->next;
			_radio.conn_curr->pkt_tx_head =
				_radio.conn_curr->pkt_tx_ctrl;
			if (_radio.conn_curr->pkt_tx_ctrl ==
    eda2:	4291      	cmp	r1, r2
	/* release */
	if (_radio.conn_curr->pkt_tx_head == _radio.conn_curr->pkt_tx_ctrl) {
		if (node_tx) {
			_radio.conn_curr->pkt_tx_ctrl =
			    _radio.conn_curr->pkt_tx_ctrl->next;
			_radio.conn_curr->pkt_tx_head =
    eda4:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
				_radio.conn_curr->pkt_tx_ctrl;
			if (_radio.conn_curr->pkt_tx_ctrl ==
			    _radio.conn_curr->pkt_tx_data) {
				_radio.conn_curr->pkt_tx_ctrl = NULL;
    eda8:	bf08      	it	eq
    edaa:	f8c3 0108 	streq.w	r0, [r3, #264]	; 0x108
			}

			mem_release(node_tx, &_radio. pkt_tx_ctrl_free);
    edae:	49b1      	ldr	r1, [pc, #708]	; (f074 <isr+0xc04>)
    edb0:	4640      	mov	r0, r8
    edb2:	f7fa fd64 	bl	987e <mem_release>
    edb6:	e00e      	b.n	edd6 <isr+0x966>
		}
	} else {
		if (_radio.conn_curr->pkt_tx_head ==
    edb8:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
    edbc:	428a      	cmp	r2, r1
    edbe:	6812      	ldr	r2, [r2, #0]
		    _radio.conn_curr->pkt_tx_data) {
			_radio.conn_curr->pkt_tx_data =
    edc0:	bf08      	it	eq
    edc2:	f8c3 210c 	streq.w	r2, [r3, #268]	; 0x10c
				_radio.conn_curr->pkt_tx_data->next;
		}
		_radio.conn_curr->pkt_tx_head =
    edc6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    edca:	e006      	b.n	edda <isr+0x96a>
			if (_radio.conn_curr->packet_tx_head_offset ==
			    _radio.conn_curr->packet_tx_head_len) {
				*tx_release = isr_rx_conn_pkt_release(node_tx);
			}
		} else {
			_radio.conn_curr->empty = 0;
    edcc:	f360 13c7 	bfi	r3, r0, #7, #1
    edd0:	f885 30c0 	strb.w	r3, [r5, #192]	; 0xc0
    edd4:	e00b      	b.n	edee <isr+0x97e>

static inline void isr_rx_conn(u8_t crc_ok, u8_t trx_done,
			       u8_t rssi_ready)
{
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	struct radio_pdu_node_tx *tx_release = NULL;
    edd6:	f04f 0800 	mov.w	r8, #0
			_radio.conn_curr->empty = 0;
		}
	}

	/* local initiated disconnect procedure completed */
	if (terminate) {
    edda:	b155      	cbz	r5, edf2 <isr+0x982>
		connection_release(_radio.conn_curr);
    eddc:	f8d4 0190 	ldr.w	r0, [r4, #400]	; 0x190
    ede0:	f7fd f972 	bl	c0c8 <connection_release>
		_radio.conn_curr = NULL;
    ede4:	2300      	movs	r3, #0
    ede6:	f8c4 3190 	str.w	r3, [r4, #400]	; 0x190
    edea:	f000 bed3 	b.w	fb94 <isr+0x1724>
		if (_radio.conn_curr->pkt_tx_head ==
		    _radio.conn_curr->pkt_tx_data) {
			_radio.conn_curr->pkt_tx_data =
				_radio.conn_curr->pkt_tx_data->next;
		}
		_radio.conn_curr->pkt_tx_head =
    edee:	f04f 0800 	mov.w	r8, #0

		return terminate;
	}

	/* process received data */
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
    edf2:	f8d4 3190 	ldr.w	r3, [r4, #400]	; 0x190
    edf6:	7a3a      	ldrb	r2, [r7, #8]
    edf8:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
    edfc:	4d9e      	ldr	r5, [pc, #632]	; (f078 <isr+0xc08>)
    edfe:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    ee02:	f3c3 0340 	ubfx	r3, r3, #1, #1
    ee06:	429a      	cmp	r2, r3
    ee08:	f040 8650 	bne.w	faac <isr+0x163c>
	/* check so that we will NEVER use the rx buffer reserved for empty
	 * packet and internal control enqueue
	 */
	    (packet_rx_reserve_get(3) != 0) &&
    ee0c:	2003      	movs	r0, #3
    ee0e:	f7fc f977 	bl	b100 <packet_rx_reserve_get>

		return terminate;
	}

	/* process received data */
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
    ee12:	2800      	cmp	r0, #0
    ee14:	f000 864a 	beq.w	faac <isr+0x163c>
	/* check so that we will NEVER use the rx buffer reserved for empty
	 * packet and internal control enqueue
	 */
	    (packet_rx_reserve_get(3) != 0) &&
    ee18:	f895 31fe 	ldrb.w	r3, [r5, #510]	; 0x1fe
    ee1c:	b3a3      	cbz	r3, ee88 <isr+0xa18>
	    ((_radio.fc_ena == 0) ||
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
    ee1e:	f8d5 21c8 	ldr.w	r2, [r5, #456]	; 0x1c8
    ee22:	f8d5 31cc 	ldr.w	r3, [r5, #460]	; 0x1cc
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
	/* check so that we will NEVER use the rx buffer reserved for empty
	 * packet and internal control enqueue
	 */
	    (packet_rx_reserve_get(3) != 0) &&
	    ((_radio.fc_ena == 0) ||
    ee26:	429a      	cmp	r2, r3
    ee28:	d105      	bne.n	ee36 <isr+0x9c6>
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
	      (_radio.fc_req == _radio.fc_ack)) ||
    ee2a:	f895 31fc 	ldrb.w	r3, [r5, #508]	; 0x1fc
	/* check so that we will NEVER use the rx buffer reserved for empty
	 * packet and internal control enqueue
	 */
	    (packet_rx_reserve_get(3) != 0) &&
	    ((_radio.fc_ena == 0) ||
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
    ee2e:	f895 11fd 	ldrb.w	r1, [r5, #509]	; 0x1fd
    ee32:	4299      	cmp	r1, r3
    ee34:	d028      	beq.n	ee88 <isr+0xa18>
	      (_radio.fc_req == _radio.fc_ack)) ||
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
    ee36:	f8d4 11cc 	ldr.w	r1, [r4, #460]	; 0x1cc
    ee3a:	4b8f      	ldr	r3, [pc, #572]	; (f078 <isr+0xc08>)
	 * packet and internal control enqueue
	 */
	    (packet_rx_reserve_get(3) != 0) &&
	    ((_radio.fc_ena == 0) ||
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
	      (_radio.fc_req == _radio.fc_ack)) ||
    ee3c:	428a      	cmp	r2, r1
    ee3e:	f000 8635 	beq.w	faac <isr+0x163c>
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
	      (_radio.fc_req != _radio.fc_ack) &&
    ee42:	f893 21fc 	ldrb.w	r2, [r3, #508]	; 0x1fc
	 */
	    (packet_rx_reserve_get(3) != 0) &&
	    ((_radio.fc_ena == 0) ||
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
	      (_radio.fc_req == _radio.fc_ack)) ||
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
    ee46:	f893 11fd 	ldrb.w	r1, [r3, #509]	; 0x1fd
    ee4a:	4291      	cmp	r1, r2
    ee4c:	f000 862e 	beq.w	faac <isr+0x163c>
	      (_radio.fc_req != _radio.fc_ack) &&
		(((_radio.fc_req == 0) &&
    ee50:	f893 21fc 	ldrb.w	r2, [r3, #508]	; 0x1fc
	    (packet_rx_reserve_get(3) != 0) &&
	    ((_radio.fc_ena == 0) ||
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
	      (_radio.fc_req == _radio.fc_ack)) ||
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
	      (_radio.fc_req != _radio.fc_ack) &&
    ee54:	b932      	cbnz	r2, ee64 <isr+0x9f4>
		(((_radio.fc_req == 0) &&
		  (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] ==
		   _radio.conn_curr->handle)) ||
    ee56:	f8d3 1190 	ldr.w	r1, [r3, #400]	; 0x190
	    ((_radio.fc_ena == 0) ||
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
	      (_radio.fc_req == _radio.fc_ack)) ||
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
	      (_radio.fc_req != _radio.fc_ack) &&
		(((_radio.fc_req == 0) &&
    ee5a:	f8b3 21fa 	ldrh.w	r2, [r3, #506]	; 0x1fa
    ee5e:	8c0b      	ldrh	r3, [r1, #32]
    ee60:	429a      	cmp	r2, r3
    ee62:	d011      	beq.n	ee88 <isr+0xa18>
		  (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] ==
		   _radio.conn_curr->handle)) ||
		 ((_radio.fc_req != 0) &&
    ee64:	f894 31fc 	ldrb.w	r3, [r4, #508]	; 0x1fc
    ee68:	4a83      	ldr	r2, [pc, #524]	; (f078 <isr+0xc08>)
	      (_radio.fc_req == _radio.fc_ack)) ||
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
	      (_radio.fc_req != _radio.fc_ack) &&
		(((_radio.fc_req == 0) &&
		  (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] ==
		   _radio.conn_curr->handle)) ||
    ee6a:	2b00      	cmp	r3, #0
    ee6c:	f000 861e 	beq.w	faac <isr+0x163c>
		 ((_radio.fc_req != 0) &&
		  (_radio.fc_handle[_radio.fc_req - 1] ==
    ee70:	f892 31fc 	ldrb.w	r3, [r2, #508]	; 0x1fc
		   _radio.conn_curr->handle)))))) {
    ee74:	f8d2 1190 	ldr.w	r1, [r2, #400]	; 0x190
	      (_radio.fc_req != _radio.fc_ack) &&
		(((_radio.fc_req == 0) &&
		  (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] ==
		   _radio.conn_curr->handle)) ||
		 ((_radio.fc_req != 0) &&
		  (_radio.fc_handle[_radio.fc_req - 1] ==
    ee78:	eb02 0343 	add.w	r3, r2, r3, lsl #1
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
	      (_radio.fc_req != _radio.fc_ack) &&
		(((_radio.fc_req == 0) &&
		  (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] ==
		   _radio.conn_curr->handle)) ||
		 ((_radio.fc_req != 0) &&
    ee7c:	f8b3 21f4 	ldrh.w	r2, [r3, #500]	; 0x1f4
    ee80:	8c0b      	ldrh	r3, [r1, #32]
    ee82:	429a      	cmp	r2, r3
    ee84:	f040 8612 	bne.w	faac <isr+0x163c>
		  (_radio.fc_handle[_radio.fc_req - 1] ==
		   _radio.conn_curr->handle)))))) {
		u8_t ccm_rx_increment = 0;

		if (pdu_data_rx->len != 0) {
    ee88:	7a79      	ldrb	r1, [r7, #9]
			/* If required, wait for CCM to finish
			 */
			if (_radio.conn_curr->enc_rx) {
    ee8a:	f8d4 3190 	ldr.w	r3, [r4, #400]	; 0x190
		 ((_radio.fc_req != 0) &&
		  (_radio.fc_handle[_radio.fc_req - 1] ==
		   _radio.conn_curr->handle)))))) {
		u8_t ccm_rx_increment = 0;

		if (pdu_data_rx->len != 0) {
    ee8e:	2900      	cmp	r1, #0
    ee90:	f000 85d0 	beq.w	fa34 <isr+0x15c4>
			/* If required, wait for CCM to finish
			 */
			if (_radio.conn_curr->enc_rx) {
    ee94:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
    ee98:	f003 0310 	and.w	r3, r3, #16
    ee9c:	f003 0aff 	and.w	sl, r3, #255	; 0xff
    eea0:	b173      	cbz	r3, eec0 <isr+0xa50>
				u32_t done;

				done = radio_ccm_is_done();
    eea2:	f7fb f8ab 	bl	9ffc <radio_ccm_is_done>
				LL_ASSERT(done);
    eea6:	b948      	cbnz	r0, eebc <isr+0xa4c>
    eea8:	4b74      	ldr	r3, [pc, #464]	; (f07c <isr+0xc0c>)
    eeaa:	9301      	str	r3, [sp, #4]
    eeac:	4b74      	ldr	r3, [pc, #464]	; (f080 <isr+0xc10>)
    eeae:	9300      	str	r3, [sp, #0]
    eeb0:	4a74      	ldr	r2, [pc, #464]	; (f084 <isr+0xc14>)
    eeb2:	4b75      	ldr	r3, [pc, #468]	; (f088 <isr+0xc18>)
    eeb4:	4975      	ldr	r1, [pc, #468]	; (f08c <isr+0xc1c>)
    eeb6:	4876      	ldr	r0, [pc, #472]	; (f090 <isr+0xc20>)
    eeb8:	f001 b896 	b.w	ffe8 <isr+0x1b78>

				ccm_rx_increment = 1;
    eebc:	f04f 0a01 	mov.w	sl, #1
			}

			/* MIC Failure Check or data rx during pause */
			if (((_radio.conn_curr->enc_rx)	&&
    eec0:	f8d4 3190 	ldr.w	r3, [r4, #400]	; 0x190
    eec4:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
    eec8:	06da      	lsls	r2, r3, #27
    eeca:	d406      	bmi.n	eeda <isr+0xa6a>
			     !radio_ccm_mic_is_valid()) ||
			    ((_radio.conn_curr->pause_rx) &&
    eecc:	f8d4 5190 	ldr.w	r5, [r4, #400]	; 0x190
				ccm_rx_increment = 1;
			}

			/* MIC Failure Check or data rx during pause */
			if (((_radio.conn_curr->enc_rx)	&&
			     !radio_ccm_mic_is_valid()) ||
    eed0:	f895 30c0 	ldrb.w	r3, [r5, #192]	; 0xc0
    eed4:	075b      	lsls	r3, r3, #29
    eed6:	d413      	bmi.n	ef00 <isr+0xa90>
    eed8:	e02a      	b.n	ef30 <isr+0xac0>
    eeda:	f7fb f8ad 	bl	a038 <radio_ccm_mic_is_valid>

				ccm_rx_increment = 1;
			}

			/* MIC Failure Check or data rx during pause */
			if (((_radio.conn_curr->enc_rx)	&&
    eede:	2800      	cmp	r0, #0
    eee0:	d1f4      	bne.n	eecc <isr+0xa5c>
			     !radio_ccm_mic_is_valid()) ||
			    ((_radio.conn_curr->pause_rx) &&
			     (pdu_data_rx->ll_id != PDU_DATA_LLID_CTRL))) {
				_radio.state = STATE_CLOSE;
    eee2:	2303      	movs	r3, #3
    eee4:	7423      	strb	r3, [r4, #16]
				radio_disable();
    eee6:	f7fa fe81 	bl	9bec <radio_disable>

				/* assert if radio packet ptr is not set and
				 * radio started tx */
				LL_ASSERT(!radio_is_ready());
    eeea:	f7fa fe99 	bl	9c20 <radio_is_ready>
			/* MIC Failure Check or data rx during pause */
			if (((_radio.conn_curr->enc_rx)	&&
			     !radio_ccm_mic_is_valid()) ||
			    ((_radio.conn_curr->pause_rx) &&
			     (pdu_data_rx->ll_id != PDU_DATA_LLID_CTRL))) {
				_radio.state = STATE_CLOSE;
    eeee:	4d62      	ldr	r5, [pc, #392]	; (f078 <isr+0xc08>)
				radio_disable();

				/* assert if radio packet ptr is not set and
				 * radio started tx */
				LL_ASSERT(!radio_is_ready());
    eef0:	4606      	mov	r6, r0
    eef2:	b180      	cbz	r0, ef16 <isr+0xaa6>
    eef4:	4b61      	ldr	r3, [pc, #388]	; (f07c <isr+0xc0c>)
    eef6:	9301      	str	r3, [sp, #4]
    eef8:	4b61      	ldr	r3, [pc, #388]	; (f080 <isr+0xc10>)
    eefa:	9300      	str	r3, [sp, #0]
    eefc:	4b62      	ldr	r3, [pc, #392]	; (f088 <isr+0xc18>)
    eefe:	e005      	b.n	ef0c <isr+0xa9c>
			}

			/* MIC Failure Check or data rx during pause */
			if (((_radio.conn_curr->enc_rx)	&&
			     !radio_ccm_mic_is_valid()) ||
			    ((_radio.conn_curr->pause_rx) &&
    ef00:	7a3b      	ldrb	r3, [r7, #8]
    ef02:	f003 0303 	and.w	r3, r3, #3
    ef06:	2b03      	cmp	r3, #3
    ef08:	d1eb      	bne.n	eee2 <isr+0xa72>
    ef0a:	e011      	b.n	ef30 <isr+0xac0>
				_radio.state = STATE_CLOSE;
				radio_disable();

				/* assert if radio packet ptr is not set and
				 * radio started tx */
				LL_ASSERT(!radio_is_ready());
    ef0c:	4a5d      	ldr	r2, [pc, #372]	; (f084 <isr+0xc14>)
    ef0e:	495f      	ldr	r1, [pc, #380]	; (f08c <isr+0xc1c>)
    ef10:	4860      	ldr	r0, [pc, #384]	; (f094 <isr+0xc24>)
    ef12:	f001 b869 	b.w	ffe8 <isr+0x1b78>

				terminate_ind_rx_enqueue(_radio.conn_curr,
    ef16:	213d      	movs	r1, #61	; 0x3d
    ef18:	f8d5 0190 	ldr.w	r0, [r5, #400]	; 0x190
    ef1c:	f7fd fd40 	bl	c9a0 <terminate_ind_rx_enqueue>
							 0x3d);

				connection_release(_radio.conn_curr);
    ef20:	f8d5 0190 	ldr.w	r0, [r5, #400]	; 0x190
    ef24:	f7fd f8d0 	bl	c0c8 <connection_release>
				_radio.conn_curr = NULL;
    ef28:	f8c5 6190 	str.w	r6, [r5, #400]	; 0x190
    ef2c:	f000 be32 	b.w	fb94 <isr+0x1724>
				return 1; /* terminated */
			}

#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_PING)
			/* stop authenticated payload (pre) timeout */
			_radio.conn_curr->appto_expire = 0;
    ef30:	2300      	movs	r3, #0
    ef32:	87eb      	strh	r3, [r5, #62]	; 0x3e
			_radio.conn_curr->apto_expire = 0;
    ef34:	f8a5 3042 	strh.w	r3, [r5, #66]	; 0x42
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

			switch (pdu_data_rx->ll_id) {
    ef38:	7a3a      	ldrb	r2, [r7, #8]
    ef3a:	f012 0203 	ands.w	r2, r2, #3
    ef3e:	f000 8573 	beq.w	fa28 <isr+0x15b8>
    ef42:	2a02      	cmp	r2, #2
    ef44:	f240 8137 	bls.w	f1b6 <isr+0xd46>
{
	struct pdu_data *pdu_data_rx;
	u8_t nack = 0;

	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
	switch (pdu_data_rx->payload.llctrl.opcode) {
    ef48:	7afe      	ldrb	r6, [r7, #11]
    ef4a:	2e18      	cmp	r6, #24
    ef4c:	f200 8551 	bhi.w	f9f2 <isr+0x1582>
    ef50:	e8df f016 	tbh	[pc, r6, lsl #1]
    ef54:	007a0019 	.word	0x007a0019
    ef58:	00c500c2 	.word	0x00c500c2
    ef5c:	00f500df 	.word	0x00f500df
    ef60:	034d0101 	.word	0x034d0101
    ef64:	01680134 	.word	0x01680134
    ef68:	01880179 	.word	0x01880179
    ef6c:	01fb01a0 	.word	0x01fb01a0
    ef70:	02060134 	.word	0x02060134
    ef74:	02ac0864 	.word	0x02ac0864
    ef78:	034a0336 	.word	0x034a0336
    ef7c:	03910391 	.word	0x03910391
    ef80:	04b0042e 	.word	0x04b0042e
    ef84:	04d9      	.short	0x04d9
	packet_rx_callback();
}

static u32_t conn_update(struct connection *conn, struct pdu_data *pdu_data_rx)
{
	if (((pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.instant -
    ef86:	f8b7 3015 	ldrh.w	r3, [r7, #21]
    ef8a:	8c6a      	ldrh	r2, [r5, #34]	; 0x22
    ef8c:	1a9b      	subs	r3, r3, r2
    ef8e:	b29b      	uxth	r3, r3
    ef90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    ef94:	f281 803f 	bge.w	10016 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x17>
	      conn->event_counter) & 0xFFFF) > 0x7FFF) {
		return 1;
	}

	LL_ASSERT((conn->llcp_req == conn->llcp_ack) ||
    ef98:	f895 3069 	ldrb.w	r3, [r5, #105]	; 0x69
    ef9c:	f895 2068 	ldrb.w	r2, [r5, #104]	; 0x68
    efa0:	429a      	cmp	r2, r3
    efa2:	d013      	beq.n	efcc <isr+0xb5c>
    efa4:	f895 206a 	ldrb.w	r2, [r5, #106]	; 0x6a
    efa8:	2a01      	cmp	r2, #1
    efaa:	d105      	bne.n	efb8 <isr+0xb48>
    efac:	f895 2095 	ldrb.w	r2, [r5, #149]	; 0x95
    efb0:	f002 0207 	and.w	r2, r2, #7
    efb4:	2a05      	cmp	r2, #5
    efb6:	d009      	beq.n	efcc <isr+0xb5c>
    efb8:	4b30      	ldr	r3, [pc, #192]	; (f07c <isr+0xc0c>)
    efba:	9301      	str	r3, [sp, #4]
    efbc:	4b30      	ldr	r3, [pc, #192]	; (f080 <isr+0xc10>)
    efbe:	9300      	str	r3, [sp, #0]
    efc0:	4a30      	ldr	r2, [pc, #192]	; (f084 <isr+0xc14>)
    efc2:	4b35      	ldr	r3, [pc, #212]	; (f098 <isr+0xc28>)
    efc4:	4931      	ldr	r1, [pc, #196]	; (f08c <isr+0xc1c>)
    efc6:	4835      	ldr	r0, [pc, #212]	; (f09c <isr+0xc2c>)
    efc8:	f001 b80e 	b.w	ffe8 <isr+0x1b78>
		    LLCP_CONN_STATE_RSP_WAIT)));

	/* set mutex, if only not already set. As a master the mutex shall
	 * be set, but a slave we accept it as new 'set' of mutex.
	 */
	if (_radio.conn_upd == 0) {
    efcc:	f8d4 2204 	ldr.w	r2, [r4, #516]	; 0x204
    efd0:	b982      	cbnz	r2, eff4 <isr+0xb84>
		LL_ASSERT(conn->role.slave.role != 0);
    efd2:	f895 2044 	ldrb.w	r2, [r5, #68]	; 0x44
    efd6:	07d6      	lsls	r6, r2, #31
    efd8:	d409      	bmi.n	efee <isr+0xb7e>
    efda:	4b28      	ldr	r3, [pc, #160]	; (f07c <isr+0xc0c>)
    efdc:	9301      	str	r3, [sp, #4]
    efde:	4b28      	ldr	r3, [pc, #160]	; (f080 <isr+0xc10>)
    efe0:	9300      	str	r3, [sp, #0]
    efe2:	4a28      	ldr	r2, [pc, #160]	; (f084 <isr+0xc14>)
    efe4:	4b2c      	ldr	r3, [pc, #176]	; (f098 <isr+0xc28>)
    efe6:	4929      	ldr	r1, [pc, #164]	; (f08c <isr+0xc1c>)
    efe8:	482d      	ldr	r0, [pc, #180]	; (f0a0 <isr+0xc30>)
    efea:	f000 bffd 	b.w	ffe8 <isr+0x1b78>

		_radio.conn_upd = conn;
    efee:	4a22      	ldr	r2, [pc, #136]	; (f078 <isr+0xc08>)
    eff0:	f8c2 5204 	str.w	r5, [r2, #516]	; 0x204
	}

	conn->llcp.connection_update.win_size =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.win_size;
    eff4:	7b3a      	ldrb	r2, [r7, #12]
		LL_ASSERT(conn->role.slave.role != 0);

		_radio.conn_upd = conn;
	}

	conn->llcp.connection_update.win_size =
    eff6:	f885 2094 	strb.w	r2, [r5, #148]	; 0x94
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.win_size;
	conn->llcp.connection_update.win_offset_us =
    effa:	f8b7 100d 	ldrh.w	r1, [r7, #13]
    effe:	f240 42e2 	movw	r2, #1250	; 0x4e2
    f002:	434a      	muls	r2, r1
    f004:	f8c5 208c 	str.w	r2, [r5, #140]	; 0x8c
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.win_offset *
		1250;
	conn->llcp.connection_update.interval =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.interval;
    f008:	f8b7 200f 	ldrh.w	r2, [r7, #15]
	conn->llcp.connection_update.win_size =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.win_size;
	conn->llcp.connection_update.win_offset_us =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.win_offset *
		1250;
	conn->llcp.connection_update.interval =
    f00c:	f8a5 206c 	strh.w	r2, [r5, #108]	; 0x6c
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.interval;
	conn->llcp.connection_update.latency =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.latency;
    f010:	f8b7 2011 	ldrh.w	r2, [r7, #17]
	conn->llcp.connection_update.win_offset_us =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.win_offset *
		1250;
	conn->llcp.connection_update.interval =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.interval;
	conn->llcp.connection_update.latency =
    f014:	f8a5 206e 	strh.w	r2, [r5, #110]	; 0x6e
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.latency;
	conn->llcp.connection_update.timeout =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.timeout;
    f018:	f8b7 2013 	ldrh.w	r2, [r7, #19]
		1250;
	conn->llcp.connection_update.interval =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.interval;
	conn->llcp.connection_update.latency =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.latency;
	conn->llcp.connection_update.timeout =
    f01c:	f8a5 2070 	strh.w	r2, [r5, #112]	; 0x70
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.timeout;
	conn->llcp.connection_update.instant =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.instant;
    f020:	f8b7 2015 	ldrh.w	r2, [r7, #21]
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.interval;
	conn->llcp.connection_update.latency =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.latency;
	conn->llcp.connection_update.timeout =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.timeout;
	conn->llcp.connection_update.instant =
    f024:	f8a5 2074 	strh.w	r2, [r5, #116]	; 0x74
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.instant;
	conn->llcp.connection_update.state = LLCP_CONN_STATE_INPROG;
    f028:	f895 2095 	ldrb.w	r2, [r5, #149]	; 0x95
	conn->llcp.connection_update.is_internal = 0;
    f02c:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
    f030:	f36f 02c4 	bfc	r2, #3, #2
    f034:	f885 2095 	strb.w	r2, [r5, #149]	; 0x95

	conn->llcp_type = LLCP_CONNECTION_UPDATE;
	conn->llcp_ack--;
    f038:	3b01      	subs	r3, #1
	conn->llcp.connection_update.instant =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.instant;
	conn->llcp.connection_update.state = LLCP_CONN_STATE_INPROG;
	conn->llcp.connection_update.is_internal = 0;

	conn->llcp_type = LLCP_CONNECTION_UPDATE;
    f03a:	2201      	movs	r2, #1
    f03c:	f885 206a 	strb.w	r2, [r5, #106]	; 0x6a
	conn->llcp_ack--;
    f040:	f885 3069 	strb.w	r3, [r5, #105]	; 0x69
    f044:	f000 bc5c 	b.w	f900 <isr+0x1490>
}

static u32_t chan_map_update(struct connection *conn,
			     struct pdu_data *pdu_data_rx)
{
	if (((pdu_data_rx->payload.llctrl.ctrldata.chan_map_ind.instant -
    f048:	f8b7 3011 	ldrh.w	r3, [r7, #17]
    f04c:	8c6a      	ldrh	r2, [r5, #34]	; 0x22
    f04e:	1a9b      	subs	r3, r3, r2
    f050:	b29b      	uxth	r3, r3
    f052:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    f056:	f280 87de 	bge.w	10016 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x17>
	      conn->event_counter) & 0xffff) > 0x7fff) {
		return 1;
	}

	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    f05a:	f895 2068 	ldrb.w	r2, [r5, #104]	; 0x68
    f05e:	f895 3069 	ldrb.w	r3, [r5, #105]	; 0x69
    f062:	429a      	cmp	r2, r3
    f064:	d020      	beq.n	f0a8 <isr+0xc38>
    f066:	4b05      	ldr	r3, [pc, #20]	; (f07c <isr+0xc0c>)
    f068:	9301      	str	r3, [sp, #4]
    f06a:	4b05      	ldr	r3, [pc, #20]	; (f080 <isr+0xc10>)
    f06c:	9300      	str	r3, [sp, #0]
    f06e:	4b0d      	ldr	r3, [pc, #52]	; (f0a4 <isr+0xc34>)
    f070:	f000 bc85 	b.w	f97e <isr+0x150e>
    f074:	20001648 	.word	0x20001648
    f078:	20001470 	.word	0x20001470
    f07c:	00013df4 	.word	0x00013df4
    f080:	00013df9 	.word	0x00013df9
    f084:	00013db4 	.word	0x00013db4
    f088:	00016b3b 	.word	0x00016b3b
    f08c:	00013dbb 	.word	0x00013dbb
    f090:	00015990 	.word	0x00015990
    f094:	0001563c 	.word	0x0001563c
    f098:	00016937 	.word	0x00016937
    f09c:	000159b6 	.word	0x000159b6
    f0a0:	00015a58 	.word	0x00015a58
    f0a4:	00016ab8 	.word	0x00016ab8

	memcpy(&conn->llcp.chan_map.chm[0],
    f0a8:	2205      	movs	r2, #5
    f0aa:	f107 010c 	add.w	r1, r7, #12
    f0ae:	f105 006d 	add.w	r0, r5, #109	; 0x6d
    f0b2:	f7f1 ffee 	bl	1092 <memcpy>
	       &pdu_data_rx->payload.llctrl.ctrldata.chan_map_ind.chm[0],
	       sizeof(conn->llcp.chan_map.chm));
	conn->llcp.chan_map.instant =
		pdu_data_rx->payload.llctrl.ctrldata.chan_map_ind.instant;
    f0b6:	f8b7 3011 	ldrh.w	r3, [r7, #17]
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);

	memcpy(&conn->llcp.chan_map.chm[0],
	       &pdu_data_rx->payload.llctrl.ctrldata.chan_map_ind.chm[0],
	       sizeof(conn->llcp.chan_map.chm));
	conn->llcp.chan_map.instant =
    f0ba:	f8a5 3072 	strh.w	r3, [r5, #114]	; 0x72
		pdu_data_rx->payload.llctrl.ctrldata.chan_map_ind.instant;
	conn->llcp.chan_map.initiate = 0;

	conn->llcp_type = LLCP_CHAN_MAP;
    f0be:	2302      	movs	r3, #2
    f0c0:	f885 306a 	strb.w	r3, [r5, #106]	; 0x6a
	conn->llcp_ack--;
    f0c4:	f895 3069 	ldrb.w	r3, [r5, #105]	; 0x69
	memcpy(&conn->llcp.chan_map.chm[0],
	       &pdu_data_rx->payload.llctrl.ctrldata.chan_map_ind.chm[0],
	       sizeof(conn->llcp.chan_map.chm));
	conn->llcp.chan_map.instant =
		pdu_data_rx->payload.llctrl.ctrldata.chan_map_ind.instant;
	conn->llcp.chan_map.initiate = 0;
    f0c8:	2600      	movs	r6, #0

	conn->llcp_type = LLCP_CHAN_MAP;
	conn->llcp_ack--;
    f0ca:	3b01      	subs	r3, #1
	memcpy(&conn->llcp.chan_map.chm[0],
	       &pdu_data_rx->payload.llctrl.ctrldata.chan_map_ind.chm[0],
	       sizeof(conn->llcp.chan_map.chm));
	conn->llcp.chan_map.instant =
		pdu_data_rx->payload.llctrl.ctrldata.chan_map_ind.instant;
	conn->llcp.chan_map.initiate = 0;
    f0cc:	f885 606c 	strb.w	r6, [r5, #108]	; 0x6c

	conn->llcp_type = LLCP_CHAN_MAP;
	conn->llcp_ack--;
    f0d0:	f885 3069 	strb.w	r3, [r5, #105]	; 0x69
    f0d4:	f000 bcc1 	b.w	fa5a <isr+0x15ea>
		break;

	case PDU_DATA_LLCTRL_TYPE_TERMINATE_IND:
		/* Ack and then terminate */
		_radio.conn_curr->llcp_terminate.reason_peer =
			pdu_data_rx->payload.llctrl.ctrldata.terminate_ind.error_code;
    f0d8:	7b3b      	ldrb	r3, [r7, #12]
    f0da:	f000 bf9d 	b.w	10018 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x19>
		break;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_ENC)
	case PDU_DATA_LLCTRL_TYPE_ENC_REQ:
		/* things from master stored for session key calculation */
		memcpy(&_radio.conn_curr->llcp.encryption.skd[0],
    f0de:	2208      	movs	r2, #8
    f0e0:	f107 0116 	add.w	r1, r7, #22
    f0e4:	f105 0087 	add.w	r0, r5, #135	; 0x87
    f0e8:	f7f1 ffd3 	bl	1092 <memcpy>
		       &pdu_data_rx->payload.llctrl.ctrldata.enc_req.skdm[0],
		       8);
		memcpy(&_radio.conn_curr->ccm_rx.iv[0],
    f0ec:	f8d4 0190 	ldr.w	r0, [r4, #400]	; 0x190
    f0f0:	2204      	movs	r2, #4
    f0f2:	f107 011e 	add.w	r1, r7, #30
    f0f6:	30da      	adds	r0, #218	; 0xda
    f0f8:	f7f1 ffcb 	bl	1092 <memcpy>
		       &pdu_data_rx->payload.llctrl.ctrldata.enc_req.ivm[0], 4);

		/* pause rx data packets */
		_radio.conn_curr->pause_rx = 1;
    f0fc:	f8d4 3190 	ldr.w	r3, [r4, #400]	; 0x190
    f100:	f893 20c0 	ldrb.w	r2, [r3, #192]	; 0xc0
    f104:	f042 0204 	orr.w	r2, r2, #4
    f108:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

		/* Start Procedure Timeout (this will not replace terminate
		 * procedure which always gets place before any packets
		 * going out, hence safe by design)
		 */
		_radio.conn_curr->procedure_expire =
    f10c:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
    f10e:	875a      	strh	r2, [r3, #58]	; 0x3a
    f110:	e051      	b.n	f1b6 <isr+0xd46>
		*rx_enqueue = 1;
		break;

	case PDU_DATA_LLCTRL_TYPE_ENC_RSP:
		/* things sent by slave stored for session key calculation */
		memcpy(&_radio.conn_curr->llcp.encryption.skd[8],
    f112:	2208      	movs	r2, #8
    f114:	f107 010c 	add.w	r1, r7, #12
    f118:	f105 008f 	add.w	r0, r5, #143	; 0x8f
    f11c:	f7f1 ffb9 	bl	1092 <memcpy>
		       &pdu_data_rx->payload.llctrl.ctrldata.enc_rsp.skds[0],
		       8);
		memcpy(&_radio.conn_curr->ccm_rx.iv[4],
    f120:	f8d4 0190 	ldr.w	r0, [r4, #400]	; 0x190
    f124:	2204      	movs	r2, #4
    f126:	f107 0114 	add.w	r1, r7, #20
    f12a:	30de      	adds	r0, #222	; 0xde
    f12c:	f7f1 ffb1 	bl	1092 <memcpy>
		       &pdu_data_rx->payload.llctrl.ctrldata.enc_rsp.ivs[0],
		       4);

		/* pause rx data packets */
		_radio.conn_curr->pause_rx = 1;
    f130:	f8d4 2190 	ldr.w	r2, [r4, #400]	; 0x190
    f134:	f892 30c0 	ldrb.w	r3, [r2, #192]	; 0xc0
    f138:	f043 0304 	orr.w	r3, r3, #4
    f13c:	e08e      	b.n	f25c <isr+0xdec>
		break;

	case PDU_DATA_LLCTRL_TYPE_START_ENC_REQ:
		LL_ASSERT(_radio.conn_curr->llcp_req ==
    f13e:	f895 2068 	ldrb.w	r2, [r5, #104]	; 0x68
    f142:	f895 3069 	ldrb.w	r3, [r5, #105]	; 0x69
    f146:	4293      	cmp	r3, r2
    f148:	d10f      	bne.n	f16a <isr+0xcfa>
			  _radio.conn_curr->llcp_ack);

		/* start enc rsp to be scheduled in master prepare */
		_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
    f14a:	2203      	movs	r2, #3
    f14c:	f885 206a 	strb.w	r2, [r5, #106]	; 0x6a
		_radio.conn_curr->llcp_ack--;
    f150:	3b01      	subs	r3, #1
    f152:	f000 bc4b 	b.w	f9ec <isr+0x157c>
		break;

	case PDU_DATA_LLCTRL_TYPE_START_ENC_RSP:
		if (_radio.role == ROLE_SLAVE) {
    f156:	7be2      	ldrb	r2, [r4, #15]
    f158:	b2d2      	uxtb	r2, r2
    f15a:	2a03      	cmp	r2, #3
    f15c:	d115      	bne.n	f18a <isr+0xd1a>

#if !defined(CONFIG_BLUETOOTH_CONTROLLER_FAST_ENC)
			LL_ASSERT(_radio.conn_curr->llcp_req ==
    f15e:	f895 1068 	ldrb.w	r1, [r5, #104]	; 0x68
    f162:	f895 3069 	ldrb.w	r3, [r5, #105]	; 0x69
    f166:	428b      	cmp	r3, r1
    f168:	d009      	beq.n	f17e <isr+0xd0e>
    f16a:	4bc5      	ldr	r3, [pc, #788]	; (f480 <isr+0x1010>)
    f16c:	9301      	str	r3, [sp, #4]
    f16e:	4bc5      	ldr	r3, [pc, #788]	; (f484 <isr+0x1014>)
    f170:	9300      	str	r3, [sp, #0]
    f172:	4ac5      	ldr	r2, [pc, #788]	; (f488 <isr+0x1018>)
    f174:	4bc5      	ldr	r3, [pc, #788]	; (f48c <isr+0x101c>)
    f176:	49c6      	ldr	r1, [pc, #792]	; (f490 <isr+0x1020>)
    f178:	48c6      	ldr	r0, [pc, #792]	; (f494 <isr+0x1024>)
    f17a:	f000 bf35 	b.w	ffe8 <isr+0x1b78>
				  _radio.conn_curr->llcp_ack);

			/* start enc rsp to be scheduled in slave  prepare */
			_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
			_radio.conn_curr->llcp_ack--;
    f17e:	3b01      	subs	r3, #1
#if !defined(CONFIG_BLUETOOTH_CONTROLLER_FAST_ENC)
			LL_ASSERT(_radio.conn_curr->llcp_req ==
				  _radio.conn_curr->llcp_ack);

			/* start enc rsp to be scheduled in slave  prepare */
			_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
    f180:	f885 206a 	strb.w	r2, [r5, #106]	; 0x6a
			_radio.conn_curr->llcp_ack--;
    f184:	f885 3069 	strb.w	r3, [r5, #105]	; 0x69
    f188:	e007      	b.n	f19a <isr+0xd2a>
			_radio.conn_curr->pause_tx = 0;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_FAST_ENC */

		} else {
			/* resume data packet rx and tx */
			_radio.conn_curr->pause_rx = 0;
    f18a:	f895 30c0 	ldrb.w	r3, [r5, #192]	; 0xc0
			_radio.conn_curr->pause_tx = 0;
    f18e:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    f192:	f36f 03c3 	bfc	r3, #3, #1
    f196:	f885 30c0 	strb.w	r3, [r5, #192]	; 0xc0
		}

		/* enqueue the start enc resp (encryption change/refresh) */
		if (_radio.conn_curr->refresh) {
    f19a:	f8d4 2190 	ldr.w	r2, [r4, #400]	; 0x190
    f19e:	f892 30c0 	ldrb.w	r3, [r2, #192]	; 0xc0
    f1a2:	065d      	lsls	r5, r3, #25
			_radio.conn_curr->refresh = 0;
    f1a4:	bf41      	itttt	mi
    f1a6:	f36f 1386 	bfcmi	r3, #6, #1
    f1aa:	f882 30c0 	strbmi.w	r3, [r2, #192]	; 0xc0

			/* key refresh event */
			radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
    f1ae:	2309      	movmi	r3, #9
    f1b0:	713b      	strbmi	r3, [r7, #4]
		}
		*rx_enqueue = 1;

		/* Procedure complete */
		_radio.conn_curr->procedure_expire = 0;
    f1b2:	2300      	movs	r3, #0
    f1b4:	8753      	strh	r3, [r2, #58]	; 0x3a
			_radio.conn_curr->refresh = 0;

			/* key refresh event */
			radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
		}
		*rx_enqueue = 1;
    f1b6:	2601      	movs	r6, #1
    f1b8:	f000 bc4f 	b.w	fa5a <isr+0x15ea>
		struct pdu_data_llctrl_feature_req *req;

		req = &pdu_data_rx->payload.llctrl.ctrldata.feature_req;

		/* AND the feature set to get Feature USED */
		_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
    f1bc:	7b3a      	ldrb	r2, [r7, #12]
    f1be:	4bb6      	ldr	r3, [pc, #728]	; (f498 <isr+0x1028>)
{
	struct radio_pdu_node_tx *node_tx;
	struct pdu_data *pdu_ctrl_tx;

	/* acquire tx mem */
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    f1c0:	48b6      	ldr	r0, [pc, #728]	; (f49c <isr+0x102c>)
		struct pdu_data_llctrl_feature_req *req;

		req = &pdu_data_rx->payload.llctrl.ctrldata.feature_req;

		/* AND the feature set to get Feature USED */
		_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
    f1c2:	4313      	orrs	r3, r2
    f1c4:	7b7a      	ldrb	r2, [r7, #13]
    f1c6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    f1ca:	7bba      	ldrb	r2, [r7, #14]
    f1cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    f1d0:	f8d5 2098 	ldr.w	r2, [r5, #152]	; 0x98
    f1d4:	f3c2 0210 	ubfx	r2, r2, #0, #17
    f1d8:	4013      	ands	r3, r2
    f1da:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
{
	struct radio_pdu_node_tx *node_tx;
	struct pdu_data *pdu_ctrl_tx;

	/* acquire tx mem */
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    f1de:	f7fa fb34 	bl	984a <mem_acquire>
	LL_ASSERT(node_tx);
    f1e2:	4606      	mov	r6, r0
    f1e4:	b930      	cbnz	r0, f1f4 <isr+0xd84>
    f1e6:	4ba6      	ldr	r3, [pc, #664]	; (f480 <isr+0x1010>)
    f1e8:	9301      	str	r3, [sp, #4]
    f1ea:	4ba6      	ldr	r3, [pc, #664]	; (f484 <isr+0x1014>)
    f1ec:	9300      	str	r3, [sp, #0]
    f1ee:	4bac      	ldr	r3, [pc, #688]	; (f4a0 <isr+0x1030>)
    f1f0:	f000 bc09 	b.w	fa06 <isr+0x1596>

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    f1f4:	7903      	ldrb	r3, [r0, #4]
    f1f6:	f043 0303 	orr.w	r3, r3, #3
    f1fa:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
		sizeof(struct pdu_data_llctrl_feature_rsp);
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
	memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.feature_rsp.features[0],
    f1fc:	2208      	movs	r2, #8
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
	LL_ASSERT(node_tx);

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
    f1fe:	2309      	movs	r3, #9
    f200:	7143      	strb	r3, [r0, #5]
		sizeof(struct pdu_data_llctrl_feature_rsp);
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
    f202:	71c3      	strb	r3, [r0, #7]
	memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.feature_rsp.features[0],
    f204:	2100      	movs	r1, #0
    f206:	4410      	add	r0, r2
    f208:	f7f1 ff6f 	bl	10ea <memset>
		0x00,
		sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.feature_rsp.features));
	pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[0] =
    f20c:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
    f210:	7233      	strb	r3, [r6, #8]
		conn->llcp_features & 0xFF;
	pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[1] =
    f212:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
    f216:	0a1b      	lsrs	r3, r3, #8
    f218:	7273      	strb	r3, [r6, #9]
		(conn->llcp_features >> 8) & 0xFF;
	pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[2] =
    f21a:	f8b5 309a 	ldrh.w	r3, [r5, #154]	; 0x9a
    f21e:	72b3      	strb	r3, [r6, #10]
		(conn->llcp_features >> 16) & 0xFF;

	ctrl_tx_enqueue(conn, node_tx);
    f220:	4631      	mov	r1, r6
    f222:	e3fd      	b.n	fa20 <isr+0x15b0>
		struct pdu_data_llctrl_feature_rsp *rsp;

		rsp = &pdu_data_rx->payload.llctrl.ctrldata.feature_rsp;

		/* AND the feature set to get Feature USED */
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
    f224:	7b3a      	ldrb	r2, [r7, #12]
    f226:	4b9c      	ldr	r3, [pc, #624]	; (f498 <isr+0x1028>)
    f228:	4313      	orrs	r3, r2
    f22a:	7b7a      	ldrb	r2, [r7, #13]
    f22c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    f230:	7bba      	ldrb	r2, [r7, #14]
    f232:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    f236:	f8d5 2098 	ldr.w	r2, [r5, #152]	; 0x98
    f23a:	f3c2 0210 	ubfx	r2, r2, #0, #17
    f23e:	4013      	ands	r3, r2
    f240:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
    f244:	e089      	b.n	f35a <isr+0xeea>
	}
	break;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_ENC)
	case PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_REQ:
		pause_enc_rsp_send(_radio.conn_curr);
    f246:	4628      	mov	r0, r5
    f248:	f7fd ffc2 	bl	d1d0 <pause_enc_rsp_send>

		/* pause data packet rx */
		_radio.conn_curr->pause_rx = 1;
    f24c:	f8d4 2190 	ldr.w	r2, [r4, #400]	; 0x190
    f250:	f892 30c0 	ldrb.w	r3, [r2, #192]	; 0xc0

		/* key refresh */
		_radio.conn_curr->refresh = 1;

		/* disable receive encryption */
		_radio.conn_curr->enc_rx = 0;
    f254:	f043 0344 	orr.w	r3, r3, #68	; 0x44
    f258:	f36f 1304 	bfc	r3, #4, #1
    f25c:	f882 30c0 	strb.w	r3, [r2, #192]	; 0xc0
    f260:	f000 bedc 	b.w	1001c <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x1d>
		break;

	case PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP:
		if (_radio.role == ROLE_MASTER) {
    f264:	7be3      	ldrb	r3, [r4, #15]
    f266:	2b04      	cmp	r3, #4
    f268:	d10b      	bne.n	f282 <isr+0xe12>
			/* reply with pause enc rsp */
			pause_enc_rsp_send(_radio.conn_curr);
    f26a:	4628      	mov	r0, r5
    f26c:	f7fd ffb0 	bl	d1d0 <pause_enc_rsp_send>

			/* disable receive encryption */
			_radio.conn_curr->enc_rx = 0;
    f270:	4b8c      	ldr	r3, [pc, #560]	; (f4a4 <isr+0x1034>)
    f272:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
    f276:	f893 20c0 	ldrb.w	r2, [r3, #192]	; 0xc0
    f27a:	f36f 1204 	bfc	r2, #4, #1
    f27e:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
		}

		/* pause data packet rx */
		_radio.conn_curr->pause_rx = 1;
    f282:	f8d4 2190 	ldr.w	r2, [r4, #400]	; 0x190
    f286:	f892 30c0 	ldrb.w	r3, [r2, #192]	; 0xc0

		/* disable transmit encryption */
		_radio.conn_curr->enc_tx = 0;
    f28a:	f043 0304 	orr.w	r3, r3, #4
    f28e:	f36f 1345 	bfc	r3, #5, #1
    f292:	e7e3      	b.n	f25c <isr+0xdec>
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_ENC */

	case PDU_DATA_LLCTRL_TYPE_VERSION_IND:
		_radio.conn_curr->llcp_version.version_number =
			pdu_data_rx->payload.llctrl.ctrldata.
			version_ind.version_number;
    f294:	7b3b      	ldrb	r3, [r7, #12]
		_radio.conn_curr->enc_tx = 0;
		break;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_ENC */

	case PDU_DATA_LLCTRL_TYPE_VERSION_IND:
		_radio.conn_curr->llcp_version.version_number =
    f296:	f885 309d 	strb.w	r3, [r5, #157]	; 0x9d
			pdu_data_rx->payload.llctrl.ctrldata.
			version_ind.version_number;
		_radio.conn_curr->llcp_version. company_id =
			pdu_data_rx->payload.llctrl.ctrldata.version_ind.company_id;
    f29a:	f8b7 300d 	ldrh.w	r3, [r7, #13]
		_radio.conn_curr->llcp_version.sub_version_number =
			pdu_data_rx->payload.llctrl.ctrldata.version_ind.sub_version_number;

		if ((_radio.conn_curr->llcp_version.tx != 0) &&
    f29e:	f895 609c 	ldrb.w	r6, [r5, #156]	; 0x9c

	case PDU_DATA_LLCTRL_TYPE_VERSION_IND:
		_radio.conn_curr->llcp_version.version_number =
			pdu_data_rx->payload.llctrl.ctrldata.
			version_ind.version_number;
		_radio.conn_curr->llcp_version. company_id =
    f2a2:	f8a5 309e 	strh.w	r3, [r5, #158]	; 0x9e
			pdu_data_rx->payload.llctrl.ctrldata.version_ind.company_id;
		_radio.conn_curr->llcp_version.sub_version_number =
			pdu_data_rx->payload.llctrl.ctrldata.version_ind.sub_version_number;
    f2a6:	f8b7 300f 	ldrh.w	r3, [r7, #15]
		_radio.conn_curr->llcp_version.version_number =
			pdu_data_rx->payload.llctrl.ctrldata.
			version_ind.version_number;
		_radio.conn_curr->llcp_version. company_id =
			pdu_data_rx->payload.llctrl.ctrldata.version_ind.company_id;
		_radio.conn_curr->llcp_version.sub_version_number =
    f2aa:	f8a5 30a0 	strh.w	r3, [r5, #160]	; 0xa0
			pdu_data_rx->payload.llctrl.ctrldata.version_ind.sub_version_number;

		if ((_radio.conn_curr->llcp_version.tx != 0) &&
    f2ae:	f006 0303 	and.w	r3, r6, #3
    f2b2:	2b01      	cmp	r3, #1
    f2b4:	f04f 0600 	mov.w	r6, #0
		    (_radio.conn_curr->llcp_version.rx == 0)) {
			/* enqueue the version ind */
			*rx_enqueue = 1;

			/* Procedure complete */
			_radio.conn_curr->procedure_expire = 0;
    f2b8:	bf04      	itt	eq
    f2ba:	876e      	strheq	r6, [r5, #58]	; 0x3a
			pdu_data_rx->payload.llctrl.ctrldata.version_ind.sub_version_number;

		if ((_radio.conn_curr->llcp_version.tx != 0) &&
		    (_radio.conn_curr->llcp_version.rx == 0)) {
			/* enqueue the version ind */
			*rx_enqueue = 1;
    f2bc:	461e      	moveq	r6, r3

			/* Procedure complete */
			_radio.conn_curr->procedure_expire = 0;
		}

		_radio.conn_curr->llcp_version.rx = 1;
    f2be:	f895 309c 	ldrb.w	r3, [r5, #156]	; 0x9c
    f2c2:	f043 0302 	orr.w	r3, r3, #2

		if (_radio.conn_curr->llcp_version.tx == 0) {
    f2c6:	f013 0b01 	ands.w	fp, r3, #1

			/* Procedure complete */
			_radio.conn_curr->procedure_expire = 0;
		}

		_radio.conn_curr->llcp_version.rx = 1;
    f2ca:	f885 309c 	strb.w	r3, [r5, #156]	; 0x9c

		if (_radio.conn_curr->llcp_version.tx == 0) {
    f2ce:	f040 83c4 	bne.w	fa5a <isr+0x15ea>
			_radio.conn_curr->llcp_version.tx = 1;
    f2d2:	f043 0301 	orr.w	r3, r3, #1
    f2d6:	f885 309c 	strb.w	r3, [r5, #156]	; 0x9c
{
	struct radio_pdu_node_tx *node_tx;
	struct pdu_data *pdu_ctrl_tx;

	/* acquire tx mem */
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    f2da:	4870      	ldr	r0, [pc, #448]	; (f49c <isr+0x102c>)
    f2dc:	f7fa fab5 	bl	984a <mem_acquire>
	LL_ASSERT(node_tx);
    f2e0:	4601      	mov	r1, r0
    f2e2:	b928      	cbnz	r0, f2f0 <isr+0xe80>
    f2e4:	4b66      	ldr	r3, [pc, #408]	; (f480 <isr+0x1010>)
    f2e6:	9301      	str	r3, [sp, #4]
    f2e8:	4b66      	ldr	r3, [pc, #408]	; (f484 <isr+0x1014>)
    f2ea:	9300      	str	r3, [sp, #0]
    f2ec:	4b6e      	ldr	r3, [pc, #440]	; (f4a8 <isr+0x1038>)
    f2ee:	e38a      	b.n	fa06 <isr+0x1596>

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    f2f0:	7903      	ldrb	r3, [r0, #4]
    f2f2:	f043 0303 	orr.w	r3, r3, #3
    f2f6:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
    f2f8:	2306      	movs	r3, #6
    f2fa:	7143      	strb	r3, [r0, #5]
		sizeof(struct pdu_data_llctrl_version_ind);
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
    f2fc:	230c      	movs	r3, #12
    f2fe:	71c3      	strb	r3, [r0, #7]
	pdu_ctrl_tx->payload.llctrl.ctrldata.version_ind.version_number =
    f300:	2309      	movs	r3, #9
    f302:	7203      	strb	r3, [r0, #8]
		RADIO_BLE_VERSION_NUMBER;
	pdu_ctrl_tx->payload.llctrl.ctrldata.version_ind.company_id =
    f304:	f04f 33ff 	mov.w	r3, #4294967295
    f308:	7243      	strb	r3, [r0, #9]
    f30a:	7283      	strb	r3, [r0, #10]
		RADIO_BLE_COMPANY_ID;
	pdu_ctrl_tx->payload.llctrl.ctrldata.version_ind.sub_version_number =
    f30c:	72c3      	strb	r3, [r0, #11]
    f30e:	7303      	strb	r3, [r0, #12]
		RADIO_BLE_SUB_VERSION_NUMBER;

	ctrl_tx_enqueue(conn, node_tx);
    f310:	4628      	mov	r0, r5
    f312:	f7fd fee7 	bl	d0e4 <ctrl_tx_enqueue>

static struct pdu_data *empty_tx_enqueue(struct connection *conn)
{
	struct pdu_data *pdu_data_tx;

	conn->empty = 1;
    f316:	f895 30c0 	ldrb.w	r3, [r5, #192]	; 0xc0
    f31a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    f31e:	f885 30c0 	strb.w	r3, [r5, #192]	; 0xc0

	pdu_data_tx = (struct pdu_data *)radio_pkt_empty_get();
    f322:	f7fa fcb1 	bl	9c88 <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    f326:	7803      	ldrb	r3, [r0, #0]
	pdu_data_tx->len = 0;
    f328:	f880 b001 	strb.w	fp, [r0, #1]
	struct pdu_data *pdu_data_tx;

	conn->empty = 1;

	pdu_data_tx = (struct pdu_data *)radio_pkt_empty_get();
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    f32c:	2201      	movs	r2, #1
    f32e:	f362 0301 	bfi	r3, r2, #0, #2
    f332:	7003      	strb	r3, [r0, #0]
	pdu_data_tx->len = 0;
	if (conn->pkt_tx_head) {
    f334:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
    f338:	b2db      	uxtb	r3, r3
    f33a:	b112      	cbz	r2, f342 <isr+0xed2>
		pdu_data_tx->md = 1;
    f33c:	f043 0310 	orr.w	r3, r3, #16
    f340:	e001      	b.n	f346 <isr+0xed6>
	} else {
		pdu_data_tx->md = 0;
    f342:	f362 1304 	bfi	r3, r2, #4, #1
    f346:	7003      	strb	r3, [r0, #0]
    f348:	e387      	b.n	fa5a <isr+0x15ea>
		break;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_ENC)
	case PDU_DATA_LLCTRL_TYPE_REJECT_IND:
		/* resume data packet rx and tx */
		_radio.conn_curr->pause_rx = 0;
    f34a:	f895 30c0 	ldrb.w	r3, [r5, #192]	; 0xc0
		_radio.conn_curr->pause_tx = 0;
    f34e:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    f352:	f36f 03c3 	bfc	r3, #3, #1
    f356:	f885 30c0 	strb.w	r3, [r5, #192]	; 0xc0

		/* Procedure complete */
		_radio.conn_curr->procedure_expire = 0;
    f35a:	2300      	movs	r3, #0
    f35c:	876b      	strh	r3, [r5, #58]	; 0x3a
    f35e:	e72a      	b.n	f1b6 <isr+0xd46>
		 */

		/* no ctrl procedures in progress or master req while slave
		 * waiting resp.
		 */
		if (((_radio.conn_curr->llcp_req == _radio.conn_curr->llcp_ack) &&
    f360:	f895 2069 	ldrb.w	r2, [r5, #105]	; 0x69
    f364:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
    f368:	4293      	cmp	r3, r2
    f36a:	d105      	bne.n	f378 <isr+0xf08>
    f36c:	f8d4 3204 	ldr.w	r3, [r4, #516]	; 0x204
    f370:	2b00      	cmp	r3, #0
    f372:	f040 8081 	bne.w	f478 <isr+0x1008>
    f376:	e018      	b.n	f3aa <isr+0xf3a>
		     (_radio.conn_upd == 0)) ||
		    ((_radio.conn_curr->llcp_req != _radio.conn_curr->llcp_ack) &&
    f378:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
		     (_radio.conn_curr->role.slave.role != 0) &&
    f37c:	f8d4 3204 	ldr.w	r3, [r4, #516]	; 0x204
		/* no ctrl procedures in progress or master req while slave
		 * waiting resp.
		 */
		if (((_radio.conn_curr->llcp_req == _radio.conn_curr->llcp_ack) &&
		     (_radio.conn_upd == 0)) ||
		    ((_radio.conn_curr->llcp_req != _radio.conn_curr->llcp_ack) &&
    f380:	f016 0601 	ands.w	r6, r6, #1
    f384:	d06f      	beq.n	f466 <isr+0xff6>
		     (_radio.conn_curr->role.slave.role != 0) &&
    f386:	429d      	cmp	r5, r3
    f388:	f040 8139 	bne.w	f5fe <isr+0x118e>
		     (_radio.conn_curr == _radio.conn_upd) &&
    f38c:	f895 306a 	ldrb.w	r3, [r5, #106]	; 0x6a
    f390:	2b01      	cmp	r3, #1
    f392:	f040 8134 	bne.w	f5fe <isr+0x118e>
		     (_radio.conn_curr->llcp_type == LLCP_CONNECTION_UPDATE) &&
		     ((_radio.conn_curr->llcp.connection_update.state ==
		       LLCP_CONN_STATE_INITIATE) ||
    f396:	f895 3095 	ldrb.w	r3, [r5, #149]	; 0x95
    f39a:	f003 0307 	and.w	r3, r3, #7
		if (((_radio.conn_curr->llcp_req == _radio.conn_curr->llcp_ack) &&
		     (_radio.conn_upd == 0)) ||
		    ((_radio.conn_curr->llcp_req != _radio.conn_curr->llcp_ack) &&
		     (_radio.conn_curr->role.slave.role != 0) &&
		     (_radio.conn_curr == _radio.conn_upd) &&
		     (_radio.conn_curr->llcp_type == LLCP_CONNECTION_UPDATE) &&
    f39e:	1e59      	subs	r1, r3, #1
    f3a0:	2901      	cmp	r1, #1
    f3a2:	d902      	bls.n	f3aa <isr+0xf3a>
		     ((_radio.conn_curr->llcp.connection_update.state ==
		       LLCP_CONN_STATE_INITIATE) ||
		      (_radio.conn_curr->llcp.connection_update.state ==
		       LLCP_CONN_STATE_REQ) ||
    f3a4:	2b05      	cmp	r3, #5
    f3a6:	f040 812a 	bne.w	f5fe <isr+0x118e>
		      (_radio.conn_curr->llcp.connection_update.state ==
		       LLCP_CONN_STATE_RSP_WAIT)))) {
			/* set mutex */
			if (_radio.conn_upd == 0) {
    f3aa:	f8d4 3204 	ldr.w	r3, [r4, #516]	; 0x204
    f3ae:	b913      	cbnz	r3, f3b6 <isr+0xf46>
				_radio.conn_upd = _radio.conn_curr;
    f3b0:	4b3c      	ldr	r3, [pc, #240]	; (f4a4 <isr+0x1034>)
    f3b2:	f8c3 5204 	str.w	r5, [r3, #516]	; 0x204

			/* resp to be generated by app, for now save
			 * parameters
			 */
			_radio.conn_curr->llcp.connection_update.interval =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.interval_min;
    f3b6:	89bb      	ldrh	r3, [r7, #12]
			}

			/* resp to be generated by app, for now save
			 * parameters
			 */
			_radio.conn_curr->llcp.connection_update.interval =
    f3b8:	f8a5 306c 	strh.w	r3, [r5, #108]	; 0x6c
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.interval_min;
			_radio.conn_curr->llcp.connection_update.latency =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.latency;
    f3bc:	8a3b      	ldrh	r3, [r7, #16]
			/* resp to be generated by app, for now save
			 * parameters
			 */
			_radio.conn_curr->llcp.connection_update.interval =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.interval_min;
			_radio.conn_curr->llcp.connection_update.latency =
    f3be:	f8a5 306e 	strh.w	r3, [r5, #110]	; 0x6e
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.latency;
			_radio.conn_curr->llcp.connection_update.timeout =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.timeout;
    f3c2:	8a7e      	ldrh	r6, [r7, #18]
			 */
			_radio.conn_curr->llcp.connection_update.interval =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.interval_min;
			_radio.conn_curr->llcp.connection_update.latency =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.latency;
			_radio.conn_curr->llcp.connection_update.timeout =
    f3c4:	f8a5 6070 	strh.w	r6, [r5, #112]	; 0x70
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.timeout;
			_radio.conn_curr->llcp.connection_update.preferred_periodicity =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.preferred_periodicity;
    f3c8:	7d3b      	ldrb	r3, [r7, #20]
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.interval_min;
			_radio.conn_curr->llcp.connection_update.latency =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.latency;
			_radio.conn_curr->llcp.connection_update.timeout =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.timeout;
			_radio.conn_curr->llcp.connection_update.preferred_periodicity =
    f3ca:	f885 3072 	strb.w	r3, [r5, #114]	; 0x72
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.preferred_periodicity;
			_radio.conn_curr->llcp.connection_update.instant =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.
    f3ce:	f8b7 3015 	ldrh.w	r3, [r7, #21]
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.latency;
			_radio.conn_curr->llcp.connection_update.timeout =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.timeout;
			_radio.conn_curr->llcp.connection_update.preferred_periodicity =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.preferred_periodicity;
			_radio.conn_curr->llcp.connection_update.instant =
    f3d2:	f8a5 3074 	strh.w	r3, [r5, #116]	; 0x74
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.
				reference_conn_event_count;
			_radio.conn_curr->llcp.connection_update.offset0 =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset0;
    f3d6:	f8b7 3017 	ldrh.w	r3, [r7, #23]
			_radio.conn_curr->llcp.connection_update.preferred_periodicity =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.preferred_periodicity;
			_radio.conn_curr->llcp.connection_update.instant =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.
				reference_conn_event_count;
			_radio.conn_curr->llcp.connection_update.offset0 =
    f3da:	f8a5 3076 	strh.w	r3, [r5, #118]	; 0x76
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset0;
			_radio.conn_curr->llcp.connection_update.offset1 =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset1;
    f3de:	f8b7 3019 	ldrh.w	r3, [r7, #25]
			_radio.conn_curr->llcp.connection_update.instant =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.
				reference_conn_event_count;
			_radio.conn_curr->llcp.connection_update.offset0 =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset0;
			_radio.conn_curr->llcp.connection_update.offset1 =
    f3e2:	f8a5 3078 	strh.w	r3, [r5, #120]	; 0x78
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset1;
			_radio.conn_curr->llcp.connection_update.offset2 =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset2;
    f3e6:	f8b7 301b 	ldrh.w	r3, [r7, #27]
				reference_conn_event_count;
			_radio.conn_curr->llcp.connection_update.offset0 =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset0;
			_radio.conn_curr->llcp.connection_update.offset1 =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset1;
			_radio.conn_curr->llcp.connection_update.offset2 =
    f3ea:	f8a5 307a 	strh.w	r3, [r5, #122]	; 0x7a
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset2;
			_radio.conn_curr->llcp.connection_update.offset3 =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset3;
    f3ee:	f8b7 301d 	ldrh.w	r3, [r7, #29]
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset0;
			_radio.conn_curr->llcp.connection_update.offset1 =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset1;
			_radio.conn_curr->llcp.connection_update.offset2 =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset2;
			_radio.conn_curr->llcp.connection_update.offset3 =
    f3f2:	f8a5 307c 	strh.w	r3, [r5, #124]	; 0x7c
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset3;
			_radio.conn_curr->llcp.connection_update.offset4 =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset4;
    f3f6:	f8b7 301f 	ldrh.w	r3, [r7, #31]
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset1;
			_radio.conn_curr->llcp.connection_update.offset2 =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset2;
			_radio.conn_curr->llcp.connection_update.offset3 =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset3;
			_radio.conn_curr->llcp.connection_update.offset4 =
    f3fa:	f8a5 307e 	strh.w	r3, [r5, #126]	; 0x7e
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset4;
			_radio.conn_curr->llcp.connection_update.offset5 =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset5;
    f3fe:	f8b7 3021 	ldrh.w	r3, [r7, #33]	; 0x21
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset2;
			_radio.conn_curr->llcp.connection_update.offset3 =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset3;
			_radio.conn_curr->llcp.connection_update.offset4 =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset4;
			_radio.conn_curr->llcp.connection_update.offset5 =
    f402:	f8a5 3080 	strh.w	r3, [r5, #128]	; 0x80
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset5;

			/* enqueue the conn param req, if parameters changed,
			 * else respond
			 */
			if ((_radio.conn_curr->llcp.connection_update.interval !=
    f406:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
    f408:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    f40a:	4299      	cmp	r1, r3
    f40c:	f102 32ff 	add.w	r2, r2, #4294967295
    f410:	f895 3095 	ldrb.w	r3, [r5, #149]	; 0x95
    f414:	d10a      	bne.n	f42c <isr+0xfbc>
			     _radio.conn_curr->conn_interval) ||
			    (_radio.conn_curr->llcp.connection_update.latency
			     != _radio.conn_curr->latency) ||
    f416:	8ca8      	ldrh	r0, [r5, #36]	; 0x24
    f418:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
    f41a:	4341      	muls	r1, r0
    f41c:	207d      	movs	r0, #125	; 0x7d
    f41e:	4341      	muls	r1, r0
    f420:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    f424:	fb91 f1f0 	sdiv	r1, r1, r0
    f428:	428e      	cmp	r6, r1
    f42a:	d00a      	beq.n	f442 <isr+0xfd2>
			    (_radio.conn_curr->llcp.connection_update.timeout !=
			     (_radio.conn_curr->conn_interval *
			      _radio.conn_curr->supervision_reload * 125 / 1000))) {
				*rx_enqueue = 1;

				_radio.conn_curr->llcp.connection_update.state =
    f42c:	2104      	movs	r1, #4
    f42e:	f361 0302 	bfi	r3, r1, #0, #3
					LLCP_CONN_STATE_APP_WAIT;
				_radio.conn_curr->llcp.connection_update.is_internal = 0;
    f432:	f36f 03c4 	bfc	r3, #3, #2
				_radio.conn_curr->llcp_type = LLCP_CONNECTION_UPDATE;
    f436:	2601      	movs	r6, #1
			      _radio.conn_curr->supervision_reload * 125 / 1000))) {
				*rx_enqueue = 1;

				_radio.conn_curr->llcp.connection_update.state =
					LLCP_CONN_STATE_APP_WAIT;
				_radio.conn_curr->llcp.connection_update.is_internal = 0;
    f438:	f885 3095 	strb.w	r3, [r5, #149]	; 0x95
				_radio.conn_curr->llcp_type = LLCP_CONNECTION_UPDATE;
    f43c:	f885 606a 	strb.w	r6, [r5, #106]	; 0x6a
    f440:	e00e      	b.n	f460 <isr+0xff0>
				_radio.conn_curr->llcp_ack--;
			} else {
				_radio.conn_curr->llcp.connection_update.win_size = 1;
				_radio.conn_curr->llcp.connection_update.win_offset_us = 0;
				_radio.conn_curr->llcp.connection_update.state =
    f442:	2003      	movs	r0, #3
				_radio.conn_curr->llcp.connection_update.is_internal = 0;
				_radio.conn_curr->llcp_type = LLCP_CONNECTION_UPDATE;
				_radio.conn_curr->llcp_ack--;
			} else {
				_radio.conn_curr->llcp.connection_update.win_size = 1;
				_radio.conn_curr->llcp.connection_update.win_offset_us = 0;
    f444:	2600      	movs	r6, #0
				_radio.conn_curr->llcp.connection_update.state =
    f446:	f360 0302 	bfi	r3, r0, #0, #3
					LLCP_CONN_STATE_APP_WAIT;
				_radio.conn_curr->llcp.connection_update.is_internal = 0;
				_radio.conn_curr->llcp_type = LLCP_CONNECTION_UPDATE;
				_radio.conn_curr->llcp_ack--;
			} else {
				_radio.conn_curr->llcp.connection_update.win_size = 1;
    f44a:	2101      	movs	r1, #1
				_radio.conn_curr->llcp.connection_update.win_offset_us = 0;
				_radio.conn_curr->llcp.connection_update.state =
					LLCP_CONN_STATE_RSP;
				_radio.conn_curr->llcp.connection_update.is_internal = 0;
    f44c:	f366 03c4 	bfi	r3, r6, #3, #2
					LLCP_CONN_STATE_APP_WAIT;
				_radio.conn_curr->llcp.connection_update.is_internal = 0;
				_radio.conn_curr->llcp_type = LLCP_CONNECTION_UPDATE;
				_radio.conn_curr->llcp_ack--;
			} else {
				_radio.conn_curr->llcp.connection_update.win_size = 1;
    f450:	f885 1094 	strb.w	r1, [r5, #148]	; 0x94
				_radio.conn_curr->llcp.connection_update.win_offset_us = 0;
    f454:	f8c5 608c 	str.w	r6, [r5, #140]	; 0x8c
				_radio.conn_curr->llcp.connection_update.state =
					LLCP_CONN_STATE_RSP;
				_radio.conn_curr->llcp.connection_update.is_internal = 0;
    f458:	f885 3095 	strb.w	r3, [r5, #149]	; 0x95

				_radio.conn_curr->llcp_type = LLCP_CONNECTION_UPDATE;
    f45c:	f885 106a 	strb.w	r1, [r5, #106]	; 0x6a
				_radio.conn_curr->llcp_ack--;
    f460:	f885 2069 	strb.w	r2, [r5, #105]	; 0x69
    f464:	e2f9      	b.n	fa5a <isr+0x15ea>
		/* master in conn update procedure, master in any state we
		 * ignore this req
		 */
		else if ((_radio.conn_curr->llcp_req !=
			  _radio.conn_curr->llcp_ack) &&
			 (_radio.conn_curr->role.master.role == 0) &&
    f466:	429d      	cmp	r5, r3
    f468:	f040 80c9 	bne.w	f5fe <isr+0x118e>
			 (_radio.conn_curr == _radio.conn_upd) &&
    f46c:	f895 306a 	ldrb.w	r3, [r5, #106]	; 0x6a
    f470:	2b01      	cmp	r3, #1
    f472:	f040 80c4 	bne.w	f5fe <isr+0x118e>
    f476:	e2f0      	b.n	fa5a <isr+0x15ea>
		 * set (another connection update in progress), hence reject
		 * this req.
		 */
		else if (_radio.conn_curr->llcp_req ==
			 _radio.conn_curr->llcp_ack) {
			reject_ind_ext_send(_radio.conn_curr,
    f478:	2220      	movs	r2, #32
    f47a:	210f      	movs	r1, #15
    f47c:	e1aa      	b.n	f7d4 <isr+0x1364>
    f47e:	bf00      	nop
    f480:	00013df4 	.word	0x00013df4
    f484:	00013df9 	.word	0x00013df9
    f488:	00013db4 	.word	0x00013db4
    f48c:	000167b7 	.word	0x000167b7
    f490:	00013dbb 	.word	0x00013dbb
    f494:	00015ad6 	.word	0x00015ad6
    f498:	fffe30d0 	.word	0xfffe30d0
    f49c:	20001648 	.word	0x20001648
    f4a0:	00016811 	.word	0x00016811
    f4a4:	20001470 	.word	0x20001470
    f4a8:	00016a10 	.word	0x00016a10

static inline void
isr_rx_conn_pkt_ctrl_rej(struct radio_pdu_node_rx *radio_pdu_node_rx,
			 u8_t *rx_enqueue)
{
	if (_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) {
    f4ac:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
    f4b0:	f895 2069 	ldrb.w	r2, [r5, #105]	; 0x69
    f4b4:	429a      	cmp	r2, r3
    f4b6:	d03d      	beq.n	f534 <isr+0x10c4>
		/* reset ctrl procedure */
		_radio.conn_curr->llcp_ack = _radio.conn_curr->llcp_req;
    f4b8:	f885 3069 	strb.w	r3, [r5, #105]	; 0x69

		switch (_radio.conn_curr->llcp_type) {
    f4bc:	f895 306a 	ldrb.w	r3, [r5, #106]	; 0x6a
    f4c0:	2b01      	cmp	r3, #1
    f4c2:	d130      	bne.n	f526 <isr+0x10b6>

static inline void
isr_rx_conn_pkt_ctrl_rej_conn_upd(struct radio_pdu_node_rx *radio_pdu_node_rx,
				  u8_t *rx_enqueue)
{
	LL_ASSERT(_radio.conn_upd == _radio.conn_curr);
    f4c4:	f8d4 3204 	ldr.w	r3, [r4, #516]	; 0x204
    f4c8:	429d      	cmp	r5, r3
    f4ca:	d009      	beq.n	f4e0 <isr+0x1070>
    f4cc:	4bc4      	ldr	r3, [pc, #784]	; (f7e0 <isr+0x1370>)
    f4ce:	9301      	str	r3, [sp, #4]
    f4d0:	4bc4      	ldr	r3, [pc, #784]	; (f7e4 <isr+0x1374>)
    f4d2:	9300      	str	r3, [sp, #0]
    f4d4:	4ac4      	ldr	r2, [pc, #784]	; (f7e8 <isr+0x1378>)
    f4d6:	4bc5      	ldr	r3, [pc, #788]	; (f7ec <isr+0x137c>)
    f4d8:	49c5      	ldr	r1, [pc, #788]	; (f7f0 <isr+0x1380>)
    f4da:	48c6      	ldr	r0, [pc, #792]	; (f7f4 <isr+0x1384>)
    f4dc:	f000 bd84 	b.w	ffe8 <isr+0x1b78>

	/* reset mutex */
	_radio.conn_upd = NULL;
    f4e0:	4ac5      	ldr	r2, [pc, #788]	; (f7f8 <isr+0x1388>)
    f4e2:	2300      	movs	r3, #0
    f4e4:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204

	/* update to next ticks offsets */
	if (_radio.conn_curr->role.slave.role != 0) {
    f4e8:	f895 2044 	ldrb.w	r2, [r5, #68]	; 0x44
		    _radio.conn_curr->llcp.connection_update.
			ticks_to_offset_next;
	}

	/* conn param req procedure, if any, is complete */
	_radio.conn_curr->procedure_expire = 0;
    f4ec:	876b      	strh	r3, [r5, #58]	; 0x3a

	/* reset mutex */
	_radio.conn_upd = NULL;

	/* update to next ticks offsets */
	if (_radio.conn_curr->role.slave.role != 0) {
    f4ee:	07d0      	lsls	r0, r2, #31

	/* conn param req procedure, if any, is complete */
	_radio.conn_curr->procedure_expire = 0;

	/* enqueue the reject ind ext */
	if (!_radio.conn_curr->llcp.connection_update.is_internal) {
    f4f0:	f895 3095 	ldrb.w	r3, [r5, #149]	; 0x95
	/* reset mutex */
	_radio.conn_upd = NULL;

	/* update to next ticks offsets */
	if (_radio.conn_curr->role.slave.role != 0) {
		_radio.conn_curr->role.slave.ticks_to_offset =
    f4f4:	bf44      	itt	mi
    f4f6:	f8d5 2088 	ldrmi.w	r2, [r5, #136]	; 0x88
    f4fa:	666a      	strmi	r2, [r5, #100]	; 0x64

	/* conn param req procedure, if any, is complete */
	_radio.conn_curr->procedure_expire = 0;

	/* enqueue the reject ind ext */
	if (!_radio.conn_curr->llcp.connection_update.is_internal) {
    f4fc:	f013 0318 	ands.w	r3, r3, #24
    f500:	f040 858c 	bne.w	1001c <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x1d>
		/* prepare connection update complete structure */
		pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
		radio_le_conn_update_cmplt =
			(struct radio_le_conn_update_cmplt *)
			&pdu_data_rx->payload;
		radio_le_conn_update_cmplt->status = 0x00;
    f504:	72fb      	strb	r3, [r7, #11]
	if (!_radio.conn_curr->llcp.connection_update.is_internal) {
		struct radio_le_conn_update_cmplt
			*radio_le_conn_update_cmplt;
		struct pdu_data *pdu_data_rx;

		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    f506:	2208      	movs	r2, #8
    f508:	713a      	strb	r2, [r7, #4]
			(struct radio_le_conn_update_cmplt *)
			&pdu_data_rx->payload;
		radio_le_conn_update_cmplt->status = 0x00;
		radio_le_conn_update_cmplt->interval =
			_radio.conn_curr->conn_interval;
		radio_le_conn_update_cmplt->latency = _radio.conn_curr->latency;
    f50a:	8cea      	ldrh	r2, [r5, #38]	; 0x26
		radio_le_conn_update_cmplt =
			(struct radio_le_conn_update_cmplt *)
			&pdu_data_rx->payload;
		radio_le_conn_update_cmplt->status = 0x00;
		radio_le_conn_update_cmplt->interval =
			_radio.conn_curr->conn_interval;
    f50c:	8cab      	ldrh	r3, [r5, #36]	; 0x24
		radio_le_conn_update_cmplt->latency = _radio.conn_curr->latency;
    f50e:	81fa      	strh	r2, [r7, #14]
		radio_le_conn_update_cmplt->timeout =
    f510:	8eaa      	ldrh	r2, [r5, #52]	; 0x34
		pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
		radio_le_conn_update_cmplt =
			(struct radio_le_conn_update_cmplt *)
			&pdu_data_rx->payload;
		radio_le_conn_update_cmplt->status = 0x00;
		radio_le_conn_update_cmplt->interval =
    f512:	81bb      	strh	r3, [r7, #12]
			_radio.conn_curr->conn_interval;
		radio_le_conn_update_cmplt->latency = _radio.conn_curr->latency;
		radio_le_conn_update_cmplt->timeout =
    f514:	4353      	muls	r3, r2
    f516:	227d      	movs	r2, #125	; 0x7d
    f518:	4353      	muls	r3, r2
    f51a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    f51e:	fb93 f3f2 	sdiv	r3, r3, r2
    f522:	823b      	strh	r3, [r7, #16]
    f524:	e647      	b.n	f1b6 <isr+0xd46>
			isr_rx_conn_pkt_ctrl_rej_conn_upd(radio_pdu_node_rx,
							  rx_enqueue);
			break;

		default:
			LL_ASSERT(0);
    f526:	4bae      	ldr	r3, [pc, #696]	; (f7e0 <isr+0x1370>)
    f528:	9301      	str	r3, [sp, #4]
    f52a:	4bae      	ldr	r3, [pc, #696]	; (f7e4 <isr+0x1374>)
    f52c:	9300      	str	r3, [sp, #0]
    f52e:	4bb3      	ldr	r3, [pc, #716]	; (f7fc <isr+0x138c>)
    f530:	f000 bd57 	b.w	ffe2 <isr+0x1b72>
			break;
		}

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
	} else if (_radio.conn_curr->llcp_length.ack !=
		   _radio.conn_curr->llcp_length.req) {
    f534:	f895 30b4 	ldrb.w	r3, [r5, #180]	; 0xb4
			LL_ASSERT(0);
			break;
		}

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
	} else if (_radio.conn_curr->llcp_length.ack !=
    f538:	f895 20b5 	ldrb.w	r2, [r5, #181]	; 0xb5
    f53c:	429a      	cmp	r2, r3
    f53e:	d01d      	beq.n	f57c <isr+0x110c>
	struct pdu_data *pdu_data_rx;

	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
	rej_ext_ind = (struct pdu_data_llctrl_reject_ext_ind *)
		      &pdu_data_rx->payload.llctrl.ctrldata.reject_ext_ind;
	if (rej_ext_ind->reject_opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
    f540:	7b3a      	ldrb	r2, [r7, #12]
    f542:	2a14      	cmp	r2, #20
    f544:	f04f 0600 	mov.w	r6, #0
    f548:	f040 8287 	bne.w	fa5a <isr+0x15ea>
		struct pdu_data_llctrl_length_req_rsp *lr;

		/* Procedure complete */
		_radio.conn_curr->llcp_length.ack =
    f54c:	f885 30b5 	strb.w	r3, [r5, #181]	; 0xb5
			_radio.conn_curr->llcp_length.req;
		_radio.conn_curr->procedure_expire = 0;

		/* Resume data packet tx */
		_radio.conn_curr->pause_tx = 0;
    f550:	f895 30c0 	ldrb.w	r3, [r5, #192]	; 0xc0
		struct pdu_data_llctrl_length_req_rsp *lr;

		/* Procedure complete */
		_radio.conn_curr->llcp_length.ack =
			_radio.conn_curr->llcp_length.req;
		_radio.conn_curr->procedure_expire = 0;
    f554:	876e      	strh	r6, [r5, #58]	; 0x3a

		/* Resume data packet tx */
		_radio.conn_curr->pause_tx = 0;
    f556:	f366 03c3 	bfi	r3, r6, #3, #1
    f55a:	f885 30c0 	strb.w	r3, [r5, #192]	; 0xc0

		/* prepare length rsp structure */
		pdu_data_rx->len = offsetof(struct pdu_data_llctrl,
    f55e:	2309      	movs	r3, #9
    f560:	727b      	strb	r3, [r7, #9]
					    ctrldata) +
			sizeof(struct pdu_data_llctrl_length_req_rsp);
		pdu_data_rx->payload.llctrl.opcode =
    f562:	2315      	movs	r3, #21
    f564:	72fb      	strb	r3, [r7, #11]
			PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;

		lr = (struct pdu_data_llctrl_length_req_rsp *)
			&pdu_data_rx->payload.llctrl.ctrldata.length_req;
		lr->max_rx_octets = _radio.conn_curr->max_rx_octets;
    f566:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    f568:	81bb      	strh	r3, [r7, #12]
		lr->max_rx_time = ((_radio.conn_curr->max_rx_octets + 14) << 3);
    f56a:	330e      	adds	r3, #14
    f56c:	00db      	lsls	r3, r3, #3
    f56e:	81fb      	strh	r3, [r7, #14]
		lr->max_tx_octets = _radio.conn_curr->max_tx_octets;
    f570:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    f572:	823b      	strh	r3, [r7, #16]
		lr->max_tx_time = ((_radio.conn_curr->max_tx_octets + 14) << 3);
    f574:	330e      	adds	r3, #14
    f576:	00db      	lsls	r3, r3, #3
    f578:	827b      	strh	r3, [r7, #18]
    f57a:	e61c      	b.n	f1b6 <isr+0xd46>
					     rx_enqueue);
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
	} else if (_radio.conn_curr->llcp_phy.ack !=
		   _radio.conn_curr->llcp_phy.req) {
    f57c:	f895 30bc 	ldrb.w	r3, [r5, #188]	; 0xbc
		isr_rx_conn_pkt_ctrl_rej_dle(radio_pdu_node_rx,
					     rx_enqueue);
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
	} else if (_radio.conn_curr->llcp_phy.ack !=
    f580:	f895 20bd 	ldrb.w	r2, [r5, #189]	; 0xbd
    f584:	429a      	cmp	r2, r3
    f586:	f000 8549 	beq.w	1001c <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x1d>
	struct pdu_data *pdu_data_rx;

	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
	rej_ext_ind = (struct pdu_data_llctrl_reject_ext_ind *)
		      &pdu_data_rx->payload.llctrl.ctrldata.reject_ext_ind;
	if (rej_ext_ind->reject_opcode == PDU_DATA_LLCTRL_TYPE_PHY_REQ) {
    f58a:	7b3a      	ldrb	r2, [r7, #12]
    f58c:	2a16      	cmp	r2, #22
    f58e:	f040 8545 	bne.w	1001c <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x1d>
		if (rej_ext_ind->error_code == 0x23) {
    f592:	7b7a      	ldrb	r2, [r7, #13]
    f594:	2a23      	cmp	r2, #35	; 0x23
    f596:	f04f 0600 	mov.w	r6, #0
    f59a:	f000 825e 	beq.w	fa5a <isr+0x15ea>
		} else {
			/* Different Transaction Collision */
			struct radio_le_phy_upd_cmplt *p;

			/* Procedure complete */
			_radio.conn_curr->llcp_phy.ack =
    f59e:	f885 30bd 	strb.w	r3, [r5, #189]	; 0xbd
				_radio.conn_curr->llcp_phy.req;
			_radio.conn_curr->procedure_expire = 0;

			/* skip event generation is not cmd initiated */
			if (!_radio.conn_curr->llcp_phy.cmd) {
    f5a2:	f895 30bf 	ldrb.w	r3, [r5, #191]	; 0xbf
			struct radio_le_phy_upd_cmplt *p;

			/* Procedure complete */
			_radio.conn_curr->llcp_phy.ack =
				_radio.conn_curr->llcp_phy.req;
			_radio.conn_curr->procedure_expire = 0;
    f5a6:	876e      	strh	r6, [r5, #58]	; 0x3a

			/* skip event generation is not cmd initiated */
			if (!_radio.conn_curr->llcp_phy.cmd) {
    f5a8:	f003 0302 	and.w	r3, r3, #2
    f5ac:	f003 06ff 	and.w	r6, r3, #255	; 0xff
    f5b0:	2b00      	cmp	r3, #0
    f5b2:	f000 8252 	beq.w	fa5a <isr+0x15ea>
				return;
			}

			/* generate phy update complete event with error code */
			radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    f5b6:	230c      	movs	r3, #12
    f5b8:	713b      	strb	r3, [r7, #4]

			p = (struct radio_le_phy_upd_cmplt *)
			    &pdu_data_rx->payload;
			p->status = rej_ext_ind->error_code;
    f5ba:	7b7b      	ldrb	r3, [r7, #13]
    f5bc:	72fb      	strb	r3, [r7, #11]
    f5be:	e1c0      	b.n	f942 <isr+0x14d2>
{
	struct radio_pdu_node_tx *node_tx;
	struct pdu_data *pdu_ctrl_tx;

	/* acquire tx mem */
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    f5c0:	488f      	ldr	r0, [pc, #572]	; (f800 <isr+0x1390>)
    f5c2:	f7fa f942 	bl	984a <mem_acquire>
	LL_ASSERT(node_tx);
    f5c6:	4601      	mov	r1, r0
    f5c8:	b928      	cbnz	r0, f5d6 <isr+0x1166>
    f5ca:	4b85      	ldr	r3, [pc, #532]	; (f7e0 <isr+0x1370>)
    f5cc:	9301      	str	r3, [sp, #4]
    f5ce:	4b85      	ldr	r3, [pc, #532]	; (f7e4 <isr+0x1374>)
    f5d0:	9300      	str	r3, [sp, #0]
    f5d2:	4b8c      	ldr	r3, [pc, #560]	; (f804 <isr+0x1394>)
    f5d4:	e217      	b.n	fa06 <isr+0x1596>

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    f5d6:	7903      	ldrb	r3, [r0, #4]
    f5d8:	f043 0303 	orr.w	r3, r3, #3
    f5dc:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata);
    f5de:	2301      	movs	r3, #1
    f5e0:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
    f5e2:	2313      	movs	r3, #19
    f5e4:	71c3      	strb	r3, [r0, #7]
    f5e6:	e21b      	b.n	fa20 <isr+0x15b0>
		ping_resp_send(_radio.conn_curr);
		break;

	case PDU_DATA_LLCTRL_TYPE_PING_RSP:
		/* Procedure complete */
		_radio.conn_curr->procedure_expire = 0;
    f5e8:	876b      	strh	r3, [r5, #58]	; 0x3a
    f5ea:	f000 bd17 	b.w	1001c <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x1d>
		break;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

	case PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP:
		if (_radio.conn_curr->llcp_req != _radio.conn_curr->llcp_ack) {
    f5ee:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
    f5f2:	f895 2069 	ldrb.w	r2, [r5, #105]	; 0x69
    f5f6:	429a      	cmp	r2, r3
    f5f8:	d008      	beq.n	f60c <isr+0x119c>
			/* reset ctrl procedure */
			_radio.conn_curr->llcp_ack = _radio.conn_curr->llcp_req;
    f5fa:	f885 3069 	strb.w	r3, [r5, #105]	; 0x69

			switch (_radio.conn_curr->llcp_type) {
			default:
				LL_ASSERT(0);
    f5fe:	4b78      	ldr	r3, [pc, #480]	; (f7e0 <isr+0x1370>)
    f600:	9301      	str	r3, [sp, #4]
    f602:	4b78      	ldr	r3, [pc, #480]	; (f7e4 <isr+0x1374>)
    f604:	9300      	str	r3, [sp, #0]
    f606:	4b80      	ldr	r3, [pc, #512]	; (f808 <isr+0x1398>)
    f608:	f000 bceb 	b.w	ffe2 <isr+0x1b72>
				break;
			}

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
		} else if (_radio.conn_curr->llcp_length.req !=
    f60c:	f895 30b4 	ldrb.w	r3, [r5, #180]	; 0xb4
    f610:	f895 20b5 	ldrb.w	r2, [r5, #181]	; 0xb5
    f614:	429a      	cmp	r2, r3
    f616:	d008      	beq.n	f62a <isr+0x11ba>
			   _radio.conn_curr->llcp_length.ack) {
			/* Procedure complete */
			_radio.conn_curr->llcp_length.ack =
    f618:	f885 30b5 	strb.w	r3, [r5, #181]	; 0xb5
				_radio.conn_curr->llcp_length.req;

			/* resume data packet tx */
			_radio.conn_curr->pause_tx = 0;
    f61c:	f895 30c0 	ldrb.w	r3, [r5, #192]	; 0xc0
    f620:	f36f 03c3 	bfc	r3, #3, #1
    f624:	f885 30c0 	strb.w	r3, [r5, #192]	; 0xc0
    f628:	e01c      	b.n	f664 <isr+0x11f4>
			 */
			*rx_enqueue = 1;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
		} else if (_radio.conn_curr->llcp_phy.req !=
    f62a:	f895 30bc 	ldrb.w	r3, [r5, #188]	; 0xbc
    f62e:	f895 20bd 	ldrb.w	r2, [r5, #189]	; 0xbd
    f632:	429a      	cmp	r2, r3
    f634:	d018      	beq.n	f668 <isr+0x11f8>
			   _radio.conn_curr->llcp_phy.ack) {
			struct radio_le_phy_upd_cmplt *p;

			/* Procedure complete */
			_radio.conn_curr->llcp_phy.ack =
    f636:	f885 30bd 	strb.w	r3, [r5, #189]	; 0xbd
				_radio.conn_curr->llcp_phy.req;

			/* skip event generation is not cmd initiated */
			if (_radio.conn_curr->llcp_phy.cmd) {
    f63a:	f895 30bf 	ldrb.w	r3, [r5, #191]	; 0xbf
    f63e:	f003 0302 	and.w	r3, r3, #2
    f642:	f003 06ff 	and.w	r6, r3, #255	; 0xff
    f646:	b19b      	cbz	r3, f670 <isr+0x1200>
				/* generate phy update complete event */
				radio_pdu_node_rx->hdr.type =
    f648:	230c      	movs	r3, #12
    f64a:	713b      	strb	r3, [r7, #4]
					NODE_RX_TYPE_PHY_UPDATE;

				p = (struct radio_le_phy_upd_cmplt *)
				    &pdu_data_rx->payload;
				p->status = 0;
    f64c:	2300      	movs	r3, #0
    f64e:	72fb      	strb	r3, [r7, #11]
				p->tx = _radio.conn_curr->phy_tx;
    f650:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
    f654:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    f658:	733b      	strb	r3, [r7, #12]
				p->rx = _radio.conn_curr->phy_rx;
    f65a:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
    f65e:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    f662:	737b      	strb	r3, [r7, #13]

				/* enqueue the phy update complete */
				*rx_enqueue = 1;
    f664:	2601      	movs	r6, #1
    f666:	e003      	b.n	f670 <isr+0x1200>
		} else {
			struct pdu_data_llctrl *llctrl;

			llctrl = (struct pdu_data_llctrl *)
				&pdu_data_rx->payload.llctrl;
			switch (llctrl->ctrldata.unknown_rsp.type) {
    f668:	7b3e      	ldrb	r6, [r7, #12]
				break;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

			default:
				/* enqueue the error and let HCI handle it */
				*rx_enqueue = 1;
    f66a:	3e12      	subs	r6, #18
    f66c:	bf18      	it	ne
    f66e:	2601      	movne	r6, #1
				break;
			}
		}

		/* Procedure complete */
		_radio.conn_curr->procedure_expire = 0;
    f670:	2300      	movs	r3, #0
    f672:	876b      	strh	r3, [r5, #58]	; 0x3a
    f674:	e1f1      	b.n	fa5a <isr+0x15ea>
	eff_tx_octets = _radio.conn_curr->max_tx_octets;

	if (/* Local idle, and Peer request then complete the Peer procedure
	     * with response.
	     */
	    ((_radio.conn_curr->llcp_length.req ==
    f676:	f895 10b4 	ldrb.w	r1, [r5, #180]	; 0xb4
	u8_t nack = 0;

	eff_rx_octets = _radio.conn_curr->max_rx_octets;
	eff_tx_octets = _radio.conn_curr->max_tx_octets;

	if (/* Local idle, and Peer request then complete the Peer procedure
    f67a:	f895 30b5 	ldrb.w	r3, [r5, #181]	; 0xb5
{
	u16_t eff_rx_octets;
	u16_t eff_tx_octets;
	u8_t nack = 0;

	eff_rx_octets = _radio.conn_curr->max_rx_octets;
    f67e:	f8b5 b030 	ldrh.w	fp, [r5, #48]	; 0x30
	eff_tx_octets = _radio.conn_curr->max_tx_octets;
    f682:	8dea      	ldrh	r2, [r5, #46]	; 0x2e

	if (/* Local idle, and Peer request then complete the Peer procedure
    f684:	428b      	cmp	r3, r1
    f686:	d006      	beq.n	f696 <isr+0x1226>
	      _radio.conn_curr->llcp_length.ack) &&
	     /* with Local requested and Peer request then complete the
	      * Peer procedure with response.
	      */
	     ((((_radio.conn_curr->llcp_length.state ==
		 LLCP_LENGTH_STATE_REQ) ||
    f688:	f895 30b6 	ldrb.w	r3, [r5, #182]	; 0xb6
    f68c:	f003 0303 	and.w	r3, r3, #3
	      _radio.conn_curr->llcp_length.ack) &&
	     (pdu_data_rx->payload.llctrl.opcode ==
	      PDU_DATA_LLCTRL_TYPE_LENGTH_REQ)) ||
	    /* or Local has active... */
	    ((_radio.conn_curr->llcp_length.req !=
	      _radio.conn_curr->llcp_length.ack) &&
    f690:	2b01      	cmp	r3, #1
    f692:	f200 84b1 	bhi.w	fff8 <isr+0x1b88>
	      * Peer procedure with response.
	      */
	     ((((_radio.conn_curr->llcp_length.state ==
		 LLCP_LENGTH_STATE_REQ) ||
		(_radio.conn_curr->llcp_length.state ==
		 LLCP_LENGTH_STATE_ACK_WAIT)) &&
    f696:	2e14      	cmp	r6, #20
    f698:	d15a      	bne.n	f750 <isr+0x12e0>
			&pdu_data_rx->payload.llctrl.ctrldata.length_req;

		/* use the minimal of our default_tx_octets and
		 * peer max_rx_octets
		 */
		if (lr->max_rx_octets >= RADIO_LL_LENGTH_OCTETS_RX_MIN) {
    f69a:	89bb      	ldrh	r3, [r7, #12]
    f69c:	2b1a      	cmp	r3, #26
    f69e:	d903      	bls.n	f6a8 <isr+0x1238>
			eff_tx_octets = min(lr->max_rx_octets,
    f6a0:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
    f6a2:	429a      	cmp	r2, r3
    f6a4:	bf28      	it	cs
    f6a6:	461a      	movcs	r2, r3
		}

		/* use the minimal of our max supported and
		 * peer max_tx_octets
		 */
		if (lr->max_tx_octets >= RADIO_LL_LENGTH_OCTETS_RX_MIN) {
    f6a8:	8a3b      	ldrh	r3, [r7, #16]
    f6aa:	2b1a      	cmp	r3, #26
    f6ac:	d935      	bls.n	f71a <isr+0x12aa>
			eff_rx_octets = min(lr->max_tx_octets,
					    RADIO_LL_LENGTH_OCTETS_RX_MAX);
		}

		/* check if change in rx octets */
		if (eff_rx_octets != _radio.conn_curr->max_rx_octets) {
    f6ae:	f1bb 0f1b 	cmp.w	fp, #27
    f6b2:	d032      	beq.n	f71a <isr+0x12aa>
    f6b4:	920a      	str	r2, [sp, #40]	; 0x28
			u16_t free_count_rx;

			free_count_rx = packet_rx_acquired_count_get()
    f6b6:	f7fb fd0d 	bl	b0d4 <packet_rx_acquired_count_get>
    f6ba:	4605      	mov	r5, r0
				+ mem_free_count_get(_radio.pkt_rx_data_free);
    f6bc:	f8d4 01ac 	ldr.w	r0, [r4, #428]	; 0x1ac
    f6c0:	4e4d      	ldr	r6, [pc, #308]	; (f7f8 <isr+0x1388>)
    f6c2:	f7fa f8f3 	bl	98ac <mem_free_count_get>

		/* check if change in rx octets */
		if (eff_rx_octets != _radio.conn_curr->max_rx_octets) {
			u16_t free_count_rx;

			free_count_rx = packet_rx_acquired_count_get()
    f6c6:	4428      	add	r0, r5
    f6c8:	b280      	uxth	r0, r0
				+ mem_free_count_get(_radio.pkt_rx_data_free);
			LL_ASSERT(free_count_rx <= 0xFF);
    f6ca:	28ff      	cmp	r0, #255	; 0xff
    f6cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    f6ce:	d909      	bls.n	f6e4 <isr+0x1274>
    f6d0:	4b43      	ldr	r3, [pc, #268]	; (f7e0 <isr+0x1370>)
    f6d2:	9301      	str	r3, [sp, #4]
    f6d4:	4b43      	ldr	r3, [pc, #268]	; (f7e4 <isr+0x1374>)
    f6d6:	9300      	str	r3, [sp, #0]
    f6d8:	4a43      	ldr	r2, [pc, #268]	; (f7e8 <isr+0x1378>)
    f6da:	4b4c      	ldr	r3, [pc, #304]	; (f80c <isr+0x139c>)
    f6dc:	4944      	ldr	r1, [pc, #272]	; (f7f0 <isr+0x1380>)
    f6de:	484c      	ldr	r0, [pc, #304]	; (f810 <isr+0x13a0>)
    f6e0:	f000 bc82 	b.w	ffe8 <isr+0x1b78>

			if (_radio.packet_rx_data_count == free_count_rx) {
    f6e4:	f896 31b6 	ldrb.w	r3, [r6, #438]	; 0x1b6
    f6e8:	4283      	cmp	r3, r0
    f6ea:	f04f 0b1b 	mov.w	fp, #27
    f6ee:	d12c      	bne.n	f74a <isr+0x12da>

				/* accept the effective tx */
				_radio.conn_curr->max_tx_octets = eff_tx_octets;
    f6f0:	f8d6 3190 	ldr.w	r3, [r6, #400]	; 0x190
				 */
				_radio.conn_curr->llcp_length.rx_octets =
					eff_rx_octets;
				_radio.conn_curr->llcp_length.tx_octets =
					eff_tx_octets;
				_radio.conn_curr->llcp_length.ack =
    f6f4:	f893 10b4 	ldrb.w	r1, [r3, #180]	; 0xb4
			LL_ASSERT(free_count_rx <= 0xFF);

			if (_radio.packet_rx_data_count == free_count_rx) {

				/* accept the effective tx */
				_radio.conn_curr->max_tx_octets = eff_tx_octets;
    f6f8:	85da      	strh	r2, [r3, #46]	; 0x2e
				 */
				_radio.conn_curr->llcp_length.rx_octets =
					eff_rx_octets;
				_radio.conn_curr->llcp_length.tx_octets =
					eff_tx_octets;
				_radio.conn_curr->llcp_length.ack =
    f6fa:	3901      	subs	r1, #1
    f6fc:	f883 10b5 	strb.w	r1, [r3, #181]	; 0xb5
					(_radio.conn_curr->llcp_length.req - 1);
				_radio.conn_curr->llcp_length.state =
    f700:	f893 10b6 	ldrb.w	r1, [r3, #182]	; 0xb6
				_radio.conn_curr->max_tx_octets = eff_tx_octets;

				/* trigger or retain the ctrl procedure so as
				 * to resize the rx buffers.
				 */
				_radio.conn_curr->llcp_length.rx_octets =
    f704:	f8a3 b0b8 	strh.w	fp, [r3, #184]	; 0xb8
					eff_rx_octets;
				_radio.conn_curr->llcp_length.tx_octets =
					eff_tx_octets;
				_radio.conn_curr->llcp_length.ack =
					(_radio.conn_curr->llcp_length.req - 1);
				_radio.conn_curr->llcp_length.state =
    f708:	f041 0103 	orr.w	r1, r1, #3
				/* trigger or retain the ctrl procedure so as
				 * to resize the rx buffers.
				 */
				_radio.conn_curr->llcp_length.rx_octets =
					eff_rx_octets;
				_radio.conn_curr->llcp_length.tx_octets =
    f70c:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
					eff_tx_octets;
				_radio.conn_curr->llcp_length.ack =
					(_radio.conn_curr->llcp_length.req - 1);
				_radio.conn_curr->llcp_length.state =
    f710:	f883 10b6 	strb.w	r1, [r3, #182]	; 0xb6
					LLCP_LENGTH_STATE_RESIZE;

				/* close the current connection event, so as
				 * to perform rx octet change.
				 */
				_radio.state = STATE_CLOSE;
    f714:	2303      	movs	r3, #3
    f716:	7433      	strb	r3, [r6, #16]
    f718:	e01a      	b.n	f750 <isr+0x12e0>
			} else {
				nack = 1;
			}
		} else {
			/* resume data packet tx */
			_radio.conn_curr->pause_tx = 0;
    f71a:	f895 30c0 	ldrb.w	r3, [r5, #192]	; 0xc0

			/* accept the effective tx */
			_radio.conn_curr->max_tx_octets = eff_tx_octets;

			/* Procedure complete */
			_radio.conn_curr->llcp_length.ack =
    f71e:	f885 10b5 	strb.w	r1, [r5, #181]	; 0xb5
			} else {
				nack = 1;
			}
		} else {
			/* resume data packet tx */
			_radio.conn_curr->pause_tx = 0;
    f722:	f36f 03c3 	bfc	r3, #3, #1
				_radio.conn_curr->llcp_length.req;
			_radio.conn_curr->procedure_expire = 0;

			/* prepare event params */
			lr->max_rx_octets = eff_rx_octets;
			lr->max_rx_time = ((eff_rx_octets + 14) << 3);
    f726:	f10b 010e 	add.w	r1, fp, #14
			} else {
				nack = 1;
			}
		} else {
			/* resume data packet tx */
			_radio.conn_curr->pause_tx = 0;
    f72a:	f885 30c0 	strb.w	r3, [r5, #192]	; 0xc0
				_radio.conn_curr->llcp_length.req;
			_radio.conn_curr->procedure_expire = 0;

			/* prepare event params */
			lr->max_rx_octets = eff_rx_octets;
			lr->max_rx_time = ((eff_rx_octets + 14) << 3);
    f72e:	00c9      	lsls	r1, r1, #3
			_radio.conn_curr->max_tx_octets = eff_tx_octets;

			/* Procedure complete */
			_radio.conn_curr->llcp_length.ack =
				_radio.conn_curr->llcp_length.req;
			_radio.conn_curr->procedure_expire = 0;
    f730:	2300      	movs	r3, #0
		} else {
			/* resume data packet tx */
			_radio.conn_curr->pause_tx = 0;

			/* accept the effective tx */
			_radio.conn_curr->max_tx_octets = eff_tx_octets;
    f732:	85ea      	strh	r2, [r5, #46]	; 0x2e

			/* Procedure complete */
			_radio.conn_curr->llcp_length.ack =
				_radio.conn_curr->llcp_length.req;
			_radio.conn_curr->procedure_expire = 0;
    f734:	876b      	strh	r3, [r5, #58]	; 0x3a

			/* prepare event params */
			lr->max_rx_octets = eff_rx_octets;
			lr->max_rx_time = ((eff_rx_octets + 14) << 3);
    f736:	81f9      	strh	r1, [r7, #14]
			lr->max_tx_octets = eff_tx_octets;
			lr->max_tx_time = ((eff_tx_octets + 14) << 3);
    f738:	f102 010e 	add.w	r1, r2, #14
    f73c:	00c9      	lsls	r1, r1, #3
			_radio.conn_curr->llcp_length.ack =
				_radio.conn_curr->llcp_length.req;
			_radio.conn_curr->procedure_expire = 0;

			/* prepare event params */
			lr->max_rx_octets = eff_rx_octets;
    f73e:	f8a7 b00c 	strh.w	fp, [r7, #12]
			lr->max_rx_time = ((eff_rx_octets + 14) << 3);
			lr->max_tx_octets = eff_tx_octets;
    f742:	823a      	strh	r2, [r7, #16]
			lr->max_tx_time = ((eff_tx_octets + 14) << 3);
    f744:	8279      	strh	r1, [r7, #18]

			/* Enqueue data length change event (with no change in
			 * rx length happened), safe to enqueue rx.
			 */
			*rx_enqueue = 1;
    f746:	2601      	movs	r6, #1
    f748:	e004      	b.n	f754 <isr+0x12e4>
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	struct radio_pdu_node_tx *tx_release = NULL;
	u8_t is_empty_pdu_tx_retry;
	struct pdu_data *pdu_data_rx;
	struct pdu_data *pdu_data_tx;
	u8_t rx_enqueue = 0;
    f74a:	2600      	movs	r6, #0
				/* close the current connection event, so as
				 * to perform rx octet change.
				 */
				_radio.state = STATE_CLOSE;
			} else {
				nack = 1;
    f74c:	2301      	movs	r3, #1
    f74e:	e001      	b.n	f754 <isr+0x12e4>
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	struct radio_pdu_node_tx *tx_release = NULL;
	u8_t is_empty_pdu_tx_retry;
	struct pdu_data *pdu_data_rx;
	struct pdu_data *pdu_data_tx;
	u8_t rx_enqueue = 0;
    f750:	2600      	movs	r6, #0
static inline u8_t isr_rx_conn_pkt_ctrl_dle(struct pdu_data *pdu_data_rx,
					    u8_t *rx_enqueue)
{
	u16_t eff_rx_octets;
	u16_t eff_tx_octets;
	u8_t nack = 0;
    f752:	4633      	mov	r3, r6
		/* Drop response with no Local initiated request. */
		LL_ASSERT(pdu_data_rx->payload.llctrl.opcode ==
			  PDU_DATA_LLCTRL_TYPE_LENGTH_RSP);
	}

	if ((PDU_DATA_LLCTRL_TYPE_LENGTH_REQ ==
    f754:	7af9      	ldrb	r1, [r7, #11]
    f756:	2914      	cmp	r1, #20
    f758:	f040 817e 	bne.w	fa58 <isr+0x15e8>
	     pdu_data_rx->payload.llctrl.opcode) && !nack) {
    f75c:	2b00      	cmp	r3, #0
    f75e:	f040 81a6 	bne.w	faae <isr+0x163e>
			     u16_t eff_tx_octets)
{
	struct radio_pdu_node_tx *node_tx;
	struct pdu_data *pdu_ctrl_tx;

	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    f762:	4827      	ldr	r0, [pc, #156]	; (f800 <isr+0x1390>)
    f764:	920a      	str	r2, [sp, #40]	; 0x28
			  PDU_DATA_LLCTRL_TYPE_LENGTH_RSP);
	}

	if ((PDU_DATA_LLCTRL_TYPE_LENGTH_REQ ==
	     pdu_data_rx->payload.llctrl.opcode) && !nack) {
		length_resp_send(_radio.conn_curr, eff_rx_octets,
    f766:	f8d4 5190 	ldr.w	r5, [r4, #400]	; 0x190
			     u16_t eff_tx_octets)
{
	struct radio_pdu_node_tx *node_tx;
	struct pdu_data *pdu_ctrl_tx;

	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    f76a:	f7fa f86e 	bl	984a <mem_acquire>
	LL_ASSERT(node_tx);
    f76e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    f770:	4601      	mov	r1, r0
    f772:	b928      	cbnz	r0, f780 <isr+0x1310>
    f774:	4b1a      	ldr	r3, [pc, #104]	; (f7e0 <isr+0x1370>)
    f776:	9301      	str	r3, [sp, #4]
    f778:	4b1a      	ldr	r3, [pc, #104]	; (f7e4 <isr+0x1374>)
    f77a:	9300      	str	r3, [sp, #0]
    f77c:	4b25      	ldr	r3, [pc, #148]	; (f814 <isr+0x13a4>)
    f77e:	e142      	b.n	fa06 <isr+0x1596>

	pdu_ctrl_tx = (struct pdu_data *) node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    f780:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
		sizeof(struct pdu_data_llctrl_length_req_rsp);
	pdu_ctrl_tx->payload.llctrl.opcode =
		PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
	pdu_ctrl_tx->payload.llctrl.ctrldata.length_rsp.max_rx_octets =
    f782:	f8a0 b008 	strh.w	fp, [r0, #8]

	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
	LL_ASSERT(node_tx);

	pdu_ctrl_tx = (struct pdu_data *) node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    f786:	f043 0303 	orr.w	r3, r3, #3
    f78a:	7103      	strb	r3, [r0, #4]
		PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
	pdu_ctrl_tx->payload.llctrl.ctrldata.length_rsp.max_rx_octets =
		eff_rx_octets;
	pdu_ctrl_tx->payload.llctrl.ctrldata.length_rsp.max_rx_time =
		((eff_rx_octets + 14) << 3);
	pdu_ctrl_tx->payload.llctrl.ctrldata.length_rsp.max_tx_octets =
    f78c:	8182      	strh	r2, [r0, #12]
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
	LL_ASSERT(node_tx);

	pdu_ctrl_tx = (struct pdu_data *) node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
    f78e:	2309      	movs	r3, #9
		sizeof(struct pdu_data_llctrl_length_req_rsp);
	pdu_ctrl_tx->payload.llctrl.opcode =
		PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
	pdu_ctrl_tx->payload.llctrl.ctrldata.length_rsp.max_rx_octets =
		eff_rx_octets;
	pdu_ctrl_tx->payload.llctrl.ctrldata.length_rsp.max_rx_time =
    f790:	f10b 0b0e 	add.w	fp, fp, #14
		((eff_rx_octets + 14) << 3);
	pdu_ctrl_tx->payload.llctrl.ctrldata.length_rsp.max_tx_octets =
		eff_tx_octets;
	pdu_ctrl_tx->payload.llctrl.ctrldata.length_rsp.max_tx_time =
    f794:	320e      	adds	r2, #14
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
	LL_ASSERT(node_tx);

	pdu_ctrl_tx = (struct pdu_data *) node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
    f796:	7143      	strb	r3, [r0, #5]
		sizeof(struct pdu_data_llctrl_length_req_rsp);
	pdu_ctrl_tx->payload.llctrl.opcode =
		PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
	pdu_ctrl_tx->payload.llctrl.ctrldata.length_rsp.max_rx_octets =
		eff_rx_octets;
	pdu_ctrl_tx->payload.llctrl.ctrldata.length_rsp.max_rx_time =
    f798:	ea4f 0bcb 	mov.w	fp, fp, lsl #3

	pdu_ctrl_tx = (struct pdu_data *) node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
		sizeof(struct pdu_data_llctrl_length_req_rsp);
	pdu_ctrl_tx->payload.llctrl.opcode =
    f79c:	2315      	movs	r3, #21
		eff_rx_octets;
	pdu_ctrl_tx->payload.llctrl.ctrldata.length_rsp.max_rx_time =
		((eff_rx_octets + 14) << 3);
	pdu_ctrl_tx->payload.llctrl.ctrldata.length_rsp.max_tx_octets =
		eff_tx_octets;
	pdu_ctrl_tx->payload.llctrl.ctrldata.length_rsp.max_tx_time =
    f79e:	00d2      	lsls	r2, r2, #3

	pdu_ctrl_tx = (struct pdu_data *) node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
		sizeof(struct pdu_data_llctrl_length_req_rsp);
	pdu_ctrl_tx->payload.llctrl.opcode =
    f7a0:	71c3      	strb	r3, [r0, #7]
		PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
	pdu_ctrl_tx->payload.llctrl.ctrldata.length_rsp.max_rx_octets =
		eff_rx_octets;
	pdu_ctrl_tx->payload.llctrl.ctrldata.length_rsp.max_rx_time =
    f7a2:	f8a0 b00a 	strh.w	fp, [r0, #10]
		((eff_rx_octets + 14) << 3);
	pdu_ctrl_tx->payload.llctrl.ctrldata.length_rsp.max_tx_octets =
		eff_tx_octets;
	pdu_ctrl_tx->payload.llctrl.ctrldata.length_rsp.max_tx_time =
    f7a6:	81c2      	strh	r2, [r0, #14]
		((eff_tx_octets + 14) << 3);

	ctrl_tx_enqueue(conn, node_tx);
    f7a8:	4628      	mov	r0, r5
    f7aa:	f7fd fc9b 	bl	d0e4 <ctrl_tx_enqueue>
    f7ae:	e154      	b.n	fa5a <isr+0x15ea>
		break;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
	case PDU_DATA_LLCTRL_TYPE_PHY_REQ:
		if (_radio.role == ROLE_MASTER) {
    f7b0:	7be3      	ldrb	r3, [r4, #15]
    f7b2:	2b04      	cmp	r3, #4
    f7b4:	d160      	bne.n	f878 <isr+0x1408>
			if ((_radio.conn_curr->llcp_phy.ack !=
    f7b6:	f895 30bd 	ldrb.w	r3, [r5, #189]	; 0xbd
			     _radio.conn_curr->llcp_phy.req) &&
    f7ba:	f895 10bc 	ldrb.w	r1, [r5, #188]	; 0xbc
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
	case PDU_DATA_LLCTRL_TYPE_PHY_REQ:
		if (_radio.role == ROLE_MASTER) {
			if ((_radio.conn_curr->llcp_phy.ack !=
    f7be:	428b      	cmp	r3, r1
    f7c0:	d02a      	beq.n	f818 <isr+0x13a8>
			     _radio.conn_curr->llcp_phy.req) &&
    f7c2:	f895 20be 	ldrb.w	r2, [r5, #190]	; 0xbe
    f7c6:	f002 0203 	and.w	r2, r2, #3
    f7ca:	3a01      	subs	r2, #1
    f7cc:	2a02      	cmp	r2, #2
    f7ce:	d823      	bhi.n	f818 <isr+0x13a8>
			     (_radio.conn_curr->llcp_phy.state ==
			      LLCP_PHY_STATE_RSP_WAIT) ||
			     (_radio.conn_curr->llcp_phy.state ==
			      LLCP_PHY_STATE_UPD))) {
				/* cross-over */
				reject_ind_ext_send(_radio.conn_curr,
    f7d0:	2223      	movs	r2, #35	; 0x23
    f7d2:	2116      	movs	r1, #22
    f7d4:	4628      	mov	r0, r5
    f7d6:	f7fd fd2f 	bl	d238 <reject_ind_ext_send>
    f7da:	f000 bc1f 	b.w	1001c <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x1d>
    f7de:	bf00      	nop
    f7e0:	00013df4 	.word	0x00013df4
    f7e4:	00013df9 	.word	0x00013df9
    f7e8:	00013db4 	.word	0x00013db4
    f7ec:	00016a2a 	.word	0x00016a2a
    f7f0:	00013dbb 	.word	0x00013dbb
    f7f4:	00015b30 	.word	0x00015b30
    f7f8:	20001470 	.word	0x20001470
    f7fc:	00016ade 	.word	0x00016ade
    f800:	20001648 	.word	0x20001648
    f804:	000167a8 	.word	0x000167a8
    f808:	000167b7 	.word	0x000167b7
    f80c:	00016060 	.word	0x00016060
    f810:	000158c2 	.word	0x000158c2
    f814:	00016a59 	.word	0x00016a59
				struct pdu_data_llctrl *c =
					&pdu_data_rx->payload.llctrl;
				struct pdu_data_llctrl_phy_req_rsp *p =
					&c->ctrldata.phy_req;

				_radio.conn_curr->llcp_phy.state =
    f818:	f895 20be 	ldrb.w	r2, [r5, #190]	; 0xbe
					LLCP_PHY_STATE_UPD;

				if (_radio.conn_curr->llcp_phy.ack ==
    f81c:	428b      	cmp	r3, r1
				struct pdu_data_llctrl *c =
					&pdu_data_rx->payload.llctrl;
				struct pdu_data_llctrl_phy_req_rsp *p =
					&c->ctrldata.phy_req;

				_radio.conn_curr->llcp_phy.state =
    f81e:	f042 0203 	orr.w	r2, r2, #3
    f822:	f885 20be 	strb.w	r2, [r5, #190]	; 0xbe
					LLCP_PHY_STATE_UPD;

				if (_radio.conn_curr->llcp_phy.ack ==
    f826:	d114      	bne.n	f852 <isr+0x13e2>
				    _radio.conn_curr->llcp_phy.req) {
					_radio.conn_curr->llcp_phy.ack--;
    f828:	3b01      	subs	r3, #1
    f82a:	f885 30bd 	strb.w	r3, [r5, #189]	; 0xbd

					_radio.conn_curr->llcp_phy.cmd = 0;
    f82e:	f895 30bf 	ldrb.w	r3, [r5, #191]	; 0xbf

					_radio.conn_curr->llcp_phy.tx =
						_radio.conn_curr->phy_pref_tx;
    f832:	f895 2032 	ldrb.w	r2, [r5, #50]	; 0x32

				if (_radio.conn_curr->llcp_phy.ack ==
				    _radio.conn_curr->llcp_phy.req) {
					_radio.conn_curr->llcp_phy.ack--;

					_radio.conn_curr->llcp_phy.cmd = 0;
    f836:	f36f 0341 	bfc	r3, #1, #1
    f83a:	f885 30bf 	strb.w	r3, [r5, #191]	; 0xbf

					_radio.conn_curr->llcp_phy.tx =
    f83e:	f895 30be 	ldrb.w	r3, [r5, #190]	; 0xbe
    f842:	f362 0384 	bfi	r3, r2, #2, #3
						_radio.conn_curr->phy_pref_tx;
					_radio.conn_curr->llcp_phy.rx =
						_radio.conn_curr->phy_pref_rx;
    f846:	f895 2033 	ldrb.w	r2, [r5, #51]	; 0x33

					_radio.conn_curr->llcp_phy.cmd = 0;

					_radio.conn_curr->llcp_phy.tx =
						_radio.conn_curr->phy_pref_tx;
					_radio.conn_curr->llcp_phy.rx =
    f84a:	f362 1347 	bfi	r3, r2, #5, #3
    f84e:	f885 30be 	strb.w	r3, [r5, #190]	; 0xbe
						_radio.conn_curr->phy_pref_rx;
				}

				_radio.conn_curr->llcp_phy.tx &= p->rx_phys;
    f852:	f895 30be 	ldrb.w	r3, [r5, #190]	; 0xbe
    f856:	7b79      	ldrb	r1, [r7, #13]
    f858:	f3c3 0282 	ubfx	r2, r3, #2, #3
    f85c:	400a      	ands	r2, r1
    f85e:	f362 0384 	bfi	r3, r2, #2, #3
    f862:	f885 30be 	strb.w	r3, [r5, #190]	; 0xbe
				_radio.conn_curr->llcp_phy.rx &= p->tx_phys;
    f866:	7b3a      	ldrb	r2, [r7, #12]
    f868:	b2db      	uxtb	r3, r3
    f86a:	ea02 1253 	and.w	r2, r2, r3, lsr #5
    f86e:	f362 1347 	bfi	r3, r2, #5, #3
    f872:	f885 30be 	strb.w	r3, [r5, #190]	; 0xbe
    f876:	e3d1      	b.n	1001c <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x1d>
{
	struct radio_pdu_node_tx *node_tx;
	struct pdu_data *pdu_ctrl_tx;

	/* acquire tx mem */
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    f878:	48ba      	ldr	r0, [pc, #744]	; (fb64 <isr+0x16f4>)
    f87a:	f7f9 ffe6 	bl	984a <mem_acquire>
	LL_ASSERT(node_tx);
    f87e:	4601      	mov	r1, r0
    f880:	b928      	cbnz	r0, f88e <isr+0x141e>
    f882:	4bb9      	ldr	r3, [pc, #740]	; (fb68 <isr+0x16f8>)
    f884:	9301      	str	r3, [sp, #4]
    f886:	4bb9      	ldr	r3, [pc, #740]	; (fb6c <isr+0x16fc>)
    f888:	9300      	str	r3, [sp, #0]
    f88a:	4bb9      	ldr	r3, [pc, #740]	; (fb70 <isr+0x1700>)
    f88c:	e0bb      	b.n	fa06 <isr+0x1596>

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    f88e:	7903      	ldrb	r3, [r0, #4]
    f890:	f043 0303 	orr.w	r3, r3, #3
    f894:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
    f896:	2303      	movs	r3, #3
    f898:	7143      	strb	r3, [r0, #5]
			   sizeof(struct pdu_data_llctrl_phy_req_rsp);
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
    f89a:	2317      	movs	r3, #23
    f89c:	71c3      	strb	r3, [r0, #7]
	pdu_ctrl_tx->payload.llctrl.ctrldata.phy_rsp.tx_phys =
		conn->phy_pref_tx;
    f89e:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
    f8a2:	f3c3 0302 	ubfx	r3, r3, #0, #3
	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
			   sizeof(struct pdu_data_llctrl_phy_req_rsp);
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
	pdu_ctrl_tx->payload.llctrl.ctrldata.phy_rsp.tx_phys =
    f8a6:	7203      	strb	r3, [r0, #8]
		conn->phy_pref_tx;
	pdu_ctrl_tx->payload.llctrl.ctrldata.phy_rsp.rx_phys =
		conn->phy_pref_rx;
    f8a8:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
    f8ac:	f3c3 0302 	ubfx	r3, r3, #0, #3
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
			   sizeof(struct pdu_data_llctrl_phy_req_rsp);
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
	pdu_ctrl_tx->payload.llctrl.ctrldata.phy_rsp.tx_phys =
		conn->phy_pref_tx;
	pdu_ctrl_tx->payload.llctrl.ctrldata.phy_rsp.rx_phys =
    f8b0:	7243      	strb	r3, [r0, #9]
    f8b2:	e0b5      	b.n	fa20 <isr+0x15b0>
			phy_rsp_send(_radio.conn_curr);
		}
		break;

	case PDU_DATA_LLCTRL_TYPE_PHY_RSP:
		if ((_radio.role == ROLE_MASTER) &&
    f8b4:	7be3      	ldrb	r3, [r4, #15]
    f8b6:	2b04      	cmp	r3, #4
    f8b8:	f040 83b0 	bne.w	1001c <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x1d>
    f8bc:	f895 20bd 	ldrb.w	r2, [r5, #189]	; 0xbd
    f8c0:	f895 30bc 	ldrb.w	r3, [r5, #188]	; 0xbc
    f8c4:	429a      	cmp	r2, r3
    f8c6:	f000 83a9 	beq.w	1001c <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x1d>
		    (_radio.conn_curr->llcp_phy.ack !=
		     _radio.conn_curr->llcp_phy.req) &&
    f8ca:	f895 30be 	ldrb.w	r3, [r5, #190]	; 0xbe
    f8ce:	f003 0203 	and.w	r2, r3, #3
    f8d2:	2a02      	cmp	r2, #2
    f8d4:	f040 83a2 	bne.w	1001c <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x1d>
		    (_radio.conn_curr->llcp_phy.state ==
		     LLCP_PHY_STATE_RSP_WAIT)) {
			struct pdu_data_llctrl_phy_req_rsp *p =
				&pdu_data_rx->payload.llctrl.ctrldata.phy_rsp;

			_radio.conn_curr->llcp_phy.state = LLCP_PHY_STATE_UPD;
    f8d8:	f043 0303 	orr.w	r3, r3, #3
    f8dc:	f885 30be 	strb.w	r3, [r5, #190]	; 0xbe

			_radio.conn_curr->llcp_phy.tx &= p->rx_phys;
    f8e0:	7b79      	ldrb	r1, [r7, #13]
    f8e2:	f3c3 0282 	ubfx	r2, r3, #2, #3
    f8e6:	400a      	ands	r2, r1
    f8e8:	f362 0384 	bfi	r3, r2, #2, #3
    f8ec:	f885 30be 	strb.w	r3, [r5, #190]	; 0xbe
			_radio.conn_curr->llcp_phy.rx &= p->tx_phys;
    f8f0:	7b3a      	ldrb	r2, [r7, #12]
    f8f2:	b2db      	uxtb	r3, r3
    f8f4:	ea02 1253 	and.w	r2, r2, r3, lsr #5
    f8f8:	f362 1347 	bfi	r3, r2, #5, #3
    f8fc:	f885 30be 	strb.w	r3, [r5, #190]	; 0xbe

			/* Procedure timeout is stopped */
			_radio.conn_curr->procedure_expire = 0;
    f900:	2600      	movs	r6, #0
    f902:	876e      	strh	r6, [r5, #58]	; 0x3a
    f904:	e0a9      	b.n	fa5a <isr+0x15ea>

	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
	p = &pdu_data_rx->payload.llctrl.ctrldata.phy_upd_ind;

	/* Both tx and rx PHY unchanged */
	if (!((p->m_to_s_phy | p->s_to_m_phy) & 0x07)) {
    f906:	7b3e      	ldrb	r6, [r7, #12]
    f908:	7b7b      	ldrb	r3, [r7, #13]
    f90a:	431e      	orrs	r6, r3
    f90c:	f016 0607 	ands.w	r6, r6, #7
    f910:	d122      	bne.n	f958 <isr+0x14e8>
		struct radio_le_phy_upd_cmplt *p;

		/* Ignore event generation if not local cmd initiated */
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
    f912:	f895 20bc 	ldrb.w	r2, [r5, #188]	; 0xbc
    f916:	f895 30bd 	ldrb.w	r3, [r5, #189]	; 0xbd
    f91a:	4293      	cmp	r3, r2
    f91c:	f000 809d 	beq.w	fa5a <isr+0x15ea>
		    (conn->llcp_phy.state != LLCP_PHY_STATE_RSP_WAIT) ||
    f920:	f8b5 30be 	ldrh.w	r3, [r5, #190]	; 0xbe
    f924:	f423 73fe 	bic.w	r3, r3, #508	; 0x1fc
    f928:	059b      	lsls	r3, r3, #22
    f92a:	0d9b      	lsrs	r3, r3, #22
    f92c:	f240 2102 	movw	r1, #514	; 0x202
    f930:	428b      	cmp	r3, r1
    f932:	f040 8092 	bne.w	fa5a <isr+0x15ea>
		/* Procedure complete */
		conn->llcp_phy.ack = conn->llcp_phy.req;
		conn->procedure_expire = 0;

		/* generate phy update complete event */
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    f936:	230c      	movs	r3, #12
		    (!conn->llcp_phy.cmd)) {
			return 0;
		}

		/* Procedure complete */
		conn->llcp_phy.ack = conn->llcp_phy.req;
    f938:	f885 20bd 	strb.w	r2, [r5, #189]	; 0xbd
		conn->procedure_expire = 0;
    f93c:	876e      	strh	r6, [r5, #58]	; 0x3a

		/* generate phy update complete event */
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    f93e:	713b      	strb	r3, [r7, #4]

		p = (struct radio_le_phy_upd_cmplt *)&pdu_data_rx->payload;
		p->status = 0;
    f940:	72fe      	strb	r6, [r7, #11]
		p->tx = conn->phy_tx;
    f942:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
    f946:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    f94a:	733b      	strb	r3, [r7, #12]
		p->rx = conn->phy_rx;
    f94c:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
    f950:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    f954:	737b      	strb	r3, [r7, #13]
    f956:	e42e      	b.n	f1b6 <isr+0xd46>

		return 0;
	}

	/* instant passed */
	if (((p->instant - conn->event_counter) & 0xffff) > 0x7fff) {
    f958:	89fb      	ldrh	r3, [r7, #14]
    f95a:	8c6a      	ldrh	r2, [r5, #34]	; 0x22
    f95c:	1a9b      	subs	r3, r3, r2
    f95e:	b29b      	uxth	r3, r3
    f960:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    f964:	f280 8357 	bge.w	10016 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x17>
		return 1;
	}

	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    f968:	f895 1068 	ldrb.w	r1, [r5, #104]	; 0x68
    f96c:	f895 3069 	ldrb.w	r3, [r5, #105]	; 0x69
    f970:	428b      	cmp	r3, r1
    f972:	d008      	beq.n	f986 <isr+0x1516>
    f974:	4b7c      	ldr	r3, [pc, #496]	; (fb68 <isr+0x16f8>)
    f976:	9301      	str	r3, [sp, #4]
    f978:	4b7c      	ldr	r3, [pc, #496]	; (fb6c <isr+0x16fc>)
    f97a:	9300      	str	r3, [sp, #0]
    f97c:	4b7d      	ldr	r3, [pc, #500]	; (fb74 <isr+0x1704>)
    f97e:	4a7e      	ldr	r2, [pc, #504]	; (fb78 <isr+0x1708>)
    f980:	497e      	ldr	r1, [pc, #504]	; (fb7c <isr+0x170c>)
    f982:	487f      	ldr	r0, [pc, #508]	; (fb80 <isr+0x1710>)
    f984:	e330      	b.n	ffe8 <isr+0x1b78>

	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
    f986:	f895 30bc 	ldrb.w	r3, [r5, #188]	; 0xbc
    f98a:	f895 20bd 	ldrb.w	r2, [r5, #189]	; 0xbd
    f98e:	429a      	cmp	r2, r3
    f990:	d013      	beq.n	f9ba <isr+0x154a>
    f992:	f895 20be 	ldrb.w	r2, [r5, #190]	; 0xbe
    f996:	f002 0203 	and.w	r2, r2, #3
    f99a:	2a02      	cmp	r2, #2
    f99c:	d10d      	bne.n	f9ba <isr+0x154a>
	    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
		conn->llcp_phy.ack = conn->llcp_phy.req;
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    f99e:	f895 20bf 	ldrb.w	r2, [r5, #191]	; 0xbf

	LL_ASSERT(conn->llcp_req == conn->llcp_ack);

	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
	    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
		conn->llcp_phy.ack = conn->llcp_phy.req;
    f9a2:	f885 30bd 	strb.w	r3, [r5, #189]	; 0xbd
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    f9a6:	f895 306c 	ldrb.w	r3, [r5, #108]	; 0x6c
    f9aa:	f3c2 0240 	ubfx	r2, r2, #1, #1
    f9ae:	f362 0341 	bfi	r3, r2, #1, #1
    f9b2:	f885 306c 	strb.w	r3, [r5, #108]	; 0x6c

		/* Procedure complete, just wait for instant */
		conn->procedure_expire = 0;
    f9b6:	2300      	movs	r3, #0
    f9b8:	876b      	strh	r3, [r5, #58]	; 0x3a
	}

	conn->llcp.phy_upd_ind.tx = p->s_to_m_phy;
    f9ba:	7b7a      	ldrb	r2, [r7, #13]
    f9bc:	f895 306c 	ldrb.w	r3, [r5, #108]	; 0x6c
    f9c0:	f362 0384 	bfi	r3, r2, #2, #3
    f9c4:	f885 306c 	strb.w	r3, [r5, #108]	; 0x6c
	conn->llcp.phy_upd_ind.rx = p->m_to_s_phy;
    f9c8:	7b3a      	ldrb	r2, [r7, #12]
    f9ca:	f362 1347 	bfi	r3, r2, #5, #3
    f9ce:	f885 306c 	strb.w	r3, [r5, #108]	; 0x6c
	conn->llcp.phy_upd_ind.instant = p->instant;
    f9d2:	89fb      	ldrh	r3, [r7, #14]
    f9d4:	f8a5 306e 	strh.w	r3, [r5, #110]	; 0x6e
	conn->llcp.phy_upd_ind.initiate = 0;
    f9d8:	f895 306c 	ldrb.w	r3, [r5, #108]	; 0x6c
    f9dc:	f36f 0300 	bfc	r3, #0, #1
    f9e0:	f885 306c 	strb.w	r3, [r5, #108]	; 0x6c

	conn->llcp_type = LLCP_PHY_UPD;
    f9e4:	2307      	movs	r3, #7
    f9e6:	f885 306a 	strb.w	r3, [r5, #106]	; 0x6a
	conn->llcp_ack--;
    f9ea:	1e4b      	subs	r3, r1, #1
    f9ec:	f885 3069 	strb.w	r3, [r5, #105]	; 0x69
    f9f0:	e314      	b.n	1001c <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x1d>
{
	struct radio_pdu_node_tx *node_tx;
	struct pdu_data *pdu_ctrl_tx;

	/* acquire tx mem */
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    f9f2:	485c      	ldr	r0, [pc, #368]	; (fb64 <isr+0x16f4>)
    f9f4:	f7f9 ff29 	bl	984a <mem_acquire>
	LL_ASSERT(node_tx);
    f9f8:	4601      	mov	r1, r0
    f9fa:	b940      	cbnz	r0, fa0e <isr+0x159e>
    f9fc:	4b5a      	ldr	r3, [pc, #360]	; (fb68 <isr+0x16f8>)
    f9fe:	9301      	str	r3, [sp, #4]
    fa00:	4b5a      	ldr	r3, [pc, #360]	; (fb6c <isr+0x16fc>)
    fa02:	9300      	str	r3, [sp, #0]
    fa04:	4b5f      	ldr	r3, [pc, #380]	; (fb84 <isr+0x1714>)
    fa06:	4a5c      	ldr	r2, [pc, #368]	; (fb78 <isr+0x1708>)
    fa08:	495c      	ldr	r1, [pc, #368]	; (fb7c <isr+0x170c>)
    fa0a:	485f      	ldr	r0, [pc, #380]	; (fb88 <isr+0x1718>)
    fa0c:	e2ec      	b.n	ffe8 <isr+0x1b78>

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    fa0e:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata)
		+ sizeof(struct pdu_data_llctrl_unknown_rsp);
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
	pdu_ctrl_tx->payload.llctrl.ctrldata.unknown_rsp.type = type;
    fa10:	7206      	strb	r6, [r0, #8]
	/* acquire tx mem */
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
	LL_ASSERT(node_tx);

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    fa12:	f043 0303 	orr.w	r3, r3, #3
    fa16:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata)
    fa18:	2302      	movs	r3, #2
    fa1a:	7143      	strb	r3, [r0, #5]
		+ sizeof(struct pdu_data_llctrl_unknown_rsp);
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
    fa1c:	2307      	movs	r3, #7
    fa1e:	71c3      	strb	r3, [r0, #7]
	pdu_ctrl_tx->payload.llctrl.ctrldata.unknown_rsp.type = type;

	ctrl_tx_enqueue(conn, node_tx);
    fa20:	4628      	mov	r0, r5
    fa22:	f7fd fb5f 	bl	d0e4 <ctrl_tx_enqueue>
    fa26:	e2f9      	b.n	1001c <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x1d>
				nack = isr_rx_conn_pkt_ctrl(radio_pdu_node_rx,
							    rx_enqueue);
				break;
			case PDU_DATA_LLID_RESV:
			default:
				LL_ASSERT(0);
    fa28:	4b4f      	ldr	r3, [pc, #316]	; (fb68 <isr+0x16f8>)
    fa2a:	9301      	str	r3, [sp, #4]
    fa2c:	4b4f      	ldr	r3, [pc, #316]	; (fb6c <isr+0x16fc>)
    fa2e:	9300      	str	r3, [sp, #0]
    fa30:	4b56      	ldr	r3, [pc, #344]	; (fb8c <isr+0x171c>)
    fa32:	e2d6      	b.n	ffe2 <isr+0x1b72>
				break;
			}

#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_PING)
		} else if ((_radio.conn_curr->enc_rx) ||
    fa34:	f893 20c0 	ldrb.w	r2, [r3, #192]	; 0xc0
    fa38:	f012 0214 	ands.w	r2, r2, #20
    fa3c:	f000 82f0 	beq.w	10020 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x21>
			   (_radio.conn_curr->pause_rx)) {
			/* start authenticated payload (pre) timeout */
			if (_radio.conn_curr->apto_expire == 0) {
    fa40:	f8b3 6042 	ldrh.w	r6, [r3, #66]	; 0x42
    fa44:	2e00      	cmp	r6, #0
    fa46:	f040 82ed 	bne.w	10024 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x25>
				_radio.conn_curr->appto_expire =
    fa4a:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
    fa4c:	87da      	strh	r2, [r3, #62]	; 0x3e
					_radio.conn_curr->appto_reload;
				_radio.conn_curr->apto_expire =
    fa4e:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
    fa52:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    fa56:	e2e6      	b.n	10026 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x27>
			}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

		}

		if (!nack) {
    fa58:	bb4b      	cbnz	r3, faae <isr+0x163e>
			_radio.conn_curr->nesn++;
    fa5a:	f8d4 1190 	ldr.w	r1, [r4, #400]	; 0x190
    fa5e:	f891 30c0 	ldrb.w	r3, [r1, #192]	; 0xc0
    fa62:	f083 0302 	eor.w	r3, r3, #2
    fa66:	f881 30c0 	strb.w	r3, [r1, #192]	; 0xc0

			if (ccm_rx_increment) {
    fa6a:	f1ba 0f00 	cmp.w	sl, #0
    fa6e:	d01e      	beq.n	faae <isr+0x163e>
				_radio.conn_curr->ccm_rx.counter++;
    fa70:	f8d1 20d1 	ldr.w	r2, [r1, #209]	; 0xd1
    fa74:	f8d1 30d5 	ldr.w	r3, [r1, #213]	; 0xd5
    fa78:	3201      	adds	r2, #1
    fa7a:	f143 0300 	adc.w	r3, r3, #0
    fa7e:	f8c1 20d1 	str.w	r2, [r1, #209]	; 0xd1
    fa82:	f8c1 30d5 	str.w	r3, [r1, #213]	; 0xd5
    fa86:	e012      	b.n	faae <isr+0x163e>
		if (terminate) {
			goto isr_rx_conn_exit;
		}
	} else {
		/* Start CRC error countdown, if not already started */
		if (_radio.crc_expire == 0) {
    fa88:	f893 2195 	ldrb.w	r2, [r3, #405]	; 0x195
    fa8c:	b912      	cbnz	r2, fa94 <isr+0x1624>
			_radio.crc_expire = 2;
    fa8e:	2202      	movs	r2, #2
    fa90:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
		}

		/* Check crc error countdown expiry */
		_radio.crc_expire--;
    fa94:	f894 5195 	ldrb.w	r5, [r4, #405]	; 0x195
    fa98:	3d01      	subs	r5, #1
    fa9a:	b2ed      	uxtb	r5, r5
    fa9c:	f884 5195 	strb.w	r5, [r4, #405]	; 0x195
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	struct radio_pdu_node_tx *tx_release = NULL;
	u8_t is_empty_pdu_tx_retry;
	struct pdu_data *pdu_data_rx;
	struct pdu_data *pdu_data_tx;
	u8_t rx_enqueue = 0;
    faa0:	2600      	movs	r6, #0
			_radio.crc_expire = 2;
		}

		/* Check crc error countdown expiry */
		_radio.crc_expire--;
		crc_close = (_radio.crc_expire == 0);
    faa2:	fab5 f585 	clz	r5, r5
    faa6:	096d      	lsrs	r5, r5, #5

static inline void isr_rx_conn(u8_t crc_ok, u8_t trx_done,
			       u8_t rssi_ready)
{
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	struct radio_pdu_node_tx *tx_release = NULL;
    faa8:	46b0      	mov	r8, r6
    faaa:	e001      	b.n	fab0 <isr+0x1640>
	u8_t is_empty_pdu_tx_retry;
	struct pdu_data *pdu_data_rx;
	struct pdu_data *pdu_data_tx;
	u8_t rx_enqueue = 0;
    faac:	2600      	movs	r6, #0
	u8_t crc_close = 0;
    faae:	2500      	movs	r5, #0
		_radio.crc_expire--;
		crc_close = (_radio.crc_expire == 0);
	}

	/* prepare transmit packet */
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
    fab0:	f8d4 0190 	ldr.w	r0, [r4, #400]	; 0x190
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
    fab4:	a90d      	add	r1, sp, #52	; 0x34
		_radio.crc_expire--;
		crc_close = (_radio.crc_expire == 0);
	}

	/* prepare transmit packet */
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
    fab6:	f890 a0c0 	ldrb.w	sl, [r0, #192]	; 0xc0
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
    faba:	f7fb fe3b 	bl	b734 <prepare_pdu_data_tx>
		}
	}

	/* Decide on event continuation and hence Radio Shorts to use */
	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    fabe:	7c23      	ldrb	r3, [r4, #16]
    fac0:	2b03      	cmp	r3, #3
		_radio.crc_expire--;
		crc_close = (_radio.crc_expire == 0);
	}

	/* prepare transmit packet */
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
    fac2:	ea4f 1ada 	mov.w	sl, sl, lsr #7
		}
	}

	/* Decide on event continuation and hence Radio Shorts to use */
	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    fac6:	d013      	beq.n	faf0 <isr+0x1680>
    fac8:	b98d      	cbnz	r5, faee <isr+0x167e>
    faca:	f1b9 0f00 	cmp.w	r9, #0
    face:	d005      	beq.n	fadc <isr+0x166c>
			((crc_ok) && (pdu_data_rx->md == 0) &&
    fad0:	7a3b      	ldrb	r3, [r7, #8]
    fad2:	06d9      	lsls	r1, r3, #27
    fad4:	d402      	bmi.n	fadc <isr+0x166c>
			 (pdu_data_tx->len == 0)) ||
    fad6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
	}

	/* Decide on event continuation and hence Radio Shorts to use */
	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
			((crc_ok) && (pdu_data_rx->md == 0) &&
    fad8:	785b      	ldrb	r3, [r3, #1]
    fada:	b143      	cbz	r3, faee <isr+0x167e>
			 (pdu_data_tx->len == 0)) ||
			(_radio.conn_curr->llcp_terminate.reason_peer != 0)) ?
    fadc:	f8d4 3190 	ldr.w	r3, [r4, #400]	; 0x190

	/* Decide on event continuation and hence Radio Shorts to use */
	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
			((crc_ok) && (pdu_data_rx->md == 0) &&
			 (pdu_data_tx->len == 0)) ||
    fae0:	f893 30a7 	ldrb.w	r3, [r3, #167]	; 0xa7
		}
	}

	/* Decide on event continuation and hence Radio Shorts to use */
	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    fae4:	2b00      	cmp	r3, #0
    fae6:	bf14      	ite	ne
    fae8:	2303      	movne	r3, #3
    faea:	2302      	moveq	r3, #2
    faec:	e000      	b.n	faf0 <isr+0x1680>
    faee:	2303      	movs	r3, #3
			((crc_ok) && (pdu_data_rx->md == 0) &&
			 (pdu_data_tx->len == 0)) ||
			(_radio.conn_curr->llcp_terminate.reason_peer != 0)) ?
			STATE_CLOSE : STATE_TX;

	if (_radio.state == STATE_CLOSE) {
    faf0:	2b03      	cmp	r3, #3
		}
	}

	/* Decide on event continuation and hence Radio Shorts to use */
	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    faf2:	4d27      	ldr	r5, [pc, #156]	; (fb90 <isr+0x1720>)
    faf4:	7423      	strb	r3, [r4, #16]
			((crc_ok) && (pdu_data_rx->md == 0) &&
			 (pdu_data_tx->len == 0)) ||
			(_radio.conn_curr->llcp_terminate.reason_peer != 0)) ?
			STATE_CLOSE : STATE_TX;

	if (_radio.state == STATE_CLOSE) {
    faf6:	d110      	bne.n	fb1a <isr+0x16aa>
		/* Event close for master */
		if (_radio.role == ROLE_MASTER) {
    faf8:	7beb      	ldrb	r3, [r5, #15]
    fafa:	2b04      	cmp	r3, #4
    fafc:	d10a      	bne.n	fb14 <isr+0x16a4>
			_radio.conn_curr->empty = is_empty_pdu_tx_retry;
    fafe:	f8d5 3190 	ldr.w	r3, [r5, #400]	; 0x190
    fb02:	f893 20c0 	ldrb.w	r2, [r3, #192]	; 0xc0
    fb06:	f36a 12c7 	bfi	r2, sl, #7, #1
    fb0a:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

			radio_disable();
    fb0e:	f7fa f86d 	bl	9bec <radio_disable>
    fb12:	e022      	b.n	fb5a <isr+0x16ea>

			goto isr_rx_conn_exit;
		}
		/* Event close for slave */
		else {
			radio_switch_complete_and_disable();
    fb14:	f7fa f8d0 	bl	9cb8 <radio_switch_complete_and_disable>
    fb18:	e00c      	b.n	fb34 <isr+0x16c4>
		}
	} else {	/* if (_radio.state == STATE_TX) */
		radio_tmr_tifs_set(RADIO_TIFS);
    fb1a:	2096      	movs	r0, #150	; 0x96
    fb1c:	f7fa f948 	bl	9db0 <radio_tmr_tifs_set>

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
		radio_switch_complete_and_rx(_radio.conn_curr->phy_rx);
    fb20:	f8d5 3190 	ldr.w	r3, [r5, #400]	; 0x190
    fb24:	f893 0033 	ldrb.w	r0, [r3, #51]	; 0x33
    fb28:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    fb2c:	f7fa f8b4 	bl	9c98 <radio_switch_complete_and_rx>
#else /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */
		radio_switch_complete_and_rx(0);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */

		radio_tmr_end_capture();
    fb30:	f7fa f9ec 	bl	9f0c <radio_tmr_end_capture>
	}

	/* fill sn and nesn */
	pdu_data_tx->sn = _radio.conn_curr->sn;
    fb34:	990d      	ldr	r1, [sp, #52]	; 0x34
    fb36:	f8d4 0190 	ldr.w	r0, [r4, #400]	; 0x190
    fb3a:	780b      	ldrb	r3, [r1, #0]
    fb3c:	f890 20c0 	ldrb.w	r2, [r0, #192]	; 0xc0
    fb40:	f362 03c3 	bfi	r3, r2, #3, #1
    fb44:	700b      	strb	r3, [r1, #0]
	pdu_data_tx->nesn = _radio.conn_curr->nesn;
    fb46:	f890 30c0 	ldrb.w	r3, [r0, #192]	; 0xc0
    fb4a:	780a      	ldrb	r2, [r1, #0]
    fb4c:	f3c3 0340 	ubfx	r3, r3, #1, #1
    fb50:	f363 0282 	bfi	r2, r3, #2, #1
    fb54:	700a      	strb	r2, [r1, #0]

	/* setup the radio tx packet buffer */
	tx_packet_set(_radio.conn_curr, pdu_data_tx);
    fb56:	f7fb fe75 	bl	b844 <tx_packet_set>
	radio_tmr_sample();

#endif /* CONFIG_BLUETOOTH_CONTROLLER_PROFILE_ISR */

	/* release tx node and generate event for num complete */
	if (tx_release) {
    fb5a:	f1b8 0f00 	cmp.w	r8, #0
    fb5e:	d11e      	bne.n	fb9e <isr+0x172e>
    fb60:	e023      	b.n	fbaa <isr+0x173a>
    fb62:	bf00      	nop
    fb64:	20001648 	.word	0x20001648
    fb68:	00013df4 	.word	0x00013df4
    fb6c:	00013df9 	.word	0x00013df9
    fb70:	00016a4c 	.word	0x00016a4c
    fb74:	000167cc 	.word	0x000167cc
    fb78:	00013db4 	.word	0x00013db4
    fb7c:	00013dbb 	.word	0x00013dbb
    fb80:	00015a94 	.word	0x00015a94
    fb84:	00016750 	.word	0x00016750
    fb88:	00015870 	.word	0x00015870
    fb8c:	00016b3b 	.word	0x00016b3b
    fb90:	20001470 	.word	0x20001470
    fb94:	f1b8 0f00 	cmp.w	r8, #0
    fb98:	f000 8269 	beq.w	1006e <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x6f>
    fb9c:	2600      	movs	r6, #0
		pdu_node_tx_release(_radio.conn_curr->handle, tx_release);
    fb9e:	f8d4 3190 	ldr.w	r3, [r4, #400]	; 0x190
    fba2:	4641      	mov	r1, r8
    fba4:	8c18      	ldrh	r0, [r3, #32]
    fba6:	f7fc f921 	bl	bdec <pdu_node_tx_release>
	}

	/* enqueue any rx packet/event towards application */
	if (rx_enqueue) {
    fbaa:	2e00      	cmp	r6, #0
    fbac:	f000 825f 	beq.w	1006e <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x6f>
		/* set data flow control lock on currently rx-ed connection */
		rx_fc_lock(_radio.conn_curr->handle);
    fbb0:	f8d4 3190 	ldr.w	r3, [r4, #400]	; 0x190
    fbb4:	8c18      	ldrh	r0, [r3, #32]
    fbb6:	f7fb fec1 	bl	b93c <rx_fc_lock>

		/* set the connection handle and enqueue */
		radio_pdu_node_rx->hdr.handle = _radio.conn_curr->handle;
    fbba:	f8d4 3190 	ldr.w	r3, [r4, #400]	; 0x190
    fbbe:	8c1b      	ldrh	r3, [r3, #32]
    fbc0:	80fb      	strh	r3, [r7, #6]
		packet_rx_enqueue();
    fbc2:	f7fb fe6b 	bl	b89c <packet_rx_enqueue>
    fbc6:	e252      	b.n	1006e <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x6f>
		isr_rx_conn(crc_ok, trx_done, rssi_ready);
		break;

	case ROLE_NONE:
	default:
		LL_ASSERT(0);
    fbc8:	4bb3      	ldr	r3, [pc, #716]	; (fe98 <isr+0x1a28>)
    fbca:	9301      	str	r3, [sp, #4]
    fbcc:	4bb3      	ldr	r3, [pc, #716]	; (fe9c <isr+0x1a2c>)
    fbce:	9300      	str	r3, [sp, #0]
    fbd0:	4bb3      	ldr	r3, [pc, #716]	; (fea0 <isr+0x1a30>)
    fbd2:	e206      	b.n	ffe2 <isr+0x1b72>

static inline void isr_radio_state_close(void)
{
	u32_t dont_close = 0;

	switch (_radio.role) {
    fbd4:	7be2      	ldrb	r2, [r4, #15]
    fbd6:	2a04      	cmp	r2, #4
    fbd8:	f200 81f8 	bhi.w	ffcc <isr+0x1b5c>
    fbdc:	e8df f012 	tbh	[pc, r2, lsl #1]
    fbe0:	000501e7 	.word	0x000501e7
    fbe4:	007b0048 	.word	0x007b0048
    fbe8:	007b      	.short	0x007b

static inline u32_t isr_close_adv(void)
{
	u32_t dont_close = 0;

	if ((_radio.state == STATE_CLOSE) &&
    fbea:	2b03      	cmp	r3, #3
    fbec:	d10b      	bne.n	fc06 <isr+0x1796>
    fbee:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    fbf2:	f013 0f0e 	tst.w	r3, #14
    fbf6:	d006      	beq.n	fc06 <isr+0x1796>
	    (_radio.advertiser.chl_map_current != 0)) {
		dont_close = 1;

		adv_setup();
    fbf8:	f7fc fb40 	bl	c27c <adv_setup>

		radio_tx_enable();
    fbfc:	f7f9 fff0 	bl	9be0 <radio_tx_enable>

		radio_tmr_end_capture();
    fc00:	f7fa f984 	bl	9f0c <radio_tmr_end_capture>
    fc04:	e233      	b.n	1006e <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x6f>
	} else {
		struct pdu_adv *pdu_adv;

		radio_filter_disable();
    fc06:	f7fa f89b 	bl	9d40 <radio_filter_disable>

		pdu_adv = (struct pdu_adv *)
			&_radio.advertiser.adv_data.data[_radio.advertiser.adv_data.first][0];
		if ((_radio.state == STATE_CLOSE) &&
    fc0a:	7c23      	ldrb	r3, [r4, #16]
    fc0c:	4da5      	ldr	r5, [pc, #660]	; (fea4 <isr+0x1a34>)
    fc0e:	2b03      	cmp	r3, #3
    fc10:	f040 820b 	bne.w	1002a <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x2b>
	} else {
		struct pdu_adv *pdu_adv;

		radio_filter_disable();

		pdu_adv = (struct pdu_adv *)
    fc14:	f895 30f4 	ldrb.w	r3, [r5, #244]	; 0xf4
    fc18:	2227      	movs	r2, #39	; 0x27
    fc1a:	fb02 5303 	mla	r3, r2, r3, r5
			&_radio.advertiser.adv_data.data[_radio.advertiser.adv_data.first][0];
		if ((_radio.state == STATE_CLOSE) &&
    fc1e:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
    fc22:	f003 030f 	and.w	r3, r3, #15
    fc26:	2b01      	cmp	r3, #1
    fc28:	f000 81ff 	beq.w	1002a <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x2b>
			 * condition where in the Adv role is being stopped but
			 * at the same time it is preempted by Adv event that
			 * gets into close state. Accept failure when Adv role
			 * is being stopped.
			 */
			ticker_status =
    fc2c:	f640 3329 	movw	r3, #2857	; 0xb29
    fc30:	2100      	movs	r1, #0
    fc32:	9306      	str	r3, [sp, #24]
    fc34:	4b9c      	ldr	r3, [pc, #624]	; (fea8 <isr+0x1a38>)
    fc36:	9305      	str	r3, [sp, #20]
    fc38:	9104      	str	r1, [sp, #16]
    fc3a:	f240 1347 	movw	r3, #327	; 0x147
    fc3e:	9103      	str	r1, [sp, #12]
    fc40:	9102      	str	r1, [sp, #8]
    fc42:	9101      	str	r1, [sp, #4]
    fc44:	9100      	str	r1, [sp, #0]
    fc46:	2205      	movs	r2, #5
    fc48:	4608      	mov	r0, r1
    fc4a:	f7fb f8ed 	bl	ae28 <ticker_update>
					      TICKER_US_TO_TICKS(random_delay *
								 1000),
					      0, 0, 0, 0, 0,
					      ticker_update_adv_assert,
					      (void *)__LINE__);
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    fc4e:	f030 0302 	bics.w	r3, r0, #2
    fc52:	f000 81ea 	beq.w	1002a <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x2b>
    fc56:	7bab      	ldrb	r3, [r5, #14]
    fc58:	2b05      	cmp	r3, #5
    fc5a:	f000 81e6 	beq.w	1002a <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x2b>
    fc5e:	4b8e      	ldr	r3, [pc, #568]	; (fe98 <isr+0x1a28>)
    fc60:	9301      	str	r3, [sp, #4]
    fc62:	4b8e      	ldr	r3, [pc, #568]	; (fe9c <isr+0x1a2c>)
    fc64:	9300      	str	r3, [sp, #0]
    fc66:	4a91      	ldr	r2, [pc, #580]	; (feac <isr+0x1a3c>)
    fc68:	4b91      	ldr	r3, [pc, #580]	; (feb0 <isr+0x1a40>)
    fc6a:	4992      	ldr	r1, [pc, #584]	; (feb4 <isr+0x1a44>)
    fc6c:	4892      	ldr	r0, [pc, #584]	; (feb8 <isr+0x1a48>)
    fc6e:	e1bb      	b.n	ffe8 <isr+0x1b78>

static inline u32_t isr_close_scan(void)
{
	u32_t dont_close = 0;

	if (_radio.state == STATE_CLOSE) {
    fc70:	2b03      	cmp	r3, #3
    fc72:	d122      	bne.n	fcba <isr+0x184a>
		dont_close = 1;

		radio_tmr_tifs_set(RADIO_TIFS);
    fc74:	2096      	movs	r0, #150	; 0x96
    fc76:	f7fa f89b 	bl	9db0 <radio_tmr_tifs_set>
		radio_switch_complete_and_tx(0, 0);
    fc7a:	2100      	movs	r1, #0
    fc7c:	4608      	mov	r0, r1
    fc7e:	f7fa f813 	bl	9ca8 <radio_switch_complete_and_tx>
		radio_pkt_rx_set(_radio.packet_rx[_radio.packet_rx_last]->
    fc82:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    fc86:	f894 21bd 	ldrb.w	r2, [r4, #445]	; 0x1bd
    fc8a:	4d86      	ldr	r5, [pc, #536]	; (fea4 <isr+0x1a34>)
    fc8c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    fc90:	3008      	adds	r0, #8
    fc92:	f7f9 ff87 	bl	9ba4 <radio_pkt_rx_set>
					pdu_data);
		radio_rssi_measure();
    fc96:	f7fa f817 	bl	9cc8 <radio_rssi_measure>

		if (_radio.scanner.filter_policy && _radio.nirk) {
    fc9a:	f894 315d 	ldrb.w	r3, [r4, #349]	; 0x15d
    fc9e:	f013 0f30 	tst.w	r3, #48	; 0x30
    fca2:	d005      	beq.n	fcb0 <isr+0x1840>
    fca4:	7c68      	ldrb	r0, [r5, #17]
    fca6:	b118      	cbz	r0, fcb0 <isr+0x1840>
			radio_ar_configure(_radio.nirk, _radio.irk);
    fca8:	f105 0112 	add.w	r1, r5, #18
    fcac:	f7fa f9ce 	bl	a04c <radio_ar_configure>
		}

		_radio.state = STATE_RX;
    fcb0:	2301      	movs	r3, #1
    fcb2:	7423      	strb	r3, [r4, #16]

		radio_rx_enable();
    fcb4:	f7f9 ff8e 	bl	9bd4 <radio_rx_enable>
    fcb8:	e7a2      	b.n	fc00 <isr+0x1790>

		radio_tmr_end_capture();
	} else {
		radio_filter_disable();
    fcba:	f7fa f841 	bl	9d40 <radio_filter_disable>

		if (_radio.state == STATE_ABORT) {
    fcbe:	7c23      	ldrb	r3, [r4, #16]
    fcc0:	2b05      	cmp	r3, #5
    fcc2:	f040 81b2 	bne.w	1002a <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x2b>
			/* Scanner stop can expire while here in this ISR.
			 * Deferred attempt to stop can fail as it would have
			 * expired, hence ignore failure.
			 */
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    fcc6:	2300      	movs	r3, #0
    fcc8:	9300      	str	r3, [sp, #0]
    fcca:	2204      	movs	r2, #4
    fccc:	4619      	mov	r1, r3
    fcce:	4618      	mov	r0, r3
    fcd0:	f7fb f8f0 	bl	aeb4 <ticker_stop>
    fcd4:	e1a9      	b.n	1002a <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x2b>
	u16_t elapsed_event;
	u16_t lazy;
	u8_t force;

	/* Local initiated terminate happened */
	if (_radio.conn_curr == 0) {
    fcd6:	f8d4 0190 	ldr.w	r0, [r4, #400]	; 0x190
    fcda:	4d72      	ldr	r5, [pc, #456]	; (fea4 <isr+0x1a34>)
    fcdc:	2800      	cmp	r0, #0
    fcde:	f000 81a4 	beq.w	1002a <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x2b>
		return;
	}

	/* Remote Initiated terminate happened in this event for Slave */
	if ((_radio.role == ROLE_SLAVE) &&
    fce2:	7beb      	ldrb	r3, [r5, #15]
    fce4:	2b03      	cmp	r3, #3
    fce6:	d10c      	bne.n	fd02 <isr+0x1892>
	    (_radio.conn_curr->llcp_terminate.reason_peer != 0)) {
    fce8:	f890 10a7 	ldrb.w	r1, [r0, #167]	; 0xa7
	if (_radio.conn_curr == 0) {
		return;
	}

	/* Remote Initiated terminate happened in this event for Slave */
	if ((_radio.role == ROLE_SLAVE) &&
    fcec:	b149      	cbz	r1, fd02 <isr+0x1892>
	    (_radio.conn_curr->llcp_terminate.reason_peer != 0)) {
		terminate_ind_rx_enqueue(_radio.conn_curr,
    fcee:	f7fc fe57 	bl	c9a0 <terminate_ind_rx_enqueue>
					 _radio.conn_curr->llcp_terminate.reason_peer);

		connection_release(_radio.conn_curr);
    fcf2:	f8d5 0190 	ldr.w	r0, [r5, #400]	; 0x190
    fcf6:	f7fc f9e7 	bl	c0c8 <connection_release>
		_radio.conn_curr = NULL;
    fcfa:	2300      	movs	r3, #0
    fcfc:	f8c5 3190 	str.w	r3, [r5, #400]	; 0x190
    fd00:	e193      	b.n	1002a <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x2b>
		return;
	}

	ticks_drift_plus = 0;
	ticks_drift_minus = 0;
	latency_event = _radio.conn_curr->latency_event;
    fd02:	f8b0 a02a 	ldrh.w	sl, [r0, #42]	; 0x2a
	elapsed_event = latency_event + 1;

	/* calculate drift if anchor point sync-ed */
	if ((_radio.packet_counter != 0) && ((!SILENT_CONNECTION) ||
    fd06:	4e67      	ldr	r6, [pc, #412]	; (fea4 <isr+0x1a34>)
    fd08:	f894 7194 	ldrb.w	r7, [r4, #404]	; 0x194
					     (_radio.packet_counter != 0xFF))) {
		if (_radio.role == ROLE_SLAVE) {
    fd0c:	7bf3      	ldrb	r3, [r6, #15]
	}

	ticks_drift_plus = 0;
	ticks_drift_minus = 0;
	latency_event = _radio.conn_curr->latency_event;
	elapsed_event = latency_event + 1;
    fd0e:	f10a 0501 	add.w	r5, sl, #1
    fd12:	b2ad      	uxth	r5, r5

	/* calculate drift if anchor point sync-ed */
	if ((_radio.packet_counter != 0) && ((!SILENT_CONNECTION) ||
    fd14:	2f00      	cmp	r7, #0
    fd16:	d054      	beq.n	fdc2 <isr+0x1952>
					     (_radio.packet_counter != 0xFF))) {
		if (_radio.role == ROLE_SLAVE) {
    fd18:	2b03      	cmp	r3, #3
    fd1a:	d148      	bne.n	fdae <isr+0x193e>
			u32_t start_to_address_actual_us;
			u32_t window_widening_event_us;
			u32_t preamble_to_addr_us;

			/* calculate the drift in ticks */
			start_to_address_actual_us = radio_tmr_aa_get();
    fd1c:	f7fa f8ec 	bl	9ef8 <radio_tmr_aa_get>
			window_widening_event_us =
				_radio.conn_curr->role.slave.window_widening_event_us;
    fd20:	f8d6 6190 	ldr.w	r6, [r6, #400]	; 0x190
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
			preamble_to_addr_us =
				addr_us_get(_radio.conn_curr->phy_rx);
    fd24:	f896 3033 	ldrb.w	r3, [r6, #51]	; 0x33
	packet_rx_allocate(0xFF);
}

static inline u32_t addr_us_get(u8_t phy)
{
	switch (phy) {
    fd28:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    fd2c:	2b02      	cmp	r3, #2
			u32_t start_to_address_actual_us;
			u32_t window_widening_event_us;
			u32_t preamble_to_addr_us;

			/* calculate the drift in ticks */
			start_to_address_actual_us = radio_tmr_aa_get();
    fd2e:	4683      	mov	fp, r0
			window_widening_event_us =
    fd30:	6d70      	ldr	r0, [r6, #84]	; 0x54
	packet_rx_allocate(0xFF);
}

static inline u32_t addr_us_get(u8_t phy)
{
	switch (phy) {
    fd32:	d006      	beq.n	fd42 <isr+0x18d2>
	default:
	case BIT(0):
		return 40;
    fd34:	2b04      	cmp	r3, #4
    fd36:	bf0c      	ite	eq
    fd38:	f44f 78bc 	moveq.w	r8, #376	; 0x178
    fd3c:	f04f 0828 	movne.w	r8, #40	; 0x28
    fd40:	e001      	b.n	fd46 <isr+0x18d6>
	case BIT(1):
		return 24;
    fd42:	f04f 0818 	mov.w	r8, #24
			preamble_to_addr_us =
				addr_us_get(_radio.conn_curr->phy_rx);
#else /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */
			preamble_to_addr_us = addr_us_get(0);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */
			start_to_address_expected_us =
    fd46:	f100 0320 	add.w	r3, r0, #32
    fd4a:	4443      	add	r3, r8
				(RADIO_TICKER_JITTER_US << 1) +
				preamble_to_addr_us +
				window_widening_event_us;
			if (start_to_address_actual_us <=
    fd4c:	459b      	cmp	fp, r3
			preamble_to_addr_us =
				addr_us_get(_radio.conn_curr->phy_rx);
#else /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */
			preamble_to_addr_us = addr_us_get(0);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */
			start_to_address_expected_us =
    fd4e:	930a      	str	r3, [sp, #40]	; 0x28
    fd50:	f8df 9168 	ldr.w	r9, [pc, #360]	; febc <isr+0x1a4c>
				(RADIO_TICKER_JITTER_US << 1) +
				preamble_to_addr_us +
				window_widening_event_us;
			if (start_to_address_actual_us <=
			    start_to_address_expected_us) {
				ticks_drift_plus =
    fd54:	a34e      	add	r3, pc, #312	; (adr r3, fe90 <isr+0x1a20>)
    fd56:	e9d3 2300 	ldrd	r2, r3, [r3]
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */
			start_to_address_expected_us =
				(RADIO_TICKER_JITTER_US << 1) +
				preamble_to_addr_us +
				window_widening_event_us;
			if (start_to_address_actual_us <=
    fd5a:	d808      	bhi.n	fd6e <isr+0x18fe>
			    start_to_address_expected_us) {
				ticks_drift_plus =
    fd5c:	fba0 0109 	umull	r0, r1, r0, r9
    fd60:	f7f0 fa58 	bl	214 <__aeabi_uldivmod>
					TICKER_US_TO_TICKS(window_widening_event_us);
				ticks_drift_minus =
					TICKER_US_TO_TICKS((u64_t)(start_to_address_expected_us -
    fd64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
				(RADIO_TICKER_JITTER_US << 1) +
				preamble_to_addr_us +
				window_widening_event_us;
			if (start_to_address_actual_us <=
			    start_to_address_expected_us) {
				ticks_drift_plus =
    fd66:	b287      	uxth	r7, r0
					TICKER_US_TO_TICKS(window_widening_event_us);
				ticks_drift_minus =
					TICKER_US_TO_TICKS((u64_t)(start_to_address_expected_us -
    fd68:	ebcb 0003 	rsb	r0, fp, r3
    fd6c:	e006      	b.n	fd7c <isr+0x190c>
								      start_to_address_actual_us));
			} else {
				ticks_drift_plus =
    fd6e:	fbab 0109 	umull	r0, r1, fp, r9
    fd72:	f7f0 fa4f 	bl	214 <__aeabi_uldivmod>
    fd76:	b287      	uxth	r7, r0
					TICKER_US_TO_TICKS(start_to_address_actual_us);
				ticks_drift_minus =
					TICKER_US_TO_TICKS((RADIO_TICKER_JITTER_US << 1) +
    fd78:	f108 0020 	add.w	r0, r8, #32
					TICKER_US_TO_TICKS((u64_t)(start_to_address_expected_us -
								      start_to_address_actual_us));
			} else {
				ticks_drift_plus =
					TICKER_US_TO_TICKS(start_to_address_actual_us);
				ticks_drift_minus =
    fd7c:	a344      	add	r3, pc, #272	; (adr r3, fe90 <isr+0x1a20>)
    fd7e:	e9d3 2300 	ldrd	r2, r3, [r3]
    fd82:	fba0 0109 	umull	r0, r1, r0, r9
    fd86:	f7f0 fa45 	bl	214 <__aeabi_uldivmod>
							   preamble_to_addr_us);
			}


			/* Reset window widening, as anchor point sync-ed */
			_radio.conn_curr->role.slave.window_widening_event_us = 0;
    fd8a:	2300      	movs	r3, #0
    fd8c:	6573      	str	r3, [r6, #84]	; 0x54
			_radio.conn_curr->role.slave.window_size_event_us = 0;
    fd8e:	65f3      	str	r3, [r6, #92]	; 0x5c

			/* apply latency if no more data */
			_radio.conn_curr->latency_event = _radio.conn_curr->latency;
    fd90:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
    fd92:	8573      	strh	r3, [r6, #42]	; 0x2a
			if (_radio.conn_curr->pkt_tx_head) {
    fd94:	f8d6 3104 	ldr.w	r3, [r6, #260]	; 0x104
					TICKER_US_TO_TICKS((u64_t)(start_to_address_expected_us -
								      start_to_address_actual_us));
			} else {
				ticks_drift_plus =
					TICKER_US_TO_TICKS(start_to_address_actual_us);
				ticks_drift_minus =
    fd98:	fa1f f880 	uxth.w	r8, r0
			_radio.conn_curr->role.slave.window_widening_event_us = 0;
			_radio.conn_curr->role.slave.window_size_event_us = 0;

			/* apply latency if no more data */
			_radio.conn_curr->latency_event = _radio.conn_curr->latency;
			if (_radio.conn_curr->pkt_tx_head) {
    fd9c:	b163      	cbz	r3, fdb8 <isr+0x1948>
				struct pdu_data *pdu_data_tx;

				pdu_data_tx = (struct pdu_data *)
					_radio.conn_curr->pkt_tx_head->pdu_data;
				if (pdu_data_tx->len ||
    fd9e:	795b      	ldrb	r3, [r3, #5]
    fda0:	b913      	cbnz	r3, fda8 <isr+0x1938>
    fda2:	f896 3115 	ldrb.w	r3, [r6, #277]	; 0x115
    fda6:	b13b      	cbz	r3, fdb8 <isr+0x1948>
				    _radio.conn_curr->packet_tx_head_offset) {
					_radio.conn_curr->latency_event = 0;
    fda8:	2300      	movs	r3, #0
    fdaa:	8573      	strh	r3, [r6, #42]	; 0x2a
    fdac:	e004      	b.n	fdb8 <isr+0x1948>
				}
			}
		} else {
			/* Reset connection failed to establish procedure */
			_radio.conn_curr->role.master.connect_expire = 0;
    fdae:	f04f 0800 	mov.w	r8, #0
    fdb2:	f880 8045 	strb.w	r8, [r0, #69]	; 0x45
		_radio.conn_curr = NULL;

		return;
	}

	ticks_drift_plus = 0;
    fdb6:	4647      	mov	r7, r8
			/* Reset connection failed to establish procedure */
			_radio.conn_curr->role.master.connect_expire = 0;
		}

		/* Reset supervision counter */
		_radio.conn_curr->supervision_expire = 0;
    fdb8:	f8d4 3190 	ldr.w	r3, [r4, #400]	; 0x190
    fdbc:	2200      	movs	r2, #0
    fdbe:	86da      	strh	r2, [r3, #54]	; 0x36
    fdc0:	e025      	b.n	fe0e <isr+0x199e>
	}

	/* Remote Initiated terminate happened in previous event for Master */
	else if ((_radio.role == ROLE_MASTER) &&
    fdc2:	2b04      	cmp	r3, #4
    fdc4:	d10b      	bne.n	fdde <isr+0x196e>
		 (_radio.conn_curr->llcp_terminate.reason_peer != 0)) {
    fdc6:	f890 10a7 	ldrb.w	r1, [r0, #167]	; 0xa7
		/* Reset supervision counter */
		_radio.conn_curr->supervision_expire = 0;
	}

	/* Remote Initiated terminate happened in previous event for Master */
	else if ((_radio.role == ROLE_MASTER) &&
    fdca:	b141      	cbz	r1, fdde <isr+0x196e>
		 (_radio.conn_curr->llcp_terminate.reason_peer != 0)) {
		terminate_ind_rx_enqueue(_radio.conn_curr,
    fdcc:	f7fc fde8 	bl	c9a0 <terminate_ind_rx_enqueue>
					 _radio.conn_curr->llcp_terminate.reason_peer);

		connection_release(_radio.conn_curr);
    fdd0:	f8d6 0190 	ldr.w	r0, [r6, #400]	; 0x190
    fdd4:	f7fc f978 	bl	c0c8 <connection_release>
		_radio.conn_curr = NULL;
    fdd8:	f8c6 7190 	str.w	r7, [r6, #400]	; 0x190
    fddc:	e125      	b.n	1002a <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x2b>

		return;
	}

	/* If master, check connection failed to establish */
	else if ((_radio.role == ROLE_MASTER) &&
    fdde:	7be3      	ldrb	r3, [r4, #15]
    fde0:	4e30      	ldr	r6, [pc, #192]	; (fea4 <isr+0x1a34>)
    fde2:	2b04      	cmp	r3, #4
    fde4:	d10a      	bne.n	fdfc <isr+0x198c>
		 (_radio.conn_curr->role.master.connect_expire != 0)) {
    fde6:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45

		return;
	}

	/* If master, check connection failed to establish */
	else if ((_radio.role == ROLE_MASTER) &&
    fdea:	b13b      	cbz	r3, fdfc <isr+0x198c>
		 (_radio.conn_curr->role.master.connect_expire != 0)) {
		if (_radio.conn_curr->role.master.connect_expire >
    fdec:	429d      	cmp	r5, r3
    fdee:	d203      	bcs.n	fdf8 <isr+0x1988>
		    elapsed_event) {
			_radio.conn_curr->role.master.connect_expire -= elapsed_event;
    fdf0:	1b5b      	subs	r3, r3, r5
    fdf2:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
    fdf6:	e007      	b.n	fe08 <isr+0x1998>
		} else {
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x3e);
    fdf8:	213e      	movs	r1, #62	; 0x3e
    fdfa:	e027      	b.n	fe4c <isr+0x19dc>
	/* if anchor point not sync-ed, start supervision timeout, and break
	 * latency if any.
	 */
	else {
		/* Start supervision timeout, if not started already */
		if (_radio.conn_curr->supervision_expire == 0) {
    fdfc:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
    fdfe:	b91b      	cbnz	r3, fe08 <isr+0x1998>
			_radio.conn_curr->supervision_expire =
    fe00:	8e82      	ldrh	r2, [r0, #52]	; 0x34
    fe02:	86c2      	strh	r2, [r0, #54]	; 0x36

		return;
	}

	ticks_drift_plus = 0;
	ticks_drift_minus = 0;
    fe04:	4698      	mov	r8, r3
    fe06:	e001      	b.n	fe0c <isr+0x199c>
    fe08:	f04f 0800 	mov.w	r8, #0
		_radio.conn_curr = NULL;

		return;
	}

	ticks_drift_plus = 0;
    fe0c:	4647      	mov	r7, r8
		}
	}

	/* check supervision timeout */
	force = 0;
	if (_radio.conn_curr->supervision_expire != 0) {
    fe0e:	f8d4 0190 	ldr.w	r0, [r4, #400]	; 0x190
    fe12:	4e24      	ldr	r6, [pc, #144]	; (fea4 <isr+0x1a34>)
    fe14:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
    fe16:	b31b      	cbz	r3, fe60 <isr+0x19f0>
		if (_radio.conn_curr->supervision_expire > elapsed_event) {
    fe18:	429d      	cmp	r5, r3
    fe1a:	d216      	bcs.n	fe4a <isr+0x19da>
			_radio.conn_curr->supervision_expire -= elapsed_event;
    fe1c:	1b5b      	subs	r3, r3, r5
    fe1e:	b29b      	uxth	r3, r3

			/* break latency */
			_radio.conn_curr->latency_event = 0;
    fe20:	2200      	movs	r2, #0

			/* Force both master and slave when close to
			 * supervision timeout.
			 */
			if (_radio.conn_curr->supervision_expire <= 6) {
    fe22:	2b06      	cmp	r3, #6

	/* check supervision timeout */
	force = 0;
	if (_radio.conn_curr->supervision_expire != 0) {
		if (_radio.conn_curr->supervision_expire > elapsed_event) {
			_radio.conn_curr->supervision_expire -= elapsed_event;
    fe24:	86c3      	strh	r3, [r0, #54]	; 0x36

			/* break latency */
			_radio.conn_curr->latency_event = 0;
    fe26:	8542      	strh	r2, [r0, #42]	; 0x2a

			/* Force both master and slave when close to
			 * supervision timeout.
			 */
			if (_radio.conn_curr->supervision_expire <= 6) {
    fe28:	d91c      	bls.n	fe64 <isr+0x19f4>
				force = 1;
			}
			/* use randomness to force slave role when anchor
			 * points are being missed.
			 */
			else if (_radio.role == ROLE_SLAVE) {
    fe2a:	7bf3      	ldrb	r3, [r6, #15]
    fe2c:	2b03      	cmp	r3, #3
    fe2e:	d117      	bne.n	fe60 <isr+0x19f0>
				if (latency_event != 0) {
    fe30:	f1ba 0f00 	cmp.w	sl, #0
    fe34:	d116      	bne.n	fe64 <isr+0x19f4>
					force = 1;
				} else {
					force = _radio.conn_curr->role.slave.force & 0x01;
    fe36:	6e02      	ldr	r2, [r0, #96]	; 0x60

					/* rotate force bits */
					_radio.conn_curr->role.slave.force >>= 1;
    fe38:	0853      	lsrs	r3, r2, #1
					if (force) {
    fe3a:	07d2      	lsls	r2, r2, #31
    fe3c:	d401      	bmi.n	fe42 <isr+0x19d2>
					force = 1;
				} else {
					force = _radio.conn_curr->role.slave.force & 0x01;

					/* rotate force bits */
					_radio.conn_curr->role.slave.force >>= 1;
    fe3e:	6603      	str	r3, [r0, #96]	; 0x60
    fe40:	e00e      	b.n	fe60 <isr+0x19f0>
					if (force) {
						_radio.conn_curr->role.slave.force |=
    fe42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    fe46:	6603      	str	r3, [r0, #96]	; 0x60
    fe48:	e00c      	b.n	fe64 <isr+0x19f4>
							((u32_t)1 << 31);
					}
				}
			}
		} else {
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x08);
    fe4a:	2108      	movs	r1, #8
    fe4c:	f7fc fda8 	bl	c9a0 <terminate_ind_rx_enqueue>

			connection_release(_radio.conn_curr);
    fe50:	f8d6 0190 	ldr.w	r0, [r6, #400]	; 0x190
    fe54:	f7fc f938 	bl	c0c8 <connection_release>
			_radio.conn_curr = NULL;
    fe58:	2300      	movs	r3, #0
    fe5a:	f8c6 3190 	str.w	r3, [r6, #400]	; 0x190
    fe5e:	e0e4      	b.n	1002a <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x2b>
				_radio.conn_curr->supervision_reload;
		}
	}

	/* check supervision timeout */
	force = 0;
    fe60:	2600      	movs	r6, #0
    fe62:	e000      	b.n	fe66 <isr+0x19f6>

			/* Force both master and slave when close to
			 * supervision timeout.
			 */
			if (_radio.conn_curr->supervision_expire <= 6) {
				force = 1;
    fe64:	2601      	movs	r6, #1
			return;
		}
	}

	/* check procedure timeout */
	if (_radio.conn_curr->procedure_expire != 0) {
    fe66:	8f43      	ldrh	r3, [r0, #58]	; 0x3a
    fe68:	b353      	cbz	r3, fec0 <isr+0x1a50>
		if (_radio.conn_curr->procedure_expire > elapsed_event) {
    fe6a:	429d      	cmp	r5, r3
    fe6c:	d202      	bcs.n	fe74 <isr+0x1a04>
			_radio.conn_curr->procedure_expire -= elapsed_event;
    fe6e:	1b5b      	subs	r3, r3, r5
    fe70:	8743      	strh	r3, [r0, #58]	; 0x3a
    fe72:	e025      	b.n	fec0 <isr+0x1a50>
		} else {
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x22);
    fe74:	2122      	movs	r1, #34	; 0x22
    fe76:	f7fc fd93 	bl	c9a0 <terminate_ind_rx_enqueue>

			connection_release(_radio.conn_curr);
    fe7a:	f8d4 0190 	ldr.w	r0, [r4, #400]	; 0x190
    fe7e:	f7fc f923 	bl	c0c8 <connection_release>
			_radio.conn_curr = NULL;
    fe82:	2300      	movs	r3, #0
    fe84:	f8c4 3190 	str.w	r3, [r4, #400]	; 0x190
    fe88:	e0cf      	b.n	1002a <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x2b>
    fe8a:	bf00      	nop
    fe8c:	f3af 8000 	nop.w
    fe90:	1afd498d 	.word	0x1afd498d
    fe94:	00000007 	.word	0x00000007
    fe98:	00013df4 	.word	0x00013df4
    fe9c:	00013df9 	.word	0x00013df9
    fea0:	000169d9 	.word	0x000169d9
    fea4:	20001470 	.word	0x20001470
    fea8:	0000ba65 	.word	0x0000ba65
    feac:	00013db4 	.word	0x00013db4
    feb0:	0001684c 	.word	0x0001684c
    feb4:	00013dbb 	.word	0x00013dbb
    feb8:	00015bdc 	.word	0x00015bdc
    febc:	3b9aca00 	.word	0x3b9aca00
		}
	}

#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_PING)
	/* check apto */
	if (_radio.conn_curr->apto_expire != 0) {
    fec0:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
    fec4:	b1eb      	cbz	r3, ff02 <isr+0x1a92>
		if (_radio.conn_curr->apto_expire > elapsed_event) {
    fec6:	429d      	cmp	r5, r3
    fec8:	d203      	bcs.n	fed2 <isr+0x1a62>
			_radio.conn_curr->apto_expire -= elapsed_event;
    feca:	1b5b      	subs	r3, r3, r5
    fecc:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42
    fed0:	e017      	b.n	ff02 <isr+0x1a92>
		} else {
			struct radio_pdu_node_rx *radio_pdu_node_rx;

			_radio.conn_curr->apto_expire = 0;
    fed2:	2300      	movs	r3, #0
    fed4:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42

			/* Prepare the rx packet structure */
			radio_pdu_node_rx = packet_rx_reserve_get(2);
    fed8:	2002      	movs	r0, #2
    feda:	f7fb f911 	bl	b100 <packet_rx_reserve_get>
			LL_ASSERT(radio_pdu_node_rx);
    fede:	b940      	cbnz	r0, fef2 <isr+0x1a82>
    fee0:	4b64      	ldr	r3, [pc, #400]	; (10074 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x75>)
    fee2:	9301      	str	r3, [sp, #4]
    fee4:	4b64      	ldr	r3, [pc, #400]	; (10078 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x79>)
    fee6:	9300      	str	r3, [sp, #0]
    fee8:	4b64      	ldr	r3, [pc, #400]	; (1007c <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x7d>)
    feea:	4a65      	ldr	r2, [pc, #404]	; (10080 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x81>)
    feec:	4965      	ldr	r1, [pc, #404]	; (10084 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x85>)
    feee:	4866      	ldr	r0, [pc, #408]	; (10088 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x89>)
    fef0:	e07a      	b.n	ffe8 <isr+0x1b78>

			radio_pdu_node_rx->hdr.handle = _radio.conn_curr->handle;
    fef2:	f8d4 3190 	ldr.w	r3, [r4, #400]	; 0x190
    fef6:	8c1b      	ldrh	r3, [r3, #32]
    fef8:	80c3      	strh	r3, [r0, #6]
			radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_APTO;
    fefa:	230a      	movs	r3, #10
    fefc:	7103      	strb	r3, [r0, #4]

			/* enqueue apto event into rx queue */
			packet_rx_enqueue();
    fefe:	f7fb fccd 	bl	b89c <packet_rx_enqueue>
		}
	}

	/* check appto */
	if (_radio.conn_curr->appto_expire != 0) {
    ff02:	f8d4 3190 	ldr.w	r3, [r4, #400]	; 0x190
    ff06:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
    ff08:	f893 1068 	ldrb.w	r1, [r3, #104]	; 0x68
    ff0c:	b192      	cbz	r2, ff34 <isr+0x1ac4>
		if (_radio.conn_curr->appto_expire > elapsed_event) {
    ff0e:	4295      	cmp	r5, r2
    ff10:	d202      	bcs.n	ff18 <isr+0x1aa8>
			_radio.conn_curr->appto_expire -= elapsed_event;
    ff12:	1b55      	subs	r5, r2, r5
    ff14:	87dd      	strh	r5, [r3, #62]	; 0x3e
    ff16:	e00d      	b.n	ff34 <isr+0x1ac4>
		} else {
			_radio.conn_curr->appto_expire = 0;
    ff18:	2200      	movs	r2, #0
    ff1a:	87da      	strh	r2, [r3, #62]	; 0x3e

			if ((_radio.conn_curr->procedure_expire == 0) &&
    ff1c:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
    ff1e:	b94a      	cbnz	r2, ff34 <isr+0x1ac4>
    ff20:	f893 2069 	ldrb.w	r2, [r3, #105]	; 0x69
    ff24:	428a      	cmp	r2, r1
    ff26:	d109      	bne.n	ff3c <isr+0x1acc>
			    (_radio.conn_curr->llcp_req ==
			     _radio.conn_curr->llcp_ack)) {
				_radio.conn_curr->llcp_type = LLCP_PING;
    ff28:	2206      	movs	r2, #6
    ff2a:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
				_radio.conn_curr->llcp_ack--;
    ff2e:	1e4a      	subs	r2, r1, #1
    ff30:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
		}
	}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_CONN_RSSI */

	/* break latency based on ctrl procedure pending */
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
    ff34:	f893 2069 	ldrb.w	r2, [r3, #105]	; 0x69
    ff38:	428a      	cmp	r2, r1
    ff3a:	d006      	beq.n	ff4a <isr+0x1ada>
    ff3c:	f893 206a 	ldrb.w	r2, [r3, #106]	; 0x6a
    ff40:	3a01      	subs	r2, #1
    ff42:	2a01      	cmp	r2, #1
	    ((_radio.conn_curr->llcp_type == LLCP_CONNECTION_UPDATE) ||
	     (_radio.conn_curr->llcp_type == LLCP_CHAN_MAP))) {
		_radio.conn_curr->latency_event = 0;
    ff44:	bf9c      	itt	ls
    ff46:	2200      	movls	r2, #0
    ff48:	855a      	strhls	r2, [r3, #42]	; 0x2a
	}

	/* check if latency needs update */
	lazy = 0;
	if ((force) || (latency_event != _radio.conn_curr->latency_event)) {
    ff4a:	b916      	cbnz	r6, ff52 <isr+0x1ae2>
    ff4c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
    ff4e:	4552      	cmp	r2, sl
    ff50:	d003      	beq.n	ff5a <isr+0x1aea>
		lazy = _radio.conn_curr->latency_event + 1;
    ff52:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
    ff54:	3201      	adds	r2, #1
    ff56:	b292      	uxth	r2, r2
    ff58:	e000      	b.n	ff5c <isr+0x1aec>
	     (_radio.conn_curr->llcp_type == LLCP_CHAN_MAP))) {
		_radio.conn_curr->latency_event = 0;
	}

	/* check if latency needs update */
	lazy = 0;
    ff5a:	4632      	mov	r2, r6
	if ((force) || (latency_event != _radio.conn_curr->latency_event)) {
		lazy = _radio.conn_curr->latency_event + 1;
	}

	if ((ticks_drift_plus != 0) || (ticks_drift_minus != 0) ||
    ff5c:	b92f      	cbnz	r7, ff6a <isr+0x1afa>
    ff5e:	f1b8 0f00 	cmp.w	r8, #0
    ff62:	d102      	bne.n	ff6a <isr+0x1afa>
    ff64:	b90a      	cbnz	r2, ff6a <isr+0x1afa>
	    (lazy != 0) || (force != 0)) {
    ff66:	2e00      	cmp	r6, #0
    ff68:	d05f      	beq.n	1002a <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x2b>
		u32_t ticker_status;
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
    ff6a:	f893 5020 	ldrb.w	r5, [r3, #32]
		 * condition where in the Slave role is being stopped but
		 * at the same time it is preempted by Slave event that
		 * gets into close state. Accept failure when Slave role
		 * is being stopped.
		 */
		ticker_status =
    ff6e:	4b47      	ldr	r3, [pc, #284]	; (1008c <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x8d>)
    ff70:	9305      	str	r3, [sp, #20]
	}

	if ((ticks_drift_plus != 0) || (ticks_drift_minus != 0) ||
	    (lazy != 0) || (force != 0)) {
		u32_t ticker_status;
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
    ff72:	3507      	adds	r5, #7
		 * condition where in the Slave role is being stopped but
		 * at the same time it is preempted by Slave event that
		 * gets into close state. Accept failure when Slave role
		 * is being stopped.
		 */
		ticker_status =
    ff74:	2100      	movs	r1, #0
	}

	if ((ticks_drift_plus != 0) || (ticks_drift_minus != 0) ||
	    (lazy != 0) || (force != 0)) {
		u32_t ticker_status;
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
    ff76:	b2ed      	uxtb	r5, r5
		 * condition where in the Slave role is being stopped but
		 * at the same time it is preempted by Slave event that
		 * gets into close state. Accept failure when Slave role
		 * is being stopped.
		 */
		ticker_status =
    ff78:	9203      	str	r2, [sp, #12]
    ff7a:	463b      	mov	r3, r7
    ff7c:	9506      	str	r5, [sp, #24]
    ff7e:	9604      	str	r6, [sp, #16]
    ff80:	9102      	str	r1, [sp, #8]
    ff82:	9101      	str	r1, [sp, #4]
    ff84:	f8cd 8000 	str.w	r8, [sp]
    ff88:	462a      	mov	r2, r5
    ff8a:	4608      	mov	r0, r1
    ff8c:	f7fa ff4c 	bl	ae28 <ticker_update>
				      RADIO_TICKER_USER_ID_WORKER,
				      ticker_id,
				      ticks_drift_plus, ticks_drift_minus, 0, 0,
				      lazy, force, ticker_update_slave_assert,
				      (void *)(u32_t)ticker_id);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    ff90:	f030 0302 	bics.w	r3, r0, #2
    ff94:	d049      	beq.n	1002a <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x2b>
    ff96:	7ba3      	ldrb	r3, [r4, #14]
    ff98:	429d      	cmp	r5, r3
    ff9a:	d046      	beq.n	1002a <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x2b>
    ff9c:	4b35      	ldr	r3, [pc, #212]	; (10074 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x75>)
    ff9e:	9301      	str	r3, [sp, #4]
    ffa0:	4b35      	ldr	r3, [pc, #212]	; (10078 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x79>)
    ffa2:	9300      	str	r3, [sp, #0]
    ffa4:	4a36      	ldr	r2, [pc, #216]	; (10080 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x81>)
    ffa6:	4b35      	ldr	r3, [pc, #212]	; (1007c <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x7d>)
    ffa8:	4936      	ldr	r1, [pc, #216]	; (10084 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x85>)
    ffaa:	4839      	ldr	r0, [pc, #228]	; (10090 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x91>)
    ffac:	e01c      	b.n	ffe8 <isr+0x1b78>
		 * no active role at that instance in time.
		 * Just reset the state to none. The role has gracefully closed
		 * before this ISR run.
		 * The above applies to aborting a role event too.
		 */
		LL_ASSERT((_radio.state == STATE_STOP) ||
    ffae:	3b04      	subs	r3, #4
    ffb0:	2b01      	cmp	r3, #1
    ffb2:	d908      	bls.n	ffc6 <isr+0x1b56>
    ffb4:	4b2f      	ldr	r3, [pc, #188]	; (10074 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x75>)
    ffb6:	9301      	str	r3, [sp, #4]
    ffb8:	4b2f      	ldr	r3, [pc, #188]	; (10078 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x79>)
    ffba:	9300      	str	r3, [sp, #0]
    ffbc:	4a30      	ldr	r2, [pc, #192]	; (10080 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x81>)
    ffbe:	4b35      	ldr	r3, [pc, #212]	; (10094 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x95>)
    ffc0:	4930      	ldr	r1, [pc, #192]	; (10084 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x85>)
    ffc2:	4835      	ldr	r0, [pc, #212]	; (10098 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x99>)
    ffc4:	e010      	b.n	ffe8 <isr+0x1b78>
			  (_radio.state == STATE_ABORT));

		_radio.state = STATE_NONE;
    ffc6:	2300      	movs	r3, #0
    ffc8:	7423      	strb	r3, [r4, #16]
    ffca:	e050      	b.n	1006e <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x6f>

		return;

	default:
		LL_ASSERT(0);
    ffcc:	4b29      	ldr	r3, [pc, #164]	; (10074 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x75>)
    ffce:	9301      	str	r3, [sp, #4]
    ffd0:	4b29      	ldr	r3, [pc, #164]	; (10078 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x79>)
    ffd2:	9300      	str	r3, [sp, #0]
    ffd4:	4b2f      	ldr	r3, [pc, #188]	; (10094 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x95>)
    ffd6:	e004      	b.n	ffe2 <isr+0x1b72>
		 * using Radio Disable task.
		 */
		break;

	default:
		LL_ASSERT(0);
    ffd8:	4b26      	ldr	r3, [pc, #152]	; (10074 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x75>)
    ffda:	9301      	str	r3, [sp, #4]
    ffdc:	4b26      	ldr	r3, [pc, #152]	; (10078 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x79>)
    ffde:	9300      	str	r3, [sp, #0]
    ffe0:	4b2e      	ldr	r3, [pc, #184]	; (1009c <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x9d>)
    ffe2:	4a27      	ldr	r2, [pc, #156]	; (10080 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x81>)
    ffe4:	4927      	ldr	r1, [pc, #156]	; (10084 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x85>)
    ffe6:	482e      	ldr	r0, [pc, #184]	; (100a0 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xa1>)
    ffe8:	f7f1 fa4a 	bl	1480 <printk>
    ffec:	4040      	eors	r0, r0
    ffee:	f380 8811 	msr	BASEPRI, r0
    fff2:	f04f 0004 	mov.w	r0, #4
    fff6:	df02      	svc	2
	     ((((_radio.conn_curr->llcp_length.state ==
		 LLCP_LENGTH_STATE_REQ) ||
		(_radio.conn_curr->llcp_length.state ==
		 LLCP_LENGTH_STATE_ACK_WAIT)) &&
	       (pdu_data_rx->payload.llctrl.opcode ==
		PDU_DATA_LLCTRL_TYPE_LENGTH_REQ)) ||
    fff8:	2b02      	cmp	r3, #2
    fffa:	f43f ab4e 	beq.w	f69a <isr+0x122a>
			 */
			*rx_enqueue = 1;
		}
	} else {
		/* Drop response with no Local initiated request. */
		LL_ASSERT(pdu_data_rx->payload.llctrl.opcode ==
    fffe:	2e15      	cmp	r6, #21
   10000:	f43f aba6 	beq.w	f750 <isr+0x12e0>
   10004:	4b1b      	ldr	r3, [pc, #108]	; (10074 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x75>)
   10006:	9301      	str	r3, [sp, #4]
   10008:	4b1b      	ldr	r3, [pc, #108]	; (10078 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x79>)
   1000a:	9300      	str	r3, [sp, #0]
   1000c:	4a1c      	ldr	r2, [pc, #112]	; (10080 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x81>)
   1000e:	4b25      	ldr	r3, [pc, #148]	; (100a4 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xa5>)
   10010:	491c      	ldr	r1, [pc, #112]	; (10084 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x85>)
   10012:	4825      	ldr	r0, [pc, #148]	; (100a8 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xa9>)
   10014:	e7e8      	b.n	ffe8 <isr+0x1b78>
		}
		break;

	case PDU_DATA_LLCTRL_TYPE_PHY_UPD_IND:
		if (phy_upd_ind(radio_pdu_node_rx, rx_enqueue)) {
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
   10016:	2328      	movs	r3, #40	; 0x28
   10018:	f885 30a7 	strb.w	r3, [r5, #167]	; 0xa7
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	struct radio_pdu_node_tx *tx_release = NULL;
	u8_t is_empty_pdu_tx_retry;
	struct pdu_data *pdu_data_rx;
	struct pdu_data *pdu_data_tx;
	u8_t rx_enqueue = 0;
   1001c:	2600      	movs	r6, #0
   1001e:	e51c      	b.n	fa5a <isr+0x15ea>
   10020:	4616      	mov	r6, r2
   10022:	e000      	b.n	10026 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x27>
   10024:	460e      	mov	r6, r1
		  (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] ==
		   _radio.conn_curr->handle)) ||
		 ((_radio.fc_req != 0) &&
		  (_radio.fc_handle[_radio.fc_req - 1] ==
		   _radio.conn_curr->handle)))))) {
		u8_t ccm_rx_increment = 0;
   10026:	46b2      	mov	sl, r6
   10028:	e517      	b.n	fa5a <isr+0x15ea>

	if (dont_close) {
		return;
	}

	_radio.role = ROLE_NONE;
   1002a:	2500      	movs	r5, #0
   1002c:	73e5      	strb	r5, [r4, #15]
	_radio.state = STATE_NONE;
   1002e:	7425      	strb	r5, [r4, #16]
	_radio.ticker_id_event = 0;
   10030:	7365      	strb	r5, [r4, #13]

	radio_tmr_stop();
   10032:	f7f9 ff1b 	bl	9e6c <radio_tmr_stop>
	ARG_UNUSED(ticks_at_expire);
	ARG_UNUSED(remainder);
	ARG_UNUSED(lazy);
	ARG_UNUSED(context);

	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   10036:	4b1d      	ldr	r3, [pc, #116]	; (100ac <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xad>)
   10038:	462a      	mov	r2, r5
   1003a:	4629      	mov	r1, r5
   1003c:	4628      	mov	r0, r5
   1003e:	f7f9 fb07 	bl	9650 <mayfly_enqueue>
				RADIO_TICKER_USER_ID_WORKER, 0,
				&s_mfy_radio_inactive);
	LL_ASSERT(!retval);
   10042:	4604      	mov	r4, r0
   10044:	b140      	cbz	r0, 10058 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x59>
   10046:	4b0b      	ldr	r3, [pc, #44]	; (10074 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x75>)
   10048:	9301      	str	r3, [sp, #4]
   1004a:	4b0b      	ldr	r3, [pc, #44]	; (10078 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x79>)
   1004c:	9300      	str	r3, [sp, #0]
   1004e:	4a0c      	ldr	r2, [pc, #48]	; (10080 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x81>)
   10050:	4b17      	ldr	r3, [pc, #92]	; (100b0 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xb1>)
   10052:	490c      	ldr	r1, [pc, #48]	; (10084 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x85>)
   10054:	4817      	ldr	r0, [pc, #92]	; (100b4 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xb5>)
   10056:	e7c7      	b.n	ffe8 <isr+0x1b78>

	radio_tmr_stop();

	event_inactive(0, 0, 0, NULL);

	clock_control_off(_radio.hf_clock, NULL);
   10058:	4b17      	ldr	r3, [pc, #92]	; (100b8 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xb9>)
   1005a:	6818      	ldr	r0, [r3, #0]
   1005c:	6843      	ldr	r3, [r0, #4]
   1005e:	4621      	mov	r1, r4
   10060:	685b      	ldr	r3, [r3, #4]
   10062:	4798      	blx	r3

	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
   10064:	2201      	movs	r2, #1
   10066:	4611      	mov	r1, r2
   10068:	4620      	mov	r0, r4
   1006a:	f7f9 fac9 	bl	9600 <mayfly_enable>
		LL_ASSERT(0);
		break;
	}

	DEBUG_RADIO_ISR(0);
}
   1006e:	b00f      	add	sp, #60	; 0x3c
   10070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10074:	00013df4 	.word	0x00013df4
   10078:	00013df9 	.word	0x00013df9
   1007c:	00016a6a 	.word	0x00016a6a
   10080:	00013db4 	.word	0x00013db4
   10084:	00013dbb 	.word	0x00013dbb
   10088:	00015549 	.word	0x00015549
   1008c:	0000bab5 	.word	0x0000bab5
   10090:	00015c4a 	.word	0x00015c4a
   10094:	000168ad 	.word	0x000168ad
   10098:	00015cc0 	.word	0x00015cc0
   1009c:	00016794 	.word	0x00016794
   100a0:	00014409 	.word	0x00014409
   100a4:	00016060 	.word	0x00016060
   100a8:	00015b75 	.word	0x00015b75
   100ac:	20000648 	.word	0x20000648
   100b0:	0001683d 	.word	0x0001683d
   100b4:	00015348 	.word	0x00015348
   100b8:	20001470 	.word	0x20001470

000100bc <radio_init>:
u32_t radio_init(void *hf_clock, u8_t sca, u8_t connection_count_max,
		 u8_t rx_count_max, u8_t tx_count_max,
		 u16_t packet_data_octets_max,
		 u16_t packet_tx_data_size, u8_t *mem_radio,
		 u16_t mem_size)
{
   100bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   100c0:	9c09      	ldr	r4, [sp, #36]	; 0x24
	u32_t retcode;
	u8_t *mem_radio_end;

	/* intialise hf_clock device to use in prepare */
	_radio.hf_clock = hf_clock;
   100c2:	4d39      	ldr	r5, [pc, #228]	; (101a8 <radio_init+0xec>)
u32_t radio_init(void *hf_clock, u8_t sca, u8_t connection_count_max,
		 u8_t rx_count_max, u8_t tx_count_max,
		 u16_t packet_data_octets_max,
		 u16_t packet_tx_data_size, u8_t *mem_radio,
		 u16_t mem_size)
{
   100c4:	f89d 7018 	ldrb.w	r7, [sp, #24]
   100c8:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
	u32_t retcode;
	u8_t *mem_radio_end;

	/* intialise hf_clock device to use in prepare */
	_radio.hf_clock = hf_clock;
   100cc:	6028      	str	r0, [r5, #0]
	mem_radio_end = mem_radio + mem_size;

	/* initialise connection context memory */
	_radio.connection_count = connection_count_max;
	_radio.conn_pool = mem_radio;
	mem_radio += (sizeof(struct connection) * _radio.connection_count);
   100ce:	f44f 788c 	mov.w	r8, #280	; 0x118

	/* intialise hf_clock device to use in prepare */
	_radio.hf_clock = hf_clock;

	/* initialise SCA */
	_radio.sca = sca;
   100d2:	f885 119c 	strb.w	r1, [r5, #412]	; 0x19c

	/* initialised radio mem end variable */
	mem_radio_end = mem_radio + mem_size;
   100d6:	19a0      	adds	r0, r4, r6

	/* initialise connection context memory */
	_radio.connection_count = connection_count_max;
	_radio.conn_pool = mem_radio;
	mem_radio += (sizeof(struct connection) * _radio.connection_count);
   100d8:	fb08 4102 	mla	r1, r8, r2, r4
	/* initialised radio mem end variable */
	mem_radio_end = mem_radio + mem_size;

	/* initialise connection context memory */
	_radio.connection_count = connection_count_max;
	_radio.conn_pool = mem_radio;
   100dc:	f8c5 4184 	str.w	r4, [r5, #388]	; 0x184
	/* initialise rx and tx queue counts */

	/* additional for pdu to NACK or receive empty PDU,
	 * 1 scan resp and 1* ctrl event.
	 */
	rx_count_max += 3;
   100e0:	f103 0c03 	add.w	ip, r3, #3
	 /* additional pdu to send enc_req ctrl pdu */
	tx_count_max += 1;
   100e4:	1c7c      	adds	r4, r7, #1
	_radio.packet_rx_count = (rx_count_max + 1);
   100e6:	3304      	adds	r3, #4
	_radio.packet_tx_count = (tx_count_max + 1);
   100e8:	3702      	adds	r7, #2
	 * 1 scan resp and 1* ctrl event.
	 */
	rx_count_max += 3;
	 /* additional pdu to send enc_req ctrl pdu */
	tx_count_max += 1;
	_radio.packet_rx_count = (rx_count_max + 1);
   100ea:	b2db      	uxtb	r3, r3
	_radio.packet_tx_count = (tx_count_max + 1);
   100ec:	b2ff      	uxtb	r7, r7
u32_t radio_init(void *hf_clock, u8_t sca, u8_t connection_count_max,
		 u8_t rx_count_max, u8_t tx_count_max,
		 u16_t packet_data_octets_max,
		 u16_t packet_tx_data_size, u8_t *mem_radio,
		 u16_t mem_size)
{
   100ee:	f8bd e01c 	ldrh.w	lr, [sp, #28]
	_radio.packet_rx_count = (rx_count_max + 1);
	_radio.packet_tx_count = (tx_count_max + 1);
	_radio.link_rx_data_quota = rx_count_max;

	/* initialise rx queue memory */
	_radio.packet_rx = (void *)mem_radio;
   100f2:	f8c5 11b8 	str.w	r1, [r5, #440]	; 0x1b8
	mem_radio +=
   100f6:	eb01 0883 	add.w	r8, r1, r3, lsl #2
	    (sizeof(struct radio_pdu_node_rx *)*_radio.packet_rx_count);

	/* initialise tx queue memory */
	_radio.pkt_tx = (void *)mem_radio;
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
   100fa:	00f9      	lsls	r1, r7, #3
	 */
	rx_count_max += 3;
	 /* additional pdu to send enc_req ctrl pdu */
	tx_count_max += 1;
	_radio.packet_rx_count = (rx_count_max + 1);
	_radio.packet_tx_count = (tx_count_max + 1);
   100fc:	f885 71f0 	strb.w	r7, [r5, #496]	; 0x1f0
	mem_radio +=
	    (sizeof(struct radio_pdu_node_rx *)*_radio.packet_rx_count);

	/* initialise tx queue memory */
	_radio.pkt_tx = (void *)mem_radio;
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
   10100:	eb08 0701 	add.w	r7, r8, r1

	/* initialise tx release queue memory */
	_radio.pkt_release = (void *)mem_radio;
   10104:	f8c5 71ec 	str.w	r7, [r5, #492]	; 0x1ec
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
   10108:	440f      	add	r7, r1

	/* initialise rx memory size and count */
	_radio.packet_data_octets_max = packet_data_octets_max;
	if ((PDU_AC_SIZE_MAX + 1) <
   1010a:	f10e 0103 	add.w	r1, lr, #3
   1010e:	2928      	cmp	r1, #40	; 0x28
	/* initialise rx and tx queue counts */

	/* additional for pdu to NACK or receive empty PDU,
	 * 1 scan resp and 1* ctrl event.
	 */
	rx_count_max += 3;
   10110:	fa5f fc8c 	uxtb.w	ip, ip
	/* initialise tx release queue memory */
	_radio.pkt_release = (void *)mem_radio;
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);

	/* initialise rx memory size and count */
	_radio.packet_data_octets_max = packet_data_octets_max;
   10114:	f8a5 e1b0 	strh.w	lr, [r5, #432]	; 0x1b0
	if ((PDU_AC_SIZE_MAX + 1) <
	    (offsetof(struct pdu_data, payload) +
			_radio.packet_data_octets_max)) {
		_radio.packet_rx_data_pool_size =
   10118:	bf88      	it	hi
   1011a:	f10e 0e0e 	addhi.w	lr, lr, #14
	rx_count_max += 3;
	 /* additional pdu to send enc_req ctrl pdu */
	tx_count_max += 1;
	_radio.packet_rx_count = (rx_count_max + 1);
	_radio.packet_tx_count = (tx_count_max + 1);
	_radio.link_rx_data_quota = rx_count_max;
   1011e:	f885 c1d0 	strb.w	ip, [r5, #464]	; 0x1d0
	/* initialise rx memory size and count */
	_radio.packet_data_octets_max = packet_data_octets_max;
	if ((PDU_AC_SIZE_MAX + 1) <
	    (offsetof(struct pdu_data, payload) +
			_radio.packet_data_octets_max)) {
		_radio.packet_rx_data_pool_size =
   10122:	bf8b      	itete	hi
   10124:	f02e 0e03 	bichi.w	lr, lr, #3
		    (MROUND(offsetof(struct radio_pdu_node_rx, pdu_data) +
			    offsetof(struct pdu_data, payload) +
			    _radio.packet_data_octets_max) * rx_count_max);
	} else {
		_radio.packet_rx_data_pool_size =
   10128:	eb0c 0c4c 	addls.w	ip, ip, ip, lsl #1
	/* initialise rx memory size and count */
	_radio.packet_data_octets_max = packet_data_octets_max;
	if ((PDU_AC_SIZE_MAX + 1) <
	    (offsetof(struct pdu_data, payload) +
			_radio.packet_data_octets_max)) {
		_radio.packet_rx_data_pool_size =
   1012c:	fb1e fc0c 	smulbbhi	ip, lr, ip
		    (MROUND(offsetof(struct radio_pdu_node_rx, pdu_data) +
			    offsetof(struct pdu_data, payload) +
			    _radio.packet_data_octets_max) * rx_count_max);
	} else {
		_radio.packet_rx_data_pool_size =
   10130:	ea4f 1c0c 	movls.w	ip, ip, lsl #4
			(MROUND(offsetof(struct radio_pdu_node_rx, pdu_data) +
			  (PDU_AC_SIZE_MAX + 1)) * rx_count_max);
	}
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   10134:	f04f 0e30 	mov.w	lr, #48	; 0x30
		_radio.packet_rx_data_pool_size =
		    (MROUND(offsetof(struct radio_pdu_node_rx, pdu_data) +
			    offsetof(struct pdu_data, payload) +
			    _radio.packet_data_octets_max) * rx_count_max);
	} else {
		_radio.packet_rx_data_pool_size =
   10138:	f8a5 c1b2 	strh.w	ip, [r5, #434]	; 0x1b2
   1013c:	4629      	mov	r1, r5

	/* initialised radio mem end variable */
	mem_radio_end = mem_radio + mem_size;

	/* initialise connection context memory */
	_radio.connection_count = connection_count_max;
   1013e:	f885 218c 	strb.w	r2, [r5, #396]	; 0x18c
	 * 1 scan resp and 1* ctrl event.
	 */
	rx_count_max += 3;
	 /* additional pdu to send enc_req ctrl pdu */
	tx_count_max += 1;
	_radio.packet_rx_count = (rx_count_max + 1);
   10142:	f885 31bc 	strb.w	r3, [r5, #444]	; 0x1bc
	} else {
		_radio.packet_rx_data_pool_size =
			(MROUND(offsetof(struct radio_pdu_node_rx, pdu_data) +
			  (PDU_AC_SIZE_MAX + 1)) * rx_count_max);
	}
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   10146:	f8a5 e1b4 	strh.w	lr, [r5, #436]	; 0x1b4
	_radio.packet_rx = (void *)mem_radio;
	mem_radio +=
	    (sizeof(struct radio_pdu_node_rx *)*_radio.packet_rx_count);

	/* initialise tx queue memory */
	_radio.pkt_tx = (void *)mem_radio;
   1014a:	f8c5 81e8 	str.w	r8, [r5, #488]	; 0x1e8
		_radio.packet_rx_data_pool_size =
			(MROUND(offsetof(struct radio_pdu_node_rx, pdu_data) +
			  (PDU_AC_SIZE_MAX + 1)) * rx_count_max);
	}
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   1014e:	f8b5 51b2 	ldrh.w	r5, [r5, #434]	; 0x1b2
   10152:	fbb5 fefe 	udiv	lr, r5, lr
	_radio.pkt_rx_data_pool = mem_radio;
	mem_radio += _radio.packet_rx_data_pool_size;

	/* initialise rx link pool memory */
	_radio.link_rx_pool = mem_radio;
	mem_radio += (sizeof(void *) * 2 * (_radio.packet_rx_count +
   10156:	441a      	add	r2, r3
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
				       _radio.packet_rx_data_size);

	/* initialise rx data pool memory */
	_radio.pkt_rx_data_pool = mem_radio;
	mem_radio += _radio.packet_rx_data_pool_size;
   10158:	443d      	add	r5, r7

	/* initialise rx link pool memory */
	_radio.link_rx_pool = mem_radio;
	mem_radio += (sizeof(void *) * 2 * (_radio.packet_rx_count +
   1015a:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
	/* initialise rx data pool memory */
	_radio.pkt_rx_data_pool = mem_radio;
	mem_radio += _radio.packet_rx_data_pool_size;

	/* initialise rx link pool memory */
	_radio.link_rx_pool = mem_radio;
   1015e:	f8c1 51c0 	str.w	r5, [r1, #448]	; 0x1c0
	/* initialise tx ctrl pool memory */
	_radio.pkt_tx_ctrl_pool = mem_radio;
	mem_radio += PACKET_TX_CTRL_SIZE_MIN * PACKET_MEM_COUNT_TX_CTRL;

	/* initialise tx data memory size and count */
	_radio.packet_tx_data_size =
   10162:	f8bd 5020 	ldrh.w	r5, [sp, #32]
	_radio.link_rx_pool = mem_radio;
	mem_radio += (sizeof(void *) * 2 * (_radio.packet_rx_count +
					    _radio.connection_count));

	/* initialise tx ctrl pool memory */
	_radio.pkt_tx_ctrl_pool = mem_radio;
   10166:	f8c1 21d4 	str.w	r2, [r1, #468]	; 0x1d4
	mem_radio += PACKET_TX_CTRL_SIZE_MIN * PACKET_MEM_COUNT_TX_CTRL;

	/* initialise tx data memory size and count */
	_radio.packet_tx_data_size =
   1016a:	350a      	adds	r5, #10
   1016c:	f025 0503 	bic.w	r5, r5, #3
	/* additional for pdu to NACK or receive empty PDU,
	 * 1 scan resp and 1* ctrl event.
	 */
	rx_count_max += 3;
	 /* additional pdu to send enc_req ctrl pdu */
	tx_count_max += 1;
   10170:	b2e4      	uxtb	r4, r4
	mem_radio += (sizeof(void *) * 2 * (_radio.packet_rx_count +
					    _radio.connection_count));

	/* initialise tx ctrl pool memory */
	_radio.pkt_tx_ctrl_pool = mem_radio;
	mem_radio += PACKET_TX_CTRL_SIZE_MIN * PACKET_MEM_COUNT_TX_CTRL;
   10172:	3248      	adds	r2, #72	; 0x48

	/* initialise tx data memory size and count */
	_radio.packet_tx_data_size =
   10174:	b2ad      	uxth	r5, r5
	mem_radio += (_radio.packet_tx_data_size * tx_count_max);

	/* check for sufficient memory allocation for stack
	 * configuration.
	 */
	retcode = (mem_radio - mem_radio_end);
   10176:	fb04 2305 	mla	r3, r4, r5, r2
	if (retcode) {
   1017a:	1a1c      	subs	r4, r3, r0
		_radio.packet_rx_data_pool_size =
			(MROUND(offsetof(struct radio_pdu_node_rx, pdu_data) +
			  (PDU_AC_SIZE_MAX + 1)) * rx_count_max);
	}
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   1017c:	f881 e1b6 	strb.w	lr, [r1, #438]	; 0x1b6
				       _radio.packet_rx_data_size);

	/* initialise rx data pool memory */
	_radio.pkt_rx_data_pool = mem_radio;
   10180:	f8c1 71a8 	str.w	r7, [r1, #424]	; 0x1a8
	/* initialise tx ctrl pool memory */
	_radio.pkt_tx_ctrl_pool = mem_radio;
	mem_radio += PACKET_TX_CTRL_SIZE_MIN * PACKET_MEM_COUNT_TX_CTRL;

	/* initialise tx data memory size and count */
	_radio.packet_tx_data_size =
   10184:	f8a1 51e4 	strh.w	r5, [r1, #484]	; 0x1e4
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
		       offsetof(struct pdu_data, payload) +
		       packet_tx_data_size);

	/* initialise tx data pool memory */
	_radio.pkt_tx_data_pool = mem_radio;
   10188:	f8c1 21dc 	str.w	r2, [r1, #476]	; 0x1dc

	/* check for sufficient memory allocation for stack
	 * configuration.
	 */
	retcode = (mem_radio - mem_radio_end);
	if (retcode) {
   1018c:	d002      	beq.n	10194 <radio_init+0xd8>
		return (retcode + mem_size);
   1018e:	1930      	adds	r0, r6, r4
   10190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	 * This is a simple flow control to rx data only on one selected
	 * connection handle.
	 * TODO: replace this feature with host-to-controller flowcontrol
	 * implementation/design.
	 */
	_radio.fc_ena = 1;
   10194:	4b04      	ldr	r3, [pc, #16]	; (101a8 <radio_init+0xec>)
   10196:	2201      	movs	r2, #1
   10198:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe

	/* memory allocations */
	common_init();
   1019c:	f7fb f80a 	bl	b1b4 <common_init>
#if defined(RADIO_UNIT_TEST) && \
	defined(CONFIG_BLUETOOTH_CONTROLLER_CHAN_SEL_2)
	chan_sel_2_ut();
#endif /* RADIO_UNIT_TEST && CONFIG_BLUETOOTH_CONTROLLER_CHAN_SEL_2 */

	return retcode;
   101a0:	4620      	mov	r0, r4
}
   101a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   101a6:	bf00      	nop
   101a8:	20001470 	.word	0x20001470

000101ac <ll_reset>:

void ll_reset(void)
{
   101ac:	b538      	push	{r3, r4, r5, lr}
	u16_t conn_handle;

	/* disable advertiser events */
	role_disable(RADIO_TICKER_ID_ADV, RADIO_TICKER_ID_ADV_STOP);
   101ae:	2103      	movs	r1, #3
   101b0:	2005      	movs	r0, #5
   101b2:	f7fb f8ed 	bl	b390 <role_disable>

	/* disable oberver events */
	role_disable(RADIO_TICKER_ID_SCAN, RADIO_TICKER_ID_SCAN_STOP);
   101b6:	2104      	movs	r1, #4
   101b8:	2006      	movs	r0, #6
   101ba:	f7fb f8e9 	bl	b390 <role_disable>

	/* disable connection events */
	for (conn_handle = 0; conn_handle < _radio.connection_count;
   101be:	4d21      	ldr	r5, [pc, #132]	; (10244 <ll_reset+0x98>)
   101c0:	2400      	movs	r4, #0
   101c2:	f895 118c 	ldrb.w	r1, [r5, #396]	; 0x18c
   101c6:	4b1f      	ldr	r3, [pc, #124]	; (10244 <ll_reset+0x98>)
   101c8:	b2a2      	uxth	r2, r4
   101ca:	4291      	cmp	r1, r2
   101cc:	f104 0401 	add.w	r4, r4, #1
   101d0:	d905      	bls.n	101de <ll_reset+0x32>
	     conn_handle++) {
		role_disable(RADIO_TICKER_ID_FIRST_CONNECTION + conn_handle,
   101d2:	1da0      	adds	r0, r4, #6
   101d4:	21ff      	movs	r1, #255	; 0xff
   101d6:	b2c0      	uxtb	r0, r0
   101d8:	f7fb f8da 	bl	b390 <role_disable>
   101dc:	e7f1      	b.n	101c2 <ll_reset+0x16>
			     TICKER_NULL);
	}

	/* reset controller context members */
	_radio.nirk = 0;
	_radio.advertiser.is_enabled = 0;
   101de:	f893 20a4 	ldrb.w	r2, [r3, #164]	; 0xa4
		role_disable(RADIO_TICKER_ID_FIRST_CONNECTION + conn_handle,
			     TICKER_NULL);
	}

	/* reset controller context members */
	_radio.nirk = 0;
   101e2:	2000      	movs	r0, #0
	_radio.advertiser.is_enabled = 0;
   101e4:	f360 0200 	bfi	r2, r0, #0, #1
   101e8:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	_radio.advertiser.conn = NULL;
	_radio.scanner.is_enabled = 0;
   101ec:	f893 215c 	ldrb.w	r2, [r3, #348]	; 0x15c
	_radio.scanner.conn = NULL;
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
				       _radio.packet_rx_data_size);
	_radio.packet_rx_last = 0;
   101f0:	f883 01bd 	strb.w	r0, [r3, #445]	; 0x1bd

	/* reset controller context members */
	_radio.nirk = 0;
	_radio.advertiser.is_enabled = 0;
	_radio.advertiser.conn = NULL;
	_radio.scanner.is_enabled = 0;
   101f4:	f360 0200 	bfi	r2, r0, #0, #1
   101f8:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
	_radio.scanner.conn = NULL;
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   101fc:	2130      	movs	r1, #48	; 0x30
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   101fe:	f8b3 21b2 	ldrh.w	r2, [r3, #434]	; 0x1b2
   10202:	fbb2 f2f1 	udiv	r2, r2, r1
   10206:	f883 21b6 	strb.w	r2, [r3, #438]	; 0x1b6
				       _radio.packet_rx_data_size);
	_radio.packet_rx_last = 0;
	_radio.packet_rx_acquire = 0;
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
   1020a:	f893 21bc 	ldrb.w	r2, [r3, #444]	; 0x1bc
	_radio.packet_tx_first = 0;
   1020e:	f883 01f1 	strb.w	r0, [r3, #497]	; 0x1f1
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
				       _radio.packet_rx_data_size);
	_radio.packet_rx_last = 0;
	_radio.packet_rx_acquire = 0;
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
   10212:	3a01      	subs	r2, #1
		role_disable(RADIO_TICKER_ID_FIRST_CONNECTION + conn_handle,
			     TICKER_NULL);
	}

	/* reset controller context members */
	_radio.nirk = 0;
   10214:	7458      	strb	r0, [r3, #17]
	_radio.advertiser.is_enabled = 0;
	_radio.advertiser.conn = NULL;
   10216:	f8c3 0148 	str.w	r0, [r3, #328]	; 0x148
	_radio.scanner.is_enabled = 0;
	_radio.scanner.conn = NULL;
   1021a:	f8c3 017c 	str.w	r0, [r3, #380]	; 0x17c
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   1021e:	f8a3 11b4 	strh.w	r1, [r3, #436]	; 0x1b4
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
				       _radio.packet_rx_data_size);
	_radio.packet_rx_last = 0;
	_radio.packet_rx_acquire = 0;
   10222:	f883 01be 	strb.w	r0, [r3, #446]	; 0x1be
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
   10226:	f883 21d0 	strb.w	r2, [r3, #464]	; 0x1d0
	_radio.packet_tx_first = 0;
	_radio.packet_tx_last = 0;
   1022a:	f883 01f2 	strb.w	r0, [r3, #498]	; 0x1f2
	_radio.packet_release_first = 0;
   1022e:	f883 01f3 	strb.w	r0, [r3, #499]	; 0x1f3
	_radio.packet_release_last = 0;
   10232:	f883 01f4 	strb.w	r0, [r3, #500]	; 0x1f4

	/* reset whitelist and resolving list */
	ll_filter_reset(false);
   10236:	f001 fa0d 	bl	11654 <ll_filter_reset>
	/* memory allocations */
	common_init();
}
   1023a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_radio.packet_release_last = 0;

	/* reset whitelist and resolving list */
	ll_filter_reset(false);
	/* memory allocations */
	common_init();
   1023e:	f7fa bfb9 	b.w	b1b4 <common_init>
   10242:	bf00      	nop
   10244:	20001470 	.word	0x20001470

00010248 <radio_adv_data_get>:
}

struct radio_adv_data *radio_adv_data_get(void)
{
	return &_radio.advertiser.adv_data;
}
   10248:	4800      	ldr	r0, [pc, #0]	; (1024c <radio_adv_data_get+0x4>)
   1024a:	4770      	bx	lr
   1024c:	20001516 	.word	0x20001516

00010250 <radio_scan_data_get>:

struct radio_adv_data *radio_scan_data_get(void)
{
	return &_radio.advertiser.scan_data;
}
   10250:	4800      	ldr	r0, [pc, #0]	; (10254 <radio_scan_data_get+0x4>)
   10252:	4770      	bx	lr
   10254:	20001566 	.word	0x20001566

00010258 <radio_adv_is_enabled>:
	return status;
}

u32_t radio_adv_is_enabled(void)
{
	return _radio.advertiser.is_enabled;
   10258:	4b02      	ldr	r3, [pc, #8]	; (10264 <radio_adv_is_enabled+0xc>)
   1025a:	f893 00a4 	ldrb.w	r0, [r3, #164]	; 0xa4
}
   1025e:	f000 0001 	and.w	r0, r0, #1
   10262:	4770      	bx	lr
   10264:	20001470 	.word	0x20001470

00010268 <radio_adv_filter_pol_get>:
	/* NOTE: filter_policy is only written in thread mode; if is_enabled is
	 * unset by ISR, returning the stale filter_policy is acceptable because
	 * the unset code path in ISR will generate a connection complete
	 * event.
	 */
	if (_radio.advertiser.is_enabled) {
   10268:	4b04      	ldr	r3, [pc, #16]	; (1027c <radio_adv_filter_pol_get+0x14>)
   1026a:	f893 00a4 	ldrb.w	r0, [r3, #164]	; 0xa4
   1026e:	f010 0001 	ands.w	r0, r0, #1
		return _radio.advertiser.filter_policy;
   10272:	bf1c      	itt	ne
   10274:	f893 00a5 	ldrbne.w	r0, [r3, #165]	; 0xa5
   10278:	0980      	lsrne	r0, r0, #6
	}

	return 0;
}
   1027a:	4770      	bx	lr
   1027c:	20001470 	.word	0x20001470

00010280 <radio_scan_is_enabled>:
	return status;
}

u32_t radio_scan_is_enabled(void)
{
	return _radio.scanner.is_enabled;
   10280:	4b02      	ldr	r3, [pc, #8]	; (1028c <radio_scan_is_enabled+0xc>)
   10282:	f893 015c 	ldrb.w	r0, [r3, #348]	; 0x15c
}
   10286:	f000 0001 	and.w	r0, r0, #1
   1028a:	4770      	bx	lr
   1028c:	20001470 	.word	0x20001470

00010290 <radio_scan_filter_pol_get>:
	/* NOTE: filter_policy is only written in thread mode; if is_enabled is
	 * unset by ISR, returning the stale filter_policy is acceptable because
	 * the unset code path in ISR will generate a connection complete
	 * event.
	 */
	if (_radio.scanner.is_enabled) {
   10290:	4b05      	ldr	r3, [pc, #20]	; (102a8 <radio_scan_filter_pol_get+0x18>)
   10292:	f893 015c 	ldrb.w	r0, [r3, #348]	; 0x15c
   10296:	f010 0001 	ands.w	r0, r0, #1
		return _radio.scanner.filter_policy;
   1029a:	bf1c      	itt	ne
   1029c:	f893 015d 	ldrbne.w	r0, [r3, #349]	; 0x15d
   102a0:	f3c0 1001 	ubfxne	r0, r0, #4, #2
	}

	return 0;
}
   102a4:	4770      	bx	lr
   102a6:	bf00      	nop
   102a8:	20001470 	.word	0x20001470

000102ac <ll_conn_update>:
	return status;
}

u32_t ll_conn_update(u16_t handle, u8_t cmd, u8_t status, u16_t interval,
		     u16_t latency, u16_t timeout)
{
   102ac:	b570      	push	{r4, r5, r6, lr}
   102ae:	460d      	mov	r5, r1
   102b0:	461e      	mov	r6, r3
	struct connection *conn;

	ARG_UNUSED(status);

	conn = connection_get(handle);
   102b2:	f7fb f857 	bl	b364 <connection_get>
	if ((!conn) ||
   102b6:	b378      	cbz	r0, 10318 <ll_conn_update+0x6c>
	    ((conn->llcp_req != conn->llcp_ack) &&
   102b8:	f890 4068 	ldrb.w	r4, [r0, #104]	; 0x68
	struct connection *conn;

	ARG_UNUSED(status);

	conn = connection_get(handle);
	if ((!conn) ||
   102bc:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
   102c0:	42a3      	cmp	r3, r4
   102c2:	d009      	beq.n	102d8 <ll_conn_update+0x2c>
	    ((conn->llcp_req != conn->llcp_ack) &&
   102c4:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
   102c8:	2b01      	cmp	r3, #1
   102ca:	d125      	bne.n	10318 <ll_conn_update+0x6c>
	     ((conn->llcp_type != LLCP_CONNECTION_UPDATE) ||
   102cc:	f890 2095 	ldrb.w	r2, [r0, #149]	; 0x95
   102d0:	f002 0207 	and.w	r2, r2, #7
   102d4:	2a04      	cmp	r2, #4
   102d6:	d121      	bne.n	1031c <ll_conn_update+0x70>
	}

	conn->llcp.connection_update.win_size = 1;
	conn->llcp.connection_update.win_offset_us = 0;
	conn->llcp.connection_update.interval = interval;
	conn->llcp.connection_update.latency = latency;
   102d8:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   102dc:	f8a0 306e 	strh.w	r3, [r0, #110]	; 0x6e
	conn->llcp.connection_update.timeout = timeout;
   102e0:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   102e4:	f8a0 3070 	strh.w	r3, [r0, #112]	; 0x70
		}

		return 1;
	}

	conn->llcp.connection_update.win_size = 1;
   102e8:	2101      	movs	r1, #1
	conn->llcp.connection_update.win_offset_us = 0;
	conn->llcp.connection_update.interval = interval;
	conn->llcp.connection_update.latency = latency;
	conn->llcp.connection_update.timeout = timeout;
	/* conn->llcp.connection_update.instant     = 0; */
	conn->llcp.connection_update.state = cmd + 1;
   102ea:	f890 3095 	ldrb.w	r3, [r0, #149]	; 0x95
		}

		return 1;
	}

	conn->llcp.connection_update.win_size = 1;
   102ee:	f880 1094 	strb.w	r1, [r0, #148]	; 0x94
	conn->llcp.connection_update.win_offset_us = 0;
	conn->llcp.connection_update.interval = interval;
	conn->llcp.connection_update.latency = latency;
	conn->llcp.connection_update.timeout = timeout;
	/* conn->llcp.connection_update.instant     = 0; */
	conn->llcp.connection_update.state = cmd + 1;
   102f2:	440d      	add	r5, r1

		return 1;
	}

	conn->llcp.connection_update.win_size = 1;
	conn->llcp.connection_update.win_offset_us = 0;
   102f4:	2200      	movs	r2, #0
	conn->llcp.connection_update.interval = interval;
	conn->llcp.connection_update.latency = latency;
	conn->llcp.connection_update.timeout = timeout;
	/* conn->llcp.connection_update.instant     = 0; */
	conn->llcp.connection_update.state = cmd + 1;
   102f6:	f365 0302 	bfi	r3, r5, #0, #3
	conn->llcp.connection_update.is_internal = 0;
   102fa:	f362 03c4 	bfi	r3, r2, #3, #2

	conn->llcp_type = LLCP_CONNECTION_UPDATE;
	conn->llcp_req++;
   102fe:	440c      	add	r4, r1

		return 1;
	}

	conn->llcp.connection_update.win_size = 1;
	conn->llcp.connection_update.win_offset_us = 0;
   10300:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
	conn->llcp.connection_update.interval = interval;
   10304:	f8a0 606c 	strh.w	r6, [r0, #108]	; 0x6c
	conn->llcp.connection_update.latency = latency;
	conn->llcp.connection_update.timeout = timeout;
	/* conn->llcp.connection_update.instant     = 0; */
	conn->llcp.connection_update.state = cmd + 1;
	conn->llcp.connection_update.is_internal = 0;
   10308:	f880 3095 	strb.w	r3, [r0, #149]	; 0x95

	conn->llcp_type = LLCP_CONNECTION_UPDATE;
	conn->llcp_req++;
   1030c:	f880 4068 	strb.w	r4, [r0, #104]	; 0x68
	conn->llcp.connection_update.timeout = timeout;
	/* conn->llcp.connection_update.instant     = 0; */
	conn->llcp.connection_update.state = cmd + 1;
	conn->llcp.connection_update.is_internal = 0;

	conn->llcp_type = LLCP_CONNECTION_UPDATE;
   10310:	f880 106a 	strb.w	r1, [r0, #106]	; 0x6a
	conn->llcp_req++;

	return 0;
   10314:	4610      	mov	r0, r2
   10316:	bd70      	pop	{r4, r5, r6, pc}
		if ((conn) && (conn->llcp_type == LLCP_CONNECTION_UPDATE)) {
			/* controller busy (mockup requirement) */
			return 2;
		}

		return 1;
   10318:	2001      	movs	r0, #1
   1031a:	bd70      	pop	{r4, r5, r6, pc}
	     ((conn->llcp_type != LLCP_CONNECTION_UPDATE) ||
	      (conn->llcp.connection_update.state !=
	       LLCP_CONN_STATE_APP_WAIT)))) {
		if ((conn) && (conn->llcp_type == LLCP_CONNECTION_UPDATE)) {
			/* controller busy (mockup requirement) */
			return 2;
   1031c:	2002      	movs	r0, #2

	conn->llcp_type = LLCP_CONNECTION_UPDATE;
	conn->llcp_req++;

	return 0;
}
   1031e:	bd70      	pop	{r4, r5, r6, pc}

00010320 <ll_start_enc_req_send>:
	return 1;
}

u32_t ll_start_enc_req_send(u16_t handle, u8_t error_code,
			    u8_t const *const ltk)
{
   10320:	b570      	push	{r4, r5, r6, lr}
   10322:	460d      	mov	r5, r1
   10324:	4616      	mov	r6, r2
	struct connection *conn;

	conn = connection_get(handle);
   10326:	f7fb f81d 	bl	b364 <connection_get>
	if (!conn) {
   1032a:	4604      	mov	r4, r0
   1032c:	b908      	cbnz	r0, 10332 <ll_start_enc_req_send+0x12>
		return 1;
   1032e:	2001      	movs	r0, #1
   10330:	bd70      	pop	{r4, r5, r6, pc}
	}

	if (error_code) {
   10332:	b315      	cbz	r5, 1037a <ll_start_enc_req_send+0x5a>
		if (conn->refresh == 0) {
   10334:	f890 30c0 	ldrb.w	r3, [r0, #192]	; 0xc0
   10338:	f003 0340 	and.w	r3, r3, #64	; 0x40
   1033c:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   10340:	b973      	cbnz	r3, 10360 <ll_start_enc_req_send+0x40>
			if (conn->llcp_req != conn->llcp_ack) {
   10342:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
   10346:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
   1034a:	4293      	cmp	r3, r2
   1034c:	d1ef      	bne.n	1032e <ll_start_enc_req_send+0xe>
			}

			conn->llcp.encryption.error_code = error_code;

			conn->llcp_type = LLCP_ENCRYPTION;
			conn->llcp_req++;
   1034e:	3301      	adds	r3, #1
				return 1;
			}

			conn->llcp.encryption.error_code = error_code;

			conn->llcp_type = LLCP_ENCRYPTION;
   10350:	2203      	movs	r2, #3
		if (conn->refresh == 0) {
			if (conn->llcp_req != conn->llcp_ack) {
				return 1;
			}

			conn->llcp.encryption.error_code = error_code;
   10352:	f884 506c 	strb.w	r5, [r4, #108]	; 0x6c

			conn->llcp_type = LLCP_ENCRYPTION;
			conn->llcp_req++;
   10356:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
				return 1;
			}

			conn->llcp.encryption.error_code = error_code;

			conn->llcp_type = LLCP_ENCRYPTION;
   1035a:	f884 206a 	strb.w	r2, [r4, #106]	; 0x6a
   1035e:	bd70      	pop	{r4, r5, r6, pc}
			conn->llcp_req++;
		} else {
			if (conn->llcp_terminate.ack !=
   10360:	f894 20a5 	ldrb.w	r2, [r4, #165]	; 0xa5
   10364:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
   10368:	4293      	cmp	r3, r2
   1036a:	d1e0      	bne.n	1032e <ll_start_enc_req_send+0xe>
				return 1;
			}

			conn->llcp_terminate.reason_own = error_code;

			conn->llcp_terminate.req++;
   1036c:	3301      	adds	r3, #1
			if (conn->llcp_terminate.ack !=
			    conn->llcp_terminate.req) {
				return 1;
			}

			conn->llcp_terminate.reason_own = error_code;
   1036e:	f884 50a6 	strb.w	r5, [r4, #166]	; 0xa6

			conn->llcp_terminate.req++;
   10372:	f884 30a4 	strb.w	r3, [r4, #164]	; 0xa4

		conn->llcp_type = LLCP_ENCRYPTION;
		conn->llcp_req++;
	}

	return 0;
   10376:	2000      	movs	r0, #0
   10378:	bd70      	pop	{r4, r5, r6, pc}
			conn->llcp_terminate.reason_own = error_code;

			conn->llcp_terminate.req++;
		}
	} else {
		memcpy(&conn->llcp.encryption.ltk[0], ltk,
   1037a:	2210      	movs	r2, #16
   1037c:	4631      	mov	r1, r6
   1037e:	3077      	adds	r0, #119	; 0x77
   10380:	f7f0 fe87 	bl	1092 <memcpy>
		       sizeof(conn->llcp.encryption.ltk));

		if (conn->llcp_req != conn->llcp_ack) {
   10384:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
   10388:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
   1038c:	4293      	cmp	r3, r2
   1038e:	d1ce      	bne.n	1032e <ll_start_enc_req_send+0xe>
		}

		conn->llcp.encryption.error_code = 0;

		conn->llcp_type = LLCP_ENCRYPTION;
		conn->llcp_req++;
   10390:	3301      	adds	r3, #1
			return 1;
		}

		conn->llcp.encryption.error_code = 0;

		conn->llcp_type = LLCP_ENCRYPTION;
   10392:	2203      	movs	r2, #3

		if (conn->llcp_req != conn->llcp_ack) {
			return 1;
		}

		conn->llcp.encryption.error_code = 0;
   10394:	f884 506c 	strb.w	r5, [r4, #108]	; 0x6c

		conn->llcp_type = LLCP_ENCRYPTION;
		conn->llcp_req++;
   10398:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
			return 1;
		}

		conn->llcp.encryption.error_code = 0;

		conn->llcp_type = LLCP_ENCRYPTION;
   1039c:	f884 206a 	strb.w	r2, [r4, #106]	; 0x6a
		conn->llcp_req++;
	}

	return 0;
   103a0:	4628      	mov	r0, r5
}
   103a2:	bd70      	pop	{r4, r5, r6, pc}

000103a4 <ll_feature_req_send>:
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_ENC */

u32_t ll_feature_req_send(u16_t handle)
{
   103a4:	b508      	push	{r3, lr}
	struct connection *conn;

	conn = connection_get(handle);
   103a6:	f7fa ffdd 	bl	b364 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   103aa:	b168      	cbz	r0, 103c8 <ll_feature_req_send+0x24>
   103ac:	f890 2068 	ldrb.w	r2, [r0, #104]	; 0x68
   103b0:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
   103b4:	4293      	cmp	r3, r2
   103b6:	d107      	bne.n	103c8 <ll_feature_req_send+0x24>
		return 1;
	}

	conn->llcp_type = LLCP_FEATURE_EXCHANGE;
	conn->llcp_req++;
   103b8:	3301      	adds	r3, #1
	conn = connection_get(handle);
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
		return 1;
	}

	conn->llcp_type = LLCP_FEATURE_EXCHANGE;
   103ba:	2204      	movs	r2, #4
	conn->llcp_req++;
   103bc:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
	conn = connection_get(handle);
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
		return 1;
	}

	conn->llcp_type = LLCP_FEATURE_EXCHANGE;
   103c0:	f880 206a 	strb.w	r2, [r0, #106]	; 0x6a
	conn->llcp_req++;

	return 0;
   103c4:	2000      	movs	r0, #0
   103c6:	bd08      	pop	{r3, pc}
{
	struct connection *conn;

	conn = connection_get(handle);
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
		return 1;
   103c8:	2001      	movs	r0, #1

	conn->llcp_type = LLCP_FEATURE_EXCHANGE;
	conn->llcp_req++;

	return 0;
}
   103ca:	bd08      	pop	{r3, pc}

000103cc <ll_version_ind_send>:

u32_t ll_version_ind_send(u16_t handle)
{
   103cc:	b508      	push	{r3, lr}
	struct connection *conn;

	conn = connection_get(handle);
   103ce:	f7fa ffc9 	bl	b364 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   103d2:	b168      	cbz	r0, 103f0 <ll_version_ind_send+0x24>
   103d4:	f890 2068 	ldrb.w	r2, [r0, #104]	; 0x68
   103d8:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
   103dc:	4293      	cmp	r3, r2
   103de:	d107      	bne.n	103f0 <ll_version_ind_send+0x24>
		return 1;
	}

	conn->llcp_type = LLCP_VERSION_EXCHANGE;
	conn->llcp_req++;
   103e0:	3301      	adds	r3, #1
	conn = connection_get(handle);
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
		return 1;
	}

	conn->llcp_type = LLCP_VERSION_EXCHANGE;
   103e2:	2205      	movs	r2, #5
	conn->llcp_req++;
   103e4:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
	conn = connection_get(handle);
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
		return 1;
	}

	conn->llcp_type = LLCP_VERSION_EXCHANGE;
   103e8:	f880 206a 	strb.w	r2, [r0, #106]	; 0x6a
	conn->llcp_req++;

	return 0;
   103ec:	2000      	movs	r0, #0
   103ee:	bd08      	pop	{r3, pc}
{
	struct connection *conn;

	conn = connection_get(handle);
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
		return 1;
   103f0:	2001      	movs	r0, #1

	conn->llcp_type = LLCP_VERSION_EXCHANGE;
	conn->llcp_req++;

	return 0;
}
   103f2:	bd08      	pop	{r3, pc}

000103f4 <ll_terminate_ind_send>:

u32_t ll_terminate_ind_send(u16_t handle, u8_t reason)
{
   103f4:	b510      	push	{r4, lr}
   103f6:	460c      	mov	r4, r1
	struct connection *conn;

	conn = connection_get(handle);
   103f8:	f7fa ffb4 	bl	b364 <connection_get>
	if (!conn || (conn->llcp_terminate.ack != conn->llcp_terminate.req)) {
   103fc:	b160      	cbz	r0, 10418 <ll_terminate_ind_send+0x24>
   103fe:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
   10402:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
   10406:	4293      	cmp	r3, r2
   10408:	d106      	bne.n	10418 <ll_terminate_ind_send+0x24>
		return 1;
	}

	conn->llcp_terminate.reason_own = reason;

	conn->llcp_terminate.req++;
   1040a:	3301      	adds	r3, #1
	conn = connection_get(handle);
	if (!conn || (conn->llcp_terminate.ack != conn->llcp_terminate.req)) {
		return 1;
	}

	conn->llcp_terminate.reason_own = reason;
   1040c:	f880 40a6 	strb.w	r4, [r0, #166]	; 0xa6

	conn->llcp_terminate.req++;
   10410:	f880 30a4 	strb.w	r3, [r0, #164]	; 0xa4

	return 0;
   10414:	2000      	movs	r0, #0
   10416:	bd10      	pop	{r4, pc}
{
	struct connection *conn;

	conn = connection_get(handle);
	if (!conn || (conn->llcp_terminate.ack != conn->llcp_terminate.req)) {
		return 1;
   10418:	2001      	movs	r0, #1
	conn->llcp_terminate.reason_own = reason;

	conn->llcp_terminate.req++;

	return 0;
}
   1041a:	bd10      	pop	{r4, pc}

0001041c <ll_length_req_send>:

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
u32_t ll_length_req_send(u16_t handle, u16_t tx_octets)
{
   1041c:	b510      	push	{r4, lr}
   1041e:	460c      	mov	r4, r1
	struct connection *conn;

	conn = connection_get(handle);
   10420:	f7fa ffa0 	bl	b364 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   10424:	b1c0      	cbz	r0, 10458 <ll_length_req_send+0x3c>
   10426:	f890 2068 	ldrb.w	r2, [r0, #104]	; 0x68
   1042a:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
   1042e:	429a      	cmp	r2, r3
   10430:	d112      	bne.n	10458 <ll_length_req_send+0x3c>
	    (conn->llcp_length.req != conn->llcp_length.ack)) {
   10432:	f890 20b4 	ldrb.w	r2, [r0, #180]	; 0xb4
u32_t ll_length_req_send(u16_t handle, u16_t tx_octets)
{
	struct connection *conn;

	conn = connection_get(handle);
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   10436:	f890 30b5 	ldrb.w	r3, [r0, #181]	; 0xb5
   1043a:	4293      	cmp	r3, r2
   1043c:	d10c      	bne.n	10458 <ll_length_req_send+0x3c>
		return 1;
	}

	/* TODO: parameter check tx_octets */

	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   1043e:	f890 20b6 	ldrb.w	r2, [r0, #182]	; 0xb6
	conn->llcp_length.tx_octets = tx_octets;
   10442:	f8a0 40ba 	strh.w	r4, [r0, #186]	; 0xba
		return 1;
	}

	/* TODO: parameter check tx_octets */

	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   10446:	f36f 0201 	bfc	r2, #0, #2
	conn->llcp_length.tx_octets = tx_octets;
	conn->llcp_length.req++;
   1044a:	3301      	adds	r3, #1
		return 1;
	}

	/* TODO: parameter check tx_octets */

	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   1044c:	f880 20b6 	strb.w	r2, [r0, #182]	; 0xb6
	conn->llcp_length.tx_octets = tx_octets;
	conn->llcp_length.req++;
   10450:	f880 30b4 	strb.w	r3, [r0, #180]	; 0xb4

	return 0;
   10454:	2000      	movs	r0, #0
   10456:	bd10      	pop	{r4, pc}
	struct connection *conn;

	conn = connection_get(handle);
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
	    (conn->llcp_length.req != conn->llcp_length.ack)) {
		return 1;
   10458:	2001      	movs	r0, #1
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
	conn->llcp_length.tx_octets = tx_octets;
	conn->llcp_length.req++;

	return 0;
}
   1045a:	bd10      	pop	{r4, pc}

0001045c <ll_length_default_get>:

void ll_length_default_get(u16_t *max_tx_octets, u16_t *max_tx_time)
{
	*max_tx_octets = _radio.default_tx_octets;
   1045c:	4b03      	ldr	r3, [pc, #12]	; (1046c <ll_length_default_get+0x10>)
   1045e:	f8b3 219e 	ldrh.w	r2, [r3, #414]	; 0x19e
   10462:	8002      	strh	r2, [r0, #0]
	*max_tx_time = _radio.default_tx_time;
   10464:	f8b3 31a0 	ldrh.w	r3, [r3, #416]	; 0x1a0
   10468:	800b      	strh	r3, [r1, #0]
   1046a:	4770      	bx	lr
   1046c:	20001470 	.word	0x20001470

00010470 <ll_length_default_set>:

u32_t ll_length_default_set(u16_t max_tx_octets, u16_t max_tx_time)
{
	/* TODO: parameter check (for BT 5.0 compliance) */

	_radio.default_tx_octets = max_tx_octets;
   10470:	4b03      	ldr	r3, [pc, #12]	; (10480 <ll_length_default_set+0x10>)
   10472:	f8a3 019e 	strh.w	r0, [r3, #414]	; 0x19e
	_radio.default_tx_time = max_tx_time;
   10476:	f8a3 11a0 	strh.w	r1, [r3, #416]	; 0x1a0

	return 0;
}
   1047a:	2000      	movs	r0, #0
   1047c:	4770      	bx	lr
   1047e:	bf00      	nop
   10480:	20001470 	.word	0x20001470

00010484 <ll_length_max_get>:

void ll_length_max_get(u16_t *max_tx_octets, u16_t *max_tx_time,
		       u16_t *max_rx_octets, u16_t *max_rx_time)
{
   10484:	b510      	push	{r4, lr}
	*max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
   10486:	241b      	movs	r4, #27
   10488:	8004      	strh	r4, [r0, #0]
	*max_tx_time = RADIO_LL_LENGTH_TIME_RX_MAX;
   1048a:	f44f 70a4 	mov.w	r0, #328	; 0x148
   1048e:	8008      	strh	r0, [r1, #0]
	*max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
   10490:	8014      	strh	r4, [r2, #0]
	*max_rx_time = RADIO_LL_LENGTH_TIME_RX_MAX;
   10492:	8018      	strh	r0, [r3, #0]
   10494:	bd10      	pop	{r4, pc}

00010496 <ll_phy_get>:
}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
u32_t ll_phy_get(u16_t handle, u8_t *tx, u8_t *rx)
{
   10496:	b538      	push	{r3, r4, r5, lr}
   10498:	460d      	mov	r5, r1
   1049a:	4614      	mov	r4, r2
	struct connection *conn;

	conn = connection_get(handle);
   1049c:	f7fa ff62 	bl	b364 <connection_get>
	if (!conn) {
   104a0:	b158      	cbz	r0, 104ba <ll_phy_get+0x24>
		return 1;
	}

	/* TODO: context safe read */
	*tx = conn->phy_tx;
   104a2:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
   104a6:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   104aa:	702b      	strb	r3, [r5, #0]
	*rx = conn->phy_rx;
   104ac:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
   104b0:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   104b4:	7023      	strb	r3, [r4, #0]

	return 0;
   104b6:	2000      	movs	r0, #0
   104b8:	bd38      	pop	{r3, r4, r5, pc}
{
	struct connection *conn;

	conn = connection_get(handle);
	if (!conn) {
		return 1;
   104ba:	2001      	movs	r0, #1
	/* TODO: context safe read */
	*tx = conn->phy_tx;
	*rx = conn->phy_rx;

	return 0;
}
   104bc:	bd38      	pop	{r3, r4, r5, pc}
	...

000104c0 <ll_phy_default_set>:

u32_t ll_phy_default_set(u8_t tx, u8_t rx)
{
	/* TODO: validate against supported phy */

	_radio.default_phy_tx = tx;
   104c0:	4b03      	ldr	r3, [pc, #12]	; (104d0 <ll_phy_default_set+0x10>)
   104c2:	f8a3 01a2 	strh.w	r0, [r3, #418]	; 0x1a2
	_radio.default_phy_rx = rx;
   104c6:	f8a3 11a4 	strh.w	r1, [r3, #420]	; 0x1a4

	return 0;
}
   104ca:	2000      	movs	r0, #0
   104cc:	4770      	bx	lr
   104ce:	bf00      	nop
   104d0:	20001470 	.word	0x20001470

000104d4 <ll_phy_req_send>:

u32_t ll_phy_req_send(u16_t handle, u8_t tx, u8_t flags, u8_t rx)
{
   104d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   104d8:	4689      	mov	r9, r1
   104da:	4690      	mov	r8, r2
   104dc:	461f      	mov	r7, r3
	struct connection *conn;

	conn = connection_get(handle);
   104de:	f7fa ff41 	bl	b364 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   104e2:	b320      	cbz	r0, 1052e <ll_phy_req_send+0x5a>
   104e4:	f890 2068 	ldrb.w	r2, [r0, #104]	; 0x68
   104e8:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
   104ec:	429a      	cmp	r2, r3
   104ee:	d11e      	bne.n	1052e <ll_phy_req_send+0x5a>
	    (conn->llcp_phy.req != conn->llcp_phy.ack)) {
   104f0:	f890 30bc 	ldrb.w	r3, [r0, #188]	; 0xbc
u32_t ll_phy_req_send(u16_t handle, u8_t tx, u8_t flags, u8_t rx)
{
	struct connection *conn;

	conn = connection_get(handle);
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   104f4:	f890 50bd 	ldrb.w	r5, [r0, #189]	; 0xbd
   104f8:	429d      	cmp	r5, r3
   104fa:	d118      	bne.n	1052e <ll_phy_req_send+0x5a>
	    (conn->llcp_phy.req != conn->llcp_phy.ack)) {
		return 1;
	}

	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   104fc:	f890 40be 	ldrb.w	r4, [r0, #190]	; 0xbe
	conn->llcp_phy.cmd = 1;
   10500:	f890 60bf 	ldrb.w	r6, [r0, #191]	; 0xbf
	conn->llcp_phy.tx = tx;
   10504:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
   10508:	f369 0484 	bfi	r4, r9, #2, #3
	conn->llcp_phy.flags = flags;
   1050c:	f046 0102 	orr.w	r1, r6, #2
	conn->llcp_phy.rx = rx;
   10510:	4622      	mov	r2, r4
	}

	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
	conn->llcp_phy.cmd = 1;
	conn->llcp_phy.tx = tx;
	conn->llcp_phy.flags = flags;
   10512:	f368 0100 	bfi	r1, r8, #0, #1
	conn->llcp_phy.rx = rx;
   10516:	f367 1247 	bfi	r2, r7, #5, #3
	conn->llcp_phy.req++;
   1051a:	3501      	adds	r5, #1
	}

	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
	conn->llcp_phy.cmd = 1;
	conn->llcp_phy.tx = tx;
	conn->llcp_phy.flags = flags;
   1051c:	f880 10bf 	strb.w	r1, [r0, #191]	; 0xbf
	conn->llcp_phy.rx = rx;
   10520:	f880 20be 	strb.w	r2, [r0, #190]	; 0xbe
	conn->llcp_phy.req++;
   10524:	f880 50bc 	strb.w	r5, [r0, #188]	; 0xbc

	return 0;
   10528:	2000      	movs	r0, #0
   1052a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	struct connection *conn;

	conn = connection_get(handle);
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
	    (conn->llcp_phy.req != conn->llcp_phy.ack)) {
		return 1;
   1052e:	2001      	movs	r0, #1
	conn->llcp_phy.flags = flags;
	conn->llcp_phy.rx = rx;
	conn->llcp_phy.req++;

	return 0;
}
   10530:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00010534 <radio_rx_get>:

	return cmplt;
}

u8_t radio_rx_get(struct radio_pdu_node_rx **radio_pdu_node_rx, u16_t *handle)
{
   10534:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   10538:	4605      	mov	r5, r0
   1053a:	4608      	mov	r0, r1
	u8_t cmplt;

	cmplt = 0;
	if (_radio.link_rx_head != _radio.link_rx_tail) {
   1053c:	491a      	ldr	r1, [pc, #104]	; (105a8 <radio_rx_get+0x74>)
   1053e:	f8d1 31c8 	ldr.w	r3, [r1, #456]	; 0x1c8
   10542:	f8d1 21cc 	ldr.w	r2, [r1, #460]	; 0x1cc
   10546:	4293      	cmp	r3, r2
   10548:	460e      	mov	r6, r1
   1054a:	d020      	beq.n	1058e <radio_rx_get+0x5a>
		struct radio_pdu_node_rx *_radio_pdu_node_rx;

		_radio_pdu_node_rx = *((void **)_radio.link_rx_head + 1);
   1054c:	f8d3 8004 	ldr.w	r8, [r3, #4]

		cmplt = tx_cmplt_get(handle,
   10550:	f201 11f3 	addw	r1, r1, #499	; 0x1f3
   10554:	f898 2000 	ldrb.w	r2, [r8]
   10558:	f7fa feb6 	bl	b2c8 <tx_cmplt_get>
				&_radio.packet_release_first,
				_radio_pdu_node_rx->hdr.onion.
				packet_release_last);
		if (!cmplt) {
   1055c:	4604      	mov	r4, r0
   1055e:	b9e8      	cbnz	r0, 1059c <radio_rx_get+0x68>
			u16_t handle;
			u8_t first, cmplt_prev, cmplt_curr;

			first = _radio.packet_release_first;
   10560:	af02      	add	r7, sp, #8
   10562:	f896 31f3 	ldrb.w	r3, [r6, #499]	; 0x1f3
   10566:	f807 3d03 	strb.w	r3, [r7, #-3]!
			cmplt_curr = 0;
   1056a:	4681      	mov	r9, r0
			do {
				cmplt_prev = cmplt_curr;
				cmplt_curr = tx_cmplt_get(&handle, &first,
   1056c:	f896 21f4 	ldrb.w	r2, [r6, #500]	; 0x1f4
   10570:	4639      	mov	r1, r7
   10572:	f10d 0006 	add.w	r0, sp, #6
   10576:	f7fa fea7 	bl	b2c8 <tx_cmplt_get>
						_radio.packet_release_last);
			} while ((cmplt_prev != 0) ||
				 (cmplt_prev != cmplt_curr));
   1057a:	f1b9 0f00 	cmp.w	r9, #0
   1057e:	d001      	beq.n	10584 <radio_rx_get+0x50>

	return cmplt;
}

u8_t radio_rx_get(struct radio_pdu_node_rx **radio_pdu_node_rx, u16_t *handle)
{
   10580:	4681      	mov	r9, r0
   10582:	e7f3      	b.n	1056c <radio_rx_get+0x38>
			cmplt_curr = 0;
			do {
				cmplt_prev = cmplt_curr;
				cmplt_curr = tx_cmplt_get(&handle, &first,
						_radio.packet_release_last);
			} while ((cmplt_prev != 0) ||
   10584:	2800      	cmp	r0, #0
   10586:	d1fb      	bne.n	10580 <radio_rx_get+0x4c>
				 (cmplt_prev != cmplt_curr));

			*radio_pdu_node_rx = _radio_pdu_node_rx;
   10588:	f8c5 8000 	str.w	r8, [r5]
   1058c:	e008      	b.n	105a0 <radio_rx_get+0x6c>
		} else {
			*radio_pdu_node_rx = NULL;
		}
	} else {
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
   1058e:	f891 21f4 	ldrb.w	r2, [r1, #500]	; 0x1f4
   10592:	f201 11f3 	addw	r1, r1, #499	; 0x1f3
   10596:	f7fa fe97 	bl	b2c8 <tx_cmplt_get>
   1059a:	4604      	mov	r4, r0
				     _radio.packet_release_last);

		*radio_pdu_node_rx = NULL;
   1059c:	2300      	movs	r3, #0
   1059e:	602b      	str	r3, [r5, #0]
	}

	return cmplt;
}
   105a0:	4620      	mov	r0, r4
   105a2:	b003      	add	sp, #12
   105a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   105a8:	20001470 	.word	0x20001470

000105ac <radio_rx_mem_release>:
		}
	}
}

void radio_rx_mem_release(struct radio_pdu_node_rx **radio_pdu_node_rx)
{
   105ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
   105ae:	4604      	mov	r4, r0
			mem_release(_radio_pdu_node_rx_free,
				    &_radio.pkt_rx_data_free);
			break;

		case NODE_RX_TYPE_TERMINATE:
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   105b0:	4d19      	ldr	r5, [pc, #100]	; (10618 <radio_rx_mem_release+0x6c>)
void radio_rx_mem_release(struct radio_pdu_node_rx **radio_pdu_node_rx)
{
	struct radio_pdu_node_rx *_radio_pdu_node_rx;
	struct connection *conn;

	_radio_pdu_node_rx = *radio_pdu_node_rx;
   105b2:	6800      	ldr	r0, [r0, #0]
	while (_radio_pdu_node_rx) {
   105b4:	b348      	cbz	r0, 1060a <radio_rx_mem_release+0x5e>
		struct radio_pdu_node_rx *_radio_pdu_node_rx_free;

		_radio_pdu_node_rx_free = _radio_pdu_node_rx;
		_radio_pdu_node_rx = _radio_pdu_node_rx->hdr.onion.next;

		switch (_radio_pdu_node_rx_free->hdr.type) {
   105b6:	7902      	ldrb	r2, [r0, #4]
	_radio_pdu_node_rx = *radio_pdu_node_rx;
	while (_radio_pdu_node_rx) {
		struct radio_pdu_node_rx *_radio_pdu_node_rx_free;

		_radio_pdu_node_rx_free = _radio_pdu_node_rx;
		_radio_pdu_node_rx = _radio_pdu_node_rx->hdr.onion.next;
   105b8:	6806      	ldr	r6, [r0, #0]
   105ba:	2a0c      	cmp	r2, #12
   105bc:	d815      	bhi.n	105ea <radio_rx_mem_release+0x3e>
   105be:	2301      	movs	r3, #1
   105c0:	4093      	lsls	r3, r2
   105c2:	f641 727e 	movw	r2, #8062	; 0x1f7e
   105c6:	401a      	ands	r2, r3
   105c8:	b952      	cbnz	r2, 105e0 <radio_rx_mem_release+0x34>
   105ca:	061b      	lsls	r3, r3, #24
   105cc:	d50d      	bpl.n	105ea <radio_rx_mem_release+0x3e>
			mem_release(_radio_pdu_node_rx_free,
				    &_radio.pkt_rx_data_free);
			break;

		case NODE_RX_TYPE_TERMINATE:
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   105ce:	88c2      	ldrh	r2, [r0, #6]
   105d0:	f8d5 0184 	ldr.w	r0, [r5, #388]	; 0x184
   105d4:	f44f 718c 	mov.w	r1, #280	; 0x118
   105d8:	f7f9 f96e 	bl	98b8 <mem_get>
				       _radio_pdu_node_rx_free->hdr.handle);

			mem_release(conn, &_radio.conn_free);
   105dc:	490f      	ldr	r1, [pc, #60]	; (1061c <radio_rx_mem_release+0x70>)
   105de:	e000      	b.n	105e2 <radio_rx_mem_release+0x36>

#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_INDICATION)
		case NODE_RX_TYPE_ADV_INDICATION:
#endif /* CONFIG_BLUETOOTH_CONTROLLER_ADV_INDICATION */

			mem_release(_radio_pdu_node_rx_free,
   105e0:	490f      	ldr	r1, [pc, #60]	; (10620 <radio_rx_mem_release+0x74>)

		case NODE_RX_TYPE_TERMINATE:
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
				       _radio_pdu_node_rx_free->hdr.handle);

			mem_release(conn, &_radio.conn_free);
   105e2:	f7f9 f94c 	bl	987e <mem_release>
		}
	}
}

void radio_rx_mem_release(struct radio_pdu_node_rx **radio_pdu_node_rx)
{
   105e6:	4630      	mov	r0, r6
   105e8:	e7e4      	b.n	105b4 <radio_rx_mem_release+0x8>

			mem_release(conn, &_radio.conn_free);
			break;

		default:
			LL_ASSERT(0);
   105ea:	4b0e      	ldr	r3, [pc, #56]	; (10624 <radio_rx_mem_release+0x78>)
   105ec:	9301      	str	r3, [sp, #4]
   105ee:	4b0e      	ldr	r3, [pc, #56]	; (10628 <radio_rx_mem_release+0x7c>)
   105f0:	9300      	str	r3, [sp, #0]
   105f2:	4a0e      	ldr	r2, [pc, #56]	; (1062c <radio_rx_mem_release+0x80>)
   105f4:	4b0e      	ldr	r3, [pc, #56]	; (10630 <radio_rx_mem_release+0x84>)
   105f6:	490f      	ldr	r1, [pc, #60]	; (10634 <radio_rx_mem_release+0x88>)
   105f8:	480f      	ldr	r0, [pc, #60]	; (10638 <radio_rx_mem_release+0x8c>)
   105fa:	f7f0 ff41 	bl	1480 <printk>
   105fe:	4040      	eors	r0, r0
   10600:	f380 8811 	msr	BASEPRI, r0
   10604:	f04f 0004 	mov.w	r0, #4
   10608:	df02      	svc	2
			break;
		}
	}

	*radio_pdu_node_rx = _radio_pdu_node_rx;
   1060a:	6020      	str	r0, [r4, #0]

	packet_rx_allocate(0xff);
   1060c:	20ff      	movs	r0, #255	; 0xff
}
   1060e:	b002      	add	sp, #8
   10610:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		}
	}

	*radio_pdu_node_rx = _radio_pdu_node_rx;

	packet_rx_allocate(0xff);
   10614:	f7fa bd88 	b.w	b128 <packet_rx_allocate>
   10618:	20001470 	.word	0x20001470
   1061c:	200015f8 	.word	0x200015f8
   10620:	2000161c 	.word	0x2000161c
   10624:	00013df4 	.word	0x00013df4
   10628:	00013df9 	.word	0x00013df9
   1062c:	00013db4 	.word	0x00013db4
   10630:	00016976 	.word	0x00016976
   10634:	00013dbb 	.word	0x00013dbb
   10638:	00014409 	.word	0x00014409

0001063c <do_radio_rx_fc_set>:
	}
}

u8_t do_radio_rx_fc_set(u16_t handle, u8_t req, u8_t ack)
{
	if (req == ack) {
   1063c:	4291      	cmp	r1, r2
		_radio.fc_req = req;
	}
}

u8_t do_radio_rx_fc_set(u16_t handle, u8_t req, u8_t ack)
{
   1063e:	b510      	push	{r4, lr}
   10640:	4b15      	ldr	r3, [pc, #84]	; (10698 <do_radio_rx_fc_set+0x5c>)
	if (req == ack) {
   10642:	d118      	bne.n	10676 <do_radio_rx_fc_set+0x3a>
		if (_radio.link_rx_head == _radio.link_rx_tail) {
   10644:	f8d3 21cc 	ldr.w	r2, [r3, #460]	; 0x1cc
   10648:	f8d3 41c8 	ldr.w	r4, [r3, #456]	; 0x1c8
   1064c:	4294      	cmp	r4, r2
   1064e:	d11e      	bne.n	1068e <do_radio_rx_fc_set+0x52>
			u8_t ack1 = ack;

			if (ack1 == 0) {
   10650:	2900      	cmp	r1, #0
				ack1 = TRIPLE_BUFFER_SIZE;
   10652:	bf14      	ite	ne
   10654:	460a      	movne	r2, r1
   10656:	2203      	moveq	r2, #3
			}
			_radio.fc_handle[--ack1] = handle;
   10658:	3a01      	subs	r2, #1
   1065a:	b2d2      	uxtb	r2, r2
   1065c:	eb03 0442 	add.w	r4, r3, r2, lsl #1
			_radio.fc_ack = ack1;
   10660:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd

			/* check if ISR updated FC by changing fc_req */
			if (req != _radio.fc_req) {
   10664:	f893 21fc 	ldrb.w	r2, [r3, #508]	; 0x1fc
			u8_t ack1 = ack;

			if (ack1 == 0) {
				ack1 = TRIPLE_BUFFER_SIZE;
			}
			_radio.fc_handle[--ack1] = handle;
   10668:	f8a4 01f6 	strh.w	r0, [r4, #502]	; 0x1f6
			_radio.fc_ack = ack1;

			/* check if ISR updated FC by changing fc_req */
			if (req != _radio.fc_req) {
   1066c:	4291      	cmp	r1, r2
   1066e:	d010      	beq.n	10692 <do_radio_rx_fc_set+0x56>
				_radio.fc_ack = ack;
   10670:	f883 11fd 	strb.w	r1, [r3, #509]	; 0x1fd
   10674:	e00b      	b.n	1068e <do_radio_rx_fc_set+0x52>
				return 1;
			}
		} else {
			return 1;
		}
	} else if (((req == 0) &&
   10676:	b911      	cbnz	r1, 1067e <do_radio_rx_fc_set+0x42>

			/* check if ISR updated FC by changing fc_req */
			if (req != _radio.fc_req) {
				_radio.fc_ack = ack;

				return 1;
   10678:	f8b3 31fa 	ldrh.w	r3, [r3, #506]	; 0x1fa
   1067c:	e003      	b.n	10686 <do_radio_rx_fc_set+0x4a>
		} else {
			return 1;
		}
	} else if (((req == 0) &&
		    (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] != handle)) ||
		   ((req != 0) && (_radio.fc_handle[req - 1] != handle))) {
   1067e:	eb03 0341 	add.w	r3, r3, r1, lsl #1

			/* check if ISR updated FC by changing fc_req */
			if (req != _radio.fc_req) {
				_radio.fc_ack = ack;

				return 1;
   10682:	f8b3 31f4 	ldrh.w	r3, [r3, #500]	; 0x1f4
   10686:	1a18      	subs	r0, r3, r0
   10688:	bf18      	it	ne
   1068a:	2001      	movne	r0, #1
   1068c:	bd10      	pop	{r4, pc}
			}
		} else {
			return 1;
   1068e:	2001      	movs	r0, #1
   10690:	bd10      	pop	{r4, pc}
		    (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] != handle)) ||
		   ((req != 0) && (_radio.fc_handle[req - 1] != handle))) {
		return 1;
	}

	return 0;
   10692:	2000      	movs	r0, #0
}
   10694:	bd10      	pop	{r4, pc}
   10696:	bf00      	nop
   10698:	20001470 	.word	0x20001470

0001069c <radio_rx_fc_set>:

u8_t radio_rx_fc_set(u16_t handle, u8_t fc)
{
   1069c:	b430      	push	{r4, r5}
	if (_radio.fc_ena) {
   1069e:	4b14      	ldr	r3, [pc, #80]	; (106f0 <radio_rx_fc_set+0x54>)
   106a0:	f893 21fe 	ldrb.w	r2, [r3, #510]	; 0x1fe

	return 0;
}

u8_t radio_rx_fc_set(u16_t handle, u8_t fc)
{
   106a4:	460d      	mov	r5, r1
	if (_radio.fc_ena) {
   106a6:	b302      	cbz	r2, 106ea <radio_rx_fc_set+0x4e>
		u8_t req = _radio.fc_req;
   106a8:	f893 21fc 	ldrb.w	r2, [r3, #508]	; 0x1fc
   106ac:	b2d1      	uxtb	r1, r2
		u8_t ack = _radio.fc_ack;
   106ae:	f893 21fd 	ldrb.w	r2, [r3, #509]	; 0x1fd

		if (fc) {
   106b2:	b135      	cbz	r5, 106c2 <radio_rx_fc_set+0x26>
			if (handle != 0xffff) {
   106b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   106b8:	4298      	cmp	r0, r3
   106ba:	d016      	beq.n	106ea <radio_rx_fc_set+0x4e>
			}
		}
	}

	return 0;
}
   106bc:	bc30      	pop	{r4, r5}
		u8_t req = _radio.fc_req;
		u8_t ack = _radio.fc_ack;

		if (fc) {
			if (handle != 0xffff) {
				return do_radio_rx_fc_set(handle, req, ack);
   106be:	f7ff bfbd 	b.w	1063c <do_radio_rx_fc_set>
			}
		} else if ((_radio.link_rx_head == _radio.link_rx_tail) &&
   106c2:	f8d3 01c8 	ldr.w	r0, [r3, #456]	; 0x1c8
   106c6:	f8d3 41cc 	ldr.w	r4, [r3, #460]	; 0x1cc
   106ca:	42a0      	cmp	r0, r4
   106cc:	d10d      	bne.n	106ea <radio_rx_fc_set+0x4e>
   106ce:	4291      	cmp	r1, r2
   106d0:	d00b      	beq.n	106ea <radio_rx_fc_set+0x4e>
			   (req != ack)
		    ) {
			_radio.fc_ack = req;

			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   106d2:	f8d3 41cc 	ldr.w	r4, [r3, #460]	; 0x1cc
				return do_radio_rx_fc_set(handle, req, ack);
			}
		} else if ((_radio.link_rx_head == _radio.link_rx_tail) &&
			   (req != ack)
		    ) {
			_radio.fc_ack = req;
   106d6:	f883 11fd 	strb.w	r1, [r3, #509]	; 0x1fd

			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   106da:	42a0      	cmp	r0, r4
   106dc:	d005      	beq.n	106ea <radio_rx_fc_set+0x4e>
			    (req == _radio.fc_req)) {
   106de:	f893 01fc 	ldrb.w	r0, [r3, #508]	; 0x1fc
		} else if ((_radio.link_rx_head == _radio.link_rx_tail) &&
			   (req != ack)
		    ) {
			_radio.fc_ack = req;

			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   106e2:	4281      	cmp	r1, r0
			    (req == _radio.fc_req)) {
				_radio.fc_ack = ack;
   106e4:	bf08      	it	eq
   106e6:	f883 21fd 	strbeq.w	r2, [r3, #509]	; 0x1fd
			}
		}
	}

	return 0;
}
   106ea:	2000      	movs	r0, #0
   106ec:	bc30      	pop	{r4, r5}
   106ee:	4770      	bx	lr
   106f0:	20001470 	.word	0x20001470

000106f4 <radio_tx_mem_acquire>:
	return 0;
}

struct radio_pdu_node_tx *radio_tx_mem_acquire(void)
{
	return mem_acquire(&_radio.pkt_tx_data_free);
   106f4:	4801      	ldr	r0, [pc, #4]	; (106fc <radio_tx_mem_acquire+0x8>)
   106f6:	f7f9 b8a8 	b.w	984a <mem_acquire>
   106fa:	bf00      	nop
   106fc:	20001650 	.word	0x20001650

00010700 <radio_tx_mem_release>:
}

void radio_tx_mem_release(struct radio_pdu_node_tx *node_tx)
{
	mem_release(node_tx, &_radio.pkt_tx_data_free);
   10700:	4901      	ldr	r1, [pc, #4]	; (10708 <radio_tx_mem_release+0x8>)
   10702:	f7f9 b8bc 	b.w	987e <mem_release>
   10706:	bf00      	nop
   10708:	20001650 	.word	0x20001650

0001070c <radio_tx_mem_enqueue>:
	conn = (struct connection *)params;
	conn->role.slave.latency_cancel = 0;
}

u32_t radio_tx_mem_enqueue(u16_t handle, struct radio_pdu_node_tx *node_tx)
{
   1070c:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t last;
	struct connection *conn;
	struct pdu_data *pdu_data;

	last = _radio.packet_tx_last + 1;
   1070e:	4d35      	ldr	r5, [pc, #212]	; (107e4 <radio_tx_mem_enqueue+0xd8>)
   10710:	f895 41f2 	ldrb.w	r4, [r5, #498]	; 0x1f2
	if (last == _radio.packet_tx_count) {
   10714:	f895 31f0 	ldrb.w	r3, [r5, #496]	; 0x1f0
{
	u8_t last;
	struct connection *conn;
	struct pdu_data *pdu_data;

	last = _radio.packet_tx_last + 1;
   10718:	3401      	adds	r4, #1
	conn = (struct connection *)params;
	conn->role.slave.latency_cancel = 0;
}

u32_t radio_tx_mem_enqueue(u16_t handle, struct radio_pdu_node_tx *node_tx)
{
   1071a:	b089      	sub	sp, #36	; 0x24
	u8_t last;
	struct connection *conn;
	struct pdu_data *pdu_data;

	last = _radio.packet_tx_last + 1;
   1071c:	b2e4      	uxtb	r4, r4
	conn = (struct connection *)params;
	conn->role.slave.latency_cancel = 0;
}

u32_t radio_tx_mem_enqueue(u16_t handle, struct radio_pdu_node_tx *node_tx)
{
   1071e:	4607      	mov	r7, r0
   10720:	460e      	mov	r6, r1
	struct connection *conn;
	struct pdu_data *pdu_data;

	last = _radio.packet_tx_last + 1;
	if (last == _radio.packet_tx_count) {
		last = 0;
   10722:	42a3      	cmp	r3, r4
   10724:	bf08      	it	eq
   10726:	2400      	moveq	r4, #0
	}

	pdu_data = (struct pdu_data *)node_tx->pdu_data;
	conn = connection_get(handle);
   10728:	f7fa fe1c 	bl	b364 <connection_get>
	if (!conn || (last == _radio.packet_tx_first)) {
   1072c:	2800      	cmp	r0, #0
   1072e:	d056      	beq.n	107de <radio_tx_mem_enqueue+0xd2>
   10730:	f895 31f1 	ldrb.w	r3, [r5, #497]	; 0x1f1
   10734:	429c      	cmp	r4, r3
   10736:	d052      	beq.n	107de <radio_tx_mem_enqueue+0xd2>
		return 1;
	}

	LL_ASSERT(pdu_data->len <= (_radio.packet_tx_data_size -
   10738:	f8b5 31e4 	ldrh.w	r3, [r5, #484]	; 0x1e4
   1073c:	7972      	ldrb	r2, [r6, #5]
   1073e:	3b07      	subs	r3, #7
   10740:	429a      	cmp	r2, r3
   10742:	d908      	bls.n	10756 <radio_tx_mem_enqueue+0x4a>
   10744:	4b28      	ldr	r3, [pc, #160]	; (107e8 <radio_tx_mem_enqueue+0xdc>)
   10746:	9301      	str	r3, [sp, #4]
   10748:	4b28      	ldr	r3, [pc, #160]	; (107ec <radio_tx_mem_enqueue+0xe0>)
   1074a:	9300      	str	r3, [sp, #0]
   1074c:	4a28      	ldr	r2, [pc, #160]	; (107f0 <radio_tx_mem_enqueue+0xe4>)
   1074e:	4b29      	ldr	r3, [pc, #164]	; (107f4 <radio_tx_mem_enqueue+0xe8>)
   10750:	4929      	ldr	r1, [pc, #164]	; (107f8 <radio_tx_mem_enqueue+0xec>)
   10752:	482a      	ldr	r0, [pc, #168]	; (107fc <radio_tx_mem_enqueue+0xf0>)
   10754:	e03b      	b.n	107ce <radio_tx_mem_enqueue+0xc2>
				    offsetof(struct radio_pdu_node_tx,
					     pdu_data) -
				    offsetof(struct pdu_data, payload)));

	_radio.pkt_tx[_radio.packet_tx_last].handle = handle;
   10756:	f895 21f2 	ldrb.w	r2, [r5, #498]	; 0x1f2
   1075a:	f8d5 31e8 	ldr.w	r3, [r5, #488]	; 0x1e8
   1075e:	f823 7032 	strh.w	r7, [r3, r2, lsl #3]
	_radio.pkt_tx[_radio.packet_tx_last].  node_tx = node_tx;
   10762:	f895 21f2 	ldrb.w	r2, [r5, #498]	; 0x1f2
   10766:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1076a:	605e      	str	r6, [r3, #4]
	_radio.packet_tx_last = last;
   1076c:	f885 41f2 	strb.w	r4, [r5, #498]	; 0x1f2

	/* break slave latency */
	if ((conn->role.slave.role != 0) && (conn->latency_event != 0) &&
   10770:	f890 2044 	ldrb.w	r2, [r0, #68]	; 0x44
   10774:	07d3      	lsls	r3, r2, #31
   10776:	d401      	bmi.n	1077c <radio_tx_mem_enqueue+0x70>
				 (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
			  (ticker_status == TICKER_STATUS_BUSY));
	}

	return 0;
   10778:	2000      	movs	r0, #0
   1077a:	e031      	b.n	107e0 <radio_tx_mem_enqueue+0xd4>
	_radio.pkt_tx[_radio.packet_tx_last].handle = handle;
	_radio.pkt_tx[_radio.packet_tx_last].  node_tx = node_tx;
	_radio.packet_tx_last = last;

	/* break slave latency */
	if ((conn->role.slave.role != 0) && (conn->latency_event != 0) &&
   1077c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
   1077e:	2b00      	cmp	r3, #0
   10780:	d0fa      	beq.n	10778 <radio_tx_mem_enqueue+0x6c>
   10782:	f002 0110 	and.w	r1, r2, #16
   10786:	f001 03ff 	and.w	r3, r1, #255	; 0xff
   1078a:	2900      	cmp	r1, #0
   1078c:	d1f4      	bne.n	10778 <radio_tx_mem_enqueue+0x6c>
	    (conn->role.slave.latency_cancel == 0)) {
		u32_t ticker_status;

		conn->role.slave.latency_cancel = 1;
   1078e:	f042 0210 	orr.w	r2, r2, #16
   10792:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44

		ticker_status = ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
   10796:	f890 2020 	ldrb.w	r2, [r0, #32]
   1079a:	4919      	ldr	r1, [pc, #100]	; (10800 <radio_tx_mem_enqueue+0xf4>)
   1079c:	9105      	str	r1, [sp, #20]
   1079e:	3207      	adds	r2, #7
   107a0:	2101      	movs	r1, #1
   107a2:	9006      	str	r0, [sp, #24]
   107a4:	9304      	str	r3, [sp, #16]
   107a6:	9103      	str	r1, [sp, #12]
   107a8:	9302      	str	r3, [sp, #8]
   107aa:	9301      	str	r3, [sp, #4]
   107ac:	9300      	str	r3, [sp, #0]
   107ae:	4618      	mov	r0, r3
   107b0:	b2d2      	uxtb	r2, r2
   107b2:	2103      	movs	r1, #3
   107b4:	f7fa fb38 	bl	ae28 <ticker_update>
				 RADIO_TICKER_USER_ID_APP,
				 RADIO_TICKER_ID_FIRST_CONNECTION +
				 conn->handle, 0, 0, 0, 0, 1, 0,
				 ticker_op_latency_cancelled,
				 (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   107b8:	f030 0302 	bics.w	r3, r0, #2
   107bc:	d0dc      	beq.n	10778 <radio_tx_mem_enqueue+0x6c>
   107be:	4b0a      	ldr	r3, [pc, #40]	; (107e8 <radio_tx_mem_enqueue+0xdc>)
   107c0:	9301      	str	r3, [sp, #4]
   107c2:	4b0a      	ldr	r3, [pc, #40]	; (107ec <radio_tx_mem_enqueue+0xe0>)
   107c4:	9300      	str	r3, [sp, #0]
   107c6:	4a0a      	ldr	r2, [pc, #40]	; (107f0 <radio_tx_mem_enqueue+0xe4>)
   107c8:	4b0a      	ldr	r3, [pc, #40]	; (107f4 <radio_tx_mem_enqueue+0xe8>)
   107ca:	490b      	ldr	r1, [pc, #44]	; (107f8 <radio_tx_mem_enqueue+0xec>)
   107cc:	480d      	ldr	r0, [pc, #52]	; (10804 <radio_tx_mem_enqueue+0xf8>)
   107ce:	f7f0 fe57 	bl	1480 <printk>
   107d2:	4040      	eors	r0, r0
   107d4:	f380 8811 	msr	BASEPRI, r0
   107d8:	f04f 0004 	mov.w	r0, #4
   107dc:	df02      	svc	2
	}

	pdu_data = (struct pdu_data *)node_tx->pdu_data;
	conn = connection_get(handle);
	if (!conn || (last == _radio.packet_tx_first)) {
		return 1;
   107de:	2001      	movs	r0, #1
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
			  (ticker_status == TICKER_STATUS_BUSY));
	}

	return 0;
}
   107e0:	b009      	add	sp, #36	; 0x24
   107e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   107e4:	20001470 	.word	0x20001470
   107e8:	00013df4 	.word	0x00013df4
   107ec:	00013df9 	.word	0x00013df9
   107f0:	00013db4 	.word	0x00013db4
   107f4:	000169ec 	.word	0x000169ec
   107f8:	00013dbb 	.word	0x00013dbb
   107fc:	00015d1f 	.word	0x00015d1f
   10800:	0000bb05 	.word	0x0000bb05
   10804:	000154fb 	.word	0x000154fb

void __weak ll_adv_scan_state_cb(u8_t bm)
{
   10808:	4770      	bx	lr
	...

0001080c <ll_adv_scan_state_cb>:

	k_delayed_work_cancel(&rpa_work);
}

void ll_adv_scan_state_cb(u8_t bm)
{
   1080c:	4b07      	ldr	r3, [pc, #28]	; (1082c <ll_adv_scan_state_cb+0x20>)
	k_delayed_work_submit(&rpa_work, rpa_timeout_ms);
}

static void rpa_refresh_start(void)
{
	if (!rl_enable) {
   1080e:	781b      	ldrb	r3, [r3, #0]
	k_delayed_work_cancel(&rpa_work);
}

void ll_adv_scan_state_cb(u8_t bm)
{
	if (bm) {
   10810:	b130      	cbz	r0, 10820 <ll_adv_scan_state_cb+0x14>
	k_delayed_work_submit(&rpa_work, rpa_timeout_ms);
}

static void rpa_refresh_start(void)
{
	if (!rl_enable) {
   10812:	b14b      	cbz	r3, 10828 <ll_adv_scan_state_cb+0x1c>
		return;
	}

	BT_DBG("");
	k_delayed_work_submit(&rpa_work, rpa_timeout_ms);
   10814:	4b06      	ldr	r3, [pc, #24]	; (10830 <ll_adv_scan_state_cb+0x24>)
   10816:	4907      	ldr	r1, [pc, #28]	; (10834 <ll_adv_scan_state_cb+0x28>)
   10818:	681a      	ldr	r2, [r3, #0]
   1081a:	4807      	ldr	r0, [pc, #28]	; (10838 <ll_adv_scan_state_cb+0x2c>)
   1081c:	f003 b838 	b.w	13890 <k_delayed_work_submit_to_queue>
}

static void rpa_refresh_stop(void)
{
	if (!rl_enable) {
   10820:	b113      	cbz	r3, 10828 <ll_adv_scan_state_cb+0x1c>
		return;
	}

	k_delayed_work_cancel(&rpa_work);
   10822:	4804      	ldr	r0, [pc, #16]	; (10834 <ll_adv_scan_state_cb+0x28>)
   10824:	f002 bffc 	b.w	13820 <k_delayed_work_cancel>
   10828:	4770      	bx	lr
   1082a:	bf00      	nop
   1082c:	20001eff 	.word	0x20001eff
   10830:	20002220 	.word	0x20002220
   10834:	20002190 	.word	0x20002190
   10838:	20002238 	.word	0x20002238
   1083c:	00000000 	.word	0x00000000

00010840 <radio_adv_enable>:
u32_t radio_adv_enable(u8_t phy_p, u16_t interval, u8_t chl_map,
		       u8_t filter_policy)
#else /* !CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */
u32_t radio_adv_enable(u16_t interval, u8_t chl_map, u8_t filter_policy)
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */
{
   10840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u32_t ticks_slot_offset;
	struct connection *conn;
	struct pdu_adv *pdu_adv;
	u32_t ret;

	if (_radio.advertiser.is_enabled) {
   10844:	f8df 92d8 	ldr.w	r9, [pc, #728]	; 10b20 <radio_adv_enable+0x2e0>
u32_t radio_adv_enable(u8_t phy_p, u16_t interval, u8_t chl_map,
		       u8_t filter_policy)
#else /* !CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */
u32_t radio_adv_enable(u16_t interval, u8_t chl_map, u8_t filter_policy)
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */
{
   10848:	b08f      	sub	sp, #60	; 0x3c
	u32_t ticks_slot_offset;
	struct connection *conn;
	struct pdu_adv *pdu_adv;
	u32_t ret;

	if (_radio.advertiser.is_enabled) {
   1084a:	f899 40a4 	ldrb.w	r4, [r9, #164]	; 0xa4
u32_t radio_adv_enable(u8_t phy_p, u16_t interval, u8_t chl_map,
		       u8_t filter_policy)
#else /* !CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */
u32_t radio_adv_enable(u16_t interval, u8_t chl_map, u8_t filter_policy)
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */
{
   1084e:	930a      	str	r3, [sp, #40]	; 0x28
	u32_t ticks_slot_offset;
	struct connection *conn;
	struct pdu_adv *pdu_adv;
	u32_t ret;

	if (_radio.advertiser.is_enabled) {
   10850:	f014 0401 	ands.w	r4, r4, #1
		       u8_t filter_policy)
#else /* !CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */
u32_t radio_adv_enable(u16_t interval, u8_t chl_map, u8_t filter_policy)
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */
{
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   10854:	f04f 0302 	mov.w	r3, #2
u32_t radio_adv_enable(u8_t phy_p, u16_t interval, u8_t chl_map,
		       u8_t filter_policy)
#else /* !CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */
u32_t radio_adv_enable(u16_t interval, u8_t chl_map, u8_t filter_policy)
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */
{
   10858:	4683      	mov	fp, r0
   1085a:	460f      	mov	r7, r1
   1085c:	4692      	mov	sl, r2
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   1085e:	930d      	str	r3, [sp, #52]	; 0x34
   10860:	464e      	mov	r6, r9
	u32_t ticks_slot_offset;
	struct connection *conn;
	struct pdu_adv *pdu_adv;
	u32_t ret;

	if (_radio.advertiser.is_enabled) {
   10862:	f040 8151 	bne.w	10b08 <radio_adv_enable+0x2c8>
		return 1;
	}

	pdu_adv = (struct pdu_adv *)
   10866:	f899 30f5 	ldrb.w	r3, [r9, #245]	; 0xf5
   1086a:	f04f 0827 	mov.w	r8, #39	; 0x27
   1086e:	fb08 9803 	mla	r8, r8, r3, r9
   10872:	f108 08a0 	add.w	r8, r8, #160	; 0xa0
		&_radio.advertiser.adv_data.data[_radio.advertiser.adv_data.last][0];

	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
   10876:	f898 3006 	ldrb.w	r3, [r8, #6]
   1087a:	f003 030f 	and.w	r3, r3, #15
   1087e:	2b01      	cmp	r3, #1
   10880:	f200 8094 	bhi.w	109ac <radio_adv_enable+0x16c>
	    (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND)) {
		void *link;

		if (_radio.advertiser.conn) {
   10884:	f8d9 5148 	ldr.w	r5, [r9, #328]	; 0x148
   10888:	2d00      	cmp	r5, #0
   1088a:	f040 813d 	bne.w	10b08 <radio_adv_enable+0x2c8>
			return 1;
		}

		link = mem_acquire(&_radio.link_rx_free);
   1088e:	f509 70e2 	add.w	r0, r9, #452	; 0x1c4
   10892:	f7f8 ffda 	bl	984a <mem_acquire>
		if (!link) {
   10896:	900b      	str	r0, [sp, #44]	; 0x2c
   10898:	2800      	cmp	r0, #0
   1089a:	f000 8135 	beq.w	10b08 <radio_adv_enable+0x2c8>
			return 1;
		}

		conn = mem_acquire(&_radio.conn_free);
   1089e:	f509 70c4 	add.w	r0, r9, #392	; 0x188
   108a2:	f7f8 ffd2 	bl	984a <mem_acquire>
		if (!conn) {
   108a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   108a8:	4604      	mov	r4, r0
   108aa:	b918      	cbnz	r0, 108b4 <radio_adv_enable+0x74>
			mem_release(link, &_radio.link_rx_free);
   108ac:	f509 71e2 	add.w	r1, r9, #452	; 0x1c4
   108b0:	4610      	mov	r0, r2
   108b2:	e127      	b.n	10b04 <radio_adv_enable+0x2c4>

			return 1;
		}

		conn->handle = 0xFFFF;
   108b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   108b8:	8403      	strh	r3, [r0, #32]
		conn->llcp_features = RADIO_BLE_FEAT;
   108ba:	f244 137f 	movw	r3, #16767	; 0x417f
   108be:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
		conn->data_chan_sel = 0;
   108c2:	7f03      	ldrb	r3, [r0, #28]
		conn->data_chan_use = 0;
   108c4:	77c5      	strb	r5, [r0, #31]
			return 1;
		}

		conn->handle = 0xFFFF;
		conn->llcp_features = RADIO_BLE_FEAT;
		conn->data_chan_sel = 0;
   108c6:	f365 1386 	bfi	r3, r5, #6, #1
   108ca:	7703      	strb	r3, [r0, #28]
		conn->event_counter = 0;
		conn->latency_prepare = 0;
		conn->latency_event = 0;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
		conn->default_tx_octets = _radio.default_tx_octets;
   108cc:	f8b9 319e 	ldrh.w	r3, [r9, #414]	; 0x19e
   108d0:	8583      	strh	r3, [r0, #44]	; 0x2c
		conn->max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   108d2:	231b      	movs	r3, #27
   108d4:	85c3      	strh	r3, [r0, #46]	; 0x2e
		conn->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   108d6:	8603      	strh	r3, [r0, #48]	; 0x30
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
		conn->phy_pref_tx = _radio.default_phy_tx;
   108d8:	f8b9 11a2 	ldrh.w	r1, [r9, #418]	; 0x1a2
   108dc:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32

		conn->handle = 0xFFFF;
		conn->llcp_features = RADIO_BLE_FEAT;
		conn->data_chan_sel = 0;
		conn->data_chan_use = 0;
		conn->event_counter = 0;
   108e0:	8445      	strh	r5, [r0, #34]	; 0x22
		conn->max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
		conn->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
		conn->phy_pref_tx = _radio.default_phy_tx;
   108e2:	f361 0302 	bfi	r3, r1, #0, #3
		conn->phy_tx = BIT(0);
   108e6:	2101      	movs	r1, #1
   108e8:	f361 03c5 	bfi	r3, r1, #3, #3
		conn->phy_pref_flags = 0;
   108ec:	f365 1386 	bfi	r3, r5, #6, #1
		conn->phy_flags = 0;
   108f0:	f365 13c7 	bfi	r3, r5, #7, #1
   108f4:	f880 3032 	strb.w	r3, [r0, #50]	; 0x32
		conn->handle = 0xFFFF;
		conn->llcp_features = RADIO_BLE_FEAT;
		conn->data_chan_sel = 0;
		conn->data_chan_use = 0;
		conn->event_counter = 0;
		conn->latency_prepare = 0;
   108f8:	8505      	strh	r5, [r0, #40]	; 0x28
		conn->latency_event = 0;
   108fa:	8545      	strh	r5, [r0, #42]	; 0x2a
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
		conn->phy_pref_tx = _radio.default_phy_tx;
		conn->phy_tx = BIT(0);
		conn->phy_pref_flags = 0;
		conn->phy_flags = 0;
		conn->phy_pref_rx = _radio.default_phy_rx;
   108fc:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
   10900:	f8b9 01a4 	ldrh.w	r0, [r9, #420]	; 0x1a4
		conn->phy_rx = BIT(0);
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PHY */

		conn->role.slave.role = 1;
		conn->role.slave.latency_cancel = 0;
		conn->role.slave.window_widening_prepare_us = 0;
   10904:	6525      	str	r5, [r4, #80]	; 0x50
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
		conn->phy_pref_tx = _radio.default_phy_tx;
		conn->phy_tx = BIT(0);
		conn->phy_pref_flags = 0;
		conn->phy_flags = 0;
		conn->phy_pref_rx = _radio.default_phy_rx;
   10906:	f360 0302 	bfi	r3, r0, #0, #3
		conn->phy_rx = BIT(0);
   1090a:	f361 03c5 	bfi	r3, r1, #3, #3
   1090e:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PHY */

		conn->role.slave.role = 1;
   10912:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
		conn->role.slave.latency_cancel = 0;
		conn->role.slave.window_widening_prepare_us = 0;
		conn->role.slave.window_widening_event_us = 0;
   10916:	6565      	str	r5, [r4, #84]	; 0x54
		conn->phy_pref_rx = _radio.default_phy_rx;
		conn->phy_rx = BIT(0);
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PHY */

		conn->role.slave.role = 1;
		conn->role.slave.latency_cancel = 0;
   10918:	430b      	orrs	r3, r1
   1091a:	f365 1304 	bfi	r3, r5, #4, #1
   1091e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		conn->role.slave.window_widening_prepare_us = 0;
		conn->role.slave.window_widening_event_us = 0;
		conn->role.slave.ticks_to_offset = 0;
		conn->supervision_expire = 6;
   10922:	2306      	movs	r3, #6
   10924:	86e3      	strh	r3, [r4, #54]	; 0x36
		conn->appto_expire = 0;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

		conn->llcp_req = 0;
		conn->llcp_ack = 0;
		conn->llcp_version.tx = 0;
   10926:	f894 309c 	ldrb.w	r3, [r4, #156]	; 0x9c

		conn->role.slave.role = 1;
		conn->role.slave.latency_cancel = 0;
		conn->role.slave.window_widening_prepare_us = 0;
		conn->role.slave.window_widening_event_us = 0;
		conn->role.slave.ticks_to_offset = 0;
   1092a:	6665      	str	r5, [r4, #100]	; 0x64
		conn->appto_expire = 0;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

		conn->llcp_req = 0;
		conn->llcp_ack = 0;
		conn->llcp_version.tx = 0;
   1092c:	f365 0300 	bfi	r3, r5, #0, #1
		conn->llcp_version.rx = 0;
   10930:	f365 0341 	bfi	r3, r5, #1, #1
   10934:	f884 309c 	strb.w	r3, [r4, #156]	; 0x9c
		conn->role.slave.latency_cancel = 0;
		conn->role.slave.window_widening_prepare_us = 0;
		conn->role.slave.window_widening_event_us = 0;
		conn->role.slave.ticks_to_offset = 0;
		conn->supervision_expire = 6;
		conn->procedure_expire = 0;
   10938:	8765      	strh	r5, [r4, #58]	; 0x3a

#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_PING)
		conn->apto_expire = 0;
   1093a:	f8a4 5042 	strh.w	r5, [r4, #66]	; 0x42
		conn->appto_expire = 0;
   1093e:	87e5      	strh	r5, [r4, #62]	; 0x3e
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

		conn->llcp_req = 0;
   10940:	f884 5068 	strb.w	r5, [r4, #104]	; 0x68
		conn->llcp_ack = 0;
   10944:	f884 5069 	strb.w	r5, [r4, #105]	; 0x69
		conn->llcp_version.tx = 0;
		conn->llcp_version.rx = 0;
		conn->llcp_terminate.req = 0;
   10948:	f884 50a4 	strb.w	r5, [r4, #164]	; 0xa4
		conn->llcp_terminate.ack = 0;
   1094c:	f884 50a5 	strb.w	r5, [r4, #165]	; 0xa5
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
		conn->llcp_phy.req = 0;
		conn->llcp_phy.ack = 0;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PHY */

		conn->sn = 0;
   10950:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
		conn->llcp_ack = 0;
		conn->llcp_version.tx = 0;
		conn->llcp_version.rx = 0;
		conn->llcp_terminate.req = 0;
		conn->llcp_terminate.ack = 0;
		conn->llcp_terminate.reason_peer = 0;
   10954:	f884 50a7 	strb.w	r5, [r4, #167]	; 0xa7
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
		conn->llcp_phy.req = 0;
		conn->llcp_phy.ack = 0;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PHY */

		conn->sn = 0;
   10958:	f365 0300 	bfi	r3, r5, #0, #1
		conn->nesn = 0;
   1095c:	f365 0341 	bfi	r3, r5, #1, #1
		conn->pause_rx = 0;
   10960:	f365 0382 	bfi	r3, r5, #2, #1
		conn->pause_tx = 0;
   10964:	f365 03c3 	bfi	r3, r5, #3, #1
		conn->enc_rx = 0;
   10968:	f365 1304 	bfi	r3, r5, #4, #1
		conn->enc_tx = 0;
   1096c:	f365 1345 	bfi	r3, r5, #5, #1
		conn->refresh = 0;
   10970:	f365 1386 	bfi	r3, r5, #6, #1
		conn->empty = 0;
   10974:	f365 13c7 	bfi	r3, r5, #7, #1
		conn->llcp_version.tx = 0;
		conn->llcp_version.rx = 0;
		conn->llcp_terminate.req = 0;
		conn->llcp_terminate.ack = 0;
		conn->llcp_terminate.reason_peer = 0;
		conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link = link;
   10978:	f8c4 20a8 	str.w	r2, [r4, #168]	; 0xa8

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
		conn->llcp_length.req = 0;
   1097c:	f884 50b4 	strb.w	r5, [r4, #180]	; 0xb4
		conn->llcp_length.ack = 0;
   10980:	f884 50b5 	strb.w	r5, [r4, #181]	; 0xb5
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
		conn->llcp_phy.req = 0;
   10984:	f884 50bc 	strb.w	r5, [r4, #188]	; 0xbc
		conn->llcp_phy.ack = 0;
   10988:	f884 50bd 	strb.w	r5, [r4, #189]	; 0xbd
		conn->pause_rx = 0;
		conn->pause_tx = 0;
		conn->enc_rx = 0;
		conn->enc_tx = 0;
		conn->refresh = 0;
		conn->empty = 0;
   1098c:	f884 30c0 	strb.w	r3, [r4, #192]	; 0xc0
		conn->pkt_tx_head = NULL;
   10990:	f8c4 5104 	str.w	r5, [r4, #260]	; 0x104
		conn->pkt_tx_ctrl = NULL;
   10994:	f8c4 5108 	str.w	r5, [r4, #264]	; 0x108
		conn->pkt_tx_data = NULL;
   10998:	f8c4 510c 	str.w	r5, [r4, #268]	; 0x10c
		conn->pkt_tx_last = NULL;
   1099c:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
		conn->packet_tx_head_len = 0;
   109a0:	f884 5114 	strb.w	r5, [r4, #276]	; 0x114
		conn->packet_tx_head_offset = 0;
   109a4:	f884 5115 	strb.w	r5, [r4, #277]	; 0x115
		conn->rssi_latest = 0x7F;
		conn->rssi_reported = 0x7F;
		conn->rssi_sample_count = 0;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_CONN_RSSI */

		_radio.advertiser.conn = conn;
   109a8:	f8c9 4148 	str.w	r4, [r9, #328]	; 0x148
	} else {
		conn = NULL;
	}

#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
	_radio.advertiser.phy_p = phy_p;
   109ac:	f896 30a5 	ldrb.w	r3, [r6, #165]	; 0xa5
#endif /* CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */

	_radio.advertiser.chl_map = chl_map;
	_radio.advertiser.filter_policy = filter_policy;
   109b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28

	_radio.advertiser.hdr.ticks_active_to_start =
		_radio.ticks_active_to_start;
   109b2:	f8d6 5200 	ldr.w	r5, [r6, #512]	; 0x200
#endif /* CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */

	_radio.advertiser.chl_map = chl_map;
	_radio.advertiser.filter_policy = filter_policy;

	_radio.advertiser.hdr.ticks_active_to_start =
   109b6:	f8c6 5098 	str.w	r5, [r6, #152]	; 0x98
	} else {
		conn = NULL;
	}

#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
	_radio.advertiser.phy_p = phy_p;
   109ba:	f36b 0302 	bfi	r3, fp, #0, #3
#endif /* CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */

	_radio.advertiser.chl_map = chl_map;
   109be:	f36a 03c5 	bfi	r3, sl, #3, #3
	_radio.advertiser.filter_policy = filter_policy;
   109c2:	f362 1387 	bfi	r3, r2, #6, #2
   109c6:	f886 30a5 	strb.w	r3, [r6, #165]	; 0xa5

	_radio.advertiser.hdr.ticks_active_to_start =
		_radio.ticks_active_to_start;
	_radio.advertiser.hdr.ticks_xtal_to_start =
   109ca:	2327      	movs	r3, #39	; 0x27
   109cc:	f8c6 3094 	str.w	r3, [r6, #148]	; 0x94
		TICKER_US_TO_TICKS(RADIO_TICKER_XTAL_OFFSET_US);
	_radio.advertiser.hdr.ticks_preempt_to_start =
   109d0:	2300      	movs	r3, #0
   109d2:	f8c6 309c 	str.w	r3, [r6, #156]	; 0x9c
		TICKER_US_TO_TICKS(RADIO_TICKER_PREEMPT_PART_MIN_US);
	_radio.advertiser.hdr.ticks_slot =
   109d6:	2382      	movs	r3, #130	; 0x82
   109d8:	f8c6 30a0 	str.w	r3, [r6, #160]	; 0xa0
		 _radio.advertiser.hdr.ticks_xtal_to_start) ?
		_radio.advertiser.hdr.ticks_xtal_to_start :
		_radio.advertiser.hdr.ticks_active_to_start;

	/* High Duty Cycle Directed Advertising if interval is 0. */
	if ((pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
   109dc:	f898 3006 	ldrb.w	r3, [r8, #6]
   109e0:	f8df b150 	ldr.w	fp, [pc, #336]	; 10b34 <radio_adv_enable+0x2f4>
   109e4:	f8df 8150 	ldr.w	r8, [pc, #336]	; 10b38 <radio_adv_enable+0x2f8>
	_radio.advertiser.hdr.ticks_slot =
		TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
		/* Max. chain is ADV_IND + SCAN_REQ + SCAN_RESP */
		((376 + 150 + 176 + 150 + 376) * 3));

	ticks_slot_offset =
   109e8:	2d27      	cmp	r5, #39	; 0x27
		 _radio.advertiser.hdr.ticks_xtal_to_start) ?
		_radio.advertiser.hdr.ticks_xtal_to_start :
		_radio.advertiser.hdr.ticks_active_to_start;

	/* High Duty Cycle Directed Advertising if interval is 0. */
	if ((pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
   109ea:	f003 030f 	and.w	r3, r3, #15
	_radio.advertiser.hdr.ticks_slot =
		TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
		/* Max. chain is ADV_IND + SCAN_REQ + SCAN_RESP */
		((376 + 150 + 176 + 150 + 376) * 3));

	ticks_slot_offset =
   109ee:	bf38      	it	cc
   109f0:	2527      	movcc	r5, #39	; 0x27
		 _radio.advertiser.hdr.ticks_xtal_to_start) ?
		_radio.advertiser.hdr.ticks_xtal_to_start :
		_radio.advertiser.hdr.ticks_active_to_start;

	/* High Duty Cycle Directed Advertising if interval is 0. */
	if ((pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
   109f2:	2b01      	cmp	r3, #1
   109f4:	f10d 0934 	add.w	r9, sp, #52	; 0x34
   109f8:	d138      	bne.n	10a6c <radio_adv_enable+0x22c>
   109fa:	2f00      	cmp	r7, #0
   109fc:	d136      	bne.n	10a6c <radio_adv_enable+0x22c>
	    !interval) {
		u32_t ticks_now = ticker_ticks_now_get();
   109fe:	f7fa fb15 	bl	b02c <ticker_ticks_now_get>

		ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
				   RADIO_TICKER_USER_ID_APP,
				   RADIO_TICKER_ID_ADV, ticks_now, 0,
				   (ticks_slot_offset +
				    _radio.advertiser.hdr.ticks_slot),
   10a02:	4b47      	ldr	r3, [pc, #284]	; (10b20 <radio_adv_enable+0x2e0>)
   10a04:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
	/* High Duty Cycle Directed Advertising if interval is 0. */
	if ((pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
	    !interval) {
		u32_t ticks_now = ticker_ticks_now_get();

		ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   10a08:	f8cd 9020 	str.w	r9, [sp, #32]
   10a0c:	441d      	add	r5, r3
   10a0e:	b2ab      	uxth	r3, r5
   10a10:	9304      	str	r3, [sp, #16]
		_radio.advertiser.hdr.ticks_active_to_start;

	/* High Duty Cycle Directed Advertising if interval is 0. */
	if ((pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
	    !interval) {
		u32_t ticks_now = ticker_ticks_now_get();
   10a12:	4682      	mov	sl, r0

		ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   10a14:	4603      	mov	r3, r0
   10a16:	f8cd 801c 	str.w	r8, [sp, #28]
   10a1a:	9706      	str	r7, [sp, #24]
   10a1c:	f8cd b014 	str.w	fp, [sp, #20]
   10a20:	9703      	str	r7, [sp, #12]
   10a22:	9702      	str	r7, [sp, #8]
   10a24:	9501      	str	r5, [sp, #4]
   10a26:	9700      	str	r7, [sp, #0]
   10a28:	2205      	movs	r2, #5
   10a2a:	2103      	movs	r1, #3
   10a2c:	4638      	mov	r0, r7
   10a2e:	f7fa f9b3 	bl	ad98 <ticker_start>
				   (ticks_slot_offset +
				    _radio.advertiser.hdr.ticks_slot),
				   radio_event_adv_prepare, NULL,
				   ticker_if_done, (void *)&ret_cb);

		if (ret == TICKER_STATUS_BUSY) {
   10a32:	2802      	cmp	r0, #2
   10a34:	d014      	beq.n	10a60 <radio_adv_enable+0x220>
			while (ret_cb == TICKER_STATUS_BUSY) {
				cpu_sleep();
			}
		}

		if (ret_cb != TICKER_STATUS_SUCCESS) {
   10a36:	980d      	ldr	r0, [sp, #52]	; 0x34
   10a38:	2800      	cmp	r0, #0
   10a3a:	d15b      	bne.n	10af4 <radio_adv_enable+0x2b4>
			goto failure_cleanup;
		}

		ret =
   10a3c:	4b39      	ldr	r3, [pc, #228]	; (10b24 <radio_adv_enable+0x2e4>)
   10a3e:	9305      	str	r3, [sp, #20]
   10a40:	2203      	movs	r2, #3
   10a42:	f24a 33fe 	movw	r3, #41982	; 0xa3fe
   10a46:	9300      	str	r3, [sp, #0]
   10a48:	f8cd 9020 	str.w	r9, [sp, #32]
   10a4c:	f8cd 801c 	str.w	r8, [sp, #28]
   10a50:	9006      	str	r0, [sp, #24]
   10a52:	9004      	str	r0, [sp, #16]
   10a54:	9003      	str	r0, [sp, #12]
   10a56:	9002      	str	r0, [sp, #8]
   10a58:	9001      	str	r0, [sp, #4]
   10a5a:	4653      	mov	r3, sl
   10a5c:	4611      	mov	r1, r2
   10a5e:	e02e      	b.n	10abe <radio_adv_enable+0x27e>
				    _radio.advertiser.hdr.ticks_slot),
				   radio_event_adv_prepare, NULL,
				   ticker_if_done, (void *)&ret_cb);

		if (ret == TICKER_STATUS_BUSY) {
			while (ret_cb == TICKER_STATUS_BUSY) {
   10a60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   10a62:	2b02      	cmp	r3, #2
   10a64:	d1e7      	bne.n	10a36 <radio_adv_enable+0x1f6>
				cpu_sleep();
   10a66:	f7fa fb07 	bl	b078 <cpu_sleep>
   10a6a:	e7f9      	b.n	10a60 <radio_adv_enable+0x220>
				     TICKER_NULL_LAZY, TICKER_NULL_SLOT,
				     event_adv_stop, NULL, ticker_if_done,
				     (void *)&ret_cb);
	} else {
		ret =
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   10a6c:	f7fa fade 	bl	b02c <ticker_ticks_now_get>
				     TICKER_NULL_PERIOD, TICKER_NULL_REMAINDER,
				     TICKER_NULL_LAZY, TICKER_NULL_SLOT,
				     event_adv_stop, NULL, ticker_if_done,
				     (void *)&ret_cb);
	} else {
		ret =
   10a70:	f8cd 801c 	str.w	r8, [sp, #28]
   10a74:	f04f 0800 	mov.w	r8, #0
   10a78:	f8cd 9020 	str.w	r9, [sp, #32]
   10a7c:	f8cd 8018 	str.w	r8, [sp, #24]
   10a80:	f8cd b014 	str.w	fp, [sp, #20]
   10a84:	f8d6 30a0 	ldr.w	r3, [r6, #160]	; 0xa0
   10a88:	f8cd 800c 	str.w	r8, [sp, #12]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   10a8c:	4682      	mov	sl, r0
				     TICKER_NULL_PERIOD, TICKER_NULL_REMAINDER,
				     TICKER_NULL_LAZY, TICKER_NULL_SLOT,
				     event_adv_stop, NULL, ticker_if_done,
				     (void *)&ret_cb);
	} else {
		ret =
   10a8e:	4826      	ldr	r0, [pc, #152]	; (10b28 <radio_adv_enable+0x2e8>)
   10a90:	f8cd 8008 	str.w	r8, [sp, #8]
   10a94:	b2ba      	uxth	r2, r7
   10a96:	fba2 0100 	umull	r0, r1, r2, r0
   10a9a:	441d      	add	r5, r3
   10a9c:	2391      	movs	r3, #145	; 0x91
   10a9e:	fb03 1102 	mla	r1, r3, r2, r1
   10aa2:	b2ad      	uxth	r5, r5
   10aa4:	a31c      	add	r3, pc, #112	; (adr r3, 10b18 <radio_adv_enable+0x2d8>)
   10aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
   10aaa:	9504      	str	r5, [sp, #16]
   10aac:	f7ef fbb2 	bl	214 <__aeabi_uldivmod>
   10ab0:	f8cd 8000 	str.w	r8, [sp]
   10ab4:	9001      	str	r0, [sp, #4]
   10ab6:	4653      	mov	r3, sl
   10ab8:	2205      	movs	r2, #5
   10aba:	2103      	movs	r1, #3
   10abc:	4640      	mov	r0, r8
   10abe:	f7fa f96b 	bl	ad98 <ticker_start>
				      _radio.advertiser.hdr.ticks_slot),
				     radio_event_adv_prepare, NULL,
				     ticker_if_done, (void *)&ret_cb);
	}

	if (ret == TICKER_STATUS_BUSY) {
   10ac2:	2802      	cmp	r0, #2
   10ac4:	d002      	beq.n	10acc <radio_adv_enable+0x28c>
		while (ret_cb == TICKER_STATUS_BUSY) {
			cpu_sleep();
		}
	}

	if (ret_cb == TICKER_STATUS_SUCCESS) {
   10ac6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   10ac8:	b135      	cbz	r5, 10ad8 <radio_adv_enable+0x298>
   10aca:	e013      	b.n	10af4 <radio_adv_enable+0x2b4>
				     radio_event_adv_prepare, NULL,
				     ticker_if_done, (void *)&ret_cb);
	}

	if (ret == TICKER_STATUS_BUSY) {
		while (ret_cb == TICKER_STATUS_BUSY) {
   10acc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   10ace:	2b02      	cmp	r3, #2
   10ad0:	d1f9      	bne.n	10ac6 <radio_adv_enable+0x286>
			cpu_sleep();
   10ad2:	f7fa fad1 	bl	b078 <cpu_sleep>
   10ad6:	e7f9      	b.n	10acc <radio_adv_enable+0x28c>
		}
	}

	if (ret_cb == TICKER_STATUS_SUCCESS) {
		_radio.advertiser.is_enabled = 1;
   10ad8:	f896 30a4 	ldrb.w	r3, [r6, #164]	; 0xa4
   10adc:	f043 0301 	orr.w	r3, r3, #1
   10ae0:	f886 30a4 	strb.w	r3, [r6, #164]	; 0xa4

		if (!_radio.scanner.is_enabled) {
   10ae4:	f896 315c 	ldrb.w	r3, [r6, #348]	; 0x15c
   10ae8:	07db      	lsls	r3, r3, #31
   10aea:	d40e      	bmi.n	10b0a <radio_adv_enable+0x2ca>
			ll_adv_scan_state_cb(BIT(0));
   10aec:	2001      	movs	r0, #1
   10aee:	f7ff fe8d 	bl	1080c <ll_adv_scan_state_cb>
   10af2:	e00a      	b.n	10b0a <radio_adv_enable+0x2ca>
		return 0;
	}

failure_cleanup:

	if (conn) {
   10af4:	b144      	cbz	r4, 10b08 <radio_adv_enable+0x2c8>
		mem_release(conn->llcp_terminate.radio_pdu_node_rx.hdr.
   10af6:	490d      	ldr	r1, [pc, #52]	; (10b2c <radio_adv_enable+0x2ec>)
   10af8:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   10afc:	f7f8 febf 	bl	987e <mem_release>
			    onion.link, &_radio.link_rx_free);
		mem_release(conn, &_radio.conn_free);
   10b00:	490b      	ldr	r1, [pc, #44]	; (10b30 <radio_adv_enable+0x2f0>)
   10b02:	4620      	mov	r0, r4
   10b04:	f7f8 febb 	bl	987e <mem_release>
	}

	return 1;
   10b08:	2501      	movs	r5, #1
}
   10b0a:	4628      	mov	r0, r5
   10b0c:	b00f      	add	sp, #60	; 0x3c
   10b0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10b12:	bf00      	nop
   10b14:	f3af 8000 	nop.w
   10b18:	1afd498d 	.word	0x1afd498d
   10b1c:	00000007 	.word	0x00000007
   10b20:	20001470 	.word	0x20001470
   10b24:	0000bbc5 	.word	0x0000bbc5
   10b28:	84e72a00 	.word	0x84e72a00
   10b2c:	20001634 	.word	0x20001634
   10b30:	200015f8 	.word	0x200015f8
   10b34:	0000cc51 	.word	0x0000cc51
   10b38:	0000b081 	.word	0x0000b081

00010b3c <radio_adv_disable>:

u32_t radio_adv_disable(void)
{
   10b3c:	b570      	push	{r4, r5, r6, lr}
	u32_t status;

	status = role_disable(RADIO_TICKER_ID_ADV,
   10b3e:	2103      	movs	r1, #3
   10b40:	2005      	movs	r0, #5
   10b42:	f7fa fc25 	bl	b390 <role_disable>
			      RADIO_TICKER_ID_ADV_STOP);
	if (!status) {
   10b46:	4606      	mov	r6, r0
   10b48:	bb00      	cbnz	r0, 10b8c <radio_adv_disable+0x50>
		struct connection *conn;

		_radio.advertiser.is_enabled = 0;
   10b4a:	4b11      	ldr	r3, [pc, #68]	; (10b90 <radio_adv_disable+0x54>)
   10b4c:	f893 20a4 	ldrb.w	r2, [r3, #164]	; 0xa4
   10b50:	f360 0200 	bfi	r2, r0, #0, #1
   10b54:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4

		if (!_radio.scanner.is_enabled) {
   10b58:	f893 215c 	ldrb.w	r2, [r3, #348]	; 0x15c
   10b5c:	f012 0f01 	tst.w	r2, #1
   10b60:	461c      	mov	r4, r3
   10b62:	d101      	bne.n	10b68 <radio_adv_disable+0x2c>
			ll_adv_scan_state_cb(0);
   10b64:	f7ff fe52 	bl	1080c <ll_adv_scan_state_cb>
		}

		conn = _radio.advertiser.conn;
   10b68:	f8d4 4148 	ldr.w	r4, [r4, #328]	; 0x148
   10b6c:	4d08      	ldr	r5, [pc, #32]	; (10b90 <radio_adv_disable+0x54>)
		if (conn) {
   10b6e:	b16c      	cbz	r4, 10b8c <radio_adv_disable+0x50>
			_radio.advertiser.conn = NULL;
   10b70:	2300      	movs	r3, #0
   10b72:	f8c5 3148 	str.w	r3, [r5, #328]	; 0x148

			mem_release(conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link,
   10b76:	f505 71e2 	add.w	r1, r5, #452	; 0x1c4
   10b7a:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   10b7e:	f7f8 fe7e 	bl	987e <mem_release>
				    &_radio.link_rx_free);
			mem_release(conn, &_radio.conn_free);
   10b82:	f505 71c4 	add.w	r1, r5, #392	; 0x188
   10b86:	4620      	mov	r0, r4
   10b88:	f7f8 fe79 	bl	987e <mem_release>
		}
	}

	return status;
}
   10b8c:	4630      	mov	r0, r6
   10b8e:	bd70      	pop	{r4, r5, r6, pc}
   10b90:	20001470 	.word	0x20001470

00010b94 <radio_rx_dequeue>:

	return cmplt;
}

void radio_rx_dequeue(void)
{
   10b94:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct radio_pdu_node_rx *radio_pdu_node_rx = NULL;
	void *link;

	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
   10b96:	4d4d      	ldr	r5, [pc, #308]	; (10ccc <radio_rx_dequeue+0x138>)
	return cmplt;
}

void radio_rx_dequeue(void)
{
	struct radio_pdu_node_rx *radio_pdu_node_rx = NULL;
   10b98:	aa04      	add	r2, sp, #16
   10b9a:	2300      	movs	r3, #0
   10b9c:	f842 3d04 	str.w	r3, [r2, #-4]!
	void *link;

	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
   10ba0:	f8d5 01cc 	ldr.w	r0, [r5, #460]	; 0x1cc
   10ba4:	f505 71e4 	add.w	r1, r5, #456	; 0x1c8
   10ba8:	f7f8 feb7 	bl	991a <memq_dequeue>
   10bac:	462c      	mov	r4, r5
			    (void **)&radio_pdu_node_rx);
	LL_ASSERT(link);
   10bae:	b940      	cbnz	r0, 10bc2 <radio_rx_dequeue+0x2e>
   10bb0:	4b47      	ldr	r3, [pc, #284]	; (10cd0 <radio_rx_dequeue+0x13c>)
   10bb2:	9301      	str	r3, [sp, #4]
   10bb4:	4b47      	ldr	r3, [pc, #284]	; (10cd4 <radio_rx_dequeue+0x140>)
   10bb6:	9300      	str	r3, [sp, #0]
   10bb8:	4a47      	ldr	r2, [pc, #284]	; (10cd8 <radio_rx_dequeue+0x144>)
   10bba:	4b48      	ldr	r3, [pc, #288]	; (10cdc <radio_rx_dequeue+0x148>)
   10bbc:	4948      	ldr	r1, [pc, #288]	; (10ce0 <radio_rx_dequeue+0x14c>)
   10bbe:	4849      	ldr	r0, [pc, #292]	; (10ce4 <radio_rx_dequeue+0x150>)
   10bc0:	e01f      	b.n	10c02 <radio_rx_dequeue+0x6e>

	mem_release(link, &_radio.link_rx_free);
   10bc2:	f505 71e2 	add.w	r1, r5, #452	; 0x1c4
   10bc6:	f7f8 fe5a 	bl	987e <mem_release>

	switch (radio_pdu_node_rx->hdr.type) {
   10bca:	9b03      	ldr	r3, [sp, #12]
   10bcc:	7919      	ldrb	r1, [r3, #4]
   10bce:	290c      	cmp	r1, #12
   10bd0:	d823      	bhi.n	10c1a <radio_rx_dequeue+0x86>
   10bd2:	2201      	movs	r2, #1
   10bd4:	408a      	lsls	r2, r1
   10bd6:	f641 717e 	movw	r1, #8062	; 0x1f7e
   10bda:	4011      	ands	r1, r2
   10bdc:	b911      	cbnz	r1, 10be4 <radio_rx_dequeue+0x50>
   10bde:	0615      	lsls	r5, r2, #24
   10be0:	d424      	bmi.n	10c2c <radio_rx_dequeue+0x98>
   10be2:	e01a      	b.n	10c1a <radio_rx_dequeue+0x86>
#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_INDICATION)
	case NODE_RX_TYPE_ADV_INDICATION:
#endif /* CONFIG_BLUETOOTH_CONTROLLER_ADV_INDICATION */

		/* release data link credit quota */
		LL_ASSERT(_radio.link_rx_data_quota <
   10be4:	f895 11bc 	ldrb.w	r1, [r5, #444]	; 0x1bc
   10be8:	f895 21d0 	ldrb.w	r2, [r5, #464]	; 0x1d0
   10bec:	3901      	subs	r1, #1
   10bee:	428a      	cmp	r2, r1
   10bf0:	db0f      	blt.n	10c12 <radio_rx_dequeue+0x7e>
   10bf2:	4b37      	ldr	r3, [pc, #220]	; (10cd0 <radio_rx_dequeue+0x13c>)
   10bf4:	9301      	str	r3, [sp, #4]
   10bf6:	4b37      	ldr	r3, [pc, #220]	; (10cd4 <radio_rx_dequeue+0x140>)
   10bf8:	9300      	str	r3, [sp, #0]
   10bfa:	4a37      	ldr	r2, [pc, #220]	; (10cd8 <radio_rx_dequeue+0x144>)
   10bfc:	4b37      	ldr	r3, [pc, #220]	; (10cdc <radio_rx_dequeue+0x148>)
   10bfe:	4938      	ldr	r1, [pc, #224]	; (10ce0 <radio_rx_dequeue+0x14c>)
   10c00:	4839      	ldr	r0, [pc, #228]	; (10ce8 <radio_rx_dequeue+0x154>)
   10c02:	f7f0 fc3d 	bl	1480 <printk>
   10c06:	4040      	eors	r0, r0
   10c08:	f380 8811 	msr	BASEPRI, r0
   10c0c:	f04f 0004 	mov.w	r0, #4
   10c10:	df02      	svc	2
			  (_radio.packet_rx_count - 1));

		_radio.link_rx_data_quota++;
   10c12:	3201      	adds	r2, #1
   10c14:	f885 21d0 	strb.w	r2, [r5, #464]	; 0x1d0
		break;
   10c18:	e008      	b.n	10c2c <radio_rx_dequeue+0x98>
	case NODE_RX_TYPE_TERMINATE:
		/* did not use data link quota */
		break;

	default:
		LL_ASSERT(0);
   10c1a:	4b2d      	ldr	r3, [pc, #180]	; (10cd0 <radio_rx_dequeue+0x13c>)
   10c1c:	9301      	str	r3, [sp, #4]
   10c1e:	4b2d      	ldr	r3, [pc, #180]	; (10cd4 <radio_rx_dequeue+0x140>)
   10c20:	9300      	str	r3, [sp, #0]
   10c22:	4a2d      	ldr	r2, [pc, #180]	; (10cd8 <radio_rx_dequeue+0x144>)
   10c24:	4b2d      	ldr	r3, [pc, #180]	; (10cdc <radio_rx_dequeue+0x148>)
   10c26:	492e      	ldr	r1, [pc, #184]	; (10ce0 <radio_rx_dequeue+0x14c>)
   10c28:	4830      	ldr	r0, [pc, #192]	; (10cec <radio_rx_dequeue+0x158>)
   10c2a:	e7ea      	b.n	10c02 <radio_rx_dequeue+0x6e>
		break;
	}

	if (radio_pdu_node_rx->hdr.type == NODE_RX_TYPE_CONNECTION) {
   10c2c:	791a      	ldrb	r2, [r3, #4]
   10c2e:	2a06      	cmp	r2, #6
   10c30:	d14a      	bne.n	10cc8 <radio_rx_dequeue+0x134>
		struct pdu_data *pdu_data_rx;
		u8_t bm;

		pdu_data_rx = (void *)radio_pdu_node_rx->pdu_data;
		radio_le_conn_cmplt = (void *)&pdu_data_rx->payload;
		if ((radio_le_conn_cmplt->status == 0x3c) ||
   10c32:	7ada      	ldrb	r2, [r3, #11]
   10c34:	2a3c      	cmp	r2, #60	; 0x3c
   10c36:	d003      	beq.n	10c40 <radio_rx_dequeue+0xac>
   10c38:	7b1a      	ldrb	r2, [r3, #12]
   10c3a:	b32a      	cbz	r2, 10c88 <radio_rx_dequeue+0xf4>
		break;
	}

	if (radio_pdu_node_rx->hdr.type == NODE_RX_TYPE_CONNECTION) {
		struct radio_le_conn_cmplt *radio_le_conn_cmplt;
		struct connection *conn = NULL;
   10c3c:	2500      	movs	r5, #0
   10c3e:	e004      	b.n	10c4a <radio_rx_dequeue+0xb6>
		radio_le_conn_cmplt = (void *)&pdu_data_rx->payload;
		if ((radio_le_conn_cmplt->status == 0x3c) ||
		    radio_le_conn_cmplt->role) {
			if (radio_le_conn_cmplt->status == 0x3c) {
				conn = _radio.advertiser.conn;
				_radio.advertiser.conn = NULL;
   10c40:	2300      	movs	r3, #0
		pdu_data_rx = (void *)radio_pdu_node_rx->pdu_data;
		radio_le_conn_cmplt = (void *)&pdu_data_rx->payload;
		if ((radio_le_conn_cmplt->status == 0x3c) ||
		    radio_le_conn_cmplt->role) {
			if (radio_le_conn_cmplt->status == 0x3c) {
				conn = _radio.advertiser.conn;
   10c42:	f8d4 5148 	ldr.w	r5, [r4, #328]	; 0x148
				_radio.advertiser.conn = NULL;
   10c46:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
			}

			LL_ASSERT(_radio.advertiser.is_enabled);
   10c4a:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
   10c4e:	4e1f      	ldr	r6, [pc, #124]	; (10ccc <radio_rx_dequeue+0x138>)
   10c50:	07d8      	lsls	r0, r3, #31
   10c52:	d408      	bmi.n	10c66 <radio_rx_dequeue+0xd2>
   10c54:	4b1e      	ldr	r3, [pc, #120]	; (10cd0 <radio_rx_dequeue+0x13c>)
   10c56:	9301      	str	r3, [sp, #4]
   10c58:	4b1e      	ldr	r3, [pc, #120]	; (10cd4 <radio_rx_dequeue+0x140>)
   10c5a:	9300      	str	r3, [sp, #0]
   10c5c:	4a1e      	ldr	r2, [pc, #120]	; (10cd8 <radio_rx_dequeue+0x144>)
   10c5e:	4b1f      	ldr	r3, [pc, #124]	; (10cdc <radio_rx_dequeue+0x148>)
   10c60:	491f      	ldr	r1, [pc, #124]	; (10ce0 <radio_rx_dequeue+0x14c>)
   10c62:	4823      	ldr	r0, [pc, #140]	; (10cf0 <radio_rx_dequeue+0x15c>)
   10c64:	e7cd      	b.n	10c02 <radio_rx_dequeue+0x6e>
			_radio.advertiser.is_enabled = 0;
   10c66:	f36f 0300 	bfc	r3, #0, #1
   10c6a:	f886 30a4 	strb.w	r3, [r6, #164]	; 0xa4
		} else {
			LL_ASSERT(_radio.scanner.is_enabled);
			_radio.scanner.is_enabled = 0;
		}

		if (conn) {
   10c6e:	b1ed      	cbz	r5, 10cac <radio_rx_dequeue+0x118>
			struct radio_pdu_node_rx *node_rx = (void *)
				&conn->llcp_terminate.radio_pdu_node_rx;

			mem_release(node_rx->hdr.onion.link,
   10c70:	f506 71e2 	add.w	r1, r6, #452	; 0x1c4
   10c74:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
   10c78:	f7f8 fe01 	bl	987e <mem_release>
				    &_radio.link_rx_free);
			mem_release(conn, &_radio.conn_free);
   10c7c:	f506 71c4 	add.w	r1, r6, #392	; 0x188
   10c80:	4628      	mov	r0, r5
   10c82:	f7f8 fdfc 	bl	987e <mem_release>
   10c86:	e011      	b.n	10cac <radio_rx_dequeue+0x118>
			}

			LL_ASSERT(_radio.advertiser.is_enabled);
			_radio.advertiser.is_enabled = 0;
		} else {
			LL_ASSERT(_radio.scanner.is_enabled);
   10c88:	f894 315c 	ldrb.w	r3, [r4, #348]	; 0x15c
   10c8c:	07d9      	lsls	r1, r3, #31
   10c8e:	d408      	bmi.n	10ca2 <radio_rx_dequeue+0x10e>
   10c90:	4b0f      	ldr	r3, [pc, #60]	; (10cd0 <radio_rx_dequeue+0x13c>)
   10c92:	9301      	str	r3, [sp, #4]
   10c94:	4b0f      	ldr	r3, [pc, #60]	; (10cd4 <radio_rx_dequeue+0x140>)
   10c96:	9300      	str	r3, [sp, #0]
   10c98:	4a0f      	ldr	r2, [pc, #60]	; (10cd8 <radio_rx_dequeue+0x144>)
   10c9a:	4b10      	ldr	r3, [pc, #64]	; (10cdc <radio_rx_dequeue+0x148>)
   10c9c:	4910      	ldr	r1, [pc, #64]	; (10ce0 <radio_rx_dequeue+0x14c>)
   10c9e:	4815      	ldr	r0, [pc, #84]	; (10cf4 <radio_rx_dequeue+0x160>)
   10ca0:	e7af      	b.n	10c02 <radio_rx_dequeue+0x6e>
			_radio.scanner.is_enabled = 0;
   10ca2:	f362 0300 	bfi	r3, r2, #0, #1
   10ca6:	4a09      	ldr	r2, [pc, #36]	; (10ccc <radio_rx_dequeue+0x138>)
   10ca8:	f882 315c 	strb.w	r3, [r2, #348]	; 0x15c
			mem_release(node_rx->hdr.onion.link,
				    &_radio.link_rx_free);
			mem_release(conn, &_radio.conn_free);
		}

		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
   10cac:	f894 015c 	ldrb.w	r0, [r4, #348]	; 0x15c
		     _radio.advertiser.is_enabled;
   10cb0:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4

		if (!bm) {
   10cb4:	f000 0001 	and.w	r0, r0, #1
				    &_radio.link_rx_free);
			mem_release(conn, &_radio.conn_free);
		}

		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
		     _radio.advertiser.is_enabled;
   10cb8:	f3c3 0300 	ubfx	r3, r3, #0, #1

		if (!bm) {
   10cbc:	ea43 0040 	orr.w	r0, r3, r0, lsl #1
   10cc0:	b240      	sxtb	r0, r0
   10cc2:	b908      	cbnz	r0, 10cc8 <radio_rx_dequeue+0x134>
			ll_adv_scan_state_cb(0);
   10cc4:	f7ff fda2 	bl	1080c <ll_adv_scan_state_cb>
		}
	}
}
   10cc8:	b004      	add	sp, #16
   10cca:	bd70      	pop	{r4, r5, r6, pc}
   10ccc:	20001470 	.word	0x20001470
   10cd0:	00013df4 	.word	0x00013df4
   10cd4:	00013df9 	.word	0x00013df9
   10cd8:	00013db4 	.word	0x00013db4
   10cdc:	000168e2 	.word	0x000168e2
   10ce0:	00013dbb 	.word	0x00013dbb
   10ce4:	00015243 	.word	0x00015243
   10ce8:	000158f9 	.word	0x000158f9
   10cec:	00014409 	.word	0x00014409
   10cf0:	00015dd8 	.word	0x00015dd8
   10cf4:	00015e16 	.word	0x00015e16

00010cf8 <rtc0_nrf5_isr>:
	ISR_DIRECT_PM();
	return 1;
}

static void rtc0_nrf5_isr(void *arg)
{
   10cf8:	b538      	push	{r3, r4, r5, lr}
	u32_t compare0, compare1;

	/* store interested events */
	compare0 = NRF_RTC0->EVENTS_COMPARE[0];
   10cfa:	4b0c      	ldr	r3, [pc, #48]	; (10d2c <rtc0_nrf5_isr+0x34>)
   10cfc:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
	compare1 = NRF_RTC0->EVENTS_COMPARE[1];
   10d00:	f8d3 5144 	ldr.w	r5, [r3, #324]	; 0x144
   10d04:	461c      	mov	r4, r3

	/* On compare0 run ticker worker instance0 */
	if (compare0) {
   10d06:	b122      	cbz	r2, 10d12 <rtc0_nrf5_isr+0x1a>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
   10d08:	2000      	movs	r0, #0
   10d0a:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140

		ticker_trigger(0);
   10d0e:	f7fa f835 	bl	ad7c <ticker_trigger>
	}

	/* On compare1 run ticker worker instance1 */
	if (compare1) {
   10d12:	b12d      	cbz	r5, 10d20 <rtc0_nrf5_isr+0x28>
		NRF_RTC0->EVENTS_COMPARE[1] = 0;
   10d14:	2300      	movs	r3, #0
   10d16:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144

		ticker_trigger(1);
   10d1a:	2001      	movs	r0, #1
   10d1c:	f7fa f82e 	bl	ad7c <ticker_trigger>
	}

	mayfly_run(MAYFLY_CALL_ID_0);
   10d20:	2000      	movs	r0, #0
}
   10d22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		NRF_RTC0->EVENTS_COMPARE[1] = 0;

		ticker_trigger(1);
	}

	mayfly_run(MAYFLY_CALL_ID_0);
   10d26:	f7f8 bce1 	b.w	96ec <mayfly_run>
   10d2a:	bf00      	nop
   10d2c:	4000b000 	.word	0x4000b000

00010d30 <swi4_nrf5_isr>:
	isr_rand(arg);
}

static void swi4_nrf5_isr(void *arg)
{
	mayfly_run(MAYFLY_CALL_ID_1);
   10d30:	2001      	movs	r0, #1
   10d32:	f7f8 bcdb 	b.w	96ec <mayfly_run>

00010d36 <rng_nrf5_isr>:
	mayfly_run(MAYFLY_CALL_ID_0);
}

static void rng_nrf5_isr(void *arg)
{
	isr_rand(arg);
   10d36:	f7f9 ba43 	b.w	a1c0 <isr_rand>

00010d3a <radio_nrf5_isr>:
void radio_event_callback(void)
{
	k_sem_give(sem_recv);
}

ISR_DIRECT_DECLARE(radio_nrf5_isr)
   10d3a:	4668      	mov	r0, sp
   10d3c:	f020 0107 	bic.w	r1, r0, #7
   10d40:	468d      	mov	sp, r1
   10d42:	b501      	push	{r0, lr}
{
	isr_radio();
   10d44:	f7f8 feac 	bl	9aa0 <isr_radio>

	ISR_DIRECT_PM();
   10d48:	f001 fa40 	bl	121cc <_arch_isr_direct_pm>
extern void _IntExit(void);

static inline void _arch_isr_direct_footer(int maybe_swap)
{
	if (maybe_swap) {
		_IntExit();
   10d4c:	f001 f838 	bl	11dc0 <_IntExit>
void radio_event_callback(void)
{
	k_sem_give(sem_recv);
}

ISR_DIRECT_DECLARE(radio_nrf5_isr)
   10d50:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   10d54:	4685      	mov	sp, r0
   10d56:	4770      	bx	lr

00010d58 <mayfly_enable_cb>:

void mayfly_enable_cb(u8_t caller_id, u8_t callee_id, u8_t enable)
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_1);
   10d58:	2901      	cmp	r1, #1
	u8_t pub_addr[BDADDR_SIZE];
	u8_t rnd_addr[BDADDR_SIZE];
} _ll_context;

void mayfly_enable_cb(u8_t caller_id, u8_t callee_id, u8_t enable)
{
   10d5a:	b507      	push	{r0, r1, r2, lr}
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_1);
   10d5c:	d00f      	beq.n	10d7e <mayfly_enable_cb+0x26>
   10d5e:	4b0e      	ldr	r3, [pc, #56]	; (10d98 <mayfly_enable_cb+0x40>)
   10d60:	9301      	str	r3, [sp, #4]
   10d62:	4b0e      	ldr	r3, [pc, #56]	; (10d9c <mayfly_enable_cb+0x44>)
   10d64:	9300      	str	r3, [sp, #0]
   10d66:	4a0e      	ldr	r2, [pc, #56]	; (10da0 <mayfly_enable_cb+0x48>)
   10d68:	4b0e      	ldr	r3, [pc, #56]	; (10da4 <mayfly_enable_cb+0x4c>)
   10d6a:	490f      	ldr	r1, [pc, #60]	; (10da8 <mayfly_enable_cb+0x50>)
   10d6c:	480f      	ldr	r0, [pc, #60]	; (10dac <mayfly_enable_cb+0x54>)
   10d6e:	f7f0 fb87 	bl	1480 <printk>
   10d72:	4040      	eors	r0, r0
   10d74:	f380 8811 	msr	BASEPRI, r0
   10d78:	f04f 0004 	mov.w	r0, #4
   10d7c:	df02      	svc	2

	if (enable) {
		irq_enable(SWI4_IRQn);
   10d7e:	2018      	movs	r0, #24
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_1);

	if (enable) {
   10d80:	b122      	cbz	r2, 10d8c <mayfly_enable_cb+0x34>
		irq_enable(SWI4_IRQn);
	} else {
		irq_disable(SWI4_IRQn);
	}
}
   10d82:	b003      	add	sp, #12
   10d84:	f85d eb04 	ldr.w	lr, [sp], #4
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_1);

	if (enable) {
		irq_enable(SWI4_IRQn);
   10d88:	f001 b9dc 	b.w	12144 <_arch_irq_enable>
	} else {
		irq_disable(SWI4_IRQn);
	}
}
   10d8c:	b003      	add	sp, #12
   10d8e:	f85d eb04 	ldr.w	lr, [sp], #4
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_1);

	if (enable) {
		irq_enable(SWI4_IRQn);
	} else {
		irq_disable(SWI4_IRQn);
   10d92:	f001 b9e5 	b.w	12160 <_arch_irq_disable>
   10d96:	bf00      	nop
   10d98:	00013df4 	.word	0x00013df4
   10d9c:	00013df9 	.word	0x00013df9
   10da0:	00013db4 	.word	0x00013db4
   10da4:	00016bc9 	.word	0x00016bc9
   10da8:	00013dbb 	.word	0x00013dbb
   10dac:	00015e51 	.word	0x00015e51

00010db0 <mayfly_is_enabled>:
	}
}

u32_t mayfly_is_enabled(u8_t caller_id, u8_t callee_id)
{
   10db0:	b507      	push	{r0, r1, r2, lr}
	(void)caller_id;

	if (callee_id == MAYFLY_CALL_ID_0) {
   10db2:	b909      	cbnz	r1, 10db8 <mayfly_is_enabled+0x8>
		return irq_is_enabled(RTC0_IRQn);
   10db4:	200b      	movs	r0, #11
   10db6:	e002      	b.n	10dbe <mayfly_is_enabled+0xe>
	} else if (callee_id == MAYFLY_CALL_ID_1) {
   10db8:	2901      	cmp	r1, #1
   10dba:	d105      	bne.n	10dc8 <mayfly_is_enabled+0x18>
		return irq_is_enabled(SWI4_IRQn);
   10dbc:	2018      	movs	r0, #24
	}

	LL_ASSERT(0);

	return 0;
}
   10dbe:	b003      	add	sp, #12
   10dc0:	f85d eb04 	ldr.w	lr, [sp], #4
	(void)caller_id;

	if (callee_id == MAYFLY_CALL_ID_0) {
		return irq_is_enabled(RTC0_IRQn);
	} else if (callee_id == MAYFLY_CALL_ID_1) {
		return irq_is_enabled(SWI4_IRQn);
   10dc4:	f001 b9da 	b.w	1217c <_arch_irq_is_enabled>
	}

	LL_ASSERT(0);
   10dc8:	4b07      	ldr	r3, [pc, #28]	; (10de8 <mayfly_is_enabled+0x38>)
   10dca:	9301      	str	r3, [sp, #4]
   10dcc:	4b07      	ldr	r3, [pc, #28]	; (10dec <mayfly_is_enabled+0x3c>)
   10dce:	9300      	str	r3, [sp, #0]
   10dd0:	4a07      	ldr	r2, [pc, #28]	; (10df0 <mayfly_is_enabled+0x40>)
   10dd2:	4b08      	ldr	r3, [pc, #32]	; (10df4 <mayfly_is_enabled+0x44>)
   10dd4:	4908      	ldr	r1, [pc, #32]	; (10df8 <mayfly_is_enabled+0x48>)
   10dd6:	4809      	ldr	r0, [pc, #36]	; (10dfc <mayfly_is_enabled+0x4c>)
   10dd8:	f7f0 fb52 	bl	1480 <printk>
   10ddc:	4040      	eors	r0, r0
   10dde:	f380 8811 	msr	BASEPRI, r0
   10de2:	f04f 0004 	mov.w	r0, #4
   10de6:	df02      	svc	2
   10de8:	00013df4 	.word	0x00013df4
   10dec:	00013df9 	.word	0x00013df9
   10df0:	00013db4 	.word	0x00013db4
   10df4:	00016baf 	.word	0x00016baf
   10df8:	00013dbb 	.word	0x00013dbb
   10dfc:	00014409 	.word	0x00014409

00010e00 <mayfly_prio_is_equal>:

u32_t mayfly_prio_is_equal(u8_t caller_id, u8_t callee_id)
{
	return (caller_id == callee_id) ||
	       ((caller_id == MAYFLY_CALL_ID_0) &&
		(callee_id == MAYFLY_CALL_ID_1)) ||
   10e00:	4288      	cmp	r0, r1
   10e02:	d00a      	beq.n	10e1a <mayfly_prio_is_equal+0x1a>
	return 0;
}

u32_t mayfly_prio_is_equal(u8_t caller_id, u8_t callee_id)
{
	return (caller_id == callee_id) ||
   10e04:	b918      	cbnz	r0, 10e0e <mayfly_prio_is_equal+0xe>
	       ((caller_id == MAYFLY_CALL_ID_0) &&
		(callee_id == MAYFLY_CALL_ID_1)) ||
   10e06:	1e4b      	subs	r3, r1, #1
   10e08:	4258      	negs	r0, r3
   10e0a:	4158      	adcs	r0, r3
   10e0c:	4770      	bx	lr
   10e0e:	2801      	cmp	r0, #1
   10e10:	d105      	bne.n	10e1e <mayfly_prio_is_equal+0x1e>
   10e12:	fab1 f081 	clz	r0, r1
   10e16:	0940      	lsrs	r0, r0, #5
   10e18:	4770      	bx	lr
   10e1a:	2001      	movs	r0, #1
   10e1c:	4770      	bx	lr
   10e1e:	2000      	movs	r0, #0
	       ((caller_id == MAYFLY_CALL_ID_1) &&
		(callee_id == MAYFLY_CALL_ID_0));
}
   10e20:	4770      	bx	lr
	...

00010e24 <mayfly_pend>:

void mayfly_pend(u8_t caller_id, u8_t callee_id)
{
   10e24:	b507      	push	{r0, r1, r2, lr}
   10e26:	4b0f      	ldr	r3, [pc, #60]	; (10e64 <mayfly_pend+0x40>)
	(void)caller_id;

	switch (callee_id) {
   10e28:	b121      	cbz	r1, 10e34 <mayfly_pend+0x10>
   10e2a:	2901      	cmp	r1, #1
   10e2c:	d109      	bne.n	10e42 <mayfly_pend+0x1e>
  \details Sets the pending bit of an external interrupt.
  \param [in]      IRQn  Interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   10e2e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   10e32:	e001      	b.n	10e38 <mayfly_pend+0x14>
   10e34:	f44f 6200 	mov.w	r2, #2048	; 0x800
   10e38:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	case MAYFLY_CALL_ID_PROGRAM:
	default:
		LL_ASSERT(0);
		break;
	}
}
   10e3c:	b003      	add	sp, #12
   10e3e:	f85d fb04 	ldr.w	pc, [sp], #4
		NVIC_SetPendingIRQ(SWI4_IRQn);
		break;

	case MAYFLY_CALL_ID_PROGRAM:
	default:
		LL_ASSERT(0);
   10e42:	4b09      	ldr	r3, [pc, #36]	; (10e68 <mayfly_pend+0x44>)
   10e44:	9301      	str	r3, [sp, #4]
   10e46:	4b09      	ldr	r3, [pc, #36]	; (10e6c <mayfly_pend+0x48>)
   10e48:	9300      	str	r3, [sp, #0]
   10e4a:	4a09      	ldr	r2, [pc, #36]	; (10e70 <mayfly_pend+0x4c>)
   10e4c:	4b09      	ldr	r3, [pc, #36]	; (10e74 <mayfly_pend+0x50>)
   10e4e:	490a      	ldr	r1, [pc, #40]	; (10e78 <mayfly_pend+0x54>)
   10e50:	480a      	ldr	r0, [pc, #40]	; (10e7c <mayfly_pend+0x58>)
   10e52:	f7f0 fb15 	bl	1480 <printk>
   10e56:	4040      	eors	r0, r0
   10e58:	f380 8811 	msr	BASEPRI, r0
   10e5c:	f04f 0004 	mov.w	r0, #4
   10e60:	df02      	svc	2
   10e62:	bf00      	nop
   10e64:	e000e100 	.word	0xe000e100
   10e68:	00013df4 	.word	0x00013df4
   10e6c:	00013df9 	.word	0x00013df9
   10e70:	00013db4 	.word	0x00013db4
   10e74:	00016bda 	.word	0x00016bda
   10e78:	00013dbb 	.word	0x00013dbb
   10e7c:	00014409 	.word	0x00014409

00010e80 <radio_active_callback>:
		break;
	}
}

void radio_active_callback(u8_t active)
{
   10e80:	4770      	bx	lr
	...

00010e84 <radio_event_callback>:
}

void radio_event_callback(void)
{
	k_sem_give(sem_recv);
   10e84:	4b01      	ldr	r3, [pc, #4]	; (10e8c <radio_event_callback+0x8>)
   10e86:	6818      	ldr	r0, [r3, #0]
   10e88:	f002 b9b2 	b.w	131f0 <k_sem_give>
   10e8c:	20001ad8 	.word	0x20001ad8

00010e90 <ll_init>:
{
	mayfly_run(MAYFLY_CALL_ID_1);
}

int ll_init(struct k_sem *sem_rx)
{
   10e90:	b570      	push	{r4, r5, r6, lr}
	struct device *clk_k32;
	struct device *clk_m16;
	u32_t err;

	sem_recv = sem_rx;
   10e92:	4b39      	ldr	r3, [pc, #228]	; (10f78 <ll_init+0xe8>)
{
	mayfly_run(MAYFLY_CALL_ID_1);
}

int ll_init(struct k_sem *sem_rx)
{
   10e94:	b086      	sub	sp, #24
	struct device *clk_k32;
	struct device *clk_m16;
	u32_t err;

	sem_recv = sem_rx;
   10e96:	6018      	str	r0, [r3, #0]

	/* TODO: bind and use RNG driver */
	rand_init(_rand_context, sizeof(_rand_context));
   10e98:	2108      	movs	r1, #8
   10e9a:	4838      	ldr	r0, [pc, #224]	; (10f7c <ll_init+0xec>)
   10e9c:	f7f9 f928 	bl	a0f0 <rand_init>

	clk_k32 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
   10ea0:	4837      	ldr	r0, [pc, #220]	; (10f80 <ll_init+0xf0>)
   10ea2:	f001 fb09 	bl	124b8 <device_get_binding>
	if (!clk_k32) {
   10ea6:	b910      	cbnz	r0, 10eae <ll_init+0x1e>
		return -ENODEV;
   10ea8:	f06f 0012 	mvn.w	r0, #18
   10eac:	e061      	b.n	10f72 <ll_init+0xe2>
static inline int clock_control_on(struct device *dev,
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->on(dev, sys);
   10eae:	6843      	ldr	r3, [r0, #4]
   10eb0:	2101      	movs	r1, #1
   10eb2:	681b      	ldr	r3, [r3, #0]
   10eb4:	4798      	blx	r3
	}

	clock_control_on(clk_k32, (void *)CLOCK_CONTROL_NRF5_K32SRC);

	/* TODO: bind and use counter driver */
	cntr_init();
   10eb6:	f7f8 fd4f 	bl	9958 <cntr_init>

	mayfly_init();
   10eba:	f7f8 fb7d 	bl	95b8 <mayfly_init>

	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
   10ebe:	4b31      	ldr	r3, [pc, #196]	; (10f84 <ll_init+0xf4>)
	_ticker_users[MAYFLY_CALL_ID_1][0] = RADIO_TICKER_USER_JOB_OPS;
   10ec0:	2203      	movs	r2, #3
   10ec2:	721a      	strb	r2, [r3, #8]
	/* TODO: bind and use counter driver */
	cntr_init();

	mayfly_init();

	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
   10ec4:	2108      	movs	r1, #8
	_ticker_users[MAYFLY_CALL_ID_1][0] = RADIO_TICKER_USER_JOB_OPS;
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
   10ec6:	2000      	movs	r0, #0
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = RADIO_TICKER_USER_APP_OPS;

	ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO, RADIO_TICKER_NODES,
   10ec8:	4a2f      	ldr	r2, [pc, #188]	; (10f88 <ll_init+0xf8>)
	/* TODO: bind and use counter driver */
	cntr_init();

	mayfly_init();

	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
   10eca:	7019      	strb	r1, [r3, #0]
	_ticker_users[MAYFLY_CALL_ID_1][0] = RADIO_TICKER_USER_JOB_OPS;
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = RADIO_TICKER_USER_APP_OPS;
   10ecc:	2402      	movs	r4, #2

	ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO, RADIO_TICKER_NODES,
   10ece:	250d      	movs	r5, #13

	mayfly_init();

	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
	_ticker_users[MAYFLY_CALL_ID_1][0] = RADIO_TICKER_USER_JOB_OPS;
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
   10ed0:	7418      	strb	r0, [r3, #16]
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = RADIO_TICKER_USER_APP_OPS;
   10ed2:	761c      	strb	r4, [r3, #24]

	ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO, RADIO_TICKER_NODES,
   10ed4:	9202      	str	r2, [sp, #8]
   10ed6:	e88d 0028 	stmia.w	sp, {r3, r5}
   10eda:	4a2c      	ldr	r2, [pc, #176]	; (10f8c <ll_init+0xfc>)
   10edc:	2304      	movs	r3, #4
   10ede:	f7f9 fef7 	bl	acd0 <ticker_init>
		    &_ticker_nodes[0], MAYFLY_CALLER_COUNT, &_ticker_users[0],
		    RADIO_TICKER_USER_OPS, &_ticker_user_ops[0]);

	clk_m16 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_M16SRC_DRV_NAME);
   10ee2:	482b      	ldr	r0, [pc, #172]	; (10f90 <ll_init+0x100>)
   10ee4:	f001 fae8 	bl	124b8 <device_get_binding>
	if (!clk_m16) {
   10ee8:	2800      	cmp	r0, #0
   10eea:	d0dd      	beq.n	10ea8 <ll_init+0x18>
		return -ENODEV;
	}

	err = radio_init(clk_m16, CLOCK_CONTROL_NRF5_K32SRC_ACCURACY,
   10eec:	4b29      	ldr	r3, [pc, #164]	; (10f94 <ll_init+0x104>)
   10eee:	9303      	str	r3, [sp, #12]
   10ef0:	231b      	movs	r3, #27
   10ef2:	9302      	str	r3, [sp, #8]
   10ef4:	9301      	str	r3, [sp, #4]
   10ef6:	f44f 7644 	mov.w	r6, #784	; 0x310
   10efa:	2301      	movs	r3, #1
   10efc:	9400      	str	r4, [sp, #0]
   10efe:	9604      	str	r6, [sp, #16]
   10f00:	461a      	mov	r2, r3
   10f02:	2107      	movs	r1, #7
   10f04:	f7ff f8da 	bl	100bc <radio_init>
			 RADIO_CONNECTION_CONTEXT_MAX,
			 RADIO_PACKET_COUNT_RX_MAX,
			 RADIO_PACKET_COUNT_TX_MAX,
			 RADIO_LL_LENGTH_OCTETS_RX_MAX,
			 RADIO_PACKET_TX_DATA_SIZE, &_radio[0], sizeof(_radio));
	if (err) {
   10f08:	4604      	mov	r4, r0
   10f0a:	b170      	cbz	r0, 10f2a <ll_init+0x9a>
		BT_ERR("Required RAM size: %d, supplied: %u.", err,
   10f0c:	4b22      	ldr	r3, [pc, #136]	; (10f98 <ll_init+0x108>)
   10f0e:	9303      	str	r3, [sp, #12]
   10f10:	4b22      	ldr	r3, [pc, #136]	; (10f9c <ll_init+0x10c>)
   10f12:	9001      	str	r0, [sp, #4]
   10f14:	9300      	str	r3, [sp, #0]
   10f16:	9602      	str	r6, [sp, #8]
   10f18:	4b21      	ldr	r3, [pc, #132]	; (10fa0 <ll_init+0x110>)
   10f1a:	4a22      	ldr	r2, [pc, #136]	; (10fa4 <ll_init+0x114>)
   10f1c:	4922      	ldr	r1, [pc, #136]	; (10fa8 <ll_init+0x118>)
   10f1e:	4823      	ldr	r0, [pc, #140]	; (10fac <ll_init+0x11c>)
   10f20:	f7f0 faae 	bl	1480 <printk>
		       sizeof(_radio));
		return -ENOMEM;
   10f24:	f06f 000b 	mvn.w	r0, #11
   10f28:	e023      	b.n	10f72 <ll_init+0xe2>
	}

	ll_filter_reset(true);
   10f2a:	2001      	movs	r0, #1
   10f2c:	f000 fb92 	bl	11654 <ll_filter_reset>

	IRQ_DIRECT_CONNECT(NRF5_IRQ_RADIO_IRQn,
   10f30:	4622      	mov	r2, r4
   10f32:	4621      	mov	r1, r4
   10f34:	2001      	movs	r0, #1
   10f36:	f001 f92f 	bl	12198 <_irq_priority_set>
			   CONFIG_BLUETOOTH_CONTROLLER_WORKER_PRIO,
			   radio_nrf5_isr, 0);
	IRQ_CONNECT(NRF5_IRQ_RTC0_IRQn, CONFIG_BLUETOOTH_CONTROLLER_WORKER_PRIO,
   10f3a:	4622      	mov	r2, r4
   10f3c:	4621      	mov	r1, r4
   10f3e:	200b      	movs	r0, #11
   10f40:	f001 f92a 	bl	12198 <_irq_priority_set>
		    rtc0_nrf5_isr, NULL, 0);
	IRQ_CONNECT(NRF5_IRQ_SWI4_IRQn, CONFIG_BLUETOOTH_CONTROLLER_JOB_PRIO,
   10f44:	4622      	mov	r2, r4
   10f46:	4621      	mov	r1, r4
   10f48:	2018      	movs	r0, #24
   10f4a:	f001 f925 	bl	12198 <_irq_priority_set>
		    swi4_nrf5_isr, NULL, 0);
	IRQ_CONNECT(NRF5_IRQ_RNG_IRQn, 1, rng_nrf5_isr, NULL, 0);
   10f4e:	4622      	mov	r2, r4
   10f50:	2101      	movs	r1, #1
   10f52:	4628      	mov	r0, r5
   10f54:	f001 f920 	bl	12198 <_irq_priority_set>

	irq_enable(NRF5_IRQ_RADIO_IRQn);
   10f58:	2001      	movs	r0, #1
   10f5a:	f001 f8f3 	bl	12144 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_RTC0_IRQn);
   10f5e:	200b      	movs	r0, #11
   10f60:	f001 f8f0 	bl	12144 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_SWI4_IRQn);
   10f64:	2018      	movs	r0, #24
   10f66:	f001 f8ed 	bl	12144 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_RNG_IRQn);
   10f6a:	4628      	mov	r0, r5
   10f6c:	f001 f8ea 	bl	12144 <_arch_irq_enable>

	return 0;
   10f70:	4620      	mov	r0, r4
}
   10f72:	b006      	add	sp, #24
   10f74:	bd70      	pop	{r4, r5, r6, pc}
   10f76:	bf00      	nop
   10f78:	20001ad8 	.word	0x20001ad8
   10f7c:	20001d24 	.word	0x20001d24
   10f80:	00013baa 	.word	0x00013baa
   10f84:	20001ab8 	.word	0x20001ab8
   10f88:	20001ae8 	.word	0x20001ae8
   10f8c:	20001998 	.word	0x20001998
   10f90:	00013bbf 	.word	0x00013bbf
   10f94:	20001678 	.word	0x20001678
   10f98:	00013df4 	.word	0x00013df4
   10f9c:	00013df9 	.word	0x00013df9
   10fa0:	00016bc1 	.word	0x00016bc1
   10fa4:	00013db4 	.word	0x00013db4
   10fa8:	00013dbb 	.word	0x00013dbb
   10fac:	00015e81 	.word	0x00015e81

00010fb0 <ll_addr_get>:

u8_t *ll_addr_get(u8_t addr_type, u8_t *bdaddr)
{
   10fb0:	b508      	push	{r3, lr}
   10fb2:	460b      	mov	r3, r1
	if (addr_type) {
   10fb4:	b130      	cbz	r0, 10fc4 <ll_addr_get+0x14>
		if (bdaddr) {
   10fb6:	b161      	cbz	r1, 10fd2 <ll_addr_get+0x22>
			memcpy(bdaddr, _ll_context.rnd_addr, BDADDR_SIZE);
   10fb8:	2206      	movs	r2, #6
   10fba:	4908      	ldr	r1, [pc, #32]	; (10fdc <ll_addr_get+0x2c>)
   10fbc:	4618      	mov	r0, r3
   10fbe:	f7f0 f868 	bl	1092 <memcpy>
   10fc2:	e006      	b.n	10fd2 <ll_addr_get+0x22>
		}

		return _ll_context.rnd_addr;
	}

	if (bdaddr) {
   10fc4:	b139      	cbz	r1, 10fd6 <ll_addr_get+0x26>
		memcpy(bdaddr, _ll_context.pub_addr, BDADDR_SIZE);
   10fc6:	2206      	movs	r2, #6
   10fc8:	4905      	ldr	r1, [pc, #20]	; (10fe0 <ll_addr_get+0x30>)
   10fca:	4618      	mov	r0, r3
   10fcc:	f7f0 f861 	bl	1092 <memcpy>
   10fd0:	e001      	b.n	10fd6 <ll_addr_get+0x26>
	if (addr_type) {
		if (bdaddr) {
			memcpy(bdaddr, _ll_context.rnd_addr, BDADDR_SIZE);
		}

		return _ll_context.rnd_addr;
   10fd2:	4802      	ldr	r0, [pc, #8]	; (10fdc <ll_addr_get+0x2c>)
   10fd4:	bd08      	pop	{r3, pc}

	if (bdaddr) {
		memcpy(bdaddr, _ll_context.pub_addr, BDADDR_SIZE);
	}

	return _ll_context.pub_addr;
   10fd6:	4802      	ldr	r0, [pc, #8]	; (10fe0 <ll_addr_get+0x30>)
}
   10fd8:	bd08      	pop	{r3, pc}
   10fda:	bf00      	nop
   10fdc:	20001ae2 	.word	0x20001ae2
   10fe0:	20001adc 	.word	0x20001adc

00010fe4 <ll_addr_set>:

void ll_addr_set(u8_t addr_type, u8_t const *const bdaddr)
{
	if (addr_type) {
		memcpy(_ll_context.rnd_addr, bdaddr, BDADDR_SIZE);
   10fe4:	2206      	movs	r2, #6
	return _ll_context.pub_addr;
}

void ll_addr_set(u8_t addr_type, u8_t const *const bdaddr)
{
	if (addr_type) {
   10fe6:	b108      	cbz	r0, 10fec <ll_addr_set+0x8>
		memcpy(_ll_context.rnd_addr, bdaddr, BDADDR_SIZE);
   10fe8:	4802      	ldr	r0, [pc, #8]	; (10ff4 <ll_addr_set+0x10>)
   10fea:	e000      	b.n	10fee <ll_addr_set+0xa>
	} else {
		memcpy(_ll_context.pub_addr, bdaddr, BDADDR_SIZE);
   10fec:	4802      	ldr	r0, [pc, #8]	; (10ff8 <ll_addr_set+0x14>)
   10fee:	f7f0 b850 	b.w	1092 <memcpy>
   10ff2:	bf00      	nop
   10ff4:	20001ae2 	.word	0x20001ae2
   10ff8:	20001adc 	.word	0x20001adc

00010ffc <rl_access_check.constprop.1>:
	for (int i = 0; i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE; i++) {
		rl[i].taken = 0;
	}
}

static int rl_access_check(bool check_ar)
   10ffc:	b508      	push	{r3, lr}
		if (!rl_enable) {
			return -1;
		}
	}

	return (radio_adv_is_enabled() || radio_scan_is_enabled()) ? 0 : 1;
   10ffe:	f7ff f92b 	bl	10258 <radio_adv_is_enabled>
   11002:	b928      	cbnz	r0, 11010 <rl_access_check.constprop.1+0x14>
   11004:	f7ff f93c 	bl	10280 <radio_scan_is_enabled>
   11008:	fab0 f080 	clz	r0, r0
   1100c:	0940      	lsrs	r0, r0, #5
   1100e:	bd08      	pop	{r3, pc}
   11010:	2000      	movs	r0, #0
}
   11012:	bd08      	pop	{r3, pc}

00011014 <ctrl_filter_get>:


struct ll_filter *ctrl_filter_get(void)
{
	return &wl;
}
   11014:	4800      	ldr	r0, [pc, #0]	; (11018 <ctrl_filter_get+0x4>)
   11016:	4770      	bx	lr
   11018:	20001dad 	.word	0x20001dad

0001101c <ll_wl_size_get>:
   1101c:	2008      	movs	r0, #8
   1101e:	4770      	bx	lr

00011020 <ll_wl_clear>:
{
	return WL_SIZE;
}

u32_t ll_wl_clear(void)
{
   11020:	b508      	push	{r3, lr}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   11022:	f7ff f921 	bl	10268 <radio_adv_filter_pol_get>
   11026:	b108      	cbz	r0, 1102c <ll_wl_clear+0xc>
		return BT_HCI_ERR_CMD_DISALLOWED;
   11028:	200c      	movs	r0, #12
   1102a:	bd08      	pop	{r3, pc}
	return WL_SIZE;
}

u32_t ll_wl_clear(void)
{
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   1102c:	f7ff f930 	bl	10290 <radio_scan_filter_pol_get>
   11030:	f010 0001 	ands.w	r0, r0, #1
   11034:	d1f8      	bne.n	11028 <ll_wl_clear+0x8>
struct k_delayed_work rpa_work;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */

static void filter_clear(struct ll_filter *filter)
{
	filter->enable_bitmask = 0;
   11036:	4b03      	ldr	r3, [pc, #12]	; (11044 <ll_wl_clear+0x24>)
   11038:	7018      	strb	r0, [r3, #0]
	filter->addr_type_bitmask = 0;
   1103a:	7058      	strb	r0, [r3, #1]
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	filter_clear(&wl);
	wl_anon = 0;
   1103c:	4b02      	ldr	r3, [pc, #8]	; (11048 <ll_wl_clear+0x28>)
   1103e:	7018      	strb	r0, [r3, #0]

	return 0;
}
   11040:	bd08      	pop	{r3, pc}
   11042:	bf00      	nop
   11044:	20001dad 	.word	0x20001dad
   11048:	20002120 	.word	0x20002120

0001104c <ll_wl_add>:

u32_t ll_wl_add(bt_addr_le_t *addr)
{
   1104c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1104e:	4604      	mov	r4, r0

	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   11050:	f7ff f90a 	bl	10268 <radio_adv_filter_pol_get>
   11054:	b108      	cbz	r0, 1105a <ll_wl_add+0xe>
		return BT_HCI_ERR_CMD_DISALLOWED;
   11056:	250c      	movs	r5, #12
   11058:	e02a      	b.n	110b0 <ll_wl_add+0x64>
}

u32_t ll_wl_add(bt_addr_le_t *addr)
{

	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   1105a:	f7ff f919 	bl	10290 <radio_scan_filter_pol_get>
   1105e:	f010 0501 	ands.w	r5, r0, #1
   11062:	d1f8      	bne.n	11056 <ll_wl_add+0xa>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	if (addr->type == ADDR_TYPE_ANON) {
   11064:	7822      	ldrb	r2, [r4, #0]
   11066:	2aff      	cmp	r2, #255	; 0xff
   11068:	d103      	bne.n	11072 <ll_wl_add+0x26>
		wl_anon = 1;
   1106a:	4b12      	ldr	r3, [pc, #72]	; (110b4 <ll_wl_add+0x68>)
   1106c:	2201      	movs	r2, #1
   1106e:	701a      	strb	r2, [r3, #0]
		return 0;
   11070:	e01e      	b.n	110b0 <ll_wl_add+0x64>

static u32_t filter_add(struct ll_filter *filter, u8_t addr_type, u8_t *bdaddr)
{
	u8_t index;

	if (filter->enable_bitmask == 0xFF) {
   11072:	4811      	ldr	r0, [pc, #68]	; (110b8 <ll_wl_add+0x6c>)
   11074:	7801      	ldrb	r1, [r0, #0]
   11076:	29ff      	cmp	r1, #255	; 0xff
   11078:	d019      	beq.n	110ae <ll_wl_add+0x62>
   1107a:	462e      	mov	r6, r5
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
	}

	for (index = 0;
	     (filter->enable_bitmask & (1 << index));
   1107c:	b2f3      	uxtb	r3, r6

	if (filter->enable_bitmask == 0xFF) {
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
	}

	for (index = 0;
   1107e:	fa41 f703 	asr.w	r7, r1, r3
   11082:	07ff      	lsls	r7, r7, #31
   11084:	f106 0601 	add.w	r6, r6, #1
   11088:	d4f8      	bmi.n	1107c <ll_wl_add+0x30>
	     (filter->enable_bitmask & (1 << index));
	     index++) {
	}
	filter->enable_bitmask |= (1 << index);
   1108a:	2601      	movs	r6, #1
   1108c:	409e      	lsls	r6, r3
   1108e:	4331      	orrs	r1, r6
   11090:	7001      	strb	r1, [r0, #0]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   11092:	f002 0201 	and.w	r2, r2, #1
   11096:	7841      	ldrb	r1, [r0, #1]
   11098:	409a      	lsls	r2, r3
   1109a:	430a      	orrs	r2, r1
   1109c:	7042      	strb	r2, [r0, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   1109e:	2206      	movs	r2, #6
   110a0:	fb02 0003 	mla	r0, r2, r3, r0
   110a4:	1c61      	adds	r1, r4, #1
   110a6:	3002      	adds	r0, #2
   110a8:	f7ef fff3 	bl	1092 <memcpy>
   110ac:	e000      	b.n	110b0 <ll_wl_add+0x64>
static u32_t filter_add(struct ll_filter *filter, u8_t addr_type, u8_t *bdaddr)
{
	u8_t index;

	if (filter->enable_bitmask == 0xFF) {
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   110ae:	2507      	movs	r5, #7
		wl_anon = 1;
		return 0;
	}

	return filter_add(&wl, addr->type, addr->a.val);
}
   110b0:	4628      	mov	r0, r5
   110b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   110b4:	20002120 	.word	0x20002120
   110b8:	20001dad 	.word	0x20001dad

000110bc <ll_wl_remove>:

u32_t ll_wl_remove(bt_addr_le_t *addr)
{
   110bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   110c0:	4680      	mov	r8, r0

	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   110c2:	f7ff f8d1 	bl	10268 <radio_adv_filter_pol_get>
   110c6:	b108      	cbz	r0, 110cc <ll_wl_remove+0x10>
		return BT_HCI_ERR_CMD_DISALLOWED;
   110c8:	260c      	movs	r6, #12
   110ca:	e03c      	b.n	11146 <ll_wl_remove+0x8a>
}

u32_t ll_wl_remove(bt_addr_le_t *addr)
{

	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   110cc:	f7ff f8e0 	bl	10290 <radio_scan_filter_pol_get>
   110d0:	f010 0601 	ands.w	r6, r0, #1
   110d4:	d1f8      	bne.n	110c8 <ll_wl_remove+0xc>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	if (addr->type == ADDR_TYPE_ANON) {
   110d6:	f898 9000 	ldrb.w	r9, [r8]
   110da:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
   110de:	d102      	bne.n	110e6 <ll_wl_remove+0x2a>
		wl_anon = 0;
   110e0:	4b1a      	ldr	r3, [pc, #104]	; (1114c <ll_wl_remove+0x90>)
   110e2:	701e      	strb	r6, [r3, #0]
		return 0;
   110e4:	e02f      	b.n	11146 <ll_wl_remove+0x8a>
static u32_t filter_remove(struct ll_filter *filter, u8_t addr_type,
			   u8_t *bdaddr)
{
	u8_t index;

	if (!filter->enable_bitmask) {
   110e6:	4d1a      	ldr	r5, [pc, #104]	; (11150 <ll_wl_remove+0x94>)
   110e8:	782b      	ldrb	r3, [r5, #0]
   110ea:	b17b      	cbz	r3, 1110c <ll_wl_remove+0x50>
   110ec:	2408      	movs	r4, #8
		return BT_HCI_ERR_INVALID_PARAM;
	}

	index = 8;
	while (index--) {
		if ((filter->enable_bitmask & BIT(index)) &&
   110ee:	46aa      	mov	sl, r5
	if (addr->type == ADDR_TYPE_ANON) {
		wl_anon = 0;
		return 0;
	}

	return filter_remove(&wl, addr->type, addr->a.val);
   110f0:	f108 0801 	add.w	r8, r8, #1
	index = 8;
	while (index--) {
		if ((filter->enable_bitmask & BIT(index)) &&
		    (((filter->addr_type_bitmask >> index) & 0x01) ==
		     (addr_type & 0x01)) &&
		    !memcmp(filter->bdaddr[index], bdaddr, BDADDR_SIZE)) {
   110f4:	f04f 0b06 	mov.w	fp, #6
   110f8:	e004      	b.n	11104 <ll_wl_remove+0x48>
		return BT_HCI_ERR_INVALID_PARAM;
	}

	index = 8;
	while (index--) {
		if ((filter->enable_bitmask & BIT(index)) &&
   110fa:	782b      	ldrb	r3, [r5, #0]
   110fc:	4f14      	ldr	r7, [pc, #80]	; (11150 <ll_wl_remove+0x94>)
   110fe:	40e3      	lsrs	r3, r4
   11100:	07da      	lsls	r2, r3, #31
   11102:	d405      	bmi.n	11110 <ll_wl_remove+0x54>
	if (!filter->enable_bitmask) {
		return BT_HCI_ERR_INVALID_PARAM;
	}

	index = 8;
	while (index--) {
   11104:	3c01      	subs	r4, #1
   11106:	b2e4      	uxtb	r4, r4
   11108:	2cff      	cmp	r4, #255	; 0xff
   1110a:	d1f6      	bne.n	110fa <ll_wl_remove+0x3e>
			   u8_t *bdaddr)
{
	u8_t index;

	if (!filter->enable_bitmask) {
		return BT_HCI_ERR_INVALID_PARAM;
   1110c:	2612      	movs	r6, #18
   1110e:	e01a      	b.n	11146 <ll_wl_remove+0x8a>
	}

	index = 8;
	while (index--) {
		if ((filter->enable_bitmask & BIT(index)) &&
   11110:	f89a 3001 	ldrb.w	r3, [sl, #1]
   11114:	4123      	asrs	r3, r4
   11116:	ea83 0309 	eor.w	r3, r3, r9
   1111a:	07db      	lsls	r3, r3, #31
   1111c:	d4f2      	bmi.n	11104 <ll_wl_remove+0x48>
		    (((filter->addr_type_bitmask >> index) & 0x01) ==
		     (addr_type & 0x01)) &&
		    !memcmp(filter->bdaddr[index], bdaddr, BDADDR_SIZE)) {
   1111e:	fb0b a004 	mla	r0, fp, r4, sl
   11122:	2206      	movs	r2, #6
   11124:	4641      	mov	r1, r8
   11126:	3002      	adds	r0, #2
   11128:	f7ef ff83 	bl	1032 <memcmp>

	index = 8;
	while (index--) {
		if ((filter->enable_bitmask & BIT(index)) &&
		    (((filter->addr_type_bitmask >> index) & 0x01) ==
		     (addr_type & 0x01)) &&
   1112c:	2800      	cmp	r0, #0
   1112e:	d1e9      	bne.n	11104 <ll_wl_remove+0x48>
		    !memcmp(filter->bdaddr[index], bdaddr, BDADDR_SIZE)) {
			filter->enable_bitmask &= ~BIT(index);
   11130:	2301      	movs	r3, #1
   11132:	fa03 f404 	lsl.w	r4, r3, r4
   11136:	43e4      	mvns	r4, r4
   11138:	783b      	ldrb	r3, [r7, #0]
   1113a:	b2e4      	uxtb	r4, r4
   1113c:	4023      	ands	r3, r4
   1113e:	703b      	strb	r3, [r7, #0]
			filter->addr_type_bitmask &= ~BIT(index);
   11140:	787b      	ldrb	r3, [r7, #1]
   11142:	401c      	ands	r4, r3
   11144:	707c      	strb	r4, [r7, #1]
		wl_anon = 0;
		return 0;
	}

	return filter_remove(&wl, addr->type, addr->a.val);
}
   11146:	4630      	mov	r0, r6
   11148:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1114c:	20002120 	.word	0x20002120
   11150:	20001dad 	.word	0x20001dad

00011154 <ll_rl_idx_find>:
		    rl[i].peer_id_addr_type == (id_addr_type & 0x1) && \
		    !memcmp(rl[i].peer_id_addr.val, id_addr, BDADDR_SIZE))


int ll_rl_idx_find(u8_t id_addr_type, u8_t *id_addr)
{
   11154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int i;
	for (i = 0; i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE; i++) {
		if (RL_MATCH(i, id_addr_type, id_addr)) {
   11156:	4d10      	ldr	r5, [pc, #64]	; (11198 <ll_rl_idx_find+0x44>)
		    rl[i].peer_id_addr_type == (id_addr_type & 0x1) && \
		    !memcmp(rl[i].peer_id_addr.val, id_addr, BDADDR_SIZE))


int ll_rl_idx_find(u8_t id_addr_type, u8_t *id_addr)
{
   11158:	460e      	mov	r6, r1
	int i;
	for (i = 0; i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE; i++) {
   1115a:	2400      	movs	r4, #0
		if (RL_MATCH(i, id_addr_type, id_addr)) {
   1115c:	f000 0701 	and.w	r7, r0, #1
   11160:	2024      	movs	r0, #36	; 0x24
   11162:	4360      	muls	r0, r4
   11164:	182b      	adds	r3, r5, r0
   11166:	5c2a      	ldrb	r2, [r5, r0]
   11168:	07d2      	lsls	r2, r2, #31
   1116a:	d405      	bmi.n	11178 <ll_rl_idx_find+0x24>


int ll_rl_idx_find(u8_t id_addr_type, u8_t *id_addr)
{
	int i;
	for (i = 0; i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE; i++) {
   1116c:	3401      	adds	r4, #1
   1116e:	2c08      	cmp	r4, #8
   11170:	d1f6      	bne.n	11160 <ll_rl_idx_find+0xc>
		if (RL_MATCH(i, id_addr_type, id_addr)) {
			return i;
		}
	}

	return -1;
   11172:	f04f 30ff 	mov.w	r0, #4294967295
   11176:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

int ll_rl_idx_find(u8_t id_addr_type, u8_t *id_addr)
{
	int i;
	for (i = 0; i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE; i++) {
		if (RL_MATCH(i, id_addr_type, id_addr)) {
   11178:	785b      	ldrb	r3, [r3, #1]
   1117a:	f003 0301 	and.w	r3, r3, #1
   1117e:	42bb      	cmp	r3, r7
   11180:	d1f4      	bne.n	1116c <ll_rl_idx_find+0x18>
   11182:	3002      	adds	r0, #2
   11184:	2206      	movs	r2, #6
   11186:	4631      	mov	r1, r6
   11188:	4428      	add	r0, r5
   1118a:	f7ef ff52 	bl	1032 <memcmp>
   1118e:	2800      	cmp	r0, #0
   11190:	d1ec      	bne.n	1116c <ll_rl_idx_find+0x18>
   11192:	4620      	mov	r0, r4
			return i;
		}
	}

	return -1;
}
   11194:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11196:	bf00      	nop
   11198:	20001ddf 	.word	0x20001ddf

0001119c <ctrl_rl_enabled>:

bool ctrl_rl_enabled(void)
{
	return rl_enable;
   1119c:	4b02      	ldr	r3, [pc, #8]	; (111a8 <ctrl_rl_enabled+0xc>)
   1119e:	7818      	ldrb	r0, [r3, #0]
}
   111a0:	3000      	adds	r0, #0
   111a2:	bf18      	it	ne
   111a4:	2001      	movne	r0, #1
   111a6:	4770      	bx	lr
   111a8:	20001eff 	.word	0x20001eff

000111ac <ll_rl_pdu_adv_update>:

void ll_rl_pdu_adv_update(int idx, struct pdu_adv *pdu)
{
   111ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   111ae:	4606      	mov	r6, r0
   111b0:	460c      	mov	r4, r1
	u8_t *adva = pdu->type == PDU_ADV_TYPE_SCAN_RSP ?
				  &pdu->payload.scan_rsp.addr[0] :
   111b2:	1c8f      	adds	r7, r1, #2
				  &pdu->payload.adv_ind.addr[0];

	struct ll_adv_set *ll_adv = ll_adv_set_get();
   111b4:	f000 fa88 	bl	116c8 <ll_adv_set_get>

	/* AdvA */
	if (idx >= 0 && rl[idx].lirk) {
   111b8:	2e00      	cmp	r6, #0
{
	u8_t *adva = pdu->type == PDU_ADV_TYPE_SCAN_RSP ?
				  &pdu->payload.scan_rsp.addr[0] :
				  &pdu->payload.adv_ind.addr[0];

	struct ll_adv_set *ll_adv = ll_adv_set_get();
   111ba:	4605      	mov	r5, r0

	/* AdvA */
	if (idx >= 0 && rl[idx].lirk) {
   111bc:	db23      	blt.n	11206 <ll_rl_pdu_adv_update+0x5a>
   111be:	2224      	movs	r2, #36	; 0x24
   111c0:	492a      	ldr	r1, [pc, #168]	; (1126c <ll_rl_pdu_adv_update+0xc0>)
   111c2:	fb02 f306 	mul.w	r3, r2, r6
   111c6:	5cca      	ldrb	r2, [r1, r3]
   111c8:	09d0      	lsrs	r0, r2, #7
   111ca:	d01c      	beq.n	11206 <ll_rl_pdu_adv_update+0x5a>
		LL_ASSERT(rl[idx].rpas_ready);
   111cc:	0792      	lsls	r2, r2, #30
   111ce:	d40f      	bmi.n	111f0 <ll_rl_pdu_adv_update+0x44>
   111d0:	4b27      	ldr	r3, [pc, #156]	; (11270 <ll_rl_pdu_adv_update+0xc4>)
   111d2:	9301      	str	r3, [sp, #4]
   111d4:	4b27      	ldr	r3, [pc, #156]	; (11274 <ll_rl_pdu_adv_update+0xc8>)
   111d6:	9300      	str	r3, [sp, #0]
   111d8:	4a27      	ldr	r2, [pc, #156]	; (11278 <ll_rl_pdu_adv_update+0xcc>)
   111da:	4b28      	ldr	r3, [pc, #160]	; (1127c <ll_rl_pdu_adv_update+0xd0>)
   111dc:	4928      	ldr	r1, [pc, #160]	; (11280 <ll_rl_pdu_adv_update+0xd4>)
   111de:	4829      	ldr	r0, [pc, #164]	; (11284 <ll_rl_pdu_adv_update+0xd8>)
   111e0:	f7f0 f94e 	bl	1480 <printk>
   111e4:	4040      	eors	r0, r0
   111e6:	f380 8811 	msr	BASEPRI, r0
   111ea:	f04f 0004 	mov.w	r0, #4
   111ee:	df02      	svc	2
		pdu->tx_addr = 1;
   111f0:	7822      	ldrb	r2, [r4, #0]
		memcpy(adva, rl[idx].local_rpa.val, BDADDR_SIZE);
   111f2:	4419      	add	r1, r3
	struct ll_adv_set *ll_adv = ll_adv_set_get();

	/* AdvA */
	if (idx >= 0 && rl[idx].lirk) {
		LL_ASSERT(rl[idx].rpas_ready);
		pdu->tx_addr = 1;
   111f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   111f8:	7022      	strb	r2, [r4, #0]
		memcpy(adva, rl[idx].local_rpa.val, BDADDR_SIZE);
   111fa:	311e      	adds	r1, #30
   111fc:	2206      	movs	r2, #6
   111fe:	4638      	mov	r0, r7
   11200:	f7ef ff47 	bl	1092 <memcpy>
   11204:	e00c      	b.n	11220 <ll_rl_pdu_adv_update+0x74>
	} else {
		pdu->tx_addr = ll_adv->own_addr_type & 0x1;
   11206:	786b      	ldrb	r3, [r5, #1]
   11208:	7822      	ldrb	r2, [r4, #0]
   1120a:	f3c3 1341 	ubfx	r3, r3, #5, #2
   1120e:	f363 1286 	bfi	r2, r3, #6, #1
   11212:	7022      	strb	r2, [r4, #0]
		ll_addr_get(ll_adv->own_addr_type & 0x1, adva);
   11214:	7868      	ldrb	r0, [r5, #1]
   11216:	4639      	mov	r1, r7
   11218:	f3c0 1040 	ubfx	r0, r0, #5, #1
   1121c:	f7ff fec8 	bl	10fb0 <ll_addr_get>
	}

	/* TargetA */
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   11220:	7822      	ldrb	r2, [r4, #0]
   11222:	f002 030f 	and.w	r3, r2, #15
   11226:	2b01      	cmp	r3, #1
   11228:	d11d      	bne.n	11266 <ll_rl_pdu_adv_update+0xba>
		if (idx >= 0 && rl[idx].pirk) {
   1122a:	2e00      	cmp	r6, #0
   1122c:	f104 0008 	add.w	r0, r4, #8
   11230:	db0c      	blt.n	1124c <ll_rl_pdu_adv_update+0xa0>
   11232:	2324      	movs	r3, #36	; 0x24
   11234:	490d      	ldr	r1, [pc, #52]	; (1126c <ll_rl_pdu_adv_update+0xc0>)
   11236:	4373      	muls	r3, r6
   11238:	5cce      	ldrb	r6, [r1, r3]
   1123a:	0776      	lsls	r6, r6, #29
   1123c:	d506      	bpl.n	1124c <ll_rl_pdu_adv_update+0xa0>
			pdu->rx_addr = 1;
   1123e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
			memcpy(&pdu->payload.direct_ind.tgt_addr[0],
			       rl[idx].peer_rpa.val, BDADDR_SIZE);
   11242:	3318      	adds	r3, #24
	}

	/* TargetA */
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
		if (idx >= 0 && rl[idx].pirk) {
			pdu->rx_addr = 1;
   11244:	7022      	strb	r2, [r4, #0]
			memcpy(&pdu->payload.direct_ind.tgt_addr[0],
   11246:	4419      	add	r1, r3
   11248:	2206      	movs	r2, #6
   1124a:	e007      	b.n	1125c <ll_rl_pdu_adv_update+0xb0>
			       rl[idx].peer_rpa.val, BDADDR_SIZE);
		} else {
			pdu->rx_addr = ll_adv->id_addr_type;
   1124c:	786b      	ldrb	r3, [r5, #1]
   1124e:	7822      	ldrb	r2, [r4, #0]
   11250:	09db      	lsrs	r3, r3, #7
   11252:	f363 12c7 	bfi	r2, r3, #7, #1
   11256:	7022      	strb	r2, [r4, #0]
			memcpy(&pdu->payload.direct_ind.tgt_addr[0],
   11258:	1ca9      	adds	r1, r5, #2
   1125a:	2206      	movs	r2, #6
			       ll_adv->id_addr, BDADDR_SIZE);
		}
	}
}
   1125c:	b003      	add	sp, #12
   1125e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			pdu->rx_addr = 1;
			memcpy(&pdu->payload.direct_ind.tgt_addr[0],
			       rl[idx].peer_rpa.val, BDADDR_SIZE);
		} else {
			pdu->rx_addr = ll_adv->id_addr_type;
			memcpy(&pdu->payload.direct_ind.tgt_addr[0],
   11262:	f7ef bf16 	b.w	1092 <memcpy>
			       ll_adv->id_addr, BDADDR_SIZE);
		}
	}
}
   11266:	b003      	add	sp, #12
   11268:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1126a:	bf00      	nop
   1126c:	20001ddf 	.word	0x20001ddf
   11270:	00013df4 	.word	0x00013df4
   11274:	00013df9 	.word	0x00013df9
   11278:	00013db4 	.word	0x00013db4
   1127c:	00016be6 	.word	0x00016be6
   11280:	00013dbb 	.word	0x00013dbb
   11284:	00015eb6 	.word	0x00015eb6

00011288 <ll_rl_rpa_update>:
	return (radio_adv_is_enabled() || radio_scan_is_enabled()) ? 0 : 1;
}


void ll_rl_rpa_update(bool timeout)
{
   11288:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1128c:	4607      	mov	r7, r0
	int i, err;
	s64_t now = k_uptime_get();
   1128e:	f002 f81d 	bl	132cc <k_uptime_get>
   11292:	4680      	mov	r8, r0
   11294:	4689      	mov	r9, r1
	bool all = timeout || (rpa_last_ms == -1) ||
   11296:	b9af      	cbnz	r7, 112c4 <ll_rl_rpa_update+0x3c>
   11298:	4b5b      	ldr	r3, [pc, #364]	; (11408 <ll_rl_rpa_update+0x180>)
   1129a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1129e:	1c58      	adds	r0, r3, #1
   112a0:	bf08      	it	eq
   112a2:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   112a6:	d00d      	beq.n	112c4 <ll_rl_rpa_update+0x3c>
   112a8:	ebb8 0002 	subs.w	r0, r8, r2
   112ac:	eb61 0103 	sbc.w	r1, r1, r3
		   (now - rpa_last_ms >= rpa_timeout_ms);
   112b0:	4b56      	ldr	r3, [pc, #344]	; (1140c <ll_rl_rpa_update+0x184>)

void ll_rl_rpa_update(bool timeout)
{
	int i, err;
	s64_t now = k_uptime_get();
	bool all = timeout || (rpa_last_ms == -1) ||
   112b2:	681a      	ldr	r2, [r3, #0]
   112b4:	2300      	movs	r3, #0
   112b6:	4290      	cmp	r0, r2
   112b8:	eb71 0303 	sbcs.w	r3, r1, r3
   112bc:	bfac      	ite	ge
   112be:	2601      	movge	r6, #1
   112c0:	2600      	movlt	r6, #0
   112c2:	e000      	b.n	112c6 <ll_rl_rpa_update+0x3e>
   112c4:	2601      	movs	r6, #1
   112c6:	4d52      	ldr	r5, [pc, #328]	; (11410 <ll_rl_rpa_update+0x188>)
		   (now - rpa_last_ms >= rpa_timeout_ms);
	BT_DBG("");

	for (i = 0; i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE; i++) {
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
   112c8:	f1a5 0a08 	sub.w	sl, r5, #8
	s64_t now = k_uptime_get();
	bool all = timeout || (rpa_last_ms == -1) ||
		   (now - rpa_last_ms >= rpa_timeout_ms);
	BT_DBG("");

	for (i = 0; i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE; i++) {
   112cc:	2400      	movs	r4, #0
   112ce:	46d3      	mov	fp, sl
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
   112d0:	2224      	movs	r2, #36	; 0x24
   112d2:	4362      	muls	r2, r4
   112d4:	f81a 2002 	ldrb.w	r2, [sl, r2]
   112d8:	07d1      	lsls	r1, r2, #31
   112da:	d52f      	bpl.n	1133c <ll_rl_rpa_update+0xb4>
   112dc:	b90e      	cbnz	r6, 112e2 <ll_rl_rpa_update+0x5a>
   112de:	0792      	lsls	r2, r2, #30
   112e0:	d42c      	bmi.n	1133c <ll_rl_rpa_update+0xb4>

			if (rl[i].pirk) {
   112e2:	2224      	movs	r2, #36	; 0x24
   112e4:	4362      	muls	r2, r4
   112e6:	f81b 0002 	ldrb.w	r0, [fp, r2]
   112ea:	0743      	lsls	r3, r0, #29
   112ec:	d509      	bpl.n	11302 <ll_rl_rpa_update+0x7a>
				err = bt_rpa_create(peer_irks[rl[i].pirk_idx],
   112ee:	4b49      	ldr	r3, [pc, #292]	; (11414 <ll_rl_rpa_update+0x18c>)
   112f0:	f3c0 00c3 	ubfx	r0, r0, #3, #4
   112f4:	f105 0110 	add.w	r1, r5, #16
   112f8:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   112fc:	f7f0 fd9a 	bl	1e34 <bt_rpa_create>
						    &rl[i].peer_rpa);
				LL_ASSERT(!err);
   11300:	b958      	cbnz	r0, 1131a <ll_rl_rpa_update+0x92>
			}
			if (rl[i].lirk) {
   11302:	2224      	movs	r2, #36	; 0x24
   11304:	4362      	muls	r2, r4
   11306:	f81b 2002 	ldrb.w	r2, [fp, r2]
   1130a:	09d3      	lsrs	r3, r2, #7
   1130c:	d00e      	beq.n	1132c <ll_rl_rpa_update+0xa4>
				err = bt_rpa_create(rl[i].local_irk,
   1130e:	f105 0116 	add.w	r1, r5, #22
   11312:	4628      	mov	r0, r5
   11314:	f7f0 fd8e 	bl	1e34 <bt_rpa_create>
						    &rl[i].local_rpa);
				LL_ASSERT(!err);
   11318:	b140      	cbz	r0, 1132c <ll_rl_rpa_update+0xa4>
   1131a:	4b3f      	ldr	r3, [pc, #252]	; (11418 <ll_rl_rpa_update+0x190>)
   1131c:	9301      	str	r3, [sp, #4]
   1131e:	4b3f      	ldr	r3, [pc, #252]	; (1141c <ll_rl_rpa_update+0x194>)
   11320:	9300      	str	r3, [sp, #0]
   11322:	4a3f      	ldr	r2, [pc, #252]	; (11420 <ll_rl_rpa_update+0x198>)
   11324:	4b3f      	ldr	r3, [pc, #252]	; (11424 <ll_rl_rpa_update+0x19c>)
   11326:	4940      	ldr	r1, [pc, #256]	; (11428 <ll_rl_rpa_update+0x1a0>)
   11328:	4840      	ldr	r0, [pc, #256]	; (1142c <ll_rl_rpa_update+0x1a4>)
   1132a:	e052      	b.n	113d2 <ll_rl_rpa_update+0x14a>
			}

			rl[i].rpas_ready = 1;
   1132c:	2224      	movs	r2, #36	; 0x24
   1132e:	4362      	muls	r2, r4
   11330:	f81b 1002 	ldrb.w	r1, [fp, r2]
   11334:	f041 0102 	orr.w	r1, r1, #2
   11338:	f80b 1002 	strb.w	r1, [fp, r2]
	s64_t now = k_uptime_get();
	bool all = timeout || (rpa_last_ms == -1) ||
		   (now - rpa_last_ms >= rpa_timeout_ms);
	BT_DBG("");

	for (i = 0; i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE; i++) {
   1133c:	3401      	adds	r4, #1
   1133e:	2c08      	cmp	r4, #8
   11340:	f105 0524 	add.w	r5, r5, #36	; 0x24
   11344:	d1c4      	bne.n	112d0 <ll_rl_rpa_update+0x48>

			rl[i].rpas_ready = 1;
		}
	}

	if (all) {
   11346:	b116      	cbz	r6, 1134e <ll_rl_rpa_update+0xc6>
		rpa_last_ms = now;
   11348:	4b2f      	ldr	r3, [pc, #188]	; (11408 <ll_rl_rpa_update+0x180>)
   1134a:	e9c3 8900 	strd	r8, r9, [r3]
	}

	if (timeout) {
   1134e:	2f00      	cmp	r7, #0
   11350:	d056      	beq.n	11400 <ll_rl_rpa_update+0x178>
		if (radio_adv_is_enabled()) {
   11352:	f7fe ff81 	bl	10258 <radio_adv_is_enabled>
   11356:	2800      	cmp	r0, #0
   11358:	d052      	beq.n	11400 <ll_rl_rpa_update+0x178>
	struct pdu_adv *prev;
	struct pdu_adv *pdu;
	u8_t last;
	int idx;

	ll_adv = ll_adv_set_get();
   1135a:	f000 f9b5 	bl	116c8 <ll_adv_set_get>

	if (ll_adv->own_addr_type < BT_ADDR_LE_PUBLIC_ID) {
   1135e:	7843      	ldrb	r3, [r0, #1]
   11360:	f3c3 1341 	ubfx	r3, r3, #5, #2
   11364:	2b01      	cmp	r3, #1
	struct pdu_adv *prev;
	struct pdu_adv *pdu;
	u8_t last;
	int idx;

	ll_adv = ll_adv_set_get();
   11366:	4680      	mov	r8, r0

	if (ll_adv->own_addr_type < BT_ADDR_LE_PUBLIC_ID) {
   11368:	dd4a      	ble.n	11400 <ll_rl_rpa_update+0x178>
		return;
	}

	radio_adv_data = radio_adv_data_get();
   1136a:	f7fe ff6d 	bl	10248 <radio_adv_data_get>
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   1136e:	f890 504f 	ldrb.w	r5, [r0, #79]	; 0x4f
	/* use the last index in double buffer, */
	if (radio_adv_data->first == radio_adv_data->last) {
   11372:	f890 304e 	ldrb.w	r3, [r0, #78]	; 0x4e
	if (ll_adv->own_addr_type < BT_ADDR_LE_PUBLIC_ID) {
		return;
	}

	radio_adv_data = radio_adv_data_get();
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   11376:	2227      	movs	r2, #39	; 0x27
   11378:	436a      	muls	r2, r5
	/* use the last index in double buffer, */
	if (radio_adv_data->first == radio_adv_data->last) {
   1137a:	42ab      	cmp	r3, r5

	if (ll_adv->own_addr_type < BT_ADDR_LE_PUBLIC_ID) {
		return;
	}

	radio_adv_data = radio_adv_data_get();
   1137c:	4604      	mov	r4, r0
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   1137e:	eb00 0602 	add.w	r6, r0, r2
	/* use the last index in double buffer, */
	if (radio_adv_data->first == radio_adv_data->last) {
   11382:	d104      	bne.n	1138e <ll_rl_rpa_update+0x106>
		last = radio_adv_data->last + 1;
   11384:	3501      	adds	r5, #1
   11386:	b2ed      	uxtb	r5, r5
		if (last == DOUBLE_BUFFER_SIZE) {
			last = 0;
   11388:	2d02      	cmp	r5, #2
   1138a:	bf08      	it	eq
   1138c:	2500      	moveq	r5, #0
	} else {
		last = radio_adv_data->last;
	}

	/* update adv pdu fields. */
	pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
   1138e:	2327      	movs	r3, #39	; 0x27
   11390:	436b      	muls	r3, r5
	pdu->type = prev->type;
   11392:	5ca1      	ldrb	r1, [r4, r2]
   11394:	5ce0      	ldrb	r0, [r4, r3]
   11396:	f361 0003 	bfi	r0, r1, #0, #4
	pdu->rfu = 0;
   1139a:	f36f 1004 	bfc	r0, #4, #1
   1139e:	54e0      	strb	r0, [r4, r3]

	if (IS_ENABLED(CONFIG_BLUETOOTH_CONTROLLER_CHAN_SEL_2)) {
		pdu->chan_sel = prev->chan_sel;
   113a0:	5ca2      	ldrb	r2, [r4, r2]
   113a2:	b2c1      	uxtb	r1, r0
   113a4:	f3c2 1240 	ubfx	r2, r2, #5, #1
   113a8:	f362 1145 	bfi	r1, r2, #5, #1
   113ac:	54e1      	strb	r1, [r4, r3]
	} else {
		pdu->chan_sel = 0;
	}


	idx = ll_rl_idx_find(ll_adv->id_addr_type, ll_adv->id_addr);
   113ae:	f898 0001 	ldrb.w	r0, [r8, #1]
   113b2:	f108 0102 	add.w	r1, r8, #2
   113b6:	09c0      	lsrs	r0, r0, #7
	} else {
		last = radio_adv_data->last;
	}

	/* update adv pdu fields. */
	pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
   113b8:	18e7      	adds	r7, r4, r3
	} else {
		pdu->chan_sel = 0;
	}


	idx = ll_rl_idx_find(ll_adv->id_addr_type, ll_adv->id_addr);
   113ba:	f7ff fecb 	bl	11154 <ll_rl_idx_find>
	LL_ASSERT(idx >= 0);
   113be:	2800      	cmp	r0, #0
   113c0:	da0f      	bge.n	113e2 <ll_rl_rpa_update+0x15a>
   113c2:	4b15      	ldr	r3, [pc, #84]	; (11418 <ll_rl_rpa_update+0x190>)
   113c4:	9301      	str	r3, [sp, #4]
   113c6:	4b15      	ldr	r3, [pc, #84]	; (1141c <ll_rl_rpa_update+0x194>)
   113c8:	9300      	str	r3, [sp, #0]
   113ca:	4a15      	ldr	r2, [pc, #84]	; (11420 <ll_rl_rpa_update+0x198>)
   113cc:	4b18      	ldr	r3, [pc, #96]	; (11430 <ll_rl_rpa_update+0x1a8>)
   113ce:	4916      	ldr	r1, [pc, #88]	; (11428 <ll_rl_rpa_update+0x1a0>)
   113d0:	4818      	ldr	r0, [pc, #96]	; (11434 <ll_rl_rpa_update+0x1ac>)
   113d2:	f7f0 f855 	bl	1480 <printk>
   113d6:	4040      	eors	r0, r0
   113d8:	f380 8811 	msr	BASEPRI, r0
   113dc:	f04f 0004 	mov.w	r0, #4
   113e0:	df02      	svc	2
	ll_rl_pdu_adv_update(idx, pdu);
   113e2:	4639      	mov	r1, r7
   113e4:	f7ff fee2 	bl	111ac <ll_rl_pdu_adv_update>

	memcpy(&pdu->payload.adv_ind.data[0], &prev->payload.adv_ind.data[0],
   113e8:	7872      	ldrb	r2, [r6, #1]
   113ea:	f106 0108 	add.w	r1, r6, #8
   113ee:	3a06      	subs	r2, #6
   113f0:	f107 0008 	add.w	r0, r7, #8
   113f4:	f7ef fe4d 	bl	1092 <memcpy>
	       prev->len - BDADDR_SIZE);
	pdu->len = prev->len;;
   113f8:	7873      	ldrb	r3, [r6, #1]
   113fa:	707b      	strb	r3, [r7, #1]

	/* commit the update so controller picks it. */
	radio_adv_data->last = last;
   113fc:	f884 504f 	strb.w	r5, [r4, #79]	; 0x4f
	if (timeout) {
		if (radio_adv_is_enabled()) {
			rpa_adv_refresh();
		}
	}
}
   11400:	b003      	add	sp, #12
   11402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11406:	bf00      	nop
   11408:	20002118 	.word	0x20002118
   1140c:	20002220 	.word	0x20002220
   11410:	20001de7 	.word	0x20001de7
   11414:	20001d2d 	.word	0x20001d2d
   11418:	00013df4 	.word	0x00013df4
   1141c:	00013df9 	.word	0x00013df9
   11420:	00013db4 	.word	0x00013db4
   11424:	00016bfb 	.word	0x00016bfb
   11428:	00013dbb 	.word	0x00013dbb
   1142c:	00015eea 	.word	0x00015eea
   11430:	000161af 	.word	0x000161af
   11434:	00015f10 	.word	0x00015f10

00011438 <rpa_timeout>:

static void rpa_timeout(struct k_work *work)
{
   11438:	b508      	push	{r3, lr}
	ll_rl_rpa_update(true);
   1143a:	2001      	movs	r0, #1
   1143c:	f7ff ff24 	bl	11288 <ll_rl_rpa_update>
   11440:	4b03      	ldr	r3, [pc, #12]	; (11450 <rpa_timeout+0x18>)
   11442:	4904      	ldr	r1, [pc, #16]	; (11454 <rpa_timeout+0x1c>)
   11444:	681a      	ldr	r2, [r3, #0]
   11446:	4804      	ldr	r0, [pc, #16]	; (11458 <rpa_timeout+0x20>)
	k_delayed_work_submit(&rpa_work, rpa_timeout_ms);
}
   11448:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1144c:	f002 ba20 	b.w	13890 <k_delayed_work_submit_to_queue>
   11450:	20002220 	.word	0x20002220
   11454:	20002190 	.word	0x20002190
   11458:	20002238 	.word	0x20002238

0001145c <ll_rl_size_get>:


u32_t ll_rl_size_get(void)
{
	return CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE;
}
   1145c:	2008      	movs	r0, #8
   1145e:	4770      	bx	lr

00011460 <ll_rl_clear>:

u32_t ll_rl_clear(void)
{
   11460:	b510      	push	{r4, lr}
	if (!rl_access_check(false)) {
   11462:	f7ff fdcb 	bl	10ffc <rl_access_check.constprop.1>
   11466:	b168      	cbz	r0, 11484 <ll_rl_clear+0x24>
}

static void rl_clear(void)
{
	for (int i = 0; i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE; i++) {
		rl[i].taken = 0;
   11468:	4907      	ldr	r1, [pc, #28]	; (11488 <ll_rl_clear+0x28>)
   1146a:	2300      	movs	r3, #0
   1146c:	2424      	movs	r4, #36	; 0x24
   1146e:	fb04 f203 	mul.w	r2, r4, r3
	radio_adv_data->last = last;
}

static void rl_clear(void)
{
	for (int i = 0; i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE; i++) {
   11472:	3301      	adds	r3, #1
		rl[i].taken = 0;
   11474:	5c88      	ldrb	r0, [r1, r2]
	radio_adv_data->last = last;
}

static void rl_clear(void)
{
	for (int i = 0; i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE; i++) {
   11476:	2b08      	cmp	r3, #8
		rl[i].taken = 0;
   11478:	f36f 0000 	bfc	r0, #0, #1
   1147c:	5488      	strb	r0, [r1, r2]
	radio_adv_data->last = last;
}

static void rl_clear(void)
{
	for (int i = 0; i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE; i++) {
   1147e:	d1f6      	bne.n	1146e <ll_rl_clear+0xe>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	rl_clear();

	return 0;
   11480:	2000      	movs	r0, #0
   11482:	bd10      	pop	{r4, pc}
}

u32_t ll_rl_clear(void)
{
	if (!rl_access_check(false)) {
		return BT_HCI_ERR_CMD_DISALLOWED;
   11484:	200c      	movs	r0, #12
	}

	rl_clear();

	return 0;
}
   11486:	bd10      	pop	{r4, pc}
   11488:	20001ddf 	.word	0x20001ddf

0001148c <ll_rl_add>:

u32_t ll_rl_add(bt_addr_le_t *id_addr, const u8_t pirk[16],
		const u8_t lirk[16])
{
   1148c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11490:	4681      	mov	r9, r0
   11492:	4688      	mov	r8, r1
   11494:	4617      	mov	r7, r2
	int i;

	if (!rl_access_check(false)) {
   11496:	f7ff fdb1 	bl	10ffc <rl_access_check.constprop.1>
   1149a:	2800      	cmp	r0, #0
   1149c:	d054      	beq.n	11548 <ll_rl_add+0xbc>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	/* find an empty slot and insert device */
	for (i = 0; i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE; i++) {
		if (!rl[i].taken) {
   1149e:	4b2c      	ldr	r3, [pc, #176]	; (11550 <ll_rl_add+0xc4>)
   114a0:	2500      	movs	r5, #0
   114a2:	2124      	movs	r1, #36	; 0x24
   114a4:	fb01 f205 	mul.w	r2, r1, r5
   114a8:	189c      	adds	r4, r3, r2
   114aa:	5c9a      	ldrb	r2, [r3, r2]
   114ac:	4e28      	ldr	r6, [pc, #160]	; (11550 <ll_rl_add+0xc4>)
   114ae:	f012 0f01 	tst.w	r2, #1
   114b2:	d143      	bne.n	1153c <ll_rl_add+0xb0>
	return memcmp(a, b, sizeof(*a));
}

static inline void bt_addr_copy(bt_addr_t *dst, const bt_addr_t *src)
{
	memcpy(dst, src, sizeof(*dst));
   114b4:	2206      	movs	r2, #6
   114b6:	f109 0101 	add.w	r1, r9, #1
   114ba:	1ca0      	adds	r0, r4, #2
   114bc:	f7ef fde9 	bl	1092 <memcpy>
			bt_addr_copy(&rl[i].peer_id_addr,
					&id_addr->a);
			rl[i].peer_id_addr_type = id_addr->type & 0x1;
   114c0:	f899 2000 	ldrb.w	r2, [r9]
   114c4:	7863      	ldrb	r3, [r4, #1]
   114c6:	f362 0300 	bfi	r3, r2, #0, #1
   114ca:	7063      	strb	r3, [r4, #1]
			rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   114cc:	2110      	movs	r1, #16
   114ce:	4640      	mov	r0, r8
   114d0:	f7f8 fa04 	bl	98dc <mem_nz>
   114d4:	7823      	ldrb	r3, [r4, #0]
   114d6:	f360 0382 	bfi	r3, r0, #2, #1
   114da:	7023      	strb	r3, [r4, #0]
			rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   114dc:	2110      	movs	r1, #16
   114de:	4638      	mov	r0, r7
   114e0:	f7f8 f9fc 	bl	98dc <mem_nz>
   114e4:	7823      	ldrb	r3, [r4, #0]
   114e6:	f360 13c7 	bfi	r3, r0, #7, #1
   114ea:	7023      	strb	r3, [r4, #0]
			if (rl[i].pirk) {
   114ec:	b2db      	uxtb	r3, r3
   114ee:	075a      	lsls	r2, r3, #29
   114f0:	d50d      	bpl.n	1150e <ll_rl_add+0x82>
				rl[i].pirk_idx = peer_irk_count;
   114f2:	4a18      	ldr	r2, [pc, #96]	; (11554 <ll_rl_add+0xc8>)
   114f4:	7810      	ldrb	r0, [r2, #0]
   114f6:	f360 03c6 	bfi	r3, r0, #3, #4
   114fa:	7023      	strb	r3, [r4, #0]
				memcpy(peer_irks[peer_irk_count++],
   114fc:	1c43      	adds	r3, r0, #1
   114fe:	7013      	strb	r3, [r2, #0]
   11500:	4b15      	ldr	r3, [pc, #84]	; (11558 <ll_rl_add+0xcc>)
   11502:	2210      	movs	r2, #16
   11504:	4641      	mov	r1, r8
   11506:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   1150a:	f7ef fdc2 	bl	1092 <memcpy>
				       pirk, 16);
			}
			if (rl[i].lirk) {
   1150e:	2024      	movs	r0, #36	; 0x24
   11510:	4368      	muls	r0, r5
   11512:	5c33      	ldrb	r3, [r6, r0]
   11514:	09db      	lsrs	r3, r3, #7
   11516:	d006      	beq.n	11526 <ll_rl_add+0x9a>
				memcpy(rl[i].local_irk, lirk, 16);
   11518:	4b0d      	ldr	r3, [pc, #52]	; (11550 <ll_rl_add+0xc4>)
   1151a:	3008      	adds	r0, #8
   1151c:	2210      	movs	r2, #16
   1151e:	4639      	mov	r1, r7
   11520:	4418      	add	r0, r3
   11522:	f7ef fdb6 	bl	1092 <memcpy>
			}
			rl[i].rpas_ready = 0;
   11526:	2324      	movs	r3, #36	; 0x24
   11528:	435d      	muls	r5, r3
			rl[i].taken = 1;
			break;
		}
	}
	return (i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE) ?
   1152a:	2000      	movs	r0, #0
				       pirk, 16);
			}
			if (rl[i].lirk) {
				memcpy(rl[i].local_irk, lirk, 16);
			}
			rl[i].rpas_ready = 0;
   1152c:	5d73      	ldrb	r3, [r6, r5]
			rl[i].taken = 1;
   1152e:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   11532:	f043 0301 	orr.w	r3, r3, #1
   11536:	5573      	strb	r3, [r6, r5]
   11538:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!rl_access_check(false)) {
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	/* find an empty slot and insert device */
	for (i = 0; i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE; i++) {
   1153c:	3501      	adds	r5, #1
   1153e:	2d08      	cmp	r5, #8
   11540:	d1b0      	bne.n	114a4 <ll_rl_add+0x18>
			rl[i].rpas_ready = 0;
			rl[i].taken = 1;
			break;
		}
	}
	return (i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE) ?
   11542:	2007      	movs	r0, #7
   11544:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		const u8_t lirk[16])
{
	int i;

	if (!rl_access_check(false)) {
		return BT_HCI_ERR_CMD_DISALLOWED;
   11548:	200c      	movs	r0, #12
		}
	}
	return (i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE) ?
		0x00 : BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;

}
   1154a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1154e:	bf00      	nop
   11550:	20001ddf 	.word	0x20001ddf
   11554:	20001d2c 	.word	0x20001d2c
   11558:	20001d2d 	.word	0x20001d2d

0001155c <ll_rl_remove>:

u32_t ll_rl_remove(bt_addr_le_t *id_addr)
{
   1155c:	b538      	push	{r3, r4, r5, lr}
   1155e:	4604      	mov	r4, r0
	int i;

	if (!rl_access_check(false)) {
   11560:	f7ff fd4c 	bl	10ffc <rl_access_check.constprop.1>
   11564:	b310      	cbz	r0, 115ac <ll_rl_remove+0x50>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	/* find the device and mark it as empty */
	i = ll_rl_idx_find(id_addr->type, id_addr->a.val);
   11566:	1c61      	adds	r1, r4, #1
   11568:	7820      	ldrb	r0, [r4, #0]
   1156a:	f7ff fdf3 	bl	11154 <ll_rl_idx_find>
	if (i >= 0) {
   1156e:	1e05      	subs	r5, r0, #0
   11570:	db1e      	blt.n	115b0 <ll_rl_remove+0x54>
		if (rl[i].pirk) {
   11572:	2324      	movs	r3, #36	; 0x24
   11574:	4c0f      	ldr	r4, [pc, #60]	; (115b4 <ll_rl_remove+0x58>)
   11576:	436b      	muls	r3, r5
   11578:	5ce3      	ldrb	r3, [r4, r3]
   1157a:	075a      	lsls	r2, r3, #29
   1157c:	d50e      	bpl.n	1159c <ll_rl_remove+0x40>
			u8_t idx = rl[i].pirk_idx;
			memmove(peer_irks[idx], peer_irks[idx + 1],
				16 * peer_irk_count--);
   1157e:	490e      	ldr	r1, [pc, #56]	; (115b8 <ll_rl_remove+0x5c>)
   11580:	780a      	ldrb	r2, [r1, #0]
   11582:	1e50      	subs	r0, r2, #1
	/* find the device and mark it as empty */
	i = ll_rl_idx_find(id_addr->type, id_addr->a.val);
	if (i >= 0) {
		if (rl[i].pirk) {
			u8_t idx = rl[i].pirk_idx;
			memmove(peer_irks[idx], peer_irks[idx + 1],
   11584:	f3c3 03c3 	ubfx	r3, r3, #3, #4
				16 * peer_irk_count--);
   11588:	7008      	strb	r0, [r1, #0]
	/* find the device and mark it as empty */
	i = ll_rl_idx_find(id_addr->type, id_addr->a.val);
	if (i >= 0) {
		if (rl[i].pirk) {
			u8_t idx = rl[i].pirk_idx;
			memmove(peer_irks[idx], peer_irks[idx + 1],
   1158a:	480c      	ldr	r0, [pc, #48]	; (115bc <ll_rl_remove+0x60>)
   1158c:	1c59      	adds	r1, r3, #1
   1158e:	eb00 1101 	add.w	r1, r0, r1, lsl #4
   11592:	0112      	lsls	r2, r2, #4
   11594:	eb00 1003 	add.w	r0, r0, r3, lsl #4
   11598:	f7ef fd62 	bl	1060 <memmove>
				16 * peer_irk_count--);
		}
		rl[i].taken = 0;
   1159c:	2024      	movs	r0, #36	; 0x24
   1159e:	4368      	muls	r0, r5
   115a0:	5c23      	ldrb	r3, [r4, r0]
   115a2:	f36f 0300 	bfc	r3, #0, #1
   115a6:	5423      	strb	r3, [r4, r0]
	}

	return (i >= 0) ?  0x00 : BT_HCI_ERR_UNKNOWN_CONN_ID;
   115a8:	2000      	movs	r0, #0
   115aa:	bd38      	pop	{r3, r4, r5, pc}
u32_t ll_rl_remove(bt_addr_le_t *id_addr)
{
	int i;

	if (!rl_access_check(false)) {
		return BT_HCI_ERR_CMD_DISALLOWED;
   115ac:	200c      	movs	r0, #12
   115ae:	bd38      	pop	{r3, r4, r5, pc}
				16 * peer_irk_count--);
		}
		rl[i].taken = 0;
	}

	return (i >= 0) ?  0x00 : BT_HCI_ERR_UNKNOWN_CONN_ID;
   115b0:	2002      	movs	r0, #2
}
   115b2:	bd38      	pop	{r3, r4, r5, pc}
   115b4:	20001ddf 	.word	0x20001ddf
   115b8:	20001d2c 	.word	0x20001d2c
   115bc:	20001d2d 	.word	0x20001d2d

000115c0 <ll_rl_prpa_get>:

u32_t ll_rl_prpa_get(bt_addr_le_t *id_addr, bt_addr_t *prpa)
{
   115c0:	b510      	push	{r4, lr}
   115c2:	460c      	mov	r4, r1
	int i;

	/* find the device and return its RPA */
	i = ll_rl_idx_find(id_addr->type, id_addr->a.val);
   115c4:	1c41      	adds	r1, r0, #1
   115c6:	7800      	ldrb	r0, [r0, #0]
   115c8:	f7ff fdc4 	bl	11154 <ll_rl_idx_find>
	if (i >= 0) {
   115cc:	2800      	cmp	r0, #0
   115ce:	db0a      	blt.n	115e6 <ll_rl_prpa_get+0x26>
		bt_addr_copy(prpa, &rl[i].peer_rpa);
   115d0:	4b06      	ldr	r3, [pc, #24]	; (115ec <ll_rl_prpa_get+0x2c>)
   115d2:	2124      	movs	r1, #36	; 0x24
   115d4:	fb01 3100 	mla	r1, r1, r0, r3
   115d8:	2206      	movs	r2, #6
   115da:	3118      	adds	r1, #24
   115dc:	4620      	mov	r0, r4
   115de:	f7ef fd58 	bl	1092 <memcpy>
	}

	return (i >= 0) ?  0x00 : BT_HCI_ERR_UNKNOWN_CONN_ID;
   115e2:	2000      	movs	r0, #0
   115e4:	bd10      	pop	{r4, pc}
   115e6:	2002      	movs	r0, #2

}
   115e8:	bd10      	pop	{r4, pc}
   115ea:	bf00      	nop
   115ec:	20001ddf 	.word	0x20001ddf

000115f0 <ll_rl_lrpa_get>:

u32_t ll_rl_lrpa_get(bt_addr_le_t *id_addr, bt_addr_t *lrpa)
{
   115f0:	b510      	push	{r4, lr}
   115f2:	460c      	mov	r4, r1
	int i;

	/* find the device and return the local RPA */
	i = ll_rl_idx_find(id_addr->type, id_addr->a.val);
   115f4:	1c41      	adds	r1, r0, #1
   115f6:	7800      	ldrb	r0, [r0, #0]
   115f8:	f7ff fdac 	bl	11154 <ll_rl_idx_find>
	if (i >= 0) {
   115fc:	2800      	cmp	r0, #0
   115fe:	db0a      	blt.n	11616 <ll_rl_lrpa_get+0x26>
		bt_addr_copy(lrpa, &rl[i].local_rpa);
   11600:	4b06      	ldr	r3, [pc, #24]	; (1161c <ll_rl_lrpa_get+0x2c>)
   11602:	2124      	movs	r1, #36	; 0x24
   11604:	fb01 3100 	mla	r1, r1, r0, r3
   11608:	2206      	movs	r2, #6
   1160a:	311e      	adds	r1, #30
   1160c:	4620      	mov	r0, r4
   1160e:	f7ef fd40 	bl	1092 <memcpy>
	}

	return (i >= 0) ?  0x00 : BT_HCI_ERR_UNKNOWN_CONN_ID;
   11612:	2000      	movs	r0, #0
   11614:	bd10      	pop	{r4, pc}
   11616:	2002      	movs	r0, #2
}
   11618:	bd10      	pop	{r4, pc}
   1161a:	bf00      	nop
   1161c:	20001ddf 	.word	0x20001ddf

00011620 <ll_rl_enable>:

u32_t ll_rl_enable(u8_t enable)
{
   11620:	b510      	push	{r4, lr}
   11622:	4604      	mov	r4, r0
	if (!rl_access_check(false)) {
   11624:	f7ff fcea 	bl	10ffc <rl_access_check.constprop.1>
   11628:	b130      	cbz	r0, 11638 <ll_rl_enable+0x18>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	switch (enable) {
   1162a:	b10c      	cbz	r4, 11630 <ll_rl_enable+0x10>
   1162c:	2c01      	cmp	r4, #1
   1162e:	d105      	bne.n	1163c <ll_rl_enable+0x1c>
	case BT_HCI_ADDR_RES_DISABLE:
		rl_enable = 0;
		break;
	case BT_HCI_ADDR_RES_ENABLE:
		rl_enable = 1;
   11630:	4b03      	ldr	r3, [pc, #12]	; (11640 <ll_rl_enable+0x20>)
   11632:	701c      	strb	r4, [r3, #0]
		break;
	default:
		return BT_HCI_ERR_INVALID_PARAM;
	}

	return 0;
   11634:	2000      	movs	r0, #0
	case BT_HCI_ADDR_RES_DISABLE:
		rl_enable = 0;
		break;
	case BT_HCI_ADDR_RES_ENABLE:
		rl_enable = 1;
		break;
   11636:	bd10      	pop	{r4, pc}
}

u32_t ll_rl_enable(u8_t enable)
{
	if (!rl_access_check(false)) {
		return BT_HCI_ERR_CMD_DISALLOWED;
   11638:	200c      	movs	r0, #12
   1163a:	bd10      	pop	{r4, pc}
		break;
	case BT_HCI_ADDR_RES_ENABLE:
		rl_enable = 1;
		break;
	default:
		return BT_HCI_ERR_INVALID_PARAM;
   1163c:	2012      	movs	r0, #18
	}

	return 0;
}
   1163e:	bd10      	pop	{r4, pc}
   11640:	20001eff 	.word	0x20001eff

00011644 <ll_rl_timeout_set>:

void ll_rl_timeout_set(u16_t timeout)
{
	rpa_timeout_ms = timeout * 1000;
   11644:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   11648:	4358      	muls	r0, r3
   1164a:	4b01      	ldr	r3, [pc, #4]	; (11650 <ll_rl_timeout_set+0xc>)
   1164c:	6018      	str	r0, [r3, #0]
   1164e:	4770      	bx	lr
   11650:	20002220 	.word	0x20002220

00011654 <ll_filter_reset>:
struct k_delayed_work rpa_work;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */

static void filter_clear(struct ll_filter *filter)
{
	filter->enable_bitmask = 0;
   11654:	4a13      	ldr	r2, [pc, #76]	; (116a4 <ll_filter_reset+0x50>)
	filter_clear(&wl);
	wl_anon = 0;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	rl_enable = 0;
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   11656:	4914      	ldr	r1, [pc, #80]	; (116a8 <ll_filter_reset+0x54>)
struct k_delayed_work rpa_work;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */

static void filter_clear(struct ll_filter *filter)
{
	filter->enable_bitmask = 0;
   11658:	2300      	movs	r3, #0
	rpa_timeout_ms = timeout * 1000;
}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */

void ll_filter_reset(bool init)
{
   1165a:	b430      	push	{r4, r5}
struct k_delayed_work rpa_work;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */

static void filter_clear(struct ll_filter *filter)
{
	filter->enable_bitmask = 0;
   1165c:	7013      	strb	r3, [r2, #0]
	filter->addr_type_bitmask = 0;
   1165e:	7053      	strb	r3, [r2, #1]
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */

void ll_filter_reset(bool init)
{
	filter_clear(&wl);
	wl_anon = 0;
   11660:	4a12      	ldr	r2, [pc, #72]	; (116ac <ll_filter_reset+0x58>)
   11662:	7013      	strb	r3, [r2, #0]

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	rl_enable = 0;
   11664:	4a12      	ldr	r2, [pc, #72]	; (116b0 <ll_filter_reset+0x5c>)
   11666:	7013      	strb	r3, [r2, #0]
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   11668:	4a12      	ldr	r2, [pc, #72]	; (116b4 <ll_filter_reset+0x60>)
   1166a:	6011      	str	r1, [r2, #0]
	rpa_last_ms = -1;
   1166c:	4a12      	ldr	r2, [pc, #72]	; (116b8 <ll_filter_reset+0x64>)
}

static void rl_clear(void)
{
	for (int i = 0; i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE; i++) {
		rl[i].taken = 0;
   1166e:	4913      	ldr	r1, [pc, #76]	; (116bc <ll_filter_reset+0x68>)
	wl_anon = 0;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	rl_enable = 0;
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
	rpa_last_ms = -1;
   11670:	f04f 35ff 	mov.w	r5, #4294967295
   11674:	f04f 34ff 	mov.w	r4, #4294967295
   11678:	e9c2 4500 	strd	r4, r5, [r2]
}

static void rl_clear(void)
{
	for (int i = 0; i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE; i++) {
		rl[i].taken = 0;
   1167c:	2524      	movs	r5, #36	; 0x24
   1167e:	fb05 f203 	mul.w	r2, r5, r3
	radio_adv_data->last = last;
}

static void rl_clear(void)
{
	for (int i = 0; i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE; i++) {
   11682:	3301      	adds	r3, #1
		rl[i].taken = 0;
   11684:	5c8c      	ldrb	r4, [r1, r2]
	radio_adv_data->last = last;
}

static void rl_clear(void)
{
	for (int i = 0; i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE; i++) {
   11686:	2b08      	cmp	r3, #8
		rl[i].taken = 0;
   11688:	f36f 0400 	bfc	r4, #0, #1
   1168c:	548c      	strb	r4, [r1, r2]
	radio_adv_data->last = last;
}

static void rl_clear(void)
{
	for (int i = 0; i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE; i++) {
   1168e:	d1f6      	bne.n	1167e <ll_filter_reset+0x2a>
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	rl_enable = 0;
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
	rpa_last_ms = -1;
	rl_clear();
	if (init) {
   11690:	b120      	cbz	r0, 1169c <ll_filter_reset+0x48>
		k_delayed_work_init(&rpa_work, rpa_timeout);
   11692:	490b      	ldr	r1, [pc, #44]	; (116c0 <ll_filter_reset+0x6c>)
   11694:	480b      	ldr	r0, [pc, #44]	; (116c4 <ll_filter_reset+0x70>)
	} else {
		k_delayed_work_cancel(&rpa_work);
	}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */

}
   11696:	bc30      	pop	{r4, r5}
	rl_enable = 0;
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
	rpa_last_ms = -1;
	rl_clear();
	if (init) {
		k_delayed_work_init(&rpa_work, rpa_timeout);
   11698:	f002 b8a4 	b.w	137e4 <k_delayed_work_init>
	} else {
		k_delayed_work_cancel(&rpa_work);
   1169c:	4809      	ldr	r0, [pc, #36]	; (116c4 <ll_filter_reset+0x70>)
	}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */

}
   1169e:	bc30      	pop	{r4, r5}
	rpa_last_ms = -1;
	rl_clear();
	if (init) {
		k_delayed_work_init(&rpa_work, rpa_timeout);
	} else {
		k_delayed_work_cancel(&rpa_work);
   116a0:	f002 b8be 	b.w	13820 <k_delayed_work_cancel>
   116a4:	20001dad 	.word	0x20001dad
   116a8:	000dbba0 	.word	0x000dbba0
   116ac:	20002120 	.word	0x20002120
   116b0:	20001eff 	.word	0x20001eff
   116b4:	20002220 	.word	0x20002220
   116b8:	20002118 	.word	0x20002118
   116bc:	20001ddf 	.word	0x20001ddf
   116c0:	00011439 	.word	0x00011439
   116c4:	20002190 	.word	0x20002190

000116c8 <ll_adv_set_get>:
static struct ll_adv_set ll_adv;

struct ll_adv_set *ll_adv_set_get(void)
{
	return &ll_adv;
}
   116c8:	4800      	ldr	r0, [pc, #0]	; (116cc <ll_adv_set_get+0x4>)
   116ca:	4770      	bx	lr
   116cc:	20001f00 	.word	0x20001f00

000116d0 <ll_adv_params_set>:
u32_t ll_adv_params_set(u8_t handle, u16_t evt_prop, u32_t interval,
			u8_t adv_type, u8_t own_addr_type,
			u8_t direct_addr_type, u8_t const *const direct_addr,
			u8_t chl_map, u8_t filter_policy, u8_t *tx_pwr,
			u8_t phy_p, u8_t skip, u8_t phy_s, u8_t sid, u8_t sreq)
{
   116d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   116d4:	4d7f      	ldr	r5, [pc, #508]	; (118d4 <ll_adv_params_set+0x204>)
u32_t ll_adv_params_set(u8_t handle, u16_t evt_prop, u32_t interval,
			u8_t adv_type, u8_t own_addr_type,
			u8_t direct_addr_type, u8_t const *const direct_addr,
			u8_t chl_map, u8_t filter_policy, u8_t *tx_pwr,
			u8_t phy_p, u8_t skip, u8_t phy_s, u8_t sid, u8_t sreq)
{
   116d6:	b087      	sub	sp, #28
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   116d8:	6828      	ldr	r0, [r5, #0]
u32_t ll_adv_params_set(u8_t handle, u16_t evt_prop, u32_t interval,
			u8_t adv_type, u8_t own_addr_type,
			u8_t direct_addr_type, u8_t const *const direct_addr,
			u8_t chl_map, u8_t filter_policy, u8_t *tx_pwr,
			u8_t phy_p, u8_t skip, u8_t phy_s, u8_t sid, u8_t sreq)
{
   116da:	f89d 9040 	ldrb.w	r9, [sp, #64]	; 0x40
   116de:	f89d b044 	ldrb.w	fp, [sp, #68]	; 0x44
   116e2:	f89d a058 	ldrb.w	sl, [sp, #88]	; 0x58
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   116e6:	9004      	str	r0, [sp, #16]
u32_t ll_adv_params_set(u8_t handle, u16_t evt_prop, u32_t interval,
			u8_t adv_type, u8_t own_addr_type,
			u8_t direct_addr_type, u8_t const *const direct_addr,
			u8_t chl_map, u8_t filter_policy, u8_t *tx_pwr,
			u8_t phy_p, u8_t skip, u8_t phy_s, u8_t sid, u8_t sreq)
{
   116e8:	4698      	mov	r8, r3
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   116ea:	88ab      	ldrh	r3, [r5, #4]
   116ec:	f8ad 3014 	strh.w	r3, [sp, #20]
u32_t ll_adv_params_set(u8_t handle, u16_t evt_prop, u32_t interval,
			u8_t adv_type, u8_t own_addr_type,
			u8_t direct_addr_type, u8_t const *const direct_addr,
			u8_t chl_map, u8_t filter_policy, u8_t *tx_pwr,
			u8_t phy_p, u8_t skip, u8_t phy_s, u8_t sid, u8_t sreq)
{
   116f0:	460e      	mov	r6, r1
   116f2:	4614      	mov	r4, r2
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */

	struct radio_adv_data *radio_adv_data;
	struct pdu_adv *pdu;

	if (radio_adv_is_enabled()) {
   116f4:	f7fe fdb0 	bl	10258 <radio_adv_is_enabled>
   116f8:	4607      	mov	r7, r0
   116fa:	2800      	cmp	r0, #0
   116fc:	f040 80e3 	bne.w	118c6 <ll_adv_params_set+0x1f6>
#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
	/* TODO: check and fail (0x12, invalid HCI cmd param) if invalid
	 * evt_prop bits.
	 */

	ll_adv.phy_p = BIT(0);
   11700:	4975      	ldr	r1, [pc, #468]	; (118d8 <ll_adv_params_set+0x208>)
   11702:	7a0b      	ldrb	r3, [r1, #8]
   11704:	f04f 0e01 	mov.w	lr, #1
   11708:	f36e 0302 	bfi	r3, lr, #0, #3

	/* extended */
	if (adv_type > 0x04) {
   1170c:	f1b8 0f04 	cmp.w	r8, #4
#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
	/* TODO: check and fail (0x12, invalid HCI cmd param) if invalid
	 * evt_prop bits.
	 */

	ll_adv.phy_p = BIT(0);
   11710:	720b      	strb	r3, [r1, #8]

	/* extended */
	if (adv_type > 0x04) {
   11712:	d91e      	bls.n	11752 <ll_adv_params_set+0x82>
		/* legacy */
		if (evt_prop & BIT(4)) {
   11714:	f016 0f10 	tst.w	r6, #16
   11718:	f006 0303 	and.w	r3, r6, #3
   1171c:	d00a      	beq.n	11734 <ll_adv_params_set+0x64>
			u8_t const leg_adv_type[] = { 0x03, 0x04, 0x02, 0x00};

			adv_type = leg_adv_type[evt_prop & 0x03];
   1171e:	aa06      	add	r2, sp, #24

	/* extended */
	if (adv_type > 0x04) {
		/* legacy */
		if (evt_prop & BIT(4)) {
			u8_t const leg_adv_type[] = { 0x03, 0x04, 0x02, 0x00};
   11720:	f8d5 0006 	ldr.w	r0, [r5, #6]
   11724:	9003      	str	r0, [sp, #12]

			adv_type = leg_adv_type[evt_prop & 0x03];
   11726:	4413      	add	r3, r2

			/* high duty cycle directed */
			if (evt_prop & BIT(3)) {
   11728:	0735      	lsls	r5, r6, #28
	if (adv_type > 0x04) {
		/* legacy */
		if (evt_prop & BIT(4)) {
			u8_t const leg_adv_type[] = { 0x03, 0x04, 0x02, 0x00};

			adv_type = leg_adv_type[evt_prop & 0x03];
   1172a:	f813 8c0c 	ldrb.w	r8, [r3, #-12]

			/* high duty cycle directed */
			if (evt_prop & BIT(3)) {
   1172e:	d510      	bpl.n	11752 <ll_adv_params_set+0x82>
				adv_type = 0x01;
   11730:	46f0      	mov	r8, lr
   11732:	e013      	b.n	1175c <ll_adv_params_set+0x8c>
			}
		} else {
			/* - Connectable and scannable not allowed;
			 * - High duty cycle directed connectable not allowed
			 */
			if (((evt_prop & 0x03) == 0x03) ||
   11734:	2b03      	cmp	r3, #3
   11736:	f000 80c8 	beq.w	118ca <ll_adv_params_set+0x1fa>
   1173a:	f006 030c 	and.w	r3, r6, #12
   1173e:	2b0c      	cmp	r3, #12
   11740:	f000 80c3 	beq.w	118ca <ll_adv_params_set+0x1fa>
				return 0x12; /* invalid HCI cmd param */
			}

			adv_type = 0x05; /* PDU_ADV_TYPE_EXT_IND */

			ll_adv.phy_p = phy_p;
   11744:	7a0b      	ldrb	r3, [r1, #8]
   11746:	f36a 0302 	bfi	r3, sl, #0, #3
   1174a:	720b      	strb	r3, [r1, #8]
			if (((evt_prop & 0x03) == 0x03) ||
			    ((evt_prop & 0x0C) == 0x0C)) {
				return 0x12; /* invalid HCI cmd param */
			}

			adv_type = 0x05; /* PDU_ADV_TYPE_EXT_IND */
   1174c:	f04f 0805 	mov.w	r8, #5
   11750:	e002      	b.n	11758 <ll_adv_params_set+0x88>
	/* remember params so that set adv/scan data and adv enable
	 * interface can correctly update adv/scan data in the
	 * double buffer between caller and controller context.
	 */
	/* Set interval for Undirected or Low Duty Cycle Directed Advertising */
	if (adv_type != 0x01) {
   11752:	f1b8 0f01 	cmp.w	r8, #1
   11756:	d001      	beq.n	1175c <ll_adv_params_set+0x8c>
		ll_adv.interval = interval;
   11758:	60cc      	str	r4, [r1, #12]
   1175a:	e001      	b.n	11760 <ll_adv_params_set+0x90>
	} else {
		ll_adv.interval = 0;
   1175c:	2300      	movs	r3, #0
   1175e:	60cb      	str	r3, [r1, #12]
	}
	ll_adv.chl_map = chl_map;
   11760:	780b      	ldrb	r3, [r1, #0]
   11762:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
	ll_adv.filter_policy = filter_policy;
   11766:	9101      	str	r1, [sp, #4]
	if (adv_type != 0x01) {
		ll_adv.interval = interval;
	} else {
		ll_adv.interval = 0;
	}
	ll_adv.chl_map = chl_map;
   11768:	f360 0302 	bfi	r3, r0, #0, #3
	ll_adv.filter_policy = filter_policy;
   1176c:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
   11770:	f360 03c4 	bfi	r3, r0, #3, #2
   11774:	700b      	strb	r3, [r1, #0]

	/* update the "current" primary adv data */
	radio_adv_data = radio_adv_data_get();
   11776:	f7fe fd67 	bl	10248 <radio_adv_data_get>
   1177a:	4603      	mov	r3, r0
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   1177c:	f890 004f 	ldrb.w	r0, [r0, #79]	; 0x4f
	pdu->type = pdu_adv_type[adv_type];
	pdu->rfu = 0;

	if (IS_ENABLED(CONFIG_BLUETOOTH_CONTROLLER_CHAN_SEL_2) &&
   11780:	9901      	ldr	r1, [sp, #4]
	ll_adv.filter_policy = filter_policy;

	/* update the "current" primary adv data */
	radio_adv_data = radio_adv_data_get();
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
	pdu->type = pdu_adv_type[adv_type];
   11782:	aa06      	add	r2, sp, #24
	ll_adv.chl_map = chl_map;
	ll_adv.filter_policy = filter_policy;

	/* update the "current" primary adv data */
	radio_adv_data = radio_adv_data_get();
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   11784:	2527      	movs	r5, #39	; 0x27
   11786:	4345      	muls	r5, r0
	pdu->type = pdu_adv_type[adv_type];
   11788:	eb02 0008 	add.w	r0, r2, r8
   1178c:	5d5a      	ldrb	r2, [r3, r5]
   1178e:	f810 0c08 	ldrb.w	r0, [r0, #-8]
   11792:	f360 0203 	bfi	r2, r0, #0, #4
	pdu->rfu = 0;
   11796:	f36f 1204 	bfc	r2, #4, #1
   1179a:	555a      	strb	r2, [r3, r5]

	if (IS_ENABLED(CONFIG_BLUETOOTH_CONTROLLER_CHAN_SEL_2) &&
   1179c:	b2d2      	uxtb	r2, r2
   1179e:	f002 000f 	and.w	r0, r2, #15
   117a2:	2801      	cmp	r0, #1
	    ((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
	     (pdu->type == PDU_ADV_TYPE_DIRECT_IND))) {
		pdu->chan_sel = 1;
   117a4:	bf94      	ite	ls
   117a6:	f042 0220 	orrls.w	r2, r2, #32
	} else {
		pdu->chan_sel = 0;
   117aa:	f36f 1245 	bfchi	r2, #5, #1
   117ae:	555a      	strb	r2, [r3, r5]
	}

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	ll_adv.own_addr_type = own_addr_type;
   117b0:	784a      	ldrb	r2, [r1, #1]
   117b2:	4849      	ldr	r0, [pc, #292]	; (118d8 <ll_adv_params_set+0x208>)
   117b4:	f369 1246 	bfi	r2, r9, #5, #2
	if (own_addr_type >= BT_ADDR_LE_PUBLIC_ID) {
   117b8:	f1b9 0f01 	cmp.w	r9, #1
	ll_adv.chl_map = chl_map;
	ll_adv.filter_policy = filter_policy;

	/* update the "current" primary adv data */
	radio_adv_data = radio_adv_data_get();
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   117bc:	eb03 0405 	add.w	r4, r3, r5
	} else {
		pdu->chan_sel = 0;
	}

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	ll_adv.own_addr_type = own_addr_type;
   117c0:	704a      	strb	r2, [r1, #1]
	if (own_addr_type >= BT_ADDR_LE_PUBLIC_ID) {
   117c2:	d90a      	bls.n	117da <ll_adv_params_set+0x10a>
		ll_adv.id_addr_type = direct_addr_type;
   117c4:	7842      	ldrb	r2, [r0, #1]
		memcpy(&ll_adv.id_addr, direct_addr, BDADDR_SIZE);
   117c6:	9912      	ldr	r1, [sp, #72]	; 0x48
   117c8:	9301      	str	r3, [sp, #4]
	}

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	ll_adv.own_addr_type = own_addr_type;
	if (own_addr_type >= BT_ADDR_LE_PUBLIC_ID) {
		ll_adv.id_addr_type = direct_addr_type;
   117ca:	f36b 12c7 	bfi	r2, fp, #7, #1
   117ce:	7042      	strb	r2, [r0, #1]
		memcpy(&ll_adv.id_addr, direct_addr, BDADDR_SIZE);
   117d0:	2206      	movs	r2, #6
   117d2:	3002      	adds	r0, #2
   117d4:	f7ef fc5d 	bl	1092 <memcpy>
   117d8:	9b01      	ldr	r3, [sp, #4]
	}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */
	pdu->tx_addr = own_addr_type & 0x1;
   117da:	5d5a      	ldrb	r2, [r3, r5]
   117dc:	f009 0901 	and.w	r9, r9, #1
   117e0:	f369 1286 	bfi	r2, r9, #6, #1
	pdu->rx_addr = 0;
   117e4:	f36f 12c7 	bfc	r2, #7, #1
   117e8:	555a      	strb	r2, [r3, r5]
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   117ea:	b2d2      	uxtb	r2, r2
   117ec:	f002 010f 	and.w	r1, r2, #15
   117f0:	2901      	cmp	r1, #1
   117f2:	d10a      	bne.n	1180a <ll_adv_params_set+0x13a>
		pdu->rx_addr = direct_addr_type;
   117f4:	f36b 12c7 	bfi	r2, fp, #7, #1
   117f8:	555a      	strb	r2, [r3, r5]
		memcpy(&pdu->payload.direct_ind.tgt_addr[0], direct_addr,
   117fa:	9912      	ldr	r1, [sp, #72]	; 0x48
   117fc:	2206      	movs	r2, #6
   117fe:	f104 0008 	add.w	r0, r4, #8
   11802:	f7ef fc46 	bl	1092 <memcpy>
		       BDADDR_SIZE);
		pdu->len = sizeof(struct pdu_adv_payload_direct_ind);
   11806:	230c      	movs	r3, #12
   11808:	e045      	b.n	11896 <ll_adv_params_set+0x1c6>

#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
	} else if (pdu->type == PDU_ADV_TYPE_EXT_IND) {
   1180a:	2907      	cmp	r1, #7
   1180c:	d140      	bne.n	11890 <ll_adv_params_set+0x1c0>
		p = (void *)&pdu->payload.adv_ext_ind;
		h = (void *)p->ext_hdr_adi_adv_data;
		ptr = (u8_t *)h + sizeof(*h);

		/* No ACAD and no AdvData */
		p->ext_hdr_len = 0;
   1180e:	78a1      	ldrb	r1, [r4, #2]
		p->adv_mode = evt_prop & 0x03;
   11810:	f001 01c0 	and.w	r1, r1, #192	; 0xc0
   11814:	f366 1187 	bfi	r1, r6, #6, #2
   11818:	70a1      	strb	r1, [r4, #2]

		/* Zero-init header flags */
		*(u8_t *)h = 0;

		/* AdvA flag */
		if (!(evt_prop & BIT(5)) && !p->adv_mode && (phy_p != BIT(2))) {
   1181a:	06b0      	lsls	r0, r6, #26
		/* No ACAD and no AdvData */
		p->ext_hdr_len = 0;
		p->adv_mode = evt_prop & 0x03;

		/* Zero-init header flags */
		*(u8_t *)h = 0;
   1181c:	f04f 0100 	mov.w	r1, #0
		struct pdu_adv_payload_com_ext_adv *p;
		struct ext_adv_hdr *h;
		u8_t *ptr;
		u8_t len;

		p = (void *)&pdu->payload.adv_ext_ind;
   11820:	f104 0302 	add.w	r3, r4, #2
		h = (void *)p->ext_hdr_adi_adv_data;
		ptr = (u8_t *)h + sizeof(*h);
   11824:	f104 0204 	add.w	r2, r4, #4
		/* No ACAD and no AdvData */
		p->ext_hdr_len = 0;
		p->adv_mode = evt_prop & 0x03;

		/* Zero-init header flags */
		*(u8_t *)h = 0;
   11828:	70e1      	strb	r1, [r4, #3]

		/* AdvA flag */
		if (!(evt_prop & BIT(5)) && !p->adv_mode && (phy_p != BIT(2))) {
   1182a:	d40a      	bmi.n	11842 <ll_adv_params_set+0x172>
   1182c:	78a1      	ldrb	r1, [r4, #2]
   1182e:	f011 0fc0 	tst.w	r1, #192	; 0xc0
   11832:	d106      	bne.n	11842 <ll_adv_params_set+0x172>
   11834:	f1ba 0f04 	cmp.w	sl, #4
			/* TODO: optional on 1M */
			h->adv_addr = 1;
   11838:	bf1e      	ittt	ne
   1183a:	2201      	movne	r2, #1
   1183c:	70e2      	strbne	r2, [r4, #3]

			/* NOTE: AdvA is filled at enable */
			ptr += BDADDR_SIZE;
   1183e:	f104 020a 	addne.w	r2, r4, #10
		/* TODO: AuxPtr flag */

		/* TODO: SyncInfo flag */

		/* Tx Power flag */
		if (evt_prop & BIT(6)) {
   11842:	0671      	lsls	r1, r6, #25
			h->tx_pwr = 1;
   11844:	bf44      	itt	mi
   11846:	78e1      	ldrbmi	r1, [r4, #3]
			ptr++;
   11848:	3201      	addmi	r2, #1
		}

		/* Calc primary PDU len */
		len = ptr - (u8_t *)p;
   1184a:	eba2 0303 	sub.w	r3, r2, r3

		/* TODO: SyncInfo flag */

		/* Tx Power flag */
		if (evt_prop & BIT(6)) {
			h->tx_pwr = 1;
   1184e:	bf48      	it	mi
   11850:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
			ptr++;
		}

		/* Calc primary PDU len */
		len = ptr - (u8_t *)p;
   11854:	b2db      	uxtb	r3, r3

		/* TODO: SyncInfo flag */

		/* Tx Power flag */
		if (evt_prop & BIT(6)) {
			h->tx_pwr = 1;
   11856:	bf48      	it	mi
   11858:	70e1      	strbmi	r1, [r4, #3]
			ptr++;
		}

		/* Calc primary PDU len */
		len = ptr - (u8_t *)p;
		if (len > (offsetof(struct pdu_adv_payload_com_ext_adv,
   1185a:	2b02      	cmp	r3, #2
				    ext_hdr_adi_adv_data) + sizeof(*h))) {
			p->ext_hdr_len = len -
   1185c:	bf8a      	itet	hi
   1185e:	78a1      	ldrbhi	r1, [r4, #2]
				offsetof(struct pdu_adv_payload_com_ext_adv,
					 ext_hdr_adi_adv_data);
			pdu->len = len;
		} else {
			pdu->len = offsetof(struct pdu_adv_payload_com_ext_adv,
   11860:	2301      	movls	r3, #1

		/* Calc primary PDU len */
		len = ptr - (u8_t *)p;
		if (len > (offsetof(struct pdu_adv_payload_com_ext_adv,
				    ext_hdr_adi_adv_data) + sizeof(*h))) {
			p->ext_hdr_len = len -
   11862:	f103 30ff 	addhi.w	r0, r3, #4294967295
				offsetof(struct pdu_adv_payload_com_ext_adv,
					 ext_hdr_adi_adv_data);
			pdu->len = len;
		} else {
			pdu->len = offsetof(struct pdu_adv_payload_com_ext_adv,
   11866:	7063      	strb	r3, [r4, #1]
		/* TODO: AdvData */

		/* TODO: ACAD */

		/* Tx Power */
		if (h->tx_pwr) {
   11868:	78e3      	ldrb	r3, [r4, #3]

		/* Calc primary PDU len */
		len = ptr - (u8_t *)p;
		if (len > (offsetof(struct pdu_adv_payload_com_ext_adv,
				    ext_hdr_adi_adv_data) + sizeof(*h))) {
			p->ext_hdr_len = len -
   1186a:	bf84      	itt	hi
   1186c:	f360 0105 	bfihi	r1, r0, #0, #6
   11870:	70a1      	strbhi	r1, [r4, #2]
		/* TODO: AdvData */

		/* TODO: ACAD */

		/* Tx Power */
		if (h->tx_pwr) {
   11872:	065b      	lsls	r3, r3, #25
   11874:	d510      	bpl.n	11898 <ll_adv_params_set+0x1c8>
			u8_t _tx_pwr;

			_tx_pwr = 0;
			if (tx_pwr) {
   11876:	9b15      	ldr	r3, [sp, #84]	; 0x54
   11878:	b133      	cbz	r3, 11888 <ll_adv_params_set+0x1b8>
				if (*tx_pwr != 0x7F) {
   1187a:	781b      	ldrb	r3, [r3, #0]
   1187c:	2b7f      	cmp	r3, #127	; 0x7f
   1187e:	d104      	bne.n	1188a <ll_adv_params_set+0x1ba>
					_tx_pwr = *tx_pwr;
				} else {
					*tx_pwr = _tx_pwr;
   11880:	9915      	ldr	r1, [sp, #84]	; 0x54
   11882:	2300      	movs	r3, #0
   11884:	700b      	strb	r3, [r1, #0]
   11886:	e000      	b.n	1188a <ll_adv_params_set+0x1ba>

		/* Tx Power */
		if (h->tx_pwr) {
			u8_t _tx_pwr;

			_tx_pwr = 0;
   11888:	9b15      	ldr	r3, [sp, #84]	; 0x54
					*tx_pwr = _tx_pwr;
				}
			}

			ptr--;
			*ptr = _tx_pwr;
   1188a:	f802 3c01 	strb.w	r3, [r2, #-1]
   1188e:	e003      	b.n	11898 <ll_adv_params_set+0x1c8>
		/* NOTE: TargetA, filled at enable and RPA timeout */

		/* NOTE: AdvA, filled at enable and RPA timeout */
#endif /* CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */

	} else if (pdu->len == 0) {
   11890:	7863      	ldrb	r3, [r4, #1]
   11892:	b90b      	cbnz	r3, 11898 <ll_adv_params_set+0x1c8>
		pdu->len = BDADDR_SIZE;
   11894:	2306      	movs	r3, #6
   11896:	7063      	strb	r3, [r4, #1]
	}

	/* update the current scan data */
	radio_adv_data = radio_scan_data_get();
   11898:	f7fe fcda 	bl	10250 <radio_scan_data_get>
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   1189c:	f890 204f 	ldrb.w	r2, [r0, #79]	; 0x4f
   118a0:	2327      	movs	r3, #39	; 0x27
   118a2:	435a      	muls	r2, r3
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   118a4:	2404      	movs	r4, #4
   118a6:	5c83      	ldrb	r3, [r0, r2]
   118a8:	f364 0303 	bfi	r3, r4, #0, #4
	pdu->rfu = 0;
	pdu->chan_sel = 0;
	pdu->tx_addr = own_addr_type & 0x1;
   118ac:	f003 03cf 	and.w	r3, r3, #207	; 0xcf
   118b0:	f369 1386 	bfi	r3, r9, #6, #1
	pdu->rx_addr = 0;
   118b4:	f36f 13c7 	bfc	r3, #7, #1
		pdu->len = BDADDR_SIZE;
	}

	/* update the current scan data */
	radio_adv_data = radio_scan_data_get();
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   118b8:	1881      	adds	r1, r0, r2
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
	pdu->rfu = 0;
	pdu->chan_sel = 0;
	pdu->tx_addr = own_addr_type & 0x1;
	pdu->rx_addr = 0;
   118ba:	5483      	strb	r3, [r0, r2]
	if (pdu->len == 0) {
   118bc:	784b      	ldrb	r3, [r1, #1]
   118be:	b92b      	cbnz	r3, 118cc <ll_adv_params_set+0x1fc>
		pdu->len = BDADDR_SIZE;
   118c0:	2306      	movs	r3, #6
   118c2:	704b      	strb	r3, [r1, #1]
   118c4:	e002      	b.n	118cc <ll_adv_params_set+0x1fc>

	struct radio_adv_data *radio_adv_data;
	struct pdu_adv *pdu;

	if (radio_adv_is_enabled()) {
		return 0x0C; /* Command Disallowed */
   118c6:	270c      	movs	r7, #12
   118c8:	e000      	b.n	118cc <ll_adv_params_set+0x1fc>
			/* - Connectable and scannable not allowed;
			 * - High duty cycle directed connectable not allowed
			 */
			if (((evt_prop & 0x03) == 0x03) ||
			    ((evt_prop & 0x0C) == 0x0C)) {
				return 0x12; /* invalid HCI cmd param */
   118ca:	2712      	movs	r7, #18
	if (pdu->len == 0) {
		pdu->len = BDADDR_SIZE;
	}

	return 0;
}
   118cc:	4638      	mov	r0, r7
   118ce:	b007      	add	sp, #28
   118d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   118d4:	00013a36 	.word	0x00013a36
   118d8:	20001f00 	.word	0x20001f00

000118dc <ll_adv_data_set>:

void ll_adv_data_set(u8_t len, u8_t const *const data)
{
   118dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   118e0:	460f      	mov	r7, r1
   118e2:	4606      	mov	r6, r0
	struct pdu_adv *prev;
	struct pdu_adv *pdu;
	u8_t last;

	/* Dont update data if directed or extended advertising. */
	radio_adv_data = radio_adv_data_get();
   118e4:	f7fe fcb0 	bl	10248 <radio_adv_data_get>
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   118e8:	f890 504f 	ldrb.w	r5, [r0, #79]	; 0x4f
   118ec:	2227      	movs	r2, #39	; 0x27
   118ee:	436a      	muls	r2, r5
	struct pdu_adv *prev;
	struct pdu_adv *pdu;
	u8_t last;

	/* Dont update data if directed or extended advertising. */
	radio_adv_data = radio_adv_data_get();
   118f0:	4604      	mov	r4, r0
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
	if ((prev->type == PDU_ADV_TYPE_DIRECT_IND) ||
   118f2:	f810 e002 	ldrb.w	lr, [r0, r2]
   118f6:	f00e 030f 	and.w	r3, lr, #15
   118fa:	2b01      	cmp	r3, #1
	struct pdu_adv *pdu;
	u8_t last;

	/* Dont update data if directed or extended advertising. */
	radio_adv_data = radio_adv_data_get();
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   118fc:	eb00 0102 	add.w	r1, r0, r2
	if ((prev->type == PDU_ADV_TYPE_DIRECT_IND) ||
   11900:	d03e      	beq.n	11980 <ll_adv_data_set+0xa4>
   11902:	2b07      	cmp	r3, #7
   11904:	d03c      	beq.n	11980 <ll_adv_data_set+0xa4>
		 */
		return;
	}

	/* use the last index in double buffer, */
	if (radio_adv_data->first == radio_adv_data->last) {
   11906:	f890 304e 	ldrb.w	r3, [r0, #78]	; 0x4e
   1190a:	42ab      	cmp	r3, r5
   1190c:	d104      	bne.n	11918 <ll_adv_data_set+0x3c>
		last = radio_adv_data->last + 1;
   1190e:	3501      	adds	r5, #1
   11910:	b2ed      	uxtb	r5, r5
		if (last == DOUBLE_BUFFER_SIZE) {
			last = 0;
   11912:	2d02      	cmp	r5, #2
   11914:	bf08      	it	eq
   11916:	2500      	moveq	r5, #0
	} else {
		last = radio_adv_data->last;
	}

	/* update adv pdu fields. */
	pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
   11918:	2327      	movs	r3, #39	; 0x27
   1191a:	436b      	muls	r3, r5
   1191c:	eb04 0803 	add.w	r8, r4, r3
	pdu->type = prev->type;
   11920:	5ce0      	ldrb	r0, [r4, r3]
   11922:	f36e 0003 	bfi	r0, lr, #0, #4
	pdu->rfu = 0;
   11926:	f36f 1004 	bfc	r0, #4, #1
   1192a:	54e0      	strb	r0, [r4, r3]

	if (IS_ENABLED(CONFIG_BLUETOOTH_CONTROLLER_CHAN_SEL_2)) {
		pdu->chan_sel = prev->chan_sel;
   1192c:	5ca0      	ldrb	r0, [r4, r2]
   1192e:	f814 e003 	ldrb.w	lr, [r4, r3]
   11932:	f3c0 1040 	ubfx	r0, r0, #5, #1
   11936:	f360 1e45 	bfi	lr, r0, #5, #1
   1193a:	f804 e003 	strb.w	lr, [r4, r3]
	} else {
		pdu->chan_sel = 0;
	}

	pdu->tx_addr = prev->tx_addr;
   1193e:	5ca0      	ldrb	r0, [r4, r2]
   11940:	fa5f fe8e 	uxtb.w	lr, lr
   11944:	f3c0 1080 	ubfx	r0, r0, #6, #1
   11948:	f360 1e86 	bfi	lr, r0, #6, #1
   1194c:	f804 e003 	strb.w	lr, [r4, r3]
	pdu->rx_addr = prev->rx_addr;
   11950:	5ca2      	ldrb	r2, [r4, r2]
   11952:	fa5f f08e 	uxtb.w	r0, lr
   11956:	09d2      	lsrs	r2, r2, #7
   11958:	f362 10c7 	bfi	r0, r2, #7, #1
   1195c:	54e0      	strb	r0, [r4, r3]
	memcpy(&pdu->payload.adv_ind.addr[0],
   1195e:	2206      	movs	r2, #6
   11960:	3102      	adds	r1, #2
   11962:	f108 0002 	add.w	r0, r8, #2
   11966:	f7ef fb94 	bl	1092 <memcpy>
	       &prev->payload.adv_ind.addr[0], BDADDR_SIZE);
	memcpy(&pdu->payload.adv_ind.data[0], data, len);
   1196a:	4632      	mov	r2, r6
   1196c:	4639      	mov	r1, r7
   1196e:	f108 0008 	add.w	r0, r8, #8
	pdu->len = BDADDR_SIZE + len;
   11972:	3606      	adds	r6, #6

	pdu->tx_addr = prev->tx_addr;
	pdu->rx_addr = prev->rx_addr;
	memcpy(&pdu->payload.adv_ind.addr[0],
	       &prev->payload.adv_ind.addr[0], BDADDR_SIZE);
	memcpy(&pdu->payload.adv_ind.data[0], data, len);
   11974:	f7ef fb8d 	bl	1092 <memcpy>
	pdu->len = BDADDR_SIZE + len;
   11978:	f888 6001 	strb.w	r6, [r8, #1]

	/* commit the update so controller picks it. */
	radio_adv_data->last = last;
   1197c:	f884 504f 	strb.w	r5, [r4, #79]	; 0x4f
   11980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00011984 <ll_scan_data_set>:
}

void ll_scan_data_set(u8_t len, u8_t const *const data)
{
   11984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11988:	4606      	mov	r6, r0
   1198a:	460f      	mov	r7, r1
	struct pdu_adv *prev;
	struct pdu_adv *pdu;
	u8_t last;

	/* use the last index in double buffer, */
	radio_scan_data = radio_scan_data_get();
   1198c:	f7fe fc60 	bl	10250 <radio_scan_data_get>
	if (radio_scan_data->first == radio_scan_data->last) {
   11990:	f890 304e 	ldrb.w	r3, [r0, #78]	; 0x4e
   11994:	f890 204f 	ldrb.w	r2, [r0, #79]	; 0x4f
   11998:	4293      	cmp	r3, r2
	struct pdu_adv *prev;
	struct pdu_adv *pdu;
	u8_t last;

	/* use the last index in double buffer, */
	radio_scan_data = radio_scan_data_get();
   1199a:	4604      	mov	r4, r0
	if (radio_scan_data->first == radio_scan_data->last) {
   1199c:	d105      	bne.n	119aa <ll_scan_data_set+0x26>
		last = radio_scan_data->last + 1;
   1199e:	1c55      	adds	r5, r2, #1
   119a0:	b2ed      	uxtb	r5, r5
		if (last == DOUBLE_BUFFER_SIZE) {
   119a2:	2d02      	cmp	r5, #2
			last = 0;
   119a4:	bf08      	it	eq
   119a6:	2500      	moveq	r5, #0
   119a8:	e000      	b.n	119ac <ll_scan_data_set+0x28>
   119aa:	4615      	mov	r5, r2
	} else {
		last = radio_scan_data->last;
	}

	/* update scan pdu fields. */
	prev = (struct pdu_adv *)
   119ac:	2327      	movs	r3, #39	; 0x27
   119ae:	435a      	muls	r2, r3
	       &radio_scan_data->data[radio_scan_data->last][0];
	pdu = (struct pdu_adv *)&radio_scan_data->data[last][0];
   119b0:	436b      	muls	r3, r5
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   119b2:	f04f 0e04 	mov.w	lr, #4
   119b6:	5ce0      	ldrb	r0, [r4, r3]
   119b8:	f36e 0003 	bfi	r0, lr, #0, #4
	pdu->rfu = 0;
	pdu->chan_sel = 0;
   119bc:	f000 00ef 	and.w	r0, r0, #239	; 0xef
   119c0:	f36f 1045 	bfc	r0, #5, #1
   119c4:	54e0      	strb	r0, [r4, r3]
	pdu->tx_addr = prev->tx_addr;
   119c6:	5ca0      	ldrb	r0, [r4, r2]
	} else {
		last = radio_scan_data->last;
	}

	/* update scan pdu fields. */
	prev = (struct pdu_adv *)
   119c8:	18a1      	adds	r1, r4, r2
	       &radio_scan_data->data[radio_scan_data->last][0];
	pdu = (struct pdu_adv *)&radio_scan_data->data[last][0];
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
	pdu->rfu = 0;
	pdu->chan_sel = 0;
	pdu->tx_addr = prev->tx_addr;
   119ca:	5ce2      	ldrb	r2, [r4, r3]
   119cc:	f3c0 1080 	ubfx	r0, r0, #6, #1
   119d0:	f360 1286 	bfi	r2, r0, #6, #1
	}

	/* update scan pdu fields. */
	prev = (struct pdu_adv *)
	       &radio_scan_data->data[radio_scan_data->last][0];
	pdu = (struct pdu_adv *)&radio_scan_data->data[last][0];
   119d4:	eb04 0803 	add.w	r8, r4, r3
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
	pdu->rfu = 0;
	pdu->chan_sel = 0;
	pdu->tx_addr = prev->tx_addr;
	pdu->rx_addr = 0;
   119d8:	f36f 12c7 	bfc	r2, #7, #1
   119dc:	54e2      	strb	r2, [r4, r3]
	pdu->len = BDADDR_SIZE + len;
   119de:	1db3      	adds	r3, r6, #6
   119e0:	f888 3001 	strb.w	r3, [r8, #1]
	memcpy(&pdu->payload.scan_rsp.addr[0],
   119e4:	2206      	movs	r2, #6
   119e6:	3102      	adds	r1, #2
   119e8:	f108 0002 	add.w	r0, r8, #2
   119ec:	f7ef fb51 	bl	1092 <memcpy>
	       &prev->payload.scan_rsp.addr[0], BDADDR_SIZE);
	memcpy(&pdu->payload.scan_rsp.data[0], data, len);
   119f0:	4632      	mov	r2, r6
   119f2:	4639      	mov	r1, r7
   119f4:	f108 0008 	add.w	r0, r8, #8
   119f8:	f7ef fb4b 	bl	1092 <memcpy>

	/* commit the update so controller picks it. */
	radio_scan_data->last = last;
   119fc:	f884 504f 	strb.w	r5, [r4, #79]	; 0x4f
   11a00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00011a04 <ll_adv_enable>:
}

u32_t ll_adv_enable(u8_t enable)
{
   11a04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct radio_adv_data *radio_adv_data;
	struct pdu_adv *pdu_scan;
	struct pdu_adv *pdu_adv;
	u32_t status;

	if (!enable) {
   11a08:	b918      	cbnz	r0, 11a12 <ll_adv_enable+0xe>
	status = radio_adv_enable(ll_adv.interval, ll_adv.chl_map,
				  ll_adv.filter_policy);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */

	return status;
}
   11a0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	struct pdu_adv *pdu_scan;
	struct pdu_adv *pdu_adv;
	u32_t status;

	if (!enable) {
		status = radio_adv_disable();
   11a0e:	f7ff b895 	b.w	10b3c <radio_adv_disable>
	 */

	/* remember addr to use and also update the addr in
	 * both adv and scan response PDUs.
	 */
	radio_adv_data = radio_adv_data_get();
   11a12:	f7fe fc19 	bl	10248 <radio_adv_data_get>
   11a16:	4605      	mov	r5, r0
	radio_scan_data = radio_scan_data_get();
   11a18:	f7fe fc1a 	bl	10250 <radio_scan_data_get>
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
   11a1c:	f895 404f 	ldrb.w	r4, [r5, #79]	; 0x4f
   11a20:	4e2c      	ldr	r6, [pc, #176]	; (11ad4 <ll_adv_enable+0xd0>)
   11a22:	2327      	movs	r3, #39	; 0x27
   11a24:	435c      	muls	r4, r3
   11a26:	eb05 0804 	add.w	r8, r5, r4
			[radio_scan_data->last][0];

	if (0) {

#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
	} else if (pdu_adv->type == PDU_ADV_TYPE_EXT_IND) {
   11a2a:	5d2a      	ldrb	r2, [r5, r4]
   11a2c:	f002 010f 	and.w	r1, r2, #15
   11a30:	2907      	cmp	r1, #7
   11a32:	d10d      	bne.n	11a50 <ll_adv_enable+0x4c>
		p = (void *)&pdu_adv->payload.adv_ext_ind;
		h = (void *)p->ext_hdr_adi_adv_data;
		ptr = (u8_t *)h + sizeof(*h);

		/* AdvA, fill here at enable */
		if (h->adv_addr) {
   11a34:	f898 3003 	ldrb.w	r3, [r8, #3]
   11a38:	07db      	lsls	r3, r3, #31
   11a3a:	d525      	bpl.n	11a88 <ll_adv_enable+0x84>
			memcpy(ptr, ll_addr_get(pdu_adv->tx_addr, NULL),
   11a3c:	2100      	movs	r1, #0
   11a3e:	f3c2 1080 	ubfx	r0, r2, #6, #1
   11a42:	f7ff fab5 	bl	10fb0 <ll_addr_get>
   11a46:	2206      	movs	r2, #6
   11a48:	4601      	mov	r1, r0
   11a4a:	f108 0004 	add.w	r0, r8, #4
   11a4e:	e03d      	b.n	11acc <ll_adv_enable+0xc8>
	 */
	radio_adv_data = radio_adv_data_get();
	radio_scan_data = radio_scan_data_get();
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
			[radio_adv_data->last][0];
	pdu_scan = (struct pdu_adv *)&radio_scan_data->data
   11a50:	f890 704f 	ldrb.w	r7, [r0, #79]	; 0x4f
   11a54:	fb03 0707 	mla	r7, r3, r7, r0
		/* TODO: TargetA, fill here at enable */
#endif /* CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */
	} else {
		bool priv = false;
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
		if (ctrl_rl_enabled()) {
   11a58:	f7ff fba0 	bl	1119c <ctrl_rl_enabled>
			/*@todo: Enable AR */
		}

		if (ll_adv.own_addr_type >= BT_ADDR_LE_PUBLIC_ID) {
   11a5c:	7870      	ldrb	r0, [r6, #1]
   11a5e:	f3c0 1341 	ubfx	r3, r0, #5, #2
   11a62:	2b01      	cmp	r3, #1
   11a64:	dd1d      	ble.n	11aa2 <ll_adv_enable+0x9e>
			/* Look up the resolving list */
			int idx = ll_rl_idx_find(ll_adv.id_addr_type,
   11a66:	1cb1      	adds	r1, r6, #2
   11a68:	09c0      	lsrs	r0, r0, #7
   11a6a:	f7ff fb73 	bl	11154 <ll_rl_idx_find>
						 ll_adv.id_addr);

			if (idx >= 0) {
   11a6e:	1e04      	subs	r4, r0, #0
   11a70:	db02      	blt.n	11a78 <ll_adv_enable+0x74>
				/* Generate RPAs if required */
				ll_rl_rpa_update(false);
   11a72:	2000      	movs	r0, #0
   11a74:	f7ff fc08 	bl	11288 <ll_rl_rpa_update>
			}

			ll_rl_pdu_adv_update(idx, pdu_adv);
   11a78:	4641      	mov	r1, r8
   11a7a:	4620      	mov	r0, r4
   11a7c:	f7ff fb96 	bl	111ac <ll_rl_pdu_adv_update>
			ll_rl_pdu_adv_update(idx, pdu_scan);
   11a80:	4639      	mov	r1, r7
   11a82:	4620      	mov	r0, r4
   11a84:	f7ff fb92 	bl	111ac <ll_rl_pdu_adv_update>
			       ll_addr_get(pdu_adv->tx_addr, NULL), BDADDR_SIZE);
		}
	}
#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
	status = radio_adv_enable(ll_adv.phy_p, ll_adv.interval, ll_adv.chl_map,
				  ll_adv.filter_policy);
   11a88:	7832      	ldrb	r2, [r6, #0]
			memcpy(&pdu_scan->payload.scan_rsp.addr[0],
			       ll_addr_get(pdu_adv->tx_addr, NULL), BDADDR_SIZE);
		}
	}
#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
	status = radio_adv_enable(ll_adv.phy_p, ll_adv.interval, ll_adv.chl_map,
   11a8a:	7a30      	ldrb	r0, [r6, #8]
   11a8c:	89b1      	ldrh	r1, [r6, #12]
   11a8e:	f3c2 03c1 	ubfx	r3, r2, #3, #2
   11a92:	f000 0007 	and.w	r0, r0, #7
   11a96:	f002 0207 	and.w	r2, r2, #7
	status = radio_adv_enable(ll_adv.interval, ll_adv.chl_map,
				  ll_adv.filter_policy);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */

	return status;
}
   11a9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			memcpy(&pdu_scan->payload.scan_rsp.addr[0],
			       ll_addr_get(pdu_adv->tx_addr, NULL), BDADDR_SIZE);
		}
	}
#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
	status = radio_adv_enable(ll_adv.phy_p, ll_adv.interval, ll_adv.chl_map,
   11a9e:	f7fe becf 	b.w	10840 <radio_adv_enable>
			priv = true;
		}
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */
		if (!priv) {
			memcpy(&pdu_adv->payload.adv_ind.addr[0],
			       ll_addr_get(pdu_adv->tx_addr, NULL), BDADDR_SIZE);
   11aa2:	5d28      	ldrb	r0, [r5, r4]
   11aa4:	2100      	movs	r1, #0
   11aa6:	f3c0 1080 	ubfx	r0, r0, #6, #1
   11aaa:	f7ff fa81 	bl	10fb0 <ll_addr_get>
			ll_rl_pdu_adv_update(idx, pdu_scan);
			priv = true;
		}
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */
		if (!priv) {
			memcpy(&pdu_adv->payload.adv_ind.addr[0],
   11aae:	2206      	movs	r2, #6
   11ab0:	4601      	mov	r1, r0
   11ab2:	f108 0002 	add.w	r0, r8, #2
   11ab6:	f7ef faec 	bl	1092 <memcpy>
			       ll_addr_get(pdu_adv->tx_addr, NULL), BDADDR_SIZE);
			memcpy(&pdu_scan->payload.scan_rsp.addr[0],
			       ll_addr_get(pdu_adv->tx_addr, NULL), BDADDR_SIZE);
   11aba:	5d28      	ldrb	r0, [r5, r4]
   11abc:	2100      	movs	r1, #0
   11abe:	f3c0 1080 	ubfx	r0, r0, #6, #1
   11ac2:	f7ff fa75 	bl	10fb0 <ll_addr_get>
		}
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */
		if (!priv) {
			memcpy(&pdu_adv->payload.adv_ind.addr[0],
			       ll_addr_get(pdu_adv->tx_addr, NULL), BDADDR_SIZE);
			memcpy(&pdu_scan->payload.scan_rsp.addr[0],
   11ac6:	2206      	movs	r2, #6
   11ac8:	4601      	mov	r1, r0
   11aca:	1cb8      	adds	r0, r7, #2
   11acc:	f7ef fae1 	bl	1092 <memcpy>
   11ad0:	e7da      	b.n	11a88 <ll_adv_enable+0x84>
   11ad2:	bf00      	nop
   11ad4:	20001f00 	.word	0x20001f00

00011ad8 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   11ad8:	4b02      	ldr	r3, [pc, #8]	; (11ae4 <net_buf_pool_get+0xc>)
   11ada:	2224      	movs	r2, #36	; 0x24
   11adc:	fb02 3000 	mla	r0, r2, r0, r3
   11ae0:	4770      	bx	lr
   11ae2:	bf00      	nop
   11ae4:	2000079c 	.word	0x2000079c

00011ae8 <net_buf_alloc>:
struct net_buf *net_buf_alloc_debug(struct net_buf_pool *pool, s32_t timeout,
				    const char *func, int line)
#else
struct net_buf *net_buf_alloc(struct net_buf_pool *pool, s32_t timeout)
#endif
{
   11ae8:	b538      	push	{r3, r4, r5, lr}
   11aea:	4604      	mov	r4, r0
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M)
	unsigned int tmp;

	__asm__ volatile(
   11aec:	f04f 0320 	mov.w	r3, #32
   11af0:	f3ef 8511 	mrs	r5, BASEPRI
   11af4:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   11af8:	8ac3      	ldrh	r3, [r0, #22]
   11afa:	b33b      	cbz	r3, 11b4c <net_buf_alloc+0x64>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   11afc:	8a82      	ldrh	r2, [r0, #20]
   11afe:	429a      	cmp	r2, r3
   11b00:	d906      	bls.n	11b10 <net_buf_alloc+0x28>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
   11b02:	2100      	movs	r1, #0
   11b04:	f001 f956 	bl	12db4 <k_queue_get>
			if (buf) {
   11b08:	b110      	cbz	r0, 11b10 <net_buf_alloc+0x28>
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   11b0a:	f385 8811 	msr	BASEPRI, r5
   11b0e:	e022      	b.n	11b56 <net_buf_alloc+0x6e>
				irq_unlock(key);
				goto success;
			}
		}

		uninit_count = pool->uninit_count--;
   11b10:	8ae1      	ldrh	r1, [r4, #22]
   11b12:	1e4b      	subs	r3, r1, #1
   11b14:	82e3      	strh	r3, [r4, #22]
   11b16:	f385 8811 	msr	BASEPRI, r5
static inline struct net_buf *pool_get_uninit(struct net_buf_pool *pool,
					      u16_t uninit_count)
{
	struct net_buf *buf;

	buf = UNINIT_BUF(pool, pool->buf_count - uninit_count);
   11b1a:	8b20      	ldrh	r0, [r4, #24]
   11b1c:	8b63      	ldrh	r3, [r4, #26]
   11b1e:	8aa2      	ldrh	r2, [r4, #20]
   11b20:	3003      	adds	r0, #3
   11b22:	3303      	adds	r3, #3
   11b24:	f023 0303 	bic.w	r3, r3, #3
   11b28:	f020 0003 	bic.w	r0, r0, #3
   11b2c:	4418      	add	r0, r3
   11b2e:	f100 0310 	add.w	r3, r0, #16
   11b32:	1a50      	subs	r0, r2, r1
   11b34:	6a22      	ldr	r2, [r4, #32]
   11b36:	fb00 2003 	mla	r0, r0, r3, r2

	buf->pool_id = pool_id(pool);
   11b3a:	4b0c      	ldr	r3, [pc, #48]	; (11b6c <net_buf_alloc+0x84>)
   11b3c:	4a0c      	ldr	r2, [pc, #48]	; (11b70 <net_buf_alloc+0x88>)
   11b3e:	1ae3      	subs	r3, r4, r3
   11b40:	109b      	asrs	r3, r3, #2
   11b42:	4353      	muls	r3, r2
   11b44:	7183      	strb	r3, [r0, #6]
	buf->size = pool->buf_size;
   11b46:	8b23      	ldrh	r3, [r4, #24]
   11b48:	81c3      	strh	r3, [r0, #14]

		uninit_count = pool->uninit_count--;
		irq_unlock(key);

		buf = pool_get_uninit(pool, uninit_count);
		goto success;
   11b4a:	e004      	b.n	11b56 <net_buf_alloc+0x6e>
   11b4c:	f385 8811 	msr	BASEPRI, r5
		}
	} else {
		buf = k_lifo_get(&pool->free, timeout);
	}
#else
	buf = k_lifo_get(&pool->free, timeout);
   11b50:	f001 f930 	bl	12db4 <k_queue_get>
#endif
	if (!buf) {
   11b54:	b140      	cbz	r0, 11b68 <net_buf_alloc+0x80>
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	buf->ref   = 1;
   11b56:	2301      	movs	r3, #1
   11b58:	7103      	strb	r3, [r0, #4]
	buf->flags = 0;
   11b5a:	2300      	movs	r3, #0
   11b5c:	7143      	strb	r3, [r0, #5]
	buf->frags = NULL;
   11b5e:	6003      	str	r3, [r0, #0]
void net_buf_reset(struct net_buf *buf)
{
	NET_BUF_ASSERT(buf->flags == 0);
	NET_BUF_ASSERT(buf->frags == NULL);

	buf->len   = 0;
   11b60:	8183      	strh	r3, [r0, #12]
	buf->data  = buf->__buf;
   11b62:	f100 0310 	add.w	r3, r0, #16
   11b66:	6083      	str	r3, [r0, #8]
	pool->avail_count--;
	NET_BUF_ASSERT(pool->avail_count >= 0);
#endif

	return buf;
}
   11b68:	bd38      	pop	{r3, r4, r5, pc}
   11b6a:	bf00      	nop
   11b6c:	2000079c 	.word	0x2000079c
   11b70:	38e38e39 	.word	0x38e38e39

00011b74 <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, s32_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, s32_t timeout)
#endif
{
   11b74:	b570      	push	{r4, r5, r6, lr}
   11b76:	4606      	mov	r6, r0
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p timeout %d", func, line, fifo, timeout);

	buf = k_fifo_get(fifo, timeout);
   11b78:	f001 f91c 	bl	12db4 <k_queue_get>
	if (!buf) {
   11b7c:	4605      	mov	r5, r0
   11b7e:	b180      	cbz	r0, 11ba2 <net_buf_get+0x2e>
   11b80:	4604      	mov	r4, r0
	}

	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   11b82:	7963      	ldrb	r3, [r4, #5]
   11b84:	f013 0301 	ands.w	r3, r3, #1
   11b88:	d00a      	beq.n	11ba0 <net_buf_get+0x2c>
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   11b8a:	2100      	movs	r1, #0
   11b8c:	4630      	mov	r0, r6
   11b8e:	f001 f911 	bl	12db4 <k_queue_get>
		NET_BUF_ASSERT(frag->frags);

		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
   11b92:	7963      	ldrb	r3, [r4, #5]

	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   11b94:	6020      	str	r0, [r4, #0]
		NET_BUF_ASSERT(frag->frags);

		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
   11b96:	f023 0301 	bic.w	r3, r3, #1
   11b9a:	7163      	strb	r3, [r4, #5]
	}

	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   11b9c:	4604      	mov	r4, r0
   11b9e:	e7f0      	b.n	11b82 <net_buf_get+0xe>
		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   11ba0:	6023      	str	r3, [r4, #0]

	return buf;
}
   11ba2:	4628      	mov	r0, r5
   11ba4:	bd70      	pop	{r4, r5, r6, pc}

00011ba6 <net_buf_reserve>:
{
	NET_BUF_ASSERT(buf);
	NET_BUF_ASSERT(buf->len == 0);
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   11ba6:	f100 0310 	add.w	r3, r0, #16
   11baa:	4419      	add	r1, r3
   11bac:	6081      	str	r1, [r0, #8]
   11bae:	4770      	bx	lr

00011bb0 <net_buf_put>:
}

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   11bb0:	b410      	push	{r4}
	struct net_buf *tail;

	NET_BUF_ASSERT(fifo);
	NET_BUF_ASSERT(buf);

	for (tail = buf; tail->frags; tail = tail->frags) {
   11bb2:	460a      	mov	r2, r1
   11bb4:	6814      	ldr	r4, [r2, #0]
   11bb6:	b12c      	cbz	r4, 11bc4 <net_buf_put+0x14>
		tail->flags |= NET_BUF_FRAGS;
   11bb8:	7953      	ldrb	r3, [r2, #5]
   11bba:	f043 0301 	orr.w	r3, r3, #1
   11bbe:	7153      	strb	r3, [r2, #5]
   11bc0:	4622      	mov	r2, r4
   11bc2:	e7f7      	b.n	11bb4 <net_buf_put+0x4>
	}

	k_fifo_put_list(fifo, buf, tail);
}
   11bc4:	bc10      	pop	{r4}

	for (tail = buf; tail->frags; tail = tail->frags) {
		tail->flags |= NET_BUF_FRAGS;
	}

	k_fifo_put_list(fifo, buf, tail);
   11bc6:	f001 b8ad 	b.w	12d24 <k_queue_append_list>
	...

00011bcc <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   11bcc:	b570      	push	{r4, r5, r6, lr}
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		pool->avail_count++;
		NET_BUF_ASSERT(pool->avail_count <= pool->buf_count);
#endif

		if (pool->destroy) {
   11bce:	4c0c      	ldr	r4, [pc, #48]	; (11c00 <net_buf_unref+0x34>)
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   11bd0:	4601      	mov	r1, r0
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		pool->avail_count++;
		NET_BUF_ASSERT(pool->avail_count <= pool->buf_count);
#endif

		if (pool->destroy) {
   11bd2:	2524      	movs	r5, #36	; 0x24
void net_buf_unref(struct net_buf *buf)
#endif
{
	NET_BUF_ASSERT(buf);

	while (buf) {
   11bd4:	b191      	cbz	r1, 11bfc <net_buf_unref+0x30>
		}
#endif
		NET_BUF_DBG("buf %p ref %u pool_id %u frags %p", buf, buf->ref,
			    buf->pool_id, buf->frags);

		if (--buf->ref > 0) {
   11bd6:	790b      	ldrb	r3, [r1, #4]
#endif
{
	NET_BUF_ASSERT(buf);

	while (buf) {
		struct net_buf *frags = buf->frags;
   11bd8:	680e      	ldr	r6, [r1, #0]
		}
#endif
		NET_BUF_DBG("buf %p ref %u pool_id %u frags %p", buf, buf->ref,
			    buf->pool_id, buf->frags);

		if (--buf->ref > 0) {
   11bda:	3b01      	subs	r3, #1
   11bdc:	b2db      	uxtb	r3, r3
   11bde:	710b      	strb	r3, [r1, #4]
   11be0:	b963      	cbnz	r3, 11bfc <net_buf_unref+0x30>
			return;
		}

		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
   11be2:	7988      	ldrb	r0, [r1, #6]

		if (--buf->ref > 0) {
			return;
		}

		buf->frags = NULL;
   11be4:	600b      	str	r3, [r1, #0]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		pool->avail_count++;
		NET_BUF_ASSERT(pool->avail_count <= pool->buf_count);
#endif

		if (pool->destroy) {
   11be6:	fb05 4000 	mla	r0, r5, r0, r4
   11bea:	69c3      	ldr	r3, [r0, #28]
   11bec:	b113      	cbz	r3, 11bf4 <net_buf_unref+0x28>
			pool->destroy(buf);
   11bee:	4608      	mov	r0, r1
   11bf0:	4798      	blx	r3
   11bf2:	e001      	b.n	11bf8 <net_buf_unref+0x2c>
 */
static inline void net_buf_destroy(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);

	k_lifo_put(&pool->free, buf);
   11bf4:	f001 f892 	bl	12d1c <k_queue_prepend>
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   11bf8:	4631      	mov	r1, r6
   11bfa:	e7eb      	b.n	11bd4 <net_buf_unref+0x8>
   11bfc:	bd70      	pop	{r4, r5, r6, pc}
   11bfe:	bf00      	nop
   11c00:	2000079c 	.word	0x2000079c

00011c04 <net_buf_ref>:
{
	NET_BUF_ASSERT(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   11c04:	7903      	ldrb	r3, [r0, #4]
   11c06:	3301      	adds	r3, #1
   11c08:	7103      	strb	r3, [r0, #4]
	return buf;
}
   11c0a:	4770      	bx	lr

00011c0c <net_buf_simple_add>:
 *
 *  @return Tail pointer for the buffer.
 */
static inline u8_t *net_buf_simple_tail(struct net_buf_simple *buf)
{
	return buf->data + buf->len;
   11c0c:	8883      	ldrh	r3, [r0, #4]
   11c0e:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   11c10:	4419      	add	r1, r3
   11c12:	8081      	strh	r1, [r0, #4]
	return tail;
}
   11c14:	18d0      	adds	r0, r2, r3
   11c16:	4770      	bx	lr

00011c18 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   11c18:	b430      	push	{r4, r5}
   11c1a:	8883      	ldrh	r3, [r0, #4]
   11c1c:	6804      	ldr	r4, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   11c1e:	189d      	adds	r5, r3, r2
   11c20:	8085      	strh	r5, [r0, #4]
void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   11c22:	18e0      	adds	r0, r4, r3
}
   11c24:	bc30      	pop	{r4, r5}
void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   11c26:	f7ef ba34 	b.w	1092 <memcpy>

00011c2a <net_buf_simple_add_u8>:
   11c2a:	8883      	ldrh	r3, [r0, #4]
   11c2c:	6802      	ldr	r2, [r0, #0]
}

u8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, u8_t val)
{
   11c2e:	b510      	push	{r4, lr}

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   11c30:	1c5c      	adds	r4, r3, #1
   11c32:	8084      	strh	r4, [r0, #4]
	u8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   11c34:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   11c36:	18d0      	adds	r0, r2, r3
   11c38:	bd10      	pop	{r4, pc}

00011c3a <net_buf_simple_push>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   11c3a:	6803      	ldr	r3, [r0, #0]
	buf->len += len;
   11c3c:	8882      	ldrh	r2, [r0, #4]
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   11c3e:	1a5b      	subs	r3, r3, r1
	buf->len += len;
   11c40:	4411      	add	r1, r2
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   11c42:	6003      	str	r3, [r0, #0]
	buf->len += len;
   11c44:	8081      	strh	r1, [r0, #4]
	return buf->data;
}
   11c46:	4618      	mov	r0, r3
   11c48:	4770      	bx	lr

00011c4a <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(buf->len >= len);

	buf->len -= len;
   11c4a:	8883      	ldrh	r3, [r0, #4]
   11c4c:	1a5b      	subs	r3, r3, r1
   11c4e:	8083      	strh	r3, [r0, #4]
	return buf->data += len;
   11c50:	6803      	ldr	r3, [r0, #0]
   11c52:	4419      	add	r1, r3
   11c54:	6001      	str	r1, [r0, #0]
}
   11c56:	4608      	mov	r0, r1
   11c58:	4770      	bx	lr

00011c5a <net_buf_simple_pull_u8>:

u8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
   11c5a:	b508      	push	{r3, lr}
	u8_t val;

	val = buf->data[0];
   11c5c:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, 1);
   11c5e:	2101      	movs	r1, #1

u8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
	u8_t val;

	val = buf->data[0];
   11c60:	781a      	ldrb	r2, [r3, #0]
	net_buf_simple_pull(buf, 1);
   11c62:	f7ff fff2 	bl	11c4a <net_buf_simple_pull>

	return val;
}
   11c66:	4610      	mov	r0, r2
   11c68:	bd08      	pop	{r3, pc}

00011c6a <net_buf_simple_pull_le16>:

u16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   11c6a:	b508      	push	{r3, lr}
	u16_t val;

	val = UNALIGNED_GET((u16_t *)buf->data);
   11c6c:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, sizeof(val));
   11c6e:	2102      	movs	r1, #2

u16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
	u16_t val;

	val = UNALIGNED_GET((u16_t *)buf->data);
   11c70:	881a      	ldrh	r2, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   11c72:	f7ff ffea 	bl	11c4a <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   11c76:	4610      	mov	r0, r2
   11c78:	bd08      	pop	{r3, pc}

00011c7a <net_buf_simple_headroom>:
	return sys_be32_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   11c7a:	f100 0308 	add.w	r3, r0, #8
   11c7e:	6800      	ldr	r0, [r0, #0]
}
   11c80:	1ac0      	subs	r0, r0, r3
   11c82:	4770      	bx	lr

00011c84 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   11c84:	6803      	ldr	r3, [r0, #0]
   11c86:	88c2      	ldrh	r2, [r0, #6]
	return sys_be32_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   11c88:	f100 0108 	add.w	r1, r0, #8
}

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   11c8c:	1a5b      	subs	r3, r3, r1
   11c8e:	8880      	ldrh	r0, [r0, #4]
   11c90:	1ad3      	subs	r3, r2, r3
}
   11c92:	1a18      	subs	r0, r3, r0
   11c94:	4770      	bx	lr
	...

00011c98 <ftpan_32>:
	return false;
}

static bool ftpan_36(void)
{
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
   11c98:	4b0c      	ldr	r3, [pc, #48]	; (11ccc <ftpan_32+0x34>)
   11c9a:	781b      	ldrb	r3, [r3, #0]
   11c9c:	2b06      	cmp	r3, #6
   11c9e:	d112      	bne.n	11cc6 <ftpan_32+0x2e>
		(((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
   11ca0:	4b0b      	ldr	r3, [pc, #44]	; (11cd0 <ftpan_32+0x38>)
	return false;
}

static bool ftpan_36(void)
{
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
   11ca2:	6818      	ldr	r0, [r3, #0]
   11ca4:	f010 000f 	ands.w	r0, r0, #15
   11ca8:	d10d      	bne.n	11cc6 <ftpan_32+0x2e>
		(((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
   11caa:	3304      	adds	r3, #4
   11cac:	681b      	ldr	r3, [r3, #0]
   11cae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   11cb2:	2b30      	cmp	r3, #48	; 0x30
   11cb4:	d108      	bne.n	11cc8 <ftpan_32+0x30>
			(((*(u32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
   11cb6:	4b07      	ldr	r3, [pc, #28]	; (11cd4 <ftpan_32+0x3c>)

static bool ftpan_36(void)
{
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
		(((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
   11cb8:	681b      	ldr	r3, [r3, #0]
   11cba:	f013 0ff0 	tst.w	r3, #240	; 0xf0
   11cbe:	bf0c      	ite	eq
   11cc0:	2001      	moveq	r0, #1
   11cc2:	2000      	movne	r0, #0
   11cc4:	4770      	bx	lr
			(((*(u32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
			return true;
		}
	}

	return false;
   11cc6:	2000      	movs	r0, #0
}
   11cc8:	4770      	bx	lr
   11cca:	bf00      	nop
   11ccc:	f0000fe0 	.word	0xf0000fe0
   11cd0:	f0000fe4 	.word	0xf0000fe4
   11cd4:	f0000fec 	.word	0xf0000fec

00011cd8 <nordicsemi_nrf52_init>:
{
	SystemCoreClock = __SYSTEM_CLOCK_64M;
}

static int nordicsemi_nrf52_init(struct device *arg)
{
   11cd8:	b508      	push	{r3, lr}
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M)
	unsigned int tmp;

	__asm__ volatile(
   11cda:	f04f 0320 	mov.w	r3, #32
   11cde:	f3ef 8111 	mrs	r1, BASEPRI
   11ce2:	f383 8811 	msr	BASEPRI, r3
{
	/* Workaround for FTPAN-32 "DIF: Debug session automatically
	* enables TracePort pins" found at Product Anomaly document
	* for your device located at https://www.nordicsemi.com/
	*/
	if (ftpan_32()) {
   11ce6:	f7ff ffd7 	bl	11c98 <ftpan_32>
   11cea:	b120      	cbz	r0, 11cf6 <nordicsemi_nrf52_init+0x1e>
		CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
   11cec:	4a2d      	ldr	r2, [pc, #180]	; (11da4 <nordicsemi_nrf52_init+0xcc>)
   11cee:	68d3      	ldr	r3, [r2, #12]
   11cf0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   11cf4:	60d3      	str	r3, [r2, #12]

	/* Workaround for FTPAN-37 "AMLI: EasyDMA is slow with Radio,
	* ECB, AAR and CCM." found at Product Anomaly document
	* for your device located at https://www.nordicsemi.com/
	*/
	if (ftpan_37()) {
   11cf6:	f7ff ffcf 	bl	11c98 <ftpan_32>
   11cfa:	b110      	cbz	r0, 11d02 <nordicsemi_nrf52_init+0x2a>
		*(volatile u32_t *)0x400005A0 = 0x3;
   11cfc:	4b2a      	ldr	r3, [pc, #168]	; (11da8 <nordicsemi_nrf52_init+0xd0>)
   11cfe:	2203      	movs	r2, #3
   11d00:	601a      	str	r2, [r3, #0]

	/* Workaround for FTPAN-36 "CLOCK: Some registers are not
	* reset when expected." found at Product Anomaly document
	* for your device located at https://www.nordicsemi.com/
	*/
	if (ftpan_36()) {
   11d02:	f7ff ffc9 	bl	11c98 <ftpan_32>
   11d06:	b130      	cbz	r0, 11d16 <nordicsemi_nrf52_init+0x3e>
		NRF_CLOCK->EVENTS_DONE = 0;
   11d08:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   11d0c:	2200      	movs	r2, #0
   11d0e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
		NRF_CLOCK->EVENTS_CTTO = 0;
   11d12:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	* defined, pin reset will not be available. One GPIO (see
	* Product Specification to see which one) will then be
	* reserved for PinReset and not available as normal GPIO.
	*/
#if defined(CONFIG_GPIO_AS_PINRESET)
	if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) !=
   11d16:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   11d1a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   11d1e:	2a00      	cmp	r2, #0
   11d20:	db03      	blt.n	11d2a <nordicsemi_nrf52_init+0x52>
	     (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
	    ((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) !=
   11d22:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
	* Product Specification to see which one) will then be
	* reserved for PinReset and not available as normal GPIO.
	*/
#if defined(CONFIG_GPIO_AS_PINRESET)
	if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) !=
	     (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   11d26:	2b00      	cmp	r3, #0
   11d28:	da2f      	bge.n	11d8a <nordicsemi_nrf52_init+0xb2>
	    ((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) !=
	     (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))) {

		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
   11d2a:	4b20      	ldr	r3, [pc, #128]	; (11dac <nordicsemi_nrf52_init+0xd4>)
   11d2c:	2201      	movs	r2, #1
   11d2e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
   11d32:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   11d36:	2a00      	cmp	r2, #0
   11d38:	d0fb      	beq.n	11d32 <nordicsemi_nrf52_init+0x5a>
			;
		}
		NRF_UICR->PSELRESET[0] = 21;
   11d3a:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
   11d3e:	2115      	movs	r1, #21
   11d40:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
   11d44:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   11d48:	2a00      	cmp	r2, #0
   11d4a:	d0fb      	beq.n	11d44 <nordicsemi_nrf52_init+0x6c>
			;
		}
		NRF_UICR->PSELRESET[1] = 21;
   11d4c:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   11d50:	2215      	movs	r2, #21
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
   11d52:	4916      	ldr	r1, [pc, #88]	; (11dac <nordicsemi_nrf52_init+0xd4>)
		}
		NRF_UICR->PSELRESET[0] = 21;
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
			;
		}
		NRF_UICR->PSELRESET[1] = 21;
   11d54:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
   11d58:	f8d1 2400 	ldr.w	r2, [r1, #1024]	; 0x400
   11d5c:	4b13      	ldr	r3, [pc, #76]	; (11dac <nordicsemi_nrf52_init+0xd4>)
   11d5e:	2a00      	cmp	r2, #0
   11d60:	d0fa      	beq.n	11d58 <nordicsemi_nrf52_init+0x80>
			;
		}
		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
   11d62:	2200      	movs	r2, #0
   11d64:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
   11d68:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   11d6c:	2a00      	cmp	r2, #0
   11d6e:	d0fb      	beq.n	11d68 <nordicsemi_nrf52_init+0x90>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   11d70:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   11d74:	490e      	ldr	r1, [pc, #56]	; (11db0 <nordicsemi_nrf52_init+0xd8>)
   11d76:	4b0f      	ldr	r3, [pc, #60]	; (11db4 <nordicsemi_nrf52_init+0xdc>)
   11d78:	68ca      	ldr	r2, [r1, #12]
   11d7a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   11d7e:	4313      	orrs	r3, r2
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   11d80:	60cb      	str	r3, [r1, #12]
   11d82:	f3bf 8f4f 	dsb	sy
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
   11d86:	bf00      	nop
   11d88:	e7fd      	b.n	11d86 <nordicsemi_nrf52_init+0xae>
static ALWAYS_INLINE void _ClearFaults(void)
{
#if defined(CONFIG_ARMV6_M)
#elif defined(CONFIG_ARMV7_M)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   11d8a:	4b09      	ldr	r3, [pc, #36]	; (11db0 <nordicsemi_nrf52_init+0xd8>)
   11d8c:	f04f 32ff 	mov.w	r2, #4294967295
   11d90:	629a      	str	r2, [r3, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   11d92:	62da      	str	r2, [r3, #44]	; 0x2c

uint32_t SystemCoreClock __used = __SYSTEM_CLOCK_64M;

static void clock_init(void)
{
	SystemCoreClock = __SYSTEM_CLOCK_64M;
   11d94:	4b08      	ldr	r3, [pc, #32]	; (11db8 <nordicsemi_nrf52_init+0xe0>)
   11d96:	4a09      	ldr	r2, [pc, #36]	; (11dbc <nordicsemi_nrf52_init+0xe4>)
   11d98:	601a      	str	r2, [r3, #0]
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   11d9a:	f381 8811 	msr	BASEPRI, r1
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   11d9e:	2000      	movs	r0, #0
   11da0:	bd08      	pop	{r3, pc}
   11da2:	bf00      	nop
   11da4:	e000edf0 	.word	0xe000edf0
   11da8:	400005a0 	.word	0x400005a0
   11dac:	4001e000 	.word	0x4001e000
   11db0:	e000ed00 	.word	0xe000ed00
   11db4:	05fa0004 	.word	0x05fa0004
   11db8:	20000698 	.word	0x20000698
   11dbc:	03d09000 	.word	0x03d09000

00011dc0 <_IntExit>:
SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, _IntExit)

/* _IntExit falls through to _ExcExit (they are aliases of each other) */

#ifdef CONFIG_TIMESLICING
    push {lr}
   11dc0:	b500      	push	{lr}
    bl _update_time_slice_before_swap
   11dc2:	f001 f9bd 	bl	13140 <_update_time_slice_before_swap>
#if defined(CONFIG_ARMV6_M)
    pop {r0}
    mov lr, r0
#else
    pop {lr}
   11dc6:	f85d eb04 	ldr.w	lr, [sp], #4
   11dca:	bf00      	nop

00011dcc <_ExcExit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, _ExcExit)

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
   11dcc:	4806      	ldr	r0, [pc, #24]	; (11de8 <_EXIT_EXC+0x4>)

    ldr r1, [r0, #_kernel_offset_to_current]
   11dce:	6881      	ldr	r1, [r0, #8]

    /*
     * Non-preemptible thread ? Do not schedule (see explanation of
     * preempt field in kernel_struct.h).
     */
    ldrh r2, [r1, #_thread_offset_to_preempt]
   11dd0:	894a      	ldrh	r2, [r1, #10]
    cmp r2, #_PREEMPT_THRESHOLD
   11dd2:	2a7f      	cmp	r2, #127	; 0x7f
    bhi _EXIT_EXC
   11dd4:	d806      	bhi.n	11de4 <_EXIT_EXC>

    ldr r0, [r0, _kernel_offset_to_ready_q_cache]
   11dd6:	6980      	ldr	r0, [r0, #24]
    cmp r0, r1
   11dd8:	4288      	cmp	r0, r1
    beq _EXIT_EXC
   11dda:	d003      	beq.n	11de4 <_EXIT_EXC>

    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
   11ddc:	4903      	ldr	r1, [pc, #12]	; (11dec <_EXIT_EXC+0x8>)
    ldr r2, =_SCS_ICSR_PENDSV
   11dde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
   11de2:	600a      	str	r2, [r1, #0]

00011de4 <_EXIT_EXC>:
#else
    pop {lr}
#endif /* CONFIG_ARMV6_M */
#endif /* CONFIG_STACK_SENTINEL */

    bx lr
   11de4:	4770      	bx	lr
   11de6:	0000      	.short	0x0000
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, _ExcExit)

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
   11de8:	20001fe4 	.word	0x20001fe4
    ldr r0, [r0, _kernel_offset_to_ready_q_cache]
    cmp r0, r1
    beq _EXIT_EXC

    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
   11dec:	e000ed04 	.word	0xe000ed04

00011df0 <_IntLibInit>:
 * @return N/A
 */

void _IntLibInit(void)
{
	int irq = 0;
   11df0:	2300      	movs	r3, #0
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   11df2:	2120      	movs	r1, #32
   11df4:	f103 4260 	add.w	r2, r3, #3758096384	; 0xe0000000
   11df8:	f502 4261 	add.w	r2, r2, #57600	; 0xe100

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   11dfc:	3301      	adds	r3, #1
   11dfe:	2b27      	cmp	r3, #39	; 0x27
   11e00:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   11e04:	d1f6      	bne.n	11df4 <_IntLibInit+0x4>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   11e06:	4770      	bx	lr

00011e08 <__pendsv>:
    pop {lr}
#endif /* CONFIG_ARMV6_M */
#endif /* CONFIG_KERNEL_EVENT_LOGGER_CONTEXT_SWITCH  */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   11e08:	490e      	ldr	r1, [pc, #56]	; (11e44 <__pendsv+0x3c>)
    ldr r2, [r1, #_kernel_offset_to_current]
   11e0a:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   11e0c:	2028      	movs	r0, #40	; 0x28
    add r0, r2
   11e0e:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
    mrs ip, PSP
   11e10:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M)
    stmia r0, {v1-v8, ip}
   11e14:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
     * don't clear it yet. PendSV must not be cleared until
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
    ldr v4, =_SCS_ICSR
   11e18:	4f0b      	ldr	r7, [pc, #44]	; (11e48 <__pendsv+0x40>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   11e1a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000

    /* protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M)
    cpsid i
#elif defined(CONFIG_ARMV7_M)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   11e1e:	2020      	movs	r0, #32
    msr BASEPRI, r0
   11e20:	f380 8811 	msr	BASEPRI, r0
#endif /* CONFIG_ARMV6_M */

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, _kernel_offset_to_ready_q_cache]
   11e24:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
   11e26:	608a      	str	r2, [r1, #8]
     * since they were based on the previous kernel state and this
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
    str v3, [v4, #0]
   11e28:	603e      	str	r6, [r7, #0]

    /* Restore previous interrupt disable state (irq_lock key) */
    ldr r0, [r2, #_thread_offset_to_basepri]
   11e2a:	6e10      	ldr	r0, [r2, #96]	; 0x60
    movs.n r3, #0
   11e2c:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   11e2e:	6613      	str	r3, [r2, #96]	; 0x60
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   11e30:	f380 8811 	msr	BASEPRI, r0
    blx configure_mpu_stack_guard
    pop {r2, lr}
#endif /* CONFIG_MPU_STACK_GUARD */

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   11e34:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
   11e38:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

    msr PSP, ip
   11e3c:	f38c 8809 	msr	PSP, ip
    pop {lr}
#endif
#endif

    /* exc return */
    bx lr
   11e40:	4770      	bx	lr
   11e42:	0000      	.short	0x0000
    pop {lr}
#endif /* CONFIG_ARMV6_M */
#endif /* CONFIG_KERNEL_EVENT_LOGGER_CONTEXT_SWITCH  */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   11e44:	20001fe4 	.word	0x20001fe4
     * don't clear it yet. PendSV must not be cleared until
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
    ldr v4, =_SCS_ICSR
   11e48:	e000ed04 	.word	0xe000ed04

00011e4c <__svc>:
 * @return N/A
 */

SECTION_FUNC(TEXT, __svc)

    tst lr, #0x4    /* did we come from thread mode ? */
   11e4c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   11e50:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   11e52:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   11e56:	f3ef 8009 	mrsne	r0, PSP

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   11e5a:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read  encoding */
    ldrh r1, [r1, #-2]
   11e5c:	f831 1c02 	ldrh.w	r1, [r1, #-2]
    * 1: irq_offload (if configured)
    * 2: kernel panic or oops (software generated fatal exception)
    * Planned implementation of system calls for memory protection will
    * expand this case.
    */
    ands r1, #0xff
   11e60:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    beq _context_switch
   11e64:	d001      	beq.n	11e6a <_context_switch>

    cmp r1, #2
   11e66:	2902      	cmp	r1, #2
    beq _oops
   11e68:	d007      	beq.n	11e7a <_oops>

00011e6a <_context_switch>:
    /*
     * Unlock interrupts:
     * - in a SVC call, so protected against context switches
     * - allow PendSV, since it's running at prio 0xff
     */
    eors.n r0, r0
   11e6a:	4040      	eors	r0, r0
    msr BASEPRI, r0
   11e6c:	f380 8811 	msr	BASEPRI, r0

     /* set PENDSV bit, pending the PendSV exception */
    ldr r1, =_SCS_ICSR
   11e70:	4904      	ldr	r1, [pc, #16]	; (11e84 <_oops+0xa>)
    ldr r2, =_SCS_ICSR_PENDSV
   11e72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1, #0]
   11e76:	600a      	str	r2, [r1, #0]

    /* handler mode exit, to PendSV */
    bx lr
   11e78:	4770      	bx	lr

00011e7a <_oops>:

_oops:
    push {lr}
   11e7a:	b500      	push	{lr}
    blx _do_kernel_oops
   11e7c:	f000 fa32 	bl	122e4 <_do_kernel_oops>
    pop {pc}
   11e80:	bd00      	pop	{pc}
   11e82:	0000      	.short	0x0000
     */
    eors.n r0, r0
    msr BASEPRI, r0

     /* set PENDSV bit, pending the PendSV exception */
    ldr r1, =_SCS_ICSR
   11e84:	e000ed04 	.word	0xe000ed04

00011e88 <__swap>:
    pop {r3}
#else
    pop {lr}
#endif
#endif
    ldr r1, =_kernel
   11e88:	4904      	ldr	r1, [pc, #16]	; (11e9c <__swap+0x14>)
    ldr r2, [r1, #_kernel_offset_to_current]
   11e8a:	688a      	ldr	r2, [r1, #8]
    str r0, [r2, #_thread_offset_to_basepri]
   11e8c:	6610      	str	r0, [r2, #96]	; 0x60

    /*
     * Set __swap()'s default return code to -EAGAIN. This eliminates the need
     * for the timeout code to set it itself.
     */
    ldr r1, =_k_neg_eagain
   11e8e:	4904      	ldr	r1, [pc, #16]	; (11ea0 <__swap+0x18>)
    ldr r1, [r1]
   11e90:	6809      	ldr	r1, [r1, #0]
    str r1, [r2, #_thread_offset_to_swap_return_value]
   11e92:	6651      	str	r1, [r2, #100]	; 0x64
     * PendSV handler will be called if there are no other interrupts
     * of a higher priority pending.
     */
    cpsie i
#elif defined(CONFIG_ARMV7_M)
    svc #0
   11e94:	df00      	svc	0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

    /* coming back from exception, r2 still holds the pointer to _current */
    ldr r0, [r2, #_thread_offset_to_swap_return_value]
   11e96:	6e50      	ldr	r0, [r2, #100]	; 0x64
    bx lr
   11e98:	4770      	bx	lr
   11e9a:	0000      	.short	0x0000
    pop {r3}
#else
    pop {lr}
#endif
#endif
    ldr r1, =_kernel
   11e9c:	20001fe4 	.word	0x20001fe4

    /*
     * Set __swap()'s default return code to -EAGAIN. This eliminates the need
     * for the timeout code to set it itself.
     */
    ldr r1, =_k_neg_eagain
   11ea0:	000170d0 	.word	0x000170d0

00011ea4 <_FaultThreadShow.isra.2>:
 *
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static void _FaultThreadShow(const NANO_ESF *esf)
   11ea4:	b510      	push	{r4, lr}
   11ea6:	4604      	mov	r4, r0
{
	PR_EXC("  Executing thread ID (thread): %p\n"
   11ea8:	f001 f920 	bl	130ec <k_current_get>
   11eac:	6822      	ldr	r2, [r4, #0]
   11eae:	4601      	mov	r1, r0
	       "  Faulting instruction address:  0x%x\n",
	       k_current_get(), esf->pc);
}
   11eb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 *
 * @return N/A
 */
static void _FaultThreadShow(const NANO_ESF *esf)
{
	PR_EXC("  Executing thread ID (thread): %p\n"
   11eb4:	4801      	ldr	r0, [pc, #4]	; (11ebc <_FaultThreadShow.isra.2+0x18>)
   11eb6:	f7ef bae3 	b.w	1480 <printk>
   11eba:	bf00      	nop
   11ebc:	00016c38 	.word	0x00016c38

00011ec0 <_UsageFault>:
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static void _UsageFault(const NANO_ESF *esf)
{
   11ec0:	b510      	push	{r4, lr}
   11ec2:	4604      	mov	r4, r0
	PR_EXC("***** USAGE FAULT *****\n");
   11ec4:	481a      	ldr	r0, [pc, #104]	; (11f30 <_UsageFault+0x70>)
   11ec6:	f7ef fadb 	bl	1480 <printk>

	_FaultThreadShow(esf);
   11eca:	f104 0018 	add.w	r0, r4, #24

	/* bits are sticky: they stack and must be reset */
	if (SCB->CFSR & CFSR_DIVBYZERO_Msk) {
   11ece:	4c19      	ldr	r4, [pc, #100]	; (11f34 <_UsageFault+0x74>)
 */
static void _UsageFault(const NANO_ESF *esf)
{
	PR_EXC("***** USAGE FAULT *****\n");

	_FaultThreadShow(esf);
   11ed0:	f7ff ffe8 	bl	11ea4 <_FaultThreadShow.isra.2>

	/* bits are sticky: they stack and must be reset */
	if (SCB->CFSR & CFSR_DIVBYZERO_Msk) {
   11ed4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   11ed6:	019a      	lsls	r2, r3, #6
   11ed8:	d502      	bpl.n	11ee0 <_UsageFault+0x20>
		PR_EXC("  Division by zero\n");
   11eda:	4817      	ldr	r0, [pc, #92]	; (11f38 <_UsageFault+0x78>)
   11edc:	f7ef fad0 	bl	1480 <printk>
	}
	if (SCB->CFSR & CFSR_UNALIGNED_Msk) {
   11ee0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   11ee2:	01db      	lsls	r3, r3, #7
   11ee4:	d502      	bpl.n	11eec <_UsageFault+0x2c>
		PR_EXC("  Unaligned memory access\n");
   11ee6:	4815      	ldr	r0, [pc, #84]	; (11f3c <_UsageFault+0x7c>)
   11ee8:	f7ef faca 	bl	1480 <printk>
	}
	if (SCB->CFSR & CFSR_NOCP_Msk) {
   11eec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   11eee:	0318      	lsls	r0, r3, #12
   11ef0:	d502      	bpl.n	11ef8 <_UsageFault+0x38>
		PR_EXC("  No coprocessor instructions\n");
   11ef2:	4813      	ldr	r0, [pc, #76]	; (11f40 <_UsageFault+0x80>)
   11ef4:	f7ef fac4 	bl	1480 <printk>
	}
	if (SCB->CFSR & CFSR_INVPC_Msk) {
   11ef8:	4c0e      	ldr	r4, [pc, #56]	; (11f34 <_UsageFault+0x74>)
   11efa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   11efc:	0359      	lsls	r1, r3, #13
   11efe:	d502      	bpl.n	11f06 <_UsageFault+0x46>
		PR_EXC("  Illegal load of EXC_RETURN into PC\n");
   11f00:	4810      	ldr	r0, [pc, #64]	; (11f44 <_UsageFault+0x84>)
   11f02:	f7ef fabd 	bl	1480 <printk>
	}
	if (SCB->CFSR & CFSR_INVSTATE_Msk) {
   11f06:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   11f08:	039a      	lsls	r2, r3, #14
   11f0a:	d502      	bpl.n	11f12 <_UsageFault+0x52>
		PR_EXC("  Illegal use of the EPSR\n");
   11f0c:	480e      	ldr	r0, [pc, #56]	; (11f48 <_UsageFault+0x88>)
   11f0e:	f7ef fab7 	bl	1480 <printk>
	}
	if (SCB->CFSR & CFSR_UNDEFINSTR_Msk) {
   11f12:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   11f14:	03db      	lsls	r3, r3, #15
   11f16:	d502      	bpl.n	11f1e <_UsageFault+0x5e>
		PR_EXC("  Attempt to execute undefined instruction\n");
   11f18:	480c      	ldr	r0, [pc, #48]	; (11f4c <_UsageFault+0x8c>)
   11f1a:	f7ef fab1 	bl	1480 <printk>
	}

	/* clear USFR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   11f1e:	4a05      	ldr	r2, [pc, #20]	; (11f34 <_UsageFault+0x74>)
   11f20:	6a93      	ldr	r3, [r2, #40]	; 0x28
   11f22:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   11f26:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   11f2a:	6293      	str	r3, [r2, #40]	; 0x28
   11f2c:	bd10      	pop	{r4, pc}
   11f2e:	bf00      	nop
   11f30:	00016c82 	.word	0x00016c82
   11f34:	e000ed00 	.word	0xe000ed00
   11f38:	00016c9b 	.word	0x00016c9b
   11f3c:	00016caf 	.word	0x00016caf
   11f40:	00016cca 	.word	0x00016cca
   11f44:	00016ce9 	.word	0x00016ce9
   11f48:	00016d0f 	.word	0x00016d0f
   11f4c:	00016d2a 	.word	0x00016d2a

00011f50 <_MpuFault>:
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static void _MpuFault(const NANO_ESF *esf, int fromHardFault)
{
   11f50:	b538      	push	{r3, r4, r5, lr}
   11f52:	4604      	mov	r4, r0
	PR_EXC("***** MPU FAULT *****\n");
   11f54:	4817      	ldr	r0, [pc, #92]	; (11fb4 <_MpuFault+0x64>)
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static void _MpuFault(const NANO_ESF *esf, int fromHardFault)
{
   11f56:	460d      	mov	r5, r1
	PR_EXC("***** MPU FAULT *****\n");
   11f58:	f7ef fa92 	bl	1480 <printk>

	_FaultThreadShow(esf);
   11f5c:	f104 0018 	add.w	r0, r4, #24

	if (SCB->CFSR & CFSR_MSTKERR_Msk) {
   11f60:	4c15      	ldr	r4, [pc, #84]	; (11fb8 <_MpuFault+0x68>)
 */
static void _MpuFault(const NANO_ESF *esf, int fromHardFault)
{
	PR_EXC("***** MPU FAULT *****\n");

	_FaultThreadShow(esf);
   11f62:	f7ff ff9f 	bl	11ea4 <_FaultThreadShow.isra.2>

	if (SCB->CFSR & CFSR_MSTKERR_Msk) {
   11f66:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   11f68:	06db      	lsls	r3, r3, #27
   11f6a:	d501      	bpl.n	11f70 <_MpuFault+0x20>
		PR_EXC("  Stacking error\n");
   11f6c:	4813      	ldr	r0, [pc, #76]	; (11fbc <_MpuFault+0x6c>)
   11f6e:	e01b      	b.n	11fa8 <_MpuFault+0x58>
	} else if (SCB->CFSR & CFSR_MUNSTKERR_Msk) {
   11f70:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   11f72:	0718      	lsls	r0, r3, #28
   11f74:	d501      	bpl.n	11f7a <_MpuFault+0x2a>
		PR_EXC("  Unstacking error\n");
   11f76:	4812      	ldr	r0, [pc, #72]	; (11fc0 <_MpuFault+0x70>)
   11f78:	e016      	b.n	11fa8 <_MpuFault+0x58>
	} else if (SCB->CFSR & CFSR_DACCVIOL_Msk) {
   11f7a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   11f7c:	0799      	lsls	r1, r3, #30
   11f7e:	d50f      	bpl.n	11fa0 <_MpuFault+0x50>
		PR_EXC("  Data Access Violation\n");
   11f80:	4810      	ldr	r0, [pc, #64]	; (11fc4 <_MpuFault+0x74>)
   11f82:	f7ef fa7d 	bl	1480 <printk>
		if (SCB->CFSR & CFSR_MMARVALID_Msk) {
   11f86:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   11f88:	061a      	lsls	r2, r3, #24
   11f8a:	d511      	bpl.n	11fb0 <_MpuFault+0x60>
			PR_EXC("  Address: 0x%x\n", (u32_t)SCB->MMFAR);
   11f8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
   11f8e:	480e      	ldr	r0, [pc, #56]	; (11fc8 <_MpuFault+0x78>)
   11f90:	f7ef fa76 	bl	1480 <printk>
			if (fromHardFault) {
   11f94:	b165      	cbz	r5, 11fb0 <_MpuFault+0x60>
				/* clear MMAR[VALID] to reset */
				SCB->CFSR &= ~CFSR_MMARVALID_Msk;
   11f96:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   11f98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   11f9c:	62a3      	str	r3, [r4, #40]	; 0x28
   11f9e:	bd38      	pop	{r3, r4, r5, pc}
			}
		}
	} else if (SCB->CFSR & CFSR_IACCVIOL_Msk) {
   11fa0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   11fa2:	07db      	lsls	r3, r3, #31
   11fa4:	d504      	bpl.n	11fb0 <_MpuFault+0x60>
		PR_EXC("  Instruction Access Violation\n");
   11fa6:	4809      	ldr	r0, [pc, #36]	; (11fcc <_MpuFault+0x7c>)
	}
}
   11fa8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				/* clear MMAR[VALID] to reset */
				SCB->CFSR &= ~CFSR_MMARVALID_Msk;
			}
		}
	} else if (SCB->CFSR & CFSR_IACCVIOL_Msk) {
		PR_EXC("  Instruction Access Violation\n");
   11fac:	f7ef ba68 	b.w	1480 <printk>
   11fb0:	bd38      	pop	{r3, r4, r5, pc}
   11fb2:	bf00      	nop
   11fb4:	00016d56 	.word	0x00016d56
   11fb8:	e000ed00 	.word	0xe000ed00
   11fbc:	00016d6d 	.word	0x00016d6d
   11fc0:	00016d7f 	.word	0x00016d7f
   11fc4:	00016d93 	.word	0x00016d93
   11fc8:	00016dac 	.word	0x00016dac
   11fcc:	00016dbd 	.word	0x00016dbd

00011fd0 <_BusFault>:
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static void _BusFault(const NANO_ESF *esf, int fromHardFault)
{
   11fd0:	b538      	push	{r3, r4, r5, lr}
   11fd2:	4604      	mov	r4, r0
	PR_EXC("***** BUS FAULT *****\n");
   11fd4:	481b      	ldr	r0, [pc, #108]	; (12044 <_BusFault+0x74>)
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static void _BusFault(const NANO_ESF *esf, int fromHardFault)
{
   11fd6:	460d      	mov	r5, r1
	PR_EXC("***** BUS FAULT *****\n");
   11fd8:	f7ef fa52 	bl	1480 <printk>

	_FaultThreadShow(esf);
   11fdc:	f104 0018 	add.w	r0, r4, #24

	if (SCB->CFSR & CFSR_STKERR_Msk) {
   11fe0:	4c19      	ldr	r4, [pc, #100]	; (12048 <_BusFault+0x78>)
 */
static void _BusFault(const NANO_ESF *esf, int fromHardFault)
{
	PR_EXC("***** BUS FAULT *****\n");

	_FaultThreadShow(esf);
   11fe2:	f7ff ff5f 	bl	11ea4 <_FaultThreadShow.isra.2>

	if (SCB->CFSR & CFSR_STKERR_Msk) {
   11fe6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   11fe8:	04d9      	lsls	r1, r3, #19
   11fea:	d501      	bpl.n	11ff0 <_BusFault+0x20>
		PR_EXC("  Stacking error\n");
   11fec:	4817      	ldr	r0, [pc, #92]	; (1204c <_BusFault+0x7c>)
   11fee:	e023      	b.n	12038 <_BusFault+0x68>
	} else if (SCB->CFSR & CFSR_UNSTKERR_Msk) {
   11ff0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   11ff2:	051a      	lsls	r2, r3, #20
   11ff4:	d501      	bpl.n	11ffa <_BusFault+0x2a>
		PR_EXC("  Unstacking error\n");
   11ff6:	4816      	ldr	r0, [pc, #88]	; (12050 <_BusFault+0x80>)
   11ff8:	e01e      	b.n	12038 <_BusFault+0x68>
	} else if (SCB->CFSR & CFSR_PRECISERR_Msk) {
   11ffa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   11ffc:	059b      	lsls	r3, r3, #22
   11ffe:	d514      	bpl.n	1202a <_BusFault+0x5a>
		PR_EXC("  Precise data bus error\n");
   12000:	4814      	ldr	r0, [pc, #80]	; (12054 <_BusFault+0x84>)
   12002:	f7ef fa3d 	bl	1480 <printk>
		if (SCB->CFSR & CFSR_BFARVALID_Msk) {
   12006:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   12008:	0418      	lsls	r0, r3, #16
   1200a:	d508      	bpl.n	1201e <_BusFault+0x4e>
			PR_EXC("  Address: 0x%x\n", (u32_t)SCB->BFAR);
   1200c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   1200e:	4812      	ldr	r0, [pc, #72]	; (12058 <_BusFault+0x88>)
   12010:	f7ef fa36 	bl	1480 <printk>
			if (fromHardFault) {
   12014:	b11d      	cbz	r5, 1201e <_BusFault+0x4e>
				/* clear CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~CFSR_BFARVALID_Msk;
   12016:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   12018:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   1201c:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
		/* it's possible to have both a precise and imprecise fault */
		if (SCB->CFSR & CFSR_IMPRECISERR_Msk) {
   1201e:	4b0a      	ldr	r3, [pc, #40]	; (12048 <_BusFault+0x78>)
   12020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12022:	0559      	lsls	r1, r3, #21
   12024:	d50c      	bpl.n	12040 <_BusFault+0x70>
			PR_EXC("  Imprecise data bus error\n");
   12026:	480d      	ldr	r0, [pc, #52]	; (1205c <_BusFault+0x8c>)
   12028:	e006      	b.n	12038 <_BusFault+0x68>
		}
	} else if (SCB->CFSR & CFSR_IMPRECISERR_Msk) {
   1202a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1202c:	055a      	lsls	r2, r3, #21
   1202e:	d4fa      	bmi.n	12026 <_BusFault+0x56>
		PR_EXC("  Imprecise data bus error\n");
	} else if (SCB->CFSR & CFSR_IBUSERR_Msk) {
   12030:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   12032:	05db      	lsls	r3, r3, #23
   12034:	d504      	bpl.n	12040 <_BusFault+0x70>
		PR_EXC("  Instruction bus error\n");
   12036:	480a      	ldr	r0, [pc, #40]	; (12060 <_BusFault+0x90>)
	}
}
   12038:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			PR_EXC("  Imprecise data bus error\n");
		}
	} else if (SCB->CFSR & CFSR_IMPRECISERR_Msk) {
		PR_EXC("  Imprecise data bus error\n");
	} else if (SCB->CFSR & CFSR_IBUSERR_Msk) {
		PR_EXC("  Instruction bus error\n");
   1203c:	f7ef ba20 	b.w	1480 <printk>
   12040:	bd38      	pop	{r3, r4, r5, pc}
   12042:	bf00      	nop
   12044:	00016ddd 	.word	0x00016ddd
   12048:	e000ed00 	.word	0xe000ed00
   1204c:	00016d6d 	.word	0x00016d6d
   12050:	00016d7f 	.word	0x00016d7f
   12054:	00016df4 	.word	0x00016df4
   12058:	00016dac 	.word	0x00016dac
   1205c:	00016e0e 	.word	0x00016e0e
   12060:	00016e2a 	.word	0x00016e2a

00012064 <_Fault>:
 * @param esf ESF on the stack, either MSP or PSP depending at what processor
 *            state the exception was taken.
 */
void _Fault(const NANO_ESF *esf)
{
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   12064:	4a28      	ldr	r2, [pc, #160]	; (12108 <_Fault+0xa4>)
 *
 * @param esf ESF on the stack, either MSP or PSP depending at what processor
 *            state the exception was taken.
 */
void _Fault(const NANO_ESF *esf)
{
   12066:	b538      	push	{r3, r4, r5, lr}
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   12068:	6853      	ldr	r3, [r2, #4]
   1206a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 *
 * @return N/A
 */
static void _FaultDump(const NANO_ESF *esf, int fault)
{
	switch (fault) {
   1206e:	1ed9      	subs	r1, r3, #3
 *
 * @param esf ESF on the stack, either MSP or PSP depending at what processor
 *            state the exception was taken.
 */
void _Fault(const NANO_ESF *esf)
{
   12070:	4604      	mov	r4, r0
   12072:	4615      	mov	r5, r2
 *
 * @return N/A
 */
static void _FaultDump(const NANO_ESF *esf, int fault)
{
	switch (fault) {
   12074:	2909      	cmp	r1, #9
   12076:	d836      	bhi.n	120e6 <_Fault+0x82>
   12078:	e8df f001 	tbb	[pc, r1]
   1207c:	2d282305 	.word	0x2d282305
   12080:	35353535 	.word	0x35353535
   12084:	3135      	.short	0x3135
 *
 * @return N/A
 */
static void _HardFault(const NANO_ESF *esf)
{
	PR_EXC("***** HARD FAULT *****\n");
   12086:	4821      	ldr	r0, [pc, #132]	; (1210c <_Fault+0xa8>)
   12088:	f7ef f9fa 	bl	1480 <printk>

#if defined(CONFIG_ARMV6_M)
	_FaultThreadShow(esf);
#elif defined(CONFIG_ARMV7_M)
	if (SCB->HFSR & SCB_HFSR_VECTTBL_Msk) {
   1208c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   1208e:	079a      	lsls	r2, r3, #30
   12090:	d501      	bpl.n	12096 <_Fault+0x32>
		PR_EXC("  Bus fault on vector table read\n");
   12092:	481f      	ldr	r0, [pc, #124]	; (12110 <_Fault+0xac>)
   12094:	e024      	b.n	120e0 <_Fault+0x7c>
	} else if (SCB->HFSR & SCB_HFSR_FORCED_Msk) {
   12096:	4b1c      	ldr	r3, [pc, #112]	; (12108 <_Fault+0xa4>)
   12098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1209a:	005b      	lsls	r3, r3, #1
   1209c:	d52d      	bpl.n	120fa <_Fault+0x96>
		PR_EXC("  Fault escalation (see below)\n");
   1209e:	481d      	ldr	r0, [pc, #116]	; (12114 <_Fault+0xb0>)
   120a0:	f7ef f9ee 	bl	1480 <printk>
		if (SCB_MMFSR) {
   120a4:	4b1c      	ldr	r3, [pc, #112]	; (12118 <_Fault+0xb4>)
   120a6:	781b      	ldrb	r3, [r3, #0]
   120a8:	b10b      	cbz	r3, 120ae <_Fault+0x4a>
			_MpuFault(esf, 1);
   120aa:	2101      	movs	r1, #1
   120ac:	e00a      	b.n	120c4 <_Fault+0x60>
		} else if (SCB_BFSR) {
   120ae:	4b1b      	ldr	r3, [pc, #108]	; (1211c <_Fault+0xb8>)
   120b0:	781b      	ldrb	r3, [r3, #0]
   120b2:	b10b      	cbz	r3, 120b8 <_Fault+0x54>
			_BusFault(esf, 1);
   120b4:	2101      	movs	r1, #1
   120b6:	e00a      	b.n	120ce <_Fault+0x6a>
		} else if (SCB_UFSR) {
   120b8:	4b19      	ldr	r3, [pc, #100]	; (12120 <_Fault+0xbc>)
   120ba:	881b      	ldrh	r3, [r3, #0]
   120bc:	b29b      	uxth	r3, r3
   120be:	b1e3      	cbz	r3, 120fa <_Fault+0x96>
   120c0:	e009      	b.n	120d6 <_Fault+0x72>
		_HardFault(esf);
		break;
#if defined(CONFIG_ARMV6_M)
#elif defined(CONFIG_ARMV7_M)
	case 4:
		_MpuFault(esf, 0);
   120c2:	2100      	movs	r1, #0
   120c4:	4620      	mov	r0, r4
   120c6:	f7ff ff43 	bl	11f50 <_MpuFault>
   120ca:	e016      	b.n	120fa <_Fault+0x96>
		break;
	case 5:
		_BusFault(esf, 0);
   120cc:	2100      	movs	r1, #0
   120ce:	4620      	mov	r0, r4
   120d0:	f7ff ff7e 	bl	11fd0 <_BusFault>
   120d4:	e011      	b.n	120fa <_Fault+0x96>
		break;
	case 6:
		_UsageFault(esf);
   120d6:	4620      	mov	r0, r4
   120d8:	f7ff fef2 	bl	11ec0 <_UsageFault>
   120dc:	e00d      	b.n	120fa <_Fault+0x96>
 */
static void _DebugMonitor(const NANO_ESF *esf)
{
	ARG_UNUSED(esf);

	PR_EXC("***** Debug monitor exception (not implemented) *****\n");
   120de:	4811      	ldr	r0, [pc, #68]	; (12124 <_Fault+0xc0>)
   120e0:	f7ef f9ce 	bl	1480 <printk>
   120e4:	e009      	b.n	120fa <_Fault+0x96>
 */
static void _ReservedException(const NANO_ESF *esf, int fault)
{
	ARG_UNUSED(esf);

	PR_EXC("***** %s %d) *****\n",
   120e6:	4810      	ldr	r0, [pc, #64]	; (12128 <_Fault+0xc4>)
   120e8:	4910      	ldr	r1, [pc, #64]	; (1212c <_Fault+0xc8>)
   120ea:	f1a3 0210 	sub.w	r2, r3, #16
   120ee:	2b0f      	cmp	r3, #15
   120f0:	bfd8      	it	le
   120f2:	4601      	movle	r1, r0
   120f4:	480e      	ldr	r0, [pc, #56]	; (12130 <_Fault+0xcc>)
   120f6:	f7ef f9c3 	bl	1480 <printk>
{
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;

	FAULT_DUMP(esf, fault);

	_SysFatalErrorHandler(_NANO_ERR_HW_EXCEPTION, esf);
   120fa:	4621      	mov	r1, r4
   120fc:	2000      	movs	r0, #0
}
   120fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
{
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;

	FAULT_DUMP(esf, fault);

	_SysFatalErrorHandler(_NANO_ERR_HW_EXCEPTION, esf);
   12102:	f000 b8f3 	b.w	122ec <_SysFatalErrorHandler>
   12106:	bf00      	nop
   12108:	e000ed00 	.word	0xe000ed00
   1210c:	00016e71 	.word	0x00016e71
   12110:	00016e89 	.word	0x00016e89
   12114:	00016eab 	.word	0x00016eab
   12118:	e000ed28 	.word	0xe000ed28
   1211c:	e000ed29 	.word	0xe000ed29
   12120:	e000ed2c 	.word	0xe000ed2c
   12124:	00016ecb 	.word	0x00016ecb
   12128:	00016e43 	.word	0x00016e43
   1212c:	00016e58 	.word	0x00016e58
   12130:	00016f02 	.word	0x00016f02

00012134 <_FaultInit>:
 */
void _FaultInit(void)
{
#if defined(CONFIG_ARMV6_M)
#elif defined(CONFIG_ARMV7_M)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   12134:	4a02      	ldr	r2, [pc, #8]	; (12140 <_FaultInit+0xc>)
   12136:	6953      	ldr	r3, [r2, #20]
   12138:	f043 0310 	orr.w	r3, r3, #16
   1213c:	6153      	str	r3, [r2, #20]
   1213e:	4770      	bx	lr
   12140:	e000ed00 	.word	0xe000ed00

00012144 <_arch_irq_enable>:
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   12144:	b243      	sxtb	r3, r0
   12146:	2201      	movs	r2, #1
   12148:	f000 001f 	and.w	r0, r0, #31
   1214c:	fa02 f000 	lsl.w	r0, r2, r0
   12150:	095b      	lsrs	r3, r3, #5
   12152:	4a02      	ldr	r2, [pc, #8]	; (1215c <_arch_irq_enable+0x18>)
   12154:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
   12158:	4770      	bx	lr
   1215a:	bf00      	nop
   1215c:	e000e100 	.word	0xe000e100

00012160 <_arch_irq_disable>:
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   12160:	b243      	sxtb	r3, r0
   12162:	2201      	movs	r2, #1
   12164:	095b      	lsrs	r3, r3, #5
   12166:	f000 001f 	and.w	r0, r0, #31
   1216a:	fa02 f000 	lsl.w	r0, r2, r0
   1216e:	3320      	adds	r3, #32
   12170:	4a01      	ldr	r2, [pc, #4]	; (12178 <_arch_irq_disable+0x18>)
   12172:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
   12176:	4770      	bx	lr
   12178:	e000e100 	.word	0xe000e100

0001217c <_arch_irq_is_enabled>:
 * @param irq IRQ line
 * @return interrupt enable state, true or false
 */
int _arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & (1 << BIT_FROM_IRQ(irq));
   1217c:	0942      	lsrs	r2, r0, #5
   1217e:	4b05      	ldr	r3, [pc, #20]	; (12194 <_arch_irq_is_enabled+0x18>)
   12180:	f000 001f 	and.w	r0, r0, #31
   12184:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   12188:	2301      	movs	r3, #1
   1218a:	fa03 f000 	lsl.w	r0, r3, r0
}
   1218e:	4010      	ands	r0, r2
   12190:	4770      	bx	lr
   12192:	bf00      	nop
   12194:	e000e100 	.word	0xe000e100

00012198 <_irq_priority_set>:
	 */
	__ASSERT(prio <= ((1 << CONFIG_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %d\n",
		 prio - _IRQ_PRIO_OFFSET,
		 (1 << CONFIG_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   12198:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
   1219a:	2b00      	cmp	r3, #0
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1219c:	bfa8      	it	ge
   1219e:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	} else {
		prio += _IRQ_PRIO_OFFSET;
	}
#else
	ARG_UNUSED(flags);
	prio += _IRQ_PRIO_OFFSET;
   121a2:	f101 0101 	add.w	r1, r1, #1
   121a6:	ea4f 1141 	mov.w	r1, r1, lsl #5
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   121aa:	bfbb      	ittet	lt
   121ac:	f000 000f 	andlt.w	r0, r0, #15
   121b0:	4b04      	ldrlt	r3, [pc, #16]	; (121c4 <_irq_priority_set+0x2c>)
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   121b2:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   121b6:	b2c9      	uxtblt	r1, r1
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   121b8:	bfaa      	itet	ge
   121ba:	b2c9      	uxtbge	r1, r1
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   121bc:	5419      	strblt	r1, [r3, r0]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   121be:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
   121c2:	4770      	bx	lr
   121c4:	e000ed14 	.word	0xe000ed14

000121c8 <_irq_spurious>:
 * @return N/A
 */
void _irq_spurious(void *unused)
{
	ARG_UNUSED(unused);
	__reserved();
   121c8:	f000 b846 	b.w	12258 <__bus_fault>

000121cc <_arch_isr_direct_pm>:
 * See https://jira.zephyrproject.org/browse/ZEP-1595
 */

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
   121cc:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   121ce:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

	if (_kernel.idle) {
   121d0:	4b04      	ldr	r3, [pc, #16]	; (121e4 <_arch_isr_direct_pm+0x18>)
   121d2:	6958      	ldr	r0, [r3, #20]
   121d4:	b118      	cbz	r0, 121de <_arch_isr_direct_pm+0x12>
		s32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
   121d6:	2200      	movs	r2, #0
   121d8:	615a      	str	r2, [r3, #20]
		_sys_power_save_idle_exit(idle_val);
   121da:	f000 f987 	bl	124ec <_sys_power_save_idle_exit>
	}

#if defined(CONFIG_ARMV6_M)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M)
	__asm__ volatile("cpsie i" : : : "memory");
   121de:	b662      	cpsie	i
   121e0:	bd08      	pop	{r3, pc}
   121e2:	bf00      	nop
   121e4:	20001fe4 	.word	0x20001fe4

000121e8 <_new_thread>:

void _new_thread(struct k_thread *thread, char *pStackMem, size_t stackSize,
		 _thread_entry_t pEntry,
		 void *parameter1, void *parameter2, void *parameter3,
		 int priority, unsigned int options)
{
   121e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	__ASSERT(!((u32_t)pStackMem & (STACK_ALIGN - 1)),
		 "stack is not aligned properly\n"
		 "%d-byte alignment required\n", STACK_ALIGN);

	char *stackEnd = pStackMem + stackSize;
   121ec:	188d      	adds	r5, r1, r2

void _new_thread(struct k_thread *thread, char *pStackMem, size_t stackSize,
		 _thread_entry_t pEntry,
		 void *parameter1, void *parameter2, void *parameter3,
		 int priority, unsigned int options)
{
   121ee:	4688      	mov	r8, r1
   121f0:	4617      	mov	r7, r2
   121f2:	461e      	mov	r6, r3
	 * if it isn't.
	 */
	*((u32_t *)pStack) = STACK_SENTINEL;
#endif /* CONFIG_STACK_SENTINEL */
	/* Initialize various struct k_thread members */
	_init_thread_base(&thread->base, prio, _THREAD_PRESTART, options);
   121f4:	2204      	movs	r2, #4
   121f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   121f8:	9909      	ldr	r1, [sp, #36]	; 0x24
   121fa:	4604      	mov	r4, r0
   121fc:	f001 fa8c 	bl	13718 <_init_thread_base>
	/* carve the thread entry struct from the "base" of the stack */

	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd) -
				    sizeof(struct __esf));

	pInitCtx->pc = ((u32_t)_thread_entry) & 0xfffffffe;
   12200:	480e      	ldr	r0, [pc, #56]	; (1223c <_new_thread+0x54>)
	/* Initialize custom data field (value is opaque to kernel) */
	thread->custom_data = NULL;
#endif

#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (u32_t)pStack;
   12202:	f8c4 8058 	str.w	r8, [r4, #88]	; 0x58

	_new_thread_init(thread, pStackMem, stackSize, priority, options);

	/* carve the thread entry struct from the "base" of the stack */

	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd) -
   12206:	f025 0207 	bic.w	r2, r5, #7
   1220a:	f1a2 0320 	sub.w	r3, r2, #32
#endif /* CONFIG_STACK_SENTINEL */
	/* Initialize various struct k_thread members */
	_init_thread_base(&thread->base, prio, _THREAD_PRESTART, options);

	/* static threads overwrite it afterwards with real value */
	thread->init_data = NULL;
   1220e:	2100      	movs	r1, #0
				    sizeof(struct __esf));

	pInitCtx->pc = ((u32_t)_thread_entry) & 0xfffffffe;
   12210:	f020 0001 	bic.w	r0, r0, #1
   12214:	64e1      	str	r1, [r4, #76]	; 0x4c
	thread->fn_abort = NULL;
   12216:	6521      	str	r1, [r4, #80]	; 0x50
	thread->custom_data = NULL;
#endif

#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (u32_t)pStack;
	thread->stack_info.size = (u32_t)stackSize;
   12218:	65e7      	str	r7, [r4, #92]	; 0x5c
   1221a:	f842 0c08 	str.w	r0, [r2, #-8]
	pInitCtx->a1 = (u32_t)pEntry;
   1221e:	f842 6c20 	str.w	r6, [r2, #-32]
	pInitCtx->a2 = (u32_t)parameter1;
   12222:	9a06      	ldr	r2, [sp, #24]
   12224:	605a      	str	r2, [r3, #4]
	pInitCtx->a3 = (u32_t)parameter2;
   12226:	9a07      	ldr	r2, [sp, #28]
   12228:	609a      	str	r2, [r3, #8]
	pInitCtx->a4 = (u32_t)parameter3;
   1222a:	9a08      	ldr	r2, [sp, #32]
   1222c:	60da      	str	r2, [r3, #12]
	pInitCtx->xpsr =
   1222e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   12232:	61da      	str	r2, [r3, #28]
	 * and the corresponding parameters.
	 */
	thread->entry = (struct __thread_entry *)(pInitCtx);
#endif

	thread->callee_saved.psp = (u32_t)pInitCtx;
   12234:	64a3      	str	r3, [r4, #72]	; 0x48
	thread->arch.basepri = 0;
   12236:	6621      	str	r1, [r4, #96]	; 0x60
   12238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1223c:	000135d5 	.word	0x000135d5

00012240 <_CpuIdleInit>:
 *
 * void _CpuIdleInit (void);
 */

SECTION_FUNC(TEXT, _CpuIdleInit)
	ldr r1, =_SCB_SCR
   12240:	4901      	ldr	r1, [pc, #4]	; (12248 <_CpuIdleInit+0x8>)
	movs.n r2, #_SCR_INIT_BITS
   12242:	2210      	movs	r2, #16
	str r2, [r1]
   12244:	600a      	str	r2, [r1, #0]
	bx lr
   12246:	4770      	bx	lr
 *
 * void _CpuIdleInit (void);
 */

SECTION_FUNC(TEXT, _CpuIdleInit)
	ldr r1, =_SCB_SCR
   12248:	e000ed10 	.word	0xe000ed10

0001224c <k_cpu_idle>:

#if defined(CONFIG_ARMV6_M)
	cpsie i
#elif defined(CONFIG_ARMV7_M)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
   1224c:	4040      	eors	r0, r0
	msr BASEPRI, r0
   1224e:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

	wfi
   12252:	bf30      	wfi

	bx lr
   12254:	4770      	bx	lr
   12256:	bf00      	nop

00012258 <__bus_fault>:
	mrs r0, MSP
_stack_frame_endif:

#elif defined(CONFIG_ARMV7_M)
	/* force unlock interrupts */
	eors.n r0, r0
   12258:	4040      	eors	r0, r0
	msr BASEPRI, r0
   1225a:	f380 8811 	msr	BASEPRI, r0

	/* this checks to see if we are in a nested exception */
	ldr ip, =_SCS_ICSR
   1225e:	f8df c01c 	ldr.w	ip, [pc, #28]	; 1227c <__bus_fault+0x24>
	ldr ip, [ip]
   12262:	f8dc c000 	ldr.w	ip, [ip]
	ands.w ip, #_SCS_ICSR_RETTOBASE
   12266:	f41c 6c00 	ands.w	ip, ip, #2048	; 0x800

	ite eq			/* is the RETTOBASE bit zero ? */
   1226a:	bf0c      	ite	eq
		mrseq r0, MSP	/* if so, we're not returning to thread mode,
   1226c:	f3ef 8008 	mrseq	r0, MSP
				 * thus this is a nested exception: the stack
				 * frame is on the MSP */
		mrsne r0, PSP	/* if not, we are returning to thread mode, thus
   12270:	f3ef 8009 	mrsne	r0, PSP
				 * frame is on the PSP */
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

	push {lr}
   12274:	b500      	push	{lr}
	bl _Fault
   12276:	f7ff fef5 	bl	12064 <_Fault>

	pop {pc}
   1227a:	bd00      	pop	{pc}
	/* force unlock interrupts */
	eors.n r0, r0
	msr BASEPRI, r0

	/* this checks to see if we are in a nested exception */
	ldr ip, =_SCS_ICSR
   1227c:	e000ed04 	.word	0xe000ed04

00012280 <_NanoFatalErrorHandler>:
 * @param reason the reason that the handler was called
 * @param pEsf pointer to the exception stack frame
 */
void _NanoFatalErrorHandler(unsigned int reason,
					  const NANO_ESF *pEsf)
{
   12280:	b538      	push	{r3, r4, r5, lr}
	switch (reason) {
   12282:	1e43      	subs	r3, r0, #1
 * @param reason the reason that the handler was called
 * @param pEsf pointer to the exception stack frame
 */
void _NanoFatalErrorHandler(unsigned int reason,
					  const NANO_ESF *pEsf)
{
   12284:	4604      	mov	r4, r0
   12286:	460d      	mov	r5, r1
	switch (reason) {
   12288:	2b04      	cmp	r3, #4
   1228a:	d80e      	bhi.n	122aa <_NanoFatalErrorHandler+0x2a>
   1228c:	e8df f003 	tbb	[pc, r3]
   12290:	09050d03 	.word	0x09050d03
   12294:	0b          	.byte	0x0b
   12295:	00          	.byte	0x00
	case _NANO_ERR_INVALID_TASK_EXIT:
		printk("***** Invalid Exit Software Error! *****\n");
   12296:	480d      	ldr	r0, [pc, #52]	; (122cc <_NanoFatalErrorHandler+0x4c>)
   12298:	e000      	b.n	1229c <_NanoFatalErrorHandler+0x1c>
		printk("***** Stack Check Fail! *****\n");
		break;
#endif /* CONFIG_STACK_CANARIES */

	case _NANO_ERR_ALLOCATION_FAIL:
		printk("**** Kernel Allocation Failure! ****\n");
   1229a:	480d      	ldr	r0, [pc, #52]	; (122d0 <_NanoFatalErrorHandler+0x50>)
   1229c:	f7ef f8f0 	bl	1480 <printk>
		break;
   122a0:	e007      	b.n	122b2 <_NanoFatalErrorHandler+0x32>

	case _NANO_ERR_KERNEL_OOPS:
		printk("***** Kernel OOPS! *****\n");
   122a2:	480c      	ldr	r0, [pc, #48]	; (122d4 <_NanoFatalErrorHandler+0x54>)
   122a4:	e7fa      	b.n	1229c <_NanoFatalErrorHandler+0x1c>
		break;

	case _NANO_ERR_KERNEL_PANIC:
		printk("***** Kernel Panic! *****\n");
   122a6:	480c      	ldr	r0, [pc, #48]	; (122d8 <_NanoFatalErrorHandler+0x58>)
   122a8:	e7f8      	b.n	1229c <_NanoFatalErrorHandler+0x1c>
		break;

	default:
		printk("**** Unknown Fatal Error %d! ****\n", reason);
   122aa:	4601      	mov	r1, r0
   122ac:	480b      	ldr	r0, [pc, #44]	; (122dc <_NanoFatalErrorHandler+0x5c>)
   122ae:	f7ef f8e7 	bl	1480 <printk>
		break;
	}
	printk("Current thread ID = %p\n"
   122b2:	f000 ff1b 	bl	130ec <k_current_get>
   122b6:	69aa      	ldr	r2, [r5, #24]
   122b8:	4601      	mov	r1, r0
   122ba:	4809      	ldr	r0, [pc, #36]	; (122e0 <_NanoFatalErrorHandler+0x60>)
   122bc:	f7ef f8e0 	bl	1480 <printk>
	 * to respond to the error.  The decisions as to what responses are
	 * appropriate to the various errors are something the customer must
	 * decide.
	 */

	_SysFatalErrorHandler(reason, pEsf);
   122c0:	4629      	mov	r1, r5
   122c2:	4620      	mov	r0, r4
}
   122c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	 * to respond to the error.  The decisions as to what responses are
	 * appropriate to the various errors are something the customer must
	 * decide.
	 */

	_SysFatalErrorHandler(reason, pEsf);
   122c8:	f000 b810 	b.w	122ec <_SysFatalErrorHandler>
   122cc:	00016f16 	.word	0x00016f16
   122d0:	00016f40 	.word	0x00016f40
   122d4:	00016f66 	.word	0x00016f66
   122d8:	00016f80 	.word	0x00016f80
   122dc:	00016f9b 	.word	0x00016f9b
   122e0:	00016fbe 	.word	0x00016fbe

000122e4 <_do_kernel_oops>:
}

void _do_kernel_oops(const NANO_ESF *esf)
{
   122e4:	4601      	mov	r1, r0
	_NanoFatalErrorHandler(esf->r0, esf);
   122e6:	6800      	ldr	r0, [r0, #0]
   122e8:	f7ff bfca 	b.w	12280 <_NanoFatalErrorHandler>

000122ec <_SysFatalErrorHandler>:
#ifdef CONFIG_STACK_SENTINEL
	if (reason == _NANO_ERR_STACK_CHK_FAIL) {
		goto hang_system;
	}
#endif
	if (reason == _NANO_ERR_KERNEL_PANIC) {
   122ec:	2805      	cmp	r0, #5
 *
 * @return N/A
 */
void __weak _SysFatalErrorHandler(unsigned int reason,
					 const NANO_ESF *pEsf)
{
   122ee:	b510      	push	{r4, lr}
#ifdef CONFIG_STACK_SENTINEL
	if (reason == _NANO_ERR_STACK_CHK_FAIL) {
		goto hang_system;
	}
#endif
	if (reason == _NANO_ERR_KERNEL_PANIC) {
   122f0:	d01b      	beq.n	1232a <_SysFatalErrorHandler+0x3e>
		goto hang_system;
	}
	if (k_is_in_isr() || _is_thread_essential()) {
   122f2:	f001 f957 	bl	135a4 <k_is_in_isr>
   122f6:	b150      	cbz	r0, 1230e <_SysFatalErrorHandler+0x22>
		printk("Fatal fault in %s! Spinning...\n",
		       k_is_in_isr() ? "ISR" : "essential thread");
   122f8:	f001 f954 	bl	135a4 <k_is_in_isr>
#endif
	if (reason == _NANO_ERR_KERNEL_PANIC) {
		goto hang_system;
	}
	if (k_is_in_isr() || _is_thread_essential()) {
		printk("Fatal fault in %s! Spinning...\n",
   122fc:	4b0c      	ldr	r3, [pc, #48]	; (12330 <_SysFatalErrorHandler+0x44>)
   122fe:	490d      	ldr	r1, [pc, #52]	; (12334 <_SysFatalErrorHandler+0x48>)
   12300:	2800      	cmp	r0, #0
   12302:	bf08      	it	eq
   12304:	4619      	moveq	r1, r3
   12306:	480c      	ldr	r0, [pc, #48]	; (12338 <_SysFatalErrorHandler+0x4c>)
   12308:	f7ef f8ba 	bl	1480 <printk>
		       k_is_in_isr() ? "ISR" : "essential thread");
		goto hang_system;
   1230c:	e00d      	b.n	1232a <_SysFatalErrorHandler+0x3e>
	}
#endif
	if (reason == _NANO_ERR_KERNEL_PANIC) {
		goto hang_system;
	}
	if (k_is_in_isr() || _is_thread_essential()) {
   1230e:	f001 f959 	bl	135c4 <_is_thread_essential>
   12312:	2800      	cmp	r0, #0
   12314:	d1f0      	bne.n	122f8 <_SysFatalErrorHandler+0xc>
		printk("Fatal fault in %s! Spinning...\n",
		       k_is_in_isr() ? "ISR" : "essential thread");
		goto hang_system;
	}
	printk("Fatal fault in thread %p! Aborting.\n", _current);
   12316:	4c09      	ldr	r4, [pc, #36]	; (1233c <_SysFatalErrorHandler+0x50>)
   12318:	4809      	ldr	r0, [pc, #36]	; (12340 <_SysFatalErrorHandler+0x54>)
   1231a:	68a1      	ldr	r1, [r4, #8]
   1231c:	f7ef f8b0 	bl	1480 <printk>
	k_thread_abort(_current);
   12320:	68a0      	ldr	r0, [r4, #8]

	for (;;) {
		k_cpu_idle();
	}
	CODE_UNREACHABLE;
}
   12322:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printk("Fatal fault in %s! Spinning...\n",
		       k_is_in_isr() ? "ISR" : "essential thread");
		goto hang_system;
	}
	printk("Fatal fault in thread %p! Aborting.\n", _current);
	k_thread_abort(_current);
   12326:	f000 b80d 	b.w	12344 <k_thread_abort>
#else
	ARG_UNUSED(reason);
#endif

	for (;;) {
		k_cpu_idle();
   1232a:	f7ff ff8f 	bl	1224c <k_cpu_idle>
   1232e:	e7fc      	b.n	1232a <_SysFatalErrorHandler+0x3e>
   12330:	00016ffe 	.word	0x00016ffe
   12334:	00016ffa 	.word	0x00016ffa
   12338:	0001700f 	.word	0x0001700f
   1233c:	20001fe4 	.word	0x20001fe4
   12340:	0001702f 	.word	0x0001702f

00012344 <k_thread_abort>:
#include <wait_q.h>

extern void _k_thread_single_abort(struct k_thread *thread);

void k_thread_abort(k_tid_t thread)
{
   12344:	b538      	push	{r3, r4, r5, lr}
   12346:	4605      	mov	r5, r0
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M)
	unsigned int tmp;

	__asm__ volatile(
   12348:	f04f 0320 	mov.w	r3, #32
   1234c:	f3ef 8411 	mrs	r4, BASEPRI
   12350:	f383 8811 	msr	BASEPRI, r3
	unsigned int key;

	key = irq_lock();

	_k_thread_single_abort(thread);
   12354:	f001 f970 	bl	13638 <_k_thread_single_abort>
	_thread_monitor_exit(thread);

	if (_current == thread) {
   12358:	4b0b      	ldr	r3, [pc, #44]	; (12388 <k_thread_abort+0x44>)
   1235a:	689b      	ldr	r3, [r3, #8]
   1235c:	429d      	cmp	r5, r3
   1235e:	d10d      	bne.n	1237c <k_thread_abort+0x38>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
   12360:	4b0a      	ldr	r3, [pc, #40]	; (1238c <k_thread_abort+0x48>)
   12362:	685a      	ldr	r2, [r3, #4]
   12364:	f3c2 0208 	ubfx	r2, r2, #0, #9
   12368:	b922      	cbnz	r2, 12374 <k_thread_abort+0x30>

#ifdef CONFIG_STACK_SENTINEL
	_check_stack_sentinel();
#endif
#ifdef CONFIG_TIMESLICING
	_update_time_slice_before_swap();
   1236a:	f000 fee9 	bl	13140 <_update_time_slice_before_swap>
#endif

	return __swap(key);
   1236e:	4620      	mov	r0, r4
   12370:	f7ff fd8a 	bl	11e88 <__swap>
			_Swap(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   12374:	685a      	ldr	r2, [r3, #4]
   12376:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   1237a:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	_reschedule_threads(key);
   1237c:	4620      	mov	r0, r4
}
   1237e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
		}
	}

	/* The abort handler might have altered the ready queue. */
	_reschedule_threads(key);
   12382:	f000 be1b 	b.w	12fbc <_reschedule_threads>
   12386:	bf00      	nop
   12388:	20001fe4 	.word	0x20001fe4
   1238c:	e000ed00 	.word	0xe000ed00

00012390 <_isr_wrapper>:
 *
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

	push {lr}		/* lr is now the first item on the stack */
   12390:	b500      	push	{lr}
	 * for the next timer deadline is not interrupted.  For non-tickless idle,
	 * this ensures that the clearing of the kernel idle state is not
	 * interrupted.  In each case, _sys_power_save_idle_exit is called with
	 * interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
   12392:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   12394:	4a0b      	ldr	r2, [pc, #44]	; (123c4 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   12396:	6950      	ldr	r0, [r2, #20]
	cmp r0, #0
   12398:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	blx _sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M)
	ittt ne
   1239a:	bf1e      	ittt	ne
	movne	r1, #0
   1239c:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   1239e:	6151      	strne	r1, [r2, #20]
		blxne	_sys_power_save_idle_exit
   123a0:	f000 f8a4 	blne	124ec <_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   123a4:	b662      	cpsie	i
#endif

	mrs r0, IPSR	/* get exception number */
   123a6:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M)
	sub r0, r0, #16	/* get IRQ number */
   123aa:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   123ae:	ea4f 00c0 	mov.w	r0, r0, lsl #3
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */
	ldr r1, =_sw_isr_table
   123b2:	4905      	ldr	r1, [pc, #20]	; (123c8 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   123b4:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   123b6:	c909      	ldmia	r1!, {r0, r3}
	pop {r3}
#else
	pop {lr}
#endif
#endif
	blx r3		/* call ISR */
   123b8:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M)
	pop {r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M)
	pop {lr}
   123ba:	f85d eb04 	ldr.w	lr, [sp], #4
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

	/* exception return is done in _IntExit() */
	b _IntExit
   123be:	f7ff bcff 	b.w	11dc0 <_IntExit>
   123c2:	0000      	.short	0x0000
	 * interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   123c4:	20001fe4 	.word	0x20001fe4
	sub r0, r0, #16	/* get IRQ number */
	lsl r0, r0, #3	/* table is 8-byte wide */
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */
	ldr r1, =_sw_isr_table
   123c8:	000000dc 	.word	0x000000dc

000123cc <__reset>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M)
    cpsid i
#elif defined(CONFIG_ARMV7_M)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   123cc:	2020      	movs	r0, #32
    msr BASEPRI, r0
   123ce:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during nanoInit().
     */
    ldr r0, =_interrupt_stack
   123d2:	4805      	ldr	r0, [pc, #20]	; (123e8 <__reset+0x1c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
   123d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   123d8:	1840      	adds	r0, r0, r1
    msr PSP, r0
   123da:	f380 8809 	msr	PSP, r0
    movs.n r0, #2	/* switch to using PSP (bit1 of CONTROL reg) */
   123de:	2002      	movs	r0, #2
    msr CONTROL, r0
   123e0:	f380 8814 	msr	CONTROL, r0

    b _PrepC
   123e4:	f000 b806 	b.w	123f4 <_PrepC>

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during nanoInit().
     */
    ldr r0, =_interrupt_stack
   123e8:	200036c0 	.word	0x200036c0

000123ec <_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(_SysNmiOnReset)

SECTION_FUNC(TEXT, _SysNmiOnReset)
    wfi
   123ec:	bf30      	wfi
    b _SysNmiOnReset
   123ee:	f7ff bffd 	b.w	123ec <_SysNmiOnReset>
   123f2:	bf00      	nop

000123f4 <_PrepC>:
 *
 * @return N/A
 */

void _PrepC(void)
{
   123f4:	b508      	push	{r3, lr}
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   123f6:	4b07      	ldr	r3, [pc, #28]	; (12414 <_PrepC+0x20>)
   123f8:	4a07      	ldr	r2, [pc, #28]	; (12418 <_PrepC+0x24>)
   123fa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   123fe:	6093      	str	r3, [r2, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   12400:	f3bf 8f4f 	dsb	sy
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
   12404:	f3bf 8f6f 	isb	sy

void _PrepC(void)
{
	relocate_vector_table();
	enable_floating_point();
	_bss_zero();
   12408:	f000 f8a2 	bl	12550 <_bss_zero>
	_data_copy();
   1240c:	f000 f8aa 	bl	12564 <_data_copy>
	_Cstart();
   12410:	f000 f8c8 	bl	125a4 <_Cstart>
   12414:	00000000 	.word	0x00000000
   12418:	e000ed00 	.word	0xe000ed00

0001241c <__nmi>:
 *
 * @return N/A
 */

void __nmi(void)
{
   1241c:	b508      	push	{r3, lr}
	handler();
   1241e:	f7ff ffe5 	bl	123ec <_SysNmiOnReset>
	_ExcExit();
}
   12422:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 */

void __nmi(void)
{
	handler();
	_ExcExit();
   12426:	f7ff bcd1 	b.w	11dcc <_ExcExit>
	...

0001242c <arm_mpu_init>:
	}
}

static inline u8_t _get_num_regions(void)
{
	u32_t type = ARM_MPU_DEV->type;
   1242c:	4b15      	ldr	r3, [pc, #84]	; (12484 <arm_mpu_init+0x58>)
static void _arm_mpu_config(void)
{
	u32_t r_index;

	/* ARM MPU supports up to 16 Regions */
	if (mpu_config.num_regions > _get_num_regions()) {
   1242e:	4916      	ldr	r1, [pc, #88]	; (12488 <arm_mpu_init+0x5c>)
	}
}

static inline u8_t _get_num_regions(void)
{
	u32_t type = ARM_MPU_DEV->type;
   12430:	681a      	ldr	r2, [r3, #0]
	__DSB();
	__ISB();
}

static int arm_mpu_init(struct device *arg)
{
   12432:	b530      	push	{r4, r5, lr}
static void _arm_mpu_config(void)
{
	u32_t r_index;

	/* ARM MPU supports up to 16 Regions */
	if (mpu_config.num_regions > _get_num_regions()) {
   12434:	680d      	ldr	r5, [r1, #0]
   12436:	f3c2 2207 	ubfx	r2, r2, #8, #8
   1243a:	4295      	cmp	r5, r2
   1243c:	d81f      	bhi.n	1247e <arm_mpu_init+0x52>
		return;
	}

	/* Disable MPU */
	ARM_MPU_DEV->ctrl = 0;
   1243e:	2200      	movs	r2, #0
   12440:	6848      	ldr	r0, [r1, #4]
   12442:	605a      	str	r2, [r3, #4]

	/* Configure regions */
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
   12444:	4295      	cmp	r5, r2
   12446:	f100 000c 	add.w	r0, r0, #12
   1244a:	d00f      	beq.n	1246c <arm_mpu_init+0x40>
		_region_init(r_index,
   1244c:	f850 1c0c 	ldr.w	r1, [r0, #-12]
   12450:	f850 4c04 	ldr.w	r4, [r0, #-4]

static void _region_init(u32_t index, u32_t region_addr,
			 u32_t region_attr)
{
	/* Select the region you want to access */
	ARM_MPU_DEV->rnr = index;
   12454:	609a      	str	r2, [r3, #8]
	/* Configure the region */
	ARM_MPU_DEV->rbar = (region_addr & REGION_BASE_ADDR_MASK)
				| REGION_VALID | index;
   12456:	f021 011f 	bic.w	r1, r1, #31
   1245a:	f041 0110 	orr.w	r1, r1, #16
   1245e:	4311      	orrs	r1, r2
			 u32_t region_attr)
{
	/* Select the region you want to access */
	ARM_MPU_DEV->rnr = index;
	/* Configure the region */
	ARM_MPU_DEV->rbar = (region_addr & REGION_BASE_ADDR_MASK)
   12460:	60d9      	str	r1, [r3, #12]
				| REGION_VALID | index;
	ARM_MPU_DEV->rasr = region_attr | REGION_ENABLE;
   12462:	f044 0101 	orr.w	r1, r4, #1
   12466:	6119      	str	r1, [r3, #16]

	/* Disable MPU */
	ARM_MPU_DEV->ctrl = 0;

	/* Configure regions */
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
   12468:	3201      	adds	r2, #1
   1246a:	e7eb      	b.n	12444 <arm_mpu_init+0x18>
			     mpu_config.mpu_regions[r_index].base,
			     mpu_config.mpu_regions[r_index].attr);
	}

	/* Enable MPU */
	ARM_MPU_DEV->ctrl = ARM_MPU_ENABLE | ARM_MPU_PRIVDEFENA;
   1246c:	2205      	movs	r2, #5
   1246e:	605a      	str	r2, [r3, #4]

	arm_mpu_enabled = 1;
   12470:	4b06      	ldr	r3, [pc, #24]	; (1248c <arm_mpu_init+0x60>)
   12472:	2201      	movs	r2, #1
   12474:	701a      	strb	r2, [r3, #0]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   12476:	f3bf 8f4f 	dsb	sy
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
   1247a:	f3bf 8f6f 	isb	sy
	ARG_UNUSED(arg);

	_arm_mpu_config();

	return 0;
}
   1247e:	2000      	movs	r0, #0
   12480:	bd30      	pop	{r4, r5, pc}
   12482:	bf00      	nop
   12484:	e000ed90 	.word	0xe000ed90
   12488:	200006d8 	.word	0x200006d8
   1248c:	20001f10 	.word	0x20001f10

00012490 <_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void _sys_device_do_config_level(int level)
{
   12490:	b538      	push	{r3, r4, r5, lr}
	struct device *info;

	for (info = config_levels[level]; info < config_levels[level+1];
   12492:	4b08      	ldr	r3, [pc, #32]	; (124b4 <_sys_device_do_config_level+0x24>)
   12494:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   12498:	3001      	adds	r0, #1
   1249a:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   1249e:	4620      	mov	r0, r4
   124a0:	42a8      	cmp	r0, r5
   124a2:	f104 040c 	add.w	r4, r4, #12
   124a6:	d204      	bcs.n	124b2 <_sys_device_do_config_level+0x22>
								info++) {
		struct device_config *device = info->config;

		device->init(info);
   124a8:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   124ac:	685b      	ldr	r3, [r3, #4]
   124ae:	4798      	blx	r3
   124b0:	e7f5      	b.n	1249e <_sys_device_do_config_level+0xe>
	}
}
   124b2:	bd38      	pop	{r3, r4, r5, pc}
   124b4:	000170bc 	.word	0x000170bc

000124b8 <device_get_binding>:

struct device *device_get_binding(const char *name)
{
   124b8:	b570      	push	{r4, r5, r6, lr}
	struct device *info;

	for (info = __device_init_start; info != __device_init_end; info++) {
   124ba:	4c0a      	ldr	r4, [pc, #40]	; (124e4 <device_get_binding+0x2c>)
   124bc:	4d0a      	ldr	r5, [pc, #40]	; (124e8 <device_get_binding+0x30>)
		device->init(info);
	}
}

struct device *device_get_binding(const char *name)
{
   124be:	4606      	mov	r6, r0
	struct device *info;

	for (info = __device_init_start; info != __device_init_end; info++) {
   124c0:	42ac      	cmp	r4, r5
   124c2:	d00c      	beq.n	124de <device_get_binding+0x26>
		if (info->driver_api && !strcmp(name, info->config->name)) {
   124c4:	6863      	ldr	r3, [r4, #4]
   124c6:	b90b      	cbnz	r3, 124cc <device_get_binding+0x14>

struct device *device_get_binding(const char *name)
{
	struct device *info;

	for (info = __device_init_start; info != __device_init_end; info++) {
   124c8:	340c      	adds	r4, #12
   124ca:	e7f9      	b.n	124c0 <device_get_binding+0x8>
		if (info->driver_api && !strcmp(name, info->config->name)) {
   124cc:	6823      	ldr	r3, [r4, #0]
   124ce:	4630      	mov	r0, r6
   124d0:	6819      	ldr	r1, [r3, #0]
   124d2:	f7ee fda1 	bl	1018 <strcmp>
   124d6:	2800      	cmp	r0, #0
   124d8:	d1f6      	bne.n	124c8 <device_get_binding+0x10>
   124da:	4620      	mov	r0, r4
			return info;
		}
	}

	return NULL;
}
   124dc:	bd70      	pop	{r4, r5, r6, pc}
		if (info->driver_api && !strcmp(name, info->config->name)) {
			return info;
		}
	}

	return NULL;
   124de:	2000      	movs	r0, #0
   124e0:	bd70      	pop	{r4, r5, r6, pc}
   124e2:	bf00      	nop
   124e4:	200006e8 	.word	0x200006e8
   124e8:	20000760 	.word	0x20000760

000124ec <_sys_power_save_idle_exit>:
	if (_sys_pm_idle_exit_notify) {
		_sys_soc_resume();
	}
#endif

	if (_must_enter_tickless_idle(ticks)) {
   124ec:	1c43      	adds	r3, r0, #1
   124ee:	d003      	beq.n	124f8 <_sys_power_save_idle_exit+0xc>
   124f0:	4b03      	ldr	r3, [pc, #12]	; (12500 <_sys_power_save_idle_exit+0x14>)
   124f2:	681b      	ldr	r3, [r3, #0]
   124f4:	4298      	cmp	r0, r3
   124f6:	db01      	blt.n	124fc <_sys_power_save_idle_exit+0x10>
		/* Resume normal periodic system timer interrupts */
		_timer_idle_exit();
   124f8:	f7ee ba94 	b.w	a24 <_timer_idle_exit>
   124fc:	4770      	bx	lr
   124fe:	bf00      	nop
   12500:	200006e0 	.word	0x200006e0

00012504 <idle>:
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   12504:	4d0f      	ldr	r5, [pc, #60]	; (12544 <idle+0x40>)
#else
#define IDLE_YIELD_IF_COOP() do { } while ((0))
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   12506:	b580      	push	{r7, lr}
			k_cpu_idle();
			return;
		}
	}
#endif
	if (_must_enter_tickless_idle(ticks)) {
   12508:	4f0f      	ldr	r7, [pc, #60]	; (12548 <idle+0x44>)
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1250a:	f105 060c 	add.w	r6, r5, #12
   1250e:	f04f 0220 	mov.w	r2, #32
   12512:	f3ef 8311 	mrs	r3, BASEPRI
   12516:	f382 8811 	msr	BASEPRI, r2
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   1251a:	68eb      	ldr	r3, [r5, #12]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1251c:	42b3      	cmp	r3, r6
   1251e:	d007      	beq.n	12530 <idle+0x2c>
static inline s32_t _get_next_timeout_expiry(void)
{
	struct _timeout *t = (struct _timeout *)
			     sys_dlist_peek_head(&_timeout_q);

	return t ? t->delta_ticks_from_prev : K_FOREVER;
   12520:	b133      	cbz	r3, 12530 <idle+0x2c>
   12522:	691c      	ldr	r4, [r3, #16]
   12524:	1c63      	adds	r3, r4, #1
   12526:	d005      	beq.n	12534 <idle+0x30>
   12528:	683b      	ldr	r3, [r7, #0]
   1252a:	42a3      	cmp	r3, r4
   1252c:	dd02      	ble.n	12534 <idle+0x30>
   1252e:	e004      	b.n	1253a <idle+0x36>
   12530:	f04f 34ff 	mov.w	r4, #4294967295
		/*
		 * In the case of tickless kernel, timer driver should
		 * reprogram timer only if the currently programmed time
		 * duration is smaller than the idle time.
		 */
		_timer_idle_enter(ticks);
   12534:	4620      	mov	r0, r4
   12536:	f7ee fa61 	bl	9fc <_timer_idle_enter>
 *
 * @return N/A
 */
static void set_kernel_idle_time_in_ticks(s32_t ticks)
{
	_kernel.idle = ticks;
   1253a:	4b02      	ldr	r3, [pc, #8]	; (12544 <idle+0x40>)
   1253c:	615c      	str	r4, [r3, #20]
	if (_sys_soc_suspend(ticks) == SYS_PM_NOT_HANDLED) {
		_sys_pm_idle_exit_notify = 0;
		k_cpu_idle();
	}
#else
	k_cpu_idle();
   1253e:	f7ff fe85 	bl	1224c <k_cpu_idle>
   12542:	e7e4      	b.n	1250e <idle+0xa>
   12544:	20001fe4 	.word	0x20001fe4
   12548:	200006e0 	.word	0x200006e0

0001254c <k_call_stacks_analyze>:
#endif

extern void idle(void *unused1, void *unused2, void *unused3);

void k_call_stacks_analyze(void)
{
   1254c:	4770      	bx	lr
	...

00012550 <_bss_zero>:
 *
 * @return N/A
 */
void _bss_zero(void)
{
	memset(&__bss_start, 0,
   12550:	4802      	ldr	r0, [pc, #8]	; (1255c <_bss_zero+0xc>)
   12552:	4a03      	ldr	r2, [pc, #12]	; (12560 <_bss_zero+0x10>)
   12554:	2100      	movs	r1, #0
   12556:	1a12      	subs	r2, r2, r0
   12558:	f7ee bdc7 	b.w	10ea <memset>
   1255c:	20000808 	.word	0x20000808
   12560:	200022b4 	.word	0x200022b4

00012564 <_data_copy>:
 *
 * @return N/A
 */
void _data_copy(void)
{
	memcpy(&__data_ram_start, &__data_rom_start,
   12564:	4802      	ldr	r0, [pc, #8]	; (12570 <_data_copy+0xc>)
   12566:	4a03      	ldr	r2, [pc, #12]	; (12574 <_data_copy+0x10>)
   12568:	4903      	ldr	r1, [pc, #12]	; (12578 <_data_copy+0x14>)
   1256a:	1a12      	subs	r2, r2, r0
   1256c:	f7ee bd91 	b.w	1092 <memcpy>
   12570:	20000000 	.word	0x20000000
   12574:	20000808 	.word	0x20000808
   12578:	000170d8 	.word	0x000170d8

0001257c <_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void _main(void *unused1, void *unused2, void *unused3)
{
   1257c:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1257e:	2002      	movs	r0, #2
   12580:	f7ff ff86 	bl	12490 <_sys_device_do_config_level>

	/* Final init level before app starts */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
   12584:	2003      	movs	r0, #3
   12586:	f7ff ff83 	bl	12490 <_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	_init_static_threads();
   1258a:	f001 f87b 	bl	13684 <_init_static_threads>
	__main_time_stamp = (u64_t)k_cycle_get_32();
#endif

	extern void main(void);

	main();
   1258e:	f7ee f881 	bl	694 <main>

	/* Terminate thread normally since it has no more work to do */
	_main_thread->base.user_options &= ~K_ESSENTIAL;
   12592:	4a03      	ldr	r2, [pc, #12]	; (125a0 <_main+0x24>)
   12594:	7a13      	ldrb	r3, [r2, #8]
   12596:	f023 0301 	bic.w	r3, r3, #1
   1259a:	7213      	strb	r3, [r2, #8]
   1259c:	bd08      	pop	{r3, pc}
   1259e:	bf00      	nop
   125a0:	20001f14 	.word	0x20001f14

000125a4 <_Cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void _Cstart(void)
{
   125a4:	b5bf      	push	{r0, r1, r2, r3, r4, r5, r7, lr}
	 * spurious interrupts. This must be performed before other kernel
	 * subsystems install bonafide handlers, or before hardware device
	 * drivers are initialized.
	 */

	_IntLibInit();
   125a6:	f7ff fc23 	bl	11df0 <_IntLibInit>
   125aa:	4b31      	ldr	r3, [pc, #196]	; (12670 <_Cstart+0xcc>)
   125ac:	f503 7280 	add.w	r2, r3, #256	; 0x100
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   125b0:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
   125b2:	605b      	str	r3, [r3, #4]
   125b4:	3308      	adds	r3, #8

	/* ready the init/main and idle threads */

	for (int ii = 0; ii < K_NUM_PRIORITIES; ii++) {
   125b6:	4293      	cmp	r3, r2
   125b8:	d1fa      	bne.n	125b0 <_Cstart+0xc>
	 * - the main thread will be the one to run first
	 * - no other thread is initialized yet and thus their priority fields
	 *   contain garbage, which would prevent the cache loading algorithm
	 *   to work as intended
	 */
	_ready_q.cache = _main_thread;
   125ba:	4d2e      	ldr	r5, [pc, #184]	; (12674 <_Cstart+0xd0>)
   125bc:	4e2e      	ldr	r6, [pc, #184]	; (12678 <_Cstart+0xd4>)

	_new_thread(_main_thread, _main_stack,
   125be:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 1269c <_Cstart+0xf8>
	 * - the main thread will be the one to run first
	 * - no other thread is initialized yet and thus their priority fields
	 *   contain garbage, which would prevent the cache loading algorithm
	 *   to work as intended
	 */
	_ready_q.cache = _main_thread;
   125c2:	61b5      	str	r5, [r6, #24]

	_new_thread(_main_thread, _main_stack,
   125c4:	2400      	movs	r4, #0
   125c6:	f04f 0901 	mov.w	r9, #1
   125ca:	4643      	mov	r3, r8
   125cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
   125d0:	492a      	ldr	r1, [pc, #168]	; (1267c <_Cstart+0xd8>)
   125d2:	f8cd 9010 	str.w	r9, [sp, #16]
   125d6:	4628      	mov	r0, r5
   125d8:	9403      	str	r4, [sp, #12]
   125da:	9402      	str	r4, [sp, #8]
   125dc:	9401      	str	r4, [sp, #4]
   125de:	9400      	str	r4, [sp, #0]
   125e0:	f7ff fe02 	bl	121e8 <_new_thread>
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   125e4:	7a6b      	ldrb	r3, [r5, #9]
		    CONFIG_MAIN_THREAD_PRIORITY, K_ESSENTIAL);
	_mark_thread_as_started(_main_thread);
	_add_thread_to_ready_q(_main_thread);

#ifdef CONFIG_MULTITHREADING
	_new_thread(_idle_thread, _idle_stack,
   125e6:	4f26      	ldr	r7, [pc, #152]	; (12680 <_Cstart+0xdc>)
   125e8:	f023 0304 	bic.w	r3, r3, #4

	_new_thread(_main_thread, _main_stack,
		    MAIN_STACK_SIZE, _main, NULL, NULL, NULL,
		    CONFIG_MAIN_THREAD_PRIORITY, K_ESSENTIAL);
	_mark_thread_as_started(_main_thread);
	_add_thread_to_ready_q(_main_thread);
   125ec:	4628      	mov	r0, r5
   125ee:	726b      	strb	r3, [r5, #9]
   125f0:	f000 fc32 	bl	12e58 <_add_thread_to_ready_q>

#ifdef CONFIG_MULTITHREADING
	_new_thread(_idle_thread, _idle_stack,
   125f4:	230f      	movs	r3, #15
   125f6:	9303      	str	r3, [sp, #12]
   125f8:	f44f 72a0 	mov.w	r2, #320	; 0x140
   125fc:	4921      	ldr	r1, [pc, #132]	; (12684 <_Cstart+0xe0>)
   125fe:	f8cd 9010 	str.w	r9, [sp, #16]
   12602:	4638      	mov	r0, r7
   12604:	9402      	str	r4, [sp, #8]
   12606:	9401      	str	r4, [sp, #4]
   12608:	9400      	str	r4, [sp, #0]
   1260a:	4b1f      	ldr	r3, [pc, #124]	; (12688 <_Cstart+0xe4>)
   1260c:	f7ff fdec 	bl	121e8 <_new_thread>
   12610:	7a7b      	ldrb	r3, [r7, #9]
   12612:	f023 0304 	bic.w	r3, r3, #4
   12616:	727b      	strb	r3, [r7, #9]
		    IDLE_STACK_SIZE, idle, NULL, NULL, NULL,
		    K_LOWEST_THREAD_PRIO, K_ESSENTIAL);
	_mark_thread_as_started(_idle_thread);
	_add_thread_to_ready_q(_idle_thread);
   12618:	4638      	mov	r0, r7
   1261a:	f000 fc1d 	bl	12e58 <_add_thread_to_ready_q>
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   1261e:	f106 030c 	add.w	r3, r6, #12
   12622:	60f3      	str	r3, [r6, #12]
	list->tail = (sys_dnode_t *)list;
   12624:	6133      	str	r3, [r6, #16]
 * @return N/A
 */
static ALWAYS_INLINE void _MspSet(u32_t msp /* value to store in MSP */
				  )
{
	__asm__ volatile("msr MSP, %0\n\t" :  : "r"(msp));
   12626:	4b19      	ldr	r3, [pc, #100]	; (1268c <_Cstart+0xe8>)
   12628:	f383 8808 	msr	MSP, r3
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1262c:	4b18      	ldr	r3, [pc, #96]	; (12690 <_Cstart+0xec>)
   1262e:	22e0      	movs	r2, #224	; 0xe0
   12630:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
   12634:	77dc      	strb	r4, [r3, #31]
   12636:	761c      	strb	r4, [r3, #24]
   12638:	765c      	strb	r4, [r3, #25]
   1263a:	769c      	strb	r4, [r3, #26]
	NVIC_SetPriority(MemoryManagement_IRQn, _EXC_FAULT_PRIO);
	NVIC_SetPriority(BusFault_IRQn, _EXC_FAULT_PRIO);
	NVIC_SetPriority(UsageFault_IRQn, _EXC_FAULT_PRIO);

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   1263c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1263e:	f442 22e0 	orr.w	r2, r2, #458752	; 0x70000
   12642:	625a      	str	r2, [r3, #36]	; 0x24
extern void _CpuIdleInit(void);
static ALWAYS_INLINE void kernel_arch_init(void)
{
	_InterruptStackSetup();
	_ExcSetup();
	_FaultInit();
   12644:	f7ff fd76 	bl	12134 <_FaultInit>
	_CpuIdleInit();
   12648:	f7ff fdfa 	bl	12240 <_CpuIdleInit>
	 */

	prepare_multithreading(dummy_thread);

	/* perform basic hardware initialization */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   1264c:	4620      	mov	r0, r4
   1264e:	f7ff ff1f 	bl	12490 <_sys_device_do_config_level>
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   12652:	4648      	mov	r0, r9
   12654:	f7ff ff1c 	bl	12490 <_sys_device_do_config_level>

	_current = main_thread;

	/* the ready queue cache already contains the main thread */

	__asm__ __volatile__(
   12658:	4b0e      	ldr	r3, [pc, #56]	; (12694 <_Cstart+0xf0>)
	char *start_of_main_stack;

	start_of_main_stack = main_stack + main_stack_size;
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);

	_current = main_thread;
   1265a:	60b5      	str	r5, [r6, #8]

	/* the ready queue cache already contains the main thread */

	__asm__ __volatile__(
   1265c:	4a0e      	ldr	r2, [pc, #56]	; (12698 <_Cstart+0xf4>)
   1265e:	f023 0307 	bic.w	r3, r3, #7
   12662:	f383 8809 	msr	PSP, r3
   12666:	2100      	movs	r1, #0
   12668:	f381 8811 	msr	BASEPRI, r1
   1266c:	4640      	mov	r0, r8
   1266e:	4710      	bx	r2
   12670:	20002004 	.word	0x20002004
   12674:	20001f14 	.word	0x20001f14
   12678:	20001fe4 	.word	0x20001fe4
   1267c:	20003180 	.word	0x20003180
   12680:	20001f7c 	.word	0x20001f7c
   12684:	20003580 	.word	0x20003580
   12688:	00012505 	.word	0x00012505
   1268c:	20003ec0 	.word	0x20003ec0
   12690:	e000ed00 	.word	0xe000ed00
   12694:	20003580 	.word	0x20003580
   12698:	000135d5 	.word	0x000135d5
   1269c:	0001257d 	.word	0x0001257d

000126a0 <adjust_owner_prio.isra.6>:
	new_prio = _get_new_prio_with_ceiling(new_prio);

	return new_prio;
}

static void adjust_owner_prio(struct k_mutex *mutex, int new_prio)
   126a0:	b538      	push	{r3, r4, r5, lr}
{
	if (mutex->owner->base.prio != new_prio) {
   126a2:	f990 300a 	ldrsb.w	r3, [r0, #10]
   126a6:	428b      	cmp	r3, r1
	new_prio = _get_new_prio_with_ceiling(new_prio);

	return new_prio;
}

static void adjust_owner_prio(struct k_mutex *mutex, int new_prio)
   126a8:	4604      	mov	r4, r0
   126aa:	460d      	mov	r5, r1
{
	if (mutex->owner->base.prio != new_prio) {
   126ac:	d00e      	beq.n	126cc <adjust_owner_prio.isra.6+0x2c>
}

/* check if a thread is ready */
static inline int _is_thread_ready(struct k_thread *thread)
{
	return !(_is_thread_prevented_from_running(thread) ||
   126ae:	7a43      	ldrb	r3, [r0, #9]
   126b0:	06db      	lsls	r3, r3, #27
   126b2:	d10a      	bne.n	126ca <adjust_owner_prio.isra.6+0x2a>
   126b4:	6a03      	ldr	r3, [r0, #32]
   126b6:	3301      	adds	r3, #1
   126b8:	d107      	bne.n	126ca <adjust_owner_prio.isra.6+0x2a>
 */
/* must be called with interrupts locked */
static inline void _thread_priority_set(struct k_thread *thread, int prio)
{
	if (_is_thread_ready(thread)) {
		_remove_thread_from_ready_q(thread);
   126ba:	f000 fbf5 	bl	12ea8 <_remove_thread_from_ready_q>
		thread->base.prio = prio;
   126be:	72a5      	strb	r5, [r4, #10]
		_add_thread_to_ready_q(thread);
   126c0:	4620      	mov	r0, r4
			'y' : 'n',
			new_prio, mutex->owner->base.prio);

		_thread_priority_set(mutex->owner, new_prio);
	}
}
   126c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   126c6:	f000 bbc7 	b.w	12e58 <_add_thread_to_ready_q>
	} else {
		thread->base.prio = prio;
   126ca:	72a5      	strb	r5, [r4, #10]
   126cc:	bd38      	pop	{r3, r4, r5, pc}
	...

000126d0 <k_mutex_lock>:

int k_mutex_lock(struct k_mutex *mutex, s32_t timeout)
{
   126d0:	b570      	push	{r4, r5, r6, lr}
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
   126d2:	4a30      	ldr	r2, [pc, #192]	; (12794 <k_mutex_lock+0xc4>)
   126d4:	460d      	mov	r5, r1
   126d6:	6891      	ldr	r1, [r2, #8]
   126d8:	7acb      	ldrb	r3, [r1, #11]
   126da:	3b01      	subs	r3, #1
   126dc:	4604      	mov	r4, r0
   126de:	72cb      	strb	r3, [r1, #11]
	int new_prio, key;

	_sched_lock();

	if (likely(mutex->lock_count == 0 || mutex->owner == _current)) {
   126e0:	68c3      	ldr	r3, [r0, #12]
   126e2:	4611      	mov	r1, r2
   126e4:	b12b      	cbz	r3, 126f2 <k_mutex_lock+0x22>
   126e6:	6880      	ldr	r0, [r0, #8]
   126e8:	6892      	ldr	r2, [r2, #8]
   126ea:	4290      	cmp	r0, r2
   126ec:	d10d      	bne.n	1270a <k_mutex_lock+0x3a>

		RECORD_STATE_CHANGE();

		mutex->owner_orig_prio = mutex->lock_count == 0 ?
					_current->base.prio :
   126ee:	6922      	ldr	r2, [r4, #16]
   126f0:	e002      	b.n	126f8 <k_mutex_lock+0x28>
   126f2:	6892      	ldr	r2, [r2, #8]
   126f4:	f992 200a 	ldrsb.w	r2, [r2, #10]

	if (likely(mutex->lock_count == 0 || mutex->owner == _current)) {

		RECORD_STATE_CHANGE();

		mutex->owner_orig_prio = mutex->lock_count == 0 ?
   126f8:	6122      	str	r2, [r4, #16]
					_current->base.prio :
					mutex->owner_orig_prio;

		mutex->lock_count++;
   126fa:	3301      	adds	r3, #1
   126fc:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   126fe:	688b      	ldr	r3, [r1, #8]
   12700:	60a3      	str	r3, [r4, #8]

		K_DEBUG("%p took mutex %p, count: %d, orig prio: %d\n",
			_current, mutex, mutex->lock_count,
			mutex->owner_orig_prio);

		k_sched_unlock();
   12702:	f000 fc75 	bl	12ff0 <k_sched_unlock>

		return 0;
   12706:	2000      	movs	r0, #0
   12708:	bd70      	pop	{r4, r5, r6, pc}
	}

	RECORD_CONFLICT();

	if (unlikely(timeout == K_NO_WAIT)) {
   1270a:	b925      	cbnz	r5, 12716 <k_mutex_lock+0x46>
		k_sched_unlock();
   1270c:	f000 fc70 	bl	12ff0 <k_sched_unlock>
		return -EBUSY;
   12710:	f06f 000f 	mvn.w	r0, #15
   12714:	bd70      	pop	{r4, r5, r6, pc}
	if (_is_prio_higher(_current->prio, mutex->owner->prio)) {
		new_prio = _current->prio;
	}
	new_prio = _get_new_prio_with_ceiling(new_prio);
#endif
	new_prio = new_prio_for_inheritance(_current->base.prio,
   12716:	f992 100a 	ldrsb.w	r1, [r2, #10]
   1271a:	f990 300a 	ldrsb.w	r3, [r0, #10]
   1271e:	4299      	cmp	r1, r3
   12720:	bfa8      	it	ge
   12722:	4619      	movge	r1, r3
   12724:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
   12728:	f04f 0320 	mov.w	r3, #32
   1272c:	f3ef 8611 	mrs	r6, BASEPRI
   12730:	f383 8811 	msr	BASEPRI, r3

	key = irq_lock();

	K_DEBUG("adjusting prio up on mutex %p\n", mutex);

	if (_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   12734:	68a0      	ldr	r0, [r4, #8]
   12736:	f990 300a 	ldrsb.w	r3, [r0, #10]
   1273a:	428b      	cmp	r3, r1
   1273c:	dd01      	ble.n	12742 <k_mutex_lock+0x72>
		adjust_owner_prio(mutex, new_prio);
   1273e:	f7ff ffaf 	bl	126a0 <adjust_owner_prio.isra.6>
	}

	_pend_current_thread(&mutex->wait_q, timeout);
   12742:	4620      	mov	r0, r4
   12744:	4629      	mov	r1, r5
   12746:	f000 fc13 	bl	12f70 <_pend_current_thread>

#ifdef CONFIG_STACK_SENTINEL
	_check_stack_sentinel();
#endif
#ifdef CONFIG_TIMESLICING
	_update_time_slice_before_swap();
   1274a:	f000 fcf9 	bl	13140 <_update_time_slice_before_swap>
#endif

	return __swap(key);
   1274e:	4630      	mov	r0, r6
   12750:	f7ff fb9a 	bl	11e88 <__swap>
	K_DEBUG("on mutex %p got_mutex value: %d\n", mutex, got_mutex);

	K_DEBUG("%p got mutex %p (y/n): %c\n", _current, mutex,
		got_mutex ? 'y' : 'n');

	if (got_mutex == 0) {
   12754:	2800      	cmp	r0, #0
   12756:	d0d4      	beq.n	12702 <k_mutex_lock+0x32>
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   12758:	6823      	ldr	r3, [r4, #0]
	K_DEBUG("%p timeout on mutex %p\n", _current, mutex);

	struct k_thread *waiter =
		(struct k_thread *)sys_dlist_peek_head(&mutex->wait_q);

	new_prio = mutex->owner_orig_prio;
   1275a:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1275c:	429c      	cmp	r4, r3
   1275e:	bf08      	it	eq
   12760:	2300      	moveq	r3, #0
	new_prio = waiter ? new_prio_for_inheritance(waiter->base.prio,
						     new_prio) : new_prio;
   12762:	b133      	cbz	r3, 12772 <k_mutex_lock+0xa2>

	struct k_thread *waiter =
		(struct k_thread *)sys_dlist_peek_head(&mutex->wait_q);

	new_prio = mutex->owner_orig_prio;
	new_prio = waiter ? new_prio_for_inheritance(waiter->base.prio,
   12764:	f993 300a 	ldrsb.w	r3, [r3, #10]
   12768:	4299      	cmp	r1, r3
   1276a:	bfa8      	it	ge
   1276c:	4619      	movge	r1, r3
   1276e:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
   12772:	f04f 0320 	mov.w	r3, #32
   12776:	f3ef 8511 	mrs	r5, BASEPRI
   1277a:	f383 8811 	msr	BASEPRI, r3
						     new_prio) : new_prio;

	K_DEBUG("adjusting prio down on mutex %p\n", mutex);

	key = irq_lock();
	adjust_owner_prio(mutex, new_prio);
   1277e:	68a0      	ldr	r0, [r4, #8]
   12780:	f7ff ff8e 	bl	126a0 <adjust_owner_prio.isra.6>
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   12784:	f385 8811 	msr	BASEPRI, r5
	irq_unlock(key);

	k_sched_unlock();
   12788:	f000 fc32 	bl	12ff0 <k_sched_unlock>

	return -EAGAIN;
   1278c:	f06f 000a 	mvn.w	r0, #10
}
   12790:	bd70      	pop	{r4, r5, r6, pc}
   12792:	bf00      	nop
   12794:	20001fe4 	.word	0x20001fe4

00012798 <k_mutex_unlock>:

void k_mutex_unlock(struct k_mutex *mutex)
{
   12798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1279a:	4e34      	ldr	r6, [pc, #208]	; (1286c <k_mutex_unlock+0xd4>)
   1279c:	68b2      	ldr	r2, [r6, #8]
   1279e:	7ad3      	ldrb	r3, [r2, #11]
   127a0:	3b01      	subs	r3, #1
   127a2:	4605      	mov	r5, r0
   127a4:	72d3      	strb	r3, [r2, #11]

	_sched_lock();

	RECORD_STATE_CHANGE();

	mutex->lock_count--;
   127a6:	68c3      	ldr	r3, [r0, #12]
   127a8:	3b01      	subs	r3, #1
   127aa:	60c3      	str	r3, [r0, #12]

	K_DEBUG("mutex %p lock_count: %d\n", mutex, mutex->lock_count);

	if (mutex->lock_count != 0) {
   127ac:	b11b      	cbz	r3, 127b6 <k_mutex_unlock+0x1e>
		irq_unlock(key);
		mutex->owner = NULL;
	}

	k_sched_unlock();
}
   127ae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	mutex->lock_count--;

	K_DEBUG("mutex %p lock_count: %d\n", mutex, mutex->lock_count);

	if (mutex->lock_count != 0) {
		k_sched_unlock();
   127b2:	f000 bc1d 	b.w	12ff0 <k_sched_unlock>
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M)
	unsigned int tmp;

	__asm__ volatile(
   127b6:	f04f 0320 	mov.w	r3, #32
   127ba:	f3ef 8711 	mrs	r7, BASEPRI
   127be:	f383 8811 	msr	BASEPRI, r3
		return;
	}

	key = irq_lock();

	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   127c2:	6901      	ldr	r1, [r0, #16]
   127c4:	6880      	ldr	r0, [r0, #8]
   127c6:	f7ff ff6b 	bl	126a0 <adjust_owner_prio.isra.6>
_find_first_thread_to_unpend(_wait_q_t *wait_q, struct k_thread *from)
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	extern volatile int _handling_timeouts;

	if (_handling_timeouts) {
   127ca:	4b29      	ldr	r3, [pc, #164]	; (12870 <k_mutex_unlock+0xd8>)
   127cc:	682c      	ldr	r4, [r5, #0]
   127ce:	681b      	ldr	r3, [r3, #0]
   127d0:	b15b      	cbz	r3, 127ea <k_mutex_unlock+0x52>
   127d2:	42a5      	cmp	r5, r4
   127d4:	d040      	beq.n	12858 <k_mutex_unlock+0xc0>
		sys_dlist_t *q = (sys_dlist_t *)wait_q;
		sys_dnode_t *cur = from ? &from->base.k_q_node : NULL;

		/* skip threads that have an expired timeout */
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
   127d6:	2c00      	cmp	r4, #0
   127d8:	d03e      	beq.n	12858 <k_mutex_unlock+0xc0>
			struct k_thread *thread = (struct k_thread *)cur;

			if (_is_thread_timeout_expired(thread)) {
   127da:	6a23      	ldr	r3, [r4, #32]
   127dc:	3302      	adds	r3, #2
   127de:	d108      	bne.n	127f2 <k_mutex_unlock+0x5a>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   127e0:	686b      	ldr	r3, [r5, #4]
   127e2:	42a3      	cmp	r3, r4
   127e4:	d038      	beq.n	12858 <k_mutex_unlock+0xc0>
   127e6:	6824      	ldr	r4, [r4, #0]
   127e8:	e7f5      	b.n	127d6 <k_mutex_unlock+0x3e>
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   127ea:	42a5      	cmp	r5, r4
   127ec:	d034      	beq.n	12858 <k_mutex_unlock+0xc0>
/* must be called with interrupts locked */
static inline struct k_thread *_unpend_first_thread(_wait_q_t *wait_q)
{
	struct k_thread *thread = _find_first_thread_to_unpend(wait_q, NULL);

	if (thread) {
   127ee:	2c00      	cmp	r4, #0
   127f0:	d032      	beq.n	12858 <k_mutex_unlock+0xc0>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   127f2:	e894 000c 	ldmia.w	r4, {r2, r3}
   127f6:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   127f8:	6822      	ldr	r2, [r4, #0]
   127fa:	6053      	str	r3, [r2, #4]
}

/* mark a thread as not pending in its TCS */
static inline void _mark_thread_as_not_pending(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PENDING;
   127fc:	7a63      	ldrb	r3, [r4, #9]
   127fe:	f023 0302 	bic.w	r3, r3, #2
   12802:	7263      	strb	r3, [r4, #9]
}

/* returns _INACTIVE if the timer is not active */
static inline int _abort_timeout(struct _timeout *timeout)
{
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   12804:	6a23      	ldr	r3, [r4, #32]
   12806:	1c5a      	adds	r2, r3, #1
   12808:	d010      	beq.n	1282c <k_mutex_unlock+0x94>
		return _INACTIVE;
	}

	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   1280a:	6931      	ldr	r1, [r6, #16]
   1280c:	f104 0210 	add.w	r2, r4, #16
   12810:	4291      	cmp	r1, r2
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   12812:	bf1f      	itttt	ne
   12814:	6922      	ldrne	r2, [r4, #16]
		sys_dnode_t *next_node =
			sys_dlist_peek_next(&_timeout_q, &timeout->node);
		struct _timeout *next = (struct _timeout *)next_node;

		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   12816:	6911      	ldrne	r1, [r2, #16]
   12818:	185b      	addne	r3, r3, r1
   1281a:	6113      	strne	r3, [r2, #16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   1281c:	6963      	ldr	r3, [r4, #20]
   1281e:	6922      	ldr	r2, [r4, #16]
   12820:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   12822:	6922      	ldr	r2, [r4, #16]
   12824:	6053      	str	r3, [r2, #4]
	}
	sys_dlist_remove(&timeout->node);
	timeout->delta_ticks_from_prev = _INACTIVE;
   12826:	f04f 33ff 	mov.w	r3, #4294967295
   1282a:	6223      	str	r3, [r4, #32]
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1282c:	7a63      	ldrb	r3, [r4, #9]
   1282e:	f023 0204 	bic.w	r2, r3, #4
}

/* check if a thread is ready */
static inline int _is_thread_ready(struct k_thread *thread)
{
	return !(_is_thread_prevented_from_running(thread) ||
   12832:	f013 0f1b 	tst.w	r3, #27
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   12836:	7262      	strb	r2, [r4, #9]
}

/* check if a thread is ready */
static inline int _is_thread_ready(struct k_thread *thread)
{
	return !(_is_thread_prevented_from_running(thread) ||
   12838:	d102      	bne.n	12840 <k_mutex_unlock+0xa8>
   1283a:	6a23      	ldr	r3, [r4, #32]
   1283c:	3301      	adds	r3, #1
   1283e:	d010      	beq.n	12862 <k_mutex_unlock+0xca>
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   12840:	f387 8811 	msr	BASEPRI, r7
}

static ALWAYS_INLINE void
_set_thread_return_value(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   12844:	2300      	movs	r3, #0
   12846:	6663      	str	r3, [r4, #100]	; 0x64
		 * new owner is already of higher or equal prio than first
		 * waiter since the wait queue is priority-based: no need to
		 * ajust its priority
		 */
		mutex->owner = new_owner;
		mutex->lock_count++;
   12848:	68eb      	ldr	r3, [r5, #12]
		/*
		 * new owner is already of higher or equal prio than first
		 * waiter since the wait queue is priority-based: no need to
		 * ajust its priority
		 */
		mutex->owner = new_owner;
   1284a:	60ac      	str	r4, [r5, #8]
		mutex->lock_count++;
   1284c:	3301      	adds	r3, #1
   1284e:	60eb      	str	r3, [r5, #12]
		mutex->owner_orig_prio = new_owner->base.prio;
   12850:	f994 300a 	ldrsb.w	r3, [r4, #10]
   12854:	612b      	str	r3, [r5, #16]
   12856:	e7aa      	b.n	127ae <k_mutex_unlock+0x16>
   12858:	f387 8811 	msr	BASEPRI, r7
	} else {
		irq_unlock(key);
		mutex->owner = NULL;
   1285c:	2300      	movs	r3, #0
   1285e:	60ab      	str	r3, [r5, #8]
   12860:	e7a5      	b.n	127ae <k_mutex_unlock+0x16>

	/* needed to handle the start-with-delay case */
	_mark_thread_as_started(thread);

	if (_is_thread_ready(thread)) {
		_add_thread_to_ready_q(thread);
   12862:	4620      	mov	r0, r4
   12864:	f000 faf8 	bl	12e58 <_add_thread_to_ready_q>
   12868:	e7ea      	b.n	12840 <k_mutex_unlock+0xa8>
   1286a:	bf00      	nop
   1286c:	20001fe4 	.word	0x20001fe4
   12870:	20002228 	.word	0x20002228

00012874 <clear_event_registrations>:

/* must be called with interrupts locked */
static inline void clear_event_registrations(struct k_poll_event *events,
					      int last_registered,
					      unsigned int key)
{
   12874:	230c      	movs	r3, #12
   12876:	b510      	push	{r4, lr}
   12878:	fb03 0001 	mla	r0, r3, r1, r0
}

/* must be called with interrupts locked */
static inline void clear_event_registration(struct k_poll_event *event)
{
	event->poller = NULL;
   1287c:	2400      	movs	r4, #0
/* must be called with interrupts locked */
static inline void clear_event_registrations(struct k_poll_event *events,
					      int last_registered,
					      unsigned int key)
{
	for (; last_registered >= 0; last_registered--) {
   1287e:	2900      	cmp	r1, #0
   12880:	db19      	blt.n	128b6 <clear_event_registrations+0x42>
/* must be called with interrupts locked */
static inline void clear_event_registration(struct k_poll_event *event)
{
	event->poller = NULL;

	switch (event->type) {
   12882:	7943      	ldrb	r3, [r0, #5]
}

/* must be called with interrupts locked */
static inline void clear_event_registration(struct k_poll_event *event)
{
	event->poller = NULL;
   12884:	6004      	str	r4, [r0, #0]

	switch (event->type) {
   12886:	f003 030f 	and.w	r3, r3, #15
   1288a:	2b02      	cmp	r3, #2
   1288c:	d006      	beq.n	1289c <clear_event_registrations+0x28>
   1288e:	2b04      	cmp	r3, #4
   12890:	d004      	beq.n	1289c <clear_event_registrations+0x28>
   12892:	2b01      	cmp	r3, #1
   12894:	d104      	bne.n	128a0 <clear_event_registrations+0x2c>
		__ASSERT(event->queue, "invalid queue\n");
		event->queue->poll_event = NULL;
		break;
	case K_POLL_TYPE_SIGNAL:
		__ASSERT(event->signal, "invalid poll signal\n");
		event->signal->poll_event = NULL;
   12896:	6883      	ldr	r3, [r0, #8]
   12898:	601c      	str	r4, [r3, #0]
   1289a:	e001      	b.n	128a0 <clear_event_registrations+0x2c>
		__ASSERT(event->sem, "invalid semaphore\n");
		event->sem->poll_event = NULL;
		break;
	case K_POLL_TYPE_DATA_AVAILABLE:
		__ASSERT(event->queue, "invalid queue\n");
		event->queue->poll_event = NULL;
   1289c:	6883      	ldr	r3, [r0, #8]
   1289e:	611c      	str	r4, [r3, #16]
   128a0:	f382 8811 	msr	BASEPRI, r2
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M)
	unsigned int tmp;

	__asm__ volatile(
   128a4:	f04f 0320 	mov.w	r3, #32
   128a8:	f3ef 8211 	mrs	r2, BASEPRI
   128ac:	f383 8811 	msr	BASEPRI, r3
/* must be called with interrupts locked */
static inline void clear_event_registrations(struct k_poll_event *events,
					      int last_registered,
					      unsigned int key)
{
	for (; last_registered >= 0; last_registered--) {
   128b0:	3901      	subs	r1, #1
   128b2:	380c      	subs	r0, #12
   128b4:	e7e3      	b.n	1287e <clear_event_registrations+0xa>
		clear_event_registration(&events[last_registered]);
		irq_unlock(key);
		key = irq_lock();
	}
}
   128b6:	bd10      	pop	{r4, pc}

000128b8 <_signal_poll_event>:

/* must be called with interrupts locked */
static int _signal_poll_event(struct k_poll_event *event, u32_t state,
			      int *must_reschedule)
{
	*must_reschedule = 0;
   128b8:	2300      	movs	r3, #0
}

/* must be called with interrupts locked */
static int _signal_poll_event(struct k_poll_event *event, u32_t state,
			      int *must_reschedule)
{
   128ba:	b570      	push	{r4, r5, r6, lr}
	*must_reschedule = 0;
   128bc:	6013      	str	r3, [r2, #0]

	if (!event->poller) {
   128be:	6803      	ldr	r3, [r0, #0]
}

/* must be called with interrupts locked */
static int _signal_poll_event(struct k_poll_event *event, u32_t state,
			      int *must_reschedule)
{
   128c0:	4604      	mov	r4, r0
   128c2:	460d      	mov	r5, r1
   128c4:	4616      	mov	r6, r2
	*must_reschedule = 0;

	if (!event->poller) {
   128c6:	2b00      	cmp	r3, #0
   128c8:	d040      	beq.n	1294c <_signal_poll_event+0x94>
		goto ready_event;
	}

	struct k_thread *thread = event->poller->thread;
   128ca:	6818      	ldr	r0, [r3, #0]
}

static inline void _reset_thread_states(struct k_thread *thread,
					u32_t states)
{
	thread->base.thread_state &= ~states;
   128cc:	7a43      	ldrb	r3, [r0, #9]
   128ce:	f023 0220 	bic.w	r2, r3, #32

	__ASSERT(event->poller->thread, "poller should have a thread\n");

	clear_polling_state(thread);

	if (!_is_thread_pending(thread)) {
   128d2:	079b      	lsls	r3, r3, #30
   128d4:	7242      	strb	r2, [r0, #9]
   128d6:	d539      	bpl.n	1294c <_signal_poll_event+0x94>
		goto ready_event;
	}

	if (_is_thread_timeout_expired(thread)) {
   128d8:	6a03      	ldr	r3, [r0, #32]
   128da:	3302      	adds	r3, #2
   128dc:	d040      	beq.n	12960 <_signal_poll_event+0xa8>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   128de:	e890 000c 	ldmia.w	r0, {r2, r3}
   128e2:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   128e4:	6802      	ldr	r2, [r0, #0]
   128e6:	6053      	str	r3, [r2, #4]
}

/* mark a thread as not pending in its TCS */
static inline void _mark_thread_as_not_pending(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PENDING;
   128e8:	7a43      	ldrb	r3, [r0, #9]
   128ea:	f023 0302 	bic.w	r3, r3, #2
   128ee:	7243      	strb	r3, [r0, #9]
}

/* returns _INACTIVE if the timer is not active */
static inline int _abort_timeout(struct _timeout *timeout)
{
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   128f0:	6a03      	ldr	r3, [r0, #32]
   128f2:	1c59      	adds	r1, r3, #1
   128f4:	d011      	beq.n	1291a <_signal_poll_event+0x62>
   128f6:	491f      	ldr	r1, [pc, #124]	; (12974 <_signal_poll_event+0xbc>)
		return _INACTIVE;
	}

	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   128f8:	6909      	ldr	r1, [r1, #16]
   128fa:	f100 0210 	add.w	r2, r0, #16
   128fe:	4291      	cmp	r1, r2
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   12900:	bf1f      	itttt	ne
   12902:	6902      	ldrne	r2, [r0, #16]
		sys_dnode_t *next_node =
			sys_dlist_peek_next(&_timeout_q, &timeout->node);
		struct _timeout *next = (struct _timeout *)next_node;

		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   12904:	6911      	ldrne	r1, [r2, #16]
   12906:	185b      	addne	r3, r3, r1
   12908:	6113      	strne	r3, [r2, #16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   1290a:	6943      	ldr	r3, [r0, #20]
   1290c:	6902      	ldr	r2, [r0, #16]
   1290e:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   12910:	6902      	ldr	r2, [r0, #16]
   12912:	6053      	str	r3, [r2, #4]
	}
	sys_dlist_remove(&timeout->node);
	timeout->delta_ticks_from_prev = _INACTIVE;
   12914:	f04f 33ff 	mov.w	r3, #4294967295
   12918:	6203      	str	r3, [r0, #32]
   1291a:	2300      	movs	r3, #0
   1291c:	6643      	str	r3, [r0, #100]	; 0x64
}

/* check if a thread is ready */
static inline int _is_thread_ready(struct k_thread *thread)
{
	return !(_is_thread_prevented_from_running(thread) ||
   1291e:	7a43      	ldrb	r3, [r0, #9]
   12920:	06da      	lsls	r2, r3, #27
   12922:	d113      	bne.n	1294c <_signal_poll_event+0x94>
   12924:	6a03      	ldr	r3, [r0, #32]
   12926:	3301      	adds	r3, #1
   12928:	d110      	bne.n	1294c <_signal_poll_event+0x94>

	if (!_is_thread_ready(thread)) {
		goto ready_event;
	}

	_add_thread_to_ready_q(thread);
   1292a:	f000 fa95 	bl	12e58 <_add_thread_to_ready_q>
 */
static ALWAYS_INLINE u32_t _IpsrGet(void)
{
	u32_t vector;

	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(vector));
   1292e:	f3ef 8305 	mrs	r3, IPSR
		 * all but the very latest master tip of QEMU's NVIC driver,
		 * see commit "armv7m: Rewrite NVIC to not use any GIC code".
		 * Until QEMU 2.9 is released, and the SDK is updated to
		 * include it, skip this check in QEMU.
		 */
		|| (vector && !(SCB->ICSR & SCB_ICSR_RETTOBASE_Msk))
   12932:	2b0d      	cmp	r3, #13
   12934:	d81b      	bhi.n	1296e <_signal_poll_event+0xb6>
   12936:	b9b3      	cbnz	r3, 12966 <_signal_poll_event+0xae>
 * Checks if current thread must be context-switched out. The caller must
 * already know that the execution context is a thread.
 */
static inline int _must_switch_threads(void)
{
	return _is_preempt(_current) && __must_switch_threads();
   12938:	4b0e      	ldr	r3, [pc, #56]	; (12974 <_signal_poll_event+0xbc>)
   1293a:	689b      	ldr	r3, [r3, #8]
   1293c:	895b      	ldrh	r3, [r3, #10]
   1293e:	2b7f      	cmp	r3, #127	; 0x7f
   12940:	d815      	bhi.n	1296e <_signal_poll_event+0xb6>
   12942:	f000 fb25 	bl	12f90 <__must_switch_threads>
   12946:	b190      	cbz	r0, 1296e <_signal_poll_event+0xb6>
	*must_reschedule = !_is_in_isr() && _must_switch_threads();
   12948:	2301      	movs	r3, #1
   1294a:	6033      	str	r3, [r6, #0]
}

static inline void set_event_ready(struct k_poll_event *event, u32_t state)
{
	event->poller = NULL;
	event->state |= state;
   1294c:	6863      	ldr	r3, [r4, #4]
   1294e:	f3c3 3104 	ubfx	r1, r3, #12, #5
   12952:	4329      	orrs	r1, r5
   12954:	f361 3310 	bfi	r3, r1, #12, #5
	}
}

static inline void set_event_ready(struct k_poll_event *event, u32_t state)
{
	event->poller = NULL;
   12958:	2000      	movs	r0, #0
	event->state |= state;
   1295a:	6063      	str	r3, [r4, #4]
	}
}

static inline void set_event_ready(struct k_poll_event *event, u32_t state)
{
	event->poller = NULL;
   1295c:	6020      	str	r0, [r4, #0]
	_add_thread_to_ready_q(thread);
	*must_reschedule = !_is_in_isr() && _must_switch_threads();

ready_event:
	set_event_ready(event, state);
	return 0;
   1295e:	bd70      	pop	{r4, r5, r6, pc}
	if (!_is_thread_pending(thread)) {
		goto ready_event;
	}

	if (_is_thread_timeout_expired(thread)) {
		return -EAGAIN;
   12960:	f06f 000a 	mvn.w	r0, #10
   12964:	bd70      	pop	{r4, r5, r6, pc}
   12966:	4b04      	ldr	r3, [pc, #16]	; (12978 <_signal_poll_event+0xc0>)
   12968:	685b      	ldr	r3, [r3, #4]
   1296a:	051b      	lsls	r3, r3, #20
   1296c:	d4e4      	bmi.n	12938 <_signal_poll_event+0x80>
	if (!_is_thread_ready(thread)) {
		goto ready_event;
	}

	_add_thread_to_ready_q(thread);
	*must_reschedule = !_is_in_isr() && _must_switch_threads();
   1296e:	2300      	movs	r3, #0
   12970:	e7eb      	b.n	1294a <_signal_poll_event+0x92>
   12972:	bf00      	nop
   12974:	20001fe4 	.word	0x20001fe4
   12978:	e000ed00 	.word	0xe000ed00

0001297c <k_poll_event_init>:
#include <misc/dlist.h>
#include <misc/__assert.h>

void k_poll_event_init(struct k_poll_event *event, u32_t type,
		       int mode, void *obj)
{
   1297c:	b530      	push	{r4, r5, lr}
	__ASSERT(type < (1 << _POLL_NUM_TYPES), "invalid type\n");
	__ASSERT(obj, "must provide an object\n");

	event->poller = NULL;
	/* event->tag is left uninitialized: the user will set it if needed */
	event->type = type;
   1297e:	7945      	ldrb	r5, [r0, #5]
	event->state = K_POLL_STATE_NOT_READY;
	event->mode = mode;
	event->unused = 0;
	event->obj = obj;
   12980:	6083      	str	r3, [r0, #8]
	__ASSERT(type < (1 << _POLL_NUM_TYPES), "invalid type\n");
	__ASSERT(obj, "must provide an object\n");

	event->poller = NULL;
	/* event->tag is left uninitialized: the user will set it if needed */
	event->type = type;
   12982:	f361 0503 	bfi	r5, r1, #0, #4
   12986:	7145      	strb	r5, [r0, #5]
	event->state = K_POLL_STATE_NOT_READY;
   12988:	6841      	ldr	r1, [r0, #4]
	__ASSERT(mode == K_POLL_MODE_NOTIFY_ONLY,
		 "only NOTIFY_ONLY mode is supported\n");
	__ASSERT(type < (1 << _POLL_NUM_TYPES), "invalid type\n");
	__ASSERT(obj, "must provide an object\n");

	event->poller = NULL;
   1298a:	2400      	movs	r4, #0
	/* event->tag is left uninitialized: the user will set it if needed */
	event->type = type;
	event->state = K_POLL_STATE_NOT_READY;
   1298c:	f364 3110 	bfi	r1, r4, #12, #5
   12990:	6041      	str	r1, [r0, #4]
	event->mode = mode;
   12992:	0c09      	lsrs	r1, r1, #16
   12994:	f362 0141 	bfi	r1, r2, #1, #1
   12998:	7181      	strb	r1, [r0, #6]
	event->unused = 0;
   1299a:	88c2      	ldrh	r2, [r0, #6]
	__ASSERT(mode == K_POLL_MODE_NOTIFY_ONLY,
		 "only NOTIFY_ONLY mode is supported\n");
	__ASSERT(type < (1 << _POLL_NUM_TYPES), "invalid type\n");
	__ASSERT(obj, "must provide an object\n");

	event->poller = NULL;
   1299c:	6004      	str	r4, [r0, #0]
	/* event->tag is left uninitialized: the user will set it if needed */
	event->type = type;
	event->state = K_POLL_STATE_NOT_READY;
	event->mode = mode;
	event->unused = 0;
   1299e:	f364 028f 	bfi	r2, r4, #2, #14
   129a2:	80c2      	strh	r2, [r0, #6]
	event->obj = obj;
   129a4:	bd30      	pop	{r4, r5, pc}
	...

000129a8 <k_poll>:
	event->poller = NULL;
	event->state |= state;
}

int k_poll(struct k_poll_event *events, int num_events, s32_t timeout)
{
   129a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   129ac:	b087      	sub	sp, #28
   129ae:	4680      	mov	r8, r0
   129b0:	9101      	str	r1, [sp, #4]
   129b2:	f04f 0320 	mov.w	r3, #32
   129b6:	f3ef 8511 	mrs	r5, BASEPRI
   129ba:	f383 8811 	msr	BASEPRI, r3

	int last_registered = -1, in_use = 0, rc;
	unsigned int key;

	key = irq_lock();
	set_polling_state(_current);
   129be:	4862      	ldr	r0, [pc, #392]	; (12b48 <k_poll+0x1a0>)
   129c0:	6884      	ldr	r4, [r0, #8]
#endif
}

static inline void _set_thread_states(struct k_thread *thread, u32_t states)
{
	thread->base.thread_state |= states;
   129c2:	7a63      	ldrb	r3, [r4, #9]
   129c4:	f043 0320 	orr.w	r3, r3, #32
   129c8:	7263      	strb	r3, [r4, #9]
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   129ca:	f385 8811 	msr	BASEPRI, r5
	/*
	 * We can get by with one poller structure for all events for now:
	 * if/when we allow multiple threads to poll on the same object, we
	 * will need one per poll event associated with an object.
	 */
	struct _poller poller = { .thread = _current };
   129ce:	af06      	add	r7, sp, #24
   129d0:	6883      	ldr	r3, [r0, #8]
   129d2:	f847 3d0c 	str.w	r3, [r7, #-12]!

	/* find events whose condition is already fulfilled */
	for (int ii = 0; ii < num_events; ii++) {
   129d6:	2500      	movs	r5, #0
   129d8:	4643      	mov	r3, r8
{
	__ASSERT(!_is_in_isr(), "");
	__ASSERT(events, "NULL events\n");
	__ASSERT(num_events > 0, "zero events\n");

	int last_registered = -1, in_use = 0, rc;
   129da:	462c      	mov	r4, r5
   129dc:	f04f 36ff 	mov.w	r6, #4294967295
			} else if (rc == -EADDRINUSE) {
				/* setting in_use also prevents any further
				 * registrations by the current thread
				 */
				in_use = -EADDRINUSE;
				events[ii].state = K_POLL_STATE_EADDRINUSE;
   129e0:	f04f 0a01 	mov.w	sl, #1
	 * will need one per poll event associated with an object.
	 */
	struct _poller poller = { .thread = _current };

	/* find events whose condition is already fulfilled */
	for (int ii = 0; ii < num_events; ii++) {
   129e4:	9901      	ldr	r1, [sp, #4]
   129e6:	428d      	cmp	r5, r1
   129e8:	da2e      	bge.n	12a48 <k_poll+0xa0>
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M)
	unsigned int tmp;

	__asm__ volatile(
   129ea:	f04f 0e20 	mov.w	lr, #32
   129ee:	f3ef 8911 	mrs	r9, BASEPRI
   129f2:	f38e 8811 	msr	BASEPRI, lr
}

/* must be called with interrupts locked */
static inline int is_condition_met(struct k_poll_event *event, u32_t *state)
{
	switch (event->type) {
   129f6:	f893 e005 	ldrb.w	lr, [r3, #5]
   129fa:	f00e 0e0f 	and.w	lr, lr, #15
   129fe:	f1be 0f02 	cmp.w	lr, #2
   12a02:	d006      	beq.n	12a12 <k_poll+0x6a>
   12a04:	f1be 0f04 	cmp.w	lr, #4
   12a08:	d00c      	beq.n	12a24 <k_poll+0x7c>
   12a0a:	f1be 0f01 	cmp.w	lr, #1
   12a0e:	d162      	bne.n	12ad6 <k_poll+0x12e>
   12a10:	e011      	b.n	12a36 <k_poll+0x8e>
	case K_POLL_TYPE_SEM_AVAILABLE:
		if (k_sem_count_get(event->sem) > 0) {
   12a12:	6899      	ldr	r1, [r3, #8]
   12a14:	f8d1 c008 	ldr.w	ip, [r1, #8]
   12a18:	f1bc 0f00 	cmp.w	ip, #0
   12a1c:	d05b      	beq.n	12ad6 <k_poll+0x12e>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   12a1e:	f04f 0b04 	mov.w	fp, #4
   12a22:	e03f      	b.n	12aa4 <k_poll+0xfc>
			return 1;
		}
		break;
	case K_POLL_TYPE_DATA_AVAILABLE:
		if (!k_queue_is_empty(event->queue)) {
   12a24:	6899      	ldr	r1, [r3, #8]
   12a26:	f8d1 c008 	ldr.w	ip, [r1, #8]
   12a2a:	f1bc 0f00 	cmp.w	ip, #0
   12a2e:	d052      	beq.n	12ad6 <k_poll+0x12e>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   12a30:	f04f 0b08 	mov.w	fp, #8
   12a34:	e036      	b.n	12aa4 <k_poll+0xfc>
			return 1;
		}
		break;
	case K_POLL_TYPE_SIGNAL:
		if (event->signal->signaled) {
   12a36:	6899      	ldr	r1, [r3, #8]
   12a38:	f8d1 c004 	ldr.w	ip, [r1, #4]
   12a3c:	f1bc 0f00 	cmp.w	ip, #0
   12a40:	d049      	beq.n	12ad6 <k_poll+0x12e>
			*state = K_POLL_STATE_SIGNALED;
   12a42:	f04f 0b02 	mov.w	fp, #2
   12a46:	e02d      	b.n	12aa4 <k_poll+0xfc>
   12a48:	f04f 0320 	mov.w	r3, #32
   12a4c:	f3ef 8511 	mrs	r5, BASEPRI
   12a50:	f383 8811 	msr	BASEPRI, r3
}

/* must be called with interrupts locked */
static inline int is_polling(void)
{
	return _is_thread_polling(_current);
   12a54:	6881      	ldr	r1, [r0, #8]
   12a56:	7a4b      	ldrb	r3, [r1, #9]
	 * success or a -EADDRINUSE error. In the case of a -EADDRINUSE error,
	 * the events that were available are still flagged as such, and it is
	 * valid for the caller to consider them available, as if this function
	 * returned success.
	 */
	if (!is_polling()) {
   12a58:	0698      	lsls	r0, r3, #26
   12a5a:	d51a      	bpl.n	12a92 <k_poll+0xea>
}

static inline void _reset_thread_states(struct k_thread *thread,
					u32_t states)
{
	thread->base.thread_state &= ~states;
   12a5c:	f023 0320 	bic.w	r3, r3, #32
   12a60:	724b      	strb	r3, [r1, #9]
		return in_use;
	}

	clear_polling_state(_current);

	if (timeout == K_NO_WAIT) {
   12a62:	b922      	cbnz	r2, 12a6e <k_poll+0xc6>
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   12a64:	f385 8811 	msr	BASEPRI, r5
		irq_unlock(key);
		return -EAGAIN;
   12a68:	f06f 000a 	mvn.w	r0, #10
   12a6c:	e068      	b.n	12b40 <k_poll+0x198>
	}

	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
   12a6e:	a804      	add	r0, sp, #16

	_pend_current_thread(&wait_q, timeout);
   12a70:	4611      	mov	r1, r2
	if (timeout == K_NO_WAIT) {
		irq_unlock(key);
		return -EAGAIN;
	}

	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
   12a72:	9004      	str	r0, [sp, #16]
   12a74:	9005      	str	r0, [sp, #20]

	_pend_current_thread(&wait_q, timeout);
   12a76:	f000 fa7b 	bl	12f70 <_pend_current_thread>

#ifdef CONFIG_STACK_SENTINEL
	_check_stack_sentinel();
#endif
#ifdef CONFIG_TIMESLICING
	_update_time_slice_before_swap();
   12a7a:	f000 fb61 	bl	13140 <_update_time_slice_before_swap>
#endif

	return __swap(key);
   12a7e:	4628      	mov	r0, r5
   12a80:	f7ff fa02 	bl	11e88 <__swap>
   12a84:	4604      	mov	r4, r0
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M)
	unsigned int tmp;

	__asm__ volatile(
   12a86:	f04f 0320 	mov.w	r3, #32
   12a8a:	f3ef 8511 	mrs	r5, BASEPRI
   12a8e:	f383 8811 	msr	BASEPRI, r3
	 * we've already know the return code (-EAGAIN), and even if they are
	 * added to the list of events that occurred, the user has to check the
	 * return code first, which invalidates the whole list of event states.
	 */
	key = irq_lock();
	clear_event_registrations(events, last_registered, key);
   12a92:	462a      	mov	r2, r5
   12a94:	4631      	mov	r1, r6
   12a96:	4640      	mov	r0, r8
   12a98:	f7ff feec 	bl	12874 <clear_event_registrations>
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   12a9c:	f385 8811 	msr	BASEPRI, r5
	irq_unlock(key);

	return swap_rc;
   12aa0:	4620      	mov	r0, r4
   12aa2:	e04d      	b.n	12b40 <k_poll+0x198>
}

static inline void set_event_ready(struct k_poll_event *event, u32_t state)
{
	event->poller = NULL;
	event->state |= state;
   12aa4:	f8d3 e004 	ldr.w	lr, [r3, #4]
   12aa8:	f3ce 3c04 	ubfx	ip, lr, #12, #5
   12aac:	ea4b 0c0c 	orr.w	ip, fp, ip
   12ab0:	f36c 3e10 	bfi	lr, ip, #12, #5
	}
}

static inline void set_event_ready(struct k_poll_event *event, u32_t state)
{
	event->poller = NULL;
   12ab4:	2100      	movs	r1, #0
   12ab6:	6019      	str	r1, [r3, #0]
	event->state |= state;
   12ab8:	f8c3 e004 	str.w	lr, [r3, #4]
		u32_t state;

		key = irq_lock();
		if (is_condition_met(&events[ii], &state)) {
			set_event_ready(&events[ii], state);
			clear_polling_state(_current);
   12abc:	f8d0 c008 	ldr.w	ip, [r0, #8]
   12ac0:	f89c e009 	ldrb.w	lr, [ip, #9]
   12ac4:	f02e 0e20 	bic.w	lr, lr, #32
   12ac8:	f88c e009 	strb.w	lr, [ip, #9]
   12acc:	f389 8811 	msr	BASEPRI, r9
	 * will need one per poll event associated with an object.
	 */
	struct _poller poller = { .thread = _current };

	/* find events whose condition is already fulfilled */
	for (int ii = 0; ii < num_events; ii++) {
   12ad0:	3501      	adds	r5, #1
   12ad2:	330c      	adds	r3, #12
   12ad4:	e786      	b.n	129e4 <k_poll+0x3c>

		key = irq_lock();
		if (is_condition_met(&events[ii], &state)) {
			set_event_ready(&events[ii], state);
			clear_polling_state(_current);
		} else if (timeout != K_NO_WAIT && is_polling() && !in_use) {
   12ad6:	2a00      	cmp	r2, #0
   12ad8:	d0f8      	beq.n	12acc <k_poll+0x124>
}

/* must be called with interrupts locked */
static inline int is_polling(void)
{
	return _is_thread_polling(_current);
   12ada:	f8d0 c008 	ldr.w	ip, [r0, #8]

		key = irq_lock();
		if (is_condition_met(&events[ii], &state)) {
			set_event_ready(&events[ii], state);
			clear_polling_state(_current);
		} else if (timeout != K_NO_WAIT && is_polling() && !in_use) {
   12ade:	f89c b009 	ldrb.w	fp, [ip, #9]
   12ae2:	f01b 0f20 	tst.w	fp, #32
   12ae6:	d0f1      	beq.n	12acc <k_poll+0x124>
   12ae8:	2c00      	cmp	r4, #0
   12aea:	d1ef      	bne.n	12acc <k_poll+0x124>
}

/* must be called with interrupts locked */
static inline int register_event(struct k_poll_event *event)
{
	switch (event->type) {
   12aec:	f1be 0f02 	cmp.w	lr, #2
   12af0:	d006      	beq.n	12b00 <k_poll+0x158>
   12af2:	f1be 0f04 	cmp.w	lr, #4
   12af6:	d003      	beq.n	12b00 <k_poll+0x158>
   12af8:	f1be 0f01 	cmp.w	lr, #1
   12afc:	d11d      	bne.n	12b3a <k_poll+0x192>
   12afe:	e007      	b.n	12b10 <k_poll+0x168>
		}
		event->sem->poll_event = event;
		break;
	case K_POLL_TYPE_DATA_AVAILABLE:
		__ASSERT(event->queue, "invalid queue\n");
		if (event->queue->poll_event) {
   12b00:	f8d3 e008 	ldr.w	lr, [r3, #8]
   12b04:	f8de 1010 	ldr.w	r1, [lr, #16]
   12b08:	b951      	cbnz	r1, 12b20 <k_poll+0x178>
			return -EADDRINUSE;
		}
		event->queue->poll_event = event;
   12b0a:	f8ce 3010 	str.w	r3, [lr, #16]
   12b0e:	e014      	b.n	12b3a <k_poll+0x192>
		break;
	case K_POLL_TYPE_SIGNAL:
		__ASSERT(event->queue, "invalid poll signal\n");
		if (event->signal->poll_event) {
   12b10:	f8d3 e008 	ldr.w	lr, [r3, #8]
   12b14:	f8de 1000 	ldr.w	r1, [lr]
   12b18:	b911      	cbnz	r1, 12b20 <k_poll+0x178>
			return -EADDRINUSE;
		}
		event->signal->poll_event = event;
   12b1a:	f8ce 3000 	str.w	r3, [lr]
   12b1e:	e00c      	b.n	12b3a <k_poll+0x192>
			} else if (rc == -EADDRINUSE) {
				/* setting in_use also prevents any further
				 * registrations by the current thread
				 */
				in_use = -EADDRINUSE;
				events[ii].state = K_POLL_STATE_EADDRINUSE;
   12b20:	685c      	ldr	r4, [r3, #4]
   12b22:	f36a 3410 	bfi	r4, sl, #12, #5
   12b26:	605c      	str	r4, [r3, #4]
   12b28:	f89c 4009 	ldrb.w	r4, [ip, #9]
   12b2c:	f024 0420 	bic.w	r4, r4, #32
   12b30:	f88c 4009 	strb.w	r4, [ip, #9]
				++last_registered;
			} else if (rc == -EADDRINUSE) {
				/* setting in_use also prevents any further
				 * registrations by the current thread
				 */
				in_use = -EADDRINUSE;
   12b34:	f06f 042f 	mvn.w	r4, #47	; 0x2f
   12b38:	e7c8      	b.n	12acc <k_poll+0x124>
			set_event_ready(&events[ii], state);
			clear_polling_state(_current);
		} else if (timeout != K_NO_WAIT && is_polling() && !in_use) {
			rc = register_event(&events[ii]);
			if (rc == 0) {
				events[ii].poller = &poller;
   12b3a:	601f      	str	r7, [r3, #0]
				++last_registered;
   12b3c:	3601      	adds	r6, #1
   12b3e:	e7c5      	b.n	12acc <k_poll+0x124>
	key = irq_lock();
	clear_event_registrations(events, last_registered, key);
	irq_unlock(key);

	return swap_rc;
}
   12b40:	b007      	add	sp, #28
   12b42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12b46:	bf00      	nop
   12b48:	20001fe4 	.word	0x20001fe4

00012b4c <_handle_obj_poll_event>:
}

/* returns 1 if a reschedule must take place, 0 otherwise */
/* *obj_poll_event is guaranteed to not be NULL */
int _handle_obj_poll_event(struct k_poll_event **obj_poll_event, u32_t state)
{
   12b4c:	b507      	push	{r0, r1, r2, lr}
   12b4e:	4603      	mov	r3, r0
	struct k_poll_event *poll_event = *obj_poll_event;
	int must_reschedule;

	*obj_poll_event = NULL;
   12b50:	2200      	movs	r2, #0

/* returns 1 if a reschedule must take place, 0 otherwise */
/* *obj_poll_event is guaranteed to not be NULL */
int _handle_obj_poll_event(struct k_poll_event **obj_poll_event, u32_t state)
{
	struct k_poll_event *poll_event = *obj_poll_event;
   12b52:	6800      	ldr	r0, [r0, #0]
	int must_reschedule;

	*obj_poll_event = NULL;
   12b54:	601a      	str	r2, [r3, #0]
	(void)_signal_poll_event(poll_event, state, &must_reschedule);
   12b56:	aa01      	add	r2, sp, #4
   12b58:	f7ff feae 	bl	128b8 <_signal_poll_event>
	return must_reschedule;
}
   12b5c:	9801      	ldr	r0, [sp, #4]
   12b5e:	b003      	add	sp, #12
   12b60:	f85d fb04 	ldr.w	pc, [sp], #4

00012b64 <k_poll_signal>:
	signal->signaled = 0;
	/* signal->result is left unitialized */
}

int k_poll_signal(struct k_poll_signal *signal, int result)
{
   12b64:	b537      	push	{r0, r1, r2, r4, r5, lr}
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M)
	unsigned int tmp;

	__asm__ volatile(
   12b66:	f04f 0320 	mov.w	r3, #32
   12b6a:	f3ef 8511 	mrs	r5, BASEPRI
   12b6e:	f383 8811 	msr	BASEPRI, r3
	unsigned int key = irq_lock();
	int must_reschedule;

	signal->result = result;
	signal->signaled = 1;
   12b72:	2301      	movs	r3, #1
int k_poll_signal(struct k_poll_signal *signal, int result)
{
	unsigned int key = irq_lock();
	int must_reschedule;

	signal->result = result;
   12b74:	6081      	str	r1, [r0, #8]
	signal->signaled = 1;
   12b76:	6043      	str	r3, [r0, #4]

	if (!signal->poll_event) {
   12b78:	6800      	ldr	r0, [r0, #0]
   12b7a:	b910      	cbnz	r0, 12b82 <k_poll_signal+0x1e>
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   12b7c:	f385 8811 	msr	BASEPRI, r5
		irq_unlock(key);
		return 0;
   12b80:	e00f      	b.n	12ba2 <k_poll_signal+0x3e>
	}

	int rc = _signal_poll_event(signal->poll_event, K_POLL_STATE_SIGNALED,
   12b82:	aa01      	add	r2, sp, #4
   12b84:	2102      	movs	r1, #2
   12b86:	f7ff fe97 	bl	128b8 <_signal_poll_event>
				    &must_reschedule);

	if (must_reschedule) {
   12b8a:	9b01      	ldr	r3, [sp, #4]
	if (!signal->poll_event) {
		irq_unlock(key);
		return 0;
	}

	int rc = _signal_poll_event(signal->poll_event, K_POLL_STATE_SIGNALED,
   12b8c:	4604      	mov	r4, r0
				    &must_reschedule);

	if (must_reschedule) {
   12b8e:	b12b      	cbz	r3, 12b9c <k_poll_signal+0x38>

#ifdef CONFIG_STACK_SENTINEL
	_check_stack_sentinel();
#endif
#ifdef CONFIG_TIMESLICING
	_update_time_slice_before_swap();
   12b90:	f000 fad6 	bl	13140 <_update_time_slice_before_swap>
#endif

	return __swap(key);
   12b94:	4628      	mov	r0, r5
   12b96:	f7ff f977 	bl	11e88 <__swap>
   12b9a:	e001      	b.n	12ba0 <k_poll_signal+0x3c>
   12b9c:	f385 8811 	msr	BASEPRI, r5
		(void)_Swap(key);
	} else {
		irq_unlock(key);
	}

	return rc;
   12ba0:	4620      	mov	r0, r4
}
   12ba2:	b003      	add	sp, #12
   12ba4:	bd30      	pop	{r4, r5, pc}

00012ba6 <_ready_thread>:
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   12ba6:	7a42      	ldrb	r2, [r0, #9]
   12ba8:	f022 0104 	bic.w	r1, r2, #4
}

/* check if a thread is ready */
static inline int _is_thread_ready(struct k_thread *thread)
{
	return !(_is_thread_prevented_from_running(thread) ||
   12bac:	f012 0f1b 	tst.w	r2, #27
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   12bb0:	7241      	strb	r1, [r0, #9]
}

/* check if a thread is ready */
static inline int _is_thread_ready(struct k_thread *thread)
{
	return !(_is_thread_prevented_from_running(thread) ||
   12bb2:	d104      	bne.n	12bbe <_ready_thread+0x18>
   12bb4:	6a03      	ldr	r3, [r0, #32]
   12bb6:	3301      	adds	r3, #1
   12bb8:	d101      	bne.n	12bbe <_ready_thread+0x18>

	/* needed to handle the start-with-delay case */
	_mark_thread_as_started(thread);

	if (_is_thread_ready(thread)) {
		_add_thread_to_ready_q(thread);
   12bba:	f000 b94d 	b.w	12e58 <_add_thread_to_ready_q>
   12bbe:	4770      	bx	lr

00012bc0 <handle_poll_event>:
{
#ifdef CONFIG_POLL
	u32_t state = K_POLL_STATE_DATA_AVAILABLE;

	return queue->poll_event ?
	       _handle_obj_poll_event(&queue->poll_event, state) : 0;
   12bc0:	6903      	ldr	r3, [r0, #16]
   12bc2:	b11b      	cbz	r3, 12bcc <handle_poll_event+0xc>
   12bc4:	2108      	movs	r1, #8
   12bc6:	3010      	adds	r0, #16
   12bc8:	f7ff bfc0 	b.w	12b4c <_handle_obj_poll_event>
#else
	return 0;
#endif
}
   12bcc:	4618      	mov	r0, r3
   12bce:	4770      	bx	lr

00012bd0 <_Swap>:
#ifdef CONFIG_STACK_SENTINEL
extern void _check_stack_sentinel(void);
#endif

static inline unsigned int _Swap(unsigned int key)
{
   12bd0:	b510      	push	{r4, lr}
   12bd2:	4604      	mov	r4, r0

#ifdef CONFIG_STACK_SENTINEL
	_check_stack_sentinel();
#endif
#ifdef CONFIG_TIMESLICING
	_update_time_slice_before_swap();
   12bd4:	f000 fab4 	bl	13140 <_update_time_slice_before_swap>
#endif

	return __swap(key);
   12bd8:	4620      	mov	r0, r4
}
   12bda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
#ifdef CONFIG_TIMESLICING
	_update_time_slice_before_swap();
#endif

	return __swap(key);
   12bde:	f7ff b953 	b.w	11e88 <__swap>
	...

00012be4 <_must_switch_threads>:
/*
 * Checks if current thread must be context-switched out. The caller must
 * already know that the execution context is a thread.
 */
static inline int _must_switch_threads(void)
{
   12be4:	b508      	push	{r3, lr}
	return _is_preempt(_current) && __must_switch_threads();
   12be6:	4b06      	ldr	r3, [pc, #24]	; (12c00 <_must_switch_threads+0x1c>)
   12be8:	689b      	ldr	r3, [r3, #8]
   12bea:	895b      	ldrh	r3, [r3, #10]
   12bec:	2b7f      	cmp	r3, #127	; 0x7f
   12bee:	d805      	bhi.n	12bfc <_must_switch_threads+0x18>
   12bf0:	f000 f9ce 	bl	12f90 <__must_switch_threads>
   12bf4:	3000      	adds	r0, #0
   12bf6:	bf18      	it	ne
   12bf8:	2001      	movne	r0, #1
   12bfa:	bd08      	pop	{r3, pc}
   12bfc:	2000      	movs	r0, #0
}
   12bfe:	bd08      	pop	{r3, pc}
   12c00:	20001fe4 	.word	0x20001fe4

00012c04 <_unpend_first_thread>:
_find_first_thread_to_unpend(_wait_q_t *wait_q, struct k_thread *from)
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	extern volatile int _handling_timeouts;

	if (_handling_timeouts) {
   12c04:	4a10      	ldr	r2, [pc, #64]	; (12c48 <_unpend_first_thread+0x44>)
   12c06:	6812      	ldr	r2, [r2, #0]
}

/* unpend the first thread from a wait queue */
/* must be called with interrupts locked */
static inline struct k_thread *_unpend_first_thread(_wait_q_t *wait_q)
{
   12c08:	4603      	mov	r3, r0
   12c0a:	6800      	ldr	r0, [r0, #0]
_find_first_thread_to_unpend(_wait_q_t *wait_q, struct k_thread *from)
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	extern volatile int _handling_timeouts;

	if (_handling_timeouts) {
   12c0c:	b15a      	cbz	r2, 12c26 <_unpend_first_thread+0x22>
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   12c0e:	4283      	cmp	r3, r0
   12c10:	d016      	beq.n	12c40 <_unpend_first_thread+0x3c>
		sys_dlist_t *q = (sys_dlist_t *)wait_q;
		sys_dnode_t *cur = from ? &from->base.k_q_node : NULL;

		/* skip threads that have an expired timeout */
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
   12c12:	b138      	cbz	r0, 12c24 <_unpend_first_thread+0x20>
			struct k_thread *thread = (struct k_thread *)cur;

			if (_is_thread_timeout_expired(thread)) {
   12c14:	6a02      	ldr	r2, [r0, #32]
   12c16:	3202      	adds	r2, #2
   12c18:	d108      	bne.n	12c2c <_unpend_first_thread+0x28>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   12c1a:	685a      	ldr	r2, [r3, #4]
   12c1c:	4282      	cmp	r2, r0
   12c1e:	d00f      	beq.n	12c40 <_unpend_first_thread+0x3c>
   12c20:	6800      	ldr	r0, [r0, #0]
   12c22:	e7f6      	b.n	12c12 <_unpend_first_thread+0xe>
   12c24:	4770      	bx	lr
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   12c26:	4283      	cmp	r3, r0
   12c28:	d00c      	beq.n	12c44 <_unpend_first_thread+0x40>
/* must be called with interrupts locked */
static inline struct k_thread *_unpend_first_thread(_wait_q_t *wait_q)
{
	struct k_thread *thread = _find_first_thread_to_unpend(wait_q, NULL);

	if (thread) {
   12c2a:	b160      	cbz	r0, 12c46 <_unpend_first_thread+0x42>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   12c2c:	e890 000c 	ldmia.w	r0, {r2, r3}
   12c30:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   12c32:	6802      	ldr	r2, [r0, #0]
   12c34:	6053      	str	r3, [r2, #4]
}

/* mark a thread as not pending in its TCS */
static inline void _mark_thread_as_not_pending(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PENDING;
   12c36:	7a43      	ldrb	r3, [r0, #9]
   12c38:	f023 0302 	bic.w	r3, r3, #2
   12c3c:	7243      	strb	r3, [r0, #9]
   12c3e:	4770      	bx	lr
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   12c40:	2000      	movs	r0, #0
   12c42:	4770      	bx	lr
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   12c44:	4610      	mov	r0, r2
	if (thread) {
		_unpend_thread(thread);
	}

	return thread;
}
   12c46:	4770      	bx	lr
   12c48:	20002228 	.word	0x20002228

00012c4c <_abort_timeout>:
	}
}

/* returns _INACTIVE if the timer is not active */
static inline int _abort_timeout(struct _timeout *timeout)
{
   12c4c:	4603      	mov	r3, r0
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   12c4e:	6900      	ldr	r0, [r0, #16]
   12c50:	1c42      	adds	r2, r0, #1
   12c52:	d010      	beq.n	12c76 <_abort_timeout+0x2a>
   12c54:	4a08      	ldr	r2, [pc, #32]	; (12c78 <_abort_timeout+0x2c>)
		return _INACTIVE;
	}

	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   12c56:	6912      	ldr	r2, [r2, #16]
   12c58:	4293      	cmp	r3, r2
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   12c5a:	bf1f      	itttt	ne
   12c5c:	681a      	ldrne	r2, [r3, #0]
		sys_dnode_t *next_node =
			sys_dlist_peek_next(&_timeout_q, &timeout->node);
		struct _timeout *next = (struct _timeout *)next_node;

		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   12c5e:	6911      	ldrne	r1, [r2, #16]
   12c60:	1840      	addne	r0, r0, r1
   12c62:	6110      	strne	r0, [r2, #16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   12c64:	e893 0006 	ldmia.w	r3, {r1, r2}
   12c68:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
   12c6a:	6819      	ldr	r1, [r3, #0]
   12c6c:	604a      	str	r2, [r1, #4]
	}
	sys_dlist_remove(&timeout->node);
	timeout->delta_ticks_from_prev = _INACTIVE;
   12c6e:	f04f 32ff 	mov.w	r2, #4294967295
   12c72:	611a      	str	r2, [r3, #16]

	return 0;
   12c74:	2000      	movs	r0, #0
}
   12c76:	4770      	bx	lr
   12c78:	20001fe4 	.word	0x20001fe4

00012c7c <k_queue_init>:
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
   12c7c:	2300      	movs	r3, #0
   12c7e:	6083      	str	r3, [r0, #8]
	list->tail = NULL;
   12c80:	60c3      	str	r3, [r0, #12]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   12c82:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   12c84:	6040      	str	r0, [r0, #4]
void k_queue_init(struct k_queue *queue)
{
	sys_slist_init(&queue->data_q);
	sys_dlist_init(&queue->wait_q);

	_INIT_OBJ_POLL_EVENT(queue);
   12c86:	6103      	str	r3, [r0, #16]
   12c88:	4770      	bx	lr
	...

00012c8c <k_queue_insert>:

	irq_unlock(key);
}

void k_queue_insert(struct k_queue *queue, void *prev, void *data)
{
   12c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12c8e:	4605      	mov	r5, r0
   12c90:	4614      	mov	r4, r2
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M)
	unsigned int tmp;

	__asm__ volatile(
   12c92:	f04f 0320 	mov.w	r3, #32
   12c96:	f3ef 8711 	mrs	r7, BASEPRI
   12c9a:	f383 8811 	msr	BASEPRI, r3
	struct k_thread *first_pending_thread;
	unsigned int key;

	key = irq_lock();

	first_pending_thread = _unpend_first_thread(&queue->wait_q);
   12c9e:	f7ff ffb1 	bl	12c04 <_unpend_first_thread>

	if (first_pending_thread) {
   12ca2:	4606      	mov	r6, r0
   12ca4:	b190      	cbz	r0, 12ccc <k_queue_insert+0x40>

/* returns _INACTIVE if the timer has already expired */
static inline int _abort_thread_timeout(struct k_thread *thread)
{
	return _abort_timeout(&thread->base.timeout);
   12ca6:	3010      	adds	r0, #16
   12ca8:	f7ff ffd0 	bl	12c4c <_abort_timeout>
}

static void prepare_thread_to_run(struct k_thread *thread, void *data)
{
	_abort_thread_timeout(thread);
	_ready_thread(thread);
   12cac:	4630      	mov	r0, r6
   12cae:	f7ff ff7a 	bl	12ba6 <_ready_thread>
   12cb2:	2300      	movs	r3, #0
   12cb4:	6673      	str	r3, [r6, #100]	; 0x64
_set_thread_return_value_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	_set_thread_return_value(thread, value);
	thread->base.swap_data = data;
   12cb6:	60f4      	str	r4, [r6, #12]
   12cb8:	f3ef 8305 	mrs	r3, IPSR
   12cbc:	2b0d      	cmp	r3, #13
   12cbe:	d821      	bhi.n	12d04 <k_queue_insert+0x78>
   12cc0:	b31b      	cbz	r3, 12d0a <k_queue_insert+0x7e>
   12cc2:	4b13      	ldr	r3, [pc, #76]	; (12d10 <k_queue_insert+0x84>)
   12cc4:	685b      	ldr	r3, [r3, #4]
   12cc6:	051b      	lsls	r3, r3, #20
   12cc8:	d51c      	bpl.n	12d04 <k_queue_insert+0x78>
   12cca:	e01e      	b.n	12d0a <k_queue_insert+0x7e>
 */
static inline void sys_slist_insert(sys_slist_t *list,
				    sys_snode_t *prev,
				    sys_snode_t *node)
{
	if (!prev) {
   12ccc:	b929      	cbnz	r1, 12cda <k_queue_insert+0x4e>
 * @param node A pointer on the node to prepend
 */
static inline void sys_slist_prepend(sys_slist_t *list,
				     sys_snode_t *node)
{
	node->next = list->head;
   12cce:	68ab      	ldr	r3, [r5, #8]
   12cd0:	6023      	str	r3, [r4, #0]
	list->head = node;

	if (!list->tail) {
   12cd2:	68eb      	ldr	r3, [r5, #12]
 */
static inline void sys_slist_prepend(sys_slist_t *list,
				     sys_snode_t *node)
{
	node->next = list->head;
	list->head = node;
   12cd4:	60ac      	str	r4, [r5, #8]

	if (!list->tail) {
   12cd6:	b963      	cbnz	r3, 12cf2 <k_queue_insert+0x66>
   12cd8:	e008      	b.n	12cec <k_queue_insert+0x60>
				    sys_snode_t *prev,
				    sys_snode_t *node)
{
	if (!prev) {
		sys_slist_prepend(list, node);
	} else if (!prev->next) {
   12cda:	680b      	ldr	r3, [r1, #0]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node)
{
	node->next = NULL;
   12cdc:	6023      	str	r3, [r4, #0]
				    sys_snode_t *prev,
				    sys_snode_t *node)
{
	if (!prev) {
		sys_slist_prepend(list, node);
	} else if (!prev->next) {
   12cde:	b93b      	cbnz	r3, 12cf0 <k_queue_insert+0x64>
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node)
{
	node->next = NULL;

	if (!list->tail) {
   12ce0:	68eb      	ldr	r3, [r5, #12]
   12ce2:	b913      	cbnz	r3, 12cea <k_queue_insert+0x5e>
		list->tail = node;
   12ce4:	60ec      	str	r4, [r5, #12]
		list->head = node;
   12ce6:	60ac      	str	r4, [r5, #8]
   12ce8:	e003      	b.n	12cf2 <k_queue_insert+0x66>
	} else {
		list->tail->next = node;
   12cea:	601c      	str	r4, [r3, #0]
		list->tail = node;
   12cec:	60ec      	str	r4, [r5, #12]
   12cee:	e000      	b.n	12cf2 <k_queue_insert+0x66>
		sys_slist_prepend(list, node);
	} else if (!prev->next) {
		sys_slist_append(list, node);
	} else {
		node->next = prev->next;
		prev->next = node;
   12cf0:	600c      	str	r4, [r1, #0]
			(void)_Swap(key);
			return;
		}
	} else {
		sys_slist_insert(&queue->data_q, prev, data);
		if (handle_poll_event(queue)) {
   12cf2:	4628      	mov	r0, r5
   12cf4:	f7ff ff64 	bl	12bc0 <handle_poll_event>
   12cf8:	b120      	cbz	r0, 12d04 <k_queue_insert+0x78>
			(void)_Swap(key);
   12cfa:	4638      	mov	r0, r7
			return;
		}
	}

	irq_unlock(key);
}
   12cfc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			return;
		}
	} else {
		sys_slist_insert(&queue->data_q, prev, data);
		if (handle_poll_event(queue)) {
			(void)_Swap(key);
   12d00:	f7ff bf66 	b.w	12bd0 <_Swap>
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   12d04:	f387 8811 	msr	BASEPRI, r7
   12d08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

	first_pending_thread = _unpend_first_thread(&queue->wait_q);

	if (first_pending_thread) {
		prepare_thread_to_run(first_pending_thread, data);
		if (!_is_in_isr() && _must_switch_threads()) {
   12d0a:	f7ff ff6b 	bl	12be4 <_must_switch_threads>
   12d0e:	e7f3      	b.n	12cf8 <k_queue_insert+0x6c>
   12d10:	e000ed00 	.word	0xe000ed00

00012d14 <k_queue_append>:
	irq_unlock(key);
}

void k_queue_append(struct k_queue *queue, void *data)
{
	return k_queue_insert(queue, queue->data_q.tail, data);
   12d14:	460a      	mov	r2, r1
   12d16:	68c1      	ldr	r1, [r0, #12]
   12d18:	f7ff bfb8 	b.w	12c8c <k_queue_insert>

00012d1c <k_queue_prepend>:
}

void k_queue_prepend(struct k_queue *queue, void *data)
{
	return k_queue_insert(queue, NULL, data);
   12d1c:	460a      	mov	r2, r1
   12d1e:	2100      	movs	r1, #0
   12d20:	f7ff bfb4 	b.w	12c8c <k_queue_insert>

00012d24 <k_queue_append_list>:
}

void k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
   12d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12d28:	4604      	mov	r4, r0
   12d2a:	460d      	mov	r5, r1
   12d2c:	4691      	mov	r9, r2
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M)
	unsigned int tmp;

	__asm__ volatile(
   12d2e:	f04f 0320 	mov.w	r3, #32
   12d32:	f3ef 8811 	mrs	r8, BASEPRI
   12d36:	f383 8811 	msr	BASEPRI, r3
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   12d3a:	6807      	ldr	r7, [r0, #0]
   12d3c:	f04f 0a00 	mov.w	sl, #0
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   12d40:	42b8      	cmp	r0, r7
   12d42:	bf08      	it	eq
   12d44:	2700      	moveq	r7, #0
	unsigned int key;

	key = irq_lock();

	first_thread = _peek_first_pending_thread(&queue->wait_q);
	while (head && ((thread = _unpend_first_thread(&queue->wait_q)))) {
   12d46:	b1ad      	cbz	r5, 12d74 <k_queue_append_list+0x50>
   12d48:	4620      	mov	r0, r4
   12d4a:	f7ff ff5b 	bl	12c04 <_unpend_first_thread>
   12d4e:	4606      	mov	r6, r0
   12d50:	b158      	cbz	r0, 12d6a <k_queue_append_list+0x46>
   12d52:	f106 0010 	add.w	r0, r6, #16
   12d56:	f7ff ff79 	bl	12c4c <_abort_timeout>
}

static void prepare_thread_to_run(struct k_thread *thread, void *data)
{
	_abort_thread_timeout(thread);
	_ready_thread(thread);
   12d5a:	4630      	mov	r0, r6
   12d5c:	f7ff ff23 	bl	12ba6 <_ready_thread>
   12d60:	60f5      	str	r5, [r6, #12]
   12d62:	f8c6 a064 	str.w	sl, [r6, #100]	; 0x64
	key = irq_lock();

	first_thread = _peek_first_pending_thread(&queue->wait_q);
	while (head && ((thread = _unpend_first_thread(&queue->wait_q)))) {
		prepare_thread_to_run(thread, head);
		head = *(void **)head;
   12d66:	682d      	ldr	r5, [r5, #0]
   12d68:	e7ed      	b.n	12d46 <k_queue_append_list+0x22>
 * @param tail A pointer to the last element of the list to append
 */
static inline void sys_slist_append_list(sys_slist_t *list,
					 void *head, void *tail)
{
	if (!list->tail) {
   12d6a:	68e3      	ldr	r3, [r4, #12]
   12d6c:	b9d3      	cbnz	r3, 12da4 <k_queue_append_list+0x80>
		list->head = (sys_snode_t *)head;
   12d6e:	60a5      	str	r5, [r4, #8]
		list->tail = (sys_snode_t *)tail;
	} else {
		list->tail->next = (sys_snode_t *)head;
		list->tail = (sys_snode_t *)tail;
   12d70:	f8c4 900c 	str.w	r9, [r4, #12]

	if (head) {
		sys_slist_append_list(&queue->data_q, head, tail);
	}

	if (first_thread) {
   12d74:	b14f      	cbz	r7, 12d8a <k_queue_append_list+0x66>
   12d76:	f3ef 8305 	mrs	r3, IPSR
   12d7a:	2b0d      	cmp	r3, #13
   12d7c:	d80e      	bhi.n	12d9c <k_queue_append_list+0x78>
   12d7e:	b19b      	cbz	r3, 12da8 <k_queue_append_list+0x84>
   12d80:	4b0b      	ldr	r3, [pc, #44]	; (12db0 <k_queue_append_list+0x8c>)
   12d82:	685b      	ldr	r3, [r3, #4]
   12d84:	051b      	lsls	r3, r3, #20
   12d86:	d509      	bpl.n	12d9c <k_queue_append_list+0x78>
   12d88:	e00e      	b.n	12da8 <k_queue_append_list+0x84>
		if (!_is_in_isr() && _must_switch_threads()) {
			(void)_Swap(key);
			return;
		}
	} else {
		if (handle_poll_event(queue)) {
   12d8a:	4620      	mov	r0, r4
   12d8c:	f7ff ff18 	bl	12bc0 <handle_poll_event>
   12d90:	b120      	cbz	r0, 12d9c <k_queue_append_list+0x78>
			(void)_Swap(key);
   12d92:	4640      	mov	r0, r8
			return;
		}
	}

	irq_unlock(key);
}
   12d94:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			(void)_Swap(key);
			return;
		}
	} else {
		if (handle_poll_event(queue)) {
			(void)_Swap(key);
   12d98:	f7ff bf1a 	b.w	12bd0 <_Swap>
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   12d9c:	f388 8811 	msr	BASEPRI, r8
   12da0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
{
	if (!list->tail) {
		list->head = (sys_snode_t *)head;
		list->tail = (sys_snode_t *)tail;
	} else {
		list->tail->next = (sys_snode_t *)head;
   12da4:	601d      	str	r5, [r3, #0]
   12da6:	e7e3      	b.n	12d70 <k_queue_append_list+0x4c>
	if (head) {
		sys_slist_append_list(&queue->data_q, head, tail);
	}

	if (first_thread) {
		if (!_is_in_isr() && _must_switch_threads()) {
   12da8:	f7ff ff1c 	bl	12be4 <_must_switch_threads>
   12dac:	e7f0      	b.n	12d90 <k_queue_append_list+0x6c>
   12dae:	bf00      	nop
   12db0:	e000ed00 	.word	0xe000ed00

00012db4 <k_queue_get>:
	k_queue_append_list(queue, list->head, list->tail);
	sys_slist_init(list);
}

void *k_queue_get(struct k_queue *queue, s32_t timeout)
{
   12db4:	b538      	push	{r3, r4, r5, lr}
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M)
	unsigned int tmp;

	__asm__ volatile(
   12db6:	f04f 0420 	mov.w	r4, #32
   12dba:	f3ef 8511 	mrs	r5, BASEPRI
   12dbe:	f384 8811 	msr	BASEPRI, r4
   12dc2:	6884      	ldr	r4, [r0, #8]
	unsigned int key;
	void *data;

	key = irq_lock();

	if (likely(!sys_slist_is_empty(&queue->data_q))) {
   12dc4:	b144      	cbz	r4, 12dd8 <k_queue_get+0x24>
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list)
{
	sys_snode_t *node = list->head;

	list->head = node->next;
	if (list->tail == node) {
   12dc6:	68c1      	ldr	r1, [r0, #12]
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list)
{
	sys_snode_t *node = list->head;

	list->head = node->next;
   12dc8:	6822      	ldr	r2, [r4, #0]
   12dca:	6082      	str	r2, [r0, #8]
	if (list->tail == node) {
   12dcc:	428c      	cmp	r4, r1
		list->tail = list->head;
   12dce:	bf08      	it	eq
   12dd0:	60c2      	streq	r2, [r0, #12]
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   12dd2:	f385 8811 	msr	BASEPRI, r5
   12dd6:	e00e      	b.n	12df6 <k_queue_get+0x42>
		data = sys_slist_get_not_empty(&queue->data_q);
		irq_unlock(key);
		return data;
	}

	if (timeout == K_NO_WAIT) {
   12dd8:	b919      	cbnz	r1, 12de2 <k_queue_get+0x2e>
   12dda:	f385 8811 	msr	BASEPRI, r5
		irq_unlock(key);
		return NULL;
   12dde:	4608      	mov	r0, r1
   12de0:	bd38      	pop	{r3, r4, r5, pc}
	}

	_pend_current_thread(&queue->wait_q, timeout);
   12de2:	f000 f8c5 	bl	12f70 <_pend_current_thread>

	return _Swap(key) ? NULL : _current->base.swap_data;
   12de6:	4628      	mov	r0, r5
   12de8:	f7ff fef2 	bl	12bd0 <_Swap>
   12dec:	b918      	cbnz	r0, 12df6 <k_queue_get+0x42>
   12dee:	4b03      	ldr	r3, [pc, #12]	; (12dfc <k_queue_get+0x48>)
   12df0:	689b      	ldr	r3, [r3, #8]
   12df2:	68d8      	ldr	r0, [r3, #12]
   12df4:	bd38      	pop	{r3, r4, r5, pc}
   12df6:	4620      	mov	r0, r4
}
   12df8:	bd38      	pop	{r3, r4, r5, pc}
   12dfa:	bf00      	nop
   12dfc:	20001fe4 	.word	0x20001fe4

00012e00 <_add_timeout>:

static inline void _add_timeout(struct k_thread *thread,
				struct _timeout *timeout,
				_wait_q_t *wait_q,
				s32_t timeout_in_ticks)
{
   12e00:	b570      	push	{r4, r5, r6, lr}
	__ASSERT(timeout_in_ticks > 0, "");

	timeout->delta_ticks_from_prev = timeout_in_ticks;
	timeout->thread = thread;
	timeout->wait_q = (sys_dlist_t *)wait_q;
   12e02:	60ca      	str	r2, [r1, #12]
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   12e04:	4a13      	ldr	r2, [pc, #76]	; (12e54 <_add_timeout+0x54>)
				s32_t timeout_in_ticks)
{
	__ASSERT(timeout_in_ticks > 0, "");

	timeout->delta_ticks_from_prev = timeout_in_ticks;
	timeout->thread = thread;
   12e06:	6088      	str	r0, [r1, #8]
   12e08:	4610      	mov	r0, r2
				_wait_q_t *wait_q,
				s32_t timeout_in_ticks)
{
	__ASSERT(timeout_in_ticks > 0, "");

	timeout->delta_ticks_from_prev = timeout_in_ticks;
   12e0a:	610b      	str	r3, [r1, #16]
   12e0c:	f850 3f0c 	ldr.w	r3, [r0, #12]!
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   12e10:	4283      	cmp	r3, r0
   12e12:	d106      	bne.n	12e22 <_add_timeout+0x22>
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
   12e14:	6008      	str	r0, [r1, #0]
	node->prev = list->tail;
   12e16:	6913      	ldr	r3, [r2, #16]
   12e18:	604b      	str	r3, [r1, #4]

	list->tail->next = node;
   12e1a:	6913      	ldr	r3, [r2, #16]
   12e1c:	6019      	str	r1, [r3, #0]
	list->tail = node;
   12e1e:	6111      	str	r1, [r2, #16]
   12e20:	bd70      	pop	{r4, r5, r6, pc}
	if (program_time > 0) {
		*delta += _get_elapsed_program_time();
	}
	adjusted_timeout = *delta;
#endif
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   12e22:	2b00      	cmp	r3, #0
   12e24:	d0f6      	beq.n	12e14 <_add_timeout+0x14>
   12e26:	6916      	ldr	r6, [r2, #16]
		if (*delta <= in_q->delta_ticks_from_prev) {
   12e28:	690c      	ldr	r4, [r1, #16]
   12e2a:	691d      	ldr	r5, [r3, #16]
   12e2c:	42ac      	cmp	r4, r5
   12e2e:	dc08      	bgt.n	12e42 <_add_timeout+0x42>
	sys_dnode_t *insert_point, sys_dnode_t *node)
{
	if (!insert_point) {
		sys_dlist_append(list, node);
	} else {
		node->prev = insert_point->prev;
   12e30:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
   12e32:	1b2c      	subs	r4, r5, r4
   12e34:	611c      	str	r4, [r3, #16]
   12e36:	604a      	str	r2, [r1, #4]
		node->next = insert_point;
   12e38:	600b      	str	r3, [r1, #0]
		insert_point->prev->next = node;
   12e3a:	685a      	ldr	r2, [r3, #4]
   12e3c:	6011      	str	r1, [r2, #0]
		insert_point->prev = node;
   12e3e:	6059      	str	r1, [r3, #4]
   12e40:	bd70      	pop	{r4, r5, r6, pc}
			sys_dlist_insert_before(&_timeout_q, &in_q->node,
						&timeout->node);
			goto inserted;
		}

		*delta -= in_q->delta_ticks_from_prev;
   12e42:	1b64      	subs	r4, r4, r5
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   12e44:	42b3      	cmp	r3, r6
   12e46:	610c      	str	r4, [r1, #16]
   12e48:	d0e4      	beq.n	12e14 <_add_timeout+0x14>
   12e4a:	681b      	ldr	r3, [r3, #0]
	if (program_time > 0) {
		*delta += _get_elapsed_program_time();
	}
	adjusted_timeout = *delta;
#endif
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   12e4c:	2b00      	cmp	r3, #0
   12e4e:	d1eb      	bne.n	12e28 <_add_timeout+0x28>
   12e50:	e7e0      	b.n	12e14 <_add_timeout+0x14>
   12e52:	bf00      	nop
   12e54:	20001fe4 	.word	0x20001fe4

00012e58 <_add_thread_to_ready_q>:
}

/* find out the ready queue array index for a given prio */
static inline int _get_ready_q_q_index(int prio)
{
	return prio + _NUM_COOP_PRIO;
   12e58:	f990 300a 	ldrsb.w	r3, [r0, #10]
static void _set_ready_q_prio_bit(int prio)
{
	int bmap_index = _get_ready_q_prio_bmap_index(prio);
	u32_t *bmap = &_ready_q.prio_bmap[bmap_index];

	*bmap |= _get_ready_q_prio_bit(prio);
   12e5c:	4911      	ldr	r1, [pc, #68]	; (12ea4 <_add_thread_to_ready_q+0x4c>)
 *
 * Interrupts must be locked when calling this function.
 */

void _add_thread_to_ready_q(struct k_thread *thread)
{
   12e5e:	b530      	push	{r4, r5, lr}
   12e60:	f103 0410 	add.w	r4, r3, #16
}

/* find out the prio bitmap index for a given prio */
static inline int _get_ready_q_prio_bmap_index(int prio)
{
	return (prio + _NUM_COOP_PRIO) >> 5;
   12e64:	1162      	asrs	r2, r4, #5
static void _set_ready_q_prio_bit(int prio)
{
	int bmap_index = _get_ready_q_prio_bmap_index(prio);
	u32_t *bmap = &_ready_q.prio_bmap[bmap_index];

	*bmap |= _get_ready_q_prio_bit(prio);
   12e66:	3206      	adds	r2, #6
   12e68:	eb01 0282 	add.w	r2, r1, r2, lsl #2
   12e6c:	2501      	movs	r5, #1
   12e6e:	f004 041f 	and.w	r4, r4, #31
   12e72:	fa05 f404 	lsl.w	r4, r5, r4
   12e76:	6855      	ldr	r5, [r2, #4]

void _add_thread_to_ready_q(struct k_thread *thread)
{
#ifdef CONFIG_MULTITHREADING
	int q_index = _get_ready_q_q_index(thread->base.prio);
	sys_dlist_t *q = &_ready_q.q[q_index];
   12e78:	3314      	adds	r3, #20
   12e7a:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
static void _set_ready_q_prio_bit(int prio)
{
	int bmap_index = _get_ready_q_prio_bmap_index(prio);
	u32_t *bmap = &_ready_q.prio_bmap[bmap_index];

	*bmap |= _get_ready_q_prio_bit(prio);
   12e7e:	4325      	orrs	r5, r4
   12e80:	6055      	str	r5, [r2, #4]
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
   12e82:	6003      	str	r3, [r0, #0]
	node->prev = list->tail;
   12e84:	685a      	ldr	r2, [r3, #4]
   12e86:	6042      	str	r2, [r0, #4]

	list->tail->next = node;
   12e88:	685a      	ldr	r2, [r3, #4]
   12e8a:	6010      	str	r0, [r2, #0]
	list->tail = node;
   12e8c:	6058      	str	r0, [r3, #4]
	_set_ready_q_prio_bit(thread->base.prio);
	sys_dlist_append(q, &thread->base.k_q_node);

	struct k_thread **cache = &_ready_q.cache;

	*cache = _is_t1_higher_prio_than_t2(thread, *cache) ? thread : *cache;
   12e8e:	698b      	ldr	r3, [r1, #24]
   12e90:	f990 400a 	ldrsb.w	r4, [r0, #10]
   12e94:	f993 200a 	ldrsb.w	r2, [r3, #10]
   12e98:	4294      	cmp	r4, r2
   12e9a:	bfb8      	it	lt
   12e9c:	4603      	movlt	r3, r0
   12e9e:	618b      	str	r3, [r1, #24]
   12ea0:	bd30      	pop	{r4, r5, pc}
   12ea2:	bf00      	nop
   12ea4:	20001fe4 	.word	0x20001fe4

00012ea8 <_remove_thread_from_ready_q>:
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   12ea8:	e890 000a 	ldmia.w	r0, {r1, r3}
 *
 * Interrupts must be locked when calling this function.
 */

void _remove_thread_from_ready_q(struct k_thread *thread)
{
   12eac:	b510      	push	{r4, lr}
}

/* find out the ready queue array index for a given prio */
static inline int _get_ready_q_q_index(int prio)
{
	return prio + _NUM_COOP_PRIO;
   12eae:	f990 200a 	ldrsb.w	r2, [r0, #10]
   12eb2:	6019      	str	r1, [r3, #0]
	node->next->prev = node->prev;
   12eb4:	6801      	ldr	r1, [r0, #0]
#ifdef CONFIG_MULTITHREADING
	int q_index = _get_ready_q_q_index(thread->base.prio);
	sys_dlist_t *q = &_ready_q.q[q_index];
   12eb6:	3214      	adds	r2, #20
   12eb8:	604b      	str	r3, [r1, #4]
   12eba:	4b14      	ldr	r3, [pc, #80]	; (12f0c <_remove_thread_from_ready_q+0x64>)
   12ebc:	eb03 01c2 	add.w	r1, r3, r2, lsl #3

	sys_dlist_remove(&thread->base.k_q_node);
	if (sys_dlist_is_empty(q)) {
   12ec0:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
   12ec4:	428a      	cmp	r2, r1
   12ec6:	d10f      	bne.n	12ee8 <_remove_thread_from_ready_q+0x40>
}

/* find out the prio bitmap index for a given prio */
static inline int _get_ready_q_prio_bmap_index(int prio)
{
	return (prio + _NUM_COOP_PRIO) >> 5;
   12ec8:	f990 100a 	ldrsb.w	r1, [r0, #10]
   12ecc:	3110      	adds	r1, #16
   12ece:	114a      	asrs	r2, r1, #5
static void _clear_ready_q_prio_bit(int prio)
{
	int bmap_index = _get_ready_q_prio_bmap_index(prio);
	u32_t *bmap = &_ready_q.prio_bmap[bmap_index];

	*bmap &= ~_get_ready_q_prio_bit(prio);
   12ed0:	3206      	adds	r2, #6
   12ed2:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   12ed6:	2401      	movs	r4, #1
   12ed8:	f001 011f 	and.w	r1, r1, #31
   12edc:	fa04 f101 	lsl.w	r1, r4, r1
   12ee0:	6854      	ldr	r4, [r2, #4]
   12ee2:	ea24 0401 	bic.w	r4, r4, r1
   12ee6:	6054      	str	r4, [r2, #4]
		_clear_ready_q_prio_bit(thread->base.prio);
	}

	struct k_thread **cache = &_ready_q.cache;

	*cache = *cache == thread ? _get_ready_q_head() : *cache;
   12ee8:	699a      	ldr	r2, [r3, #24]
   12eea:	4290      	cmp	r0, r2
   12eec:	d10c      	bne.n	12f08 <_remove_thread_from_ready_q+0x60>
 * @return least significant bit set, 0 if @a op is 0
 */

static ALWAYS_INLINE unsigned int find_lsb_set(u32_t op)
{
	return __builtin_ffs(op);
   12eee:	4a07      	ldr	r2, [pc, #28]	; (12f0c <_remove_thread_from_ready_q+0x64>)
   12ef0:	69d1      	ldr	r1, [r2, #28]
   12ef2:	fa91 f2a1 	rbit	r2, r1
   12ef6:	2900      	cmp	r1, #0
   12ef8:	fab2 f282 	clz	r2, r2
   12efc:	bf08      	it	eq
   12efe:	f04f 32ff 	moveq.w	r2, #4294967295
 */
static struct k_thread *_get_ready_q_head(void)
{
	int prio = _get_highest_ready_prio();
	int q_index = _get_ready_q_q_index(prio);
	sys_dlist_t *list = &_ready_q.q[q_index];
   12f02:	3204      	adds	r2, #4
   12f04:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
		_clear_ready_q_prio_bit(thread->base.prio);
	}

	struct k_thread **cache = &_ready_q.cache;

	*cache = *cache == thread ? _get_ready_q_head() : *cache;
   12f08:	619a      	str	r2, [r3, #24]
   12f0a:	bd10      	pop	{r4, pc}
   12f0c:	20001fe4 	.word	0x20001fe4

00012f10 <_pend_thread>:
#endif

/* pend the specified thread: it must *not* be in the ready queue */
/* must be called with interrupts locked */
void _pend_thread(struct k_thread *thread, _wait_q_t *wait_q, s32_t timeout)
{
   12f10:	b430      	push	{r4, r5}
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   12f12:	680c      	ldr	r4, [r1, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   12f14:	42a1      	cmp	r1, r4
   12f16:	d012      	beq.n	12f3e <_pend_thread+0x2e>
#ifdef CONFIG_MULTITHREADING
	sys_dlist_t *wait_q_list = (sys_dlist_t *)wait_q;
	sys_dnode_t *node;

	SYS_DLIST_FOR_EACH_NODE(wait_q_list, node) {
   12f18:	b18c      	cbz	r4, 12f3e <_pend_thread+0x2e>
		struct k_thread *pending = (struct k_thread *)node;

		if (_is_t1_higher_prio_than_t2(thread, pending)) {
   12f1a:	f990 500a 	ldrsb.w	r5, [r0, #10]
   12f1e:	f994 300a 	ldrsb.w	r3, [r4, #10]
   12f22:	429d      	cmp	r5, r3
   12f24:	da06      	bge.n	12f34 <_pend_thread+0x24>
	sys_dnode_t *insert_point, sys_dnode_t *node)
{
	if (!insert_point) {
		sys_dlist_append(list, node);
	} else {
		node->prev = insert_point->prev;
   12f26:	6863      	ldr	r3, [r4, #4]
   12f28:	6043      	str	r3, [r0, #4]
		node->next = insert_point;
   12f2a:	6004      	str	r4, [r0, #0]
		insert_point->prev->next = node;
   12f2c:	6863      	ldr	r3, [r4, #4]
   12f2e:	6018      	str	r0, [r3, #0]
		insert_point->prev = node;
   12f30:	6060      	str	r0, [r4, #4]
   12f32:	e00a      	b.n	12f4a <_pend_thread+0x3a>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   12f34:	684b      	ldr	r3, [r1, #4]
   12f36:	429c      	cmp	r4, r3
   12f38:	d001      	beq.n	12f3e <_pend_thread+0x2e>
   12f3a:	6824      	ldr	r4, [r4, #0]
   12f3c:	e7ec      	b.n	12f18 <_pend_thread+0x8>
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
   12f3e:	6001      	str	r1, [r0, #0]
	node->prev = list->tail;
   12f40:	684b      	ldr	r3, [r1, #4]
   12f42:	6043      	str	r3, [r0, #4]

	list->tail->next = node;
   12f44:	684b      	ldr	r3, [r1, #4]
   12f46:	6018      	str	r0, [r3, #0]
	list->tail = node;
   12f48:	6048      	str	r0, [r1, #4]
}

/* mark a thread as pending in its TCS */
static inline void _mark_thread_as_pending(struct k_thread *thread)
{
	thread->base.thread_state |= _THREAD_PENDING;
   12f4a:	7a43      	ldrb	r3, [r0, #9]
   12f4c:	f043 0302 	orr.w	r3, r3, #2
   12f50:	7243      	strb	r3, [r0, #9]
	sys_dlist_append(wait_q_list, &thread->base.k_q_node);

inserted:
	_mark_thread_as_pending(thread);

	if (timeout != K_FOREVER) {
   12f52:	1c53      	adds	r3, r2, #1
   12f54:	d00a      	beq.n	12f6c <_pend_thread+0x5c>

static inline void _add_thread_timeout(struct k_thread *thread,
				       _wait_q_t *wait_q,
				       s32_t timeout_in_ticks)
{
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
   12f56:	3209      	adds	r2, #9
   12f58:	230a      	movs	r3, #10
		s32_t ticks = _TICK_ALIGN + _ms_to_ticks(timeout);

		_add_thread_timeout(thread, wait_q, ticks);
	}
#endif
}
   12f5a:	bc30      	pop	{r4, r5}
   12f5c:	fbb2 f3f3 	udiv	r3, r2, r3
   12f60:	460a      	mov	r2, r1
   12f62:	3301      	adds	r3, #1
   12f64:	f100 0110 	add.w	r1, r0, #16
   12f68:	f7ff bf4a 	b.w	12e00 <_add_timeout>
   12f6c:	bc30      	pop	{r4, r5}
   12f6e:	4770      	bx	lr

00012f70 <_pend_current_thread>:

/* pend the current thread */
/* must be called with interrupts locked */
void _pend_current_thread(_wait_q_t *wait_q, s32_t timeout)
{
   12f70:	b570      	push	{r4, r5, r6, lr}
	_remove_thread_from_ready_q(_current);
   12f72:	4c06      	ldr	r4, [pc, #24]	; (12f8c <_pend_current_thread+0x1c>)
}

/* pend the current thread */
/* must be called with interrupts locked */
void _pend_current_thread(_wait_q_t *wait_q, s32_t timeout)
{
   12f74:	460e      	mov	r6, r1
   12f76:	4605      	mov	r5, r0
	_remove_thread_from_ready_q(_current);
   12f78:	68a0      	ldr	r0, [r4, #8]
   12f7a:	f7ff ff95 	bl	12ea8 <_remove_thread_from_ready_q>
	_pend_thread(_current, wait_q, timeout);
   12f7e:	4632      	mov	r2, r6
   12f80:	4629      	mov	r1, r5
   12f82:	68a0      	ldr	r0, [r4, #8]
}
   12f84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
/* pend the current thread */
/* must be called with interrupts locked */
void _pend_current_thread(_wait_q_t *wait_q, s32_t timeout)
{
	_remove_thread_from_ready_q(_current);
	_pend_thread(_current, wait_q, timeout);
   12f88:	f7ff bfc2 	b.w	12f10 <_pend_thread>
   12f8c:	20001fe4 	.word	0x20001fe4

00012f90 <__must_switch_threads>:
{
	int bitmap = 0;
	u32_t ready_range;

#if (K_NUM_PRIORITIES <= 32)
	ready_range = _ready_q.prio_bmap[0];
   12f90:	4a09      	ldr	r2, [pc, #36]	; (12fb8 <__must_switch_threads+0x28>)
   12f92:	69d1      	ldr	r1, [r2, #28]

#ifdef CONFIG_KERNEL_DEBUG
	_dump_ready_q();
#endif  /* CONFIG_KERNEL_DEBUG */

	return _is_prio_higher(_get_highest_ready_prio(), _current->base.prio);
   12f94:	6892      	ldr	r2, [r2, #8]
   12f96:	2900      	cmp	r1, #0
   12f98:	fa91 f3a1 	rbit	r3, r1
   12f9c:	f992 000a 	ldrsb.w	r0, [r2, #10]
   12fa0:	fab3 f383 	clz	r3, r3
   12fa4:	bf08      	it	eq
   12fa6:	f04f 33ff 	moveq.w	r3, #4294967295
   12faa:	3b10      	subs	r3, #16
#else
	return 0;
#endif
}
   12fac:	4298      	cmp	r0, r3
   12fae:	bfd4      	ite	le
   12fb0:	2000      	movle	r0, #0
   12fb2:	2001      	movgt	r0, #1
   12fb4:	4770      	bx	lr
   12fb6:	bf00      	nop
   12fb8:	20001fe4 	.word	0x20001fe4

00012fbc <_reschedule_threads>:
 * Checks if current thread must be context-switched out. The caller must
 * already know that the execution context is a thread.
 */
static inline int _must_switch_threads(void)
{
	return _is_preempt(_current) && __must_switch_threads();
   12fbc:	4b0a      	ldr	r3, [pc, #40]	; (12fe8 <_reschedule_threads+0x2c>)
   12fbe:	689b      	ldr	r3, [r3, #8]
   12fc0:	895b      	ldrh	r3, [r3, #10]
   12fc2:	2b7f      	cmp	r3, #127	; 0x7f

/* reschedule threads if the scheduler is not locked */
/* not callable from ISR */
/* must be called with interrupts locked */
void _reschedule_threads(int key)
{
   12fc4:	b510      	push	{r4, lr}
   12fc6:	4604      	mov	r4, r0
   12fc8:	d802      	bhi.n	12fd0 <_reschedule_threads+0x14>
   12fca:	f7ff ffe1 	bl	12f90 <__must_switch_threads>
   12fce:	b910      	cbnz	r0, 12fd6 <_reschedule_threads+0x1a>
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   12fd0:	f384 8811 	msr	BASEPRI, r4
   12fd4:	bd10      	pop	{r4, pc}
	if (!remaining || (_time_slice_duration < remaining)) {
		_set_time(_time_slice_duration);
	}
#endif
	/* Restart time slice count at new thread switch */
	_time_slice_elapsed = 0;
   12fd6:	4b05      	ldr	r3, [pc, #20]	; (12fec <_reschedule_threads+0x30>)
   12fd8:	2200      	movs	r2, #0
   12fda:	4620      	mov	r0, r4
		irq_unlock(key);
	}
#else
	irq_unlock(key);
#endif
}
   12fdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (!remaining || (_time_slice_duration < remaining)) {
		_set_time(_time_slice_duration);
	}
#endif
	/* Restart time slice count at new thread switch */
	_time_slice_elapsed = 0;
   12fe0:	601a      	str	r2, [r3, #0]
   12fe2:	f7fe bf51 	b.w	11e88 <__swap>
   12fe6:	bf00      	nop
   12fe8:	20001fe4 	.word	0x20001fe4
   12fec:	2000222c 	.word	0x2000222c

00012ff0 <k_sched_unlock>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M)
	unsigned int tmp;

	__asm__ volatile(
   12ff0:	f04f 0320 	mov.w	r3, #32
   12ff4:	f3ef 8011 	mrs	r0, BASEPRI
   12ff8:	f383 8811 	msr	BASEPRI, r3

	int key = irq_lock();

	/* compiler_barrier() not needed, comes from irq_lock() */

	++_current->base.sched_locked;
   12ffc:	4b03      	ldr	r3, [pc, #12]	; (1300c <k_sched_unlock+0x1c>)
   12ffe:	689a      	ldr	r2, [r3, #8]
   13000:	7ad3      	ldrb	r3, [r2, #11]
   13002:	3301      	adds	r3, #1
   13004:	72d3      	strb	r3, [r2, #11]

	K_DEBUG("scheduler unlocked (%p:%d)\n",
		_current, _current->base.sched_locked);

	_reschedule_threads(key);
   13006:	f7ff bfd9 	b.w	12fbc <_reschedule_threads>
   1300a:	bf00      	nop
   1300c:	20001fe4 	.word	0x20001fe4

00013010 <_move_thread_to_end_of_prio_q>:
}

/* find out the ready queue array index for a given prio */
static inline int _get_ready_q_q_index(int prio)
{
	return prio + _NUM_COOP_PRIO;
   13010:	f990 300a 	ldrsb.w	r3, [r0, #10]
 */
void _move_thread_to_end_of_prio_q(struct k_thread *thread)
{
#ifdef CONFIG_MULTITHREADING
	int q_index = _get_ready_q_q_index(thread->base.prio);
	sys_dlist_t *q = &_ready_q.q[q_index];
   13014:	4a11      	ldr	r2, [pc, #68]	; (1305c <_move_thread_to_end_of_prio_q+0x4c>)
   13016:	3314      	adds	r3, #20
   13018:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 * This function, along with _add_thread_to_ready_q() and
 * _remove_thread_from_ready_q(), are the _only_ places where a thread is
 * taken off or put on the ready queue.
 */
void _move_thread_to_end_of_prio_q(struct k_thread *thread)
{
   1301c:	b510      	push	{r4, lr}
#ifdef CONFIG_MULTITHREADING
	int q_index = _get_ready_q_q_index(thread->base.prio);
	sys_dlist_t *q = &_ready_q.q[q_index];

	if (sys_dlist_is_tail(q, &thread->base.k_q_node)) {
   1301e:	6859      	ldr	r1, [r3, #4]
   13020:	4288      	cmp	r0, r1
   13022:	d01a      	beq.n	1305a <_move_thread_to_end_of_prio_q+0x4a>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   13024:	6841      	ldr	r1, [r0, #4]
   13026:	6804      	ldr	r4, [r0, #0]
   13028:	600c      	str	r4, [r1, #0]
	node->next->prev = node->prev;
   1302a:	6804      	ldr	r4, [r0, #0]
   1302c:	6061      	str	r1, [r4, #4]
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
   1302e:	6003      	str	r3, [r0, #0]
	node->prev = list->tail;
   13030:	6859      	ldr	r1, [r3, #4]
   13032:	6041      	str	r1, [r0, #4]

	list->tail->next = node;
   13034:	6859      	ldr	r1, [r3, #4]
   13036:	6008      	str	r0, [r1, #0]
	list->tail = node;
   13038:	6058      	str	r0, [r3, #4]
	sys_dlist_remove(&thread->base.k_q_node);
	sys_dlist_append(q, &thread->base.k_q_node);

	struct k_thread **cache = &_ready_q.cache;

	*cache = *cache == thread ? _get_ready_q_head() : *cache;
   1303a:	6993      	ldr	r3, [r2, #24]
   1303c:	4298      	cmp	r0, r3
   1303e:	d10b      	bne.n	13058 <_move_thread_to_end_of_prio_q+0x48>
 * @return least significant bit set, 0 if @a op is 0
 */

static ALWAYS_INLINE unsigned int find_lsb_set(u32_t op)
{
	return __builtin_ffs(op);
   13040:	69d1      	ldr	r1, [r2, #28]
   13042:	fa91 f3a1 	rbit	r3, r1
   13046:	2900      	cmp	r1, #0
   13048:	fab3 f383 	clz	r3, r3
   1304c:	bf08      	it	eq
   1304e:	f04f 33ff 	moveq.w	r3, #4294967295
 */
static struct k_thread *_get_ready_q_head(void)
{
	int prio = _get_highest_ready_prio();
	int q_index = _get_ready_q_q_index(prio);
	sys_dlist_t *list = &_ready_q.q[q_index];
   13052:	3304      	adds	r3, #4
   13054:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
	sys_dlist_remove(&thread->base.k_q_node);
	sys_dlist_append(q, &thread->base.k_q_node);

	struct k_thread **cache = &_ready_q.cache;

	*cache = *cache == thread ? _get_ready_q_head() : *cache;
   13058:	6193      	str	r3, [r2, #24]
   1305a:	bd10      	pop	{r4, pc}
   1305c:	20001fe4 	.word	0x20001fe4

00013060 <k_yield>:
#endif
}

void k_yield(void)
{
   13060:	b538      	push	{r3, r4, r5, lr}
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M)
	unsigned int tmp;

	__asm__ volatile(
   13062:	f04f 0320 	mov.w	r3, #32
   13066:	f3ef 8511 	mrs	r5, BASEPRI
   1306a:	f383 8811 	msr	BASEPRI, r3
	__ASSERT(!_is_in_isr(), "");

	int key = irq_lock();

	_move_thread_to_end_of_prio_q(_current);
   1306e:	4c09      	ldr	r4, [pc, #36]	; (13094 <k_yield+0x34>)
   13070:	68a0      	ldr	r0, [r4, #8]
   13072:	f7ff ffcd 	bl	13010 <_move_thread_to_end_of_prio_q>

	if (_current == _get_next_ready_thread()) {
   13076:	68a2      	ldr	r2, [r4, #8]
   13078:	69a3      	ldr	r3, [r4, #24]
   1307a:	429a      	cmp	r2, r3
   1307c:	d102      	bne.n	13084 <k_yield+0x24>
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1307e:	f385 8811 	msr	BASEPRI, r5
   13082:	bd38      	pop	{r3, r4, r5, pc}
	if (!remaining || (_time_slice_duration < remaining)) {
		_set_time(_time_slice_duration);
	}
#endif
	/* Restart time slice count at new thread switch */
	_time_slice_elapsed = 0;
   13084:	4b04      	ldr	r3, [pc, #16]	; (13098 <k_yield+0x38>)
   13086:	2200      	movs	r2, #0
   13088:	601a      	str	r2, [r3, #0]
   1308a:	4628      	mov	r0, r5
		_check_stack_sentinel();
#endif
	} else {
		_Swap(key);
	}
}
   1308c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   13090:	f7fe befa 	b.w	11e88 <__swap>
   13094:	20001fe4 	.word	0x20001fe4
   13098:	2000222c 	.word	0x2000222c

0001309c <k_sleep>:

void k_sleep(s32_t duration)
{
   1309c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT(duration != K_FOREVER, "");

	K_DEBUG("thread %p for %d ns\n", _current, duration);

	/* wait of 0 ms is treated as a 'yield' */
	if (duration == 0) {
   1309e:	b910      	cbnz	r0, 130a6 <k_sleep+0xa>
		k_yield();
   130a0:	f7ff ffde 	bl	13060 <k_yield>
		return;
   130a4:	e01c      	b.n	130e0 <k_sleep+0x44>
	}

	ticks = _TICK_ALIGN + _ms_to_ticks(duration);
   130a6:	230a      	movs	r3, #10
   130a8:	3009      	adds	r0, #9
   130aa:	fbb0 f0f3 	udiv	r0, r0, r3
   130ae:	3001      	adds	r0, #1
   130b0:	9001      	str	r0, [sp, #4]
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M)
	unsigned int tmp;

	__asm__ volatile(
   130b2:	f04f 0320 	mov.w	r3, #32
   130b6:	f3ef 8511 	mrs	r5, BASEPRI
   130ba:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	_remove_thread_from_ready_q(_current);
   130be:	4c09      	ldr	r4, [pc, #36]	; (130e4 <k_sleep+0x48>)
   130c0:	68a0      	ldr	r0, [r4, #8]
   130c2:	f7ff fef1 	bl	12ea8 <_remove_thread_from_ready_q>
	_add_thread_timeout(_current, NULL, ticks);
   130c6:	68a0      	ldr	r0, [r4, #8]
   130c8:	9b01      	ldr	r3, [sp, #4]
   130ca:	2200      	movs	r2, #0
   130cc:	f100 0110 	add.w	r1, r0, #16
   130d0:	f7ff fe96 	bl	12e00 <_add_timeout>
	if (!remaining || (_time_slice_duration < remaining)) {
		_set_time(_time_slice_duration);
	}
#endif
	/* Restart time slice count at new thread switch */
	_time_slice_elapsed = 0;
   130d4:	4b04      	ldr	r3, [pc, #16]	; (130e8 <k_sleep+0x4c>)
   130d6:	2200      	movs	r2, #0
   130d8:	4628      	mov	r0, r5
   130da:	601a      	str	r2, [r3, #0]
   130dc:	f7fe fed4 	bl	11e88 <__swap>
	_remove_thread_from_ready_q(_current);
	_add_thread_timeout(_current, NULL, ticks);

	_Swap(key);
#endif
}
   130e0:	b003      	add	sp, #12
   130e2:	bd30      	pop	{r4, r5, pc}
   130e4:	20001fe4 	.word	0x20001fe4
   130e8:	2000222c 	.word	0x2000222c

000130ec <k_current_get>:
}

k_tid_t k_current_get(void)
{
	return _current;
}
   130ec:	4b01      	ldr	r3, [pc, #4]	; (130f4 <k_current_get+0x8>)
   130ee:	6898      	ldr	r0, [r3, #8]
   130f0:	4770      	bx	lr
   130f2:	bf00      	nop
   130f4:	20001fe4 	.word	0x20001fe4

000130f8 <_is_thread_time_slicing>:
	 * Should not be the idle thread
	 * Priority should be higher than time slice priority ceiling
	 * There should be multiple threads active with same priority
	 */

	if (!(_time_slice_duration > 0) || (_is_idle_thread_ptr(thread))
   130f8:	4b0d      	ldr	r3, [pc, #52]	; (13130 <_is_thread_time_slicing+0x38>)
   130fa:	681b      	ldr	r3, [r3, #0]
   130fc:	2b00      	cmp	r3, #0
   130fe:	dd14      	ble.n	1312a <_is_thread_time_slicing+0x32>
	return entry_point == idle;
}

static inline int _is_idle_thread_ptr(k_tid_t thread)
{
	return thread == _idle_thread;
   13100:	4b0c      	ldr	r3, [pc, #48]	; (13134 <_is_thread_time_slicing+0x3c>)
   13102:	681b      	ldr	r3, [r3, #0]
   13104:	4298      	cmp	r0, r3
   13106:	d010      	beq.n	1312a <_is_thread_time_slicing+0x32>
	    || _is_prio_higher(thread->base.prio, _time_slice_prio_ceiling)) {
   13108:	4a0b      	ldr	r2, [pc, #44]	; (13138 <_is_thread_time_slicing+0x40>)
   1310a:	f990 300a 	ldrsb.w	r3, [r0, #10]
   1310e:	6812      	ldr	r2, [r2, #0]
   13110:	4293      	cmp	r3, r2
   13112:	db0a      	blt.n	1312a <_is_thread_time_slicing+0x32>
 * @return 1 if multiple nodes, 0 otherwise
 */

static inline int sys_dlist_has_multiple_nodes(sys_dlist_t *list)
{
	return list->head != list->tail;
   13114:	4a09      	ldr	r2, [pc, #36]	; (1313c <_is_thread_time_slicing+0x44>)
   13116:	3314      	adds	r3, #20
   13118:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
   1311c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
   13120:	6848      	ldr	r0, [r1, #4]
   13122:	1a18      	subs	r0, r3, r0
   13124:	bf18      	it	ne
   13126:	2001      	movne	r0, #1
	}

	int q_index = _get_ready_q_q_index(thread->base.prio);
	sys_dlist_t *q = &_ready_q.q[q_index];

	return sys_dlist_has_multiple_nodes(q);
   13128:	4770      	bx	lr
	 * There should be multiple threads active with same priority
	 */

	if (!(_time_slice_duration > 0) || (_is_idle_thread_ptr(thread))
	    || _is_prio_higher(thread->base.prio, _time_slice_prio_ceiling)) {
		return 0;
   1312a:	2000      	movs	r0, #0

	int q_index = _get_ready_q_q_index(thread->base.prio);
	sys_dlist_t *q = &_ready_q.q[q_index];

	return sys_dlist_has_multiple_nodes(q);
}
   1312c:	4770      	bx	lr
   1312e:	bf00      	nop
   13130:	20002108 	.word	0x20002108
   13134:	000170d4 	.word	0x000170d4
   13138:	20002104 	.word	0x20002104
   1313c:	20001fe4 	.word	0x20001fe4

00013140 <_update_time_slice_before_swap>:
	if (!remaining || (_time_slice_duration < remaining)) {
		_set_time(_time_slice_duration);
	}
#endif
	/* Restart time slice count at new thread switch */
	_time_slice_elapsed = 0;
   13140:	4b01      	ldr	r3, [pc, #4]	; (13148 <_update_time_slice_before_swap+0x8>)
   13142:	2200      	movs	r2, #0
   13144:	601a      	str	r2, [r3, #0]
   13146:	4770      	bx	lr
   13148:	2000222c 	.word	0x2000222c

0001314c <_ready_thread>:
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1314c:	7a42      	ldrb	r2, [r0, #9]
   1314e:	f022 0104 	bic.w	r1, r2, #4
}

/* check if a thread is ready */
static inline int _is_thread_ready(struct k_thread *thread)
{
	return !(_is_thread_prevented_from_running(thread) ||
   13152:	f012 0f1b 	tst.w	r2, #27
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   13156:	7241      	strb	r1, [r0, #9]
}

/* check if a thread is ready */
static inline int _is_thread_ready(struct k_thread *thread)
{
	return !(_is_thread_prevented_from_running(thread) ||
   13158:	d104      	bne.n	13164 <_ready_thread+0x18>
   1315a:	6a03      	ldr	r3, [r0, #32]
   1315c:	3301      	adds	r3, #1
   1315e:	d101      	bne.n	13164 <_ready_thread+0x18>

	/* needed to handle the start-with-delay case */
	_mark_thread_as_started(thread);

	if (_is_thread_ready(thread)) {
		_add_thread_to_ready_q(thread);
   13160:	f7ff be7a 	b.w	12e58 <_add_thread_to_ready_q>
   13164:	4770      	bx	lr
	...

00013168 <_unpend_first_thread>:
_find_first_thread_to_unpend(_wait_q_t *wait_q, struct k_thread *from)
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	extern volatile int _handling_timeouts;

	if (_handling_timeouts) {
   13168:	4a10      	ldr	r2, [pc, #64]	; (131ac <_unpend_first_thread+0x44>)
   1316a:	6812      	ldr	r2, [r2, #0]
}

/* unpend the first thread from a wait queue */
/* must be called with interrupts locked */
static inline struct k_thread *_unpend_first_thread(_wait_q_t *wait_q)
{
   1316c:	4603      	mov	r3, r0
   1316e:	6800      	ldr	r0, [r0, #0]
_find_first_thread_to_unpend(_wait_q_t *wait_q, struct k_thread *from)
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	extern volatile int _handling_timeouts;

	if (_handling_timeouts) {
   13170:	b15a      	cbz	r2, 1318a <_unpend_first_thread+0x22>
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13172:	4283      	cmp	r3, r0
   13174:	d016      	beq.n	131a4 <_unpend_first_thread+0x3c>
		sys_dlist_t *q = (sys_dlist_t *)wait_q;
		sys_dnode_t *cur = from ? &from->base.k_q_node : NULL;

		/* skip threads that have an expired timeout */
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
   13176:	b138      	cbz	r0, 13188 <_unpend_first_thread+0x20>
			struct k_thread *thread = (struct k_thread *)cur;

			if (_is_thread_timeout_expired(thread)) {
   13178:	6a02      	ldr	r2, [r0, #32]
   1317a:	3202      	adds	r2, #2
   1317c:	d108      	bne.n	13190 <_unpend_first_thread+0x28>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   1317e:	685a      	ldr	r2, [r3, #4]
   13180:	4282      	cmp	r2, r0
   13182:	d00f      	beq.n	131a4 <_unpend_first_thread+0x3c>
   13184:	6800      	ldr	r0, [r0, #0]
   13186:	e7f6      	b.n	13176 <_unpend_first_thread+0xe>
   13188:	4770      	bx	lr
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1318a:	4283      	cmp	r3, r0
   1318c:	d00c      	beq.n	131a8 <_unpend_first_thread+0x40>
/* must be called with interrupts locked */
static inline struct k_thread *_unpend_first_thread(_wait_q_t *wait_q)
{
	struct k_thread *thread = _find_first_thread_to_unpend(wait_q, NULL);

	if (thread) {
   1318e:	b160      	cbz	r0, 131aa <_unpend_first_thread+0x42>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   13190:	e890 000c 	ldmia.w	r0, {r2, r3}
   13194:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   13196:	6802      	ldr	r2, [r0, #0]
   13198:	6053      	str	r3, [r2, #4]
}

/* mark a thread as not pending in its TCS */
static inline void _mark_thread_as_not_pending(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PENDING;
   1319a:	7a43      	ldrb	r3, [r0, #9]
   1319c:	f023 0302 	bic.w	r3, r3, #2
   131a0:	7243      	strb	r3, [r0, #9]
   131a2:	4770      	bx	lr
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   131a4:	2000      	movs	r0, #0
   131a6:	4770      	bx	lr
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   131a8:	4610      	mov	r0, r2
	if (thread) {
		_unpend_thread(thread);
	}

	return thread;
}
   131aa:	4770      	bx	lr
   131ac:	20002228 	.word	0x20002228

000131b0 <_abort_timeout>:
	}
}

/* returns _INACTIVE if the timer is not active */
static inline int _abort_timeout(struct _timeout *timeout)
{
   131b0:	4603      	mov	r3, r0
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   131b2:	6900      	ldr	r0, [r0, #16]
   131b4:	1c42      	adds	r2, r0, #1
   131b6:	d010      	beq.n	131da <_abort_timeout+0x2a>
   131b8:	4a08      	ldr	r2, [pc, #32]	; (131dc <_abort_timeout+0x2c>)
		return _INACTIVE;
	}

	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   131ba:	6912      	ldr	r2, [r2, #16]
   131bc:	4293      	cmp	r3, r2
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   131be:	bf1f      	itttt	ne
   131c0:	681a      	ldrne	r2, [r3, #0]
		sys_dnode_t *next_node =
			sys_dlist_peek_next(&_timeout_q, &timeout->node);
		struct _timeout *next = (struct _timeout *)next_node;

		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   131c2:	6911      	ldrne	r1, [r2, #16]
   131c4:	1840      	addne	r0, r0, r1
   131c6:	6110      	strne	r0, [r2, #16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   131c8:	e893 0006 	ldmia.w	r3, {r1, r2}
   131cc:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
   131ce:	6819      	ldr	r1, [r3, #0]
   131d0:	604a      	str	r2, [r1, #4]
	}
	sys_dlist_remove(&timeout->node);
	timeout->delta_ticks_from_prev = _INACTIVE;
   131d2:	f04f 32ff 	mov.w	r2, #4294967295
   131d6:	611a      	str	r2, [r3, #16]

	return 0;
   131d8:	2000      	movs	r0, #0
}
   131da:	4770      	bx	lr
   131dc:	20001fe4 	.word	0x20001fe4

000131e0 <k_sem_init>:

	sem->count = initial_count;
	sem->limit = limit;
	sys_dlist_init(&sem->wait_q);

	_INIT_OBJ_POLL_EVENT(sem);
   131e0:	2300      	movs	r3, #0
void k_sem_init(struct k_sem *sem, unsigned int initial_count,
		unsigned int limit)
{
	__ASSERT(limit != 0, "limit cannot be zero");

	sem->count = initial_count;
   131e2:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
   131e4:	60c2      	str	r2, [r0, #12]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   131e6:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   131e8:	6040      	str	r0, [r0, #4]
	sys_dlist_init(&sem->wait_q);

	_INIT_OBJ_POLL_EVENT(sem);
   131ea:	6103      	str	r3, [r0, #16]
   131ec:	4770      	bx	lr
	...

000131f0 <k_sem_give>:
	_ready_thread(thread);
	_set_thread_return_value(thread, 0);
}

void k_sem_give(struct k_sem *sem)
{
   131f0:	b570      	push	{r4, r5, r6, lr}
   131f2:	4604      	mov	r4, r0
   131f4:	f04f 0320 	mov.w	r3, #32
   131f8:	f3ef 8611 	mrs	r6, BASEPRI
   131fc:	f383 8811 	msr	BASEPRI, r3
}

/* returns 1 if _Swap() will need to be invoked, 0 otherwise */
static int do_sem_give(struct k_sem *sem)
{
	struct k_thread *thread = _unpend_first_thread(&sem->wait_q);
   13200:	f7ff ffb2 	bl	13168 <_unpend_first_thread>

	if (!thread) {
   13204:	4605      	mov	r5, r0
   13206:	b9a0      	cbnz	r0, 13232 <k_sem_give+0x42>
#endif
}

static inline void increment_count_up_to_limit(struct k_sem *sem)
{
	sem->count += (sem->count != sem->limit);
   13208:	68a3      	ldr	r3, [r4, #8]
   1320a:	68e2      	ldr	r2, [r4, #12]
   1320c:	429a      	cmp	r2, r3
   1320e:	bf18      	it	ne
   13210:	3301      	addne	r3, #1
   13212:	60a3      	str	r3, [r4, #8]
{
#ifdef CONFIG_POLL
	u32_t state = K_POLL_STATE_SEM_AVAILABLE;

	return sem->poll_event ?
	       _handle_obj_poll_event(&sem->poll_event, state) : 0;
   13214:	6923      	ldr	r3, [r4, #16]
   13216:	b32b      	cbz	r3, 13264 <k_sem_give+0x74>
   13218:	2104      	movs	r1, #4
   1321a:	f104 0010 	add.w	r0, r4, #16
   1321e:	f7ff fc95 	bl	12b4c <_handle_obj_poll_event>
{
	unsigned int key;

	key = irq_lock();

	if (do_sem_give(sem)) {
   13222:	b1f8      	cbz	r0, 13264 <k_sem_give+0x74>

#ifdef CONFIG_STACK_SENTINEL
	_check_stack_sentinel();
#endif
#ifdef CONFIG_TIMESLICING
	_update_time_slice_before_swap();
   13224:	f7ff ff8c 	bl	13140 <_update_time_slice_before_swap>
#endif

	return __swap(key);
   13228:	4630      	mov	r0, r6
		_Swap(key);
	} else {
		irq_unlock(key);
	}
}
   1322a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1322e:	f7fe be2b 	b.w	11e88 <__swap>

/* returns _INACTIVE if the timer has already expired */
static inline int _abort_thread_timeout(struct k_thread *thread)
{
	return _abort_timeout(&thread->base.timeout);
   13232:	3010      	adds	r0, #16
   13234:	f7ff ffbc 	bl	131b0 <_abort_timeout>
	if (!thread) {
		increment_count_up_to_limit(sem);
		return handle_poll_event(sem);
	}
	(void)_abort_thread_timeout(thread);
	_ready_thread(thread);
   13238:	4628      	mov	r0, r5
   1323a:	f7ff ff87 	bl	1314c <_ready_thread>
   1323e:	2300      	movs	r3, #0
   13240:	666b      	str	r3, [r5, #100]	; 0x64
   13242:	f3ef 8305 	mrs	r3, IPSR
   13246:	2b0d      	cmp	r3, #13
   13248:	d80c      	bhi.n	13264 <k_sem_give+0x74>
   1324a:	b11b      	cbz	r3, 13254 <k_sem_give+0x64>
   1324c:	4b07      	ldr	r3, [pc, #28]	; (1326c <k_sem_give+0x7c>)
   1324e:	685b      	ldr	r3, [r3, #4]
   13250:	051b      	lsls	r3, r3, #20
   13252:	d507      	bpl.n	13264 <k_sem_give+0x74>
 * Checks if current thread must be context-switched out. The caller must
 * already know that the execution context is a thread.
 */
static inline int _must_switch_threads(void)
{
	return _is_preempt(_current) && __must_switch_threads();
   13254:	4b06      	ldr	r3, [pc, #24]	; (13270 <k_sem_give+0x80>)
   13256:	689b      	ldr	r3, [r3, #8]
   13258:	895b      	ldrh	r3, [r3, #10]
   1325a:	2b7f      	cmp	r3, #127	; 0x7f
   1325c:	d802      	bhi.n	13264 <k_sem_give+0x74>
   1325e:	f7ff fe97 	bl	12f90 <__must_switch_threads>
   13262:	e7de      	b.n	13222 <k_sem_give+0x32>
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13264:	f386 8811 	msr	BASEPRI, r6
   13268:	bd70      	pop	{r4, r5, r6, pc}
   1326a:	bf00      	nop
   1326c:	e000ed00 	.word	0xe000ed00
   13270:	20001fe4 	.word	0x20001fe4

00013274 <k_sem_take>:
		irq_unlock(key);
	}
}

int k_sem_take(struct k_sem *sem, s32_t timeout)
{
   13274:	b538      	push	{r3, r4, r5, lr}
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M)
	unsigned int tmp;

	__asm__ volatile(
   13276:	f04f 0320 	mov.w	r3, #32
   1327a:	f3ef 8411 	mrs	r4, BASEPRI
   1327e:	f383 8811 	msr	BASEPRI, r3
	__ASSERT(!_is_in_isr() || timeout == K_NO_WAIT, "");

	unsigned int key = irq_lock();

	if (likely(sem->count > 0)) {
   13282:	6883      	ldr	r3, [r0, #8]
   13284:	b12b      	cbz	r3, 13292 <k_sem_take+0x1e>
		sem->count--;
   13286:	3b01      	subs	r3, #1
   13288:	6083      	str	r3, [r0, #8]
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1328a:	f384 8811 	msr	BASEPRI, r4
		irq_unlock(key);
		return 0;
   1328e:	2000      	movs	r0, #0
   13290:	bd38      	pop	{r3, r4, r5, pc}
	}

	if (timeout == K_NO_WAIT) {
   13292:	b921      	cbnz	r1, 1329e <k_sem_take+0x2a>
   13294:	f384 8811 	msr	BASEPRI, r4
		irq_unlock(key);
		return -EBUSY;
   13298:	f06f 000f 	mvn.w	r0, #15
   1329c:	bd38      	pop	{r3, r4, r5, pc}
	}

	_pend_current_thread(&sem->wait_q, timeout);
   1329e:	f7ff fe67 	bl	12f70 <_pend_current_thread>

#ifdef CONFIG_STACK_SENTINEL
	_check_stack_sentinel();
#endif
#ifdef CONFIG_TIMESLICING
	_update_time_slice_before_swap();
   132a2:	f7ff ff4d 	bl	13140 <_update_time_slice_before_swap>
#endif

	return __swap(key);
   132a6:	4620      	mov	r0, r4

	return _Swap(key);
}
   132a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   132ac:	f7fe bdec 	b.w	11e88 <__swap>

000132b0 <_tick_get>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M)
	unsigned int tmp;

	__asm__ volatile(
   132b0:	f04f 0220 	mov.w	r2, #32
   132b4:	f3ef 8311 	mrs	r3, BASEPRI
   132b8:	f382 8811 	msr	BASEPRI, r2
	unsigned int imask = irq_lock();

#ifdef CONFIG_TICKLESS_KERNEL
	tmp_sys_clock_tick_count = _get_elapsed_clock_time();
#else
	tmp_sys_clock_tick_count = _sys_clock_tick_count;
   132bc:	4a02      	ldr	r2, [pc, #8]	; (132c8 <_tick_get+0x18>)
   132be:	e9d2 0100 	ldrd	r0, r1, [r2]
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   132c2:	f383 8811 	msr	BASEPRI, r3
#endif
	irq_unlock(imask);
	return tmp_sys_clock_tick_count;
}
   132c6:	4770      	bx	lr
   132c8:	20002230 	.word	0x20002230

000132cc <k_uptime_get>:
FUNC_ALIAS(_tick_get, sys_tick_get, s64_t);

s64_t k_uptime_get(void)
{
   132cc:	b510      	push	{r4, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	__ASSERT(_sys_clock_always_on,
		 "Call k_enable_sys_clock_always_on to use clock API");
#endif
	return __ticks_to_ms(_tick_get());
   132ce:	f7ff ffef 	bl	132b0 <_tick_get>
   132d2:	240a      	movs	r4, #10
   132d4:	fba0 2304 	umull	r2, r3, r0, r4
   132d8:	fb04 3301 	mla	r3, r4, r1, r3
}
   132dc:	4610      	mov	r0, r2
   132de:	4619      	mov	r1, r3
   132e0:	bd10      	pop	{r4, pc}
	...

000132e4 <_nano_sys_clock_tick_announce>:
 * timers that have expired and wake up the threads pending on them.
 *
 * @return N/A
 */
void _nano_sys_clock_tick_announce(s32_t ticks)
{
   132e4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   132e8:	4605      	mov	r5, r0
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M)
	unsigned int tmp;

	__asm__ volatile(
   132ea:	f04f 0320 	mov.w	r3, #32
   132ee:	f3ef 8011 	mrs	r0, BASEPRI
   132f2:	f383 8811 	msr	BASEPRI, r3

	K_DEBUG("ticks: %d\n", ticks);

	/* 64-bit value, ensure atomic access with irq lock */
	key = irq_lock();
	_sys_clock_tick_count += ticks;
   132f6:	495b      	ldr	r1, [pc, #364]	; (13464 <_nano_sys_clock_tick_announce+0x180>)
   132f8:	e9d1 6700 	ldrd	r6, r7, [r1]
   132fc:	1972      	adds	r2, r6, r5
   132fe:	eb47 73e5 	adc.w	r3, r7, r5, asr #31
   13302:	e9c1 2300 	strd	r2, r3, [r1]
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13306:	f380 8811 	msr	BASEPRI, r0
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   1330a:	4668      	mov	r0, sp
   1330c:	f8cd d000 	str.w	sp, [sp]
	list->tail = (sys_dnode_t *)list;
   13310:	f8cd d004 	str.w	sp, [sp, #4]
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M)
	unsigned int tmp;

	__asm__ volatile(
   13314:	f04f 0320 	mov.w	r3, #32
   13318:	f3ef 8411 	mrs	r4, BASEPRI
   1331c:	f383 8811 	msr	BASEPRI, r3
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   13320:	4e51      	ldr	r6, [pc, #324]	; (13468 <_nano_sys_clock_tick_announce+0x184>)
   13322:	4632      	mov	r2, r6
   13324:	4621      	mov	r1, r4
   13326:	f852 3f0c 	ldr.w	r3, [r2, #12]!
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1332a:	4293      	cmp	r3, r2
   1332c:	4694      	mov	ip, r2
   1332e:	d000      	beq.n	13332 <_nano_sys_clock_tick_announce+0x4e>
		(struct _timeout *)sys_dlist_peek_head(&_timeout_q);

	K_DEBUG("head: %p, delta: %d\n",
		head, head ? head->delta_ticks_from_prev : -2112);

	if (!head) {
   13330:	b913      	cbnz	r3, 13338 <_nano_sys_clock_tick_announce+0x54>
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13332:	f384 8811 	msr	BASEPRI, r4
   13336:	e071      	b.n	1341c <_nano_sys_clock_tick_announce+0x138>
		irq_unlock(key);
		return;
	}

	head->delta_ticks_from_prev -= ticks;
   13338:	691c      	ldr	r4, [r3, #16]
	 * prohibited.
	 */
	sys_dnode_t *next = &head->node;
	struct _timeout *timeout = (struct _timeout *)next;

	_handling_timeouts = 1;
   1333a:	4f4c      	ldr	r7, [pc, #304]	; (1346c <_nano_sys_clock_tick_announce+0x188>)
	if (!head) {
		irq_unlock(key);
		return;
	}

	head->delta_ticks_from_prev -= ticks;
   1333c:	1b64      	subs	r4, r4, r5
   1333e:	611c      	str	r4, [r3, #16]
	 * prohibited.
	 */
	sys_dnode_t *next = &head->node;
	struct _timeout *timeout = (struct _timeout *)next;

	_handling_timeouts = 1;
   13340:	2401      	movs	r4, #1
   13342:	603c      	str	r4, [r7, #0]
		 * expired queue, they end up being processed in the same order
		 * they were added, time-wise.
		 */
		sys_dlist_prepend(&expired, next);

		timeout->delta_ticks_from_prev = _EXPIRED;
   13344:	f06f 0401 	mvn.w	r4, #1
	sys_dnode_t *next = &head->node;
	struct _timeout *timeout = (struct _timeout *)next;

	_handling_timeouts = 1;

	while (timeout && timeout->delta_ticks_from_prev == 0) {
   13348:	691a      	ldr	r2, [r3, #16]
   1334a:	b9d2      	cbnz	r2, 13382 <_nano_sys_clock_tick_announce+0x9e>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   1334c:	e893 4004 	ldmia.w	r3, {r2, lr}
   13350:	f8ce 2000 	str.w	r2, [lr]
	node->next->prev = node->prev;
   13354:	681a      	ldr	r2, [r3, #0]
   13356:	f8c2 e004 	str.w	lr, [r2, #4]
 * @return N/A
 */

static inline void sys_dlist_prepend(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list->head;
   1335a:	9a00      	ldr	r2, [sp, #0]
   1335c:	601a      	str	r2, [r3, #0]
	node->prev = list;

	list->head->prev = node;
   1335e:	9a00      	ldr	r2, [sp, #0]
 */

static inline void sys_dlist_prepend(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list->head;
	node->prev = list;
   13360:	6058      	str	r0, [r3, #4]

	list->head->prev = node;
	list->head = node;
   13362:	9300      	str	r3, [sp, #0]
static inline void sys_dlist_prepend(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list->head;
	node->prev = list;

	list->head->prev = node;
   13364:	6053      	str	r3, [r2, #4]
		 * expired queue, they end up being processed in the same order
		 * they were added, time-wise.
		 */
		sys_dlist_prepend(&expired, next);

		timeout->delta_ticks_from_prev = _EXPIRED;
   13366:	611c      	str	r4, [r3, #16]
   13368:	f381 8811 	msr	BASEPRI, r1
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M)
	unsigned int tmp;

	__asm__ volatile(
   1336c:	f04f 0320 	mov.w	r3, #32
   13370:	f3ef 8111 	mrs	r1, BASEPRI
   13374:	f383 8811 	msr	BASEPRI, r3
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   13378:	68f3      	ldr	r3, [r6, #12]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1337a:	4563      	cmp	r3, ip
   1337c:	d001      	beq.n	13382 <_nano_sys_clock_tick_announce+0x9e>
	sys_dnode_t *next = &head->node;
	struct _timeout *timeout = (struct _timeout *)next;

	_handling_timeouts = 1;

	while (timeout && timeout->delta_ticks_from_prev == 0) {
   1337e:	2b00      	cmp	r3, #0
   13380:	d1e2      	bne.n	13348 <_nano_sys_clock_tick_announce+0x64>
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13382:	f381 8811 	msr	BASEPRI, r1
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   13386:	9b00      	ldr	r3, [sp, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13388:	4283      	cmp	r3, r0
   1338a:	d102      	bne.n	13392 <_nano_sys_clock_tick_announce+0xae>

	irq_unlock(key);

	_handle_expired_timeouts(&expired);

	_handling_timeouts = 0;
   1338c:	2300      	movs	r3, #0
   1338e:	603b      	str	r3, [r7, #0]
   13390:	e044      	b.n	1341c <_nano_sys_clock_tick_announce+0x138>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   13392:	2b00      	cmp	r3, #0
   13394:	d0fa      	beq.n	1338c <_nano_sys_clock_tick_announce+0xa8>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   13396:	9a01      	ldr	r2, [sp, #4]
   13398:	4293      	cmp	r3, r2
   1339a:	bf14      	ite	ne
   1339c:	681c      	ldrne	r4, [r3, #0]
   1339e:	2400      	moveq	r4, #0
static inline void _handle_one_expired_timeout(struct _timeout *timeout)
{
	struct k_thread *thread = timeout->thread;
	unsigned int key = irq_lock();

	timeout->delta_ticks_from_prev = _INACTIVE;
   133a0:	f04f 38ff 	mov.w	r8, #4294967295
static inline void _unpend_thread_timing_out(struct k_thread *thread,
					     struct _timeout *timeout_obj)
{
	if (timeout_obj->wait_q) {
		_unpend_thread(thread);
		thread->base.timeout.wait_q = NULL;
   133a4:	f04f 0900 	mov.w	r9, #0
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   133a8:	e893 0006 	ldmia.w	r3, {r1, r2}
   133ac:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
   133ae:	6819      	ldr	r1, [r3, #0]
   133b0:	604a      	str	r2, [r1, #4]
 * kept as -EAGAIN, set previously in _Swap().
 */

static inline void _handle_one_expired_timeout(struct _timeout *timeout)
{
	struct k_thread *thread = timeout->thread;
   133b2:	6898      	ldr	r0, [r3, #8]
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M)
	unsigned int tmp;

	__asm__ volatile(
   133b4:	f04f 0220 	mov.w	r2, #32
   133b8:	f3ef 8a11 	mrs	sl, BASEPRI
   133bc:	f382 8811 	msr	BASEPRI, r2
	unsigned int key = irq_lock();

	timeout->delta_ticks_from_prev = _INACTIVE;
   133c0:	f8c3 8010 	str.w	r8, [r3, #16]

	K_DEBUG("timeout %p\n", timeout);
	if (thread) {
   133c4:	b1c8      	cbz	r0, 133fa <_nano_sys_clock_tick_announce+0x116>
/* remove a thread timing out from kernel object's wait queue */

static inline void _unpend_thread_timing_out(struct k_thread *thread,
					     struct _timeout *timeout_obj)
{
	if (timeout_obj->wait_q) {
   133c6:	68db      	ldr	r3, [r3, #12]
   133c8:	b153      	cbz	r3, 133e0 <_nano_sys_clock_tick_announce+0xfc>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   133ca:	6842      	ldr	r2, [r0, #4]
   133cc:	6803      	ldr	r3, [r0, #0]
   133ce:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   133d0:	6803      	ldr	r3, [r0, #0]
   133d2:	605a      	str	r2, [r3, #4]
}

/* mark a thread as not pending in its TCS */
static inline void _mark_thread_as_not_pending(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PENDING;
   133d4:	7a43      	ldrb	r3, [r0, #9]
		_unpend_thread(thread);
		thread->base.timeout.wait_q = NULL;
   133d6:	f8c0 901c 	str.w	r9, [r0, #28]
   133da:	f023 0302 	bic.w	r3, r3, #2
   133de:	7243      	strb	r3, [r0, #9]
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   133e0:	7a43      	ldrb	r3, [r0, #9]
   133e2:	f023 0204 	bic.w	r2, r3, #4
}

/* check if a thread is ready */
static inline int _is_thread_ready(struct k_thread *thread)
{
	return !(_is_thread_prevented_from_running(thread) ||
   133e6:	f013 0f1b 	tst.w	r3, #27
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   133ea:	7242      	strb	r2, [r0, #9]
}

/* check if a thread is ready */
static inline int _is_thread_ready(struct k_thread *thread)
{
	return !(_is_thread_prevented_from_running(thread) ||
   133ec:	d102      	bne.n	133f4 <_nano_sys_clock_tick_announce+0x110>
   133ee:	6a03      	ldr	r3, [r0, #32]
   133f0:	3301      	adds	r3, #1
   133f2:	d030      	beq.n	13456 <_nano_sys_clock_tick_announce+0x172>
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   133f4:	f38a 8811 	msr	BASEPRI, sl
   133f8:	e005      	b.n	13406 <_nano_sys_clock_tick_announce+0x122>
   133fa:	f38a 8811 	msr	BASEPRI, sl
		_unpend_thread_timing_out(thread, timeout);
		_ready_thread(thread);
		irq_unlock(key);
	} else {
		irq_unlock(key);
		if (timeout->func) {
   133fe:	695a      	ldr	r2, [r3, #20]
   13400:	b10a      	cbz	r2, 13406 <_nano_sys_clock_tick_announce+0x122>
			timeout->func(timeout);
   13402:	4618      	mov	r0, r3
   13404:	4790      	blx	r2
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   13406:	2c00      	cmp	r4, #0
   13408:	d0c0      	beq.n	1338c <_nano_sys_clock_tick_announce+0xa8>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   1340a:	9b01      	ldr	r3, [sp, #4]
   1340c:	429c      	cmp	r4, r3
   1340e:	d103      	bne.n	13418 <_nano_sys_clock_tick_announce+0x134>
   13410:	2200      	movs	r2, #0
   13412:	4623      	mov	r3, r4
   13414:	4614      	mov	r4, r2
   13416:	e7c7      	b.n	133a8 <_nano_sys_clock_tick_announce+0xc4>
   13418:	6822      	ldr	r2, [r4, #0]
   1341a:	e7fa      	b.n	13412 <_nano_sys_clock_tick_announce+0x12e>
static void handle_time_slicing(s32_t ticks)
{
#ifdef CONFIG_TICKLESS_KERNEL
	next_ts = 0;
#endif
	if (!_is_thread_time_slicing(_current)) {
   1341c:	68b0      	ldr	r0, [r6, #8]
   1341e:	f7ff fe6b 	bl	130f8 <_is_thread_time_slicing>
   13422:	b1d8      	cbz	r0, 1345c <_nano_sys_clock_tick_announce+0x178>
		return;
	}

	_time_slice_elapsed += __ticks_to_ms(ticks);
   13424:	4a12      	ldr	r2, [pc, #72]	; (13470 <_nano_sys_clock_tick_announce+0x18c>)
   13426:	6810      	ldr	r0, [r2, #0]
   13428:	230a      	movs	r3, #10
   1342a:	fb05 0003 	mla	r0, r5, r3, r0
	if (_time_slice_elapsed >= _time_slice_duration) {
   1342e:	4b11      	ldr	r3, [pc, #68]	; (13474 <_nano_sys_clock_tick_announce+0x190>)
#endif
	if (!_is_thread_time_slicing(_current)) {
		return;
	}

	_time_slice_elapsed += __ticks_to_ms(ticks);
   13430:	6010      	str	r0, [r2, #0]
	if (_time_slice_elapsed >= _time_slice_duration) {
   13432:	681b      	ldr	r3, [r3, #0]
   13434:	4298      	cmp	r0, r3
   13436:	db11      	blt.n	1345c <_nano_sys_clock_tick_announce+0x178>

		unsigned int key;

		_time_slice_elapsed = 0;
   13438:	2300      	movs	r3, #0
   1343a:	6013      	str	r3, [r2, #0]
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M)
	unsigned int tmp;

	__asm__ volatile(
   1343c:	f04f 0320 	mov.w	r3, #32
   13440:	f3ef 8411 	mrs	r4, BASEPRI
   13444:	f383 8811 	msr	BASEPRI, r3

		key = irq_lock();
		_move_thread_to_end_of_prio_q(_current);
   13448:	4b07      	ldr	r3, [pc, #28]	; (13468 <_nano_sys_clock_tick_announce+0x184>)
   1344a:	6898      	ldr	r0, [r3, #8]
   1344c:	f7ff fde0 	bl	13010 <_move_thread_to_end_of_prio_q>
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13450:	f384 8811 	msr	BASEPRI, r4
	if ((!remaining && next_to) || (next_to < remaining)) {
		/* Clears current program if next_to = 0 and remaining > 0 */
		_set_time(next_to);
	}
#endif
}
   13454:	e002      	b.n	1345c <_nano_sys_clock_tick_announce+0x178>

	/* needed to handle the start-with-delay case */
	_mark_thread_as_started(thread);

	if (_is_thread_ready(thread)) {
		_add_thread_to_ready_q(thread);
   13456:	f7ff fcff 	bl	12e58 <_add_thread_to_ready_q>
   1345a:	e7cb      	b.n	133f4 <_nano_sys_clock_tick_announce+0x110>
   1345c:	b002      	add	sp, #8
   1345e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13462:	bf00      	nop
   13464:	20002230 	.word	0x20002230
   13468:	20001fe4 	.word	0x20001fe4
   1346c:	20002228 	.word	0x20002228
   13470:	2000222c 	.word	0x2000222c
   13474:	20002108 	.word	0x20002108

00013478 <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
   13478:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   1347a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1347e:	f04f 33ff 	mov.w	r3, #4294967295
   13482:	4903      	ldr	r1, [pc, #12]	; (13490 <k_sys_work_q_init+0x18>)
   13484:	4803      	ldr	r0, [pc, #12]	; (13494 <k_sys_work_q_init+0x1c>)
   13486:	f000 f993 	bl	137b0 <k_work_q_start>
		       sys_work_q_stack,
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);

	return 0;
}
   1348a:	2000      	movs	r0, #0
   1348c:	bd08      	pop	{r3, pc}
   1348e:	bf00      	nop
   13490:	20003ec0 	.word	0x20003ec0
   13494:	20002238 	.word	0x20002238

00013498 <_is_thread_ready>:
}

/* check if a thread is ready */
static inline int _is_thread_ready(struct k_thread *thread)
{
	return !(_is_thread_prevented_from_running(thread) ||
   13498:	7a43      	ldrb	r3, [r0, #9]
   1349a:	06da      	lsls	r2, r3, #27
   1349c:	d104      	bne.n	134a8 <_is_thread_ready+0x10>
   1349e:	6a00      	ldr	r0, [r0, #32]
   134a0:	1c43      	adds	r3, r0, #1
   134a2:	4258      	negs	r0, r3
   134a4:	4158      	adcs	r0, r3
   134a6:	4770      	bx	lr
   134a8:	2000      	movs	r0, #0
		 _is_thread_timeout_active(thread));
}
   134aa:	4770      	bx	lr

000134ac <start_thread>:
	CODE_UNREACHABLE;
}

#ifdef CONFIG_MULTITHREADING
static void start_thread(struct k_thread *thread)
{
   134ac:	b510      	push	{r4, lr}
   134ae:	4601      	mov	r1, r0
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M)
	unsigned int tmp;

	__asm__ volatile(
   134b0:	f04f 0320 	mov.w	r3, #32
   134b4:	f3ef 8411 	mrs	r4, BASEPRI
   134b8:	f383 8811 	msr	BASEPRI, r3
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   134bc:	7a43      	ldrb	r3, [r0, #9]
   134be:	f023 0304 	bic.w	r3, r3, #4
   134c2:	7243      	strb	r3, [r0, #9]
	int key = irq_lock(); /* protect kernel queues */

	_mark_thread_as_started(thread);

	if (_is_thread_ready(thread)) {
   134c4:	f7ff ffe8 	bl	13498 <_is_thread_ready>
   134c8:	b188      	cbz	r0, 134ee <start_thread+0x42>
		_add_thread_to_ready_q(thread);
   134ca:	4608      	mov	r0, r1
   134cc:	f7ff fcc4 	bl	12e58 <_add_thread_to_ready_q>
 * Checks if current thread must be context-switched out. The caller must
 * already know that the execution context is a thread.
 */
static inline int _must_switch_threads(void)
{
	return _is_preempt(_current) && __must_switch_threads();
   134d0:	4b08      	ldr	r3, [pc, #32]	; (134f4 <start_thread+0x48>)
   134d2:	689b      	ldr	r3, [r3, #8]
   134d4:	895b      	ldrh	r3, [r3, #10]
   134d6:	2b7f      	cmp	r3, #127	; 0x7f
   134d8:	d809      	bhi.n	134ee <start_thread+0x42>
   134da:	f7ff fd59 	bl	12f90 <__must_switch_threads>
   134de:	b130      	cbz	r0, 134ee <start_thread+0x42>

#ifdef CONFIG_STACK_SENTINEL
	_check_stack_sentinel();
#endif
#ifdef CONFIG_TIMESLICING
	_update_time_slice_before_swap();
   134e0:	f7ff fe2e 	bl	13140 <_update_time_slice_before_swap>
#endif

	return __swap(key);
   134e4:	4620      	mov	r0, r4
			return;
		}
	}

	irq_unlock(key);
}
   134e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   134ea:	f7fe bccd 	b.w	11e88 <__swap>
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   134ee:	f384 8811 	msr	BASEPRI, r4
   134f2:	bd10      	pop	{r4, pc}
   134f4:	20001fe4 	.word	0x20001fe4

000134f8 <_abort_timeout>:
	}
}

/* returns _INACTIVE if the timer is not active */
static inline int _abort_timeout(struct _timeout *timeout)
{
   134f8:	4603      	mov	r3, r0
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   134fa:	6900      	ldr	r0, [r0, #16]
   134fc:	1c42      	adds	r2, r0, #1
   134fe:	d010      	beq.n	13522 <_abort_timeout+0x2a>
   13500:	4a08      	ldr	r2, [pc, #32]	; (13524 <_abort_timeout+0x2c>)
		return _INACTIVE;
	}

	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   13502:	6912      	ldr	r2, [r2, #16]
   13504:	4293      	cmp	r3, r2
   13506:	bf1f      	itttt	ne
   13508:	681a      	ldrne	r2, [r3, #0]
		sys_dnode_t *next_node =
			sys_dlist_peek_next(&_timeout_q, &timeout->node);
		struct _timeout *next = (struct _timeout *)next_node;

		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   1350a:	6911      	ldrne	r1, [r2, #16]
   1350c:	1840      	addne	r0, r0, r1
   1350e:	6110      	strne	r0, [r2, #16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   13510:	e893 0006 	ldmia.w	r3, {r1, r2}
   13514:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
   13516:	6819      	ldr	r1, [r3, #0]
   13518:	604a      	str	r2, [r1, #4]
	}
	sys_dlist_remove(&timeout->node);
	timeout->delta_ticks_from_prev = _INACTIVE;
   1351a:	f04f 32ff 	mov.w	r2, #4294967295
   1351e:	611a      	str	r2, [r3, #16]

	return 0;
   13520:	2000      	movs	r0, #0
}
   13522:	4770      	bx	lr
   13524:	20001fe4 	.word	0x20001fe4

00013528 <schedule_new_thread.part.14>:
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, s32_t delay)
   13528:	b5f0      	push	{r4, r5, r6, r7, lr}
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M)
	unsigned int tmp;

	__asm__ volatile(
   1352a:	f04f 0320 	mov.w	r3, #32
   1352e:	f3ef 8611 	mrs	r6, BASEPRI
   13532:	f383 8811 	msr	BASEPRI, r3
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   13536:	4a1a      	ldr	r2, [pc, #104]	; (135a0 <schedule_new_thread.part.14+0x78>)
				s32_t timeout_in_ticks)
{
	__ASSERT(timeout_in_ticks > 0, "");

	timeout->delta_ticks_from_prev = timeout_in_ticks;
	timeout->thread = thread;
   13538:	6180      	str	r0, [r0, #24]
				_wait_q_t *wait_q,
				s32_t timeout_in_ticks)
{
	__ASSERT(timeout_in_ticks > 0, "");

	timeout->delta_ticks_from_prev = timeout_in_ticks;
   1353a:	230a      	movs	r3, #10
   1353c:	3109      	adds	r1, #9
   1353e:	fbb1 f1f3 	udiv	r1, r1, r3
   13542:	3101      	adds	r1, #1
   13544:	6201      	str	r1, [r0, #32]
   13546:	4611      	mov	r1, r2
	timeout->thread = thread;
	timeout->wait_q = (sys_dlist_t *)wait_q;
   13548:	2300      	movs	r3, #0
   1354a:	61c3      	str	r3, [r0, #28]
   1354c:	f851 3f0c 	ldr.w	r3, [r1, #12]!
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13550:	428b      	cmp	r3, r1
   13552:	d107      	bne.n	13564 <schedule_new_thread.part.14+0x3c>
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
   13554:	6101      	str	r1, [r0, #16]
	node->prev = list->tail;
   13556:	6911      	ldr	r1, [r2, #16]
   13558:	6141      	str	r1, [r0, #20]
		}

		*delta -= in_q->delta_ticks_from_prev;
	}

	sys_dlist_append(&_timeout_q, &timeout->node);
   1355a:	f100 0310 	add.w	r3, r0, #16

	list->tail->next = node;
   1355e:	600b      	str	r3, [r1, #0]
	list->tail = node;
   13560:	6113      	str	r3, [r2, #16]
   13562:	e019      	b.n	13598 <schedule_new_thread.part.14+0x70>
	if (program_time > 0) {
		*delta += _get_elapsed_program_time();
	}
	adjusted_timeout = *delta;
#endif
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   13564:	2b00      	cmp	r3, #0
   13566:	d0f5      	beq.n	13554 <schedule_new_thread.part.14+0x2c>
   13568:	6917      	ldr	r7, [r2, #16]
		if (*delta <= in_q->delta_ticks_from_prev) {
   1356a:	6a04      	ldr	r4, [r0, #32]
   1356c:	691d      	ldr	r5, [r3, #16]
   1356e:	42ac      	cmp	r4, r5
   13570:	dc0a      	bgt.n	13588 <schedule_new_thread.part.14+0x60>
	sys_dnode_t *insert_point, sys_dnode_t *node)
{
	if (!insert_point) {
		sys_dlist_append(list, node);
	} else {
		node->prev = insert_point->prev;
   13572:	6859      	ldr	r1, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
   13574:	1b2c      	subs	r4, r5, r4
   13576:	611c      	str	r4, [r3, #16]
   13578:	6141      	str	r1, [r0, #20]
		node->next = insert_point;
   1357a:	6103      	str	r3, [r0, #16]
		insert_point->prev->next = node;
   1357c:	6859      	ldr	r1, [r3, #4]
			sys_dlist_insert_before(&_timeout_q, &in_q->node,
   1357e:	f100 0210 	add.w	r2, r0, #16
   13582:	600a      	str	r2, [r1, #0]
		insert_point->prev = node;
   13584:	605a      	str	r2, [r3, #4]
   13586:	e007      	b.n	13598 <schedule_new_thread.part.14+0x70>
						&timeout->node);
			goto inserted;
		}

		*delta -= in_q->delta_ticks_from_prev;
   13588:	1b64      	subs	r4, r4, r5
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   1358a:	42bb      	cmp	r3, r7
   1358c:	6204      	str	r4, [r0, #32]
   1358e:	d0e1      	beq.n	13554 <schedule_new_thread.part.14+0x2c>
   13590:	681b      	ldr	r3, [r3, #0]
	if (program_time > 0) {
		*delta += _get_elapsed_program_time();
	}
	adjusted_timeout = *delta;
#endif
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   13592:	2b00      	cmp	r3, #0
   13594:	d1e9      	bne.n	1356a <schedule_new_thread.part.14+0x42>
   13596:	e7dd      	b.n	13554 <schedule_new_thread.part.14+0x2c>
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13598:	f386 8811 	msr	BASEPRI, r6
   1359c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1359e:	bf00      	nop
   135a0:	20001fe4 	.word	0x20001fe4

000135a4 <k_is_in_isr>:
   135a4:	f3ef 8005 	mrs	r0, IPSR
   135a8:	280d      	cmp	r0, #13
   135aa:	d807      	bhi.n	135bc <k_is_in_isr+0x18>
   135ac:	b138      	cbz	r0, 135be <k_is_in_isr+0x1a>
   135ae:	4b04      	ldr	r3, [pc, #16]	; (135c0 <k_is_in_isr+0x1c>)
   135b0:	6858      	ldr	r0, [r3, #4]
   135b2:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
   135b6:	f3c0 20c0 	ubfx	r0, r0, #11, #1
   135ba:	4770      	bx	lr
   135bc:	2001      	movs	r0, #1


int k_is_in_isr(void)
{
	return _is_in_isr();
}
   135be:	4770      	bx	lr
   135c0:	e000ed00 	.word	0xe000ed00

000135c4 <_is_thread_essential>:
 *
 * Returns non-zero if current thread is essential, zero if it is not.
 */
int _is_thread_essential(void)
{
	return _current->base.user_options & K_ESSENTIAL;
   135c4:	4b02      	ldr	r3, [pc, #8]	; (135d0 <_is_thread_essential+0xc>)
   135c6:	689b      	ldr	r3, [r3, #8]
   135c8:	7a18      	ldrb	r0, [r3, #8]
}
   135ca:	f000 0001 	and.w	r0, r0, #1
   135ce:	4770      	bx	lr
   135d0:	20001fe4 	.word	0x20001fe4

000135d4 <_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void _thread_entry(void (*entry)(void *, void *, void *),
				 void *p1, void *p2, void *p3)
{
   135d4:	b508      	push	{r3, lr}
   135d6:	4604      	mov	r4, r0
   135d8:	4608      	mov	r0, r1
   135da:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   135dc:	461a      	mov	r2, r3
   135de:	47a0      	blx	r4

#ifdef CONFIG_STACK_SENTINEL
	_check_stack_sentinel();
#endif
#ifdef CONFIG_MULTITHREADING
	if (_is_thread_essential()) {
   135e0:	f7ff fff0 	bl	135c4 <_is_thread_essential>
   135e4:	b128      	cbz	r0, 135f2 <_thread_entry+0x1e>
		_k_except_reason(_NANO_ERR_INVALID_TASK_EXIT);
   135e6:	4040      	eors	r0, r0
   135e8:	f380 8811 	msr	BASEPRI, r0
   135ec:	f04f 0001 	mov.w	r0, #1
   135f0:	df02      	svc	2
	}

	k_thread_abort(_current);
   135f2:	4b02      	ldr	r3, [pc, #8]	; (135fc <_thread_entry+0x28>)
   135f4:	6898      	ldr	r0, [r3, #8]
   135f6:	f7fe fea5 	bl	12344 <k_thread_abort>
   135fa:	bf00      	nop
   135fc:	20001fe4 	.word	0x20001fe4

00013600 <k_thread_create>:

k_tid_t k_thread_create(struct k_thread *new_thread, char *stack,
			size_t stack_size, void (*entry)(void *, void *, void*),
			void *p1, void *p2, void *p3,
			int prio, u32_t options, s32_t delay)
{
   13600:	b570      	push	{r4, r5, r6, lr}
   13602:	b086      	sub	sp, #24
   13604:	4604      	mov	r4, r0
	__ASSERT(!_is_in_isr(), "Threads may not be created in ISRs");
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3, prio,
   13606:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   13608:	9604      	str	r6, [sp, #16]
   1360a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   1360c:	9603      	str	r6, [sp, #12]
   1360e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   13610:	9602      	str	r6, [sp, #8]
   13612:	9e0b      	ldr	r6, [sp, #44]	; 0x2c

k_tid_t k_thread_create(struct k_thread *new_thread, char *stack,
			size_t stack_size, void (*entry)(void *, void *, void*),
			void *p1, void *p2, void *p3,
			int prio, u32_t options, s32_t delay)
{
   13614:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
	__ASSERT(!_is_in_isr(), "Threads may not be created in ISRs");
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3, prio,
   13616:	9601      	str	r6, [sp, #4]
   13618:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   1361a:	9600      	str	r6, [sp, #0]
   1361c:	f7fe fde4 	bl	121e8 <_new_thread>

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, s32_t delay)
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (delay == 0) {
   13620:	b91d      	cbnz	r5, 1362a <k_thread_create+0x2a>
		start_thread(thread);
   13622:	4620      	mov	r0, r4
   13624:	f7ff ff42 	bl	134ac <start_thread>
   13628:	e003      	b.n	13632 <k_thread_create+0x32>
   1362a:	4629      	mov	r1, r5
   1362c:	4620      	mov	r0, r4
   1362e:	f7ff ff7b 	bl	13528 <schedule_new_thread.part.14>
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3, prio,
		    options);

	schedule_new_thread(new_thread, delay);
	return new_thread;
}
   13632:	4620      	mov	r0, r4
   13634:	b006      	add	sp, #24
   13636:	bd70      	pop	{r4, r5, r6, pc}

00013638 <_k_thread_single_abort>:
	_reschedule_threads(key);
}

void _k_thread_single_abort(struct k_thread *thread)
{
	if (thread->fn_abort != NULL) {
   13638:	6d03      	ldr	r3, [r0, #80]	; 0x50

	_reschedule_threads(key);
}

void _k_thread_single_abort(struct k_thread *thread)
{
   1363a:	b510      	push	{r4, lr}
   1363c:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
   1363e:	b103      	cbz	r3, 13642 <_k_thread_single_abort+0xa>
		thread->fn_abort();
   13640:	4798      	blx	r3
	}

	if (_is_thread_ready(thread)) {
   13642:	4620      	mov	r0, r4
   13644:	f7ff ff28 	bl	13498 <_is_thread_ready>
   13648:	b118      	cbz	r0, 13652 <_k_thread_single_abort+0x1a>
		_remove_thread_from_ready_q(thread);
   1364a:	4620      	mov	r0, r4
   1364c:	f7ff fc2c 	bl	12ea8 <_remove_thread_from_ready_q>
   13650:	e012      	b.n	13678 <_k_thread_single_abort+0x40>
	} else {
		if (_is_thread_pending(thread)) {
   13652:	7a63      	ldrb	r3, [r4, #9]
   13654:	079b      	lsls	r3, r3, #30
   13656:	d508      	bpl.n	1366a <_k_thread_single_abort+0x32>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   13658:	e894 000c 	ldmia.w	r4, {r2, r3}
   1365c:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   1365e:	6822      	ldr	r2, [r4, #0]
   13660:	6053      	str	r3, [r2, #4]
}

/* mark a thread as not pending in its TCS */
static inline void _mark_thread_as_not_pending(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PENDING;
   13662:	7a63      	ldrb	r3, [r4, #9]
   13664:	f023 0302 	bic.w	r3, r3, #2
   13668:	7263      	strb	r3, [r4, #9]
			_unpend_thread(thread);
		}
		if (_is_thread_timeout_active(thread)) {
   1366a:	6a23      	ldr	r3, [r4, #32]
   1366c:	3301      	adds	r3, #1
   1366e:	d003      	beq.n	13678 <_k_thread_single_abort+0x40>
}

/* returns _INACTIVE if the timer has already expired */
static inline int _abort_thread_timeout(struct k_thread *thread)
{
	return _abort_timeout(&thread->base.timeout);
   13670:	f104 0010 	add.w	r0, r4, #16
   13674:	f7ff ff40 	bl	134f8 <_abort_timeout>
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_dead(struct k_thread *thread)
{
	thread->base.thread_state |= _THREAD_DEAD;
   13678:	7a63      	ldrb	r3, [r4, #9]
   1367a:	f043 0308 	orr.w	r3, r3, #8
   1367e:	7263      	strb	r3, [r4, #9]
   13680:	bd10      	pop	{r4, pc}
	...

00013684 <_init_static_threads>:
	_mark_thread_as_dead(thread);
}

#ifdef CONFIG_MULTITHREADING
void _init_static_threads(void)
{
   13684:	b5f0      	push	{r4, r5, r6, r7, lr}
   13686:	4d21      	ldr	r5, [pc, #132]	; (1370c <_init_static_threads+0x88>)
	unsigned int  key;

	_FOREACH_STATIC_THREAD(thread_data) {
   13688:	4f21      	ldr	r7, [pc, #132]	; (13710 <_init_static_threads+0x8c>)
	_mark_thread_as_dead(thread);
}

#ifdef CONFIG_MULTITHREADING
void _init_static_threads(void)
{
   1368a:	b087      	sub	sp, #28
	unsigned int  key;

	_FOREACH_STATIC_THREAD(thread_data) {
   1368c:	42bd      	cmp	r5, r7
   1368e:	f105 0430 	add.w	r4, r5, #48	; 0x30
   13692:	4e1f      	ldr	r6, [pc, #124]	; (13710 <_init_static_threads+0x8c>)
   13694:	d218      	bcs.n	136c8 <_init_static_threads+0x44>
		_new_thread(
   13696:	f854 3c10 	ldr.w	r3, [r4, #-16]
   1369a:	9304      	str	r3, [sp, #16]
   1369c:	f854 3c14 	ldr.w	r3, [r4, #-20]
   136a0:	9303      	str	r3, [sp, #12]
   136a2:	f854 3c18 	ldr.w	r3, [r4, #-24]
   136a6:	9302      	str	r3, [sp, #8]
   136a8:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   136ac:	9301      	str	r3, [sp, #4]
   136ae:	f854 3c20 	ldr.w	r3, [r4, #-32]
   136b2:	9300      	str	r3, [sp, #0]
   136b4:	f1a4 0030 	sub.w	r0, r4, #48	; 0x30
   136b8:	c80f      	ldmia	r0, {r0, r1, r2, r3}
   136ba:	f7fe fd95 	bl	121e8 <_new_thread>
			thread_data->init_p2,
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options);

		thread_data->init_thread->init_data = thread_data;
   136be:	f854 3c30 	ldr.w	r3, [r4, #-48]
   136c2:	64dd      	str	r5, [r3, #76]	; 0x4c
   136c4:	4625      	mov	r5, r4
   136c6:	e7e1      	b.n	1368c <_init_static_threads+0x8>
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
   136c8:	4b12      	ldr	r3, [pc, #72]	; (13714 <_init_static_threads+0x90>)
   136ca:	689a      	ldr	r2, [r3, #8]
   136cc:	7ad3      	ldrb	r3, [r2, #11]
   136ce:	3b01      	subs	r3, #1
   136d0:	72d3      	strb	r3, [r2, #11]
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M)
	unsigned int tmp;

	__asm__ volatile(
   136d2:	f04f 0320 	mov.w	r3, #32
   136d6:	f3ef 8511 	mrs	r5, BASEPRI
   136da:	f383 8811 	msr	BASEPRI, r3
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	key = irq_lock();
	_FOREACH_STATIC_THREAD(thread_data) {
   136de:	4c0b      	ldr	r4, [pc, #44]	; (1370c <_init_static_threads+0x88>)
   136e0:	42b4      	cmp	r4, r6
   136e2:	d20b      	bcs.n	136fc <_init_static_threads+0x78>
		if (thread_data->init_delay != K_FOREVER) {
   136e4:	6a61      	ldr	r1, [r4, #36]	; 0x24
   136e6:	1c4b      	adds	r3, r1, #1
   136e8:	d006      	beq.n	136f8 <_init_static_threads+0x74>
			schedule_new_thread(thread_data->init_thread,
   136ea:	6820      	ldr	r0, [r4, #0]

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, s32_t delay)
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (delay == 0) {
   136ec:	b911      	cbnz	r1, 136f4 <_init_static_threads+0x70>
		start_thread(thread);
   136ee:	f7ff fedd 	bl	134ac <start_thread>
   136f2:	e001      	b.n	136f8 <_init_static_threads+0x74>
   136f4:	f7ff ff18 	bl	13528 <schedule_new_thread.part.14>
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	key = irq_lock();
	_FOREACH_STATIC_THREAD(thread_data) {
   136f8:	3430      	adds	r4, #48	; 0x30
   136fa:	e7f1      	b.n	136e0 <_init_static_threads+0x5c>
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   136fc:	f385 8811 	msr	BASEPRI, r5
					    thread_data->init_delay);
		}
	}
	irq_unlock(key);
	k_sched_unlock();
}
   13700:	b007      	add	sp, #28
   13702:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			schedule_new_thread(thread_data->init_thread,
					    thread_data->init_delay);
		}
	}
	irq_unlock(key);
	k_sched_unlock();
   13706:	f7ff bc73 	b.w	12ff0 <k_sched_unlock>
   1370a:	bf00      	nop
   1370c:	20000760 	.word	0x20000760
   13710:	20000760 	.word	0x20000760
   13714:	20001fe4 	.word	0x20001fe4

00013718 <_init_thread_base>:
void _init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
   13718:	7203      	strb	r3, [r0, #8]
	thread_base->thread_state = (u8_t)initial_state;
   1371a:	7242      	strb	r2, [r0, #9]

	thread_base->prio = priority;

	thread_base->sched_locked = 0;
   1371c:	2300      	movs	r3, #0
	/*
	 * Must be initialized here and when dequeueing a timeout so that code
	 * not dealing with timeouts does not have to handle this, such as when
	 * waiting forever on a semaphore.
	 */
	t->delta_ticks_from_prev = _INACTIVE;
   1371e:	f04f 32ff 	mov.w	r2, #4294967295
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
	thread_base->thread_state = (u8_t)initial_state;

	thread_base->prio = priority;
   13722:	7281      	strb	r1, [r0, #10]

	thread_base->sched_locked = 0;
   13724:	72c3      	strb	r3, [r0, #11]
   13726:	6202      	str	r2, [r0, #32]

	/*
	 * Must be initialized here so that the _fiber_wakeup family of APIs can
	 * verify the fiber is not on a wait queue before aborting a timeout.
	 */
	t->wait_q = NULL;
   13728:	61c3      	str	r3, [r0, #28]

	/*
	 * Must be initialized here, so the _handle_one_timeout()
	 * routine can check if there is a fiber waiting on this timeout
	 */
	t->thread = NULL;
   1372a:	6183      	str	r3, [r0, #24]

	/*
	 * Function must be initialized before being potentially called.
	 */
	t->func = func;
   1372c:	6243      	str	r3, [r0, #36]	; 0x24
   1372e:	4770      	bx	lr

00013730 <k_work_submit_to_queue>:
 *
 * @return N/A
 */
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
					  struct k_work *work)
{
   13730:	b500      	push	{lr}
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   13732:	f101 0308 	add.w	r3, r1, #8
   13736:	f3bf 8f5f 	dmb	sy
   1373a:	e853 2f00 	ldrex	r2, [r3]
   1373e:	f042 0e01 	orr.w	lr, r2, #1
   13742:	e843 ec00 	strex	ip, lr, [r3]
   13746:	f1bc 0f00 	cmp.w	ip, #0
   1374a:	d1f6      	bne.n	1373a <k_work_submit_to_queue+0xa>
   1374c:	f3bf 8f5f 	dmb	sy
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   13750:	07d3      	lsls	r3, r2, #31
   13752:	d403      	bmi.n	1375c <k_work_submit_to_queue+0x2c>
		k_fifo_put(&work_q->fifo, work);
	}
}
   13754:	f85d eb04 	ldr.w	lr, [sp], #4
 */
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
					  struct k_work *work)
{
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
		k_fifo_put(&work_q->fifo, work);
   13758:	f7ff badc 	b.w	12d14 <k_queue_append>
   1375c:	f85d fb04 	ldr.w	pc, [sp], #4

00013760 <work_timeout>:
			work_q, 0, 0, prio, 0, 0);
}

#ifdef CONFIG_SYS_CLOCK_EXISTS
static void work_timeout(struct _timeout *t)
{
   13760:	b510      	push	{r4, lr}
	struct k_delayed_work *w = CONTAINER_OF(t, struct k_delayed_work,
						   timeout);

	/* submit work to workqueue */
	k_work_submit_to_queue(w->work_q, &w->work);
   13762:	f1a0 010c 	sub.w	r1, r0, #12
			work_q, 0, 0, prio, 0, 0);
}

#ifdef CONFIG_SYS_CLOCK_EXISTS
static void work_timeout(struct _timeout *t)
{
   13766:	4604      	mov	r4, r0
	struct k_delayed_work *w = CONTAINER_OF(t, struct k_delayed_work,
						   timeout);

	/* submit work to workqueue */
	k_work_submit_to_queue(w->work_q, &w->work);
   13768:	6980      	ldr	r0, [r0, #24]
   1376a:	f7ff ffe1 	bl	13730 <k_work_submit_to_queue>
	/* detach from workqueue, for cancel to return appropriate status */
	w->work_q = NULL;
   1376e:	2300      	movs	r3, #0
   13770:	61a3      	str	r3, [r4, #24]
   13772:	bd10      	pop	{r4, pc}

00013774 <work_q_main>:
#include <kernel_structs.h>
#include <wait_q.h>
#include <errno.h>

static void work_q_main(void *work_q_ptr, void *p2, void *p3)
{
   13774:	b510      	push	{r4, lr}
   13776:	4604      	mov	r4, r0

	while (1) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_fifo_get(&work_q->fifo, K_FOREVER);
   13778:	f04f 31ff 	mov.w	r1, #4294967295
   1377c:	4620      	mov	r0, r4
   1377e:	f7ff fb19 	bl	12db4 <k_queue_get>
   13782:	4603      	mov	r3, r0
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13784:	3308      	adds	r3, #8

		handler = work->handler;
   13786:	6842      	ldr	r2, [r0, #4]
   13788:	f3bf 8f5f 	dmb	sy
   1378c:	e853 1f00 	ldrex	r1, [r3]
   13790:	f021 0e01 	bic.w	lr, r1, #1
   13794:	e843 ec00 	strex	ip, lr, [r3]
   13798:	f1bc 0f00 	cmp.w	ip, #0
   1379c:	d1f6      	bne.n	1378c <work_q_main+0x18>
   1379e:	f3bf 8f5f 	dmb	sy

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
   137a2:	07cb      	lsls	r3, r1, #31
   137a4:	d500      	bpl.n	137a8 <work_q_main+0x34>
					       K_WORK_STATE_PENDING)) {
			handler(work);
   137a6:	4790      	blx	r2
		}

		/* Make sure we don't hog up the CPU if the FIFO never (or
		 * very rarely) gets empty.
		 */
		k_yield();
   137a8:	f7ff fc5a 	bl	13060 <k_yield>
	}
   137ac:	e7e4      	b.n	13778 <work_q_main+0x4>
	...

000137b0 <k_work_q_start>:
}

void k_work_q_start(struct k_work_q *work_q, char *stack,
		    size_t stack_size, int prio)
{
   137b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   137b2:	b087      	sub	sp, #28
   137b4:	4604      	mov	r4, r0
   137b6:	461f      	mov	r7, r3
   137b8:	460d      	mov	r5, r1
   137ba:	4616      	mov	r6, r2
	k_fifo_init(&work_q->fifo);
   137bc:	f7ff fa5e 	bl	12c7c <k_queue_init>

	k_thread_create(&work_q->thread, stack, stack_size, work_q_main,
   137c0:	2000      	movs	r0, #0
   137c2:	9005      	str	r0, [sp, #20]
   137c4:	9004      	str	r0, [sp, #16]
   137c6:	9002      	str	r0, [sp, #8]
   137c8:	9001      	str	r0, [sp, #4]
   137ca:	9703      	str	r7, [sp, #12]
   137cc:	9400      	str	r4, [sp, #0]
   137ce:	4b04      	ldr	r3, [pc, #16]	; (137e0 <k_work_q_start+0x30>)
   137d0:	4632      	mov	r2, r6
   137d2:	4629      	mov	r1, r5
   137d4:	f104 0014 	add.w	r0, r4, #20
   137d8:	f7ff ff12 	bl	13600 <k_thread_create>
			work_q, 0, 0, prio, 0, 0);
}
   137dc:	b007      	add	sp, #28
   137de:	bdf0      	pop	{r4, r5, r6, r7, pc}
   137e0:	00013775 	.word	0x00013775

000137e4 <k_delayed_work_init>:
	/* detach from workqueue, for cancel to return appropriate status */
	w->work_q = NULL;
}

void k_delayed_work_init(struct k_delayed_work *work, k_work_handler_t handler)
{
   137e4:	b500      	push	{lr}
   137e6:	f100 0308 	add.w	r3, r0, #8
   137ea:	f3bf 8f5f 	dmb	sy
   137ee:	e853 2f00 	ldrex	r2, [r3]
   137f2:	f022 0201 	bic.w	r2, r2, #1
   137f6:	e843 2e00 	strex	lr, r2, [r3]
   137fa:	f1be 0f00 	cmp.w	lr, #0
   137fe:	d1f6      	bne.n	137ee <k_delayed_work_init+0xa>
   13800:	f3bf 8f5f 	dmb	sy
	/*
	 * Must be initialized here and when dequeueing a timeout so that code
	 * not dealing with timeouts does not have to handle this, such as when
	 * waiting forever on a semaphore.
	 */
	t->delta_ticks_from_prev = _INACTIVE;
   13804:	f04f 33ff 	mov.w	r3, #4294967295
   13808:	61c3      	str	r3, [r0, #28]
	t->thread = NULL;

	/*
	 * Function must be initialized before being potentially called.
	 */
	t->func = func;
   1380a:	4a04      	ldr	r2, [pc, #16]	; (1381c <k_delayed_work_init+0x38>)
 * @return N/A
 */
static inline void k_work_init(struct k_work *work, k_work_handler_t handler)
{
	atomic_clear_bit(work->flags, K_WORK_STATE_PENDING);
	work->handler = handler;
   1380c:	6041      	str	r1, [r0, #4]

	/*
	 * Must be initialized here so that the _fiber_wakeup family of APIs can
	 * verify the fiber is not on a wait queue before aborting a timeout.
	 */
	t->wait_q = NULL;
   1380e:	2300      	movs	r3, #0
   13810:	6183      	str	r3, [r0, #24]

	/*
	 * Must be initialized here, so the _handle_one_timeout()
	 * routine can check if there is a fiber waiting on this timeout
	 */
	t->thread = NULL;
   13812:	6143      	str	r3, [r0, #20]

	/*
	 * Function must be initialized before being potentially called.
	 */
	t->func = func;
   13814:	6202      	str	r2, [r0, #32]
	k_work_init(&work->work, handler);
	_init_timeout(&work->timeout, work_timeout);
	work->work_q = NULL;
   13816:	6243      	str	r3, [r0, #36]	; 0x24
   13818:	f85d fb04 	ldr.w	pc, [sp], #4
   1381c:	00013761 	.word	0x00013761

00013820 <k_delayed_work_cancel>:

	return err;
}

int k_delayed_work_cancel(struct k_delayed_work *work)
{
   13820:	b530      	push	{r4, r5, lr}
   13822:	4603      	mov	r3, r0
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M)
	unsigned int tmp;

	__asm__ volatile(
   13824:	f04f 0220 	mov.w	r2, #32
   13828:	f3ef 8411 	mrs	r4, BASEPRI
   1382c:	f382 8811 	msr	BASEPRI, r2
 * @return Value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   13830:	f3bf 8f5f 	dmb	sy
   13834:	6880      	ldr	r0, [r0, #8]
   13836:	f3bf 8f5f 	dmb	sy
	int key = irq_lock();

	if (k_work_pending(&work->work)) {
   1383a:	f010 0001 	ands.w	r0, r0, #1
   1383e:	d004      	beq.n	1384a <k_delayed_work_cancel+0x2a>
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13840:	f384 8811 	msr	BASEPRI, r4
		irq_unlock(key);
		return -EINPROGRESS;
   13844:	f06f 0043 	mvn.w	r0, #67	; 0x43
   13848:	bd30      	pop	{r4, r5, pc}
	}

	if (!work->work_q) {
   1384a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1384c:	b922      	cbnz	r2, 13858 <k_delayed_work_cancel+0x38>
   1384e:	f384 8811 	msr	BASEPRI, r4
		irq_unlock(key);
		return -EINVAL;
   13852:	f06f 0015 	mvn.w	r0, #21
   13856:	bd30      	pop	{r4, r5, pc}
}

/* returns _INACTIVE if the timer is not active */
static inline int _abort_timeout(struct _timeout *timeout)
{
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   13858:	69da      	ldr	r2, [r3, #28]
   1385a:	1c51      	adds	r1, r2, #1
   1385c:	d011      	beq.n	13882 <k_delayed_work_cancel+0x62>
   1385e:	4d0b      	ldr	r5, [pc, #44]	; (1388c <k_delayed_work_cancel+0x6c>)
		return _INACTIVE;
	}

	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   13860:	692d      	ldr	r5, [r5, #16]
   13862:	f103 010c 	add.w	r1, r3, #12
   13866:	428d      	cmp	r5, r1
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   13868:	bf1f      	itttt	ne
   1386a:	68d9      	ldrne	r1, [r3, #12]
		sys_dnode_t *next_node =
			sys_dlist_peek_next(&_timeout_q, &timeout->node);
		struct _timeout *next = (struct _timeout *)next_node;

		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   1386c:	690d      	ldrne	r5, [r1, #16]
   1386e:	1952      	addne	r2, r2, r5
   13870:	610a      	strne	r2, [r1, #16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   13872:	691a      	ldr	r2, [r3, #16]
   13874:	68d9      	ldr	r1, [r3, #12]
   13876:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
   13878:	68d9      	ldr	r1, [r3, #12]
   1387a:	604a      	str	r2, [r1, #4]
	}
	sys_dlist_remove(&timeout->node);
	timeout->delta_ticks_from_prev = _INACTIVE;
   1387c:	f04f 32ff 	mov.w	r2, #4294967295
   13880:	61da      	str	r2, [r3, #28]

	/* Abort timeout, if it has expired this will do nothing */
	_abort_timeout(&work->timeout);

	/* Detach from workqueue */
	work->work_q = NULL;
   13882:	2200      	movs	r2, #0
   13884:	625a      	str	r2, [r3, #36]	; 0x24
   13886:	f384 8811 	msr	BASEPRI, r4

	irq_unlock(key);

	return 0;
}
   1388a:	bd30      	pop	{r4, r5, pc}
   1388c:	20001fe4 	.word	0x20001fe4

00013890 <k_delayed_work_submit_to_queue>:
}

int k_delayed_work_submit_to_queue(struct k_work_q *work_q,
				   struct k_delayed_work *work,
				   s32_t delay)
{
   13890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13892:	4607      	mov	r7, r0
   13894:	460c      	mov	r4, r1
   13896:	4615      	mov	r5, r2
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M)
	unsigned int tmp;

	__asm__ volatile(
   13898:	f04f 0320 	mov.w	r3, #32
   1389c:	f3ef 8611 	mrs	r6, BASEPRI
   138a0:	f383 8811 	msr	BASEPRI, r3
	int key = irq_lock();
	int err;

	/* Work cannot be active in multiple queues */
	if (work->work_q && work->work_q != work_q) {
   138a4:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   138a6:	b113      	cbz	r3, 138ae <k_delayed_work_submit_to_queue+0x1e>
   138a8:	4283      	cmp	r3, r0
   138aa:	d009      	beq.n	138c0 <k_delayed_work_submit_to_queue+0x30>
   138ac:	e041      	b.n	13932 <k_delayed_work_submit_to_queue+0xa2>
		err = -EADDRINUSE;
		goto done;
	}

	/* Cancel if work has been submitted */
	if (work->work_q == work_q) {
   138ae:	b138      	cbz	r0, 138c0 <k_delayed_work_submit_to_queue+0x30>
			goto done;
		}
	}

	/* Attach workqueue so the timeout callback can submit it */
	work->work_q = work_q;
   138b0:	6267      	str	r7, [r4, #36]	; 0x24

	if (!delay) {
   138b2:	b95d      	cbnz	r5, 138cc <k_delayed_work_submit_to_queue+0x3c>
		/* Submit work if no ticks is 0 */
		k_work_submit_to_queue(work_q, &work->work);
   138b4:	4638      	mov	r0, r7
   138b6:	4621      	mov	r1, r4
   138b8:	f7ff ff3a 	bl	13730 <k_work_submit_to_queue>
		/* Add timeout */
		_add_timeout(NULL, &work->timeout, NULL,
				_TICK_ALIGN + _ms_to_ticks(delay));
	}

	err = 0;
   138bc:	4628      	mov	r0, r5
   138be:	e03a      	b.n	13936 <k_delayed_work_submit_to_queue+0xa6>
		goto done;
	}

	/* Cancel if work has been submitted */
	if (work->work_q == work_q) {
		err = k_delayed_work_cancel(work);
   138c0:	4620      	mov	r0, r4
   138c2:	f7ff ffad 	bl	13820 <k_delayed_work_cancel>
		if (err < 0) {
   138c6:	2800      	cmp	r0, #0
   138c8:	daf2      	bge.n	138b0 <k_delayed_work_submit_to_queue+0x20>
   138ca:	e034      	b.n	13936 <k_delayed_work_submit_to_queue+0xa6>
				_wait_q_t *wait_q,
				s32_t timeout_in_ticks)
{
	__ASSERT(timeout_in_ticks > 0, "");

	timeout->delta_ticks_from_prev = timeout_in_ticks;
   138cc:	220a      	movs	r2, #10
   138ce:	3509      	adds	r5, #9
   138d0:	fbb5 f5f2 	udiv	r5, r5, r2
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   138d4:	4a19      	ldr	r2, [pc, #100]	; (1393c <k_delayed_work_submit_to_queue+0xac>)
   138d6:	4611      	mov	r1, r2
	timeout->thread = thread;
   138d8:	2300      	movs	r3, #0
   138da:	6163      	str	r3, [r4, #20]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   138dc:	61a3      	str	r3, [r4, #24]
   138de:	f851 3f0c 	ldr.w	r3, [r1, #12]!
				_wait_q_t *wait_q,
				s32_t timeout_in_ticks)
{
	__ASSERT(timeout_in_ticks > 0, "");

	timeout->delta_ticks_from_prev = timeout_in_ticks;
   138e2:	3501      	adds	r5, #1
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   138e4:	428b      	cmp	r3, r1
   138e6:	61e5      	str	r5, [r4, #28]
   138e8:	d108      	bne.n	138fc <k_delayed_work_submit_to_queue+0x6c>
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
   138ea:	60e1      	str	r1, [r4, #12]
	node->prev = list->tail;
   138ec:	6911      	ldr	r1, [r2, #16]
   138ee:	6121      	str	r1, [r4, #16]

	list->tail->next = node;
   138f0:	6911      	ldr	r1, [r2, #16]
		}

		*delta -= in_q->delta_ticks_from_prev;
	}

	sys_dlist_append(&_timeout_q, &timeout->node);
   138f2:	f104 030c 	add.w	r3, r4, #12
   138f6:	600b      	str	r3, [r1, #0]
	list->tail = node;
   138f8:	6113      	str	r3, [r2, #16]
   138fa:	e010      	b.n	1391e <k_delayed_work_submit_to_queue+0x8e>
	if (program_time > 0) {
		*delta += _get_elapsed_program_time();
	}
	adjusted_timeout = *delta;
#endif
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   138fc:	2b00      	cmp	r3, #0
   138fe:	d0f4      	beq.n	138ea <k_delayed_work_submit_to_queue+0x5a>
   13900:	6917      	ldr	r7, [r2, #16]
		if (*delta <= in_q->delta_ticks_from_prev) {
   13902:	69e0      	ldr	r0, [r4, #28]
   13904:	691d      	ldr	r5, [r3, #16]
   13906:	42a8      	cmp	r0, r5
   13908:	dc0b      	bgt.n	13922 <k_delayed_work_submit_to_queue+0x92>
	sys_dnode_t *insert_point, sys_dnode_t *node)
{
	if (!insert_point) {
		sys_dlist_append(list, node);
	} else {
		node->prev = insert_point->prev;
   1390a:	6859      	ldr	r1, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
   1390c:	1a28      	subs	r0, r5, r0
   1390e:	6118      	str	r0, [r3, #16]
   13910:	6121      	str	r1, [r4, #16]
		node->next = insert_point;
   13912:	60e3      	str	r3, [r4, #12]
		insert_point->prev->next = node;
   13914:	6859      	ldr	r1, [r3, #4]
			sys_dlist_insert_before(&_timeout_q, &in_q->node,
   13916:	f104 020c 	add.w	r2, r4, #12
   1391a:	600a      	str	r2, [r1, #0]
		insert_point->prev = node;
   1391c:	605a      	str	r2, [r3, #4]
		/* Add timeout */
		_add_timeout(NULL, &work->timeout, NULL,
				_TICK_ALIGN + _ms_to_ticks(delay));
	}

	err = 0;
   1391e:	2000      	movs	r0, #0
   13920:	e009      	b.n	13936 <k_delayed_work_submit_to_queue+0xa6>
						&timeout->node);
			goto inserted;
		}

		*delta -= in_q->delta_ticks_from_prev;
   13922:	1b40      	subs	r0, r0, r5
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   13924:	42bb      	cmp	r3, r7
   13926:	61e0      	str	r0, [r4, #28]
   13928:	d0df      	beq.n	138ea <k_delayed_work_submit_to_queue+0x5a>
   1392a:	681b      	ldr	r3, [r3, #0]
	if (program_time > 0) {
		*delta += _get_elapsed_program_time();
	}
	adjusted_timeout = *delta;
#endif
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   1392c:	2b00      	cmp	r3, #0
   1392e:	d1e8      	bne.n	13902 <k_delayed_work_submit_to_queue+0x72>
   13930:	e7db      	b.n	138ea <k_delayed_work_submit_to_queue+0x5a>
	int key = irq_lock();
	int err;

	/* Work cannot be active in multiple queues */
	if (work->work_q && work->work_q != work_q) {
		err = -EADDRINUSE;
   13932:	f06f 002f 	mvn.w	r0, #47	; 0x2f
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13936:	f386 8811 	msr	BASEPRI, r6

done:
	irq_unlock(key);

	return err;
}
   1393a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1393c:	20001fe4 	.word	0x20001fe4

00013940 <_OffsetAbsSyms>:

#ifdef CONFIG_FLOAT
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread) -
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
   13940:	4770      	bx	lr
