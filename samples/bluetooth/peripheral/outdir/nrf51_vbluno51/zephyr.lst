
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

00000000 <_vector_table>:

	return r;
}

int printf(const char *_MLIBC_RESTRICT format, ...)
{
       0:	20003748 	.word	0x20003748
       4:	00013ae9 	.word	0x00013ae9
	va_list vargs;
	int     r;

	va_start(vargs, format);
	r = _prf(fputc, DESC(stdout), format, vargs);
       8:	00013b17 	.word	0x00013b17
int printf(const char *_MLIBC_RESTRICT format, ...)
{
	va_list vargs;
	int     r;

	va_start(vargs, format);
       c:	00013989 	.word	0x00013989
	r = _prf(fputc, DESC(stdout), format, vargs);
      10:	00013989 	.word	0x00013989
	va_end(vargs);

	return r;
}
      14:	00013989 	.word	0x00013989
      18:	00013989 	.word	0x00013989
      1c:	00013989 	.word	0x00013989
	uint64_t			double_temp;

	count = 0;

	while ((c = *format++)) {
		if (c != '%') {
      20:	00013989 	.word	0x00013989
      24:	00013989 	.word	0x00013989
      28:	00013989 	.word	0x00013989
      2c:	000137b5 	.word	0x000137b5
			}

			if (c == '.') {
				c = *format++;
				if (c == '*') {
					precision = (int32_t)
      30:	00013989 	.word	0x00013989
      34:	00013989 	.word	0x00013989
					va_arg(vargs, int32_t);
				} else
					precision = _atoi(&format);

				if (precision > MAXFLD)
      38:	00013759 	.word	0x00013759
					precision = -1;
      3c:	00013989 	.word	0x00013989

00000040 <_irq_vector_table>:
				c = *format++;
      40:	00013ab1 00012257 00013ab1 00013ab1     .:..W"...:...:..
			 * No further special processing is done for them.
			 */

			if (strchr("hlLz", c) != NULL) {
				i = c;
				c = *format++;
      50:	00013ab1 00013ab1 00013ab1 00013ab1     .:...:...:...:..
				 */
			}

			need_justifying = false;
			prefix = 0;
			switch (c) {
      60:	00013ab1 00013ab1 00013ab1 00013ab1     .:...:...:...:..
				if (precision != -1)
					pad = ' ';
				break;

			case '%':
				if ((*func)('%', dest) == EOF) {
      70:	00013ab1 00013ab1 00013ab1 00013ab1     .:...:...:...:..
	count = 0;

	while ((c = *format++)) {
		if (c != '%') {
			if ((*func) (c, dest) == EOF) {
				return EOF;
      80:	00013ab1 00013ab1 00013ab1 00013ab1     .:...:...:...:..
		} else {
			fminus = fplus = fspace = falt = false;
			pad = ' ';		/* Default pad character    */
			precision = -1;	/* No precision specified   */

			while (strchr("-+ #0", (c = *format++)) != NULL) {
      90:	00013ab1 00013ab1 00013ab1 00013ab1     .:...:...:...:..
      a0:	00013ab1 00013ab1                       .:...:..

000000a8 <_sw_isr_table>:
				switch (c) {
      a8:	00000000 000014b5 00000000 00013901     .............9..
      b8:	00000000 00013901 00000000 00013901     .....9.......9..
				case '-':
					fminus = true;
					break;

				case '+':
					fplus = true;
      c8:	00000000 00013901 00000000 00013901     .....9.......9..
				}
			}

			if (c == '*') {
				/* Is the width a parameter? */
				width = (int32_t) va_arg(vargs, int32_t);
      d8:	20000964 00001201 00000000 00013901     d.. .........9..
				if (width < 0) {
					fminus = true;
					width = -width;
				}
				c = *format++;
      e8:	00000000 00013901 00000000 00013901     .....9.......9..
			} else if (!isdigit(c))
      f8:	00000000 00013901 00000000 00012215     .....9......."..
	register int   i;

	i = 0;
	p = *sptr;
	p--;
	while (isdigit(((int) *p)))
     108:	00000000 00013901 00000000 0001224f     .....9......O"..
		i = 10 * i + *p++ - '0';
     118:	00000000 00013901 00000000 00013901     .....9.......9..
			 */
			if ((unsigned) width > MAXFLD) {
				width = MAXFLD;
			}

			if (c == '.') {
     128:	00000000 00013901 00000000 00000fa9     .....9..........

	i = 0;
	p = *sptr;
	p--;
	while (isdigit(((int) *p)))
		i = 10 * i + *p++ - '0';
     138:	00000000 00013901 00000000 00013901     .....9.......9..
     148:	00000000 00013901 00000000 00013901     .....9.......9..
			count++;

		} else {
			fminus = fplus = fspace = falt = false;
			pad = ' ';		/* Default pad character    */
			precision = -1;	/* No precision specified   */
     158:	00000000 00013901 00000000 00013901     .....9.......9..
				 */
			}

			need_justifying = false;
			prefix = 0;
			switch (c) {
     168:	00000000 00012245 00000000 00013901     ....E".......9..

00000178 <__gnu_thumb1_case_uqi>:
     178:	b402      	push	{r1}
     17a:	4671      	mov	r1, lr
     17c:	0849      	lsrs	r1, r1, #1
     17e:	0049      	lsls	r1, r1, #1
     180:	5c09      	ldrb	r1, [r1, r0]
     182:	0049      	lsls	r1, r1, #1
     184:	448e      	add	lr, r1
     186:	bc02      	pop	{r1}
     188:	4770      	bx	lr
     18a:	46c0      	nop			; (mov r8, r8)

0000018c <__gnu_thumb1_case_uhi>:
     18c:	b403      	push	{r0, r1}
     18e:	4671      	mov	r1, lr
     190:	0849      	lsrs	r1, r1, #1
     192:	0040      	lsls	r0, r0, #1
     194:	0049      	lsls	r1, r1, #1
     196:	5a09      	ldrh	r1, [r1, r0]
     198:	0049      	lsls	r1, r1, #1
     19a:	448e      	add	lr, r1
     19c:	bc03      	pop	{r0, r1}
     19e:	4770      	bx	lr

000001a0 <__aeabi_uidiv>:
				if (precision != -1)
					pad = ' ';
				break;

			case 's':
				cptr_temp = (char *) va_arg(vargs, char *);
     1a0:	2200      	movs	r2, #0
     1a2:	0843      	lsrs	r3, r0, #1
     1a4:	428b      	cmp	r3, r1
				/* Get the string length */
				for (c = 0; c < MAXFLD; c++) {
     1a6:	d374      	bcc.n	292 <CONFIG_BLUETOOTH_HCI_TX_STACK_SIZE+0x12>
     1a8:	0903      	lsrs	r3, r0, #4

			need_justifying = false;
			prefix = 0;
			switch (c) {
			case 'c':
				buf[0] = (char) ((int32_t) va_arg(vargs, int32_t));
     1aa:	428b      	cmp	r3, r1
     1ac:	d35f      	bcc.n	26e <CONFIG_BLUETOOTH_CONTROLLER_RX_PRIO_STACK_SIZE+0xae>
     1ae:	0a03      	lsrs	r3, r0, #8
     1b0:	428b      	cmp	r3, r1
     1b2:	d344      	bcc.n	23e <CONFIG_BLUETOOTH_CONTROLLER_RX_PRIO_STACK_SIZE+0x7e>
				buf[1] = '\0';
     1b4:	0b03      	lsrs	r3, r0, #12
				need_justifying = true;
				c = 1;
     1b6:	428b      	cmp	r3, r1
			need_justifying = false;
			prefix = 0;
			switch (c) {
			case 'c':
				buf[0] = (char) ((int32_t) va_arg(vargs, int32_t));
				buf[1] = '\0';
     1b8:	d328      	bcc.n	20c <CONFIG_BLUETOOTH_CONTROLLER_RX_PRIO_STACK_SIZE+0x4c>
				need_justifying = true;
				c = 1;
				break;
     1ba:	0c03      	lsrs	r3, r0, #16

			case 'd':
			case 'i':
				int32_temp = (int32_t) va_arg(vargs, int32_t);
     1bc:	428b      	cmp	r3, r1
     1be:	d30d      	bcc.n	1dc <CONFIG_BLUETOOTH_CONTROLLER_RX_PRIO_STACK_SIZE+0x1c>
     1c0:	22ff      	movs	r2, #255	; 0xff
     1c2:	0209      	lsls	r1, r1, #8

#if (MAXFLD < 10)
  #error buffer size MAXFLD is too small
#endif

	if (value < 0) {
     1c4:	ba12      	rev	r2, r2
     1c6:	0c03      	lsrs	r3, r0, #16
		*buf++ = '-';
     1c8:	428b      	cmp	r3, r1
     1ca:	d302      	bcc.n	1d2 <CONFIG_BLUETOOTH_CONTROLLER_RX_PRIO_STACK_SIZE+0x12>
		if (value != 0x80000000)
     1cc:	1212      	asrs	r2, r2, #8
			value = -value;
     1ce:	0209      	lsls	r1, r1, #8
  #error buffer size MAXFLD is too small
#endif

	if (value < 0) {
		*buf++ = '-';
		if (value != 0x80000000)
     1d0:	d065      	beq.n	29e <CONFIG_BLUETOOTH_HCI_TX_STACK_SIZE+0x1e>
     1d2:	0b03      	lsrs	r3, r0, #12
     1d4:	428b      	cmp	r3, r1
     1d6:	d319      	bcc.n	20c <CONFIG_BLUETOOTH_CONTROLLER_RX_PRIO_STACK_SIZE+0x4c>
     1d8:	e000      	b.n	1dc <CONFIG_BLUETOOTH_CONTROLLER_RX_PRIO_STACK_SIZE+0x1c>
			value = -value;
	} else if (fplus)
     1da:	0a09      	lsrs	r1, r1, #8
     1dc:	0bc3      	lsrs	r3, r0, #15
     1de:	428b      	cmp	r3, r1
		*buf++ = '+';
     1e0:	d301      	bcc.n	1e6 <CONFIG_BLUETOOTH_CONTROLLER_RX_PRIO_STACK_SIZE+0x26>
     1e2:	03cb      	lsls	r3, r1, #15
	else if (fspace)
     1e4:	1ac0      	subs	r0, r0, r3
     1e6:	4152      	adcs	r2, r2
     1e8:	0b83      	lsrs	r3, r0, #14
     1ea:	428b      	cmp	r3, r1
		*buf++ = ' ';
     1ec:	d301      	bcc.n	1f2 <CONFIG_BLUETOOTH_CONTROLLER_RX_PRIO_STACK_SIZE+0x32>
     1ee:	038b      	lsls	r3, r1, #14
     1f0:	1ac0      	subs	r0, r0, r3
     1f2:	4152      	adcs	r2, r2
     1f4:	0b43      	lsrs	r3, r0, #13
     1f6:	428b      	cmp	r3, r1
     1f8:	d301      	bcc.n	1fe <CONFIG_BLUETOOTH_CONTROLLER_RX_PRIO_STACK_SIZE+0x3e>
#if (MAXFLD < 10)
  #error buffer size MAXFLD is too small
#endif

	if (value < 0) {
		*buf++ = '-';
     1fa:	034b      	lsls	r3, r1, #13
     1fc:	1ac0      	subs	r0, r0, r3
     1fe:	4152      	adcs	r2, r2
     200:	0b03      	lsrs	r3, r0, #12
	return (buf - buf0) + _to_x(buf, value, 8, precision);
}

static int _to_udec(char *buf, uint32_t value, int precision)
{
	return _to_x(buf, value, 10, precision);
     202:	428b      	cmp	r3, r1
     204:	d301      	bcc.n	20a <CONFIG_BLUETOOTH_CONTROLLER_RX_PRIO_STACK_SIZE+0x4a>
     206:	030b      	lsls	r3, r1, #12
     208:	1ac0      	subs	r0, r0, r3
     20a:	4152      	adcs	r2, r2

			case 'd':
			case 'i':
				int32_temp = (int32_t) va_arg(vargs, int32_t);
				c = _to_dec(buf, int32_temp, fplus, fspace, precision);
				if (fplus || fspace || (int32_temp < 0))
     20c:	0ac3      	lsrs	r3, r0, #11
     20e:	428b      	cmp	r3, r1
	} else if (fplus)
		*buf++ = '+';
	else if (fspace)
		*buf++ = ' ';

	return (buf + _to_udec(buf, (uint32_t) value, precision)) - start;
     210:	d301      	bcc.n	216 <CONFIG_BLUETOOTH_CONTROLLER_RX_PRIO_STACK_SIZE+0x56>
     212:	02cb      	lsls	r3, r1, #11
     214:	1ac0      	subs	r0, r0, r3

			case 'd':
			case 'i':
				int32_temp = (int32_t) va_arg(vargs, int32_t);
				c = _to_dec(buf, int32_temp, fplus, fspace, precision);
				if (fplus || fspace || (int32_temp < 0))
     216:	4152      	adcs	r2, r2
					prefix = 1;
     218:	0a83      	lsrs	r3, r0, #10

			case 'd':
			case 'i':
				int32_temp = (int32_t) va_arg(vargs, int32_t);
				c = _to_dec(buf, int32_temp, fplus, fspace, precision);
				if (fplus || fspace || (int32_temp < 0))
     21a:	428b      	cmp	r3, r1
     21c:	d301      	bcc.n	222 <CONFIG_BLUETOOTH_CONTROLLER_RX_PRIO_STACK_SIZE+0x62>
     21e:	028b      	lsls	r3, r1, #10
				 * optimized out.
				 */
			}

			need_justifying = false;
			prefix = 0;
     220:	1ac0      	subs	r0, r0, r3
     222:	4152      	adcs	r2, r2
				union {
					double d;
					uint64_t i;
				} u;

				u.d = (double) va_arg(vargs, double);
     224:	0a43      	lsrs	r3, r0, #9
     226:	428b      	cmp	r3, r1
     228:	d301      	bcc.n	22e <CONFIG_BLUETOOTH_CONTROLLER_RX_PRIO_STACK_SIZE+0x6e>
     22a:	024b      	lsls	r3, r1, #9
				double_temp = u.i;
     22c:	1ac0      	subs	r0, r0, r3
				union {
					double d;
					uint64_t i;
				} u;

				u.d = (double) va_arg(vargs, double);
     22e:	4152      	adcs	r2, r2
     230:	0a03      	lsrs	r3, r0, #8
	uint64_t        ltemp;
	int             prune_zero;
	char           *start = buf;

	exp = double_temp >> 52 & 0x7ff;
	fract = (double_temp << 11) & ~HIGHBIT64;
     232:	428b      	cmp	r3, r1
     234:	d301      	bcc.n	23a <CONFIG_BLUETOOTH_CONTROLLER_RX_PRIO_STACK_SIZE+0x7a>
     236:	020b      	lsls	r3, r1, #8
     238:	1ac0      	subs	r0, r0, r3
	sign = !!(double_temp & HIGHBIT64);


	if (exp == 0x7ff) {
     23a:	4152      	adcs	r2, r2
	uint64_t        fract;
	uint64_t        ltemp;
	int             prune_zero;
	char           *start = buf;

	exp = double_temp >> 52 & 0x7ff;
     23c:	d2cd      	bcs.n	1da <CONFIG_BLUETOOTH_CONTROLLER_RX_PRIO_STACK_SIZE+0x1a>
	fract = (double_temp << 11) & ~HIGHBIT64;
     23e:	09c3      	lsrs	r3, r0, #7
     240:	428b      	cmp	r3, r1
	uint64_t        fract;
	uint64_t        ltemp;
	int             prune_zero;
	char           *start = buf;

	exp = double_temp >> 52 & 0x7ff;
     242:	d301      	bcc.n	248 <CONFIG_BLUETOOTH_CONTROLLER_RX_PRIO_STACK_SIZE+0x88>
	fract = (double_temp << 11) & ~HIGHBIT64;
     244:	01cb      	lsls	r3, r1, #7
     246:	1ac0      	subs	r0, r0, r3
	sign = !!(double_temp & HIGHBIT64);


	if (exp == 0x7ff) {
     248:	4152      	adcs	r2, r2
     24a:	0983      	lsrs	r3, r0, #6
		if (!fract) {
     24c:	428b      	cmp	r3, r1
     24e:	d301      	bcc.n	254 <CONFIG_BLUETOOTH_CONTROLLER_RX_PRIO_STACK_SIZE+0x94>
     250:	018b      	lsls	r3, r1, #6
     252:	1ac0      	subs	r0, r0, r3
			*buf++ = sign ? '-' : '+';
     254:	4152      	adcs	r2, r2
     256:	0943      	lsrs	r3, r0, #5
     258:	428b      	cmp	r3, r1
     25a:	d301      	bcc.n	260 <CONFIG_BLUETOOTH_CONTROLLER_RX_PRIO_STACK_SIZE+0xa0>
     25c:	014b      	lsls	r3, r1, #5
			*buf++ = 'I';
     25e:	1ac0      	subs	r0, r0, r3
     260:	4152      	adcs	r2, r2
			*buf++ = 'N';
     262:	0903      	lsrs	r3, r0, #4
     264:	428b      	cmp	r3, r1
			*buf++ = 'F';
     266:	d301      	bcc.n	26c <CONFIG_BLUETOOTH_CONTROLLER_RX_PRIO_STACK_SIZE+0xac>
     268:	010b      	lsls	r3, r1, #4
     26a:	1ac0      	subs	r0, r0, r3
     26c:	4152      	adcs	r2, r2
		} else {
			*buf++ = 'N';
     26e:	08c3      	lsrs	r3, r0, #3
			*buf++ = 'a';
     270:	428b      	cmp	r3, r1
			*buf++ = sign ? '-' : '+';
			*buf++ = 'I';
			*buf++ = 'N';
			*buf++ = 'F';
		} else {
			*buf++ = 'N';
     272:	d301      	bcc.n	278 <CONFIG_BLUETOOTH_CONTROLLER_RX_PRIO_STACK_SIZE+0xb8>
			*buf++ = 'a';
			*buf++ = 'N';
     274:	00cb      	lsls	r3, r1, #3
			*buf++ = 'I';
			*buf++ = 'N';
			*buf++ = 'F';
		} else {
			*buf++ = 'N';
			*buf++ = 'a';
     276:	1ac0      	subs	r0, r0, r3
			*buf++ = 'N';
     278:	4152      	adcs	r2, r2
     27a:	0883      	lsrs	r3, r0, #2
     27c:	428b      	cmp	r3, r1
		}
		*buf = 0;
     27e:	d301      	bcc.n	284 <CONFIG_BLUETOOTH_HCI_TX_STACK_SIZE+0x4>
		return buf - start;
     280:	008b      	lsls	r3, r1, #2
		} else {
			*buf++ = 'N';
			*buf++ = 'a';
			*buf++ = 'N';
		}
		*buf = 0;
     282:	1ac0      	subs	r0, r0, r3
		return buf - start;
     284:	4152      	adcs	r2, r2
     286:	0843      	lsrs	r3, r0, #1
	}

	if ((exp | fract) != 0) {
     288:	428b      	cmp	r3, r1
     28a:	d301      	bcc.n	290 <CONFIG_BLUETOOTH_HCI_TX_STACK_SIZE+0x10>
     28c:	004b      	lsls	r3, r1, #1
     28e:	1ac0      	subs	r0, r0, r3
		exp -= (1023 - 1);	/* +1 since .1 vs 1. */
     290:	4152      	adcs	r2, r2
		fract |= HIGHBIT64;
     292:	1a41      	subs	r1, r0, r1
		*buf = 0;
		return buf - start;
	}

	if ((exp | fract) != 0) {
		exp -= (1023 - 1);	/* +1 since .1 vs 1. */
     294:	d200      	bcs.n	298 <CONFIG_BLUETOOTH_HCI_TX_STACK_SIZE+0x18>
		fract |= HIGHBIT64;
     296:	4601      	mov	r1, r0
     298:	4152      	adcs	r2, r2
     29a:	4610      	mov	r0, r2
     29c:	4770      	bx	lr
		decexp = true;		/* Wasn't zero */
	} else
		decexp = false;		/* It was zero */

	if (decexp && sign) {
     29e:	e7ff      	b.n	2a0 <CONFIG_BLUETOOTH_HCI_TX_STACK_SIZE+0x20>
     2a0:	b501      	push	{r0, lr}
		*buf++ = '-';
     2a2:	2000      	movs	r0, #0
     2a4:	f000 f8f0 	bl	488 <__aeabi_idiv0>
	} else if (fplus) {
     2a8:	bd02      	pop	{r1, pc}
     2aa:	46c0      	nop			; (mov r8, r8)

000002ac <__aeabi_uidivmod>:
     2ac:	2900      	cmp	r1, #0
     2ae:	d0f7      	beq.n	2a0 <CONFIG_BLUETOOTH_HCI_TX_STACK_SIZE+0x20>
		*buf++ = '+';
     2b0:	e776      	b.n	1a0 <__aeabi_uidiv>
     2b2:	4770      	bx	lr

000002b4 <__aeabi_idiv>:
	} else if (fspace) {
     2b4:	4603      	mov	r3, r0
     2b6:	430b      	orrs	r3, r1
     2b8:	d47f      	bmi.n	3ba <CONFIG_BLUETOOTH_RPA_TIMEOUT+0x36>
     2ba:	2200      	movs	r2, #0
		*buf++ = ' ';
     2bc:	0843      	lsrs	r3, r0, #1
     2be:	428b      	cmp	r3, r1
     2c0:	d374      	bcc.n	3ac <CONFIG_BLUETOOTH_RPA_TIMEOUT+0x28>
     2c2:	0903      	lsrs	r3, r0, #4
     2c4:	428b      	cmp	r3, r1
	}

	decexp = 0;
     2c6:	d35f      	bcc.n	388 <CONFIG_BLUETOOTH_RPA_TIMEOUT+0x4>
     2c8:	0a03      	lsrs	r3, r0, #8
	while (exp <= -3) {
     2ca:	428b      	cmp	r3, r1
     2cc:	d344      	bcc.n	358 <CONFIG_BLUETOOTH_DEVICE_APPEARANCE+0x17>
		while ((fract >> 32) >= (MAXFP1 / 5)) {
     2ce:	0b03      	lsrs	r3, r0, #12
     2d0:	428b      	cmp	r3, r1
     2d2:	d328      	bcc.n	326 <__aeabi_idiv+0x72>
     2d4:	0c03      	lsrs	r3, r0, #16
     2d6:	428b      	cmp	r3, r1
			_rlrshift(&fract);
     2d8:	d30d      	bcc.n	2f6 <__aeabi_idiv+0x42>
     2da:	22ff      	movs	r2, #255	; 0xff
     2dc:	0209      	lsls	r1, r1, #8
			exp++;
     2de:	ba12      	rev	r2, r2
     2e0:	0c03      	lsrs	r3, r0, #16
		}
		fract *= 5;
     2e2:	428b      	cmp	r3, r1
     2e4:	d302      	bcc.n	2ec <__aeabi_idiv+0x38>
     2e6:	1212      	asrs	r2, r2, #8
     2e8:	0209      	lsls	r1, r1, #8
		exp++;
		decexp--;
     2ea:	d065      	beq.n	3b8 <CONFIG_BLUETOOTH_RPA_TIMEOUT+0x34>
	while (exp <= -3) {
		while ((fract >> 32) >= (MAXFP1 / 5)) {
			_rlrshift(&fract);
			exp++;
		}
		fract *= 5;
     2ec:	0b03      	lsrs	r3, r0, #12
     2ee:	428b      	cmp	r3, r1
		exp++;
		decexp--;
     2f0:	d319      	bcc.n	326 <__aeabi_idiv+0x72>
     2f2:	e000      	b.n	2f6 <__aeabi_idiv+0x42>
     2f4:	0a09      	lsrs	r1, r1, #8

		while ((fract >> 32) <= (MAXFP1 / 2)) {
     2f6:	0bc3      	lsrs	r3, r0, #15
		while ((fract >> 32) >= (MAXFP1 / 5)) {
			_rlrshift(&fract);
			exp++;
		}
		fract *= 5;
		exp++;
     2f8:	428b      	cmp	r3, r1
		decexp--;

		while ((fract >> 32) <= (MAXFP1 / 2)) {
     2fa:	d301      	bcc.n	300 <__aeabi_idiv+0x4c>
     2fc:	03cb      	lsls	r3, r1, #15
			fract <<= 1;
     2fe:	1ac0      	subs	r0, r0, r3
     300:	4152      	adcs	r2, r2
			exp--;
     302:	0b83      	lsrs	r3, r0, #14
     304:	428b      	cmp	r3, r1
     306:	d301      	bcc.n	30c <__aeabi_idiv+0x58>
     308:	038b      	lsls	r3, r1, #14
     30a:	1ac0      	subs	r0, r0, r3
     30c:	4152      	adcs	r2, r2
     30e:	0b43      	lsrs	r3, r0, #13
     310:	428b      	cmp	r3, r1
     312:	d301      	bcc.n	318 <__aeabi_idiv+0x64>
     314:	034b      	lsls	r3, r1, #13
     316:	1ac0      	subs	r0, r0, r3
     318:	4152      	adcs	r2, r2
     31a:	0b03      	lsrs	r3, r0, #12
     31c:	428b      	cmp	r3, r1
     31e:	d301      	bcc.n	324 <__aeabi_idiv+0x70>
     320:	030b      	lsls	r3, r1, #12
     322:	1ac0      	subs	r0, r0, r3
     324:	4152      	adcs	r2, r2
     326:	0ac3      	lsrs	r3, r0, #11
     328:	428b      	cmp	r3, r1
     32a:	d301      	bcc.n	330 <__aeabi_idiv+0x7c>
     32c:	02cb      	lsls	r3, r1, #11
     32e:	1ac0      	subs	r0, r0, r3
     330:	4152      	adcs	r2, r2
     332:	0a83      	lsrs	r3, r0, #10
		}
	}

	while (exp > 0) {
     334:	428b      	cmp	r3, r1
     336:	d301      	bcc.n	33c <__aeabi_idiv+0x88>
		_ldiv5(&fract);
     338:	028b      	lsls	r3, r1, #10
     33a:	1ac0      	subs	r0, r0, r3
     33c:	4152      	adcs	r2, r2
		exp--;
		decexp++;
     33e:	0a43      	lsrs	r3, r0, #9
     340:	428b      	cmp	r3, r1
		while ((fract >> 32) <= (MAXFP1 / 2)) {
     342:	d301      	bcc.n	348 <CONFIG_BLUETOOTH_DEVICE_APPEARANCE+0x7>
	}

	while (exp > 0) {
		_ldiv5(&fract);
		exp--;
		decexp++;
     344:	024b      	lsls	r3, r1, #9
		}
	}

	while (exp > 0) {
		_ldiv5(&fract);
		exp--;
     346:	1ac0      	subs	r0, r0, r3
		decexp++;
     348:	4152      	adcs	r2, r2
     34a:	0a03      	lsrs	r3, r0, #8
     34c:	428b      	cmp	r3, r1
		while ((fract >> 32) <= (MAXFP1 / 2)) {
     34e:	d301      	bcc.n	354 <CONFIG_BLUETOOTH_DEVICE_APPEARANCE+0x13>
     350:	020b      	lsls	r3, r1, #8
			fract <<= 1;
     352:	1ac0      	subs	r0, r0, r3
     354:	4152      	adcs	r2, r2
			exp--;
     356:	d2cd      	bcs.n	2f4 <__aeabi_idiv+0x40>
     358:	09c3      	lsrs	r3, r0, #7
     35a:	428b      	cmp	r3, r1
		}
	}

	while (exp < (0 + 4)) {
		_rlrshift(&fract);
     35c:	d301      	bcc.n	362 <CONFIG_BLUETOOTH_DEVICE_APPEARANCE+0x21>
		exp++;
     35e:	01cb      	lsls	r3, r1, #7
			exp--;
		}
	}

	while (exp < (0 + 4)) {
		_rlrshift(&fract);
     360:	1ac0      	subs	r0, r0, r3
     362:	4152      	adcs	r2, r2
			fract <<= 1;
			exp--;
		}
	}

	while (exp < (0 + 4)) {
     364:	0983      	lsrs	r3, r0, #6
     366:	428b      	cmp	r3, r1
		_rlrshift(&fract);
		exp++;
	}

	if (precision < 0)
     368:	d301      	bcc.n	36e <CONFIG_BLUETOOTH_DEVICE_APPEARANCE+0x2d>
     36a:	018b      	lsls	r3, r1, #6
		precision = 6;		/* Default precision if none given */
     36c:	1ac0      	subs	r0, r0, r3
	prune_zero = false;		/* Assume trailing 0's allowed     */
	if ((c == 'g') || (c == 'G')) {
     36e:	4152      	adcs	r2, r2
     370:	0943      	lsrs	r3, r0, #5
     372:	428b      	cmp	r3, r1
     374:	d301      	bcc.n	37a <CONFIG_BLUETOOTH_DEVICE_APPEARANCE+0x39>
     376:	014b      	lsls	r3, r1, #5
		exp++;
	}

	if (precision < 0)
		precision = 6;		/* Default precision if none given */
	prune_zero = false;		/* Assume trailing 0's allowed     */
     378:	1ac0      	subs	r0, r0, r3
     37a:	4152      	adcs	r2, r2
	if ((c == 'g') || (c == 'G')) {
		if (!falt && (precision > 0))
     37c:	0903      	lsrs	r3, r0, #4
     37e:	428b      	cmp	r3, r1
     380:	d301      	bcc.n	386 <CONFIG_BLUETOOTH_RPA_TIMEOUT+0x2>
		exp++;
	}

	if (precision < 0)
		precision = 6;		/* Default precision if none given */
	prune_zero = false;		/* Assume trailing 0's allowed     */
     382:	010b      	lsls	r3, r1, #4
     384:	1ac0      	subs	r0, r0, r3
     386:	4152      	adcs	r2, r2
     388:	08c3      	lsrs	r3, r0, #3
	if ((c == 'g') || (c == 'G')) {
		if (!falt && (precision > 0))
			prune_zero = true;
		if ((decexp < (-4 + 1)) || (decexp > (precision + 1))) {
     38a:	428b      	cmp	r3, r1
     38c:	d301      	bcc.n	392 <CONFIG_BLUETOOTH_RPA_TIMEOUT+0xe>
     38e:	00cb      	lsls	r3, r1, #3
     390:	1ac0      	subs	r0, r0, r3
     392:	4152      	adcs	r2, r2
     394:	0883      	lsrs	r3, r0, #2
     396:	428b      	cmp	r3, r1
			if (c == 'g')
     398:	d301      	bcc.n	39e <CONFIG_BLUETOOTH_RPA_TIMEOUT+0x1a>
     39a:	008b      	lsls	r3, r1, #2
				c = 'e';
			else
				c = 'E';
     39c:	1ac0      	subs	r0, r0, r3
     39e:	4152      	adcs	r2, r2
		exp++;
	}

	if (precision < 0)
		precision = 6;		/* Default precision if none given */
	prune_zero = false;		/* Assume trailing 0's allowed     */
     3a0:	0843      	lsrs	r3, r0, #1
     3a2:	428b      	cmp	r3, r1
				c = 'E';
		} else
			c = 'f';
	}

	if (c == 'f') {
     3a4:	d301      	bcc.n	3aa <CONFIG_BLUETOOTH_RPA_TIMEOUT+0x26>
     3a6:	004b      	lsls	r3, r1, #1
		exp = precision + decexp;
     3a8:	1ac0      	subs	r0, r0, r3
     3aa:	4152      	adcs	r2, r2
     3ac:	1a41      	subs	r1, r0, r1
     3ae:	d200      	bcs.n	3b2 <CONFIG_BLUETOOTH_RPA_TIMEOUT+0x2e>
     3b0:	4601      	mov	r1, r0
     3b2:	4152      	adcs	r2, r2
     3b4:	4610      	mov	r0, r2
	if ((c == 'g') || (c == 'G')) {
		if (!falt && (precision > 0))
			prune_zero = true;
		if ((decexp < (-4 + 1)) || (decexp > (precision + 1))) {
			if (c == 'g')
				c = 'e';
     3b6:	4770      	bx	lr
	if (c == 'f') {
		exp = precision + decexp;
		if (exp < 0)
			exp = 0;
	} else
		exp = precision + 1;
     3b8:	e05d      	b.n	476 <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x76>
	digit_count = 16;
     3ba:	0fca      	lsrs	r2, r1, #31
     3bc:	d000      	beq.n	3c0 <CONFIG_BLUETOOTH_RPA_TIMEOUT+0x3c>
     3be:	4249      	negs	r1, r1
     3c0:	1003      	asrs	r3, r0, #32
     3c2:	d300      	bcc.n	3c6 <CONFIG_BLUETOOTH_RPA_TIMEOUT+0x42>
	if (exp > 16)
		exp = 16;

	ltemp = 0x0800000000000000;
     3c4:	4240      	negs	r0, r0
     3c6:	4053      	eors	r3, r2
     3c8:	2200      	movs	r2, #0
     3ca:	469c      	mov	ip, r3
     3cc:	0903      	lsrs	r3, r0, #4
	while (exp--) {
     3ce:	428b      	cmp	r3, r1
     3d0:	d32d      	bcc.n	42e <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x2e>
		_ldiv5(&ltemp);
     3d2:	0a03      	lsrs	r3, r0, #8
     3d4:	428b      	cmp	r3, r1
     3d6:	d312      	bcc.n	3fe <CONFIG_BLUETOOTH_RPA_TIMEOUT+0x7a>
		_rlrshift(&ltemp);
     3d8:	22fc      	movs	r2, #252	; 0xfc
     3da:	0189      	lsls	r1, r1, #6
     3dc:	ba12      	rev	r2, r2
     3de:	0a03      	lsrs	r3, r0, #8
	}

	fract += ltemp;
     3e0:	428b      	cmp	r3, r1
     3e2:	d30c      	bcc.n	3fe <CONFIG_BLUETOOTH_RPA_TIMEOUT+0x7a>
     3e4:	0189      	lsls	r1, r1, #6
     3e6:	1192      	asrs	r2, r2, #6
     3e8:	428b      	cmp	r3, r1
     3ea:	d308      	bcc.n	3fe <CONFIG_BLUETOOTH_RPA_TIMEOUT+0x7a>
     3ec:	0189      	lsls	r1, r1, #6
     3ee:	1192      	asrs	r2, r2, #6
	if ((fract >> 32) & 0xF0000000) {
     3f0:	428b      	cmp	r3, r1
     3f2:	d304      	bcc.n	3fe <CONFIG_BLUETOOTH_RPA_TIMEOUT+0x7a>
		_ldiv5(&fract);
     3f4:	0189      	lsls	r1, r1, #6
     3f6:	d03a      	beq.n	46e <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x6e>
     3f8:	1192      	asrs	r2, r2, #6
		_rlrshift(&fract);
     3fa:	e000      	b.n	3fe <CONFIG_BLUETOOTH_RPA_TIMEOUT+0x7a>
     3fc:	0989      	lsrs	r1, r1, #6
     3fe:	09c3      	lsrs	r3, r0, #7
		decexp++;
     400:	428b      	cmp	r3, r1
     402:	d301      	bcc.n	408 <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x8>
     404:	01cb      	lsls	r3, r1, #7
	}

	if (c == 'f') {
     406:	1ac0      	subs	r0, r0, r3
     408:	4152      	adcs	r2, r2
		if (decexp > 0) {
     40a:	0983      	lsrs	r3, r0, #6
     40c:	428b      	cmp	r3, r1
     40e:	d301      	bcc.n	414 <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x14>
     410:	018b      	lsls	r3, r1, #6
			while (decexp > 0) {
				*buf++ = _get_digit(&fract, &digit_count);
     412:	1ac0      	subs	r0, r0, r3
     414:	4152      	adcs	r2, r2
     416:	0943      	lsrs	r3, r0, #5
     418:	428b      	cmp	r3, r1
     41a:	d301      	bcc.n	420 <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x20>
     41c:	014b      	lsls	r3, r1, #5
		decexp++;
	}

	if (c == 'f') {
		if (decexp > 0) {
			while (decexp > 0) {
     41e:	1ac0      	subs	r0, r0, r3
     420:	4152      	adcs	r2, r2
     422:	0903      	lsrs	r3, r0, #4
     424:	428b      	cmp	r3, r1
     426:	d301      	bcc.n	42c <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x2c>
				*buf++ = _get_digit(&fract, &digit_count);
				decexp--;
			}
		} else
			*buf++ = '0';
     428:	010b      	lsls	r3, r1, #4
     42a:	1ac0      	subs	r0, r0, r3
     42c:	4152      	adcs	r2, r2
		if (falt || (precision > 0))
     42e:	08c3      	lsrs	r3, r0, #3
     430:	428b      	cmp	r3, r1
     432:	d301      	bcc.n	438 <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x38>
     434:	00cb      	lsls	r3, r1, #3
     436:	1ac0      	subs	r0, r0, r3
     438:	4152      	adcs	r2, r2
			*buf++ = '.';
     43a:	0883      	lsrs	r3, r0, #2
     43c:	428b      	cmp	r3, r1
     43e:	d301      	bcc.n	444 <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x44>
     440:	008b      	lsls	r3, r1, #2
     442:	1ac0      	subs	r0, r0, r3
		while (precision-- > 0) {
     444:	4152      	adcs	r2, r2
     446:	d2d9      	bcs.n	3fc <CONFIG_BLUETOOTH_RPA_TIMEOUT+0x78>
     448:	0843      	lsrs	r3, r0, #1
			if (decexp < 0) {
     44a:	428b      	cmp	r3, r1
     44c:	d301      	bcc.n	452 <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x52>
     44e:	004b      	lsls	r3, r1, #1
				*buf++ = '0';
     450:	1ac0      	subs	r0, r0, r3
     452:	4152      	adcs	r2, r2
				decexp++;
     454:	1a41      	subs	r1, r0, r1
     456:	d200      	bcs.n	45a <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x5a>
     458:	4601      	mov	r1, r0
     45a:	4663      	mov	r3, ip
			} else
				*buf++ = _get_digit(&fract, &digit_count);
     45c:	4152      	adcs	r2, r2
     45e:	105b      	asrs	r3, r3, #1
     460:	4610      	mov	r0, r2
     462:	d301      	bcc.n	468 <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x68>
     464:	4240      	negs	r0, r0
     466:	2b00      	cmp	r3, #0
     468:	d500      	bpl.n	46c <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x6c>
     46a:	4249      	negs	r1, r1
     46c:	4770      	bx	lr
     46e:	4663      	mov	r3, ip
		}
	} else {
		*buf = _get_digit(&fract, &digit_count);
     470:	105b      	asrs	r3, r3, #1
     472:	d300      	bcc.n	476 <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x76>
     474:	4240      	negs	r0, r0
     476:	b501      	push	{r0, lr}
     478:	2000      	movs	r0, #0
		if (*buf++ != '0')
			decexp--;
     47a:	f000 f805 	bl	488 <__aeabi_idiv0>
     47e:	bd02      	pop	{r1, pc}

00000480 <__aeabi_idivmod>:
     480:	2900      	cmp	r1, #0
     482:	d0f8      	beq.n	476 <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x76>
     484:	e716      	b.n	2b4 <__aeabi_idiv>
		if (falt || (precision > 0))
     486:	4770      	bx	lr

00000488 <__aeabi_idiv0>:
     488:	4770      	bx	lr
     48a:	46c0      	nop			; (mov r8, r8)

0000048c <__aeabi_uldivmod>:
			} else
				*buf++ = _get_digit(&fract, &digit_count);
		}
	} else {
		*buf = _get_digit(&fract, &digit_count);
		if (*buf++ != '0')
     48c:	2b00      	cmp	r3, #0
			decexp--;
		if (falt || (precision > 0))
     48e:	d111      	bne.n	4b4 <__aeabi_uldivmod+0x28>
     490:	2a00      	cmp	r2, #0
			*buf++ = '.';
     492:	d10f      	bne.n	4b4 <__aeabi_uldivmod+0x28>
     494:	2900      	cmp	r1, #0
     496:	d100      	bne.n	49a <__aeabi_uldivmod+0xe>
     498:	2800      	cmp	r0, #0
		while (precision-- > 0)
     49a:	d002      	beq.n	4a2 <__aeabi_uldivmod+0x16>
     49c:	2100      	movs	r1, #0
			*buf++ = _get_digit(&fract, &digit_count);
     49e:	43c9      	mvns	r1, r1
     4a0:	1c08      	adds	r0, r1, #0
     4a2:	b407      	push	{r0, r1, r2}
     4a4:	4802      	ldr	r0, [pc, #8]	; (4b0 <__aeabi_uldivmod+0x24>)
     4a6:	a102      	add	r1, pc, #8	; (adr r1, 4b0 <__aeabi_uldivmod+0x24>)
     4a8:	1840      	adds	r0, r0, r1
     4aa:	9002      	str	r0, [sp, #8]
	}

	if (prune_zero) {
     4ac:	bd03      	pop	{r0, r1, pc}
     4ae:	46c0      	nop			; (mov r8, r8)
     4b0:	ffffffd9 	.word	0xffffffd9
		while (*--buf == '0')
     4b4:	b403      	push	{r0, r1}
     4b6:	4668      	mov	r0, sp
     4b8:	b501      	push	{r0, lr}
     4ba:	9802      	ldr	r0, [sp, #8]
			;
		if (*buf != '.')
     4bc:	f000 f856 	bl	56c <__udivmoddi4>
     4c0:	9b01      	ldr	r3, [sp, #4]
			buf++;
	}

	if ((c == 'e') || (c == 'E')) {
     4c2:	469e      	mov	lr, r3
     4c4:	b002      	add	sp, #8
     4c6:	bc0c      	pop	{r2, r3}
     4c8:	4770      	bx	lr
     4ca:	46c0      	nop			; (mov r8, r8)

000004cc <__aeabi_lmul>:
		*buf++ = (char) c;
		if (decexp < 0) {
     4cc:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (*buf != '.')
			buf++;
	}

	if ((c == 'e') || (c == 'E')) {
		*buf++ = (char) c;
     4ce:	464f      	mov	r7, r9
     4d0:	4646      	mov	r6, r8
		if (decexp < 0) {
     4d2:	b4c0      	push	{r6, r7}
     4d4:	0416      	lsls	r6, r2, #16
			decexp = -decexp;
     4d6:	0c36      	lsrs	r6, r6, #16
     4d8:	4699      	mov	r9, r3
			*buf++ = '-';
     4da:	0033      	movs	r3, r6
     4dc:	0405      	lsls	r5, r0, #16
		} else
			*buf++ = '+';
     4de:	0c2c      	lsrs	r4, r5, #16
     4e0:	0c07      	lsrs	r7, r0, #16
		*buf++ = (char) ((decexp / 100) + '0');
     4e2:	0c15      	lsrs	r5, r2, #16
     4e4:	4363      	muls	r3, r4
     4e6:	437e      	muls	r6, r7
     4e8:	436f      	muls	r7, r5
     4ea:	4365      	muls	r5, r4
     4ec:	0c1c      	lsrs	r4, r3, #16
		decexp %= 100;
     4ee:	19ad      	adds	r5, r5, r6
     4f0:	1964      	adds	r4, r4, r5
     4f2:	469c      	mov	ip, r3
     4f4:	42a6      	cmp	r6, r4
     4f6:	d903      	bls.n	500 <__aeabi_lmul+0x34>
		*buf++ = (char) ((decexp / 10) + '0');
     4f8:	2380      	movs	r3, #128	; 0x80
     4fa:	025b      	lsls	r3, r3, #9
     4fc:	4698      	mov	r8, r3
     4fe:	4447      	add	r7, r8
     500:	4663      	mov	r3, ip
     502:	0c25      	lsrs	r5, r4, #16
		decexp %= 10;
		*buf++ = (char) (decexp + '0');
     504:	19ef      	adds	r7, r5, r7
     506:	041d      	lsls	r5, r3, #16
     508:	464b      	mov	r3, r9
     50a:	434a      	muls	r2, r1
     50c:	4343      	muls	r3, r0
     50e:	0c2d      	lsrs	r5, r5, #16
     510:	0424      	lsls	r4, r4, #16
	}
	*buf = 0;
     512:	1964      	adds	r4, r4, r5

	return buf - start;
     514:	1899      	adds	r1, r3, r2
		decexp %= 100;
		*buf++ = (char) ((decexp / 10) + '0');
		decexp %= 10;
		*buf++ = (char) (decexp + '0');
	}
	*buf = 0;
     516:	19c9      	adds	r1, r1, r7

	return buf - start;
     518:	0020      	movs	r0, r4
				double_temp = u.i;
			}

				c = _to_float(buf, double_temp, c, falt, fplus,
					      fspace, precision);
				if (fplus || fspace || (buf[0] == '-'))
     51a:	bc0c      	pop	{r2, r3}
     51c:	4690      	mov	r8, r2
					prefix = 1;
     51e:	4699      	mov	r9, r3
				double_temp = u.i;
			}

				c = _to_float(buf, double_temp, c, falt, fplus,
					      fspace, precision);
				if (fplus || fspace || (buf[0] == '-'))
     520:	bdf0      	pop	{r4, r5, r6, r7, pc}
     522:	46c0      	nop			; (mov r8, r8)

00000524 <__ffssi2>:
     524:	b510      	push	{r4, lr}
     526:	2300      	movs	r3, #0
				 * optimized out.
				 */
			}

			need_justifying = false;
			prefix = 0;
     528:	2800      	cmp	r0, #0
     52a:	d002      	beq.n	532 <__ffssi2+0xe>
     52c:	f000 f8ea 	bl	704 <__ctzsi2>
     530:	1c43      	adds	r3, r0, #1
					prefix = 1;
				need_justifying = true;
				break;

			case 'n':
				int32ptr_temp = (int32_t *)va_arg(vargs, int32_t *);
     532:	0018      	movs	r0, r3
     534:	bd10      	pop	{r4, pc}
				*int32ptr_temp = count;
     536:	46c0      	nop			; (mov r8, r8)

00000538 <__popcountsi2>:
     538:	4b09      	ldr	r3, [pc, #36]	; (560 <__popcountsi2+0x28>)
     53a:	0842      	lsrs	r2, r0, #1
				break;
     53c:	401a      	ands	r2, r3

static int _to_octal(char *buf, uint32_t value, int alt_form, int precision)
{
	char *buf0 = buf;

	if (alt_form) {
     53e:	1a82      	subs	r2, r0, r2
				int32ptr_temp = (int32_t *)va_arg(vargs, int32_t *);
				*int32ptr_temp = count;
				break;

			case 'o':
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
     540:	0010      	movs	r0, r2
     542:	4b08      	ldr	r3, [pc, #32]	; (564 <__popcountsi2+0x2c>)
     544:	0892      	lsrs	r2, r2, #2
     546:	4018      	ands	r0, r3

static int _to_octal(char *buf, uint32_t value, int alt_form, int precision)
{
	char *buf0 = buf;

	if (alt_form) {
     548:	4013      	ands	r3, r2
     54a:	18c0      	adds	r0, r0, r3
		*buf++ = '0';
     54c:	0903      	lsrs	r3, r0, #4
     54e:	1818      	adds	r0, r3, r0
     550:	4b05      	ldr	r3, [pc, #20]	; (568 <__popcountsi2+0x30>)
     552:	4018      	ands	r0, r3
     554:	0203      	lsls	r3, r0, #8
		if (!value) {
     556:	1818      	adds	r0, r3, r0
     558:	0403      	lsls	r3, r0, #16
			/* So we don't return "00" for a value == 0. */
			*buf++ = 0;
     55a:	18c0      	adds	r0, r0, r3
				 * optimized out.
				 */
			}

			need_justifying = false;
			prefix = 0;
     55c:	0e00      	lsrs	r0, r0, #24

			case 'o':
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
				c = _to_octal(buf, uint32_temp, falt, precision);
				need_justifying = true;
				if (precision != -1)
     55e:	4770      	bx	lr
     560:	55555555 	.word	0x55555555
					pad = ' ';
     564:	33333333 	.word	0x33333333

static int _to_octal(char *buf, uint32_t value, int alt_form, int precision)
{
	char *buf0 = buf;

	if (alt_form) {
     568:	0f0f0f0f 	.word	0x0f0f0f0f

0000056c <__udivmoddi4>:
			/* So we don't return "00" for a value == 0. */
			*buf++ = 0;
			return 1;
		}
	}
	return (buf - buf0) + _to_x(buf, value, 8, precision);
     56c:	b5f0      	push	{r4, r5, r6, r7, lr}
     56e:	464d      	mov	r5, r9
     570:	4656      	mov	r6, sl
     572:	4644      	mov	r4, r8
     574:	465f      	mov	r7, fp
     576:	b4f0      	push	{r4, r5, r6, r7}
     578:	4692      	mov	sl, r2
{
	int len;
	char *buf0 = buf;

	if (alt_form) {
		*buf++ = '0';
     57a:	b083      	sub	sp, #12
		*buf++ = 'x';
	}

	len = _to_x(buf, value, 16, precision);
     57c:	0004      	movs	r4, r0
				if (precision != -1)
					pad = ' ';
				break;

			case 'p':
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
     57e:	000d      	movs	r5, r1
     580:	4699      	mov	r9, r3
{
	int len;
	char *buf0 = buf;

	if (alt_form) {
		*buf++ = '0';
     582:	428b      	cmp	r3, r1
     584:	d82f      	bhi.n	5e6 <__udivmoddi4+0x7a>
		*buf++ = 'x';
	}

	len = _to_x(buf, value, 16, precision);
     586:	d02c      	beq.n	5e2 <__udivmoddi4+0x76>
	int len;
	char *buf0 = buf;

	if (alt_form) {
		*buf++ = '0';
		*buf++ = 'x';
     588:	4649      	mov	r1, r9
     58a:	4650      	mov	r0, sl
				if (precision != -1)
					pad = ' ';
				break;

			case 'p':
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
     58c:	f000 f8ae 	bl	6ec <__clzdi2>
	if (alt_form) {
		*buf++ = '0';
		*buf++ = 'x';
	}

	len = _to_x(buf, value, 16, precision);
     590:	0029      	movs	r1, r5
     592:	0006      	movs	r6, r0
     594:	0020      	movs	r0, r4
     596:	f000 f8a9 	bl	6ec <__clzdi2>
	if (prefix == 'X') {
		_uc(buf0);
	}

	return len + (buf - buf0);
     59a:	1a33      	subs	r3, r6, r0
				break;

			case 's':
				cptr_temp = (char *) va_arg(vargs, char *);
				/* Get the string length */
				for (c = 0; c < MAXFLD; c++) {
     59c:	4698      	mov	r8, r3
     59e:	3b20      	subs	r3, #32
     5a0:	469b      	mov	fp, r3
					if (cptr_temp[c] == '\0') {
     5a2:	d500      	bpl.n	5a6 <__udivmoddi4+0x3a>
     5a4:	e074      	b.n	690 <__udivmoddi4+0x124>
     5a6:	4653      	mov	r3, sl
						break;
					}
				}
				if ((precision >= 0) && (precision < c))
     5a8:	465a      	mov	r2, fp
     5aa:	4093      	lsls	r3, r2
     5ac:	001f      	movs	r7, r3
     5ae:	4653      	mov	r3, sl
     5b0:	4642      	mov	r2, r8
     5b2:	4093      	lsls	r3, r2
     5b4:	001e      	movs	r6, r3
     5b6:	42af      	cmp	r7, r5
					c = precision;
				if (c > 0) {
     5b8:	d829      	bhi.n	60e <__udivmoddi4+0xa2>
     5ba:	d026      	beq.n	60a <__udivmoddi4+0x9e>
     5bc:	465b      	mov	r3, fp
					memcpy(buf, cptr_temp, (size_t) c);
     5be:	1ba4      	subs	r4, r4, r6
     5c0:	41bd      	sbcs	r5, r7
     5c2:	2b00      	cmp	r3, #0
     5c4:	da00      	bge.n	5c8 <__udivmoddi4+0x5c>
     5c6:	e079      	b.n	6bc <__udivmoddi4+0x150>
					need_justifying = true;
				}
				break;

			case 'u':
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
     5c8:	2200      	movs	r2, #0
     5ca:	2300      	movs	r3, #0
	return (buf - buf0) + _to_x(buf, value, 8, precision);
}

static int _to_udec(char *buf, uint32_t value, int precision)
{
	return _to_x(buf, value, 10, precision);
     5cc:	9200      	str	r2, [sp, #0]
     5ce:	9301      	str	r3, [sp, #4]
     5d0:	2301      	movs	r3, #1
     5d2:	465a      	mov	r2, fp
     5d4:	4093      	lsls	r3, r2
     5d6:	9301      	str	r3, [sp, #4]
     5d8:	2301      	movs	r3, #1
				 * optimized out.
				 */
			}

			need_justifying = false;
			prefix = 0;
     5da:	4642      	mov	r2, r8
     5dc:	4093      	lsls	r3, r2
					pad = ' ';
				break;

			case 'x':
			case 'X':
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
     5de:	9300      	str	r3, [sp, #0]
     5e0:	e019      	b.n	616 <__udivmoddi4+0xaa>
		   int alt_form, int precision, int prefix)
{
	int len;
	char *buf0 = buf;

	if (alt_form) {
     5e2:	4282      	cmp	r2, r0
					pad = ' ';
				break;

			case 'x':
			case 'X':
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
     5e4:	d9d0      	bls.n	588 <__udivmoddi4+0x1c>
     5e6:	2200      	movs	r2, #0
		   int alt_form, int precision, int prefix)
{
	int len;
	char *buf0 = buf;

	if (alt_form) {
     5e8:	2300      	movs	r3, #0
     5ea:	9200      	str	r2, [sp, #0]
		*buf++ = '0';
     5ec:	9301      	str	r3, [sp, #4]
     5ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
		*buf++ = 'x';
     5f0:	2b00      	cmp	r3, #0
     5f2:	d001      	beq.n	5f8 <__udivmoddi4+0x8c>
     5f4:	601c      	str	r4, [r3, #0]
     5f6:	605d      	str	r5, [r3, #4]
     5f8:	9800      	ldr	r0, [sp, #0]
	}

	len = _to_x(buf, value, 16, precision);
     5fa:	9901      	ldr	r1, [sp, #4]
     5fc:	b003      	add	sp, #12
     5fe:	bc3c      	pop	{r2, r3, r4, r5}
     600:	4690      	mov	r8, r2
     602:	4699      	mov	r9, r3
	if (prefix == 'X') {
     604:	46a2      	mov	sl, r4
     606:	46ab      	mov	fp, r5
     608:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_uc(buf0);
	}

	return len + (buf - buf0);
     60a:	42a3      	cmp	r3, r4
			case 'x':
			case 'X':
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
				c = _to_hex(buf, uint32_temp, falt, precision, c);
				if (falt)
					prefix = 2;
     60c:	d9d6      	bls.n	5bc <__udivmoddi4+0x50>
	len = _to_x(buf, value, 16, precision);
	if (prefix == 'X') {
		_uc(buf0);
	}

	return len + (buf - buf0);
     60e:	2200      	movs	r2, #0
     610:	2300      	movs	r3, #0
			case 'x':
			case 'X':
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
				c = _to_hex(buf, uint32_temp, falt, precision, c);
				if (falt)
					prefix = 2;
     612:	9200      	str	r2, [sp, #0]
				need_justifying = true;
				if (precision != -1)
     614:	9301      	str	r3, [sp, #4]
     616:	4643      	mov	r3, r8
					pad = ' ';
     618:	2b00      	cmp	r3, #0
     61a:	d0e8      	beq.n	5ee <__udivmoddi4+0x82>
     61c:	07fb      	lsls	r3, r7, #31
#endif

static void _uc(char *buf)
{
	for (/**/; *buf; buf++) {
		if (*buf >= 'a' && *buf <= 'z') {
     61e:	0872      	lsrs	r2, r6, #1
     620:	431a      	orrs	r2, r3
     622:	4646      	mov	r6, r8
     624:	087b      	lsrs	r3, r7, #1
			*buf += 'A' - 'a';
     626:	e00e      	b.n	646 <__udivmoddi4+0xda>
     628:	42ab      	cmp	r3, r5
     62a:	d101      	bne.n	630 <__udivmoddi4+0xc4>
#define EOF  -1
#endif

static void _uc(char *buf)
{
	for (/**/; *buf; buf++) {
     62c:	42a2      	cmp	r2, r4
     62e:	d80c      	bhi.n	64a <__udivmoddi4+0xde>
     630:	1aa4      	subs	r4, r4, r2
     632:	419d      	sbcs	r5, r3
     634:	2001      	movs	r0, #1
			case '%':
				if ((*func)('%', dest) == EOF) {
					return EOF;
				}

				count++;
     636:	1924      	adds	r4, r4, r4
     638:	416d      	adcs	r5, r5
     63a:	2100      	movs	r1, #0
     63c:	3e01      	subs	r6, #1
     63e:	1824      	adds	r4, r4, r0
     640:	414d      	adcs	r5, r1
     642:	2e00      	cmp	r6, #0
	if (alt_form) {
		*buf++ = '0';
		if (!value) {
			/* So we don't return "00" for a value == 0. */
			*buf++ = 0;
			return 1;
     644:	d006      	beq.n	654 <__udivmoddi4+0xe8>

			if (c >= MAXFLD + 1)
				return EOF;

			if (need_justifying) {
				if (c < width) {
     646:	42ab      	cmp	r3, r5
     648:	d9ee      	bls.n	628 <__udivmoddi4+0xbc>
     64a:	3e01      	subs	r6, #1
					if (fminus)	{
     64c:	1924      	adds	r4, r4, r4
     64e:	416d      	adcs	r5, r5
     650:	2e00      	cmp	r6, #0
						/* Left justify? */
						for (i = c; i < width; i++)
							buf[i] = ' ';
     652:	d1f8      	bne.n	646 <__udivmoddi4+0xda>
     654:	465b      	mov	r3, fp
     656:	9800      	ldr	r0, [sp, #0]

			if (need_justifying) {
				if (c < width) {
					if (fminus)	{
						/* Left justify? */
						for (i = c; i < width; i++)
     658:	9901      	ldr	r1, [sp, #4]
     65a:	1900      	adds	r0, r0, r4
     65c:	4169      	adcs	r1, r5
     65e:	2b00      	cmp	r3, #0
     660:	db22      	blt.n	6a8 <__udivmoddi4+0x13c>
     662:	002b      	movs	r3, r5
     664:	465a      	mov	r2, fp
     666:	40d3      	lsrs	r3, r2
     668:	002a      	movs	r2, r5
     66a:	4644      	mov	r4, r8
     66c:	40e2      	lsrs	r2, r4
     66e:	001c      	movs	r4, r3
							buf[i] = ' ';
					} else {
						/* Right justify */
						(void) memmove((buf + (width - c)), buf, (size_t) (c
     670:	465b      	mov	r3, fp
     672:	0015      	movs	r5, r2
     674:	2b00      	cmp	r3, #0
     676:	db2c      	blt.n	6d2 <__udivmoddi4+0x166>
     678:	0026      	movs	r6, r4
     67a:	409e      	lsls	r6, r3
     67c:	0033      	movs	r3, r6
     67e:	0026      	movs	r6, r4
										+ 1));
						if (pad == ' ')
     680:	4647      	mov	r7, r8
     682:	40be      	lsls	r6, r7
     684:	0032      	movs	r2, r6
							prefix = 0;
     686:	1a80      	subs	r0, r0, r2
						c = width - c + prefix;
     688:	4199      	sbcs	r1, r3
						for (i = prefix; i < c; i++)
     68a:	9000      	str	r0, [sp, #0]
     68c:	9101      	str	r1, [sp, #4]
							buf[i] = pad;
     68e:	e7ae      	b.n	5ee <__udivmoddi4+0x82>
     690:	4642      	mov	r2, r8
     692:	2320      	movs	r3, #32
     694:	1a9b      	subs	r3, r3, r2
						(void) memmove((buf + (width - c)), buf, (size_t) (c
										+ 1));
						if (pad == ' ')
							prefix = 0;
						c = width - c + prefix;
						for (i = prefix; i < c; i++)
     696:	4652      	mov	r2, sl
     698:	40da      	lsrs	r2, r3
					}
					c = width;
				}

				for (cptr = buf; c > 0; c--, cptr++, count++) {
					if ((*func)(*cptr, dest) == EOF)
     69a:	4641      	mov	r1, r8
     69c:	0013      	movs	r3, r2
     69e:	464a      	mov	r2, r9
     6a0:	408a      	lsls	r2, r1
     6a2:	0017      	movs	r7, r2
     6a4:	431f      	orrs	r7, r3
     6a6:	e782      	b.n	5ae <__udivmoddi4+0x42>
     6a8:	4642      	mov	r2, r8
     6aa:	2320      	movs	r3, #32
     6ac:	1a9b      	subs	r3, r3, r2
							buf[i] = pad;
					}
					c = width;
				}

				for (cptr = buf; c > 0; c--, cptr++, count++) {
     6ae:	002a      	movs	r2, r5
     6b0:	4646      	mov	r6, r8
     6b2:	409a      	lsls	r2, r3
     6b4:	0023      	movs	r3, r4
     6b6:	40f3      	lsrs	r3, r6
     6b8:	4313      	orrs	r3, r2
     6ba:	e7d5      	b.n	668 <__udivmoddi4+0xfc>

			case 0:
				return count;
			}

			if (c >= MAXFLD + 1)
     6bc:	4642      	mov	r2, r8
     6be:	2320      	movs	r3, #32
     6c0:	2100      	movs	r1, #0
     6c2:	1a9b      	subs	r3, r3, r2
     6c4:	2200      	movs	r2, #0
     6c6:	9100      	str	r1, [sp, #0]
     6c8:	9201      	str	r2, [sp, #4]
				 */
			}

			need_justifying = false;
			prefix = 0;
			switch (c) {
     6ca:	2201      	movs	r2, #1
     6cc:	40da      	lsrs	r2, r3

			case 0:
				return count;
			}

			if (c >= MAXFLD + 1)
     6ce:	9201      	str	r2, [sp, #4]
     6d0:	e782      	b.n	5d8 <__udivmoddi4+0x6c>
     6d2:	4642      	mov	r2, r8
			*buf++ = '.';
		while (precision-- > 0)
			*buf++ = _get_digit(&fract, &digit_count);
	}

	if (prune_zero) {
     6d4:	2320      	movs	r3, #32
     6d6:	0026      	movs	r6, r4
     6d8:	1a9b      	subs	r3, r3, r2
     6da:	40de      	lsrs	r6, r3
     6dc:	002f      	movs	r7, r5
			case 'x':
			case 'X':
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
				c = _to_hex(buf, uint32_temp, falt, precision, c);
				if (falt)
					prefix = 2;
     6de:	46b4      	mov	ip, r6
     6e0:	4097      	lsls	r7, r2
				}
			}
		}
	}
	return count;
}
     6e2:	4666      	mov	r6, ip
     6e4:	003b      	movs	r3, r7
     6e6:	4333      	orrs	r3, r6
     6e8:	e7c9      	b.n	67e <__udivmoddi4+0x112>
     6ea:	46c0      	nop			; (mov r8, r8)

000006ec <__clzdi2>:
     6ec:	b510      	push	{r4, lr}
     6ee:	2900      	cmp	r1, #0
     6f0:	d103      	bne.n	6fa <__clzdi2+0xe>
     6f2:	f000 f827 	bl	744 <__clzsi2>
     6f6:	3020      	adds	r0, #32
     6f8:	e002      	b.n	700 <__clzdi2+0x14>
     6fa:	1c08      	adds	r0, r1, #0
     6fc:	f000 f822 	bl	744 <__clzsi2>
     700:	bd10      	pop	{r4, pc}
     702:	46c0      	nop			; (mov r8, r8)

00000704 <__ctzsi2>:
     704:	4241      	negs	r1, r0
     706:	4008      	ands	r0, r1
     708:	211c      	movs	r1, #28
     70a:	2301      	movs	r3, #1
     70c:	041b      	lsls	r3, r3, #16
     70e:	4298      	cmp	r0, r3
     710:	d301      	bcc.n	716 <__ctzsi2+0x12>
     712:	0c00      	lsrs	r0, r0, #16
     714:	3910      	subs	r1, #16
     716:	0a1b      	lsrs	r3, r3, #8
     718:	4298      	cmp	r0, r3
     71a:	d301      	bcc.n	720 <__ctzsi2+0x1c>
     71c:	0a00      	lsrs	r0, r0, #8
     71e:	3908      	subs	r1, #8
     720:	091b      	lsrs	r3, r3, #4
     722:	4298      	cmp	r0, r3
     724:	d301      	bcc.n	72a <__ctzsi2+0x26>
     726:	0900      	lsrs	r0, r0, #4
     728:	3904      	subs	r1, #4
     72a:	a202      	add	r2, pc, #8	; (adr r2, 734 <__ctzsi2+0x30>)
     72c:	5c10      	ldrb	r0, [r2, r0]
     72e:	1a40      	subs	r0, r0, r1
     730:	4770      	bx	lr
     732:	46c0      	nop			; (mov r8, r8)
     734:	1d1d1c1b 	.word	0x1d1d1c1b
     738:	1e1e1e1e 	.word	0x1e1e1e1e
     73c:	1f1f1f1f 	.word	0x1f1f1f1f
     740:	1f1f1f1f 	.word	0x1f1f1f1f

00000744 <__clzsi2>:
     744:	211c      	movs	r1, #28
     746:	2301      	movs	r3, #1
     748:	041b      	lsls	r3, r3, #16
     74a:	4298      	cmp	r0, r3
     74c:	d301      	bcc.n	752 <__clzsi2+0xe>
     74e:	0c00      	lsrs	r0, r0, #16
     750:	3910      	subs	r1, #16
     752:	0a1b      	lsrs	r3, r3, #8
     754:	4298      	cmp	r0, r3
     756:	d301      	bcc.n	75c <__clzsi2+0x18>
     758:	0a00      	lsrs	r0, r0, #8
     75a:	3908      	subs	r1, #8
     75c:	091b      	lsrs	r3, r3, #4
     75e:	4298      	cmp	r0, r3
     760:	d301      	bcc.n	766 <__clzsi2+0x22>
     762:	0900      	lsrs	r0, r0, #4
     764:	3904      	subs	r1, #4
     766:	a202      	add	r2, pc, #8	; (adr r2, 770 <__clzsi2+0x2c>)
     768:	5c10      	ldrb	r0, [r2, r0]
     76a:	1840      	adds	r0, r0, r1
     76c:	4770      	bx	lr
     76e:	46c0      	nop			; (mov r8, r8)
     770:	02020304 	.word	0x02020304
     774:	01010101 	.word	0x01010101
	...

00000780 <vnd_ccc_cfg_changed>:
static u8_t indicating;
static struct bt_gatt_indicate_params ind_params;

static void vnd_ccc_cfg_changed(const struct bt_gatt_attr *attr, u16_t value)
{
	simulate_vnd = (value == BT_GATT_CCC_INDICATE) ? 1 : 0;
     780:	3902      	subs	r1, #2
     782:	424b      	negs	r3, r1
     784:	414b      	adcs	r3, r1
     786:	4a01      	ldr	r2, [pc, #4]	; (78c <vnd_ccc_cfg_changed+0xc>)
     788:	7013      	strb	r3, [r2, #0]
}
     78a:	4770      	bx	lr
     78c:	20000aa0 	.word	0x20000aa0

00000790 <indicate_cb>:

static void indicate_cb(struct bt_conn *conn, const struct bt_gatt_attr *attr,
			u8_t err)
{
     790:	b510      	push	{r4, lr}
	printk("Indication %s\n", err != 0 ? "fail" : "success");
     792:	4905      	ldr	r1, [pc, #20]	; (7a8 <indicate_cb+0x18>)
     794:	2a00      	cmp	r2, #0
     796:	d100      	bne.n	79a <indicate_cb+0xa>
     798:	4904      	ldr	r1, [pc, #16]	; (7ac <indicate_cb+0x1c>)
     79a:	4805      	ldr	r0, [pc, #20]	; (7b0 <indicate_cb+0x20>)
     79c:	f001 f8f0 	bl	1980 <printk>
	indicating = 0;
     7a0:	2200      	movs	r2, #0
     7a2:	4b04      	ldr	r3, [pc, #16]	; (7b4 <indicate_cb+0x24>)
     7a4:	701a      	strb	r2, [r3, #0]
}
     7a6:	bd10      	pop	{r4, pc}
     7a8:	000150d4 	.word	0x000150d4
     7ac:	000150d9 	.word	0x000150d9
     7b0:	000150e1 	.word	0x000150e1
     7b4:	20000a60 	.word	0x20000a60

000007b8 <disconnected>:
		printk("Connected\n");
	}
}

static void disconnected(struct bt_conn *conn, u8_t reason)
{
     7b8:	b510      	push	{r4, lr}
	printk("Disconnected (reason %u)\n", reason);
     7ba:	4802      	ldr	r0, [pc, #8]	; (7c4 <disconnected+0xc>)
     7bc:	f001 f8e0 	bl	1980 <printk>
}
     7c0:	bd10      	pop	{r4, pc}
     7c2:	46c0      	nop			; (mov r8, r8)
     7c4:	000150f0 	.word	0x000150f0

000007c8 <connected>:
static const struct bt_data sd[] = {
	BT_DATA(BT_DATA_NAME_COMPLETE, DEVICE_NAME, DEVICE_NAME_LEN),
};

static void connected(struct bt_conn *conn, u8_t err)
{
     7c8:	b510      	push	{r4, lr}
	if (err) {
     7ca:	2900      	cmp	r1, #0
     7cc:	d003      	beq.n	7d6 <connected+0xe>
		printk("Connection failed (err %u)\n", err);
     7ce:	4804      	ldr	r0, [pc, #16]	; (7e0 <connected+0x18>)
     7d0:	f001 f8d6 	bl	1980 <printk>
     7d4:	e002      	b.n	7dc <connected+0x14>
	} else {
		printk("Connected\n");
     7d6:	4803      	ldr	r0, [pc, #12]	; (7e4 <connected+0x1c>)
     7d8:	f001 f8d2 	bl	1980 <printk>
	}
}
     7dc:	bd10      	pop	{r4, pc}
     7de:	46c0      	nop			; (mov r8, r8)
     7e0:	0001510a 	.word	0x0001510a
     7e4:	00015126 	.word	0x00015126

000007e8 <write_signed>:
}

static ssize_t write_signed(struct bt_conn *conn, const struct bt_gatt_attr *attr,
			    const void *buf, u16_t len, u16_t offset,
			    u8_t flags)
{
     7e8:	b510      	push	{r4, lr}
     7ea:	000c      	movs	r4, r1
     7ec:	0011      	movs	r1, r2
     7ee:	aa02      	add	r2, sp, #8
     7f0:	8810      	ldrh	r0, [r2, #0]
	u8_t *value = attr->user_data;
     7f2:	68e2      	ldr	r2, [r4, #12]

	if (offset + len > sizeof(signed_value)) {
     7f4:	001c      	movs	r4, r3
     7f6:	18c3      	adds	r3, r0, r3
     7f8:	2b04      	cmp	r3, #4
     7fa:	dc04      	bgt.n	806 <CONFIG_ISR_STACK_SIZE+0x6>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
	}

	memcpy(value + offset, buf, len);
     7fc:	1810      	adds	r0, r2, r0
     7fe:	0022      	movs	r2, r4
     800:	f000 fa9b 	bl	d3a <memcpy>

	return len;
     804:	e001      	b.n	80a <CONFIG_ISR_STACK_SIZE+0xa>
			    u8_t flags)
{
	u8_t *value = attr->user_data;

	if (offset + len > sizeof(signed_value)) {
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
     806:	2407      	movs	r4, #7
     808:	4264      	negs	r4, r4
	}

	memcpy(value + offset, buf, len);

	return len;
}
     80a:	0020      	movs	r0, r4
     80c:	bd10      	pop	{r4, pc}

0000080e <write_long_vnd>:
}

static ssize_t write_long_vnd(struct bt_conn *conn,
			      const struct bt_gatt_attr *attr, const void *buf,
			      u16_t len, u16_t offset, u8_t flags)
{
     80e:	b570      	push	{r4, r5, r6, lr}
     810:	000d      	movs	r5, r1
     812:	0011      	movs	r1, r2
     814:	aa04      	add	r2, sp, #16
     816:	8810      	ldrh	r0, [r2, #0]
     818:	aa05      	add	r2, sp, #20
     81a:	7812      	ldrb	r2, [r2, #0]
	u8_t *value = attr->user_data;

	if (flags & BT_GATT_WRITE_FLAG_PREPARE) {
		return 0;
     81c:	2400      	movs	r4, #0
			      const struct bt_gatt_attr *attr, const void *buf,
			      u16_t len, u16_t offset, u8_t flags)
{
	u8_t *value = attr->user_data;

	if (flags & BT_GATT_WRITE_FLAG_PREPARE) {
     81e:	07d2      	lsls	r2, r2, #31
     820:	d40b      	bmi.n	83a <write_long_vnd+0x2c>
		return 0;
	}

	if (offset + len > sizeof(vnd_long_value)) {
     822:	001c      	movs	r4, r3
     824:	18c3      	adds	r3, r0, r3
     826:	2b4a      	cmp	r3, #74	; 0x4a
     828:	dc05      	bgt.n	836 <write_long_vnd+0x28>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
	}

	memcpy(value + offset, buf, len);
     82a:	68eb      	ldr	r3, [r5, #12]
     82c:	0022      	movs	r2, r4
     82e:	1818      	adds	r0, r3, r0
     830:	f000 fa83 	bl	d3a <memcpy>

	return len;
     834:	e001      	b.n	83a <write_long_vnd+0x2c>
	if (flags & BT_GATT_WRITE_FLAG_PREPARE) {
		return 0;
	}

	if (offset + len > sizeof(vnd_long_value)) {
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
     836:	2407      	movs	r4, #7
     838:	4264      	negs	r4, r4
	}

	memcpy(value + offset, buf, len);

	return len;
}
     83a:	0020      	movs	r0, r4
     83c:	bd70      	pop	{r4, r5, r6, pc}

0000083e <write_vnd>:
}

static ssize_t write_vnd(struct bt_conn *conn, const struct bt_gatt_attr *attr,
			 const void *buf, u16_t len, u16_t offset,
			 u8_t flags)
{
     83e:	b510      	push	{r4, lr}
     840:	000c      	movs	r4, r1
     842:	0011      	movs	r1, r2
     844:	aa02      	add	r2, sp, #8
     846:	8810      	ldrh	r0, [r2, #0]
	u8_t *value = attr->user_data;
     848:	68e2      	ldr	r2, [r4, #12]

	if (offset + len > sizeof(vnd_value)) {
     84a:	001c      	movs	r4, r3
     84c:	18c3      	adds	r3, r0, r3
     84e:	2b06      	cmp	r3, #6
     850:	dc04      	bgt.n	85c <write_vnd+0x1e>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
	}

	memcpy(value + offset, buf, len);
     852:	1810      	adds	r0, r2, r0
     854:	0022      	movs	r2, r4
     856:	f000 fa70 	bl	d3a <memcpy>

	return len;
     85a:	e001      	b.n	860 <write_vnd+0x22>
			 u8_t flags)
{
	u8_t *value = attr->user_data;

	if (offset + len > sizeof(vnd_value)) {
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
     85c:	2407      	movs	r4, #7
     85e:	4264      	negs	r4, r4
	}

	memcpy(value + offset, buf, len);

	return len;
}
     860:	0020      	movs	r0, r4
     862:	bd10      	pop	{r4, pc}

00000864 <read_signed>:

static int signed_value;

static ssize_t read_signed(struct bt_conn *conn, const struct bt_gatt_attr *attr,
			   void *buf, u16_t len, u16_t offset)
{
     864:	b530      	push	{r4, r5, lr}
	const char *value = attr->user_data;

	return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
     866:	2504      	movs	r5, #4

static int signed_value;

static ssize_t read_signed(struct bt_conn *conn, const struct bt_gatt_attr *attr,
			   void *buf, u16_t len, u16_t offset)
{
     868:	b085      	sub	sp, #20
     86a:	ac08      	add	r4, sp, #32
     86c:	8824      	ldrh	r4, [r4, #0]
	const char *value = attr->user_data;

	return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
     86e:	9502      	str	r5, [sp, #8]
     870:	68cd      	ldr	r5, [r1, #12]
     872:	9400      	str	r4, [sp, #0]
     874:	9501      	str	r5, [sp, #4]
     876:	f006 fc1b 	bl	70b0 <bt_gatt_attr_read>
				 sizeof(signed_value));
}
     87a:	b005      	add	sp, #20
     87c:	bd30      	pop	{r4, r5, pc}

0000087e <read_long_vnd>:
		  '.', ' ' };

static ssize_t read_long_vnd(struct bt_conn *conn,
			     const struct bt_gatt_attr *attr, void *buf,
			     u16_t len, u16_t offset)
{
     87e:	b530      	push	{r4, r5, lr}
	const char *value = attr->user_data;

	return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
     880:	254a      	movs	r5, #74	; 0x4a
		  '.', ' ' };

static ssize_t read_long_vnd(struct bt_conn *conn,
			     const struct bt_gatt_attr *attr, void *buf,
			     u16_t len, u16_t offset)
{
     882:	b085      	sub	sp, #20
     884:	ac08      	add	r4, sp, #32
     886:	8824      	ldrh	r4, [r4, #0]
	const char *value = attr->user_data;

	return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
     888:	9502      	str	r5, [sp, #8]
     88a:	68cd      	ldr	r5, [r1, #12]
     88c:	9400      	str	r4, [sp, #0]
     88e:	9501      	str	r5, [sp, #4]
     890:	f006 fc0e 	bl	70b0 <bt_gatt_attr_read>
				 sizeof(vnd_long_value));
}
     894:	b005      	add	sp, #20
     896:	bd30      	pop	{r4, r5, pc}

00000898 <read_vnd>:

static u8_t vnd_value[] = { 'V', 'e', 'n', 'd', 'o', 'r' };

static ssize_t read_vnd(struct bt_conn *conn, const struct bt_gatt_attr *attr,
			void *buf, u16_t len, u16_t offset)
{
     898:	b5f0      	push	{r4, r5, r6, r7, lr}
	const char *value = attr->user_data;
     89a:	68cd      	ldr	r5, [r1, #12]

static u8_t vnd_value[] = { 'V', 'e', 'n', 'd', 'o', 'r' };

static ssize_t read_vnd(struct bt_conn *conn, const struct bt_gatt_attr *attr,
			void *buf, u16_t len, u16_t offset)
{
     89c:	b087      	sub	sp, #28
     89e:	0006      	movs	r6, r0
     8a0:	9305      	str	r3, [sp, #20]
	const char *value = attr->user_data;

	return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
				 strlen(value));
     8a2:	0028      	movs	r0, r5

static u8_t vnd_value[] = { 'V', 'e', 'n', 'd', 'o', 'r' };

static ssize_t read_vnd(struct bt_conn *conn, const struct bt_gatt_attr *attr,
			void *buf, u16_t len, u16_t offset)
{
     8a4:	ab0c      	add	r3, sp, #48	; 0x30
     8a6:	881f      	ldrh	r7, [r3, #0]
     8a8:	000c      	movs	r4, r1
     8aa:	9204      	str	r2, [sp, #16]
	const char *value = attr->user_data;

	return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
				 strlen(value));
     8ac:	f000 fa1b 	bl	ce6 <strlen>
static ssize_t read_vnd(struct bt_conn *conn, const struct bt_gatt_attr *attr,
			void *buf, u16_t len, u16_t offset)
{
	const char *value = attr->user_data;

	return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
     8b0:	b280      	uxth	r0, r0
     8b2:	9002      	str	r0, [sp, #8]
     8b4:	9501      	str	r5, [sp, #4]
     8b6:	9700      	str	r7, [sp, #0]
     8b8:	9b05      	ldr	r3, [sp, #20]
     8ba:	9a04      	ldr	r2, [sp, #16]
     8bc:	0021      	movs	r1, r4
     8be:	0030      	movs	r0, r6
     8c0:	f006 fbf6 	bl	70b0 <bt_gatt_attr_read>
				 strlen(value));
}
     8c4:	b007      	add	sp, #28
     8c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000008c8 <bt_ready>:
	.connected = connected,
	.disconnected = disconnected,
};

static void bt_ready(int err)
{
     8c8:	b530      	push	{r4, r5, lr}
     8ca:	0005      	movs	r5, r0
     8cc:	b087      	sub	sp, #28
	if (err) {
     8ce:	2800      	cmp	r0, #0
     8d0:	d002      	beq.n	8d8 <bt_ready+0x10>
		printk("Bluetooth init failed (err %d)\n", err);
     8d2:	0001      	movs	r1, r0
     8d4:	4818      	ldr	r0, [pc, #96]	; (938 <bt_ready+0x70>)
     8d6:	e026      	b.n	926 <bt_ready+0x5e>
		return;
	}

	printk("Bluetooth initialized\n");
     8d8:	4818      	ldr	r0, [pc, #96]	; (93c <bt_ready+0x74>)
     8da:	f001 f851 	bl	1980 <printk>

	hrs_init(0x01);
     8de:	2001      	movs	r0, #1
     8e0:	f000 f8ec 	bl	abc <hrs_init>
	bas_init();
     8e4:	f000 f976 	bl	bd4 <bas_init>
	cts_init();
     8e8:	f000 f9be 	bl	c68 <cts_init>
	dis_init(CONFIG_SOC, "Manufacturer");
     8ec:	4914      	ldr	r1, [pc, #80]	; (940 <bt_ready+0x78>)
     8ee:	4815      	ldr	r0, [pc, #84]	; (944 <bt_ready+0x7c>)
     8f0:	f000 f94a 	bl	b88 <dis_init>
	bt_gatt_service_register(&vnd_svc);

	err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad),
     8f4:	ac03      	add	r4, sp, #12

	hrs_init(0x01);
	bas_init();
	cts_init();
	dis_init(CONFIG_SOC, "Manufacturer");
	bt_gatt_service_register(&vnd_svc);
     8f6:	4814      	ldr	r0, [pc, #80]	; (948 <bt_ready+0x80>)
     8f8:	f006 fce0 	bl	72bc <bt_gatt_service_register>

	err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad),
     8fc:	220c      	movs	r2, #12
     8fe:	0029      	movs	r1, r5
     900:	0020      	movs	r0, r4
     902:	f000 fa44 	bl	d8e <memset>
     906:	22a0      	movs	r2, #160	; 0xa0
     908:	2301      	movs	r3, #1
     90a:	8062      	strh	r2, [r4, #2]
     90c:	3250      	adds	r2, #80	; 0x50
     90e:	7023      	strb	r3, [r4, #0]
     910:	80a2      	strh	r2, [r4, #4]
     912:	490e      	ldr	r1, [pc, #56]	; (94c <bt_ready+0x84>)
     914:	9300      	str	r3, [sp, #0]
     916:	3aed      	subs	r2, #237	; 0xed
     918:	4b0d      	ldr	r3, [pc, #52]	; (950 <bt_ready+0x88>)
     91a:	0020      	movs	r0, r4
     91c:	f003 fcce 	bl	42bc <bt_le_adv_start>
     920:	1e01      	subs	r1, r0, #0
			      sd, ARRAY_SIZE(sd));
	if (err) {
     922:	d003      	beq.n	92c <bt_ready+0x64>
		printk("Advertising failed to start (err %d)\n", err);
     924:	480b      	ldr	r0, [pc, #44]	; (954 <bt_ready+0x8c>)
     926:	f001 f82b 	bl	1980 <printk>
     92a:	e002      	b.n	932 <bt_ready+0x6a>
		return;
	}

	printk("Advertising successfully started\n");
     92c:	480a      	ldr	r0, [pc, #40]	; (958 <bt_ready+0x90>)
     92e:	f001 f827 	bl	1980 <printk>
}
     932:	b007      	add	sp, #28
     934:	bd30      	pop	{r4, r5, pc}
     936:	46c0      	nop			; (mov r8, r8)
     938:	00015131 	.word	0x00015131
     93c:	00015151 	.word	0x00015151
     940:	00015168 	.word	0x00015168
     944:	00015175 	.word	0x00015175
     948:	200001f4 	.word	0x200001f4
     94c:	000150bc 	.word	0x000150bc
     950:	00015264 	.word	0x00015264
     954:	00015183 	.word	0x00015183
     958:	000151a9 	.word	0x000151a9

0000095c <bt_addr_le_to_str.constprop.1>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
     95c:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[7];

	switch (addr->type) {
     95e:	7803      	ldrb	r3, [r0, #0]
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
     960:	b088      	sub	sp, #32
     962:	0004      	movs	r4, r0
     964:	000e      	movs	r6, r1
     966:	ad06      	add	r5, sp, #24
				    size_t len)
{
	char type[7];

	switch (addr->type) {
     968:	2b00      	cmp	r3, #0
     96a:	d003      	beq.n	974 <bt_addr_le_to_str.constprop.1+0x18>
     96c:	2b01      	cmp	r3, #1
     96e:	d106      	bne.n	97e <bt_addr_le_to_str.constprop.1+0x22>
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
     970:	490f      	ldr	r1, [pc, #60]	; (9b0 <bt_addr_le_to_str.constprop.1+0x54>)
     972:	e000      	b.n	976 <bt_addr_le_to_str.constprop.1+0x1a>
{
	char type[7];

	switch (addr->type) {
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
     974:	490f      	ldr	r1, [pc, #60]	; (9b4 <bt_addr_le_to_str.constprop.1+0x58>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
     976:	0028      	movs	r0, r5
     978:	f000 f9ac 	bl	cd4 <strcpy>
     97c:	e004      	b.n	988 <bt_addr_le_to_str.constprop.1+0x2c>
		break;
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
     97e:	4a0e      	ldr	r2, [pc, #56]	; (9b8 <bt_addr_le_to_str.constprop.1+0x5c>)
     980:	2107      	movs	r1, #7
     982:	0028      	movs	r0, r5
     984:	f001 f808 	bl	1998 <snprintk>
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
     988:	7862      	ldrb	r2, [r4, #1]
     98a:	79a3      	ldrb	r3, [r4, #6]
     98c:	9204      	str	r2, [sp, #16]
     98e:	78a2      	ldrb	r2, [r4, #2]
     990:	9505      	str	r5, [sp, #20]
     992:	9203      	str	r2, [sp, #12]
     994:	78e2      	ldrb	r2, [r4, #3]
     996:	211b      	movs	r1, #27
     998:	9202      	str	r2, [sp, #8]
     99a:	7922      	ldrb	r2, [r4, #4]
     99c:	0030      	movs	r0, r6
     99e:	9201      	str	r2, [sp, #4]
     9a0:	7962      	ldrb	r2, [r4, #5]
     9a2:	9200      	str	r2, [sp, #0]
     9a4:	4a05      	ldr	r2, [pc, #20]	; (9bc <bt_addr_le_to_str.constprop.1+0x60>)
     9a6:	f000 fff7 	bl	1998 <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
     9aa:	b008      	add	sp, #32
     9ac:	bd70      	pop	{r4, r5, r6, pc}
     9ae:	46c0      	nop			; (mov r8, r8)
     9b0:	000151d2 	.word	0x000151d2
     9b4:	000151cb 	.word	0x000151cb
     9b8:	000151d9 	.word	0x000151d9
     9bc:	000151e0 	.word	0x000151e0

000009c0 <auth_passkey_display>:

static void auth_passkey_display(struct bt_conn *conn, unsigned int passkey)
{
     9c0:	b510      	push	{r4, lr}
     9c2:	000c      	movs	r4, r1
     9c4:	b088      	sub	sp, #32
	char addr[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
     9c6:	f004 fa0c 	bl	4de2 <bt_conn_get_dst>
     9ca:	a901      	add	r1, sp, #4
     9cc:	f7ff ffc6 	bl	95c <bt_addr_le_to_str.constprop.1>

	printk("Passkey for %s: %06u\n", addr, passkey);
     9d0:	0022      	movs	r2, r4
     9d2:	a901      	add	r1, sp, #4
     9d4:	4802      	ldr	r0, [pc, #8]	; (9e0 <auth_passkey_display+0x20>)
     9d6:	f000 ffd3 	bl	1980 <printk>
}
     9da:	b008      	add	sp, #32
     9dc:	bd10      	pop	{r4, pc}
     9de:	46c0      	nop			; (mov r8, r8)
     9e0:	00015203 	.word	0x00015203

000009e4 <auth_cancel>:

static void auth_cancel(struct bt_conn *conn)
{
     9e4:	b500      	push	{lr}
     9e6:	b089      	sub	sp, #36	; 0x24
	char addr[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
     9e8:	f004 f9fb 	bl	4de2 <bt_conn_get_dst>
     9ec:	a901      	add	r1, sp, #4
     9ee:	f7ff ffb5 	bl	95c <bt_addr_le_to_str.constprop.1>

	printk("Pairing cancelled: %s\n", addr);
     9f2:	a901      	add	r1, sp, #4
     9f4:	4802      	ldr	r0, [pc, #8]	; (a00 <auth_cancel+0x1c>)
     9f6:	f000 ffc3 	bl	1980 <printk>
}
     9fa:	b009      	add	sp, #36	; 0x24
     9fc:	bd00      	pop	{pc}
     9fe:	46c0      	nop			; (mov r8, r8)
     a00:	00015219 	.word	0x00015219

00000a04 <main>:
	.passkey_entry = NULL,
	.cancel = auth_cancel,
};

void main(void)
{
     a04:	b570      	push	{r4, r5, r6, lr}
	int err;

	err = bt_enable(bt_ready);
     a06:	4818      	ldr	r0, [pc, #96]	; (a68 <main+0x64>)
     a08:	f003 fbd6 	bl	41b8 <bt_enable>
     a0c:	1e01      	subs	r1, r0, #0
	if (err) {
     a0e:	d003      	beq.n	a18 <main+0x14>
		printk("Bluetooth init failed (err %d)\n", err);
     a10:	4816      	ldr	r0, [pc, #88]	; (a6c <main+0x68>)
     a12:	f000 ffb5 	bl	1980 <printk>
			if (bt_gatt_indicate(NULL, &ind_params) == 0) {
				indicating = 1;
			}
		}
	}
}
     a16:	bd70      	pop	{r4, r5, r6, pc}
	if (err) {
		printk("Bluetooth init failed (err %d)\n", err);
		return;
	}

	bt_conn_cb_register(&conn_callbacks);
     a18:	4815      	ldr	r0, [pc, #84]	; (a70 <main+0x6c>)
     a1a:	f003 fe8f 	bl	473c <bt_conn_cb_register>
	bt_conn_auth_cb_register(&auth_cb_display);
     a1e:	4815      	ldr	r0, [pc, #84]	; (a74 <main+0x70>)
     a20:	f004 fb4e 	bl	50c0 <bt_conn_auth_cb_register>
			}

			ind_params.attr = &vnd_attrs[2];
			ind_params.func = indicate_cb;
			ind_params.data = &indicating;
			ind_params.len = sizeof(indicating);
     a24:	2501      	movs	r5, #1

	/* Implement notification. At the moment there is no suitable way
	 * of starting delayed work so we do it here
	 */
	while (1) {
		k_sleep(MSEC_PER_SEC);
     a26:	20fa      	movs	r0, #250	; 0xfa
     a28:	0080      	lsls	r0, r0, #2
     a2a:	f013 fe9f 	bl	1476c <k_sleep>

		/* Current Time Service updates only when time is changed */
		cts_notify();
     a2e:	f000 f93d 	bl	cac <cts_notify>

		/* Heartrate measurements simulation */
		hrs_notify();
     a32:	f000 f84f 	bl	ad4 <hrs_notify>

		/* Battery level simulation */
		bas_notify();
     a36:	f000 f8d5 	bl	be4 <bas_notify>

		/* Vendor indication simulation */
		if (simulate_vnd) {
     a3a:	4b0f      	ldr	r3, [pc, #60]	; (a78 <main+0x74>)
     a3c:	781b      	ldrb	r3, [r3, #0]
     a3e:	2b00      	cmp	r3, #0
     a40:	d0f1      	beq.n	a26 <main+0x22>
			if (indicating) {
     a42:	4c0e      	ldr	r4, [pc, #56]	; (a7c <main+0x78>)
     a44:	7820      	ldrb	r0, [r4, #0]
     a46:	2800      	cmp	r0, #0
     a48:	d1ed      	bne.n	a26 <main+0x22>
				continue;
			}

			ind_params.attr = &vnd_attrs[2];
     a4a:	4b0d      	ldr	r3, [pc, #52]	; (a80 <main+0x7c>)
     a4c:	490d      	ldr	r1, [pc, #52]	; (a84 <main+0x80>)
     a4e:	3328      	adds	r3, #40	; 0x28
     a50:	618b      	str	r3, [r1, #24]
			ind_params.func = indicate_cb;
     a52:	4b0d      	ldr	r3, [pc, #52]	; (a88 <main+0x84>)
			ind_params.data = &indicating;
     a54:	620c      	str	r4, [r1, #32]
			if (indicating) {
				continue;
			}

			ind_params.attr = &vnd_attrs[2];
			ind_params.func = indicate_cb;
     a56:	61cb      	str	r3, [r1, #28]
			ind_params.data = &indicating;
			ind_params.len = sizeof(indicating);
     a58:	848d      	strh	r5, [r1, #36]	; 0x24

			if (bt_gatt_indicate(NULL, &ind_params) == 0) {
     a5a:	f006 fcf7 	bl	744c <bt_gatt_indicate>
     a5e:	2800      	cmp	r0, #0
     a60:	d1e1      	bne.n	a26 <main+0x22>
				indicating = 1;
     a62:	7025      	strb	r5, [r4, #0]
     a64:	e7df      	b.n	a26 <main+0x22>
     a66:	46c0      	nop			; (mov r8, r8)
     a68:	000008c9 	.word	0x000008c9
     a6c:	00015131 	.word	0x00015131
     a70:	200000e8 	.word	0x200000e8
     a74:	200002a8 	.word	0x200002a8
     a78:	20000aa0 	.word	0x20000aa0
     a7c:	20000a60 	.word	0x20000a60
     a80:	20000104 	.word	0x20000104
     a84:	20000a78 	.word	0x20000a78
     a88:	00000791 	.word	0x00000791

00000a8c <hrmc_ccc_cfg_changed>:
static u8_t hrs_blsc;

static void hrmc_ccc_cfg_changed(const struct bt_gatt_attr *attr,
				 u16_t value)
{
	simulate_hrm = (value == BT_GATT_CCC_NOTIFY) ? 1 : 0;
     a8c:	3901      	subs	r1, #1
     a8e:	424b      	negs	r3, r1
     a90:	414b      	adcs	r3, r1
     a92:	4a01      	ldr	r2, [pc, #4]	; (a98 <hrmc_ccc_cfg_changed+0xc>)
     a94:	7013      	strb	r3, [r2, #0]
}
     a96:	4770      	bx	lr
     a98:	20000aa8 	.word	0x20000aa8

00000a9c <read_blsc>:

static ssize_t read_blsc(struct bt_conn *conn, const struct bt_gatt_attr *attr,
			 void *buf, u16_t len, u16_t offset)
{
     a9c:	b530      	push	{r4, r5, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &hrs_blsc,
     a9e:	2501      	movs	r5, #1
	simulate_hrm = (value == BT_GATT_CCC_NOTIFY) ? 1 : 0;
}

static ssize_t read_blsc(struct bt_conn *conn, const struct bt_gatt_attr *attr,
			 void *buf, u16_t len, u16_t offset)
{
     aa0:	b085      	sub	sp, #20
     aa2:	ac08      	add	r4, sp, #32
     aa4:	8824      	ldrh	r4, [r4, #0]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &hrs_blsc,
     aa6:	9502      	str	r5, [sp, #8]
     aa8:	4d03      	ldr	r5, [pc, #12]	; (ab8 <read_blsc+0x1c>)
     aaa:	9400      	str	r4, [sp, #0]
     aac:	9501      	str	r5, [sp, #4]
     aae:	f006 faff 	bl	70b0 <bt_gatt_attr_read>
				 sizeof(hrs_blsc));
}
     ab2:	b005      	add	sp, #20
     ab4:	bd30      	pop	{r4, r5, pc}
     ab6:	46c0      	nop			; (mov r8, r8)
     ab8:	20000aa9 	.word	0x20000aa9

00000abc <hrs_init>:
};

static struct bt_gatt_service hrs_svc = BT_GATT_SERVICE(attrs);

void hrs_init(u8_t blsc)
{
     abc:	b510      	push	{r4, lr}
	hrs_blsc = blsc;
     abe:	4b03      	ldr	r3, [pc, #12]	; (acc <hrs_init+0x10>)
     ac0:	7018      	strb	r0, [r3, #0]

	bt_gatt_service_register(&hrs_svc);
     ac2:	4803      	ldr	r0, [pc, #12]	; (ad0 <hrs_init+0x14>)
     ac4:	f006 fbfa 	bl	72bc <bt_gatt_service_register>
}
     ac8:	bd10      	pop	{r4, pc}
     aca:	46c0      	nop			; (mov r8, r8)
     acc:	20000aa9 	.word	0x20000aa9
     ad0:	20000494 	.word	0x20000494

00000ad4 <hrs_notify>:

void hrs_notify(void)
{
     ad4:	b510      	push	{r4, lr}
	static u8_t hrm[2];

	/* Heartrate measurements simulation */
	if (!simulate_hrm) {
     ad6:	4b0c      	ldr	r3, [pc, #48]	; (b08 <hrs_notify+0x34>)
     ad8:	781b      	ldrb	r3, [r3, #0]
     ada:	2b00      	cmp	r3, #0
     adc:	d012      	beq.n	b04 <hrs_notify+0x30>
		return;
	}

	heartrate++;
     ade:	4b0b      	ldr	r3, [pc, #44]	; (b0c <hrs_notify+0x38>)
     ae0:	781a      	ldrb	r2, [r3, #0]
     ae2:	3201      	adds	r2, #1
     ae4:	b2d2      	uxtb	r2, r2
	if (heartrate == 160) {
     ae6:	2aa0      	cmp	r2, #160	; 0xa0
     ae8:	d100      	bne.n	aec <hrs_notify+0x18>
		heartrate = 90;
     aea:	225a      	movs	r2, #90	; 0x5a
	}

	hrm[0] = 0x06; /* uint8, sensor contact */
     aec:	2106      	movs	r1, #6
		return;
	}

	heartrate++;
	if (heartrate == 160) {
		heartrate = 90;
     aee:	701a      	strb	r2, [r3, #0]
	}

	hrm[0] = 0x06; /* uint8, sensor contact */
     af0:	4a07      	ldr	r2, [pc, #28]	; (b10 <hrs_notify+0x3c>)
	hrm[1] = heartrate;
     af2:	781b      	ldrb	r3, [r3, #0]
	heartrate++;
	if (heartrate == 160) {
		heartrate = 90;
	}

	hrm[0] = 0x06; /* uint8, sensor contact */
     af4:	7011      	strb	r1, [r2, #0]
	hrm[1] = heartrate;

	bt_gatt_notify(NULL, &attrs[2], &hrm, sizeof(hrm));
     af6:	4907      	ldr	r1, [pc, #28]	; (b14 <hrs_notify+0x40>)
	if (heartrate == 160) {
		heartrate = 90;
	}

	hrm[0] = 0x06; /* uint8, sensor contact */
	hrm[1] = heartrate;
     af8:	7053      	strb	r3, [r2, #1]

	bt_gatt_notify(NULL, &attrs[2], &hrm, sizeof(hrm));
     afa:	3128      	adds	r1, #40	; 0x28
     afc:	2302      	movs	r3, #2
     afe:	2000      	movs	r0, #0
     b00:	f006 fc84 	bl	740c <bt_gatt_notify>
}
     b04:	bd10      	pop	{r4, pc}
     b06:	46c0      	nop			; (mov r8, r8)
     b08:	20000aa8 	.word	0x20000aa8
     b0c:	200002e2 	.word	0x200002e2
     b10:	20000aaa 	.word	0x20000aaa
     b14:	200002f0 	.word	0x200002f0

00000b18 <read_manuf>:
}

static ssize_t read_manuf(struct bt_conn *conn,
			  const struct bt_gatt_attr *attr, void *buf,
			  u16_t len, u16_t offset)
{
     b18:	b5f0      	push	{r4, r5, r6, r7, lr}
     b1a:	b087      	sub	sp, #28
     b1c:	001e      	movs	r6, r3
     b1e:	ab0c      	add	r3, sp, #48	; 0x30
     b20:	881f      	ldrh	r7, [r3, #0]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, dis_manuf,
				 strlen(dis_manuf));
     b22:	4b0a      	ldr	r3, [pc, #40]	; (b4c <read_manuf+0x34>)
}

static ssize_t read_manuf(struct bt_conn *conn,
			  const struct bt_gatt_attr *attr, void *buf,
			  u16_t len, u16_t offset)
{
     b24:	0005      	movs	r5, r0
	return bt_gatt_attr_read(conn, attr, buf, len, offset, dis_manuf,
				 strlen(dis_manuf));
     b26:	681c      	ldr	r4, [r3, #0]
}

static ssize_t read_manuf(struct bt_conn *conn,
			  const struct bt_gatt_attr *attr, void *buf,
			  u16_t len, u16_t offset)
{
     b28:	9104      	str	r1, [sp, #16]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, dis_manuf,
				 strlen(dis_manuf));
     b2a:	0020      	movs	r0, r4
}

static ssize_t read_manuf(struct bt_conn *conn,
			  const struct bt_gatt_attr *attr, void *buf,
			  u16_t len, u16_t offset)
{
     b2c:	9205      	str	r2, [sp, #20]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, dis_manuf,
				 strlen(dis_manuf));
     b2e:	f000 f8da 	bl	ce6 <strlen>

static ssize_t read_manuf(struct bt_conn *conn,
			  const struct bt_gatt_attr *attr, void *buf,
			  u16_t len, u16_t offset)
{
	return bt_gatt_attr_read(conn, attr, buf, len, offset, dis_manuf,
     b32:	b280      	uxth	r0, r0
     b34:	9002      	str	r0, [sp, #8]
     b36:	9401      	str	r4, [sp, #4]
     b38:	9700      	str	r7, [sp, #0]
     b3a:	0033      	movs	r3, r6
     b3c:	9a05      	ldr	r2, [sp, #20]
     b3e:	9904      	ldr	r1, [sp, #16]
     b40:	0028      	movs	r0, r5
     b42:	f006 fab5 	bl	70b0 <bt_gatt_attr_read>
				 strlen(dis_manuf));
}
     b46:	b007      	add	sp, #28
     b48:	bdf0      	pop	{r4, r5, r6, r7, pc}
     b4a:	46c0      	nop			; (mov r8, r8)
     b4c:	20000ac0 	.word	0x20000ac0

00000b50 <read_model>:
static const char *dis_manuf;

static ssize_t read_model(struct bt_conn *conn,
			  const struct bt_gatt_attr *attr, void *buf,
			  u16_t len, u16_t offset)
{
     b50:	b5f0      	push	{r4, r5, r6, r7, lr}
     b52:	b087      	sub	sp, #28
     b54:	001e      	movs	r6, r3
     b56:	ab0c      	add	r3, sp, #48	; 0x30
     b58:	881f      	ldrh	r7, [r3, #0]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, dis_model,
				 strlen(dis_model));
     b5a:	4b0a      	ldr	r3, [pc, #40]	; (b84 <read_model+0x34>)
static const char *dis_manuf;

static ssize_t read_model(struct bt_conn *conn,
			  const struct bt_gatt_attr *attr, void *buf,
			  u16_t len, u16_t offset)
{
     b5c:	0005      	movs	r5, r0
	return bt_gatt_attr_read(conn, attr, buf, len, offset, dis_model,
				 strlen(dis_model));
     b5e:	681c      	ldr	r4, [r3, #0]
static const char *dis_manuf;

static ssize_t read_model(struct bt_conn *conn,
			  const struct bt_gatt_attr *attr, void *buf,
			  u16_t len, u16_t offset)
{
     b60:	9104      	str	r1, [sp, #16]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, dis_model,
				 strlen(dis_model));
     b62:	0020      	movs	r0, r4
static const char *dis_manuf;

static ssize_t read_model(struct bt_conn *conn,
			  const struct bt_gatt_attr *attr, void *buf,
			  u16_t len, u16_t offset)
{
     b64:	9205      	str	r2, [sp, #20]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, dis_model,
				 strlen(dis_model));
     b66:	f000 f8be 	bl	ce6 <strlen>

static ssize_t read_model(struct bt_conn *conn,
			  const struct bt_gatt_attr *attr, void *buf,
			  u16_t len, u16_t offset)
{
	return bt_gatt_attr_read(conn, attr, buf, len, offset, dis_model,
     b6a:	b280      	uxth	r0, r0
     b6c:	9002      	str	r0, [sp, #8]
     b6e:	9401      	str	r4, [sp, #4]
     b70:	9700      	str	r7, [sp, #0]
     b72:	0033      	movs	r3, r6
     b74:	9a05      	ldr	r2, [sp, #20]
     b76:	9904      	ldr	r1, [sp, #16]
     b78:	0028      	movs	r0, r5
     b7a:	f006 fa99 	bl	70b0 <bt_gatt_attr_read>
				 strlen(dis_model));
}
     b7e:	b007      	add	sp, #28
     b80:	bdf0      	pop	{r4, r5, r6, r7, pc}
     b82:	46c0      	nop			; (mov r8, r8)
     b84:	20000ac4 	.word	0x20000ac4

00000b88 <dis_init>:
};

static struct bt_gatt_service dis_svc = BT_GATT_SERVICE(attrs);

void dis_init(const char *model, const char *manuf)
{
     b88:	b510      	push	{r4, lr}
	dis_model = model;
     b8a:	4b04      	ldr	r3, [pc, #16]	; (b9c <dis_init+0x14>)
     b8c:	6018      	str	r0, [r3, #0]
	dis_manuf = manuf;
     b8e:	4b04      	ldr	r3, [pc, #16]	; (ba0 <dis_init+0x18>)

	bt_gatt_service_register(&dis_svc);
     b90:	4804      	ldr	r0, [pc, #16]	; (ba4 <dis_init+0x1c>)
static struct bt_gatt_service dis_svc = BT_GATT_SERVICE(attrs);

void dis_init(const char *model, const char *manuf)
{
	dis_model = model;
	dis_manuf = manuf;
     b92:	6019      	str	r1, [r3, #0]

	bt_gatt_service_register(&dis_svc);
     b94:	f006 fb92 	bl	72bc <bt_gatt_service_register>
}
     b98:	bd10      	pop	{r4, pc}
     b9a:	46c0      	nop			; (mov r8, r8)
     b9c:	20000ac4 	.word	0x20000ac4
     ba0:	20000ac0 	.word	0x20000ac0
     ba4:	200004a0 	.word	0x200004a0

00000ba8 <blvl_ccc_cfg_changed>:
static u8_t battery = 100;

static void blvl_ccc_cfg_changed(const struct bt_gatt_attr *attr,
				 u16_t value)
{
	simulate_blvl = (value == BT_GATT_CCC_NOTIFY) ? 1 : 0;
     ba8:	3901      	subs	r1, #1
     baa:	424b      	negs	r3, r1
     bac:	414b      	adcs	r3, r1
     bae:	4a01      	ldr	r2, [pc, #4]	; (bb4 <blvl_ccc_cfg_changed+0xc>)
     bb0:	7013      	strb	r3, [r2, #0]
}
     bb2:	4770      	bx	lr
     bb4:	20000adc 	.word	0x20000adc

00000bb8 <read_blvl>:

static ssize_t read_blvl(struct bt_conn *conn, const struct bt_gatt_attr *attr,
			 void *buf, u16_t len, u16_t offset)
{
     bb8:	b530      	push	{r4, r5, lr}
	const char *value = attr->user_data;

	return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
     bba:	2501      	movs	r5, #1
	simulate_blvl = (value == BT_GATT_CCC_NOTIFY) ? 1 : 0;
}

static ssize_t read_blvl(struct bt_conn *conn, const struct bt_gatt_attr *attr,
			 void *buf, u16_t len, u16_t offset)
{
     bbc:	b085      	sub	sp, #20
     bbe:	ac08      	add	r4, sp, #32
     bc0:	8824      	ldrh	r4, [r4, #0]
	const char *value = attr->user_data;

	return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
     bc2:	9502      	str	r5, [sp, #8]
     bc4:	68cd      	ldr	r5, [r1, #12]
     bc6:	9400      	str	r4, [sp, #0]
     bc8:	9501      	str	r5, [sp, #4]
     bca:	f006 fa71 	bl	70b0 <bt_gatt_attr_read>
				 sizeof(*value));
}
     bce:	b005      	add	sp, #20
     bd0:	bd30      	pop	{r4, r5, pc}
	...

00000bd4 <bas_init>:
};

static struct bt_gatt_service bas_svc = BT_GATT_SERVICE(attrs);

void bas_init(void)
{
     bd4:	b510      	push	{r4, lr}
	bt_gatt_service_register(&bas_svc);
     bd6:	4802      	ldr	r0, [pc, #8]	; (be0 <bas_init+0xc>)
     bd8:	f006 fb70 	bl	72bc <bt_gatt_service_register>
}
     bdc:	bd10      	pop	{r4, pc}
     bde:	46c0      	nop			; (mov r8, r8)
     be0:	200004b0 	.word	0x200004b0

00000be4 <bas_notify>:

void bas_notify(void)
{
     be4:	b510      	push	{r4, lr}
	if (!simulate_blvl) {
     be6:	4b09      	ldr	r3, [pc, #36]	; (c0c <bas_notify+0x28>)
     be8:	781b      	ldrb	r3, [r3, #0]
     bea:	2b00      	cmp	r3, #0
     bec:	d00d      	beq.n	c0a <bas_notify+0x26>
		return;
	}

	battery--;
     bee:	4a08      	ldr	r2, [pc, #32]	; (c10 <bas_notify+0x2c>)
     bf0:	7813      	ldrb	r3, [r2, #0]
     bf2:	3b01      	subs	r3, #1
     bf4:	b2db      	uxtb	r3, r3
	if (!battery) {
     bf6:	2b00      	cmp	r3, #0
     bf8:	d100      	bne.n	bfc <bas_notify+0x18>
		/* Software eco battery charger */
		battery = 100;
     bfa:	2364      	movs	r3, #100	; 0x64
	}

	bt_gatt_notify(NULL, &attrs[2], &battery, sizeof(battery));
     bfc:	4905      	ldr	r1, [pc, #20]	; (c14 <bas_notify+0x30>)
	}

	battery--;
	if (!battery) {
		/* Software eco battery charger */
		battery = 100;
     bfe:	7013      	strb	r3, [r2, #0]
	}

	bt_gatt_notify(NULL, &attrs[2], &battery, sizeof(battery));
     c00:	3128      	adds	r1, #40	; 0x28
     c02:	2301      	movs	r3, #1
     c04:	2000      	movs	r0, #0
     c06:	f006 fc01 	bl	740c <bt_gatt_notify>
}
     c0a:	bd10      	pop	{r4, pc}
     c0c:	20000adc 	.word	0x20000adc
     c10:	200004ac 	.word	0x200004ac
     c14:	200003f4 	.word	0x200003f4

00000c18 <ct_ccc_cfg_changed>:
static u8_t ct_update;

static void ct_ccc_cfg_changed(const struct bt_gatt_attr *attr, u16_t value)
{
	/* TODO: Handle value */
}
     c18:	4770      	bx	lr
	...

00000c1c <write_ct>:
}

static ssize_t write_ct(struct bt_conn *conn, const struct bt_gatt_attr *attr,
			const void *buf, u16_t len, u16_t offset,
			u8_t flags)
{
     c1c:	b510      	push	{r4, lr}
     c1e:	000c      	movs	r4, r1
     c20:	0011      	movs	r1, r2
     c22:	aa02      	add	r2, sp, #8
     c24:	8810      	ldrh	r0, [r2, #0]
	u8_t *value = attr->user_data;
     c26:	68e2      	ldr	r2, [r4, #12]

	if (offset + len > sizeof(ct)) {
     c28:	001c      	movs	r4, r3
     c2a:	18c3      	adds	r3, r0, r3
     c2c:	2b0a      	cmp	r3, #10
     c2e:	dc07      	bgt.n	c40 <write_ct+0x24>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
	}

	memcpy(value + offset, buf, len);
     c30:	1810      	adds	r0, r2, r0
     c32:	0022      	movs	r2, r4
     c34:	f000 f881 	bl	d3a <memcpy>
	ct_update = 1;
     c38:	2201      	movs	r2, #1
     c3a:	4b03      	ldr	r3, [pc, #12]	; (c48 <write_ct+0x2c>)
     c3c:	701a      	strb	r2, [r3, #0]

	return len;
     c3e:	e001      	b.n	c44 <write_ct+0x28>
			u8_t flags)
{
	u8_t *value = attr->user_data;

	if (offset + len > sizeof(ct)) {
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
     c40:	2407      	movs	r4, #7
     c42:	4264      	negs	r4, r4

	memcpy(value + offset, buf, len);
	ct_update = 1;

	return len;
}
     c44:	0020      	movs	r0, r4
     c46:	bd10      	pop	{r4, pc}
     c48:	20000ae7 	.word	0x20000ae7

00000c4c <read_ct>:
	/* TODO: Handle value */
}

static ssize_t read_ct(struct bt_conn *conn, const struct bt_gatt_attr *attr,
		       void *buf, u16_t len, u16_t offset)
{
     c4c:	b530      	push	{r4, r5, lr}
	const char *value = attr->user_data;

	return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
     c4e:	250a      	movs	r5, #10
	/* TODO: Handle value */
}

static ssize_t read_ct(struct bt_conn *conn, const struct bt_gatt_attr *attr,
		       void *buf, u16_t len, u16_t offset)
{
     c50:	b085      	sub	sp, #20
     c52:	ac08      	add	r4, sp, #32
     c54:	8824      	ldrh	r4, [r4, #0]
	const char *value = attr->user_data;

	return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
     c56:	9502      	str	r5, [sp, #8]
     c58:	68cd      	ldr	r5, [r1, #12]
     c5a:	9400      	str	r4, [sp, #0]
     c5c:	9501      	str	r5, [sp, #4]
     c5e:	f006 fa27 	bl	70b0 <bt_gatt_attr_read>
				 sizeof(ct));
}
     c62:	b005      	add	sp, #20
     c64:	bd30      	pop	{r4, r5, pc}
	...

00000c68 <cts_init>:
	/* Adjust reason */
	buf[9] = 0; /* No update, change, etc */
}

void cts_init(void)
{
     c68:	b513      	push	{r0, r1, r4, lr}
	/* 'Exact Time 256' contains 'Day Date Time' which contains
	 * 'Date Time' - characteristic contains fields for:
	 * year, month, day, hours, minutes and seconds.
	 */

	year = sys_cpu_to_le16(2015);
     c6a:	466b      	mov	r3, sp
	memcpy(buf,  &year, 2); /* year */
     c6c:	4c0c      	ldr	r4, [pc, #48]	; (ca0 <cts_init+0x38>)
	/* 'Exact Time 256' contains 'Day Date Time' which contains
	 * 'Date Time' - characteristic contains fields for:
	 * year, month, day, hours, minutes and seconds.
	 */

	year = sys_cpu_to_le16(2015);
     c6e:	1d99      	adds	r1, r3, #6
     c70:	4b0c      	ldr	r3, [pc, #48]	; (ca4 <cts_init+0x3c>)
	memcpy(buf,  &year, 2); /* year */
     c72:	2202      	movs	r2, #2
     c74:	0020      	movs	r0, r4
	/* 'Exact Time 256' contains 'Day Date Time' which contains
	 * 'Date Time' - characteristic contains fields for:
	 * year, month, day, hours, minutes and seconds.
	 */

	year = sys_cpu_to_le16(2015);
     c76:	800b      	strh	r3, [r1, #0]
	memcpy(buf,  &year, 2); /* year */
     c78:	f000 f85f 	bl	d3a <memcpy>
	buf[2] = 5; /* months starting from 1 */
     c7c:	2305      	movs	r3, #5
     c7e:	70a3      	strb	r3, [r4, #2]
	buf[3] = 30; /* day */
     c80:	3319      	adds	r3, #25
     c82:	70e3      	strb	r3, [r4, #3]
	buf[4] = 12; /* hours */
	buf[5] = 45; /* minutes */
	buf[6] = 30; /* seconds */
     c84:	71a3      	strb	r3, [r4, #6]

	year = sys_cpu_to_le16(2015);
	memcpy(buf,  &year, 2); /* year */
	buf[2] = 5; /* months starting from 1 */
	buf[3] = 30; /* day */
	buf[4] = 12; /* hours */
     c86:	220c      	movs	r2, #12
	buf[5] = 45; /* minutes */
	buf[6] = 30; /* seconds */

	/* 'Day of Week' part of 'Day Date Time' */
	buf[7] = 1; /* day of week starting from 1 */
     c88:	3b1d      	subs	r3, #29
     c8a:	71e3      	strb	r3, [r4, #7]

	/* 'Fractions 256 part of 'Exact Time 256' */
	buf[8] = 0;
     c8c:	2300      	movs	r3, #0

	year = sys_cpu_to_le16(2015);
	memcpy(buf,  &year, 2); /* year */
	buf[2] = 5; /* months starting from 1 */
	buf[3] = 30; /* day */
	buf[4] = 12; /* hours */
     c8e:	7122      	strb	r2, [r4, #4]
	buf[5] = 45; /* minutes */
     c90:	3221      	adds	r2, #33	; 0x21
     c92:	7162      	strb	r2, [r4, #5]

	/* 'Day of Week' part of 'Day Date Time' */
	buf[7] = 1; /* day of week starting from 1 */

	/* 'Fractions 256 part of 'Exact Time 256' */
	buf[8] = 0;
     c94:	7223      	strb	r3, [r4, #8]

	/* Adjust reason */
	buf[9] = 0; /* No update, change, etc */
     c96:	7263      	strb	r3, [r4, #9]
void cts_init(void)
{
	/* Simulate current time for Current Time Service */
	generate_current_time(ct);

	bt_gatt_service_register(&cts_svc);
     c98:	4803      	ldr	r0, [pc, #12]	; (ca8 <cts_init+0x40>)
     c9a:	f006 fb0f 	bl	72bc <bt_gatt_service_register>
}
     c9e:	bd13      	pop	{r0, r1, r4, pc}
     ca0:	20000add 	.word	0x20000add
     ca4:	000007df 	.word	0x000007df
     ca8:	200004bc 	.word	0x200004bc

00000cac <cts_notify>:

void cts_notify(void)
{	/* Current Time Service updates only when time is changed */
     cac:	b510      	push	{r4, lr}
	if (!ct_update) {
     cae:	4b06      	ldr	r3, [pc, #24]	; (cc8 <cts_notify+0x1c>)
     cb0:	781a      	ldrb	r2, [r3, #0]
     cb2:	2a00      	cmp	r2, #0
     cb4:	d007      	beq.n	cc6 <cts_notify+0x1a>
		return;
	}

	ct_update = 0;
     cb6:	2000      	movs	r0, #0
	bt_gatt_notify(NULL, &attrs[3], &ct, sizeof(ct));
     cb8:	4904      	ldr	r1, [pc, #16]	; (ccc <cts_notify+0x20>)
{	/* Current Time Service updates only when time is changed */
	if (!ct_update) {
		return;
	}

	ct_update = 0;
     cba:	7018      	strb	r0, [r3, #0]
	bt_gatt_notify(NULL, &attrs[3], &ct, sizeof(ct));
     cbc:	4a04      	ldr	r2, [pc, #16]	; (cd0 <cts_notify+0x24>)
     cbe:	230a      	movs	r3, #10
     cc0:	313c      	adds	r1, #60	; 0x3c
     cc2:	f006 fba3 	bl	740c <bt_gatt_notify>
}
     cc6:	bd10      	pop	{r4, pc}
     cc8:	20000ae7 	.word	0x20000ae7
     ccc:	20000444 	.word	0x20000444
     cd0:	20000add 	.word	0x20000add

00000cd4 <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
     cd4:	0003      	movs	r3, r0
     cd6:	780a      	ldrb	r2, [r1, #0]
		*d = *s;
     cd8:	701a      	strb	r2, [r3, #0]

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
     cda:	2a00      	cmp	r2, #0
     cdc:	d002      	beq.n	ce4 <strcpy+0x10>
		*d = *s;
		d++;
     cde:	3301      	adds	r3, #1
		s++;
     ce0:	3101      	adds	r1, #1
     ce2:	e7f8      	b.n	cd6 <strcpy+0x2>
	}

	*d = '\0';

	return dest;
}
     ce4:	4770      	bx	lr

00000ce6 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
     ce6:	0002      	movs	r2, r0
	size_t n = 0;

	while (*s != '\0') {
     ce8:	0003      	movs	r3, r0
     cea:	7819      	ldrb	r1, [r3, #0]
     cec:	1a98      	subs	r0, r3, r2
     cee:	2900      	cmp	r1, #0
     cf0:	d001      	beq.n	cf6 <strlen+0x10>
		s++;
     cf2:	3301      	adds	r3, #1
     cf4:	e7f9      	b.n	cea <strlen+0x4>
		n++;
	}

	return n;
}
     cf6:	4770      	bx	lr

00000cf8 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
     cf8:	7803      	ldrb	r3, [r0, #0]
     cfa:	780a      	ldrb	r2, [r1, #0]
     cfc:	4293      	cmp	r3, r2
     cfe:	d105      	bne.n	d0c <strcmp+0x14>
     d00:	2b00      	cmp	r3, #0
     d02:	d002      	beq.n	d0a <strcmp+0x12>
		s1++;
     d04:	3001      	adds	r0, #1
		s2++;
     d06:	3101      	adds	r1, #1
     d08:	e7f6      	b.n	cf8 <strcmp>
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
     d0a:	001a      	movs	r2, r3
		s1++;
		s2++;
	}

	return *s1 - *s2;
     d0c:	1a98      	subs	r0, r3, r2
}
     d0e:	4770      	bx	lr

00000d10 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
     d10:	0003      	movs	r3, r0
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n)
		return 0;
     d12:	2000      	movs	r0, #0
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
     d14:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n)
     d16:	4282      	cmp	r2, r0
     d18:	d00e      	beq.n	d38 <memcmp+0x28>
     d1a:	3a01      	subs	r2, #1
     d1c:	189a      	adds	r2, r3, r2
		return 0;

	while ((--n > 0) && (*c1 == *c2)) {
     d1e:	4293      	cmp	r3, r2
     d20:	d103      	bne.n	d2a <memcmp+0x1a>
		c1++;
		c2++;
	}

	return *c1 - *c2;
     d22:	781b      	ldrb	r3, [r3, #0]
     d24:	7808      	ldrb	r0, [r1, #0]
     d26:	1a18      	subs	r0, r3, r0
     d28:	e006      	b.n	d38 <memcmp+0x28>
	const char *c2 = m2;

	if (!n)
		return 0;

	while ((--n > 0) && (*c1 == *c2)) {
     d2a:	781c      	ldrb	r4, [r3, #0]
     d2c:	7808      	ldrb	r0, [r1, #0]
     d2e:	4284      	cmp	r4, r0
     d30:	d1f7      	bne.n	d22 <memcmp+0x12>
		c1++;
     d32:	3301      	adds	r3, #1
		c2++;
     d34:	3101      	adds	r1, #1
     d36:	e7f2      	b.n	d1e <memcmp+0xe>
	}

	return *c1 - *c2;
}
     d38:	bd10      	pop	{r4, pc}

00000d3a <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
     d3a:	b530      	push	{r4, r5, lr}
	/* attempt word-sized copying only if buffers have identical alignment */

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;

	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
     d3c:	0004      	movs	r4, r0
     d3e:	2303      	movs	r3, #3
     d40:	404c      	eors	r4, r1
     d42:	421c      	tst	r4, r3
     d44:	d002      	beq.n	d4c <memcpy+0x12>

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
	/* attempt word-sized copying only if buffers have identical alignment */

	unsigned char *d_byte = (unsigned char *)d;
     d46:	0004      	movs	r4, r0
     d48:	2300      	movs	r3, #0
     d4a:	e019      	b.n	d80 <memcpy+0x46>
     d4c:	0004      	movs	r4, r0

	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {

		/* do byte-sized copying until word-aligned or finished */

		while (((unsigned int)d_byte) & 0x3) {
     d4e:	001d      	movs	r5, r3
     d50:	0023      	movs	r3, r4
     d52:	402b      	ands	r3, r5
     d54:	d007      	beq.n	d66 <memcpy+0x2c>
			if (n == 0) {
     d56:	2a00      	cmp	r2, #0
     d58:	d018      	beq.n	d8c <memcpy+0x52>
				return d;
			}
			*(d_byte++) = *(s_byte++);
     d5a:	780b      	ldrb	r3, [r1, #0]
			n--;
     d5c:	3a01      	subs	r2, #1

		while (((unsigned int)d_byte) & 0x3) {
			if (n == 0) {
				return d;
			}
			*(d_byte++) = *(s_byte++);
     d5e:	7023      	strb	r3, [r4, #0]
     d60:	3101      	adds	r1, #1
     d62:	3401      	adds	r4, #1
     d64:	e7f4      	b.n	d50 <memcpy+0x16>
		/* do word-sized copying as long as possible */

		unsigned int *d_word = (unsigned int *)d_byte;
		const unsigned int *s_word = (const unsigned int *)s_byte;

		while (n >= sizeof(unsigned int)) {
     d66:	1ad5      	subs	r5, r2, r3
     d68:	2d03      	cmp	r5, #3
     d6a:	d903      	bls.n	d74 <memcpy+0x3a>
			*(d_word++) = *(s_word++);
     d6c:	58cd      	ldr	r5, [r1, r3]
     d6e:	50e5      	str	r5, [r4, r3]
     d70:	3304      	adds	r3, #4
     d72:	e7f8      	b.n	d66 <memcpy+0x2c>
     d74:	0893      	lsrs	r3, r2, #2
     d76:	009b      	lsls	r3, r3, #2
     d78:	1ad2      	subs	r2, r2, r3
     d7a:	18e4      	adds	r4, r4, r3
     d7c:	18c9      	adds	r1, r1, r3
     d7e:	e7e3      	b.n	d48 <memcpy+0xe>
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
     d80:	429a      	cmp	r2, r3
     d82:	d003      	beq.n	d8c <memcpy+0x52>
		*(d_byte++) = *(s_byte++);
     d84:	5ccd      	ldrb	r5, [r1, r3]
     d86:	54e5      	strb	r5, [r4, r3]
     d88:	3301      	adds	r3, #1
     d8a:	e7f9      	b.n	d80 <memcpy+0x46>
		n--;
	}

	return d;
}
     d8c:	bd30      	pop	{r4, r5, pc}

00000d8e <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
     d8e:	b5f0      	push	{r4, r5, r6, r7, lr}
     d90:	0003      	movs	r3, r0
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;

	while (((unsigned int)d_byte) & 0x3) {
     d92:	2603      	movs	r6, #3
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
     d94:	b2cc      	uxtb	r4, r1
     d96:	001d      	movs	r5, r3

	while (((unsigned int)d_byte) & 0x3) {
     d98:	4233      	tst	r3, r6
     d9a:	d005      	beq.n	da8 <memset+0x1a>
		if (n == 0) {
     d9c:	2a00      	cmp	r2, #0
     d9e:	d01a      	beq.n	dd6 <memset+0x48>
			return buf;
		}
		*(d_byte++) = c_byte;
     da0:	701c      	strb	r4, [r3, #0]
		n--;
     da2:	3a01      	subs	r2, #1
     da4:	3301      	adds	r3, #1
     da6:	e7f6      	b.n	d96 <memset+0x8>
	/* do word-sized initialization as long as possible */

	unsigned int *d_word = (unsigned int *)d_byte;
	unsigned int c_word = (unsigned int)(unsigned char)c;

	c_word |= c_word << 8;
     da8:	27ff      	movs	r7, #255	; 0xff
	};

	/* do word-sized initialization as long as possible */

	unsigned int *d_word = (unsigned int *)d_byte;
	unsigned int c_word = (unsigned int)(unsigned char)c;
     daa:	b2ce      	uxtb	r6, r1

	c_word |= c_word << 8;
     dac:	023f      	lsls	r7, r7, #8
     dae:	0209      	lsls	r1, r1, #8
     db0:	4039      	ands	r1, r7
     db2:	4331      	orrs	r1, r6
	c_word |= c_word << 16;
     db4:	040e      	lsls	r6, r1, #16
     db6:	4331      	orrs	r1, r6

	while (n >= sizeof(unsigned int)) {
     db8:	0016      	movs	r6, r2
     dba:	2e03      	cmp	r6, #3
     dbc:	d902      	bls.n	dc4 <memset+0x36>
		*(d_word++) = c_word;
     dbe:	c302      	stmia	r3!, {r1}
		n -= sizeof(unsigned int);
     dc0:	3e04      	subs	r6, #4
     dc2:	e7fa      	b.n	dba <memset+0x2c>
     dc4:	0893      	lsrs	r3, r2, #2
     dc6:	009b      	lsls	r3, r3, #2
     dc8:	18eb      	adds	r3, r5, r3
     dca:	18aa      	adds	r2, r5, r2

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
     dcc:	4293      	cmp	r3, r2
     dce:	d002      	beq.n	dd6 <memset+0x48>
		*(d_byte++) = c_byte;
     dd0:	701c      	strb	r4, [r3, #0]
     dd2:	3301      	adds	r3, #1
     dd4:	e7fa      	b.n	dcc <memset+0x3e>
		n--;
	}

	return buf;
}
     dd6:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000dd8 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
     dd8:	b570      	push	{r4, r5, r6, lr}
     dda:	0004      	movs	r4, r0
     ddc:	4d07      	ldr	r5, [pc, #28]	; (dfc <console_out+0x24>)
		return c;
	}

#endif /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
     dde:	280a      	cmp	r0, #10
     de0:	d104      	bne.n	dec <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
     de2:	6828      	ldr	r0, [r5, #0]
static inline unsigned char uart_poll_out(struct device *dev,
					  unsigned char out_char)
{
	const struct uart_driver_api *api = dev->driver_api;

	return api->poll_out(dev, out_char);
     de4:	210d      	movs	r1, #13
     de6:	6843      	ldr	r3, [r0, #4]
     de8:	685b      	ldr	r3, [r3, #4]
     dea:	4798      	blx	r3
	}
	uart_poll_out(uart_console_dev, c);
     dec:	6828      	ldr	r0, [r5, #0]
     dee:	b2e1      	uxtb	r1, r4
     df0:	6843      	ldr	r3, [r0, #4]
     df2:	685b      	ldr	r3, [r3, #4]
     df4:	4798      	blx	r3

	return c;
}
     df6:	0020      	movs	r0, r4
     df8:	bd70      	pop	{r4, r5, r6, pc}
     dfa:	46c0      	nop			; (mov r8, r8)
     dfc:	20000afc 	.word	0x20000afc

00000e00 <uart_console_hook_install>:
 *
 * @return N/A
 */

void uart_console_hook_install(void)
{
     e00:	b510      	push	{r4, lr}
	__stdout_hook_install(console_out);
	__printk_hook_install(console_out);
     e02:	4802      	ldr	r0, [pc, #8]	; (e0c <uart_console_hook_install+0xc>)
     e04:	f000 fc84 	bl	1710 <__printk_hook_install>
}
     e08:	bd10      	pop	{r4, pc}
     e0a:	46c0      	nop			; (mov r8, r8)
     e0c:	00000dd9 	.word	0x00000dd9

00000e10 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
     e10:	b510      	push	{r4, lr}

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
     e12:	4804      	ldr	r0, [pc, #16]	; (e24 <uart_console_init+0x14>)
     e14:	f012 fed0 	bl	13bb8 <device_get_binding>
     e18:	4b03      	ldr	r3, [pc, #12]	; (e28 <uart_console_init+0x18>)
     e1a:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
     e1c:	f7ff fff0 	bl	e00 <uart_console_hook_install>

	return 0;
}
     e20:	2000      	movs	r0, #0
     e22:	bd10      	pop	{r4, pc}
     e24:	0001526c 	.word	0x0001526c
     e28:	20000afc 	.word	0x20000afc

00000e2c <uart_nrf5_poll_in>:
 * @return 0 if a character arrived, -1 if the input buffer if empty.
 */

static int uart_nrf5_poll_in(struct device *dev, unsigned char *c)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
     e2c:	6803      	ldr	r3, [r0, #0]
     e2e:	689b      	ldr	r3, [r3, #8]
     e30:	681b      	ldr	r3, [r3, #0]

	if (!uart->EVENTS_RXDRDY) {
     e32:	001a      	movs	r2, r3
     e34:	32fc      	adds	r2, #252	; 0xfc
     e36:	68d0      	ldr	r0, [r2, #12]
     e38:	2800      	cmp	r0, #0
     e3a:	d006      	beq.n	e4a <uart_nrf5_poll_in+0x1e>
		return -1;
	}

	/* Clear the interrupt */
	uart->EVENTS_RXDRDY = 0;
     e3c:	2000      	movs	r0, #0
     e3e:	60d0      	str	r0, [r2, #12]

	/* got a character */
	*c = (unsigned char)uart->RXD;
     e40:	22a3      	movs	r2, #163	; 0xa3
     e42:	00d2      	lsls	r2, r2, #3
     e44:	589b      	ldr	r3, [r3, r2]
     e46:	700b      	strb	r3, [r1, #0]

	return 0;
     e48:	e001      	b.n	e4e <uart_nrf5_poll_in+0x22>
static int uart_nrf5_poll_in(struct device *dev, unsigned char *c)
{
	volatile struct _uart *uart = UART_STRUCT(dev);

	if (!uart->EVENTS_RXDRDY) {
		return -1;
     e4a:	2001      	movs	r0, #1
     e4c:	4240      	negs	r0, r0

	/* got a character */
	*c = (unsigned char)uart->RXD;

	return 0;
}
     e4e:	4770      	bx	lr

00000e50 <uart_nrf5_poll_out>:
 * @return Sent character
 */
static unsigned char uart_nrf5_poll_out(struct device *dev,
					unsigned char c)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
     e50:	6803      	ldr	r3, [r0, #0]

	/* send a character */
	uart->TXD = (u8_t)c;
     e52:	4a06      	ldr	r2, [pc, #24]	; (e6c <uart_nrf5_poll_out+0x1c>)
 * @return Sent character
 */
static unsigned char uart_nrf5_poll_out(struct device *dev,
					unsigned char c)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
     e54:	689b      	ldr	r3, [r3, #8]
     e56:	681b      	ldr	r3, [r3, #0]

	/* send a character */
	uart->TXD = (u8_t)c;
     e58:	5099      	str	r1, [r3, r2]

	/* Wait for transmitter to be ready */
	while (!uart->EVENTS_TXDRDY) {
     e5a:	33fc      	adds	r3, #252	; 0xfc
     e5c:	6a1a      	ldr	r2, [r3, #32]
     e5e:	2a00      	cmp	r2, #0
     e60:	d0fc      	beq.n	e5c <uart_nrf5_poll_out+0xc>
	}

	uart->EVENTS_TXDRDY = 0;
     e62:	2200      	movs	r2, #0

	return c;
}
     e64:	0008      	movs	r0, r1

	/* Wait for transmitter to be ready */
	while (!uart->EVENTS_TXDRDY) {
	}

	uart->EVENTS_TXDRDY = 0;
     e66:	621a      	str	r2, [r3, #32]

	return c;
}
     e68:	4770      	bx	lr
     e6a:	46c0      	nop			; (mov r8, r8)
     e6c:	0000051c 	.word	0x0000051c

00000e70 <uart_nrf5_err_check>:

/** Console I/O function */
static int uart_nrf5_err_check(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
     e70:	6803      	ldr	r3, [r0, #0]
	u32_t error = 0;
     e72:	2000      	movs	r0, #0
}

/** Console I/O function */
static int uart_nrf5_err_check(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
     e74:	689b      	ldr	r3, [r3, #8]
     e76:	681b      	ldr	r3, [r3, #0]
	u32_t error = 0;

	if (uart->EVENTS_ERROR) {
     e78:	001a      	movs	r2, r3
     e7a:	32fc      	adds	r2, #252	; 0xfc
     e7c:	6a92      	ldr	r2, [r2, #40]	; 0x28
     e7e:	4282      	cmp	r2, r0
     e80:	d003      	beq.n	e8a <uart_nrf5_err_check+0x1a>
		/* register bitfields maps to the defines in uart.h */
		error = uart->ERRORSRC;
     e82:	2290      	movs	r2, #144	; 0x90
     e84:	00d2      	lsls	r2, r2, #3
     e86:	5898      	ldr	r0, [r3, r2]

		/* Clear the register */
		uart->ERRORSRC = error;
     e88:	5098      	str	r0, [r3, r2]
	}

	error = error & 0x0F;

	return error;
     e8a:	230f      	movs	r3, #15
     e8c:	4018      	ands	r0, r3
}
     e8e:	4770      	bx	lr

00000e90 <uart_nrf5_init>:
 * @param dev UART device struct
 *
 * @return 0 on success
 */
static int uart_nrf5_init(struct device *dev)
{
     e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	volatile struct _uart *uart = UART_STRUCT(dev);
     e92:	6803      	ldr	r3, [r0, #0]
 * @param dev UART device struct
 *
 * @return 0 on success
 */
static int uart_nrf5_init(struct device *dev)
{
     e94:	0005      	movs	r5, r0
	volatile struct _uart *uart = UART_STRUCT(dev);
     e96:	689b      	ldr	r3, [r3, #8]
	struct device *gpio_dev;
	int err;

	gpio_dev = device_get_binding(CONFIG_GPIO_NRF5_P0_DEV_NAME);
     e98:	4818      	ldr	r0, [pc, #96]	; (efc <uart_nrf5_init+0x6c>)
 *
 * @return 0 on success
 */
static int uart_nrf5_init(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
     e9a:	681c      	ldr	r4, [r3, #0]
	struct device *gpio_dev;
	int err;

	gpio_dev = device_get_binding(CONFIG_GPIO_NRF5_P0_DEV_NAME);
     e9c:	f012 fe8c 	bl	13bb8 <device_get_binding>
static inline int gpio_pin_configure(struct device *port, u32_t pin,
				     int flags)
{
	const struct gpio_driver_api *api = port->driver_api;

	return api->config(port, GPIO_ACCESS_BY_PIN, pin, flags);
     ea0:	6843      	ldr	r3, [r0, #4]
     ea2:	0006      	movs	r6, r0
     ea4:	681f      	ldr	r7, [r3, #0]
     ea6:	2302      	movs	r3, #2
     ea8:	220a      	movs	r2, #10
     eaa:	33ff      	adds	r3, #255	; 0xff
     eac:	2100      	movs	r1, #0
     eae:	47b8      	blx	r7
     eb0:	6873      	ldr	r3, [r6, #4]
     eb2:	0030      	movs	r0, r6
     eb4:	681f      	ldr	r7, [r3, #0]
     eb6:	2300      	movs	r3, #0
     eb8:	220b      	movs	r2, #11
     eba:	0019      	movs	r1, r3
     ebc:	47b8      	blx	r7
				  (GPIO_DIR_OUT | GPIO_PUD_PULL_UP));
	(void) gpio_pin_configure(gpio_dev,
				  CONFIG_UART_NRF5_GPIO_RX_PIN,
				  (GPIO_DIR_IN));

	uart->PSELTXD = CONFIG_UART_NRF5_GPIO_TX_PIN;
     ebe:	220a      	movs	r2, #10
     ec0:	4b0f      	ldr	r3, [pc, #60]	; (f00 <uart_nrf5_init+0x70>)
		break;
	default:
		return -EINVAL;
	}

	uart->BAUDRATE = divisor << UART_BAUDRATE_BAUDRATE_Pos;
     ec2:	21eb      	movs	r1, #235	; 0xeb
				  (GPIO_DIR_OUT | GPIO_PUD_PULL_UP));
	(void) gpio_pin_configure(gpio_dev,
				  CONFIG_UART_NRF5_GPIO_RX_PIN,
				  (GPIO_DIR_IN));

	uart->PSELTXD = CONFIG_UART_NRF5_GPIO_TX_PIN;
     ec4:	50e2      	str	r2, [r4, r3]
	uart->PSELRXD = CONFIG_UART_NRF5_GPIO_RX_PIN;
     ec6:	4b0f      	ldr	r3, [pc, #60]	; (f04 <uart_nrf5_init+0x74>)
     ec8:	3201      	adds	r2, #1
     eca:	50e2      	str	r2, [r4, r3]
	uart->PSELCTS = CONFIG_UART_NRF5_GPIO_CTS_PIN;
	uart->CONFIG = (UART_CONFIG_HWFC_Enabled << UART_CONFIG_HWFC_Pos);

#endif /* CONFIG_UART_NRF5_FLOW_CONTROL */

	DEV_DATA(dev)->baud_rate = CONFIG_UART_NRF5_BAUD_RATE;
     ecc:	22e1      	movs	r2, #225	; 0xe1
     ece:	68ab      	ldr	r3, [r5, #8]
     ed0:	0252      	lsls	r2, r2, #9
     ed2:	601a      	str	r2, [r3, #0]
 */

static int baudrate_set(struct device *dev,
			 u32_t baudrate, u32_t sys_clk_freq_hz)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
     ed4:	682b      	ldr	r3, [r5, #0]
		break;
	default:
		return -EINVAL;
	}

	uart->BAUDRATE = divisor << UART_BAUDRATE_BAUDRATE_Pos;
     ed6:	0449      	lsls	r1, r1, #17
 */

static int baudrate_set(struct device *dev,
			 u32_t baudrate, u32_t sys_clk_freq_hz)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
     ed8:	689b      	ldr	r3, [r3, #8]
	}

	/* Enable receiver and transmitter */
	uart->ENABLE = (UART_ENABLE_ENABLE_Enabled << UART_ENABLE_ENABLE_Pos);

	uart->EVENTS_TXDRDY = 0;
     eda:	2000      	movs	r0, #0
 */

static int baudrate_set(struct device *dev,
			 u32_t baudrate, u32_t sys_clk_freq_hz)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
     edc:	681a      	ldr	r2, [r3, #0]
		break;
	default:
		return -EINVAL;
	}

	uart->BAUDRATE = divisor << UART_BAUDRATE_BAUDRATE_Pos;
     ede:	4b0a      	ldr	r3, [pc, #40]	; (f08 <uart_nrf5_init+0x78>)
     ee0:	50d1      	str	r1, [r2, r3]
	if (err) {
		return err;
	}

	/* Enable receiver and transmitter */
	uart->ENABLE = (UART_ENABLE_ENABLE_Enabled << UART_ENABLE_ENABLE_Pos);
     ee2:	2204      	movs	r2, #4
     ee4:	3b24      	subs	r3, #36	; 0x24
     ee6:	50e2      	str	r2, [r4, r3]

	uart->EVENTS_TXDRDY = 0;
     ee8:	0023      	movs	r3, r4
     eea:	33fc      	adds	r3, #252	; 0xfc
     eec:	6218      	str	r0, [r3, #32]
	uart->EVENTS_RXDRDY = 0;
     eee:	60d8      	str	r0, [r3, #12]

	uart->TASKS_STARTTX = 1;
     ef0:	2301      	movs	r3, #1
     ef2:	60a3      	str	r3, [r4, #8]
	uart->TASKS_STARTRX = 1;
     ef4:	6023      	str	r3, [r4, #0]

	dev->driver_api = &uart_nrf5_driver_api;
     ef6:	4b05      	ldr	r3, [pc, #20]	; (f0c <uart_nrf5_init+0x7c>)
     ef8:	606b      	str	r3, [r5, #4]
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	DEV_CFG(dev)->irq_config_func(dev);
#endif

	return 0;
}
     efa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     efc:	00015273 	.word	0x00015273
     f00:	0000050c 	.word	0x0000050c
     f04:	00000514 	.word	0x00000514
     f08:	00000524 	.word	0x00000524
     f0c:	0001529c 	.word	0x0001529c

00000f10 <rtc_compare_set>:
static void rtc_compare_set(u32_t rtc_ticks)
{
	u32_t rtc_now;

	/* Try to set CC value. We assume the procedure is always successful. */
	RTC_CC_VALUE = rtc_ticks;
     f10:	22a8      	movs	r2, #168	; 0xa8
     f12:	4b08      	ldr	r3, [pc, #32]	; (f34 <rtc_compare_set+0x24>)
     f14:	00d2      	lsls	r2, r2, #3
     f16:	5098      	str	r0, [r3, r2]
	rtc_now = RTC_COUNTER;
     f18:	4a07      	ldr	r2, [pc, #28]	; (f38 <rtc_compare_set+0x28>)
     f1a:	589b      	ldr	r3, [r3, r2]
	 * by checking if the unsigned subtraction wraps around.
	 * If either of the above are true then instead of waiting for the CC
	 * event to trigger in the form of an interrupt, trigger it directly
	 * using the NVIC.
	 */
	if ((((rtc_ticks - rtc_now) & RTC_MASK) < RTC_MIN_DELTA) ||
     f1c:	1ac0      	subs	r0, r0, r3
     f1e:	0200      	lsls	r0, r0, #8
     f20:	0a00      	lsrs	r0, r0, #8
     f22:	4b06      	ldr	r3, [pc, #24]	; (f3c <rtc_compare_set+0x2c>)
     f24:	3802      	subs	r0, #2
     f26:	4298      	cmp	r0, r3
     f28:	d903      	bls.n	f32 <rtc_compare_set+0x22>
  \details Sets the pending bit of an external interrupt.
  \param [in]      IRQn  Interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
     f2a:	2280      	movs	r2, #128	; 0x80
     f2c:	4b04      	ldr	r3, [pc, #16]	; (f40 <rtc_compare_set+0x30>)
     f2e:	0292      	lsls	r2, r2, #10
     f30:	605a      	str	r2, [r3, #4]
	    (((rtc_ticks - rtc_now) & RTC_MASK) > RTC_HALF)) {
		NVIC_SetPendingIRQ(NRF5_IRQ_RTC1_IRQn);
	}
}
     f32:	4770      	bx	lr
     f34:	40011000 	.word	0x40011000
     f38:	00000504 	.word	0x00000504
     f3c:	007ffffd 	.word	0x007ffffd
     f40:	e000e1fc 	.word	0xe000e1fc

00000f44 <rtc_announce_set_next>:

	/* Read the RTC counter one single time in the beginning, so that an
	 * increase in the counter during this procedure leads to no race
	 * conditions.
	 */
	rtc_now = RTC_COUNTER;
     f44:	4b13      	ldr	r3, [pc, #76]	; (f94 <rtc_announce_set_next+0x50>)
     f46:	4a14      	ldr	r2, [pc, #80]	; (f98 <rtc_announce_set_next+0x54>)
 * Since this function can be preempted, we need to take some provisions to
 * announce all expected sys ticks that have passed.
 *
 */
static void rtc_announce_set_next(void)
{
     f48:	b570      	push	{r4, r5, r6, lr}

	/* Read the RTC counter one single time in the beginning, so that an
	 * increase in the counter during this procedure leads to no race
	 * conditions.
	 */
	rtc_now = RTC_COUNTER;
     f4a:	58d0      	ldr	r0, [r2, r3]
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;

	/* If no sys ticks have elapsed, there is no point in incrementing the
	 * counters or announcing it.
	 */
	if (rtc_elapsed >= RTC_TICKS_PER_SYS_TICK) {
     f4c:	23a3      	movs	r3, #163	; 0xa3
	 * conditions.
	 */
	rtc_now = RTC_COUNTER;

	/* Calculate how many RTC ticks elapsed since the last sys tick. */
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
     f4e:	4d13      	ldr	r5, [pc, #76]	; (f9c <rtc_announce_set_next+0x58>)

	/* If no sys ticks have elapsed, there is no point in incrementing the
	 * counters or announcing it.
	 */
	if (rtc_elapsed >= RTC_TICKS_PER_SYS_TICK) {
     f50:	005b      	lsls	r3, r3, #1
	 * conditions.
	 */
	rtc_now = RTC_COUNTER;

	/* Calculate how many RTC ticks elapsed since the last sys tick. */
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
     f52:	682c      	ldr	r4, [r5, #0]
     f54:	1b00      	subs	r0, r0, r4
     f56:	0200      	lsls	r0, r0, #8
     f58:	0a00      	lsrs	r0, r0, #8

	/* If no sys ticks have elapsed, there is no point in incrementing the
	 * counters or announcing it.
	 */
	if (rtc_elapsed >= RTC_TICKS_PER_SYS_TICK) {
     f5a:	4298      	cmp	r0, r3
     f5c:	d913      	bls.n	f86 <rtc_announce_set_next+0x42>
#ifdef CONFIG_TICKLESS_IDLE
		/* Calculate how many sys ticks elapsed since the last sys tick
		 * and notify the kernel if necessary.
		 */
		sys_elapsed = rtc_elapsed / RTC_TICKS_PER_SYS_TICK;
     f5e:	2148      	movs	r1, #72	; 0x48
     f60:	31ff      	adds	r1, #255	; 0xff
     f62:	f7ff f91d 	bl	1a0 <__aeabi_uidiv>

		if (sys_elapsed > expected_sys_ticks) {
     f66:	4b0e      	ldr	r3, [pc, #56]	; (fa0 <rtc_announce_set_next+0x5c>)
     f68:	681b      	ldr	r3, [r3, #0]
     f6a:	4298      	cmp	r0, r3
     f6c:	d900      	bls.n	f70 <rtc_announce_set_next+0x2c>
     f6e:	0018      	movs	r0, r3

		/* Store RTC_COUNTER floored to the last sys tick. This is
		 * done, so that ISR can properly calculate that 1 sys tick
		 * has passed.
		 */
		rtc_past = (rtc_past +
     f70:	2348      	movs	r3, #72	; 0x48
     f72:	33ff      	adds	r3, #255	; 0xff
     f74:	4343      	muls	r3, r0
     f76:	191c      	adds	r4, r3, r4
     f78:	0224      	lsls	r4, r4, #8
				(sys_elapsed * RTC_TICKS_PER_SYS_TICK)
			   ) & RTC_MASK;

		_sys_idle_elapsed_ticks = sys_elapsed;
     f7a:	4b0a      	ldr	r3, [pc, #40]	; (fa4 <rtc_announce_set_next+0x60>)

		/* Store RTC_COUNTER floored to the last sys tick. This is
		 * done, so that ISR can properly calculate that 1 sys tick
		 * has passed.
		 */
		rtc_past = (rtc_past +
     f7c:	0a24      	lsrs	r4, r4, #8
     f7e:	602c      	str	r4, [r5, #0]
				(sys_elapsed * RTC_TICKS_PER_SYS_TICK)
			   ) & RTC_MASK;

		_sys_idle_elapsed_ticks = sys_elapsed;
     f80:	6018      	str	r0, [r3, #0]
		_sys_clock_tick_announce();
     f82:	f013 fd1b 	bl	149bc <_nano_sys_clock_tick_announce>
	}

	/* Set the RTC to the next sys tick */
	rtc_compare_set(rtc_past + RTC_TICKS_PER_SYS_TICK);
     f86:	6828      	ldr	r0, [r5, #0]
     f88:	3048      	adds	r0, #72	; 0x48
     f8a:	30ff      	adds	r0, #255	; 0xff
     f8c:	f7ff ffc0 	bl	f10 <rtc_compare_set>
}
     f90:	bd70      	pop	{r4, r5, r6, pc}
     f92:	46c0      	nop			; (mov r8, r8)
     f94:	00000504 	.word	0x00000504
     f98:	40011000 	.word	0x40011000
     f9c:	20000b00 	.word	0x20000b00
     fa0:	20000b04 	.word	0x20000b04
     fa4:	20000924 	.word	0x20000924

00000fa8 <rtc1_nrf5_isr>:
 */
static void rtc1_nrf5_isr(void *arg)
{
	ARG_UNUSED(arg);

	RTC_CC_EVENT = 0;
     fa8:	2200      	movs	r2, #0
 * 400. However, the ISR is preempted for a number of sys ticks, until 450 in
 * this example. The ISR will then announce the number of sys ticks it was
 * delayed (2), and schedule the next sys tick (5) at 500.
 */
static void rtc1_nrf5_isr(void *arg)
{
     faa:	b510      	push	{r4, lr}
	ARG_UNUSED(arg);

	RTC_CC_EVENT = 0;
     fac:	4b02      	ldr	r3, [pc, #8]	; (fb8 <rtc1_nrf5_isr+0x10>)
     fae:	645a      	str	r2, [r3, #68]	; 0x44
	rtc_announce_set_next();
     fb0:	f7ff ffc8 	bl	f44 <rtc_announce_set_next>
}
     fb4:	bd10      	pop	{r4, pc}
     fb6:	46c0      	nop			; (mov r8, r8)
     fb8:	400110fc 	.word	0x400110fc

00000fbc <_timer_idle_enter>:
 * @return N/A
 */
void _timer_idle_enter(s32_t sys_ticks)
{
	/* Restrict ticks to max supported by RTC without risking overflow. */
	if ((sys_ticks < 0) ||
     fbc:	4b07      	ldr	r3, [pc, #28]	; (fdc <_timer_idle_enter+0x20>)
 * c) The RTC is programmed to fire at sys tick 1 + 3 = 4 (RTC tick 400)
 *
 * @return N/A
 */
void _timer_idle_enter(s32_t sys_ticks)
{
     fbe:	b510      	push	{r4, lr}
	/* Restrict ticks to max supported by RTC without risking overflow. */
	if ((sys_ticks < 0) ||
     fc0:	4298      	cmp	r0, r3
     fc2:	d900      	bls.n	fc6 <_timer_idle_enter+0xa>
	    (sys_ticks > (RTC_HALF / RTC_TICKS_PER_SYS_TICK))) {
		sys_ticks = RTC_HALF / RTC_TICKS_PER_SYS_TICK;
     fc4:	0018      	movs	r0, r3
	}

	expected_sys_ticks = sys_ticks;
     fc6:	4b06      	ldr	r3, [pc, #24]	; (fe0 <_timer_idle_enter+0x24>)
     fc8:	6018      	str	r0, [r3, #0]

	/* If ticks is 0, the RTC interrupt handler will be set pending
	 * immediately, meaning that we will not go to sleep.
	 */
	rtc_compare_set(rtc_past + (sys_ticks * RTC_TICKS_PER_SYS_TICK));
     fca:	2348      	movs	r3, #72	; 0x48
     fcc:	33ff      	adds	r3, #255	; 0xff
     fce:	4358      	muls	r0, r3
     fd0:	4b04      	ldr	r3, [pc, #16]	; (fe4 <_timer_idle_enter+0x28>)
     fd2:	681b      	ldr	r3, [r3, #0]
     fd4:	18c0      	adds	r0, r0, r3
     fd6:	f7ff ff9b 	bl	f10 <rtc_compare_set>
}
     fda:	bd10      	pop	{r4, pc}
     fdc:	00006435 	.word	0x00006435
     fe0:	20000b04 	.word	0x20000b04
     fe4:	20000b00 	.word	0x20000b00

00000fe8 <_timer_idle_exit>:
{
	/* Clear the event flag and interrupt in case we woke up on the RTC
	 * interrupt. No need to run the RTC ISR since everything that needs
	 * to run in the ISR will be done in this call.
	 */
	RTC_CC_EVENT = 0;
     fe8:	2200      	movs	r2, #0
     fea:	4b07      	ldr	r3, [pc, #28]	; (1008 <_timer_idle_exit+0x20>)
 * a) Notify how many sys ticks have passed, i.e., 350 - 150 / 100 = 2.
 * b) Schedule next sys tick at 400.
 *
 */
void _timer_idle_exit(void)
{
     fec:	b510      	push	{r4, lr}
  \details Clears the pending bit of an external interrupt.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
     fee:	2180      	movs	r1, #128	; 0x80
	/* Clear the event flag and interrupt in case we woke up on the RTC
	 * interrupt. No need to run the RTC ISR since everything that needs
	 * to run in the ISR will be done in this call.
	 */
	RTC_CC_EVENT = 0;
     ff0:	645a      	str	r2, [r3, #68]	; 0x44
     ff2:	23c0      	movs	r3, #192	; 0xc0
     ff4:	4a05      	ldr	r2, [pc, #20]	; (100c <_timer_idle_exit+0x24>)
     ff6:	005b      	lsls	r3, r3, #1
     ff8:	0289      	lsls	r1, r1, #10
     ffa:	50d1      	str	r1, [r2, r3]
	NVIC_ClearPendingIRQ(NRF5_IRQ_RTC1_IRQn);

	rtc_announce_set_next();
     ffc:	f7ff ffa2 	bl	f44 <rtc_announce_set_next>

	/* After exiting idle, the kernel no longer expects more than one sys
	 * ticks to have passed when _sys_clock_tick_announce() is called.
	 */
	expected_sys_ticks = 1;
    1000:	2201      	movs	r2, #1
    1002:	4b03      	ldr	r3, [pc, #12]	; (1010 <_timer_idle_exit+0x28>)
    1004:	601a      	str	r2, [r3, #0]
}
    1006:	bd10      	pop	{r4, pc}
    1008:	400110fc 	.word	0x400110fc
    100c:	e000e100 	.word	0xe000e100
    1010:	20000b04 	.word	0x20000b04

00001014 <_sys_clock_driver_init>:
	RTC_CC_EVENT = 0;
	rtc_announce_set_next();
}

int _sys_clock_driver_init(struct device *device)
{
    1014:	b570      	push	{r4, r5, r6, lr}
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
    1016:	481a      	ldr	r0, [pc, #104]	; (1080 <_sys_clock_driver_init+0x6c>)
    1018:	f012 fdce 	bl	13bb8 <device_get_binding>
	if (!clock) {
    101c:	2800      	cmp	r0, #0
    101e:	d02c      	beq.n	107a <_sys_clock_driver_init+0x66>
		return -1;
	}

	clock_control_on(clock, (void *)CLOCK_CONTROL_NRF5_K32SRC);

	rtc_past = 0;
    1020:	2400      	movs	r4, #0

#ifdef CONFIG_TICKLESS_IDLE
	expected_sys_ticks = 1;
    1022:	2601      	movs	r6, #1
static inline int clock_control_on(struct device *dev,
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->on(dev, sys);
    1024:	6843      	ldr	r3, [r0, #4]
    1026:	2101      	movs	r1, #1
    1028:	681b      	ldr	r3, [r3, #0]
    102a:	4798      	blx	r3
		return -1;
	}

	clock_control_on(clock, (void *)CLOCK_CONTROL_NRF5_K32SRC);

	rtc_past = 0;
    102c:	4b15      	ldr	r3, [pc, #84]	; (1084 <_sys_clock_driver_init+0x70>)
	expected_sys_ticks = 1;
#endif /* CONFIG_TICKLESS_IDLE */

	/* TODO: replace with counter driver to access RTC */
	SYS_CLOCK_RTC->PRESCALER = 0;
	SYS_CLOCK_RTC->CC[0] = RTC_TICKS_PER_SYS_TICK;
    102e:	2248      	movs	r2, #72	; 0x48
		return -1;
	}

	clock_control_on(clock, (void *)CLOCK_CONTROL_NRF5_K32SRC);

	rtc_past = 0;
    1030:	601c      	str	r4, [r3, #0]

#ifdef CONFIG_TICKLESS_IDLE
	expected_sys_ticks = 1;
    1032:	4b15      	ldr	r3, [pc, #84]	; (1088 <_sys_clock_driver_init+0x74>)
#endif /* CONFIG_TICKLESS_IDLE */

	/* TODO: replace with counter driver to access RTC */
	SYS_CLOCK_RTC->PRESCALER = 0;
    1034:	4d15      	ldr	r5, [pc, #84]	; (108c <_sys_clock_driver_init+0x78>)
	clock_control_on(clock, (void *)CLOCK_CONTROL_NRF5_K32SRC);

	rtc_past = 0;

#ifdef CONFIG_TICKLESS_IDLE
	expected_sys_ticks = 1;
    1036:	601e      	str	r6, [r3, #0]
#endif /* CONFIG_TICKLESS_IDLE */

	/* TODO: replace with counter driver to access RTC */
	SYS_CLOCK_RTC->PRESCALER = 0;
    1038:	23a1      	movs	r3, #161	; 0xa1
    103a:	00db      	lsls	r3, r3, #3
    103c:	50ec      	str	r4, [r5, r3]
	SYS_CLOCK_RTC->CC[0] = RTC_TICKS_PER_SYS_TICK;
    103e:	32ff      	adds	r2, #255	; 0xff
    1040:	3338      	adds	r3, #56	; 0x38
    1042:	50ea      	str	r2, [r5, r3]
	SYS_CLOCK_RTC->EVTENSET = RTC_EVTENSET_COMPARE0_Msk;
    1044:	2380      	movs	r3, #128	; 0x80
    1046:	32fe      	adds	r2, #254	; 0xfe
    1048:	025b      	lsls	r3, r3, #9
    104a:	32ff      	adds	r2, #255	; 0xff
    104c:	50ab      	str	r3, [r5, r2]
	SYS_CLOCK_RTC->INTENSET = RTC_INTENSET_COMPARE0_Msk;
    104e:	3a40      	subs	r2, #64	; 0x40
    1050:	50ab      	str	r3, [r5, r2]

	/* Clear the event flag and possible pending interrupt */
	RTC_CC_EVENT = 0;
    1052:	4b0f      	ldr	r3, [pc, #60]	; (1090 <_sys_clock_driver_init+0x7c>)
    1054:	2180      	movs	r1, #128	; 0x80
    1056:	645c      	str	r4, [r3, #68]	; 0x44
    1058:	23c0      	movs	r3, #192	; 0xc0
    105a:	4a0e      	ldr	r2, [pc, #56]	; (1094 <_sys_clock_driver_init+0x80>)
    105c:	005b      	lsls	r3, r3, #1
    105e:	0289      	lsls	r1, r1, #10
    1060:	50d1      	str	r1, [r2, r3]
	NVIC_ClearPendingIRQ(NRF5_IRQ_RTC1_IRQn);

	IRQ_CONNECT(NRF5_IRQ_RTC1_IRQn, 1, rtc1_nrf5_isr, 0, 0);
    1062:	2011      	movs	r0, #17
    1064:	0022      	movs	r2, r4
    1066:	0031      	movs	r1, r6
    1068:	f012 fc18 	bl	1389c <_irq_priority_set>
	irq_enable(NRF5_IRQ_RTC1_IRQn);
    106c:	2011      	movs	r0, #17
    106e:	f012 fbf5 	bl	1385c <_arch_irq_enable>

	SYS_CLOCK_RTC->TASKS_CLEAR = 1;
    1072:	60ae      	str	r6, [r5, #8]
	SYS_CLOCK_RTC->TASKS_START = 1;

	return 0;
    1074:	0020      	movs	r0, r4

	IRQ_CONNECT(NRF5_IRQ_RTC1_IRQn, 1, rtc1_nrf5_isr, 0, 0);
	irq_enable(NRF5_IRQ_RTC1_IRQn);

	SYS_CLOCK_RTC->TASKS_CLEAR = 1;
	SYS_CLOCK_RTC->TASKS_START = 1;
    1076:	602e      	str	r6, [r5, #0]

	return 0;
    1078:	e001      	b.n	107e <_sys_clock_driver_init+0x6a>

	ARG_UNUSED(device);

	clock = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
	if (!clock) {
		return -1;
    107a:	2001      	movs	r0, #1
    107c:	4240      	negs	r0, r0

	SYS_CLOCK_RTC->TASKS_CLEAR = 1;
	SYS_CLOCK_RTC->TASKS_START = 1;

	return 0;
}
    107e:	bd70      	pop	{r4, r5, r6, pc}
    1080:	0001527a 	.word	0x0001527a
    1084:	20000b00 	.word	0x20000b00
    1088:	20000b04 	.word	0x20000b04
    108c:	40011000 	.word	0x40011000
    1090:	400110fc 	.word	0x400110fc
    1094:	e000e100 	.word	0xe000e100

00001098 <gpiote_find_channel>:
#define GPIOTE_CFG_PIN_GET(config) ((config & GPIOTE_CONFIG_PSEL_Msk) >> \
				GPIOTE_CONFIG_PSEL_Pos)

static int gpiote_find_channel(struct device *dev, u32_t pin)
{
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    1098:	6803      	ldr	r3, [r0, #0]
#define GPIOTE_CFG_PIN(pin) ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PSEL_Msk)
#define GPIOTE_CFG_PIN_GET(config) ((config & GPIOTE_CONFIG_PSEL_Msk) >> \
				GPIOTE_CONFIG_PSEL_Pos)

static int gpiote_find_channel(struct device *dev, u32_t pin)
{
    109a:	b570      	push	{r4, r5, r6, lr}
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    109c:	689b      	ldr	r3, [r3, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
	int i;

	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
		if ((data->gpiote_chan_mask & BIT(i)) &&
    109e:	2501      	movs	r5, #1
#define GPIOTE_CFG_PIN_GET(config) ((config & GPIOTE_CONFIG_PSEL_Msk) >> \
				GPIOTE_CONFIG_PSEL_Pos)

static int gpiote_find_channel(struct device *dev, u32_t pin)
{
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    10a0:	689a      	ldr	r2, [r3, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
	int i;

	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
		if ((data->gpiote_chan_mask & BIT(i)) &&
    10a2:	261f      	movs	r6, #31
    10a4:	6883      	ldr	r3, [r0, #8]
{
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
	int i;

	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    10a6:	2000      	movs	r0, #0
		if ((data->gpiote_chan_mask & BIT(i)) &&
    10a8:	68dc      	ldr	r4, [r3, #12]
    10aa:	0023      	movs	r3, r4
    10ac:	40c3      	lsrs	r3, r0
    10ae:	422b      	tst	r3, r5
    10b0:	d008      	beq.n	10c4 <gpiote_find_channel+0x2c>
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin)) {
    10b2:	0003      	movs	r3, r0
    10b4:	3345      	adds	r3, #69	; 0x45
    10b6:	33ff      	adds	r3, #255	; 0xff
    10b8:	009b      	lsls	r3, r3, #2
    10ba:	589b      	ldr	r3, [r3, r2]
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
	int i;

	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
		if ((data->gpiote_chan_mask & BIT(i)) &&
    10bc:	0a1b      	lsrs	r3, r3, #8
    10be:	4033      	ands	r3, r6
    10c0:	428b      	cmp	r3, r1
    10c2:	d003      	beq.n	10cc <gpiote_find_channel+0x34>
{
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
	int i;

	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    10c4:	3001      	adds	r0, #1
    10c6:	2804      	cmp	r0, #4
    10c8:	d1ef      	bne.n	10aa <gpiote_find_channel+0x12>
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin)) {
			return i;
		}
	}

	return -ENODEV;
    10ca:	3817      	subs	r0, #23
}
    10cc:	bd70      	pop	{r4, r5, r6, pc}

000010ce <gpio_nrf5_read>:
	return 0;
}

static int gpio_nrf5_read(struct device *dev,
			  int access_op, u32_t pin, u32_t *value)
{
    10ce:	b530      	push	{r4, r5, lr}
    10d0:	0015      	movs	r5, r2
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
    10d2:	6802      	ldr	r2, [r0, #0]
    10d4:	20a2      	movs	r0, #162	; 0xa2
    10d6:	6892      	ldr	r2, [r2, #8]
    10d8:	00c0      	lsls	r0, r0, #3
    10da:	6814      	ldr	r4, [r2, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
		*value = (gpio->IN >> pin) & 0x1;
    10dc:	5822      	ldr	r2, [r4, r0]
static int gpio_nrf5_read(struct device *dev,
			  int access_op, u32_t pin, u32_t *value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);

	if (access_op == GPIO_ACCESS_BY_PIN) {
    10de:	2900      	cmp	r1, #0
    10e0:	d102      	bne.n	10e8 <gpio_nrf5_read+0x1a>
		*value = (gpio->IN >> pin) & 0x1;
    10e2:	40ea      	lsrs	r2, r5
    10e4:	3101      	adds	r1, #1
    10e6:	400a      	ands	r2, r1
	} else {
		*value = gpio->IN;
	}
	return 0;
}
    10e8:	2000      	movs	r0, #0
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);

	if (access_op == GPIO_ACCESS_BY_PIN) {
		*value = (gpio->IN >> pin) & 0x1;
	} else {
		*value = gpio->IN;
    10ea:	601a      	str	r2, [r3, #0]
	}
	return 0;
}
    10ec:	bd30      	pop	{r4, r5, pc}
	...

000010f0 <gpio_nrf5_write>:

static int gpio_nrf5_write(struct device *dev,
			   int access_op, u32_t pin, u32_t value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
    10f0:	6800      	ldr	r0, [r0, #0]
    10f2:	6880      	ldr	r0, [r0, #8]
    10f4:	6800      	ldr	r0, [r0, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
    10f6:	2900      	cmp	r1, #0
    10f8:	d109      	bne.n	110e <gpio_nrf5_write+0x1e>
    10fa:	3101      	adds	r1, #1
		if (value) { /* 1 */
			gpio->OUTSET = BIT(pin);
    10fc:	4091      	lsls	r1, r2
			   int access_op, u32_t pin, u32_t value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);

	if (access_op == GPIO_ACCESS_BY_PIN) {
		if (value) { /* 1 */
    10fe:	2b00      	cmp	r3, #0
    1100:	d002      	beq.n	1108 <gpio_nrf5_write+0x18>
			gpio->OUTSET = BIT(pin);
    1102:	23a1      	movs	r3, #161	; 0xa1
    1104:	00db      	lsls	r3, r3, #3
    1106:	e000      	b.n	110a <gpio_nrf5_write+0x1a>
		} else { /* 0 */
			gpio->OUTCLR = BIT(pin);
    1108:	4b03      	ldr	r3, [pc, #12]	; (1118 <gpio_nrf5_write+0x28>)
    110a:	50c1      	str	r1, [r0, r3]
    110c:	e001      	b.n	1112 <gpio_nrf5_write+0x22>
		}
	} else {
		gpio->OUT = value;
    110e:	4a03      	ldr	r2, [pc, #12]	; (111c <gpio_nrf5_write+0x2c>)
    1110:	5083      	str	r3, [r0, r2]
	}
	return 0;
}
    1112:	2000      	movs	r0, #0
    1114:	4770      	bx	lr
    1116:	46c0      	nop			; (mov r8, r8)
    1118:	0000050c 	.word	0x0000050c
    111c:	00000504 	.word	0x00000504

00001120 <gpio_nrf5_manage_callback>:

static int gpio_nrf5_manage_callback(struct device *dev,
				    struct gpio_callback *callback, bool set)
{
    1120:	b510      	push	{r4, lr}
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    1122:	6883      	ldr	r3, [r0, #8]
					 bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (set) {
    1124:	2a00      	cmp	r2, #0
    1126:	d007      	beq.n	1138 <gpio_nrf5_manage_callback+0x18>
 * @param node A pointer on the node to prepend
 */
static inline void sys_slist_prepend(sys_slist_t *list,
				     sys_snode_t *node)
{
	node->next = list->head;
    1128:	681a      	ldr	r2, [r3, #0]
    112a:	600a      	str	r2, [r1, #0]
	list->head = node;

	if (!list->tail) {
    112c:	685a      	ldr	r2, [r3, #4]
 */
static inline void sys_slist_prepend(sys_slist_t *list,
				     sys_snode_t *node)
{
	node->next = list->head;
	list->head = node;
    112e:	6019      	str	r1, [r3, #0]

	if (!list->tail) {
    1130:	2a00      	cmp	r2, #0
    1132:	d119      	bne.n	1168 <gpio_nrf5_manage_callback+0x48>
		list->tail = list->head;
    1134:	6059      	str	r1, [r3, #4]
    1136:	e017      	b.n	1168 <gpio_nrf5_manage_callback+0x48>
    1138:	6818      	ldr	r0, [r3, #0]
					     sys_snode_t *node)
{
	sys_snode_t *prev = NULL;
	sys_snode_t *test;

	SYS_SLIST_FOR_EACH_NODE(list, test) {
    113a:	2800      	cmp	r0, #0
    113c:	d014      	beq.n	1168 <gpio_nrf5_manage_callback+0x48>
		if (test == node) {
    113e:	4281      	cmp	r1, r0
    1140:	d10f      	bne.n	1162 <gpio_nrf5_manage_callback+0x42>
    1142:	685c      	ldr	r4, [r3, #4]
    1144:	6808      	ldr	r0, [r1, #0]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node)
{
	if (!prev_node) {
    1146:	2a00      	cmp	r2, #0
    1148:	d104      	bne.n	1154 <gpio_nrf5_manage_callback+0x34>
		list->head = node->next;
    114a:	6018      	str	r0, [r3, #0]

		/* Was node also the tail? */
		if (list->tail == node) {
    114c:	42a1      	cmp	r1, r4
    114e:	d105      	bne.n	115c <gpio_nrf5_manage_callback+0x3c>
			list->tail = list->head;
    1150:	6058      	str	r0, [r3, #4]
    1152:	e003      	b.n	115c <gpio_nrf5_manage_callback+0x3c>
		}
	} else {
		prev_node->next = node->next;
    1154:	6010      	str	r0, [r2, #0]

		/* Was node the tail? */
		if (list->tail == node) {
    1156:	42a1      	cmp	r1, r4
    1158:	d100      	bne.n	115c <gpio_nrf5_manage_callback+0x3c>
			list->tail = prev_node;
    115a:	605a      	str	r2, [r3, #4]
		}
	}

	node->next = NULL;
    115c:	2300      	movs	r3, #0
    115e:	600b      	str	r3, [r1, #0]
    1160:	e002      	b.n	1168 <gpio_nrf5_manage_callback+0x48>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node)
{
	return node->next;
    1162:	0002      	movs	r2, r0
    1164:	6800      	ldr	r0, [r0, #0]
    1166:	e7e8      	b.n	113a <gpio_nrf5_manage_callback+0x1a>

	_gpio_manage_callback(&data->callbacks, callback, set);

	return 0;
}
    1168:	2000      	movs	r0, #0
    116a:	bd10      	pop	{r4, pc}

0000116c <gpio_nrf5_enable_callback>:


static int gpio_nrf5_enable_callback(struct device *dev,
				    int access_op, u32_t pin)
{
    116c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    116e:	6803      	ldr	r3, [r0, #0]
}


static int gpio_nrf5_enable_callback(struct device *dev,
				    int access_op, u32_t pin)
{
    1170:	000c      	movs	r4, r1
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    1172:	689b      	ldr	r3, [r3, #8]
}


static int gpio_nrf5_enable_callback(struct device *dev,
				    int access_op, u32_t pin)
{
    1174:	0017      	movs	r7, r2
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    1176:	689d      	ldr	r5, [r3, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    1178:	6886      	ldr	r6, [r0, #8]
	int i;

	if (access_op == GPIO_ACCESS_BY_PIN) {
    117a:	2900      	cmp	r1, #0
    117c:	d114      	bne.n	11a8 <gpio_nrf5_enable_callback+0x3c>

		i = gpiote_find_channel(dev, pin);
    117e:	0011      	movs	r1, r2
    1180:	f7ff ff8a 	bl	1098 <gpiote_find_channel>
    1184:	1e02      	subs	r2, r0, #0
		if (i < 0) {
    1186:	db11      	blt.n	11ac <gpio_nrf5_enable_callback+0x40>
			return i;
		}

		data->pin_callback_enables |= BIT(pin);
    1188:	2301      	movs	r3, #1
    118a:	0019      	movs	r1, r3
    118c:	40b9      	lsls	r1, r7
    118e:	68b0      	ldr	r0, [r6, #8]
		/* clear event before any interrupt triggers */
		gpiote->EVENTS_IN[i] = 0;
		/* enable interrupt for the GPIOTE channel */
		gpiote->INTENSET = BIT(i);
    1190:	4093      	lsls	r3, r2
		i = gpiote_find_channel(dev, pin);
		if (i < 0) {
			return i;
		}

		data->pin_callback_enables |= BIT(pin);
    1192:	4301      	orrs	r1, r0
    1194:	60b1      	str	r1, [r6, #8]
		/* clear event before any interrupt triggers */
		gpiote->EVENTS_IN[i] = 0;
    1196:	0011      	movs	r1, r2
		/* enable interrupt for the GPIOTE channel */
		gpiote->INTENSET = BIT(i);
    1198:	22c1      	movs	r2, #193	; 0xc1
			return i;
		}

		data->pin_callback_enables |= BIT(pin);
		/* clear event before any interrupt triggers */
		gpiote->EVENTS_IN[i] = 0;
    119a:	3140      	adds	r1, #64	; 0x40
    119c:	0089      	lsls	r1, r1, #2
		/* enable interrupt for the GPIOTE channel */
		gpiote->INTENSET = BIT(i);
    119e:	0092      	lsls	r2, r2, #2
			return i;
		}

		data->pin_callback_enables |= BIT(pin);
		/* clear event before any interrupt triggers */
		gpiote->EVENTS_IN[i] = 0;
    11a0:	514c      	str	r4, [r1, r5]
		gpiote->INTENSET = BIT(i);
	} else {
		return -ENOTSUP;
	}

	return 0;
    11a2:	0020      	movs	r0, r4

		data->pin_callback_enables |= BIT(pin);
		/* clear event before any interrupt triggers */
		gpiote->EVENTS_IN[i] = 0;
		/* enable interrupt for the GPIOTE channel */
		gpiote->INTENSET = BIT(i);
    11a4:	50ab      	str	r3, [r5, r2]
	} else {
		return -ENOTSUP;
	}

	return 0;
    11a6:	e001      	b.n	11ac <gpio_nrf5_enable_callback+0x40>
		/* clear event before any interrupt triggers */
		gpiote->EVENTS_IN[i] = 0;
		/* enable interrupt for the GPIOTE channel */
		gpiote->INTENSET = BIT(i);
	} else {
		return -ENOTSUP;
    11a8:	2023      	movs	r0, #35	; 0x23
    11aa:	4240      	negs	r0, r0
	}

	return 0;
}
    11ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000011ae <gpio_nrf5_disable_callback>:


static int gpio_nrf5_disable_callback(struct device *dev,
				     int access_op, u32_t pin)
{
    11ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    11b0:	6803      	ldr	r3, [r0, #0]
}


static int gpio_nrf5_disable_callback(struct device *dev,
				     int access_op, u32_t pin)
{
    11b2:	000c      	movs	r4, r1
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    11b4:	689b      	ldr	r3, [r3, #8]
}


static int gpio_nrf5_disable_callback(struct device *dev,
				     int access_op, u32_t pin)
{
    11b6:	0016      	movs	r6, r2
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    11b8:	689f      	ldr	r7, [r3, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    11ba:	6885      	ldr	r5, [r0, #8]
	int i;

	if (access_op == GPIO_ACCESS_BY_PIN) {
    11bc:	2900      	cmp	r1, #0
    11be:	d110      	bne.n	11e2 <gpio_nrf5_disable_callback+0x34>
		i = gpiote_find_channel(dev, pin);
    11c0:	0011      	movs	r1, r2
    11c2:	f7ff ff69 	bl	1098 <gpiote_find_channel>
    11c6:	1e03      	subs	r3, r0, #0
		if (i < 0) {
    11c8:	db0d      	blt.n	11e6 <gpio_nrf5_disable_callback+0x38>
			return i;
		}

		data->pin_callback_enables &= ~(BIT(pin));
    11ca:	2301      	movs	r3, #1
    11cc:	001a      	movs	r2, r3
    11ce:	40b2      	lsls	r2, r6
    11d0:	68a9      	ldr	r1, [r5, #8]
		/* disable interrupt for the GPIOTE channel */
		gpiote->INTENCLR = BIT(i);
    11d2:	4083      	lsls	r3, r0
		i = gpiote_find_channel(dev, pin);
		if (i < 0) {
			return i;
		}

		data->pin_callback_enables &= ~(BIT(pin));
    11d4:	4391      	bics	r1, r2
		/* disable interrupt for the GPIOTE channel */
		gpiote->INTENCLR = BIT(i);
    11d6:	22c2      	movs	r2, #194	; 0xc2
    11d8:	0092      	lsls	r2, r2, #2
		i = gpiote_find_channel(dev, pin);
		if (i < 0) {
			return i;
		}

		data->pin_callback_enables &= ~(BIT(pin));
    11da:	60a9      	str	r1, [r5, #8]
		/* disable interrupt for the GPIOTE channel */
		gpiote->INTENCLR = BIT(i);
    11dc:	50bb      	str	r3, [r7, r2]
	} else {
		return -ENOTSUP;
	}

	return 0;
    11de:	0023      	movs	r3, r4
    11e0:	e001      	b.n	11e6 <gpio_nrf5_disable_callback+0x38>

		data->pin_callback_enables &= ~(BIT(pin));
		/* disable interrupt for the GPIOTE channel */
		gpiote->INTENCLR = BIT(i);
	} else {
		return -ENOTSUP;
    11e2:	2323      	movs	r3, #35	; 0x23
    11e4:	425b      	negs	r3, r3
	}

	return 0;
}
    11e6:	0018      	movs	r0, r3
    11e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000011ea <gpio_nrf5_P0_init>:
		    &gpio_data_P0, &gpio_nrf5_P0_cfg,
		    POST_KERNEL, CONFIG_KERNEL_INIT_PRIORITY_DEFAULT,
		    &gpio_nrf5_drv_api_funcs);

static int gpio_nrf5_P0_init(struct device *dev)
{
    11ea:	b510      	push	{r4, lr}
	IRQ_CONNECT(NRF5_IRQ_GPIOTE_IRQn, CONFIG_GPIO_NRF5_PORT_P0_PRI,
    11ec:	2200      	movs	r2, #0
    11ee:	2101      	movs	r1, #1
    11f0:	2006      	movs	r0, #6
    11f2:	f012 fb53 	bl	1389c <_irq_priority_set>
		    gpio_nrf5_port_isr, DEVICE_GET(gpio_nrf5_P0), 0);

	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
    11f6:	2006      	movs	r0, #6
    11f8:	f012 fb30 	bl	1385c <_arch_irq_enable>

	return 0;
}
    11fc:	2000      	movs	r0, #0
    11fe:	bd10      	pop	{r4, pc}

00001200 <gpio_nrf5_port_isr>:
 * @return N/A
 */
static void gpio_nrf5_port_isr(void *arg)
{
	struct device *dev = arg;
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    1200:	6803      	ldr	r3, [r0, #0]
 * @param dev Pointer to device structure for driver instance
 *
 * @return N/A
 */
static void gpio_nrf5_port_isr(void *arg)
{
    1202:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct device *dev = arg;
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    1204:	689b      	ldr	r3, [r3, #8]
 * @param dev Pointer to device structure for driver instance
 *
 * @return N/A
 */
static void gpio_nrf5_port_isr(void *arg)
{
    1206:	0004      	movs	r4, r0
	struct device *dev = arg;
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    1208:	689b      	ldr	r3, [r3, #8]
	int i;

	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
		if (gpiote->EVENTS_IN[i]) {
			gpiote->EVENTS_IN[i] = 0;
			int_status |= BIT(GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]));
    120a:	2701      	movs	r7, #1
 * @return N/A
 */
static void gpio_nrf5_port_isr(void *arg)
{
	struct device *dev = arg;
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    120c:	9301      	str	r3, [sp, #4]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
	u32_t enabled_int, int_status = 0;
	int i;

	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    120e:	2300      	movs	r3, #0
static void gpio_nrf5_port_isr(void *arg)
{
	struct device *dev = arg;
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
	u32_t enabled_int, int_status = 0;
    1210:	001a      	movs	r2, r3
 */
static void gpio_nrf5_port_isr(void *arg)
{
	struct device *dev = arg;
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    1212:	6885      	ldr	r5, [r0, #8]
    1214:	9801      	ldr	r0, [sp, #4]
    1216:	0099      	lsls	r1, r3, #2
    1218:	1841      	adds	r1, r0, r1
	u32_t enabled_int, int_status = 0;
	int i;

	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
		if (gpiote->EVENTS_IN[i]) {
    121a:	0008      	movs	r0, r1
    121c:	30fc      	adds	r0, #252	; 0xfc
    121e:	6846      	ldr	r6, [r0, #4]
    1220:	2e00      	cmp	r6, #0
    1222:	d00a      	beq.n	123a <gpio_nrf5_port_isr+0x3a>
			gpiote->EVENTS_IN[i] = 0;
    1224:	2600      	movs	r6, #0
    1226:	6046      	str	r6, [r0, #4]
			int_status |= BIT(GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]));
    1228:	20a2      	movs	r0, #162	; 0xa2
    122a:	00c0      	lsls	r0, r0, #3
    122c:	5809      	ldr	r1, [r1, r0]
    122e:	201f      	movs	r0, #31
    1230:	0a09      	lsrs	r1, r1, #8
    1232:	4001      	ands	r1, r0
    1234:	0038      	movs	r0, r7
    1236:	4088      	lsls	r0, r1
    1238:	4302      	orrs	r2, r0
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
	u32_t enabled_int, int_status = 0;
	int i;

	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    123a:	3301      	adds	r3, #1
    123c:	2b04      	cmp	r3, #4
    123e:	d1e9      	bne.n	1214 <gpio_nrf5_port_isr+0x14>
			gpiote->EVENTS_IN[i] = 0;
			int_status |= BIT(GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]));
		}
	}

	enabled_int = int_status & data->pin_callback_enables;
    1240:	68ae      	ldr	r6, [r5, #8]

	irq_disable(NRF5_IRQ_GPIOTE_IRQn);
    1242:	2006      	movs	r0, #6
			gpiote->EVENTS_IN[i] = 0;
			int_status |= BIT(GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]));
		}
	}

	enabled_int = int_status & data->pin_callback_enables;
    1244:	4016      	ands	r6, r2

	irq_disable(NRF5_IRQ_GPIOTE_IRQn);
    1246:	f012 fb13 	bl	13870 <_arch_irq_disable>
    124a:	682d      	ldr	r5, [r5, #0]
					struct device *port,
					u32_t pins)
{
	struct gpio_callback *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(list, cb, node) {
    124c:	2d00      	cmp	r5, #0
    124e:	d103      	bne.n	1258 <gpio_nrf5_port_isr+0x58>

	/* Call the registered callbacks */
	_gpio_fire_callbacks(&data->callbacks, (struct device *)dev,
			     enabled_int);

	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
    1250:	2006      	movs	r0, #6
    1252:	f012 fb03 	bl	1385c <_arch_irq_enable>
}
    1256:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		if (cb->pin_mask & pins) {
    1258:	68ab      	ldr	r3, [r5, #8]
    125a:	4233      	tst	r3, r6
    125c:	d0f5      	beq.n	124a <gpio_nrf5_port_isr+0x4a>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, pins);
    125e:	0032      	movs	r2, r6
    1260:	0029      	movs	r1, r5
    1262:	0020      	movs	r0, r4
    1264:	686b      	ldr	r3, [r5, #4]
    1266:	4798      	blx	r3
    1268:	e7ef      	b.n	124a <gpio_nrf5_port_isr+0x4a>
	...

0000126c <gpio_nrf5_config>:
/**
 * @brief Configure pin or port
 */
static int gpio_nrf5_config(struct device *dev,
			    int access_op, u32_t pin, int flags)
{
    126c:	b5f0      	push	{r4, r5, r6, r7, lr}
    126e:	0006      	movs	r6, r0
    1270:	0014      	movs	r4, r2
		{GPIO_DRIVE_S0S1, GPIO_DRIVE_S0H1, 0, GPIO_DRIVE_S0D1},
		{GPIO_DRIVE_H0S1, GPIO_DRIVE_H0H1, 0, GPIO_DRIVE_H0D1},
		{0, 0, 0, 0},
		{GPIO_DRIVE_D0S1, GPIO_DRIVE_D0H1, 0, GPIO_DRIVE_S0S1}
	};
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    1272:	6802      	ldr	r2, [r0, #0]
/**
 * @brief Configure pin or port
 */
static int gpio_nrf5_config(struct device *dev,
			    int access_op, u32_t pin, int flags)
{
    1274:	b085      	sub	sp, #20
		{GPIO_DRIVE_S0S1, GPIO_DRIVE_S0H1, 0, GPIO_DRIVE_S0D1},
		{GPIO_DRIVE_H0S1, GPIO_DRIVE_H0H1, 0, GPIO_DRIVE_H0D1},
		{0, 0, 0, 0},
		{GPIO_DRIVE_D0S1, GPIO_DRIVE_D0H1, 0, GPIO_DRIVE_S0S1}
	};
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    1276:	6892      	ldr	r2, [r2, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    1278:	68b5      	ldr	r5, [r6, #8]
		{GPIO_DRIVE_S0S1, GPIO_DRIVE_S0H1, 0, GPIO_DRIVE_S0D1},
		{GPIO_DRIVE_H0S1, GPIO_DRIVE_H0H1, 0, GPIO_DRIVE_H0D1},
		{0, 0, 0, 0},
		{GPIO_DRIVE_D0S1, GPIO_DRIVE_D0H1, 0, GPIO_DRIVE_S0S1}
	};
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    127a:	6890      	ldr	r0, [r2, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
    127c:	6817      	ldr	r7, [r2, #0]
		{GPIO_DRIVE_S0S1, GPIO_DRIVE_S0H1, 0, GPIO_DRIVE_S0D1},
		{GPIO_DRIVE_H0S1, GPIO_DRIVE_H0H1, 0, GPIO_DRIVE_H0D1},
		{0, 0, 0, 0},
		{GPIO_DRIVE_D0S1, GPIO_DRIVE_D0H1, 0, GPIO_DRIVE_S0S1}
	};
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    127e:	9003      	str	r0, [sp, #12]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);

	if (access_op == GPIO_ACCESS_BY_PIN) {
    1280:	2900      	cmp	r1, #0
    1282:	d001      	beq.n	1288 <gpio_nrf5_config+0x1c>
					      pull |
					      GPIO_INPUT_CONNECT |
					      GPIO_DIR_INPUT);
		}
	} else {
		return -ENOTSUP;
    1284:	2023      	movs	r0, #35	; 0x23
    1286:	e069      	b.n	135c <gpio_nrf5_config+0xf0>

	if (access_op == GPIO_ACCESS_BY_PIN) {

		/* Check pull */
		u8_t pull = GPIO_PULL_DISABLE;
		int ds_low = (flags & GPIO_DS_LOW_MASK) >> GPIO_DS_LOW_POS;
    1288:	2103      	movs	r1, #3
		int ds_high = (flags & GPIO_DS_HIGH_MASK) >> GPIO_DS_HIGH_POS;
    128a:	1398      	asrs	r0, r3, #14
    128c:	4008      	ands	r0, r1

	if (access_op == GPIO_ACCESS_BY_PIN) {

		/* Check pull */
		u8_t pull = GPIO_PULL_DISABLE;
		int ds_low = (flags & GPIO_DS_LOW_MASK) >> GPIO_DS_LOW_POS;
    128e:	131a      	asrs	r2, r3, #12
    1290:	400a      	ands	r2, r1
		int ds_high = (flags & GPIO_DS_HIGH_MASK) >> GPIO_DS_HIGH_POS;
    1292:	9001      	str	r0, [sp, #4]

		__ASSERT_NO_MSG(ds_low != 2);
		__ASSERT_NO_MSG(ds_high != 2);

		if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
    1294:	31fd      	adds	r1, #253	; 0xfd
    1296:	20c0      	movs	r0, #192	; 0xc0
    1298:	468c      	mov	ip, r1
    129a:	0080      	lsls	r0, r0, #2
    129c:	4018      	ands	r0, r3
			pull = GPIO_PULL_UP;
    129e:	39f4      	subs	r1, #244	; 0xf4
		int ds_high = (flags & GPIO_DS_HIGH_MASK) >> GPIO_DS_HIGH_POS;

		__ASSERT_NO_MSG(ds_low != 2);
		__ASSERT_NO_MSG(ds_high != 2);

		if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
    12a0:	4560      	cmp	r0, ip
    12a2:	d004      	beq.n	12ae <gpio_nrf5_config+0x42>
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);

	if (access_op == GPIO_ACCESS_BY_PIN) {

		/* Check pull */
		u8_t pull = GPIO_PULL_DISABLE;
    12a4:	492f      	ldr	r1, [pc, #188]	; (1364 <gpio_nrf5_config+0xf8>)
    12a6:	1840      	adds	r0, r0, r1
    12a8:	4241      	negs	r1, r0
    12aa:	4141      	adcs	r1, r0
    12ac:	0089      	lsls	r1, r1, #2
			pull = GPIO_PULL_UP;
		} else if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_DOWN) {
			pull = GPIO_PULL_DOWN;
		}

		if ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT) {
    12ae:	2001      	movs	r0, #1
    12b0:	0092      	lsls	r2, r2, #2
    12b2:	9202      	str	r2, [sp, #8]
    12b4:	4203      	tst	r3, r0
    12b6:	d013      	beq.n	12e0 <gpio_nrf5_config+0x74>
			/* Set initial output value */
			if (pull == GPIO_PULL_UP) {
    12b8:	290c      	cmp	r1, #12
    12ba:	d103      	bne.n	12c4 <gpio_nrf5_config+0x58>
				gpio->OUTSET = BIT(pin);
    12bc:	22a1      	movs	r2, #161	; 0xa1
    12be:	40a0      	lsls	r0, r4
    12c0:	00d2      	lsls	r2, r2, #3
    12c2:	e003      	b.n	12cc <gpio_nrf5_config+0x60>
			} else if (pull == GPIO_PULL_DOWN) {
    12c4:	2904      	cmp	r1, #4
    12c6:	d102      	bne.n	12ce <gpio_nrf5_config+0x62>
				gpio->OUTCLR = BIT(pin);
    12c8:	40a0      	lsls	r0, r4
    12ca:	4a27      	ldr	r2, [pc, #156]	; (1368 <gpio_nrf5_config+0xfc>)
    12cc:	50b8      	str	r0, [r7, r2]
			}
			/* Config as output */
			gpio->PIN_CNF[pin] = (GPIO_SENSE_DISABLE |
					      drive_strength[ds_low][ds_high] |
    12ce:	9802      	ldr	r0, [sp, #8]
    12d0:	9a01      	ldr	r2, [sp, #4]
    12d2:	1882      	adds	r2, r0, r2
					      pull |
					      GPIO_INPUT_DISCONNECT |
    12d4:	4825      	ldr	r0, [pc, #148]	; (136c <gpio_nrf5_config+0x100>)
			} else if (pull == GPIO_PULL_DOWN) {
				gpio->OUTCLR = BIT(pin);
			}
			/* Config as output */
			gpio->PIN_CNF[pin] = (GPIO_SENSE_DISABLE |
					      drive_strength[ds_low][ds_high] |
    12d6:	0092      	lsls	r2, r2, #2
					      pull |
					      GPIO_INPUT_DISCONNECT |
    12d8:	5812      	ldr	r2, [r2, r0]
    12da:	2003      	movs	r0, #3
    12dc:	4302      	orrs	r2, r0
    12de:	e005      	b.n	12ec <gpio_nrf5_config+0x80>
					      GPIO_DIR_OUTPUT);
		} else {
			/* Config as input */
			gpio->PIN_CNF[pin] = (GPIO_SENSE_DISABLE |
					      drive_strength[ds_low][ds_high] |
    12e0:	9802      	ldr	r0, [sp, #8]
    12e2:	9a01      	ldr	r2, [sp, #4]
    12e4:	1882      	adds	r2, r0, r2
					      pull |
					      GPIO_INPUT_CONNECT |
    12e6:	4821      	ldr	r0, [pc, #132]	; (136c <gpio_nrf5_config+0x100>)
					      GPIO_INPUT_DISCONNECT |
					      GPIO_DIR_OUTPUT);
		} else {
			/* Config as input */
			gpio->PIN_CNF[pin] = (GPIO_SENSE_DISABLE |
					      drive_strength[ds_low][ds_high] |
    12e8:	0092      	lsls	r2, r2, #2
					      pull |
					      GPIO_INPUT_CONNECT |
    12ea:	5812      	ldr	r2, [r2, r0]
    12ec:	4311      	orrs	r1, r2
					      pull |
					      GPIO_INPUT_DISCONNECT |
					      GPIO_DIR_OUTPUT);
		} else {
			/* Config as input */
			gpio->PIN_CNF[pin] = (GPIO_SENSE_DISABLE |
    12ee:	0022      	movs	r2, r4
		}
	} else {
		return -ENOTSUP;
	}

	if (flags & GPIO_INT) {
    12f0:	2002      	movs	r0, #2
					      pull |
					      GPIO_INPUT_DISCONNECT |
					      GPIO_DIR_OUTPUT);
		} else {
			/* Config as input */
			gpio->PIN_CNF[pin] = (GPIO_SENSE_DISABLE |
    12f2:	32c1      	adds	r2, #193	; 0xc1
    12f4:	32ff      	adds	r2, #255	; 0xff
    12f6:	0092      	lsls	r2, r2, #2
    12f8:	51d1      	str	r1, [r2, r7]
		}
	} else {
		return -ENOTSUP;
	}

	if (flags & GPIO_INT) {
    12fa:	4018      	ands	r0, r3
    12fc:	d02f      	beq.n	135e <gpio_nrf5_config+0xf2>
		u32_t config = 0;

		if (flags & GPIO_INT_EDGE) {
    12fe:	069a      	lsls	r2, r3, #26
    1300:	d5c0      	bpl.n	1284 <gpio_nrf5_config+0x18>
			if (flags & GPIO_INT_DOUBLE_EDGE) {
    1302:	065a      	lsls	r2, r3, #25
    1304:	d403      	bmi.n	130e <gpio_nrf5_config+0xa2>
				config |= GPIOTE_CFG_POL_TOGG;
			} else if (flags & GPIO_INT_ACTIVE_HIGH) {
				config |= GPIOTE_CFG_POL_L2H;
    1306:	2780      	movs	r7, #128	; 0x80
		u32_t config = 0;

		if (flags & GPIO_INT_EDGE) {
			if (flags & GPIO_INT_DOUBLE_EDGE) {
				config |= GPIOTE_CFG_POL_TOGG;
			} else if (flags & GPIO_INT_ACTIVE_HIGH) {
    1308:	075b      	lsls	r3, r3, #29
    130a:	d403      	bmi.n	1314 <gpio_nrf5_config+0xa8>
    130c:	e000      	b.n	1310 <gpio_nrf5_config+0xa4>
	if (flags & GPIO_INT) {
		u32_t config = 0;

		if (flags & GPIO_INT_EDGE) {
			if (flags & GPIO_INT_DOUBLE_EDGE) {
				config |= GPIOTE_CFG_POL_TOGG;
    130e:	27c0      	movs	r7, #192	; 0xc0
    1310:	02bf      	lsls	r7, r7, #10
    1312:	e000      	b.n	1316 <gpio_nrf5_config+0xaa>
			} else if (flags & GPIO_INT_ACTIVE_HIGH) {
				config |= GPIOTE_CFG_POL_L2H;
    1314:	027f      	lsls	r7, r7, #9
			}
		} else { /* GPIO_INT_LEVEL */
			/*@todo: use SENSE for this? */
			return -ENOTSUP;
		}
		if (__builtin_popcount(data->gpiote_chan_mask) ==
    1316:	68e8      	ldr	r0, [r5, #12]
    1318:	f7ff f90e 	bl	538 <__popcountsi2>
    131c:	2804      	cmp	r0, #4
    131e:	d01c      	beq.n	135a <gpio_nrf5_config+0xee>
				GPIOTE_CHAN_COUNT) {
			return -EIO;
		}

		/* check if already allocated to replace */
		int i = gpiote_find_channel(dev, pin);
    1320:	0030      	movs	r0, r6
    1322:	0021      	movs	r1, r4
    1324:	f7ff feb8 	bl	1098 <gpiote_find_channel>
    1328:	68ee      	ldr	r6, [r5, #12]

		if (i < 0) {
    132a:	2800      	cmp	r0, #0
    132c:	da03      	bge.n	1336 <gpio_nrf5_config+0xca>
			/* allocate a GPIOTE channel */
			i = __builtin_ffs(~(data->gpiote_chan_mask)) - 1;
    132e:	43f0      	mvns	r0, r6
    1330:	f7ff f8f8 	bl	524 <__ffssi2>
    1334:	3801      	subs	r0, #1
		}

		data->gpiote_chan_mask |= BIT(i);
    1336:	2201      	movs	r2, #1
    1338:	0013      	movs	r3, r2
    133a:	4083      	lsls	r3, r0
    133c:	431e      	orrs	r6, r3

		/* configure GPIOTE channel */
		config |= GPIOTE_CFG_EVT;
		config |= GPIOTE_CFG_PIN(pin);
    133e:	23f8      	movs	r3, #248	; 0xf8
    1340:	0224      	lsls	r4, r4, #8
    1342:	015b      	lsls	r3, r3, #5
    1344:	401c      	ands	r4, r3

		gpiote->CONFIG[i] = config;
    1346:	3045      	adds	r0, #69	; 0x45

		data->gpiote_chan_mask |= BIT(i);

		/* configure GPIOTE channel */
		config |= GPIOTE_CFG_EVT;
		config |= GPIOTE_CFG_PIN(pin);
    1348:	4314      	orrs	r4, r2

		gpiote->CONFIG[i] = config;
    134a:	30ff      	adds	r0, #255	; 0xff
    134c:	9b03      	ldr	r3, [sp, #12]
    134e:	0080      	lsls	r0, r0, #2

		data->gpiote_chan_mask |= BIT(i);

		/* configure GPIOTE channel */
		config |= GPIOTE_CFG_EVT;
		config |= GPIOTE_CFG_PIN(pin);
    1350:	4327      	orrs	r7, r4
		if (i < 0) {
			/* allocate a GPIOTE channel */
			i = __builtin_ffs(~(data->gpiote_chan_mask)) - 1;
		}

		data->gpiote_chan_mask |= BIT(i);
    1352:	60ee      	str	r6, [r5, #12]

		/* configure GPIOTE channel */
		config |= GPIOTE_CFG_EVT;
		config |= GPIOTE_CFG_PIN(pin);

		gpiote->CONFIG[i] = config;
    1354:	50c7      	str	r7, [r0, r3]
	}


	return 0;
    1356:	2000      	movs	r0, #0
    1358:	e001      	b.n	135e <gpio_nrf5_config+0xf2>
			/*@todo: use SENSE for this? */
			return -ENOTSUP;
		}
		if (__builtin_popcount(data->gpiote_chan_mask) ==
				GPIOTE_CHAN_COUNT) {
			return -EIO;
    135a:	2005      	movs	r0, #5
    135c:	4240      	negs	r0, r0
		gpiote->CONFIG[i] = config;
	}


	return 0;
}
    135e:	b005      	add	sp, #20
    1360:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1362:	46c0      	nop			; (mov r8, r8)
    1364:	fffffe00 	.word	0xfffffe00
    1368:	0000050c 	.word	0x0000050c
    136c:	000152d8 	.word	0x000152d8

00001370 <_m16src_stop>:
		return -EINPROGRESS;
	}
}

static int _m16src_stop(struct device *dev, clock_control_subsys_t sub_system)
{
    1370:	b510      	push	{r4, lr}
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
    1372:	f3ef 8110 	mrs	r1, PRIMASK
    1376:	b672      	cpsid	i
	/* Test for started resource, if so, decrement reference and acquire
	 * resource guard.
	 */
	imask = irq_lock();

	if (!m16src_ref) {
    1378:	4a15      	ldr	r2, [pc, #84]	; (13d0 <_m16src_stop+0x60>)
    137a:	7810      	ldrb	r0, [r2, #0]
    137c:	2800      	cmp	r0, #0
    137e:	d104      	bne.n	138a <_m16src_stop+0x1a>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    1380:	2900      	cmp	r1, #0
    1382:	d120      	bne.n	13c6 <_m16src_stop+0x56>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    1384:	b662      	cpsie	i
		irq_unlock(imask);
		return -EALREADY;
    1386:	3845      	subs	r0, #69	; 0x45
    1388:	e021      	b.n	13ce <_m16src_stop+0x5e>
	}

	if (--m16src_ref) {
    138a:	1e43      	subs	r3, r0, #1
    138c:	b2db      	uxtb	r3, r3
    138e:	7013      	strb	r3, [r2, #0]
    1390:	2b00      	cmp	r3, #0
    1392:	d004      	beq.n	139e <_m16src_stop+0x2e>
		irq_unlock(imask);
		return 0;
    1394:	2000      	movs	r0, #0
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    1396:	4281      	cmp	r1, r0
    1398:	d119      	bne.n	13ce <_m16src_stop+0x5e>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    139a:	b662      	cpsie	i
    139c:	e017      	b.n	13ce <_m16src_stop+0x5e>
	}

	if (m16src_grd) {
    139e:	4b0d      	ldr	r3, [pc, #52]	; (13d4 <_m16src_stop+0x64>)
    13a0:	781c      	ldrb	r4, [r3, #0]
    13a2:	2c00      	cmp	r4, #0
    13a4:	d004      	beq.n	13b0 <_m16src_stop+0x40>
		m16src_ref++;
    13a6:	7010      	strb	r0, [r2, #0]
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    13a8:	2900      	cmp	r1, #0
    13aa:	d10e      	bne.n	13ca <_m16src_stop+0x5a>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    13ac:	b662      	cpsie	i
    13ae:	e00c      	b.n	13ca <_m16src_stop+0x5a>
		irq_unlock(imask);
		return -EAGAIN;
	}

	m16src_grd = 1;
    13b0:	2201      	movs	r2, #1
    13b2:	701a      	strb	r2, [r3, #0]
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    13b4:	2900      	cmp	r1, #0
    13b6:	d100      	bne.n	13ba <_m16src_stop+0x4a>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    13b8:	b662      	cpsie	i

	irq_unlock(imask);

	/* re-entrancy and mult-context safe, and reference count is zero, */

	NRF_CLOCK->TASKS_HFCLKSTOP = 1;
    13ba:	2180      	movs	r1, #128	; 0x80

	/* release resource guard */
	m16src_grd = 0;
    13bc:	2000      	movs	r0, #0

	irq_unlock(imask);

	/* re-entrancy and mult-context safe, and reference count is zero, */

	NRF_CLOCK->TASKS_HFCLKSTOP = 1;
    13be:	05c9      	lsls	r1, r1, #23
    13c0:	604a      	str	r2, [r1, #4]

	/* release resource guard */
	m16src_grd = 0;
    13c2:	7018      	strb	r0, [r3, #0]

	return 0;
    13c4:	e003      	b.n	13ce <_m16src_stop+0x5e>
	 */
	imask = irq_lock();

	if (!m16src_ref) {
		irq_unlock(imask);
		return -EALREADY;
    13c6:	2045      	movs	r0, #69	; 0x45
    13c8:	e000      	b.n	13cc <_m16src_stop+0x5c>
	}

	if (m16src_grd) {
		m16src_ref++;
		irq_unlock(imask);
		return -EAGAIN;
    13ca:	200b      	movs	r0, #11
    13cc:	4240      	negs	r0, r0

	/* release resource guard */
	m16src_grd = 0;

	return 0;
}
    13ce:	bd10      	pop	{r4, pc}
    13d0:	20000b18 	.word	0x20000b18
    13d4:	20000b19 	.word	0x20000b19

000013d8 <_clock_control_init>:
	 * for 16 MHz clock. The vector is also shared for other power related
	 * features. Hence, design a better way to init IRQISR when adding
	 * power peripheral driver and/or new SoC series.
	 * NOTE: Currently the operations here are idempotent.
	 */
	IRQ_CONNECT(NRF5_IRQ_POWER_CLOCK_IRQn,
    13d8:	2200      	movs	r2, #0
		}
	}
}

static int _clock_control_init(struct device *dev)
{
    13da:	b510      	push	{r4, lr}
	 * for 16 MHz clock. The vector is also shared for other power related
	 * features. Hence, design a better way to init IRQISR when adding
	 * power peripheral driver and/or new SoC series.
	 * NOTE: Currently the operations here are idempotent.
	 */
	IRQ_CONNECT(NRF5_IRQ_POWER_CLOCK_IRQn,
    13dc:	0010      	movs	r0, r2
    13de:	2101      	movs	r1, #1
    13e0:	f012 fa5c 	bl	1389c <_irq_priority_set>
		    CONFIG_CLOCK_CONTROL_NRF5_IRQ_PRIORITY,
		    _power_clock_isr, 0, 0);

	irq_enable(POWER_CLOCK_IRQn);
    13e4:	2000      	movs	r0, #0
    13e6:	f012 fa39 	bl	1385c <_arch_irq_enable>

	return 0;
}
    13ea:	2000      	movs	r0, #0
    13ec:	bd10      	pop	{r4, pc}
	...

000013f0 <_m16src_start>:

static u8_t m16src_ref;
static u8_t m16src_grd;

static int _m16src_start(struct device *dev, clock_control_subsys_t sub_system)
{
    13f0:	b570      	push	{r4, r5, r6, lr}
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
    13f2:	f3ef 8310 	mrs	r3, PRIMASK
    13f6:	b672      	cpsid	i

	/* Test for reference increment from zero and resource guard not taken.
	 */
	imask = irq_lock();

	if (m16src_ref++) {
    13f8:	4a29      	ldr	r2, [pc, #164]	; (14a0 <CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD+0x70>)
    13fa:	7810      	ldrb	r0, [r2, #0]
    13fc:	1c44      	adds	r4, r0, #1
    13fe:	7014      	strb	r4, [r2, #0]
    1400:	2800      	cmp	r0, #0
    1402:	d003      	beq.n	140c <_m16src_start+0x1c>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    1404:	2b00      	cmp	r3, #0
    1406:	d13f      	bne.n	1488 <CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD+0x58>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    1408:	b662      	cpsie	i
    140a:	e03d      	b.n	1488 <CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD+0x58>
		irq_unlock(imask);
		goto hf_already_started;
	}

	if (m16src_grd) {
    140c:	4c25      	ldr	r4, [pc, #148]	; (14a4 <CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD+0x74>)
    140e:	7825      	ldrb	r5, [r4, #0]
    1410:	2d00      	cmp	r5, #0
    1412:	d004      	beq.n	141e <_m16src_start+0x2e>
		m16src_ref--;
    1414:	7010      	strb	r0, [r2, #0]
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    1416:	2b00      	cmp	r3, #0
    1418:	d13f      	bne.n	149a <CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD+0x6a>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    141a:	b662      	cpsie	i
    141c:	e03d      	b.n	149a <CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD+0x6a>
		irq_unlock(imask);
		return -EAGAIN;
	}

	m16src_grd = 1;
    141e:	2201      	movs	r2, #1
    1420:	7022      	strb	r2, [r4, #0]
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    1422:	2b00      	cmp	r3, #0
    1424:	d100      	bne.n	1428 <_m16src_start+0x38>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    1426:	b662      	cpsie	i
    1428:	2580      	movs	r5, #128	; 0x80
    142a:	4e1f      	ldr	r6, [pc, #124]	; (14a8 <CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD+0x78>)
    142c:	05ed      	lsls	r5, r5, #23

	irq_unlock(imask);

	/* If blocking then spin-wait in CPU sleep until 16MHz clock settles. */
	blocking = POINTER_TO_UINT(sub_system);
	if (blocking) {
    142e:	2900      	cmp	r1, #0
    1430:	d025      	beq.n	147e <CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD+0x4e>
		u32_t intenset;

		irq_disable(POWER_CLOCK_IRQn);
    1432:	2000      	movs	r0, #0
    1434:	f012 fa1c 	bl	13870 <_arch_irq_disable>

		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    1438:	2300      	movs	r3, #0

		intenset = NRF_CLOCK->INTENSET;
    143a:	22c1      	movs	r2, #193	; 0xc1
	if (blocking) {
		u32_t intenset;

		irq_disable(POWER_CLOCK_IRQn);

		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    143c:	6073      	str	r3, [r6, #4]

		intenset = NRF_CLOCK->INTENSET;
    143e:	0092      	lsls	r2, r2, #2
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    1440:	3301      	adds	r3, #1

		irq_disable(POWER_CLOCK_IRQn);

		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;

		intenset = NRF_CLOCK->INTENSET;
    1442:	58a9      	ldr	r1, [r5, r2]
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    1444:	50ab      	str	r3, [r5, r2]

		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    1446:	602b      	str	r3, [r5, #0]

		while (NRF_CLOCK->EVENTS_HFCLKSTARTED == 0) {
    1448:	6873      	ldr	r3, [r6, #4]
    144a:	2b00      	cmp	r3, #0
    144c:	d103      	bne.n	1456 <CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD+0x26>
  \details Wait For Event is a hint instruction that permits the processor to enter
    a low-power state until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
{
  __ASM volatile ("wfe");
    144e:	bf20      	wfe
  \brief   Send Event
  \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 */
__attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
{
  __ASM volatile ("sev");
    1450:	bf40      	sev
  \details Wait For Event is a hint instruction that permits the processor to enter
    a low-power state until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
{
  __ASM volatile ("wfe");
    1452:	bf20      	wfe
    1454:	e7f8      	b.n	1448 <CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD+0x18>
			__WFE();
			__SEV();
			__WFE();
		}

		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    1456:	2200      	movs	r2, #0
    1458:	4b13      	ldr	r3, [pc, #76]	; (14a8 <CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD+0x78>)
    145a:	605a      	str	r2, [r3, #4]

		if (!(intenset & CLOCK_INTENSET_HFCLKSTARTED_Msk)) {
    145c:	2301      	movs	r3, #1
    145e:	4219      	tst	r1, r3
    1460:	d104      	bne.n	146c <CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD+0x3c>
			NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    1462:	22c2      	movs	r2, #194	; 0xc2
    1464:	2180      	movs	r1, #128	; 0x80
    1466:	0092      	lsls	r2, r2, #2
    1468:	05c9      	lsls	r1, r1, #23
    146a:	508b      	str	r3, [r1, r2]
    146c:	23c0      	movs	r3, #192	; 0xc0
    146e:	2101      	movs	r1, #1
    1470:	4a0e      	ldr	r2, [pc, #56]	; (14ac <CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD+0x7c>)
    1472:	005b      	lsls	r3, r3, #1
    1474:	50d1      	str	r1, [r2, r3]
		}

		NVIC_ClearPendingIRQ(POWER_CLOCK_IRQn);

		irq_enable(POWER_CLOCK_IRQn);
    1476:	2000      	movs	r0, #0
    1478:	f012 f9f0 	bl	1385c <_arch_irq_enable>
    147c:	e002      	b.n	1484 <CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD+0x54>
	} else {
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;

		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    147e:	2301      	movs	r3, #1

		NVIC_ClearPendingIRQ(POWER_CLOCK_IRQn);

		irq_enable(POWER_CLOCK_IRQn);
	} else {
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    1480:	6071      	str	r1, [r6, #4]

		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    1482:	602b      	str	r3, [r5, #0]
	}

	/* release resource guard */
	m16src_grd = 0;
    1484:	2300      	movs	r3, #0
    1486:	7023      	strb	r3, [r4, #0]
	/* rollover should not happen as start and stop shall be
	 * called in pairs.
	 */
	__ASSERT_NO_MSG(m16src_ref);

	if (NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) {
    1488:	2280      	movs	r2, #128	; 0x80
    148a:	4b09      	ldr	r3, [pc, #36]	; (14b0 <CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD+0x80>)
    148c:	05d2      	lsls	r2, r2, #23
    148e:	58d3      	ldr	r3, [r2, r3]
		return 0;
    1490:	2000      	movs	r0, #0
	/* rollover should not happen as start and stop shall be
	 * called in pairs.
	 */
	__ASSERT_NO_MSG(m16src_ref);

	if (NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) {
    1492:	03db      	lsls	r3, r3, #15
    1494:	d403      	bmi.n	149e <CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD+0x6e>
		return 0;
	} else {
		return -EINPROGRESS;
    1496:	3844      	subs	r0, #68	; 0x44
    1498:	e001      	b.n	149e <CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD+0x6e>
	}

	if (m16src_grd) {
		m16src_ref--;
		irq_unlock(imask);
		return -EAGAIN;
    149a:	200b      	movs	r0, #11
    149c:	4240      	negs	r0, r0
	if (NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) {
		return 0;
	} else {
		return -EINPROGRESS;
	}
}
    149e:	bd70      	pop	{r4, r5, r6, pc}
    14a0:	20000b18 	.word	0x20000b18
    14a4:	20000b19 	.word	0x20000b19
    14a8:	400000fc 	.word	0x400000fc
    14ac:	e000e100 	.word	0xe000e100
    14b0:	0000040c 	.word	0x0000040c

000014b4 <_power_clock_isr>:

	return !(NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk);
}

static void _power_clock_isr(void *arg)
{
    14b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	u8_t pof, hf_intenset, hf_stat, hf, lf, done, ctto;
	struct device *dev = arg;

	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    14b6:	4c24      	ldr	r4, [pc, #144]	; (1548 <_power_clock_isr+0x94>)
    14b8:	2380      	movs	r3, #128	; 0x80
    14ba:	68e2      	ldr	r2, [r4, #12]
    14bc:	05db      	lsls	r3, r3, #23
    14be:	4694      	mov	ip, r2

	hf_intenset =
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    14c0:	22c1      	movs	r2, #193	; 0xc1
    14c2:	0092      	lsls	r2, r2, #2
    14c4:	5899      	ldr	r1, [r3, r2]
    14c6:	2201      	movs	r2, #1
    14c8:	400a      	ands	r2, r1
	hf_stat = ((NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) != 0);
    14ca:	4920      	ldr	r1, [pc, #128]	; (154c <_power_clock_isr+0x98>)

	return !(NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk);
}

static void _power_clock_isr(void *arg)
{
    14cc:	0005      	movs	r5, r0

	pof = (NRF_POWER->EVENTS_POFWARN != 0);

	hf_intenset =
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
	hf_stat = ((NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) != 0);
    14ce:	585e      	ldr	r6, [r3, r1]
	struct device *dev = arg;

	pof = (NRF_POWER->EVENTS_POFWARN != 0);

	hf_intenset =
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    14d0:	9200      	str	r2, [sp, #0]
	hf_stat = ((NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) != 0);
	hf = (NRF_CLOCK->EVENTS_HFCLKSTARTED != 0);
    14d2:	6867      	ldr	r7, [r4, #4]

	lf = (NRF_CLOCK->EVENTS_LFCLKSTARTED != 0);
    14d4:	68a0      	ldr	r0, [r4, #8]

	done = (NRF_CLOCK->EVENTS_DONE != 0);
    14d6:	6921      	ldr	r1, [r4, #16]
	ctto = (NRF_CLOCK->EVENTS_CTTO != 0);
    14d8:	6962      	ldr	r2, [r4, #20]
    14da:	9201      	str	r2, [sp, #4]

	__ASSERT_NO_MSG(pof || hf || hf_intenset || lf || done || ctto);

	if (pof) {
    14dc:	4662      	mov	r2, ip
    14de:	2a00      	cmp	r2, #0
    14e0:	d001      	beq.n	14e6 <_power_clock_isr+0x32>
		NRF_POWER->EVENTS_POFWARN = 0;
    14e2:	2200      	movs	r2, #0
    14e4:	60e2      	str	r2, [r4, #12]
	}

	if (hf) {
    14e6:	2f00      	cmp	r7, #0
    14e8:	d001      	beq.n	14ee <_power_clock_isr+0x3a>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    14ea:	2700      	movs	r7, #0
    14ec:	6067      	str	r7, [r4, #4]
	}

	if (hf_intenset && hf_stat) {
    14ee:	9a00      	ldr	r2, [sp, #0]
    14f0:	2a00      	cmp	r2, #0
    14f2:	d006      	beq.n	1502 <_power_clock_isr+0x4e>
    14f4:	03f2      	lsls	r2, r6, #15
    14f6:	d504      	bpl.n	1502 <_power_clock_isr+0x4e>
		/* INTENSET is used as state flag to start calibration,
		 * hence clear it here.
		 */
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    14f8:	26c2      	movs	r6, #194	; 0xc2
    14fa:	2201      	movs	r2, #1
    14fc:	00b6      	lsls	r6, r6, #2
    14fe:	519a      	str	r2, [r3, r6]

		/* Start Calibration */
		NRF_CLOCK->TASKS_CAL = 1;
    1500:	611a      	str	r2, [r3, #16]
	}

	if (lf) {
    1502:	2800      	cmp	r0, #0
    1504:	d001      	beq.n	150a <_power_clock_isr+0x56>
		NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    1506:	2300      	movs	r3, #0
    1508:	60a3      	str	r3, [r4, #8]

		__ASSERT_NO_MSG(0);
	}

	if (done) {
    150a:	2900      	cmp	r1, #0
    150c:	d008      	beq.n	1520 <_power_clock_isr+0x6c>
		int err;

		NRF_CLOCK->EVENTS_DONE = 0;
    150e:	2100      	movs	r1, #0

		/* Calibration done, stop 16M Xtal. */
		err = _m16src_stop(dev, NULL);
    1510:	0028      	movs	r0, r5
	}

	if (done) {
		int err;

		NRF_CLOCK->EVENTS_DONE = 0;
    1512:	6121      	str	r1, [r4, #16]

		/* Calibration done, stop 16M Xtal. */
		err = _m16src_stop(dev, NULL);
    1514:	f7ff ff2c 	bl	1370 <_m16src_stop>
		__ASSERT_NO_MSG(!err);

		/* Start timer for next calibration. */
		NRF_CLOCK->TASKS_CTSTART = 1;
    1518:	2380      	movs	r3, #128	; 0x80
    151a:	2201      	movs	r2, #1
    151c:	05db      	lsls	r3, r3, #23
    151e:	615a      	str	r2, [r3, #20]
	}

	if (ctto) {
    1520:	9b01      	ldr	r3, [sp, #4]
    1522:	2b00      	cmp	r3, #0
    1524:	d00e      	beq.n	1544 <_power_clock_isr+0x90>
		int err;

		NRF_CLOCK->EVENTS_CTTO = 0;
    1526:	2100      	movs	r1, #0

		/* Start HF clock, if already started
		 * then explicitly assert IRQ; we use the INTENSET
		 * as a state flag to start calibration.
		 */
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    1528:	23c1      	movs	r3, #193	; 0xc1
    152a:	2280      	movs	r2, #128	; 0x80
	}

	if (ctto) {
		int err;

		NRF_CLOCK->EVENTS_CTTO = 0;
    152c:	6161      	str	r1, [r4, #20]

		/* Start HF clock, if already started
		 * then explicitly assert IRQ; we use the INTENSET
		 * as a state flag to start calibration.
		 */
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    152e:	2401      	movs	r4, #1
    1530:	009b      	lsls	r3, r3, #2
    1532:	05d2      	lsls	r2, r2, #23
    1534:	50d4      	str	r4, [r2, r3]

		err = _m16src_start(dev, false);
    1536:	0028      	movs	r0, r5
    1538:	f7ff ff5a 	bl	13f0 <_m16src_start>
		if (!err) {
    153c:	2800      	cmp	r0, #0
    153e:	d101      	bne.n	1544 <_power_clock_isr+0x90>
  \details Sets the pending bit of an external interrupt.
  \param [in]      IRQn  Interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    1540:	4b03      	ldr	r3, [pc, #12]	; (1550 <_power_clock_isr+0x9c>)
    1542:	605c      	str	r4, [r3, #4]
			NVIC_SetPendingIRQ(POWER_CLOCK_IRQn);
		} else {
			__ASSERT_NO_MSG(err == -EINPROGRESS);
		}
	}
}
    1544:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    1546:	46c0      	nop			; (mov r8, r8)
    1548:	400000fc 	.word	0x400000fc
    154c:	0000040c 	.word	0x0000040c
    1550:	e000e1fc 	.word	0xe000e1fc

00001554 <_k32src_start>:

	return 0;
}

static int _k32src_start(struct device *dev, clock_control_subsys_t sub_system)
{
    1554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/* TODO: implement the ref count and re-entrancy guard, if a use-case
	 * needs it.
	 */

	if ((NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)) {
    1556:	2580      	movs	r5, #128	; 0x80
    1558:	2383      	movs	r3, #131	; 0x83
    155a:	05ed      	lsls	r5, r5, #23
    155c:	00db      	lsls	r3, r3, #3
    155e:	58ec      	ldr	r4, [r5, r3]
    1560:	2380      	movs	r3, #128	; 0x80

	return 0;
}

static int _k32src_start(struct device *dev, clock_control_subsys_t sub_system)
{
    1562:	0007      	movs	r7, r0
	/* TODO: implement the ref count and re-entrancy guard, if a use-case
	 * needs it.
	 */

	if ((NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)) {
		return 0;
    1564:	2000      	movs	r0, #0

	/* TODO: implement the ref count and re-entrancy guard, if a use-case
	 * needs it.
	 */

	if ((NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)) {
    1566:	025b      	lsls	r3, r3, #9

	return 0;
}

static int _k32src_start(struct device *dev, clock_control_subsys_t sub_system)
{
    1568:	000e      	movs	r6, r1

	/* TODO: implement the ref count and re-entrancy guard, if a use-case
	 * needs it.
	 */

	if ((NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)) {
    156a:	401c      	ands	r4, r3
    156c:	4284      	cmp	r4, r0
    156e:	d14d      	bne.n	160c <_k32src_start+0xb8>
		return 0;
	}

	irq_disable(POWER_CLOCK_IRQn);
    1570:	0020      	movs	r0, r4
    1572:	f012 f97d 	bl	13870 <_arch_irq_disable>

	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;

	intenset = NRF_CLOCK->INTENSET;
    1576:	22c1      	movs	r2, #193	; 0xc1
	NRF_CLOCK->INTENSET = CLOCK_INTENSET_LFCLKSTARTED_Msk;
    1578:	2002      	movs	r0, #2
		return 0;
	}

	irq_disable(POWER_CLOCK_IRQn);

	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    157a:	4b25      	ldr	r3, [pc, #148]	; (1610 <_k32src_start+0xbc>)

	intenset = NRF_CLOCK->INTENSET;
    157c:	0092      	lsls	r2, r2, #2
		return 0;
	}

	irq_disable(POWER_CLOCK_IRQn);

	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    157e:	609c      	str	r4, [r3, #8]

	intenset = NRF_CLOCK->INTENSET;
    1580:	58a9      	ldr	r1, [r5, r2]
	NRF_CLOCK->INTENSET = CLOCK_INTENSET_LFCLKSTARTED_Msk;
    1582:	50a8      	str	r0, [r5, r2]

	/* Set LF Clock Source */
	lf_clk_src = POINTER_TO_UINT(sub_system);
	NRF_CLOCK->LFCLKSRC = lf_clk_src;
    1584:	22a3      	movs	r2, #163	; 0xa3
    1586:	00d2      	lsls	r2, r2, #3
    1588:	50ae      	str	r6, [r5, r2]

	/* Start and spin-wait until clock settles */
	NRF_CLOCK->TASKS_LFCLKSTART = 1;
    158a:	2201      	movs	r2, #1
    158c:	001c      	movs	r4, r3
    158e:	60aa      	str	r2, [r5, #8]

	while (NRF_CLOCK->EVENTS_LFCLKSTARTED == 0) {
    1590:	68a3      	ldr	r3, [r4, #8]
    1592:	2b00      	cmp	r3, #0
    1594:	d103      	bne.n	159e <_k32src_start+0x4a>
    1596:	bf20      	wfe
  \brief   Send Event
  \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 */
__attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
{
  __ASM volatile ("sev");
    1598:	bf40      	sev
  \details Wait For Event is a hint instruction that permits the processor to enter
    a low-power state until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
{
  __ASM volatile ("wfe");
    159a:	bf20      	wfe
    159c:	e7f8      	b.n	1590 <_k32src_start+0x3c>
		__WFE();
		__SEV();
		__WFE();
	}

	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    159e:	2200      	movs	r2, #0
    15a0:	4b1b      	ldr	r3, [pc, #108]	; (1610 <_k32src_start+0xbc>)
    15a2:	609a      	str	r2, [r3, #8]

	if (!(intenset & CLOCK_INTENSET_LFCLKSTARTED_Msk)) {
    15a4:	2302      	movs	r3, #2
    15a6:	4219      	tst	r1, r3
    15a8:	d104      	bne.n	15b4 <_k32src_start+0x60>
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
    15aa:	22c2      	movs	r2, #194	; 0xc2
    15ac:	2180      	movs	r1, #128	; 0x80
    15ae:	0092      	lsls	r2, r2, #2
    15b0:	05c9      	lsls	r1, r1, #23
    15b2:	508b      	str	r3, [r1, r2]
  \details Clears the pending bit of an external interrupt.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    15b4:	23c0      	movs	r3, #192	; 0xc0
    15b6:	2501      	movs	r5, #1
    15b8:	4a16      	ldr	r2, [pc, #88]	; (1614 <_k32src_start+0xc0>)
    15ba:	005b      	lsls	r3, r3, #1
    15bc:	50d5      	str	r5, [r2, r3]
	}

	NVIC_ClearPendingIRQ(POWER_CLOCK_IRQn);

	irq_enable(POWER_CLOCK_IRQn);
    15be:	2000      	movs	r0, #0
    15c0:	f012 f94c 	bl	1385c <_arch_irq_enable>

	/* If RC selected, calibrate and start timer for consecutive
	 * calibrations.
	 */
	NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_DONE_Msk | CLOCK_INTENCLR_CTTO_Msk;
    15c4:	2380      	movs	r3, #128	; 0x80
    15c6:	22c2      	movs	r2, #194	; 0xc2
    15c8:	2018      	movs	r0, #24
    15ca:	0092      	lsls	r2, r2, #2
    15cc:	05db      	lsls	r3, r3, #23
    15ce:	5098      	str	r0, [r3, r2]
	NRF_CLOCK->EVENTS_DONE = 0;
	NRF_CLOCK->EVENTS_CTTO = 0;

	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
    15d0:	2103      	movs	r1, #3

	/* If RC selected, calibrate and start timer for consecutive
	 * calibrations.
	 */
	NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_DONE_Msk | CLOCK_INTENCLR_CTTO_Msk;
	NRF_CLOCK->EVENTS_DONE = 0;
    15d2:	2200      	movs	r2, #0
	NRF_CLOCK->EVENTS_CTTO = 0;

	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
    15d4:	4031      	ands	r1, r6

	/* If RC selected, calibrate and start timer for consecutive
	 * calibrations.
	 */
	NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_DONE_Msk | CLOCK_INTENCLR_CTTO_Msk;
	NRF_CLOCK->EVENTS_DONE = 0;
    15d6:	6122      	str	r2, [r4, #16]
	NRF_CLOCK->EVENTS_CTTO = 0;
    15d8:	6162      	str	r2, [r4, #20]

	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
    15da:	4291      	cmp	r1, r2
    15dc:	d10e      	bne.n	15fc <_k32src_start+0xa8>
		int err;

		/* Set the Calibration Timer Initial Value */
		NRF_CLOCK->CTIV = 16;	/* 4s in 0.25s units */
    15de:	22a7      	movs	r2, #167	; 0xa7
    15e0:	2410      	movs	r4, #16
    15e2:	00d2      	lsls	r2, r2, #3
    15e4:	509c      	str	r4, [r3, r2]

		/* Enable DONE and CTTO IRQs */
		NRF_CLOCK->INTENSET =
    15e6:	22c1      	movs	r2, #193	; 0xc1
    15e8:	0092      	lsls	r2, r2, #2
    15ea:	5098      	str	r0, [r3, r2]
		/* Start HF clock, if already started then explicitly
		 * assert IRQ.
		 * NOTE: The INTENSET is used as state flag to start
		 * calibration in ISR.
		 */
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    15ec:	509d      	str	r5, [r3, r2]

		err = _m16src_start(dev, false);
    15ee:	0038      	movs	r0, r7
    15f0:	f7ff fefe 	bl	13f0 <_m16src_start>
		if (!err) {
    15f4:	2800      	cmp	r0, #0
    15f6:	d101      	bne.n	15fc <_k32src_start+0xa8>
  \details Sets the pending bit of an external interrupt.
  \param [in]      IRQn  Interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    15f8:	4b07      	ldr	r3, [pc, #28]	; (1618 <_k32src_start+0xc4>)
    15fa:	605d      	str	r5, [r3, #4]
		} else {
			__ASSERT_NO_MSG(err == -EINPROGRESS);
		}
	}

	return !(NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk);
    15fc:	2383      	movs	r3, #131	; 0x83
    15fe:	2280      	movs	r2, #128	; 0x80
    1600:	2001      	movs	r0, #1
    1602:	00db      	lsls	r3, r3, #3
    1604:	05d2      	lsls	r2, r2, #23
    1606:	58d3      	ldr	r3, [r2, r3]
    1608:	0c1b      	lsrs	r3, r3, #16
    160a:	4398      	bics	r0, r3
}
    160c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    160e:	46c0      	nop			; (mov r8, r8)
    1610:	400000fc 	.word	0x400000fc
    1614:	e000e100 	.word	0xe000e100
    1618:	e000e1fc 	.word	0xe000e1fc

0000161c <_nop_char_out>:
{
	ARG_UNUSED(c);

	/* do nothing */
	return 0;
}
    161c:	2000      	movs	r0, #0
    161e:	4770      	bx	lr

00001620 <char_out>:
	int count;
};

static int char_out(int c, struct out_context *ctx)
{
	ctx->count++;
    1620:	680b      	ldr	r3, [r1, #0]
struct out_context {
	int count;
};

static int char_out(int c, struct out_context *ctx)
{
    1622:	b510      	push	{r4, lr}
	ctx->count++;
    1624:	3301      	adds	r3, #1
    1626:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    1628:	4b01      	ldr	r3, [pc, #4]	; (1630 <char_out+0x10>)
    162a:	681b      	ldr	r3, [r3, #0]
    162c:	4798      	blx	r3
}
    162e:	bd10      	pop	{r4, pc}
    1630:	200004cc 	.word	0x200004cc

00001634 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
    1634:	b5f0      	push	{r4, r5, r6, r7, lr}
    1636:	b087      	sub	sp, #28
    1638:	9303      	str	r3, [sp, #12]
	int found_largest_digit = 0;
	int remaining = 10; /* 10 digits max */
	int digits = 1;

	/* make sure we don't skip if value is zero */
	if (min_width <= 0) {
    163a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
    163c:	0007      	movs	r7, r0
    163e:	9102      	str	r1, [sp, #8]
	int found_largest_digit = 0;
	int remaining = 10; /* 10 digits max */
	int digits = 1;

	/* make sure we don't skip if value is zero */
	if (min_width <= 0) {
    1640:	2b00      	cmp	r3, #0
    1642:	dc01      	bgt.n	1648 <_printk_dec_ulong+0x14>
		min_width = 1;
    1644:	2301      	movs	r3, #1
    1646:	930c      	str	r3, [sp, #48]	; 0x30
    1648:	2320      	movs	r3, #32
    164a:	9305      	str	r3, [sp, #20]
    164c:	9b03      	ldr	r3, [sp, #12]
    164e:	2b01      	cmp	r3, #1
    1650:	d101      	bne.n	1656 <_printk_dec_ulong+0x22>
    1652:	332f      	adds	r3, #47	; 0x2f
    1654:	9305      	str	r3, [sp, #20]
    1656:	230a      	movs	r3, #10
    1658:	9301      	str	r3, [sp, #4]
    165a:	2300      	movs	r3, #0
    165c:	0016      	movs	r6, r2
    165e:	2401      	movs	r4, #1
    1660:	4d1f      	ldr	r5, [pc, #124]	; (16e0 <_printk_dec_ulong+0xac>)
    1662:	9304      	str	r3, [sp, #16]
	}

	while (pos >= 9) {
		if (found_largest_digit || remainder > pos) {
    1664:	9b04      	ldr	r3, [sp, #16]
    1666:	2b00      	cmp	r3, #0
    1668:	d101      	bne.n	166e <_printk_dec_ulong+0x3a>
    166a:	42b5      	cmp	r5, r6
    166c:	d20a      	bcs.n	1684 <_printk_dec_ulong+0x50>
			found_largest_digit = 1;
			out((int)((remainder / (pos + 1)) + 48), ctx);
    166e:	1c69      	adds	r1, r5, #1
    1670:	0030      	movs	r0, r6
    1672:	f7fe fd95 	bl	1a0 <__aeabi_uidiv>
    1676:	9902      	ldr	r1, [sp, #8]
    1678:	3030      	adds	r0, #48	; 0x30
    167a:	47b8      	blx	r7
		min_width = 1;
	}

	while (pos >= 9) {
		if (found_largest_digit || remainder > pos) {
			found_largest_digit = 1;
    167c:	2301      	movs	r3, #1
			out((int)((remainder / (pos + 1)) + 48), ctx);
			digits++;
    167e:	3401      	adds	r4, #1
		min_width = 1;
	}

	while (pos >= 9) {
		if (found_largest_digit || remainder > pos) {
			found_largest_digit = 1;
    1680:	9304      	str	r3, [sp, #16]
			out((int)((remainder / (pos + 1)) + 48), ctx);
			digits++;
    1682:	e00a      	b.n	169a <_printk_dec_ulong+0x66>
		} else if (remaining <= min_width
    1684:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1686:	9a01      	ldr	r2, [sp, #4]
    1688:	4293      	cmp	r3, r2
    168a:	db06      	blt.n	169a <_printk_dec_ulong+0x66>
				&& padding < PAD_SPACE_AFTER) {
    168c:	9b03      	ldr	r3, [sp, #12]
    168e:	2b02      	cmp	r3, #2
    1690:	d803      	bhi.n	169a <_printk_dec_ulong+0x66>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    1692:	9902      	ldr	r1, [sp, #8]
    1694:	9805      	ldr	r0, [sp, #20]
    1696:	47b8      	blx	r7
			digits++;
    1698:	3401      	adds	r4, #1
		}
		remaining--;
    169a:	9b01      	ldr	r3, [sp, #4]
		remainder %= (pos + 1);
    169c:	1c69      	adds	r1, r5, #1
		} else if (remaining <= min_width
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
    169e:	3b01      	subs	r3, #1
		remainder %= (pos + 1);
    16a0:	0030      	movs	r0, r6
		} else if (remaining <= min_width
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
    16a2:	9301      	str	r3, [sp, #4]
		remainder %= (pos + 1);
    16a4:	f7fe fe02 	bl	2ac <__aeabi_uidivmod>
		pos /= 10;
    16a8:	0028      	movs	r0, r5
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
		remainder %= (pos + 1);
    16aa:	000e      	movs	r6, r1
		pos /= 10;
    16ac:	210a      	movs	r1, #10
    16ae:	f7fe fd77 	bl	1a0 <__aeabi_uidiv>
	/* make sure we don't skip if value is zero */
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 9) {
    16b2:	9b01      	ldr	r3, [sp, #4]
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
		remainder %= (pos + 1);
		pos /= 10;
    16b4:	0005      	movs	r5, r0
	/* make sure we don't skip if value is zero */
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 9) {
    16b6:	2b01      	cmp	r3, #1
    16b8:	d1d4      	bne.n	1664 <_printk_dec_ulong+0x30>
		}
		remaining--;
		remainder %= (pos + 1);
		pos /= 10;
	}
	out((int)(remainder + 48), ctx);
    16ba:	0030      	movs	r0, r6
    16bc:	9902      	ldr	r1, [sp, #8]
    16be:	3030      	adds	r0, #48	; 0x30
    16c0:	47b8      	blx	r7

	if (padding == PAD_SPACE_AFTER) {
    16c2:	9b03      	ldr	r3, [sp, #12]
    16c4:	2b03      	cmp	r3, #3
    16c6:	d108      	bne.n	16da <_printk_dec_ulong+0xa6>
    16c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    16ca:	1b1c      	subs	r4, r3, r4
		remaining = min_width - digits;
		while (remaining-- > 0) {
    16cc:	2c00      	cmp	r4, #0
    16ce:	dd04      	ble.n	16da <_printk_dec_ulong+0xa6>
			out(' ', ctx);
    16d0:	9902      	ldr	r1, [sp, #8]
    16d2:	2020      	movs	r0, #32
    16d4:	47b8      	blx	r7
    16d6:	3c01      	subs	r4, #1
    16d8:	e7f8      	b.n	16cc <_printk_dec_ulong+0x98>
		}
	}
}
    16da:	b007      	add	sp, #28
    16dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    16de:	46c0      	nop			; (mov r8, r8)
    16e0:	3b9ac9ff 	.word	0x3b9ac9ff

000016e4 <str_out>:
	int count;
};

static int str_out(int c, struct str_context *ctx)
{
	if (!ctx->str || ctx->count >= ctx->max) {
    16e4:	680a      	ldr	r2, [r1, #0]
	int max;
	int count;
};

static int str_out(int c, struct str_context *ctx)
{
    16e6:	b530      	push	{r4, r5, lr}
    16e8:	688b      	ldr	r3, [r1, #8]
	if (!ctx->str || ctx->count >= ctx->max) {
    16ea:	2a00      	cmp	r2, #0
    16ec:	d002      	beq.n	16f4 <str_out+0x10>
    16ee:	684c      	ldr	r4, [r1, #4]
    16f0:	42a3      	cmp	r3, r4
    16f2:	db02      	blt.n	16fa <str_out+0x16>
		ctx->count++;
    16f4:	3301      	adds	r3, #1
    16f6:	608b      	str	r3, [r1, #8]
		return c;
    16f8:	e009      	b.n	170e <str_out+0x2a>
	}

	if (ctx->count == ctx->max - 1) {
    16fa:	1e65      	subs	r5, r4, #1
    16fc:	42ab      	cmp	r3, r5
    16fe:	d103      	bne.n	1708 <str_out+0x24>
		ctx->str[ctx->count++] = '\0';
    1700:	608c      	str	r4, [r1, #8]
    1702:	2100      	movs	r1, #0
    1704:	54d1      	strb	r1, [r2, r3]
    1706:	e002      	b.n	170e <str_out+0x2a>
	} else {
		ctx->str[ctx->count++] = c;
    1708:	1c5c      	adds	r4, r3, #1
    170a:	608c      	str	r4, [r1, #8]
    170c:	54d0      	strb	r0, [r2, r3]
	}

	return c;
}
    170e:	bd30      	pop	{r4, r5, pc}

00001710 <__printk_hook_install>:
 *
 * @return N/A
 */
void __printk_hook_install(int (*fn)(int))
{
	_char_out = fn;
    1710:	4b01      	ldr	r3, [pc, #4]	; (1718 <__printk_hook_install+0x8>)
    1712:	6018      	str	r0, [r3, #0]
}
    1714:	4770      	bx	lr
    1716:	46c0      	nop			; (mov r8, r8)
    1718:	200004cc 	.word	0x200004cc

0000171c <_vprintk>:
 * @param ap Variable parameters
 *
 * @return N/A
 */
void _vprintk(out_func_t out, void *ctx, const char *fmt, va_list ap)
{
    171c:	b5f0      	push	{r4, r5, r6, r7, lr}
    171e:	001c      	movs	r4, r3
	int might_format = 0; /* 1 if encountered a '%' */
	enum pad_type padding = PAD_NONE;
	int min_width = -1;
	int long_ctr = 0;
    1720:	2300      	movs	r3, #0
 * @param ap Variable parameters
 *
 * @return N/A
 */
void _vprintk(out_func_t out, void *ctx, const char *fmt, va_list ap)
{
    1722:	b08d      	sub	sp, #52	; 0x34
	int might_format = 0; /* 1 if encountered a '%' */
	enum pad_type padding = PAD_NONE;
	int min_width = -1;
	int long_ctr = 0;
    1724:	9305      	str	r3, [sp, #20]
 */
void _vprintk(out_func_t out, void *ctx, const char *fmt, va_list ap)
{
	int might_format = 0; /* 1 if encountered a '%' */
	enum pad_type padding = PAD_NONE;
	int min_width = -1;
    1726:	3b01      	subs	r3, #1
    1728:	9304      	str	r3, [sp, #16]
 * @return N/A
 */
void _vprintk(out_func_t out, void *ctx, const char *fmt, va_list ap)
{
	int might_format = 0; /* 1 if encountered a '%' */
	enum pad_type padding = PAD_NONE;
    172a:	2300      	movs	r3, #0
 * @param ap Variable parameters
 *
 * @return N/A
 */
void _vprintk(out_func_t out, void *ctx, const char *fmt, va_list ap)
{
    172c:	0005      	movs	r5, r0
    172e:	000e      	movs	r6, r1
	int might_format = 0; /* 1 if encountered a '%' */
    1730:	001f      	movs	r7, r3
 * @param ap Variable parameters
 *
 * @return N/A
 */
void _vprintk(out_func_t out, void *ctx, const char *fmt, va_list ap)
{
    1732:	9207      	str	r2, [sp, #28]
	int might_format = 0; /* 1 if encountered a '%' */
	enum pad_type padding = PAD_NONE;
    1734:	9303      	str	r3, [sp, #12]
	int min_width = -1;
	int long_ctr = 0;

	/* fmt has already been adjusted if needed */

	while (*fmt) {
    1736:	9b07      	ldr	r3, [sp, #28]
    1738:	7818      	ldrb	r0, [r3, #0]
    173a:	2800      	cmp	r0, #0
    173c:	d100      	bne.n	1740 <_vprintk+0x24>
    173e:	e10f      	b.n	1960 <_vprintk+0x244>
		if (!might_format) {
    1740:	2f00      	cmp	r7, #0
    1742:	d105      	bne.n	1750 <_vprintk+0x34>
			if (*fmt != '%') {
    1744:	2825      	cmp	r0, #37	; 0x25
    1746:	d100      	bne.n	174a <_vprintk+0x2e>
    1748:	e0fb      	b.n	1942 <_vprintk+0x226>
				out((int)*fmt, ctx);
    174a:	0031      	movs	r1, r6
    174c:	47a8      	blx	r5
    174e:	e103      	b.n	1958 <_vprintk+0x23c>
				min_width = -1;
				padding = PAD_NONE;
				long_ctr = 0;
			}
		} else {
			switch (*fmt) {
    1750:	2864      	cmp	r0, #100	; 0x64
    1752:	d050      	beq.n	17f6 <_vprintk+0xda>
    1754:	d816      	bhi.n	1784 <_vprintk+0x68>
    1756:	2839      	cmp	r0, #57	; 0x39
    1758:	d809      	bhi.n	176e <_vprintk+0x52>
    175a:	2831      	cmp	r0, #49	; 0x31
    175c:	d236      	bcs.n	17cc <_vprintk+0xb0>
    175e:	282d      	cmp	r0, #45	; 0x2d
    1760:	d02a      	beq.n	17b8 <_vprintk+0x9c>
    1762:	2830      	cmp	r0, #48	; 0x30
    1764:	d02a      	beq.n	17bc <_vprintk+0xa0>
    1766:	2825      	cmp	r0, #37	; 0x25
    1768:	d000      	beq.n	176c <_vprintk+0x50>
    176a:	e0e1      	b.n	1930 <_vprintk+0x214>
    176c:	e0e5      	b.n	193a <_vprintk+0x21e>
    176e:	2858      	cmp	r0, #88	; 0x58
    1770:	d07b      	beq.n	186a <_vprintk+0x14e>
    1772:	2863      	cmp	r0, #99	; 0x63
    1774:	d000      	beq.n	1778 <_vprintk+0x5c>
    1776:	e0db      	b.n	1930 <_vprintk+0x214>
				break;
			}
			case 'c': {
				int c = va_arg(ap, int);

				out(c, ctx);
    1778:	6820      	ldr	r0, [r4, #0]
				while (*s)
					out((int)(*s++), ctx);
				break;
			}
			case 'c': {
				int c = va_arg(ap, int);
    177a:	1d27      	adds	r7, r4, #4

				out(c, ctx);
    177c:	0031      	movs	r1, r6
    177e:	47a8      	blx	r5
				while (*s)
					out((int)(*s++), ctx);
				break;
			}
			case 'c': {
				int c = va_arg(ap, int);
    1780:	003c      	movs	r4, r7
    1782:	e0dc      	b.n	193e <_vprintk+0x222>
				min_width = -1;
				padding = PAD_NONE;
				long_ctr = 0;
			}
		} else {
			switch (*fmt) {
    1784:	2870      	cmp	r0, #112	; 0x70
    1786:	d066      	beq.n	1856 <_vprintk+0x13a>
    1788:	d807      	bhi.n	179a <_vprintk+0x7e>
    178a:	2869      	cmp	r0, #105	; 0x69
    178c:	d033      	beq.n	17f6 <_vprintk+0xda>
    178e:	286c      	cmp	r0, #108	; 0x6c
    1790:	d02d      	beq.n	17ee <_vprintk+0xd2>
    1792:	2868      	cmp	r0, #104	; 0x68
    1794:	d000      	beq.n	1798 <_vprintk+0x7c>
    1796:	e0cb      	b.n	1930 <_vprintk+0x214>
    1798:	e0d9      	b.n	194e <_vprintk+0x232>
    179a:	2875      	cmp	r0, #117	; 0x75
    179c:	d046      	beq.n	182c <_vprintk+0x110>
    179e:	d805      	bhi.n	17ac <_vprintk+0x90>
    17a0:	2873      	cmp	r0, #115	; 0x73
    17a2:	d000      	beq.n	17a6 <_vprintk+0x8a>
    17a4:	e0c4      	b.n	1930 <_vprintk+0x214>
				_printk_hex_ulong(out, ctx, x, padding,
						  min_width);
				break;
			}
			case 's': {
				char *s = va_arg(ap, char *);
    17a6:	1d27      	adds	r7, r4, #4
    17a8:	6824      	ldr	r4, [r4, #0]

				while (*s)
    17aa:	e0b7      	b.n	191c <_vprintk+0x200>
				min_width = -1;
				padding = PAD_NONE;
				long_ctr = 0;
			}
		} else {
			switch (*fmt) {
    17ac:	2878      	cmp	r0, #120	; 0x78
    17ae:	d05c      	beq.n	186a <_vprintk+0x14e>
    17b0:	287a      	cmp	r0, #122	; 0x7a
    17b2:	d100      	bne.n	17b6 <_vprintk+0x9a>
    17b4:	e0cb      	b.n	194e <_vprintk+0x232>
    17b6:	e0bb      	b.n	1930 <_vprintk+0x214>
			case '-':
				padding = PAD_SPACE_AFTER;
    17b8:	2303      	movs	r3, #3
    17ba:	e0c7      	b.n	194c <_vprintk+0x230>
				goto still_might_format;
			case '0':
				if (min_width < 0 && padding == PAD_NONE) {
    17bc:	9b04      	ldr	r3, [sp, #16]
    17be:	2b00      	cmp	r3, #0
    17c0:	da07      	bge.n	17d2 <_vprintk+0xb6>
    17c2:	9b03      	ldr	r3, [sp, #12]
    17c4:	2b00      	cmp	r3, #0
    17c6:	d100      	bne.n	17ca <_vprintk+0xae>
    17c8:	e0c3      	b.n	1952 <_vprintk+0x236>
    17ca:	e006      	b.n	17da <_vprintk+0xbe>
					padding = PAD_ZERO_BEFORE;
					goto still_might_format;
				}
				/* Fall through */
			case '1' ... '9':
				if (min_width < 0) {
    17cc:	9b04      	ldr	r3, [sp, #16]
    17ce:	2b00      	cmp	r3, #0
    17d0:	db03      	blt.n	17da <_vprintk+0xbe>
					min_width = *fmt - '0';
				} else {
					min_width = 10 * min_width + *fmt - '0';
    17d2:	230a      	movs	r3, #10
    17d4:	9a04      	ldr	r2, [sp, #16]
    17d6:	4353      	muls	r3, r2
    17d8:	1818      	adds	r0, r3, r0
				}

				if (padding == PAD_NONE) {
    17da:	9b03      	ldr	r3, [sp, #12]
				/* Fall through */
			case '1' ... '9':
				if (min_width < 0) {
					min_width = *fmt - '0';
				} else {
					min_width = 10 * min_width + *fmt - '0';
    17dc:	3830      	subs	r0, #48	; 0x30
    17de:	9004      	str	r0, [sp, #16]
    17e0:	2701      	movs	r7, #1
				}

				if (padding == PAD_NONE) {
    17e2:	2b00      	cmp	r3, #0
    17e4:	d000      	beq.n	17e8 <_vprintk+0xcc>
    17e6:	e0b7      	b.n	1958 <_vprintk+0x23c>
					padding = PAD_SPACE_BEFORE;
    17e8:	3302      	adds	r3, #2
    17ea:	9303      	str	r3, [sp, #12]
    17ec:	e0b4      	b.n	1958 <_vprintk+0x23c>
				}
				goto still_might_format;
			case 'l':
				long_ctr++;
    17ee:	9b05      	ldr	r3, [sp, #20]
    17f0:	3301      	adds	r3, #1
    17f2:	9305      	str	r3, [sp, #20]
    17f4:	e0ab      	b.n	194e <_vprintk+0x232>
				/* FIXME: do nothing for these modifiers */
				goto still_might_format;
			case 'd':
			case 'i': {
				long d;
				if (long_ctr < 2) {
    17f6:	9b05      	ldr	r3, [sp, #20]
    17f8:	2b01      	cmp	r3, #1
    17fa:	dc02      	bgt.n	1802 <_vprintk+0xe6>
					d = va_arg(ap, long);
    17fc:	6827      	ldr	r7, [r4, #0]
    17fe:	3404      	adds	r4, #4
    1800:	e006      	b.n	1810 <_vprintk+0xf4>
				} else {
					d = (long)va_arg(ap, long long);
    1802:	3407      	adds	r4, #7
    1804:	0023      	movs	r3, r4
    1806:	2207      	movs	r2, #7
    1808:	4393      	bics	r3, r2
    180a:	001c      	movs	r4, r3
    180c:	681f      	ldr	r7, [r3, #0]
    180e:	3408      	adds	r4, #8
				}

				if (d < 0) {
    1810:	2f00      	cmp	r7, #0
    1812:	da06      	bge.n	1822 <_vprintk+0x106>
					out((int)'-', ctx);
    1814:	0031      	movs	r1, r6
    1816:	202d      	movs	r0, #45	; 0x2d
    1818:	47a8      	blx	r5
					d = -d;
					min_width--;
    181a:	9b04      	ldr	r3, [sp, #16]
					d = (long)va_arg(ap, long long);
				}

				if (d < 0) {
					out((int)'-', ctx);
					d = -d;
    181c:	427f      	negs	r7, r7
					min_width--;
    181e:	3b01      	subs	r3, #1
    1820:	9304      	str	r3, [sp, #16]
				}
				_printk_dec_ulong(out, ctx, d, padding,
    1822:	9b04      	ldr	r3, [sp, #16]
    1824:	003a      	movs	r2, r7
    1826:	9300      	str	r3, [sp, #0]
    1828:	9b03      	ldr	r3, [sp, #12]
    182a:	e00f      	b.n	184c <_vprintk+0x130>
				break;
			}
			case 'u': {
				unsigned long u;

				if (long_ctr < 2) {
    182c:	9b05      	ldr	r3, [sp, #20]
    182e:	2b01      	cmp	r3, #1
    1830:	dc02      	bgt.n	1838 <_vprintk+0x11c>
					u = va_arg(ap, unsigned long);
    1832:	6822      	ldr	r2, [r4, #0]
    1834:	3404      	adds	r4, #4
    1836:	e006      	b.n	1846 <_vprintk+0x12a>
				} else {
					u = (unsigned long)va_arg(ap,
    1838:	3407      	adds	r4, #7
    183a:	0023      	movs	r3, r4
    183c:	2207      	movs	r2, #7
    183e:	4393      	bics	r3, r2
    1840:	001c      	movs	r4, r3
    1842:	681a      	ldr	r2, [r3, #0]
    1844:	3408      	adds	r4, #8
							unsigned long long);
				}
				_printk_dec_ulong(out, ctx, u, padding,
    1846:	9b04      	ldr	r3, [sp, #16]
    1848:	9300      	str	r3, [sp, #0]
    184a:	9b03      	ldr	r3, [sp, #12]
    184c:	0031      	movs	r1, r6
    184e:	0028      	movs	r0, r5
    1850:	f7ff fef0 	bl	1634 <_printk_dec_ulong>
    1854:	e073      	b.n	193e <_vprintk+0x222>
						  min_width);
				break;
			}
			case 'p':
				  out('0', ctx);
    1856:	0031      	movs	r1, r6
    1858:	2030      	movs	r0, #48	; 0x30
    185a:	47a8      	blx	r5
				  out('x', ctx);
    185c:	0031      	movs	r1, r6
    185e:	2078      	movs	r0, #120	; 0x78
    1860:	47a8      	blx	r5
				  /* left-pad pointers with zeros */
				  padding = PAD_ZERO_BEFORE;
				  min_width = 8;
    1862:	2308      	movs	r3, #8
    1864:	9304      	str	r3, [sp, #16]
			}
			case 'p':
				  out('0', ctx);
				  out('x', ctx);
				  /* left-pad pointers with zeros */
				  padding = PAD_ZERO_BEFORE;
    1866:	3b07      	subs	r3, #7
    1868:	9303      	str	r3, [sp, #12]
				  /* Fall through */
			case 'x':
			case 'X': {
				unsigned long x;

				if (long_ctr < 2) {
    186a:	9b05      	ldr	r3, [sp, #20]
    186c:	2b01      	cmp	r3, #1
    186e:	dc03      	bgt.n	1878 <_vprintk+0x15c>
					x = va_arg(ap, unsigned long);
    1870:	6823      	ldr	r3, [r4, #0]
    1872:	3404      	adds	r4, #4
    1874:	9309      	str	r3, [sp, #36]	; 0x24
    1876:	e007      	b.n	1888 <_vprintk+0x16c>
				} else {
					x = (unsigned long)va_arg(ap,
    1878:	3407      	adds	r4, #7
    187a:	0023      	movs	r3, r4
    187c:	2207      	movs	r2, #7
    187e:	4393      	bics	r3, r2
    1880:	001c      	movs	r4, r3
    1882:	681b      	ldr	r3, [r3, #0]
    1884:	3408      	adds	r4, #8
    1886:	9309      	str	r3, [sp, #36]	; 0x24
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
	int size = sizeof(num) * 2;
	int found_largest_digit = 0;
	int remaining = 8; /* 8 digits max */
    1888:	2308      	movs	r3, #8
    188a:	9306      	str	r3, [sp, #24]
	int digits = 0;
    188c:	2300      	movs	r3, #0
 */
static void _printk_hex_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
	int size = sizeof(num) * 2;
    188e:	2708      	movs	r7, #8
	int found_largest_digit = 0;
	int remaining = 8; /* 8 digits max */
	int digits = 0;
    1890:	9308      	str	r3, [sp, #32]
static void _printk_hex_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
	int size = sizeof(num) * 2;
	int found_largest_digit = 0;
    1892:	930b      	str	r3, [sp, #44]	; 0x2c
	int remaining = 8; /* 8 digits max */
	int digits = 0;

	for (; size; size--) {
		char nibble = (num >> ((size - 1) << 2) & 0xf);
    1894:	3f01      	subs	r7, #1
    1896:	9809      	ldr	r0, [sp, #36]	; 0x24
    1898:	00bb      	lsls	r3, r7, #2
    189a:	40d8      	lsrs	r0, r3
    189c:	230f      	movs	r3, #15
    189e:	4018      	ands	r0, r3

		if (nibble || found_largest_digit || size == 1) {
    18a0:	d105      	bne.n	18ae <_vprintk+0x192>
    18a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    18a4:	2b00      	cmp	r3, #0
    18a6:	d107      	bne.n	18b8 <_vprintk+0x19c>
    18a8:	2f00      	cmp	r7, #0
    18aa:	d111      	bne.n	18d0 <_vprintk+0x1b4>
    18ac:	e004      	b.n	18b8 <_vprintk+0x19c>
			found_largest_digit = 1;
			nibble += nibble > 9 ? 87 : 48;
    18ae:	2357      	movs	r3, #87	; 0x57
    18b0:	2809      	cmp	r0, #9
    18b2:	d802      	bhi.n	18ba <_vprintk+0x19e>
    18b4:	3b27      	subs	r3, #39	; 0x27
    18b6:	e000      	b.n	18ba <_vprintk+0x19e>
    18b8:	2330      	movs	r3, #48	; 0x30
			out((int)nibble, ctx);
    18ba:	18c0      	adds	r0, r0, r3
    18bc:	0031      	movs	r1, r6
    18be:	47a8      	blx	r5
			digits++;
    18c0:	9b08      	ldr	r3, [sp, #32]
    18c2:	3301      	adds	r3, #1
    18c4:	9308      	str	r3, [sp, #32]
    18c6:	9b06      	ldr	r3, [sp, #24]
    18c8:	930a      	str	r3, [sp, #40]	; 0x28

	for (; size; size--) {
		char nibble = (num >> ((size - 1) << 2) & 0xf);

		if (nibble || found_largest_digit || size == 1) {
			found_largest_digit = 1;
    18ca:	2301      	movs	r3, #1
    18cc:	930b      	str	r3, [sp, #44]	; 0x2c
    18ce:	e012      	b.n	18f6 <_vprintk+0x1da>
			out((int)nibble, ctx);
			digits++;
			continue;
		}

		if (remaining-- <= min_width) {
    18d0:	9b06      	ldr	r3, [sp, #24]
    18d2:	9a06      	ldr	r2, [sp, #24]
    18d4:	3b01      	subs	r3, #1
    18d6:	930a      	str	r3, [sp, #40]	; 0x28
    18d8:	9b04      	ldr	r3, [sp, #16]
    18da:	4293      	cmp	r3, r2
    18dc:	db0b      	blt.n	18f6 <_vprintk+0x1da>
			if (padding == PAD_ZERO_BEFORE) {
    18de:	9b03      	ldr	r3, [sp, #12]
    18e0:	2b01      	cmp	r3, #1
    18e2:	d102      	bne.n	18ea <_vprintk+0x1ce>
				out('0', ctx);
    18e4:	0031      	movs	r1, r6
    18e6:	2030      	movs	r0, #48	; 0x30
    18e8:	e004      	b.n	18f4 <_vprintk+0x1d8>
			} else if (padding == PAD_SPACE_BEFORE) {
    18ea:	9b03      	ldr	r3, [sp, #12]
    18ec:	2b02      	cmp	r3, #2
    18ee:	d102      	bne.n	18f6 <_vprintk+0x1da>
				out(' ', ctx);
    18f0:	0031      	movs	r1, r6
    18f2:	2020      	movs	r0, #32
    18f4:	47a8      	blx	r5
	int size = sizeof(num) * 2;
	int found_largest_digit = 0;
	int remaining = 8; /* 8 digits max */
	int digits = 0;

	for (; size; size--) {
    18f6:	2f00      	cmp	r7, #0
    18f8:	d002      	beq.n	1900 <_vprintk+0x1e4>
    18fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    18fc:	9306      	str	r3, [sp, #24]
    18fe:	e7c9      	b.n	1894 <_vprintk+0x178>
				out(' ', ctx);
			}
		}
	}

	if (padding == PAD_SPACE_AFTER) {
    1900:	9b03      	ldr	r3, [sp, #12]
    1902:	2b03      	cmp	r3, #3
    1904:	d128      	bne.n	1958 <_vprintk+0x23c>
    1906:	9b04      	ldr	r3, [sp, #16]
    1908:	005f      	lsls	r7, r3, #1
    190a:	9b08      	ldr	r3, [sp, #32]
    190c:	1aff      	subs	r7, r7, r3
		remaining = min_width * 2 - digits;
		while (remaining-- > 0) {
    190e:	2f00      	cmp	r7, #0
    1910:	dd15      	ble.n	193e <_vprintk+0x222>
			out(' ', ctx);
    1912:	0031      	movs	r1, r6
    1914:	2020      	movs	r0, #32
    1916:	47a8      	blx	r5
    1918:	3f01      	subs	r7, #1
    191a:	e7f8      	b.n	190e <_vprintk+0x1f2>
				break;
			}
			case 's': {
				char *s = va_arg(ap, char *);

				while (*s)
    191c:	7820      	ldrb	r0, [r4, #0]
    191e:	2800      	cmp	r0, #0
    1920:	d003      	beq.n	192a <_vprintk+0x20e>
					out((int)(*s++), ctx);
    1922:	0031      	movs	r1, r6
    1924:	3401      	adds	r4, #1
    1926:	47a8      	blx	r5
    1928:	e7f8      	b.n	191c <_vprintk+0x200>
				_printk_hex_ulong(out, ctx, x, padding,
						  min_width);
				break;
			}
			case 's': {
				char *s = va_arg(ap, char *);
    192a:	003c      	movs	r4, r7
			default:
				out((int)'%', ctx);
				out((int)*fmt, ctx);
				break;
			}
			might_format = 0;
    192c:	0007      	movs	r7, r0
    192e:	e013      	b.n	1958 <_vprintk+0x23c>
			case '%': {
				out((int)'%', ctx);
				break;
			}
			default:
				out((int)'%', ctx);
    1930:	0031      	movs	r1, r6
    1932:	2025      	movs	r0, #37	; 0x25
    1934:	47a8      	blx	r5
				out((int)*fmt, ctx);
    1936:	9b07      	ldr	r3, [sp, #28]
    1938:	7818      	ldrb	r0, [r3, #0]
    193a:	0031      	movs	r1, r6
    193c:	47a8      	blx	r5
				break;
			}
			might_format = 0;
    193e:	2700      	movs	r7, #0
				break;
			}
			default:
				out((int)'%', ctx);
				out((int)*fmt, ctx);
				break;
    1940:	e00a      	b.n	1958 <_vprintk+0x23c>
		if (!might_format) {
			if (*fmt != '%') {
				out((int)*fmt, ctx);
			} else {
				might_format = 1;
				min_width = -1;
    1942:	2301      	movs	r3, #1
    1944:	425b      	negs	r3, r3
    1946:	9304      	str	r3, [sp, #16]
				padding = PAD_NONE;
    1948:	003b      	movs	r3, r7
				long_ctr = 0;
    194a:	9705      	str	r7, [sp, #20]
			if (*fmt != '%') {
				out((int)*fmt, ctx);
			} else {
				might_format = 1;
				min_width = -1;
				padding = PAD_NONE;
    194c:	9303      	str	r3, [sp, #12]
				long_ctr = 0;
			}
		} else {
			switch (*fmt) {
    194e:	2701      	movs	r7, #1
    1950:	e002      	b.n	1958 <_vprintk+0x23c>
			case '-':
				padding = PAD_SPACE_AFTER;
				goto still_might_format;
			case '0':
				if (min_width < 0 && padding == PAD_NONE) {
					padding = PAD_ZERO_BEFORE;
    1952:	2301      	movs	r3, #1
    1954:	001f      	movs	r7, r3
    1956:	9303      	str	r3, [sp, #12]
				break;
			}
			might_format = 0;
		}
still_might_format:
		++fmt;
    1958:	9b07      	ldr	r3, [sp, #28]
    195a:	3301      	adds	r3, #1
    195c:	9307      	str	r3, [sp, #28]
    195e:	e6ea      	b.n	1736 <_vprintk+0x1a>
	}
}
    1960:	b00d      	add	sp, #52	; 0x34
    1962:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001964 <vprintk>:
	ctx->count++;
	return _char_out(c);
}

int vprintk(const char *fmt, va_list ap)
{
    1964:	b507      	push	{r0, r1, r2, lr}
    1966:	000b      	movs	r3, r1
	struct out_context ctx = { 0 };
    1968:	2100      	movs	r1, #0
	ctx->count++;
	return _char_out(c);
}

int vprintk(const char *fmt, va_list ap)
{
    196a:	0002      	movs	r2, r0
	struct out_context ctx = { 0 };
    196c:	9101      	str	r1, [sp, #4]

	_vprintk((out_func_t)char_out, &ctx, fmt, ap);
    196e:	4803      	ldr	r0, [pc, #12]	; (197c <vprintk+0x18>)
    1970:	a901      	add	r1, sp, #4
    1972:	f7ff fed3 	bl	171c <_vprintk>
	return ctx.count;
}
    1976:	9801      	ldr	r0, [sp, #4]
    1978:	bd0e      	pop	{r1, r2, r3, pc}
    197a:	46c0      	nop			; (mov r8, r8)
    197c:	00001621 	.word	0x00001621

00001980 <printk>:
 * @param fmt formatted string to output
 *
 * @return Number of characters printed
 */
int printk(const char *fmt, ...)
{
    1980:	b40f      	push	{r0, r1, r2, r3}
    1982:	b507      	push	{r0, r1, r2, lr}
    1984:	a904      	add	r1, sp, #16
    1986:	c901      	ldmia	r1!, {r0}
	int ret;
	va_list ap;

	va_start(ap, fmt);
    1988:	9101      	str	r1, [sp, #4]
	ret = vprintk(fmt, ap);
    198a:	f7ff ffeb 	bl	1964 <vprintk>
	va_end(ap);

	return ret;
}
    198e:	b003      	add	sp, #12
    1990:	bc08      	pop	{r3}
    1992:	b004      	add	sp, #16
    1994:	4718      	bx	r3
	...

00001998 <snprintk>:

	return c;
}

int snprintk(char *str, size_t size, const char *fmt, ...)
{
    1998:	b40c      	push	{r2, r3}
    199a:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
    199c:	2500      	movs	r5, #0

	return c;
}

int snprintk(char *str, size_t size, const char *fmt, ...)
{
    199e:	b085      	sub	sp, #20
    19a0:	ab08      	add	r3, sp, #32
    19a2:	cb04      	ldmia	r3!, {r2}
	struct str_context ctx = { str, size, 0 };
    19a4:	9001      	str	r0, [sp, #4]
    19a6:	9102      	str	r1, [sp, #8]

	return c;
}

int snprintk(char *str, size_t size, const char *fmt, ...)
{
    19a8:	0004      	movs	r4, r0
	struct str_context ctx = { str, size, 0 };
	va_list ap;

	va_start(ap, fmt);
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    19aa:	a901      	add	r1, sp, #4
    19ac:	4807      	ldr	r0, [pc, #28]	; (19cc <snprintk+0x34>)
int snprintk(char *str, size_t size, const char *fmt, ...)
{
	struct str_context ctx = { str, size, 0 };
	va_list ap;

	va_start(ap, fmt);
    19ae:	9300      	str	r3, [sp, #0]
	return c;
}

int snprintk(char *str, size_t size, const char *fmt, ...)
{
	struct str_context ctx = { str, size, 0 };
    19b0:	9503      	str	r5, [sp, #12]
	va_list ap;

	va_start(ap, fmt);
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    19b2:	f7ff feb3 	bl	171c <_vprintk>
	va_end(ap);

	if (ctx.count < ctx.max) {
    19b6:	9803      	ldr	r0, [sp, #12]
    19b8:	9b02      	ldr	r3, [sp, #8]
    19ba:	4298      	cmp	r0, r3
    19bc:	da00      	bge.n	19c0 <snprintk+0x28>
		str[ctx.count] = '\0';
    19be:	5425      	strb	r5, [r4, r0]
	}

	return ctx.count;
}
    19c0:	b005      	add	sp, #20
    19c2:	bc30      	pop	{r4, r5}
    19c4:	bc08      	pop	{r3}
    19c6:	b002      	add	sp, #8
    19c8:	4718      	bx	r3
    19ca:	46c0      	nop			; (mov r8, r8)
    19cc:	000016e5 	.word	0x000016e5

000019d0 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_BLUETOOTH_CONTROLLER_RX_PRIO_STACK_SIZE, 448);
GEN_ABSOLUTE_SYM(CONFIG_MEM_POOL_SPLIT_BEFORE_DEFRAG, 1);
GEN_ABSOLUTE_SYM(CONFIG_SYS_LOG_SHOW_TAGS, 1);
GEN_ABSOLUTE_SYM(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH_MAX, 27);

GEN_ABS_SYM_END
    19d0:	4770      	bx	lr

000019d2 <_copy>:
#define MASK_MOST_SIG_BIT 0x80
#define MASK_TWENTY_SEVEN 0x1b

uint32_t _copy(uint8_t *to, uint32_t to_len,
	       const uint8_t *from, uint32_t from_len)
{
    19d2:	b570      	push	{r4, r5, r6, lr}
    19d4:	000d      	movs	r5, r1
    19d6:	001c      	movs	r4, r3
    19d8:	0011      	movs	r1, r2
	if (from_len <= to_len) {
		(void)memcpy(to, from, from_len);
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
    19da:	2300      	movs	r3, #0
#define MASK_TWENTY_SEVEN 0x1b

uint32_t _copy(uint8_t *to, uint32_t to_len,
	       const uint8_t *from, uint32_t from_len)
{
	if (from_len <= to_len) {
    19dc:	42ac      	cmp	r4, r5
    19de:	d803      	bhi.n	19e8 <_copy+0x16>
		(void)memcpy(to, from, from_len);
    19e0:	0022      	movs	r2, r4
    19e2:	f7ff f9aa 	bl	d3a <memcpy>
		return from_len;
    19e6:	0023      	movs	r3, r4
	} else {
		return TC_CRYPTO_FAIL;
	}
}
    19e8:	0018      	movs	r0, r3
    19ea:	bd70      	pop	{r4, r5, r6, pc}

000019ec <_set>:

void _set(void *to, uint8_t val, uint32_t len)
{
    19ec:	b510      	push	{r4, lr}
	(void)memset(to, val, len);
    19ee:	f7ff f9ce 	bl	d8e <memset>
}
    19f2:	bd10      	pop	{r4, pc}

000019f4 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
    19f4:	231b      	movs	r3, #27
    19f6:	09c2      	lsrs	r2, r0, #7
    19f8:	4353      	muls	r3, r2
    19fa:	0040      	lsls	r0, r0, #1
    19fc:	4058      	eors	r0, r3
    19fe:	b2c0      	uxtb	r0, r0
}
    1a00:	4770      	bx	lr

00001a02 <add_round_key>:
	(void)_copy(s, sizeof(t), t, sizeof(t));
}

static inline void add_round_key(uint8_t *s, const uint32_t *k)
{
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
    1a02:	680b      	ldr	r3, [r1, #0]
    1a04:	0e1a      	lsrs	r2, r3, #24
    1a06:	7803      	ldrb	r3, [r0, #0]
    1a08:	4053      	eors	r3, r2
    1a0a:	7003      	strb	r3, [r0, #0]
    1a0c:	680b      	ldr	r3, [r1, #0]
    1a0e:	0c1a      	lsrs	r2, r3, #16
    1a10:	7843      	ldrb	r3, [r0, #1]
    1a12:	4053      	eors	r3, r2
    1a14:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
    1a16:	680b      	ldr	r3, [r1, #0]
    1a18:	0a1a      	lsrs	r2, r3, #8
    1a1a:	7883      	ldrb	r3, [r0, #2]
    1a1c:	4053      	eors	r3, r2
    1a1e:	7083      	strb	r3, [r0, #2]
    1a20:	680a      	ldr	r2, [r1, #0]
    1a22:	78c3      	ldrb	r3, [r0, #3]
    1a24:	4053      	eors	r3, r2
    1a26:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
    1a28:	684b      	ldr	r3, [r1, #4]
    1a2a:	0e1a      	lsrs	r2, r3, #24
    1a2c:	7903      	ldrb	r3, [r0, #4]
    1a2e:	4053      	eors	r3, r2
    1a30:	7103      	strb	r3, [r0, #4]
    1a32:	684b      	ldr	r3, [r1, #4]
    1a34:	0c1a      	lsrs	r2, r3, #16
    1a36:	7943      	ldrb	r3, [r0, #5]
    1a38:	4053      	eors	r3, r2
    1a3a:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
    1a3c:	684b      	ldr	r3, [r1, #4]
    1a3e:	0a1a      	lsrs	r2, r3, #8
    1a40:	7983      	ldrb	r3, [r0, #6]
    1a42:	4053      	eors	r3, r2
    1a44:	7183      	strb	r3, [r0, #6]
    1a46:	684a      	ldr	r2, [r1, #4]
    1a48:	79c3      	ldrb	r3, [r0, #7]
    1a4a:	4053      	eors	r3, r2
    1a4c:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
    1a4e:	688b      	ldr	r3, [r1, #8]
    1a50:	0e1a      	lsrs	r2, r3, #24
    1a52:	7a03      	ldrb	r3, [r0, #8]
    1a54:	4053      	eors	r3, r2
    1a56:	7203      	strb	r3, [r0, #8]
    1a58:	688b      	ldr	r3, [r1, #8]
    1a5a:	0c1a      	lsrs	r2, r3, #16
    1a5c:	7a43      	ldrb	r3, [r0, #9]
    1a5e:	4053      	eors	r3, r2
    1a60:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
    1a62:	688b      	ldr	r3, [r1, #8]
    1a64:	0a1a      	lsrs	r2, r3, #8
    1a66:	7a83      	ldrb	r3, [r0, #10]
    1a68:	4053      	eors	r3, r2
    1a6a:	7283      	strb	r3, [r0, #10]
    1a6c:	688a      	ldr	r2, [r1, #8]
    1a6e:	7ac3      	ldrb	r3, [r0, #11]
    1a70:	4053      	eors	r3, r2
    1a72:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
    1a74:	68cb      	ldr	r3, [r1, #12]
    1a76:	0e1a      	lsrs	r2, r3, #24
    1a78:	7b03      	ldrb	r3, [r0, #12]
    1a7a:	4053      	eors	r3, r2
    1a7c:	7303      	strb	r3, [r0, #12]
    1a7e:	68cb      	ldr	r3, [r1, #12]
    1a80:	0c1a      	lsrs	r2, r3, #16
    1a82:	7b43      	ldrb	r3, [r0, #13]
    1a84:	4053      	eors	r3, r2
    1a86:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
    1a88:	68cb      	ldr	r3, [r1, #12]
    1a8a:	0a1a      	lsrs	r2, r3, #8
    1a8c:	7b83      	ldrb	r3, [r0, #14]
    1a8e:	4053      	eors	r3, r2
    1a90:	7383      	strb	r3, [r0, #14]
    1a92:	68ca      	ldr	r2, [r1, #12]
    1a94:	7bc3      	ldrb	r3, [r0, #15]
    1a96:	4053      	eors	r3, r2
    1a98:	73c3      	strb	r3, [r0, #15]
}
    1a9a:	4770      	bx	lr

00001a9c <add_round_key>:
	return TC_CRYPTO_SUCCESS;
}

static inline void add_round_key(uint8_t *s, const uint32_t *k)
{
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
    1a9c:	680b      	ldr	r3, [r1, #0]
    1a9e:	0e1a      	lsrs	r2, r3, #24
    1aa0:	7803      	ldrb	r3, [r0, #0]
    1aa2:	4053      	eors	r3, r2
    1aa4:	7003      	strb	r3, [r0, #0]
    1aa6:	680b      	ldr	r3, [r1, #0]
    1aa8:	0c1a      	lsrs	r2, r3, #16
    1aaa:	7843      	ldrb	r3, [r0, #1]
    1aac:	4053      	eors	r3, r2
    1aae:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
    1ab0:	680b      	ldr	r3, [r1, #0]
    1ab2:	0a1a      	lsrs	r2, r3, #8
    1ab4:	7883      	ldrb	r3, [r0, #2]
    1ab6:	4053      	eors	r3, r2
    1ab8:	7083      	strb	r3, [r0, #2]
    1aba:	680a      	ldr	r2, [r1, #0]
    1abc:	78c3      	ldrb	r3, [r0, #3]
    1abe:	4053      	eors	r3, r2
    1ac0:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
    1ac2:	684b      	ldr	r3, [r1, #4]
    1ac4:	0e1a      	lsrs	r2, r3, #24
    1ac6:	7903      	ldrb	r3, [r0, #4]
    1ac8:	4053      	eors	r3, r2
    1aca:	7103      	strb	r3, [r0, #4]
    1acc:	684b      	ldr	r3, [r1, #4]
    1ace:	0c1a      	lsrs	r2, r3, #16
    1ad0:	7943      	ldrb	r3, [r0, #5]
    1ad2:	4053      	eors	r3, r2
    1ad4:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
    1ad6:	684b      	ldr	r3, [r1, #4]
    1ad8:	0a1a      	lsrs	r2, r3, #8
    1ada:	7983      	ldrb	r3, [r0, #6]
    1adc:	4053      	eors	r3, r2
    1ade:	7183      	strb	r3, [r0, #6]
    1ae0:	684a      	ldr	r2, [r1, #4]
    1ae2:	79c3      	ldrb	r3, [r0, #7]
    1ae4:	4053      	eors	r3, r2
    1ae6:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
    1ae8:	688b      	ldr	r3, [r1, #8]
    1aea:	0e1a      	lsrs	r2, r3, #24
    1aec:	7a03      	ldrb	r3, [r0, #8]
    1aee:	4053      	eors	r3, r2
    1af0:	7203      	strb	r3, [r0, #8]
    1af2:	688b      	ldr	r3, [r1, #8]
    1af4:	0c1a      	lsrs	r2, r3, #16
    1af6:	7a43      	ldrb	r3, [r0, #9]
    1af8:	4053      	eors	r3, r2
    1afa:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
    1afc:	688b      	ldr	r3, [r1, #8]
    1afe:	0a1a      	lsrs	r2, r3, #8
    1b00:	7a83      	ldrb	r3, [r0, #10]
    1b02:	4053      	eors	r3, r2
    1b04:	7283      	strb	r3, [r0, #10]
    1b06:	688a      	ldr	r2, [r1, #8]
    1b08:	7ac3      	ldrb	r3, [r0, #11]
    1b0a:	4053      	eors	r3, r2
    1b0c:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
    1b0e:	68cb      	ldr	r3, [r1, #12]
    1b10:	0e1a      	lsrs	r2, r3, #24
    1b12:	7b03      	ldrb	r3, [r0, #12]
    1b14:	4053      	eors	r3, r2
    1b16:	7303      	strb	r3, [r0, #12]
    1b18:	68cb      	ldr	r3, [r1, #12]
    1b1a:	0c1a      	lsrs	r2, r3, #16
    1b1c:	7b43      	ldrb	r3, [r0, #13]
    1b1e:	4053      	eors	r3, r2
    1b20:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
    1b22:	68cb      	ldr	r3, [r1, #12]
    1b24:	0a1a      	lsrs	r2, r3, #8
    1b26:	7b83      	ldrb	r3, [r0, #14]
    1b28:	4053      	eors	r3, r2
    1b2a:	7383      	strb	r3, [r0, #14]
    1b2c:	68ca      	ldr	r2, [r1, #12]
    1b2e:	7bc3      	ldrb	r3, [r0, #15]
    1b30:	4053      	eors	r3, r2
    1b32:	73c3      	strb	r3, [r0, #15]
}
    1b34:	4770      	bx	lr

00001b36 <mult_row_column>:
#define multb(a)(mult8(a)^_double_byte(a)^(a))
#define multd(a)(mult8(a)^_double_byte(_double_byte(a))^(a))
#define multe(a)(mult8(a)^_double_byte(_double_byte(a))^_double_byte(a))

static inline void mult_row_column(uint8_t *out, const uint8_t *in)
{
    1b36:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b38:	b087      	sub	sp, #28
    1b3a:	9000      	str	r0, [sp, #0]
	out[0] = multe(in[0]) ^ multb(in[1]) ^ multd(in[2]) ^ mult9(in[3]);
    1b3c:	7808      	ldrb	r0, [r1, #0]
#define multb(a)(mult8(a)^_double_byte(a)^(a))
#define multd(a)(mult8(a)^_double_byte(_double_byte(a))^(a))
#define multe(a)(mult8(a)^_double_byte(_double_byte(a))^_double_byte(a))

static inline void mult_row_column(uint8_t *out, const uint8_t *in)
{
    1b3e:	000e      	movs	r6, r1
	out[0] = multe(in[0]) ^ multb(in[1]) ^ multd(in[2]) ^ mult9(in[3]);
    1b40:	f7ff ff58 	bl	19f4 <_double_byte>
    1b44:	f7ff ff56 	bl	19f4 <_double_byte>
    1b48:	f7ff ff54 	bl	19f4 <_double_byte>
    1b4c:	0007      	movs	r7, r0
    1b4e:	7830      	ldrb	r0, [r6, #0]
    1b50:	f7ff ff50 	bl	19f4 <_double_byte>
    1b54:	f7ff ff4e 	bl	19f4 <_double_byte>
    1b58:	9001      	str	r0, [sp, #4]
    1b5a:	7830      	ldrb	r0, [r6, #0]
    1b5c:	f7ff ff4a 	bl	19f4 <_double_byte>
    1b60:	9002      	str	r0, [sp, #8]
    1b62:	7870      	ldrb	r0, [r6, #1]
    1b64:	f7ff ff46 	bl	19f4 <_double_byte>
    1b68:	f7ff ff44 	bl	19f4 <_double_byte>
    1b6c:	f7ff ff42 	bl	19f4 <_double_byte>
    1b70:	9003      	str	r0, [sp, #12]
    1b72:	7870      	ldrb	r0, [r6, #1]
    1b74:	f7ff ff3e 	bl	19f4 <_double_byte>
    1b78:	9004      	str	r0, [sp, #16]
    1b7a:	78b0      	ldrb	r0, [r6, #2]
    1b7c:	7874      	ldrb	r4, [r6, #1]
    1b7e:	f7ff ff39 	bl	19f4 <_double_byte>
    1b82:	f7ff ff37 	bl	19f4 <_double_byte>
    1b86:	f7ff ff35 	bl	19f4 <_double_byte>
    1b8a:	9005      	str	r0, [sp, #20]
    1b8c:	78b0      	ldrb	r0, [r6, #2]
    1b8e:	f7ff ff31 	bl	19f4 <_double_byte>
    1b92:	f7ff ff2f 	bl	19f4 <_double_byte>
    1b96:	78b3      	ldrb	r3, [r6, #2]
    1b98:	0005      	movs	r5, r0
    1b9a:	78f0      	ldrb	r0, [r6, #3]
    1b9c:	405c      	eors	r4, r3
    1b9e:	f7ff ff29 	bl	19f4 <_double_byte>
    1ba2:	f7ff ff27 	bl	19f4 <_double_byte>
    1ba6:	f7ff ff25 	bl	19f4 <_double_byte>
    1baa:	78f3      	ldrb	r3, [r6, #3]
    1bac:	405c      	eors	r4, r3
    1bae:	9b01      	ldr	r3, [sp, #4]
    1bb0:	4067      	eors	r7, r4
    1bb2:	407b      	eors	r3, r7
    1bb4:	001f      	movs	r7, r3
    1bb6:	9b02      	ldr	r3, [sp, #8]
    1bb8:	407b      	eors	r3, r7
    1bba:	001f      	movs	r7, r3
    1bbc:	9b03      	ldr	r3, [sp, #12]
    1bbe:	407b      	eors	r3, r7
    1bc0:	001f      	movs	r7, r3
    1bc2:	9b04      	ldr	r3, [sp, #16]
    1bc4:	407b      	eors	r3, r7
    1bc6:	001f      	movs	r7, r3
    1bc8:	9b05      	ldr	r3, [sp, #20]
    1bca:	407b      	eors	r3, r7
    1bcc:	405d      	eors	r5, r3
    1bce:	9b00      	ldr	r3, [sp, #0]
    1bd0:	4068      	eors	r0, r5
    1bd2:	7018      	strb	r0, [r3, #0]
	out[1] = mult9(in[0]) ^ multe(in[1]) ^ multb(in[2]) ^ multd(in[3]);
    1bd4:	7830      	ldrb	r0, [r6, #0]
    1bd6:	f7ff ff0d 	bl	19f4 <_double_byte>
    1bda:	f7ff ff0b 	bl	19f4 <_double_byte>
    1bde:	f7ff ff09 	bl	19f4 <_double_byte>
    1be2:	9002      	str	r0, [sp, #8]
    1be4:	7870      	ldrb	r0, [r6, #1]
    1be6:	7834      	ldrb	r4, [r6, #0]
    1be8:	f7ff ff04 	bl	19f4 <_double_byte>
    1bec:	f7ff ff02 	bl	19f4 <_double_byte>
    1bf0:	f7ff ff00 	bl	19f4 <_double_byte>
    1bf4:	0007      	movs	r7, r0
    1bf6:	7870      	ldrb	r0, [r6, #1]
    1bf8:	f7ff fefc 	bl	19f4 <_double_byte>
    1bfc:	f7ff fefa 	bl	19f4 <_double_byte>
    1c00:	9003      	str	r0, [sp, #12]
    1c02:	7870      	ldrb	r0, [r6, #1]
    1c04:	f7ff fef6 	bl	19f4 <_double_byte>
    1c08:	9004      	str	r0, [sp, #16]
    1c0a:	78b0      	ldrb	r0, [r6, #2]
    1c0c:	f7ff fef2 	bl	19f4 <_double_byte>
    1c10:	f7ff fef0 	bl	19f4 <_double_byte>
    1c14:	f7ff feee 	bl	19f4 <_double_byte>
    1c18:	9005      	str	r0, [sp, #20]
    1c1a:	78b0      	ldrb	r0, [r6, #2]
    1c1c:	f7ff feea 	bl	19f4 <_double_byte>
    1c20:	78b3      	ldrb	r3, [r6, #2]
    1c22:	0005      	movs	r5, r0
    1c24:	405c      	eors	r4, r3
    1c26:	78f0      	ldrb	r0, [r6, #3]
    1c28:	9401      	str	r4, [sp, #4]
    1c2a:	f7ff fee3 	bl	19f4 <_double_byte>
    1c2e:	f7ff fee1 	bl	19f4 <_double_byte>
    1c32:	f7ff fedf 	bl	19f4 <_double_byte>
    1c36:	0004      	movs	r4, r0
    1c38:	78f0      	ldrb	r0, [r6, #3]
    1c3a:	f7ff fedb 	bl	19f4 <_double_byte>
    1c3e:	f7ff fed9 	bl	19f4 <_double_byte>
    1c42:	78f3      	ldrb	r3, [r6, #3]
    1c44:	9a01      	ldr	r2, [sp, #4]
    1c46:	4053      	eors	r3, r2
    1c48:	9a02      	ldr	r2, [sp, #8]
    1c4a:	405a      	eors	r2, r3
    1c4c:	9b03      	ldr	r3, [sp, #12]
    1c4e:	4057      	eors	r7, r2
    1c50:	407b      	eors	r3, r7
    1c52:	001f      	movs	r7, r3
    1c54:	9b04      	ldr	r3, [sp, #16]
    1c56:	407b      	eors	r3, r7
    1c58:	001f      	movs	r7, r3
    1c5a:	9b05      	ldr	r3, [sp, #20]
    1c5c:	407b      	eors	r3, r7
    1c5e:	405d      	eors	r5, r3
    1c60:	406c      	eors	r4, r5
    1c62:	9b00      	ldr	r3, [sp, #0]
    1c64:	4060      	eors	r0, r4
    1c66:	7058      	strb	r0, [r3, #1]
	out[2] = multd(in[0]) ^ mult9(in[1]) ^ multe(in[2]) ^ multb(in[3]);
    1c68:	7830      	ldrb	r0, [r6, #0]
    1c6a:	f7ff fec3 	bl	19f4 <_double_byte>
    1c6e:	f7ff fec1 	bl	19f4 <_double_byte>
    1c72:	f7ff febf 	bl	19f4 <_double_byte>
    1c76:	9002      	str	r0, [sp, #8]
    1c78:	7830      	ldrb	r0, [r6, #0]
    1c7a:	f7ff febb 	bl	19f4 <_double_byte>
    1c7e:	f7ff feb9 	bl	19f4 <_double_byte>
    1c82:	0007      	movs	r7, r0
    1c84:	7870      	ldrb	r0, [r6, #1]
    1c86:	7834      	ldrb	r4, [r6, #0]
    1c88:	f7ff feb4 	bl	19f4 <_double_byte>
    1c8c:	f7ff feb2 	bl	19f4 <_double_byte>
    1c90:	f7ff feb0 	bl	19f4 <_double_byte>
    1c94:	7873      	ldrb	r3, [r6, #1]
    1c96:	9003      	str	r0, [sp, #12]
    1c98:	405c      	eors	r4, r3
    1c9a:	78b0      	ldrb	r0, [r6, #2]
    1c9c:	9401      	str	r4, [sp, #4]
    1c9e:	f7ff fea9 	bl	19f4 <_double_byte>
    1ca2:	f7ff fea7 	bl	19f4 <_double_byte>
    1ca6:	f7ff fea5 	bl	19f4 <_double_byte>
    1caa:	9004      	str	r0, [sp, #16]
    1cac:	78b0      	ldrb	r0, [r6, #2]
    1cae:	f7ff fea1 	bl	19f4 <_double_byte>
    1cb2:	f7ff fe9f 	bl	19f4 <_double_byte>
    1cb6:	9005      	str	r0, [sp, #20]
    1cb8:	78b0      	ldrb	r0, [r6, #2]
    1cba:	f7ff fe9b 	bl	19f4 <_double_byte>
    1cbe:	0005      	movs	r5, r0
    1cc0:	78f0      	ldrb	r0, [r6, #3]
    1cc2:	f7ff fe97 	bl	19f4 <_double_byte>
    1cc6:	f7ff fe95 	bl	19f4 <_double_byte>
    1cca:	f7ff fe93 	bl	19f4 <_double_byte>
    1cce:	0004      	movs	r4, r0
    1cd0:	78f0      	ldrb	r0, [r6, #3]
    1cd2:	f7ff fe8f 	bl	19f4 <_double_byte>
    1cd6:	78f3      	ldrb	r3, [r6, #3]
    1cd8:	9a01      	ldr	r2, [sp, #4]
    1cda:	4053      	eors	r3, r2
    1cdc:	9a02      	ldr	r2, [sp, #8]
    1cde:	405a      	eors	r2, r3
    1ce0:	9b03      	ldr	r3, [sp, #12]
    1ce2:	4057      	eors	r7, r2
    1ce4:	407b      	eors	r3, r7
    1ce6:	001f      	movs	r7, r3
    1ce8:	9b04      	ldr	r3, [sp, #16]
    1cea:	407b      	eors	r3, r7
    1cec:	001f      	movs	r7, r3
    1cee:	9b05      	ldr	r3, [sp, #20]
    1cf0:	407b      	eors	r3, r7
    1cf2:	405d      	eors	r5, r3
    1cf4:	406c      	eors	r4, r5
    1cf6:	9b00      	ldr	r3, [sp, #0]
    1cf8:	4060      	eors	r0, r4
    1cfa:	7098      	strb	r0, [r3, #2]
	out[3] = multb(in[0]) ^ multd(in[1]) ^ mult9(in[2]) ^ multe(in[3]);
    1cfc:	7830      	ldrb	r0, [r6, #0]
    1cfe:	f7ff fe79 	bl	19f4 <_double_byte>
    1d02:	f7ff fe77 	bl	19f4 <_double_byte>
    1d06:	f7ff fe75 	bl	19f4 <_double_byte>
    1d0a:	0007      	movs	r7, r0
    1d0c:	7830      	ldrb	r0, [r6, #0]
    1d0e:	f7ff fe71 	bl	19f4 <_double_byte>
    1d12:	7833      	ldrb	r3, [r6, #0]
    1d14:	9002      	str	r0, [sp, #8]
    1d16:	7870      	ldrb	r0, [r6, #1]
    1d18:	9301      	str	r3, [sp, #4]
    1d1a:	f7ff fe6b 	bl	19f4 <_double_byte>
    1d1e:	f7ff fe69 	bl	19f4 <_double_byte>
    1d22:	f7ff fe67 	bl	19f4 <_double_byte>
    1d26:	0005      	movs	r5, r0
    1d28:	7870      	ldrb	r0, [r6, #1]
    1d2a:	f7ff fe63 	bl	19f4 <_double_byte>
    1d2e:	f7ff fe61 	bl	19f4 <_double_byte>
    1d32:	7873      	ldrb	r3, [r6, #1]
    1d34:	9a01      	ldr	r2, [sp, #4]
    1d36:	0004      	movs	r4, r0
    1d38:	405a      	eors	r2, r3
    1d3a:	78b0      	ldrb	r0, [r6, #2]
    1d3c:	9201      	str	r2, [sp, #4]
    1d3e:	f7ff fe59 	bl	19f4 <_double_byte>
    1d42:	f7ff fe57 	bl	19f4 <_double_byte>
    1d46:	f7ff fe55 	bl	19f4 <_double_byte>
    1d4a:	9a01      	ldr	r2, [sp, #4]
    1d4c:	78b3      	ldrb	r3, [r6, #2]
    1d4e:	4053      	eors	r3, r2
    1d50:	405f      	eors	r7, r3
    1d52:	9b02      	ldr	r3, [sp, #8]
    1d54:	407b      	eors	r3, r7
    1d56:	405d      	eors	r5, r3
    1d58:	406c      	eors	r4, r5
    1d5a:	4044      	eors	r4, r0
    1d5c:	78f0      	ldrb	r0, [r6, #3]
    1d5e:	f7ff fe49 	bl	19f4 <_double_byte>
    1d62:	f7ff fe47 	bl	19f4 <_double_byte>
    1d66:	f7ff fe45 	bl	19f4 <_double_byte>
    1d6a:	0005      	movs	r5, r0
    1d6c:	78f0      	ldrb	r0, [r6, #3]
    1d6e:	f7ff fe41 	bl	19f4 <_double_byte>
    1d72:	f7ff fe3f 	bl	19f4 <_double_byte>
    1d76:	0007      	movs	r7, r0
    1d78:	78f0      	ldrb	r0, [r6, #3]
    1d7a:	f7ff fe3b 	bl	19f4 <_double_byte>
    1d7e:	b2e4      	uxtb	r4, r4
    1d80:	406c      	eors	r4, r5
    1d82:	4067      	eors	r7, r4
    1d84:	9b00      	ldr	r3, [sp, #0]
    1d86:	4078      	eors	r0, r7
    1d88:	70d8      	strb	r0, [r3, #3]
}
    1d8a:	b007      	add	sp, #28
    1d8c:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001d8e <mult_row_column>:
}

#define triple(a)(_double_byte(a)^(a))

static inline void mult_row_column(uint8_t *out, const uint8_t *in)
{
    1d8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1d90:	0006      	movs	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
    1d92:	7808      	ldrb	r0, [r1, #0]
}

#define triple(a)(_double_byte(a)^(a))

static inline void mult_row_column(uint8_t *out, const uint8_t *in)
{
    1d94:	000c      	movs	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
    1d96:	f7ff fe2d 	bl	19f4 <_double_byte>
    1d9a:	0005      	movs	r5, r0
    1d9c:	7860      	ldrb	r0, [r4, #1]
    1d9e:	f7ff fe29 	bl	19f4 <_double_byte>
    1da2:	7862      	ldrb	r2, [r4, #1]
    1da4:	78a3      	ldrb	r3, [r4, #2]
    1da6:	4053      	eors	r3, r2
    1da8:	78e2      	ldrb	r2, [r4, #3]
    1daa:	4053      	eors	r3, r2
    1dac:	406b      	eors	r3, r5
    1dae:	4058      	eors	r0, r3
    1db0:	7030      	strb	r0, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
    1db2:	7860      	ldrb	r0, [r4, #1]
    1db4:	7827      	ldrb	r7, [r4, #0]
    1db6:	f7ff fe1d 	bl	19f4 <_double_byte>
    1dba:	0005      	movs	r5, r0
    1dbc:	78a0      	ldrb	r0, [r4, #2]
    1dbe:	f7ff fe19 	bl	19f4 <_double_byte>
    1dc2:	78a3      	ldrb	r3, [r4, #2]
    1dc4:	78e2      	ldrb	r2, [r4, #3]
    1dc6:	407b      	eors	r3, r7
    1dc8:	4053      	eors	r3, r2
    1dca:	406b      	eors	r3, r5
    1dcc:	4058      	eors	r0, r3
    1dce:	7070      	strb	r0, [r6, #1]
    1dd0:	7863      	ldrb	r3, [r4, #1]
    1dd2:	7827      	ldrb	r7, [r4, #0]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
    1dd4:	78a0      	ldrb	r0, [r4, #2]
    1dd6:	405f      	eors	r7, r3
    1dd8:	f7ff fe0c 	bl	19f4 <_double_byte>
    1ddc:	0005      	movs	r5, r0
    1dde:	78e0      	ldrb	r0, [r4, #3]
    1de0:	f7ff fe08 	bl	19f4 <_double_byte>
    1de4:	78e3      	ldrb	r3, [r4, #3]
    1de6:	407b      	eors	r3, r7
    1de8:	406b      	eors	r3, r5
    1dea:	4058      	eors	r0, r3
    1dec:	70b0      	strb	r0, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
    1dee:	7820      	ldrb	r0, [r4, #0]
    1df0:	f7ff fe00 	bl	19f4 <_double_byte>
    1df4:	7863      	ldrb	r3, [r4, #1]
    1df6:	7825      	ldrb	r5, [r4, #0]
    1df8:	405d      	eors	r5, r3
    1dfa:	78a3      	ldrb	r3, [r4, #2]
    1dfc:	405d      	eors	r5, r3
    1dfe:	4068      	eors	r0, r5
    1e00:	b2c5      	uxtb	r5, r0
    1e02:	78e0      	ldrb	r0, [r4, #3]
    1e04:	f7ff fdf6 	bl	19f4 <_double_byte>
    1e08:	4045      	eors	r5, r0
    1e0a:	70f5      	strb	r5, [r6, #3]
}
    1e0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00001e0e <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
    1e0e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb*Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
    1e10:	466a      	mov	r2, sp
    1e12:	7803      	ldrb	r3, [r0, #0]
    1e14:	7013      	strb	r3, [r2, #0]
    1e16:	7943      	ldrb	r3, [r0, #5]
    1e18:	7053      	strb	r3, [r2, #1]
    1e1a:	7a83      	ldrb	r3, [r0, #10]
    1e1c:	7093      	strb	r3, [r2, #2]
    1e1e:	7bc3      	ldrb	r3, [r0, #15]
    1e20:	70d3      	strb	r3, [r2, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
    1e22:	7903      	ldrb	r3, [r0, #4]
    1e24:	7113      	strb	r3, [r2, #4]
    1e26:	7a43      	ldrb	r3, [r0, #9]
    1e28:	7153      	strb	r3, [r2, #5]
    1e2a:	7b83      	ldrb	r3, [r0, #14]
    1e2c:	7193      	strb	r3, [r2, #6]
    1e2e:	78c3      	ldrb	r3, [r0, #3]
    1e30:	71d3      	strb	r3, [r2, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
    1e32:	7a03      	ldrb	r3, [r0, #8]
    1e34:	7213      	strb	r3, [r2, #8]
    1e36:	7b43      	ldrb	r3, [r0, #13]
    1e38:	7253      	strb	r3, [r2, #9]
    1e3a:	7883      	ldrb	r3, [r0, #2]
    1e3c:	7293      	strb	r3, [r2, #10]
    1e3e:	79c3      	ldrb	r3, [r0, #7]
    1e40:	72d3      	strb	r3, [r2, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
    1e42:	7b03      	ldrb	r3, [r0, #12]
    1e44:	7313      	strb	r3, [r2, #12]
    1e46:	7843      	ldrb	r3, [r0, #1]
    1e48:	7353      	strb	r3, [r2, #13]
    1e4a:	7983      	ldrb	r3, [r0, #6]
    1e4c:	7393      	strb	r3, [r2, #14]
    1e4e:	7ac3      	ldrb	r3, [r0, #11]
    1e50:	73d3      	strb	r3, [r2, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
    1e52:	2310      	movs	r3, #16
    1e54:	0019      	movs	r1, r3
    1e56:	f7ff fdbc 	bl	19d2 <_copy>
}
    1e5a:	b005      	add	sp, #20
    1e5c:	bd00      	pop	{pc}
	...

00001e60 <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int32_t tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
    1e60:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e62:	b08d      	sub	sp, #52	; 0x34
	const uint32_t rconst[11] = {
    1e64:	ac01      	add	r4, sp, #4
    1e66:	0022      	movs	r2, r4
    1e68:	4b24      	ldr	r3, [pc, #144]	; (1efc <tc_aes128_set_encrypt_key+0x9c>)
    1e6a:	cbe0      	ldmia	r3!, {r5, r6, r7}
    1e6c:	c2e0      	stmia	r2!, {r5, r6, r7}
    1e6e:	cbe0      	ldmia	r3!, {r5, r6, r7}
    1e70:	c2e0      	stmia	r2!, {r5, r6, r7}
    1e72:	cbe0      	ldmia	r3!, {r5, r6, r7}
    1e74:	c2e0      	stmia	r2!, {r5, r6, r7}
    1e76:	cb60      	ldmia	r3!, {r5, r6}
    1e78:	c260      	stmia	r2!, {r5, r6}
	};
	uint32_t i;
	uint32_t t;

	if (s == (TCAesKeySched_t) 0) {
		return TC_CRYPTO_FAIL;
    1e7a:	1e03      	subs	r3, r0, #0
	0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	uint32_t i;
	uint32_t t;

	if (s == (TCAesKeySched_t) 0) {
    1e7c:	d03a      	beq.n	1ef4 <tc_aes128_set_encrypt_key+0x94>
		return TC_CRYPTO_FAIL;
    1e7e:	1e0b      	subs	r3, r1, #0
	} else if (k == (const uint8_t *) 0) {
    1e80:	d038      	beq.n	1ef4 <tc_aes128_set_encrypt_key+0x94>
    1e82:	000e      	movs	r6, r1
    1e84:	0005      	movs	r5, r0
    1e86:	3610      	adds	r6, #16
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    1e88:	780b      	ldrb	r3, [r1, #0]
    1e8a:	061a      	lsls	r2, r3, #24
    1e8c:	784b      	ldrb	r3, [r1, #1]
    1e8e:	041b      	lsls	r3, r3, #16
    1e90:	4313      	orrs	r3, r2
    1e92:	78ca      	ldrb	r2, [r1, #3]
    1e94:	4313      	orrs	r3, r2
    1e96:	788a      	ldrb	r2, [r1, #2]
    1e98:	3104      	adds	r1, #4
    1e9a:	0212      	lsls	r2, r2, #8
    1e9c:	4313      	orrs	r3, r2
    1e9e:	c508      	stmia	r5!, {r3}
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
    1ea0:	428e      	cmp	r6, r1
    1ea2:	d1f1      	bne.n	1e88 <tc_aes128_set_encrypt_key+0x28>
	0xb0, 0x54, 0xbb, 0x16
};

static inline uint32_t rotword(uint32_t a)
{
	return (((a) >> 24)|((a) << 8));
    1ea4:	2318      	movs	r3, #24
    1ea6:	2204      	movs	r2, #4
    1ea8:	469c      	mov	ip, r3
	}

	for (; i < (Nb*(Nr+1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
    1eaa:	26ff      	movs	r6, #255	; 0xff
    1eac:	4d14      	ldr	r5, [pc, #80]	; (1f00 <tc_aes128_set_encrypt_key+0xa0>)
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
	}

	for (; i < (Nb*(Nr+1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
    1eae:	2103      	movs	r1, #3
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
	}

	for (; i < (Nb*(Nr+1)); ++i) {
		t = s->words[i-1];
    1eb0:	68c3      	ldr	r3, [r0, #12]
		if ((i % Nk) == 0) {
    1eb2:	420a      	tst	r2, r1
    1eb4:	d116      	bne.n	1ee4 <tc_aes128_set_encrypt_key+0x84>
	0xb0, 0x54, 0xbb, 0x16
};

static inline uint32_t rotword(uint32_t a)
{
	return (((a) >> 24)|((a) << 8));
    1eb6:	4661      	mov	r1, ip
    1eb8:	41cb      	rors	r3, r1
	}

	for (; i < (Nb*(Nr+1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
    1eba:	0e19      	lsrs	r1, r3, #24
    1ebc:	5c6f      	ldrb	r7, [r5, r1]
    1ebe:	0019      	movs	r1, r3
    1ec0:	4031      	ands	r1, r6
    1ec2:	5c69      	ldrb	r1, [r5, r1]
    1ec4:	063f      	lsls	r7, r7, #24
    1ec6:	430f      	orrs	r7, r1
    1ec8:	0c19      	lsrs	r1, r3, #16
    1eca:	4031      	ands	r1, r6
    1ecc:	0a1b      	lsrs	r3, r3, #8
    1ece:	5c69      	ldrb	r1, [r5, r1]
    1ed0:	4033      	ands	r3, r6
    1ed2:	5ceb      	ldrb	r3, [r5, r3]
    1ed4:	0409      	lsls	r1, r1, #16
    1ed6:	021b      	lsls	r3, r3, #8
    1ed8:	4339      	orrs	r1, r7
    1eda:	4319      	orrs	r1, r3
    1edc:	0893      	lsrs	r3, r2, #2
    1ede:	009b      	lsls	r3, r3, #2
    1ee0:	58e3      	ldr	r3, [r4, r3]
    1ee2:	404b      	eors	r3, r1
		}
		s->words[i] = s->words[i-Nk] ^ t;
    1ee4:	6801      	ldr	r1, [r0, #0]
	for (i = 0; i < Nk; ++i) {
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
	}

	for (; i < (Nb*(Nr+1)); ++i) {
    1ee6:	3201      	adds	r2, #1
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
		}
		s->words[i] = s->words[i-Nk] ^ t;
    1ee8:	404b      	eors	r3, r1
    1eea:	6103      	str	r3, [r0, #16]
    1eec:	3004      	adds	r0, #4
	for (i = 0; i < Nk; ++i) {
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
	}

	for (; i < (Nb*(Nr+1)); ++i) {
    1eee:	2a2c      	cmp	r2, #44	; 0x2c
    1ef0:	d1dd      	bne.n	1eae <tc_aes128_set_encrypt_key+0x4e>
			t = subword(rotword(t)) ^ rconst[i/Nk];
		}
		s->words[i] = s->words[i-Nk] ^ t;
	}

	return TC_CRYPTO_SUCCESS;
    1ef2:	2301      	movs	r3, #1
}
    1ef4:	0018      	movs	r0, r3
    1ef6:	b00d      	add	sp, #52	; 0x34
    1ef8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1efa:	46c0      	nop			; (mov r8, r8)
    1efc:	00015040 	.word	0x00015040
    1f00:	00015330 	.word	0x00015330

00001f04 <tc_aes_encrypt>:
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
	(void) _copy(s, sizeof(t), t, sizeof(t));
}

int32_t tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
    1f04:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f06:	0007      	movs	r7, r0
    1f08:	b08b      	sub	sp, #44	; 0x2c
    1f0a:	0014      	movs	r4, r2
	uint8_t state[Nk*Nb];
	uint32_t i;

	if (out == (uint8_t *) 0) {
    1f0c:	2800      	cmp	r0, #0
    1f0e:	d05b      	beq.n	1fc8 <tc_aes_encrypt+0xc4>
		return TC_CRYPTO_FAIL;
    1f10:	1e08      	subs	r0, r1, #0
	} else if (in == (const uint8_t *) 0) {
    1f12:	d059      	beq.n	1fc8 <tc_aes_encrypt+0xc4>
{
	uint8_t state[Nk*Nb];
	uint32_t i;

	if (out == (uint8_t *) 0) {
		return TC_CRYPTO_FAIL;
    1f14:	1e10      	subs	r0, r2, #0
	} else if (in == (const uint8_t *) 0) {
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
    1f16:	d057      	beq.n	1fc8 <tc_aes_encrypt+0xc4>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
    1f18:	2310      	movs	r3, #16
    1f1a:	000a      	movs	r2, r1
    1f1c:	a802      	add	r0, sp, #8
    1f1e:	0019      	movs	r1, r3
    1f20:	f7ff fd57 	bl	19d2 <_copy>
	add_round_key(state, s->words);
    1f24:	0021      	movs	r1, r4
    1f26:	a802      	add	r0, sp, #8
    1f28:	f7ff fdb8 	bl	1a9c <add_round_key>
    1f2c:	0023      	movs	r3, r4
    1f2e:	0026      	movs	r6, r4
    1f30:	33a0      	adds	r3, #160	; 0xa0
    1f32:	3610      	adds	r6, #16
    1f34:	9301      	str	r3, [sp, #4]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
	(void) _copy(s, sizeof(t), t, sizeof(t));
}

int32_t tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
    1f36:	2500      	movs	r5, #0
static inline void sub_bytes(uint8_t *s)
{
	uint32_t i;

	for (i = 0; i < (Nb*Nk); ++i) {
		s[i] = sbox[s[i]];
    1f38:	4b24      	ldr	r3, [pc, #144]	; (1fcc <tc_aes_encrypt+0xc8>)
    1f3a:	aa02      	add	r2, sp, #8
    1f3c:	5caa      	ldrb	r2, [r5, r2]
    1f3e:	a902      	add	r1, sp, #8
    1f40:	5c9a      	ldrb	r2, [r3, r2]
    1f42:	546a      	strb	r2, [r5, r1]

static inline void sub_bytes(uint8_t *s)
{
	uint32_t i;

	for (i = 0; i < (Nb*Nk); ++i) {
    1f44:	3501      	adds	r5, #1
    1f46:	2d10      	cmp	r5, #16
    1f48:	d1f7      	bne.n	1f3a <tc_aes_encrypt+0x36>
	(void)_copy(state, sizeof(state), in, sizeof(state));
	add_round_key(state, s->words);

	for (i = 0; i < (Nr-1); ++i) {
		sub_bytes(state);
		shift_rows(state);
    1f4a:	0008      	movs	r0, r1
    1f4c:	f7ff ff5f 	bl	1e0e <shift_rows>

static inline void mix_columns(uint8_t *s)
{
	uint8_t t[Nb*Nk];

	mult_row_column(t, s);
    1f50:	a902      	add	r1, sp, #8
    1f52:	a806      	add	r0, sp, #24
    1f54:	f7ff ff1b 	bl	1d8e <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
    1f58:	a903      	add	r1, sp, #12
    1f5a:	a807      	add	r0, sp, #28
    1f5c:	f7ff ff17 	bl	1d8e <mult_row_column>
	mult_row_column(&t[2*Nb], s+(2*Nb));
    1f60:	a904      	add	r1, sp, #16
    1f62:	a808      	add	r0, sp, #32
    1f64:	f7ff ff13 	bl	1d8e <mult_row_column>
	mult_row_column(&t[3*Nb], s+(3*Nb));
    1f68:	a905      	add	r1, sp, #20
    1f6a:	a809      	add	r0, sp, #36	; 0x24
    1f6c:	f7ff ff0f 	bl	1d8e <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
    1f70:	002b      	movs	r3, r5
    1f72:	aa06      	add	r2, sp, #24
    1f74:	0029      	movs	r1, r5
    1f76:	a802      	add	r0, sp, #8
    1f78:	f7ff fd2b 	bl	19d2 <_copy>

	for (i = 0; i < (Nr-1); ++i) {
		sub_bytes(state);
		shift_rows(state);
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
    1f7c:	0031      	movs	r1, r6
    1f7e:	a802      	add	r0, sp, #8
    1f80:	f7ff fd8c 	bl	1a9c <add_round_key>
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
	add_round_key(state, s->words);

	for (i = 0; i < (Nr-1); ++i) {
    1f84:	9b01      	ldr	r3, [sp, #4]
    1f86:	3610      	adds	r6, #16
    1f88:	42b3      	cmp	r3, r6
    1f8a:	d1d4      	bne.n	1f36 <tc_aes_encrypt+0x32>
    1f8c:	2500      	movs	r5, #0
static inline void sub_bytes(uint8_t *s)
{
	uint32_t i;

	for (i = 0; i < (Nb*Nk); ++i) {
		s[i] = sbox[s[i]];
    1f8e:	4a0f      	ldr	r2, [pc, #60]	; (1fcc <tc_aes_encrypt+0xc8>)
    1f90:	ab02      	add	r3, sp, #8
    1f92:	5ceb      	ldrb	r3, [r5, r3]
    1f94:	a902      	add	r1, sp, #8
    1f96:	5cd3      	ldrb	r3, [r2, r3]
    1f98:	546b      	strb	r3, [r5, r1]

static inline void sub_bytes(uint8_t *s)
{
	uint32_t i;

	for (i = 0; i < (Nb*Nk); ++i) {
    1f9a:	3501      	adds	r5, #1
    1f9c:	2d10      	cmp	r5, #16
    1f9e:	d1f7      	bne.n	1f90 <tc_aes_encrypt+0x8c>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
	}

	sub_bytes(state);
	shift_rows(state);
    1fa0:	0008      	movs	r0, r1
    1fa2:	f7ff ff34 	bl	1e0e <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
    1fa6:	0021      	movs	r1, r4
    1fa8:	a802      	add	r0, sp, #8
    1faa:	31a0      	adds	r1, #160	; 0xa0
    1fac:	f7ff fd76 	bl	1a9c <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
    1fb0:	002b      	movs	r3, r5
    1fb2:	aa02      	add	r2, sp, #8
    1fb4:	0029      	movs	r1, r5
    1fb6:	0038      	movs	r0, r7
    1fb8:	f7ff fd0b 	bl	19d2 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
    1fbc:	a802      	add	r0, sp, #8
    1fbe:	002a      	movs	r2, r5
    1fc0:	2100      	movs	r1, #0
    1fc2:	f7ff fd13 	bl	19ec <_set>

	return TC_CRYPTO_SUCCESS;
    1fc6:	2001      	movs	r0, #1
}
    1fc8:	b00b      	add	sp, #44	; 0x2c
    1fca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1fcc:	00015330 	.word	0x00015330

00001fd0 <gf_double>:

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
    1fd0:	780a      	ldrb	r2, [r1, #0]
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
    1fd2:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
    1fd4:	2387      	movs	r3, #135	; 0x87
    1fd6:	2a7f      	cmp	r2, #127	; 0x7f
    1fd8:	d800      	bhi.n	1fdc <gf_double+0xc>
    1fda:	2300      	movs	r3, #0
    1fdc:	220f      	movs	r2, #15

	out += (TC_AES_BLOCK_SIZE - 1);
	for (;;) {
		*out-- = (*x << 1) ^ carry;
    1fde:	5c8c      	ldrb	r4, [r1, r2]
    1fe0:	0064      	lsls	r4, r4, #1
    1fe2:	4063      	eors	r3, r4
    1fe4:	5483      	strb	r3, [r0, r2]
		if (x == in) {
    1fe6:	2a00      	cmp	r2, #0
    1fe8:	d003      	beq.n	1ff2 <gf_double+0x22>
			break;
		}
		carry = *x-- >> 7;
    1fea:	5c8b      	ldrb	r3, [r1, r2]
    1fec:	3a01      	subs	r2, #1
    1fee:	09db      	lsrs	r3, r3, #7
	}
    1ff0:	e7f5      	b.n	1fde <gf_double+0xe>
}
    1ff2:	bd10      	pop	{r4, pc}

00001ff4 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int32_t tc_cmac_erase(TCCmacState_t s)
{
    1ff4:	b510      	push	{r4, lr}
	if (s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
    1ff6:	1e03      	subs	r3, r0, #0
	return TC_CRYPTO_SUCCESS;
}

int32_t tc_cmac_erase(TCCmacState_t s)
{
	if (s == (TCCmacState_t) 0) {
    1ff8:	d004      	beq.n	2004 <tc_cmac_erase+0x10>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
    1ffa:	2258      	movs	r2, #88	; 0x58
    1ffc:	2100      	movs	r1, #0
    1ffe:	f7ff fcf5 	bl	19ec <_set>

	return TC_CRYPTO_SUCCESS;
    2002:	2301      	movs	r3, #1
}
    2004:	0018      	movs	r0, r3
    2006:	bd10      	pop	{r4, pc}

00002008 <tc_cmac_init>:

int32_t tc_cmac_init(TCCmacState_t s)
{
    2008:	b510      	push	{r4, lr}
    200a:	1e04      	subs	r4, r0, #0
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
    200c:	d011      	beq.n	2032 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
    200e:	2210      	movs	r2, #16
    2010:	2100      	movs	r1, #0
    2012:	f7ff fceb 	bl	19ec <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
    2016:	0020      	movs	r0, r4
    2018:	2210      	movs	r2, #16
    201a:	3030      	adds	r0, #48	; 0x30
    201c:	2100      	movs	r1, #0
    201e:	f7ff fce5 	bl	19ec <_set>
	s->leftover_offset = 0;
    2022:	2300      	movs	r3, #0
    2024:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
    2026:	2380      	movs	r3, #128	; 0x80
    2028:	2200      	movs	r2, #0

	return TC_CRYPTO_SUCCESS;
    202a:	2001      	movs	r0, #1
	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
	s->leftover_offset = 0;

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
    202c:	025b      	lsls	r3, r3, #9
    202e:	6522      	str	r2, [r4, #80]	; 0x50
    2030:	6563      	str	r3, [r4, #84]	; 0x54

	return TC_CRYPTO_SUCCESS;
}
    2032:	bd10      	pop	{r4, pc}

00002034 <tc_cmac_setup>:
		carry = *x-- >> 7;
	}
}

int32_t tc_cmac_setup(TCCmacState_t s, const uint8_t *key, TCAesKeySched_t sched)
{
    2034:	b570      	push	{r4, r5, r6, lr}
    2036:	0004      	movs	r4, r0
    2038:	000d      	movs	r5, r1
    203a:	0016      	movs	r6, r2

	/* input sanity check: */
	if (s == (TCCmacState_t) 0 ||
    203c:	2800      	cmp	r0, #0
    203e:	d024      	beq.n	208a <tc_cmac_setup+0x56>
	    key == (const uint8_t *) 0) {
		return TC_CRYPTO_FAIL;
    2040:	1e08      	subs	r0, r1, #0

int32_t tc_cmac_setup(TCCmacState_t s, const uint8_t *key, TCAesKeySched_t sched)
{

	/* input sanity check: */
	if (s == (TCCmacState_t) 0 ||
    2042:	d022      	beq.n	208a <tc_cmac_setup+0x56>
	    key == (const uint8_t *) 0) {
		return TC_CRYPTO_FAIL;
	}

	/* put s into a known state */
	_set(s, 0, sizeof(*s));
    2044:	2258      	movs	r2, #88	; 0x58
    2046:	2100      	movs	r1, #0
    2048:	0020      	movs	r0, r4
    204a:	f7ff fccf 	bl	19ec <_set>
	s->sched = sched;

	/* configure the encryption key used by the underlying block cipher */
	tc_aes128_set_encrypt_key(s->sched, key);
    204e:	0029      	movs	r1, r5

	/* compute s->K1 and s->K2 from s->iv using s->keyid */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
	tc_aes_encrypt(s->iv, s->iv, s->sched);
	gf_double (s->K1, s->iv);
    2050:	0025      	movs	r5, r4
		return TC_CRYPTO_FAIL;
	}

	/* put s into a known state */
	_set(s, 0, sizeof(*s));
	s->sched = sched;
    2052:	64a6      	str	r6, [r4, #72]	; 0x48

	/* configure the encryption key used by the underlying block cipher */
	tc_aes128_set_encrypt_key(s->sched, key);
    2054:	0030      	movs	r0, r6
    2056:	f7ff ff03 	bl	1e60 <tc_aes128_set_encrypt_key>

	/* compute s->K1 and s->K2 from s->iv using s->keyid */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
    205a:	2210      	movs	r2, #16
    205c:	2100      	movs	r1, #0
    205e:	0020      	movs	r0, r4
    2060:	f7ff fcc4 	bl	19ec <_set>
	tc_aes_encrypt(s->iv, s->iv, s->sched);
	gf_double (s->K1, s->iv);
    2064:	3510      	adds	r5, #16
	/* configure the encryption key used by the underlying block cipher */
	tc_aes128_set_encrypt_key(s->sched, key);

	/* compute s->K1 and s->K2 from s->iv using s->keyid */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
	tc_aes_encrypt(s->iv, s->iv, s->sched);
    2066:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    2068:	0021      	movs	r1, r4
    206a:	0020      	movs	r0, r4
    206c:	f7ff ff4a 	bl	1f04 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
    2070:	0021      	movs	r1, r4
    2072:	0028      	movs	r0, r5
    2074:	f7ff ffac 	bl	1fd0 <gf_double>
	gf_double (s->K2, s->K1);
    2078:	0020      	movs	r0, r4
    207a:	0029      	movs	r1, r5
    207c:	3020      	adds	r0, #32
    207e:	f7ff ffa7 	bl	1fd0 <gf_double>

	/* reset s->iv to 0 in case someone wants to compute now */
	tc_cmac_init(s);
    2082:	0020      	movs	r0, r4
    2084:	f7ff ffc0 	bl	2008 <tc_cmac_init>

	return TC_CRYPTO_SUCCESS;
    2088:	2001      	movs	r0, #1
}
    208a:	bd70      	pop	{r4, r5, r6, pc}

0000208c <tc_cmac_update>:

	return TC_CRYPTO_SUCCESS;
}

int32_t tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
    208c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    208e:	0004      	movs	r4, r0
    2090:	000e      	movs	r6, r1
    2092:	0015      	movs	r5, r2
	uint32_t i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
    2094:	1e07      	subs	r7, r0, #0
int32_t tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
	uint32_t i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
    2096:	d05d      	beq.n	2154 <tc_cmac_update+0xc8>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
    2098:	2a00      	cmp	r2, #0
    209a:	d05a      	beq.n	2152 <tc_cmac_update+0xc6>
{
	uint32_t i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
    209c:	1e0f      	subs	r7, r1, #0
	}
	if (data_length == 0) {
		return  TC_CRYPTO_SUCCESS;
	}
	if (data == (const uint8_t *) 0) {
    209e:	d059      	beq.n	2154 <tc_cmac_update+0xc8>
		return TC_CRYPTO_FAIL;
	}

	if (s->countdown == 0) {
    20a0:	6d41      	ldr	r1, [r0, #84]	; 0x54
    20a2:	6d00      	ldr	r0, [r0, #80]	; 0x50
{
	uint32_t i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
    20a4:	2700      	movs	r7, #0
	}
	if (data == (const uint8_t *) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->countdown == 0) {
    20a6:	0003      	movs	r3, r0
    20a8:	430b      	orrs	r3, r1
    20aa:	42bb      	cmp	r3, r7
    20ac:	d052      	beq.n	2154 <tc_cmac_update+0xc8>
		return TC_CRYPTO_FAIL;
	}

	s->countdown--;
    20ae:	2201      	movs	r2, #1
    20b0:	4252      	negs	r2, r2
    20b2:	17d3      	asrs	r3, r2, #31
    20b4:	1812      	adds	r2, r2, r0
    20b6:	414b      	adcs	r3, r1

	if (s->leftover_offset > 0) {
    20b8:	6c60      	ldr	r0, [r4, #68]	; 0x44

	if (s->countdown == 0) {
		return TC_CRYPTO_FAIL;
	}

	s->countdown--;
    20ba:	6522      	str	r2, [r4, #80]	; 0x50
    20bc:	6563      	str	r3, [r4, #84]	; 0x54

	if (s->leftover_offset > 0) {
    20be:	42b8      	cmp	r0, r7
    20c0:	d02a      	beq.n	2118 <tc_cmac_update+0x8c>
		/* last data added to s didn't end on a TC_AES_BLOCK_SIZE byte boundary */
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
    20c2:	2310      	movs	r3, #16
    20c4:	1a1b      	subs	r3, r3, r0
    20c6:	3030      	adds	r0, #48	; 0x30
    20c8:	9301      	str	r3, [sp, #4]

		if (data_length < remaining_space) {
			/* still not enough data to encrypt this time either */
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
    20ca:	1820      	adds	r0, r4, r0

	if (s->leftover_offset > 0) {
		/* last data added to s didn't end on a TC_AES_BLOCK_SIZE byte boundary */
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;

		if (data_length < remaining_space) {
    20cc:	429d      	cmp	r5, r3
    20ce:	d209      	bcs.n	20e4 <tc_cmac_update+0x58>
			/* still not enough data to encrypt this time either */
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
    20d0:	002b      	movs	r3, r5
    20d2:	0029      	movs	r1, r5
    20d4:	0032      	movs	r2, r6
    20d6:	f7ff fc7c 	bl	19d2 <_copy>
			s->leftover_offset += data_length;
    20da:	6c63      	ldr	r3, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
    20dc:	3701      	adds	r7, #1
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;

		if (data_length < remaining_space) {
			/* still not enough data to encrypt this time either */
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
			s->leftover_offset += data_length;
    20de:	195d      	adds	r5, r3, r5
    20e0:	6465      	str	r5, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
    20e2:	e037      	b.n	2154 <tc_cmac_update+0xc8>
		}
		/* leftover block is now full; encrypt it first */
		_copy(&s->leftover[s->leftover_offset],
    20e4:	9b01      	ldr	r3, [sp, #4]
    20e6:	0032      	movs	r2, r6
    20e8:	0019      	movs	r1, r3
    20ea:	f7ff fc72 	bl	19d2 <_copy>
		      remaining_space,
		      data,
		      remaining_space);
		data_length -= remaining_space;
    20ee:	9b01      	ldr	r3, [sp, #4]
    20f0:	0021      	movs	r1, r4
    20f2:	1aed      	subs	r5, r5, r3
		data += remaining_space;
    20f4:	18f6      	adds	r6, r6, r3
    20f6:	0023      	movs	r3, r4
		s->leftover_offset = 0;
    20f8:	6467      	str	r7, [r4, #68]	; 0x44
    20fa:	3110      	adds	r1, #16

		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
			s->iv[i] ^= s->leftover[i];
    20fc:	001a      	movs	r2, r3
    20fe:	3230      	adds	r2, #48	; 0x30
    2100:	7810      	ldrb	r0, [r2, #0]
    2102:	781a      	ldrb	r2, [r3, #0]
    2104:	4042      	eors	r2, r0
    2106:	701a      	strb	r2, [r3, #0]
    2108:	3301      	adds	r3, #1
		      remaining_space);
		data_length -= remaining_space;
		data += remaining_space;
		s->leftover_offset = 0;

		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    210a:	428b      	cmp	r3, r1
    210c:	d1f6      	bne.n	20fc <tc_cmac_update+0x70>
			s->iv[i] ^= s->leftover[i];
		}
		tc_aes_encrypt(s->iv, s->iv, s->sched);
    210e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    2110:	0021      	movs	r1, r4
    2112:	0020      	movs	r0, r4
    2114:	f7ff fef6 	bl	1f04 <tc_aes_encrypt>
    2118:	002f      	movs	r7, r5
    211a:	1bea      	subs	r2, r5, r7
    211c:	18b2      	adds	r2, r6, r2
	}

	/* CBC encrypt each (except the last) of the data blocks */
	while (data_length > TC_AES_BLOCK_SIZE) {
    211e:	2f10      	cmp	r7, #16
    2120:	d90e      	bls.n	2140 <tc_cmac_update+0xb4>
    2122:	2300      	movs	r3, #0
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
			s->iv[i] ^= data[i];
    2124:	5ce0      	ldrb	r0, [r4, r3]
    2126:	5cd1      	ldrb	r1, [r2, r3]
    2128:	4041      	eors	r1, r0
    212a:	54e1      	strb	r1, [r4, r3]
		tc_aes_encrypt(s->iv, s->iv, s->sched);
	}

	/* CBC encrypt each (except the last) of the data blocks */
	while (data_length > TC_AES_BLOCK_SIZE) {
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    212c:	3301      	adds	r3, #1
    212e:	2b10      	cmp	r3, #16
    2130:	d1f8      	bne.n	2124 <tc_cmac_update+0x98>
			s->iv[i] ^= data[i];
		}
		tc_aes_encrypt(s->iv, s->iv, s->sched);
    2132:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    2134:	0021      	movs	r1, r4
    2136:	0020      	movs	r0, r4
    2138:	f7ff fee4 	bl	1f04 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
		data_length  -= TC_AES_BLOCK_SIZE;
    213c:	3f10      	subs	r7, #16
    213e:	e7ec      	b.n	211a <tc_cmac_update+0x8e>
	}

	if (data_length > 0) {
    2140:	2f00      	cmp	r7, #0
    2142:	d006      	beq.n	2152 <tc_cmac_update+0xc6>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
    2144:	0020      	movs	r0, r4
    2146:	003b      	movs	r3, r7
    2148:	3030      	adds	r0, #48	; 0x30
    214a:	0039      	movs	r1, r7
    214c:	f7ff fc41 	bl	19d2 <_copy>
		s->leftover_offset = data_length;
    2150:	6467      	str	r7, [r4, #68]	; 0x44
	}

	return TC_CRYPTO_SUCCESS;
    2152:	2701      	movs	r7, #1
}
    2154:	0038      	movs	r0, r7
    2156:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00002158 <tc_cmac_final>:

int32_t tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
    2158:	b570      	push	{r4, r5, r6, lr}
    215a:	0005      	movs	r5, r0
    215c:	000c      	movs	r4, r1
	uint8_t *k;
	uint32_t i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
    215e:	2800      	cmp	r0, #0
    2160:	d028      	beq.n	21b4 <tc_cmac_final+0x5c>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
    2162:	1e08      	subs	r0, r1, #0
{
	uint8_t *k;
	uint32_t i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
    2164:	d026      	beq.n	21b4 <tc_cmac_final+0x5c>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
    2166:	6c48      	ldr	r0, [r1, #68]	; 0x44
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
    2168:	3110      	adds	r1, #16
	if (tag == (uint8_t *) 0 ||
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
    216a:	2810      	cmp	r0, #16
    216c:	d00d      	beq.n	218a <tc_cmac_final+0x32>
		k = (uint8_t *) s->K1;
	} else {
		/* the final message block is not a full-sized  block */
		size_t remaining = TC_AES_BLOCK_SIZE - s->leftover_offset;

		_set(&s->leftover[s->leftover_offset], 0, remaining);
    216e:	2210      	movs	r2, #16
    2170:	1a12      	subs	r2, r2, r0
    2172:	3030      	adds	r0, #48	; 0x30
    2174:	2100      	movs	r1, #0
    2176:	1820      	adds	r0, r4, r0
    2178:	f7ff fc38 	bl	19ec <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
    217c:	2280      	movs	r2, #128	; 0x80
		k = (uint8_t *) s->K2;
    217e:	0021      	movs	r1, r4
	} else {
		/* the final message block is not a full-sized  block */
		size_t remaining = TC_AES_BLOCK_SIZE - s->leftover_offset;

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
    2180:	6c63      	ldr	r3, [r4, #68]	; 0x44
		k = (uint8_t *) s->K2;
    2182:	3120      	adds	r1, #32
	} else {
		/* the final message block is not a full-sized  block */
		size_t remaining = TC_AES_BLOCK_SIZE - s->leftover_offset;

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
    2184:	18e3      	adds	r3, r4, r3
    2186:	3330      	adds	r3, #48	; 0x30
    2188:	701a      	strb	r2, [r3, #0]
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    218a:	2300      	movs	r3, #0
		s->iv[i] ^= s->leftover[i] ^ k[i];
    218c:	0018      	movs	r0, r3
    218e:	5ce6      	ldrb	r6, [r4, r3]
    2190:	5cca      	ldrb	r2, [r1, r3]
    2192:	3030      	adds	r0, #48	; 0x30
    2194:	5c20      	ldrb	r0, [r4, r0]
    2196:	4072      	eors	r2, r6
    2198:	4042      	eors	r2, r0
    219a:	54e2      	strb	r2, [r4, r3]

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    219c:	3301      	adds	r3, #1
    219e:	2b10      	cmp	r3, #16
    21a0:	d1f4      	bne.n	218c <tc_cmac_final+0x34>
		s->iv[i] ^= s->leftover[i] ^ k[i];
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
    21a2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    21a4:	0021      	movs	r1, r4
    21a6:	0028      	movs	r0, r5
    21a8:	f7ff feac 	bl	1f04 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
    21ac:	0020      	movs	r0, r4
    21ae:	f7ff ff21 	bl	1ff4 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
    21b2:	2001      	movs	r0, #1
}
    21b4:	bd70      	pop	{r4, r5, r6, pc}
	...

000021b8 <bt_hex>:
#include <misc/util.h>
#include <bluetooth/bluetooth.h>
#include <bluetooth/hci.h>

const char *bt_hex(const void *buf, size_t len)
{
    21b8:	b5f0      	push	{r4, r5, r6, r7, lr}
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
    21ba:	f3ef 8310 	mrs	r3, PRIMASK
    21be:	b672      	cpsid	i
	unsigned int mask;
	char *str;
	int i;

	mask = irq_lock();
	str = hexbufs[curbuf++];
    21c0:	2281      	movs	r2, #129	; 0x81
    21c2:	4e13      	ldr	r6, [pc, #76]	; (2210 <bt_hex+0x58>)
    21c4:	4d13      	ldr	r5, [pc, #76]	; (2214 <bt_hex+0x5c>)
    21c6:	7834      	ldrb	r4, [r6, #0]
    21c8:	4362      	muls	r2, r4
    21ca:	18aa      	adds	r2, r5, r2
	curbuf %= ARRAY_SIZE(hexbufs);
    21cc:	2503      	movs	r5, #3
    21ce:	3401      	adds	r4, #1
    21d0:	402c      	ands	r4, r5
    21d2:	7034      	strb	r4, [r6, #0]
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    21d4:	2b00      	cmp	r3, #0
    21d6:	d100      	bne.n	21da <bt_hex+0x22>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    21d8:	b662      	cpsie	i
	irq_unlock(mask);

	len = min(len, (sizeof(hexbufs[0]) - 1) / 2);
    21da:	2940      	cmp	r1, #64	; 0x40
    21dc:	d900      	bls.n	21e0 <bt_hex+0x28>
    21de:	2140      	movs	r1, #64	; 0x40
    21e0:	0003      	movs	r3, r0

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
		str[i * 2 + 1] = hex[b[i] & 0xf];
    21e2:	270f      	movs	r7, #15
    21e4:	0010      	movs	r0, r2
	irq_unlock(mask);

	len = min(len, (sizeof(hexbufs[0]) - 1) / 2);

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
    21e6:	4d0c      	ldr	r5, [pc, #48]	; (2218 <bt_hex+0x60>)
    21e8:	185e      	adds	r6, r3, r1
	curbuf %= ARRAY_SIZE(hexbufs);
	irq_unlock(mask);

	len = min(len, (sizeof(hexbufs[0]) - 1) / 2);

	for (i = 0; i < len; i++) {
    21ea:	42b3      	cmp	r3, r6
    21ec:	d00a      	beq.n	2204 <bt_hex+0x4c>
		str[i * 2]     = hex[b[i] >> 4];
    21ee:	781c      	ldrb	r4, [r3, #0]
    21f0:	0924      	lsrs	r4, r4, #4
    21f2:	5d2c      	ldrb	r4, [r5, r4]
    21f4:	7004      	strb	r4, [r0, #0]
		str[i * 2 + 1] = hex[b[i] & 0xf];
    21f6:	781c      	ldrb	r4, [r3, #0]
    21f8:	3301      	adds	r3, #1
    21fa:	403c      	ands	r4, r7
    21fc:	5d2c      	ldrb	r4, [r5, r4]
    21fe:	7044      	strb	r4, [r0, #1]
    2200:	3002      	adds	r0, #2
    2202:	e7f2      	b.n	21ea <bt_hex+0x32>
	}

	str[i * 2] = '\0';
    2204:	2300      	movs	r3, #0
    2206:	0049      	lsls	r1, r1, #1

	return str;
}
    2208:	0010      	movs	r0, r2
	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
    220a:	548b      	strb	r3, [r1, r2]

	return str;
}
    220c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    220e:	46c0      	nop			; (mov r8, r8)
    2210:	20000d54 	.word	0x20000d54
    2214:	20000b1a 	.word	0x20000b1a
    2218:	00015430 	.word	0x00015430

0000221c <bt_addr_le_str>:

	return str;
}

const char *bt_addr_le_str(const bt_addr_le_t *addr)
{
    221c:	b570      	push	{r4, r5, r6, lr}
	static char bufs[2][27];
	static u8_t cur;
	char *str;

	str = bufs[cur++];
    221e:	251b      	movs	r5, #27
    2220:	4918      	ldr	r1, [pc, #96]	; (2284 <bt_addr_le_str+0x68>)
    2222:	4a19      	ldr	r2, [pc, #100]	; (2288 <bt_addr_le_str+0x6c>)
    2224:	780b      	ldrb	r3, [r1, #0]

	return str;
}

const char *bt_addr_le_str(const bt_addr_le_t *addr)
{
    2226:	b088      	sub	sp, #32
	static char bufs[2][27];
	static u8_t cur;
	char *str;

	str = bufs[cur++];
    2228:	435d      	muls	r5, r3
    222a:	1955      	adds	r5, r2, r5
	cur %= ARRAY_SIZE(bufs);
    222c:	2201      	movs	r2, #1
    222e:	3301      	adds	r3, #1
    2230:	4013      	ands	r3, r2
    2232:	700b      	strb	r3, [r1, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[7];

	switch (addr->type) {
    2234:	7803      	ldrb	r3, [r0, #0]

	return str;
}

const char *bt_addr_le_str(const bt_addr_le_t *addr)
{
    2236:	0004      	movs	r4, r0
    2238:	ae06      	add	r6, sp, #24
    223a:	2b00      	cmp	r3, #0
    223c:	d003      	beq.n	2246 <bt_addr_le_str+0x2a>
    223e:	4293      	cmp	r3, r2
    2240:	d106      	bne.n	2250 <bt_addr_le_str+0x34>
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    2242:	4912      	ldr	r1, [pc, #72]	; (228c <bt_addr_le_str+0x70>)
    2244:	e000      	b.n	2248 <bt_addr_le_str+0x2c>
{
	char type[7];

	switch (addr->type) {
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    2246:	4912      	ldr	r1, [pc, #72]	; (2290 <bt_addr_le_str+0x74>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    2248:	0030      	movs	r0, r6
    224a:	f7fe fd43 	bl	cd4 <strcpy>
    224e:	e004      	b.n	225a <bt_addr_le_str+0x3e>
		break;
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    2250:	4a10      	ldr	r2, [pc, #64]	; (2294 <bt_addr_le_str+0x78>)
    2252:	2107      	movs	r1, #7
    2254:	0030      	movs	r0, r6
    2256:	f7ff fb9f 	bl	1998 <snprintk>
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    225a:	7862      	ldrb	r2, [r4, #1]
    225c:	79a3      	ldrb	r3, [r4, #6]
    225e:	9204      	str	r2, [sp, #16]
    2260:	78a2      	ldrb	r2, [r4, #2]
    2262:	9605      	str	r6, [sp, #20]
    2264:	9203      	str	r2, [sp, #12]
    2266:	78e2      	ldrb	r2, [r4, #3]
    2268:	211b      	movs	r1, #27
    226a:	9202      	str	r2, [sp, #8]
    226c:	7922      	ldrb	r2, [r4, #4]
    226e:	0028      	movs	r0, r5
    2270:	9201      	str	r2, [sp, #4]
    2272:	7962      	ldrb	r2, [r4, #5]
    2274:	9200      	str	r2, [sp, #0]
    2276:	4a08      	ldr	r2, [pc, #32]	; (2298 <bt_addr_le_str+0x7c>)
    2278:	f7ff fb8e 	bl	1998 <snprintk>
	str = bufs[cur++];
	cur %= ARRAY_SIZE(bufs);
	bt_addr_le_to_str(addr, str, sizeof(bufs[cur]));

	return str;
}
    227c:	0028      	movs	r0, r5
    227e:	b008      	add	sp, #32
    2280:	bd70      	pop	{r4, r5, r6, pc}
    2282:	46c0      	nop			; (mov r8, r8)
    2284:	20000d55 	.word	0x20000d55
    2288:	20000d1e 	.word	0x20000d1e
    228c:	000151d2 	.word	0x000151d2
    2290:	000151cb 	.word	0x000151cb
    2294:	000151d9 	.word	0x000151d9
    2298:	000151e0 	.word	0x000151e0

0000229c <ah>:

#define BT_DBG_ENABLED IS_ENABLED(CONFIG_BLUETOOTH_DEBUG_RPA)
#include "common/log.h"

static int ah(const u8_t irk[16], const u8_t r[3], u8_t out[3])
{
    229c:	b530      	push	{r4, r5, lr}
    229e:	b085      	sub	sp, #20
    22a0:	0004      	movs	r4, r0
    22a2:	0015      	movs	r5, r2
	int err;

	BT_DBG("irk %s, r %s", bt_hex(irk, 16), bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
    22a4:	4668      	mov	r0, sp
    22a6:	2203      	movs	r2, #3
    22a8:	f7fe fd47 	bl	d3a <memcpy>
	memset(res + 3, 0, 13);
    22ac:	466b      	mov	r3, sp
    22ae:	220d      	movs	r2, #13
    22b0:	2100      	movs	r1, #0
    22b2:	1cd8      	adds	r0, r3, #3
    22b4:	f7fe fd6b 	bl	d8e <memset>

	err = bt_encrypt_le(irk, res, res);
    22b8:	0020      	movs	r0, r4
    22ba:	466a      	mov	r2, sp
    22bc:	4669      	mov	r1, sp
    22be:	f009 ff2d 	bl	c11c <bt_encrypt_le>
    22c2:	1e04      	subs	r4, r0, #0
	if (err) {
    22c4:	d104      	bne.n	22d0 <ah+0x34>
	 *      ah(h, r) = e(k, r') mod 2^24
	 * The output of the security function e is then truncated to 24 bits
	 * by taking the least significant 24 bits of the output of e as the
	 * result of ah.
	 */
	memcpy(out, res, 3);
    22c6:	2203      	movs	r2, #3
    22c8:	4669      	mov	r1, sp
    22ca:	0028      	movs	r0, r5
    22cc:	f7fe fd35 	bl	d3a <memcpy>

	return 0;
}
    22d0:	0020      	movs	r0, r4
    22d2:	b005      	add	sp, #20
    22d4:	bd30      	pop	{r4, r5, pc}

000022d6 <bt_rpa_irk_matches>:

#if defined(CONFIG_BLUETOOTH_SMP)
bool bt_rpa_irk_matches(const u8_t irk[16], const bt_addr_t *addr)
{
    22d6:	b513      	push	{r0, r1, r4, lr}
    22d8:	000c      	movs	r4, r1
	u8_t hash[3];
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
    22da:	aa01      	add	r2, sp, #4
    22dc:	3103      	adds	r1, #3
    22de:	f7ff ffdd 	bl	229c <ah>
    22e2:	0003      	movs	r3, r0
	if (err) {
		return false;
    22e4:	2000      	movs	r0, #0
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
	if (err) {
    22e6:	4283      	cmp	r3, r0
    22e8:	d107      	bne.n	22fa <bt_rpa_irk_matches+0x24>
		return false;
	}

	return !memcmp(addr->val, hash, 3);
    22ea:	2203      	movs	r2, #3
    22ec:	a901      	add	r1, sp, #4
    22ee:	0020      	movs	r0, r4
    22f0:	f7fe fd0e 	bl	d10 <memcmp>
    22f4:	4243      	negs	r3, r0
    22f6:	4158      	adcs	r0, r3
    22f8:	b2c0      	uxtb	r0, r0
}
    22fa:	bd16      	pop	{r1, r2, r4, pc}

000022fc <bt_rpa_create>:
#endif

#if defined(CONFIG_BLUETOOTH_PRIVACY) || \
	defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
int bt_rpa_create(const u8_t irk[16], bt_addr_t *rpa)
{
    22fc:	b570      	push	{r4, r5, r6, lr}
	int err;

	err = bt_rand(rpa->val + 3, 3);
    22fe:	1ccd      	adds	r5, r1, #3
#endif

#if defined(CONFIG_BLUETOOTH_PRIVACY) || \
	defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
int bt_rpa_create(const u8_t irk[16], bt_addr_t *rpa)
{
    2300:	0006      	movs	r6, r0
    2302:	000c      	movs	r4, r1
	int err;

	err = bt_rand(rpa->val + 3, 3);
    2304:	0028      	movs	r0, r5
    2306:	2103      	movs	r1, #3
    2308:	f009 feea 	bl	c0e0 <bt_rand>
	if (err) {
    230c:	2800      	cmp	r0, #0
    230e:	d10a      	bne.n	2326 <bt_rpa_create+0x2a>
		return err;
	}

	BT_ADDR_SET_RPA(rpa);
    2310:	233f      	movs	r3, #63	; 0x3f
    2312:	7962      	ldrb	r2, [r4, #5]

	err = ah(irk, rpa->val + 3, rpa->val);
    2314:	0029      	movs	r1, r5
	err = bt_rand(rpa->val + 3, 3);
	if (err) {
		return err;
	}

	BT_ADDR_SET_RPA(rpa);
    2316:	4013      	ands	r3, r2
    2318:	2240      	movs	r2, #64	; 0x40
    231a:	4313      	orrs	r3, r2
    231c:	7163      	strb	r3, [r4, #5]

	err = ah(irk, rpa->val + 3, rpa->val);
    231e:	0022      	movs	r2, r4
    2320:	0030      	movs	r0, r6
    2322:	f7ff ffbb 	bl	229c <ah>
	}

	BT_DBG("Created RPA %s", bt_addr_str((bt_addr_t *)rpa->val));

	return 0;
}
    2326:	bd70      	pop	{r4, r5, r6, pc}

00002328 <uuid_to_uuid128>:
	.val = { 0xfb, 0x34, 0x9b, 0x5f, 0x80, 0x00, 0x00, 0x80,
		 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    2328:	b570      	push	{r4, r5, r6, lr}
	switch (src->type) {
    232a:	7803      	ldrb	r3, [r0, #0]
	.val = { 0xfb, 0x34, 0x9b, 0x5f, 0x80, 0x00, 0x00, 0x80,
		 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    232c:	0005      	movs	r5, r0
    232e:	000c      	movs	r4, r1
	switch (src->type) {
    2330:	2b01      	cmp	r3, #1
    2332:	d013      	beq.n	235c <uuid_to_uuid128+0x34>
    2334:	2b00      	cmp	r3, #0
    2336:	d007      	beq.n	2348 <uuid_to_uuid128+0x20>
    2338:	2b02      	cmp	r3, #2
    233a:	d11c      	bne.n	2376 <uuid_to_uuid128+0x4e>
		*dst = uuid128_base;
		sys_put_le32(BT_UUID_32(src)->val,
			     &dst->val[UUID_16_BASE_OFFSET]);
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
    233c:	0001      	movs	r1, r0
    233e:	2211      	movs	r2, #17
    2340:	0020      	movs	r0, r4
    2342:	f7fe fcfa 	bl	d3a <memcpy>
		return;
    2346:	e016      	b.n	2376 <uuid_to_uuid128+0x4e>

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
	switch (src->type) {
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
    2348:	2211      	movs	r2, #17
    234a:	490b      	ldr	r1, [pc, #44]	; (2378 <uuid_to_uuid128+0x50>)
    234c:	0020      	movs	r0, r4
    234e:	f7fe fcf4 	bl	d3a <memcpy>
		sys_put_le16(BT_UUID_16(src)->val,
    2352:	886b      	ldrh	r3, [r5, #2]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    2354:	7363      	strb	r3, [r4, #13]
	dst[1] = val >> 8;
    2356:	0a1b      	lsrs	r3, r3, #8
    2358:	73a3      	strb	r3, [r4, #14]
    235a:	e00c      	b.n	2376 <uuid_to_uuid128+0x4e>
			     &dst->val[UUID_16_BASE_OFFSET]);
		return;
	case BT_UUID_TYPE_32:
		*dst = uuid128_base;
    235c:	2211      	movs	r2, #17
    235e:	4906      	ldr	r1, [pc, #24]	; (2378 <uuid_to_uuid128+0x50>)
    2360:	0020      	movs	r0, r4
    2362:	f7fe fcea 	bl	d3a <memcpy>
		sys_put_le32(BT_UUID_32(src)->val,
    2366:	686b      	ldr	r3, [r5, #4]
    2368:	0a1a      	lsrs	r2, r3, #8
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    236a:	7363      	strb	r3, [r4, #13]
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(u32_t val, u8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
    236c:	0c1b      	lsrs	r3, r3, #16
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    236e:	73e3      	strb	r3, [r4, #15]
	dst[1] = val >> 8;
    2370:	0a1b      	lsrs	r3, r3, #8
    2372:	73a2      	strb	r2, [r4, #14]
    2374:	7423      	strb	r3, [r4, #16]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    2376:	bd70      	pop	{r4, r5, r6, pc}
    2378:	000178d3 	.word	0x000178d3

0000237c <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
    237c:	b510      	push	{r4, lr}
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type)
    237e:	7802      	ldrb	r2, [r0, #0]
    2380:	780b      	ldrb	r3, [r1, #0]

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
    2382:	b08a      	sub	sp, #40	; 0x28
    2384:	000c      	movs	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type)
    2386:	4293      	cmp	r3, r2
    2388:	d00c      	beq.n	23a4 <bt_uuid_cmp+0x28>

static int uuid128_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
	struct bt_uuid_128 uuid1, uuid2;

	uuid_to_uuid128(u1, &uuid1);
    238a:	4669      	mov	r1, sp
    238c:	f7ff ffcc 	bl	2328 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
    2390:	a905      	add	r1, sp, #20
    2392:	0020      	movs	r0, r4
    2394:	f7ff ffc8 	bl	2328 <uuid_to_uuid128>

	return memcmp(uuid1.val, uuid2.val, 16);
    2398:	2115      	movs	r1, #21
    239a:	466b      	mov	r3, sp
    239c:	2210      	movs	r2, #16
    239e:	4469      	add	r1, sp
    23a0:	1c58      	adds	r0, r3, #1
    23a2:	e010      	b.n	23c6 <bt_uuid_cmp+0x4a>
{
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type)
		return uuid128_cmp(u1, u2);

	switch (u1->type) {
    23a4:	2b01      	cmp	r3, #1
    23a6:	d00a      	beq.n	23be <bt_uuid_cmp+0x42>
    23a8:	2b00      	cmp	r3, #0
    23aa:	d005      	beq.n	23b8 <bt_uuid_cmp+0x3c>
    23ac:	2b02      	cmp	r3, #2
    23ae:	d10d      	bne.n	23cc <bt_uuid_cmp+0x50>
	case BT_UUID_TYPE_16:
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
	case BT_UUID_TYPE_32:
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
    23b0:	3101      	adds	r1, #1
    23b2:	3001      	adds	r0, #1
    23b4:	2210      	movs	r2, #16
    23b6:	e006      	b.n	23c6 <bt_uuid_cmp+0x4a>
	if (u1->type != u2->type)
		return uuid128_cmp(u1, u2);

	switch (u1->type) {
	case BT_UUID_TYPE_16:
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
    23b8:	8843      	ldrh	r3, [r0, #2]
    23ba:	8848      	ldrh	r0, [r1, #2]
    23bc:	e001      	b.n	23c2 <bt_uuid_cmp+0x46>
	case BT_UUID_TYPE_32:
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
    23be:	6843      	ldr	r3, [r0, #4]
    23c0:	6848      	ldr	r0, [r1, #4]
    23c2:	1a18      	subs	r0, r3, r0
    23c4:	e004      	b.n	23d0 <bt_uuid_cmp+0x54>
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
    23c6:	f7fe fca3 	bl	d10 <memcmp>
    23ca:	e001      	b.n	23d0 <bt_uuid_cmp+0x54>
	}

	return -EINVAL;
    23cc:	2016      	movs	r0, #22
    23ce:	4240      	negs	r0, r0
}
    23d0:	b00a      	add	sp, #40	; 0x28
    23d2:	bd10      	pop	{r4, pc}

000023d4 <net_buf_user_data>:
 *
 *  @return Pointer to the user data of the buffer.
 */
static inline void *net_buf_user_data(struct net_buf *buf)
{
	return (void *)ROUND_UP((buf->__buf + buf->size), sizeof(int));
    23d4:	89c3      	ldrh	r3, [r0, #14]
    23d6:	18c0      	adds	r0, r0, r3
    23d8:	2303      	movs	r3, #3
    23da:	3013      	adds	r0, #19
    23dc:	4398      	bics	r0, r3
}
    23de:	4770      	bx	lr

000023e0 <ver_str>:
	return 0;
}

#if defined(CONFIG_BLUETOOTH_DEBUG)
static const char *ver_str(u8_t ver)
{
    23e0:	b570      	push	{r4, r5, r6, lr}
    23e2:	b08a      	sub	sp, #40	; 0x28
	const char * const str[] = {
    23e4:	466a      	mov	r2, sp
    23e6:	4b09      	ldr	r3, [pc, #36]	; (240c <ver_str+0x2c>)
    23e8:	4669      	mov	r1, sp
    23ea:	cb70      	ldmia	r3!, {r4, r5, r6}
    23ec:	c270      	stmia	r2!, {r4, r5, r6}
    23ee:	cb70      	ldmia	r3!, {r4, r5, r6}
    23f0:	c270      	stmia	r2!, {r4, r5, r6}
    23f2:	cb70      	ldmia	r3!, {r4, r5, r6}
    23f4:	c270      	stmia	r2!, {r4, r5, r6}
    23f6:	681b      	ldr	r3, [r3, #0]
    23f8:	6013      	str	r3, [r2, #0]

	if (ver < ARRAY_SIZE(str)) {
		return str[ver];
	}

	return "unknown";
    23fa:	4b05      	ldr	r3, [pc, #20]	; (2410 <ver_str+0x30>)
	const char * const str[] = {
		"1.0b", "1.1", "1.2", "2.0", "2.1", "3.0", "4.0", "4.1", "4.2",
		"5.0",
	};

	if (ver < ARRAY_SIZE(str)) {
    23fc:	2809      	cmp	r0, #9
    23fe:	d801      	bhi.n	2404 <ver_str+0x24>
		return str[ver];
    2400:	0080      	lsls	r0, r0, #2
    2402:	5843      	ldr	r3, [r0, r1]
	}

	return "unknown";
}
    2404:	0018      	movs	r0, r3
    2406:	b00a      	add	sp, #40	; 0x28
    2408:	bd70      	pop	{r4, r5, r6, pc}
    240a:	46c0      	nop			; (mov r8, r8)
    240c:	0001506c 	.word	0x0001506c
    2410:	0001547c 	.word	0x0001547c

00002414 <atomic_test_bit>:
 *
 * @return 1 if the bit was set, 0 if it wasn't.
 */
static inline int atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    2414:	094b      	lsrs	r3, r1, #5
    2416:	009b      	lsls	r3, r3, #2
 * @param bit Bit number (starting from 0).
 *
 * @return 1 if the bit was set, 0 if it wasn't.
 */
static inline int atomic_test_bit(const atomic_t *target, int bit)
{
    2418:	b510      	push	{r4, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    241a:	18c0      	adds	r0, r0, r3
 * @param bit Bit number (starting from 0).
 *
 * @return 1 if the bit was set, 0 if it wasn't.
 */
static inline int atomic_test_bit(const atomic_t *target, int bit)
{
    241c:	000c      	movs	r4, r1
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    241e:	f011 fb96 	bl	13b4e <atomic_get>

	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    2422:	231f      	movs	r3, #31
    2424:	401c      	ands	r4, r3
    2426:	4120      	asrs	r0, r4
    2428:	3b1e      	subs	r3, #30
    242a:	4018      	ands	r0, r3
}
    242c:	bd10      	pop	{r4, pc}

0000242e <atomic_test_bit>:
 *
 * @return 1 if the bit was set, 0 if it wasn't.
 */
static inline int atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    242e:	094b      	lsrs	r3, r1, #5
    2430:	009b      	lsls	r3, r3, #2
 * @param bit Bit number (starting from 0).
 *
 * @return 1 if the bit was set, 0 if it wasn't.
 */
static inline int atomic_test_bit(const atomic_t *target, int bit)
{
    2432:	b510      	push	{r4, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    2434:	18c0      	adds	r0, r0, r3
 * @param bit Bit number (starting from 0).
 *
 * @return 1 if the bit was set, 0 if it wasn't.
 */
static inline int atomic_test_bit(const atomic_t *target, int bit)
{
    2436:	000c      	movs	r4, r1
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    2438:	f011 fb89 	bl	13b4e <atomic_get>

	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    243c:	231f      	movs	r3, #31
    243e:	401c      	ands	r4, r3
    2440:	4120      	asrs	r0, r4
    2442:	3b1e      	subs	r3, #30
    2444:	4018      	ands	r0, r3
}
    2446:	bd10      	pop	{r4, pc}

00002448 <update_sec_level>:
}
#endif /* CONFIG_BLUETOOTH_BREDR */

#if defined(CONFIG_BLUETOOTH_SMP)
static void update_sec_level(struct bt_conn *conn)
{
    2448:	b513      	push	{r0, r1, r4, lr}
	if (!conn->encrypt) {
    244a:	7a83      	ldrb	r3, [r0, #10]
}
#endif /* CONFIG_BLUETOOTH_BREDR */

#if defined(CONFIG_BLUETOOTH_SMP)
static void update_sec_level(struct bt_conn *conn)
{
    244c:	0004      	movs	r4, r0
	if (!conn->encrypt) {
    244e:	2b00      	cmp	r3, #0
    2450:	d102      	bne.n	2458 <update_sec_level+0x10>
		conn->sec_level = BT_SECURITY_LOW;
    2452:	3301      	adds	r3, #1
    2454:	7203      	strb	r3, [r0, #8]
		return;
    2456:	e024      	b.n	24a2 <update_sec_level+0x5a>
	}

	if (conn->le.keys && atomic_test_bit(conn->le.keys->flags,
    2458:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
    245a:	2800      	cmp	r0, #0
    245c:	d00d      	beq.n	247a <update_sec_level+0x32>
    245e:	3008      	adds	r0, #8
    2460:	2100      	movs	r1, #0
    2462:	f7ff ffd7 	bl	2414 <atomic_test_bit>
    2466:	2800      	cmp	r0, #0
    2468:	d007      	beq.n	247a <update_sec_level+0x32>
					     BT_KEYS_AUTHENTICATED)) {
		if (conn->le.keys->keys & BT_KEYS_LTK_P256) {
    246a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    246c:	899b      	ldrh	r3, [r3, #12]
    246e:	069b      	lsls	r3, r3, #26
    2470:	d501      	bpl.n	2476 <update_sec_level+0x2e>
			conn->sec_level = BT_SECURITY_FIPS;
    2472:	2304      	movs	r3, #4
    2474:	e002      	b.n	247c <update_sec_level+0x34>
		} else {
			conn->sec_level = BT_SECURITY_HIGH;
    2476:	2303      	movs	r3, #3
    2478:	e000      	b.n	247c <update_sec_level+0x34>
		}
	} else {
		conn->sec_level = BT_SECURITY_MEDIUM;
    247a:	2302      	movs	r3, #2
    247c:	7223      	strb	r3, [r4, #8]
	}

	if (conn->required_sec_level > conn->sec_level) {
    247e:	7a62      	ldrb	r2, [r4, #9]
    2480:	7a23      	ldrb	r3, [r4, #8]
    2482:	429a      	cmp	r2, r3
    2484:	d90d      	bls.n	24a2 <update_sec_level+0x5a>
		BT_ERR("Failed to set required security level");
    2486:	4b07      	ldr	r3, [pc, #28]	; (24a4 <update_sec_level+0x5c>)
    2488:	4907      	ldr	r1, [pc, #28]	; (24a8 <update_sec_level+0x60>)
    248a:	9301      	str	r3, [sp, #4]
    248c:	4b07      	ldr	r3, [pc, #28]	; (24ac <update_sec_level+0x64>)
    248e:	4a08      	ldr	r2, [pc, #32]	; (24b0 <update_sec_level+0x68>)
    2490:	9300      	str	r3, [sp, #0]
    2492:	4808      	ldr	r0, [pc, #32]	; (24b4 <update_sec_level+0x6c>)
    2494:	4b08      	ldr	r3, [pc, #32]	; (24b8 <update_sec_level+0x70>)
    2496:	f7ff fa73 	bl	1980 <printk>
		bt_conn_disconnect(conn, BT_HCI_ERR_AUTHENTICATION_FAIL);
    249a:	2105      	movs	r1, #5
    249c:	0020      	movs	r0, r4
    249e:	f002 fca3 	bl	4de8 <bt_conn_disconnect>
	}
}
    24a2:	bd13      	pop	{r0, r1, r4, pc}
    24a4:	000154c4 	.word	0x000154c4
    24a8:	0001548b 	.word	0x0001548b
    24ac:	000154c9 	.word	0x000154c9
    24b0:	00015484 	.word	0x00015484
    24b4:	0001548e 	.word	0x0001548e
    24b8:	00017aa0 	.word	0x00017aa0

000024bc <hci_cmd_done>:
	/* we only allow to enable once so this bit must be keep set */
	atomic_set(bt_dev.flags, BIT(BT_DEV_ENABLE));
}

static void hci_cmd_done(u16_t opcode, u8_t status, struct net_buf *buf)
{
    24bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    24be:	0005      	movs	r5, r0
    24c0:	b087      	sub	sp, #28
	BT_DBG("opcode 0x%04x status 0x%02x buf %p", opcode, status, buf);

	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    24c2:	7990      	ldrb	r0, [r2, #6]
	/* we only allow to enable once so this bit must be keep set */
	atomic_set(bt_dev.flags, BIT(BT_DEV_ENABLE));
}

static void hci_cmd_done(u16_t opcode, u8_t status, struct net_buf *buf)
{
    24c4:	000e      	movs	r6, r1
    24c6:	0014      	movs	r4, r2
	BT_DBG("opcode 0x%04x status 0x%02x buf %p", opcode, status, buf);

	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    24c8:	f010 ffde 	bl	13488 <net_buf_pool_get>
    24cc:	4f1a      	ldr	r7, [pc, #104]	; (2538 <hci_cmd_done+0x7c>)
    24ce:	42b8      	cmp	r0, r7
    24d0:	d011      	beq.n	24f6 <hci_cmd_done+0x3a>
		BT_WARN("pool id %u pool %p != &hci_cmd_pool %p",
    24d2:	79a4      	ldrb	r4, [r4, #6]
    24d4:	0020      	movs	r0, r4
    24d6:	f010 ffd7 	bl	13488 <net_buf_pool_get>
    24da:	4b18      	ldr	r3, [pc, #96]	; (253c <hci_cmd_done+0x80>)
    24dc:	9002      	str	r0, [sp, #8]
    24de:	9304      	str	r3, [sp, #16]
    24e0:	4b17      	ldr	r3, [pc, #92]	; (2540 <hci_cmd_done+0x84>)
    24e2:	9703      	str	r7, [sp, #12]
    24e4:	9300      	str	r3, [sp, #0]
    24e6:	9401      	str	r4, [sp, #4]
    24e8:	4b16      	ldr	r3, [pc, #88]	; (2544 <hci_cmd_done+0x88>)
    24ea:	4a17      	ldr	r2, [pc, #92]	; (2548 <hci_cmd_done+0x8c>)
    24ec:	4917      	ldr	r1, [pc, #92]	; (254c <hci_cmd_done+0x90>)
    24ee:	4818      	ldr	r0, [pc, #96]	; (2550 <hci_cmd_done+0x94>)
    24f0:	f7ff fa46 	bl	1980 <printk>
			buf->pool_id, net_buf_pool_get(buf->pool_id),
			&hci_cmd_pool);
		return;
    24f4:	e01e      	b.n	2534 <hci_cmd_done+0x78>
	}

	if (cmd(buf)->opcode != opcode) {
    24f6:	0020      	movs	r0, r4
    24f8:	f7ff ff6c 	bl	23d4 <net_buf_user_data>
    24fc:	8843      	ldrh	r3, [r0, #2]
    24fe:	429d      	cmp	r5, r3
    2500:	d00b      	beq.n	251a <hci_cmd_done+0x5e>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
    2502:	4a0e      	ldr	r2, [pc, #56]	; (253c <hci_cmd_done+0x80>)
    2504:	9302      	str	r3, [sp, #8]
    2506:	4b0e      	ldr	r3, [pc, #56]	; (2540 <hci_cmd_done+0x84>)
    2508:	9203      	str	r2, [sp, #12]
    250a:	9300      	str	r3, [sp, #0]
    250c:	9501      	str	r5, [sp, #4]
    250e:	4b0d      	ldr	r3, [pc, #52]	; (2544 <hci_cmd_done+0x88>)
    2510:	4a0d      	ldr	r2, [pc, #52]	; (2548 <hci_cmd_done+0x8c>)
    2512:	490e      	ldr	r1, [pc, #56]	; (254c <hci_cmd_done+0x90>)
    2514:	480f      	ldr	r0, [pc, #60]	; (2554 <hci_cmd_done+0x98>)
    2516:	f7ff fa33 	bl	1980 <printk>
			opcode, cmd(buf)->opcode);
	}

	/* If the command was synchronous wake up bt_hci_cmd_send_sync() */
	if (cmd(buf)->sync) {
    251a:	0020      	movs	r0, r4
    251c:	f7ff ff5a 	bl	23d4 <net_buf_user_data>
    2520:	6843      	ldr	r3, [r0, #4]
    2522:	2b00      	cmp	r3, #0
    2524:	d006      	beq.n	2534 <hci_cmd_done+0x78>
		cmd(buf)->status = status;
    2526:	7046      	strb	r6, [r0, #1]
		k_sem_give(cmd(buf)->sync);
    2528:	0020      	movs	r0, r4
    252a:	f7ff ff53 	bl	23d4 <net_buf_user_data>
    252e:	6840      	ldr	r0, [r0, #4]
    2530:	f012 f9d4 	bl	148dc <k_sem_give>
	}
}
    2534:	b007      	add	sp, #28
    2536:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2538:	200009f4 	.word	0x200009f4
    253c:	000154c4 	.word	0x000154c4
    2540:	0001550f 	.word	0x0001550f
    2544:	000179e1 	.word	0x000179e1
    2548:	000154d1 	.word	0x000154d1
    254c:	0001548b 	.word	0x0001548b
    2550:	000154d8 	.word	0x000154d8
    2554:	00015517 	.word	0x00015517

00002558 <update_conn_param>:
	/*
	 * Core 4.2 Vol 3, Part C, 9.3.12.2
	 * The Peripheral device should not perform a Connection Parameter
	 * Update procedure within 5 s after establishing a connection.
	 */
	k_delayed_work_submit(&conn->le.update_work,
    2558:	0001      	movs	r1, r0
    255a:	2200      	movs	r2, #0

	return 0;
}

static void update_conn_param(struct bt_conn *conn)
{
    255c:	b510      	push	{r4, lr}
	/*
	 * Core 4.2 Vol 3, Part C, 9.3.12.2
	 * The Peripheral device should not perform a Connection Parameter
	 * Update procedure within 5 s after establishing a connection.
	 */
	k_delayed_work_submit(&conn->le.update_work,
    255e:	78c3      	ldrb	r3, [r0, #3]
    2560:	3180      	adds	r1, #128	; 0x80
    2562:	4293      	cmp	r3, r2
    2564:	d000      	beq.n	2568 <update_conn_param+0x10>
    2566:	4a02      	ldr	r2, [pc, #8]	; (2570 <update_conn_param+0x18>)
 * @retval -EADDRINUSE Work item is pending on a different workqueue.
 */
static inline int k_delayed_work_submit(struct k_delayed_work *work,
					s32_t delay)
{
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    2568:	4802      	ldr	r0, [pc, #8]	; (2574 <update_conn_param+0x1c>)
    256a:	f012 fcd1 	bl	14f10 <k_delayed_work_submit_to_queue>
				 conn->role == BT_HCI_ROLE_MASTER ? K_NO_WAIT :
				 CONN_UPDATE_TIMEOUT);
}
    256e:	bd10      	pop	{r4, pc}
    2570:	00001388 	.word	0x00001388
    2574:	20002358 	.word	0x20002358

00002578 <sys_put_le64>:
    2578:	0a03      	lsrs	r3, r0, #8
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    257a:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
    257c:	7053      	strb	r3, [r2, #1]
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(u32_t val, u8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
    257e:	0c00      	lsrs	r0, r0, #16
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
	dst[1] = val >> 8;
    2580:	0a0b      	lsrs	r3, r1, #8
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    2582:	7111      	strb	r1, [r2, #4]
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(u32_t val, u8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
    2584:	0c09      	lsrs	r1, r1, #16
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    2586:	7090      	strb	r0, [r2, #2]
    2588:	7191      	strb	r1, [r2, #6]
	dst[1] = val >> 8;
    258a:	0a00      	lsrs	r0, r0, #8
    258c:	0a09      	lsrs	r1, r1, #8
    258e:	70d0      	strb	r0, [r2, #3]
    2590:	7153      	strb	r3, [r2, #5]
    2592:	71d1      	strb	r1, [r2, #7]
 */
static inline void sys_put_le64(u64_t val, u8_t dst[8])
{
	sys_put_le32(val, dst);
	sys_put_le32(val >> 32, &dst[4]);
}
    2594:	4770      	bx	lr
	...

00002598 <bt_hci_cmd_create>:
NET_BUF_POOL_DEFINE(acl_in_pool, CONFIG_BLUETOOTH_ACL_RX_COUNT, ACL_IN_SIZE,
		    BT_BUF_USER_DATA_MIN, report_completed_packet);
#endif /* CONFIG_BLUETOOTH_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_hci_cmd_create(u16_t opcode, u8_t param_len)
{
    2598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    259a:	000e      	movs	r6, r1
	struct bt_hci_cmd_hdr *hdr;
	struct net_buf *buf;

	BT_DBG("opcode 0x%04x param_len %u", opcode, param_len);

	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    259c:	2101      	movs	r1, #1
NET_BUF_POOL_DEFINE(acl_in_pool, CONFIG_BLUETOOTH_ACL_RX_COUNT, ACL_IN_SIZE,
		    BT_BUF_USER_DATA_MIN, report_completed_packet);
#endif /* CONFIG_BLUETOOTH_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_hci_cmd_create(u16_t opcode, u8_t param_len)
{
    259e:	0005      	movs	r5, r0
	struct bt_hci_cmd_hdr *hdr;
	struct net_buf *buf;

	BT_DBG("opcode 0x%04x param_len %u", opcode, param_len);

	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    25a0:	4249      	negs	r1, r1
    25a2:	480f      	ldr	r0, [pc, #60]	; (25e0 <bt_hci_cmd_create+0x48>)
    25a4:	f010 ff78 	bl	13498 <net_buf_alloc>
    25a8:	0004      	movs	r4, r0
	__ASSERT_NO_MSG(buf);

	BT_DBG("buf %p", buf);

	net_buf_reserve(buf, CONFIG_BLUETOOTH_HCI_RESERVE);
    25aa:	2100      	movs	r1, #0
    25ac:	f010 ffd4 	bl	13558 <net_buf_reserve>

	cmd(buf)->type = BT_BUF_CMD;
    25b0:	0020      	movs	r0, r4
    25b2:	f7ff ff0f 	bl	23d4 <net_buf_user_data>
    25b6:	2700      	movs	r7, #0
    25b8:	7007      	strb	r7, [r0, #0]
	cmd(buf)->opcode = opcode;
    25ba:	0020      	movs	r0, r4
    25bc:	f7ff ff0a 	bl	23d4 <net_buf_user_data>
    25c0:	8045      	strh	r5, [r0, #2]
	cmd(buf)->sync = NULL;
    25c2:	0020      	movs	r0, r4
    25c4:	f7ff ff06 	bl	23d4 <net_buf_user_data>
    25c8:	6047      	str	r7, [r0, #4]

	hdr = net_buf_add(buf, sizeof(*hdr));
    25ca:	0020      	movs	r0, r4
    25cc:	2103      	movs	r1, #3
    25ce:	3008      	adds	r0, #8
    25d0:	f010 fff8 	bl	135c4 <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
    25d4:	7005      	strb	r5, [r0, #0]
    25d6:	0a2d      	lsrs	r5, r5, #8
    25d8:	7045      	strb	r5, [r0, #1]
	hdr->param_len = param_len;
    25da:	7086      	strb	r6, [r0, #2]

	return buf;
}
    25dc:	0020      	movs	r0, r4
    25de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    25e0:	200009f4 	.word	0x200009f4

000025e4 <bt_hci_cmd_send_sync>:
	return 0;
}

int bt_hci_cmd_send_sync(u16_t opcode, struct net_buf *buf,
			 struct net_buf **rsp)
{
    25e4:	b570      	push	{r4, r5, r6, lr}
    25e6:	000c      	movs	r4, r1
    25e8:	b086      	sub	sp, #24
    25ea:	0015      	movs	r5, r2
	struct k_sem sync_sem;
	int err;

	if (!buf) {
    25ec:	2900      	cmp	r1, #0
    25ee:	d103      	bne.n	25f8 <bt_hci_cmd_send_sync+0x14>
		buf = bt_hci_cmd_create(opcode, 0);
    25f0:	f7ff ffd2 	bl	2598 <bt_hci_cmd_create>
    25f4:	1e04      	subs	r4, r0, #0
		if (!buf) {
    25f6:	d029      	beq.n	264c <bt_hci_cmd_send_sync+0x68>
		}
	}

	BT_DBG("buf %p opcode 0x%04x len %u", buf, opcode, buf->len);

	k_sem_init(&sync_sem, 0, 1);
    25f8:	ae01      	add	r6, sp, #4
    25fa:	2201      	movs	r2, #1
    25fc:	2100      	movs	r1, #0
    25fe:	0030      	movs	r0, r6
    2600:	f012 f964 	bl	148cc <k_sem_init>
	cmd(buf)->sync = &sync_sem;
    2604:	0020      	movs	r0, r4
    2606:	f7ff fee5 	bl	23d4 <net_buf_user_data>
    260a:	6046      	str	r6, [r0, #4]

	/* Make sure the buffer stays around until the command completes */
	net_buf_ref(buf);
    260c:	0020      	movs	r0, r4
    260e:	f010 ffd5 	bl	135bc <net_buf_ref>

	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    2612:	4810      	ldr	r0, [pc, #64]	; (2654 <bt_hci_cmd_send_sync+0x70>)
    2614:	0021      	movs	r1, r4
    2616:	30c4      	adds	r0, #196	; 0xc4
    2618:	f010 ffa3 	bl	13562 <net_buf_put>

	err = k_sem_take(&sync_sem, HCI_CMD_TIMEOUT);
    261c:	490e      	ldr	r1, [pc, #56]	; (2658 <bt_hci_cmd_send_sync+0x74>)
    261e:	0030      	movs	r0, r6
    2620:	f012 f998 	bl	14954 <k_sem_take>
	__ASSERT(err == 0, "k_sem_take failed with err %d", err);

	BT_DBG("opcode 0x%04x status 0x%02x", opcode, cmd(buf)->status);

	if (cmd(buf)->status) {
    2624:	0020      	movs	r0, r4
    2626:	f7ff fed5 	bl	23d4 <net_buf_user_data>
    262a:	7840      	ldrb	r0, [r0, #1]
    262c:	2800      	cmp	r0, #0
    262e:	d004      	beq.n	263a <bt_hci_cmd_send_sync+0x56>
		err = -EIO;
		net_buf_unref(buf);
    2630:	0020      	movs	r0, r4
    2632:	f010 ffa5 	bl	13580 <net_buf_unref>
	__ASSERT(err == 0, "k_sem_take failed with err %d", err);

	BT_DBG("opcode 0x%04x status 0x%02x", opcode, cmd(buf)->status);

	if (cmd(buf)->status) {
		err = -EIO;
    2636:	2005      	movs	r0, #5
    2638:	e009      	b.n	264e <bt_hci_cmd_send_sync+0x6a>
		net_buf_unref(buf);
	} else {
		err = 0;
		if (rsp) {
    263a:	2d00      	cmp	r5, #0
    263c:	d001      	beq.n	2642 <bt_hci_cmd_send_sync+0x5e>
			*rsp = buf;
    263e:	602c      	str	r4, [r5, #0]
    2640:	e006      	b.n	2650 <bt_hci_cmd_send_sync+0x6c>
		} else {
			net_buf_unref(buf);
    2642:	0020      	movs	r0, r4
    2644:	f010 ff9c 	bl	13580 <net_buf_unref>

	if (cmd(buf)->status) {
		err = -EIO;
		net_buf_unref(buf);
	} else {
		err = 0;
    2648:	0028      	movs	r0, r5
    264a:	e001      	b.n	2650 <bt_hci_cmd_send_sync+0x6c>
	int err;

	if (!buf) {
		buf = bt_hci_cmd_create(opcode, 0);
		if (!buf) {
			return -ENOBUFS;
    264c:	2037      	movs	r0, #55	; 0x37
    264e:	4240      	negs	r0, r0
			net_buf_unref(buf);
		}
	}

	return err;
}
    2650:	b006      	add	sp, #24
    2652:	bd70      	pop	{r4, r5, r6, pc}
    2654:	200004d0 	.word	0x200004d0
    2658:	00002710 	.word	0x00002710

0000265c <set_advertise_enable>:

	return addr;
}

static int set_advertise_enable(bool enable)
{
    265c:	b570      	push	{r4, r5, r6, lr}
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    265e:	2101      	movs	r1, #1

	return addr;
}

static int set_advertise_enable(bool enable)
{
    2660:	0005      	movs	r5, r0
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    2662:	4812      	ldr	r0, [pc, #72]	; (26ac <set_advertise_enable+0x50>)
    2664:	f7ff ff98 	bl	2598 <bt_hci_cmd_create>
    2668:	1e04      	subs	r4, r0, #0
	if (!buf) {
    266a:	d01a      	beq.n	26a2 <set_advertise_enable+0x46>
    266c:	3008      	adds	r0, #8
		return -ENOBUFS;
	}

	if (enable) {
		net_buf_add_u8(buf, BT_HCI_LE_ADV_ENABLE);
    266e:	2101      	movs	r1, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
	if (!buf) {
		return -ENOBUFS;
	}

	if (enable) {
    2670:	2d00      	cmp	r5, #0
    2672:	d100      	bne.n	2676 <set_advertise_enable+0x1a>
		net_buf_add_u8(buf, BT_HCI_LE_ADV_ENABLE);
	} else {
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    2674:	0029      	movs	r1, r5
    2676:	f010 ffb6 	bl	135e6 <net_buf_simple_add_u8>
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    267a:	0021      	movs	r1, r4
    267c:	2200      	movs	r2, #0
    267e:	480b      	ldr	r0, [pc, #44]	; (26ac <set_advertise_enable+0x50>)
    2680:	f7ff ffb0 	bl	25e4 <bt_hci_cmd_send_sync>
    2684:	1e04      	subs	r4, r0, #0
	if (err) {
    2686:	d10e      	bne.n	26a6 <set_advertise_enable+0x4a>
    2688:	4809      	ldr	r0, [pc, #36]	; (26b0 <set_advertise_enable+0x54>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_or(ATOMIC_ELEM(target, bit), mask);
    268a:	306c      	adds	r0, #108	; 0x6c
		return err;
	}

	if (enable) {
    268c:	2d00      	cmp	r5, #0
    268e:	d003      	beq.n	2698 <set_advertise_enable+0x3c>
    2690:	2120      	movs	r1, #32
    2692:	f011 fa68 	bl	13b66 <atomic_or>
    2696:	e006      	b.n	26a6 <set_advertise_enable+0x4a>
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2698:	2121      	movs	r1, #33	; 0x21
    269a:	4249      	negs	r1, r1
    269c:	f011 fa6e 	bl	13b7c <atomic_and>
    26a0:	e001      	b.n	26a6 <set_advertise_enable+0x4a>
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
	if (!buf) {
		return -ENOBUFS;
    26a2:	2437      	movs	r4, #55	; 0x37
    26a4:	4264      	negs	r4, r4
	} else {
		atomic_clear_bit(bt_dev.flags, BT_DEV_ADVERTISING);
	}

	return 0;
}
    26a6:	0020      	movs	r0, r4
    26a8:	bd70      	pop	{r4, r5, r6, pc}
    26aa:	46c0      	nop			; (mov r8, r8)
    26ac:	0000200a 	.word	0x0000200a
    26b0:	200004d0 	.word	0x200004d0

000026b4 <set_random_address>:

static int set_random_address(const bt_addr_t *addr)
{
    26b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#define BT_ADDR_LE_NONE (&(bt_addr_le_t) { 0, \
			 { { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff } } })

static inline int bt_addr_cmp(const bt_addr_t *a, const bt_addr_t *b)
{
	return memcmp(a, b, sizeof(*a));
    26b6:	4e14      	ldr	r6, [pc, #80]	; (2708 <set_random_address+0x54>)
    26b8:	2206      	movs	r2, #6
    26ba:	0037      	movs	r7, r6
    26bc:	3708      	adds	r7, #8
    26be:	0039      	movs	r1, r7
    26c0:	0005      	movs	r5, r0
    26c2:	f7fe fb25 	bl	d10 <memcmp>
    26c6:	1e04      	subs	r4, r0, #0
	int err;

	BT_DBG("%s", bt_addr_str(addr));

	/* Do nothing if we already have the right address */
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    26c8:	d01b      	beq.n	2702 <set_random_address+0x4e>
		return 0;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    26ca:	2106      	movs	r1, #6
    26cc:	480f      	ldr	r0, [pc, #60]	; (270c <set_random_address+0x58>)
    26ce:	f7ff ff63 	bl	2598 <bt_hci_cmd_create>
    26d2:	1e04      	subs	r4, r0, #0
	if (!buf) {
    26d4:	d013      	beq.n	26fe <set_random_address+0x4a>
		return -ENOBUFS;
	}

	net_buf_add_mem(buf, addr, sizeof(*addr));
    26d6:	2206      	movs	r2, #6
    26d8:	0029      	movs	r1, r5
    26da:	3008      	adds	r0, #8
    26dc:	f010 ff79 	bl	135d2 <net_buf_simple_add_mem>

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    26e0:	0021      	movs	r1, r4
    26e2:	2200      	movs	r2, #0
    26e4:	4809      	ldr	r0, [pc, #36]	; (270c <set_random_address+0x58>)
    26e6:	f7ff ff7d 	bl	25e4 <bt_hci_cmd_send_sync>
    26ea:	1e04      	subs	r4, r0, #0
	if (err) {
    26ec:	d109      	bne.n	2702 <set_random_address+0x4e>
	return memcmp(a, b, sizeof(*a));
}

static inline void bt_addr_copy(bt_addr_t *dst, const bt_addr_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    26ee:	2206      	movs	r2, #6
    26f0:	0029      	movs	r1, r5
    26f2:	0038      	movs	r0, r7
    26f4:	f7fe fb21 	bl	d3a <memcpy>
		return err;
	}

	bt_addr_copy(&bt_dev.random_addr.a, addr);
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    26f8:	2301      	movs	r3, #1
    26fa:	71f3      	strb	r3, [r6, #7]
    26fc:	e001      	b.n	2702 <set_random_address+0x4e>
		return 0;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
	if (!buf) {
		return -ENOBUFS;
    26fe:	2437      	movs	r4, #55	; 0x37
    2700:	4264      	negs	r4, r4
	}

	bt_addr_copy(&bt_dev.random_addr.a, addr);
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
	return 0;
}
    2702:	0020      	movs	r0, r4
    2704:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2706:	46c0      	nop			; (mov r8, r8)
    2708:	200004d0 	.word	0x200004d0
    270c:	00002005 	.word	0x00002005

00002710 <le_set_private_addr>:

#if defined(CONFIG_BLUETOOTH_PRIVACY)
/* this function sets new RPA only if current one is no longer valid */
static int le_set_private_addr(void)
{
    2710:	b573      	push	{r0, r1, r4, r5, r6, lr}
	bt_addr_t rpa;
	int err;

	/* check if RPA is valid */
	if (atomic_test_bit(bt_dev.flags, BT_DEV_RPA_VALID)) {
    2712:	4d11      	ldr	r5, [pc, #68]	; (2758 <le_set_private_addr+0x48>)
    2714:	210a      	movs	r1, #10
    2716:	002e      	movs	r6, r5
    2718:	366c      	adds	r6, #108	; 0x6c
    271a:	0030      	movs	r0, r6
    271c:	f7ff fe7a 	bl	2414 <atomic_test_bit>
		return 0;
    2720:	2400      	movs	r4, #0
{
	bt_addr_t rpa;
	int err;

	/* check if RPA is valid */
	if (atomic_test_bit(bt_dev.flags, BT_DEV_RPA_VALID)) {
    2722:	42a0      	cmp	r0, r4
    2724:	d116      	bne.n	2754 <le_set_private_addr+0x44>
		return 0;
	}

	err = bt_rpa_create(bt_dev.irk, &rpa);
    2726:	0028      	movs	r0, r5
    2728:	4669      	mov	r1, sp
    272a:	30dc      	adds	r0, #220	; 0xdc
    272c:	f7ff fde6 	bl	22fc <bt_rpa_create>
    2730:	1e04      	subs	r4, r0, #0
	if (!err) {
    2732:	d109      	bne.n	2748 <le_set_private_addr+0x38>
		err = set_random_address(&rpa);
    2734:	4668      	mov	r0, sp
    2736:	f7ff ffbd 	bl	26b4 <set_random_address>
    273a:	1e04      	subs	r4, r0, #0
		if (!err) {
    273c:	d104      	bne.n	2748 <le_set_private_addr+0x38>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_or(ATOMIC_ELEM(target, bit), mask);
    273e:	2180      	movs	r1, #128	; 0x80
    2740:	0030      	movs	r0, r6
    2742:	00c9      	lsls	r1, r1, #3
    2744:	f011 fa0f 	bl	13b66 <atomic_or>
    2748:	0029      	movs	r1, r5
    274a:	4a04      	ldr	r2, [pc, #16]	; (275c <le_set_private_addr+0x4c>)
    274c:	31ec      	adds	r1, #236	; 0xec
    274e:	4804      	ldr	r0, [pc, #16]	; (2760 <le_set_private_addr+0x50>)
    2750:	f012 fbde 	bl	14f10 <k_delayed_work_submit_to_queue>

	/* restart timer even if failed to set new RPA */
	k_delayed_work_submit(&bt_dev.rpa_update, RPA_TIMEOUT);

	return err;
}
    2754:	0020      	movs	r0, r4
    2756:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
    2758:	200004d0 	.word	0x200004d0
    275c:	000dbba0 	.word	0x000dbba0
    2760:	20002358 	.word	0x20002358

00002764 <rpa_timeout>:

static void rpa_timeout(struct k_work *work)
{
    2764:	b570      	push	{r4, r5, r6, lr}
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2766:	4c0f      	ldr	r4, [pc, #60]	; (27a4 <rpa_timeout+0x40>)
    2768:	490f      	ldr	r1, [pc, #60]	; (27a8 <rpa_timeout+0x44>)
    276a:	0025      	movs	r5, r4
    276c:	356c      	adds	r5, #108	; 0x6c
    276e:	0028      	movs	r0, r5
    2770:	f011 fa04 	bl	13b7c <atomic_and>

	/*
	 * we need to update rpa only if advertising is ongoing, with
	 * BT_DEV_KEEP_ADVERTISING flag is handled in disconnected event
	 */
	if (atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    2774:	2105      	movs	r1, #5
    2776:	0028      	movs	r0, r5
    2778:	f7ff fe4c 	bl	2414 <atomic_test_bit>
    277c:	2800      	cmp	r0, #0
    277e:	d007      	beq.n	2790 <rpa_timeout+0x2c>
		/* make sure new address is used */
		set_advertise_enable(false);
    2780:	2000      	movs	r0, #0
    2782:	f7ff ff6b 	bl	265c <set_advertise_enable>
		le_set_private_addr();
    2786:	f7ff ffc3 	bl	2710 <le_set_private_addr>
		set_advertise_enable(true);
    278a:	2001      	movs	r0, #1
    278c:	f7ff ff66 	bl	265c <set_advertise_enable>
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_ACTIVE_SCAN)) {
    2790:	0020      	movs	r0, r4
    2792:	2109      	movs	r1, #9
    2794:	306c      	adds	r0, #108	; 0x6c
    2796:	f7ff fe3d 	bl	2414 <atomic_test_bit>
    279a:	2800      	cmp	r0, #0
    279c:	d001      	beq.n	27a2 <rpa_timeout+0x3e>
		/* TODO do we need to toggle scan? */
		le_set_private_addr();
    279e:	f7ff ffb7 	bl	2710 <le_set_private_addr>
	}
}
    27a2:	bd70      	pop	{r4, r5, r6, pc}
    27a4:	200004d0 	.word	0x200004d0
    27a8:	fffffbff 	.word	0xfffffbff

000027ac <rpa_timeout>:
#endif
	}
}

static void rpa_timeout(struct k_work *work)
{
    27ac:	b510      	push	{r4, lr}
	ll_rl_rpa_update(true);
    27ae:	2001      	movs	r0, #1
    27b0:	f010 f982 	bl	12ab8 <ll_rl_rpa_update>
	k_delayed_work_submit(&rpa_work, rpa_timeout_ms);
    27b4:	4b03      	ldr	r3, [pc, #12]	; (27c4 <rpa_timeout+0x18>)
    27b6:	4904      	ldr	r1, [pc, #16]	; (27c8 <rpa_timeout+0x1c>)
    27b8:	681a      	ldr	r2, [r3, #0]
    27ba:	4804      	ldr	r0, [pc, #16]	; (27cc <rpa_timeout+0x20>)
    27bc:	f012 fba8 	bl	14f10 <k_delayed_work_submit_to_queue>
}
    27c0:	bd10      	pop	{r4, pc}
    27c2:	46c0      	nop			; (mov r8, r8)
    27c4:	20002340 	.word	0x20002340
    27c8:	200022b8 	.word	0x200022b8
    27cc:	20002358 	.word	0x20002358

000027d0 <bt_hci_stop_scanning>:

	return err;
}

static int bt_hci_stop_scanning(void)
{
    27d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct net_buf *buf, *rsp;
	struct bt_hci_cp_le_set_scan_enable *scan_enable;
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    27d2:	4d1c      	ldr	r5, [pc, #112]	; (2844 <bt_hci_stop_scanning+0x74>)
    27d4:	2107      	movs	r1, #7
    27d6:	356c      	adds	r5, #108	; 0x6c
    27d8:	0028      	movs	r0, r5
    27da:	f7ff fe1b 	bl	2414 <atomic_test_bit>
    27de:	2800      	cmp	r0, #0
    27e0:	d02b      	beq.n	283a <bt_hci_stop_scanning+0x6a>
		return -EALREADY;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE,
    27e2:	2102      	movs	r1, #2
    27e4:	4818      	ldr	r0, [pc, #96]	; (2848 <bt_hci_stop_scanning+0x78>)
    27e6:	f7ff fed7 	bl	2598 <bt_hci_cmd_create>
    27ea:	1e04      	subs	r4, r0, #0
				sizeof(*scan_enable));
	if (!buf) {
    27ec:	d027      	beq.n	283e <bt_hci_stop_scanning+0x6e>
		return -ENOBUFS;
	}

	scan_enable = net_buf_add(buf, sizeof(*scan_enable));
    27ee:	2102      	movs	r1, #2
    27f0:	3008      	adds	r0, #8
    27f2:	f010 fee7 	bl	135c4 <net_buf_simple_add>
	memset(scan_enable, 0, sizeof(*scan_enable));
    27f6:	2202      	movs	r2, #2
    27f8:	2100      	movs	r1, #0
				sizeof(*scan_enable));
	if (!buf) {
		return -ENOBUFS;
	}

	scan_enable = net_buf_add(buf, sizeof(*scan_enable));
    27fa:	0006      	movs	r6, r0
	memset(scan_enable, 0, sizeof(*scan_enable));
    27fc:	f7fe fac7 	bl	d8e <memset>
	scan_enable->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    2800:	2300      	movs	r3, #0
	scan_enable->enable = BT_HCI_LE_SCAN_DISABLE;

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, &rsp);
    2802:	aa01      	add	r2, sp, #4
		return -ENOBUFS;
	}

	scan_enable = net_buf_add(buf, sizeof(*scan_enable));
	memset(scan_enable, 0, sizeof(*scan_enable));
	scan_enable->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    2804:	7073      	strb	r3, [r6, #1]
	scan_enable->enable = BT_HCI_LE_SCAN_DISABLE;
    2806:	7033      	strb	r3, [r6, #0]

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, &rsp);
    2808:	0021      	movs	r1, r4
    280a:	480f      	ldr	r0, [pc, #60]	; (2848 <bt_hci_stop_scanning+0x78>)
    280c:	f7ff feea 	bl	25e4 <bt_hci_cmd_send_sync>
	if (err) {
    2810:	2800      	cmp	r0, #0
    2812:	d116      	bne.n	2842 <bt_hci_stop_scanning+0x72>
		return err;
	}

	/* Update scan state in case of success (0) status */
	err = rsp->data[0];
    2814:	9b01      	ldr	r3, [sp, #4]
    2816:	689b      	ldr	r3, [r3, #8]
    2818:	781c      	ldrb	r4, [r3, #0]
	if (!err) {
    281a:	2c00      	cmp	r4, #0
    281c:	d108      	bne.n	2830 <bt_hci_stop_scanning+0x60>
    281e:	2181      	movs	r1, #129	; 0x81
    2820:	0028      	movs	r0, r5
    2822:	4249      	negs	r1, r1
    2824:	f011 f9aa 	bl	13b7c <atomic_and>
    2828:	4908      	ldr	r1, [pc, #32]	; (284c <bt_hci_stop_scanning+0x7c>)
    282a:	0028      	movs	r0, r5
    282c:	f011 f9a6 	bl	13b7c <atomic_and>
		atomic_clear_bit(bt_dev.flags, BT_DEV_SCANNING);
		atomic_clear_bit(bt_dev.flags, BT_DEV_ACTIVE_SCAN);
	}

	net_buf_unref(rsp);
    2830:	9801      	ldr	r0, [sp, #4]
    2832:	f010 fea5 	bl	13580 <net_buf_unref>
	if (err) {
		return err;
	}

	/* Update scan state in case of success (0) status */
	err = rsp->data[0];
    2836:	0020      	movs	r0, r4
		atomic_clear_bit(bt_dev.flags, BT_DEV_ACTIVE_SCAN);
	}

	net_buf_unref(rsp);

	return err;
    2838:	e003      	b.n	2842 <bt_hci_stop_scanning+0x72>
	struct net_buf *buf, *rsp;
	struct bt_hci_cp_le_set_scan_enable *scan_enable;
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
		return -EALREADY;
    283a:	2045      	movs	r0, #69	; 0x45
    283c:	e000      	b.n	2840 <bt_hci_stop_scanning+0x70>
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE,
				sizeof(*scan_enable));
	if (!buf) {
		return -ENOBUFS;
    283e:	2037      	movs	r0, #55	; 0x37
    2840:	4240      	negs	r0, r0
	}

	net_buf_unref(rsp);

	return err;
}
    2842:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
    2844:	200004d0 	.word	0x200004d0
    2848:	0000200c 	.word	0x0000200c
    284c:	fffffdff 	.word	0xfffffdff

00002850 <set_ad>:

	return true;
}

static int set_ad(u16_t hci_op, const struct bt_data *ad, size_t ad_len)
{
    2850:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2852:	000c      	movs	r4, r1
	struct bt_hci_cp_le_set_adv_data *set_data;
	struct net_buf *buf;
	int i;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    2854:	2120      	movs	r1, #32

	return true;
}

static int set_ad(u16_t hci_op, const struct bt_data *ad, size_t ad_len)
{
    2856:	9000      	str	r0, [sp, #0]
    2858:	9201      	str	r2, [sp, #4]
	struct bt_hci_cp_le_set_adv_data *set_data;
	struct net_buf *buf;
	int i;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    285a:	f7ff fe9d 	bl	2598 <bt_hci_cmd_create>
    285e:	1e06      	subs	r6, r0, #0
	if (!buf) {
    2860:	d037      	beq.n	28d2 <set_ad+0x82>
		return -ENOBUFS;
	}

	set_data = net_buf_add(buf, sizeof(*set_data));
    2862:	2120      	movs	r1, #32
    2864:	3008      	adds	r0, #8
    2866:	f010 fead 	bl	135c4 <net_buf_simple_add>

	memset(set_data, 0, sizeof(*set_data));
    286a:	2220      	movs	r2, #32
    286c:	2100      	movs	r1, #0
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
	if (!buf) {
		return -ENOBUFS;
	}

	set_data = net_buf_add(buf, sizeof(*set_data));
    286e:	0005      	movs	r5, r0

	memset(set_data, 0, sizeof(*set_data));

	for (i = 0; i < ad_len; i++) {
    2870:	2700      	movs	r7, #0
		return -ENOBUFS;
	}

	set_data = net_buf_add(buf, sizeof(*set_data));

	memset(set_data, 0, sizeof(*set_data));
    2872:	f7fe fa8c 	bl	d8e <memset>

	for (i = 0; i < ad_len; i++) {
    2876:	9b01      	ldr	r3, [sp, #4]
    2878:	429f      	cmp	r7, r3
    287a:	d024      	beq.n	28c6 <set_ad+0x76>
		/* Check if ad fit in the remaining buffer */
		if (set_data->len + ad[i].data_len + 2 > 31) {
    287c:	7828      	ldrb	r0, [r5, #0]
    287e:	7863      	ldrb	r3, [r4, #1]
    2880:	181b      	adds	r3, r3, r0
    2882:	3302      	adds	r3, #2
    2884:	2b1f      	cmp	r3, #31
    2886:	dd04      	ble.n	2892 <set_ad+0x42>
			net_buf_unref(buf);
    2888:	0030      	movs	r0, r6
    288a:	f010 fe79 	bl	13580 <net_buf_unref>
			return -EINVAL;
    288e:	2016      	movs	r0, #22
    2890:	e020      	b.n	28d4 <set_ad+0x84>
		}

		set_data->data[set_data->len++] = ad[i].data_len + 1;
    2892:	1c43      	adds	r3, r0, #1
    2894:	b2db      	uxtb	r3, r3
    2896:	702b      	strb	r3, [r5, #0]
    2898:	7862      	ldrb	r2, [r4, #1]
    289a:	1829      	adds	r1, r5, r0
		set_data->data[set_data->len++] = ad[i].type;
    289c:	3002      	adds	r0, #2
		if (set_data->len + ad[i].data_len + 2 > 31) {
			net_buf_unref(buf);
			return -EINVAL;
		}

		set_data->data[set_data->len++] = ad[i].data_len + 1;
    289e:	3201      	adds	r2, #1
		set_data->data[set_data->len++] = ad[i].type;
    28a0:	b2c0      	uxtb	r0, r0
		if (set_data->len + ad[i].data_len + 2 > 31) {
			net_buf_unref(buf);
			return -EINVAL;
		}

		set_data->data[set_data->len++] = ad[i].data_len + 1;
    28a2:	704a      	strb	r2, [r1, #1]
		set_data->data[set_data->len++] = ad[i].type;
    28a4:	7028      	strb	r0, [r5, #0]
    28a6:	7822      	ldrb	r2, [r4, #0]
    28a8:	18eb      	adds	r3, r5, r3
    28aa:	705a      	strb	r2, [r3, #1]

		memcpy(&set_data->data[set_data->len], ad[i].data,
    28ac:	1828      	adds	r0, r5, r0
    28ae:	7862      	ldrb	r2, [r4, #1]
    28b0:	6861      	ldr	r1, [r4, #4]
    28b2:	3001      	adds	r0, #1
    28b4:	f7fe fa41 	bl	d3a <memcpy>
		       ad[i].data_len);
		set_data->len += ad[i].data_len;
    28b8:	7863      	ldrb	r3, [r4, #1]
    28ba:	782a      	ldrb	r2, [r5, #0]

	set_data = net_buf_add(buf, sizeof(*set_data));

	memset(set_data, 0, sizeof(*set_data));

	for (i = 0; i < ad_len; i++) {
    28bc:	3701      	adds	r7, #1
		set_data->data[set_data->len++] = ad[i].data_len + 1;
		set_data->data[set_data->len++] = ad[i].type;

		memcpy(&set_data->data[set_data->len], ad[i].data,
		       ad[i].data_len);
		set_data->len += ad[i].data_len;
    28be:	18d3      	adds	r3, r2, r3
    28c0:	702b      	strb	r3, [r5, #0]
    28c2:	3408      	adds	r4, #8
    28c4:	e7d7      	b.n	2876 <set_ad+0x26>
	}

	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    28c6:	2200      	movs	r2, #0
    28c8:	0031      	movs	r1, r6
    28ca:	9800      	ldr	r0, [sp, #0]
    28cc:	f7ff fe8a 	bl	25e4 <bt_hci_cmd_send_sync>
    28d0:	e001      	b.n	28d6 <set_ad+0x86>
	struct net_buf *buf;
	int i;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
	if (!buf) {
		return -ENOBUFS;
    28d2:	2037      	movs	r0, #55	; 0x37
    28d4:	4240      	negs	r0, r0
		       ad[i].data_len);
		set_data->len += ad[i].data_len;
	}

	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
}
    28d6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

000028d8 <bt_le_conn_params_valid>:
done:
	bt_conn_unref(conn);
}

bool bt_le_conn_params_valid(const struct bt_le_conn_param *param)
{
    28d8:	b530      	push	{r4, r5, lr}
	/* All limits according to BT Core spec 5.0 [Vol 2, Part E, 7.8.12] */

	if (param->interval_min > param->interval_max ||
    28da:	8801      	ldrh	r1, [r0, #0]
    28dc:	8843      	ldrh	r3, [r0, #2]
done:
	bt_conn_unref(conn);
}

bool bt_le_conn_params_valid(const struct bt_le_conn_param *param)
{
    28de:	0002      	movs	r2, r0
	/* All limits according to BT Core spec 5.0 [Vol 2, Part E, 7.8.12] */

	if (param->interval_min > param->interval_max ||
	    param->interval_min < 6 || param->interval_max > 3200) {
		return false;
    28e0:	2000      	movs	r0, #0

bool bt_le_conn_params_valid(const struct bt_le_conn_param *param)
{
	/* All limits according to BT Core spec 5.0 [Vol 2, Part E, 7.8.12] */

	if (param->interval_min > param->interval_max ||
    28e2:	4299      	cmp	r1, r3
    28e4:	d819      	bhi.n	291a <bt_le_conn_params_valid+0x42>
    28e6:	2905      	cmp	r1, #5
    28e8:	d917      	bls.n	291a <bt_le_conn_params_valid+0x42>
	    param->interval_min < 6 || param->interval_max > 3200) {
    28ea:	21c8      	movs	r1, #200	; 0xc8
    28ec:	0109      	lsls	r1, r1, #4
    28ee:	428b      	cmp	r3, r1
    28f0:	d813      	bhi.n	291a <bt_le_conn_params_valid+0x42>
		return false;
	}

	if (param->latency > 499) {
    28f2:	24f4      	movs	r4, #244	; 0xf4
    28f4:	8891      	ldrh	r1, [r2, #4]
    28f6:	34ff      	adds	r4, #255	; 0xff
    28f8:	42a1      	cmp	r1, r4
    28fa:	d80e      	bhi.n	291a <bt_le_conn_params_valid+0x42>
		return false;
	}

	if (param->timeout < 10 || param->timeout > 3200 ||
    28fc:	88d2      	ldrh	r2, [r2, #6]
    28fe:	4d07      	ldr	r5, [pc, #28]	; (291c <bt_le_conn_params_valid+0x44>)
    2900:	0014      	movs	r4, r2
    2902:	3c0a      	subs	r4, #10
    2904:	b2a4      	uxth	r4, r4
    2906:	42ac      	cmp	r4, r5
    2908:	d807      	bhi.n	291a <bt_le_conn_params_valid+0x42>
    290a:	3101      	adds	r1, #1
    290c:	434b      	muls	r3, r1
    290e:	0092      	lsls	r2, r2, #2
    2910:	2101      	movs	r1, #1
    2912:	429a      	cmp	r2, r3
    2914:	dc00      	bgt.n	2918 <bt_le_conn_params_valid+0x40>
    2916:	1c01      	adds	r1, r0, #0
    2918:	b2c8      	uxtb	r0, r1
	     ((1 + param->latency) * param->interval_max))) {
		return false;
	}

	return true;
}
    291a:	bd30      	pop	{r4, r5, pc}
    291c:	00000c76 	.word	0x00000c76

00002920 <bt_le_scan_update>:

	return err;
}

int bt_le_scan_update(bool fast_scan)
{
    2920:	b510      	push	{r4, lr}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    2922:	4c09      	ldr	r4, [pc, #36]	; (2948 <bt_le_scan_update+0x28>)
    2924:	2108      	movs	r1, #8
    2926:	346c      	adds	r4, #108	; 0x6c
    2928:	0020      	movs	r0, r4
    292a:	f7ff fd73 	bl	2414 <atomic_test_bit>
    292e:	2800      	cmp	r0, #0
    2930:	d001      	beq.n	2936 <bt_le_scan_update+0x16>
		return 0;
    2932:	2000      	movs	r0, #0
    2934:	e007      	b.n	2946 <bt_le_scan_update+0x26>
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    2936:	2107      	movs	r1, #7
    2938:	0020      	movs	r0, r4
    293a:	f7ff fd6b 	bl	2414 <atomic_test_bit>
    293e:	2800      	cmp	r0, #0
    2940:	d0f7      	beq.n	2932 <bt_le_scan_update+0x12>
		int err;

		err = bt_hci_stop_scanning();
    2942:	f7ff ff45 	bl	27d0 <bt_hci_stop_scanning>
		return start_le_scan(BT_HCI_LE_SCAN_PASSIVE, interval, window,
				     0x01);
	}

	return 0;
}
    2946:	bd10      	pop	{r4, pc}
    2948:	200004d0 	.word	0x200004d0

0000294c <bt_addr_le_create_static>:
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
}

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
    294c:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
    294e:	b510      	push	{r4, lr}

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;

	return bt_rand(addr->a.val, 6);
    2950:	2106      	movs	r1, #6

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
    2952:	0004      	movs	r4, r0
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
}

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
    2954:	7003      	strb	r3, [r0, #0]

	return bt_rand(addr->a.val, 6);
    2956:	18c0      	adds	r0, r0, r3
    2958:	f009 fbc2 	bl	c0e0 <bt_rand>
int bt_addr_le_create_static(bt_addr_le_t *addr)
{
	int err;

	err = create_random_addr(addr);
	if (err) {
    295c:	2800      	cmp	r0, #0
    295e:	d104      	bne.n	296a <bt_addr_le_create_static+0x1e>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
    2960:	2240      	movs	r2, #64	; 0x40
    2962:	79a3      	ldrb	r3, [r4, #6]
    2964:	4252      	negs	r2, r2
    2966:	4313      	orrs	r3, r2
    2968:	71a3      	strb	r3, [r4, #6]

	return 0;
}
    296a:	bd10      	pop	{r4, pc}

0000296c <bt_init>:
	return 0;
}
#endif /* CONFIG_BLUETOOTH_PRIVACY */

static int bt_init(void)
{
    296c:	b5f0      	push	{r4, r5, r6, r7, lr}
    296e:	b097      	sub	sp, #92	; 0x5c
{
	struct net_buf *rsp;
	int err;

	/* Send HCI_RESET */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    2970:	ae0f      	add	r6, sp, #60	; 0x3c
    2972:	0032      	movs	r2, r6
    2974:	2100      	movs	r1, #0
    2976:	48d0      	ldr	r0, [pc, #832]	; (2cb8 <bt_init+0x34c>)
    2978:	f7ff fe34 	bl	25e4 <bt_hci_cmd_send_sync>
	if (err) {
    297c:	1e05      	subs	r5, r0, #0
    297e:	d167      	bne.n	2a50 <bt_init+0xe4>
    2980:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	}
}

static void hci_reset_complete(struct net_buf *buf)
{
	u8_t status = buf->data[0];
    2982:	689b      	ldr	r3, [r3, #8]

	BT_DBG("status %u", status);

	if (status) {
    2984:	781b      	ldrb	r3, [r3, #0]
    2986:	2b00      	cmp	r3, #0
    2988:	d106      	bne.n	2998 <bt_init+0x2c>
	discovery_results_size = 0;
	discovery_results_count = 0;
#endif /* CONFIG_BLUETOOTH_BREDR */

	/* we only allow to enable once so this bit must be keep set */
	atomic_set(bt_dev.flags, BIT(BT_DEV_ENABLE));
    298a:	48cc      	ldr	r0, [pc, #816]	; (2cbc <bt_init+0x350>)

	if (status) {
		return;
	}

	scan_dev_found_cb = NULL;
    298c:	4acc      	ldr	r2, [pc, #816]	; (2cc0 <bt_init+0x354>)
	discovery_results_size = 0;
	discovery_results_count = 0;
#endif /* CONFIG_BLUETOOTH_BREDR */

	/* we only allow to enable once so this bit must be keep set */
	atomic_set(bt_dev.flags, BIT(BT_DEV_ENABLE));
    298e:	2101      	movs	r1, #1
    2990:	306c      	adds	r0, #108	; 0x6c

	if (status) {
		return;
	}

	scan_dev_found_cb = NULL;
    2992:	6013      	str	r3, [r2, #0]
	discovery_results_size = 0;
	discovery_results_count = 0;
#endif /* CONFIG_BLUETOOTH_BREDR */

	/* we only allow to enable once so this bit must be keep set */
	atomic_set(bt_dev.flags, BIT(BT_DEV_ENABLE));
    2994:	f011 f8dd 	bl	13b52 <atomic_set>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
	if (err) {
		return err;
	}
	hci_reset_complete(rsp);
	net_buf_unref(rsp);
    2998:	980f      	ldr	r0, [sp, #60]	; 0x3c
    299a:	f010 fdf1 	bl	13580 <net_buf_unref>

	/* Read Local Supported Features */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    299e:	0032      	movs	r2, r6
    29a0:	2100      	movs	r1, #0
    29a2:	48c8      	ldr	r0, [pc, #800]	; (2cc4 <bt_init+0x358>)
    29a4:	f7ff fe1e 	bl	25e4 <bt_hci_cmd_send_sync>
    29a8:	0007      	movs	r7, r0
	if (err) {
    29aa:	1e05      	subs	r5, r0, #0
    29ac:	d150      	bne.n	2a50 <bt_init+0xe4>
{
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;

	BT_DBG("status %u", rp->status);

	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    29ae:	4cc3      	ldr	r4, [pc, #780]	; (2cbc <bt_init+0x350>)
    29b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    29b2:	0020      	movs	r0, r4
    29b4:	6899      	ldr	r1, [r3, #8]
    29b6:	2208      	movs	r2, #8
    29b8:	3101      	adds	r1, #1
    29ba:	3016      	adds	r0, #22
    29bc:	f7fe f9bd 	bl	d3a <memcpy>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
	if (err) {
		return err;
	}
	read_local_features_complete(rsp);
	net_buf_unref(rsp);
    29c0:	980f      	ldr	r0, [sp, #60]	; 0x3c
    29c2:	f010 fddd 	bl	13580 <net_buf_unref>

	/* Read Local Version Information */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    29c6:	0039      	movs	r1, r7
    29c8:	0032      	movs	r2, r6
    29ca:	48bf      	ldr	r0, [pc, #764]	; (2cc8 <bt_init+0x35c>)
    29cc:	f7ff fe0a 	bl	25e4 <bt_hci_cmd_send_sync>
    29d0:	0007      	movs	r7, r0
				   &rsp);
	if (err) {
    29d2:	1e05      	subs	r5, r0, #0
    29d4:	d13c      	bne.n	2a50 <bt_init+0xe4>
		return err;
	}
	read_local_ver_complete(rsp);
    29d6:	980f      	ldr	r0, [sp, #60]	; 0x3c
    29d8:	6883      	ldr	r3, [r0, #8]
{
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;

	BT_DBG("status %u", rp->status);

	bt_dev.hci_version = rp->hci_version;
    29da:	785a      	ldrb	r2, [r3, #1]
    29dc:	73a2      	strb	r2, [r4, #14]
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    29de:	78da      	ldrb	r2, [r3, #3]
    29e0:	7899      	ldrb	r1, [r3, #2]
    29e2:	0212      	lsls	r2, r2, #8
    29e4:	430a      	orrs	r2, r1
    29e6:	8222      	strh	r2, [r4, #16]
	bt_dev.lmp_version = rp->lmp_version;
    29e8:	791a      	ldrb	r2, [r3, #4]
    29ea:	73e2      	strb	r2, [r4, #15]
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    29ec:	7a1a      	ldrb	r2, [r3, #8]
    29ee:	79d9      	ldrb	r1, [r3, #7]
    29f0:	0212      	lsls	r2, r2, #8
    29f2:	430a      	orrs	r2, r1
    29f4:	8262      	strh	r2, [r4, #18]
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    29f6:	795a      	ldrb	r2, [r3, #5]
    29f8:	799b      	ldrb	r3, [r3, #6]
    29fa:	021b      	lsls	r3, r3, #8
    29fc:	4313      	orrs	r3, r2
    29fe:	82a3      	strh	r3, [r4, #20]
				   &rsp);
	if (err) {
		return err;
	}
	read_local_ver_complete(rsp);
	net_buf_unref(rsp);
    2a00:	f010 fdbe 	bl	13580 <net_buf_unref>

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    2a04:	0039      	movs	r1, r7
    2a06:	0032      	movs	r2, r6
    2a08:	48b0      	ldr	r0, [pc, #704]	; (2ccc <bt_init+0x360>)
    2a0a:	f7ff fdeb 	bl	25e4 <bt_hci_cmd_send_sync>
    2a0e:	0007      	movs	r7, r0
	if (err) {
    2a10:	1e05      	subs	r5, r0, #0
    2a12:	d11d      	bne.n	2a50 <bt_init+0xe4>
    2a14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    2a16:	2206      	movs	r2, #6
{
	struct bt_hci_rp_read_bd_addr *rp = (void *)buf->data;

	BT_DBG("status %u", rp->status);

	bt_addr_copy(&bt_dev.id_addr.a, &rp->bdaddr);
    2a18:	6899      	ldr	r1, [r3, #8]
    2a1a:	1c60      	adds	r0, r4, #1
    2a1c:	3101      	adds	r1, #1
    2a1e:	f7fe f98c 	bl	d3a <memcpy>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
	if (err) {
		return err;
	}
	read_bdaddr_complete(rsp);
	net_buf_unref(rsp);
    2a22:	980f      	ldr	r0, [sp, #60]	; 0x3c
	struct bt_hci_rp_read_bd_addr *rp = (void *)buf->data;

	BT_DBG("status %u", rp->status);

	bt_addr_copy(&bt_dev.id_addr.a, &rp->bdaddr);
	bt_dev.id_addr.type = BT_ADDR_LE_PUBLIC;
    2a24:	7027      	strb	r7, [r4, #0]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
	if (err) {
		return err;
	}
	read_bdaddr_complete(rsp);
	net_buf_unref(rsp);
    2a26:	f010 fdab 	bl	13580 <net_buf_unref>

	/* Read Local Supported Commands */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    2a2a:	0032      	movs	r2, r6
    2a2c:	0039      	movs	r1, r7
    2a2e:	48a8      	ldr	r0, [pc, #672]	; (2cd0 <bt_init+0x364>)
    2a30:	f7ff fdd8 	bl	25e4 <bt_hci_cmd_send_sync>
				   &rsp);
	if (err) {
    2a34:	1e05      	subs	r5, r0, #0
    2a36:	d10b      	bne.n	2a50 <bt_init+0xe4>
{
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;

	BT_DBG("status %u", rp->status);

	memcpy(bt_dev.supported_commands, rp->commands,
    2a38:	0020      	movs	r0, r4
    2a3a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    2a3c:	2240      	movs	r2, #64	; 0x40
    2a3e:	6899      	ldr	r1, [r3, #8]
    2a40:	301e      	adds	r0, #30
    2a42:	3101      	adds	r1, #1
    2a44:	f7fe f979 	bl	d3a <memcpy>
				   &rsp);
	if (err) {
		return err;
	}
	read_supported_commands_complete(rsp);
	net_buf_unref(rsp);
    2a48:	980f      	ldr	r0, [sp, #60]	; 0x3c
    2a4a:	f010 fd99 	bl	13580 <net_buf_unref>
    2a4e:	e002      	b.n	2a56 <bt_init+0xea>
static int hci_init(void)
{
	int err;

	err = common_init();
	if (err) {
    2a50:	2d00      	cmp	r5, #0
    2a52:	d000      	beq.n	2a56 <bt_init+0xea>
    2a54:	e2aa      	b.n	2fac <bt_init+0x640>
	struct net_buf *buf;
	struct net_buf *rsp;
	int err;

	/* For now we only support LE capable controllers */
	if (!BT_FEAT_LE(bt_dev.features)) {
    2a56:	4c99      	ldr	r4, [pc, #612]	; (2cbc <bt_init+0x350>)
    2a58:	7ea3      	ldrb	r3, [r4, #26]
    2a5a:	065b      	lsls	r3, r3, #25
    2a5c:	d40b      	bmi.n	2a76 <bt_init+0x10a>
		BT_ERR("Non-LE capable controller detected!");
    2a5e:	4b9d      	ldr	r3, [pc, #628]	; (2cd4 <bt_init+0x368>)
    2a60:	4a9d      	ldr	r2, [pc, #628]	; (2cd8 <bt_init+0x36c>)
    2a62:	9301      	str	r3, [sp, #4]
    2a64:	4b9d      	ldr	r3, [pc, #628]	; (2cdc <bt_init+0x370>)
    2a66:	499e      	ldr	r1, [pc, #632]	; (2ce0 <bt_init+0x374>)
    2a68:	9300      	str	r3, [sp, #0]
    2a6a:	489e      	ldr	r0, [pc, #632]	; (2ce4 <bt_init+0x378>)
    2a6c:	4b9e      	ldr	r3, [pc, #632]	; (2ce8 <bt_init+0x37c>)
    2a6e:	f7fe ff87 	bl	1980 <printk>
		return -ENODEV;
    2a72:	2513      	movs	r5, #19
    2a74:	e045      	b.n	2b02 <bt_init+0x196>
	}

	/* Read Low Energy Supported Features */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    2a76:	aa0d      	add	r2, sp, #52	; 0x34
    2a78:	2100      	movs	r1, #0
    2a7a:	489c      	ldr	r0, [pc, #624]	; (2cec <bt_init+0x380>)
    2a7c:	f7ff fdb2 	bl	25e4 <bt_hci_cmd_send_sync>
    2a80:	0007      	movs	r7, r0
				   &rsp);
	if (err) {
    2a82:	1e05      	subs	r5, r0, #0
    2a84:	d000      	beq.n	2a88 <bt_init+0x11c>
    2a86:	e0e1      	b.n	2c4c <bt_init+0x2e0>
{
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;

	BT_DBG("status %u", rp->status);

	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    2a88:	0020      	movs	r0, r4
    2a8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    2a8c:	2208      	movs	r2, #8
    2a8e:	6899      	ldr	r1, [r3, #8]
    2a90:	3070      	adds	r0, #112	; 0x70
    2a92:	3101      	adds	r1, #1
    2a94:	f7fe f951 	bl	d3a <memcpy>
				   &rsp);
	if (err) {
		return err;
	}
	read_le_features_complete(rsp);
	net_buf_unref(rsp);
    2a98:	980d      	ldr	r0, [sp, #52]	; 0x34
    2a9a:	f010 fd71 	bl	13580 <net_buf_unref>

#if defined(CONFIG_BLUETOOTH_CONN)
	/* Read LE Buffer Size */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    2a9e:	aa0d      	add	r2, sp, #52	; 0x34
    2aa0:	0039      	movs	r1, r7
    2aa2:	4893      	ldr	r0, [pc, #588]	; (2cf0 <bt_init+0x384>)
    2aa4:	f7ff fd9e 	bl	25e4 <bt_hci_cmd_send_sync>
				   NULL, &rsp);
	if (err) {
    2aa8:	1e05      	subs	r5, r0, #0
    2aaa:	d000      	beq.n	2aae <bt_init+0x142>
    2aac:	e0ce      	b.n	2c4c <bt_init+0x2e0>
    2aae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    2ab0:	6899      	ldr	r1, [r3, #8]
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
	u8_t le_max_num;

	BT_DBG("status %u", rp->status);

	bt_dev.le.mtu = sys_le16_to_cpu(rp->le_max_len);
    2ab2:	788b      	ldrb	r3, [r1, #2]
    2ab4:	784a      	ldrb	r2, [r1, #1]
    2ab6:	021b      	lsls	r3, r3, #8
    2ab8:	4313      	orrs	r3, r2
    2aba:	0022      	movs	r2, r4
    2abc:	3280      	adds	r2, #128	; 0x80
    2abe:	8013      	strh	r3, [r2, #0]
	if (!bt_dev.le.mtu) {
    2ac0:	2b00      	cmp	r3, #0
    2ac2:	d00a      	beq.n	2ada <bt_init+0x16e>
	}

	BT_DBG("ACL LE buffers: pkts %u mtu %u", rp->le_max_num, bt_dev.le.mtu);

	le_max_num = min(rp->le_max_num, CONFIG_BLUETOOTH_CONN_TX_MAX);
	k_sem_init(&bt_dev.le.pkts, le_max_num, le_max_num);
    2ac4:	78cb      	ldrb	r3, [r1, #3]
    2ac6:	1c19      	adds	r1, r3, #0
    2ac8:	2b02      	cmp	r3, #2
    2aca:	d900      	bls.n	2ace <bt_init+0x162>
    2acc:	2102      	movs	r1, #2
    2ace:	0020      	movs	r0, r4
    2ad0:	b2c9      	uxtb	r1, r1
    2ad2:	3084      	adds	r0, #132	; 0x84
    2ad4:	000a      	movs	r2, r1
    2ad6:	f011 fef9 	bl	148cc <k_sem_init>
				   NULL, &rsp);
	if (err) {
		return err;
	}
	le_read_buffer_size_complete(rsp);
	net_buf_unref(rsp);
    2ada:	980d      	ldr	r0, [sp, #52]	; 0x34
    2adc:	f010 fd50 	bl	13580 <net_buf_unref>
#endif

	if (BT_FEAT_BREDR(bt_dev.features)) {
    2ae0:	2320      	movs	r3, #32
    2ae2:	7ea5      	ldrb	r5, [r4, #26]
    2ae4:	401d      	ands	r5, r3
    2ae6:	d005      	beq.n	2af4 <bt_init+0x188>
			return err;
		}
	}

	/* Read LE Supported States */
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    2ae8:	0023      	movs	r3, r4
    2aea:	333a      	adds	r3, #58	; 0x3a
    2aec:	781b      	ldrb	r3, [r3, #0]
    2aee:	071b      	lsls	r3, r3, #28
    2af0:	d53e      	bpl.n	2b70 <bt_init+0x204>
    2af2:	e017      	b.n	2b24 <bt_init+0x1b8>
	le_read_buffer_size_complete(rsp);
	net_buf_unref(rsp);
#endif

	if (BT_FEAT_BREDR(bt_dev.features)) {
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    2af4:	2102      	movs	r1, #2
    2af6:	487f      	ldr	r0, [pc, #508]	; (2cf4 <bt_init+0x388>)
    2af8:	f7ff fd4e 	bl	2598 <bt_hci_cmd_create>
    2afc:	1e07      	subs	r7, r0, #0
					sizeof(*cp_le));
		if (!buf) {
    2afe:	d102      	bne.n	2b06 <bt_init+0x19a>
			return -ENOBUFS;
    2b00:	2537      	movs	r5, #55	; 0x37
    2b02:	426d      	negs	r5, r5
    2b04:	e252      	b.n	2fac <bt_init+0x640>
		}

		cp_le = net_buf_add(buf, sizeof(*cp_le));
    2b06:	2102      	movs	r1, #2
    2b08:	3008      	adds	r0, #8
    2b0a:	f010 fd5b 	bl	135c4 <net_buf_simple_add>

		/* Explicitly enable LE for dual-mode controllers */
		cp_le->le = 0x01;
    2b0e:	2301      	movs	r3, #1
		cp_le->simul = 0x00;
    2b10:	7045      	strb	r5, [r0, #1]
		}

		cp_le = net_buf_add(buf, sizeof(*cp_le));

		/* Explicitly enable LE for dual-mode controllers */
		cp_le->le = 0x01;
    2b12:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    2b14:	002a      	movs	r2, r5
    2b16:	0039      	movs	r1, r7
    2b18:	4876      	ldr	r0, [pc, #472]	; (2cf4 <bt_init+0x388>)
    2b1a:	f7ff fd63 	bl	25e4 <bt_hci_cmd_send_sync>
					   NULL);
		if (err) {
    2b1e:	2800      	cmp	r0, #0
    2b20:	d0e2      	beq.n	2ae8 <bt_init+0x17c>
    2b22:	e092      	b.n	2c4a <bt_init+0x2de>
		}
	}

	/* Read LE Supported States */
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    2b24:	aa0d      	add	r2, sp, #52	; 0x34
    2b26:	2100      	movs	r1, #0
    2b28:	4873      	ldr	r0, [pc, #460]	; (2cf8 <bt_init+0x38c>)
    2b2a:	f7ff fd5b 	bl	25e4 <bt_hci_cmd_send_sync>
					   &rsp);
		if (err) {
    2b2e:	1e05      	subs	r5, r0, #0
    2b30:	d000      	beq.n	2b34 <bt_init+0x1c8>
    2b32:	e08b      	b.n	2c4c <bt_init+0x2e0>
			return err;
		}
		le_read_supp_states_complete(rsp);
    2b34:	980d      	ldr	r0, [sp, #52]	; 0x34
 *
 *  @return 64-bit integer in host endianness.
 */
static inline u64_t sys_get_le64(const u8_t src[8])
{
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    2b36:	6883      	ldr	r3, [r0, #8]
    2b38:	1c5d      	adds	r5, r3, #1
    2b3a:	7859      	ldrb	r1, [r3, #1]
    2b3c:	789b      	ldrb	r3, [r3, #2]
    2b3e:	78af      	ldrb	r7, [r5, #2]
    2b40:	021b      	lsls	r3, r3, #8
    2b42:	430b      	orrs	r3, r1
    2b44:	043f      	lsls	r7, r7, #16
    2b46:	001a      	movs	r2, r3
    2b48:	003b      	movs	r3, r7
    2b4a:	78ef      	ldrb	r7, [r5, #3]
    2b4c:	4313      	orrs	r3, r2
    2b4e:	063f      	lsls	r7, r7, #24
    2b50:	796a      	ldrb	r2, [r5, #5]
    2b52:	431f      	orrs	r7, r3
    2b54:	792b      	ldrb	r3, [r5, #4]
    2b56:	0212      	lsls	r2, r2, #8
    2b58:	431a      	orrs	r2, r3
    2b5a:	79ab      	ldrb	r3, [r5, #6]
    2b5c:	041b      	lsls	r3, r3, #16
    2b5e:	4313      	orrs	r3, r2
    2b60:	001a      	movs	r2, r3
    2b62:	79eb      	ldrb	r3, [r5, #7]
{
	struct bt_hci_rp_le_read_supp_states *rp = (void *)buf->data;

	BT_DBG("status %u", rp->status);

	bt_dev.le.states = sys_get_le64(rp->le_states);
    2b64:	67a7      	str	r7, [r4, #120]	; 0x78
    2b66:	061b      	lsls	r3, r3, #24
    2b68:	4313      	orrs	r3, r2
    2b6a:	67e3      	str	r3, [r4, #124]	; 0x7c
					   &rsp);
		if (err) {
			return err;
		}
		le_read_supp_states_complete(rsp);
		net_buf_unref(rsp);
    2b6c:	f010 fd08 	bl	13580 <net_buf_unref>
	}

	if (IS_ENABLED(CONFIG_BLUETOOTH_CONN) &&
	    BT_FEAT_LE_DLE(bt_dev.le.features)) {
    2b70:	0023      	movs	r3, r4
    2b72:	3370      	adds	r3, #112	; 0x70
		}
		le_read_supp_states_complete(rsp);
		net_buf_unref(rsp);
	}

	if (IS_ENABLED(CONFIG_BLUETOOTH_CONN) &&
    2b74:	781b      	ldrb	r3, [r3, #0]
    2b76:	069b      	lsls	r3, r3, #26
    2b78:	d531      	bpl.n	2bde <bt_init+0x272>
		struct bt_hci_cp_le_write_default_data_len *cp;
		struct bt_hci_rp_le_read_max_data_len *rp;
		struct net_buf *buf, *rsp;
		u16_t tx_octets, tx_time;

		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL,
    2b7a:	0032      	movs	r2, r6
    2b7c:	2100      	movs	r1, #0
    2b7e:	485f      	ldr	r0, [pc, #380]	; (2cfc <bt_init+0x390>)
    2b80:	f7ff fd30 	bl	25e4 <bt_hci_cmd_send_sync>
    2b84:	1e05      	subs	r5, r0, #0
					   &rsp);
		if (err) {
    2b86:	d161      	bne.n	2c4c <bt_init+0x2e0>
			return err;
		}

		rp = (void *)rsp->data;
    2b88:	980f      	ldr	r0, [sp, #60]	; 0x3c
    2b8a:	6883      	ldr	r3, [r0, #8]
		tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    2b8c:	789a      	ldrb	r2, [r3, #2]
    2b8e:	7859      	ldrb	r1, [r3, #1]
    2b90:	0212      	lsls	r2, r2, #8
    2b92:	430a      	orrs	r2, r1
    2b94:	9206      	str	r2, [sp, #24]
		tx_time = sys_le16_to_cpu(rp->max_tx_time);
    2b96:	78da      	ldrb	r2, [r3, #3]
    2b98:	791b      	ldrb	r3, [r3, #4]
    2b9a:	021b      	lsls	r3, r3, #8
    2b9c:	4313      	orrs	r3, r2
    2b9e:	9307      	str	r3, [sp, #28]
		net_buf_unref(rsp);
    2ba0:	f010 fcee 	bl	13580 <net_buf_unref>

		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    2ba4:	2104      	movs	r1, #4
    2ba6:	4856      	ldr	r0, [pc, #344]	; (2d00 <bt_init+0x394>)
    2ba8:	f7ff fcf6 	bl	2598 <bt_hci_cmd_create>
    2bac:	1e07      	subs	r7, r0, #0
					sizeof(*cp));
		if (!buf) {
    2bae:	d0a7      	beq.n	2b00 <bt_init+0x194>
			return -ENOBUFS;
		}

		cp = net_buf_add(buf, sizeof(*cp));
    2bb0:	2104      	movs	r1, #4
    2bb2:	3008      	adds	r0, #8
    2bb4:	f010 fd06 	bl	135c4 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    2bb8:	466b      	mov	r3, sp
    2bba:	7e1b      	ldrb	r3, [r3, #24]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);

		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    2bbc:	002a      	movs	r2, r5
		if (!buf) {
			return -ENOBUFS;
		}

		cp = net_buf_add(buf, sizeof(*cp));
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    2bbe:	7003      	strb	r3, [r0, #0]
    2bc0:	9b06      	ldr	r3, [sp, #24]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);

		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    2bc2:	0039      	movs	r1, r7
		if (!buf) {
			return -ENOBUFS;
		}

		cp = net_buf_add(buf, sizeof(*cp));
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    2bc4:	0a1b      	lsrs	r3, r3, #8
    2bc6:	7043      	strb	r3, [r0, #1]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    2bc8:	466b      	mov	r3, sp
    2bca:	7f1b      	ldrb	r3, [r3, #28]
    2bcc:	7083      	strb	r3, [r0, #2]
    2bce:	9b07      	ldr	r3, [sp, #28]
    2bd0:	0a1b      	lsrs	r3, r3, #8
    2bd2:	70c3      	strb	r3, [r0, #3]

		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    2bd4:	484a      	ldr	r0, [pc, #296]	; (2d00 <bt_init+0x394>)
    2bd6:	f7ff fd05 	bl	25e4 <bt_hci_cmd_send_sync>
					   buf, NULL);
		if (err) {
    2bda:	2800      	cmp	r0, #0
    2bdc:	d135      	bne.n	2c4a <bt_init+0x2de>
	struct bt_hci_cp_le_set_event_mask *cp_mask;
	struct net_buf *buf;
	u64_t mask = 0;

	/* Set LE event mask */
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    2bde:	2108      	movs	r1, #8
    2be0:	4848      	ldr	r0, [pc, #288]	; (2d04 <bt_init+0x398>)
    2be2:	f7ff fcd9 	bl	2598 <bt_hci_cmd_create>
    2be6:	1e05      	subs	r5, r0, #0
	if (!buf) {
    2be8:	d08a      	beq.n	2b00 <bt_init+0x194>
		return -ENOBUFS;
	}

	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
    2bea:	2108      	movs	r1, #8
    2bec:	1840      	adds	r0, r0, r1
    2bee:	f010 fce9 	bl	135c4 <net_buf_simple_add>

	if (IS_ENABLED(CONFIG_BLUETOOTH_CONN)) {
		mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
		mask |= BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE;
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    2bf2:	0023      	movs	r3, r4
    2bf4:	3370      	adds	r3, #112	; 0x70
    2bf6:	7819      	ldrb	r1, [r3, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
	if (!buf) {
		return -ENOBUFS;
	}

	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
    2bf8:	0002      	movs	r2, r0
	mask |= BT_EVT_MASK_LE_ADVERTISING_REPORT;

	if (IS_ENABLED(CONFIG_BLUETOOTH_CONN)) {
		mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
		mask |= BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE;
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
    2bfa:	230f      	movs	r3, #15
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    2bfc:	0788      	lsls	r0, r1, #30
    2bfe:	d500      	bpl.n	2c02 <bt_init+0x296>
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    2c00:	3320      	adds	r3, #32
		}
		if (BT_FEAT_LE_DLE(bt_dev.le.features)) {
    2c02:	0688      	lsls	r0, r1, #26
    2c04:	d501      	bpl.n	2c0a <bt_init+0x29e>
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
    2c06:	2040      	movs	r0, #64	; 0x40
    2c08:	4303      	orrs	r3, r0
		}
		if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) ||
    2c0a:	0020      	movs	r0, r4
    2c0c:	3071      	adds	r0, #113	; 0x71
    2c0e:	7807      	ldrb	r7, [r0, #0]
    2c10:	2009      	movs	r0, #9
    2c12:	4207      	tst	r7, r0
    2c14:	d002      	beq.n	2c1c <bt_init+0x2b0>
		    BT_FEAT_LE_PHY_CODED(bt_dev.le.features)) {
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
    2c16:	2080      	movs	r0, #128	; 0x80
    2c18:	0100      	lsls	r0, r0, #4
    2c1a:	4303      	orrs	r3, r0
		}
	}

	if (IS_ENABLED(CONFIG_BLUETOOTH_SMP) &&
    2c1c:	07c9      	lsls	r1, r1, #31
    2c1e:	d501      	bpl.n	2c24 <bt_init+0x2b8>
	    BT_FEAT_LE_ENCR(bt_dev.le.features)) {
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
    2c20:	2110      	movs	r1, #16
    2c22:	430b      	orrs	r3, r1

	/*
	 * If "LE Read Local P-256 Public Key" and "LE Generate DH Key" are
	 * supported we need to enable events generated by those commands.
	 */
	if ((bt_dev.supported_commands[34] & 0x02) &&
    2c24:	0021      	movs	r1, r4
    2c26:	3140      	adds	r1, #64	; 0x40
    2c28:	7808      	ldrb	r0, [r1, #0]
    2c2a:	2106      	movs	r1, #6
    2c2c:	4001      	ands	r1, r0
    2c2e:	2906      	cmp	r1, #6
    2c30:	d102      	bne.n	2c38 <bt_init+0x2cc>
	    (bt_dev.supported_commands[34] & 0x04)) {
		mask |= BT_EVT_MASK_LE_P256_PUBLIC_KEY_COMPLETE;
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
    2c32:	317b      	adds	r1, #123	; 0x7b
    2c34:	31ff      	adds	r1, #255	; 0xff
    2c36:	430b      	orrs	r3, r1
	}

	sys_put_le64(mask, cp_mask->events);
    2c38:	0018      	movs	r0, r3
    2c3a:	2100      	movs	r1, #0
    2c3c:	f7ff fc9c 	bl	2578 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    2c40:	2200      	movs	r2, #0
    2c42:	0029      	movs	r1, r5
    2c44:	482f      	ldr	r0, [pc, #188]	; (2d04 <bt_init+0x398>)
    2c46:	f7ff fccd 	bl	25e4 <bt_hci_cmd_send_sync>
		/* Explicitly enable LE for dual-mode controllers */
		cp_le->le = 0x01;
		cp_le->simul = 0x00;
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
					   NULL);
		if (err) {
    2c4a:	0005      	movs	r5, r0
	if (err) {
		return err;
	}

	err = le_init();
	if (err) {
    2c4c:	2d00      	cmp	r5, #0
    2c4e:	d000      	beq.n	2c52 <bt_init+0x2e6>
    2c50:	e1ac      	b.n	2fac <bt_init+0x640>
		return err;
	}

	if (BT_FEAT_BREDR(bt_dev.features)) {
    2c52:	7ea3      	ldrb	r3, [r4, #26]
    2c54:	069b      	lsls	r3, r3, #26
    2c56:	d506      	bpl.n	2c66 <bt_init+0x2fa>
{
	struct bt_hci_cp_set_event_mask *ev;
	struct net_buf *buf;
	u64_t mask = 0;

	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    2c58:	2108      	movs	r1, #8
    2c5a:	482b      	ldr	r0, [pc, #172]	; (2d08 <bt_init+0x39c>)
    2c5c:	f7ff fc9c 	bl	2598 <bt_hci_cmd_create>
    2c60:	1e05      	subs	r5, r0, #0
	if (!buf) {
    2c62:	d155      	bne.n	2d10 <bt_init+0x3a4>
    2c64:	e74c      	b.n	2b00 <bt_init+0x194>
{
#if defined(CONFIG_BLUETOOTH_CONN)
	struct net_buf *rsp;
	int err;

	if (bt_dev.le.mtu) {
    2c66:	0027      	movs	r7, r4
    2c68:	3780      	adds	r7, #128	; 0x80
    2c6a:	883b      	ldrh	r3, [r7, #0]
    2c6c:	2b00      	cmp	r3, #0
    2c6e:	d1f3      	bne.n	2c58 <bt_init+0x2ec>
		return 0;
	}

	/* Use BR/EDR buffer size if LE reports zero buffers */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    2c70:	0029      	movs	r1, r5
    2c72:	0032      	movs	r2, r6
    2c74:	4825      	ldr	r0, [pc, #148]	; (2d0c <bt_init+0x3a0>)
    2c76:	f7ff fcb5 	bl	25e4 <bt_hci_cmd_send_sync>
	if (err) {
    2c7a:	1e05      	subs	r5, r0, #0
    2c7c:	d000      	beq.n	2c80 <bt_init+0x314>
    2c7e:	e195      	b.n	2fac <bt_init+0x640>
	u16_t pkts;

	BT_DBG("status %u", rp->status);

	/* If LE-side has buffers we can ignore the BR/EDR values */
	if (bt_dev.le.mtu) {
    2c80:	883b      	ldrh	r3, [r7, #0]
    2c82:	2b00      	cmp	r3, #0
    2c84:	d114      	bne.n	2cb0 <bt_init+0x344>
    2c86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    2c88:	689b      	ldr	r3, [r3, #8]
		return;
	}

	bt_dev.le.mtu = sys_le16_to_cpu(rp->acl_max_len);
    2c8a:	789a      	ldrb	r2, [r3, #2]
    2c8c:	7859      	ldrb	r1, [r3, #1]
    2c8e:	0212      	lsls	r2, r2, #8
    2c90:	430a      	orrs	r2, r1
    2c92:	803a      	strh	r2, [r7, #0]
	pkts = sys_le16_to_cpu(rp->acl_max_num);
    2c94:	791a      	ldrb	r2, [r3, #4]
    2c96:	795b      	ldrb	r3, [r3, #5]
    2c98:	021b      	lsls	r3, r3, #8
    2c9a:	4313      	orrs	r3, r2

	BT_DBG("ACL BR/EDR buffers: pkts %u mtu %u", pkts, bt_dev.le.mtu);

	pkts = min(pkts, CONFIG_BLUETOOTH_CONN_TX_MAX);

	k_sem_init(&bt_dev.le.pkts, pkts, pkts);
    2c9c:	1c19      	adds	r1, r3, #0
    2c9e:	2b02      	cmp	r3, #2
    2ca0:	d900      	bls.n	2ca4 <bt_init+0x338>
    2ca2:	2102      	movs	r1, #2
    2ca4:	0020      	movs	r0, r4
    2ca6:	b289      	uxth	r1, r1
    2ca8:	3084      	adds	r0, #132	; 0x84
    2caa:	000a      	movs	r2, r1
    2cac:	f011 fe0e 	bl	148cc <k_sem_init>
	if (err) {
		return err;
	}

	read_buffer_size_complete(rsp);
	net_buf_unref(rsp);
    2cb0:	980f      	ldr	r0, [sp, #60]	; 0x3c
    2cb2:	f010 fc65 	bl	13580 <net_buf_unref>
    2cb6:	e7cf      	b.n	2c58 <bt_init+0x2ec>
    2cb8:	00000c03 	.word	0x00000c03
    2cbc:	200004d0 	.word	0x200004d0
    2cc0:	20000da0 	.word	0x20000da0
    2cc4:	00001003 	.word	0x00001003
    2cc8:	00001001 	.word	0x00001001
    2ccc:	00001009 	.word	0x00001009
    2cd0:	00001002 	.word	0x00001002
    2cd4:	000154c4 	.word	0x000154c4
    2cd8:	00015484 	.word	0x00015484
    2cdc:	000154c9 	.word	0x000154c9
    2ce0:	0001548b 	.word	0x0001548b
    2ce4:	0001555a 	.word	0x0001555a
    2ce8:	0001798b 	.word	0x0001798b
    2cec:	00002003 	.word	0x00002003
    2cf0:	00002002 	.word	0x00002002
    2cf4:	00000c6d 	.word	0x00000c6d
    2cf8:	0000201c 	.word	0x0000201c
    2cfc:	0000202f 	.word	0x0000202f
    2d00:	00002024 	.word	0x00002024
    2d04:	00002001 	.word	0x00002001
    2d08:	00000c01 	.word	0x00000c01
    2d0c:	00001005 	.word	0x00001005
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
	if (!buf) {
		return -ENOBUFS;
	}

	ev = net_buf_add(buf, sizeof(*ev));
    2d10:	2108      	movs	r1, #8
    2d12:	1840      	adds	r0, r0, r1
    2d14:	f010 fc56 	bl	135c4 <net_buf_simple_add>
		mask |= BT_EVT_MASK_DISCONN_COMPLETE;
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
	}

	if (IS_ENABLED(CONFIG_BLUETOOTH_SMP) &&
	    BT_FEAT_LE_ENCR(bt_dev.le.features)) {
    2d18:	0023      	movs	r3, r4
    2d1a:	3370      	adds	r3, #112	; 0x70
	if (IS_ENABLED(CONFIG_BLUETOOTH_CONN)) {
		mask |= BT_EVT_MASK_DISCONN_COMPLETE;
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
	}

	if (IS_ENABLED(CONFIG_BLUETOOTH_SMP) &&
    2d1c:	781b      	ldrb	r3, [r3, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
	if (!buf) {
		return -ENOBUFS;
	}

	ev = net_buf_add(buf, sizeof(*ev));
    2d1e:	0002      	movs	r2, r0
	if (IS_ENABLED(CONFIG_BLUETOOTH_CONN)) {
		mask |= BT_EVT_MASK_DISCONN_COMPLETE;
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
	}

	if (IS_ENABLED(CONFIG_BLUETOOTH_SMP) &&
    2d20:	07db      	lsls	r3, r3, #31
    2d22:	d502      	bpl.n	2d2a <bt_init+0x3be>
	    BT_FEAT_LE_ENCR(bt_dev.le.features)) {
		mask |= BT_EVT_MASK_ENCRYPT_CHANGE;
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
    2d24:	48a3      	ldr	r0, [pc, #652]	; (2fb4 <bt_init+0x648>)
    2d26:	49a4      	ldr	r1, [pc, #656]	; (2fb8 <bt_init+0x64c>)
    2d28:	e002      	b.n	2d30 <bt_init+0x3c4>
	mask |= BT_EVT_MASK_DATA_BUFFER_OVERFLOW;
	mask |= BT_EVT_MASK_LE_META_EVENT;

	if (IS_ENABLED(CONFIG_BLUETOOTH_CONN)) {
		mask |= BT_EVT_MASK_DISCONN_COMPLETE;
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
    2d2a:	2180      	movs	r1, #128	; 0x80
    2d2c:	48a3      	ldr	r0, [pc, #652]	; (2fbc <bt_init+0x650>)
    2d2e:	0589      	lsls	r1, r1, #22
	    BT_FEAT_LE_ENCR(bt_dev.le.features)) {
		mask |= BT_EVT_MASK_ENCRYPT_CHANGE;
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
	}

	sys_put_le64(mask, ev->events);
    2d30:	f7ff fc22 	bl	2578 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    2d34:	0029      	movs	r1, r5
    2d36:	2200      	movs	r2, #0
    2d38:	48a1      	ldr	r0, [pc, #644]	; (2fc0 <bt_init+0x654>)
    2d3a:	f7ff fc53 	bl	25e4 <bt_hci_cmd_send_sync>
    2d3e:	1e05      	subs	r5, r0, #0
		BT_ERR("Non-BR/EDR controller detected");
		return -EIO;
	}

	err = set_event_mask();
	if (err) {
    2d40:	d000      	beq.n	2d44 <bt_init+0x3d8>
    2d42:	e133      	b.n	2fac <bt_init+0x640>
		return err;
	}

	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    2d44:	0001      	movs	r1, r0
    2d46:	2207      	movs	r2, #7
    2d48:	a80b      	add	r0, sp, #44	; 0x2c
    2d4a:	f7fe f820 	bl	d8e <memset>
	return memcmp(a, b, sizeof(*a));
}

static inline int bt_addr_le_cmp(const bt_addr_le_t *a, const bt_addr_le_t *b)
{
	return memcmp(a, b, sizeof(*a));
    2d4e:	2207      	movs	r2, #7
    2d50:	a90b      	add	r1, sp, #44	; 0x2c
    2d52:	0020      	movs	r0, r4
    2d54:	f7fd ffdc 	bl	d10 <memcmp>
    2d58:	2800      	cmp	r0, #0
    2d5a:	d104      	bne.n	2d66 <bt_init+0x3fa>

static int set_static_addr(void)
{
	int err;

	if (bt_storage) {
    2d5c:	4b99      	ldr	r3, [pc, #612]	; (2fc4 <bt_init+0x658>)
    2d5e:	681b      	ldr	r3, [r3, #0]
    2d60:	2b00      	cmp	r3, #0
    2d62:	d10e      	bne.n	2d82 <bt_init+0x416>
    2d64:	e015      	b.n	2d92 <bt_init+0x426>
	if (err) {
		return err;
	}

	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
	    !bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_NONE)) {
    2d66:	4998      	ldr	r1, [pc, #608]	; (2fc8 <bt_init+0x65c>)
    2d68:	2207      	movs	r2, #7
    2d6a:	3128      	adds	r1, #40	; 0x28
    2d6c:	a809      	add	r0, sp, #36	; 0x24
    2d6e:	f7fd ffe4 	bl	d3a <memcpy>
    2d72:	2207      	movs	r2, #7
    2d74:	a909      	add	r1, sp, #36	; 0x24
    2d76:	0020      	movs	r0, r4
    2d78:	f7fd ffca 	bl	d10 <memcmp>
	err = set_event_mask();
	if (err) {
		return err;
	}

	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    2d7c:	2800      	cmp	r0, #0
    2d7e:	d0ed      	beq.n	2d5c <bt_init+0x3f0>
    2d80:	e06e      	b.n	2e60 <bt_init+0x4f4>
	int err;

	if (bt_storage) {
		ssize_t ret;

		ret = bt_storage->read(NULL, BT_STORAGE_ID_ADDR,
    2d82:	2100      	movs	r1, #0
    2d84:	681f      	ldr	r7, [r3, #0]
    2d86:	0022      	movs	r2, r4
    2d88:	2307      	movs	r3, #7
    2d8a:	0008      	movs	r0, r1
    2d8c:	47b8      	blx	r7
				       &bt_dev.id_addr, sizeof(bt_dev.id_addr));
		if (ret == sizeof(bt_dev.id_addr)) {
    2d8e:	2807      	cmp	r0, #7
    2d90:	d046      	beq.n	2e20 <bt_init+0x4b4>
	/* Read address from nRF5-specific storage
	 * Non-initialized FICR values default to 0xFF, skip if no address
	 * present. Also if a public address lives in FICR, do not use in this
	 * function.
	 */
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    2d92:	4b8e      	ldr	r3, [pc, #568]	; (2fcc <bt_init+0x660>)
    2d94:	6819      	ldr	r1, [r3, #0]
    2d96:	001a      	movs	r2, r3
    2d98:	1c4b      	adds	r3, r1, #1
    2d9a:	d105      	bne.n	2da8 <bt_init+0x43c>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    2d9c:	4b8c      	ldr	r3, [pc, #560]	; (2fd0 <bt_init+0x664>)
	/* Read address from nRF5-specific storage
	 * Non-initialized FICR values default to 0xFF, skip if no address
	 * present. Also if a public address lives in FICR, do not use in this
	 * function.
	 */
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    2d9e:	498d      	ldr	r1, [pc, #564]	; (2fd4 <bt_init+0x668>)
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    2da0:	681b      	ldr	r3, [r3, #0]
	/* Read address from nRF5-specific storage
	 * Non-initialized FICR values default to 0xFF, skip if no address
	 * present. Also if a public address lives in FICR, do not use in this
	 * function.
	 */
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    2da2:	b29b      	uxth	r3, r3
    2da4:	428b      	cmp	r3, r1
    2da6:	d017      	beq.n	2dd8 <bt_init+0x46c>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
	      (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
    2da8:	4b8b      	ldr	r3, [pc, #556]	; (2fd8 <bt_init+0x66c>)
    2daa:	6819      	ldr	r1, [r3, #0]
	 * Non-initialized FICR values default to 0xFF, skip if no address
	 * present. Also if a public address lives in FICR, do not use in this
	 * function.
	 */
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    2dac:	2301      	movs	r3, #1
    2dae:	4219      	tst	r1, r3
    2db0:	d012      	beq.n	2dd8 <bt_init+0x46c>
	      (NRF_FICR->DEVICEADDRTYPE & 0x01)) {

		bt_dev.id_addr.type = BT_ADDR_LE_RANDOM;
    2db2:	7023      	strb	r3, [r4, #0]
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &bt_dev.id_addr.a.val[0]);
    2db4:	6813      	ldr	r3, [r2, #0]
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
	dst[1] = val >> 8;
    2db6:	0a1a      	lsrs	r2, r3, #8
    2db8:	70a2      	strb	r2, [r4, #2]
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &bt_dev.id_addr.a.val[4]);
		/* The FICR value is a just a random number, with no knowledge
		 * of the Bluetooth Specification requirements for random
		 * static addresses.
		 */
		BT_ADDR_SET_STATIC(&bt_dev.id_addr.a);
    2dba:	2240      	movs	r2, #64	; 0x40
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    2dbc:	7063      	strb	r3, [r4, #1]
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(u32_t val, u8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
    2dbe:	0c1b      	lsrs	r3, r3, #16
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    2dc0:	70e3      	strb	r3, [r4, #3]
	dst[1] = val >> 8;
    2dc2:	0a1b      	lsrs	r3, r3, #8
    2dc4:	7123      	strb	r3, [r4, #4]
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
	      (NRF_FICR->DEVICEADDRTYPE & 0x01)) {

		bt_dev.id_addr.type = BT_ADDR_LE_RANDOM;
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &bt_dev.id_addr.a.val[0]);
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &bt_dev.id_addr.a.val[4]);
    2dc6:	4b82      	ldr	r3, [pc, #520]	; (2fd0 <bt_init+0x664>)
		/* The FICR value is a just a random number, with no knowledge
		 * of the Bluetooth Specification requirements for random
		 * static addresses.
		 */
		BT_ADDR_SET_STATIC(&bt_dev.id_addr.a);
    2dc8:	4252      	negs	r2, r2
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
	      (NRF_FICR->DEVICEADDRTYPE & 0x01)) {

		bt_dev.id_addr.type = BT_ADDR_LE_RANDOM;
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &bt_dev.id_addr.a.val[0]);
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &bt_dev.id_addr.a.val[4]);
    2dca:	681b      	ldr	r3, [r3, #0]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    2dcc:	7163      	strb	r3, [r4, #5]
		/* The FICR value is a just a random number, with no knowledge
		 * of the Bluetooth Specification requirements for random
		 * static addresses.
		 */
		BT_ADDR_SET_STATIC(&bt_dev.id_addr.a);
    2dce:	b29b      	uxth	r3, r3
    2dd0:	0a1b      	lsrs	r3, r3, #8
    2dd2:	4313      	orrs	r3, r2
    2dd4:	71a3      	strb	r3, [r4, #6]
    2dd6:	e023      	b.n	2e20 <bt_init+0x4b4>
	}
#endif /* CONFIG_SOC_FAMILY_NRF5 */

	BT_DBG("Generating new static random address");

	err = bt_addr_le_create_static(&bt_dev.id_addr);
    2dd8:	0020      	movs	r0, r4
    2dda:	f7ff fdb7 	bl	294c <bt_addr_le_create_static>
	if (err) {
    2dde:	2800      	cmp	r0, #0
    2de0:	d000      	beq.n	2de4 <bt_init+0x478>
    2de2:	e0ca      	b.n	2f7a <bt_init+0x60e>
		return err;
	}

	if (bt_storage) {
    2de4:	4b77      	ldr	r3, [pc, #476]	; (2fc4 <bt_init+0x658>)
    2de6:	681b      	ldr	r3, [r3, #0]
    2de8:	2b00      	cmp	r3, #0
    2dea:	d00f      	beq.n	2e0c <bt_init+0x4a0>
		ssize_t ret;

		ret = bt_storage->write(NULL, BT_STORAGE_ID_ADDR,
    2dec:	685f      	ldr	r7, [r3, #4]
    2dee:	0022      	movs	r2, r4
    2df0:	2307      	movs	r3, #7
    2df2:	0001      	movs	r1, r0
    2df4:	47b8      	blx	r7
					&bt_dev.id_addr,
					sizeof(bt_dev.id_addr));
		if (ret != sizeof(bt_dev.id_addr)) {
    2df6:	2807      	cmp	r0, #7
    2df8:	d012      	beq.n	2e20 <bt_init+0x4b4>
			BT_ERR("Unable to store static address");
    2dfa:	4b78      	ldr	r3, [pc, #480]	; (2fdc <bt_init+0x670>)
    2dfc:	4a78      	ldr	r2, [pc, #480]	; (2fe0 <bt_init+0x674>)
    2dfe:	9301      	str	r3, [sp, #4]
    2e00:	4b78      	ldr	r3, [pc, #480]	; (2fe4 <bt_init+0x678>)
    2e02:	4979      	ldr	r1, [pc, #484]	; (2fe8 <bt_init+0x67c>)
    2e04:	9300      	str	r3, [sp, #0]
    2e06:	4879      	ldr	r0, [pc, #484]	; (2fec <bt_init+0x680>)
    2e08:	4b79      	ldr	r3, [pc, #484]	; (2ff0 <bt_init+0x684>)
    2e0a:	e007      	b.n	2e1c <bt_init+0x4b0>
		}
	} else {
		BT_WARN("Using temporary static random address");
    2e0c:	4b73      	ldr	r3, [pc, #460]	; (2fdc <bt_init+0x670>)
    2e0e:	4a79      	ldr	r2, [pc, #484]	; (2ff4 <bt_init+0x688>)
    2e10:	9301      	str	r3, [sp, #4]
    2e12:	4b79      	ldr	r3, [pc, #484]	; (2ff8 <bt_init+0x68c>)
    2e14:	4974      	ldr	r1, [pc, #464]	; (2fe8 <bt_init+0x67c>)
    2e16:	9300      	str	r3, [sp, #0]
    2e18:	4878      	ldr	r0, [pc, #480]	; (2ffc <bt_init+0x690>)
    2e1a:	4b75      	ldr	r3, [pc, #468]	; (2ff0 <bt_init+0x684>)
    2e1c:	f7fe fdb0 	bl	1980 <printk>
	}

set_addr:
	if (bt_dev.id_addr.type != BT_ADDR_LE_RANDOM ||
    2e20:	7823      	ldrb	r3, [r4, #0]
    2e22:	2b01      	cmp	r3, #1
    2e24:	d104      	bne.n	2e30 <bt_init+0x4c4>
    2e26:	223f      	movs	r2, #63	; 0x3f
    2e28:	79a3      	ldrb	r3, [r4, #6]
    2e2a:	4393      	bics	r3, r2
    2e2c:	2bc0      	cmp	r3, #192	; 0xc0
    2e2e:	d00c      	beq.n	2e4a <bt_init+0x4de>
	    (bt_dev.id_addr.a.val[5] & 0xc0) != 0xc0) {
		BT_ERR("Only static random address supported as identity");
		return -EINVAL;
    2e30:	2516      	movs	r5, #22
	}

set_addr:
	if (bt_dev.id_addr.type != BT_ADDR_LE_RANDOM ||
	    (bt_dev.id_addr.a.val[5] & 0xc0) != 0xc0) {
		BT_ERR("Only static random address supported as identity");
    2e32:	4b6a      	ldr	r3, [pc, #424]	; (2fdc <bt_init+0x670>)
    2e34:	4a6a      	ldr	r2, [pc, #424]	; (2fe0 <bt_init+0x674>)
    2e36:	9301      	str	r3, [sp, #4]
    2e38:	4b6a      	ldr	r3, [pc, #424]	; (2fe4 <bt_init+0x678>)
    2e3a:	496b      	ldr	r1, [pc, #428]	; (2fe8 <bt_init+0x67c>)
    2e3c:	9300      	str	r3, [sp, #0]
    2e3e:	4870      	ldr	r0, [pc, #448]	; (3000 <bt_init+0x694>)
    2e40:	4b6b      	ldr	r3, [pc, #428]	; (2ff0 <bt_init+0x684>)
    2e42:	f7fe fd9d 	bl	1980 <printk>
		return -EINVAL;
    2e46:	426d      	negs	r5, r5
    2e48:	e098      	b.n	2f7c <bt_init+0x610>
	}

	err = set_random_address(&bt_dev.id_addr.a);
    2e4a:	1c60      	adds	r0, r4, #1
    2e4c:	f7ff fc32 	bl	26b4 <set_random_address>
	if (err) {
    2e50:	2800      	cmp	r0, #0
    2e52:	d000      	beq.n	2e56 <bt_init+0x4ea>
    2e54:	e091      	b.n	2f7a <bt_init+0x60e>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_or(ATOMIC_ELEM(target, bit), mask);
    2e56:	0020      	movs	r0, r4
    2e58:	2104      	movs	r1, #4
    2e5a:	306c      	adds	r0, #108	; 0x6c
    2e5c:	f010 fe83 	bl	13b66 <atomic_or>
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[7];

	switch (addr->type) {
    2e60:	7823      	ldrb	r3, [r4, #0]
    2e62:	2b00      	cmp	r3, #0
    2e64:	d003      	beq.n	2e6e <bt_init+0x502>
    2e66:	2b01      	cmp	r3, #1
    2e68:	d106      	bne.n	2e78 <bt_init+0x50c>
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    2e6a:	4966      	ldr	r1, [pc, #408]	; (3004 <bt_init+0x698>)
    2e6c:	e000      	b.n	2e70 <bt_init+0x504>
{
	char type[7];

	switch (addr->type) {
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    2e6e:	4966      	ldr	r1, [pc, #408]	; (3008 <bt_init+0x69c>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    2e70:	a80d      	add	r0, sp, #52	; 0x34
    2e72:	f7fd ff2f 	bl	cd4 <strcpy>
    2e76:	e004      	b.n	2e82 <bt_init+0x516>
		break;
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    2e78:	4a64      	ldr	r2, [pc, #400]	; (300c <bt_init+0x6a0>)
    2e7a:	2107      	movs	r1, #7
    2e7c:	a80d      	add	r0, sp, #52	; 0x34
    2e7e:	f7fe fd8b 	bl	1998 <snprintk>
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    2e82:	aa0d      	add	r2, sp, #52	; 0x34
    2e84:	79a3      	ldrb	r3, [r4, #6]
    2e86:	9205      	str	r2, [sp, #20]
    2e88:	7862      	ldrb	r2, [r4, #1]
    2e8a:	211b      	movs	r1, #27
    2e8c:	9204      	str	r2, [sp, #16]
    2e8e:	78a2      	ldrb	r2, [r4, #2]
    2e90:	0030      	movs	r0, r6
    2e92:	9203      	str	r2, [sp, #12]
    2e94:	78e2      	ldrb	r2, [r4, #3]
    2e96:	9202      	str	r2, [sp, #8]
    2e98:	7922      	ldrb	r2, [r4, #4]
    2e9a:	9201      	str	r2, [sp, #4]
    2e9c:	7962      	ldrb	r2, [r4, #5]
    2e9e:	9200      	str	r2, [sp, #0]
    2ea0:	4a5b      	ldr	r2, [pc, #364]	; (3010 <bt_init+0x6a4>)
    2ea2:	f7fe fd79 	bl	1998 <snprintk>
{
	char addr[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(&bt_dev.id_addr, addr, sizeof(addr));

	BT_INFO("Identity: %s", addr);
    2ea6:	4f5b      	ldr	r7, [pc, #364]	; (3014 <bt_init+0x6a8>)
    2ea8:	4b5b      	ldr	r3, [pc, #364]	; (3018 <bt_init+0x6ac>)
    2eaa:	4a5c      	ldr	r2, [pc, #368]	; (301c <bt_init+0x6b0>)
    2eac:	494e      	ldr	r1, [pc, #312]	; (2fe8 <bt_init+0x67c>)
    2eae:	9601      	str	r6, [sp, #4]
    2eb0:	9702      	str	r7, [sp, #8]
    2eb2:	9700      	str	r7, [sp, #0]
    2eb4:	485a      	ldr	r0, [pc, #360]	; (3020 <bt_init+0x6b4>)
    2eb6:	f7fe fd63 	bl	1980 <printk>
	BT_INFO("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
    2eba:	7ba6      	ldrb	r6, [r4, #14]
    2ebc:	0030      	movs	r0, r6
    2ebe:	f7ff fa8f 	bl	23e0 <ver_str>
    2ec2:	9705      	str	r7, [sp, #20]
    2ec4:	8aa3      	ldrh	r3, [r4, #20]
    2ec6:	4a55      	ldr	r2, [pc, #340]	; (301c <bt_init+0x6b0>)
    2ec8:	9304      	str	r3, [sp, #16]
    2eca:	8a23      	ldrh	r3, [r4, #16]
    2ecc:	4946      	ldr	r1, [pc, #280]	; (2fe8 <bt_init+0x67c>)
    2ece:	9303      	str	r3, [sp, #12]
    2ed0:	9602      	str	r6, [sp, #8]
    2ed2:	4b51      	ldr	r3, [pc, #324]	; (3018 <bt_init+0x6ac>)
    2ed4:	9001      	str	r0, [sp, #4]
    2ed6:	9700      	str	r7, [sp, #0]
    2ed8:	4852      	ldr	r0, [pc, #328]	; (3024 <bt_init+0x6b8>)
    2eda:	f7fe fd51 	bl	1980 <printk>
		ver_str(bt_dev.hci_version), bt_dev.hci_version,
		bt_dev.hci_revision, bt_dev.manufacturer);
	BT_INFO("LMP: version %s (0x%02x) subver 0x%04x",
    2ede:	7be6      	ldrb	r6, [r4, #15]
    2ee0:	0030      	movs	r0, r6
    2ee2:	f7ff fa7d 	bl	23e0 <ver_str>
    2ee6:	9704      	str	r7, [sp, #16]
    2ee8:	8a63      	ldrh	r3, [r4, #18]
    2eea:	4a4c      	ldr	r2, [pc, #304]	; (301c <bt_init+0x6b0>)
    2eec:	9303      	str	r3, [sp, #12]
    2eee:	9001      	str	r0, [sp, #4]
    2ef0:	4b49      	ldr	r3, [pc, #292]	; (3018 <bt_init+0x6ac>)
    2ef2:	493d      	ldr	r1, [pc, #244]	; (2fe8 <bt_init+0x67c>)
    2ef4:	9602      	str	r6, [sp, #8]
    2ef6:	9700      	str	r7, [sp, #0]
    2ef8:	484b      	ldr	r0, [pc, #300]	; (3028 <bt_init+0x6bc>)
    2efa:	f7fe fd41 	bl	1980 <printk>
	if (err) {
		return err;
	}

	if (IS_ENABLED(CONFIG_BLUETOOTH_CONN)) {
		err = bt_conn_init();
    2efe:	f002 f8f5 	bl	50ec <bt_conn_init>
    2f02:	4b39      	ldr	r3, [pc, #228]	; (2fe8 <bt_init+0x67c>)
    2f04:	9306      	str	r3, [sp, #24]
		if (err) {
    2f06:	2800      	cmp	r0, #0
    2f08:	d135      	bne.n	2f76 <bt_init+0x60a>
#if defined(CONFIG_BLUETOOTH_PRIVACY)
static int irk_init(void)
{
	ssize_t err;

	if (bt_storage) {
    2f0a:	4a2e      	ldr	r2, [pc, #184]	; (2fc4 <bt_init+0x658>)
    2f0c:	4e47      	ldr	r6, [pc, #284]	; (302c <bt_init+0x6c0>)
    2f0e:	6813      	ldr	r3, [r2, #0]
    2f10:	0017      	movs	r7, r2
    2f12:	2b00      	cmp	r3, #0
    2f14:	d108      	bne.n	2f28 <bt_init+0x5bc>
		}
	}

	BT_DBG("Generating new IRK");

	err = bt_rand(bt_dev.irk, sizeof(bt_dev.irk));
    2f16:	0034      	movs	r4, r6
    2f18:	34dc      	adds	r4, #220	; 0xdc
    2f1a:	2110      	movs	r1, #16
    2f1c:	0020      	movs	r0, r4
    2f1e:	f009 f8df 	bl	c0e0 <bt_rand>
	if (err) {
    2f22:	2800      	cmp	r0, #0
    2f24:	d009      	beq.n	2f3a <bt_init+0x5ce>
    2f26:	e026      	b.n	2f76 <bt_init+0x60a>
static int irk_init(void)
{
	ssize_t err;

	if (bt_storage) {
		err = bt_storage->read(NULL, BT_STORAGE_LOCAL_IRK, &bt_dev.irk,
    2f28:	0022      	movs	r2, r4
    2f2a:	2101      	movs	r1, #1
    2f2c:	681c      	ldr	r4, [r3, #0]
    2f2e:	32dc      	adds	r2, #220	; 0xdc
    2f30:	2310      	movs	r3, #16
    2f32:	47a0      	blx	r4
				       sizeof(bt_dev.irk));
		if (err == sizeof(bt_dev.irk)) {
    2f34:	2810      	cmp	r0, #16
    2f36:	d1ee      	bne.n	2f16 <bt_init+0x5aa>
    2f38:	e02b      	b.n	2f92 <bt_init+0x626>
	err = bt_rand(bt_dev.irk, sizeof(bt_dev.irk));
	if (err) {
		return err;
	}

	if (bt_storage) {
    2f3a:	683b      	ldr	r3, [r7, #0]
    2f3c:	2b00      	cmp	r3, #0
    2f3e:	d00f      	beq.n	2f60 <bt_init+0x5f4>
		err = bt_storage->write(NULL, BT_STORAGE_LOCAL_IRK, bt_dev.irk,
    2f40:	685f      	ldr	r7, [r3, #4]
    2f42:	0022      	movs	r2, r4
    2f44:	2310      	movs	r3, #16
    2f46:	2101      	movs	r1, #1
    2f48:	47b8      	blx	r7
					sizeof(bt_dev.irk));
		if (err != sizeof(bt_dev.irk)) {
    2f4a:	2810      	cmp	r0, #16
    2f4c:	d021      	beq.n	2f92 <bt_init+0x626>
			BT_ERR("Unable to store IRK");
    2f4e:	4b23      	ldr	r3, [pc, #140]	; (2fdc <bt_init+0x670>)
    2f50:	4a23      	ldr	r2, [pc, #140]	; (2fe0 <bt_init+0x674>)
    2f52:	9301      	str	r3, [sp, #4]
    2f54:	4b23      	ldr	r3, [pc, #140]	; (2fe4 <bt_init+0x678>)
    2f56:	9906      	ldr	r1, [sp, #24]
    2f58:	9300      	str	r3, [sp, #0]
    2f5a:	4835      	ldr	r0, [pc, #212]	; (3030 <bt_init+0x6c4>)
    2f5c:	4b35      	ldr	r3, [pc, #212]	; (3034 <bt_init+0x6c8>)
    2f5e:	e007      	b.n	2f70 <bt_init+0x604>
		}
	} else {
		BT_WARN("Using temporary IRK");
    2f60:	4b1e      	ldr	r3, [pc, #120]	; (2fdc <bt_init+0x670>)
    2f62:	4a24      	ldr	r2, [pc, #144]	; (2ff4 <bt_init+0x688>)
    2f64:	9301      	str	r3, [sp, #4]
    2f66:	4b24      	ldr	r3, [pc, #144]	; (2ff8 <bt_init+0x68c>)
    2f68:	9906      	ldr	r1, [sp, #24]
    2f6a:	9300      	str	r3, [sp, #0]
    2f6c:	4832      	ldr	r0, [pc, #200]	; (3038 <bt_init+0x6cc>)
    2f6e:	4b31      	ldr	r3, [pc, #196]	; (3034 <bt_init+0x6c8>)
    2f70:	f7fe fd06 	bl	1980 <printk>
    2f74:	e00d      	b.n	2f92 <bt_init+0x626>
	}

	BT_DBG("Generating new IRK");

	err = bt_rand(bt_dev.irk, sizeof(bt_dev.irk));
	if (err) {
    2f76:	0005      	movs	r5, r0
    2f78:	e018      	b.n	2fac <bt_init+0x640>
		BT_ERR("Only static random address supported as identity");
		return -EINVAL;
	}

	err = set_random_address(&bt_dev.id_addr.a);
	if (err) {
    2f7a:	0005      	movs	r5, r0
	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
	    !bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_NONE)) {
		BT_DBG("No public address. Trying to set static random.");
		err = set_static_addr();
		if (err) {
			BT_ERR("Unable to set identity address");
    2f7c:	4b17      	ldr	r3, [pc, #92]	; (2fdc <bt_init+0x670>)
    2f7e:	4a18      	ldr	r2, [pc, #96]	; (2fe0 <bt_init+0x674>)
    2f80:	9301      	str	r3, [sp, #4]
    2f82:	4b18      	ldr	r3, [pc, #96]	; (2fe4 <bt_init+0x678>)
    2f84:	4918      	ldr	r1, [pc, #96]	; (2fe8 <bt_init+0x67c>)
    2f86:	9300      	str	r3, [sp, #0]
    2f88:	482c      	ldr	r0, [pc, #176]	; (303c <bt_init+0x6d0>)
    2f8a:	4b2d      	ldr	r3, [pc, #180]	; (3040 <bt_init+0x6d4>)
    2f8c:	f7fe fcf8 	bl	1980 <printk>
    2f90:	e00c      	b.n	2fac <bt_init+0x640>
	err = irk_init();
	if (err) {
		return err;
	}

	k_delayed_work_init(&bt_dev.rpa_update, rpa_timeout);
    2f92:	0030      	movs	r0, r6
    2f94:	492b      	ldr	r1, [pc, #172]	; (3044 <bt_init+0x6d8>)
    2f96:	30ec      	adds	r0, #236	; 0xec
    2f98:	f011 ff6c 	bl	14e74 <k_delayed_work_init>
    2f9c:	0030      	movs	r0, r6
    2f9e:	2102      	movs	r1, #2
    2fa0:	306c      	adds	r0, #108	; 0x6c
    2fa2:	f010 fde0 	bl	13b66 <atomic_or>
#endif

	bt_monitor_send(BT_MONITOR_OPEN_INDEX, NULL, 0);
	atomic_set_bit(bt_dev.flags, BT_DEV_READY);
	bt_le_scan_update(false);
    2fa6:	2000      	movs	r0, #0
    2fa8:	f7ff fcba 	bl	2920 <bt_le_scan_update>

	return 0;
}
    2fac:	0028      	movs	r0, r5
    2fae:	b017      	add	sp, #92	; 0x5c
    2fb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2fb2:	46c0      	nop			; (mov r8, r8)
    2fb4:	02008890 	.word	0x02008890
    2fb8:	20008000 	.word	0x20008000
    2fbc:	02008810 	.word	0x02008810
    2fc0:	00000c01 	.word	0x00000c01
    2fc4:	20002254 	.word	0x20002254
    2fc8:	0001506c 	.word	0x0001506c
    2fcc:	100000a4 	.word	0x100000a4
    2fd0:	100000a8 	.word	0x100000a8
    2fd4:	0000ffff 	.word	0x0000ffff
    2fd8:	100000a0 	.word	0x100000a0
    2fdc:	000154c4 	.word	0x000154c4
    2fe0:	00015484 	.word	0x00015484
    2fe4:	000154c9 	.word	0x000154c9
    2fe8:	0001548b 	.word	0x0001548b
    2fec:	0001558e 	.word	0x0001558e
    2ff0:	0001790e 	.word	0x0001790e
    2ff4:	000154d1 	.word	0x000154d1
    2ff8:	0001550f 	.word	0x0001550f
    2ffc:	000155bd 	.word	0x000155bd
    3000:	000155f3 	.word	0x000155f3
    3004:	000151d2 	.word	0x000151d2
    3008:	000151cb 	.word	0x000151cb
    300c:	000151d9 	.word	0x000151d9
    3010:	000151e0 	.word	0x000151e0
    3014:	00015150 	.word	0x00015150
    3018:	000179a8 	.word	0x000179a8
    301c:	00015634 	.word	0x00015634
    3020:	0001563b 	.word	0x0001563b
    3024:	00015658 	.word	0x00015658
    3028:	000156a6 	.word	0x000156a6
    302c:	200004d0 	.word	0x200004d0
    3030:	000156dd 	.word	0x000156dd
    3034:	000179b6 	.word	0x000179b6
    3038:	00015701 	.word	0x00015701
    303c:	00015725 	.word	0x00015725
    3040:	00017a67 	.word	0x00017a67
    3044:	00002765 	.word	0x00002765

00003048 <init_work>:

static void init_work(struct k_work *work)
{
    3048:	b510      	push	{r4, lr}
	int err;

	err = bt_init();
    304a:	f7ff fc8f 	bl	296c <bt_init>
	if (ready_cb) {
    304e:	4b03      	ldr	r3, [pc, #12]	; (305c <init_work+0x14>)
    3050:	681b      	ldr	r3, [r3, #0]
    3052:	2b00      	cmp	r3, #0
    3054:	d000      	beq.n	3058 <init_work+0x10>
		ready_cb(err);
    3056:	4798      	blx	r3
	}
}
    3058:	bd10      	pop	{r4, pc}
    305a:	46c0      	nop			; (mov r8, r8)
    305c:	20000d9c 	.word	0x20000d9c

00003060 <bt_send>:

	if (IS_ENABLED(CONFIG_BLUETOOTH_TINYCRYPT_ECC)) {
		return bt_hci_ecc_send(buf);
	}

	return bt_dev.drv->send(buf);
    3060:	4b03      	ldr	r3, [pc, #12]	; (3070 <bt_send+0x10>)

	return 0;
}

int bt_send(struct net_buf *buf)
{
    3062:	b510      	push	{r4, lr}

	if (IS_ENABLED(CONFIG_BLUETOOTH_TINYCRYPT_ECC)) {
		return bt_hci_ecc_send(buf);
	}

	return bt_dev.drv->send(buf);
    3064:	33d8      	adds	r3, #216	; 0xd8
    3066:	681b      	ldr	r3, [r3, #0]
    3068:	68db      	ldr	r3, [r3, #12]
    306a:	4798      	blx	r3
}
    306c:	bd10      	pop	{r4, pc}
    306e:	46c0      	nop			; (mov r8, r8)
    3070:	200004d0 	.word	0x200004d0

00003074 <bt_hci_cmd_send>:

	return buf;
}

int bt_hci_cmd_send(u16_t opcode, struct net_buf *buf)
{
    3074:	b530      	push	{r4, r5, lr}
    3076:	0005      	movs	r5, r0
    3078:	b085      	sub	sp, #20
    307a:	1e0c      	subs	r4, r1, #0
	if (!buf) {
    307c:	d103      	bne.n	3086 <bt_hci_cmd_send+0x12>
		buf = bt_hci_cmd_create(opcode, 0);
    307e:	f7ff fa8b 	bl	2598 <bt_hci_cmd_create>
    3082:	1e04      	subs	r4, r0, #0
		if (!buf) {
    3084:	d020      	beq.n	30c8 <bt_hci_cmd_send+0x54>
	BT_DBG("opcode 0x%04x len %u", opcode, buf->len);

	/* Host Number of Completed Packets can ignore the ncmd value
	 * and does not generate any cmd complete/status events.
	 */
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    3086:	4b12      	ldr	r3, [pc, #72]	; (30d0 <bt_hci_cmd_send+0x5c>)
    3088:	429d      	cmp	r5, r3
    308a:	d116      	bne.n	30ba <bt_hci_cmd_send+0x46>
		int err;

		err = bt_send(buf);
    308c:	0020      	movs	r0, r4
    308e:	f7ff ffe7 	bl	3060 <bt_send>
    3092:	0005      	movs	r5, r0
    3094:	2000      	movs	r0, #0
		if (err) {
    3096:	4285      	cmp	r5, r0
    3098:	d018      	beq.n	30cc <bt_hci_cmd_send+0x58>
			BT_ERR("Unable to send to driver (err %d)", err);
    309a:	4b0e      	ldr	r3, [pc, #56]	; (30d4 <bt_hci_cmd_send+0x60>)
    309c:	4a0e      	ldr	r2, [pc, #56]	; (30d8 <bt_hci_cmd_send+0x64>)
    309e:	9302      	str	r3, [sp, #8]
    30a0:	4b0e      	ldr	r3, [pc, #56]	; (30dc <bt_hci_cmd_send+0x68>)
    30a2:	490f      	ldr	r1, [pc, #60]	; (30e0 <bt_hci_cmd_send+0x6c>)
    30a4:	9300      	str	r3, [sp, #0]
    30a6:	9501      	str	r5, [sp, #4]
    30a8:	4b0e      	ldr	r3, [pc, #56]	; (30e4 <bt_hci_cmd_send+0x70>)
    30aa:	480f      	ldr	r0, [pc, #60]	; (30e8 <bt_hci_cmd_send+0x74>)
    30ac:	f7fe fc68 	bl	1980 <printk>
			net_buf_unref(buf);
    30b0:	0020      	movs	r0, r4
    30b2:	f010 fa65 	bl	13580 <net_buf_unref>
    30b6:	0028      	movs	r0, r5
    30b8:	e008      	b.n	30cc <bt_hci_cmd_send+0x58>
		}

		return err;
	}

	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    30ba:	480c      	ldr	r0, [pc, #48]	; (30ec <bt_hci_cmd_send+0x78>)
    30bc:	0021      	movs	r1, r4
    30be:	30c4      	adds	r0, #196	; 0xc4
    30c0:	f010 fa4f 	bl	13562 <net_buf_put>

	return 0;
    30c4:	2000      	movs	r0, #0
    30c6:	e001      	b.n	30cc <bt_hci_cmd_send+0x58>
int bt_hci_cmd_send(u16_t opcode, struct net_buf *buf)
{
	if (!buf) {
		buf = bt_hci_cmd_create(opcode, 0);
		if (!buf) {
			return -ENOBUFS;
    30c8:	2037      	movs	r0, #55	; 0x37
    30ca:	4240      	negs	r0, r0
	}

	net_buf_put(&bt_dev.cmd_tx_queue, buf);

	return 0;
}
    30cc:	b005      	add	sp, #20
    30ce:	bd30      	pop	{r4, r5, pc}
    30d0:	00000c35 	.word	0x00000c35
    30d4:	000154c4 	.word	0x000154c4
    30d8:	00015484 	.word	0x00015484
    30dc:	000154c9 	.word	0x000154c9
    30e0:	0001548b 	.word	0x0001548b
    30e4:	00017a90 	.word	0x00017a90
    30e8:	00015754 	.word	0x00015754
    30ec:	200004d0 	.word	0x200004d0

000030f0 <hci_le_set_phy.isra.27>:
	}

	return 0;
}

static int hci_le_set_phy(struct bt_conn *conn)
    30f0:	b570      	push	{r4, r5, r6, lr}
{
	struct bt_hci_cp_le_set_phy *cp;
	struct net_buf *buf;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
    30f2:	2107      	movs	r1, #7
	}

	return 0;
}

static int hci_le_set_phy(struct bt_conn *conn)
    30f4:	0004      	movs	r4, r0
{
	struct bt_hci_cp_le_set_phy *cp;
	struct net_buf *buf;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
    30f6:	480e      	ldr	r0, [pc, #56]	; (3130 <hci_le_set_phy.isra.27+0x40>)
    30f8:	f7ff fa4e 	bl	2598 <bt_hci_cmd_create>
    30fc:	1e05      	subs	r5, r0, #0
	if (!buf) {
    30fe:	d014      	beq.n	312a <hci_le_set_phy.isra.27+0x3a>
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));
    3100:	2107      	movs	r1, #7
    3102:	3008      	adds	r0, #8
    3104:	f010 fa5e 	bl	135c4 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    3108:	8823      	ldrh	r3, [r4, #0]
    310a:	2400      	movs	r4, #0
    310c:	7003      	strb	r3, [r0, #0]
    310e:	0a1b      	lsrs	r3, r3, #8
    3110:	7043      	strb	r3, [r0, #1]
	cp->all_phys = 0;
	cp->tx_phys = BT_HCI_LE_PHY_PREFER_2M;
    3112:	2302      	movs	r3, #2
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));
	cp->handle = sys_cpu_to_le16(conn->handle);
	cp->all_phys = 0;
    3114:	7084      	strb	r4, [r0, #2]
	cp->tx_phys = BT_HCI_LE_PHY_PREFER_2M;
    3116:	70c3      	strb	r3, [r0, #3]
	cp->rx_phys = BT_HCI_LE_PHY_PREFER_2M;
    3118:	7103      	strb	r3, [r0, #4]
	cp->phy_opts = BT_HCI_LE_PHY_CODED_ANY;
    311a:	7144      	strb	r4, [r0, #5]
    311c:	7184      	strb	r4, [r0, #6]
	bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
    311e:	0029      	movs	r1, r5
    3120:	4803      	ldr	r0, [pc, #12]	; (3130 <hci_le_set_phy.isra.27+0x40>)
    3122:	f7ff ffa7 	bl	3074 <bt_hci_cmd_send>

	return 0;
    3126:	0020      	movs	r0, r4
    3128:	e001      	b.n	312e <hci_le_set_phy.isra.27+0x3e>
	struct bt_hci_cp_le_set_phy *cp;
	struct net_buf *buf;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
	if (!buf) {
		return -ENOBUFS;
    312a:	2037      	movs	r0, #55	; 0x37
    312c:	4240      	negs	r0, r0
	cp->rx_phys = BT_HCI_LE_PHY_PREFER_2M;
	cp->phy_opts = BT_HCI_LE_PHY_CODED_ANY;
	bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);

	return 0;
}
    312e:	bd70      	pop	{r4, r5, r6, pc}
    3130:	00002032 	.word	0x00002032

00003134 <hci_le_set_data_len.isra.28>:
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);

	return 0;
}

static int hci_le_set_data_len(struct bt_conn *conn)
    3134:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3136:	0007      	movs	r7, r0
	struct bt_hci_cp_le_set_data_len *cp;
	struct net_buf *buf, *rsp;
	u16_t tx_octets, tx_time;
	int err;

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
    3138:	aa01      	add	r2, sp, #4
    313a:	2100      	movs	r1, #0
    313c:	4816      	ldr	r0, [pc, #88]	; (3198 <hci_le_set_data_len.isra.28+0x64>)
    313e:	f7ff fa51 	bl	25e4 <bt_hci_cmd_send_sync>
	if (err) {
    3142:	2800      	cmp	r0, #0
    3144:	d126      	bne.n	3194 <hci_le_set_data_len.isra.28+0x60>
		return err;
	}

	rp = (void *)rsp->data;
    3146:	9801      	ldr	r0, [sp, #4]
    3148:	6883      	ldr	r3, [r0, #8]
	tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    314a:	789d      	ldrb	r5, [r3, #2]
    314c:	785a      	ldrb	r2, [r3, #1]
	tx_time = sys_le16_to_cpu(rp->max_tx_time);
    314e:	791c      	ldrb	r4, [r3, #4]
	if (err) {
		return err;
	}

	rp = (void *)rsp->data;
	tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    3150:	022d      	lsls	r5, r5, #8
    3152:	4315      	orrs	r5, r2
	tx_time = sys_le16_to_cpu(rp->max_tx_time);
    3154:	78da      	ldrb	r2, [r3, #3]
    3156:	0224      	lsls	r4, r4, #8
    3158:	4314      	orrs	r4, r2
	net_buf_unref(rsp);
    315a:	f010 fa11 	bl	13580 <net_buf_unref>

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
    315e:	2106      	movs	r1, #6
    3160:	480e      	ldr	r0, [pc, #56]	; (319c <hci_le_set_data_len.isra.28+0x68>)
    3162:	f7ff fa19 	bl	2598 <bt_hci_cmd_create>
    3166:	1e06      	subs	r6, r0, #0
	if (!buf) {
    3168:	d012      	beq.n	3190 <hci_le_set_data_len.isra.28+0x5c>
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));
    316a:	2106      	movs	r1, #6
    316c:	3008      	adds	r0, #8
    316e:	f010 fa29 	bl	135c4 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    3172:	883b      	ldrh	r3, [r7, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
    3174:	7085      	strb	r5, [r0, #2]
	if (!buf) {
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));
	cp->handle = sys_cpu_to_le16(conn->handle);
    3176:	7003      	strb	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
    3178:	0a2d      	lsrs	r5, r5, #8
	if (!buf) {
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));
	cp->handle = sys_cpu_to_le16(conn->handle);
    317a:	0a1b      	lsrs	r3, r3, #8
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
	cp->tx_time = sys_cpu_to_le16(tx_time);
    317c:	7104      	strb	r4, [r0, #4]
    317e:	0a24      	lsrs	r4, r4, #8
	if (!buf) {
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));
	cp->handle = sys_cpu_to_le16(conn->handle);
    3180:	7043      	strb	r3, [r0, #1]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
    3182:	70c5      	strb	r5, [r0, #3]
	cp->tx_time = sys_cpu_to_le16(tx_time);
    3184:	7144      	strb	r4, [r0, #5]
	err = bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
    3186:	0031      	movs	r1, r6
    3188:	4804      	ldr	r0, [pc, #16]	; (319c <hci_le_set_data_len.isra.28+0x68>)
    318a:	f7ff ff73 	bl	3074 <bt_hci_cmd_send>
    318e:	e001      	b.n	3194 <hci_le_set_data_len.isra.28+0x60>
	tx_time = sys_le16_to_cpu(rp->max_tx_time);
	net_buf_unref(rsp);

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
	if (!buf) {
		return -ENOBUFS;
    3190:	2037      	movs	r0, #55	; 0x37
    3192:	4240      	negs	r0, r0
	if (err) {
		return err;
	}

	return 0;
}
    3194:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3196:	46c0      	nop			; (mov r8, r8)
    3198:	0000202f 	.word	0x0000202f
    319c:	00002022 	.word	0x00002022

000031a0 <le_conn_param_neg_reply>:

	return true;
}

static int le_conn_param_neg_reply(u16_t handle, u8_t reason)
{
    31a0:	b570      	push	{r4, r5, r6, lr}
    31a2:	0004      	movs	r4, r0
    31a4:	000e      	movs	r6, r1
	struct bt_hci_cp_le_conn_param_req_neg_reply *cp;
	struct net_buf *buf;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
    31a6:	480b      	ldr	r0, [pc, #44]	; (31d4 <le_conn_param_neg_reply+0x34>)
    31a8:	2103      	movs	r1, #3
    31aa:	f7ff f9f5 	bl	2598 <bt_hci_cmd_create>
    31ae:	1e05      	subs	r5, r0, #0
				sizeof(*cp));
	if (!buf) {
    31b0:	d00c      	beq.n	31cc <le_conn_param_neg_reply+0x2c>
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));
    31b2:	2103      	movs	r1, #3
    31b4:	3008      	adds	r0, #8
    31b6:	f010 fa05 	bl	135c4 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
    31ba:	7004      	strb	r4, [r0, #0]
    31bc:	0a24      	lsrs	r4, r4, #8
    31be:	7044      	strb	r4, [r0, #1]
	cp->reason = sys_cpu_to_le16(reason);
    31c0:	7086      	strb	r6, [r0, #2]

	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    31c2:	0029      	movs	r1, r5
    31c4:	4803      	ldr	r0, [pc, #12]	; (31d4 <le_conn_param_neg_reply+0x34>)
    31c6:	f7ff ff55 	bl	3074 <bt_hci_cmd_send>
    31ca:	e001      	b.n	31d0 <le_conn_param_neg_reply+0x30>
	struct net_buf *buf;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
				sizeof(*cp));
	if (!buf) {
		return -ENOBUFS;
    31cc:	2037      	movs	r0, #55	; 0x37
    31ce:	4240      	negs	r0, r0
	cp = net_buf_add(buf, sizeof(*cp));
	cp->handle = sys_cpu_to_le16(handle);
	cp->reason = sys_cpu_to_le16(reason);

	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
}
    31d0:	bd70      	pop	{r4, r5, r6, pc}
    31d2:	46c0      	nop			; (mov r8, r8)
    31d4:	00002021 	.word	0x00002021

000031d8 <hci_tx_thread>:
/* command FIFO */
#define EV_COUNT 1
#endif

static void hci_tx_thread(void *p1, void *p2, void *p3)
{
    31d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    31da:	b087      	sub	sp, #28
	BT_DBG("Started");

	while (1) {
		int ev_count, err;

		events[0].state = K_POLL_STATE_NOT_READY;
    31dc:	4c53      	ldr	r4, [pc, #332]	; (332c <hci_tx_thread+0x154>)
    31de:	4b54      	ldr	r3, [pc, #336]	; (3330 <hci_tx_thread+0x158>)
		ev_count = 1;

		if (IS_ENABLED(CONFIG_BLUETOOTH_CONN)) {
			ev_count += bt_conn_prepare_events(&events[1]);
    31e0:	0020      	movs	r0, r4
	BT_DBG("Started");

	while (1) {
		int ev_count, err;

		events[0].state = K_POLL_STATE_NOT_READY;
    31e2:	6862      	ldr	r2, [r4, #4]
		ev_count = 1;

		if (IS_ENABLED(CONFIG_BLUETOOTH_CONN)) {
			ev_count += bt_conn_prepare_events(&events[1]);
    31e4:	300c      	adds	r0, #12
	BT_DBG("Started");

	while (1) {
		int ev_count, err;

		events[0].state = K_POLL_STATE_NOT_READY;
    31e6:	4013      	ands	r3, r2
    31e8:	6063      	str	r3, [r4, #4]
		ev_count = 1;

		if (IS_ENABLED(CONFIG_BLUETOOTH_CONN)) {
			ev_count += bt_conn_prepare_events(&events[1]);
    31ea:	f001 fc55 	bl	4a98 <bt_conn_prepare_events>
		}

		BT_DBG("Calling k_poll with %d events", ev_count);

		err = k_poll(events, ev_count, K_FOREVER);
    31ee:	2201      	movs	r2, #1

		events[0].state = K_POLL_STATE_NOT_READY;
		ev_count = 1;

		if (IS_ENABLED(CONFIG_BLUETOOTH_CONN)) {
			ev_count += bt_conn_prepare_events(&events[1]);
    31f0:	1c43      	adds	r3, r0, #1
		}

		BT_DBG("Calling k_poll with %d events", ev_count);

		err = k_poll(events, ev_count, K_FOREVER);
    31f2:	4252      	negs	r2, r2
    31f4:	0019      	movs	r1, r3
    31f6:	0020      	movs	r0, r4

		events[0].state = K_POLL_STATE_NOT_READY;
		ev_count = 1;

		if (IS_ENABLED(CONFIG_BLUETOOTH_CONN)) {
			ev_count += bt_conn_prepare_events(&events[1]);
    31f8:	9305      	str	r3, [sp, #20]
		}

		BT_DBG("Calling k_poll with %d events", ev_count);

		err = k_poll(events, ev_count, K_FOREVER);
    31fa:	f010 ff5f 	bl	140bc <k_poll>
		BT_ASSERT(err == 0);
    31fe:	2800      	cmp	r0, #0
    3200:	d101      	bne.n	3206 <hci_tx_thread+0x2e>
    3202:	3408      	adds	r4, #8
    3204:	e04f      	b.n	32a6 <hci_tx_thread+0xce>
    3206:	4b4b      	ldr	r3, [pc, #300]	; (3334 <hci_tx_thread+0x15c>)
    3208:	4a4b      	ldr	r2, [pc, #300]	; (3338 <hci_tx_thread+0x160>)
    320a:	9301      	str	r3, [sp, #4]
    320c:	4b4b      	ldr	r3, [pc, #300]	; (333c <hci_tx_thread+0x164>)
    320e:	494c      	ldr	r1, [pc, #304]	; (3340 <hci_tx_thread+0x168>)
    3210:	9300      	str	r3, [sp, #0]
    3212:	484c      	ldr	r0, [pc, #304]	; (3344 <hci_tx_thread+0x16c>)
    3214:	4b4c      	ldr	r3, [pc, #304]	; (3348 <hci_tx_thread+0x170>)
    3216:	e065      	b.n	32e4 <hci_tx_thread+0x10c>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
	BT_ASSERT(buf);

	/* Wait until ncmd > 0 */
	BT_DBG("calling sem_take_wait");
	k_sem_take(&bt_dev.ncmd_sem, K_FOREVER);
    3218:	0028      	movs	r0, r5
    321a:	2101      	movs	r1, #1
    321c:	3098      	adds	r0, #152	; 0x98
    321e:	4249      	negs	r1, r1

	/* Clear out any existing sent command */
	if (bt_dev.sent_cmd) {
    3220:	35ac      	adds	r5, #172	; 0xac
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
	BT_ASSERT(buf);

	/* Wait until ncmd > 0 */
	BT_DBG("calling sem_take_wait");
	k_sem_take(&bt_dev.ncmd_sem, K_FOREVER);
    3222:	f011 fb97 	bl	14954 <k_sem_take>

	/* Clear out any existing sent command */
	if (bt_dev.sent_cmd) {
    3226:	682b      	ldr	r3, [r5, #0]
    3228:	2b00      	cmp	r3, #0
    322a:	d00d      	beq.n	3248 <hci_tx_thread+0x70>
		BT_ERR("Uncleared pending sent_cmd");
    322c:	4b41      	ldr	r3, [pc, #260]	; (3334 <hci_tx_thread+0x15c>)
    322e:	4a42      	ldr	r2, [pc, #264]	; (3338 <hci_tx_thread+0x160>)
    3230:	9301      	str	r3, [sp, #4]
    3232:	4b42      	ldr	r3, [pc, #264]	; (333c <hci_tx_thread+0x164>)
    3234:	4942      	ldr	r1, [pc, #264]	; (3340 <hci_tx_thread+0x168>)
    3236:	9300      	str	r3, [sp, #0]
    3238:	4844      	ldr	r0, [pc, #272]	; (334c <hci_tx_thread+0x174>)
    323a:	4b45      	ldr	r3, [pc, #276]	; (3350 <hci_tx_thread+0x178>)
    323c:	f7fe fba0 	bl	1980 <printk>
		net_buf_unref(bt_dev.sent_cmd);
    3240:	6828      	ldr	r0, [r5, #0]
    3242:	f010 f99d 	bl	13580 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    3246:	602e      	str	r6, [r5, #0]
	}

	bt_dev.sent_cmd = net_buf_ref(buf);
    3248:	0038      	movs	r0, r7
    324a:	f010 f9b7 	bl	135bc <net_buf_ref>
    324e:	4e41      	ldr	r6, [pc, #260]	; (3354 <hci_tx_thread+0x17c>)
    3250:	0035      	movs	r5, r6
    3252:	35ac      	adds	r5, #172	; 0xac
    3254:	6028      	str	r0, [r5, #0]

	BT_DBG("Sending command 0x%04x (buf %p) to driver",
	       cmd(buf)->opcode, buf);

	err = bt_send(buf);
    3256:	0038      	movs	r0, r7
    3258:	f7ff ff02 	bl	3060 <bt_send>
	if (err) {
    325c:	2800      	cmp	r0, #0
    325e:	d01e      	beq.n	329e <hci_tx_thread+0xc6>
		BT_ERR("Unable to send to driver (err %d)", err);
    3260:	4b34      	ldr	r3, [pc, #208]	; (3334 <hci_tx_thread+0x15c>)
    3262:	4a35      	ldr	r2, [pc, #212]	; (3338 <hci_tx_thread+0x160>)
    3264:	9302      	str	r3, [sp, #8]
    3266:	4b35      	ldr	r3, [pc, #212]	; (333c <hci_tx_thread+0x164>)
    3268:	4935      	ldr	r1, [pc, #212]	; (3340 <hci_tx_thread+0x168>)
    326a:	9001      	str	r0, [sp, #4]
    326c:	9300      	str	r3, [sp, #0]
    326e:	483a      	ldr	r0, [pc, #232]	; (3358 <hci_tx_thread+0x180>)
    3270:	4b37      	ldr	r3, [pc, #220]	; (3350 <hci_tx_thread+0x178>)
    3272:	f7fe fb85 	bl	1980 <printk>
		k_sem_give(&bt_dev.ncmd_sem);
    3276:	0030      	movs	r0, r6
    3278:	3098      	adds	r0, #152	; 0x98
    327a:	f011 fb2f 	bl	148dc <k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED,
    327e:	0038      	movs	r0, r7
    3280:	f7ff f8a8 	bl	23d4 <net_buf_user_data>
    3284:	2200      	movs	r2, #0
    3286:	8840      	ldrh	r0, [r0, #2]
    3288:	211f      	movs	r1, #31
    328a:	f7ff f917 	bl	24bc <hci_cmd_done>
			     NULL);
		net_buf_unref(bt_dev.sent_cmd);
    328e:	6828      	ldr	r0, [r5, #0]
    3290:	f010 f976 	bl	13580 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    3294:	2300      	movs	r3, #0
		net_buf_unref(buf);
    3296:	0038      	movs	r0, r7
		BT_ERR("Unable to send to driver (err %d)", err);
		k_sem_give(&bt_dev.ncmd_sem);
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED,
			     NULL);
		net_buf_unref(bt_dev.sent_cmd);
		bt_dev.sent_cmd = NULL;
    3298:	602b      	str	r3, [r5, #0]
		net_buf_unref(buf);
    329a:	f010 f971 	bl	13580 <net_buf_unref>

static void process_events(struct k_poll_event *ev, int count)
{
	BT_DBG("count %d", count);

	for (; count; ev++, count--) {
    329e:	9b05      	ldr	r3, [sp, #20]
    32a0:	340c      	adds	r4, #12
    32a2:	3b01      	subs	r3, #1
    32a4:	9305      	str	r3, [sp, #20]
    32a6:	0022      	movs	r2, r4
    32a8:	9b05      	ldr	r3, [sp, #20]
    32aa:	3a08      	subs	r2, #8
    32ac:	2b00      	cmp	r3, #0
    32ae:	d03a      	beq.n	3326 <hci_tx_thread+0x14e>
		BT_DBG("ev->state %u", ev->state);

		switch (ev->state) {
    32b0:	6853      	ldr	r3, [r2, #4]
    32b2:	03db      	lsls	r3, r3, #15
    32b4:	0edb      	lsrs	r3, r3, #27
    32b6:	2b02      	cmp	r3, #2
    32b8:	d0f1      	beq.n	329e <hci_tx_thread+0xc6>
    32ba:	2b08      	cmp	r3, #8
    32bc:	d117      	bne.n	32ee <hci_tx_thread+0x116>
		case K_POLL_STATE_SIGNALED:
			break;
		case K_POLL_STATE_FIFO_DATA_AVAILABLE:
			if (ev->tag == BT_EVENT_CMD_TX) {
    32be:	7916      	ldrb	r6, [r2, #4]
    32c0:	2e00      	cmp	r6, #0
    32c2:	d122      	bne.n	330a <hci_tx_thread+0x132>
	struct net_buf *buf;
	int err;

	/* Get next command */
	BT_DBG("calling net_buf_get");
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    32c4:	4d23      	ldr	r5, [pc, #140]	; (3354 <hci_tx_thread+0x17c>)
    32c6:	0031      	movs	r1, r6
    32c8:	0028      	movs	r0, r5
    32ca:	30c4      	adds	r0, #196	; 0xc4
    32cc:	f010 f92c 	bl	13528 <net_buf_get>
    32d0:	1e07      	subs	r7, r0, #0
	BT_ASSERT(buf);
    32d2:	d1a1      	bne.n	3218 <hci_tx_thread+0x40>
    32d4:	4b17      	ldr	r3, [pc, #92]	; (3334 <hci_tx_thread+0x15c>)
    32d6:	4a18      	ldr	r2, [pc, #96]	; (3338 <hci_tx_thread+0x160>)
    32d8:	9301      	str	r3, [sp, #4]
    32da:	4b18      	ldr	r3, [pc, #96]	; (333c <hci_tx_thread+0x164>)
    32dc:	4918      	ldr	r1, [pc, #96]	; (3340 <hci_tx_thread+0x168>)
    32de:	9300      	str	r3, [sp, #0]
    32e0:	481e      	ldr	r0, [pc, #120]	; (335c <hci_tx_thread+0x184>)
    32e2:	4b1b      	ldr	r3, [pc, #108]	; (3350 <hci_tx_thread+0x178>)
    32e4:	f7fe fb4c 	bl	1980 <printk>
    32e8:	b662      	cpsie	i
    32ea:	2004      	movs	r0, #4
    32ec:	df02      	svc	2
	BT_DBG("count %d", count);

	for (; count; ev++, count--) {
		BT_DBG("ev->state %u", ev->state);

		switch (ev->state) {
    32ee:	2b00      	cmp	r3, #0
    32f0:	d0d5      	beq.n	329e <hci_tx_thread+0xc6>
			}
			break;
		case K_POLL_STATE_NOT_READY:
			break;
		default:
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    32f2:	4a10      	ldr	r2, [pc, #64]	; (3334 <hci_tx_thread+0x15c>)
    32f4:	9301      	str	r3, [sp, #4]
    32f6:	4b1a      	ldr	r3, [pc, #104]	; (3360 <hci_tx_thread+0x188>)
    32f8:	9202      	str	r2, [sp, #8]
    32fa:	9300      	str	r3, [sp, #0]
    32fc:	4a19      	ldr	r2, [pc, #100]	; (3364 <hci_tx_thread+0x18c>)
    32fe:	4b1a      	ldr	r3, [pc, #104]	; (3368 <hci_tx_thread+0x190>)
    3300:	490f      	ldr	r1, [pc, #60]	; (3340 <hci_tx_thread+0x168>)
    3302:	481a      	ldr	r0, [pc, #104]	; (336c <hci_tx_thread+0x194>)
    3304:	f7fe fb3c 	bl	1980 <printk>
    3308:	e7c9      	b.n	329e <hci_tx_thread+0xc6>
			if (ev->tag == BT_EVENT_CMD_TX) {
				send_cmd();
			} else if (IS_ENABLED(CONFIG_BLUETOOTH_CONN)) {
				struct bt_conn *conn;

				if (ev->tag == BT_EVENT_CONN_TX_NOTIFY) {
    330a:	2e01      	cmp	r6, #1
    330c:	d104      	bne.n	3318 <hci_tx_thread+0x140>
					conn = CONTAINER_OF(ev->fifo,
							    struct bt_conn,
							    tx_notify);
					bt_conn_notify_tx(conn);
    330e:	6820      	ldr	r0, [r4, #0]
    3310:	381c      	subs	r0, #28
    3312:	f001 fb09 	bl	4928 <bt_conn_notify_tx>
    3316:	e7c2      	b.n	329e <hci_tx_thread+0xc6>
				} else if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    3318:	2e02      	cmp	r6, #2
    331a:	d1c0      	bne.n	329e <hci_tx_thread+0xc6>
					conn = CONTAINER_OF(ev->fifo,
							    struct bt_conn,
							    tx_queue);
					bt_conn_process_tx(conn);
    331c:	6820      	ldr	r0, [r4, #0]
    331e:	3830      	subs	r0, #48	; 0x30
    3320:	f001 fe68 	bl	4ff4 <bt_conn_process_tx>
    3324:	e7bb      	b.n	329e <hci_tx_thread+0xc6>
		process_events(events, ev_count);

		/* Make sure we don't hog the CPU if there's all the time
		 * some ready events.
		 */
		k_yield();
    3326:	f011 fa05 	bl	14734 <k_yield>
	}
    332a:	e757      	b.n	31dc <hci_tx_thread+0x4>
    332c:	200005e8 	.word	0x200005e8
    3330:	fffe0fff 	.word	0xfffe0fff
    3334:	000154c4 	.word	0x000154c4
    3338:	00015484 	.word	0x00015484
    333c:	000154c9 	.word	0x000154c9
    3340:	0001548b 	.word	0x0001548b
    3344:	00015786 	.word	0x00015786
    3348:	00017900 	.word	0x00017900
    334c:	000157d5 	.word	0x000157d5
    3350:	00017a7f 	.word	0x00017a7f
    3354:	200004d0 	.word	0x200004d0
    3358:	00015754 	.word	0x00015754
    335c:	000157b0 	.word	0x000157b0
    3360:	0001550f 	.word	0x0001550f
    3364:	000154d1 	.word	0x000154d1
    3368:	000178f1 	.word	0x000178f1
    336c:	00015800 	.word	0x00015800

00003370 <bt_recv>:

	return bt_dev.drv->send(buf);
}

int bt_recv(struct net_buf *buf)
{
    3370:	b5f0      	push	{r4, r5, r6, r7, lr}
    3372:	0007      	movs	r7, r0
    3374:	b093      	sub	sp, #76	; 0x4c

	bt_monitor_send(bt_monitor_opcode(buf), buf->data, buf->len);

	BT_DBG("buf %p len %u", buf, buf->len);

	pool = net_buf_pool_get(buf->pool_id);
    3376:	7980      	ldrb	r0, [r0, #6]
    3378:	f010 f886 	bl	13488 <net_buf_pool_get>
	if (pool->user_data_size < BT_BUF_USER_DATA_MIN) {
    337c:	8b43      	ldrh	r3, [r0, #26]
    337e:	2b03      	cmp	r3, #3
    3380:	d80a      	bhi.n	3398 <bt_recv+0x28>
		BT_ERR("Too small user data size");
    3382:	4bc6      	ldr	r3, [pc, #792]	; (369c <bt_recv+0x32c>)
    3384:	4ac6      	ldr	r2, [pc, #792]	; (36a0 <bt_recv+0x330>)
    3386:	9301      	str	r3, [sp, #4]
    3388:	4bc6      	ldr	r3, [pc, #792]	; (36a4 <bt_recv+0x334>)
    338a:	49c7      	ldr	r1, [pc, #796]	; (36a8 <bt_recv+0x338>)
    338c:	9300      	str	r3, [sp, #0]
    338e:	48c7      	ldr	r0, [pc, #796]	; (36ac <bt_recv+0x33c>)
    3390:	4bc7      	ldr	r3, [pc, #796]	; (36b0 <bt_recv+0x340>)
    3392:	f7fe faf5 	bl	1980 <printk>
    3396:	e08a      	b.n	34ae <bt_recv+0x13e>
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return *(u8_t *)net_buf_user_data(buf);
    3398:	0038      	movs	r0, r7
    339a:	f7ff f81b 	bl	23d4 <net_buf_user_data>
    339e:	7803      	ldrb	r3, [r0, #0]
		net_buf_unref(buf);
		return -EINVAL;
	}

	switch (bt_buf_get_type(buf)) {
    33a0:	2b01      	cmp	r3, #1
    33a2:	d049      	beq.n	3438 <bt_recv+0xc8>
    33a4:	2b03      	cmp	r3, #3
    33a6:	d000      	beq.n	33aa <bt_recv+0x3a>
    33a8:	e076      	b.n	3498 <bt_recv+0x128>
#endif

#if defined(CONFIG_BLUETOOTH_CONN)
static void hci_acl(struct net_buf *buf)
{
	struct bt_hci_acl_hdr *hdr = (void *)buf->data;
    33aa:	68bb      	ldr	r3, [r7, #8]
	u16_t handle, len = sys_le16_to_cpu(hdr->len);
    33ac:	78dc      	ldrb	r4, [r3, #3]
    33ae:	789a      	ldrb	r2, [r3, #2]
	struct bt_conn *conn;
	u8_t flags;

	BT_DBG("buf %p", buf);

	handle = sys_le16_to_cpu(hdr->handle);
    33b0:	785d      	ldrb	r5, [r3, #1]
    33b2:	7819      	ldrb	r1, [r3, #0]

#if defined(CONFIG_BLUETOOTH_CONN)
static void hci_acl(struct net_buf *buf)
{
	struct bt_hci_acl_hdr *hdr = (void *)buf->data;
	u16_t handle, len = sys_le16_to_cpu(hdr->len);
    33b4:	0224      	lsls	r4, r4, #8
    33b6:	4314      	orrs	r4, r2
	struct bt_conn *conn;
	u8_t flags;

	BT_DBG("buf %p", buf);

	handle = sys_le16_to_cpu(hdr->handle);
    33b8:	022a      	lsls	r2, r5, #8
    33ba:	430a      	orrs	r2, r1
	flags = bt_acl_flags(handle);

	acl(buf)->handle = bt_acl_handle(handle);
    33bc:	0513      	lsls	r3, r2, #20
    33be:	0d1b      	lsrs	r3, r3, #20
    33c0:	8043      	strh	r3, [r0, #2]

	net_buf_pull(buf, sizeof(*hdr));
    33c2:	0038      	movs	r0, r7
    33c4:	2104      	movs	r1, #4
    33c6:	3008      	adds	r0, #8
	struct bt_conn *conn;
	u8_t flags;

	BT_DBG("buf %p", buf);

	handle = sys_le16_to_cpu(hdr->handle);
    33c8:	0015      	movs	r5, r2
	flags = bt_acl_flags(handle);

	acl(buf)->handle = bt_acl_handle(handle);

	net_buf_pull(buf, sizeof(*hdr));
    33ca:	f010 f91c 	bl	13606 <net_buf_simple_pull>

	BT_DBG("handle %u len %u flags %u", acl(buf)->handle, len, flags);

	if (buf->len != len) {
    33ce:	89bb      	ldrh	r3, [r7, #12]
    33d0:	429c      	cmp	r4, r3
    33d2:	d00c      	beq.n	33ee <bt_recv+0x7e>
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
    33d4:	4ab1      	ldr	r2, [pc, #708]	; (369c <bt_recv+0x32c>)
    33d6:	9301      	str	r3, [sp, #4]
    33d8:	4bb2      	ldr	r3, [pc, #712]	; (36a4 <bt_recv+0x334>)
    33da:	9203      	str	r2, [sp, #12]
    33dc:	9300      	str	r3, [sp, #0]
    33de:	9402      	str	r4, [sp, #8]
    33e0:	4bb4      	ldr	r3, [pc, #720]	; (36b4 <bt_recv+0x344>)
    33e2:	4aaf      	ldr	r2, [pc, #700]	; (36a0 <bt_recv+0x330>)
    33e4:	49b0      	ldr	r1, [pc, #704]	; (36a8 <bt_recv+0x338>)
    33e6:	48b4      	ldr	r0, [pc, #720]	; (36b8 <bt_recv+0x348>)
    33e8:	f7fe faca 	bl	1980 <printk>
    33ec:	e04e      	b.n	348c <bt_recv+0x11c>
		net_buf_unref(buf);
		return;
	}

	conn = bt_conn_lookup_handle(acl(buf)->handle);
    33ee:	0038      	movs	r0, r7
    33f0:	f7fe fff0 	bl	23d4 <net_buf_user_data>
    33f4:	8840      	ldrh	r0, [r0, #2]
    33f6:	f001 fc7b 	bl	4cf0 <bt_conn_lookup_handle>
    33fa:	1e04      	subs	r4, r0, #0
	if (!conn) {
    33fc:	d114      	bne.n	3428 <bt_recv+0xb8>
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
    33fe:	0038      	movs	r0, r7
    3400:	f7fe ffe8 	bl	23d4 <net_buf_user_data>
    3404:	4ba5      	ldr	r3, [pc, #660]	; (369c <bt_recv+0x32c>)
    3406:	4aa6      	ldr	r2, [pc, #664]	; (36a0 <bt_recv+0x330>)
    3408:	9302      	str	r3, [sp, #8]
    340a:	8843      	ldrh	r3, [r0, #2]
    340c:	49a6      	ldr	r1, [pc, #664]	; (36a8 <bt_recv+0x338>)
    340e:	9301      	str	r3, [sp, #4]
    3410:	4ba4      	ldr	r3, [pc, #656]	; (36a4 <bt_recv+0x334>)
    3412:	48aa      	ldr	r0, [pc, #680]	; (36bc <bt_recv+0x34c>)
    3414:	9300      	str	r3, [sp, #0]
    3416:	4ba7      	ldr	r3, [pc, #668]	; (36b4 <bt_recv+0x344>)
    3418:	f7fe fab2 	bl	1980 <printk>
		net_buf_unref(buf);
    341c:	0038      	movs	r0, r7
    341e:	f010 f8af 	bl	13580 <net_buf_unref>
#if defined(CONFIG_BLUETOOTH_RECV_IS_RX_THREAD)
		hci_acl(buf);
#else
		net_buf_put(&bt_dev.rx_queue, buf);
#endif
		return 0;
    3422:	0020      	movs	r0, r4
    3424:	f000 fda0 	bl	3f68 <bt_recv+0xbf8>
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
		net_buf_unref(buf);
		return;
	}

	bt_conn_recv(conn, buf, flags);
    3428:	0b2a      	lsrs	r2, r5, #12
    342a:	0039      	movs	r1, r7
    342c:	f001 f98e 	bl	474c <bt_conn_recv>
	bt_conn_unref(conn);
    3430:	0020      	movs	r0, r4
    3432:	f001 fcd1 	bl	4dd8 <bt_conn_unref>
    3436:	e02c      	b.n	3492 <bt_recv+0x122>
	}
}

static void hci_event(struct net_buf *buf)
{
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    3438:	68bc      	ldr	r4, [r7, #8]

	BT_DBG("event 0x%02x", hdr->evt);

	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));
    343a:	7822      	ldrb	r2, [r4, #0]
    343c:	2a13      	cmp	r2, #19
    343e:	d811      	bhi.n	3464 <bt_recv+0xf4>
    3440:	4093      	lsls	r3, r2
    3442:	228c      	movs	r2, #140	; 0x8c
    3444:	0312      	lsls	r2, r2, #12
    3446:	4213      	tst	r3, r2
    3448:	d00c      	beq.n	3464 <bt_recv+0xf4>
    344a:	4b94      	ldr	r3, [pc, #592]	; (369c <bt_recv+0x32c>)
    344c:	4a94      	ldr	r2, [pc, #592]	; (36a0 <bt_recv+0x330>)
    344e:	9301      	str	r3, [sp, #4]
    3450:	4b94      	ldr	r3, [pc, #592]	; (36a4 <bt_recv+0x334>)
    3452:	4995      	ldr	r1, [pc, #596]	; (36a8 <bt_recv+0x338>)
    3454:	9300      	str	r3, [sp, #0]
    3456:	489a      	ldr	r0, [pc, #616]	; (36c0 <bt_recv+0x350>)
    3458:	4b9a      	ldr	r3, [pc, #616]	; (36c4 <bt_recv+0x354>)
    345a:	f7fe fa91 	bl	1980 <printk>
    345e:	b662      	cpsie	i
    3460:	2004      	movs	r0, #4
    3462:	df02      	svc	2

	net_buf_pull(buf, sizeof(*hdr));
    3464:	003b      	movs	r3, r7
    3466:	3308      	adds	r3, #8
    3468:	2102      	movs	r1, #2
    346a:	0018      	movs	r0, r3
    346c:	9307      	str	r3, [sp, #28]
    346e:	f010 f8ca 	bl	13606 <net_buf_simple_pull>

	switch (hdr->evt) {
    3472:	7824      	ldrb	r4, [r4, #0]
    3474:	2c08      	cmp	r4, #8
    3476:	d021      	beq.n	34bc <bt_recv+0x14c>
    3478:	d841      	bhi.n	34fe <bt_recv+0x18e>
    347a:	2c05      	cmp	r4, #5
    347c:	d000      	beq.n	3480 <bt_recv+0x110>
    347e:	e0c7      	b.n	3610 <bt_recv+0x2a0>
    3480:	68bd      	ldr	r5, [r7, #8]
	struct bt_conn *conn;

	BT_DBG("status %u handle %u reason %u", evt->status, handle,
	       evt->reason);

	if (evt->status) {
    3482:	782b      	ldrb	r3, [r5, #0]
    3484:	9307      	str	r3, [sp, #28]
    3486:	2b00      	cmp	r3, #0
    3488:	d100      	bne.n	348c <bt_recv+0x11c>
    348a:	e084      	b.n	3596 <bt_recv+0x226>
			buf->len, bt_hex(buf->data, buf->len));
		break;

	}

	net_buf_unref(buf);
    348c:	0038      	movs	r0, r7
    348e:	f010 f877 	bl	13580 <net_buf_unref>
#if defined(CONFIG_BLUETOOTH_RECV_IS_RX_THREAD)
		hci_event(buf);
#else
		net_buf_put(&bt_dev.rx_queue, buf);
#endif
		return 0;
    3492:	2000      	movs	r0, #0
    3494:	f000 fd68 	bl	3f68 <bt_recv+0xbf8>
	default:
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    3498:	4a80      	ldr	r2, [pc, #512]	; (369c <bt_recv+0x32c>)
    349a:	9301      	str	r3, [sp, #4]
    349c:	4b81      	ldr	r3, [pc, #516]	; (36a4 <bt_recv+0x334>)
    349e:	9202      	str	r2, [sp, #8]
    34a0:	9300      	str	r3, [sp, #0]
    34a2:	4a7f      	ldr	r2, [pc, #508]	; (36a0 <bt_recv+0x330>)
    34a4:	4b82      	ldr	r3, [pc, #520]	; (36b0 <bt_recv+0x340>)
    34a6:	4980      	ldr	r1, [pc, #512]	; (36a8 <bt_recv+0x338>)
    34a8:	4887      	ldr	r0, [pc, #540]	; (36c8 <bt_recv+0x358>)
    34aa:	f7fe fa69 	bl	1980 <printk>
		net_buf_unref(buf);
    34ae:	0038      	movs	r0, r7
    34b0:	f010 f866 	bl	13580 <net_buf_unref>
		return -EINVAL;
    34b4:	2016      	movs	r0, #22
    34b6:	4240      	negs	r0, r0
    34b8:	f000 fd56 	bl	3f68 <bt_recv+0xbf8>
    34bc:	68be      	ldr	r6, [r7, #8]

#if defined(CONFIG_BLUETOOTH_SMP) || defined(CONFIG_BLUETOOTH_BREDR)
static void hci_encrypt_change(struct net_buf *buf)
{
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
	u16_t handle = sys_le16_to_cpu(evt->handle);
    34be:	78b5      	ldrb	r5, [r6, #2]
    34c0:	7873      	ldrb	r3, [r6, #1]
    34c2:	022d      	lsls	r5, r5, #8
    34c4:	431d      	orrs	r5, r3
	struct bt_conn *conn;

	BT_DBG("status %u handle %u encrypt 0x%02x", evt->status, handle,
	       evt->encrypt);

	conn = bt_conn_lookup_handle(handle);
    34c6:	0028      	movs	r0, r5
    34c8:	f001 fc12 	bl	4cf0 <bt_conn_lookup_handle>
    34cc:	1e04      	subs	r4, r0, #0
	if (!conn) {
    34ce:	d106      	bne.n	34de <bt_recv+0x16e>
		BT_ERR("Unable to look up conn with handle %u", handle);
    34d0:	4b72      	ldr	r3, [pc, #456]	; (369c <bt_recv+0x32c>)
    34d2:	9501      	str	r5, [sp, #4]
    34d4:	9302      	str	r3, [sp, #8]
    34d6:	4b73      	ldr	r3, [pc, #460]	; (36a4 <bt_recv+0x334>)
    34d8:	9300      	str	r3, [sp, #0]
    34da:	4b7c      	ldr	r3, [pc, #496]	; (36cc <bt_recv+0x35c>)
    34dc:	e023      	b.n	3526 <bt_recv+0x1b6>
		return;
	}

	if (evt->status) {
    34de:	7833      	ldrb	r3, [r6, #0]
    34e0:	7882      	ldrb	r2, [r0, #2]
    34e2:	2b00      	cmp	r3, #0
    34e4:	d004      	beq.n	34f0 <bt_recv+0x180>
		/* TODO report error */
		if (conn->type == BT_CONN_TYPE_LE) {
    34e6:	2a00      	cmp	r2, #0
    34e8:	d144      	bne.n	3574 <bt_recv+0x204>
			/* reset required security level in case of error */
			conn->required_sec_level = conn->sec_level;
    34ea:	7a03      	ldrb	r3, [r0, #8]
    34ec:	7243      	strb	r3, [r0, #9]
    34ee:	e041      	b.n	3574 <bt_recv+0x204>
		}
		bt_conn_unref(conn);
		return;
	}

	conn->encrypt = evt->encrypt;
    34f0:	78f3      	ldrb	r3, [r6, #3]
    34f2:	7283      	strb	r3, [r0, #10]

#if defined(CONFIG_BLUETOOTH_SMP)
	if (conn->type == BT_CONN_TYPE_LE) {
    34f4:	2a00      	cmp	r2, #0
    34f6:	d125      	bne.n	3544 <bt_recv+0x1d4>
		 *
		 * Update keys with last pairing info for proper sec level
		 * update. This is done only for LE transport, for BR/EDR keys
		 * are updated on HCI 'Link Key Notification Event'
		 */
		if (conn->encrypt) {
    34f8:	2b00      	cmp	r3, #0
    34fa:	d020      	beq.n	353e <bt_recv+0x1ce>
    34fc:	e01c      	b.n	3538 <bt_recv+0x1c8>

	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));

	net_buf_pull(buf, sizeof(*hdr));

	switch (hdr->evt) {
    34fe:	2c30      	cmp	r4, #48	; 0x30
    3500:	d000      	beq.n	3504 <bt_recv+0x194>
    3502:	e083      	b.n	360c <bt_recv+0x29c>
    3504:	68be      	ldr	r6, [r7, #8]
{
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
	struct bt_conn *conn;
	u16_t handle;

	handle = sys_le16_to_cpu(evt->handle);
    3506:	78b5      	ldrb	r5, [r6, #2]
    3508:	7873      	ldrb	r3, [r6, #1]
    350a:	022d      	lsls	r5, r5, #8
    350c:	431d      	orrs	r5, r3

	BT_DBG("status %u handle %u", evt->status, handle);

	conn = bt_conn_lookup_handle(handle);
    350e:	0028      	movs	r0, r5
    3510:	f001 fbee 	bl	4cf0 <bt_conn_lookup_handle>
    3514:	1e04      	subs	r4, r0, #0
	if (!conn) {
    3516:	d000      	beq.n	351a <bt_recv+0x1aa>
    3518:	e08d      	b.n	3636 <bt_recv+0x2c6>
		BT_ERR("Unable to look up conn with handle %u", handle);
    351a:	4b60      	ldr	r3, [pc, #384]	; (369c <bt_recv+0x32c>)
    351c:	9501      	str	r5, [sp, #4]
    351e:	9302      	str	r3, [sp, #8]
    3520:	4b60      	ldr	r3, [pc, #384]	; (36a4 <bt_recv+0x334>)
    3522:	9300      	str	r3, [sp, #0]
    3524:	4b6a      	ldr	r3, [pc, #424]	; (36d0 <bt_recv+0x360>)
    3526:	4a5e      	ldr	r2, [pc, #376]	; (36a0 <bt_recv+0x330>)
    3528:	495f      	ldr	r1, [pc, #380]	; (36a8 <bt_recv+0x338>)
    352a:	486a      	ldr	r0, [pc, #424]	; (36d4 <bt_recv+0x364>)
    352c:	f7fe fa28 	bl	1980 <printk>
    3530:	e7ac      	b.n	348c <bt_recv+0x11c>
	 * This is done only for LE transport. For BR/EDR transport keys are
	 * updated on HCI 'Link Key Notification Event', therefore update here
	 * only security level based on available keys and encryption state.
	 */
#if defined(CONFIG_BLUETOOTH_SMP)
	if (conn->type == BT_CONN_TYPE_LE) {
    3532:	7883      	ldrb	r3, [r0, #2]
    3534:	2b00      	cmp	r3, #0
    3536:	d105      	bne.n	3544 <bt_recv+0x1d4>
		bt_smp_update_keys(conn);
    3538:	0020      	movs	r0, r4
    353a:	f005 fd27 	bl	8f8c <bt_smp_update_keys>
		update_sec_level(conn);
    353e:	0020      	movs	r0, r4
    3540:	f7fe ff82 	bl	2448 <update_sec_level>
	if (conn->type == BT_CONN_TYPE_BR) {
		update_sec_level_br(conn);
	}
#endif /* CONFIG_BLUETOOTH_BREDR */

	bt_l2cap_encrypt_change(conn, evt->status);
    3544:	0020      	movs	r0, r4
    3546:	7831      	ldrb	r1, [r6, #0]
    3548:	f001 fedb 	bl	5302 <bt_l2cap_encrypt_change>
	bt_conn_security_changed(conn);
    354c:	0020      	movs	r0, r4
    354e:	f001 f8c3 	bl	46d8 <bt_conn_security_changed>
    3552:	e00f      	b.n	3574 <bt_recv+0x204>
	if (!conn) {
		BT_ERR("Unable to look up conn with handle %u", handle);
		goto advertise;
	}

	conn->err = evt->reason;
    3554:	0003      	movs	r3, r0
    3556:	78ea      	ldrb	r2, [r5, #3]
    3558:	3350      	adds	r3, #80	; 0x50
    355a:	701a      	strb	r2, [r3, #0]

	/* Check stacks usage (no-ops if not enabled) */
	k_call_stacks_analyze();
    355c:	f010 fb74 	bl	13c48 <k_call_stacks_analyze>
#if !defined(CONFIG_BLUETOOTH_RECV_IS_RX_THREAD)
	STACK_ANALYZE("rx stack", rx_thread_stack);
#endif
	STACK_ANALYZE("tx stack", tx_thread_stack);

	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    3560:	9907      	ldr	r1, [sp, #28]
    3562:	0020      	movs	r0, r4
    3564:	f001 fb0a 	bl	4b7c <bt_conn_set_state>
	conn->handle = 0;
    3568:	466b      	mov	r3, sp

	if (conn->type != BT_CONN_TYPE_LE) {
    356a:	78a5      	ldrb	r5, [r4, #2]
	STACK_ANALYZE("rx stack", rx_thread_stack);
#endif
	STACK_ANALYZE("tx stack", tx_thread_stack);

	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
	conn->handle = 0;
    356c:	8b9b      	ldrh	r3, [r3, #28]
    356e:	8023      	strh	r3, [r4, #0]

	if (conn->type != BT_CONN_TYPE_LE) {
    3570:	2d00      	cmp	r5, #0
    3572:	d025      	beq.n	35c0 <bt_recv+0x250>
	}

	update_conn_param(conn);

done:
	bt_conn_unref(conn);
    3574:	0020      	movs	r0, r4
    3576:	e00b      	b.n	3590 <bt_recv+0x220>
		BT_ERR("Unable to lookup conn for handle %u", handle);
		return le_conn_param_neg_reply(handle,
					       BT_HCI_ERR_UNKNOWN_CONN_ID);
	}

	if (!le_param_req(conn, &param)) {
    3578:	0021      	movs	r1, r4
    357a:	9807      	ldr	r0, [sp, #28]
    357c:	f001 f870 	bl	4660 <le_param_req>
    3580:	2800      	cmp	r0, #0
    3582:	d000      	beq.n	3586 <bt_recv+0x216>
    3584:	e218      	b.n	39b8 <bt_recv+0x648>
		err = le_conn_param_neg_reply(handle,
    3586:	211e      	movs	r1, #30
    3588:	0030      	movs	r0, r6
    358a:	f7ff fe09 	bl	31a0 <le_conn_param_neg_reply>
					      BT_HCI_ERR_INVALID_LL_PARAM);
	} else {
		err = le_conn_param_req_reply(handle, &param);
	}

	bt_conn_unref(conn);
    358e:	9807      	ldr	r0, [sp, #28]
	cp->handle = evt->handle;

	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);

done:
	bt_conn_unref(conn);
    3590:	f001 fc22 	bl	4dd8 <bt_conn_unref>
    3594:	e77a      	b.n	348c <bt_recv+0x11c>
}

static void hci_disconn_complete(struct net_buf *buf)
{
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
	u16_t handle = sys_le16_to_cpu(evt->handle);
    3596:	78ae      	ldrb	r6, [r5, #2]
    3598:	786b      	ldrb	r3, [r5, #1]
    359a:	0236      	lsls	r6, r6, #8
    359c:	431e      	orrs	r6, r3

	if (evt->status) {
		return;
	}

	conn = bt_conn_lookup_handle(handle);
    359e:	0030      	movs	r0, r6
    35a0:	f001 fba6 	bl	4cf0 <bt_conn_lookup_handle>
    35a4:	1e04      	subs	r4, r0, #0
	if (!conn) {
    35a6:	d1d5      	bne.n	3554 <bt_recv+0x1e4>
		BT_ERR("Unable to look up conn with handle %u", handle);
    35a8:	4b3c      	ldr	r3, [pc, #240]	; (369c <bt_recv+0x32c>)
    35aa:	9601      	str	r6, [sp, #4]
    35ac:	9302      	str	r3, [sp, #8]
    35ae:	4b3d      	ldr	r3, [pc, #244]	; (36a4 <bt_recv+0x334>)
    35b0:	4a3b      	ldr	r2, [pc, #236]	; (36a0 <bt_recv+0x330>)
    35b2:	9300      	str	r3, [sp, #0]
    35b4:	493c      	ldr	r1, [pc, #240]	; (36a8 <bt_recv+0x338>)
    35b6:	4b48      	ldr	r3, [pc, #288]	; (36d8 <bt_recv+0x368>)
    35b8:	4846      	ldr	r0, [pc, #280]	; (36d4 <bt_recv+0x364>)
    35ba:	f7fe f9e1 	bl	1980 <printk>
    35be:	e00f      	b.n	35e0 <bt_recv+0x270>
#endif
		bt_conn_unref(conn);
		return;
	}

	if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
    35c0:	1d20      	adds	r0, r4, #4
    35c2:	0029      	movs	r1, r5
    35c4:	f7fe ff26 	bl	2414 <atomic_test_bit>
    35c8:	2800      	cmp	r0, #0
    35ca:	d006      	beq.n	35da <bt_recv+0x26a>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    35cc:	0020      	movs	r0, r4
    35ce:	2101      	movs	r1, #1
    35d0:	f001 fad4 	bl	4b7c <bt_conn_set_state>
		bt_le_scan_update(false);
    35d4:	0028      	movs	r0, r5
    35d6:	f7ff f9a3 	bl	2920 <bt_le_scan_update>
	}

	bt_conn_unref(conn);
    35da:	0020      	movs	r0, r4
    35dc:	f001 fbfc 	bl	4dd8 <bt_conn_unref>

advertise:
	if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    35e0:	4c3e      	ldr	r4, [pc, #248]	; (36dc <bt_recv+0x36c>)
    35e2:	2106      	movs	r1, #6
    35e4:	346c      	adds	r4, #108	; 0x6c
    35e6:	0020      	movs	r0, r4
    35e8:	f7fe ff14 	bl	2414 <atomic_test_bit>
    35ec:	2800      	cmp	r0, #0
    35ee:	d100      	bne.n	35f2 <bt_recv+0x282>
    35f0:	e74c      	b.n	348c <bt_recv+0x11c>
	    !atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    35f2:	2105      	movs	r1, #5
    35f4:	0020      	movs	r0, r4
    35f6:	f7fe ff0d 	bl	2414 <atomic_test_bit>
	}

	bt_conn_unref(conn);

advertise:
	if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    35fa:	2800      	cmp	r0, #0
    35fc:	d000      	beq.n	3600 <bt_recv+0x290>
    35fe:	e745      	b.n	348c <bt_recv+0x11c>
	    !atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
		if (IS_ENABLED(CONFIG_BLUETOOTH_PRIVACY)) {
			le_set_private_addr();
    3600:	f7ff f886 	bl	2710 <le_set_private_addr>
		}

		set_advertise_enable(true);
    3604:	2001      	movs	r0, #1
    3606:	f7ff f829 	bl	265c <set_advertise_enable>
    360a:	e73f      	b.n	348c <bt_recv+0x11c>

	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));

	net_buf_pull(buf, sizeof(*hdr));

	switch (hdr->evt) {
    360c:	2c3e      	cmp	r4, #62	; 0x3e
    360e:	d019      	beq.n	3644 <bt_recv+0x2d4>
#endif /* CONFIG_BLUETOOTH_SMP || CONFIG_BLUETOOTH_BREDR */
	case BT_HCI_EVT_LE_META_EVENT:
		hci_le_meta_event(buf);
		break;
	default:
		BT_WARN("Unhandled event 0x%02x len %u: %s", hdr->evt,
    3610:	89bd      	ldrh	r5, [r7, #12]
    3612:	68b8      	ldr	r0, [r7, #8]
    3614:	0029      	movs	r1, r5
    3616:	f7fe fdcf 	bl	21b8 <bt_hex>
    361a:	4b20      	ldr	r3, [pc, #128]	; (369c <bt_recv+0x32c>)
    361c:	9003      	str	r0, [sp, #12]
    361e:	9304      	str	r3, [sp, #16]
    3620:	4b2f      	ldr	r3, [pc, #188]	; (36e0 <bt_recv+0x370>)
    3622:	4a30      	ldr	r2, [pc, #192]	; (36e4 <bt_recv+0x374>)
    3624:	9300      	str	r3, [sp, #0]
    3626:	4920      	ldr	r1, [pc, #128]	; (36a8 <bt_recv+0x338>)
    3628:	4b26      	ldr	r3, [pc, #152]	; (36c4 <bt_recv+0x354>)
    362a:	482f      	ldr	r0, [pc, #188]	; (36e8 <bt_recv+0x378>)
    362c:	9502      	str	r5, [sp, #8]
    362e:	9401      	str	r4, [sp, #4]
    3630:	f7fe f9a6 	bl	1980 <printk>
    3634:	e72a      	b.n	348c <bt_recv+0x11c>
	if (!conn) {
		BT_ERR("Unable to look up conn with handle %u", handle);
		return;
	}

	if (evt->status) {
    3636:	7831      	ldrb	r1, [r6, #0]
    3638:	2900      	cmp	r1, #0
    363a:	d100      	bne.n	363e <bt_recv+0x2ce>
    363c:	e779      	b.n	3532 <bt_recv+0x1c2>
		bt_l2cap_encrypt_change(conn, evt->status);
    363e:	f001 fe60 	bl	5302 <bt_l2cap_encrypt_change>
    3642:	e723      	b.n	348c <bt_recv+0x11c>
	}
}

static void hci_le_meta_event(struct net_buf *buf)
{
	struct bt_hci_evt_le_meta_event *evt = (void *)buf->data;
    3644:	68bc      	ldr	r4, [r7, #8]

	BT_DBG("subevent 0x%02x", evt->subevent);

	net_buf_pull(buf, sizeof(*evt));
    3646:	2101      	movs	r1, #1
    3648:	9807      	ldr	r0, [sp, #28]
    364a:	f00f ffdc 	bl	13606 <net_buf_simple_pull>

	switch (evt->subevent) {
    364e:	7824      	ldrb	r4, [r4, #0]
    3650:	1e60      	subs	r0, r4, #1
    3652:	280b      	cmp	r0, #11
    3654:	d901      	bls.n	365a <bt_recv+0x2ea>
    3656:	f000 fc73 	bl	3f40 <bt_recv+0xbd0>
    365a:	f7fc fd97 	bl	18c <__gnu_thumb1_case_uhi>
    365e:	000c      	.short	0x000c
    3660:	010503a7 	.word	0x010503a7
    3664:	02440132 	.word	0x02440132
    3668:	01d6017c 	.word	0x01d6017c
    366c:	037e035b 	.word	0x037e035b
    3670:	04710471 	.word	0x04710471
    3674:	01f2      	.short	0x01f2
    3676:	68bd      	ldr	r5, [r7, #8]
	int err;

	BT_DBG("status %u handle %u role %u %s", evt->status, handle,
	       evt->role, bt_addr_le_str(&evt->peer_addr));

	if (evt->status) {
    3678:	782b      	ldrb	r3, [r5, #0]
    367a:	2b00      	cmp	r3, #0
    367c:	d036      	beq.n	36ec <bt_recv+0x37c>
		 * connection so there is no need to check ID address as
		 * only one connection can be in that state
		 *
		 * Depending on error code address might not be valid anyway.
		 */
		conn = bt_conn_lookup_state_le(NULL, BT_CONN_CONNECT);
    367e:	2102      	movs	r1, #2
    3680:	2000      	movs	r0, #0
    3682:	f001 fb85 	bl	4d90 <bt_conn_lookup_state_le>
    3686:	1e04      	subs	r4, r0, #0
		if (!conn) {
    3688:	d100      	bne.n	368c <bt_recv+0x31c>
    368a:	e6ff      	b.n	348c <bt_recv+0x11c>
			return;
		}

		conn->err = evt->status;
    368c:	0003      	movs	r3, r0
    368e:	782a      	ldrb	r2, [r5, #0]
    3690:	3350      	adds	r3, #80	; 0x50
    3692:	701a      	strb	r2, [r3, #0]

		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    3694:	2100      	movs	r1, #0
    3696:	f001 fa71 	bl	4b7c <bt_conn_set_state>
    369a:	e76b      	b.n	3574 <bt_recv+0x204>
    369c:	000154c4 	.word	0x000154c4
    36a0:	00015484 	.word	0x00015484
    36a4:	000154c9 	.word	0x000154c9
    36a8:	0001548b 	.word	0x0001548b
    36ac:	00015831 	.word	0x00015831
    36b0:	00017a88 	.word	0x00017a88
    36b4:	000179bf 	.word	0x000179bf
    36b8:	0001585a 	.word	0x0001585a
    36bc:	0001588e 	.word	0x0001588e
    36c0:	00015a11 	.word	0x00015a11
    36c4:	000179f8 	.word	0x000179f8
    36c8:	000159ed 	.word	0x000159ed
    36cc:	00017a14 	.word	0x00017a14
    36d0:	0001791e 	.word	0x0001791e
    36d4:	000158c0 	.word	0x000158c0
    36d8:	00017993 	.word	0x00017993
    36dc:	200004d0 	.word	0x200004d0
    36e0:	0001550f 	.word	0x0001550f
    36e4:	000154d1 	.word	0x000154d1
    36e8:	000159bb 	.word	0x000159bb
}

static void le_conn_complete(struct net_buf *buf)
{
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
	u16_t handle = sys_le16_to_cpu(evt->handle);
    36ec:	78ab      	ldrb	r3, [r5, #2]
    36ee:	786a      	ldrb	r2, [r5, #1]
    36f0:	021b      	lsls	r3, r3, #8
    36f2:	4313      	orrs	r3, r2
    36f4:	9307      	str	r3, [sp, #28]
		bt_conn_unref(conn);

		return;
	}

	id_addr = find_id_addr(&evt->peer_addr);
    36f6:	1d2b      	adds	r3, r5, #4
static const bt_addr_le_t *find_id_addr(const bt_addr_le_t *addr)
{
	if (IS_ENABLED(CONFIG_BLUETOOTH_SMP)) {
		struct bt_keys *keys;

		keys = bt_keys_find_irk(addr);
    36f8:	0018      	movs	r0, r3
		bt_conn_unref(conn);

		return;
	}

	id_addr = find_id_addr(&evt->peer_addr);
    36fa:	9308      	str	r3, [sp, #32]
static const bt_addr_le_t *find_id_addr(const bt_addr_le_t *addr)
{
	if (IS_ENABLED(CONFIG_BLUETOOTH_SMP)) {
		struct bt_keys *keys;

		keys = bt_keys_find_irk(addr);
    36fc:	f005 fd50 	bl	91a0 <bt_keys_find_irk>
			       bt_addr_le_str(addr));
			return &keys->addr;
		}
	}

	return addr;
    3700:	1d2e      	adds	r6, r5, #4
{
	if (IS_ENABLED(CONFIG_BLUETOOTH_SMP)) {
		struct bt_keys *keys;

		keys = bt_keys_find_irk(addr);
		if (keys) {
    3702:	2800      	cmp	r0, #0
    3704:	d000      	beq.n	3708 <bt_recv+0x398>
			BT_DBG("Identity %s matched RPA %s",
			       bt_addr_le_str(&keys->addr),
			       bt_addr_le_str(addr));
			return &keys->addr;
    3706:	0006      	movs	r6, r0

	/*
	 * Make lookup to check if there's a connection object in
	 * CONNECT state associated with passed peer LE address.
	 */
	conn = bt_conn_lookup_state_le(id_addr, BT_CONN_CONNECT);
    3708:	2102      	movs	r1, #2
    370a:	0030      	movs	r0, r6
    370c:	f001 fb40 	bl	4d90 <bt_conn_lookup_state_le>

	if (evt->role == BT_CONN_ROLE_SLAVE) {
    3710:	78eb      	ldrb	r3, [r5, #3]

	/*
	 * Make lookup to check if there's a connection object in
	 * CONNECT state associated with passed peer LE address.
	 */
	conn = bt_conn_lookup_state_le(id_addr, BT_CONN_CONNECT);
    3712:	0004      	movs	r4, r0

	if (evt->role == BT_CONN_ROLE_SLAVE) {
    3714:	2b01      	cmp	r3, #1
    3716:	d10b      	bne.n	3730 <bt_recv+0x3c0>
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    3718:	2121      	movs	r1, #33	; 0x21
    371a:	48d2      	ldr	r0, [pc, #840]	; (3a64 <bt_recv+0x6f4>)
    371c:	4249      	negs	r1, r1
    371e:	306c      	adds	r0, #108	; 0x6c
    3720:	f010 fa2c 	bl	13b7c <atomic_and>
		 * object to keep host in sync with controller state
		 */
		atomic_clear_bit(bt_dev.flags, BT_DEV_ADVERTISING);

		/* only for slave we may need to add new connection */
		if (!conn) {
    3724:	2c00      	cmp	r4, #0
    3726:	d110      	bne.n	374a <bt_recv+0x3da>
			conn = bt_conn_add_le(id_addr);
    3728:	0030      	movs	r0, r6
    372a:	f001 f9f5 	bl	4b18 <bt_conn_add_le>
    372e:	0004      	movs	r4, r0
		}
	}

	if (!conn) {
    3730:	2c00      	cmp	r4, #0
    3732:	d10a      	bne.n	374a <bt_recv+0x3da>
		BT_ERR("Unable to add new conn for handle %u", handle);
    3734:	4bcc      	ldr	r3, [pc, #816]	; (3a68 <bt_recv+0x6f8>)
    3736:	4acd      	ldr	r2, [pc, #820]	; (3a6c <bt_recv+0x6fc>)
    3738:	9302      	str	r3, [sp, #8]
    373a:	9b07      	ldr	r3, [sp, #28]
    373c:	49cc      	ldr	r1, [pc, #816]	; (3a70 <bt_recv+0x700>)
    373e:	9301      	str	r3, [sp, #4]
    3740:	4bcc      	ldr	r3, [pc, #816]	; (3a74 <bt_recv+0x704>)
    3742:	48cd      	ldr	r0, [pc, #820]	; (3a78 <bt_recv+0x708>)
    3744:	9300      	str	r3, [sp, #0]
    3746:	4bcd      	ldr	r3, [pc, #820]	; (3a7c <bt_recv+0x70c>)
    3748:	e6f0      	b.n	352c <bt_recv+0x1bc>
		return;
	}

	conn->handle   = handle;
    374a:	466b      	mov	r3, sp
	memcpy(dst, src, sizeof(*dst));
}

static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    374c:	0020      	movs	r0, r4
    374e:	8b9b      	ldrh	r3, [r3, #28]
    3750:	2207      	movs	r2, #7
    3752:	8023      	strh	r3, [r4, #0]
    3754:	0031      	movs	r1, r6
    3756:	3054      	adds	r0, #84	; 0x54
    3758:	f7fd faef 	bl	d3a <memcpy>
	bt_addr_le_copy(&conn->le.dst, id_addr);
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    375c:	7b2b      	ldrb	r3, [r5, #12]
    375e:	7aea      	ldrb	r2, [r5, #11]
    3760:	021b      	lsls	r3, r3, #8
    3762:	4313      	orrs	r3, r2
    3764:	0022      	movs	r2, r4
    3766:	326a      	adds	r2, #106	; 0x6a
    3768:	8013      	strh	r3, [r2, #0]
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    376a:	7bab      	ldrb	r3, [r5, #14]
    376c:	7b6a      	ldrb	r2, [r5, #13]
    376e:	021b      	lsls	r3, r3, #8
    3770:	4313      	orrs	r3, r2
    3772:	0022      	movs	r2, r4
    3774:	3270      	adds	r2, #112	; 0x70
    3776:	8013      	strh	r3, [r2, #0]
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    3778:	7c2b      	ldrb	r3, [r5, #16]
    377a:	7bea      	ldrb	r2, [r5, #15]
    377c:	021b      	lsls	r3, r3, #8
    377e:	4313      	orrs	r3, r2
    3780:	0022      	movs	r2, r4
    3782:	3272      	adds	r2, #114	; 0x72
    3784:	8013      	strh	r3, [r2, #0]
	conn->role = evt->role;
    3786:	78eb      	ldrb	r3, [r5, #3]
    3788:	9307      	str	r3, [sp, #28]
    378a:	466b      	mov	r3, sp
    378c:	7f1b      	ldrb	r3, [r3, #28]
    378e:	70e3      	strb	r3, [r4, #3]
	/*
	 * Use connection address (instead of identity address) as initiator
	 * or responder address. Only slave needs to be updated. For master all
	 * was set during outgoing connection creation.
	 */
	if (conn->role == BT_HCI_ROLE_SLAVE) {
    3790:	9b07      	ldr	r3, [sp, #28]
    3792:	2b01      	cmp	r3, #1
    3794:	d11b      	bne.n	37ce <bt_recv+0x45e>
    3796:	0020      	movs	r0, r4
    3798:	2207      	movs	r2, #7
    379a:	1d29      	adds	r1, r5, #4
    379c:	305b      	adds	r0, #91	; 0x5b
    379e:	f7fd facc 	bl	d3a <memcpy>
    37a2:	0020      	movs	r0, r4
    37a4:	4eaf      	ldr	r6, [pc, #700]	; (3a64 <bt_recv+0x6f4>)
    37a6:	2207      	movs	r2, #7
    37a8:	1df1      	adds	r1, r6, #7
    37aa:	3062      	adds	r0, #98	; 0x62
    37ac:	f7fd fac5 	bl	d3a <memcpy>
		/* if the controller supports, lets advertise for another
		 * slave connection.
		 * check for connectable advertising state is sufficient as
		 * this is how this le connection complete for slave occurred.
		 */
		if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    37b0:	0030      	movs	r0, r6
    37b2:	2106      	movs	r1, #6
    37b4:	306c      	adds	r0, #108	; 0x6c
    37b6:	f7fe fe2d 	bl	2414 <atomic_test_bit>
    37ba:	2800      	cmp	r0, #0
    37bc:	d007      	beq.n	37ce <bt_recv+0x45e>
    37be:	6ff3      	ldr	r3, [r6, #124]	; 0x7c
    37c0:	065b      	lsls	r3, r3, #25
    37c2:	d504      	bpl.n	37ce <bt_recv+0x45e>
		    BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
			if (IS_ENABLED(CONFIG_BLUETOOTH_PRIVACY)) {
				le_set_private_addr();
    37c4:	f7fe ffa4 	bl	2710 <le_set_private_addr>
			}

			set_advertise_enable(true);
    37c8:	9807      	ldr	r0, [sp, #28]
    37ca:	f7fe ff47 	bl	265c <set_advertise_enable>
		}

	}

	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    37ce:	2103      	movs	r1, #3
    37d0:	0020      	movs	r0, r4
    37d2:	f001 f9d3 	bl	4b7c <bt_conn_set_state>
	/*
	 * it is possible that connection was disconnected directly from
	 * connected callback so we must check state before doing connection
	 * parameters update
	 */
	if (conn->state != BT_CONN_CONNECTED) {
    37d6:	0023      	movs	r3, r4
    37d8:	3351      	adds	r3, #81	; 0x51
    37da:	781b      	ldrb	r3, [r3, #0]
    37dc:	2b03      	cmp	r3, #3
    37de:	d13c      	bne.n	385a <bt_recv+0x4ea>
		goto done;
	}

	if ((evt->role == BT_HCI_ROLE_MASTER) ||
    37e0:	78eb      	ldrb	r3, [r5, #3]
    37e2:	2b00      	cmp	r3, #0
    37e4:	d004      	beq.n	37f0 <bt_recv+0x480>
	    BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features)) {
    37e6:	4b9f      	ldr	r3, [pc, #636]	; (3a64 <bt_recv+0x6f4>)
    37e8:	3370      	adds	r3, #112	; 0x70
	 */
	if (conn->state != BT_CONN_CONNECTED) {
		goto done;
	}

	if ((evt->role == BT_HCI_ROLE_MASTER) ||
    37ea:	781b      	ldrb	r3, [r3, #0]
    37ec:	071b      	lsls	r3, r3, #28
    37ee:	d512      	bpl.n	3816 <bt_recv+0x4a6>
static int hci_le_read_remote_features(struct bt_conn *conn)
{
	struct bt_hci_cp_le_read_remote_features *cp;
	struct net_buf *buf;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    37f0:	2102      	movs	r1, #2
    37f2:	48a3      	ldr	r0, [pc, #652]	; (3a80 <bt_recv+0x710>)
    37f4:	f7fe fed0 	bl	2598 <bt_hci_cmd_create>
    37f8:	1e05      	subs	r5, r0, #0
				sizeof(*cp));
	if (!buf) {
    37fa:	d00c      	beq.n	3816 <bt_recv+0x4a6>
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));
    37fc:	2102      	movs	r1, #2
    37fe:	3008      	adds	r0, #8
    3800:	f00f fee0 	bl	135c4 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    3804:	8823      	ldrh	r3, [r4, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    3806:	0029      	movs	r1, r5
	if (!buf) {
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));
	cp->handle = sys_cpu_to_le16(conn->handle);
    3808:	7003      	strb	r3, [r0, #0]
    380a:	0a1b      	lsrs	r3, r3, #8
    380c:	7043      	strb	r3, [r0, #1]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    380e:	489c      	ldr	r0, [pc, #624]	; (3a80 <bt_recv+0x710>)
    3810:	f7ff fc30 	bl	3074 <bt_hci_cmd_send>
    3814:	e021      	b.n	385a <bt_recv+0x4ea>
		if (!err) {
			goto done;
		}
	}

	if (BT_FEAT_LE_PHY_2M(bt_dev.le.features)) {
    3816:	4b93      	ldr	r3, [pc, #588]	; (3a64 <bt_recv+0x6f4>)
    3818:	001a      	movs	r2, r3
    381a:	3271      	adds	r2, #113	; 0x71
    381c:	7812      	ldrb	r2, [r2, #0]
    381e:	001d      	movs	r5, r3
    3820:	07d3      	lsls	r3, r2, #31
    3822:	d507      	bpl.n	3834 <bt_recv+0x4c4>
		err = hci_le_set_phy(conn);
    3824:	0020      	movs	r0, r4
    3826:	f7ff fc63 	bl	30f0 <hci_le_set_phy.isra.27>
		if (!err) {
    382a:	2800      	cmp	r0, #0
    382c:	d102      	bne.n	3834 <bt_recv+0x4c4>
			atomic_set_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE);
    382e:	1d20      	adds	r0, r4, #4
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_or(ATOMIC_ELEM(target, bit), mask);
    3830:	2180      	movs	r1, #128	; 0x80
    3832:	e00c      	b.n	384e <bt_recv+0x4de>
			goto done;
		}
	}

	if (BT_FEAT_LE_DLE(bt_dev.le.features)) {
    3834:	002b      	movs	r3, r5
    3836:	3370      	adds	r3, #112	; 0x70
    3838:	781b      	ldrb	r3, [r3, #0]
    383a:	069b      	lsls	r3, r3, #26
    383c:	d50a      	bpl.n	3854 <bt_recv+0x4e4>
		err = hci_le_set_data_len(conn);
    383e:	0020      	movs	r0, r4
    3840:	f7ff fc78 	bl	3134 <hci_le_set_data_len.isra.28>
		if (!err) {
    3844:	2800      	cmp	r0, #0
    3846:	d105      	bne.n	3854 <bt_recv+0x4e4>
    3848:	2180      	movs	r1, #128	; 0x80
			atomic_set_bit(conn->flags, BT_CONN_AUTO_DATA_LEN);
    384a:	1d20      	adds	r0, r4, #4
    384c:	0049      	lsls	r1, r1, #1
    384e:	f010 f98a 	bl	13b66 <atomic_or>
    3852:	e002      	b.n	385a <bt_recv+0x4ea>
			goto done;
		}
	}

	update_conn_param(conn);
    3854:	0020      	movs	r0, r4
    3856:	f7fe fe7f 	bl	2558 <update_conn_param>

done:
	bt_conn_unref(conn);
    385a:	0020      	movs	r0, r4
    385c:	f001 fabc 	bl	4dd8 <bt_conn_unref>
	bt_le_scan_update(false);
    3860:	2000      	movs	r0, #0
    3862:	f7ff f85d 	bl	2920 <bt_le_scan_update>
    3866:	e611      	b.n	348c <bt_recv+0x11c>
    3868:	68bc      	ldr	r4, [r7, #8]
{
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
	struct bt_conn *conn;
	u16_t handle;

	handle = sys_le16_to_cpu(evt->handle);
    386a:	78a3      	ldrb	r3, [r4, #2]
    386c:	7866      	ldrb	r6, [r4, #1]
    386e:	021b      	lsls	r3, r3, #8
    3870:	431e      	orrs	r6, r3

	BT_DBG("status %u, handle %u", evt->status, handle);

	conn = bt_conn_lookup_handle(handle);
    3872:	0030      	movs	r0, r6
    3874:	f001 fa3c 	bl	4cf0 <bt_conn_lookup_handle>
    3878:	1e05      	subs	r5, r0, #0
	if (!conn) {
    387a:	d106      	bne.n	388a <bt_recv+0x51a>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    387c:	4b7a      	ldr	r3, [pc, #488]	; (3a68 <bt_recv+0x6f8>)
    387e:	9601      	str	r6, [sp, #4]
    3880:	9302      	str	r3, [sp, #8]
    3882:	4b7c      	ldr	r3, [pc, #496]	; (3a74 <bt_recv+0x704>)
    3884:	9300      	str	r3, [sp, #0]
    3886:	4b7f      	ldr	r3, [pc, #508]	; (3a84 <bt_recv+0x714>)
    3888:	e02b      	b.n	38e2 <bt_recv+0x572>
		return;
	}

	if (!evt->status) {
    388a:	7823      	ldrb	r3, [r4, #0]
    388c:	2b00      	cmp	r3, #0
    388e:	d000      	beq.n	3892 <bt_recv+0x522>
    3890:	e23e      	b.n	3d10 <bt_recv+0x9a0>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
    3892:	7923      	ldrb	r3, [r4, #4]
    3894:	78e2      	ldrb	r2, [r4, #3]
    3896:	021b      	lsls	r3, r3, #8
    3898:	4313      	orrs	r3, r2
    389a:	0002      	movs	r2, r0
    389c:	326a      	adds	r2, #106	; 0x6a
    389e:	8013      	strh	r3, [r2, #0]
		conn->le.latency = sys_le16_to_cpu(evt->latency);
    38a0:	79a3      	ldrb	r3, [r4, #6]
    38a2:	7962      	ldrb	r2, [r4, #5]
    38a4:	021b      	lsls	r3, r3, #8
    38a6:	4313      	orrs	r3, r2
    38a8:	0002      	movs	r2, r0
    38aa:	3270      	adds	r2, #112	; 0x70
    38ac:	8013      	strh	r3, [r2, #0]
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    38ae:	7a23      	ldrb	r3, [r4, #8]
    38b0:	79e2      	ldrb	r2, [r4, #7]
    38b2:	021b      	lsls	r3, r3, #8
    38b4:	4313      	orrs	r3, r2
    38b6:	0002      	movs	r2, r0
    38b8:	3272      	adds	r2, #114	; 0x72
    38ba:	8013      	strh	r3, [r2, #0]
		notify_le_param_updated(conn);
    38bc:	f000 feb6 	bl	462c <notify_le_param_updated>
    38c0:	e226      	b.n	3d10 <bt_recv+0x9a0>
    38c2:	68bd      	ldr	r5, [r7, #8]
}

static void le_remote_feat_complete(struct net_buf *buf)
{
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
	u16_t handle = sys_le16_to_cpu(evt->handle);
    38c4:	78ab      	ldrb	r3, [r5, #2]
    38c6:	786e      	ldrb	r6, [r5, #1]
    38c8:	021b      	lsls	r3, r3, #8
    38ca:	431e      	orrs	r6, r3
	struct bt_conn *conn;

	conn = bt_conn_lookup_handle(handle);
    38cc:	0030      	movs	r0, r6
    38ce:	f001 fa0f 	bl	4cf0 <bt_conn_lookup_handle>
    38d2:	1e04      	subs	r4, r0, #0
	if (!conn) {
    38d4:	d109      	bne.n	38ea <bt_recv+0x57a>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    38d6:	4b64      	ldr	r3, [pc, #400]	; (3a68 <bt_recv+0x6f8>)
    38d8:	9601      	str	r6, [sp, #4]
    38da:	9302      	str	r3, [sp, #8]
    38dc:	4b65      	ldr	r3, [pc, #404]	; (3a74 <bt_recv+0x704>)
    38de:	9300      	str	r3, [sp, #0]
    38e0:	4b69      	ldr	r3, [pc, #420]	; (3a88 <bt_recv+0x718>)
    38e2:	4a62      	ldr	r2, [pc, #392]	; (3a6c <bt_recv+0x6fc>)
    38e4:	4962      	ldr	r1, [pc, #392]	; (3a70 <bt_recv+0x700>)
    38e6:	4869      	ldr	r0, [pc, #420]	; (3a8c <bt_recv+0x71c>)
    38e8:	e620      	b.n	352c <bt_recv+0x1bc>
		return;
	}

	if (!evt->status) {
    38ea:	782b      	ldrb	r3, [r5, #0]
    38ec:	2b00      	cmp	r3, #0
    38ee:	d104      	bne.n	38fa <bt_recv+0x58a>
		memcpy(conn->le.features, evt->features,
    38f0:	1ce9      	adds	r1, r5, #3
    38f2:	2208      	movs	r2, #8
    38f4:	3074      	adds	r0, #116	; 0x74
    38f6:	f7fd fa20 	bl	d3a <memcpy>
		       sizeof(conn->le.features));
	}

	if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) &&
    38fa:	4b5a      	ldr	r3, [pc, #360]	; (3a64 <bt_recv+0x6f4>)
    38fc:	001a      	movs	r2, r3
    38fe:	3271      	adds	r2, #113	; 0x71
    3900:	7811      	ldrb	r1, [r2, #0]
    3902:	2201      	movs	r2, #1
    3904:	001d      	movs	r5, r3
    3906:	4211      	tst	r1, r2
    3908:	d00c      	beq.n	3924 <bt_recv+0x5b4>
	    BT_FEAT_LE_PHY_2M(conn->le.features)) {
    390a:	0023      	movs	r3, r4
    390c:	3375      	adds	r3, #117	; 0x75
	if (!evt->status) {
		memcpy(conn->le.features, evt->features,
		       sizeof(conn->le.features));
	}

	if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) &&
    390e:	781b      	ldrb	r3, [r3, #0]
    3910:	4213      	tst	r3, r2
    3912:	d007      	beq.n	3924 <bt_recv+0x5b4>
	    BT_FEAT_LE_PHY_2M(conn->le.features)) {
		int err;

		err = hci_le_set_phy(conn);
    3914:	0020      	movs	r0, r4
    3916:	f7ff fbeb 	bl	30f0 <hci_le_set_phy.isra.27>
		if (!err) {
    391a:	2800      	cmp	r0, #0
    391c:	d102      	bne.n	3924 <bt_recv+0x5b4>
			atomic_set_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE);
    391e:	1d20      	adds	r0, r4, #4
    3920:	2180      	movs	r1, #128	; 0x80
    3922:	e015      	b.n	3950 <bt_recv+0x5e0>
			goto done;
		}
	}

	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    3924:	002b      	movs	r3, r5
    3926:	3370      	adds	r3, #112	; 0x70
    3928:	781a      	ldrb	r2, [r3, #0]
    392a:	2320      	movs	r3, #32
    392c:	421a      	tst	r2, r3
    392e:	d100      	bne.n	3932 <bt_recv+0x5c2>
    3930:	e0d5      	b.n	3ade <bt_recv+0x76e>
	    BT_FEAT_LE_DLE(conn->le.features)) {
    3932:	0022      	movs	r2, r4
    3934:	3274      	adds	r2, #116	; 0x74
			atomic_set_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE);
			goto done;
		}
	}

	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    3936:	7812      	ldrb	r2, [r2, #0]
    3938:	421a      	tst	r2, r3
    393a:	d100      	bne.n	393e <bt_recv+0x5ce>
    393c:	e0cf      	b.n	3ade <bt_recv+0x76e>
	    BT_FEAT_LE_DLE(conn->le.features)) {
		int err;

		err = hci_le_set_data_len(conn);
    393e:	0020      	movs	r0, r4
    3940:	f7ff fbf8 	bl	3134 <hci_le_set_data_len.isra.28>
		if (!err) {
    3944:	2800      	cmp	r0, #0
    3946:	d000      	beq.n	394a <bt_recv+0x5da>
    3948:	e0c9      	b.n	3ade <bt_recv+0x76e>
    394a:	2180      	movs	r1, #128	; 0x80
			atomic_set_bit(conn->flags, BT_CONN_AUTO_DATA_LEN);
    394c:	1d20      	adds	r0, r4, #4
    394e:	0049      	lsls	r1, r1, #1
    3950:	f010 f909 	bl	13b66 <atomic_or>
    3954:	e60e      	b.n	3574 <bt_recv+0x204>
    3956:	68bb      	ldr	r3, [r7, #8]
	struct bt_conn *conn;
	u16_t handle;
	int err;

	handle = sys_le16_to_cpu(evt->handle);
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    3958:	ac0e      	add	r4, sp, #56	; 0x38
	struct bt_le_conn_param param;
	struct bt_conn *conn;
	u16_t handle;
	int err;

	handle = sys_le16_to_cpu(evt->handle);
    395a:	785e      	ldrb	r6, [r3, #1]
    395c:	781a      	ldrb	r2, [r3, #0]
    395e:	0236      	lsls	r6, r6, #8
    3960:	4316      	orrs	r6, r2
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    3962:	78da      	ldrb	r2, [r3, #3]
    3964:	7899      	ldrb	r1, [r3, #2]
    3966:	0212      	lsls	r2, r2, #8
    3968:	430a      	orrs	r2, r1
    396a:	8022      	strh	r2, [r4, #0]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    396c:	795a      	ldrb	r2, [r3, #5]
    396e:	7919      	ldrb	r1, [r3, #4]
    3970:	0212      	lsls	r2, r2, #8
    3972:	430a      	orrs	r2, r1
    3974:	8062      	strh	r2, [r4, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
    3976:	79da      	ldrb	r2, [r3, #7]
    3978:	7999      	ldrb	r1, [r3, #6]
    397a:	0212      	lsls	r2, r2, #8
    397c:	430a      	orrs	r2, r1
    397e:	80a2      	strh	r2, [r4, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
    3980:	7a1a      	ldrb	r2, [r3, #8]
    3982:	7a5b      	ldrb	r3, [r3, #9]

	conn = bt_conn_lookup_handle(handle);
    3984:	0030      	movs	r0, r6

	handle = sys_le16_to_cpu(evt->handle);
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
	param.latency = sys_le16_to_cpu(evt->latency);
	param.timeout = sys_le16_to_cpu(evt->timeout);
    3986:	021b      	lsls	r3, r3, #8
    3988:	4313      	orrs	r3, r2
    398a:	80e3      	strh	r3, [r4, #6]

	conn = bt_conn_lookup_handle(handle);
    398c:	f001 f9b0 	bl	4cf0 <bt_conn_lookup_handle>
    3990:	9007      	str	r0, [sp, #28]
	if (!conn) {
    3992:	2800      	cmp	r0, #0
    3994:	d000      	beq.n	3998 <bt_recv+0x628>
    3996:	e5ef      	b.n	3578 <bt_recv+0x208>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    3998:	4b33      	ldr	r3, [pc, #204]	; (3a68 <bt_recv+0x6f8>)
    399a:	9601      	str	r6, [sp, #4]
    399c:	9302      	str	r3, [sp, #8]
    399e:	4b35      	ldr	r3, [pc, #212]	; (3a74 <bt_recv+0x704>)
    39a0:	4a32      	ldr	r2, [pc, #200]	; (3a6c <bt_recv+0x6fc>)
    39a2:	9300      	str	r3, [sp, #0]
    39a4:	4932      	ldr	r1, [pc, #200]	; (3a70 <bt_recv+0x700>)
    39a6:	4b3a      	ldr	r3, [pc, #232]	; (3a90 <bt_recv+0x720>)
    39a8:	4838      	ldr	r0, [pc, #224]	; (3a8c <bt_recv+0x71c>)
    39aa:	f7fd ffe9 	bl	1980 <printk>
		return le_conn_param_neg_reply(handle,
    39ae:	2102      	movs	r1, #2
    39b0:	0030      	movs	r0, r6
    39b2:	f7ff fbf5 	bl	31a0 <le_conn_param_neg_reply>
    39b6:	e569      	b.n	348c <bt_recv+0x11c>
				   const struct bt_le_conn_param *param)
{
	struct bt_hci_cp_le_conn_param_req_reply *cp;
	struct net_buf *buf;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
    39b8:	210e      	movs	r1, #14
    39ba:	4836      	ldr	r0, [pc, #216]	; (3a94 <bt_recv+0x724>)
    39bc:	f7fe fdec 	bl	2598 <bt_hci_cmd_create>
    39c0:	9008      	str	r0, [sp, #32]
	if (!buf) {
    39c2:	2800      	cmp	r0, #0
    39c4:	d100      	bne.n	39c8 <bt_recv+0x658>
    39c6:	e5e2      	b.n	358e <bt_recv+0x21e>
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));
    39c8:	210e      	movs	r1, #14
    39ca:	3008      	adds	r0, #8
    39cc:	f00f fdfa 	bl	135c4 <net_buf_simple_add>
    39d0:	0005      	movs	r5, r0
	memset(cp, 0, sizeof(*cp));
    39d2:	220e      	movs	r2, #14
    39d4:	2100      	movs	r1, #0
    39d6:	f7fd f9da 	bl	d8e <memset>

	cp->handle = sys_cpu_to_le16(handle);
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    39da:	7823      	ldrb	r3, [r4, #0]
	}

	cp = net_buf_add(buf, sizeof(*cp));
	memset(cp, 0, sizeof(*cp));

	cp->handle = sys_cpu_to_le16(handle);
    39dc:	702e      	strb	r6, [r5, #0]
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    39de:	70ab      	strb	r3, [r5, #2]
    39e0:	7863      	ldrb	r3, [r4, #1]
	}

	cp = net_buf_add(buf, sizeof(*cp));
	memset(cp, 0, sizeof(*cp));

	cp->handle = sys_cpu_to_le16(handle);
    39e2:	0a36      	lsrs	r6, r6, #8
    39e4:	706e      	strb	r6, [r5, #1]
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    39e6:	70eb      	strb	r3, [r5, #3]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    39e8:	78a3      	ldrb	r3, [r4, #2]
	cp->latency = sys_cpu_to_le16(param->latency);
	cp->timeout = sys_cpu_to_le16(param->timeout);

	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    39ea:	9908      	ldr	r1, [sp, #32]
	cp = net_buf_add(buf, sizeof(*cp));
	memset(cp, 0, sizeof(*cp));

	cp->handle = sys_cpu_to_le16(handle);
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    39ec:	712b      	strb	r3, [r5, #4]
    39ee:	78e3      	ldrb	r3, [r4, #3]
	cp->latency = sys_cpu_to_le16(param->latency);
	cp->timeout = sys_cpu_to_le16(param->timeout);

	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    39f0:	4828      	ldr	r0, [pc, #160]	; (3a94 <bt_recv+0x724>)
	cp = net_buf_add(buf, sizeof(*cp));
	memset(cp, 0, sizeof(*cp));

	cp->handle = sys_cpu_to_le16(handle);
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    39f2:	716b      	strb	r3, [r5, #5]
	cp->latency = sys_cpu_to_le16(param->latency);
    39f4:	7923      	ldrb	r3, [r4, #4]
    39f6:	71ab      	strb	r3, [r5, #6]
    39f8:	7963      	ldrb	r3, [r4, #5]
    39fa:	71eb      	strb	r3, [r5, #7]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    39fc:	79a3      	ldrb	r3, [r4, #6]
    39fe:	722b      	strb	r3, [r5, #8]
    3a00:	79e3      	ldrb	r3, [r4, #7]
    3a02:	726b      	strb	r3, [r5, #9]

	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    3a04:	f7ff fb36 	bl	3074 <bt_hci_cmd_send>
    3a08:	e5c1      	b.n	358e <bt_recv+0x21e>
	struct bt_hci_evt_le_data_len_change *evt = (void *)buf->data;
	u16_t max_tx_octets = sys_le16_to_cpu(evt->max_tx_octets);
	u16_t max_rx_octets = sys_le16_to_cpu(evt->max_rx_octets);
	u16_t max_tx_time = sys_le16_to_cpu(evt->max_tx_time);
	u16_t max_rx_time = sys_le16_to_cpu(evt->max_rx_time);
	u16_t handle = sys_le16_to_cpu(evt->handle);
    3a0a:	68ba      	ldr	r2, [r7, #8]
    3a0c:	7854      	ldrb	r4, [r2, #1]
    3a0e:	7813      	ldrb	r3, [r2, #0]
    3a10:	0224      	lsls	r4, r4, #8
    3a12:	431c      	orrs	r4, r3
	struct bt_conn *conn;

	conn = bt_conn_lookup_handle(handle);
    3a14:	0020      	movs	r0, r4
    3a16:	f001 f96b 	bl	4cf0 <bt_conn_lookup_handle>
    3a1a:	1e05      	subs	r5, r0, #0
	if (!conn) {
    3a1c:	d106      	bne.n	3a2c <bt_recv+0x6bc>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    3a1e:	4b12      	ldr	r3, [pc, #72]	; (3a68 <bt_recv+0x6f8>)
    3a20:	9401      	str	r4, [sp, #4]
    3a22:	9302      	str	r3, [sp, #8]
    3a24:	4b13      	ldr	r3, [pc, #76]	; (3a74 <bt_recv+0x704>)
    3a26:	9300      	str	r3, [sp, #0]
    3a28:	4b1b      	ldr	r3, [pc, #108]	; (3a98 <bt_recv+0x728>)
    3a2a:	e75a      	b.n	38e2 <bt_recv+0x572>
	}

	BT_DBG("max. tx: %u (%uus), max. rx: %u (%uus)", max_tx_octets,
	       max_tx_time, max_rx_octets, max_rx_time);

	if (!atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_DATA_LEN)) {
    3a2c:	3004      	adds	r0, #4
static inline int atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    3a2e:	491b      	ldr	r1, [pc, #108]	; (3a9c <bt_recv+0x72c>)
    3a30:	f010 f8a4 	bl	13b7c <atomic_and>
    3a34:	05c3      	lsls	r3, r0, #23
    3a36:	d400      	bmi.n	3a3a <bt_recv+0x6ca>
    3a38:	e16a      	b.n	3d10 <bt_recv+0x9a0>
		goto done;
	}

	update_conn_param(conn);
    3a3a:	0028      	movs	r0, r5
    3a3c:	f7fe fd8c 	bl	2558 <update_conn_param>
    3a40:	e166      	b.n	3d10 <bt_recv+0x9a0>
}

static void le_phy_update_complete(struct net_buf *buf)
{
	struct bt_hci_evt_le_phy_update_complete *evt = (void *)buf->data;
	u16_t handle = sys_le16_to_cpu(evt->handle);
    3a42:	68ba      	ldr	r2, [r7, #8]
    3a44:	7895      	ldrb	r5, [r2, #2]
    3a46:	7853      	ldrb	r3, [r2, #1]
    3a48:	022d      	lsls	r5, r5, #8
    3a4a:	431d      	orrs	r5, r3
	struct bt_conn *conn;

	conn = bt_conn_lookup_handle(handle);
    3a4c:	0028      	movs	r0, r5
    3a4e:	f001 f94f 	bl	4cf0 <bt_conn_lookup_handle>
    3a52:	1e04      	subs	r4, r0, #0
	if (!conn) {
    3a54:	d126      	bne.n	3aa4 <bt_recv+0x734>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    3a56:	4b04      	ldr	r3, [pc, #16]	; (3a68 <bt_recv+0x6f8>)
    3a58:	9501      	str	r5, [sp, #4]
    3a5a:	9302      	str	r3, [sp, #8]
    3a5c:	4b05      	ldr	r3, [pc, #20]	; (3a74 <bt_recv+0x704>)
    3a5e:	9300      	str	r3, [sp, #0]
    3a60:	4b0f      	ldr	r3, [pc, #60]	; (3aa0 <bt_recv+0x730>)
    3a62:	e73e      	b.n	38e2 <bt_recv+0x572>
    3a64:	200004d0 	.word	0x200004d0
    3a68:	000154c4 	.word	0x000154c4
    3a6c:	00015484 	.word	0x00015484
    3a70:	0001548b 	.word	0x0001548b
    3a74:	000154c9 	.word	0x000154c9
    3a78:	000158f6 	.word	0x000158f6
    3a7c:	00017a27 	.word	0x00017a27
    3a80:	00002016 	.word	0x00002016
    3a84:	00017973 	.word	0x00017973
    3a88:	00017a38 	.word	0x00017a38
    3a8c:	0001592b 	.word	0x0001592b
    3a90:	0001793f 	.word	0x0001793f
    3a94:	00002020 	.word	0x00002020
    3a98:	00017960 	.word	0x00017960
    3a9c:	fffffeff 	.word	0xfffffeff
    3aa0:	00017a50 	.word	0x00017a50
    3aa4:	2181      	movs	r1, #129	; 0x81
	}

	BT_DBG("PHY updated: status: 0x%x, tx: %u, rx: %u",
	       evt->status, evt->tx_phy, evt->rx_phy);

	if (!atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
    3aa6:	1d05      	adds	r5, r0, #4
    3aa8:	4249      	negs	r1, r1
    3aaa:	0028      	movs	r0, r5
    3aac:	f010 f866 	bl	13b7c <atomic_and>
    3ab0:	0603      	lsls	r3, r0, #24
    3ab2:	d400      	bmi.n	3ab6 <bt_recv+0x746>
    3ab4:	e55e      	b.n	3574 <bt_recv+0x204>
		goto done;
	}

	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    3ab6:	4bb1      	ldr	r3, [pc, #708]	; (3d7c <bt_recv+0xa0c>)
    3ab8:	3370      	adds	r3, #112	; 0x70
    3aba:	781a      	ldrb	r2, [r3, #0]
    3abc:	2320      	movs	r3, #32
    3abe:	421a      	tst	r2, r3
    3ac0:	d00d      	beq.n	3ade <bt_recv+0x76e>
	    BT_FEAT_LE_DLE(conn->le.features)) {
    3ac2:	0022      	movs	r2, r4
    3ac4:	3274      	adds	r2, #116	; 0x74

	if (!atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
		goto done;
	}

	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    3ac6:	7812      	ldrb	r2, [r2, #0]
    3ac8:	421a      	tst	r2, r3
    3aca:	d008      	beq.n	3ade <bt_recv+0x76e>
	    BT_FEAT_LE_DLE(conn->le.features)) {
		int err;

		err = hci_le_set_data_len(conn);
    3acc:	0020      	movs	r0, r4
    3ace:	f7ff fb31 	bl	3134 <hci_le_set_data_len.isra.28>
		if (!err) {
    3ad2:	2800      	cmp	r0, #0
    3ad4:	d103      	bne.n	3ade <bt_recv+0x76e>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_or(ATOMIC_ELEM(target, bit), mask);
    3ad6:	2180      	movs	r1, #128	; 0x80
    3ad8:	0028      	movs	r0, r5
    3ada:	0049      	lsls	r1, r1, #1
    3adc:	e738      	b.n	3950 <bt_recv+0x5e0>
			atomic_set_bit(conn->flags, BT_CONN_AUTO_DATA_LEN);
			goto done;
		}
	}

	update_conn_param(conn);
    3ade:	0020      	movs	r0, r4
    3ae0:	f7fe fd3a 	bl	2558 <update_conn_param>
    3ae4:	e546      	b.n	3574 <bt_recv+0x204>
    3ae6:	68bc      	ldr	r4, [r7, #8]
	struct bt_hci_cp_le_ltk_req_neg_reply *cp;
	struct bt_conn *conn;
	u16_t handle;
	u8_t tk[16];

	handle = sys_le16_to_cpu(evt->handle);
    3ae8:	7863      	ldrb	r3, [r4, #1]
    3aea:	7826      	ldrb	r6, [r4, #0]
    3aec:	021b      	lsls	r3, r3, #8
    3aee:	431e      	orrs	r6, r3

	BT_DBG("handle %u", handle);

	conn = bt_conn_lookup_handle(handle);
    3af0:	0030      	movs	r0, r6
    3af2:	f001 f8fd 	bl	4cf0 <bt_conn_lookup_handle>
    3af6:	1e05      	subs	r5, r0, #0
	if (!conn) {
    3af8:	d106      	bne.n	3b08 <bt_recv+0x798>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    3afa:	4ba1      	ldr	r3, [pc, #644]	; (3d80 <bt_recv+0xa10>)
    3afc:	9601      	str	r6, [sp, #4]
    3afe:	9302      	str	r3, [sp, #8]
    3b00:	4ba0      	ldr	r3, [pc, #640]	; (3d84 <bt_recv+0xa14>)
    3b02:	9300      	str	r3, [sp, #0]
    3b04:	4ba0      	ldr	r3, [pc, #640]	; (3d88 <bt_recv+0xa18>)
    3b06:	e6ec      	b.n	38e2 <bt_recv+0x572>
	 * if TK is present use it, that means pairing is in progress and
	 * we should use new TK for encryption
	 *
	 * Both legacy STK and LE SC LTK have rand and ediv equal to zero.
	 */
	if (evt->rand == 0 && evt->ediv == 0 && bt_smp_get_tk(conn, tk)) {
    3b08:	78e2      	ldrb	r2, [r4, #3]
    3b0a:	78a0      	ldrb	r0, [r4, #2]
    3b0c:	7926      	ldrb	r6, [r4, #4]
    3b0e:	0212      	lsls	r2, r2, #8
    3b10:	4302      	orrs	r2, r0
    3b12:	0436      	lsls	r6, r6, #16
    3b14:	0011      	movs	r1, r2
    3b16:	0032      	movs	r2, r6
    3b18:	7963      	ldrb	r3, [r4, #5]
    3b1a:	430a      	orrs	r2, r1
    3b1c:	061b      	lsls	r3, r3, #24
    3b1e:	4313      	orrs	r3, r2
    3b20:	79e2      	ldrb	r2, [r4, #7]
    3b22:	001e      	movs	r6, r3
    3b24:	79a0      	ldrb	r0, [r4, #6]
    3b26:	7a23      	ldrb	r3, [r4, #8]
    3b28:	0212      	lsls	r2, r2, #8
    3b2a:	4302      	orrs	r2, r0
    3b2c:	041b      	lsls	r3, r3, #16
    3b2e:	4313      	orrs	r3, r2
    3b30:	001a      	movs	r2, r3
    3b32:	7a63      	ldrb	r3, [r4, #9]
    3b34:	061b      	lsls	r3, r3, #24
    3b36:	4313      	orrs	r3, r2
    3b38:	4333      	orrs	r3, r6
    3b3a:	d12c      	bne.n	3b96 <bt_recv+0x826>
    3b3c:	7ae3      	ldrb	r3, [r4, #11]
    3b3e:	7aa2      	ldrb	r2, [r4, #10]
    3b40:	021b      	lsls	r3, r3, #8
    3b42:	4313      	orrs	r3, r2
    3b44:	d127      	bne.n	3b96 <bt_recv+0x826>
    3b46:	a90e      	add	r1, sp, #56	; 0x38
    3b48:	0028      	movs	r0, r5
    3b4a:	f005 fa9d 	bl	9088 <bt_smp_get_tk>
    3b4e:	2800      	cmp	r0, #0
    3b50:	d021      	beq.n	3b96 <bt_recv+0x826>
		struct bt_hci_cp_le_ltk_req_reply *cp;

		buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
    3b52:	2112      	movs	r1, #18
    3b54:	488d      	ldr	r0, [pc, #564]	; (3d8c <bt_recv+0xa1c>)
    3b56:	f7fe fd1f 	bl	2598 <bt_hci_cmd_create>
    3b5a:	1e06      	subs	r6, r0, #0
					sizeof(*cp));
		if (!buf) {
    3b5c:	d10a      	bne.n	3b74 <bt_recv+0x804>
			BT_ERR("Out of command buffers");
    3b5e:	4b88      	ldr	r3, [pc, #544]	; (3d80 <bt_recv+0xa10>)
    3b60:	4a8b      	ldr	r2, [pc, #556]	; (3d90 <bt_recv+0xa20>)
    3b62:	9301      	str	r3, [sp, #4]
    3b64:	4b87      	ldr	r3, [pc, #540]	; (3d84 <bt_recv+0xa14>)
    3b66:	498b      	ldr	r1, [pc, #556]	; (3d94 <bt_recv+0xa24>)
    3b68:	9300      	str	r3, [sp, #0]
    3b6a:	488b      	ldr	r0, [pc, #556]	; (3d98 <bt_recv+0xa28>)
    3b6c:	4b86      	ldr	r3, [pc, #536]	; (3d88 <bt_recv+0xa18>)
    3b6e:	f7fd ff07 	bl	1980 <printk>
    3b72:	e0cd      	b.n	3d10 <bt_recv+0x9a0>
			goto done;
		}

		cp = net_buf_add(buf, sizeof(*cp));
    3b74:	2112      	movs	r1, #18
    3b76:	3008      	adds	r0, #8
    3b78:	f00f fd24 	bl	135c4 <net_buf_simple_add>
		cp->handle = evt->handle;
    3b7c:	7863      	ldrb	r3, [r4, #1]
    3b7e:	7822      	ldrb	r2, [r4, #0]
    3b80:	021b      	lsls	r3, r3, #8
    3b82:	4313      	orrs	r3, r2
    3b84:	7003      	strb	r3, [r0, #0]
    3b86:	0a1b      	lsrs	r3, r3, #8
    3b88:	7043      	strb	r3, [r0, #1]
		memcpy(cp->ltk, tk, sizeof(cp->ltk));
    3b8a:	2210      	movs	r2, #16
    3b8c:	a90e      	add	r1, sp, #56	; 0x38
    3b8e:	3002      	adds	r0, #2
    3b90:	f7fd f8d3 	bl	d3a <memcpy>
    3b94:	e0a3      	b.n	3cde <bt_recv+0x96e>

		bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
		goto done;
	}

	if (!conn->le.keys) {
    3b96:	6feb      	ldr	r3, [r5, #124]	; 0x7c
    3b98:	2b00      	cmp	r3, #0
    3b9a:	d000      	beq.n	3b9e <bt_recv+0x82e>
    3b9c:	e1e2      	b.n	3f64 <bt_recv+0xbf4>
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, &conn->le.dst);
    3b9e:	002e      	movs	r6, r5
    3ba0:	3654      	adds	r6, #84	; 0x54
    3ba2:	0031      	movs	r1, r6
    3ba4:	2020      	movs	r0, #32
    3ba6:	f005 fad7 	bl	9158 <bt_keys_find>
    3baa:	67e8      	str	r0, [r5, #124]	; 0x7c
		if (!conn->le.keys) {
    3bac:	2800      	cmp	r0, #0
    3bae:	d000      	beq.n	3bb2 <bt_recv+0x842>
    3bb0:	e1d8      	b.n	3f64 <bt_recv+0xbf4>
			conn->le.keys = bt_keys_find(BT_KEYS_SLAVE_LTK,
    3bb2:	0031      	movs	r1, r6
    3bb4:	3001      	adds	r0, #1
    3bb6:	f005 facf 	bl	9158 <bt_keys_find>
    3bba:	67e8      	str	r0, [r5, #124]	; 0x7c
						     &conn->le.dst);
		}
	}

	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256) &&
    3bbc:	2800      	cmp	r0, #0
    3bbe:	d100      	bne.n	3bc2 <bt_recv+0x852>
    3bc0:	e090      	b.n	3ce4 <bt_recv+0x974>
    3bc2:	8981      	ldrh	r1, [r0, #12]
    3bc4:	068b      	lsls	r3, r1, #26
    3bc6:	d540      	bpl.n	3c4a <bt_recv+0x8da>
	    evt->rand == 0 && evt->ediv == 0) {
    3bc8:	78e2      	ldrb	r2, [r4, #3]
    3bca:	78a3      	ldrb	r3, [r4, #2]
    3bcc:	0212      	lsls	r2, r2, #8
    3bce:	431a      	orrs	r2, r3
    3bd0:	7923      	ldrb	r3, [r4, #4]
    3bd2:	041b      	lsls	r3, r3, #16
    3bd4:	4313      	orrs	r3, r2
    3bd6:	001a      	movs	r2, r3
    3bd8:	7963      	ldrb	r3, [r4, #5]
    3bda:	061b      	lsls	r3, r3, #24
    3bdc:	4313      	orrs	r3, r2
    3bde:	79e2      	ldrb	r2, [r4, #7]
    3be0:	469c      	mov	ip, r3
    3be2:	79a3      	ldrb	r3, [r4, #6]
    3be4:	0212      	lsls	r2, r2, #8
    3be6:	431a      	orrs	r2, r3
    3be8:	7a23      	ldrb	r3, [r4, #8]
    3bea:	041b      	lsls	r3, r3, #16
    3bec:	4313      	orrs	r3, r2
    3bee:	001a      	movs	r2, r3
    3bf0:	7a63      	ldrb	r3, [r4, #9]
    3bf2:	061b      	lsls	r3, r3, #24
    3bf4:	4313      	orrs	r3, r2
			conn->le.keys = bt_keys_find(BT_KEYS_SLAVE_LTK,
						     &conn->le.dst);
		}
	}

	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256) &&
    3bf6:	4662      	mov	r2, ip
    3bf8:	4313      	orrs	r3, r2
    3bfa:	d126      	bne.n	3c4a <bt_recv+0x8da>
	    evt->rand == 0 && evt->ediv == 0) {
    3bfc:	7ae6      	ldrb	r6, [r4, #11]
    3bfe:	7aa3      	ldrb	r3, [r4, #10]
    3c00:	0236      	lsls	r6, r6, #8
    3c02:	431e      	orrs	r6, r3
    3c04:	9607      	str	r6, [sp, #28]
    3c06:	d120      	bne.n	3c4a <bt_recv+0x8da>
		struct bt_hci_cp_le_ltk_req_reply *cp;

		buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
    3c08:	2112      	movs	r1, #18
    3c0a:	4860      	ldr	r0, [pc, #384]	; (3d8c <bt_recv+0xa1c>)
    3c0c:	f7fe fcc4 	bl	2598 <bt_hci_cmd_create>
    3c10:	1e06      	subs	r6, r0, #0
					sizeof(*cp));
		if (!buf) {
    3c12:	d0a4      	beq.n	3b5e <bt_recv+0x7ee>
			BT_ERR("Out of command buffers");
			goto done;
		}

		cp = net_buf_add(buf, sizeof(*cp));
    3c14:	2112      	movs	r1, #18
    3c16:	3008      	adds	r0, #8
    3c18:	f00f fcd4 	bl	135c4 <net_buf_simple_add>
		cp->handle = evt->handle;
    3c1c:	7863      	ldrb	r3, [r4, #1]
    3c1e:	7822      	ldrb	r2, [r4, #0]
    3c20:	021b      	lsls	r3, r3, #8
    3c22:	4313      	orrs	r3, r2
    3c24:	7003      	strb	r3, [r0, #0]
    3c26:	0a1b      	lsrs	r3, r3, #8
    3c28:	7043      	strb	r3, [r0, #1]

		/* use only enc_size bytes of key for encryption */
		memcpy(cp->ltk, conn->le.keys->ltk.val,
    3c2a:	6fe9      	ldr	r1, [r5, #124]	; 0x7c
    3c2c:	1c84      	adds	r4, r0, #2
    3c2e:	79ca      	ldrb	r2, [r1, #7]
    3c30:	0020      	movs	r0, r4
    3c32:	311a      	adds	r1, #26
    3c34:	f7fd f881 	bl	d3a <memcpy>
		       conn->le.keys->enc_size);
		if (conn->le.keys->enc_size < sizeof(cp->ltk)) {
    3c38:	6feb      	ldr	r3, [r5, #124]	; 0x7c
    3c3a:	79d8      	ldrb	r0, [r3, #7]
    3c3c:	280f      	cmp	r0, #15
    3c3e:	d84e      	bhi.n	3cde <bt_recv+0x96e>
			memset(cp->ltk + conn->le.keys->enc_size, 0,
    3c40:	2210      	movs	r2, #16
    3c42:	9907      	ldr	r1, [sp, #28]
    3c44:	1a12      	subs	r2, r2, r0
    3c46:	1820      	adds	r0, r4, r0
    3c48:	e047      	b.n	3cda <bt_recv+0x96a>
		bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
		goto done;
	}

#if !defined(CONFIG_BLUETOOTH_SMP_SC_ONLY)
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
    3c4a:	07cb      	lsls	r3, r1, #31
    3c4c:	d54a      	bpl.n	3ce4 <bt_recv+0x974>
	    conn->le.keys->slave_ltk.rand == evt->rand &&
    3c4e:	78e3      	ldrb	r3, [r4, #3]
    3c50:	78a1      	ldrb	r1, [r4, #2]
    3c52:	021b      	lsls	r3, r3, #8
    3c54:	430b      	orrs	r3, r1
    3c56:	001a      	movs	r2, r3
    3c58:	7923      	ldrb	r3, [r4, #4]
    3c5a:	79a6      	ldrb	r6, [r4, #6]
    3c5c:	041b      	lsls	r3, r3, #16
    3c5e:	4313      	orrs	r3, r2
    3c60:	7962      	ldrb	r2, [r4, #5]
    3c62:	0612      	lsls	r2, r2, #24
    3c64:	431a      	orrs	r2, r3
    3c66:	4694      	mov	ip, r2
    3c68:	79e2      	ldrb	r2, [r4, #7]
    3c6a:	7a23      	ldrb	r3, [r4, #8]
    3c6c:	0212      	lsls	r2, r2, #8
    3c6e:	4332      	orrs	r2, r6
    3c70:	041b      	lsls	r3, r3, #16
    3c72:	4313      	orrs	r3, r2
    3c74:	001a      	movs	r2, r3
    3c76:	7a63      	ldrb	r3, [r4, #9]
    3c78:	061b      	lsls	r3, r3, #24
    3c7a:	4313      	orrs	r3, r2
		bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
		goto done;
	}

#if !defined(CONFIG_BLUETOOTH_SMP_SC_ONLY)
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
    3c7c:	6f02      	ldr	r2, [r0, #112]	; 0x70
    3c7e:	4562      	cmp	r2, ip
    3c80:	d130      	bne.n	3ce4 <bt_recv+0x974>
    3c82:	6f42      	ldr	r2, [r0, #116]	; 0x74
    3c84:	429a      	cmp	r2, r3
    3c86:	d12d      	bne.n	3ce4 <bt_recv+0x974>
	    conn->le.keys->slave_ltk.rand == evt->rand &&
	    conn->le.keys->slave_ltk.ediv == evt->ediv) {
    3c88:	3078      	adds	r0, #120	; 0x78
    3c8a:	7ae3      	ldrb	r3, [r4, #11]
    3c8c:	7aa2      	ldrb	r2, [r4, #10]
		goto done;
	}

#if !defined(CONFIG_BLUETOOTH_SMP_SC_ONLY)
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
	    conn->le.keys->slave_ltk.rand == evt->rand &&
    3c8e:	8801      	ldrh	r1, [r0, #0]
	    conn->le.keys->slave_ltk.ediv == evt->ediv) {
    3c90:	021b      	lsls	r3, r3, #8
		goto done;
	}

#if !defined(CONFIG_BLUETOOTH_SMP_SC_ONLY)
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
	    conn->le.keys->slave_ltk.rand == evt->rand &&
    3c92:	4313      	orrs	r3, r2
    3c94:	4299      	cmp	r1, r3
    3c96:	d125      	bne.n	3ce4 <bt_recv+0x974>
	    conn->le.keys->slave_ltk.ediv == evt->ediv) {
		struct bt_hci_cp_le_ltk_req_reply *cp;
		struct net_buf *buf;

		buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
    3c98:	2112      	movs	r1, #18
    3c9a:	483c      	ldr	r0, [pc, #240]	; (3d8c <bt_recv+0xa1c>)
    3c9c:	f7fe fc7c 	bl	2598 <bt_hci_cmd_create>
    3ca0:	1e06      	subs	r6, r0, #0
					sizeof(*cp));
		if (!buf) {
    3ca2:	d100      	bne.n	3ca6 <bt_recv+0x936>
    3ca4:	e75b      	b.n	3b5e <bt_recv+0x7ee>
			BT_ERR("Out of command buffers");
			goto done;
		}

		cp = net_buf_add(buf, sizeof(*cp));
    3ca6:	2112      	movs	r1, #18
    3ca8:	3008      	adds	r0, #8
    3caa:	f00f fc8b 	bl	135c4 <net_buf_simple_add>
		cp->handle = evt->handle;
    3cae:	7863      	ldrb	r3, [r4, #1]
    3cb0:	7822      	ldrb	r2, [r4, #0]
    3cb2:	021b      	lsls	r3, r3, #8
    3cb4:	4313      	orrs	r3, r2
    3cb6:	7003      	strb	r3, [r0, #0]
    3cb8:	0a1b      	lsrs	r3, r3, #8
    3cba:	7043      	strb	r3, [r0, #1]

		/* use only enc_size bytes of key for encryption */
		memcpy(cp->ltk, conn->le.keys->slave_ltk.val,
    3cbc:	6fe9      	ldr	r1, [r5, #124]	; 0x7c
    3cbe:	1c84      	adds	r4, r0, #2
    3cc0:	79ca      	ldrb	r2, [r1, #7]
    3cc2:	0020      	movs	r0, r4
    3cc4:	317a      	adds	r1, #122	; 0x7a
    3cc6:	f7fd f838 	bl	d3a <memcpy>
		       conn->le.keys->enc_size);
		if (conn->le.keys->enc_size < sizeof(cp->ltk)) {
    3cca:	6feb      	ldr	r3, [r5, #124]	; 0x7c
    3ccc:	79d8      	ldrb	r0, [r3, #7]
    3cce:	280f      	cmp	r0, #15
    3cd0:	d805      	bhi.n	3cde <bt_recv+0x96e>
			memset(cp->ltk + conn->le.keys->enc_size, 0,
    3cd2:	2210      	movs	r2, #16
    3cd4:	2100      	movs	r1, #0
    3cd6:	1a12      	subs	r2, r2, r0
    3cd8:	1820      	adds	r0, r4, r0
    3cda:	f7fd f858 	bl	d8e <memset>
			       sizeof(cp->ltk) - conn->le.keys->enc_size);
		}

		bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
    3cde:	0031      	movs	r1, r6
    3ce0:	482a      	ldr	r0, [pc, #168]	; (3d8c <bt_recv+0xa1c>)
    3ce2:	e013      	b.n	3d0c <bt_recv+0x99c>
		goto done;
	}
#endif /* !CONFIG_BLUETOOTH_SMP_SC_ONLY */

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
    3ce4:	2102      	movs	r1, #2
    3ce6:	482d      	ldr	r0, [pc, #180]	; (3d9c <bt_recv+0xa2c>)
    3ce8:	f7fe fc56 	bl	2598 <bt_hci_cmd_create>
    3cec:	1e06      	subs	r6, r0, #0
	if (!buf) {
    3cee:	d100      	bne.n	3cf2 <bt_recv+0x982>
    3cf0:	e735      	b.n	3b5e <bt_recv+0x7ee>
		BT_ERR("Out of command buffers");
		goto done;
	}

	cp = net_buf_add(buf, sizeof(*cp));
    3cf2:	2102      	movs	r1, #2
    3cf4:	3008      	adds	r0, #8
    3cf6:	f00f fc65 	bl	135c4 <net_buf_simple_add>
	cp->handle = evt->handle;

	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    3cfa:	0031      	movs	r1, r6
		BT_ERR("Out of command buffers");
		goto done;
	}

	cp = net_buf_add(buf, sizeof(*cp));
	cp->handle = evt->handle;
    3cfc:	7863      	ldrb	r3, [r4, #1]
    3cfe:	7822      	ldrb	r2, [r4, #0]
    3d00:	021b      	lsls	r3, r3, #8
    3d02:	4313      	orrs	r3, r2
    3d04:	7003      	strb	r3, [r0, #0]
    3d06:	0a1b      	lsrs	r3, r3, #8
    3d08:	7043      	strb	r3, [r0, #1]

	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    3d0a:	4824      	ldr	r0, [pc, #144]	; (3d9c <bt_recv+0xa2c>)
    3d0c:	f7ff f9b2 	bl	3074 <bt_hci_cmd_send>

done:
	bt_conn_unref(conn);
    3d10:	0028      	movs	r0, r5
    3d12:	e43d      	b.n	3590 <bt_recv+0x220>
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    3d14:	2111      	movs	r1, #17
    3d16:	4d19      	ldr	r5, [pc, #100]	; (3d7c <bt_recv+0xa0c>)
    3d18:	68bc      	ldr	r4, [r7, #8]
    3d1a:	356c      	adds	r5, #108	; 0x6c
    3d1c:	4249      	negs	r1, r1
    3d1e:	0028      	movs	r0, r5
    3d20:	f00f ff2c 	bl	13b7c <atomic_and>

	BT_DBG("status: 0x%x", evt->status);

	atomic_clear_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY);

	if (!evt->status) {
    3d24:	7823      	ldrb	r3, [r4, #0]
    3d26:	2b00      	cmp	r3, #0
    3d28:	d108      	bne.n	3d3c <bt_recv+0x9cc>
		memcpy(pub_key, evt->key, 64);
    3d2a:	1c61      	adds	r1, r4, #1
    3d2c:	2240      	movs	r2, #64	; 0x40
    3d2e:	481c      	ldr	r0, [pc, #112]	; (3da0 <bt_recv+0xa30>)
    3d30:	f7fd f803 	bl	d3a <memcpy>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_or(ATOMIC_ELEM(target, bit), mask);
    3d34:	2108      	movs	r1, #8
    3d36:	0028      	movs	r0, r5
    3d38:	f00f ff15 	bl	13b66 <atomic_or>
		atomic_set_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY);
	}

	for (cb = pub_key_cb; cb; cb = cb->_next) {
    3d3c:	4b19      	ldr	r3, [pc, #100]	; (3da4 <bt_recv+0xa34>)
    3d3e:	681d      	ldr	r5, [r3, #0]
    3d40:	2d00      	cmp	r5, #0
    3d42:	d101      	bne.n	3d48 <bt_recv+0x9d8>
    3d44:	f7ff fba2 	bl	348c <bt_recv+0x11c>
		cb->func(evt->status ? NULL : evt->key);
    3d48:	2000      	movs	r0, #0
    3d4a:	7822      	ldrb	r2, [r4, #0]
    3d4c:	682b      	ldr	r3, [r5, #0]
    3d4e:	4282      	cmp	r2, r0
    3d50:	d100      	bne.n	3d54 <bt_recv+0x9e4>
    3d52:	1c60      	adds	r0, r4, #1
    3d54:	4798      	blx	r3
	if (!evt->status) {
		memcpy(pub_key, evt->key, 64);
		atomic_set_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY);
	}

	for (cb = pub_key_cb; cb; cb = cb->_next) {
    3d56:	686d      	ldr	r5, [r5, #4]
    3d58:	e7f2      	b.n	3d40 <bt_recv+0x9d0>
{
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;

	BT_DBG("status: 0x%x", evt->status);

	if (dh_key_cb) {
    3d5a:	4c13      	ldr	r4, [pc, #76]	; (3da8 <bt_recv+0xa38>)
    3d5c:	68ba      	ldr	r2, [r7, #8]
    3d5e:	6823      	ldr	r3, [r4, #0]
    3d60:	2b00      	cmp	r3, #0
    3d62:	d101      	bne.n	3d68 <bt_recv+0x9f8>
    3d64:	f7ff fb92 	bl	348c <bt_recv+0x11c>
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    3d68:	2000      	movs	r0, #0
    3d6a:	7811      	ldrb	r1, [r2, #0]
    3d6c:	4281      	cmp	r1, r0
    3d6e:	d100      	bne.n	3d72 <bt_recv+0xa02>
    3d70:	1c50      	adds	r0, r2, #1
    3d72:	4798      	blx	r3
		dh_key_cb = NULL;
    3d74:	2300      	movs	r3, #0
    3d76:	6023      	str	r3, [r4, #0]
    3d78:	f7ff fb88 	bl	348c <bt_recv+0x11c>
    3d7c:	200004d0 	.word	0x200004d0
    3d80:	000154c4 	.word	0x000154c4
    3d84:	000154c9 	.word	0x000154c9
    3d88:	00017951 	.word	0x00017951
    3d8c:	0000201a 	.word	0x0000201a
    3d90:	00015484 	.word	0x00015484
    3d94:	0001548b 	.word	0x0001548b
    3d98:	0001595f 	.word	0x0001595f
    3d9c:	0000201b 	.word	0x0000201b
    3da0:	20000d56 	.word	0x20000d56
    3da4:	20000d98 	.word	0x20000d98
    3da8:	20000da4 	.word	0x20000da4
	return 0;
}

static void le_adv_report(struct net_buf *buf)
{
	u8_t num_reports = net_buf_pull_u8(buf);
    3dac:	9807      	ldr	r0, [sp, #28]
    3dae:	f00f fc32 	bl	13616 <net_buf_simple_pull_u8>
    3db2:	900b      	str	r0, [sp, #44]	; 0x2c
	struct bt_hci_evt_le_advertising_info *info;

	BT_DBG("Adv number of reports %u",  num_reports);

	while (num_reports--) {
    3db4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    3db6:	2b00      	cmp	r3, #0
    3db8:	d101      	bne.n	3dbe <bt_recv+0xa4e>
    3dba:	f7ff fb67 	bl	348c <bt_recv+0x11c>
		const bt_addr_le_t *addr;
		s8_t rssi;

		info = (void *)buf->data;
    3dbe:	68bb      	ldr	r3, [r7, #8]
		net_buf_pull(buf, sizeof(*info));
    3dc0:	2109      	movs	r1, #9
    3dc2:	9807      	ldr	r0, [sp, #28]

	while (num_reports--) {
		const bt_addr_le_t *addr;
		s8_t rssi;

		info = (void *)buf->data;
    3dc4:	9308      	str	r3, [sp, #32]
		net_buf_pull(buf, sizeof(*info));
    3dc6:	f00f fc1e 	bl	13606 <net_buf_simple_pull>

		rssi = info->data[info->length];
    3dca:	9b08      	ldr	r3, [sp, #32]
    3dcc:	9a08      	ldr	r2, [sp, #32]
    3dce:	7a1b      	ldrb	r3, [r3, #8]
    3dd0:	18d3      	adds	r3, r2, r3
    3dd2:	7a5d      	ldrb	r5, [r3, #9]

		BT_DBG("%s event %u, len %u, rssi %d dBm",
		       bt_addr_le_str(&info->addr),
		       info->evt_type, info->length, rssi);

		addr = find_id_addr(&info->addr);
    3dd4:	0013      	movs	r3, r2
    3dd6:	3301      	adds	r3, #1
static const bt_addr_le_t *find_id_addr(const bt_addr_le_t *addr)
{
	if (IS_ENABLED(CONFIG_BLUETOOTH_SMP)) {
		struct bt_keys *keys;

		keys = bt_keys_find_irk(addr);
    3dd8:	0018      	movs	r0, r3

		BT_DBG("%s event %u, len %u, rssi %d dBm",
		       bt_addr_le_str(&info->addr),
		       info->evt_type, info->length, rssi);

		addr = find_id_addr(&info->addr);
    3dda:	930a      	str	r3, [sp, #40]	; 0x28
static const bt_addr_le_t *find_id_addr(const bt_addr_le_t *addr)
{
	if (IS_ENABLED(CONFIG_BLUETOOTH_SMP)) {
		struct bt_keys *keys;

		keys = bt_keys_find_irk(addr);
    3ddc:	f005 f9e0 	bl	91a0 <bt_keys_find_irk>
			       bt_addr_le_str(addr));
			return &keys->addr;
		}
	}

	return addr;
    3de0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
{
	if (IS_ENABLED(CONFIG_BLUETOOTH_SMP)) {
		struct bt_keys *keys;

		keys = bt_keys_find_irk(addr);
		if (keys) {
    3de2:	2800      	cmp	r0, #0
    3de4:	d000      	beq.n	3de8 <bt_recv+0xa78>
			BT_DBG("Identity %s matched RPA %s",
			       bt_addr_le_str(&keys->addr),
			       bt_addr_le_str(addr));
			return &keys->addr;
    3de6:	0004      	movs	r4, r0
		       bt_addr_le_str(&info->addr),
		       info->evt_type, info->length, rssi);

		addr = find_id_addr(&info->addr);

		if (scan_dev_found_cb) {
    3de8:	4e60      	ldr	r6, [pc, #384]	; (3f6c <bt_recv+0xbfc>)
    3dea:	6833      	ldr	r3, [r6, #0]
    3dec:	2b00      	cmp	r3, #0
    3dee:	d018      	beq.n	3e22 <bt_recv+0xab2>
 *  @param state Storage for the state.
 */
static inline void net_buf_simple_save(struct net_buf_simple *buf,
				       struct net_buf_simple_state *state)
{
	state->offset = net_buf_simple_headroom(buf);
    3df0:	9807      	ldr	r0, [sp, #28]
    3df2:	f00f fc23 	bl	1363c <net_buf_simple_headroom>
    3df6:	9009      	str	r0, [sp, #36]	; 0x24
	state->len = buf->len;
    3df8:	89bb      	ldrh	r3, [r7, #12]
			struct net_buf_simple_state state;

			net_buf_simple_save(&buf->b, &state);

			buf->len = info->length;
			scan_dev_found_cb(addr, rssi, info->evt_type, &buf->b);
    3dfa:	b269      	sxtb	r1, r5
    3dfc:	930c      	str	r3, [sp, #48]	; 0x30
		if (scan_dev_found_cb) {
			struct net_buf_simple_state state;

			net_buf_simple_save(&buf->b, &state);

			buf->len = info->length;
    3dfe:	9b08      	ldr	r3, [sp, #32]
			scan_dev_found_cb(addr, rssi, info->evt_type, &buf->b);
    3e00:	6836      	ldr	r6, [r6, #0]
		if (scan_dev_found_cb) {
			struct net_buf_simple_state state;

			net_buf_simple_save(&buf->b, &state);

			buf->len = info->length;
    3e02:	7a1b      	ldrb	r3, [r3, #8]
			scan_dev_found_cb(addr, rssi, info->evt_type, &buf->b);
    3e04:	0020      	movs	r0, r4
		if (scan_dev_found_cb) {
			struct net_buf_simple_state state;

			net_buf_simple_save(&buf->b, &state);

			buf->len = info->length;
    3e06:	81bb      	strh	r3, [r7, #12]
			scan_dev_found_cb(addr, rssi, info->evt_type, &buf->b);
    3e08:	9b08      	ldr	r3, [sp, #32]
    3e0a:	781a      	ldrb	r2, [r3, #0]
    3e0c:	9b07      	ldr	r3, [sp, #28]
    3e0e:	47b0      	blx	r6
 *  @param state Stored state.
 */
static inline void net_buf_simple_restore(struct net_buf_simple *buf,
					  struct net_buf_simple_state *state)
{
	buf->data = buf->__buf + state->offset;
    3e10:	466b      	mov	r3, sp
    3e12:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
    3e14:	003b      	movs	r3, r7
    3e16:	3310      	adds	r3, #16
    3e18:	189b      	adds	r3, r3, r2
    3e1a:	60bb      	str	r3, [r7, #8]
	buf->len = state->len;
    3e1c:	466b      	mov	r3, sp
    3e1e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    3e20:	81bb      	strh	r3, [r7, #12]
			       const bt_addr_le_t *addr, u8_t evtype)
{
	struct bt_conn *conn;

	/* No connections are allowed during explicit scanning */
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    3e22:	4d53      	ldr	r5, [pc, #332]	; (3f70 <bt_recv+0xc00>)

			net_buf_simple_restore(&buf->b, &state);
		}

#if defined(CONFIG_BLUETOOTH_CONN)
		check_pending_conn(addr, &info->addr, info->evt_type);
    3e24:	9b08      	ldr	r3, [sp, #32]
			       const bt_addr_le_t *addr, u8_t evtype)
{
	struct bt_conn *conn;

	/* No connections are allowed during explicit scanning */
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    3e26:	0028      	movs	r0, r5
    3e28:	2108      	movs	r1, #8
    3e2a:	306c      	adds	r0, #108	; 0x6c

			net_buf_simple_restore(&buf->b, &state);
		}

#if defined(CONFIG_BLUETOOTH_CONN)
		check_pending_conn(addr, &info->addr, info->evt_type);
    3e2c:	781e      	ldrb	r6, [r3, #0]
			       const bt_addr_le_t *addr, u8_t evtype)
{
	struct bt_conn *conn;

	/* No connections are allowed during explicit scanning */
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    3e2e:	f7fe faf1 	bl	2414 <atomic_test_bit>
    3e32:	2800      	cmp	r0, #0
    3e34:	d179      	bne.n	3f2a <bt_recv+0xbba>
		return;
	}

	/* Return if event is not connectable */
	if (evtype != BT_LE_ADV_IND && evtype != BT_LE_ADV_DIRECT_IND) {
    3e36:	2e01      	cmp	r6, #1
    3e38:	d877      	bhi.n	3f2a <bt_recv+0xbba>
		return;
	}

	conn = bt_conn_lookup_state_le(id_addr, BT_CONN_CONNECT_SCAN);
    3e3a:	0020      	movs	r0, r4
    3e3c:	2101      	movs	r1, #1
    3e3e:	f000 ffa7 	bl	4d90 <bt_conn_lookup_state_le>
    3e42:	1e04      	subs	r4, r0, #0
	if (!conn) {
    3e44:	d071      	beq.n	3f2a <bt_recv+0xbba>
		return;
	}

	if (bt_hci_stop_scanning()) {
    3e46:	f7fe fcc3 	bl	27d0 <bt_hci_stop_scanning>
    3e4a:	2800      	cmp	r0, #0
    3e4c:	d15f      	bne.n	3f0e <bt_recv+0xb9e>
		goto failed;
	}

	if (IS_ENABLED(CONFIG_BLUETOOTH_PRIVACY)) {
		if (le_set_private_addr()) {
    3e4e:	f7fe fc5f 	bl	2710 <le_set_private_addr>
    3e52:	9009      	str	r0, [sp, #36]	; 0x24
    3e54:	2800      	cmp	r0, #0
    3e56:	d15a      	bne.n	3f0e <bt_recv+0xb9e>
			goto failed;
		}

		bt_addr_le_copy(&conn->le.init_addr, &bt_dev.random_addr);
    3e58:	0023      	movs	r3, r4
    3e5a:	335b      	adds	r3, #91	; 0x5b
    3e5c:	1de9      	adds	r1, r5, #7
    3e5e:	2207      	movs	r2, #7
    3e60:	0018      	movs	r0, r3
    3e62:	930d      	str	r3, [sp, #52]	; 0x34
    3e64:	f7fc ff69 	bl	d3a <memcpy>
		}

		bt_addr_le_copy(&conn->le.init_addr, &bt_dev.id_addr);
	}

	bt_addr_le_copy(&conn->le.resp_addr, addr);
    3e68:	0023      	movs	r3, r4
    3e6a:	3362      	adds	r3, #98	; 0x62
    3e6c:	2207      	movs	r2, #7
    3e6e:	990a      	ldr	r1, [sp, #40]	; 0x28
    3e70:	0018      	movs	r0, r3
    3e72:	930c      	str	r3, [sp, #48]	; 0x30
    3e74:	f7fc ff61 	bl	d3a <memcpy>
static int hci_le_create_conn(const struct bt_conn *conn)
{
	struct net_buf *buf;
	struct bt_hci_cp_le_create_conn *cp;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
    3e78:	2119      	movs	r1, #25
    3e7a:	483e      	ldr	r0, [pc, #248]	; (3f74 <bt_recv+0xc04>)
    3e7c:	f7fe fb8c 	bl	2598 <bt_hci_cmd_create>
    3e80:	1e05      	subs	r5, r0, #0
	if (!buf) {
    3e82:	d044      	beq.n	3f0e <bt_recv+0xb9e>
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));
    3e84:	2119      	movs	r1, #25
    3e86:	3008      	adds	r0, #8
    3e88:	f00f fb9c 	bl	135c4 <net_buf_simple_add>
	memset(cp, 0, sizeof(*cp));
    3e8c:	2219      	movs	r2, #25
    3e8e:	9909      	ldr	r1, [sp, #36]	; 0x24
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
	if (!buf) {
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));
    3e90:	0006      	movs	r6, r0
	memset(cp, 0, sizeof(*cp));
    3e92:	f7fc ff7c 	bl	d8e <memset>

	/* Interval == window for continuous scanning */
	cp->scan_interval = sys_cpu_to_le16(BT_GAP_SCAN_FAST_INTERVAL);
    3e96:	2124      	movs	r1, #36	; 0x24
    3e98:	2360      	movs	r3, #96	; 0x60
    3e9a:	466a      	mov	r2, sp
    3e9c:	7033      	strb	r3, [r6, #0]
    3e9e:	1852      	adds	r2, r2, r1
	cp->scan_window = cp->scan_interval;
    3ea0:	70b3      	strb	r3, [r6, #2]
    3ea2:	466b      	mov	r3, sp

	cp = net_buf_add(buf, sizeof(*cp));
	memset(cp, 0, sizeof(*cp));

	/* Interval == window for continuous scanning */
	cp->scan_interval = sys_cpu_to_le16(BT_GAP_SCAN_FAST_INTERVAL);
    3ea4:	7812      	ldrb	r2, [r2, #0]
	cp->scan_window = cp->scan_interval;
    3ea6:	185b      	adds	r3, r3, r1

	cp = net_buf_add(buf, sizeof(*cp));
	memset(cp, 0, sizeof(*cp));

	/* Interval == window for continuous scanning */
	cp->scan_interval = sys_cpu_to_le16(BT_GAP_SCAN_FAST_INTERVAL);
    3ea8:	7072      	strb	r2, [r6, #1]
	cp->scan_window = cp->scan_interval;
    3eaa:	000a      	movs	r2, r1
    3eac:	781b      	ldrb	r3, [r3, #0]
    3eae:	3a1d      	subs	r2, #29
    3eb0:	70f3      	strb	r3, [r6, #3]
    3eb2:	990c      	ldr	r1, [sp, #48]	; 0x30

	bt_addr_le_copy(&cp->peer_addr, &conn->le.resp_addr);
    3eb4:	1d70      	adds	r0, r6, #5
    3eb6:	f7fc ff40 	bl	d3a <memcpy>
	cp->own_addr_type = conn->le.init_addr.type;
    3eba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
    3ebc:	9a09      	ldr	r2, [sp, #36]	; 0x24
	/* Interval == window for continuous scanning */
	cp->scan_interval = sys_cpu_to_le16(BT_GAP_SCAN_FAST_INTERVAL);
	cp->scan_window = cp->scan_interval;

	bt_addr_le_copy(&cp->peer_addr, &conn->le.resp_addr);
	cp->own_addr_type = conn->le.init_addr.type;
    3ebe:	781b      	ldrb	r3, [r3, #0]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
    3ec0:	0029      	movs	r1, r5
	/* Interval == window for continuous scanning */
	cp->scan_interval = sys_cpu_to_le16(BT_GAP_SCAN_FAST_INTERVAL);
	cp->scan_window = cp->scan_interval;

	bt_addr_le_copy(&cp->peer_addr, &conn->le.resp_addr);
	cp->own_addr_type = conn->le.init_addr.type;
    3ec2:	7333      	strb	r3, [r6, #12]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
    3ec4:	0023      	movs	r3, r4
    3ec6:	336c      	adds	r3, #108	; 0x6c
    3ec8:	881b      	ldrh	r3, [r3, #0]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
    3eca:	482a      	ldr	r0, [pc, #168]	; (3f74 <bt_recv+0xc04>)
	cp->scan_interval = sys_cpu_to_le16(BT_GAP_SCAN_FAST_INTERVAL);
	cp->scan_window = cp->scan_interval;

	bt_addr_le_copy(&cp->peer_addr, &conn->le.resp_addr);
	cp->own_addr_type = conn->le.init_addr.type;
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
    3ecc:	7373      	strb	r3, [r6, #13]
    3ece:	0a1b      	lsrs	r3, r3, #8
    3ed0:	73b3      	strb	r3, [r6, #14]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
    3ed2:	0023      	movs	r3, r4
    3ed4:	336e      	adds	r3, #110	; 0x6e
    3ed6:	881b      	ldrh	r3, [r3, #0]
    3ed8:	73f3      	strb	r3, [r6, #15]
    3eda:	0a1b      	lsrs	r3, r3, #8
    3edc:	7433      	strb	r3, [r6, #16]
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
    3ede:	0023      	movs	r3, r4
    3ee0:	3370      	adds	r3, #112	; 0x70
    3ee2:	881b      	ldrh	r3, [r3, #0]
    3ee4:	7473      	strb	r3, [r6, #17]
    3ee6:	0a1b      	lsrs	r3, r3, #8
    3ee8:	74b3      	strb	r3, [r6, #18]
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
    3eea:	0023      	movs	r3, r4
    3eec:	3372      	adds	r3, #114	; 0x72
    3eee:	881b      	ldrh	r3, [r3, #0]
    3ef0:	74f3      	strb	r3, [r6, #19]
    3ef2:	0a1b      	lsrs	r3, r3, #8
    3ef4:	7533      	strb	r3, [r6, #20]

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
    3ef6:	f7fe fb75 	bl	25e4 <bt_hci_cmd_send_sync>
		bt_addr_le_copy(&conn->le.init_addr, &bt_dev.id_addr);
	}

	bt_addr_le_copy(&conn->le.resp_addr, addr);

	if (hci_le_create_conn(conn)) {
    3efa:	2800      	cmp	r0, #0
    3efc:	d107      	bne.n	3f0e <bt_recv+0xb9e>
		goto failed;
	}

	bt_conn_set_state(conn, BT_CONN_CONNECT);
    3efe:	0020      	movs	r0, r4
    3f00:	2102      	movs	r1, #2
    3f02:	f000 fe3b 	bl	4b7c <bt_conn_set_state>
	bt_conn_unref(conn);
    3f06:	0020      	movs	r0, r4
    3f08:	f000 ff66 	bl	4dd8 <bt_conn_unref>
    3f0c:	e00d      	b.n	3f2a <bt_recv+0xbba>
	return;

failed:
	conn->err = BT_HCI_ERR_UNSPECIFIED;
    3f0e:	0023      	movs	r3, r4
    3f10:	221f      	movs	r2, #31
    3f12:	3350      	adds	r3, #80	; 0x50
    3f14:	701a      	strb	r2, [r3, #0]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    3f16:	2100      	movs	r1, #0
    3f18:	0020      	movs	r0, r4
    3f1a:	f000 fe2f 	bl	4b7c <bt_conn_set_state>
	bt_conn_unref(conn);
    3f1e:	0020      	movs	r0, r4
    3f20:	f000 ff5a 	bl	4dd8 <bt_conn_unref>
	bt_le_scan_update(false);
    3f24:	2000      	movs	r0, #0
    3f26:	f7fe fcfb 	bl	2920 <bt_le_scan_update>
#endif /* CONFIG_BLUETOOTH_CONN */

		/* Get next report iteration by moving pointer to right offset
		 * in buf according to spec 4.2, Vol 2, Part E, 7.7.65.2.
		 */
		net_buf_pull(buf, info->length + sizeof(rssi));
    3f2a:	9b08      	ldr	r3, [sp, #32]
    3f2c:	9807      	ldr	r0, [sp, #28]
    3f2e:	7a19      	ldrb	r1, [r3, #8]
    3f30:	3101      	adds	r1, #1
    3f32:	f00f fb68 	bl	13606 <net_buf_simple_pull>
    3f36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    3f38:	3b01      	subs	r3, #1
    3f3a:	b2db      	uxtb	r3, r3
    3f3c:	930b      	str	r3, [sp, #44]	; 0x2c
    3f3e:	e739      	b.n	3db4 <bt_recv+0xa44>
		break;
	case BT_HCI_EVT_LE_ADVERTISING_REPORT:
		le_adv_report(buf);
		break;
	default:
		BT_WARN("Unhandled LE event 0x%02x len %u: %s",
    3f40:	89bd      	ldrh	r5, [r7, #12]
    3f42:	68b8      	ldr	r0, [r7, #8]
    3f44:	0029      	movs	r1, r5
    3f46:	f7fe f937 	bl	21b8 <bt_hex>
    3f4a:	4b0b      	ldr	r3, [pc, #44]	; (3f78 <bt_recv+0xc08>)
    3f4c:	9003      	str	r0, [sp, #12]
    3f4e:	9304      	str	r3, [sp, #16]
    3f50:	4b0a      	ldr	r3, [pc, #40]	; (3f7c <bt_recv+0xc0c>)
    3f52:	9502      	str	r5, [sp, #8]
    3f54:	9300      	str	r3, [sp, #0]
    3f56:	9401      	str	r4, [sp, #4]
    3f58:	4b09      	ldr	r3, [pc, #36]	; (3f80 <bt_recv+0xc10>)
    3f5a:	4a0a      	ldr	r2, [pc, #40]	; (3f84 <bt_recv+0xc14>)
    3f5c:	490a      	ldr	r1, [pc, #40]	; (3f88 <bt_recv+0xc18>)
    3f5e:	480b      	ldr	r0, [pc, #44]	; (3f8c <bt_recv+0xc1c>)
    3f60:	f7ff fb66 	bl	3630 <bt_recv+0x2c0>
			conn->le.keys = bt_keys_find(BT_KEYS_SLAVE_LTK,
						     &conn->le.dst);
		}
	}

	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256) &&
    3f64:	6fe8      	ldr	r0, [r5, #124]	; 0x7c
    3f66:	e62c      	b.n	3bc2 <bt_recv+0x852>
	default:
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
		net_buf_unref(buf);
		return -EINVAL;
	}
}
    3f68:	b013      	add	sp, #76	; 0x4c
    3f6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3f6c:	20000da0 	.word	0x20000da0
    3f70:	200004d0 	.word	0x200004d0
    3f74:	0000200d 	.word	0x0000200d
    3f78:	000154c4 	.word	0x000154c4
    3f7c:	0001550f 	.word	0x0001550f
    3f80:	00017a02 	.word	0x00017a02
    3f84:	000154d1 	.word	0x000154d1
    3f88:	0001548b 	.word	0x0001548b
    3f8c:	00015986 	.word	0x00015986

00003f90 <bt_recv_prio>:

int bt_recv_prio(struct net_buf *buf)
{
    3f90:	b5f0      	push	{r4, r5, r6, r7, lr}
    3f92:	b089      	sub	sp, #36	; 0x24
    3f94:	0004      	movs	r4, r0
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    3f96:	6885      	ldr	r5, [r0, #8]
    3f98:	f7fe fa1c 	bl	23d4 <net_buf_user_data>

	bt_monitor_send(bt_monitor_opcode(buf), buf->data, buf->len);

	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    3f9c:	7803      	ldrb	r3, [r0, #0]
    3f9e:	2b01      	cmp	r3, #1
    3fa0:	d008      	beq.n	3fb4 <bt_recv_prio+0x24>
    3fa2:	4b6d      	ldr	r3, [pc, #436]	; (4158 <bt_recv_prio+0x1c8>)
    3fa4:	4a6d      	ldr	r2, [pc, #436]	; (415c <bt_recv_prio+0x1cc>)
    3fa6:	9301      	str	r3, [sp, #4]
    3fa8:	4b6d      	ldr	r3, [pc, #436]	; (4160 <bt_recv_prio+0x1d0>)
    3faa:	496e      	ldr	r1, [pc, #440]	; (4164 <bt_recv_prio+0x1d4>)
    3fac:	9300      	str	r3, [sp, #0]
    3fae:	486e      	ldr	r0, [pc, #440]	; (4168 <bt_recv_prio+0x1d8>)
    3fb0:	4b6e      	ldr	r3, [pc, #440]	; (416c <bt_recv_prio+0x1dc>)
    3fb2:	e00a      	b.n	3fca <bt_recv_prio+0x3a>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    3fb4:	89a2      	ldrh	r2, [r4, #12]
    3fb6:	2a01      	cmp	r2, #1
    3fb8:	d80c      	bhi.n	3fd4 <bt_recv_prio+0x44>
    3fba:	4b67      	ldr	r3, [pc, #412]	; (4158 <bt_recv_prio+0x1c8>)
    3fbc:	4a67      	ldr	r2, [pc, #412]	; (415c <bt_recv_prio+0x1cc>)
    3fbe:	9301      	str	r3, [sp, #4]
    3fc0:	4b67      	ldr	r3, [pc, #412]	; (4160 <bt_recv_prio+0x1d0>)
    3fc2:	4968      	ldr	r1, [pc, #416]	; (4164 <bt_recv_prio+0x1d4>)
    3fc4:	9300      	str	r3, [sp, #0]
    3fc6:	486a      	ldr	r0, [pc, #424]	; (4170 <bt_recv_prio+0x1e0>)
    3fc8:	4b68      	ldr	r3, [pc, #416]	; (416c <bt_recv_prio+0x1dc>)
    3fca:	f7fd fcd9 	bl	1980 <printk>
    3fce:	b662      	cpsie	i
    3fd0:	2004      	movs	r0, #4
    3fd2:	df02      	svc	2
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    3fd4:	782a      	ldrb	r2, [r5, #0]
    3fd6:	2a13      	cmp	r2, #19
    3fd8:	d804      	bhi.n	3fe4 <bt_recv_prio+0x54>
    3fda:	4093      	lsls	r3, r2
    3fdc:	228c      	movs	r2, #140	; 0x8c
    3fde:	0312      	lsls	r2, r2, #12
    3fe0:	4213      	tst	r3, r2
    3fe2:	d108      	bne.n	3ff6 <bt_recv_prio+0x66>
    3fe4:	4b5c      	ldr	r3, [pc, #368]	; (4158 <bt_recv_prio+0x1c8>)
    3fe6:	4a5d      	ldr	r2, [pc, #372]	; (415c <bt_recv_prio+0x1cc>)
    3fe8:	9301      	str	r3, [sp, #4]
    3fea:	4b5d      	ldr	r3, [pc, #372]	; (4160 <bt_recv_prio+0x1d0>)
    3fec:	495d      	ldr	r1, [pc, #372]	; (4164 <bt_recv_prio+0x1d4>)
    3fee:	9300      	str	r3, [sp, #0]
    3ff0:	4860      	ldr	r0, [pc, #384]	; (4174 <bt_recv_prio+0x1e4>)
    3ff2:	4b5e      	ldr	r3, [pc, #376]	; (416c <bt_recv_prio+0x1dc>)
    3ff4:	e7e9      	b.n	3fca <bt_recv_prio+0x3a>

	net_buf_pull(buf, sizeof(*hdr));
    3ff6:	0026      	movs	r6, r4
    3ff8:	3608      	adds	r6, #8
    3ffa:	2102      	movs	r1, #2
    3ffc:	0030      	movs	r0, r6
    3ffe:	f00f fb02 	bl	13606 <net_buf_simple_pull>

	switch (hdr->evt) {
    4002:	782b      	ldrb	r3, [r5, #0]
    4004:	2b0f      	cmp	r3, #15
    4006:	d118      	bne.n	403a <bt_recv_prio+0xaa>
	}
}

static void hci_cmd_status(struct net_buf *buf)
{
	struct bt_hci_evt_cmd_status *evt = (void *)buf->data;
    4008:	68a5      	ldr	r5, [r4, #8]
	u16_t opcode = sys_le16_to_cpu(evt->opcode);
	u8_t ncmd = evt->ncmd;

	BT_DBG("opcode 0x%04x", opcode);

	net_buf_pull(buf, sizeof(*evt));
    400a:	2104      	movs	r1, #4
}

static void hci_cmd_status(struct net_buf *buf)
{
	struct bt_hci_evt_cmd_status *evt = (void *)buf->data;
	u16_t opcode = sys_le16_to_cpu(evt->opcode);
    400c:	78ef      	ldrb	r7, [r5, #3]
    400e:	78ab      	ldrb	r3, [r5, #2]
    4010:	023f      	lsls	r7, r7, #8
    4012:	431f      	orrs	r7, r3
	u8_t ncmd = evt->ncmd;
    4014:	786b      	ldrb	r3, [r5, #1]

	BT_DBG("opcode 0x%04x", opcode);

	net_buf_pull(buf, sizeof(*evt));
    4016:	0030      	movs	r0, r6

static void hci_cmd_status(struct net_buf *buf)
{
	struct bt_hci_evt_cmd_status *evt = (void *)buf->data;
	u16_t opcode = sys_le16_to_cpu(evt->opcode);
	u8_t ncmd = evt->ncmd;
    4018:	9304      	str	r3, [sp, #16]

	BT_DBG("opcode 0x%04x", opcode);

	net_buf_pull(buf, sizeof(*evt));
    401a:	f00f faf4 	bl	13606 <net_buf_simple_pull>

	hci_cmd_done(opcode, evt->status, buf);
    401e:	7829      	ldrb	r1, [r5, #0]
    4020:	0022      	movs	r2, r4
    4022:	0038      	movs	r0, r7
    4024:	f7fe fa4a 	bl	24bc <hci_cmd_done>

	/* Allow next command to be sent */
	if (ncmd) {
    4028:	9b04      	ldr	r3, [sp, #16]
    402a:	2b00      	cmp	r3, #0
    402c:	d100      	bne.n	4030 <bt_recv_prio+0xa0>
    402e:	e08d      	b.n	414c <bt_recv_prio+0x1bc>

	hci_cmd_done(opcode, status, buf);

	/* Allow next command to be sent */
	if (ncmd) {
		k_sem_give(&bt_dev.ncmd_sem);
    4030:	4851      	ldr	r0, [pc, #324]	; (4178 <bt_recv_prio+0x1e8>)
    4032:	3098      	adds	r0, #152	; 0x98
    4034:	f010 fc52 	bl	148dc <k_sem_give>
    4038:	e088      	b.n	414c <bt_recv_prio+0x1bc>
	BT_ASSERT(buf->len >= sizeof(*hdr));
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));

	net_buf_pull(buf, sizeof(*hdr));

	switch (hdr->evt) {
    403a:	2b13      	cmp	r3, #19
    403c:	d157      	bne.n	40ee <bt_recv_prio+0x15e>
    403e:	68a3      	ldr	r3, [r4, #8]
    4040:	9305      	str	r3, [sp, #20]
}

static void hci_num_completed_packets(struct net_buf *buf)
{
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
	u16_t i, num_handles = sys_le16_to_cpu(evt->num_handles);
    4042:	781b      	ldrb	r3, [r3, #0]
    4044:	9306      	str	r3, [sp, #24]
    4046:	2300      	movs	r3, #0
    4048:	9304      	str	r3, [sp, #16]

	BT_DBG("num_handles %u", num_handles);

	for (i = 0; i < num_handles; i++) {
    404a:	466b      	mov	r3, sp
    404c:	9a06      	ldr	r2, [sp, #24]
    404e:	8a1b      	ldrh	r3, [r3, #16]
    4050:	4293      	cmp	r3, r2
    4052:	d300      	bcc.n	4056 <bt_recv_prio+0xc6>
    4054:	e07a      	b.n	414c <bt_recv_prio+0x1bc>
    4056:	9b04      	ldr	r3, [sp, #16]
    4058:	9a05      	ldr	r2, [sp, #20]
    405a:	009b      	lsls	r3, r3, #2
    405c:	18d3      	adds	r3, r2, r3
		u16_t handle, count;
		struct bt_conn *conn;
		unsigned int key;

		handle = sys_le16_to_cpu(evt->h[i].handle);
    405e:	789f      	ldrb	r7, [r3, #2]
    4060:	785a      	ldrb	r2, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    4062:	791d      	ldrb	r5, [r3, #4]
	for (i = 0; i < num_handles; i++) {
		u16_t handle, count;
		struct bt_conn *conn;
		unsigned int key;

		handle = sys_le16_to_cpu(evt->h[i].handle);
    4064:	023f      	lsls	r7, r7, #8
    4066:	4317      	orrs	r7, r2
		count = sys_le16_to_cpu(evt->h[i].count);
    4068:	78da      	ldrb	r2, [r3, #3]
    406a:	022d      	lsls	r5, r5, #8
    406c:	4315      	orrs	r5, r2
    406e:	9507      	str	r5, [sp, #28]
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
    4070:	f3ef 8510 	mrs	r5, PRIMASK
    4074:	b672      	cpsid	i

		BT_DBG("handle %u count %u", handle, count);

		key = irq_lock();

		conn = bt_conn_lookup_handle(handle);
    4076:	0038      	movs	r0, r7
    4078:	f000 fe3a 	bl	4cf0 <bt_conn_lookup_handle>
    407c:	1e06      	subs	r6, r0, #0
		if (!conn) {
    407e:	d10e      	bne.n	409e <bt_recv_prio+0x10e>
			BT_ERR("No connection for handle %u", handle);
    4080:	4b35      	ldr	r3, [pc, #212]	; (4158 <bt_recv_prio+0x1c8>)
    4082:	9701      	str	r7, [sp, #4]
    4084:	9302      	str	r3, [sp, #8]
    4086:	4b36      	ldr	r3, [pc, #216]	; (4160 <bt_recv_prio+0x1d0>)
    4088:	4a34      	ldr	r2, [pc, #208]	; (415c <bt_recv_prio+0x1cc>)
    408a:	9300      	str	r3, [sp, #0]
    408c:	4935      	ldr	r1, [pc, #212]	; (4164 <bt_recv_prio+0x1d4>)
    408e:	4b3b      	ldr	r3, [pc, #236]	; (417c <bt_recv_prio+0x1ec>)
    4090:	483b      	ldr	r0, [pc, #236]	; (4180 <bt_recv_prio+0x1f0>)
    4092:	f7fd fc75 	bl	1980 <printk>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    4096:	2d00      	cmp	r5, #0
    4098:	d126      	bne.n	40e8 <bt_recv_prio+0x158>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    409a:	b662      	cpsie	i
    409c:	e024      	b.n	40e8 <bt_recv_prio+0x158>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    409e:	2d00      	cmp	r5, #0
    40a0:	d100      	bne.n	40a4 <bt_recv_prio+0x114>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    40a2:	b662      	cpsie	i
		return -EINVAL;
	}
}

int bt_recv_prio(struct net_buf *buf)
{
    40a4:	9d07      	ldr	r5, [sp, #28]
			continue;
		}

		irq_unlock(key);

		while (count--) {
    40a6:	2d00      	cmp	r5, #0
    40a8:	d01b      	beq.n	40e2 <bt_recv_prio+0x152>
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
    40aa:	f3ef 8310 	mrs	r3, PRIMASK
    40ae:	b672      	cpsid	i
    40b0:	6971      	ldr	r1, [r6, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list)
{
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
    40b2:	2900      	cmp	r1, #0
    40b4:	d006      	beq.n	40c4 <bt_recv_prio+0x134>
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list)
{
	sys_snode_t *node = list->head;

	list->head = node->next;
    40b6:	680a      	ldr	r2, [r1, #0]
	if (list->tail == node) {
    40b8:	69b0      	ldr	r0, [r6, #24]
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list)
{
	sys_snode_t *node = list->head;

	list->head = node->next;
    40ba:	6172      	str	r2, [r6, #20]
	if (list->tail == node) {
    40bc:	4281      	cmp	r1, r0
    40be:	d137      	bne.n	4130 <bt_recv_prio+0x1a0>
		list->tail = list->head;
    40c0:	61b2      	str	r2, [r6, #24]
    40c2:	e035      	b.n	4130 <bt_recv_prio+0x1a0>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    40c4:	2b00      	cmp	r3, #0
    40c6:	d102      	bne.n	40ce <bt_recv_prio+0x13e>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    40c8:	b662      	cpsie	i

			key = irq_lock();
			node = sys_slist_get(&conn->tx_pending);
			irq_unlock(key);

			if (!node) {
    40ca:	2900      	cmp	r1, #0
    40cc:	d132      	bne.n	4134 <bt_recv_prio+0x1a4>
				BT_ERR("packets count mismatch");
    40ce:	4b22      	ldr	r3, [pc, #136]	; (4158 <bt_recv_prio+0x1c8>)
    40d0:	4a22      	ldr	r2, [pc, #136]	; (415c <bt_recv_prio+0x1cc>)
    40d2:	9301      	str	r3, [sp, #4]
    40d4:	4b22      	ldr	r3, [pc, #136]	; (4160 <bt_recv_prio+0x1d0>)
    40d6:	4923      	ldr	r1, [pc, #140]	; (4164 <bt_recv_prio+0x1d4>)
    40d8:	9300      	str	r3, [sp, #0]
    40da:	482a      	ldr	r0, [pc, #168]	; (4184 <bt_recv_prio+0x1f4>)
    40dc:	4b27      	ldr	r3, [pc, #156]	; (417c <bt_recv_prio+0x1ec>)
    40de:	f7fd fc4f 	bl	1980 <printk>

			k_fifo_put(&conn->tx_notify, node);
			k_sem_give(bt_conn_get_pkts(conn));
		}

		bt_conn_unref(conn);
    40e2:	0030      	movs	r0, r6
    40e4:	f000 fe78 	bl	4dd8 <bt_conn_unref>
    40e8:	9b04      	ldr	r3, [sp, #16]
    40ea:	3301      	adds	r3, #1
    40ec:	e7ac      	b.n	4048 <bt_recv_prio+0xb8>
	BT_ASSERT(buf->len >= sizeof(*hdr));
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));

	net_buf_pull(buf, sizeof(*hdr));

	switch (hdr->evt) {
    40ee:	2b0e      	cmp	r3, #14
    40f0:	d112      	bne.n	4118 <bt_recv_prio+0x188>
	}
}

static void hci_cmd_complete(struct net_buf *buf)
{
	struct bt_hci_evt_cmd_complete *evt = (void *)buf->data;
    40f2:	68a3      	ldr	r3, [r4, #8]
	u16_t opcode = sys_le16_to_cpu(evt->opcode);
	u8_t status, ncmd = evt->ncmd;

	BT_DBG("opcode 0x%04x", opcode);

	net_buf_pull(buf, sizeof(*evt));
    40f4:	2103      	movs	r1, #3
}

static void hci_cmd_complete(struct net_buf *buf)
{
	struct bt_hci_evt_cmd_complete *evt = (void *)buf->data;
	u16_t opcode = sys_le16_to_cpu(evt->opcode);
    40f6:	789d      	ldrb	r5, [r3, #2]
    40f8:	785a      	ldrb	r2, [r3, #1]
    40fa:	022d      	lsls	r5, r5, #8
	u8_t status, ncmd = evt->ncmd;

	BT_DBG("opcode 0x%04x", opcode);

	net_buf_pull(buf, sizeof(*evt));
    40fc:	0030      	movs	r0, r6
}

static void hci_cmd_complete(struct net_buf *buf)
{
	struct bt_hci_evt_cmd_complete *evt = (void *)buf->data;
	u16_t opcode = sys_le16_to_cpu(evt->opcode);
    40fe:	4315      	orrs	r5, r2
	u8_t status, ncmd = evt->ncmd;
    4100:	781f      	ldrb	r7, [r3, #0]

	BT_DBG("opcode 0x%04x", opcode);

	net_buf_pull(buf, sizeof(*evt));
    4102:	f00f fa80 	bl	13606 <net_buf_simple_pull>
	/* All command return parameters have a 1-byte status in the
	 * beginning, so we can safely make this generalization.
	 */
	status = buf->data[0];

	hci_cmd_done(opcode, status, buf);
    4106:	68a3      	ldr	r3, [r4, #8]
    4108:	0022      	movs	r2, r4
    410a:	7819      	ldrb	r1, [r3, #0]
    410c:	0028      	movs	r0, r5
    410e:	f7fe f9d5 	bl	24bc <hci_cmd_done>

	/* Allow next command to be sent */
	if (ncmd) {
    4112:	2f00      	cmp	r7, #0
    4114:	d01a      	beq.n	414c <bt_recv_prio+0x1bc>
    4116:	e78b      	b.n	4030 <bt_recv_prio+0xa0>
	case BT_HCI_EVT_NUM_COMPLETED_PACKETS:
		hci_num_completed_packets(buf);
		break;
#endif /* CONFIG_BLUETOOTH_CONN */
	default:
		net_buf_unref(buf);
    4118:	0020      	movs	r0, r4
    411a:	f00f fa31 	bl	13580 <net_buf_unref>
		BT_ASSERT(0);
    411e:	4b0e      	ldr	r3, [pc, #56]	; (4158 <bt_recv_prio+0x1c8>)
    4120:	4a0e      	ldr	r2, [pc, #56]	; (415c <bt_recv_prio+0x1cc>)
    4122:	9301      	str	r3, [sp, #4]
    4124:	4b0e      	ldr	r3, [pc, #56]	; (4160 <bt_recv_prio+0x1d0>)
    4126:	490f      	ldr	r1, [pc, #60]	; (4164 <bt_recv_prio+0x1d4>)
    4128:	9300      	str	r3, [sp, #0]
    412a:	4817      	ldr	r0, [pc, #92]	; (4188 <bt_recv_prio+0x1f8>)
    412c:	4b0f      	ldr	r3, [pc, #60]	; (416c <bt_recv_prio+0x1dc>)
    412e:	e74c      	b.n	3fca <bt_recv_prio+0x3a>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    4130:	2b00      	cmp	r3, #0
    4132:	d0c9      	beq.n	40c8 <bt_recv_prio+0x138>
			if (!node) {
				BT_ERR("packets count mismatch");
				break;
			}

			k_fifo_put(&conn->tx_notify, node);
    4134:	0030      	movs	r0, r6
    4136:	301c      	adds	r0, #28
    4138:	f010 f962 	bl	14400 <k_queue_append>
			k_sem_give(bt_conn_get_pkts(conn));
    413c:	0030      	movs	r0, r6
    413e:	f000 fa71 	bl	4624 <bt_conn_get_pkts>
    4142:	3d01      	subs	r5, #1
    4144:	f010 fbca 	bl	148dc <k_sem_give>
    4148:	b2ad      	uxth	r5, r5
    414a:	e7ac      	b.n	40a6 <bt_recv_prio+0x116>
		net_buf_unref(buf);
		BT_ASSERT(0);
		return -EINVAL;
	}

	net_buf_unref(buf);
    414c:	0020      	movs	r0, r4
    414e:	f00f fa17 	bl	13580 <net_buf_unref>

	return 0;
}
    4152:	2000      	movs	r0, #0
    4154:	b009      	add	sp, #36	; 0x24
    4156:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4158:	000154c4 	.word	0x000154c4
    415c:	00015484 	.word	0x00015484
    4160:	000154c9 	.word	0x000154c9
    4164:	0001548b 	.word	0x0001548b
    4168:	00015a50 	.word	0x00015a50
    416c:	000178e4 	.word	0x000178e4
    4170:	00015a94 	.word	0x00015a94
    4174:	00015b44 	.word	0x00015b44
    4178:	200004d0 	.word	0x200004d0
    417c:	000179c7 	.word	0x000179c7
    4180:	00015ace 	.word	0x00015ace
    4184:	00015afa 	.word	0x00015afa
    4188:	00015b21 	.word	0x00015b21

0000418c <bt_hci_driver_register>:

int bt_hci_driver_register(const struct bt_hci_driver *drv)
{
	if (bt_dev.drv) {
    418c:	4a09      	ldr	r2, [pc, #36]	; (41b4 <bt_hci_driver_register+0x28>)
    418e:	32d8      	adds	r2, #216	; 0xd8
    4190:	6813      	ldr	r3, [r2, #0]
    4192:	2b00      	cmp	r3, #0
    4194:	d108      	bne.n	41a8 <bt_hci_driver_register+0x1c>
		return -EALREADY;
	}

	if (!drv->open || !drv->send) {
    4196:	6881      	ldr	r1, [r0, #8]
    4198:	2900      	cmp	r1, #0
    419a:	d007      	beq.n	41ac <bt_hci_driver_register+0x20>
    419c:	68c1      	ldr	r1, [r0, #12]
    419e:	2900      	cmp	r1, #0
    41a0:	d004      	beq.n	41ac <bt_hci_driver_register+0x20>
		return -EINVAL;
	}

	bt_dev.drv = drv;
    41a2:	6010      	str	r0, [r2, #0]
	BT_DBG("Registered %s", drv->name ? drv->name : "");

	bt_monitor_new_index(BT_MONITOR_TYPE_PRIMARY, drv->bus,
			     BT_ADDR_ANY, drv->name ? drv->name : "bt0");

	return 0;
    41a4:	0018      	movs	r0, r3
    41a6:	e003      	b.n	41b0 <bt_hci_driver_register+0x24>
}

int bt_hci_driver_register(const struct bt_hci_driver *drv)
{
	if (bt_dev.drv) {
		return -EALREADY;
    41a8:	2045      	movs	r0, #69	; 0x45
    41aa:	e000      	b.n	41ae <bt_hci_driver_register+0x22>
	}

	if (!drv->open || !drv->send) {
		return -EINVAL;
    41ac:	2016      	movs	r0, #22
    41ae:	4240      	negs	r0, r0

	bt_monitor_new_index(BT_MONITOR_TYPE_PRIMARY, drv->bus,
			     BT_ADDR_ANY, drv->name ? drv->name : "bt0");

	return 0;
}
    41b0:	4770      	bx	lr
    41b2:	46c0      	nop			; (mov r8, r8)
    41b4:	200004d0 	.word	0x200004d0

000041b8 <bt_enable>:
	}
}
#endif /* !CONFIG_BLUETOOTH_RECV_IS_RX_THREAD */

int bt_enable(bt_ready_cb_t cb)
{
    41b8:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;

	if (!bt_dev.drv) {
    41ba:	4d2d      	ldr	r5, [pc, #180]	; (4270 <bt_enable+0xb8>)
	}
}
#endif /* !CONFIG_BLUETOOTH_RECV_IS_RX_THREAD */

int bt_enable(bt_ready_cb_t cb)
{
    41bc:	b089      	sub	sp, #36	; 0x24
	int err;

	if (!bt_dev.drv) {
    41be:	002e      	movs	r6, r5
    41c0:	36d8      	adds	r6, #216	; 0xd8
    41c2:	6833      	ldr	r3, [r6, #0]
	}
}
#endif /* !CONFIG_BLUETOOTH_RECV_IS_RX_THREAD */

int bt_enable(bt_ready_cb_t cb)
{
    41c4:	9007      	str	r0, [sp, #28]
	int err;

	if (!bt_dev.drv) {
    41c6:	2b00      	cmp	r3, #0
    41c8:	d10b      	bne.n	41e2 <bt_enable+0x2a>
		BT_ERR("No HCI driver registered");
    41ca:	4b2a      	ldr	r3, [pc, #168]	; (4274 <bt_enable+0xbc>)
    41cc:	4a2a      	ldr	r2, [pc, #168]	; (4278 <bt_enable+0xc0>)
    41ce:	9301      	str	r3, [sp, #4]
    41d0:	4b2a      	ldr	r3, [pc, #168]	; (427c <bt_enable+0xc4>)
    41d2:	492b      	ldr	r1, [pc, #172]	; (4280 <bt_enable+0xc8>)
    41d4:	9300      	str	r3, [sp, #0]
    41d6:	482b      	ldr	r0, [pc, #172]	; (4284 <bt_enable+0xcc>)
    41d8:	4b2b      	ldr	r3, [pc, #172]	; (4288 <bt_enable+0xd0>)
    41da:	f7fd fbd1 	bl	1980 <printk>
		return -ENODEV;
    41de:	2413      	movs	r4, #19
    41e0:	e041      	b.n	4266 <bt_enable+0xae>
static inline int atomic_test_and_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
	atomic_val_t old;

	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    41e2:	0028      	movs	r0, r5
    41e4:	2101      	movs	r1, #1
    41e6:	306c      	adds	r0, #108	; 0x6c
    41e8:	f00f fcbd 	bl	13b66 <atomic_or>

	return (old & mask) != 0;
    41ec:	2701      	movs	r7, #1
    41ee:	4038      	ands	r0, r7
    41f0:	1e04      	subs	r4, r0, #0
	}

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    41f2:	d137      	bne.n	4264 <bt_enable+0xac>
		return -EALREADY;
	}

	ready_cb = cb;
    41f4:	4b25      	ldr	r3, [pc, #148]	; (428c <bt_enable+0xd4>)
    41f6:	9a07      	ldr	r2, [sp, #28]

	/* TX thread */
	k_thread_create(&tx_thread_data, tx_thread_stack,
    41f8:	4925      	ldr	r1, [pc, #148]	; (4290 <bt_enable+0xd8>)

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
		return -EALREADY;
	}

	ready_cb = cb;
    41fa:	601a      	str	r2, [r3, #0]

	/* TX thread */
	k_thread_create(&tx_thread_data, tx_thread_stack,
    41fc:	2309      	movs	r3, #9
    41fe:	22eb      	movs	r2, #235	; 0xeb
    4200:	425b      	negs	r3, r3
    4202:	9005      	str	r0, [sp, #20]
    4204:	9004      	str	r0, [sp, #16]
    4206:	9303      	str	r3, [sp, #12]
    4208:	9002      	str	r0, [sp, #8]
    420a:	9001      	str	r0, [sp, #4]
    420c:	9000      	str	r0, [sp, #0]
    420e:	4b21      	ldr	r3, [pc, #132]	; (4294 <bt_enable+0xdc>)
    4210:	0092      	lsls	r2, r2, #2
    4212:	4821      	ldr	r0, [pc, #132]	; (4298 <bt_enable+0xe0>)
    4214:	f010 fd54 	bl	14cc0 <k_thread_create>

	if (IS_ENABLED(CONFIG_BLUETOOTH_TINYCRYPT_ECC)) {
		bt_hci_ecc_init();
	}

	err = bt_dev.drv->open();
    4218:	6833      	ldr	r3, [r6, #0]
    421a:	689b      	ldr	r3, [r3, #8]
    421c:	4798      	blx	r3
    421e:	1e06      	subs	r6, r0, #0
	if (err) {
    4220:	d00c      	beq.n	423c <bt_enable+0x84>
		BT_ERR("HCI driver open failed (%d)", err);
    4222:	4b14      	ldr	r3, [pc, #80]	; (4274 <bt_enable+0xbc>)
    4224:	9001      	str	r0, [sp, #4]
    4226:	9302      	str	r3, [sp, #8]
    4228:	4b14      	ldr	r3, [pc, #80]	; (427c <bt_enable+0xc4>)
    422a:	4a13      	ldr	r2, [pc, #76]	; (4278 <bt_enable+0xc0>)
    422c:	9300      	str	r3, [sp, #0]
    422e:	4914      	ldr	r1, [pc, #80]	; (4280 <bt_enable+0xc8>)
    4230:	4b15      	ldr	r3, [pc, #84]	; (4288 <bt_enable+0xd0>)
    4232:	481a      	ldr	r0, [pc, #104]	; (429c <bt_enable+0xe4>)
    4234:	f7fd fba4 	bl	1980 <printk>
		return err;
    4238:	0034      	movs	r4, r6
    423a:	e015      	b.n	4268 <bt_enable+0xb0>
	}

	if (!cb) {
    423c:	9b07      	ldr	r3, [sp, #28]
    423e:	2b00      	cmp	r3, #0
    4240:	d103      	bne.n	424a <bt_enable+0x92>
		return bt_init();
    4242:	f7fe fb93 	bl	296c <bt_init>
    4246:	0004      	movs	r4, r0
    4248:	e00e      	b.n	4268 <bt_enable+0xb0>
static inline int atomic_test_and_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
	atomic_val_t old;

	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    424a:	0028      	movs	r0, r5
    424c:	0039      	movs	r1, r7
    424e:	3068      	adds	r0, #104	; 0x68
    4250:	f00f fc89 	bl	13b66 <atomic_or>
 * @return N/A
 */
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
					  struct k_work *work)
{
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    4254:	4238      	tst	r0, r7
    4256:	d107      	bne.n	4268 <bt_enable+0xb0>
		k_fifo_put(&work_q->fifo, work);
    4258:	0029      	movs	r1, r5
    425a:	4811      	ldr	r0, [pc, #68]	; (42a0 <bt_enable+0xe8>)
    425c:	3160      	adds	r1, #96	; 0x60
    425e:	f010 f8cf 	bl	14400 <k_queue_append>
    4262:	e001      	b.n	4268 <bt_enable+0xb0>
		BT_ERR("No HCI driver registered");
		return -ENODEV;
	}

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
		return -EALREADY;
    4264:	2445      	movs	r4, #69	; 0x45
    4266:	4264      	negs	r4, r4
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
    4268:	0020      	movs	r0, r4
    426a:	b009      	add	sp, #36	; 0x24
    426c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    426e:	46c0      	nop			; (mov r8, r8)
    4270:	200004d0 	.word	0x200004d0
    4274:	000154c4 	.word	0x000154c4
    4278:	00015484 	.word	0x00015484
    427c:	000154c9 	.word	0x000154c9
    4280:	0001548b 	.word	0x0001548b
    4284:	00015b82 	.word	0x00015b82
    4288:	000179ee 	.word	0x000179ee
    428c:	20000d9c 	.word	0x20000d9c
    4290:	200029c0 	.word	0x200029c0
    4294:	000031d9 	.word	0x000031d9
    4298:	20000da8 	.word	0x20000da8
    429c:	00015bab 	.word	0x00015bab
    42a0:	20002358 	.word	0x20002358

000042a4 <bt_addr_le_is_bonded>:

bool bt_addr_le_is_bonded(const bt_addr_le_t *addr)
{
    42a4:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_BLUETOOTH_SMP)) {
		struct bt_keys *keys = bt_keys_find_addr(addr);
    42a6:	f004 ffad 	bl	9204 <bt_keys_find_addr>

		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
    42aa:	1e03      	subs	r3, r0, #0
    42ac:	d002      	beq.n	42b4 <bt_addr_le_is_bonded+0x10>
    42ae:	8983      	ldrh	r3, [r0, #12]
    42b0:	1e58      	subs	r0, r3, #1
    42b2:	4183      	sbcs	r3, r0
    42b4:	2001      	movs	r0, #1
	} else {
		return false;
	}
}
    42b6:	4018      	ands	r0, r3
    42b8:	bd10      	pop	{r4, pc}
	...

000042bc <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
    42bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    42be:	b085      	sub	sp, #20
    42c0:	9201      	str	r2, [sp, #4]
	}
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    42c2:	7802      	ldrb	r2, [r0, #0]
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
    42c4:	9302      	str	r3, [sp, #8]
    42c6:	0005      	movs	r5, r0
    42c8:	000f      	movs	r7, r1
    42ca:	8843      	ldrh	r3, [r0, #2]
	}
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    42cc:	07d2      	lsls	r2, r2, #31
    42ce:	d407      	bmi.n	42e0 <bt_le_adv_start+0x24>
		 * BT Core 4.2 [Vol 2, Part E, 7.8.5]
		 * The Advertising_Interval_Min and Advertising_Interval_Max
		 * shall not be set to less than 0x00A0 (100 ms) if the
		 * Advertising_Type is set to ADV_SCAN_IND or ADV_NONCONN_IND.
		 */
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    42d0:	4a48      	ldr	r2, [pc, #288]	; (43f4 <bt_le_adv_start+0x138>)
    42d2:	7b92      	ldrb	r2, [r2, #14]
    42d4:	2a08      	cmp	r2, #8
    42d6:	d803      	bhi.n	42e0 <bt_le_adv_start+0x24>
    42d8:	2b9f      	cmp	r3, #159	; 0x9f
    42da:	d801      	bhi.n	42e0 <bt_le_adv_start+0x24>
	struct net_buf *buf;
	struct bt_hci_cp_le_set_adv_param *set_param;
	int err;

	if (!valid_adv_param(param)) {
		return -EINVAL;
    42dc:	2416      	movs	r4, #22
    42de:	e026      	b.n	432e <bt_le_adv_start+0x72>
		    param->interval_min < 0x00a0) {
			return false;
		}
	}

	if (param->interval_min > param->interval_max ||
    42e0:	88aa      	ldrh	r2, [r5, #4]
    42e2:	4293      	cmp	r3, r2
    42e4:	d8fa      	bhi.n	42dc <bt_le_adv_start+0x20>
    42e6:	2b1f      	cmp	r3, #31
    42e8:	d9f8      	bls.n	42dc <bt_le_adv_start+0x20>
	    param->interval_min < 0x0020 || param->interval_max > 0x4000) {
    42ea:	2380      	movs	r3, #128	; 0x80
    42ec:	01db      	lsls	r3, r3, #7
    42ee:	429a      	cmp	r2, r3
    42f0:	d8f4      	bhi.n	42dc <bt_le_adv_start+0x20>

	if (!valid_adv_param(param)) {
		return -EINVAL;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    42f2:	4e40      	ldr	r6, [pc, #256]	; (43f4 <bt_le_adv_start+0x138>)
    42f4:	2105      	movs	r1, #5
    42f6:	0030      	movs	r0, r6
    42f8:	306c      	adds	r0, #108	; 0x6c
    42fa:	f7fe f88b 	bl	2414 <atomic_test_bit>
    42fe:	9603      	str	r6, [sp, #12]
    4300:	1e04      	subs	r4, r0, #0
    4302:	d171      	bne.n	43e8 <bt_le_adv_start+0x12c>
		return -EALREADY;
	}

	err = set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
    4304:	9a01      	ldr	r2, [sp, #4]
    4306:	0039      	movs	r1, r7
    4308:	483b      	ldr	r0, [pc, #236]	; (43f8 <bt_le_adv_start+0x13c>)
    430a:	f7fe faa1 	bl	2850 <set_ad>
	if (err) {
    430e:	2800      	cmp	r0, #0
    4310:	d168      	bne.n	43e4 <bt_le_adv_start+0x128>
	 * If sd was not provided but we enable connectable undirected
	 * advertising sd needs to be cleared from values set by previous calls.
	 * Clearing sd is done by calling set_ad() with NULL data and zero len.
	 * So following condition check is unusual but correct.
	 */
	if (sd || (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    4312:	9b02      	ldr	r3, [sp, #8]
    4314:	2b00      	cmp	r3, #0
    4316:	d10c      	bne.n	4332 <bt_le_adv_start+0x76>
    4318:	782b      	ldrb	r3, [r5, #0]
    431a:	07db      	lsls	r3, r3, #31
    431c:	d409      	bmi.n	4332 <bt_le_adv_start+0x76>
		if (err) {
			return err;
		}
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM,
    431e:	210f      	movs	r1, #15
    4320:	4836      	ldr	r0, [pc, #216]	; (43fc <bt_le_adv_start+0x140>)
    4322:	f7fe f939 	bl	2598 <bt_hci_cmd_create>
    4326:	9001      	str	r0, [sp, #4]
				sizeof(*set_param));
	if (!buf) {
    4328:	2800      	cmp	r0, #0
    432a:	d10a      	bne.n	4342 <bt_le_adv_start+0x86>
		return -ENOBUFS;
    432c:	2437      	movs	r4, #55	; 0x37
	if (!valid_adv_param(param)) {
		return -EINVAL;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
		return -EALREADY;
    432e:	4264      	negs	r4, r4
    4330:	e05c      	b.n	43ec <bt_le_adv_start+0x130>
	 * advertising sd needs to be cleared from values set by previous calls.
	 * Clearing sd is done by calling set_ad() with NULL data and zero len.
	 * So following condition check is unusual but correct.
	 */
	if (sd || (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
		err = set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
    4332:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    4334:	9902      	ldr	r1, [sp, #8]
    4336:	4832      	ldr	r0, [pc, #200]	; (4400 <bt_le_adv_start+0x144>)
    4338:	f7fe fa8a 	bl	2850 <set_ad>
		if (err) {
    433c:	2800      	cmp	r0, #0
    433e:	d0ee      	beq.n	431e <bt_le_adv_start+0x62>
    4340:	e050      	b.n	43e4 <bt_le_adv_start+0x128>
				sizeof(*set_param));
	if (!buf) {
		return -ENOBUFS;
	}

	set_param = net_buf_add(buf, sizeof(*set_param));
    4342:	9801      	ldr	r0, [sp, #4]
    4344:	210f      	movs	r1, #15
    4346:	3008      	adds	r0, #8
    4348:	f00f f93c 	bl	135c4 <net_buf_simple_add>
    434c:	0007      	movs	r7, r0

	memset(set_param, 0, sizeof(*set_param));
    434e:	220f      	movs	r2, #15
    4350:	2100      	movs	r1, #0
    4352:	f7fc fd1c 	bl	d8e <memset>
	set_param->min_interval = sys_cpu_to_le16(param->interval_min);
    4356:	78ab      	ldrb	r3, [r5, #2]
	set_param->max_interval = sys_cpu_to_le16(param->interval_max);
	set_param->channel_map  = 0x07;

	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    4358:	2201      	movs	r2, #1
	}

	set_param = net_buf_add(buf, sizeof(*set_param));

	memset(set_param, 0, sizeof(*set_param));
	set_param->min_interval = sys_cpu_to_le16(param->interval_min);
    435a:	703b      	strb	r3, [r7, #0]
    435c:	78eb      	ldrb	r3, [r5, #3]
    435e:	707b      	strb	r3, [r7, #1]
	set_param->max_interval = sys_cpu_to_le16(param->interval_max);
    4360:	792b      	ldrb	r3, [r5, #4]
    4362:	70bb      	strb	r3, [r7, #2]
    4364:	796b      	ldrb	r3, [r5, #5]
    4366:	70fb      	strb	r3, [r7, #3]
	set_param->channel_map  = 0x07;
    4368:	2307      	movs	r3, #7
    436a:	737b      	strb	r3, [r7, #13]

	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    436c:	782b      	ldrb	r3, [r5, #0]
    436e:	4213      	tst	r3, r2
    4370:	d007      	beq.n	4382 <bt_le_adv_start+0xc6>
		if (IS_ENABLED(CONFIG_BLUETOOTH_PRIVACY)) {
			err = le_set_private_addr();
    4372:	f7fe f9cd 	bl	2710 <le_set_private_addr>
    4376:	1e06      	subs	r6, r0, #0
			if (err) {
    4378:	d111      	bne.n	439e <bt_le_adv_start+0xe2>
				net_buf_unref(buf);
				return err;
			}

			set_param->own_addr_type = BT_ADDR_LE_RANDOM;
    437a:	2301      	movs	r3, #1
			}

			set_param->own_addr_type = bt_dev.id_addr.type;
		}

		set_param->type = BT_LE_ADV_IND;
    437c:	7138      	strb	r0, [r7, #4]
			if (err) {
				net_buf_unref(buf);
				return err;
			}

			set_param->own_addr_type = BT_ADDR_LE_RANDOM;
    437e:	717b      	strb	r3, [r7, #5]
    4380:	e01b      	b.n	43ba <bt_le_adv_start+0xfe>
			set_param->own_addr_type = bt_dev.id_addr.type;
		}

		set_param->type = BT_LE_ADV_IND;
	} else {
		if (param->own_addr) {
    4382:	68a8      	ldr	r0, [r5, #8]
    4384:	2800      	cmp	r0, #0
    4386:	d006      	beq.n	4396 <bt_le_adv_start+0xda>
			/* Only NRPA is allowed */
			if (!BT_ADDR_IS_NRPA(param->own_addr)) {
    4388:	223f      	movs	r2, #63	; 0x3f
    438a:	7943      	ldrb	r3, [r0, #5]
    438c:	4393      	bics	r3, r2
    438e:	d1a5      	bne.n	42dc <bt_le_adv_start+0x20>
				return -EINVAL;
			}

			err = set_random_address(param->own_addr);
    4390:	f7fe f990 	bl	26b4 <set_random_address>
    4394:	e001      	b.n	439a <bt_le_adv_start+0xde>
		} else {
			err = le_set_private_addr();
    4396:	f7fe f9bb 	bl	2710 <le_set_private_addr>
    439a:	1e06      	subs	r6, r0, #0
		}

		if (err) {
    439c:	d004      	beq.n	43a8 <bt_le_adv_start+0xec>
			net_buf_unref(buf);
    439e:	9801      	ldr	r0, [sp, #4]
    43a0:	f00f f8ee 	bl	13580 <net_buf_unref>
			return err;
    43a4:	0034      	movs	r4, r6
    43a6:	e021      	b.n	43ec <bt_le_adv_start+0x130>
		}

		set_param->own_addr_type = BT_ADDR_LE_RANDOM;
    43a8:	2301      	movs	r3, #1
    43aa:	717b      	strb	r3, [r7, #5]

		if (sd) {
    43ac:	9b02      	ldr	r3, [sp, #8]
    43ae:	2b00      	cmp	r3, #0
    43b0:	d001      	beq.n	43b6 <bt_le_adv_start+0xfa>
			set_param->type = BT_LE_ADV_SCAN_IND;
    43b2:	2302      	movs	r3, #2
    43b4:	e000      	b.n	43b8 <bt_le_adv_start+0xfc>
		} else {
			set_param->type = BT_LE_ADV_NONCONN_IND;
    43b6:	2303      	movs	r3, #3
    43b8:	713b      	strb	r3, [r7, #4]
		}
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
    43ba:	2200      	movs	r2, #0
    43bc:	9901      	ldr	r1, [sp, #4]
    43be:	480f      	ldr	r0, [pc, #60]	; (43fc <bt_le_adv_start+0x140>)
    43c0:	f7fe f910 	bl	25e4 <bt_hci_cmd_send_sync>
	if (err) {
    43c4:	2800      	cmp	r0, #0
    43c6:	d10d      	bne.n	43e4 <bt_le_adv_start+0x128>
		return err;
	}

	err = set_advertise_enable(true);
    43c8:	3001      	adds	r0, #1
    43ca:	f7fe f947 	bl	265c <set_advertise_enable>
	if (err) {
    43ce:	2800      	cmp	r0, #0
    43d0:	d108      	bne.n	43e4 <bt_le_adv_start+0x128>
		return err;
	}

	if (!(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
    43d2:	782b      	ldrb	r3, [r5, #0]
    43d4:	079b      	lsls	r3, r3, #30
    43d6:	d409      	bmi.n	43ec <bt_le_adv_start+0x130>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_or(ATOMIC_ELEM(target, bit), mask);
    43d8:	9803      	ldr	r0, [sp, #12]
    43da:	2140      	movs	r1, #64	; 0x40
    43dc:	306c      	adds	r0, #108	; 0x6c
    43de:	f00f fbc2 	bl	13b66 <atomic_or>
    43e2:	e003      	b.n	43ec <bt_le_adv_start+0x130>
    43e4:	0004      	movs	r4, r0
    43e6:	e001      	b.n	43ec <bt_le_adv_start+0x130>
	if (!valid_adv_param(param)) {
		return -EINVAL;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
		return -EALREADY;
    43e8:	2445      	movs	r4, #69	; 0x45
    43ea:	e7a0      	b.n	432e <bt_le_adv_start+0x72>
	if (!(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING);
	}

	return 0;
}
    43ec:	0020      	movs	r0, r4
    43ee:	b005      	add	sp, #20
    43f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    43f2:	46c0      	nop			; (mov r8, r8)
    43f4:	200004d0 	.word	0x200004d0
    43f8:	00002008 	.word	0x00002008
    43fc:	00002006 	.word	0x00002006
    4400:	00002009 	.word	0x00002009

00004404 <bt_buf_get_rx>:

	return bt_le_scan_update(false);
}

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, s32_t timeout)
{
    4404:	b570      	push	{r4, r5, r6, lr}
    4406:	0005      	movs	r5, r0
		buf = net_buf_alloc(&hci_rx_pool, timeout);
	} else {
		buf = net_buf_alloc(&acl_in_pool, timeout);
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
    4408:	4806      	ldr	r0, [pc, #24]	; (4424 <bt_buf_get_rx+0x20>)
    440a:	f00f f845 	bl	13498 <net_buf_alloc>
    440e:	1e04      	subs	r4, r0, #0
#endif

	if (buf) {
    4410:	d006      	beq.n	4420 <bt_buf_get_rx+0x1c>
		net_buf_reserve(buf, CONFIG_BLUETOOTH_HCI_RESERVE);
    4412:	2100      	movs	r1, #0
    4414:	f00f f8a0 	bl	13558 <net_buf_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	*(u8_t *)net_buf_user_data(buf) = type;
    4418:	0020      	movs	r0, r4
    441a:	f7fd ffdb 	bl	23d4 <net_buf_user_data>
    441e:	7005      	strb	r5, [r0, #0]
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    4420:	0020      	movs	r0, r4
    4422:	bd70      	pop	{r4, r5, r6, pc}
    4424:	20000a18 	.word	0x20000a18

00004428 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(s32_t timeout)
{
    4428:	b510      	push	{r4, lr}
    442a:	0001      	movs	r1, r0
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
    442c:	f3ef 8210 	mrs	r2, PRIMASK
    4430:	b672      	cpsid	i
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
	bt_dev.sent_cmd = NULL;
    4432:	2000      	movs	r0, #0
{
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
    4434:	4b0c      	ldr	r3, [pc, #48]	; (4468 <bt_buf_get_cmd_complete+0x40>)
    4436:	33ac      	adds	r3, #172	; 0xac
    4438:	681c      	ldr	r4, [r3, #0]
	bt_dev.sent_cmd = NULL;
    443a:	6018      	str	r0, [r3, #0]
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    443c:	4282      	cmp	r2, r0
    443e:	d100      	bne.n	4442 <bt_buf_get_cmd_complete+0x1a>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    4440:	b662      	cpsie	i
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
    4442:	2c00      	cmp	r4, #0
    4444:	d00b      	beq.n	445e <bt_buf_get_cmd_complete+0x36>
    4446:	0020      	movs	r0, r4
    4448:	f7fd ffc4 	bl	23d4 <net_buf_user_data>
    444c:	2301      	movs	r3, #1
		bt_buf_set_type(buf, BT_BUF_EVT);
		buf->len = 0;
    444e:	2100      	movs	r1, #0
    4450:	7003      	strb	r3, [r0, #0]
		net_buf_reserve(buf, CONFIG_BLUETOOTH_HCI_RESERVE);
    4452:	0020      	movs	r0, r4

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
		bt_buf_set_type(buf, BT_BUF_EVT);
		buf->len = 0;
    4454:	81a1      	strh	r1, [r4, #12]
		net_buf_reserve(buf, CONFIG_BLUETOOTH_HCI_RESERVE);
    4456:	f00f f87f 	bl	13558 <net_buf_reserve>

		return buf;
    445a:	0020      	movs	r0, r4
    445c:	e002      	b.n	4464 <bt_buf_get_cmd_complete+0x3c>
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    445e:	2001      	movs	r0, #1
    4460:	f7ff ffd0 	bl	4404 <bt_buf_get_rx>
}
    4464:	bd10      	pop	{r4, pc}
    4466:	46c0      	nop			; (mov r8, r8)
    4468:	200004d0 	.word	0x200004d0

0000446c <bt_pub_key_gen>:
{
	return cmd(buf)->opcode;
}

int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
    446c:	b5f0      	push	{r4, r5, r6, r7, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!(bt_dev.supported_commands[34] & 0x02) ||
    446e:	4d28      	ldr	r5, [pc, #160]	; (4510 <bt_pub_key_gen+0xa4>)
{
	return cmd(buf)->opcode;
}

int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
    4470:	b085      	sub	sp, #20
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!(bt_dev.supported_commands[34] & 0x02) ||
    4472:	002b      	movs	r3, r5
    4474:	3340      	adds	r3, #64	; 0x40
    4476:	781a      	ldrb	r2, [r3, #0]
    4478:	2306      	movs	r3, #6
{
	return cmd(buf)->opcode;
}

int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
    447a:	0007      	movs	r7, r0
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!(bt_dev.supported_commands[34] & 0x02) ||
    447c:	4013      	ands	r3, r2
    447e:	2b06      	cmp	r3, #6
    4480:	d00c      	beq.n	449c <bt_pub_key_gen+0x30>
	    !(bt_dev.supported_commands[34] & 0x04)) {
		BT_WARN("ECC HCI commands not available");
    4482:	4b24      	ldr	r3, [pc, #144]	; (4514 <bt_pub_key_gen+0xa8>)
    4484:	4a24      	ldr	r2, [pc, #144]	; (4518 <bt_pub_key_gen+0xac>)
    4486:	9301      	str	r3, [sp, #4]
    4488:	4b24      	ldr	r3, [pc, #144]	; (451c <bt_pub_key_gen+0xb0>)
    448a:	4925      	ldr	r1, [pc, #148]	; (4520 <bt_pub_key_gen+0xb4>)
    448c:	9300      	str	r3, [sp, #0]
    448e:	4825      	ldr	r0, [pc, #148]	; (4524 <bt_pub_key_gen+0xb8>)
    4490:	4b25      	ldr	r3, [pc, #148]	; (4528 <bt_pub_key_gen+0xbc>)
    4492:	f7fd fa75 	bl	1980 <printk>
		return -ENOTSUP;
    4496:	2023      	movs	r0, #35	; 0x23
    4498:	4240      	negs	r0, r0
    449a:	e037      	b.n	450c <bt_pub_key_gen+0xa0>
	}

	new_cb->_next = pub_key_cb;
    449c:	4e23      	ldr	r6, [pc, #140]	; (452c <bt_pub_key_gen+0xc0>)
static inline int atomic_test_and_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
	atomic_val_t old;

	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    449e:	356c      	adds	r5, #108	; 0x6c
    44a0:	6833      	ldr	r3, [r6, #0]
    44a2:	2110      	movs	r1, #16
    44a4:	6043      	str	r3, [r0, #4]
	pub_key_cb = new_cb;
    44a6:	6030      	str	r0, [r6, #0]
    44a8:	0028      	movs	r0, r5
    44aa:	f00f fb5c 	bl	13b66 <atomic_or>

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    44ae:	2310      	movs	r3, #16
    44b0:	4018      	ands	r0, r3
    44b2:	1e04      	subs	r4, r0, #0
    44b4:	d001      	beq.n	44ba <bt_pub_key_gen+0x4e>
		return 0;
    44b6:	2000      	movs	r0, #0
    44b8:	e028      	b.n	450c <bt_pub_key_gen+0xa0>
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    44ba:	2109      	movs	r1, #9
    44bc:	0028      	movs	r0, r5
    44be:	4249      	negs	r1, r1
    44c0:	f00f fb5c 	bl	13b7c <atomic_and>
	}

	atomic_clear_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY);

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
    44c4:	0022      	movs	r2, r4
    44c6:	0021      	movs	r1, r4
    44c8:	4819      	ldr	r0, [pc, #100]	; (4530 <bt_pub_key_gen+0xc4>)
    44ca:	f7fe f88b 	bl	25e4 <bt_hci_cmd_send_sync>
    44ce:	9003      	str	r0, [sp, #12]
	if (err) {
    44d0:	2800      	cmp	r0, #0
    44d2:	d011      	beq.n	44f8 <bt_pub_key_gen+0x8c>
		BT_ERR("Sending LE P256 Public Key command failed");
    44d4:	4b0f      	ldr	r3, [pc, #60]	; (4514 <bt_pub_key_gen+0xa8>)
    44d6:	4a17      	ldr	r2, [pc, #92]	; (4534 <bt_pub_key_gen+0xc8>)
    44d8:	9301      	str	r3, [sp, #4]
    44da:	4b17      	ldr	r3, [pc, #92]	; (4538 <bt_pub_key_gen+0xcc>)
    44dc:	4910      	ldr	r1, [pc, #64]	; (4520 <bt_pub_key_gen+0xb4>)
    44de:	9300      	str	r3, [sp, #0]
    44e0:	4816      	ldr	r0, [pc, #88]	; (453c <bt_pub_key_gen+0xd0>)
    44e2:	4b11      	ldr	r3, [pc, #68]	; (4528 <bt_pub_key_gen+0xbc>)
    44e4:	f7fd fa4c 	bl	1980 <printk>
    44e8:	2111      	movs	r1, #17
    44ea:	0028      	movs	r0, r5
    44ec:	4249      	negs	r1, r1
    44ee:	f00f fb45 	bl	13b7c <atomic_and>
		atomic_clear_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY);
		pub_key_cb = NULL;
    44f2:	6034      	str	r4, [r6, #0]
		return err;
    44f4:	9803      	ldr	r0, [sp, #12]
    44f6:	e009      	b.n	450c <bt_pub_key_gen+0xa0>
	}

	for (cb = pub_key_cb; cb; cb = cb->_next) {
    44f8:	6834      	ldr	r4, [r6, #0]
    44fa:	2c00      	cmp	r4, #0
    44fc:	d0db      	beq.n	44b6 <bt_pub_key_gen+0x4a>
		if (cb != new_cb) {
    44fe:	42bc      	cmp	r4, r7
    4500:	d002      	beq.n	4508 <bt_pub_key_gen+0x9c>
			cb->func(NULL);
    4502:	2000      	movs	r0, #0
    4504:	6823      	ldr	r3, [r4, #0]
    4506:	4798      	blx	r3
		atomic_clear_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY);
		pub_key_cb = NULL;
		return err;
	}

	for (cb = pub_key_cb; cb; cb = cb->_next) {
    4508:	6864      	ldr	r4, [r4, #4]
    450a:	e7f6      	b.n	44fa <bt_pub_key_gen+0x8e>
			cb->func(NULL);
		}
	}

	return 0;
}
    450c:	b005      	add	sp, #20
    450e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4510:	200004d0 	.word	0x200004d0
    4514:	000154c4 	.word	0x000154c4
    4518:	000154d1 	.word	0x000154d1
    451c:	0001550f 	.word	0x0001550f
    4520:	0001548b 	.word	0x0001548b
    4524:	00015bd7 	.word	0x00015bd7
    4528:	00017a70 	.word	0x00017a70
    452c:	20000d98 	.word	0x20000d98
    4530:	00002025 	.word	0x00002025
    4534:	00015484 	.word	0x00015484
    4538:	000154c9 	.word	0x000154c9
    453c:	00015c06 	.word	0x00015c06

00004540 <bt_dh_key_gen>:

	return NULL;
}

int bt_dh_key_gen(const u8_t remote_pk[64], bt_dh_key_cb_t cb)
{
    4540:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_cp_le_generate_dhkey *cp;
	struct net_buf *buf;
	int err;

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    4542:	4d1b      	ldr	r5, [pc, #108]	; (45b0 <bt_dh_key_gen+0x70>)

	return NULL;
}

int bt_dh_key_gen(const u8_t remote_pk[64], bt_dh_key_cb_t cb)
{
    4544:	9001      	str	r0, [sp, #4]
	struct bt_hci_cp_le_generate_dhkey *cp;
	struct net_buf *buf;
	int err;

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    4546:	682b      	ldr	r3, [r5, #0]

	return NULL;
}

int bt_dh_key_gen(const u8_t remote_pk[64], bt_dh_key_cb_t cb)
{
    4548:	000f      	movs	r7, r1
	struct bt_hci_cp_le_generate_dhkey *cp;
	struct net_buf *buf;
	int err;

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    454a:	2b00      	cmp	r3, #0
    454c:	d001      	beq.n	4552 <bt_dh_key_gen+0x12>
		return -EBUSY;
    454e:	2410      	movs	r4, #16
    4550:	e02a      	b.n	45a8 <bt_dh_key_gen+0x68>
{
	struct bt_hci_cp_le_generate_dhkey *cp;
	struct net_buf *buf;
	int err;

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    4552:	4e18      	ldr	r6, [pc, #96]	; (45b4 <bt_dh_key_gen+0x74>)
    4554:	2104      	movs	r1, #4
    4556:	366c      	adds	r6, #108	; 0x6c
    4558:	0030      	movs	r0, r6
    455a:	f7fd ff5b 	bl	2414 <atomic_test_bit>
    455e:	1e04      	subs	r4, r0, #0
    4560:	d1f5      	bne.n	454e <bt_dh_key_gen+0xe>
		return -EBUSY;
	}

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
    4562:	2103      	movs	r1, #3
    4564:	0030      	movs	r0, r6
    4566:	f7fd ff55 	bl	2414 <atomic_test_bit>
    456a:	2800      	cmp	r0, #0
    456c:	d01b      	beq.n	45a6 <bt_dh_key_gen+0x66>
		return -EADDRNOTAVAIL;
	}

	dh_key_cb = cb;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
    456e:	2140      	movs	r1, #64	; 0x40
    4570:	4811      	ldr	r0, [pc, #68]	; (45b8 <bt_dh_key_gen+0x78>)

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
		return -EADDRNOTAVAIL;
	}

	dh_key_cb = cb;
    4572:	602f      	str	r7, [r5, #0]

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
    4574:	f7fe f810 	bl	2598 <bt_hci_cmd_create>
    4578:	1e06      	subs	r6, r0, #0
	if (!buf) {
    457a:	d102      	bne.n	4582 <bt_dh_key_gen+0x42>
		dh_key_cb = NULL;
    457c:	6028      	str	r0, [r5, #0]
		return -ENOBUFS;
    457e:	3c37      	subs	r4, #55	; 0x37
    4580:	e013      	b.n	45aa <bt_dh_key_gen+0x6a>
	}

	cp = net_buf_add(buf, sizeof(*cp));
    4582:	2140      	movs	r1, #64	; 0x40
    4584:	3008      	adds	r0, #8
    4586:	f00f f81d 	bl	135c4 <net_buf_simple_add>
	memcpy(cp->key, remote_pk, sizeof(cp->key));
    458a:	2240      	movs	r2, #64	; 0x40
    458c:	9901      	ldr	r1, [sp, #4]
    458e:	f7fc fbd4 	bl	d3a <memcpy>

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
    4592:	0022      	movs	r2, r4
    4594:	0031      	movs	r1, r6
    4596:	4808      	ldr	r0, [pc, #32]	; (45b8 <bt_dh_key_gen+0x78>)
    4598:	f7fe f824 	bl	25e4 <bt_hci_cmd_send_sync>
	if (err) {
    459c:	2800      	cmp	r0, #0
    459e:	d004      	beq.n	45aa <bt_dh_key_gen+0x6a>
		dh_key_cb = NULL;
    45a0:	602c      	str	r4, [r5, #0]
		return err;
    45a2:	0004      	movs	r4, r0
    45a4:	e001      	b.n	45aa <bt_dh_key_gen+0x6a>
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
		return -EBUSY;
	}

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
		return -EADDRNOTAVAIL;
    45a6:	2431      	movs	r4, #49	; 0x31
    45a8:	4264      	negs	r4, r4
		dh_key_cb = NULL;
		return err;
	}

	return 0;
}
    45aa:	0020      	movs	r0, r4
    45ac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    45ae:	46c0      	nop			; (mov r8, r8)
    45b0:	20000da4 	.word	0x20000da4
    45b4:	200004d0 	.word	0x200004d0
    45b8:	00002026 	.word	0x00002026

000045bc <notify_connected>:
		return "(unknown)";
	}
}

static void notify_connected(struct bt_conn *conn)
{
    45bc:	b570      	push	{r4, r5, r6, lr}
    45be:	0005      	movs	r5, r0
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    45c0:	4b07      	ldr	r3, [pc, #28]	; (45e0 <notify_connected+0x24>)
    45c2:	681c      	ldr	r4, [r3, #0]
    45c4:	2c00      	cmp	r4, #0
    45c6:	d009      	beq.n	45dc <notify_connected+0x20>
		if (cb->connected) {
    45c8:	6823      	ldr	r3, [r4, #0]
    45ca:	2b00      	cmp	r3, #0
    45cc:	d004      	beq.n	45d8 <notify_connected+0x1c>
			cb->connected(conn, conn->err);
    45ce:	002a      	movs	r2, r5
    45d0:	3250      	adds	r2, #80	; 0x50
    45d2:	7811      	ldrb	r1, [r2, #0]
    45d4:	0028      	movs	r0, r5
    45d6:	4798      	blx	r3

static void notify_connected(struct bt_conn *conn)
{
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    45d8:	69a4      	ldr	r4, [r4, #24]
    45da:	e7f3      	b.n	45c4 <notify_connected+0x8>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}
}
    45dc:	bd70      	pop	{r4, r5, r6, pc}
    45de:	46c0      	nop			; (mov r8, r8)
    45e0:	20000e2c 	.word	0x20000e2c

000045e4 <bt_conn_reset_rx_state>:
	cb->_next = callback_list;
	callback_list = cb;
}

static void bt_conn_reset_rx_state(struct bt_conn *conn)
{
    45e4:	b510      	push	{r4, lr}
	if (!conn->rx_len) {
    45e6:	8983      	ldrh	r3, [r0, #12]
	cb->_next = callback_list;
	callback_list = cb;
}

static void bt_conn_reset_rx_state(struct bt_conn *conn)
{
    45e8:	0004      	movs	r4, r0
	if (!conn->rx_len) {
    45ea:	2b00      	cmp	r3, #0
    45ec:	d005      	beq.n	45fa <bt_conn_reset_rx_state+0x16>
		return;
	}

	net_buf_unref(conn->rx);
    45ee:	6900      	ldr	r0, [r0, #16]
    45f0:	f00e ffc6 	bl	13580 <net_buf_unref>
	conn->rx = NULL;
    45f4:	2300      	movs	r3, #0
    45f6:	6123      	str	r3, [r4, #16]
	conn->rx_len = 0;
    45f8:	81a3      	strh	r3, [r4, #12]
}
    45fa:	bd10      	pop	{r4, pc}

000045fc <conn_cleanup>:
}

static struct k_poll_signal conn_change = K_POLL_SIGNAL_INITIALIZER();

static void conn_cleanup(struct bt_conn *conn)
{
    45fc:	b510      	push	{r4, lr}
    45fe:	0004      	movs	r4, r0
	struct net_buf *buf;

	/* Give back any allocated buffers */
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
    4600:	0020      	movs	r0, r4
    4602:	2100      	movs	r1, #0
    4604:	3030      	adds	r0, #48	; 0x30
    4606:	f00e ff8f 	bl	13528 <net_buf_get>
    460a:	2800      	cmp	r0, #0
    460c:	d002      	beq.n	4614 <conn_cleanup+0x18>
		net_buf_unref(buf);
    460e:	f00e ffb7 	bl	13580 <net_buf_unref>
    4612:	e7f5      	b.n	4600 <conn_cleanup+0x4>
	}

	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");

	bt_conn_reset_rx_state(conn);
    4614:	0020      	movs	r0, r4
    4616:	f7ff ffe5 	bl	45e4 <bt_conn_reset_rx_state>
	return conn;
}

void bt_conn_unref(struct bt_conn *conn)
{
	atomic_dec(&conn->ref);
    461a:	0020      	movs	r0, r4
    461c:	304c      	adds	r0, #76	; 0x4c
    461e:	f00f fa8b 	bl	13b38 <atomic_dec>

	/* Release the reference we took for the very first
	 * state transition.
	 */
	bt_conn_unref(conn);
}
    4622:	bd10      	pop	{r4, pc}

00004624 <bt_conn_get_pkts>:
		return &bt_dev.br.pkts;
	}
#endif /* CONFIG_BLUETOOTH_BREDR */

	return &bt_dev.le.pkts;
}
    4624:	4800      	ldr	r0, [pc, #0]	; (4628 <bt_conn_get_pkts+0x4>)
    4626:	4770      	bx	lr
    4628:	20000554 	.word	0x20000554

0000462c <notify_le_param_updated>:
		}
	}
}

void notify_le_param_updated(struct bt_conn *conn)
{
    462c:	b570      	push	{r4, r5, r6, lr}
    462e:	0005      	movs	r5, r0
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    4630:	4b0a      	ldr	r3, [pc, #40]	; (465c <notify_le_param_updated+0x30>)
    4632:	681c      	ldr	r4, [r3, #0]
    4634:	2c00      	cmp	r4, #0
    4636:	d00f      	beq.n	4658 <notify_le_param_updated+0x2c>
		if (cb->le_param_updated) {
    4638:	68e6      	ldr	r6, [r4, #12]
    463a:	2e00      	cmp	r6, #0
    463c:	d00a      	beq.n	4654 <notify_le_param_updated+0x28>
			cb->le_param_updated(conn, conn->le.interval,
    463e:	002b      	movs	r3, r5
    4640:	002a      	movs	r2, r5
    4642:	0029      	movs	r1, r5
    4644:	3372      	adds	r3, #114	; 0x72
    4646:	3270      	adds	r2, #112	; 0x70
    4648:	316a      	adds	r1, #106	; 0x6a
    464a:	881b      	ldrh	r3, [r3, #0]
    464c:	8812      	ldrh	r2, [r2, #0]
    464e:	8809      	ldrh	r1, [r1, #0]
    4650:	0028      	movs	r0, r5
    4652:	47b0      	blx	r6

void notify_le_param_updated(struct bt_conn *conn)
{
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    4654:	69a4      	ldr	r4, [r4, #24]
    4656:	e7ed      	b.n	4634 <notify_le_param_updated+0x8>
			cb->le_param_updated(conn, conn->le.interval,
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
    4658:	bd70      	pop	{r4, r5, r6, pc}
    465a:	46c0      	nop			; (mov r8, r8)
    465c:	20000e2c 	.word	0x20000e2c

00004660 <le_param_req>:

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
    4660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4662:	0007      	movs	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
    4664:	0008      	movs	r0, r1
		}
	}
}

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
    4666:	000e      	movs	r6, r1
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
    4668:	f7fe f936 	bl	28d8 <bt_le_conn_params_valid>
    466c:	1e05      	subs	r5, r0, #0
    466e:	d101      	bne.n	4674 <le_param_req+0x14>
		return false;
    4670:	2500      	movs	r5, #0
    4672:	e013      	b.n	469c <le_param_req+0x3c>
	}

	for (cb = callback_list; cb; cb = cb->_next) {
    4674:	4b0a      	ldr	r3, [pc, #40]	; (46a0 <le_param_req+0x40>)
    4676:	681c      	ldr	r4, [r3, #0]
    4678:	2c00      	cmp	r4, #0
    467a:	d00f      	beq.n	469c <le_param_req+0x3c>
		if (!cb->le_param_req) {
    467c:	68a3      	ldr	r3, [r4, #8]
    467e:	2b00      	cmp	r3, #0
    4680:	d101      	bne.n	4686 <le_param_req+0x26>

	if (!bt_le_conn_params_valid(param)) {
		return false;
	}

	for (cb = callback_list; cb; cb = cb->_next) {
    4682:	69a4      	ldr	r4, [r4, #24]
    4684:	e7f8      	b.n	4678 <le_param_req+0x18>
		if (!cb->le_param_req) {
			continue;
		}

		if (!cb->le_param_req(conn, param)) {
    4686:	0031      	movs	r1, r6
    4688:	0038      	movs	r0, r7
    468a:	4798      	blx	r3
    468c:	2800      	cmp	r0, #0
    468e:	d0ef      	beq.n	4670 <le_param_req+0x10>
		}

		/* The callback may modify the parameters so we need to
		 * double-check that it returned valid parameters.
		 */
		if (!bt_le_conn_params_valid(param)) {
    4690:	0030      	movs	r0, r6
    4692:	f7fe f921 	bl	28d8 <bt_le_conn_params_valid>
    4696:	2800      	cmp	r0, #0
    4698:	d1f3      	bne.n	4682 <le_param_req+0x22>
    469a:	e7e9      	b.n	4670 <le_param_req+0x10>
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
    469c:	0028      	movs	r0, r5
    469e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    46a0:	20000e2c 	.word	0x20000e2c

000046a4 <bt_conn_identity_resolved>:
}
#endif /* CONFIG_BLUETOOTH_BREDR */

#if defined(CONFIG_BLUETOOTH_SMP)
void bt_conn_identity_resolved(struct bt_conn *conn)
{
    46a4:	b570      	push	{r4, r5, r6, lr}
	struct bt_conn_cb *cb;

	if (conn->role == BT_HCI_ROLE_MASTER) {
		rpa = &conn->le.resp_addr;
	} else {
		rpa = &conn->le.init_addr;
    46a6:	0006      	movs	r6, r0
void bt_conn_identity_resolved(struct bt_conn *conn)
{
	const bt_addr_le_t *rpa;
	struct bt_conn_cb *cb;

	if (conn->role == BT_HCI_ROLE_MASTER) {
    46a8:	78c3      	ldrb	r3, [r0, #3]
}
#endif /* CONFIG_BLUETOOTH_BREDR */

#if defined(CONFIG_BLUETOOTH_SMP)
void bt_conn_identity_resolved(struct bt_conn *conn)
{
    46aa:	0004      	movs	r4, r0
	struct bt_conn_cb *cb;

	if (conn->role == BT_HCI_ROLE_MASTER) {
		rpa = &conn->le.resp_addr;
	} else {
		rpa = &conn->le.init_addr;
    46ac:	365b      	adds	r6, #91	; 0x5b
void bt_conn_identity_resolved(struct bt_conn *conn)
{
	const bt_addr_le_t *rpa;
	struct bt_conn_cb *cb;

	if (conn->role == BT_HCI_ROLE_MASTER) {
    46ae:	2b00      	cmp	r3, #0
    46b0:	d100      	bne.n	46b4 <bt_conn_identity_resolved+0x10>
		rpa = &conn->le.resp_addr;
    46b2:	3607      	adds	r6, #7
	} else {
		rpa = &conn->le.init_addr;
	}

	for (cb = callback_list; cb; cb = cb->_next) {
    46b4:	4b07      	ldr	r3, [pc, #28]	; (46d4 <bt_conn_identity_resolved+0x30>)
    46b6:	681d      	ldr	r5, [r3, #0]
    46b8:	2d00      	cmp	r5, #0
    46ba:	d009      	beq.n	46d0 <bt_conn_identity_resolved+0x2c>
		if (cb->identity_resolved) {
    46bc:	692b      	ldr	r3, [r5, #16]
    46be:	2b00      	cmp	r3, #0
    46c0:	d004      	beq.n	46cc <bt_conn_identity_resolved+0x28>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
    46c2:	0022      	movs	r2, r4
    46c4:	0031      	movs	r1, r6
    46c6:	3254      	adds	r2, #84	; 0x54
    46c8:	0020      	movs	r0, r4
    46ca:	4798      	blx	r3
		rpa = &conn->le.resp_addr;
	} else {
		rpa = &conn->le.init_addr;
	}

	for (cb = callback_list; cb; cb = cb->_next) {
    46cc:	69ad      	ldr	r5, [r5, #24]
    46ce:	e7f3      	b.n	46b8 <bt_conn_identity_resolved+0x14>
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
		}
	}
}
    46d0:	bd70      	pop	{r4, r5, r6, pc}
    46d2:	46c0      	nop			; (mov r8, r8)
    46d4:	20000e2c 	.word	0x20000e2c

000046d8 <bt_conn_security_changed>:

	return 0;
}

void bt_conn_security_changed(struct bt_conn *conn)
{
    46d8:	b570      	push	{r4, r5, r6, lr}
    46da:	0005      	movs	r5, r0
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    46dc:	4b06      	ldr	r3, [pc, #24]	; (46f8 <bt_conn_security_changed+0x20>)
    46de:	681c      	ldr	r4, [r3, #0]
    46e0:	2c00      	cmp	r4, #0
    46e2:	d007      	beq.n	46f4 <bt_conn_security_changed+0x1c>
		if (cb->security_changed) {
    46e4:	6963      	ldr	r3, [r4, #20]
    46e6:	2b00      	cmp	r3, #0
    46e8:	d002      	beq.n	46f0 <bt_conn_security_changed+0x18>
			cb->security_changed(conn, conn->sec_level);
    46ea:	7a29      	ldrb	r1, [r5, #8]
    46ec:	0028      	movs	r0, r5
    46ee:	4798      	blx	r3

void bt_conn_security_changed(struct bt_conn *conn)
{
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    46f0:	69a4      	ldr	r4, [r4, #24]
    46f2:	e7f5      	b.n	46e0 <bt_conn_security_changed+0x8>
		if (cb->security_changed) {
			cb->security_changed(conn, conn->sec_level);
		}
	}
}
    46f4:	bd70      	pop	{r4, r5, r6, pc}
    46f6:	46c0      	nop			; (mov r8, r8)
    46f8:	20000e2c 	.word	0x20000e2c

000046fc <bt_conn_security>:

int bt_conn_security(struct bt_conn *conn, bt_security_t sec)
{
	int err;

	if (conn->state != BT_CONN_CONNECTED) {
    46fc:	0003      	movs	r3, r0
		return -EINVAL;
	}
}

int bt_conn_security(struct bt_conn *conn, bt_security_t sec)
{
    46fe:	b510      	push	{r4, lr}
	int err;

	if (conn->state != BT_CONN_CONNECTED) {
    4700:	3351      	adds	r3, #81	; 0x51
    4702:	781b      	ldrb	r3, [r3, #0]
		return -EINVAL;
	}
}

int bt_conn_security(struct bt_conn *conn, bt_security_t sec)
{
    4704:	0004      	movs	r4, r0
	int err;

	if (conn->state != BT_CONN_CONNECTED) {
    4706:	2b03      	cmp	r3, #3
    4708:	d115      	bne.n	4736 <bt_conn_security+0x3a>
	    sec < BT_SECURITY_FIPS) {
		return -EOPNOTSUPP;
	}

	/* nothing to do */
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
    470a:	7a03      	ldrb	r3, [r0, #8]
    470c:	428b      	cmp	r3, r1
    470e:	d301      	bcc.n	4714 <bt_conn_security+0x18>
		return 0;
    4710:	2000      	movs	r0, #0
    4712:	e012      	b.n	473a <bt_conn_security+0x3e>
	    sec < BT_SECURITY_FIPS) {
		return -EOPNOTSUPP;
	}

	/* nothing to do */
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
    4714:	7a43      	ldrb	r3, [r0, #9]
    4716:	428b      	cmp	r3, r1
    4718:	d2fa      	bcs.n	4710 <bt_conn_security+0x14>

		return conn_auth(conn);
	}
#endif /* CONFIG_BLUETOOTH_BREDR */

	switch (conn->role) {
    471a:	78c3      	ldrb	r3, [r0, #3]
	/* nothing to do */
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
		return 0;
	}

	conn->required_sec_level = sec;
    471c:	7241      	strb	r1, [r0, #9]

		return conn_auth(conn);
	}
#endif /* CONFIG_BLUETOOTH_BREDR */

	switch (conn->role) {
    471e:	2b01      	cmp	r3, #1
    4720:	d104      	bne.n	472c <bt_conn_security+0x30>
						   conn->le.keys->enc_size);
	}
#endif /* CONFIG_BLUETOOTH_CENTRAL && CONFIG_BLUETOOTH_SMP */
#if defined(CONFIG_BLUETOOTH_PERIPHERAL) && defined(CONFIG_BLUETOOTH_SMP)
	case BT_HCI_ROLE_SLAVE:
		return bt_smp_send_security_req(conn);
    4722:	f004 fb55 	bl	8dd0 <bt_smp_send_security_req>
	conn->required_sec_level = sec;

	err = start_security(conn);

	/* reset required security level in case of error */
	if (err) {
    4726:	2800      	cmp	r0, #0
    4728:	d102      	bne.n	4730 <bt_conn_security+0x34>
    472a:	e7f1      	b.n	4710 <bt_conn_security+0x14>
#if defined(CONFIG_BLUETOOTH_PERIPHERAL) && defined(CONFIG_BLUETOOTH_SMP)
	case BT_HCI_ROLE_SLAVE:
		return bt_smp_send_security_req(conn);
#endif /* CONFIG_BLUETOOTH_PERIPHERAL && CONFIG_BLUETOOTH_SMP */
	default:
		return -EINVAL;
    472c:	2016      	movs	r0, #22
    472e:	4240      	negs	r0, r0

	err = start_security(conn);

	/* reset required security level in case of error */
	if (err) {
		conn->required_sec_level = conn->sec_level;
    4730:	7a23      	ldrb	r3, [r4, #8]
    4732:	7263      	strb	r3, [r4, #9]
    4734:	e001      	b.n	473a <bt_conn_security+0x3e>
int bt_conn_security(struct bt_conn *conn, bt_security_t sec)
{
	int err;

	if (conn->state != BT_CONN_CONNECTED) {
		return -ENOTCONN;
    4736:	2039      	movs	r0, #57	; 0x39
    4738:	4240      	negs	r0, r0
	if (err) {
		conn->required_sec_level = conn->sec_level;
	}

	return err;
}
    473a:	bd10      	pop	{r4, pc}

0000473c <bt_conn_cb_register>:
#endif /* CONFIG_BLUETOOTH_SMP */

void bt_conn_cb_register(struct bt_conn_cb *cb)
{
	cb->_next = callback_list;
    473c:	4b02      	ldr	r3, [pc, #8]	; (4748 <bt_conn_cb_register+0xc>)
    473e:	681a      	ldr	r2, [r3, #0]
	callback_list = cb;
    4740:	6018      	str	r0, [r3, #0]
}
#endif /* CONFIG_BLUETOOTH_SMP */

void bt_conn_cb_register(struct bt_conn_cb *cb)
{
	cb->_next = callback_list;
    4742:	6182      	str	r2, [r0, #24]
	callback_list = cb;
}
    4744:	4770      	bx	lr
    4746:	46c0      	nop			; (mov r8, r8)
    4748:	20000e2c 	.word	0x20000e2c

0000474c <bt_conn_recv>:
	conn->rx = NULL;
	conn->rx_len = 0;
}

void bt_conn_recv(struct bt_conn *conn, struct net_buf *buf, u8_t flags)
{
    474c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    474e:	0004      	movs	r4, r0
    4750:	000d      	movs	r5, r1
	u16_t len;

	BT_DBG("handle %u len %u flags %02x", conn->handle, buf->len, flags);

	/* Check packet boundary flags */
	switch (flags) {
    4752:	2a01      	cmp	r2, #1
    4754:	d01f      	beq.n	4796 <bt_conn_recv+0x4a>
    4756:	2a02      	cmp	r2, #2
    4758:	d15a      	bne.n	4810 <bt_conn_recv+0xc4>
	case BT_ACL_START:
		hdr = (void *)buf->data;
		len = sys_le16_to_cpu(hdr->len);
    475a:	688a      	ldr	r2, [r1, #8]
    475c:	7856      	ldrb	r6, [r2, #1]
    475e:	7813      	ldrb	r3, [r2, #0]
    4760:	0236      	lsls	r6, r6, #8
    4762:	431e      	orrs	r6, r3

		BT_DBG("First, len %u final %u", buf->len, len);

		if (conn->rx_len) {
    4764:	8983      	ldrh	r3, [r0, #12]
    4766:	2b00      	cmp	r3, #0
    4768:	d00c      	beq.n	4784 <bt_conn_recv+0x38>
			BT_ERR("Unexpected first L2CAP frame");
    476a:	4b40      	ldr	r3, [pc, #256]	; (486c <bt_conn_recv+0x120>)
    476c:	4a40      	ldr	r2, [pc, #256]	; (4870 <bt_conn_recv+0x124>)
    476e:	9301      	str	r3, [sp, #4]
    4770:	4b40      	ldr	r3, [pc, #256]	; (4874 <bt_conn_recv+0x128>)
    4772:	4941      	ldr	r1, [pc, #260]	; (4878 <bt_conn_recv+0x12c>)
    4774:	9300      	str	r3, [sp, #0]
    4776:	4841      	ldr	r0, [pc, #260]	; (487c <bt_conn_recv+0x130>)
    4778:	4b41      	ldr	r3, [pc, #260]	; (4880 <bt_conn_recv+0x134>)
    477a:	f7fd f901 	bl	1980 <printk>
			bt_conn_reset_rx_state(conn);
    477e:	0020      	movs	r0, r4
    4780:	f7ff ff30 	bl	45e4 <bt_conn_reset_rx_state>
		}

		conn->rx_len = (sizeof(*hdr) + len) - buf->len;
    4784:	89ab      	ldrh	r3, [r5, #12]
    4786:	3604      	adds	r6, #4
    4788:	1af3      	subs	r3, r6, r3
    478a:	b29b      	uxth	r3, r3
    478c:	81a3      	strh	r3, [r4, #12]
		BT_DBG("rx_len %u", conn->rx_len);
		if (conn->rx_len) {
    478e:	2b00      	cmp	r3, #0
    4790:	d04d      	beq.n	482e <bt_conn_recv+0xe2>
			conn->rx = buf;
    4792:	6125      	str	r5, [r4, #16]
			return;
    4794:	e068      	b.n	4868 <bt_conn_recv+0x11c>
		}

		break;
	case BT_ACL_CONT:
		if (!conn->rx_len) {
    4796:	8983      	ldrh	r3, [r0, #12]
    4798:	2b00      	cmp	r3, #0
    479a:	d108      	bne.n	47ae <bt_conn_recv+0x62>
			BT_ERR("Unexpected L2CAP continuation");
    479c:	4b33      	ldr	r3, [pc, #204]	; (486c <bt_conn_recv+0x120>)
    479e:	4a34      	ldr	r2, [pc, #208]	; (4870 <bt_conn_recv+0x124>)
    47a0:	9301      	str	r3, [sp, #4]
    47a2:	4b34      	ldr	r3, [pc, #208]	; (4874 <bt_conn_recv+0x128>)
    47a4:	4934      	ldr	r1, [pc, #208]	; (4878 <bt_conn_recv+0x12c>)
    47a6:	9300      	str	r3, [sp, #0]
    47a8:	4836      	ldr	r0, [pc, #216]	; (4884 <bt_conn_recv+0x138>)
    47aa:	4b35      	ldr	r3, [pc, #212]	; (4880 <bt_conn_recv+0x134>)
    47ac:	e00a      	b.n	47c4 <bt_conn_recv+0x78>
			bt_conn_reset_rx_state(conn);
			net_buf_unref(buf);
			return;
		}

		if (buf->len > conn->rx_len) {
    47ae:	898e      	ldrh	r6, [r1, #12]
    47b0:	42b3      	cmp	r3, r6
    47b2:	d20a      	bcs.n	47ca <bt_conn_recv+0x7e>
			BT_ERR("L2CAP data overflow");
    47b4:	4b2d      	ldr	r3, [pc, #180]	; (486c <bt_conn_recv+0x120>)
    47b6:	4a2e      	ldr	r2, [pc, #184]	; (4870 <bt_conn_recv+0x124>)
    47b8:	9301      	str	r3, [sp, #4]
    47ba:	4b2e      	ldr	r3, [pc, #184]	; (4874 <bt_conn_recv+0x128>)
    47bc:	492e      	ldr	r1, [pc, #184]	; (4878 <bt_conn_recv+0x12c>)
    47be:	9300      	str	r3, [sp, #0]
    47c0:	4831      	ldr	r0, [pc, #196]	; (4888 <bt_conn_recv+0x13c>)
    47c2:	4b2f      	ldr	r3, [pc, #188]	; (4880 <bt_conn_recv+0x134>)
    47c4:	f7fd f8dc 	bl	1980 <printk>
    47c8:	e02d      	b.n	4826 <bt_conn_recv+0xda>
			return;
		}

		BT_DBG("Cont, len %u rx_len %u", buf->len, conn->rx_len);

		if (buf->len > net_buf_tailroom(conn->rx)) {
    47ca:	6900      	ldr	r0, [r0, #16]
    47cc:	3008      	adds	r0, #8
    47ce:	f00e ff3a 	bl	13646 <net_buf_simple_tailroom>
    47d2:	4286      	cmp	r6, r0
    47d4:	d908      	bls.n	47e8 <bt_conn_recv+0x9c>
			BT_ERR("Not enough buffer space for L2CAP data");
    47d6:	4b25      	ldr	r3, [pc, #148]	; (486c <bt_conn_recv+0x120>)
    47d8:	4a25      	ldr	r2, [pc, #148]	; (4870 <bt_conn_recv+0x124>)
    47da:	9301      	str	r3, [sp, #4]
    47dc:	4b25      	ldr	r3, [pc, #148]	; (4874 <bt_conn_recv+0x128>)
    47de:	4926      	ldr	r1, [pc, #152]	; (4878 <bt_conn_recv+0x12c>)
    47e0:	9300      	str	r3, [sp, #0]
    47e2:	482a      	ldr	r0, [pc, #168]	; (488c <bt_conn_recv+0x140>)
    47e4:	4b26      	ldr	r3, [pc, #152]	; (4880 <bt_conn_recv+0x134>)
    47e6:	e7ed      	b.n	47c4 <bt_conn_recv+0x78>
			bt_conn_reset_rx_state(conn);
			net_buf_unref(buf);
			return;
		}

		net_buf_add_mem(conn->rx, buf->data, buf->len);
    47e8:	6920      	ldr	r0, [r4, #16]
    47ea:	89aa      	ldrh	r2, [r5, #12]
    47ec:	68a9      	ldr	r1, [r5, #8]
    47ee:	3008      	adds	r0, #8
    47f0:	f00e feef 	bl	135d2 <net_buf_simple_add_mem>
		conn->rx_len -= buf->len;
    47f4:	89a3      	ldrh	r3, [r4, #12]
    47f6:	89aa      	ldrh	r2, [r5, #12]
		net_buf_unref(buf);
    47f8:	0028      	movs	r0, r5
			net_buf_unref(buf);
			return;
		}

		net_buf_add_mem(conn->rx, buf->data, buf->len);
		conn->rx_len -= buf->len;
    47fa:	1a9b      	subs	r3, r3, r2
    47fc:	81a3      	strh	r3, [r4, #12]
		net_buf_unref(buf);
    47fe:	f00e febf 	bl	13580 <net_buf_unref>

		if (conn->rx_len) {
    4802:	89a3      	ldrh	r3, [r4, #12]
    4804:	2b00      	cmp	r3, #0
    4806:	d12f      	bne.n	4868 <bt_conn_recv+0x11c>
			return;
		}

		buf = conn->rx;
    4808:	6925      	ldr	r5, [r4, #16]
		conn->rx = NULL;
		conn->rx_len = 0;
    480a:	81a3      	strh	r3, [r4, #12]
		if (conn->rx_len) {
			return;
		}

		buf = conn->rx;
		conn->rx = NULL;
    480c:	6123      	str	r3, [r4, #16]
		conn->rx_len = 0;

		break;
    480e:	e00e      	b.n	482e <bt_conn_recv+0xe2>
	default:
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
    4810:	4b16      	ldr	r3, [pc, #88]	; (486c <bt_conn_recv+0x120>)
    4812:	9201      	str	r2, [sp, #4]
    4814:	9302      	str	r3, [sp, #8]
    4816:	4b17      	ldr	r3, [pc, #92]	; (4874 <bt_conn_recv+0x128>)
    4818:	4a15      	ldr	r2, [pc, #84]	; (4870 <bt_conn_recv+0x124>)
    481a:	9300      	str	r3, [sp, #0]
    481c:	4916      	ldr	r1, [pc, #88]	; (4878 <bt_conn_recv+0x12c>)
    481e:	4b18      	ldr	r3, [pc, #96]	; (4880 <bt_conn_recv+0x134>)
    4820:	481b      	ldr	r0, [pc, #108]	; (4890 <bt_conn_recv+0x144>)
    4822:	f7fd f8ad 	bl	1980 <printk>
		bt_conn_reset_rx_state(conn);
    4826:	0020      	movs	r0, r4
    4828:	f7ff fedc 	bl	45e4 <bt_conn_reset_rx_state>
    482c:	e014      	b.n	4858 <bt_conn_recv+0x10c>
		net_buf_unref(buf);
		return;
	}

	hdr = (void *)buf->data;
	len = sys_le16_to_cpu(hdr->len);
    482e:	68ab      	ldr	r3, [r5, #8]
    4830:	781a      	ldrb	r2, [r3, #0]
    4832:	785b      	ldrb	r3, [r3, #1]
    4834:	021b      	lsls	r3, r3, #8
    4836:	4313      	orrs	r3, r2

	if (sizeof(*hdr) + len != buf->len) {
    4838:	89aa      	ldrh	r2, [r5, #12]
    483a:	1d19      	adds	r1, r3, #4
    483c:	4291      	cmp	r1, r2
    483e:	d00f      	beq.n	4860 <bt_conn_recv+0x114>
		BT_ERR("ACL len mismatch (%u != %u)", len, buf->len);
    4840:	490a      	ldr	r1, [pc, #40]	; (486c <bt_conn_recv+0x120>)
    4842:	9301      	str	r3, [sp, #4]
    4844:	4b0b      	ldr	r3, [pc, #44]	; (4874 <bt_conn_recv+0x128>)
    4846:	9103      	str	r1, [sp, #12]
    4848:	9202      	str	r2, [sp, #8]
    484a:	9300      	str	r3, [sp, #0]
    484c:	4a08      	ldr	r2, [pc, #32]	; (4870 <bt_conn_recv+0x124>)
    484e:	4b0c      	ldr	r3, [pc, #48]	; (4880 <bt_conn_recv+0x134>)
    4850:	4909      	ldr	r1, [pc, #36]	; (4878 <bt_conn_recv+0x12c>)
    4852:	4810      	ldr	r0, [pc, #64]	; (4894 <bt_conn_recv+0x148>)
    4854:	f7fd f894 	bl	1980 <printk>
		net_buf_unref(buf);
    4858:	0028      	movs	r0, r5
    485a:	f00e fe91 	bl	13580 <net_buf_unref>
		return;
    485e:	e003      	b.n	4868 <bt_conn_recv+0x11c>
	}

	BT_DBG("Successfully parsed %u byte L2CAP packet", buf->len);

	bt_l2cap_recv(conn, buf);
    4860:	0029      	movs	r1, r5
    4862:	0020      	movs	r0, r4
    4864:	f000 fe32 	bl	54cc <bt_l2cap_recv>
}
    4868:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
    486a:	46c0      	nop			; (mov r8, r8)
    486c:	000154c4 	.word	0x000154c4
    4870:	00015484 	.word	0x00015484
    4874:	000154c9 	.word	0x000154c9
    4878:	0001548b 	.word	0x0001548b
    487c:	00015c69 	.word	0x00015c69
    4880:	00017af0 	.word	0x00017af0
    4884:	00015c96 	.word	0x00015c96
    4888:	00015cc4 	.word	0x00015cc4
    488c:	00015ce8 	.word	0x00015ce8
    4890:	00015d1f 	.word	0x00015d1f
    4894:	00015d4d 	.word	0x00015d4d

00004898 <bt_conn_send_cb>:

int bt_conn_send_cb(struct bt_conn *conn, struct net_buf *buf,
		    bt_conn_tx_cb_t cb)
{
    4898:	b573      	push	{r0, r1, r4, r5, r6, lr}
    489a:	0005      	movs	r5, r0
	struct net_buf_pool *pool;

	BT_DBG("conn handle %u buf len %u cb %p", conn->handle, buf->len, cb);

	pool = net_buf_pool_get(buf->pool_id);
    489c:	7988      	ldrb	r0, [r1, #6]
	bt_l2cap_recv(conn, buf);
}

int bt_conn_send_cb(struct bt_conn *conn, struct net_buf *buf,
		    bt_conn_tx_cb_t cb)
{
    489e:	000c      	movs	r4, r1
    48a0:	0016      	movs	r6, r2
	struct net_buf_pool *pool;

	BT_DBG("conn handle %u buf len %u cb %p", conn->handle, buf->len, cb);

	pool = net_buf_pool_get(buf->pool_id);
    48a2:	f00e fdf1 	bl	13488 <net_buf_pool_get>
	if (pool->user_data_size < BT_BUF_USER_DATA_MIN) {
    48a6:	8b43      	ldrh	r3, [r0, #26]
    48a8:	2b03      	cmp	r3, #3
    48aa:	d80e      	bhi.n	48ca <bt_conn_send_cb+0x32>
		BT_ERR("Too small user data size");
    48ac:	4b17      	ldr	r3, [pc, #92]	; (490c <bt_conn_send_cb+0x74>)
    48ae:	4a18      	ldr	r2, [pc, #96]	; (4910 <bt_conn_send_cb+0x78>)
    48b0:	9301      	str	r3, [sp, #4]
    48b2:	4b18      	ldr	r3, [pc, #96]	; (4914 <bt_conn_send_cb+0x7c>)
    48b4:	4918      	ldr	r1, [pc, #96]	; (4918 <bt_conn_send_cb+0x80>)
    48b6:	9300      	str	r3, [sp, #0]
    48b8:	4818      	ldr	r0, [pc, #96]	; (491c <bt_conn_send_cb+0x84>)
    48ba:	4b19      	ldr	r3, [pc, #100]	; (4920 <bt_conn_send_cb+0x88>)
    48bc:	f7fd f860 	bl	1980 <printk>
		net_buf_unref(buf);
    48c0:	0020      	movs	r0, r4
    48c2:	f00e fe5d 	bl	13580 <net_buf_unref>
		return -EINVAL;
    48c6:	2016      	movs	r0, #22
    48c8:	e012      	b.n	48f0 <bt_conn_send_cb+0x58>
	}

	if (conn->state != BT_CONN_CONNECTED) {
    48ca:	002b      	movs	r3, r5
    48cc:	3351      	adds	r3, #81	; 0x51
    48ce:	781a      	ldrb	r2, [r3, #0]
    48d0:	2a03      	cmp	r2, #3
    48d2:	d00f      	beq.n	48f4 <bt_conn_send_cb+0x5c>
		BT_ERR("not connected!");
    48d4:	4b0d      	ldr	r3, [pc, #52]	; (490c <bt_conn_send_cb+0x74>)
    48d6:	4a0e      	ldr	r2, [pc, #56]	; (4910 <bt_conn_send_cb+0x78>)
    48d8:	9301      	str	r3, [sp, #4]
    48da:	4b0e      	ldr	r3, [pc, #56]	; (4914 <bt_conn_send_cb+0x7c>)
    48dc:	490e      	ldr	r1, [pc, #56]	; (4918 <bt_conn_send_cb+0x80>)
    48de:	9300      	str	r3, [sp, #0]
    48e0:	4810      	ldr	r0, [pc, #64]	; (4924 <bt_conn_send_cb+0x8c>)
    48e2:	4b0f      	ldr	r3, [pc, #60]	; (4920 <bt_conn_send_cb+0x88>)
    48e4:	f7fd f84c 	bl	1980 <printk>
		net_buf_unref(buf);
    48e8:	0020      	movs	r0, r4
    48ea:	f00e fe49 	bl	13580 <net_buf_unref>
		return -ENOTCONN;
    48ee:	2039      	movs	r0, #57	; 0x39
    48f0:	4240      	negs	r0, r0
    48f2:	e00a      	b.n	490a <bt_conn_send_cb+0x72>
	}

	conn_tx(buf)->cb = cb;

	net_buf_put(&conn->tx_queue, buf);
    48f4:	0028      	movs	r0, r5
		BT_ERR("not connected!");
		net_buf_unref(buf);
		return -ENOTCONN;
	}

	conn_tx(buf)->cb = cb;
    48f6:	89e3      	ldrh	r3, [r4, #14]

	net_buf_put(&conn->tx_queue, buf);
    48f8:	3030      	adds	r0, #48	; 0x30
		BT_ERR("not connected!");
		net_buf_unref(buf);
		return -ENOTCONN;
	}

	conn_tx(buf)->cb = cb;
    48fa:	18e3      	adds	r3, r4, r3
    48fc:	3313      	adds	r3, #19
    48fe:	4393      	bics	r3, r2
    4900:	601e      	str	r6, [r3, #0]

	net_buf_put(&conn->tx_queue, buf);
    4902:	0021      	movs	r1, r4
    4904:	f00e fe2d 	bl	13562 <net_buf_put>
	return 0;
    4908:	2000      	movs	r0, #0
}
    490a:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
    490c:	000154c4 	.word	0x000154c4
    4910:	00015484 	.word	0x00015484
    4914:	000154c9 	.word	0x000154c9
    4918:	0001548b 	.word	0x0001548b
    491c:	00015831 	.word	0x00015831
    4920:	00017ab1 	.word	0x00017ab1
    4924:	00015d79 	.word	0x00015d79

00004928 <bt_conn_notify_tx>:
	tx->cb = NULL;
	sys_slist_prepend(&free_tx, &tx->node);
}

void bt_conn_notify_tx(struct bt_conn *conn)
{
    4928:	b570      	push	{r4, r5, r6, lr}
    492a:	0005      	movs	r5, r0
	struct bt_conn_tx *tx;

	BT_DBG("conn %p", conn);

	while ((tx = k_fifo_get(&conn->tx_notify, K_NO_WAIT))) {
    492c:	0028      	movs	r0, r5
    492e:	2100      	movs	r1, #0
    4930:	301c      	adds	r0, #28
    4932:	f00f fdb5 	bl	144a0 <k_queue_get>
    4936:	1e04      	subs	r4, r0, #0
    4938:	d00f      	beq.n	495a <bt_conn_notify_tx+0x32>
		if (tx->cb) {
    493a:	6863      	ldr	r3, [r4, #4]
    493c:	2b00      	cmp	r3, #0
    493e:	d001      	beq.n	4944 <bt_conn_notify_tx+0x1c>
			tx->cb(conn);
    4940:	0028      	movs	r0, r5
    4942:	4798      	blx	r3
	return 0;
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
    4944:	2300      	movs	r3, #0
    4946:	6063      	str	r3, [r4, #4]
 * @param node A pointer on the node to prepend
 */
static inline void sys_slist_prepend(sys_slist_t *list,
				     sys_snode_t *node)
{
	node->next = list->head;
    4948:	4b04      	ldr	r3, [pc, #16]	; (495c <bt_conn_notify_tx+0x34>)
    494a:	681a      	ldr	r2, [r3, #0]
    494c:	6022      	str	r2, [r4, #0]
	list->head = node;

	if (!list->tail) {
    494e:	685a      	ldr	r2, [r3, #4]
 */
static inline void sys_slist_prepend(sys_slist_t *list,
				     sys_snode_t *node)
{
	node->next = list->head;
	list->head = node;
    4950:	601c      	str	r4, [r3, #0]

	if (!list->tail) {
    4952:	2a00      	cmp	r2, #0
    4954:	d1ea      	bne.n	492c <bt_conn_notify_tx+0x4>
		list->tail = list->head;
    4956:	605c      	str	r4, [r3, #4]
    4958:	e7e8      	b.n	492c <bt_conn_notify_tx+0x4>
			tx->cb(conn);
		}

		tx_free(tx);
	}
}
    495a:	bd70      	pop	{r4, r5, r6, pc}
    495c:	20000e18 	.word	0x20000e18

00004960 <send_frag>:
	tx_free(CONTAINER_OF(node, struct bt_conn_tx, node));
}

static bool send_frag(struct bt_conn *conn, struct net_buf *buf, u8_t flags,
		      bool always_consume)
{
    4960:	b5f0      	push	{r4, r5, r6, r7, lr}
    4962:	000e      	movs	r6, r1

	BT_DBG("conn %p buf %p len %u flags 0x%02x", conn, buf, buf->len,
	       flags);

	/* Wait until the controller can accept ACL packets */
	k_sem_take(bt_conn_get_pkts(conn), K_FOREVER);
    4964:	2101      	movs	r1, #1
	tx_free(CONTAINER_OF(node, struct bt_conn_tx, node));
}

static bool send_frag(struct bt_conn *conn, struct net_buf *buf, u8_t flags,
		      bool always_consume)
{
    4966:	0005      	movs	r5, r0
    4968:	b087      	sub	sp, #28

	BT_DBG("conn %p buf %p len %u flags 0x%02x", conn, buf, buf->len,
	       flags);

	/* Wait until the controller can accept ACL packets */
	k_sem_take(bt_conn_get_pkts(conn), K_FOREVER);
    496a:	4249      	negs	r1, r1
    496c:	4842      	ldr	r0, [pc, #264]	; (4a78 <send_frag+0x118>)
	tx_free(CONTAINER_OF(node, struct bt_conn_tx, node));
}

static bool send_frag(struct bt_conn *conn, struct net_buf *buf, u8_t flags,
		      bool always_consume)
{
    496e:	9305      	str	r3, [sp, #20]
    4970:	0017      	movs	r7, r2

	BT_DBG("conn %p buf %p len %u flags 0x%02x", conn, buf, buf->len,
	       flags);

	/* Wait until the controller can accept ACL packets */
	k_sem_take(bt_conn_get_pkts(conn), K_FOREVER);
    4972:	f00f ffef 	bl	14954 <k_sem_take>

	/* Make sure we notify and free up any pending tx contexts */
	bt_conn_notify_tx(conn);
    4976:	0028      	movs	r0, r5
    4978:	f7ff ffd6 	bl	4928 <bt_conn_notify_tx>

	/* Check for disconnection while waiting for pkts_sem */
	if (conn->state != BT_CONN_CONNECTED) {
    497c:	002b      	movs	r3, r5
    497e:	3351      	adds	r3, #81	; 0x51
    4980:	781c      	ldrb	r4, [r3, #0]
    4982:	2c03      	cmp	r4, #3
    4984:	d16b      	bne.n	4a5e <send_frag+0xfe>
		goto fail;
	}

	hdr = net_buf_push(buf, sizeof(*hdr));
    4986:	0030      	movs	r0, r6
    4988:	2104      	movs	r1, #4
    498a:	3008      	adds	r0, #8
    498c:	f00e fe33 	bl	135f6 <net_buf_simple_push>
    4990:	2202      	movs	r2, #2
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    4992:	882b      	ldrh	r3, [r5, #0]
    4994:	033f      	lsls	r7, r7, #12
    4996:	431f      	orrs	r7, r3
    4998:	b2bf      	uxth	r7, r7
    499a:	7007      	strb	r7, [r0, #0]
    499c:	0a3f      	lsrs	r7, r7, #8
    499e:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    49a0:	89b3      	ldrh	r3, [r6, #12]
    49a2:	3b04      	subs	r3, #4
    49a4:	b29b      	uxth	r3, r3
    49a6:	7083      	strb	r3, [r0, #2]
    49a8:	0a1b      	lsrs	r3, r3, #8
    49aa:	70c3      	strb	r3, [r0, #3]
 *
 *  @return Pointer to the user data of the buffer.
 */
static inline void *net_buf_user_data(struct net_buf *buf)
{
	return (void *)ROUND_UP((buf->__buf + buf->size), sizeof(int));
    49ac:	89f3      	ldrh	r3, [r6, #14]
    49ae:	18f3      	adds	r3, r6, r3
    49b0:	3313      	adds	r3, #19
    49b2:	43a3      	bics	r3, r4

	cb = conn_tx(buf)->cb;
    49b4:	6819      	ldr	r1, [r3, #0]
    49b6:	701a      	strb	r2, [r3, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list)
{
	sys_snode_t *node = list->head;
    49b8:	4b30      	ldr	r3, [pc, #192]	; (4a7c <send_frag+0x11c>)
    49ba:	681c      	ldr	r4, [r3, #0]

	list->head = node->next;
	if (list->tail == node) {
    49bc:	6858      	ldr	r0, [r3, #4]
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list)
{
	sys_snode_t *node = list->head;

	list->head = node->next;
    49be:	6822      	ldr	r2, [r4, #0]
    49c0:	601a      	str	r2, [r3, #0]
	if (list->tail == node) {
    49c2:	4284      	cmp	r4, r0
    49c4:	d100      	bne.n	49c8 <send_frag+0x68>
		list->tail = list->head;
    49c6:	605a      	str	r2, [r3, #4]
	BT_DBG("conn %p cb %p", conn, cb);

	__ASSERT(!sys_slist_is_empty(&free_tx), "No free conn TX contexts");

	node = sys_slist_get_not_empty(&free_tx);
	CONTAINER_OF(node, struct bt_conn_tx, node)->cb = cb;
    49c8:	6061      	str	r1, [r4, #4]
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
    49ca:	f3ef 8210 	mrs	r2, PRIMASK
    49ce:	b672      	cpsid	i
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node)
{
	node->next = NULL;
    49d0:	2300      	movs	r3, #0
    49d2:	6023      	str	r3, [r4, #0]

	if (!list->tail) {
    49d4:	69ab      	ldr	r3, [r5, #24]
    49d6:	2b00      	cmp	r3, #0
    49d8:	d102      	bne.n	49e0 <send_frag+0x80>
		list->tail = node;
    49da:	61ac      	str	r4, [r5, #24]
		list->head = node;
    49dc:	616c      	str	r4, [r5, #20]
    49de:	e001      	b.n	49e4 <send_frag+0x84>
	} else {
		list->tail->next = node;
    49e0:	601c      	str	r4, [r3, #0]
		list->tail = node;
    49e2:	61ac      	str	r4, [r5, #24]
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    49e4:	2a00      	cmp	r2, #0
    49e6:	d100      	bne.n	49ea <send_frag+0x8a>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    49e8:	b662      	cpsie	i
	cb = conn_tx(buf)->cb;
	bt_buf_set_type(buf, BT_BUF_ACL_OUT);

	node = add_pending_tx(conn, cb);

	err = bt_send(buf);
    49ea:	0030      	movs	r0, r6
    49ec:	f7fe fb38 	bl	3060 <bt_send>
		BT_ERR("Unable to send to driver (err %d)", err);
		remove_pending_tx(conn, node);
		goto fail;
	}

	return true;
    49f0:	2701      	movs	r7, #1
	bt_buf_set_type(buf, BT_BUF_ACL_OUT);

	node = add_pending_tx(conn, cb);

	err = bt_send(buf);
	if (err) {
    49f2:	2800      	cmp	r0, #0
    49f4:	d03d      	beq.n	4a72 <send_frag+0x112>
		BT_ERR("Unable to send to driver (err %d)", err);
    49f6:	4b22      	ldr	r3, [pc, #136]	; (4a80 <send_frag+0x120>)
    49f8:	9001      	str	r0, [sp, #4]
    49fa:	9302      	str	r3, [sp, #8]
    49fc:	4b21      	ldr	r3, [pc, #132]	; (4a84 <send_frag+0x124>)
    49fe:	4a22      	ldr	r2, [pc, #136]	; (4a88 <send_frag+0x128>)
    4a00:	9300      	str	r3, [sp, #0]
    4a02:	4922      	ldr	r1, [pc, #136]	; (4a8c <send_frag+0x12c>)
    4a04:	4b22      	ldr	r3, [pc, #136]	; (4a90 <send_frag+0x130>)
    4a06:	4823      	ldr	r0, [pc, #140]	; (4a94 <send_frag+0x134>)
    4a08:	f7fc ffba 	bl	1980 <printk>
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
    4a0c:	f3ef 8010 	mrs	r0, PRIMASK
    4a10:	b672      	cpsid	i
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node)
{
	sys_snode_t *prev = NULL;
    4a12:	2200      	movs	r2, #0
    4a14:	696b      	ldr	r3, [r5, #20]
	sys_snode_t *test;

	SYS_SLIST_FOR_EACH_NODE(list, test) {
    4a16:	2b00      	cmp	r3, #0
    4a18:	d014      	beq.n	4a44 <send_frag+0xe4>
		if (test == node) {
    4a1a:	429c      	cmp	r4, r3
    4a1c:	d10f      	bne.n	4a3e <send_frag+0xde>
    4a1e:	6823      	ldr	r3, [r4, #0]
    4a20:	69a9      	ldr	r1, [r5, #24]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node)
{
	if (!prev_node) {
    4a22:	2a00      	cmp	r2, #0
    4a24:	d104      	bne.n	4a30 <send_frag+0xd0>
		list->head = node->next;
    4a26:	616b      	str	r3, [r5, #20]

		/* Was node also the tail? */
		if (list->tail == node) {
    4a28:	428c      	cmp	r4, r1
    4a2a:	d105      	bne.n	4a38 <send_frag+0xd8>
			list->tail = list->head;
    4a2c:	61ab      	str	r3, [r5, #24]
    4a2e:	e003      	b.n	4a38 <send_frag+0xd8>
		}
	} else {
		prev_node->next = node->next;
    4a30:	6013      	str	r3, [r2, #0]

		/* Was node the tail? */
		if (list->tail == node) {
    4a32:	428c      	cmp	r4, r1
    4a34:	d100      	bne.n	4a38 <send_frag+0xd8>
			list->tail = prev_node;
    4a36:	61aa      	str	r2, [r5, #24]
		}
	}

	node->next = NULL;
    4a38:	2300      	movs	r3, #0
    4a3a:	6023      	str	r3, [r4, #0]
    4a3c:	e002      	b.n	4a44 <send_frag+0xe4>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node)
{
	return node->next;
    4a3e:	001a      	movs	r2, r3
    4a40:	681b      	ldr	r3, [r3, #0]
    4a42:	e7e8      	b.n	4a16 <send_frag+0xb6>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    4a44:	2800      	cmp	r0, #0
    4a46:	d100      	bne.n	4a4a <send_frag+0xea>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    4a48:	b662      	cpsie	i
	return 0;
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
    4a4a:	2300      	movs	r3, #0
    4a4c:	6063      	str	r3, [r4, #4]
 * @param node A pointer on the node to prepend
 */
static inline void sys_slist_prepend(sys_slist_t *list,
				     sys_snode_t *node)
{
	node->next = list->head;
    4a4e:	4b0b      	ldr	r3, [pc, #44]	; (4a7c <send_frag+0x11c>)
    4a50:	681a      	ldr	r2, [r3, #0]
    4a52:	6022      	str	r2, [r4, #0]
	list->head = node;

	if (!list->tail) {
    4a54:	685a      	ldr	r2, [r3, #4]
 */
static inline void sys_slist_prepend(sys_slist_t *list,
				     sys_snode_t *node)
{
	node->next = list->head;
	list->head = node;
    4a56:	601c      	str	r4, [r3, #0]

	if (!list->tail) {
    4a58:	2a00      	cmp	r2, #0
    4a5a:	d100      	bne.n	4a5e <send_frag+0xfe>
		list->tail = list->head;
    4a5c:	605c      	str	r4, [r3, #4]
fail:
	k_sem_give(bt_conn_get_pkts(conn));
	if (always_consume) {
		net_buf_unref(buf);
	}
	return false;
    4a5e:	2700      	movs	r7, #0
	}

	return true;

fail:
	k_sem_give(bt_conn_get_pkts(conn));
    4a60:	4805      	ldr	r0, [pc, #20]	; (4a78 <send_frag+0x118>)
    4a62:	f00f ff3b 	bl	148dc <k_sem_give>
	if (always_consume) {
    4a66:	9b05      	ldr	r3, [sp, #20]
    4a68:	42bb      	cmp	r3, r7
    4a6a:	d002      	beq.n	4a72 <send_frag+0x112>
		net_buf_unref(buf);
    4a6c:	0030      	movs	r0, r6
    4a6e:	f00e fd87 	bl	13580 <net_buf_unref>
	}
	return false;
}
    4a72:	0038      	movs	r0, r7
    4a74:	b007      	add	sp, #28
    4a76:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4a78:	20000554 	.word	0x20000554
    4a7c:	20000e18 	.word	0x20000e18
    4a80:	000154c4 	.word	0x000154c4
    4a84:	000154c9 	.word	0x000154c9
    4a88:	00015484 	.word	0x00015484
    4a8c:	0001548b 	.word	0x0001548b
    4a90:	00017ae6 	.word	0x00017ae6
    4a94:	00015754 	.word	0x00015754

00004a98 <bt_conn_prepare_events>:
{
	int i, ev_count = 0;

	BT_DBG("");

	conn_change.signaled = 0;
    4a98:	2200      	movs	r2, #0
    4a9a:	4b1d      	ldr	r3, [pc, #116]	; (4b10 <bt_conn_prepare_events+0x78>)
	 */
	bt_conn_unref(conn);
}

int bt_conn_prepare_events(struct k_poll_event events[])
{
    4a9c:	b570      	push	{r4, r5, r6, lr}
	int i, ev_count = 0;

	BT_DBG("");

	conn_change.signaled = 0;
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    4a9e:	2101      	movs	r1, #1
	 */
	bt_conn_unref(conn);
}

int bt_conn_prepare_events(struct k_poll_event events[])
{
    4aa0:	0005      	movs	r5, r0
	int i, ev_count = 0;

	BT_DBG("");

	conn_change.signaled = 0;
    4aa2:	605a      	str	r2, [r3, #4]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    4aa4:	f00f faec 	bl	14080 <k_poll_event_init>
			  K_POLL_MODE_NOTIFY_ONLY, &conn_change);

	for (i = 0; i < ARRAY_SIZE(conns); i++) {
		struct bt_conn *conn = &conns[i];

		if (!atomic_get(&conn->ref)) {
    4aa8:	4c1a      	ldr	r4, [pc, #104]	; (4b14 <bt_conn_prepare_events+0x7c>)
    4aaa:	0020      	movs	r0, r4
    4aac:	304c      	adds	r0, #76	; 0x4c
    4aae:	f00f f84e 	bl	13b4e <atomic_get>
    4ab2:	0026      	movs	r6, r4
    4ab4:	2800      	cmp	r0, #0
    4ab6:	d00e      	beq.n	4ad6 <bt_conn_prepare_events+0x3e>
			continue;
		}

		if (conn->state == BT_CONN_DISCONNECTED &&
    4ab8:	0023      	movs	r3, r4
    4aba:	3351      	adds	r3, #81	; 0x51
    4abc:	781b      	ldrb	r3, [r3, #0]
    4abe:	2b00      	cmp	r3, #0
    4ac0:	d10b      	bne.n	4ada <bt_conn_prepare_events+0x42>
static inline int atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    4ac2:	2141      	movs	r1, #65	; 0x41
    4ac4:	1d20      	adds	r0, r4, #4
    4ac6:	4249      	negs	r1, r1
    4ac8:	f00f f858 	bl	13b7c <atomic_and>
    4acc:	0643      	lsls	r3, r0, #25
    4ace:	d504      	bpl.n	4ada <bt_conn_prepare_events+0x42>
		    atomic_test_and_clear_bit(conn->flags, BT_CONN_CLEANUP)) {
			conn_cleanup(conn);
    4ad0:	0020      	movs	r0, r4
    4ad2:	f7ff fd93 	bl	45fc <conn_cleanup>
			continue;
    4ad6:	2001      	movs	r0, #1
    4ad8:	e019      	b.n	4b0e <bt_conn_prepare_events+0x76>
		}

		if (conn->state != BT_CONN_CONNECTED) {
    4ada:	0033      	movs	r3, r6
    4adc:	3351      	adds	r3, #81	; 0x51
    4ade:	781c      	ldrb	r4, [r3, #0]
    4ae0:	2c03      	cmp	r4, #3
    4ae2:	d1f8      	bne.n	4ad6 <bt_conn_prepare_events+0x3e>
			continue;
		}

		BT_DBG("Adding conn %p to poll list", conn);

		k_poll_event_init(&events[ev_count],
    4ae4:	0033      	movs	r3, r6
    4ae6:	0028      	movs	r0, r5
    4ae8:	3330      	adds	r3, #48	; 0x30
    4aea:	300c      	adds	r0, #12
    4aec:	2200      	movs	r2, #0
    4aee:	2104      	movs	r1, #4
    4af0:	f00f fac6 	bl	14080 <k_poll_event_init>
				  K_POLL_TYPE_FIFO_DATA_AVAILABLE,
				  K_POLL_MODE_NOTIFY_ONLY,
				  &conn->tx_queue);
		events[ev_count++].tag = BT_EVENT_CONN_TX_QUEUE;
    4af4:	2302      	movs	r3, #2

		k_poll_event_init(&events[ev_count],
    4af6:	0028      	movs	r0, r5

		k_poll_event_init(&events[ev_count],
				  K_POLL_TYPE_FIFO_DATA_AVAILABLE,
				  K_POLL_MODE_NOTIFY_ONLY,
				  &conn->tx_queue);
		events[ev_count++].tag = BT_EVENT_CONN_TX_QUEUE;
    4af8:	742b      	strb	r3, [r5, #16]

		k_poll_event_init(&events[ev_count],
    4afa:	0033      	movs	r3, r6
    4afc:	3018      	adds	r0, #24
    4afe:	331c      	adds	r3, #28
    4b00:	2200      	movs	r2, #0
    4b02:	2104      	movs	r1, #4
    4b04:	f00f fabc 	bl	14080 <k_poll_event_init>
				  K_POLL_TYPE_FIFO_DATA_AVAILABLE,
				  K_POLL_MODE_NOTIFY_ONLY,
				  &conn->tx_notify);
		events[ev_count++].tag = BT_EVENT_CONN_TX_NOTIFY;
    4b08:	2301      	movs	r3, #1
    4b0a:	0020      	movs	r0, r4
    4b0c:	772b      	strb	r3, [r5, #28]
	}

	return ev_count;
}
    4b0e:	bd70      	pop	{r4, r5, r6, pc}
    4b10:	20000e20 	.word	0x20000e20
    4b14:	20000e30 	.word	0x20000e30

00004b18 <bt_conn_add_le>:
		net_buf_unref(buf);
	}
}

struct bt_conn *bt_conn_add_le(const bt_addr_le_t *peer)
{
    4b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
{
	struct bt_conn *conn = NULL;
	int i;

	for (i = 0; i < ARRAY_SIZE(conns); i++) {
		if (!atomic_get(&conns[i].ref)) {
    4b1a:	4c16      	ldr	r4, [pc, #88]	; (4b74 <bt_conn_add_le+0x5c>)
		net_buf_unref(buf);
	}
}

struct bt_conn *bt_conn_add_le(const bt_addr_le_t *peer)
{
    4b1c:	0007      	movs	r7, r0
{
	struct bt_conn *conn = NULL;
	int i;

	for (i = 0; i < ARRAY_SIZE(conns); i++) {
		if (!atomic_get(&conns[i].ref)) {
    4b1e:	0026      	movs	r6, r4
    4b20:	364c      	adds	r6, #76	; 0x4c
    4b22:	0030      	movs	r0, r6
    4b24:	f00f f813 	bl	13b4e <atomic_get>
    4b28:	0005      	movs	r5, r0
struct bt_conn *bt_conn_add_le(const bt_addr_le_t *peer)
{
	struct bt_conn *conn = conn_new();

	if (!conn) {
		return NULL;
    4b2a:	2000      	movs	r0, #0
{
	struct bt_conn *conn = NULL;
	int i;

	for (i = 0; i < ARRAY_SIZE(conns); i++) {
		if (!atomic_get(&conns[i].ref)) {
    4b2c:	2d00      	cmp	r5, #0
    4b2e:	d120      	bne.n	4b72 <bt_conn_add_le+0x5a>

	if (!conn) {
		return NULL;
	}

	memset(conn, 0, sizeof(*conn));
    4b30:	22a8      	movs	r2, #168	; 0xa8
    4b32:	0029      	movs	r1, r5
    4b34:	0020      	movs	r0, r4
    4b36:	f7fc f92a 	bl	d8e <memset>

	atomic_set(&conn->ref, 1);
    4b3a:	2101      	movs	r1, #1
    4b3c:	0030      	movs	r0, r6
    4b3e:	f00f f808 	bl	13b52 <atomic_set>
    4b42:	0020      	movs	r0, r4
    4b44:	2207      	movs	r2, #7
    4b46:	0039      	movs	r1, r7
    4b48:	3054      	adds	r0, #84	; 0x54
    4b4a:	f7fc f8f6 	bl	d3a <memcpy>
		return NULL;
	}

	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BLUETOOTH_SMP)
	conn->sec_level = BT_SECURITY_LOW;
    4b4e:	2301      	movs	r3, #1
    4b50:	7223      	strb	r3, [r4, #8]
	conn->required_sec_level = BT_SECURITY_LOW;
    4b52:	7263      	strb	r3, [r4, #9]
#endif /* CONFIG_BLUETOOTH_SMP */
	conn->type = BT_CONN_TYPE_LE;
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    4b54:	0023      	movs	r3, r4
    4b56:	2218      	movs	r2, #24
    4b58:	336c      	adds	r3, #108	; 0x6c
    4b5a:	801a      	strh	r2, [r3, #0]
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;
    4b5c:	0023      	movs	r3, r4
	k_delayed_work_init(&conn->le.update_work, le_conn_update);
    4b5e:	0020      	movs	r0, r4
	conn->sec_level = BT_SECURITY_LOW;
	conn->required_sec_level = BT_SECURITY_LOW;
#endif /* CONFIG_BLUETOOTH_SMP */
	conn->type = BT_CONN_TYPE_LE;
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;
    4b60:	336e      	adds	r3, #110	; 0x6e
    4b62:	3210      	adds	r2, #16
	k_delayed_work_init(&conn->le.update_work, le_conn_update);
    4b64:	3080      	adds	r0, #128	; 0x80
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BLUETOOTH_SMP)
	conn->sec_level = BT_SECURITY_LOW;
	conn->required_sec_level = BT_SECURITY_LOW;
#endif /* CONFIG_BLUETOOTH_SMP */
	conn->type = BT_CONN_TYPE_LE;
    4b66:	70a5      	strb	r5, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;
    4b68:	801a      	strh	r2, [r3, #0]
	k_delayed_work_init(&conn->le.update_work, le_conn_update);
    4b6a:	4903      	ldr	r1, [pc, #12]	; (4b78 <bt_conn_add_le+0x60>)
    4b6c:	f010 f982 	bl	14e74 <k_delayed_work_init>
	struct bt_conn *conn = NULL;
	int i;

	for (i = 0; i < ARRAY_SIZE(conns); i++) {
		if (!atomic_get(&conns[i].ref)) {
			conn = &conns[i];
    4b70:	0020      	movs	r0, r4
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;
	k_delayed_work_init(&conn->le.update_work, le_conn_update);

	return conn;
}
    4b72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4b74:	20000e30 	.word	0x20000e30
    4b78:	00004f35 	.word	0x00004f35

00004b7c <bt_conn_set_state>:
		k_sem_give(bt_conn_get_pkts(conn));
	}
}

void bt_conn_set_state(struct bt_conn *conn, bt_conn_state_t state)
{
    4b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
	bt_conn_state_t old_state;

	BT_DBG("%s -> %s", state2str(conn->state), state2str(state));

	if (conn->state == state) {
    4b7e:	0007      	movs	r7, r0
    4b80:	3751      	adds	r7, #81	; 0x51
    4b82:	783d      	ldrb	r5, [r7, #0]
		k_sem_give(bt_conn_get_pkts(conn));
	}
}

void bt_conn_set_state(struct bt_conn *conn, bt_conn_state_t state)
{
    4b84:	b085      	sub	sp, #20
    4b86:	0004      	movs	r4, r0
    4b88:	000e      	movs	r6, r1
	bt_conn_state_t old_state;

	BT_DBG("%s -> %s", state2str(conn->state), state2str(state));

	if (conn->state == state) {
    4b8a:	428d      	cmp	r5, r1
    4b8c:	d10a      	bne.n	4ba4 <bt_conn_set_state+0x28>
		BT_WARN("no transition");
    4b8e:	4b4d      	ldr	r3, [pc, #308]	; (4cc4 <bt_conn_set_state+0x148>)
    4b90:	4a4d      	ldr	r2, [pc, #308]	; (4cc8 <bt_conn_set_state+0x14c>)
    4b92:	9301      	str	r3, [sp, #4]
    4b94:	4b4d      	ldr	r3, [pc, #308]	; (4ccc <bt_conn_set_state+0x150>)
    4b96:	494e      	ldr	r1, [pc, #312]	; (4cd0 <bt_conn_set_state+0x154>)
    4b98:	9300      	str	r3, [sp, #0]
    4b9a:	484e      	ldr	r0, [pc, #312]	; (4cd4 <bt_conn_set_state+0x158>)
    4b9c:	4b4e      	ldr	r3, [pc, #312]	; (4cd8 <bt_conn_set_state+0x15c>)
    4b9e:	f7fc feef 	bl	1980 <printk>
		return;
    4ba2:	e08d      	b.n	4cc0 <bt_conn_set_state+0x144>
	}

	old_state = conn->state;
	conn->state = state;
    4ba4:	7039      	strb	r1, [r7, #0]

	/* Actions needed for exiting the old state */
	switch (old_state) {
    4ba6:	2d00      	cmp	r5, #0
    4ba8:	d102      	bne.n	4bb0 <bt_conn_set_state+0x34>
	}
}

struct bt_conn *bt_conn_ref(struct bt_conn *conn)
{
	atomic_inc(&conn->ref);
    4baa:	304c      	adds	r0, #76	; 0x4c
    4bac:	f00e ffb9 	bl	13b22 <atomic_inc>
	default:
		break;
	}

	/* Actions needed for entering the new state */
	switch (conn->state) {
    4bb0:	7838      	ldrb	r0, [r7, #0]
    4bb2:	2804      	cmp	r0, #4
    4bb4:	d865      	bhi.n	4c82 <bt_conn_set_state+0x106>
    4bb6:	f7fb fadf 	bl	178 <__gnu_thumb1_case_uqi>
    4bba:	831c      	.short	0x831c
    4bbc:	0383      	.short	0x0383
    4bbe:	83          	.byte	0x83
    4bbf:	00          	.byte	0x00
	case BT_CONN_CONNECTED:
		if (conn->type == BT_CONN_TYPE_SCO) {
    4bc0:	78a3      	ldrb	r3, [r4, #2]
    4bc2:	2b02      	cmp	r3, #2
    4bc4:	d07c      	beq.n	4cc0 <bt_conn_set_state+0x144>
			/* TODO: Notify sco connected */
			break;
		}
		k_fifo_init(&conn->tx_queue);
    4bc6:	0020      	movs	r0, r4
    4bc8:	3030      	adds	r0, #48	; 0x30
    4bca:	f00f fbcd 	bl	14368 <k_queue_init>
		k_fifo_init(&conn->tx_notify);
    4bce:	0020      	movs	r0, r4
    4bd0:	301c      	adds	r0, #28
    4bd2:	f00f fbc9 	bl	14368 <k_queue_init>
		k_poll_signal(&conn_change, 0);
    4bd6:	2100      	movs	r1, #0
    4bd8:	4840      	ldr	r0, [pc, #256]	; (4cdc <bt_conn_set_state+0x160>)
    4bda:	f00f fb33 	bl	14244 <k_poll_signal>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    4bde:	2300      	movs	r3, #0

		sys_slist_init(&conn->channels);

		bt_l2cap_connected(conn);
    4be0:	0020      	movs	r0, r4
    4be2:	6463      	str	r3, [r4, #68]	; 0x44
	list->tail = NULL;
    4be4:	64a3      	str	r3, [r4, #72]	; 0x48
    4be6:	f000 fb37 	bl	5258 <bt_l2cap_connected>
		notify_connected(conn);
    4bea:	0020      	movs	r0, r4
    4bec:	f7ff fce6 	bl	45bc <notify_connected>
		break;
    4bf0:	e066      	b.n	4cc0 <bt_conn_set_state+0x144>
	case BT_CONN_DISCONNECTED:
		if (conn->type == BT_CONN_TYPE_SCO) {
    4bf2:	78a3      	ldrb	r3, [r4, #2]
    4bf4:	2b02      	cmp	r3, #2
    4bf6:	d037      	beq.n	4c68 <bt_conn_set_state+0xec>
		}
		/* Notify disconnection and queue a dummy buffer to wake
		 * up and stop the tx thread for states where it was
		 * running.
		 */
		if (old_state == BT_CONN_CONNECTED ||
    4bf8:	1eeb      	subs	r3, r5, #3
    4bfa:	2b01      	cmp	r3, #1
    4bfc:	d82f      	bhi.n	4c5e <bt_conn_set_state+0xe2>
		    old_state == BT_CONN_DISCONNECT) {
			bt_l2cap_disconnected(conn);
    4bfe:	0020      	movs	r0, r4
    4c00:	f000 fb64 	bl	52cc <bt_l2cap_disconnected>

static void notify_disconnected(struct bt_conn *conn)
{
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    4c04:	4b36      	ldr	r3, [pc, #216]	; (4ce0 <bt_conn_set_state+0x164>)
    4c06:	681d      	ldr	r5, [r3, #0]
    4c08:	2d00      	cmp	r5, #0
    4c0a:	d01b      	beq.n	4c44 <bt_conn_set_state+0xc8>
		if (cb->disconnected) {
    4c0c:	686b      	ldr	r3, [r5, #4]
    4c0e:	2b00      	cmp	r3, #0
    4c10:	d004      	beq.n	4c1c <bt_conn_set_state+0xa0>
			cb->disconnected(conn, conn->err);
    4c12:	0022      	movs	r2, r4
    4c14:	3250      	adds	r2, #80	; 0x50
    4c16:	7811      	ldrb	r1, [r2, #0]
    4c18:	0020      	movs	r0, r4
    4c1a:	4798      	blx	r3

static void notify_disconnected(struct bt_conn *conn)
{
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    4c1c:	69ad      	ldr	r5, [r5, #24]
    4c1e:	e7f3      	b.n	4c08 <bt_conn_set_state+0x8c>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    4c20:	2a00      	cmp	r2, #0
    4c22:	d13a      	bne.n	4c9a <bt_conn_set_state+0x11e>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    4c24:	b662      	cpsie	i

		key = irq_lock();
		node = sys_slist_get(&conn->tx_pending);
		irq_unlock(key);

		if (!node) {
    4c26:	2b00      	cmp	r3, #0
    4c28:	d037      	beq.n	4c9a <bt_conn_set_state+0x11e>
	return 0;
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
    4c2a:	2200      	movs	r2, #0
    4c2c:	605a      	str	r2, [r3, #4]
 * @param node A pointer on the node to prepend
 */
static inline void sys_slist_prepend(sys_slist_t *list,
				     sys_snode_t *node)
{
	node->next = list->head;
    4c2e:	4a2d      	ldr	r2, [pc, #180]	; (4ce4 <bt_conn_set_state+0x168>)
    4c30:	6811      	ldr	r1, [r2, #0]
    4c32:	6019      	str	r1, [r3, #0]
	list->head = node;

	if (!list->tail) {
    4c34:	6851      	ldr	r1, [r2, #4]
 */
static inline void sys_slist_prepend(sys_slist_t *list,
				     sys_snode_t *node)
{
	node->next = list->head;
	list->head = node;
    4c36:	6013      	str	r3, [r2, #0]

	if (!list->tail) {
    4c38:	2900      	cmp	r1, #0
    4c3a:	d100      	bne.n	4c3e <bt_conn_set_state+0xc2>
		list->tail = list->head;
    4c3c:	6053      	str	r3, [r2, #4]
			break;
		}

		tx_free(CONTAINER_OF(node, struct bt_conn_tx, node));

		k_sem_give(bt_conn_get_pkts(conn));
    4c3e:	482a      	ldr	r0, [pc, #168]	; (4ce8 <bt_conn_set_state+0x16c>)
    4c40:	f00f fe4c 	bl	148dc <k_sem_give>
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
    4c44:	f3ef 8210 	mrs	r2, PRIMASK
    4c48:	b672      	cpsid	i
    4c4a:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list)
{
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
    4c4c:	2b00      	cmp	r3, #0
    4c4e:	d0e7      	beq.n	4c20 <bt_conn_set_state+0xa4>
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list)
{
	sys_snode_t *node = list->head;

	list->head = node->next;
    4c50:	6819      	ldr	r1, [r3, #0]
	if (list->tail == node) {
    4c52:	69a0      	ldr	r0, [r4, #24]
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list)
{
	sys_snode_t *node = list->head;

	list->head = node->next;
    4c54:	6161      	str	r1, [r4, #20]
	if (list->tail == node) {
    4c56:	4283      	cmp	r3, r0
    4c58:	d12f      	bne.n	4cba <bt_conn_set_state+0x13e>
		list->tail = list->head;
    4c5a:	61a1      	str	r1, [r4, #24]
    4c5c:	e02d      	b.n	4cba <bt_conn_set_state+0x13e>
			}

			atomic_set_bit(conn->flags, BT_CONN_CLEANUP);
			k_poll_signal(&conn_change, 0);
			/* The last ref will be dropped by the tx_thread */
		} else if (old_state == BT_CONN_CONNECT) {
    4c5e:	2d02      	cmp	r5, #2
    4c60:	d107      	bne.n	4c72 <bt_conn_set_state+0xf6>
			/* conn->err will be set in this case */
			notify_connected(conn);
    4c62:	0020      	movs	r0, r4
    4c64:	f7ff fcaa 	bl	45bc <notify_connected>
	return conn;
}

void bt_conn_unref(struct bt_conn *conn)
{
	atomic_dec(&conn->ref);
    4c68:	0020      	movs	r0, r4
    4c6a:	304c      	adds	r0, #76	; 0x4c
    4c6c:	f00e ff64 	bl	13b38 <atomic_dec>
    4c70:	e026      	b.n	4cc0 <bt_conn_set_state+0x144>
			/* The last ref will be dropped by the tx_thread */
		} else if (old_state == BT_CONN_CONNECT) {
			/* conn->err will be set in this case */
			notify_connected(conn);
			bt_conn_unref(conn);
		} else if (old_state == BT_CONN_CONNECT_SCAN) {
    4c72:	2d01      	cmp	r5, #1
    4c74:	d124      	bne.n	4cc0 <bt_conn_set_state+0x144>
			/* this indicate LE Create Connection failed */
			if (conn->err) {
    4c76:	0023      	movs	r3, r4
    4c78:	3350      	adds	r3, #80	; 0x50
    4c7a:	781b      	ldrb	r3, [r3, #0]
    4c7c:	2b00      	cmp	r3, #0
    4c7e:	d0f3      	beq.n	4c68 <bt_conn_set_state+0xec>
    4c80:	e7ef      	b.n	4c62 <bt_conn_set_state+0xe6>

		break;
	case BT_CONN_DISCONNECT:
		break;
	default:
		BT_WARN("no valid (%u) state was set", state);
    4c82:	4b10      	ldr	r3, [pc, #64]	; (4cc4 <bt_conn_set_state+0x148>)
    4c84:	9601      	str	r6, [sp, #4]
    4c86:	9302      	str	r3, [sp, #8]
    4c88:	4b10      	ldr	r3, [pc, #64]	; (4ccc <bt_conn_set_state+0x150>)
    4c8a:	4a0f      	ldr	r2, [pc, #60]	; (4cc8 <bt_conn_set_state+0x14c>)
    4c8c:	9300      	str	r3, [sp, #0]
    4c8e:	4910      	ldr	r1, [pc, #64]	; (4cd0 <bt_conn_set_state+0x154>)
    4c90:	4b11      	ldr	r3, [pc, #68]	; (4cd8 <bt_conn_set_state+0x15c>)
    4c92:	4816      	ldr	r0, [pc, #88]	; (4cec <bt_conn_set_state+0x170>)
    4c94:	f7fc fe74 	bl	1980 <printk>

		break;
    4c98:	e012      	b.n	4cc0 <bt_conn_set_state+0x144>
			bt_l2cap_disconnected(conn);
			notify_disconnected(conn);
			process_unack_tx(conn);

			/* Cancel Connection Update if it is pending */
			if (conn->type == BT_CONN_TYPE_LE) {
    4c9a:	78a3      	ldrb	r3, [r4, #2]
    4c9c:	2b00      	cmp	r3, #0
    4c9e:	d103      	bne.n	4ca8 <bt_conn_set_state+0x12c>
				k_delayed_work_cancel(&conn->le.update_work);
    4ca0:	0020      	movs	r0, r4
    4ca2:	3080      	adds	r0, #128	; 0x80
    4ca4:	f010 f8fc 	bl	14ea0 <k_delayed_work_cancel>
			}

			atomic_set_bit(conn->flags, BT_CONN_CLEANUP);
    4ca8:	1d20      	adds	r0, r4, #4
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_or(ATOMIC_ELEM(target, bit), mask);
    4caa:	2140      	movs	r1, #64	; 0x40
    4cac:	f00e ff5b 	bl	13b66 <atomic_or>
			k_poll_signal(&conn_change, 0);
    4cb0:	2100      	movs	r1, #0
    4cb2:	480a      	ldr	r0, [pc, #40]	; (4cdc <bt_conn_set_state+0x160>)
    4cb4:	f00f fac6 	bl	14244 <k_poll_signal>
    4cb8:	e002      	b.n	4cc0 <bt_conn_set_state+0x144>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    4cba:	2a00      	cmp	r2, #0
    4cbc:	d1b5      	bne.n	4c2a <bt_conn_set_state+0xae>
    4cbe:	e7b1      	b.n	4c24 <bt_conn_set_state+0xa8>
	default:
		BT_WARN("no valid (%u) state was set", state);

		break;
	}
}
    4cc0:	b005      	add	sp, #20
    4cc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4cc4:	000154c4 	.word	0x000154c4
    4cc8:	000154d1 	.word	0x000154d1
    4ccc:	0001550f 	.word	0x0001550f
    4cd0:	0001548b 	.word	0x0001548b
    4cd4:	00015d98 	.word	0x00015d98
    4cd8:	00017ad4 	.word	0x00017ad4
    4cdc:	20000e20 	.word	0x20000e20
    4ce0:	20000e2c 	.word	0x20000e2c
    4ce4:	20000e18 	.word	0x20000e18
    4ce8:	20000554 	.word	0x20000554
    4cec:	00015db6 	.word	0x00015db6

00004cf0 <bt_conn_lookup_handle>:

struct bt_conn *bt_conn_lookup_handle(u16_t handle)
{
    4cf0:	b570      	push	{r4, r5, r6, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(conns); i++) {
		if (!atomic_get(&conns[i].ref)) {
    4cf2:	4c0c      	ldr	r4, [pc, #48]	; (4d24 <bt_conn_lookup_handle+0x34>)
		break;
	}
}

struct bt_conn *bt_conn_lookup_handle(u16_t handle)
{
    4cf4:	0006      	movs	r6, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(conns); i++) {
		if (!atomic_get(&conns[i].ref)) {
    4cf6:	0025      	movs	r5, r4
    4cf8:	354c      	adds	r5, #76	; 0x4c
    4cfa:	0028      	movs	r0, r5
    4cfc:	f00e ff27 	bl	13b4e <atomic_get>
			return bt_conn_ref(&sco_conns[i]);
		}
	}
#endif

	return NULL;
    4d00:	2200      	movs	r2, #0
struct bt_conn *bt_conn_lookup_handle(u16_t handle)
{
	int i;

	for (i = 0; i < ARRAY_SIZE(conns); i++) {
		if (!atomic_get(&conns[i].ref)) {
    4d02:	4290      	cmp	r0, r2
    4d04:	d00c      	beq.n	4d20 <bt_conn_lookup_handle+0x30>
			continue;
		}

		/* We only care about connections with a valid handle */
		if (conns[i].state != BT_CONN_CONNECTED &&
    4d06:	0023      	movs	r3, r4
    4d08:	3351      	adds	r3, #81	; 0x51
    4d0a:	781b      	ldrb	r3, [r3, #0]
    4d0c:	3b03      	subs	r3, #3
    4d0e:	2b01      	cmp	r3, #1
    4d10:	d806      	bhi.n	4d20 <bt_conn_lookup_handle+0x30>
		    conns[i].state != BT_CONN_DISCONNECT) {
			continue;
		}

		if (conns[i].handle == handle) {
    4d12:	8823      	ldrh	r3, [r4, #0]
    4d14:	42b3      	cmp	r3, r6
    4d16:	d103      	bne.n	4d20 <bt_conn_lookup_handle+0x30>
	}
}

struct bt_conn *bt_conn_ref(struct bt_conn *conn)
{
	atomic_inc(&conn->ref);
    4d18:	0028      	movs	r0, r5
    4d1a:	f00e ff02 	bl	13b22 <atomic_inc>
		    conns[i].state != BT_CONN_DISCONNECT) {
			continue;
		}

		if (conns[i].handle == handle) {
			return bt_conn_ref(&conns[i]);
    4d1e:	0022      	movs	r2, r4
		}
	}
#endif

	return NULL;
}
    4d20:	0010      	movs	r0, r2
    4d22:	bd70      	pop	{r4, r5, r6, pc}
    4d24:	20000e30 	.word	0x20000e30

00004d28 <bt_conn_addr_le_cmp>:

int bt_conn_addr_le_cmp(const struct bt_conn *conn, const bt_addr_le_t *peer)
{
    4d28:	b570      	push	{r4, r5, r6, lr}
    4d2a:	000d      	movs	r5, r1
	/* Check against conn dst address as it may be the identity address */
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
    4d2c:	0001      	movs	r1, r0

	return NULL;
}

int bt_conn_addr_le_cmp(const struct bt_conn *conn, const bt_addr_le_t *peer)
{
    4d2e:	0004      	movs	r4, r0
	/* Check against conn dst address as it may be the identity address */
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
    4d30:	3154      	adds	r1, #84	; 0x54
	return memcmp(a, b, sizeof(*a));
}

static inline int bt_addr_le_cmp(const bt_addr_le_t *a, const bt_addr_le_t *b)
{
	return memcmp(a, b, sizeof(*a));
    4d32:	2207      	movs	r2, #7
    4d34:	0028      	movs	r0, r5
    4d36:	f7fb ffeb 	bl	d10 <memcmp>
    4d3a:	2800      	cmp	r0, #0
    4d3c:	d00a      	beq.n	4d54 <bt_conn_addr_le_cmp+0x2c>
		return 0;
	}

	/* Check against initial connection address */
	if (conn->role == BT_HCI_ROLE_MASTER) {
    4d3e:	78e3      	ldrb	r3, [r4, #3]
		return bt_addr_le_cmp(peer, &conn->le.resp_addr);
    4d40:	0021      	movs	r1, r4
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
		return 0;
	}

	/* Check against initial connection address */
	if (conn->role == BT_HCI_ROLE_MASTER) {
    4d42:	2b00      	cmp	r3, #0
    4d44:	d101      	bne.n	4d4a <bt_conn_addr_le_cmp+0x22>
		return bt_addr_le_cmp(peer, &conn->le.resp_addr);
    4d46:	3162      	adds	r1, #98	; 0x62
    4d48:	e000      	b.n	4d4c <bt_conn_addr_le_cmp+0x24>
	}

	return bt_addr_le_cmp(peer, &conn->le.init_addr);
    4d4a:	315b      	adds	r1, #91	; 0x5b
    4d4c:	2207      	movs	r2, #7
    4d4e:	0028      	movs	r0, r5
    4d50:	f7fb ffde 	bl	d10 <memcmp>
}
    4d54:	bd70      	pop	{r4, r5, r6, pc}
	...

00004d58 <bt_conn_lookup_addr_le>:

struct bt_conn *bt_conn_lookup_addr_le(const bt_addr_le_t *peer)
{
    4d58:	b570      	push	{r4, r5, r6, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(conns); i++) {
		if (!atomic_get(&conns[i].ref)) {
    4d5a:	4c0c      	ldr	r4, [pc, #48]	; (4d8c <bt_conn_lookup_addr_le+0x34>)

	return bt_addr_le_cmp(peer, &conn->le.init_addr);
}

struct bt_conn *bt_conn_lookup_addr_le(const bt_addr_le_t *peer)
{
    4d5c:	0006      	movs	r6, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(conns); i++) {
		if (!atomic_get(&conns[i].ref)) {
    4d5e:	0025      	movs	r5, r4
    4d60:	354c      	adds	r5, #76	; 0x4c
    4d62:	0028      	movs	r0, r5
    4d64:	f00e fef3 	bl	13b4e <atomic_get>
    4d68:	2800      	cmp	r0, #0
    4d6a:	d00d      	beq.n	4d88 <bt_conn_lookup_addr_le+0x30>
			continue;
		}

		if (conns[i].type != BT_CONN_TYPE_LE) {
    4d6c:	78a3      	ldrb	r3, [r4, #2]
    4d6e:	2b00      	cmp	r3, #0
    4d70:	d10a      	bne.n	4d88 <bt_conn_lookup_addr_le+0x30>
			continue;
		}

		if (!bt_conn_addr_le_cmp(&conns[i], peer)) {
    4d72:	0031      	movs	r1, r6
    4d74:	0020      	movs	r0, r4
    4d76:	f7ff ffd7 	bl	4d28 <bt_conn_addr_le_cmp>
    4d7a:	2800      	cmp	r0, #0
    4d7c:	d104      	bne.n	4d88 <bt_conn_lookup_addr_le+0x30>
	}
}

struct bt_conn *bt_conn_ref(struct bt_conn *conn)
{
	atomic_inc(&conn->ref);
    4d7e:	0028      	movs	r0, r5
    4d80:	f00e fecf 	bl	13b22 <atomic_inc>

		if (conns[i].type != BT_CONN_TYPE_LE) {
			continue;
		}

		if (!bt_conn_addr_le_cmp(&conns[i], peer)) {
    4d84:	0020      	movs	r0, r4
			return bt_conn_ref(&conns[i]);
    4d86:	e000      	b.n	4d8a <bt_conn_lookup_addr_le+0x32>
		}
	}

	return NULL;
    4d88:	2000      	movs	r0, #0
}
    4d8a:	bd70      	pop	{r4, r5, r6, pc}
    4d8c:	20000e30 	.word	0x20000e30

00004d90 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
    4d90:	b570      	push	{r4, r5, r6, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(conns); i++) {
		if (!atomic_get(&conns[i].ref)) {
    4d92:	4c10      	ldr	r4, [pc, #64]	; (4dd4 <bt_conn_lookup_state_le+0x44>)
	return NULL;
}

struct bt_conn *bt_conn_lookup_state_le(const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
    4d94:	0005      	movs	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(conns); i++) {
		if (!atomic_get(&conns[i].ref)) {
    4d96:	0020      	movs	r0, r4
    4d98:	304c      	adds	r0, #76	; 0x4c
	return NULL;
}

struct bt_conn *bt_conn_lookup_state_le(const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
    4d9a:	000e      	movs	r6, r1
	int i;

	for (i = 0; i < ARRAY_SIZE(conns); i++) {
		if (!atomic_get(&conns[i].ref)) {
    4d9c:	f00e fed7 	bl	13b4e <atomic_get>
    4da0:	2800      	cmp	r0, #0
    4da2:	d015      	beq.n	4dd0 <bt_conn_lookup_state_le+0x40>
			continue;
		}

		if (conns[i].type != BT_CONN_TYPE_LE) {
    4da4:	78a3      	ldrb	r3, [r4, #2]
    4da6:	2b00      	cmp	r3, #0
    4da8:	d112      	bne.n	4dd0 <bt_conn_lookup_state_le+0x40>
			continue;
		}

		if (peer && bt_conn_addr_le_cmp(&conns[i], peer)) {
    4daa:	2d00      	cmp	r5, #0
    4dac:	d10a      	bne.n	4dc4 <bt_conn_lookup_state_le+0x34>
			continue;
		}

		if (conns[i].state == state) {
    4dae:	0023      	movs	r3, r4
    4db0:	3351      	adds	r3, #81	; 0x51
    4db2:	781b      	ldrb	r3, [r3, #0]
    4db4:	42b3      	cmp	r3, r6
    4db6:	d10b      	bne.n	4dd0 <bt_conn_lookup_state_le+0x40>
	}
}

struct bt_conn *bt_conn_ref(struct bt_conn *conn)
{
	atomic_inc(&conn->ref);
    4db8:	0020      	movs	r0, r4
    4dba:	304c      	adds	r0, #76	; 0x4c
    4dbc:	f00e feb1 	bl	13b22 <atomic_inc>
		if (peer && bt_conn_addr_le_cmp(&conns[i], peer)) {
			continue;
		}

		if (conns[i].state == state) {
			return bt_conn_ref(&conns[i]);
    4dc0:	0020      	movs	r0, r4
    4dc2:	e006      	b.n	4dd2 <bt_conn_lookup_state_le+0x42>

		if (conns[i].type != BT_CONN_TYPE_LE) {
			continue;
		}

		if (peer && bt_conn_addr_le_cmp(&conns[i], peer)) {
    4dc4:	0029      	movs	r1, r5
    4dc6:	0020      	movs	r0, r4
    4dc8:	f7ff ffae 	bl	4d28 <bt_conn_addr_le_cmp>
    4dcc:	2800      	cmp	r0, #0
    4dce:	d0ee      	beq.n	4dae <bt_conn_lookup_state_le+0x1e>
		if (conns[i].state == state) {
			return bt_conn_ref(&conns[i]);
		}
	}

	return NULL;
    4dd0:	2000      	movs	r0, #0
}
    4dd2:	bd70      	pop	{r4, r5, r6, pc}
    4dd4:	20000e30 	.word	0x20000e30

00004dd8 <bt_conn_unref>:

	return conn;
}

void bt_conn_unref(struct bt_conn *conn)
{
    4dd8:	b510      	push	{r4, lr}
	atomic_dec(&conn->ref);
    4dda:	304c      	adds	r0, #76	; 0x4c
    4ddc:	f00e feac 	bl	13b38 <atomic_dec>

	BT_DBG("handle %u ref %u", conn->handle, atomic_get(&conn->ref));
}
    4de0:	bd10      	pop	{r4, pc}

00004de2 <bt_conn_get_dst>:

const bt_addr_le_t *bt_conn_get_dst(const struct bt_conn *conn)
{
	return &conn->le.dst;
    4de2:	3054      	adds	r0, #84	; 0x54
}
    4de4:	4770      	bx	lr
	...

00004de8 <bt_conn_disconnect>:
	if (IS_ENABLED(CONFIG_BLUETOOTH_CENTRAL) &&
	    conn->type == BT_CONN_TYPE_LE) {
		bt_le_set_auto_conn(&conn->le.dst, NULL);
	}

	switch (conn->state) {
    4de8:	0003      	movs	r3, r0
	 */
	return bt_l2cap_update_conn_param(conn, param);
}

int bt_conn_disconnect(struct bt_conn *conn, u8_t reason)
{
    4dea:	b570      	push	{r4, r5, r6, lr}
	if (IS_ENABLED(CONFIG_BLUETOOTH_CENTRAL) &&
	    conn->type == BT_CONN_TYPE_LE) {
		bt_le_set_auto_conn(&conn->le.dst, NULL);
	}

	switch (conn->state) {
    4dec:	3351      	adds	r3, #81	; 0x51
	 */
	return bt_l2cap_update_conn_param(conn, param);
}

int bt_conn_disconnect(struct bt_conn *conn, u8_t reason)
{
    4dee:	0005      	movs	r5, r0
	if (IS_ENABLED(CONFIG_BLUETOOTH_CENTRAL) &&
	    conn->type == BT_CONN_TYPE_LE) {
		bt_le_set_auto_conn(&conn->le.dst, NULL);
	}

	switch (conn->state) {
    4df0:	7818      	ldrb	r0, [r3, #0]
	 */
	return bt_l2cap_update_conn_param(conn, param);
}

int bt_conn_disconnect(struct bt_conn *conn, u8_t reason)
{
    4df2:	000c      	movs	r4, r1
	if (IS_ENABLED(CONFIG_BLUETOOTH_CENTRAL) &&
	    conn->type == BT_CONN_TYPE_LE) {
		bt_le_set_auto_conn(&conn->le.dst, NULL);
	}

	switch (conn->state) {
    4df4:	3801      	subs	r0, #1
    4df6:	2803      	cmp	r0, #3
    4df8:	d803      	bhi.n	4e02 <bt_conn_disconnect+0x1a>
    4dfa:	f7fb f9bd 	bl	178 <__gnu_thumb1_case_uqi>
    4dfe:	2904      	.short	0x2904
    4e00:	290f      	.short	0x290f
		return bt_hci_disconnect(conn, reason);
	case BT_CONN_DISCONNECT:
		return 0;
	case BT_CONN_DISCONNECTED:
	default:
		return -ENOTCONN;
    4e02:	2439      	movs	r4, #57	; 0x39
    4e04:	e027      	b.n	4e56 <bt_conn_disconnect+0x6e>
		bt_le_set_auto_conn(&conn->le.dst, NULL);
	}

	switch (conn->state) {
	case BT_CONN_CONNECT_SCAN:
		conn->err = reason;
    4e06:	002b      	movs	r3, r5
    4e08:	3350      	adds	r3, #80	; 0x50
    4e0a:	7019      	strb	r1, [r3, #0]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    4e0c:	0028      	movs	r0, r5
    4e0e:	2100      	movs	r1, #0
    4e10:	f7ff feb4 	bl	4b7c <bt_conn_set_state>
		bt_le_scan_update(false);
    4e14:	2000      	movs	r0, #0
    4e16:	f7fd fd83 	bl	2920 <bt_le_scan_update>
    4e1a:	e019      	b.n	4e50 <bt_conn_disconnect+0x68>
{
	struct net_buf *buf;
	struct bt_hci_cp_disconnect *disconn;
	int err;

	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
    4e1c:	2103      	movs	r1, #3
    4e1e:	480f      	ldr	r0, [pc, #60]	; (4e5c <bt_conn_disconnect+0x74>)
    4e20:	f7fd fbba 	bl	2598 <bt_hci_cmd_create>
    4e24:	1e06      	subs	r6, r0, #0
	if (!buf) {
    4e26:	d015      	beq.n	4e54 <bt_conn_disconnect+0x6c>
		return -ENOBUFS;
	}

	disconn = net_buf_add(buf, sizeof(*disconn));
    4e28:	2103      	movs	r1, #3
    4e2a:	3008      	adds	r0, #8
    4e2c:	f00e fbca 	bl	135c4 <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(conn->handle);
    4e30:	782b      	ldrb	r3, [r5, #0]
	disconn->reason = reason;

	err = bt_hci_cmd_send(BT_HCI_OP_DISCONNECT, buf);
    4e32:	0031      	movs	r1, r6
	if (!buf) {
		return -ENOBUFS;
	}

	disconn = net_buf_add(buf, sizeof(*disconn));
	disconn->handle = sys_cpu_to_le16(conn->handle);
    4e34:	7003      	strb	r3, [r0, #0]
    4e36:	786b      	ldrb	r3, [r5, #1]
	disconn->reason = reason;
    4e38:	7084      	strb	r4, [r0, #2]
	if (!buf) {
		return -ENOBUFS;
	}

	disconn = net_buf_add(buf, sizeof(*disconn));
	disconn->handle = sys_cpu_to_le16(conn->handle);
    4e3a:	7043      	strb	r3, [r0, #1]
	disconn->reason = reason;

	err = bt_hci_cmd_send(BT_HCI_OP_DISCONNECT, buf);
    4e3c:	4807      	ldr	r0, [pc, #28]	; (4e5c <bt_conn_disconnect+0x74>)
    4e3e:	f7fe f919 	bl	3074 <bt_hci_cmd_send>
    4e42:	1e04      	subs	r4, r0, #0
	if (err) {
    4e44:	d108      	bne.n	4e58 <bt_conn_disconnect+0x70>
		return err;
	}

	bt_conn_set_state(conn, BT_CONN_DISCONNECT);
    4e46:	2104      	movs	r1, #4
    4e48:	0028      	movs	r0, r5
    4e4a:	f7ff fe97 	bl	4b7c <bt_conn_set_state>
    4e4e:	e003      	b.n	4e58 <bt_conn_disconnect+0x70>
			k_delayed_work_cancel(&conn->le.update_work);
			return bt_hci_cmd_send(BT_HCI_OP_LE_CREATE_CONN_CANCEL,
					       NULL);
		}

		return 0;
    4e50:	2400      	movs	r4, #0
    4e52:	e001      	b.n	4e58 <bt_conn_disconnect+0x70>
	struct bt_hci_cp_disconnect *disconn;
	int err;

	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
	if (!buf) {
		return -ENOBUFS;
    4e54:	2437      	movs	r4, #55	; 0x37
    4e56:	4264      	negs	r4, r4
		return 0;
	case BT_CONN_DISCONNECTED:
	default:
		return -ENOTCONN;
	}
}
    4e58:	0020      	movs	r0, r4
    4e5a:	bd70      	pop	{r4, r5, r6, pc}
    4e5c:	00000406 	.word	0x00000406

00004e60 <bt_conn_le_conn_update>:
}
#endif /* CONFIG_BLUETOOTH_PERIPHERAL */

int bt_conn_le_conn_update(struct bt_conn *conn,
			   const struct bt_le_conn_param *param)
{
    4e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4e62:	0007      	movs	r7, r0
    4e64:	000d      	movs	r5, r1
	struct hci_cp_le_conn_update *conn_update;
	struct net_buf *buf;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
    4e66:	4815      	ldr	r0, [pc, #84]	; (4ebc <bt_conn_le_conn_update+0x5c>)
    4e68:	210e      	movs	r1, #14
    4e6a:	f7fd fb95 	bl	2598 <bt_hci_cmd_create>
    4e6e:	1e06      	subs	r6, r0, #0
				sizeof(*conn_update));
	if (!buf) {
    4e70:	d021      	beq.n	4eb6 <bt_conn_le_conn_update+0x56>
		return -ENOBUFS;
	}

	conn_update = net_buf_add(buf, sizeof(*conn_update));
    4e72:	210e      	movs	r1, #14
    4e74:	3008      	adds	r0, #8
    4e76:	f00e fba5 	bl	135c4 <net_buf_simple_add>
    4e7a:	0004      	movs	r4, r0
	memset(conn_update, 0, sizeof(*conn_update));
    4e7c:	220e      	movs	r2, #14
    4e7e:	2100      	movs	r1, #0
    4e80:	f7fb ff85 	bl	d8e <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
    4e84:	783b      	ldrb	r3, [r7, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);

	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_UPDATE, buf);
    4e86:	0031      	movs	r1, r6
		return -ENOBUFS;
	}

	conn_update = net_buf_add(buf, sizeof(*conn_update));
	memset(conn_update, 0, sizeof(*conn_update));
	conn_update->handle = sys_cpu_to_le16(conn->handle);
    4e88:	7023      	strb	r3, [r4, #0]
    4e8a:	787b      	ldrb	r3, [r7, #1]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);

	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_UPDATE, buf);
    4e8c:	480b      	ldr	r0, [pc, #44]	; (4ebc <bt_conn_le_conn_update+0x5c>)
		return -ENOBUFS;
	}

	conn_update = net_buf_add(buf, sizeof(*conn_update));
	memset(conn_update, 0, sizeof(*conn_update));
	conn_update->handle = sys_cpu_to_le16(conn->handle);
    4e8e:	7063      	strb	r3, [r4, #1]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
    4e90:	782b      	ldrb	r3, [r5, #0]
    4e92:	70a3      	strb	r3, [r4, #2]
    4e94:	786b      	ldrb	r3, [r5, #1]
    4e96:	70e3      	strb	r3, [r4, #3]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
    4e98:	78ab      	ldrb	r3, [r5, #2]
    4e9a:	7123      	strb	r3, [r4, #4]
    4e9c:	78eb      	ldrb	r3, [r5, #3]
    4e9e:	7163      	strb	r3, [r4, #5]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
    4ea0:	792b      	ldrb	r3, [r5, #4]
    4ea2:	71a3      	strb	r3, [r4, #6]
    4ea4:	796b      	ldrb	r3, [r5, #5]
    4ea6:	71e3      	strb	r3, [r4, #7]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
    4ea8:	79ab      	ldrb	r3, [r5, #6]
    4eaa:	7223      	strb	r3, [r4, #8]
    4eac:	79eb      	ldrb	r3, [r5, #7]
    4eae:	7263      	strb	r3, [r4, #9]

	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_UPDATE, buf);
    4eb0:	f7fe f8e0 	bl	3074 <bt_hci_cmd_send>
    4eb4:	e001      	b.n	4eba <bt_conn_le_conn_update+0x5a>
	struct net_buf *buf;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
				sizeof(*conn_update));
	if (!buf) {
		return -ENOBUFS;
    4eb6:	2037      	movs	r0, #55	; 0x37
    4eb8:	4240      	negs	r0, r0
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);

	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_UPDATE, buf);
}
    4eba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4ebc:	00002013 	.word	0x00002013

00004ec0 <bt_conn_le_param_update>:
	BT_DBG("conn %p features 0x%02x params (%d-%d %d %d)", conn,
	       conn->le.features[0], param->interval_min,
	       param->interval_max, param->latency, param->timeout);

	/* Check if there's a need to update conn params */
	if (conn->le.interval >= param->interval_min &&
    4ec0:	0003      	movs	r3, r0
	return 0;
}

int bt_conn_le_param_update(struct bt_conn *conn,
			    const struct bt_le_conn_param *param)
{
    4ec2:	b570      	push	{r4, r5, r6, lr}
	BT_DBG("conn %p features 0x%02x params (%d-%d %d %d)", conn,
	       conn->le.features[0], param->interval_min,
	       param->interval_max, param->latency, param->timeout);

	/* Check if there's a need to update conn params */
	if (conn->le.interval >= param->interval_min &&
    4ec4:	336a      	adds	r3, #106	; 0x6a
    4ec6:	881b      	ldrh	r3, [r3, #0]
    4ec8:	880a      	ldrh	r2, [r1, #0]
	return 0;
}

int bt_conn_le_param_update(struct bt_conn *conn,
			    const struct bt_le_conn_param *param)
{
    4eca:	0004      	movs	r4, r0
    4ecc:	000d      	movs	r5, r1
	BT_DBG("conn %p features 0x%02x params (%d-%d %d %d)", conn,
	       conn->le.features[0], param->interval_min,
	       param->interval_max, param->latency, param->timeout);

	/* Check if there's a need to update conn params */
	if (conn->le.interval >= param->interval_min &&
    4ece:	429a      	cmp	r2, r3
    4ed0:	d80e      	bhi.n	4ef0 <bt_conn_le_param_update+0x30>
    4ed2:	884a      	ldrh	r2, [r1, #2]
    4ed4:	429a      	cmp	r2, r3
    4ed6:	d30b      	bcc.n	4ef0 <bt_conn_le_param_update+0x30>
	    conn->le.interval <= param->interval_max &&
	    conn->le.latency == param->latency &&
    4ed8:	0003      	movs	r3, r0
    4eda:	3370      	adds	r3, #112	; 0x70
	       conn->le.features[0], param->interval_min,
	       param->interval_max, param->latency, param->timeout);

	/* Check if there's a need to update conn params */
	if (conn->le.interval >= param->interval_min &&
	    conn->le.interval <= param->interval_max &&
    4edc:	881a      	ldrh	r2, [r3, #0]
    4ede:	888b      	ldrh	r3, [r1, #4]
    4ee0:	429a      	cmp	r2, r3
    4ee2:	d105      	bne.n	4ef0 <bt_conn_le_param_update+0x30>
	    conn->le.latency == param->latency &&
	    conn->le.timeout == param->timeout) {
    4ee4:	0003      	movs	r3, r0
    4ee6:	3372      	adds	r3, #114	; 0x72
	       param->interval_max, param->latency, param->timeout);

	/* Check if there's a need to update conn params */
	if (conn->le.interval >= param->interval_min &&
	    conn->le.interval <= param->interval_max &&
	    conn->le.latency == param->latency &&
    4ee8:	881a      	ldrh	r2, [r3, #0]
    4eea:	88cb      	ldrh	r3, [r1, #6]
    4eec:	429a      	cmp	r2, r3
    4eee:	d01b      	beq.n	4f28 <bt_conn_le_param_update+0x68>
	    conn->le.timeout == param->timeout) {
		return -EALREADY;
	}

	/* Cancel any pending update */
	k_delayed_work_cancel(&conn->le.update_work);
    4ef0:	0020      	movs	r0, r4
    4ef2:	3080      	adds	r0, #128	; 0x80
    4ef4:	f00f ffd4 	bl	14ea0 <k_delayed_work_cancel>

	/* Use LE connection parameter request if both local and remote support
	 * it; or if local role is master then use LE connection update.
	 */
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    4ef8:	4b0d      	ldr	r3, [pc, #52]	; (4f30 <bt_conn_le_param_update+0x70>)
    4efa:	3370      	adds	r3, #112	; 0x70
    4efc:	781a      	ldrb	r2, [r3, #0]
    4efe:	2302      	movs	r3, #2
    4f00:	421a      	tst	r2, r3
    4f02:	d004      	beq.n	4f0e <bt_conn_le_param_update+0x4e>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features)) ||
    4f04:	0022      	movs	r2, r4
    4f06:	3274      	adds	r2, #116	; 0x74
	k_delayed_work_cancel(&conn->le.update_work);

	/* Use LE connection parameter request if both local and remote support
	 * it; or if local role is master then use LE connection update.
	 */
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    4f08:	7812      	ldrb	r2, [r2, #0]
    4f0a:	421a      	tst	r2, r3
    4f0c:	d102      	bne.n	4f14 <bt_conn_le_param_update+0x54>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features)) ||
    4f0e:	78e3      	ldrb	r3, [r4, #3]
    4f10:	2b00      	cmp	r3, #0
    4f12:	d104      	bne.n	4f1e <bt_conn_le_param_update+0x5e>
	    (conn->role == BT_HCI_ROLE_MASTER)) {
		return bt_conn_le_conn_update(conn, param);
    4f14:	0029      	movs	r1, r5
    4f16:	0020      	movs	r0, r4
    4f18:	f7ff ffa2 	bl	4e60 <bt_conn_le_conn_update>
    4f1c:	e006      	b.n	4f2c <bt_conn_le_param_update+0x6c>
	}

	/* If remote master does not support LL Connection Parameters Request
	 * Procedure
	 */
	return bt_l2cap_update_conn_param(conn, param);
    4f1e:	0029      	movs	r1, r5
    4f20:	0020      	movs	r0, r4
    4f22:	f000 fb1b 	bl	555c <bt_l2cap_update_conn_param>
    4f26:	e001      	b.n	4f2c <bt_conn_le_param_update+0x6c>
	/* Check if there's a need to update conn params */
	if (conn->le.interval >= param->interval_min &&
	    conn->le.interval <= param->interval_max &&
	    conn->le.latency == param->latency &&
	    conn->le.timeout == param->timeout) {
		return -EALREADY;
    4f28:	2045      	movs	r0, #69	; 0x45
    4f2a:	4240      	negs	r0, r0

	/* If remote master does not support LL Connection Parameters Request
	 * Procedure
	 */
	return bt_l2cap_update_conn_param(conn, param);
}
    4f2c:	bd70      	pop	{r4, r5, r6, pc}
    4f2e:	46c0      	nop			; (mov r8, r8)
    4f30:	200004d0 	.word	0x200004d0

00004f34 <le_conn_update>:
	/* Default to accepting if there's no app callback */
	return true;
}

static void le_conn_update(struct k_work *work)
{
    4f34:	b507      	push	{r0, r1, r2, lr}
	    conn->state == BT_CONN_CONNECT) {
		bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
		return;
	}

	param = BT_LE_CONN_PARAM(conn->le.interval_min,
    4f36:	0003      	movs	r3, r0
    4f38:	4669      	mov	r1, sp
    4f3a:	3b14      	subs	r3, #20
    4f3c:	881b      	ldrh	r3, [r3, #0]
    4f3e:	0002      	movs	r2, r0
    4f40:	800b      	strh	r3, [r1, #0]
    4f42:	0003      	movs	r3, r0
    4f44:	3b12      	subs	r3, #18
    4f46:	881b      	ldrh	r3, [r3, #0]
    4f48:	3a80      	subs	r2, #128	; 0x80
    4f4a:	804b      	strh	r3, [r1, #2]
    4f4c:	0003      	movs	r3, r0
    4f4e:	3b10      	subs	r3, #16
    4f50:	881b      	ldrh	r3, [r3, #0]
    4f52:	808b      	strh	r3, [r1, #4]
    4f54:	0003      	movs	r3, r0
    4f56:	3b0e      	subs	r3, #14
    4f58:	881b      	ldrh	r3, [r3, #0]
				 conn->le.interval_max,
				 conn->le.latency,
				 conn->le.timeout);

	bt_conn_le_param_update(conn, param);
    4f5a:	0010      	movs	r0, r2
	    conn->state == BT_CONN_CONNECT) {
		bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
		return;
	}

	param = BT_LE_CONN_PARAM(conn->le.interval_min,
    4f5c:	80cb      	strh	r3, [r1, #6]
				 conn->le.interval_max,
				 conn->le.latency,
				 conn->le.timeout);

	bt_conn_le_param_update(conn, param);
    4f5e:	f7ff ffaf 	bl	4ec0 <bt_conn_le_param_update>
}
    4f62:	bd07      	pop	{r0, r1, r2, pc}

00004f64 <bt_conn_create_pdu>:

	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_UPDATE, buf);
}

struct net_buf *bt_conn_create_pdu(struct net_buf_pool *pool, size_t reserve)
{
    4f64:	b570      	push	{r4, r5, r6, lr}
    4f66:	000c      	movs	r4, r1
	struct net_buf *buf;

	if (!pool) {
    4f68:	2800      	cmp	r0, #0
    4f6a:	d100      	bne.n	4f6e <bt_conn_create_pdu+0xa>
		pool = &acl_tx_pool;
    4f6c:	4805      	ldr	r0, [pc, #20]	; (4f84 <bt_conn_create_pdu+0x20>)
	}

	buf = net_buf_alloc(pool, K_FOREVER);
    4f6e:	2101      	movs	r1, #1
    4f70:	4249      	negs	r1, r1
    4f72:	f00e fa91 	bl	13498 <net_buf_alloc>
    4f76:	0005      	movs	r5, r0
	__ASSERT_NO_MSG(buf);

	reserve += sizeof(struct bt_hci_acl_hdr) + CONFIG_BLUETOOTH_HCI_RESERVE;
	net_buf_reserve(buf, reserve);
    4f78:	1d21      	adds	r1, r4, #4
    4f7a:	f00e faed 	bl	13558 <net_buf_reserve>

	return buf;
}
    4f7e:	0028      	movs	r0, r5
    4f80:	bd70      	pop	{r4, r5, r6, pc}
    4f82:	46c0      	nop			; (mov r8, r8)
    4f84:	200009d0 	.word	0x200009d0

00004f88 <create_frag.isra.6>:
#endif /* CONFIG_BLUETOOTH_BREDR */

	return bt_dev.le.mtu;
}

static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
    4f88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4f8a:	000f      	movs	r7, r1
{
	struct net_buf *frag;
	u16_t frag_len;

	frag = bt_conn_create_pdu(NULL, 0);
    4f8c:	2100      	movs	r1, #0
#endif /* CONFIG_BLUETOOTH_BREDR */

	return bt_dev.le.mtu;
}

static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
    4f8e:	0005      	movs	r5, r0
{
	struct net_buf *frag;
	u16_t frag_len;

	frag = bt_conn_create_pdu(NULL, 0);
    4f90:	0008      	movs	r0, r1
    4f92:	f7ff ffe7 	bl	4f64 <bt_conn_create_pdu>

	if (conn->state != BT_CONN_CONNECTED) {
    4f96:	782a      	ldrb	r2, [r5, #0]
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
{
	struct net_buf *frag;
	u16_t frag_len;

	frag = bt_conn_create_pdu(NULL, 0);
    4f98:	0004      	movs	r4, r0

	if (conn->state != BT_CONN_CONNECTED) {
    4f9a:	2a03      	cmp	r2, #3
    4f9c:	d003      	beq.n	4fa6 <create_frag.isra.6+0x1e>
		net_buf_unref(frag);
    4f9e:	f00e faef 	bl	13580 <net_buf_unref>
		return NULL;
    4fa2:	2000      	movs	r0, #0
    4fa4:	e022      	b.n	4fec <create_frag.isra.6+0x64>
	}

	/* Fragments never have a TX completion callback */
	conn_tx(frag)->cb = NULL;
    4fa6:	89c3      	ldrh	r3, [r0, #14]

	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    4fa8:	0006      	movs	r6, r0
		net_buf_unref(frag);
		return NULL;
	}

	/* Fragments never have a TX completion callback */
	conn_tx(frag)->cb = NULL;
    4faa:	18c3      	adds	r3, r0, r3
    4fac:	3313      	adds	r3, #19
    4fae:	4393      	bics	r3, r2
    4fb0:	2200      	movs	r2, #0
	if (conn->type == BT_CONN_TYPE_BR || !bt_dev.le.mtu) {
		return bt_dev.br.mtu;
	}
#endif /* CONFIG_BLUETOOTH_BREDR */

	return bt_dev.le.mtu;
    4fb2:	4d0f      	ldr	r5, [pc, #60]	; (4ff0 <create_frag.isra.6+0x68>)
		net_buf_unref(frag);
		return NULL;
	}

	/* Fragments never have a TX completion callback */
	conn_tx(frag)->cb = NULL;
    4fb4:	601a      	str	r2, [r3, #0]
	if (conn->type == BT_CONN_TYPE_BR || !bt_dev.le.mtu) {
		return bt_dev.br.mtu;
	}
#endif /* CONFIG_BLUETOOTH_BREDR */

	return bt_dev.le.mtu;
    4fb6:	3580      	adds	r5, #128	; 0x80
	}

	/* Fragments never have a TX completion callback */
	conn_tx(frag)->cb = NULL;

	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    4fb8:	882b      	ldrh	r3, [r5, #0]
    4fba:	3608      	adds	r6, #8
    4fbc:	0030      	movs	r0, r6
    4fbe:	9301      	str	r3, [sp, #4]
    4fc0:	f00e fb41 	bl	13646 <net_buf_simple_tailroom>
    4fc4:	9b01      	ldr	r3, [sp, #4]
    4fc6:	4283      	cmp	r3, r0
    4fc8:	d201      	bcs.n	4fce <create_frag.isra.6+0x46>
	if (conn->type == BT_CONN_TYPE_BR || !bt_dev.le.mtu) {
		return bt_dev.br.mtu;
	}
#endif /* CONFIG_BLUETOOTH_BREDR */

	return bt_dev.le.mtu;
    4fca:	882d      	ldrh	r5, [r5, #0]
    4fcc:	e003      	b.n	4fd6 <create_frag.isra.6+0x4e>
	}

	/* Fragments never have a TX completion callback */
	conn_tx(frag)->cb = NULL;

	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    4fce:	0030      	movs	r0, r6
    4fd0:	f00e fb39 	bl	13646 <net_buf_simple_tailroom>
    4fd4:	b285      	uxth	r5, r0

	net_buf_add_mem(frag, buf->data, frag_len);
    4fd6:	002a      	movs	r2, r5
    4fd8:	68b9      	ldr	r1, [r7, #8]
    4fda:	0030      	movs	r0, r6
    4fdc:	f00e faf9 	bl	135d2 <net_buf_simple_add_mem>
	net_buf_pull(buf, frag_len);
    4fe0:	0038      	movs	r0, r7
    4fe2:	0029      	movs	r1, r5
    4fe4:	3008      	adds	r0, #8
    4fe6:	f00e fb0e 	bl	13606 <net_buf_simple_pull>
    4fea:	0020      	movs	r0, r4

	return frag;
}
    4fec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    4fee:	46c0      	nop			; (mov r8, r8)
    4ff0:	200004d0 	.word	0x200004d0

00004ff4 <bt_conn_process_tx>:

	return ev_count;
}

void bt_conn_process_tx(struct bt_conn *conn)
{
    4ff4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct net_buf *buf;

	BT_DBG("conn %p", conn);

	if (conn->state == BT_CONN_DISCONNECTED &&
    4ff6:	0007      	movs	r7, r0
    4ff8:	3751      	adds	r7, #81	; 0x51
    4ffa:	783b      	ldrb	r3, [r7, #0]

	return ev_count;
}

void bt_conn_process_tx(struct bt_conn *conn)
{
    4ffc:	0005      	movs	r5, r0
	struct net_buf *buf;

	BT_DBG("conn %p", conn);

	if (conn->state == BT_CONN_DISCONNECTED &&
    4ffe:	2b00      	cmp	r3, #0
    5000:	d10a      	bne.n	5018 <bt_conn_process_tx+0x24>
static inline int atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    5002:	2141      	movs	r1, #65	; 0x41
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_CLEANUP)) {
    5004:	3004      	adds	r0, #4
    5006:	4249      	negs	r1, r1
    5008:	f00e fdb8 	bl	13b7c <atomic_and>
{
	struct net_buf *buf;

	BT_DBG("conn %p", conn);

	if (conn->state == BT_CONN_DISCONNECTED &&
    500c:	0643      	lsls	r3, r0, #25
    500e:	d503      	bpl.n	5018 <bt_conn_process_tx+0x24>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_CLEANUP)) {
		BT_DBG("handle %u disconnected - cleaning up", conn->handle);
		conn_cleanup(conn);
    5010:	0028      	movs	r0, r5
    5012:	f7ff faf3 	bl	45fc <conn_cleanup>
		return;
    5016:	e044      	b.n	50a2 <bt_conn_process_tx+0xae>
	}

	/* Get next ACL packet for connection */
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
    5018:	0028      	movs	r0, r5
    501a:	2100      	movs	r1, #0
    501c:	3030      	adds	r0, #48	; 0x30
    501e:	f00e fa83 	bl	13528 <net_buf_get>
    5022:	1e04      	subs	r4, r0, #0
	BT_ASSERT(buf);
    5024:	d10c      	bne.n	5040 <bt_conn_process_tx+0x4c>
    5026:	4b1f      	ldr	r3, [pc, #124]	; (50a4 <bt_conn_process_tx+0xb0>)
    5028:	4a1f      	ldr	r2, [pc, #124]	; (50a8 <bt_conn_process_tx+0xb4>)
    502a:	9301      	str	r3, [sp, #4]
    502c:	4b1f      	ldr	r3, [pc, #124]	; (50ac <bt_conn_process_tx+0xb8>)
    502e:	4920      	ldr	r1, [pc, #128]	; (50b0 <bt_conn_process_tx+0xbc>)
    5030:	9300      	str	r3, [sp, #0]
    5032:	4820      	ldr	r0, [pc, #128]	; (50b4 <bt_conn_process_tx+0xc0>)
    5034:	4b20      	ldr	r3, [pc, #128]	; (50b8 <bt_conn_process_tx+0xc4>)
    5036:	f7fc fca3 	bl	1980 <printk>
    503a:	b662      	cpsie	i
    503c:	2004      	movs	r0, #4
    503e:	df02      	svc	2
	if (conn->type == BT_CONN_TYPE_BR || !bt_dev.le.mtu) {
		return bt_dev.br.mtu;
	}
#endif /* CONFIG_BLUETOOTH_BREDR */

	return bt_dev.le.mtu;
    5040:	4e1e      	ldr	r6, [pc, #120]	; (50bc <bt_conn_process_tx+0xc8>)
	struct net_buf *frag;

	BT_DBG("conn %p buf %p len %u", conn, buf, buf->len);

	/* Send directly if the packet fits the ACL MTU */
	if (buf->len <= conn_mtu(conn)) {
    5042:	8982      	ldrh	r2, [r0, #12]
	if (conn->type == BT_CONN_TYPE_BR || !bt_dev.le.mtu) {
		return bt_dev.br.mtu;
	}
#endif /* CONFIG_BLUETOOTH_BREDR */

	return bt_dev.le.mtu;
    5044:	0033      	movs	r3, r6
    5046:	3380      	adds	r3, #128	; 0x80
	struct net_buf *frag;

	BT_DBG("conn %p buf %p len %u", conn, buf, buf->len);

	/* Send directly if the packet fits the ACL MTU */
	if (buf->len <= conn_mtu(conn)) {
    5048:	881b      	ldrh	r3, [r3, #0]
    504a:	429a      	cmp	r2, r3
    504c:	d802      	bhi.n	5054 <bt_conn_process_tx+0x60>
		return send_frag(conn, buf, BT_ACL_START_NO_FLUSH, false);
    504e:	2300      	movs	r3, #0
    5050:	001a      	movs	r2, r3
    5052:	e01d      	b.n	5090 <bt_conn_process_tx+0x9c>
	}

	/* Create & enqueue first fragment */
	frag = create_frag(conn, buf);
    5054:	0001      	movs	r1, r0
    5056:	0038      	movs	r0, r7
    5058:	f7ff ff96 	bl	4f88 <create_frag.isra.6>
    505c:	1e01      	subs	r1, r0, #0
	if (!frag) {
    505e:	d01d      	beq.n	509c <bt_conn_process_tx+0xa8>
		return false;
	}

	if (!send_frag(conn, frag, BT_ACL_START_NO_FLUSH, true)) {
    5060:	2301      	movs	r3, #1
    5062:	2200      	movs	r2, #0
		frag = create_frag(conn, buf);
		if (!frag) {
			return false;
		}

		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
    5064:	0028      	movs	r0, r5
    5066:	f7ff fc7b 	bl	4960 <send_frag>
    506a:	2800      	cmp	r0, #0
    506c:	d016      	beq.n	509c <bt_conn_process_tx+0xa8>
	if (conn->type == BT_CONN_TYPE_BR || !bt_dev.le.mtu) {
		return bt_dev.br.mtu;
	}
#endif /* CONFIG_BLUETOOTH_BREDR */

	return bt_dev.le.mtu;
    506e:	0033      	movs	r3, r6
    5070:	3380      	adds	r3, #128	; 0x80

	/*
	 * Send the fragments. For the last one simply use the original
	 * buffer (which works since we've used net_buf_pull on it.
	 */
	while (buf->len > conn_mtu(conn)) {
    5072:	89a2      	ldrh	r2, [r4, #12]
    5074:	881b      	ldrh	r3, [r3, #0]
    5076:	429a      	cmp	r2, r3
    5078:	d908      	bls.n	508c <bt_conn_process_tx+0x98>
		frag = create_frag(conn, buf);
    507a:	0021      	movs	r1, r4
    507c:	0038      	movs	r0, r7
    507e:	f7ff ff83 	bl	4f88 <create_frag.isra.6>
    5082:	1e01      	subs	r1, r0, #0
		if (!frag) {
    5084:	d00a      	beq.n	509c <bt_conn_process_tx+0xa8>
			return false;
		}

		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
    5086:	2301      	movs	r3, #1
    5088:	001a      	movs	r2, r3
    508a:	e7eb      	b.n	5064 <bt_conn_process_tx+0x70>
			return false;
		}
	}

	return send_frag(conn, buf, BT_ACL_CONT, false);
    508c:	2300      	movs	r3, #0
    508e:	2201      	movs	r2, #1
    5090:	0021      	movs	r1, r4
    5092:	0028      	movs	r0, r5
    5094:	f7ff fc64 	bl	4960 <send_frag>
	}

	/* Get next ACL packet for connection */
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
	BT_ASSERT(buf);
	if (!send_buf(conn, buf)) {
    5098:	2800      	cmp	r0, #0
    509a:	d102      	bne.n	50a2 <bt_conn_process_tx+0xae>
		net_buf_unref(buf);
    509c:	0020      	movs	r0, r4
    509e:	f00e fa6f 	bl	13580 <net_buf_unref>
	}
}
    50a2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    50a4:	000154c4 	.word	0x000154c4
    50a8:	00015484 	.word	0x00015484
    50ac:	000154c9 	.word	0x000154c9
    50b0:	0001548b 	.word	0x0001548b
    50b4:	000157b0 	.word	0x000157b0
    50b8:	00017ac1 	.word	0x00017ac1
    50bc:	200004d0 	.word	0x200004d0

000050c0 <bt_conn_auth_cb_register>:
}

#if defined(CONFIG_BLUETOOTH_SMP) || defined(CONFIG_BLUETOOTH_BREDR)
int bt_conn_auth_cb_register(const struct bt_conn_auth_cb *cb)
{
	if (!cb) {
    50c0:	2800      	cmp	r0, #0
    50c2:	d102      	bne.n	50ca <bt_conn_auth_cb_register+0xa>
		bt_auth = NULL;
    50c4:	4b08      	ldr	r3, [pc, #32]	; (50e8 <bt_conn_auth_cb_register+0x28>)
    50c6:	6018      	str	r0, [r3, #0]
		return 0;
    50c8:	e00d      	b.n	50e6 <bt_conn_auth_cb_register+0x26>
	}

	/* cancel callback should always be provided */
	if (!cb->cancel) {
    50ca:	68c3      	ldr	r3, [r0, #12]
    50cc:	2b00      	cmp	r3, #0
    50ce:	d006      	beq.n	50de <bt_conn_auth_cb_register+0x1e>
		return -EINVAL;
	}

	if (bt_auth) {
    50d0:	4a05      	ldr	r2, [pc, #20]	; (50e8 <bt_conn_auth_cb_register+0x28>)
    50d2:	6813      	ldr	r3, [r2, #0]
    50d4:	2b00      	cmp	r3, #0
    50d6:	d104      	bne.n	50e2 <bt_conn_auth_cb_register+0x22>
		return -EALREADY;
	}

	bt_auth = cb;
    50d8:	6010      	str	r0, [r2, #0]
	return 0;
    50da:	0018      	movs	r0, r3
    50dc:	e003      	b.n	50e6 <bt_conn_auth_cb_register+0x26>
		return 0;
	}

	/* cancel callback should always be provided */
	if (!cb->cancel) {
		return -EINVAL;
    50de:	2016      	movs	r0, #22
    50e0:	e000      	b.n	50e4 <bt_conn_auth_cb_register+0x24>
	}

	if (bt_auth) {
		return -EALREADY;
    50e2:	2045      	movs	r0, #69	; 0x45
    50e4:	4240      	negs	r0, r0
	}

	bt_auth = cb;
	return 0;
}
    50e6:	4770      	bx	lr
    50e8:	20002240 	.word	0x20002240

000050ec <bt_conn_init>:
 * @param node A pointer on the node to prepend
 */
static inline void sys_slist_prepend(sys_slist_t *list,
				     sys_snode_t *node)
{
	node->next = list->head;
    50ec:	4a0c      	ldr	r2, [pc, #48]	; (5120 <bt_conn_init+0x34>)
    50ee:	4b0d      	ldr	r3, [pc, #52]	; (5124 <bt_conn_init+0x38>)
    50f0:	6811      	ldr	r1, [r2, #0]
	}
}
#endif /* CONFIG_BLUETOOTH_SMP || CONFIG_BLUETOOTH_BREDR */

int bt_conn_init(void)
{
    50f2:	b510      	push	{r4, lr}
    50f4:	6019      	str	r1, [r3, #0]
	list->head = node;

	if (!list->tail) {
    50f6:	6851      	ldr	r1, [r2, #4]
    50f8:	2900      	cmp	r1, #0
    50fa:	d100      	bne.n	50fe <bt_conn_init+0x12>
		list->tail = list->head;
    50fc:	6053      	str	r3, [r2, #4]
				     sys_snode_t *node)
{
	node->next = list->head;
	list->head = node;

	if (!list->tail) {
    50fe:	6851      	ldr	r1, [r2, #4]
 * @param node A pointer on the node to prepend
 */
static inline void sys_slist_prepend(sys_slist_t *list,
				     sys_snode_t *node)
{
	node->next = list->head;
    5100:	609b      	str	r3, [r3, #8]
	list->head = node;
    5102:	3308      	adds	r3, #8
    5104:	6013      	str	r3, [r2, #0]

	if (!list->tail) {
    5106:	2900      	cmp	r1, #0
    5108:	d100      	bne.n	510c <bt_conn_init+0x20>
		list->tail = list->head;
    510a:	6053      	str	r3, [r2, #4]

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		sys_slist_prepend(&free_tx, &conn_tx[i].node);
	}

	bt_att_init();
    510c:	f001 fd16 	bl	6b3c <bt_att_init>

	err = bt_smp_init();
    5110:	f003 ffe4 	bl	90dc <bt_smp_init>
    5114:	1e04      	subs	r4, r0, #0
	if (err) {
    5116:	d101      	bne.n	511c <bt_conn_init+0x30>
		return err;
	}

	bt_l2cap_init();
    5118:	f000 fa5e 	bl	55d8 <bt_l2cap_init>
			}
		}
	}

	return 0;
}
    511c:	0020      	movs	r0, r4
    511e:	bd10      	pop	{r4, pc}
    5120:	20000e18 	.word	0x20000e18
    5124:	20000e08 	.word	0x20000e08

00005128 <l2cap_disconnected>:

static void l2cap_disconnected(struct bt_l2cap_chan *chan)
{
	BT_DBG("ch %p cid 0x%04x", BT_L2CAP_LE_CHAN(chan),
	       BT_L2CAP_LE_CHAN(chan)->rx.cid);
}
    5128:	4770      	bx	lr
	...

0000512c <l2cap_accept>:

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    512c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
    512e:	4a0c      	ldr	r2, [pc, #48]	; (5160 <l2cap_accept+0x34>)
    5130:	6813      	ldr	r3, [r2, #0]
    5132:	2b00      	cmp	r3, #0
    5134:	d104      	bne.n	5140 <l2cap_accept+0x14>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
    5136:	480b      	ldr	r0, [pc, #44]	; (5164 <l2cap_accept+0x38>)
    5138:	6050      	str	r0, [r2, #4]
		*chan = &l2cap->chan.chan;
    513a:	600a      	str	r2, [r1, #0]

		return 0;
    513c:	0018      	movs	r0, r3
    513e:	e00c      	b.n	515a <l2cap_accept+0x2e>
	}

	BT_ERR("No available L2CAP context for conn %p", conn);
    5140:	4b09      	ldr	r3, [pc, #36]	; (5168 <l2cap_accept+0x3c>)
    5142:	9001      	str	r0, [sp, #4]
    5144:	9302      	str	r3, [sp, #8]
    5146:	4b09      	ldr	r3, [pc, #36]	; (516c <l2cap_accept+0x40>)
    5148:	4a09      	ldr	r2, [pc, #36]	; (5170 <l2cap_accept+0x44>)
    514a:	9300      	str	r3, [sp, #0]
    514c:	4909      	ldr	r1, [pc, #36]	; (5174 <l2cap_accept+0x48>)
    514e:	4b0a      	ldr	r3, [pc, #40]	; (5178 <l2cap_accept+0x4c>)
    5150:	480a      	ldr	r0, [pc, #40]	; (517c <l2cap_accept+0x50>)
    5152:	f7fc fc15 	bl	1980 <printk>

	return -ENOMEM;
    5156:	200c      	movs	r0, #12
    5158:	4240      	negs	r0, r0
}
    515a:	b005      	add	sp, #20
    515c:	bd00      	pop	{pc}
    515e:	46c0      	nop			; (mov r8, r8)
    5160:	20000ee0 	.word	0x20000ee0
    5164:	20000624 	.word	0x20000624
    5168:	000154c4 	.word	0x000154c4
    516c:	000154c9 	.word	0x000154c9
    5170:	00015484 	.word	0x00015484
    5174:	0001548b 	.word	0x0001548b
    5178:	00017afd 	.word	0x00017afd
    517c:	00015de2 	.word	0x00015de2

00005180 <l2cap_connected>:
    5180:	4770      	bx	lr
	...

00005184 <bt_l2cap_le_fixed_chan_register>:
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node)
{
	node->next = NULL;
    5184:	2300      	movs	r3, #0

void bt_l2cap_le_fixed_chan_register(struct bt_l2cap_fixed_chan *chan)
{
	BT_DBG("CID 0x%04x", chan->cid);

	sys_slist_append(&le_channels, &chan->node);
    5186:	0002      	movs	r2, r0
    5188:	6083      	str	r3, [r0, #8]

	if (!list->tail) {
    518a:	4b05      	ldr	r3, [pc, #20]	; (51a0 <bt_l2cap_le_fixed_chan_register+0x1c>)
    518c:	3208      	adds	r2, #8
    518e:	6859      	ldr	r1, [r3, #4]
    5190:	2900      	cmp	r1, #0
    5192:	d102      	bne.n	519a <bt_l2cap_le_fixed_chan_register+0x16>
		list->tail = node;
    5194:	605a      	str	r2, [r3, #4]
		list->head = node;
    5196:	601a      	str	r2, [r3, #0]
    5198:	e001      	b.n	519e <bt_l2cap_le_fixed_chan_register+0x1a>
	} else {
		list->tail->next = node;
    519a:	600a      	str	r2, [r1, #0]
		list->tail = node;
    519c:	605a      	str	r2, [r3, #4]
}
    519e:	4770      	bx	lr
    51a0:	20000ed8 	.word	0x20000ed8

000051a4 <bt_l2cap_chan_remove>:
	return NULL;
}
#endif /* CONFIG_BLUETOOTH_L2CAP_DYNAMIC_CHANNEL */

void bt_l2cap_chan_remove(struct bt_conn *conn, struct bt_l2cap_chan *ch)
{
    51a4:	6c43      	ldr	r3, [r0, #68]	; 0x44
    51a6:	b530      	push	{r4, r5, lr}
	struct bt_l2cap_chan *chan;
	sys_snode_t *prev = NULL;

	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    51a8:	2b00      	cmp	r3, #0
    51aa:	d020      	beq.n	51ee <bt_l2cap_chan_remove+0x4a>
    51ac:	2200      	movs	r2, #0
    51ae:	3b08      	subs	r3, #8
    51b0:	2b00      	cmp	r3, #0
    51b2:	d01c      	beq.n	51ee <bt_l2cap_chan_remove+0x4a>
		if (chan == ch) {
    51b4:	428b      	cmp	r3, r1
    51b6:	d111      	bne.n	51dc <bt_l2cap_chan_remove+0x38>
			sys_slist_remove(&conn->channels, prev, &chan->node);
    51b8:	000d      	movs	r5, r1
    51ba:	688b      	ldr	r3, [r1, #8]
    51bc:	3508      	adds	r5, #8
    51be:	6c84      	ldr	r4, [r0, #72]	; 0x48
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node)
{
	if (!prev_node) {
    51c0:	2a00      	cmp	r2, #0
    51c2:	d104      	bne.n	51ce <bt_l2cap_chan_remove+0x2a>
		list->head = node->next;
    51c4:	6443      	str	r3, [r0, #68]	; 0x44

		/* Was node also the tail? */
		if (list->tail == node) {
    51c6:	42a5      	cmp	r5, r4
    51c8:	d105      	bne.n	51d6 <bt_l2cap_chan_remove+0x32>
			list->tail = list->head;
    51ca:	6483      	str	r3, [r0, #72]	; 0x48
    51cc:	e003      	b.n	51d6 <bt_l2cap_chan_remove+0x32>
		}
	} else {
		prev_node->next = node->next;
    51ce:	6013      	str	r3, [r2, #0]

		/* Was node the tail? */
		if (list->tail == node) {
    51d0:	42a5      	cmp	r5, r4
    51d2:	d100      	bne.n	51d6 <bt_l2cap_chan_remove+0x32>
			list->tail = prev_node;
    51d4:	6482      	str	r2, [r0, #72]	; 0x48
		}
	}

	node->next = NULL;
    51d6:	2300      	movs	r3, #0
    51d8:	608b      	str	r3, [r1, #8]
    51da:	e008      	b.n	51ee <bt_l2cap_chan_remove+0x4a>
			return;
		}

		prev = &chan->node;
    51dc:	001a      	movs	r2, r3
    51de:	3208      	adds	r2, #8
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node)
{
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    51e0:	2a00      	cmp	r2, #0
    51e2:	d004      	beq.n	51ee <bt_l2cap_chan_remove+0x4a>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node)
{
	return node->next;
    51e4:	689b      	ldr	r3, [r3, #8]
void bt_l2cap_chan_remove(struct bt_conn *conn, struct bt_l2cap_chan *ch)
{
	struct bt_l2cap_chan *chan;
	sys_snode_t *prev = NULL;

	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    51e6:	2b00      	cmp	r3, #0
    51e8:	d001      	beq.n	51ee <bt_l2cap_chan_remove+0x4a>
    51ea:	3b08      	subs	r3, #8
    51ec:	e7e0      	b.n	51b0 <bt_l2cap_chan_remove+0xc>
			return;
		}

		prev = &chan->node;
	}
}
    51ee:	bd30      	pop	{r4, r5, pc}

000051f0 <bt_l2cap_chan_del>:

void bt_l2cap_chan_del(struct bt_l2cap_chan *chan)
{
	BT_DBG("conn %p chan %p", chan->conn, chan);

	if (!chan->conn) {
    51f0:	6803      	ldr	r3, [r0, #0]
}
#endif /* CONFIG_BLUETOOTH_DEBUG_L2CAP */
#endif /* CONFIG_BLUETOOTH_L2CAP_DYNAMIC_CHANNEL */

void bt_l2cap_chan_del(struct bt_l2cap_chan *chan)
{
    51f2:	b510      	push	{r4, lr}
    51f4:	0004      	movs	r4, r0
	BT_DBG("conn %p chan %p", chan->conn, chan);

	if (!chan->conn) {
    51f6:	2b00      	cmp	r3, #0
    51f8:	d006      	beq.n	5208 <bt_l2cap_chan_del+0x18>
		goto destroy;
	}

	if (chan->ops->disconnected) {
    51fa:	6843      	ldr	r3, [r0, #4]
    51fc:	685b      	ldr	r3, [r3, #4]
    51fe:	2b00      	cmp	r3, #0
    5200:	d000      	beq.n	5204 <bt_l2cap_chan_del+0x14>
		chan->ops->disconnected(chan);
    5202:	4798      	blx	r3
	}

	chan->conn = NULL;
    5204:	2300      	movs	r3, #0
    5206:	6023      	str	r3, [r4, #0]
	/* Reset internal members of common channel */
	bt_l2cap_chan_set_state(chan, BT_L2CAP_DISCONNECTED);
	chan->psm = 0;
#endif

	if (chan->destroy) {
    5208:	68e3      	ldr	r3, [r4, #12]
    520a:	2b00      	cmp	r3, #0
    520c:	d001      	beq.n	5212 <bt_l2cap_chan_del+0x22>
		chan->destroy(chan);
    520e:	0020      	movs	r0, r4
    5210:	4798      	blx	r3
	}
}
    5212:	bd10      	pop	{r4, pc}

00005214 <l2cap_rtx_timeout>:

static void l2cap_rtx_timeout(struct k_work *work)
{
    5214:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct bt_l2cap_le_chan *chan = LE_CHAN_RTX(work);

	BT_ERR("chan %p timeout", chan);
    5216:	3810      	subs	r0, #16
    5218:	0004      	movs	r4, r0
    521a:	4b09      	ldr	r3, [pc, #36]	; (5240 <l2cap_rtx_timeout+0x2c>)
    521c:	4a09      	ldr	r2, [pc, #36]	; (5244 <l2cap_rtx_timeout+0x30>)
    521e:	9302      	str	r3, [sp, #8]
    5220:	4b09      	ldr	r3, [pc, #36]	; (5248 <l2cap_rtx_timeout+0x34>)
    5222:	9001      	str	r0, [sp, #4]
    5224:	9300      	str	r3, [sp, #0]
    5226:	4909      	ldr	r1, [pc, #36]	; (524c <l2cap_rtx_timeout+0x38>)
    5228:	4b09      	ldr	r3, [pc, #36]	; (5250 <l2cap_rtx_timeout+0x3c>)
    522a:	480a      	ldr	r0, [pc, #40]	; (5254 <l2cap_rtx_timeout+0x40>)
    522c:	f7fc fba8 	bl	1980 <printk>

	bt_l2cap_chan_remove(chan->chan.conn, &chan->chan);
    5230:	0021      	movs	r1, r4
    5232:	6820      	ldr	r0, [r4, #0]
    5234:	f7ff ffb6 	bl	51a4 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
    5238:	0020      	movs	r0, r4
    523a:	f7ff ffd9 	bl	51f0 <bt_l2cap_chan_del>
}
    523e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    5240:	000154c4 	.word	0x000154c4
    5244:	00015484 	.word	0x00015484
    5248:	000154c9 	.word	0x000154c9
    524c:	0001548b 	.word	0x0001548b
    5250:	00017b15 	.word	0x00017b15
    5254:	00015e19 	.word	0x00015e19

00005258 <bt_l2cap_connected>:

	return true;
}

void bt_l2cap_connected(struct bt_conn *conn)
{
    5258:	4b1a      	ldr	r3, [pc, #104]	; (52c4 <bt_l2cap_connected+0x6c>)
    525a:	b573      	push	{r0, r1, r4, r5, r6, lr}
    525c:	681b      	ldr	r3, [r3, #0]
    525e:	0006      	movs	r6, r0
	    conn->type == BT_CONN_TYPE_BR) {
		bt_l2cap_br_connected(conn);
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    5260:	001c      	movs	r4, r3
    5262:	3c08      	subs	r4, #8
    5264:	2b00      	cmp	r3, #0
    5266:	d02b      	beq.n	52c0 <bt_l2cap_connected+0x68>
    5268:	2c00      	cmp	r4, #0
    526a:	d029      	beq.n	52c0 <bt_l2cap_connected+0x68>
		struct bt_l2cap_le_chan *ch;

		if (fchan->accept(conn, &chan) < 0) {
    526c:	a901      	add	r1, sp, #4
    526e:	0030      	movs	r0, r6
    5270:	6863      	ldr	r3, [r4, #4]
    5272:	4798      	blx	r3
    5274:	2800      	cmp	r0, #0
    5276:	db1e      	blt.n	52b6 <bt_l2cap_connected+0x5e>
			continue;
		}

		ch = BT_L2CAP_LE_CHAN(chan);
    5278:	9d01      	ldr	r5, [sp, #4]

		/* Fill up remaining fixed channel context attached in
		 * fchan->accept()
		 */
		ch->rx.cid = fchan->cid;
    527a:	8823      	ldrh	r3, [r4, #0]
		ch->tx.cid = fchan->cid;
    527c:	002a      	movs	r2, r5
	if (!ch) {
		BT_ERR("Unable to allocate L2CAP CID");
		return false;
	}

	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    527e:	0028      	movs	r0, r5

		/* Fill up remaining fixed channel context attached in
		 * fchan->accept()
		 */
		ch->rx.cid = fchan->cid;
		ch->tx.cid = fchan->cid;
    5280:	3254      	adds	r2, #84	; 0x54
		ch = BT_L2CAP_LE_CHAN(chan);

		/* Fill up remaining fixed channel context attached in
		 * fchan->accept()
		 */
		ch->rx.cid = fchan->cid;
    5282:	872b      	strh	r3, [r5, #56]	; 0x38
	if (!ch) {
		BT_ERR("Unable to allocate L2CAP CID");
		return false;
	}

	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    5284:	4910      	ldr	r1, [pc, #64]	; (52c8 <bt_l2cap_connected+0x70>)

		/* Fill up remaining fixed channel context attached in
		 * fchan->accept()
		 */
		ch->rx.cid = fchan->cid;
		ch->tx.cid = fchan->cid;
    5286:	8013      	strh	r3, [r2, #0]
	if (!ch) {
		BT_ERR("Unable to allocate L2CAP CID");
		return false;
	}

	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    5288:	3010      	adds	r0, #16
    528a:	f00f fdf3 	bl	14e74 <k_delayed_work_init>

void bt_l2cap_chan_add(struct bt_conn *conn, struct bt_l2cap_chan *chan,
		       bt_l2cap_chan_destroy_t destroy)
{
	/* Attach channel to the connection */
	sys_slist_append(&conn->channels, &chan->node);
    528e:	002a      	movs	r2, r5
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node)
{
	node->next = NULL;
    5290:	2300      	movs	r3, #0

	if (!list->tail) {
    5292:	6cb1      	ldr	r1, [r6, #72]	; 0x48
    5294:	3208      	adds	r2, #8
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node)
{
	node->next = NULL;
    5296:	60ab      	str	r3, [r5, #8]

	if (!list->tail) {
    5298:	4299      	cmp	r1, r3
    529a:	d102      	bne.n	52a2 <bt_l2cap_connected+0x4a>
		list->tail = node;
    529c:	64b2      	str	r2, [r6, #72]	; 0x48
		list->head = node;
    529e:	6472      	str	r2, [r6, #68]	; 0x44
    52a0:	e001      	b.n	52a6 <bt_l2cap_connected+0x4e>
	} else {
		list->tail->next = node;
    52a2:	600a      	str	r2, [r1, #0]
		list->tail = node;
    52a4:	64b2      	str	r2, [r6, #72]	; 0x48

		if (!l2cap_chan_add(conn, chan, NULL)) {
			return;
		}

		if (chan->ops->connected) {
    52a6:	9801      	ldr	r0, [sp, #4]
		       bt_l2cap_chan_destroy_t destroy)
{
	/* Attach channel to the connection */
	sys_slist_append(&conn->channels, &chan->node);
	chan->conn = conn;
	chan->destroy = destroy;
    52a8:	60eb      	str	r3, [r5, #12]

		if (!l2cap_chan_add(conn, chan, NULL)) {
			return;
		}

		if (chan->ops->connected) {
    52aa:	6843      	ldr	r3, [r0, #4]
void bt_l2cap_chan_add(struct bt_conn *conn, struct bt_l2cap_chan *chan,
		       bt_l2cap_chan_destroy_t destroy)
{
	/* Attach channel to the connection */
	sys_slist_append(&conn->channels, &chan->node);
	chan->conn = conn;
    52ac:	602e      	str	r6, [r5, #0]

		if (!l2cap_chan_add(conn, chan, NULL)) {
			return;
		}

		if (chan->ops->connected) {
    52ae:	681b      	ldr	r3, [r3, #0]
    52b0:	2b00      	cmp	r3, #0
    52b2:	d000      	beq.n	52b6 <bt_l2cap_connected+0x5e>
			chan->ops->connected(chan);
    52b4:	4798      	blx	r3
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node)
{
	return node->next;
    52b6:	68a4      	ldr	r4, [r4, #8]
	    conn->type == BT_CONN_TYPE_BR) {
		bt_l2cap_br_connected(conn);
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    52b8:	2c00      	cmp	r4, #0
    52ba:	d001      	beq.n	52c0 <bt_l2cap_connected+0x68>
    52bc:	3c08      	subs	r4, #8
    52be:	e7d3      	b.n	5268 <bt_l2cap_connected+0x10>

		if (chan->ops->connected) {
			chan->ops->connected(chan);
		}
	}
}
    52c0:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    52c2:	46c0      	nop			; (mov r8, r8)
    52c4:	20000ed8 	.word	0x20000ed8
    52c8:	00005215 	.word	0x00005215

000052cc <bt_l2cap_disconnected>:

void bt_l2cap_disconnected(struct bt_conn *conn)
{
    52cc:	6c43      	ldr	r3, [r0, #68]	; 0x44
    52ce:	b510      	push	{r4, lr}
	struct bt_l2cap_chan *chan, *next;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    52d0:	2b00      	cmp	r3, #0
    52d2:	d015      	beq.n	5300 <bt_l2cap_disconnected+0x34>
    52d4:	0018      	movs	r0, r3
    52d6:	3808      	subs	r0, #8
    52d8:	2800      	cmp	r0, #0
    52da:	d011      	beq.n	5300 <bt_l2cap_disconnected+0x34>
    52dc:	681b      	ldr	r3, [r3, #0]
    52de:	001c      	movs	r4, r3
    52e0:	3c08      	subs	r4, #8
    52e2:	2b00      	cmp	r3, #0
    52e4:	d00a      	beq.n	52fc <bt_l2cap_disconnected+0x30>
		bt_l2cap_chan_del(chan);
    52e6:	f7ff ff83 	bl	51f0 <bt_l2cap_chan_del>

void bt_l2cap_disconnected(struct bt_conn *conn)
{
	struct bt_l2cap_chan *chan, *next;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    52ea:	2c00      	cmp	r4, #0
    52ec:	d008      	beq.n	5300 <bt_l2cap_disconnected+0x34>
    52ee:	68a3      	ldr	r3, [r4, #8]
    52f0:	0020      	movs	r0, r4
    52f2:	2b00      	cmp	r3, #0
    52f4:	d002      	beq.n	52fc <bt_l2cap_disconnected+0x30>
    52f6:	3b08      	subs	r3, #8
    52f8:	001c      	movs	r4, r3
    52fa:	e7f4      	b.n	52e6 <bt_l2cap_disconnected+0x1a>
		bt_l2cap_chan_del(chan);
    52fc:	f7ff ff78 	bl	51f0 <bt_l2cap_chan_del>
	}
}
    5300:	bd10      	pop	{r4, pc}

00005302 <bt_l2cap_encrypt_change>:
	l2cap_le_conn_req(BT_L2CAP_LE_CHAN(chan));
}
#endif /* CONFIG_BLUETOOTH_L2CAP_DYNAMIC_CHANNEL */

void bt_l2cap_encrypt_change(struct bt_conn *conn, u8_t hci_status)
{
    5302:	6c43      	ldr	r3, [r0, #68]	; 0x44
    5304:	b570      	push	{r4, r5, r6, lr}
	    conn->type == BT_CONN_TYPE_BR) {
		l2cap_br_encrypt_change(conn, hci_status);
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    5306:	001c      	movs	r4, r3
	l2cap_le_conn_req(BT_L2CAP_LE_CHAN(chan));
}
#endif /* CONFIG_BLUETOOTH_L2CAP_DYNAMIC_CHANNEL */

void bt_l2cap_encrypt_change(struct bt_conn *conn, u8_t hci_status)
{
    5308:	000d      	movs	r5, r1
	    conn->type == BT_CONN_TYPE_BR) {
		l2cap_br_encrypt_change(conn, hci_status);
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    530a:	3c08      	subs	r4, #8
    530c:	2b00      	cmp	r3, #0
    530e:	d00d      	beq.n	532c <bt_l2cap_encrypt_change+0x2a>
    5310:	2c00      	cmp	r4, #0
    5312:	d00b      	beq.n	532c <bt_l2cap_encrypt_change+0x2a>
#if defined(CONFIG_BLUETOOTH_L2CAP_DYNAMIC_CHANNEL)
		l2cap_le_encrypt_change(chan, hci_status);
#endif

		if (chan->ops->encrypt_change) {
    5314:	6863      	ldr	r3, [r4, #4]
    5316:	689b      	ldr	r3, [r3, #8]
    5318:	2b00      	cmp	r3, #0
    531a:	d002      	beq.n	5322 <bt_l2cap_encrypt_change+0x20>
			chan->ops->encrypt_change(chan, hci_status);
    531c:	0029      	movs	r1, r5
    531e:	0020      	movs	r0, r4
    5320:	4798      	blx	r3
    5322:	68a4      	ldr	r4, [r4, #8]
	    conn->type == BT_CONN_TYPE_BR) {
		l2cap_br_encrypt_change(conn, hci_status);
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    5324:	2c00      	cmp	r4, #0
    5326:	d001      	beq.n	532c <bt_l2cap_encrypt_change+0x2a>
    5328:	3c08      	subs	r4, #8
    532a:	e7f1      	b.n	5310 <bt_l2cap_encrypt_change+0xe>

		if (chan->ops->encrypt_change) {
			chan->ops->encrypt_change(chan, hci_status);
		}
	}
}
    532c:	bd70      	pop	{r4, r5, r6, pc}

0000532e <bt_l2cap_create_pdu>:

	return buf;
}

struct net_buf *bt_l2cap_create_pdu(struct net_buf_pool *pool, size_t reserve)
{
    532e:	b510      	push	{r4, lr}
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    5330:	3104      	adds	r1, #4
    5332:	f7ff fe17 	bl	4f64 <bt_conn_create_pdu>
}
    5336:	bd10      	pop	{r4, pc}

00005338 <bt_l2cap_send_cb>:

void bt_l2cap_send_cb(struct bt_conn *conn, u16_t cid, struct net_buf *buf,
		      bt_conn_tx_cb_t cb)
{
    5338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    533a:	0006      	movs	r6, r0
	struct bt_l2cap_hdr *hdr;

	BT_DBG("conn %p cid %u len %zu", conn, cid, net_buf_frags_len(buf));

	hdr = net_buf_push(buf, sizeof(*hdr));
    533c:	0010      	movs	r0, r2
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
}

void bt_l2cap_send_cb(struct bt_conn *conn, u16_t cid, struct net_buf *buf,
		      bt_conn_tx_cb_t cb)
{
    533e:	0015      	movs	r5, r2
    5340:	000c      	movs	r4, r1
	struct bt_l2cap_hdr *hdr;

	BT_DBG("conn %p cid %u len %zu", conn, cid, net_buf_frags_len(buf));

	hdr = net_buf_push(buf, sizeof(*hdr));
    5342:	3008      	adds	r0, #8
    5344:	2104      	movs	r1, #4
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
}

void bt_l2cap_send_cb(struct bt_conn *conn, u16_t cid, struct net_buf *buf,
		      bt_conn_tx_cb_t cb)
{
    5346:	001f      	movs	r7, r3
	struct bt_l2cap_hdr *hdr;

	BT_DBG("conn %p cid %u len %zu", conn, cid, net_buf_frags_len(buf));

	hdr = net_buf_push(buf, sizeof(*hdr));
    5348:	f00e f955 	bl	135f6 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    534c:	89ab      	ldrh	r3, [r5, #12]
	hdr->cid = sys_cpu_to_le16(cid);
    534e:	7084      	strb	r4, [r0, #2]
	struct bt_l2cap_hdr *hdr;

	BT_DBG("conn %p cid %u len %zu", conn, cid, net_buf_frags_len(buf));

	hdr = net_buf_push(buf, sizeof(*hdr));
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    5350:	3b04      	subs	r3, #4
    5352:	b29b      	uxth	r3, r3
    5354:	7003      	strb	r3, [r0, #0]
	hdr->cid = sys_cpu_to_le16(cid);
    5356:	0a24      	lsrs	r4, r4, #8
	struct bt_l2cap_hdr *hdr;

	BT_DBG("conn %p cid %u len %zu", conn, cid, net_buf_frags_len(buf));

	hdr = net_buf_push(buf, sizeof(*hdr));
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    5358:	0a1b      	lsrs	r3, r3, #8
    535a:	7043      	strb	r3, [r0, #1]
	hdr->cid = sys_cpu_to_le16(cid);
    535c:	70c4      	strb	r4, [r0, #3]

	bt_conn_send_cb(conn, buf, cb);
    535e:	003a      	movs	r2, r7
    5360:	0029      	movs	r1, r5
    5362:	0030      	movs	r0, r6
    5364:	f7ff fa98 	bl	4898 <bt_conn_send_cb>
}
    5368:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0000536c <l2cap_recv>:
	bt_l2cap_chan_del(&chan->chan);
}
#endif /* CONFIG_BLUETOOTH_L2CAP_DYNAMIC_CHANNEL */

static void l2cap_recv(struct bt_l2cap_chan *chan, struct net_buf *buf)
{
    536c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_l2cap *l2cap = CONTAINER_OF(chan, struct bt_l2cap, chan);
	struct bt_l2cap_sig_hdr *hdr = (void *)buf->data;
	u16_t len;

	if (buf->len < sizeof(*hdr)) {
    536e:	898b      	ldrh	r3, [r1, #12]
	bt_l2cap_chan_del(&chan->chan);
}
#endif /* CONFIG_BLUETOOTH_L2CAP_DYNAMIC_CHANNEL */

static void l2cap_recv(struct bt_l2cap_chan *chan, struct net_buf *buf)
{
    5370:	b085      	sub	sp, #20
    5372:	0007      	movs	r7, r0
    5374:	000e      	movs	r6, r1
	struct bt_l2cap *l2cap = CONTAINER_OF(chan, struct bt_l2cap, chan);
	struct bt_l2cap_sig_hdr *hdr = (void *)buf->data;
	u16_t len;

	if (buf->len < sizeof(*hdr)) {
    5376:	2b03      	cmp	r3, #3
    5378:	d808      	bhi.n	538c <l2cap_recv+0x20>
		BT_ERR("Too small L2CAP signaling PDU");
    537a:	4b36      	ldr	r3, [pc, #216]	; (5454 <l2cap_recv+0xe8>)
    537c:	4a36      	ldr	r2, [pc, #216]	; (5458 <l2cap_recv+0xec>)
    537e:	9301      	str	r3, [sp, #4]
    5380:	4b36      	ldr	r3, [pc, #216]	; (545c <l2cap_recv+0xf0>)
    5382:	4937      	ldr	r1, [pc, #220]	; (5460 <l2cap_recv+0xf4>)
    5384:	9300      	str	r3, [sp, #0]
    5386:	4837      	ldr	r0, [pc, #220]	; (5464 <l2cap_recv+0xf8>)
    5388:	4b37      	ldr	r3, [pc, #220]	; (5468 <l2cap_recv+0xfc>)
    538a:	e034      	b.n	53f6 <l2cap_recv+0x8a>
		return;
	}

	len = sys_le16_to_cpu(hdr->len);
	net_buf_pull(buf, sizeof(*hdr));
    538c:	0008      	movs	r0, r1
#endif /* CONFIG_BLUETOOTH_L2CAP_DYNAMIC_CHANNEL */

static void l2cap_recv(struct bt_l2cap_chan *chan, struct net_buf *buf)
{
	struct bt_l2cap *l2cap = CONTAINER_OF(chan, struct bt_l2cap, chan);
	struct bt_l2cap_sig_hdr *hdr = (void *)buf->data;
    538e:	688c      	ldr	r4, [r1, #8]
		BT_ERR("Too small L2CAP signaling PDU");
		return;
	}

	len = sys_le16_to_cpu(hdr->len);
	net_buf_pull(buf, sizeof(*hdr));
    5390:	3008      	adds	r0, #8
	if (buf->len < sizeof(*hdr)) {
		BT_ERR("Too small L2CAP signaling PDU");
		return;
	}

	len = sys_le16_to_cpu(hdr->len);
    5392:	78e5      	ldrb	r5, [r4, #3]
    5394:	78a3      	ldrb	r3, [r4, #2]
    5396:	022d      	lsls	r5, r5, #8
	net_buf_pull(buf, sizeof(*hdr));
    5398:	2104      	movs	r1, #4
	if (buf->len < sizeof(*hdr)) {
		BT_ERR("Too small L2CAP signaling PDU");
		return;
	}

	len = sys_le16_to_cpu(hdr->len);
    539a:	431d      	orrs	r5, r3
	net_buf_pull(buf, sizeof(*hdr));
    539c:	f00e f933 	bl	13606 <net_buf_simple_pull>

	BT_DBG("Signaling code 0x%02x ident %u len %u", hdr->code,
	       hdr->ident, len);

	if (buf->len != len) {
    53a0:	89b3      	ldrh	r3, [r6, #12]
    53a2:	429d      	cmp	r5, r3
    53a4:	d00c      	beq.n	53c0 <l2cap_recv+0x54>
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
    53a6:	4a2b      	ldr	r2, [pc, #172]	; (5454 <l2cap_recv+0xe8>)
    53a8:	9301      	str	r3, [sp, #4]
    53aa:	4b2c      	ldr	r3, [pc, #176]	; (545c <l2cap_recv+0xf0>)
    53ac:	9203      	str	r2, [sp, #12]
    53ae:	9300      	str	r3, [sp, #0]
    53b0:	9502      	str	r5, [sp, #8]
    53b2:	4b2d      	ldr	r3, [pc, #180]	; (5468 <l2cap_recv+0xfc>)
    53b4:	4a28      	ldr	r2, [pc, #160]	; (5458 <l2cap_recv+0xec>)
    53b6:	492a      	ldr	r1, [pc, #168]	; (5460 <l2cap_recv+0xf4>)
    53b8:	482c      	ldr	r0, [pc, #176]	; (546c <l2cap_recv+0x100>)
    53ba:	f7fc fae1 	bl	1980 <printk>
		return;
    53be:	e047      	b.n	5450 <l2cap_recv+0xe4>
	}

	if (!hdr->ident) {
    53c0:	7863      	ldrb	r3, [r4, #1]
    53c2:	2b00      	cmp	r3, #0
    53c4:	d108      	bne.n	53d8 <l2cap_recv+0x6c>
		BT_ERR("Invalid ident value in L2CAP PDU");
    53c6:	4b23      	ldr	r3, [pc, #140]	; (5454 <l2cap_recv+0xe8>)
    53c8:	4a23      	ldr	r2, [pc, #140]	; (5458 <l2cap_recv+0xec>)
    53ca:	9301      	str	r3, [sp, #4]
    53cc:	4b23      	ldr	r3, [pc, #140]	; (545c <l2cap_recv+0xf0>)
    53ce:	4924      	ldr	r1, [pc, #144]	; (5460 <l2cap_recv+0xf4>)
    53d0:	9300      	str	r3, [sp, #0]
    53d2:	4827      	ldr	r0, [pc, #156]	; (5470 <l2cap_recv+0x104>)
    53d4:	4b24      	ldr	r3, [pc, #144]	; (5468 <l2cap_recv+0xfc>)
    53d6:	e00e      	b.n	53f6 <l2cap_recv+0x8a>
		return;
	}

	switch (hdr->code) {
    53d8:	7823      	ldrb	r3, [r4, #0]
    53da:	2b01      	cmp	r3, #1
    53dc:	d038      	beq.n	5450 <l2cap_recv+0xe4>
    53de:	2b13      	cmp	r3, #19
    53e0:	d10c      	bne.n	53fc <l2cap_recv+0x90>

static void le_conn_param_rsp(struct bt_l2cap *l2cap, struct net_buf *buf)
{
	struct bt_l2cap_conn_param_rsp *rsp = (void *)buf->data;

	if (buf->len < sizeof(*rsp)) {
    53e2:	2d01      	cmp	r5, #1
    53e4:	d834      	bhi.n	5450 <l2cap_recv+0xe4>
		BT_ERR("Too small LE conn param rsp");
    53e6:	4b1b      	ldr	r3, [pc, #108]	; (5454 <l2cap_recv+0xe8>)
    53e8:	4a1b      	ldr	r2, [pc, #108]	; (5458 <l2cap_recv+0xec>)
    53ea:	9301      	str	r3, [sp, #4]
    53ec:	4b1b      	ldr	r3, [pc, #108]	; (545c <l2cap_recv+0xf0>)
    53ee:	491c      	ldr	r1, [pc, #112]	; (5460 <l2cap_recv+0xf4>)
    53f0:	9300      	str	r3, [sp, #0]
    53f2:	4820      	ldr	r0, [pc, #128]	; (5474 <l2cap_recv+0x108>)
    53f4:	4b20      	ldr	r3, [pc, #128]	; (5478 <l2cap_recv+0x10c>)
    53f6:	f7fc fac3 	bl	1980 <printk>
    53fa:	e029      	b.n	5450 <l2cap_recv+0xe4>
	case BT_L2CAP_CMD_REJECT:
		/* Ignored */
		break;
#endif /* CONFIG_BLUETOOTH_L2CAP_DYNAMIC_CHANNEL */
	default:
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
    53fc:	4a15      	ldr	r2, [pc, #84]	; (5454 <l2cap_recv+0xe8>)
    53fe:	9301      	str	r3, [sp, #4]
    5400:	4b1e      	ldr	r3, [pc, #120]	; (547c <l2cap_recv+0x110>)
    5402:	9202      	str	r2, [sp, #8]
    5404:	9300      	str	r3, [sp, #0]
    5406:	4a1e      	ldr	r2, [pc, #120]	; (5480 <l2cap_recv+0x114>)
    5408:	4b17      	ldr	r3, [pc, #92]	; (5468 <l2cap_recv+0xfc>)
    540a:	4915      	ldr	r1, [pc, #84]	; (5460 <l2cap_recv+0xf4>)
    540c:	481d      	ldr	r0, [pc, #116]	; (5484 <l2cap_recv+0x118>)
    540e:	f7fc fab7 	bl	1980 <printk>
	return buf;
}

struct net_buf *bt_l2cap_create_pdu(struct net_buf_pool *pool, size_t reserve)
{
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    5412:	2104      	movs	r1, #4
    5414:	2000      	movs	r0, #0
		/* Ignored */
		break;
#endif /* CONFIG_BLUETOOTH_L2CAP_DYNAMIC_CHANNEL */
	default:
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
		l2cap_send_reject(chan->conn, hdr->ident,
    5416:	683e      	ldr	r6, [r7, #0]
    5418:	7864      	ldrb	r4, [r4, #1]
	return buf;
}

struct net_buf *bt_l2cap_create_pdu(struct net_buf_pool *pool, size_t reserve)
{
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    541a:	f7ff fda3 	bl	4f64 <bt_conn_create_pdu>
{
	struct bt_l2cap_sig_hdr *hdr;

	buf = bt_l2cap_create_rsp(buf, 0);

	hdr = net_buf_add(buf, sizeof(*hdr));
    541e:	0007      	movs	r7, r0
    5420:	3708      	adds	r7, #8
	return buf;
}

struct net_buf *bt_l2cap_create_pdu(struct net_buf_pool *pool, size_t reserve)
{
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    5422:	0005      	movs	r5, r0
{
	struct bt_l2cap_sig_hdr *hdr;

	buf = bt_l2cap_create_rsp(buf, 0);

	hdr = net_buf_add(buf, sizeof(*hdr));
    5424:	2104      	movs	r1, #4
    5426:	0038      	movs	r0, r7
    5428:	f00e f8cc 	bl	135c4 <net_buf_simple_add>
	hdr->code = code;
    542c:	2301      	movs	r3, #1
	hdr->ident = ident;
    542e:	7044      	strb	r4, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
    5430:	2102      	movs	r1, #2
    5432:	2400      	movs	r4, #0
	struct bt_l2cap_sig_hdr *hdr;

	buf = bt_l2cap_create_rsp(buf, 0);

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->code = code;
    5434:	7003      	strb	r3, [r0, #0]
	hdr->ident = ident;
	hdr->len = sys_cpu_to_le16(len);
    5436:	7081      	strb	r1, [r0, #2]
    5438:	70c4      	strb	r4, [r0, #3]
	struct net_buf *buf;

	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
				      sizeof(*rej) + data_len);

	rej = net_buf_add(buf, sizeof(*rej));
    543a:	0038      	movs	r0, r7
    543c:	f00e f8c2 	bl	135c4 <net_buf_simple_add>
		      bt_conn_tx_cb_t cb);

static inline void bt_l2cap_send(struct bt_conn *conn, u16_t cid,
				 struct net_buf *buf)
{
	bt_l2cap_send_cb(conn, cid, buf, NULL);
    5440:	0023      	movs	r3, r4
	rej->reason = sys_cpu_to_le16(reason);
    5442:	7004      	strb	r4, [r0, #0]
    5444:	7044      	strb	r4, [r0, #1]
    5446:	002a      	movs	r2, r5
    5448:	2105      	movs	r1, #5
    544a:	0030      	movs	r0, r6
    544c:	f7ff ff74 	bl	5338 <bt_l2cap_send_cb>
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
		l2cap_send_reject(chan->conn, hdr->ident,
				  BT_L2CAP_REJ_NOT_UNDERSTOOD, NULL, 0);
		break;
	}
}
    5450:	b005      	add	sp, #20
    5452:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5454:	000154c4 	.word	0x000154c4
    5458:	00015484 	.word	0x00015484
    545c:	000154c9 	.word	0x000154c9
    5460:	0001548b 	.word	0x0001548b
    5464:	00015e39 	.word	0x00015e39
    5468:	00017b0a 	.word	0x00017b0a
    546c:	00015e67 	.word	0x00015e67
    5470:	00015e98 	.word	0x00015e98
    5474:	00015ec9 	.word	0x00015ec9
    5478:	00017b35 	.word	0x00017b35
    547c:	0001550f 	.word	0x0001550f
    5480:	000154d1 	.word	0x000154d1
    5484:	00015ef5 	.word	0x00015ef5

00005488 <bt_l2cap_le_lookup_tx_cid>:
}
#endif /* CONFIG_BLUETOOTH_CENTRAL */

struct bt_l2cap_chan *bt_l2cap_le_lookup_tx_cid(struct bt_conn *conn,
						u16_t cid)
{
    5488:	6c43      	ldr	r3, [r0, #68]	; 0x44
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
			return chan;
		}
	}

	return NULL;
    548a:	1e18      	subs	r0, r3, #0
struct bt_l2cap_chan *bt_l2cap_le_lookup_tx_cid(struct bt_conn *conn,
						u16_t cid)
{
	struct bt_l2cap_chan *chan;

	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    548c:	d00d      	beq.n	54aa <bt_l2cap_le_lookup_tx_cid+0x22>
    548e:	3b08      	subs	r3, #8
    5490:	0018      	movs	r0, r3
    5492:	2800      	cmp	r0, #0
    5494:	d009      	beq.n	54aa <bt_l2cap_le_lookup_tx_cid+0x22>
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
    5496:	0003      	movs	r3, r0
    5498:	3354      	adds	r3, #84	; 0x54
    549a:	881b      	ldrh	r3, [r3, #0]
    549c:	428b      	cmp	r3, r1
    549e:	d004      	beq.n	54aa <bt_l2cap_le_lookup_tx_cid+0x22>
    54a0:	6880      	ldr	r0, [r0, #8]
struct bt_l2cap_chan *bt_l2cap_le_lookup_tx_cid(struct bt_conn *conn,
						u16_t cid)
{
	struct bt_l2cap_chan *chan;

	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    54a2:	2800      	cmp	r0, #0
    54a4:	d001      	beq.n	54aa <bt_l2cap_le_lookup_tx_cid+0x22>
    54a6:	3808      	subs	r0, #8
    54a8:	e7f3      	b.n	5492 <bt_l2cap_le_lookup_tx_cid+0xa>
			return chan;
		}
	}

	return NULL;
}
    54aa:	4770      	bx	lr

000054ac <bt_l2cap_le_lookup_rx_cid>:

struct bt_l2cap_chan *bt_l2cap_le_lookup_rx_cid(struct bt_conn *conn,
						u16_t cid)
{
    54ac:	6c43      	ldr	r3, [r0, #68]	; 0x44
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
			return chan;
		}
	}

	return NULL;
    54ae:	1e18      	subs	r0, r3, #0
struct bt_l2cap_chan *bt_l2cap_le_lookup_rx_cid(struct bt_conn *conn,
						u16_t cid)
{
	struct bt_l2cap_chan *chan;

	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    54b0:	d00b      	beq.n	54ca <bt_l2cap_le_lookup_rx_cid+0x1e>
    54b2:	3b08      	subs	r3, #8
    54b4:	0018      	movs	r0, r3
    54b6:	2800      	cmp	r0, #0
    54b8:	d007      	beq.n	54ca <bt_l2cap_le_lookup_rx_cid+0x1e>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
    54ba:	8f03      	ldrh	r3, [r0, #56]	; 0x38
    54bc:	428b      	cmp	r3, r1
    54be:	d004      	beq.n	54ca <bt_l2cap_le_lookup_rx_cid+0x1e>
    54c0:	6880      	ldr	r0, [r0, #8]
struct bt_l2cap_chan *bt_l2cap_le_lookup_rx_cid(struct bt_conn *conn,
						u16_t cid)
{
	struct bt_l2cap_chan *chan;

	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    54c2:	2800      	cmp	r0, #0
    54c4:	d001      	beq.n	54ca <bt_l2cap_le_lookup_rx_cid+0x1e>
    54c6:	3808      	subs	r0, #8
    54c8:	e7f5      	b.n	54b6 <bt_l2cap_le_lookup_rx_cid+0xa>
			return chan;
		}
	}

	return NULL;
}
    54ca:	4770      	bx	lr

000054cc <bt_l2cap_recv>:

	chan->ops->recv(chan, buf);
}

void bt_l2cap_recv(struct bt_conn *conn, struct net_buf *buf)
{
    54cc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	    conn->type == BT_CONN_TYPE_BR) {
		bt_l2cap_br_recv(conn, buf);
		return;
	}

	if (buf->len < sizeof(*hdr)) {
    54ce:	898b      	ldrh	r3, [r1, #12]

	chan->ops->recv(chan, buf);
}

void bt_l2cap_recv(struct bt_conn *conn, struct net_buf *buf)
{
    54d0:	0006      	movs	r6, r0
    54d2:	000c      	movs	r4, r1
	    conn->type == BT_CONN_TYPE_BR) {
		bt_l2cap_br_recv(conn, buf);
		return;
	}

	if (buf->len < sizeof(*hdr)) {
    54d4:	2b03      	cmp	r3, #3
    54d6:	d80a      	bhi.n	54ee <bt_l2cap_recv+0x22>
		BT_ERR("Too small L2CAP PDU received");
    54d8:	4b17      	ldr	r3, [pc, #92]	; (5538 <bt_l2cap_recv+0x6c>)
    54da:	4a18      	ldr	r2, [pc, #96]	; (553c <bt_l2cap_recv+0x70>)
    54dc:	9301      	str	r3, [sp, #4]
    54de:	4b18      	ldr	r3, [pc, #96]	; (5540 <bt_l2cap_recv+0x74>)
    54e0:	4918      	ldr	r1, [pc, #96]	; (5544 <bt_l2cap_recv+0x78>)
    54e2:	9300      	str	r3, [sp, #0]
    54e4:	4818      	ldr	r0, [pc, #96]	; (5548 <bt_l2cap_recv+0x7c>)
    54e6:	4b19      	ldr	r3, [pc, #100]	; (554c <bt_l2cap_recv+0x80>)
    54e8:	f7fc fa4a 	bl	1980 <printk>
    54ec:	e01f      	b.n	552e <bt_l2cap_recv+0x62>
		net_buf_unref(buf);
		return;
	}

	cid = sys_le16_to_cpu(hdr->cid);
	net_buf_pull(buf, sizeof(*hdr));
    54ee:	0020      	movs	r0, r4
		BT_ERR("Too small L2CAP PDU received");
		net_buf_unref(buf);
		return;
	}

	cid = sys_le16_to_cpu(hdr->cid);
    54f0:	688b      	ldr	r3, [r1, #8]
	net_buf_pull(buf, sizeof(*hdr));
    54f2:	3008      	adds	r0, #8
		BT_ERR("Too small L2CAP PDU received");
		net_buf_unref(buf);
		return;
	}

	cid = sys_le16_to_cpu(hdr->cid);
    54f4:	78dd      	ldrb	r5, [r3, #3]
    54f6:	789a      	ldrb	r2, [r3, #2]
    54f8:	022d      	lsls	r5, r5, #8
    54fa:	4315      	orrs	r5, r2
	net_buf_pull(buf, sizeof(*hdr));
    54fc:	2104      	movs	r1, #4
    54fe:	f00e f882 	bl	13606 <net_buf_simple_pull>

	BT_DBG("Packet for CID %u len %u", cid, buf->len);

	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
    5502:	0029      	movs	r1, r5
    5504:	0030      	movs	r0, r6
    5506:	f7ff ffd1 	bl	54ac <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    550a:	2800      	cmp	r0, #0
    550c:	d10b      	bne.n	5526 <bt_l2cap_recv+0x5a>
		BT_WARN("Ignoring data for unknown CID 0x%04x", cid);
    550e:	4b0a      	ldr	r3, [pc, #40]	; (5538 <bt_l2cap_recv+0x6c>)
    5510:	9501      	str	r5, [sp, #4]
    5512:	9302      	str	r3, [sp, #8]
    5514:	4b0e      	ldr	r3, [pc, #56]	; (5550 <bt_l2cap_recv+0x84>)
    5516:	4a0f      	ldr	r2, [pc, #60]	; (5554 <bt_l2cap_recv+0x88>)
    5518:	9300      	str	r3, [sp, #0]
    551a:	490a      	ldr	r1, [pc, #40]	; (5544 <bt_l2cap_recv+0x78>)
    551c:	4b0b      	ldr	r3, [pc, #44]	; (554c <bt_l2cap_recv+0x80>)
    551e:	480e      	ldr	r0, [pc, #56]	; (5558 <bt_l2cap_recv+0x8c>)
    5520:	f7fc fa2e 	bl	1980 <printk>
    5524:	e003      	b.n	552e <bt_l2cap_recv+0x62>
	}
#endif /* CONFIG_BLUETOOTH_L2CAP_DYNAMIC_CHANNEL */

	BT_DBG("chan %p len %u", chan, buf->len);

	chan->ops->recv(chan, buf);
    5526:	6843      	ldr	r3, [r0, #4]
    5528:	0021      	movs	r1, r4
    552a:	691b      	ldr	r3, [r3, #16]
    552c:	4798      	blx	r3
		net_buf_unref(buf);
		return;
	}

	l2cap_chan_recv(chan, buf);
	net_buf_unref(buf);
    552e:	0020      	movs	r0, r4
    5530:	f00e f826 	bl	13580 <net_buf_unref>
}
    5534:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
    5536:	46c0      	nop			; (mov r8, r8)
    5538:	000154c4 	.word	0x000154c4
    553c:	00015484 	.word	0x00015484
    5540:	000154c9 	.word	0x000154c9
    5544:	0001548b 	.word	0x0001548b
    5548:	00015f23 	.word	0x00015f23
    554c:	00017b27 	.word	0x00017b27
    5550:	0001550f 	.word	0x0001550f
    5554:	000154d1 	.word	0x000154d1
    5558:	00015f50 	.word	0x00015f50

0000555c <bt_l2cap_update_conn_param>:

int bt_l2cap_update_conn_param(struct bt_conn *conn,
			       const struct bt_le_conn_param *param)
{
    555c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

static u8_t get_ident(void)
{
	static u8_t ident;

	ident++;
    555e:	4b1d      	ldr	r3, [pc, #116]	; (55d4 <bt_l2cap_update_conn_param+0x78>)
	net_buf_unref(buf);
}

int bt_l2cap_update_conn_param(struct bt_conn *conn,
			       const struct bt_le_conn_param *param)
{
    5560:	000c      	movs	r4, r1

static u8_t get_ident(void)
{
	static u8_t ident;

	ident++;
    5562:	781a      	ldrb	r2, [r3, #0]
	net_buf_unref(buf);
}

int bt_l2cap_update_conn_param(struct bt_conn *conn,
			       const struct bt_le_conn_param *param)
{
    5564:	9001      	str	r0, [sp, #4]

static u8_t get_ident(void)
{
	static u8_t ident;

	ident++;
    5566:	1c51      	adds	r1, r2, #1
    5568:	b2c9      	uxtb	r1, r1
	/* handle integer overflow (0 is not valid) */
	if (!ident) {
    556a:	2900      	cmp	r1, #0
    556c:	d001      	beq.n	5572 <bt_l2cap_update_conn_param+0x16>

static u8_t get_ident(void)
{
	static u8_t ident;

	ident++;
    556e:	7019      	strb	r1, [r3, #0]
    5570:	e001      	b.n	5576 <bt_l2cap_update_conn_param+0x1a>
	/* handle integer overflow (0 is not valid) */
	if (!ident) {
		ident++;
    5572:	3202      	adds	r2, #2
    5574:	701a      	strb	r2, [r3, #0]
	return buf;
}

struct net_buf *bt_l2cap_create_pdu(struct net_buf_pool *pool, size_t reserve)
{
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    5576:	2104      	movs	r1, #4
    5578:	2000      	movs	r0, #0
	/* handle integer overflow (0 is not valid) */
	if (!ident) {
		ident++;
	}

	return ident;
    557a:	781d      	ldrb	r5, [r3, #0]
	return buf;
}

struct net_buf *bt_l2cap_create_pdu(struct net_buf_pool *pool, size_t reserve)
{
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    557c:	f7ff fcf2 	bl	4f64 <bt_conn_create_pdu>
{
	struct bt_l2cap_sig_hdr *hdr;

	buf = bt_l2cap_create_rsp(buf, 0);

	hdr = net_buf_add(buf, sizeof(*hdr));
    5580:	0007      	movs	r7, r0
    5582:	3708      	adds	r7, #8
	return buf;
}

struct net_buf *bt_l2cap_create_pdu(struct net_buf_pool *pool, size_t reserve)
{
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    5584:	0006      	movs	r6, r0
{
	struct bt_l2cap_sig_hdr *hdr;

	buf = bt_l2cap_create_rsp(buf, 0);

	hdr = net_buf_add(buf, sizeof(*hdr));
    5586:	2104      	movs	r1, #4
    5588:	0038      	movs	r0, r7
    558a:	f00e f81b 	bl	135c4 <net_buf_simple_add>
	hdr->code = code;
    558e:	2312      	movs	r3, #18
	hdr->ident = ident;
    5590:	7045      	strb	r5, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
    5592:	2108      	movs	r1, #8
    5594:	2500      	movs	r5, #0
	struct bt_l2cap_sig_hdr *hdr;

	buf = bt_l2cap_create_rsp(buf, 0);

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->code = code;
    5596:	7003      	strb	r3, [r0, #0]
	hdr->ident = ident;
	hdr->len = sys_cpu_to_le16(len);
    5598:	70c5      	strb	r5, [r0, #3]
    559a:	7081      	strb	r1, [r0, #2]
	struct net_buf *buf;

	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
				      get_ident(), sizeof(*req));

	req = net_buf_add(buf, sizeof(*req));
    559c:	0038      	movs	r0, r7
    559e:	f00e f811 	bl	135c4 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
    55a2:	7823      	ldrb	r3, [r4, #0]
    55a4:	0032      	movs	r2, r6
    55a6:	7003      	strb	r3, [r0, #0]
    55a8:	7863      	ldrb	r3, [r4, #1]
    55aa:	2105      	movs	r1, #5
    55ac:	7043      	strb	r3, [r0, #1]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
    55ae:	78a3      	ldrb	r3, [r4, #2]
    55b0:	7083      	strb	r3, [r0, #2]
    55b2:	78e3      	ldrb	r3, [r4, #3]
    55b4:	70c3      	strb	r3, [r0, #3]
	req->latency = sys_cpu_to_le16(param->latency);
    55b6:	7923      	ldrb	r3, [r4, #4]
    55b8:	7103      	strb	r3, [r0, #4]
    55ba:	7963      	ldrb	r3, [r4, #5]
    55bc:	7143      	strb	r3, [r0, #5]
	req->timeout = sys_cpu_to_le16(param->timeout);
    55be:	79a3      	ldrb	r3, [r4, #6]
    55c0:	7183      	strb	r3, [r0, #6]
    55c2:	79e3      	ldrb	r3, [r4, #7]
    55c4:	71c3      	strb	r3, [r0, #7]
    55c6:	002b      	movs	r3, r5
    55c8:	9801      	ldr	r0, [sp, #4]
    55ca:	f7ff feb5 	bl	5338 <bt_l2cap_send_cb>

	bt_l2cap_send(conn, BT_L2CAP_CID_LE_SIG, buf);

	return 0;
}
    55ce:	0028      	movs	r0, r5
    55d0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    55d2:	46c0      	nop			; (mov r8, r8)
    55d4:	20000f70 	.word	0x20000f70

000055d8 <bt_l2cap_init>:

	return -ENOMEM;
}

void bt_l2cap_init(void)
{
    55d8:	b510      	push	{r4, lr}
	static struct bt_l2cap_fixed_chan chan = {
		.cid	= BT_L2CAP_CID_LE_SIG,
		.accept	= l2cap_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
    55da:	4802      	ldr	r0, [pc, #8]	; (55e4 <bt_l2cap_init+0xc>)
    55dc:	f7ff fdd2 	bl	5184 <bt_l2cap_le_fixed_chan_register>

	if (IS_ENABLED(CONFIG_BLUETOOTH_BREDR)) {
		bt_l2cap_br_init();
	}
}
    55e0:	bd10      	pop	{r4, pc}
    55e2:	46c0      	nop			; (mov r8, r8)
    55e4:	20000618 	.word	0x20000618

000055e8 <att_op_get_type>:
static att_type_t att_op_get_type(u8_t op)
{
	const struct att_handler *handler;
	int i;

	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    55e8:	2300      	movs	r3, #0
		ATT_COMMAND,
		att_signed_write_cmd },
};

static att_type_t att_op_get_type(u8_t op)
{
    55ea:	b510      	push	{r4, lr}
	const struct att_handler *handler;
	int i;

	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
		if (op == handlers[i].op) {
    55ec:	4908      	ldr	r1, [pc, #32]	; (5610 <att_op_get_type+0x28>)
    55ee:	00da      	lsls	r2, r3, #3
    55f0:	5c54      	ldrb	r4, [r2, r1]
    55f2:	4284      	cmp	r4, r0
    55f4:	d102      	bne.n	55fc <att_op_get_type+0x14>
			return handlers[i].type;
    55f6:	188a      	adds	r2, r1, r2
    55f8:	7893      	ldrb	r3, [r2, #2]
    55fa:	e006      	b.n	560a <att_op_get_type+0x22>
static att_type_t att_op_get_type(u8_t op)
{
	const struct att_handler *handler;
	int i;

	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    55fc:	3301      	adds	r3, #1
    55fe:	2b1b      	cmp	r3, #27
    5600:	d1f5      	bne.n	55ee <att_op_get_type+0x6>
			return handlers[i].type;
		}
	}

	if (op & ATT_CMD_MASK) {
		return ATT_COMMAND;
    5602:	2300      	movs	r3, #0
		if (op == handlers[i].op) {
			return handlers[i].type;
		}
	}

	if (op & ATT_CMD_MASK) {
    5604:	0642      	lsls	r2, r0, #25
    5606:	d400      	bmi.n	560a <att_op_get_type+0x22>
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
    5608:	3306      	adds	r3, #6
}
    560a:	0018      	movs	r0, r3
    560c:	bd10      	pop	{r4, pc}
    560e:	46c0      	nop			; (mov r8, r8)
    5610:	00017b54 	.word	0x00017b54

00005614 <bt_att_accept>:
	att->req->buf = NULL;
}
#endif /* CONFIG_BLUETOOTH_SMP */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    5614:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_req_pool); i++) {
		struct bt_att *att = &bt_req_pool[i];

		if (att->chan.chan.conn) {
    5616:	4d12      	ldr	r5, [pc, #72]	; (5660 <bt_att_accept+0x4c>)
	att->req->buf = NULL;
}
#endif /* CONFIG_BLUETOOTH_SMP */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    5618:	000e      	movs	r6, r1
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_req_pool); i++) {
		struct bt_att *att = &bt_req_pool[i];

		if (att->chan.chan.conn) {
    561a:	682c      	ldr	r4, [r5, #0]
    561c:	2c00      	cmp	r4, #0
    561e:	d10f      	bne.n	5640 <bt_att_accept+0x2c>
			continue;
		}

		att->chan.chan.ops = &ops;
		atomic_set(att->flags, 0);
    5620:	0028      	movs	r0, r5

		if (att->chan.chan.conn) {
			continue;
		}

		att->chan.chan.ops = &ops;
    5622:	4b10      	ldr	r3, [pc, #64]	; (5664 <bt_att_accept+0x50>)
		atomic_set(att->flags, 0);
    5624:	0021      	movs	r1, r4

		if (att->chan.chan.conn) {
			continue;
		}

		att->chan.chan.ops = &ops;
    5626:	606b      	str	r3, [r5, #4]
		atomic_set(att->flags, 0);
    5628:	3090      	adds	r0, #144	; 0x90
    562a:	f00e fa92 	bl	13b52 <atomic_set>
		k_sem_init(&att->tx_sem, CONFIG_BLUETOOTH_ATT_TX_MAX,
    562e:	2202      	movs	r2, #2
    5630:	0028      	movs	r0, r5
    5632:	0011      	movs	r1, r2
    5634:	30c8      	adds	r0, #200	; 0xc8
    5636:	f00f f949 	bl	148cc <k_sem_init>
			   CONFIG_BLUETOOTH_ATT_TX_MAX);

		*chan = &att->chan.chan;
    563a:	6035      	str	r5, [r6, #0]

		return 0;
    563c:	0020      	movs	r0, r4
    563e:	e00c      	b.n	565a <bt_att_accept+0x46>
	}

	BT_ERR("No available ATT context for conn %p", conn);
    5640:	4b09      	ldr	r3, [pc, #36]	; (5668 <bt_att_accept+0x54>)
    5642:	9001      	str	r0, [sp, #4]
    5644:	9302      	str	r3, [sp, #8]
    5646:	4b09      	ldr	r3, [pc, #36]	; (566c <bt_att_accept+0x58>)
    5648:	4a09      	ldr	r2, [pc, #36]	; (5670 <bt_att_accept+0x5c>)
    564a:	9300      	str	r3, [sp, #0]
    564c:	4909      	ldr	r1, [pc, #36]	; (5674 <bt_att_accept+0x60>)
    564e:	4b0a      	ldr	r3, [pc, #40]	; (5678 <bt_att_accept+0x64>)
    5650:	480a      	ldr	r0, [pc, #40]	; (567c <bt_att_accept+0x68>)
    5652:	f7fc f995 	bl	1980 <printk>

	return -ENOMEM;
    5656:	200c      	movs	r0, #12
    5658:	4240      	negs	r0, r0
}
    565a:	b004      	add	sp, #16
    565c:	bd70      	pop	{r4, r5, r6, pc}
    565e:	46c0      	nop			; (mov r8, r8)
    5660:	20000f74 	.word	0x20000f74
    5664:	20000644 	.word	0x20000644
    5668:	000154c4 	.word	0x000154c4
    566c:	000154c9 	.word	0x000154c9
    5670:	00015484 	.word	0x00015484
    5674:	0001548b 	.word	0x0001548b
    5678:	00017cee 	.word	0x00017cee
    567c:	00015f85 	.word	0x00015f85

00005680 <att_req_destroy>:
};

static struct bt_att bt_req_pool[CONFIG_BLUETOOTH_MAX_CONN];

static void att_req_destroy(struct bt_att_req *req)
{
    5680:	b510      	push	{r4, lr}
    5682:	0004      	movs	r4, r0
	BT_DBG("req %p", req);

	if (req->buf) {
    5684:	6900      	ldr	r0, [r0, #16]
    5686:	2800      	cmp	r0, #0
    5688:	d001      	beq.n	568e <att_req_destroy+0xe>
		net_buf_unref(req->buf);
    568a:	f00d ff79 	bl	13580 <net_buf_unref>
	}

	if (req->destroy) {
    568e:	68a3      	ldr	r3, [r4, #8]
    5690:	2b00      	cmp	r3, #0
    5692:	d001      	beq.n	5698 <att_req_destroy+0x18>
		req->destroy(req);
    5694:	0020      	movs	r0, r4
    5696:	4798      	blx	r3
	}

	memset(req, 0, sizeof(*req));
    5698:	2218      	movs	r2, #24
    569a:	2100      	movs	r1, #0
    569c:	0020      	movs	r0, r4
    569e:	f7fb fb76 	bl	d8e <memset>
}
    56a2:	bd10      	pop	{r4, pc}

000056a4 <att_notify>:

	return att_handle_rsp(att, buf->data, buf->len, 0);
}

static u8_t att_notify(struct bt_att *att, struct net_buf *buf)
{
    56a4:	b510      	push	{r4, lr}
	struct bt_conn *conn = att->chan.chan.conn;
	u16_t handle;

	handle = net_buf_pull_le16(buf);
    56a6:	3108      	adds	r1, #8
    56a8:	0008      	movs	r0, r1
    56aa:	f00d ffbc 	bl	13626 <net_buf_simple_pull_le16>
	BT_DBG("handle 0x%04x", handle);

	bt_gatt_notification(conn, handle, buf->data, buf->len);

	return 0;
}
    56ae:	2000      	movs	r0, #0
    56b0:	bd10      	pop	{r4, pc}

000056b2 <find_info_cb>:
	struct bt_att *att = data->att;

	BT_DBG("handle 0x%04x", attr->handle);

	/* Initialize rsp at first entry */
	if (!data->rsp) {
    56b2:	688b      	ldr	r3, [r1, #8]
		struct bt_att_info_128 *info128;
	};
};

static u8_t find_info_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    56b4:	b570      	push	{r4, r5, r6, lr}
    56b6:	0005      	movs	r5, r0
    56b8:	000c      	movs	r4, r1
	struct find_info_data *data = user_data;
	struct bt_att *att = data->att;
    56ba:	680e      	ldr	r6, [r1, #0]

	BT_DBG("handle 0x%04x", attr->handle);

	/* Initialize rsp at first entry */
	if (!data->rsp) {
    56bc:	2b00      	cmp	r3, #0
    56be:	d10c      	bne.n	56da <find_info_cb+0x28>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    56c0:	6848      	ldr	r0, [r1, #4]
    56c2:	2101      	movs	r1, #1
    56c4:	3008      	adds	r0, #8
    56c6:	f00d ff7d 	bl	135c4 <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
    56ca:	682b      	ldr	r3, [r5, #0]

	BT_DBG("handle 0x%04x", attr->handle);

	/* Initialize rsp at first entry */
	if (!data->rsp) {
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    56cc:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
    56ce:	781a      	ldrb	r2, [r3, #0]
    56d0:	4253      	negs	r3, r2
    56d2:	4153      	adcs	r3, r2
    56d4:	2202      	movs	r2, #2
    56d6:	1ad3      	subs	r3, r2, r3
    56d8:	7003      	strb	r3, [r0, #0]
				    BT_ATT_INFO_16 : BT_ATT_INFO_128;
	}

	switch (data->rsp->format) {
    56da:	68a3      	ldr	r3, [r4, #8]
    56dc:	781b      	ldrb	r3, [r3, #0]
    56de:	2b01      	cmp	r3, #1
    56e0:	d002      	beq.n	56e8 <find_info_cb+0x36>
    56e2:	2b02      	cmp	r3, #2
    56e4:	d01b      	beq.n	571e <find_info_cb+0x6c>
    56e6:	e03a      	b.n	575e <find_info_cb+0xac>
	case BT_ATT_INFO_16:
		if (attr->uuid->type != BT_UUID_TYPE_16) {
			return BT_GATT_ITER_STOP;
    56e8:	2000      	movs	r0, #0
				    BT_ATT_INFO_16 : BT_ATT_INFO_128;
	}

	switch (data->rsp->format) {
	case BT_ATT_INFO_16:
		if (attr->uuid->type != BT_UUID_TYPE_16) {
    56ea:	682b      	ldr	r3, [r5, #0]
    56ec:	781b      	ldrb	r3, [r3, #0]
    56ee:	4283      	cmp	r3, r0
    56f0:	d136      	bne.n	5760 <find_info_cb+0xae>
			return BT_GATT_ITER_STOP;
		}

		/* Fast foward to next item position */
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
    56f2:	6860      	ldr	r0, [r4, #4]
    56f4:	2104      	movs	r1, #4
    56f6:	3008      	adds	r0, #8
    56f8:	f00d ff64 	bl	135c4 <net_buf_simple_add>
    56fc:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(attr->handle);
    56fe:	7c2b      	ldrb	r3, [r5, #16]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);

		if (att->chan.tx.mtu - data->buf->len >
    5700:	3656      	adds	r6, #86	; 0x56
			return BT_GATT_ITER_STOP;
		}

		/* Fast foward to next item position */
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
		data->info16->handle = sys_cpu_to_le16(attr->handle);
    5702:	7003      	strb	r3, [r0, #0]
    5704:	7c6b      	ldrb	r3, [r5, #17]
    5706:	7043      	strb	r3, [r0, #1]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
    5708:	682b      	ldr	r3, [r5, #0]
    570a:	789a      	ldrb	r2, [r3, #2]
    570c:	7082      	strb	r2, [r0, #2]
    570e:	78db      	ldrb	r3, [r3, #3]

		if (att->chan.tx.mtu - data->buf->len >
    5710:	6862      	ldr	r2, [r4, #4]
		}

		/* Fast foward to next item position */
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
		data->info16->handle = sys_cpu_to_le16(attr->handle);
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
    5712:	70c3      	strb	r3, [r0, #3]
	}

	switch (data->rsp->format) {
	case BT_ATT_INFO_16:
		if (attr->uuid->type != BT_UUID_TYPE_16) {
			return BT_GATT_ITER_STOP;
    5714:	8833      	ldrh	r3, [r6, #0]
    5716:	8990      	ldrh	r0, [r2, #12]
    5718:	1a18      	subs	r0, r3, r0
    571a:	2304      	movs	r3, #4
    571c:	e01b      	b.n	5756 <find_info_cb+0xa4>
			return BT_GATT_ITER_CONTINUE;
		}

		break;
	case BT_ATT_INFO_128:
		if (attr->uuid->type != BT_UUID_TYPE_128) {
    571e:	682b      	ldr	r3, [r5, #0]
	}

	switch (data->rsp->format) {
	case BT_ATT_INFO_16:
		if (attr->uuid->type != BT_UUID_TYPE_16) {
			return BT_GATT_ITER_STOP;
    5720:	2000      	movs	r0, #0
			return BT_GATT_ITER_CONTINUE;
		}

		break;
	case BT_ATT_INFO_128:
		if (attr->uuid->type != BT_UUID_TYPE_128) {
    5722:	781b      	ldrb	r3, [r3, #0]
    5724:	2b02      	cmp	r3, #2
    5726:	d11b      	bne.n	5760 <find_info_cb+0xae>
			return BT_GATT_ITER_STOP;
		}

		/* Fast foward to next item position */
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
    5728:	6860      	ldr	r0, [r4, #4]
    572a:	2112      	movs	r1, #18
    572c:	3008      	adds	r0, #8
    572e:	f00d ff49 	bl	135c4 <net_buf_simple_add>
    5732:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(attr->handle);
    5734:	7c2b      	ldrb	r3, [r5, #16]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
    5736:	6829      	ldr	r1, [r5, #0]
			return BT_GATT_ITER_STOP;
		}

		/* Fast foward to next item position */
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
		data->info128->handle = sys_cpu_to_le16(attr->handle);
    5738:	7003      	strb	r3, [r0, #0]
    573a:	7c6b      	ldrb	r3, [r5, #17]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
    573c:	2210      	movs	r2, #16
			return BT_GATT_ITER_STOP;
		}

		/* Fast foward to next item position */
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
		data->info128->handle = sys_cpu_to_le16(attr->handle);
    573e:	7043      	strb	r3, [r0, #1]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
    5740:	68e3      	ldr	r3, [r4, #12]
    5742:	3101      	adds	r1, #1
    5744:	1c98      	adds	r0, r3, #2
    5746:	f7fb faf8 	bl	d3a <memcpy>
		       sizeof(data->info128->uuid));

		if (att->chan.tx.mtu - data->buf->len >
    574a:	6862      	ldr	r2, [r4, #4]
    574c:	3656      	adds	r6, #86	; 0x56
	}

	switch (data->rsp->format) {
	case BT_ATT_INFO_16:
		if (attr->uuid->type != BT_UUID_TYPE_16) {
			return BT_GATT_ITER_STOP;
    574e:	8833      	ldrh	r3, [r6, #0]
    5750:	8990      	ldrh	r0, [r2, #12]
    5752:	1a18      	subs	r0, r3, r0
    5754:	2312      	movs	r3, #18
    5756:	4283      	cmp	r3, r0
    5758:	4180      	sbcs	r0, r0
    575a:	4240      	negs	r0, r0
    575c:	e000      	b.n	5760 <find_info_cb+0xae>
		    sizeof(*data->info128)) {
			return BT_GATT_ITER_CONTINUE;
		}
	}

	return BT_GATT_ITER_STOP;
    575e:	2000      	movs	r0, #0
}
    5760:	bd70      	pop	{r4, r5, r6, pc}
	...

00005764 <read_group_cb>:
	struct bt_att_read_group_rsp *rsp;
	struct bt_att_group_data *group;
};

static u8_t read_group_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    5764:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct read_group_data *data = user_data;
	struct bt_att *att = data->att;
    5766:	680e      	ldr	r6, [r1, #0]
	struct bt_att_read_group_rsp *rsp;
	struct bt_att_group_data *group;
};

static u8_t read_group_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    5768:	b087      	sub	sp, #28
	struct read_group_data *data = user_data;
	struct bt_att *att = data->att;
	struct bt_conn *conn = att->chan.chan.conn;
    576a:	6833      	ldr	r3, [r6, #0]
	int read;

	/* Update group end_handle if attribute is not a service */
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    576c:	2700      	movs	r7, #0

static u8_t read_group_cb(const struct bt_gatt_attr *attr, void *user_data)
{
	struct read_group_data *data = user_data;
	struct bt_att *att = data->att;
	struct bt_conn *conn = att->chan.chan.conn;
    576e:	9303      	str	r3, [sp, #12]
	int read;

	/* Update group end_handle if attribute is not a service */
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    5770:	23a0      	movs	r3, #160	; 0xa0
	struct bt_att_read_group_rsp *rsp;
	struct bt_att_group_data *group;
};

static u8_t read_group_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    5772:	0005      	movs	r5, r0
    5774:	000c      	movs	r4, r1
	struct bt_att *att = data->att;
	struct bt_conn *conn = att->chan.chan.conn;
	int read;

	/* Update group end_handle if attribute is not a service */
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    5776:	019b      	lsls	r3, r3, #6
    5778:	a904      	add	r1, sp, #16
    577a:	6800      	ldr	r0, [r0, #0]
    577c:	700f      	strb	r7, [r1, #0]
    577e:	804b      	strh	r3, [r1, #2]
    5780:	f7fc fdfc 	bl	237c <bt_uuid_cmp>
    5784:	42b8      	cmp	r0, r7
    5786:	d018      	beq.n	57ba <read_group_cb+0x56>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    5788:	4b30      	ldr	r3, [pc, #192]	; (584c <read_group_cb+0xe8>)
    578a:	a905      	add	r1, sp, #20
    578c:	6828      	ldr	r0, [r5, #0]
    578e:	700f      	strb	r7, [r1, #0]
    5790:	804b      	strh	r3, [r1, #2]
    5792:	f7fc fdf3 	bl	237c <bt_uuid_cmp>
	struct bt_att *att = data->att;
	struct bt_conn *conn = att->chan.chan.conn;
	int read;

	/* Update group end_handle if attribute is not a service */
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    5796:	42b8      	cmp	r0, r7
    5798:	d00f      	beq.n	57ba <read_group_cb+0x56>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
		if (data->group && attr->handle > data->group->end_handle) {
    579a:	6923      	ldr	r3, [r4, #16]
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
		}
		return BT_GATT_ITER_CONTINUE;
    579c:	2001      	movs	r0, #1
	int read;

	/* Update group end_handle if attribute is not a service */
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
		if (data->group && attr->handle > data->group->end_handle) {
    579e:	42bb      	cmp	r3, r7
    57a0:	d051      	beq.n	5846 <read_group_cb+0xe2>
    57a2:	78d9      	ldrb	r1, [r3, #3]
    57a4:	7898      	ldrb	r0, [r3, #2]
    57a6:	8a2a      	ldrh	r2, [r5, #16]
    57a8:	0209      	lsls	r1, r1, #8
    57aa:	4301      	orrs	r1, r0
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
		}
		return BT_GATT_ITER_CONTINUE;
    57ac:	2001      	movs	r0, #1
	int read;

	/* Update group end_handle if attribute is not a service */
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
		if (data->group && attr->handle > data->group->end_handle) {
    57ae:	428a      	cmp	r2, r1
    57b0:	d949      	bls.n	5846 <read_group_cb+0xe2>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
    57b2:	709a      	strb	r2, [r3, #2]
    57b4:	0a12      	lsrs	r2, r2, #8
    57b6:	70da      	strb	r2, [r3, #3]
    57b8:	e045      	b.n	5846 <read_group_cb+0xe2>
		}
		return BT_GATT_ITER_CONTINUE;
	}

	/* If Group Type don't match skip */
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    57ba:	6861      	ldr	r1, [r4, #4]
    57bc:	6828      	ldr	r0, [r5, #0]
    57be:	f7fc fddd 	bl	237c <bt_uuid_cmp>
    57c2:	2800      	cmp	r0, #0
    57c4:	d002      	beq.n	57cc <read_group_cb+0x68>
		data->group = NULL;
    57c6:	2300      	movs	r3, #0
    57c8:	6123      	str	r3, [r4, #16]
    57ca:	e03b      	b.n	5844 <read_group_cb+0xe0>
	}

	BT_DBG("handle 0x%04x", attr->handle);

	/* Stop if there is no space left */
	if (data->rsp->len &&
    57cc:	68e3      	ldr	r3, [r4, #12]
    57ce:	3656      	adds	r6, #86	; 0x56
    57d0:	781a      	ldrb	r2, [r3, #0]
    57d2:	68a0      	ldr	r0, [r4, #8]
    57d4:	2a00      	cmp	r2, #0
    57d6:	d006      	beq.n	57e6 <read_group_cb+0x82>
    57d8:	8833      	ldrh	r3, [r6, #0]
    57da:	8981      	ldrh	r1, [r0, #12]
    57dc:	1a5b      	subs	r3, r3, r1
    57de:	4293      	cmp	r3, r2
    57e0:	da01      	bge.n	57e6 <read_group_cb+0x82>
	    att->chan.tx.mtu - data->buf->len < data->rsp->len) {
		return BT_GATT_ITER_STOP;
    57e2:	2000      	movs	r0, #0
    57e4:	e02f      	b.n	5846 <read_group_cb+0xe2>
	}

	/* Fast foward to next group position */
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    57e6:	2104      	movs	r1, #4
    57e8:	3008      	adds	r0, #8
    57ea:	f00d feeb 	bl	135c4 <net_buf_simple_add>

	/* Initialize group handle range */
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    57ee:	2700      	movs	r7, #0
	    att->chan.tx.mtu - data->buf->len < data->rsp->len) {
		return BT_GATT_ITER_STOP;
	}

	/* Fast foward to next group position */
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    57f0:	6120      	str	r0, [r4, #16]

	/* Initialize group handle range */
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    57f2:	8a2b      	ldrh	r3, [r5, #16]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);

	/* Read attribute value and store in the buffer */
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    57f4:	68a1      	ldr	r1, [r4, #8]

	/* Fast foward to next group position */
	data->group = net_buf_add(data->buf, sizeof(*data->group));

	/* Initialize group handle range */
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    57f6:	b2da      	uxtb	r2, r3
    57f8:	0a1b      	lsrs	r3, r3, #8
    57fa:	7002      	strb	r2, [r0, #0]
    57fc:	7043      	strb	r3, [r0, #1]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
    57fe:	7082      	strb	r2, [r0, #2]
    5800:	70c3      	strb	r3, [r0, #3]

	/* Read attribute value and store in the buffer */
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    5802:	898a      	ldrh	r2, [r1, #12]
    5804:	8833      	ldrh	r3, [r6, #0]
    5806:	6889      	ldr	r1, [r1, #8]
    5808:	1a9b      	subs	r3, r3, r2
    580a:	b29b      	uxth	r3, r3
    580c:	188a      	adds	r2, r1, r2
    580e:	9700      	str	r7, [sp, #0]
    5810:	0029      	movs	r1, r5
    5812:	686e      	ldr	r6, [r5, #4]
    5814:	9803      	ldr	r0, [sp, #12]
    5816:	47b0      	blx	r6
    5818:	0001      	movs	r1, r0
			  att->chan.tx.mtu - data->buf->len, 0);
	if (read < 0) {
    581a:	42b8      	cmp	r0, r7
    581c:	dbe1      	blt.n	57e2 <read_group_cb+0x7e>
		/* TODO: Handle read errors */
		return BT_GATT_ITER_STOP;
	}

	if (!data->rsp->len) {
    581e:	68e0      	ldr	r0, [r4, #12]
    5820:	1d0b      	adds	r3, r1, #4
    5822:	7802      	ldrb	r2, [r0, #0]
    5824:	42ba      	cmp	r2, r7
    5826:	d101      	bne.n	582c <read_group_cb+0xc8>
		/* Set len to be the first group found */
		data->rsp->len = read + sizeof(*data->group);
    5828:	7003      	strb	r3, [r0, #0]
    582a:	e006      	b.n	583a <read_group_cb+0xd6>
	} else if (data->rsp->len != read + sizeof(*data->group)) {
    582c:	429a      	cmp	r2, r3
    582e:	d004      	beq.n	583a <read_group_cb+0xd6>
		/* All groups entries should have the same size */
		data->buf->len -= sizeof(*data->group);
    5830:	68a2      	ldr	r2, [r4, #8]
    5832:	8993      	ldrh	r3, [r2, #12]
    5834:	3b04      	subs	r3, #4
    5836:	8193      	strh	r3, [r2, #12]
    5838:	e7d3      	b.n	57e2 <read_group_cb+0x7e>
		return false;
	}

	net_buf_add(data->buf, read);
    583a:	68a3      	ldr	r3, [r4, #8]
    583c:	3308      	adds	r3, #8
    583e:	0018      	movs	r0, r3
    5840:	f00d fec0 	bl	135c4 <net_buf_simple_add>

	/* Continue to find the end handle */
	return BT_GATT_ITER_CONTINUE;
    5844:	2001      	movs	r0, #1
}
    5846:	b007      	add	sp, #28
    5848:	bdf0      	pop	{r4, r5, r6, r7, pc}
    584a:	46c0      	nop			; (mov r8, r8)
    584c:	00002801 	.word	0x00002801

00005850 <find_type_cb>:
	u8_t value_len;
	u8_t err;
};

static u8_t find_type_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    5850:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_conn *conn = att->chan.chan.conn;
	int read;
	u8_t uuid[16];

	/* Skip secondary services */
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    5852:	2700      	movs	r7, #0
};

static u8_t find_type_cb(const struct bt_gatt_attr *attr, void *user_data)
{
	struct find_type_data *data = user_data;
	struct bt_att *att = data->att;
    5854:	680e      	ldr	r6, [r1, #0]
	u8_t value_len;
	u8_t err;
};

static u8_t find_type_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    5856:	b08b      	sub	sp, #44	; 0x2c
	struct find_type_data *data = user_data;
	struct bt_att *att = data->att;
	struct bt_conn *conn = att->chan.chan.conn;
    5858:	6833      	ldr	r3, [r6, #0]
	u8_t value_len;
	u8_t err;
};

static u8_t find_type_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    585a:	0005      	movs	r5, r0
	struct find_type_data *data = user_data;
	struct bt_att *att = data->att;
	struct bt_conn *conn = att->chan.chan.conn;
    585c:	9303      	str	r3, [sp, #12]
	int read;
	u8_t uuid[16];

	/* Skip secondary services */
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    585e:	4b29      	ldr	r3, [pc, #164]	; (5904 <find_type_cb+0xb4>)
	u8_t value_len;
	u8_t err;
};

static u8_t find_type_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    5860:	000c      	movs	r4, r1
	struct bt_conn *conn = att->chan.chan.conn;
	int read;
	u8_t uuid[16];

	/* Skip secondary services */
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    5862:	6800      	ldr	r0, [r0, #0]
    5864:	a904      	add	r1, sp, #16
    5866:	700f      	strb	r7, [r1, #0]
    5868:	804b      	strh	r3, [r1, #2]
    586a:	f7fc fd87 	bl	237c <bt_uuid_cmp>
    586e:	42b8      	cmp	r0, r7
    5870:	d102      	bne.n	5878 <find_type_cb+0x28>
		data->group = NULL;
    5872:	2300      	movs	r3, #0
    5874:	60a3      	str	r3, [r4, #8]
    5876:	e041      	b.n	58fc <find_type_cb+0xac>
		return BT_GATT_ITER_CONTINUE;
	}

	/* Update group end_handle if not a primary service */
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
    5878:	23a0      	movs	r3, #160	; 0xa0
    587a:	a905      	add	r1, sp, #20
    587c:	019b      	lsls	r3, r3, #6
    587e:	6828      	ldr	r0, [r5, #0]
    5880:	700f      	strb	r7, [r1, #0]
    5882:	804b      	strh	r3, [r1, #2]
    5884:	f7fc fd7a 	bl	237c <bt_uuid_cmp>
    5888:	2800      	cmp	r0, #0
    588a:	d00e      	beq.n	58aa <find_type_cb+0x5a>
		if (data->group && attr->handle > data->group->end_handle) {
    588c:	68a3      	ldr	r3, [r4, #8]
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
		}
		return BT_GATT_ITER_CONTINUE;
    588e:	2601      	movs	r6, #1
		return BT_GATT_ITER_CONTINUE;
	}

	/* Update group end_handle if not a primary service */
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
		if (data->group && attr->handle > data->group->end_handle) {
    5890:	2b00      	cmp	r3, #0
    5892:	d034      	beq.n	58fe <find_type_cb+0xae>
    5894:	78d9      	ldrb	r1, [r3, #3]
    5896:	7898      	ldrb	r0, [r3, #2]
    5898:	8a2a      	ldrh	r2, [r5, #16]
    589a:	0209      	lsls	r1, r1, #8
    589c:	4301      	orrs	r1, r0
    589e:	428a      	cmp	r2, r1
    58a0:	d92d      	bls.n	58fe <find_type_cb+0xae>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
    58a2:	709a      	strb	r2, [r3, #2]
    58a4:	0a12      	lsrs	r2, r2, #8
    58a6:	70da      	strb	r2, [r3, #3]
    58a8:	e029      	b.n	58fe <find_type_cb+0xae>
	}

	BT_DBG("handle 0x%04x", attr->handle);

	/* stop if there is no space left */
	if (att->chan.tx.mtu - data->buf->len < sizeof(*data->group)) {
    58aa:	0033      	movs	r3, r6
    58ac:	6862      	ldr	r2, [r4, #4]
    58ae:	3356      	adds	r3, #86	; 0x56
    58b0:	881b      	ldrh	r3, [r3, #0]
    58b2:	8992      	ldrh	r2, [r2, #12]
		return BT_GATT_ITER_STOP;
    58b4:	0006      	movs	r6, r0
	}

	BT_DBG("handle 0x%04x", attr->handle);

	/* stop if there is no space left */
	if (att->chan.tx.mtu - data->buf->len < sizeof(*data->group)) {
    58b6:	1a9b      	subs	r3, r3, r2
    58b8:	2b03      	cmp	r3, #3
    58ba:	d920      	bls.n	58fe <find_type_cb+0xae>
		return BT_GATT_ITER_STOP;
	}

	/* Read attribute value and store in the buffer */
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
    58bc:	9000      	str	r0, [sp, #0]
    58be:	aa06      	add	r2, sp, #24
    58c0:	2310      	movs	r3, #16
    58c2:	0029      	movs	r1, r5
    58c4:	9803      	ldr	r0, [sp, #12]
    58c6:	686f      	ldr	r7, [r5, #4]
    58c8:	47b8      	blx	r7
    58ca:	1e02      	subs	r2, r0, #0
	if (read < 0) {
    58cc:	dbd1      	blt.n	5872 <find_type_cb+0x22>
		data->group = NULL;
		return BT_GATT_ITER_CONTINUE;
	}

	/* Check if data matches */
	if (read != data->value_len || memcmp(data->value, uuid, read)) {
    58ce:	7c23      	ldrb	r3, [r4, #16]
    58d0:	4298      	cmp	r0, r3
    58d2:	d1ce      	bne.n	5872 <find_type_cb+0x22>
    58d4:	a906      	add	r1, sp, #24
    58d6:	68e0      	ldr	r0, [r4, #12]
    58d8:	f7fb fa1a 	bl	d10 <memcmp>
    58dc:	2800      	cmp	r0, #0
    58de:	d1c8      	bne.n	5872 <find_type_cb+0x22>

	/* If service has been found, error should be cleared */
	data->err = 0x00;

	/* Fast foward to next item position */
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    58e0:	6860      	ldr	r0, [r4, #4]
		data->group = NULL;
		return BT_GATT_ITER_CONTINUE;
	}

	/* If service has been found, error should be cleared */
	data->err = 0x00;
    58e2:	7466      	strb	r6, [r4, #17]

	/* Fast foward to next item position */
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    58e4:	3008      	adds	r0, #8
    58e6:	2104      	movs	r1, #4
    58e8:	f00d fe6c 	bl	135c4 <net_buf_simple_add>
    58ec:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    58ee:	8a2b      	ldrh	r3, [r5, #16]
    58f0:	b2da      	uxtb	r2, r3
    58f2:	0a1b      	lsrs	r3, r3, #8
    58f4:	7002      	strb	r2, [r0, #0]
    58f6:	7043      	strb	r3, [r0, #1]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
    58f8:	7082      	strb	r2, [r0, #2]
    58fa:	70c3      	strb	r3, [r0, #3]

	/* continue to find the end_handle */
	return BT_GATT_ITER_CONTINUE;
    58fc:	2601      	movs	r6, #1
}
    58fe:	0030      	movs	r0, r6
    5900:	b00b      	add	sp, #44	; 0x2c
    5902:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5904:	00002801 	.word	0x00002801

00005908 <bt_att_connected>:
	bt_gatt_disconnected(ch->chan.conn);
	ch->chan.conn = NULL;
}

static void bt_att_connected(struct bt_l2cap_chan *chan)
{
    5908:	b510      	push	{r4, lr}
    590a:	0004      	movs	r4, r0
	struct bt_l2cap_le_chan *ch = BT_L2CAP_LE_CHAN(chan);

	BT_DBG("chan %p cid 0x%04x", ch, ch->tx.cid);

#if CONFIG_BLUETOOTH_ATT_PREPARE_COUNT > 0
	k_fifo_init(&att->prep_queue);
    590c:	30dc      	adds	r0, #220	; 0xdc
    590e:	f00e fd2b 	bl	14368 <k_queue_init>
#endif

	ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    5912:	0022      	movs	r2, r4
    5914:	2317      	movs	r3, #23
	ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;

	k_delayed_work_init(&att->timeout_work, att_timeout);
    5916:	0020      	movs	r0, r4

#if CONFIG_BLUETOOTH_ATT_PREPARE_COUNT > 0
	k_fifo_init(&att->prep_queue);
#endif

	ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    5918:	3256      	adds	r2, #86	; 0x56
    591a:	8013      	strh	r3, [r2, #0]
	ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;

	k_delayed_work_init(&att->timeout_work, att_timeout);
    591c:	4906      	ldr	r1, [pc, #24]	; (5938 <bt_att_connected+0x30>)
#if CONFIG_BLUETOOTH_ATT_PREPARE_COUNT > 0
	k_fifo_init(&att->prep_queue);
#endif

	ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
	ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
    591e:	8763      	strh	r3, [r4, #58]	; 0x3a

	k_delayed_work_init(&att->timeout_work, att_timeout);
    5920:	30a0      	adds	r0, #160	; 0xa0
    5922:	f00f faa7 	bl	14e74 <k_delayed_work_init>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    5926:	0023      	movs	r3, r4
    5928:	2200      	movs	r2, #0
    592a:	3398      	adds	r3, #152	; 0x98
    592c:	601a      	str	r2, [r3, #0]
	list->tail = NULL;
    592e:	605a      	str	r2, [r3, #4]
	sys_slist_init(&att->reqs);

	bt_gatt_connected(ch->chan.conn);
    5930:	6820      	ldr	r0, [r4, #0]
    5932:	f001 fd95 	bl	7460 <bt_gatt_connected>
}
    5936:	bd10      	pop	{r4, pc}
    5938:	00005dd9 	.word	0x00005dd9

0000593c <check_perm>:
	return false;
}

static u8_t check_perm(struct bt_conn *conn, const struct bt_gatt_attr *attr,
		       u8_t mask)
{
    593c:	b530      	push	{r4, r5, lr}
    593e:	0004      	movs	r4, r0
    5940:	7c8b      	ldrb	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
    5942:	07d0      	lsls	r0, r2, #31
    5944:	d506      	bpl.n	5954 <check_perm+0x18>
    5946:	2515      	movs	r5, #21
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
		return BT_ATT_ERR_READ_NOT_PERMITTED;
    5948:	2002      	movs	r0, #2
}

static u8_t check_perm(struct bt_conn *conn, const struct bt_gatt_attr *attr,
		       u8_t mask)
{
	if ((mask & BT_GATT_PERM_READ) &&
    594a:	422b      	tst	r3, r5
    594c:	d01c      	beq.n	5988 <check_perm+0x4c>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
    594e:	684d      	ldr	r5, [r1, #4]
    5950:	2d00      	cmp	r5, #0
    5952:	d019      	beq.n	5988 <check_perm+0x4c>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
	}

	if ((mask & BT_GATT_PERM_WRITE) &&
    5954:	0790      	lsls	r0, r2, #30
    5956:	d506      	bpl.n	5966 <check_perm+0x2a>
    5958:	252a      	movs	r5, #42	; 0x2a
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
    595a:	2003      	movs	r0, #3
	if ((mask & BT_GATT_PERM_READ) &&
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
		return BT_ATT_ERR_READ_NOT_PERMITTED;
	}

	if ((mask & BT_GATT_PERM_WRITE) &&
    595c:	422b      	tst	r3, r5
    595e:	d013      	beq.n	5988 <check_perm+0x4c>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
    5960:	6889      	ldr	r1, [r1, #8]
    5962:	2900      	cmp	r1, #0
    5964:	d010      	beq.n	5988 <check_perm+0x4c>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
	}

	mask &= attr->perm;
    5966:	401a      	ands	r2, r3
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
    5968:	2330      	movs	r3, #48	; 0x30
    596a:	421a      	tst	r2, r3
    596c:	d003      	beq.n	5976 <check_perm+0x3a>
#if defined(CONFIG_BLUETOOTH_SMP)
		if (conn->sec_level < BT_SECURITY_HIGH) {
    596e:	7a23      	ldrb	r3, [r4, #8]
			return BT_ATT_ERR_AUTHENTICATION;
    5970:	2005      	movs	r0, #5
	}

	mask &= attr->perm;
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
#if defined(CONFIG_BLUETOOTH_SMP)
		if (conn->sec_level < BT_SECURITY_HIGH) {
    5972:	2b02      	cmp	r3, #2
    5974:	d908      	bls.n	5988 <check_perm+0x4c>
    5976:	230c      	movs	r3, #12
    5978:	401a      	ands	r2, r3
    597a:	1e10      	subs	r0, r2, #0
#else
		return BT_ATT_ERR_AUTHENTICATION;
#endif /* CONFIG_BLUETOOTH_SMP */
	}

	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
    597c:	d004      	beq.n	5988 <check_perm+0x4c>
#else
		return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
#endif /* CONFIG_BLUETOOTH_SMP */
	}

	return 0;
    597e:	2000      	movs	r0, #0
#endif /* CONFIG_BLUETOOTH_SMP */
	}

	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
#if defined(CONFIG_BLUETOOTH_SMP)
		if (!conn->encrypt) {
    5980:	7aa3      	ldrb	r3, [r4, #10]
    5982:	4283      	cmp	r3, r0
    5984:	d100      	bne.n	5988 <check_perm+0x4c>
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
    5986:	300f      	adds	r0, #15
		return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
#endif /* CONFIG_BLUETOOTH_SMP */
	}

	return 0;
}
    5988:	bd30      	pop	{r4, r5, pc}

0000598a <read_type_cb>:
	struct bt_att_data *item;
	u8_t err;
};

static u8_t read_type_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    598a:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct read_type_data *data = user_data;
	struct bt_att *att = data->att;
    598c:	680b      	ldr	r3, [r1, #0]
	struct bt_att_data *item;
	u8_t err;
};

static u8_t read_type_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    598e:	b085      	sub	sp, #20
	struct read_type_data *data = user_data;
	struct bt_att *att = data->att;
    5990:	9302      	str	r3, [sp, #8]
	struct bt_conn *conn = att->chan.chan.conn;
    5992:	681b      	ldr	r3, [r3, #0]
	struct bt_att_data *item;
	u8_t err;
};

static u8_t read_type_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    5994:	0006      	movs	r6, r0
    5996:	000c      	movs	r4, r1
	struct bt_att *att = data->att;
	struct bt_conn *conn = att->chan.chan.conn;
	int read;

	/* Skip if doesn't match */
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    5998:	6800      	ldr	r0, [r0, #0]
    599a:	6849      	ldr	r1, [r1, #4]

static u8_t read_type_cb(const struct bt_gatt_attr *attr, void *user_data)
{
	struct read_type_data *data = user_data;
	struct bt_att *att = data->att;
	struct bt_conn *conn = att->chan.chan.conn;
    599c:	9303      	str	r3, [sp, #12]
	int read;

	/* Skip if doesn't match */
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    599e:	f7fc fced 	bl	237c <bt_uuid_cmp>
		return BT_GATT_ITER_CONTINUE;
    59a2:	2501      	movs	r5, #1
	struct bt_att *att = data->att;
	struct bt_conn *conn = att->chan.chan.conn;
	int read;

	/* Skip if doesn't match */
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    59a4:	1e07      	subs	r7, r0, #0
    59a6:	d151      	bne.n	5a4c <read_type_cb+0xc2>
	 *
	 * If the first attribute in the set of requested attributes would
	 * cause an Error Response then no other attributes in the requested
	 * attributes can be considered.
	 */
	data->err = check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    59a8:	2215      	movs	r2, #21
    59aa:	0031      	movs	r1, r6
    59ac:	9803      	ldr	r0, [sp, #12]
    59ae:	f7ff ffc5 	bl	593c <check_perm>
    59b2:	1e05      	subs	r5, r0, #0
    59b4:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    59b6:	d006      	beq.n	59c6 <read_type_cb+0x3c>
		if (data->rsp->len) {
    59b8:	68e3      	ldr	r3, [r4, #12]
    59ba:	781d      	ldrb	r5, [r3, #0]
    59bc:	2d00      	cmp	r5, #0
    59be:	d045      	beq.n	5a4c <read_type_cb+0xc2>
			data->err = 0x00;
    59c0:	7527      	strb	r7, [r4, #20]
		}
		return BT_GATT_ITER_STOP;
    59c2:	003d      	movs	r5, r7
    59c4:	e042      	b.n	5a4c <read_type_cb+0xc2>

	/*
	 * If any attribute is founded in handle range it means that error
	 * should be changed from pre-set: attr not found error to no error.
	 */
	data->err = 0x00;
    59c6:	7520      	strb	r0, [r4, #20]

	/* Fast foward to next item position */
	data->item = net_buf_add(data->buf, sizeof(*data->item));
    59c8:	68a0      	ldr	r0, [r4, #8]
    59ca:	2102      	movs	r1, #2
    59cc:	3008      	adds	r0, #8
    59ce:	f00d fdf9 	bl	135c4 <net_buf_simple_add>
    59d2:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(attr->handle);
    59d4:	7c33      	ldrb	r3, [r6, #16]

	/* Read attribute value and store in the buffer */
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
			  att->chan.tx.mtu - data->buf->len, 0);
    59d6:	9f02      	ldr	r7, [sp, #8]
	 */
	data->err = 0x00;

	/* Fast foward to next item position */
	data->item = net_buf_add(data->buf, sizeof(*data->item));
	data->item->handle = sys_cpu_to_le16(attr->handle);
    59d8:	7003      	strb	r3, [r0, #0]
    59da:	7c73      	ldrb	r3, [r6, #17]

	/* Read attribute value and store in the buffer */
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    59dc:	68a1      	ldr	r1, [r4, #8]
	 */
	data->err = 0x00;

	/* Fast foward to next item position */
	data->item = net_buf_add(data->buf, sizeof(*data->item));
	data->item->handle = sys_cpu_to_le16(attr->handle);
    59de:	7043      	strb	r3, [r0, #1]

	/* Read attribute value and store in the buffer */
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
			  att->chan.tx.mtu - data->buf->len, 0);
    59e0:	3756      	adds	r7, #86	; 0x56
	/* Fast foward to next item position */
	data->item = net_buf_add(data->buf, sizeof(*data->item));
	data->item->handle = sys_cpu_to_le16(attr->handle);

	/* Read attribute value and store in the buffer */
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    59e2:	898a      	ldrh	r2, [r1, #12]
    59e4:	883b      	ldrh	r3, [r7, #0]
    59e6:	6889      	ldr	r1, [r1, #8]
    59e8:	9500      	str	r5, [sp, #0]
    59ea:	1a9b      	subs	r3, r3, r2
    59ec:	188a      	adds	r2, r1, r2
    59ee:	6871      	ldr	r1, [r6, #4]
    59f0:	b29b      	uxth	r3, r3
    59f2:	468c      	mov	ip, r1
    59f4:	9803      	ldr	r0, [sp, #12]
    59f6:	0031      	movs	r1, r6
    59f8:	4666      	mov	r6, ip
    59fa:	47b0      	blx	r6
    59fc:	1e01      	subs	r1, r0, #0
			  att->chan.tx.mtu - data->buf->len, 0);
	if (read < 0) {
    59fe:	da08      	bge.n	5a12 <read_type_cb+0x88>

static u8_t err_to_att(int err)
{
	BT_DBG("%d", err);

	if (err < 0 && err >= -0xff) {
    5a00:	000b      	movs	r3, r1
    5a02:	33ff      	adds	r3, #255	; 0xff
		return -err;
	}

	return BT_ATT_ERR_UNLIKELY;
    5a04:	200e      	movs	r0, #14

static u8_t err_to_att(int err)
{
	BT_DBG("%d", err);

	if (err < 0 && err >= -0xff) {
    5a06:	2bfe      	cmp	r3, #254	; 0xfe
    5a08:	d801      	bhi.n	5a0e <read_type_cb+0x84>
		return -err;
    5a0a:	4249      	negs	r1, r1
    5a0c:	b2c8      	uxtb	r0, r1

	/* Read attribute value and store in the buffer */
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
			  att->chan.tx.mtu - data->buf->len, 0);
	if (read < 0) {
		data->err = err_to_att(read);
    5a0e:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
    5a10:	e01c      	b.n	5a4c <read_type_cb+0xc2>
	}

	if (!data->rsp->len) {
    5a12:	68e0      	ldr	r0, [r4, #12]
    5a14:	1c8b      	adds	r3, r1, #2
    5a16:	7802      	ldrb	r2, [r0, #0]
    5a18:	2a00      	cmp	r2, #0
    5a1a:	d101      	bne.n	5a20 <read_type_cb+0x96>
		/* Set len to be the first item found */
		data->rsp->len = read + sizeof(*data->item);
    5a1c:	7003      	strb	r3, [r0, #0]
    5a1e:	e006      	b.n	5a2e <read_type_cb+0xa4>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
    5a20:	429a      	cmp	r2, r3
    5a22:	d004      	beq.n	5a2e <read_type_cb+0xa4>
		/* All items should have the same size */
		data->buf->len -= sizeof(*data->item);
    5a24:	68a2      	ldr	r2, [r4, #8]
    5a26:	8993      	ldrh	r3, [r2, #12]
    5a28:	3b02      	subs	r3, #2
    5a2a:	8193      	strh	r3, [r2, #12]
		return BT_GATT_ITER_STOP;
    5a2c:	e00e      	b.n	5a4c <read_type_cb+0xc2>
	}

	net_buf_add(data->buf, read);
    5a2e:	68a0      	ldr	r0, [r4, #8]

	/* return true only if there are still space for more items */
	return att->chan.tx.mtu - data->buf->len > data->rsp->len ?
    5a30:	2501      	movs	r5, #1
		/* All items should have the same size */
		data->buf->len -= sizeof(*data->item);
		return BT_GATT_ITER_STOP;
	}

	net_buf_add(data->buf, read);
    5a32:	3008      	adds	r0, #8
    5a34:	f00d fdc6 	bl	135c4 <net_buf_simple_add>

	/* return true only if there are still space for more items */
	return att->chan.tx.mtu - data->buf->len > data->rsp->len ?
    5a38:	68a2      	ldr	r2, [r4, #8]
    5a3a:	883b      	ldrh	r3, [r7, #0]
    5a3c:	8992      	ldrh	r2, [r2, #12]
    5a3e:	1a9b      	subs	r3, r3, r2
    5a40:	68e2      	ldr	r2, [r4, #12]
    5a42:	7812      	ldrb	r2, [r2, #0]
    5a44:	4293      	cmp	r3, r2
    5a46:	dc00      	bgt.n	5a4a <read_type_cb+0xc0>
    5a48:	2500      	movs	r5, #0
    5a4a:	b2ed      	uxtb	r5, r5
	       BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
}
    5a4c:	0028      	movs	r0, r5
    5a4e:	b005      	add	sp, #20
    5a50:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

00005a54 <att_cb.isra.4>:
	BT_DBG("conn %p att %p", conn, att);

	k_sem_give(&att->tx_sem);
}

static bt_conn_tx_cb_t att_cb(struct net_buf *buf)
    5a54:	b510      	push	{r4, lr}
{
	switch (att_op_get_type(buf->data[0])) {
    5a56:	7800      	ldrb	r0, [r0, #0]
    5a58:	f7ff fdc6 	bl	55e8 <att_op_get_type>
    5a5c:	3801      	subs	r0, #1
    5a5e:	b2c3      	uxtb	r3, r0
    5a60:	4803      	ldr	r0, [pc, #12]	; (5a70 <att_cb.isra.4+0x1c>)
    5a62:	2b04      	cmp	r3, #4
    5a64:	d802      	bhi.n	5a6c <att_cb.isra.4+0x18>
    5a66:	4a03      	ldr	r2, [pc, #12]	; (5a74 <att_cb.isra.4+0x20>)
    5a68:	009b      	lsls	r3, r3, #2
    5a6a:	5898      	ldr	r0, [r3, r2]
	case ATT_INDICATION:
		return att_req_sent;
	default:
		return att_pdu_sent;
	}
}
    5a6c:	bd10      	pop	{r4, pc}
    5a6e:	46c0      	nop			; (mov r8, r8)
    5a70:	00005eb9 	.word	0x00005eb9
    5a74:	00017d0c 	.word	0x00017d0c

00005a78 <uuid_create>:
	return att_find_type_rsp(att, start_handle, end_handle, value,
				 buf->len);
}

static bool uuid_create(struct bt_uuid *uuid, struct net_buf *buf)
{
    5a78:	b510      	push	{r4, lr}
	switch (buf->len) {
    5a7a:	898b      	ldrh	r3, [r1, #12]
	return att_find_type_rsp(att, start_handle, end_handle, value,
				 buf->len);
}

static bool uuid_create(struct bt_uuid *uuid, struct net_buf *buf)
{
    5a7c:	0004      	movs	r4, r0
	switch (buf->len) {
    5a7e:	2b02      	cmp	r3, #2
    5a80:	d009      	beq.n	5a96 <uuid_create+0x1e>
    5a82:	2b10      	cmp	r3, #16
    5a84:	d110      	bne.n	5aa8 <uuid_create+0x30>
	case 2:
		uuid->type = BT_UUID_TYPE_16;
		BT_UUID_16(uuid)->val = net_buf_pull_le16(buf);
		return true;
	case 16:
		uuid->type = BT_UUID_TYPE_128;
    5a86:	2302      	movs	r3, #2
    5a88:	7003      	strb	r3, [r0, #0]
		memcpy(BT_UUID_128(uuid)->val, buf->data, buf->len);
    5a8a:	898a      	ldrh	r2, [r1, #12]
    5a8c:	3001      	adds	r0, #1
    5a8e:	6889      	ldr	r1, [r1, #8]
    5a90:	f7fb f953 	bl	d3a <memcpy>
    5a94:	e006      	b.n	5aa4 <uuid_create+0x2c>

static bool uuid_create(struct bt_uuid *uuid, struct net_buf *buf)
{
	switch (buf->len) {
	case 2:
		uuid->type = BT_UUID_TYPE_16;
    5a96:	2300      	movs	r3, #0
		BT_UUID_16(uuid)->val = net_buf_pull_le16(buf);
    5a98:	3108      	adds	r1, #8

static bool uuid_create(struct bt_uuid *uuid, struct net_buf *buf)
{
	switch (buf->len) {
	case 2:
		uuid->type = BT_UUID_TYPE_16;
    5a9a:	7003      	strb	r3, [r0, #0]
		BT_UUID_16(uuid)->val = net_buf_pull_le16(buf);
    5a9c:	0008      	movs	r0, r1
    5a9e:	f00d fdc2 	bl	13626 <net_buf_simple_pull_le16>
    5aa2:	8060      	strh	r0, [r4, #2]
		return true;
	case 16:
		uuid->type = BT_UUID_TYPE_128;
		memcpy(BT_UUID_128(uuid)->val, buf->data, buf->len);
    5aa4:	2001      	movs	r0, #1
    5aa6:	e000      	b.n	5aaa <uuid_create+0x32>
		return true;
	}

	return false;
    5aa8:	2000      	movs	r0, #0
}
    5aaa:	bd10      	pop	{r4, pc}

00005aac <att_req_sent>:

	k_sem_give(&att->tx_sem);
}

static void att_req_sent(struct bt_conn *conn)
{
    5aac:	b510      	push	{r4, lr}

static struct bt_att *att_get(struct bt_conn *conn)
{
	struct bt_l2cap_chan *chan;

	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    5aae:	2104      	movs	r1, #4
    5ab0:	f7ff fcea 	bl	5488 <bt_l2cap_le_lookup_tx_cid>
    5ab4:	0004      	movs	r4, r0
{
	struct bt_att *att = att_get(conn);

	BT_DBG("conn %p att %p att->req %p", conn, att, att->req);

	k_sem_give(&att->tx_sem);
    5ab6:	30c8      	adds	r0, #200	; 0xc8
    5ab8:	f00e ff10 	bl	148dc <k_sem_give>

	/* Start timeout work */
	if (att->req) {
    5abc:	0023      	movs	r3, r4
    5abe:	3394      	adds	r3, #148	; 0x94
    5ac0:	681b      	ldr	r3, [r3, #0]
    5ac2:	2b00      	cmp	r3, #0
    5ac4:	d005      	beq.n	5ad2 <att_req_sent+0x26>
		k_delayed_work_submit(&att->timeout_work, ATT_TIMEOUT);
    5ac6:	0021      	movs	r1, r4
 * @retval -EADDRINUSE Work item is pending on a different workqueue.
 */
static inline int k_delayed_work_submit(struct k_delayed_work *work,
					s32_t delay)
{
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    5ac8:	4a02      	ldr	r2, [pc, #8]	; (5ad4 <att_req_sent+0x28>)
    5aca:	31a0      	adds	r1, #160	; 0xa0
    5acc:	4802      	ldr	r0, [pc, #8]	; (5ad8 <att_req_sent+0x2c>)
    5ace:	f00f fa1f 	bl	14f10 <k_delayed_work_submit_to_queue>
	}
}
    5ad2:	bd10      	pop	{r4, pc}
    5ad4:	00007530 	.word	0x00007530
    5ad8:	20002358 	.word	0x20002358

00005adc <att_is_connected>:
	BT_DBG("Negotiated MTU %u", att->chan.rx.mtu);
	return 0;
}

static inline bool att_is_connected(struct bt_att *att)
{
    5adc:	b510      	push	{r4, lr}
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
    5ade:	6803      	ldr	r3, [r0, #0]
    5ae0:	2401      	movs	r4, #1
    5ae2:	3351      	adds	r3, #81	; 0x51
    5ae4:	781b      	ldrb	r3, [r3, #0]
    5ae6:	2b03      	cmp	r3, #3
    5ae8:	d104      	bne.n	5af4 <att_is_connected+0x18>
		!atomic_test_bit(att->flags, ATT_DISCONNECTED));
    5aea:	3090      	adds	r0, #144	; 0x90
 *
 * @return 1 if the bit was set, 0 if it wasn't.
 */
static inline int atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    5aec:	f00e f82f 	bl	13b4e <atomic_get>
    5af0:	1080      	asrs	r0, r0, #2
	return 0;
}

static inline bool att_is_connected(struct bt_att *att)
{
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
    5af2:	4384      	bics	r4, r0
    5af4:	0020      	movs	r0, r4
		!atomic_test_bit(att->flags, ATT_DISCONNECTED));
}
    5af6:	bd10      	pop	{r4, pc}

00005af8 <att_send_req>:

static int att_send_req(struct bt_att *att, struct bt_att_req *req)
{
	BT_DBG("req %p", req);

	att->req = req;
    5af8:	0003      	movs	r3, r0
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
		!atomic_test_bit(att->flags, ATT_DISCONNECTED));
}

static int att_send_req(struct bt_att *att, struct bt_att_req *req)
{
    5afa:	b573      	push	{r0, r1, r4, r5, r6, lr}
	BT_DBG("req %p", req);

	att->req = req;
    5afc:	3394      	adds	r3, #148	; 0x94

	k_sem_take(&att->tx_sem, K_FOREVER);
    5afe:	0006      	movs	r6, r0

static int att_send_req(struct bt_att *att, struct bt_att_req *req)
{
	BT_DBG("req %p", req);

	att->req = req;
    5b00:	6019      	str	r1, [r3, #0]
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
		!atomic_test_bit(att->flags, ATT_DISCONNECTED));
}

static int att_send_req(struct bt_att *att, struct bt_att_req *req)
{
    5b02:	000c      	movs	r4, r1
	BT_DBG("req %p", req);

	att->req = req;

	k_sem_take(&att->tx_sem, K_FOREVER);
    5b04:	2101      	movs	r1, #1
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
		!atomic_test_bit(att->flags, ATT_DISCONNECTED));
}

static int att_send_req(struct bt_att *att, struct bt_att_req *req)
{
    5b06:	0005      	movs	r5, r0
	BT_DBG("req %p", req);

	att->req = req;

	k_sem_take(&att->tx_sem, K_FOREVER);
    5b08:	36c8      	adds	r6, #200	; 0xc8
    5b0a:	4249      	negs	r1, r1
    5b0c:	0030      	movs	r0, r6
    5b0e:	f00e ff21 	bl	14954 <k_sem_take>
	if (!att_is_connected(att)) {
    5b12:	0028      	movs	r0, r5
    5b14:	f7ff ffe2 	bl	5adc <att_is_connected>
    5b18:	2800      	cmp	r0, #0
    5b1a:	d10f      	bne.n	5b3c <att_send_req+0x44>
		BT_WARN("Disconnected");
    5b1c:	4b14      	ldr	r3, [pc, #80]	; (5b70 <att_send_req+0x78>)
    5b1e:	4a15      	ldr	r2, [pc, #84]	; (5b74 <att_send_req+0x7c>)
    5b20:	9301      	str	r3, [sp, #4]
    5b22:	4b15      	ldr	r3, [pc, #84]	; (5b78 <att_send_req+0x80>)
    5b24:	4915      	ldr	r1, [pc, #84]	; (5b7c <att_send_req+0x84>)
    5b26:	9300      	str	r3, [sp, #0]
    5b28:	4815      	ldr	r0, [pc, #84]	; (5b80 <att_send_req+0x88>)
    5b2a:	4b16      	ldr	r3, [pc, #88]	; (5b84 <att_send_req+0x8c>)
    5b2c:	f7fb ff28 	bl	1980 <printk>
		k_sem_give(&att->tx_sem);
    5b30:	0030      	movs	r0, r6
    5b32:	f00e fed3 	bl	148dc <k_sem_give>
		return -ENOTCONN;
    5b36:	2039      	movs	r0, #57	; 0x39
    5b38:	4240      	negs	r0, r0
    5b3a:	e017      	b.n	5b6c <att_send_req+0x74>
	}

	/* Save request state so it can be resent */
	net_buf_simple_save(&req->buf->b, &req->state);
    5b3c:	6926      	ldr	r6, [r4, #16]
    5b3e:	0030      	movs	r0, r6
    5b40:	3008      	adds	r0, #8
 *  @param state Storage for the state.
 */
static inline void net_buf_simple_save(struct net_buf_simple *buf,
				       struct net_buf_simple_state *state)
{
	state->offset = net_buf_simple_headroom(buf);
    5b42:	f00d fd7b 	bl	1363c <net_buf_simple_headroom>
    5b46:	81a0      	strh	r0, [r4, #12]
	state->len = buf->len;
    5b48:	89b3      	ldrh	r3, [r6, #12]

	/* Keep a reference for resending in case of an error */
	bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
    5b4a:	6920      	ldr	r0, [r4, #16]
    5b4c:	81e3      	strh	r3, [r4, #14]
    5b4e:	682d      	ldr	r5, [r5, #0]
    5b50:	f00d fd34 	bl	135bc <net_buf_ref>
    5b54:	6923      	ldr	r3, [r4, #16]
    5b56:	0006      	movs	r6, r0
    5b58:	6898      	ldr	r0, [r3, #8]
    5b5a:	f7ff ff7b 	bl	5a54 <att_cb.isra.4>
    5b5e:	0032      	movs	r2, r6
    5b60:	0003      	movs	r3, r0
    5b62:	2104      	movs	r1, #4
    5b64:	0028      	movs	r0, r5
    5b66:	f7ff fbe7 	bl	5338 <bt_l2cap_send_cb>
			 net_buf_ref(req->buf), att_cb(req->buf));

	return 0;
    5b6a:	2000      	movs	r0, #0
}
    5b6c:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
    5b6e:	46c0      	nop			; (mov r8, r8)
    5b70:	000154c4 	.word	0x000154c4
    5b74:	000154d1 	.word	0x000154d1
    5b78:	0001550f 	.word	0x0001550f
    5b7c:	0001548b 	.word	0x0001548b
    5b80:	00015fba 	.word	0x00015fba
    5b84:	00017b47 	.word	0x00017b47

00005b88 <att_handle_rsp>:

	att_send_req(att, ATT_REQ(node));
}

static u8_t att_handle_rsp(struct bt_att *att, void *pdu, u16_t len, u8_t err)
{
    5b88:	b5f0      	push	{r4, r5, r6, r7, lr}
    5b8a:	0004      	movs	r4, r0
	BT_DBG("err %u len %u: %s", err, len, bt_hex(pdu, len));

	/* Cancel timeout if ongoing */
	k_delayed_work_cancel(&att->timeout_work);

	if (!att->req) {
    5b8c:	0025      	movs	r5, r4

	att_send_req(att, ATT_REQ(node));
}

static u8_t att_handle_rsp(struct bt_att *att, void *pdu, u16_t len, u8_t err)
{
    5b8e:	b085      	sub	sp, #20
	bt_att_func_t func;

	BT_DBG("err %u len %u: %s", err, len, bt_hex(pdu, len));

	/* Cancel timeout if ongoing */
	k_delayed_work_cancel(&att->timeout_work);
    5b90:	30a0      	adds	r0, #160	; 0xa0

	if (!att->req) {
    5b92:	3594      	adds	r5, #148	; 0x94

	att_send_req(att, ATT_REQ(node));
}

static u8_t att_handle_rsp(struct bt_att *att, void *pdu, u16_t len, u8_t err)
{
    5b94:	9303      	str	r3, [sp, #12]
    5b96:	9102      	str	r1, [sp, #8]
    5b98:	0017      	movs	r7, r2
	bt_att_func_t func;

	BT_DBG("err %u len %u: %s", err, len, bt_hex(pdu, len));

	/* Cancel timeout if ongoing */
	k_delayed_work_cancel(&att->timeout_work);
    5b9a:	f00f f981 	bl	14ea0 <k_delayed_work_cancel>

	if (!att->req) {
    5b9e:	682b      	ldr	r3, [r5, #0]
    5ba0:	2b00      	cmp	r3, #0
    5ba2:	d10a      	bne.n	5bba <att_handle_rsp+0x32>
		BT_WARN("No pending ATT request");
    5ba4:	4b1b      	ldr	r3, [pc, #108]	; (5c14 <att_handle_rsp+0x8c>)
    5ba6:	4a1c      	ldr	r2, [pc, #112]	; (5c18 <att_handle_rsp+0x90>)
    5ba8:	9301      	str	r3, [sp, #4]
    5baa:	4b1c      	ldr	r3, [pc, #112]	; (5c1c <att_handle_rsp+0x94>)
    5bac:	491c      	ldr	r1, [pc, #112]	; (5c20 <att_handle_rsp+0x98>)
    5bae:	9300      	str	r3, [sp, #0]
    5bb0:	481c      	ldr	r0, [pc, #112]	; (5c24 <att_handle_rsp+0x9c>)
    5bb2:	4b1d      	ldr	r3, [pc, #116]	; (5c28 <att_handle_rsp+0xa0>)
    5bb4:	f7fb fee4 	bl	1980 <printk>
		goto process;
    5bb8:	e01a      	b.n	5bf0 <att_handle_rsp+0x68>
	}

	/* Release original buffer */
	if (att->req->buf) {
    5bba:	6918      	ldr	r0, [r3, #16]
    5bbc:	2800      	cmp	r0, #0
    5bbe:	d004      	beq.n	5bca <att_handle_rsp+0x42>
		net_buf_unref(att->req->buf);
    5bc0:	f00d fcde 	bl	13580 <net_buf_unref>
		att->req->buf = NULL;
    5bc4:	2200      	movs	r2, #0
    5bc6:	682b      	ldr	r3, [r5, #0]
    5bc8:	611a      	str	r2, [r3, #16]
	}

	/* Reset func so it can be reused by the callback */
	func = att->req->func;
    5bca:	682b      	ldr	r3, [r5, #0]
	att->req->func = NULL;
    5bcc:	2600      	movs	r6, #0
		net_buf_unref(att->req->buf);
		att->req->buf = NULL;
	}

	/* Reset func so it can be reused by the callback */
	func = att->req->func;
    5bce:	685a      	ldr	r2, [r3, #4]
	att->req->func = NULL;

	func(att->chan.chan.conn, err, pdu, len, att->req);
    5bd0:	6820      	ldr	r0, [r4, #0]
		net_buf_unref(att->req->buf);
		att->req->buf = NULL;
	}

	/* Reset func so it can be reused by the callback */
	func = att->req->func;
    5bd2:	4694      	mov	ip, r2
	att->req->func = NULL;
    5bd4:	605e      	str	r6, [r3, #4]

	func(att->chan.chan.conn, err, pdu, len, att->req);
    5bd6:	9a02      	ldr	r2, [sp, #8]
    5bd8:	9300      	str	r3, [sp, #0]
    5bda:	9903      	ldr	r1, [sp, #12]
    5bdc:	003b      	movs	r3, r7
    5bde:	4667      	mov	r7, ip
    5be0:	47b8      	blx	r7

	/* Don't destroy if callback had reused the request */
	if (!att->req->func) {
    5be2:	6828      	ldr	r0, [r5, #0]
    5be4:	6843      	ldr	r3, [r0, #4]
    5be6:	42b3      	cmp	r3, r6
    5be8:	d101      	bne.n	5bee <att_handle_rsp+0x66>
		att_req_destroy(att->req);
    5bea:	f7ff fd49 	bl	5680 <att_req_destroy>
	}

	att->req = NULL;
    5bee:	602e      	str	r6, [r5, #0]
    5bf0:	0023      	movs	r3, r4
    5bf2:	3398      	adds	r3, #152	; 0x98
    5bf4:	6819      	ldr	r1, [r3, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list)
{
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
    5bf6:	2900      	cmp	r1, #0
    5bf8:	d008      	beq.n	5c0c <att_handle_rsp+0x84>
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list)
{
	sys_snode_t *node = list->head;

	list->head = node->next;
    5bfa:	680a      	ldr	r2, [r1, #0]
	if (list->tail == node) {
    5bfc:	6858      	ldr	r0, [r3, #4]
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list)
{
	sys_snode_t *node = list->head;

	list->head = node->next;
    5bfe:	601a      	str	r2, [r3, #0]
	if (list->tail == node) {
    5c00:	4281      	cmp	r1, r0
    5c02:	d100      	bne.n	5c06 <att_handle_rsp+0x7e>
		list->tail = list->head;
    5c04:	605a      	str	r2, [r3, #4]
	node = sys_slist_get(&att->reqs);
	if (!node) {
		return;
	}

	att_send_req(att, ATT_REQ(node));
    5c06:	0020      	movs	r0, r4
    5c08:	f7ff ff76 	bl	5af8 <att_send_req>
process:
	/* Process pending requests */
	att_process(att);

	return 0;
}
    5c0c:	2000      	movs	r0, #0
    5c0e:	b005      	add	sp, #20
    5c10:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5c12:	46c0      	nop			; (mov r8, r8)
    5c14:	000154c4 	.word	0x000154c4
    5c18:	000154d1 	.word	0x000154d1
    5c1c:	0001550f 	.word	0x0001550f
    5c20:	0001548b 	.word	0x0001548b
    5c24:	00015fd7 	.word	0x00015fd7
    5c28:	00017cbd 	.word	0x00017cbd

00005c2c <att_confirm>:

	return 0;
}

static u8_t att_confirm(struct bt_att *att, struct net_buf *buf)
{
    5c2c:	b510      	push	{r4, lr}
	BT_DBG("");

	return att_handle_rsp(att, buf->data, buf->len, 0);
    5c2e:	2300      	movs	r3, #0
    5c30:	898a      	ldrh	r2, [r1, #12]
    5c32:	6889      	ldr	r1, [r1, #8]
    5c34:	f7ff ffa8 	bl	5b88 <att_handle_rsp>
}
    5c38:	bd10      	pop	{r4, pc}

00005c3a <att_handle_exec_write_rsp>:
    5c3a:	b510      	push	{r4, lr}
    5c3c:	f7ff fff6 	bl	5c2c <att_confirm>
    5c40:	bd10      	pop	{r4, pc}

00005c42 <att_handle_prepare_write_rsp>:
    5c42:	b510      	push	{r4, lr}
    5c44:	f7ff fff2 	bl	5c2c <att_confirm>
    5c48:	bd10      	pop	{r4, pc}

00005c4a <att_handle_write_rsp>:
    5c4a:	b510      	push	{r4, lr}
    5c4c:	f7ff ffee 	bl	5c2c <att_confirm>
    5c50:	bd10      	pop	{r4, pc}

00005c52 <att_handle_read_mult_rsp>:
    5c52:	b510      	push	{r4, lr}
    5c54:	f7ff ffea 	bl	5c2c <att_confirm>
    5c58:	bd10      	pop	{r4, pc}

00005c5a <att_handle_read_blob_rsp>:
    5c5a:	b510      	push	{r4, lr}
    5c5c:	f7ff ffe6 	bl	5c2c <att_confirm>
    5c60:	bd10      	pop	{r4, pc}

00005c62 <att_handle_read_rsp>:
    5c62:	b510      	push	{r4, lr}
    5c64:	f7ff ffe2 	bl	5c2c <att_confirm>
    5c68:	bd10      	pop	{r4, pc}

00005c6a <att_handle_read_type_rsp>:
    5c6a:	b510      	push	{r4, lr}
    5c6c:	f7ff ffde 	bl	5c2c <att_confirm>
    5c70:	bd10      	pop	{r4, pc}

00005c72 <att_handle_find_type_rsp>:
    5c72:	b510      	push	{r4, lr}
    5c74:	f7ff ffda 	bl	5c2c <att_confirm>
    5c78:	bd10      	pop	{r4, pc}

00005c7a <att_handle_find_info_rsp>:
    5c7a:	b510      	push	{r4, lr}
    5c7c:	f7ff ffd6 	bl	5c2c <att_confirm>
    5c80:	bd10      	pop	{r4, pc}

00005c82 <att_mtu_rsp>:

	return 0;
}

static u8_t att_mtu_rsp(struct bt_att *att, struct net_buf *buf)
{
    5c82:	b510      	push	{r4, lr}
	struct bt_att_exchange_mtu_rsp *rsp;
	u16_t mtu;

	if (!att) {
		return 0;
    5c84:	0003      	movs	r3, r0

	return 0;
}

static u8_t att_mtu_rsp(struct bt_att *att, struct net_buf *buf)
{
    5c86:	000c      	movs	r4, r1
	struct bt_att_exchange_mtu_rsp *rsp;
	u16_t mtu;

	if (!att) {
    5c88:	2800      	cmp	r0, #0
    5c8a:	d017      	beq.n	5cbc <att_mtu_rsp+0x3a>
		return 0;
	}

	rsp = (void *)buf->data;
    5c8c:	6889      	ldr	r1, [r1, #8]

	mtu = sys_le16_to_cpu(rsp->mtu);
    5c8e:	784b      	ldrb	r3, [r1, #1]
    5c90:	780a      	ldrb	r2, [r1, #0]
    5c92:	021b      	lsls	r3, r3, #8
    5c94:	4313      	orrs	r3, r2

	BT_DBG("Server MTU %u", mtu);

	/* Check if MTU is valid */
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
    5c96:	2b16      	cmp	r3, #22
    5c98:	d803      	bhi.n	5ca2 <att_mtu_rsp+0x20>
		return att_handle_rsp(att, NULL, 0, BT_ATT_ERR_INVALID_PDU);
    5c9a:	2200      	movs	r2, #0
    5c9c:	2304      	movs	r3, #4
    5c9e:	0011      	movs	r1, r2
    5ca0:	e009      	b.n	5cb6 <att_mtu_rsp+0x34>
	}

	att->chan.rx.mtu = min(mtu, BT_ATT_MTU);
    5ca2:	1c1a      	adds	r2, r3, #0
    5ca4:	2b41      	cmp	r3, #65	; 0x41
    5ca6:	d900      	bls.n	5caa <att_mtu_rsp+0x28>
    5ca8:	2241      	movs	r2, #65	; 0x41
	/* BLUETOOTH SPECIFICATION Version 4.2 [Vol 3, Part F] page 484:
	 *
	 * A device's Exchange MTU Request shall contain the same MTU as the
	 * device's Exchange MTU Response (i.e. the MTU shall be symmetric).
	 */
	att->chan.tx.mtu = att->chan.rx.mtu;
    5caa:	0003      	movs	r3, r0
    5cac:	3356      	adds	r3, #86	; 0x56
	/* Check if MTU is valid */
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
		return att_handle_rsp(att, NULL, 0, BT_ATT_ERR_INVALID_PDU);
	}

	att->chan.rx.mtu = min(mtu, BT_ATT_MTU);
    5cae:	8742      	strh	r2, [r0, #58]	; 0x3a
	/* BLUETOOTH SPECIFICATION Version 4.2 [Vol 3, Part F] page 484:
	 *
	 * A device's Exchange MTU Request shall contain the same MTU as the
	 * device's Exchange MTU Response (i.e. the MTU shall be symmetric).
	 */
	att->chan.tx.mtu = att->chan.rx.mtu;
    5cb0:	801a      	strh	r2, [r3, #0]

	BT_DBG("Negotiated MTU %u", att->chan.rx.mtu);

	return att_handle_rsp(att, rsp, buf->len, 0);
    5cb2:	2300      	movs	r3, #0
    5cb4:	89a2      	ldrh	r2, [r4, #12]
    5cb6:	f7ff ff67 	bl	5b88 <att_handle_rsp>
    5cba:	0003      	movs	r3, r0
}
    5cbc:	0018      	movs	r0, r3
    5cbe:	bd10      	pop	{r4, pc}

00005cc0 <att_error_rsp>:
	return bt_conn_security(conn, sec);
}
#endif /* CONFIG_BLUETOOTH_SMP */

static u8_t att_error_rsp(struct bt_att *att, struct net_buf *buf)
{
    5cc0:	b570      	push	{r4, r5, r6, lr}
    5cc2:	0005      	movs	r5, r0
	rsp = (void *)buf->data;

	BT_DBG("request 0x%02x handle 0x%04x error 0x%02x", rsp->request,
	       sys_le16_to_cpu(rsp->handle), rsp->error);

	if (!att->req) {
    5cc4:	002e      	movs	r6, r5
    5cc6:	3694      	adds	r6, #148	; 0x94
    5cc8:	6833      	ldr	r3, [r6, #0]
static u8_t att_error_rsp(struct bt_att *att, struct net_buf *buf)
{
	struct bt_att_error_rsp *rsp;
	u8_t err;

	rsp = (void *)buf->data;
    5cca:	6888      	ldr	r0, [r1, #8]

	BT_DBG("request 0x%02x handle 0x%04x error 0x%02x", rsp->request,
	       sys_le16_to_cpu(rsp->handle), rsp->error);

	if (!att->req) {
    5ccc:	2b00      	cmp	r3, #0
    5cce:	d02a      	beq.n	5d26 <att_error_rsp+0x66>
		err = BT_ATT_ERR_UNLIKELY;
		goto done;
	}

	if (att->req->buf) {
    5cd0:	691a      	ldr	r2, [r3, #16]
    5cd2:	2a00      	cmp	r2, #0
    5cd4:	d006      	beq.n	5ce4 <att_error_rsp+0x24>
 *  @param state Stored state.
 */
static inline void net_buf_simple_restore(struct net_buf_simple *buf,
					  struct net_buf_simple_state *state)
{
	buf->data = buf->__buf + state->offset;
    5cd6:	0014      	movs	r4, r2
    5cd8:	8999      	ldrh	r1, [r3, #12]
    5cda:	3410      	adds	r4, #16
    5cdc:	1861      	adds	r1, r4, r1
    5cde:	6091      	str	r1, [r2, #8]
	buf->len = state->len;
    5ce0:	89d9      	ldrh	r1, [r3, #14]
    5ce2:	8191      	strh	r1, [r2, #12]
		net_buf_simple_restore(&att->req->buf->b, &att->req->state);
	}

	err = rsp->error;
#if defined(CONFIG_BLUETOOTH_SMP)
	if (att->req->retrying) {
    5ce4:	7d1b      	ldrb	r3, [r3, #20]
	if (att->req->buf) {
		/* Restore state to be resent */
		net_buf_simple_restore(&att->req->buf->b, &att->req->state);
	}

	err = rsp->error;
    5ce6:	78c4      	ldrb	r4, [r0, #3]
#if defined(CONFIG_BLUETOOTH_SMP)
	if (att->req->retrying) {
    5ce8:	2b00      	cmp	r3, #0
    5cea:	d11d      	bne.n	5d28 <att_error_rsp+0x68>
		goto done;
	}

	/* Check if security needs to be changed */
	if (!att_change_security(att->chan.chan.conn, err)) {
    5cec:	6828      	ldr	r0, [r5, #0]
#if defined(CONFIG_BLUETOOTH_SMP)
static int att_change_security(struct bt_conn *conn, u8_t err)
{
	bt_security_t sec;

	switch (err) {
    5cee:	2c05      	cmp	r4, #5
    5cf0:	d005      	beq.n	5cfe <att_error_rsp+0x3e>
    5cf2:	2c0f      	cmp	r4, #15
    5cf4:	d118      	bne.n	5d28 <att_error_rsp+0x68>
	case BT_ATT_ERR_INSUFFICIENT_ENCRYPTION:
		if (conn->sec_level >= BT_SECURITY_MEDIUM)
    5cf6:	7a03      	ldrb	r3, [r0, #8]
    5cf8:	2b01      	cmp	r3, #1
    5cfa:	d909      	bls.n	5d10 <att_error_rsp+0x50>
    5cfc:	e014      	b.n	5d28 <att_error_rsp+0x68>
			return -EALREADY;
		sec = BT_SECURITY_MEDIUM;
		break;
	case BT_ATT_ERR_AUTHENTICATION:
		if (conn->sec_level < BT_SECURITY_MEDIUM) {
    5cfe:	7a03      	ldrb	r3, [r0, #8]
    5d00:	2b01      	cmp	r3, #1
    5d02:	d905      	bls.n	5d10 <att_error_rsp+0x50>
			 * Note: When the link is not encrypted, the error code
			 * "Insufficient Authentication" does not indicate that
			 * MITM protection is required.
			 */
			sec = BT_SECURITY_MEDIUM;
		} else if (conn->sec_level < BT_SECURITY_HIGH) {
    5d04:	2b02      	cmp	r3, #2
    5d06:	d005      	beq.n	5d14 <att_error_rsp+0x54>
			 * required but LE legacy pairing has occurred and the
			 * link is currently encrypted, the service request
			 * shall be rejected with the error code ''Insufficient
			 * Authentication'.
			 */
			sec = BT_SECURITY_FIPS;
    5d08:	2104      	movs	r1, #4
			 * the link is currently encrypted, the error code
			 * 'Insufficient Authentication' indicates that MITM
			 * protection is required.
			 */
			sec = BT_SECURITY_HIGH;
		} else if (conn->sec_level < BT_SECURITY_FIPS) {
    5d0a:	2b03      	cmp	r3, #3
    5d0c:	d003      	beq.n	5d16 <att_error_rsp+0x56>
    5d0e:	e00b      	b.n	5d28 <att_error_rsp+0x68>

	switch (err) {
	case BT_ATT_ERR_INSUFFICIENT_ENCRYPTION:
		if (conn->sec_level >= BT_SECURITY_MEDIUM)
			return -EALREADY;
		sec = BT_SECURITY_MEDIUM;
    5d10:	2102      	movs	r1, #2
    5d12:	e000      	b.n	5d16 <att_error_rsp+0x56>
			 * Note: When unauthenticated pairing has occurred and
			 * the link is currently encrypted, the error code
			 * 'Insufficient Authentication' indicates that MITM
			 * protection is required.
			 */
			sec = BT_SECURITY_HIGH;
    5d14:	2103      	movs	r1, #3
		break;
	default:
		return -EINVAL;
	}

	return bt_conn_security(conn, sec);
    5d16:	f7fe fcf1 	bl	46fc <bt_conn_security>
	if (att->req->retrying) {
		goto done;
	}

	/* Check if security needs to be changed */
	if (!att_change_security(att->chan.chan.conn, err)) {
    5d1a:	2800      	cmp	r0, #0
    5d1c:	d104      	bne.n	5d28 <att_error_rsp+0x68>
		att->req->retrying = true;
    5d1e:	2201      	movs	r2, #1
    5d20:	6833      	ldr	r3, [r6, #0]
    5d22:	751a      	strb	r2, [r3, #20]
		/* Wait security_changed: TODO: Handle fail case */
		return 0;
    5d24:	e006      	b.n	5d34 <att_error_rsp+0x74>

	BT_DBG("request 0x%02x handle 0x%04x error 0x%02x", rsp->request,
	       sys_le16_to_cpu(rsp->handle), rsp->error);

	if (!att->req) {
		err = BT_ATT_ERR_UNLIKELY;
    5d26:	240e      	movs	r4, #14
		return 0;
	}
#endif /* CONFIG_BLUETOOTH_SMP */

done:
	return att_handle_rsp(att, NULL, 0, err);
    5d28:	2200      	movs	r2, #0
    5d2a:	0023      	movs	r3, r4
    5d2c:	0011      	movs	r1, r2
    5d2e:	0028      	movs	r0, r5
    5d30:	f7ff ff2a 	bl	5b88 <att_handle_rsp>
}
    5d34:	bd70      	pop	{r4, r5, r6, pc}

00005d36 <att_reset>:

	return buf;
}

static void att_reset(struct bt_att *att)
{
    5d36:	b5f0      	push	{r4, r5, r6, r7, lr}
    5d38:	0005      	movs	r5, r0
    5d3a:	b085      	sub	sp, #20
	int i;
#if CONFIG_BLUETOOTH_ATT_PREPARE_COUNT > 0
	struct net_buf *buf;

	/* Discard queued buffers */
	while ((buf = k_fifo_get(&att->prep_queue, K_NO_WAIT))) {
    5d3c:	0028      	movs	r0, r5
    5d3e:	2100      	movs	r1, #0
    5d40:	30dc      	adds	r0, #220	; 0xdc
    5d42:	f00e fbad 	bl	144a0 <k_queue_get>
    5d46:	2800      	cmp	r0, #0
    5d48:	d002      	beq.n	5d50 <att_reset+0x1a>
		net_buf_unref(buf);
    5d4a:	f00d fc19 	bl	13580 <net_buf_unref>
    5d4e:	e7f5      	b.n	5d3c <att_reset+0x6>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_or(ATOMIC_ELEM(target, bit), mask);
    5d50:	0028      	movs	r0, r5

	atomic_set_bit(att->flags, ATT_DISCONNECTED);

	/* Ensure that any waiters are woken up */
	for (i = 0; i < CONFIG_BLUETOOTH_ATT_TX_MAX; i++) {
		k_sem_give(&att->tx_sem);
    5d52:	002c      	movs	r4, r5
    5d54:	002e      	movs	r6, r5
    5d56:	2104      	movs	r1, #4
    5d58:	34c8      	adds	r4, #200	; 0xc8
    5d5a:	3090      	adds	r0, #144	; 0x90
    5d5c:	f00d ff03 	bl	13b66 <atomic_or>
    5d60:	0020      	movs	r0, r4
    5d62:	f00e fdbb 	bl	148dc <k_sem_give>
    5d66:	3698      	adds	r6, #152	; 0x98
    5d68:	0020      	movs	r0, r4
    5d6a:	f00e fdb7 	bl	148dc <k_sem_give>
    5d6e:	6834      	ldr	r4, [r6, #0]
    5d70:	9603      	str	r6, [sp, #12]
	}

	/* Notify pending requests */
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    5d72:	2c00      	cmp	r4, #0
    5d74:	d10e      	bne.n	5d94 <att_reset+0x5e>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    5d76:	2100      	movs	r1, #0
    5d78:	9b03      	ldr	r3, [sp, #12]
    5d7a:	6019      	str	r1, [r3, #0]
	list->tail = NULL;
    5d7c:	6059      	str	r1, [r3, #4]
	}

	/* Reset list */
	sys_slist_init(&att->reqs);

	if (!att->req) {
    5d7e:	002b      	movs	r3, r5
    5d80:	3394      	adds	r3, #148	; 0x94
    5d82:	681b      	ldr	r3, [r3, #0]
    5d84:	428b      	cmp	r3, r1
    5d86:	d017      	beq.n	5db8 <att_reset+0x82>
		return;
	}

	/* Notify outstanding request */
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
    5d88:	230e      	movs	r3, #14
    5d8a:	000a      	movs	r2, r1
    5d8c:	0028      	movs	r0, r5
    5d8e:	f7ff fefb 	bl	5b88 <att_handle_rsp>
    5d92:	e011      	b.n	5db8 <att_reset+0x82>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node)
{
	return node->next;
    5d94:	6827      	ldr	r7, [r4, #0]
		k_sem_give(&att->tx_sem);
	}

	/* Notify pending requests */
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
		if (req->func) {
    5d96:	6863      	ldr	r3, [r4, #4]
    5d98:	1e1e      	subs	r6, r3, #0
    5d9a:	d005      	beq.n	5da8 <att_reset+0x72>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0, req);
    5d9c:	2300      	movs	r3, #0
    5d9e:	9400      	str	r4, [sp, #0]
    5da0:	001a      	movs	r2, r3
    5da2:	210e      	movs	r1, #14
    5da4:	0018      	movs	r0, r3
    5da6:	47b0      	blx	r6
		}

		att_req_destroy(req);
    5da8:	0020      	movs	r0, r4
    5daa:	f7ff fc69 	bl	5680 <att_req_destroy>
	for (i = 0; i < CONFIG_BLUETOOTH_ATT_TX_MAX; i++) {
		k_sem_give(&att->tx_sem);
	}

	/* Notify pending requests */
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    5dae:	2f00      	cmp	r7, #0
    5db0:	d0e1      	beq.n	5d76 <att_reset+0x40>
    5db2:	003c      	movs	r4, r7
    5db4:	683f      	ldr	r7, [r7, #0]
    5db6:	e7ee      	b.n	5d96 <att_reset+0x60>
		return;
	}

	/* Notify outstanding request */
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
}
    5db8:	b005      	add	sp, #20
    5dba:	bdf0      	pop	{r4, r5, r6, r7, pc}

00005dbc <bt_att_disconnected>:

	bt_gatt_connected(ch->chan.conn);
}

static void bt_att_disconnected(struct bt_l2cap_chan *chan)
{
    5dbc:	b510      	push	{r4, lr}
    5dbe:	0004      	movs	r4, r0
	struct bt_att *att = ATT_CHAN(chan);
	struct bt_l2cap_le_chan *ch = BT_L2CAP_LE_CHAN(chan);

	BT_DBG("chan %p cid 0x%04x", ch, ch->tx.cid);

	att_reset(att);
    5dc0:	f7ff ffb9 	bl	5d36 <att_reset>

	bt_gatt_disconnected(ch->chan.conn);
    5dc4:	6820      	ldr	r0, [r4, #0]
    5dc6:	f001 fb57 	bl	7478 <bt_gatt_disconnected>
	memset(att, 0, sizeof(*att));
    5dca:	22f0      	movs	r2, #240	; 0xf0
    5dcc:	2100      	movs	r1, #0
    5dce:	0020      	movs	r0, r4
    5dd0:	f7fa ffdd 	bl	d8e <memset>
}
    5dd4:	bd10      	pop	{r4, pc}
	...

00005dd8 <att_timeout>:
	/* Notify outstanding request */
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
}

static void att_timeout(struct k_work *work)
{
    5dd8:	b513      	push	{r0, r1, r4, lr}
    5dda:	0004      	movs	r4, r0
	struct bt_att *att = CONTAINER_OF(work, struct bt_att, timeout_work);
	struct bt_l2cap_le_chan *ch = &att->chan;

	BT_ERR("ATT Timeout");
    5ddc:	4b09      	ldr	r3, [pc, #36]	; (5e04 <att_timeout+0x2c>)
    5dde:	4a0a      	ldr	r2, [pc, #40]	; (5e08 <att_timeout+0x30>)
    5de0:	9301      	str	r3, [sp, #4]
    5de2:	4b0a      	ldr	r3, [pc, #40]	; (5e0c <att_timeout+0x34>)
    5de4:	490a      	ldr	r1, [pc, #40]	; (5e10 <att_timeout+0x38>)
	 * transaction shall be considered to have failed and the local higher
	 * layers shall be informed of this failure. No more attribute protocol
	 * requests, commands, indications or notifications shall be sent to the
	 * target device on this ATT Bearer.
	 */
	att_reset(att);
    5de6:	3ca0      	subs	r4, #160	; 0xa0
static void att_timeout(struct k_work *work)
{
	struct bt_att *att = CONTAINER_OF(work, struct bt_att, timeout_work);
	struct bt_l2cap_le_chan *ch = &att->chan;

	BT_ERR("ATT Timeout");
    5de8:	9300      	str	r3, [sp, #0]
    5dea:	480a      	ldr	r0, [pc, #40]	; (5e14 <att_timeout+0x3c>)
    5dec:	4b0a      	ldr	r3, [pc, #40]	; (5e18 <att_timeout+0x40>)
    5dee:	f7fb fdc7 	bl	1980 <printk>
	 * transaction shall be considered to have failed and the local higher
	 * layers shall be informed of this failure. No more attribute protocol
	 * requests, commands, indications or notifications shall be sent to the
	 * target device on this ATT Bearer.
	 */
	att_reset(att);
    5df2:	0020      	movs	r0, r4
    5df4:	f7ff ff9f 	bl	5d36 <att_reset>

	/* Consider the channel disconnected */
	bt_gatt_disconnected(ch->chan.conn);
    5df8:	6820      	ldr	r0, [r4, #0]
    5dfa:	f001 fb3d 	bl	7478 <bt_gatt_disconnected>
	ch->chan.conn = NULL;
    5dfe:	2300      	movs	r3, #0
    5e00:	6023      	str	r3, [r4, #0]
}
    5e02:	bd13      	pop	{r0, r1, r4, pc}
    5e04:	000154c4 	.word	0x000154c4
    5e08:	00015484 	.word	0x00015484
    5e0c:	000154c9 	.word	0x000154c9
    5e10:	0001548b 	.word	0x0001548b
    5e14:	00015ffe 	.word	0x00015ffe
    5e18:	00017c9c 	.word	0x00017c9c

00005e1c <bt_att_encrypt_change>:
}

#if defined(CONFIG_BLUETOOTH_SMP)
static void bt_att_encrypt_change(struct bt_l2cap_chan *chan,
				  u8_t hci_status)
{
    5e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    5e1e:	b085      	sub	sp, #20
    5e20:	0004      	movs	r4, r0
    5e22:	9103      	str	r1, [sp, #12]

	/*
	 * If status (HCI status of security procedure) is non-zero, notify
	 * outstanding request about security failure.
	 */
	if (hci_status) {
    5e24:	2900      	cmp	r1, #0
    5e26:	d005      	beq.n	5e34 <bt_att_encrypt_change+0x18>
		att_handle_rsp(att, NULL, 0, BT_ATT_ERR_AUTHENTICATION);
    5e28:	2200      	movs	r2, #0
    5e2a:	2305      	movs	r3, #5
    5e2c:	0011      	movs	r1, r2
    5e2e:	f7ff feab 	bl	5b88 <att_handle_rsp>
		return;
    5e32:	e033      	b.n	5e9c <bt_att_encrypt_change+0x80>
static void bt_att_encrypt_change(struct bt_l2cap_chan *chan,
				  u8_t hci_status)
{
	struct bt_att *att = ATT_CHAN(chan);
	struct bt_l2cap_le_chan *ch = BT_L2CAP_LE_CHAN(chan);
	struct bt_conn *conn = ch->chan.conn;
    5e34:	6806      	ldr	r6, [r0, #0]
	if (hci_status) {
		att_handle_rsp(att, NULL, 0, BT_ATT_ERR_AUTHENTICATION);
		return;
	}

	if (conn->sec_level == BT_SECURITY_LOW) {
    5e36:	7a33      	ldrb	r3, [r6, #8]
    5e38:	2b01      	cmp	r3, #1
    5e3a:	d02f      	beq.n	5e9c <bt_att_encrypt_change+0x80>
		return;
	}

	if (!att->req || !att->req->retrying) {
    5e3c:	0005      	movs	r5, r0
    5e3e:	3594      	adds	r5, #148	; 0x94
    5e40:	682b      	ldr	r3, [r5, #0]
    5e42:	2b00      	cmp	r3, #0
    5e44:	d02a      	beq.n	5e9c <bt_att_encrypt_change+0x80>
    5e46:	7d1b      	ldrb	r3, [r3, #20]
    5e48:	2b00      	cmp	r3, #0
    5e4a:	d027      	beq.n	5e9c <bt_att_encrypt_change+0x80>
		return;
	}

	k_sem_take(&att->tx_sem, K_FOREVER);
    5e4c:	0007      	movs	r7, r0
    5e4e:	2101      	movs	r1, #1
    5e50:	37c8      	adds	r7, #200	; 0xc8
    5e52:	4249      	negs	r1, r1
    5e54:	0038      	movs	r0, r7
    5e56:	f00e fd7d 	bl	14954 <k_sem_take>
	if (!att_is_connected(att)) {
    5e5a:	0020      	movs	r0, r4
    5e5c:	f7ff fe3e 	bl	5adc <att_is_connected>
    5e60:	2800      	cmp	r0, #0
    5e62:	d10d      	bne.n	5e80 <bt_att_encrypt_change+0x64>
		BT_WARN("Disconnected");
    5e64:	4b0e      	ldr	r3, [pc, #56]	; (5ea0 <bt_att_encrypt_change+0x84>)
    5e66:	4a0f      	ldr	r2, [pc, #60]	; (5ea4 <bt_att_encrypt_change+0x88>)
    5e68:	9301      	str	r3, [sp, #4]
    5e6a:	4b0f      	ldr	r3, [pc, #60]	; (5ea8 <bt_att_encrypt_change+0x8c>)
    5e6c:	490f      	ldr	r1, [pc, #60]	; (5eac <bt_att_encrypt_change+0x90>)
    5e6e:	9300      	str	r3, [sp, #0]
    5e70:	480f      	ldr	r0, [pc, #60]	; (5eb0 <bt_att_encrypt_change+0x94>)
    5e72:	4b10      	ldr	r3, [pc, #64]	; (5eb4 <bt_att_encrypt_change+0x98>)
    5e74:	f7fb fd84 	bl	1980 <printk>
		k_sem_give(&att->tx_sem);
    5e78:	0038      	movs	r0, r7
    5e7a:	f00e fd2f 	bl	148dc <k_sem_give>
		return;
    5e7e:	e00d      	b.n	5e9c <bt_att_encrypt_change+0x80>
	}

	BT_DBG("Retrying");

	/* Resend buffer */
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, att->req->buf,
    5e80:	682b      	ldr	r3, [r5, #0]
    5e82:	691c      	ldr	r4, [r3, #16]
    5e84:	68a0      	ldr	r0, [r4, #8]
    5e86:	f7ff fde5 	bl	5a54 <att_cb.isra.4>
    5e8a:	0022      	movs	r2, r4
    5e8c:	0003      	movs	r3, r0
    5e8e:	2104      	movs	r1, #4
    5e90:	0030      	movs	r0, r6
    5e92:	f7ff fa51 	bl	5338 <bt_l2cap_send_cb>
			 att_cb(att->req->buf));
	att->req->buf = NULL;
    5e96:	682b      	ldr	r3, [r5, #0]
    5e98:	9a03      	ldr	r2, [sp, #12]
    5e9a:	611a      	str	r2, [r3, #16]
}
    5e9c:	b005      	add	sp, #20
    5e9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5ea0:	000154c4 	.word	0x000154c4
    5ea4:	000154d1 	.word	0x000154d1
    5ea8:	0001550f 	.word	0x0001550f
    5eac:	0001548b 	.word	0x0001548b
    5eb0:	00015fba 	.word	0x00015fba
    5eb4:	00017ccc 	.word	0x00017ccc

00005eb8 <att_pdu_sent>:
		k_delayed_work_submit(&att->timeout_work, ATT_TIMEOUT);
	}
}

static void att_pdu_sent(struct bt_conn *conn)
{
    5eb8:	b510      	push	{r4, lr}

static struct bt_att *att_get(struct bt_conn *conn)
{
	struct bt_l2cap_chan *chan;

	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    5eba:	2104      	movs	r1, #4
    5ebc:	f7ff fae4 	bl	5488 <bt_l2cap_le_lookup_tx_cid>
{
	struct bt_att *att = att_get(conn);

	BT_DBG("conn %p att %p", conn, att);

	k_sem_give(&att->tx_sem);
    5ec0:	30c8      	adds	r0, #200	; 0xc8
    5ec2:	f00e fd0b 	bl	148dc <k_sem_give>
}
    5ec6:	bd10      	pop	{r4, pc}

00005ec8 <att_chan_get>:
static struct bt_att *att_chan_get(struct bt_conn *conn)
{
	struct bt_l2cap_chan *chan;
	struct bt_att *att;

	if (conn->state != BT_CONN_CONNECTED) {
    5ec8:	0003      	movs	r3, r0
		send_err_rsp(chan->conn, hdr->code, 0, err);
	}
}

static struct bt_att *att_chan_get(struct bt_conn *conn)
{
    5eca:	b513      	push	{r0, r1, r4, lr}
	struct bt_l2cap_chan *chan;
	struct bt_att *att;

	if (conn->state != BT_CONN_CONNECTED) {
    5ecc:	3351      	adds	r3, #81	; 0x51
    5ece:	781b      	ldrb	r3, [r3, #0]
    5ed0:	2b03      	cmp	r3, #3
    5ed2:	d008      	beq.n	5ee6 <att_chan_get+0x1e>
		BT_WARN("Not connected");
    5ed4:	4b15      	ldr	r3, [pc, #84]	; (5f2c <att_chan_get+0x64>)
    5ed6:	4a16      	ldr	r2, [pc, #88]	; (5f30 <att_chan_get+0x68>)
    5ed8:	9301      	str	r3, [sp, #4]
    5eda:	4b16      	ldr	r3, [pc, #88]	; (5f34 <att_chan_get+0x6c>)
    5edc:	4916      	ldr	r1, [pc, #88]	; (5f38 <att_chan_get+0x70>)
    5ede:	9300      	str	r3, [sp, #0]
    5ee0:	4816      	ldr	r0, [pc, #88]	; (5f3c <att_chan_get+0x74>)
    5ee2:	4b17      	ldr	r3, [pc, #92]	; (5f40 <att_chan_get+0x78>)
    5ee4:	e01c      	b.n	5f20 <att_chan_get+0x58>
		return NULL;
	}

	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
    5ee6:	2104      	movs	r1, #4
    5ee8:	f7ff fae0 	bl	54ac <bt_l2cap_le_lookup_rx_cid>
    5eec:	1e04      	subs	r4, r0, #0
	if (!chan) {
    5eee:	d10a      	bne.n	5f06 <att_chan_get+0x3e>
		BT_ERR("Unable to find ATT channel");
    5ef0:	4b0e      	ldr	r3, [pc, #56]	; (5f2c <att_chan_get+0x64>)
    5ef2:	4a14      	ldr	r2, [pc, #80]	; (5f44 <att_chan_get+0x7c>)
    5ef4:	9301      	str	r3, [sp, #4]
    5ef6:	4b14      	ldr	r3, [pc, #80]	; (5f48 <att_chan_get+0x80>)
    5ef8:	490f      	ldr	r1, [pc, #60]	; (5f38 <att_chan_get+0x70>)
    5efa:	9300      	str	r3, [sp, #0]
    5efc:	4813      	ldr	r0, [pc, #76]	; (5f4c <att_chan_get+0x84>)
    5efe:	4b10      	ldr	r3, [pc, #64]	; (5f40 <att_chan_get+0x78>)
    5f00:	f7fb fd3e 	bl	1980 <printk>
    5f04:	e00f      	b.n	5f26 <att_chan_get+0x5e>
		return NULL;
	}

	att = ATT_CHAN(chan);
	if (atomic_test_bit(att->flags, ATT_DISCONNECTED)) {
    5f06:	3090      	adds	r0, #144	; 0x90
 *
 * @return 1 if the bit was set, 0 if it wasn't.
 */
static inline int atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    5f08:	f00d fe21 	bl	13b4e <atomic_get>
    5f0c:	0743      	lsls	r3, r0, #29
    5f0e:	d50a      	bpl.n	5f26 <att_chan_get+0x5e>
		BT_WARN("ATT context flagged as disconnected");
    5f10:	4b06      	ldr	r3, [pc, #24]	; (5f2c <att_chan_get+0x64>)
    5f12:	4a07      	ldr	r2, [pc, #28]	; (5f30 <att_chan_get+0x68>)
    5f14:	9301      	str	r3, [sp, #4]
    5f16:	4b07      	ldr	r3, [pc, #28]	; (5f34 <att_chan_get+0x6c>)
    5f18:	4907      	ldr	r1, [pc, #28]	; (5f38 <att_chan_get+0x70>)
    5f1a:	9300      	str	r3, [sp, #0]
    5f1c:	480c      	ldr	r0, [pc, #48]	; (5f50 <att_chan_get+0x88>)
    5f1e:	4b08      	ldr	r3, [pc, #32]	; (5f40 <att_chan_get+0x78>)
    5f20:	f7fb fd2e 	bl	1980 <printk>
		return NULL;
    5f24:	2400      	movs	r4, #0
	}

	return att;
}
    5f26:	0020      	movs	r0, r4
    5f28:	bd16      	pop	{r1, r2, r4, pc}
    5f2a:	46c0      	nop			; (mov r8, r8)
    5f2c:	000154c4 	.word	0x000154c4
    5f30:	000154d1 	.word	0x000154d1
    5f34:	0001550f 	.word	0x0001550f
    5f38:	0001548b 	.word	0x0001548b
    5f3c:	0001601a 	.word	0x0001601a
    5f40:	00017cfc 	.word	0x00017cfc
    5f44:	00015484 	.word	0x00015484
    5f48:	000154c9 	.word	0x000154c9
    5f4c:	00016038 	.word	0x00016038
    5f50:	00016063 	.word	0x00016063

00005f54 <att_rsp_sent>:

	k_sem_give(&att->tx_sem);
}

static void att_rsp_sent(struct bt_conn *conn)
{
    5f54:	b510      	push	{r4, lr}

static struct bt_att *att_get(struct bt_conn *conn)
{
	struct bt_l2cap_chan *chan;

	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    5f56:	2104      	movs	r1, #4
    5f58:	f7ff fa96 	bl	5488 <bt_l2cap_le_lookup_tx_cid>
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    5f5c:	2102      	movs	r1, #2
    5f5e:	0004      	movs	r4, r0
    5f60:	4249      	negs	r1, r1
	struct bt_att *att = att_get(conn);

	BT_DBG("conn %p att %p", conn, att);

#if defined(CONFIG_BLUETOOTH_ATT_ENFORCE_FLOW)
	atomic_clear_bit(att->flags, ATT_PENDING_RSP);
    5f62:	3090      	adds	r0, #144	; 0x90
    5f64:	f00d fe0a 	bl	13b7c <atomic_and>
#endif /* CONFIG_BLUETOOTH_ATT_ENFORCE_FLOW */

	k_sem_give(&att->tx_sem);
    5f68:	0020      	movs	r0, r4
    5f6a:	30c8      	adds	r0, #200	; 0xc8
    5f6c:	f00e fcb6 	bl	148dc <k_sem_give>
}
    5f70:	bd10      	pop	{r4, pc}

00005f72 <att_cfm_sent>:

	return CONTAINER_OF(chan, struct bt_att, chan);
}

static void att_cfm_sent(struct bt_conn *conn)
{
    5f72:	b510      	push	{r4, lr}

static struct bt_att *att_get(struct bt_conn *conn)
{
	struct bt_l2cap_chan *chan;

	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    5f74:	2104      	movs	r1, #4
    5f76:	f7ff fa87 	bl	5488 <bt_l2cap_le_lookup_tx_cid>
    5f7a:	2103      	movs	r1, #3
    5f7c:	0004      	movs	r4, r0
    5f7e:	4249      	negs	r1, r1
	struct bt_att *att = att_get(conn);

	BT_DBG("conn %p att %p", conn, att);

#if defined(CONFIG_BLUETOOTH_ATT_ENFORCE_FLOW)
	atomic_clear_bit(att->flags, ATT_PENDING_CFM);
    5f80:	3090      	adds	r0, #144	; 0x90
    5f82:	f00d fdfb 	bl	13b7c <atomic_and>
#endif /* CONFIG_BLUETOOTH_ATT_ENFORCE_FLOW */

	k_sem_give(&att->tx_sem);
    5f86:	0020      	movs	r0, r4
    5f88:	30c8      	adds	r0, #200	; 0xc8
    5f8a:	f00e fca7 	bl	148dc <k_sem_give>
}
    5f8e:	bd10      	pop	{r4, pc}

00005f90 <write_cb>:
	u16_t offset;
	u8_t err;
};

static u8_t write_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    5f90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	int write;

	BT_DBG("handle 0x%04x offset %u", attr->handle, data->offset);

	/* Check attribute permissions */
	data->err = check_perm(data->conn, attr, BT_GATT_PERM_WRITE_MASK);
    5f92:	680f      	ldr	r7, [r1, #0]
	u16_t offset;
	u8_t err;
};

static u8_t write_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    5f94:	000c      	movs	r4, r1
    5f96:	0006      	movs	r6, r0
	int write;

	BT_DBG("handle 0x%04x offset %u", attr->handle, data->offset);

	/* Check attribute permissions */
	data->err = check_perm(data->conn, attr, BT_GATT_PERM_WRITE_MASK);
    5f98:	0001      	movs	r1, r0
    5f9a:	222a      	movs	r2, #42	; 0x2a
    5f9c:	0038      	movs	r0, r7
    5f9e:	f7ff fccd 	bl	593c <check_perm>
    5fa2:	1e05      	subs	r5, r0, #0
    5fa4:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    5fa6:	d11b      	bne.n	5fe0 <write_cb+0x50>
		return BT_GATT_ITER_STOP;
	}

	/* Read attribute value and store in the buffer */
	write = attr->write(data->conn, attr, data->value, data->len,
    5fa8:	8a62      	ldrh	r2, [r4, #18]
    5faa:	9001      	str	r0, [sp, #4]
    5fac:	9200      	str	r2, [sp, #0]
    5fae:	68b2      	ldr	r2, [r6, #8]
    5fb0:	0031      	movs	r1, r6
    5fb2:	4694      	mov	ip, r2
    5fb4:	7c23      	ldrb	r3, [r4, #16]
    5fb6:	68e2      	ldr	r2, [r4, #12]
    5fb8:	0038      	movs	r0, r7
    5fba:	4666      	mov	r6, ip
    5fbc:	47b0      	blx	r6
			    data->offset, 0);
	if (write < 0 || write != data->len) {
    5fbe:	2800      	cmp	r0, #0
    5fc0:	db02      	blt.n	5fc8 <write_cb+0x38>
    5fc2:	7c23      	ldrb	r3, [r4, #16]
    5fc4:	4298      	cmp	r0, r3
    5fc6:	d008      	beq.n	5fda <write_cb+0x4a>

static u8_t err_to_att(int err)
{
	BT_DBG("%d", err);

	if (err < 0 && err >= -0xff) {
    5fc8:	0003      	movs	r3, r0
    5fca:	33ff      	adds	r3, #255	; 0xff
		return -err;
	}

	return BT_ATT_ERR_UNLIKELY;
    5fcc:	220e      	movs	r2, #14

static u8_t err_to_att(int err)
{
	BT_DBG("%d", err);

	if (err < 0 && err >= -0xff) {
    5fce:	2bfe      	cmp	r3, #254	; 0xfe
    5fd0:	d801      	bhi.n	5fd6 <write_cb+0x46>
		return -err;
    5fd2:	4240      	negs	r0, r0
    5fd4:	b2c2      	uxtb	r2, r0

	/* Read attribute value and store in the buffer */
	write = attr->write(data->conn, attr, data->value, data->len,
			    data->offset, 0);
	if (write < 0 || write != data->len) {
		data->err = err_to_att(write);
    5fd6:	7522      	strb	r2, [r4, #20]
		return BT_GATT_ITER_STOP;
    5fd8:	e003      	b.n	5fe2 <write_cb+0x52>
	}

	data->err = 0;
    5fda:	7525      	strb	r5, [r4, #20]

	return BT_GATT_ITER_CONTINUE;
    5fdc:	2501      	movs	r5, #1
    5fde:	e000      	b.n	5fe2 <write_cb+0x52>
	BT_DBG("handle 0x%04x offset %u", attr->handle, data->offset);

	/* Check attribute permissions */
	data->err = check_perm(data->conn, attr, BT_GATT_PERM_WRITE_MASK);
	if (data->err) {
		return BT_GATT_ITER_STOP;
    5fe0:	2500      	movs	r5, #0
	}

	data->err = 0;

	return BT_GATT_ITER_CONTINUE;
}
    5fe2:	0028      	movs	r0, r5
    5fe4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

00005fe8 <prep_write_cb>:
	u16_t offset;
	u8_t err;
};

static u8_t prep_write_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    5fe8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	int write;

	BT_DBG("handle 0x%04x offset %u", attr->handle, data->offset);

	/* Check attribute permissions */
	data->err = check_perm(data->conn, attr, BT_GATT_PERM_WRITE_MASK);
    5fea:	680f      	ldr	r7, [r1, #0]
	u16_t offset;
	u8_t err;
};

static u8_t prep_write_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    5fec:	000c      	movs	r4, r1
    5fee:	0006      	movs	r6, r0
	int write;

	BT_DBG("handle 0x%04x offset %u", attr->handle, data->offset);

	/* Check attribute permissions */
	data->err = check_perm(data->conn, attr, BT_GATT_PERM_WRITE_MASK);
    5ff0:	0001      	movs	r1, r0
    5ff2:	222a      	movs	r2, #42	; 0x2a
    5ff4:	0038      	movs	r0, r7
    5ff6:	f7ff fca1 	bl	593c <check_perm>
    5ffa:	1e05      	subs	r5, r0, #0
    5ffc:	7420      	strb	r0, [r4, #16]
	if (data->err) {
    5ffe:	d134      	bne.n	606a <prep_write_cb+0x82>
    6000:	7cb3      	ldrb	r3, [r6, #18]
		return BT_GATT_ITER_STOP;
	}

	if (!(attr->perm & BT_GATT_PERM_PREPARE_WRITE)) {
    6002:	065b      	lsls	r3, r3, #25
    6004:	d401      	bmi.n	600a <prep_write_cb+0x22>
		data->err = BT_ATT_ERR_WRITE_NOT_PERMITTED;
    6006:	2303      	movs	r3, #3
    6008:	e01c      	b.n	6044 <prep_write_cb+0x5c>
		return BT_GATT_ITER_STOP;
	}

	/* Write attribute value to check if device is authorized */
	write = attr->write(data->conn, attr, data->value, data->len,
    600a:	2201      	movs	r2, #1
    600c:	9201      	str	r2, [sp, #4]
    600e:	89e2      	ldrh	r2, [r4, #14]
    6010:	0038      	movs	r0, r7
    6012:	9200      	str	r2, [sp, #0]
    6014:	7b23      	ldrb	r3, [r4, #12]
    6016:	68a2      	ldr	r2, [r4, #8]
    6018:	0031      	movs	r1, r6
    601a:	68b7      	ldr	r7, [r6, #8]
    601c:	47b8      	blx	r7
			    data->offset, BT_GATT_WRITE_FLAG_PREPARE);
	if (write != 0) {
    601e:	2800      	cmp	r0, #0
    6020:	d008      	beq.n	6034 <prep_write_cb+0x4c>

static u8_t err_to_att(int err)
{
	BT_DBG("%d", err);

	if (err < 0 && err >= -0xff) {
    6022:	0003      	movs	r3, r0
    6024:	33ff      	adds	r3, #255	; 0xff
		return -err;
	}

	return BT_ATT_ERR_UNLIKELY;
    6026:	220e      	movs	r2, #14

static u8_t err_to_att(int err)
{
	BT_DBG("%d", err);

	if (err < 0 && err >= -0xff) {
    6028:	2bfe      	cmp	r3, #254	; 0xfe
    602a:	d801      	bhi.n	6030 <prep_write_cb+0x48>
		return -err;
    602c:	4240      	negs	r0, r0
    602e:	b2c2      	uxtb	r2, r0

	/* Write attribute value to check if device is authorized */
	write = attr->write(data->conn, attr, data->value, data->len,
			    data->offset, BT_GATT_WRITE_FLAG_PREPARE);
	if (write != 0) {
		data->err = err_to_att(write);
    6030:	7422      	strb	r2, [r4, #16]
		return BT_GATT_ITER_STOP;
    6032:	e01b      	b.n	606c <prep_write_cb+0x84>
	}

	/* Copy data into the outstanding queue */
	data->buf = net_buf_alloc(&prep_pool, K_NO_WAIT);
    6034:	0029      	movs	r1, r5
    6036:	480e      	ldr	r0, [pc, #56]	; (6070 <prep_write_cb+0x88>)
    6038:	f00d fa2e 	bl	13498 <net_buf_alloc>
    603c:	6060      	str	r0, [r4, #4]
	if (!data->buf) {
    603e:	2800      	cmp	r0, #0
    6040:	d102      	bne.n	6048 <prep_write_cb+0x60>
		data->err = BT_ATT_ERR_PREPARE_QUEUE_FULL;
    6042:	2309      	movs	r3, #9
    6044:	7423      	strb	r3, [r4, #16]
    6046:	e011      	b.n	606c <prep_write_cb+0x84>
 *
 *  @return Pointer to the user data of the buffer.
 */
static inline void *net_buf_user_data(struct net_buf *buf)
{
	return (void *)ROUND_UP((buf->__buf + buf->size), sizeof(int));
    6048:	2203      	movs	r2, #3
    604a:	89c3      	ldrh	r3, [r0, #14]

	attr_data = net_buf_user_data(data->buf);
	attr_data->handle = attr->handle;
	attr_data->offset = data->offset;

	net_buf_add_mem(data->buf, data->value, data->len);
    604c:	68a1      	ldr	r1, [r4, #8]
    604e:	18c3      	adds	r3, r0, r3
    6050:	3313      	adds	r3, #19
    6052:	4393      	bics	r3, r2
		data->err = BT_ATT_ERR_PREPARE_QUEUE_FULL;
		return BT_GATT_ITER_STOP;
	}

	attr_data = net_buf_user_data(data->buf);
	attr_data->handle = attr->handle;
    6054:	8a32      	ldrh	r2, [r6, #16]
	attr_data->offset = data->offset;

	net_buf_add_mem(data->buf, data->value, data->len);
    6056:	3008      	adds	r0, #8
		data->err = BT_ATT_ERR_PREPARE_QUEUE_FULL;
		return BT_GATT_ITER_STOP;
	}

	attr_data = net_buf_user_data(data->buf);
	attr_data->handle = attr->handle;
    6058:	801a      	strh	r2, [r3, #0]
	attr_data->offset = data->offset;
    605a:	89e2      	ldrh	r2, [r4, #14]
    605c:	805a      	strh	r2, [r3, #2]

	net_buf_add_mem(data->buf, data->value, data->len);
    605e:	7b22      	ldrb	r2, [r4, #12]
    6060:	f00d fab7 	bl	135d2 <net_buf_simple_add_mem>

	data->err = 0;
    6064:	7425      	strb	r5, [r4, #16]

	return BT_GATT_ITER_CONTINUE;
    6066:	2501      	movs	r5, #1
    6068:	e000      	b.n	606c <prep_write_cb+0x84>
	BT_DBG("handle 0x%04x offset %u", attr->handle, data->offset);

	/* Check attribute permissions */
	data->err = check_perm(data->conn, attr, BT_GATT_PERM_WRITE_MASK);
	if (data->err) {
		return BT_GATT_ITER_STOP;
    606a:	2500      	movs	r5, #0
	net_buf_add_mem(data->buf, data->value, data->len);

	data->err = 0;

	return BT_GATT_ITER_CONTINUE;
}
    606c:	0028      	movs	r0, r5
    606e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    6070:	20000a3c 	.word	0x20000a3c

00006074 <read_cb>:
	struct bt_att_read_rsp *rsp;
	u8_t err;
};

static u8_t read_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    6074:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct read_data *data = user_data;
	struct bt_att *att = data->att;
    6076:	680f      	ldr	r7, [r1, #0]
	struct bt_att_read_rsp *rsp;
	u8_t err;
};

static u8_t read_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    6078:	0006      	movs	r6, r0
	struct bt_conn *conn = att->chan.chan.conn;
	int read;

	BT_DBG("handle 0x%04x", attr->handle);

	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    607a:	6888      	ldr	r0, [r1, #8]

static u8_t read_cb(const struct bt_gatt_attr *attr, void *user_data)
{
	struct read_data *data = user_data;
	struct bt_att *att = data->att;
	struct bt_conn *conn = att->chan.chan.conn;
    607c:	683b      	ldr	r3, [r7, #0]
	struct bt_att_read_rsp *rsp;
	u8_t err;
};

static u8_t read_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    607e:	b085      	sub	sp, #20
    6080:	000c      	movs	r4, r1
	struct bt_conn *conn = att->chan.chan.conn;
	int read;

	BT_DBG("handle 0x%04x", attr->handle);

	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    6082:	3008      	adds	r0, #8
    6084:	2100      	movs	r1, #0

static u8_t read_cb(const struct bt_gatt_attr *attr, void *user_data)
{
	struct read_data *data = user_data;
	struct bt_att *att = data->att;
	struct bt_conn *conn = att->chan.chan.conn;
    6086:	9303      	str	r3, [sp, #12]
	int read;

	BT_DBG("handle 0x%04x", attr->handle);

	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    6088:	f00d fa9c 	bl	135c4 <net_buf_simple_add>

	/*
	 * If any attribute is founded in handle range it means that error
	 * should be changed from pre-set: invalid handle error to no error.
	 */
	data->err = 0x00;
    608c:	2300      	movs	r3, #0
	struct bt_conn *conn = att->chan.chan.conn;
	int read;

	BT_DBG("handle 0x%04x", attr->handle);

	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    608e:	60e0      	str	r0, [r4, #12]

	/*
	 * If any attribute is founded in handle range it means that error
	 * should be changed from pre-set: invalid handle error to no error.
	 */
	data->err = 0x00;
    6090:	7423      	strb	r3, [r4, #16]

	/* Check attribute permissions */
	data->err = check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    6092:	2215      	movs	r2, #21
    6094:	0031      	movs	r1, r6
    6096:	9803      	ldr	r0, [sp, #12]
    6098:	f7ff fc50 	bl	593c <check_perm>
    609c:	1e05      	subs	r5, r0, #0
    609e:	7420      	strb	r0, [r4, #16]
	if (data->err) {
    60a0:	d11e      	bne.n	60e0 <read_cb+0x6c>
		return BT_GATT_ITER_STOP;
	}

	/* Read attribute value and store in the buffer */
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    60a2:	68a1      	ldr	r1, [r4, #8]
			  att->chan.tx.mtu - data->buf->len, data->offset);
    60a4:	3756      	adds	r7, #86	; 0x56
	if (data->err) {
		return BT_GATT_ITER_STOP;
	}

	/* Read attribute value and store in the buffer */
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    60a6:	898a      	ldrh	r2, [r1, #12]
    60a8:	883b      	ldrh	r3, [r7, #0]
    60aa:	6889      	ldr	r1, [r1, #8]
    60ac:	1a9b      	subs	r3, r3, r2
    60ae:	188a      	adds	r2, r1, r2
    60b0:	88a1      	ldrh	r1, [r4, #4]
    60b2:	b29b      	uxth	r3, r3
    60b4:	9100      	str	r1, [sp, #0]
    60b6:	6877      	ldr	r7, [r6, #4]
    60b8:	0031      	movs	r1, r6
    60ba:	9803      	ldr	r0, [sp, #12]
    60bc:	47b8      	blx	r7
    60be:	1e01      	subs	r1, r0, #0
			  att->chan.tx.mtu - data->buf->len, data->offset);
	if (read < 0) {
    60c0:	da08      	bge.n	60d4 <read_cb+0x60>

static u8_t err_to_att(int err)
{
	BT_DBG("%d", err);

	if (err < 0 && err >= -0xff) {
    60c2:	000b      	movs	r3, r1
    60c4:	33ff      	adds	r3, #255	; 0xff
		return -err;
	}

	return BT_ATT_ERR_UNLIKELY;
    60c6:	200e      	movs	r0, #14

static u8_t err_to_att(int err)
{
	BT_DBG("%d", err);

	if (err < 0 && err >= -0xff) {
    60c8:	2bfe      	cmp	r3, #254	; 0xfe
    60ca:	d801      	bhi.n	60d0 <read_cb+0x5c>
		return -err;
    60cc:	4249      	negs	r1, r1
    60ce:	b2c8      	uxtb	r0, r1

	/* Read attribute value and store in the buffer */
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
			  att->chan.tx.mtu - data->buf->len, data->offset);
	if (read < 0) {
		data->err = err_to_att(read);
    60d0:	7420      	strb	r0, [r4, #16]
		return BT_GATT_ITER_STOP;
    60d2:	e006      	b.n	60e2 <read_cb+0x6e>
	}

	net_buf_add(data->buf, read);
    60d4:	68a0      	ldr	r0, [r4, #8]

	return BT_GATT_ITER_CONTINUE;
    60d6:	2501      	movs	r5, #1
	if (read < 0) {
		data->err = err_to_att(read);
		return BT_GATT_ITER_STOP;
	}

	net_buf_add(data->buf, read);
    60d8:	3008      	adds	r0, #8
    60da:	f00d fa73 	bl	135c4 <net_buf_simple_add>

	return BT_GATT_ITER_CONTINUE;
    60de:	e000      	b.n	60e2 <read_cb+0x6e>
	data->err = 0x00;

	/* Check attribute permissions */
	data->err = check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
	if (data->err) {
		return BT_GATT_ITER_STOP;
    60e0:	2500      	movs	r5, #0
	}

	net_buf_add(data->buf, read);

	return BT_GATT_ITER_CONTINUE;
}
    60e2:	0028      	movs	r0, r5
    60e4:	b005      	add	sp, #20
    60e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000060e8 <bt_att_create_pdu>:

	return att;
}

struct net_buf *bt_att_create_pdu(struct bt_conn *conn, u8_t op, size_t len)
{
    60e8:	b530      	push	{r4, r5, lr}
    60ea:	b085      	sub	sp, #20
    60ec:	000d      	movs	r5, r1
    60ee:	0014      	movs	r4, r2
	struct bt_att_hdr *hdr;
	struct net_buf *buf;
	struct bt_att *att;

	att = att_chan_get(conn);
    60f0:	f7ff feea 	bl	5ec8 <att_chan_get>
    60f4:	1e03      	subs	r3, r0, #0
	if (!att) {
    60f6:	d01d      	beq.n	6134 <bt_att_create_pdu+0x4c>
		return NULL;
	}

	if (len + sizeof(op) > att->chan.tx.mtu) {
    60f8:	3356      	adds	r3, #86	; 0x56
    60fa:	881b      	ldrh	r3, [r3, #0]
    60fc:	1c62      	adds	r2, r4, #1
    60fe:	429a      	cmp	r2, r3
    6100:	d90d      	bls.n	611e <bt_att_create_pdu+0x36>
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
    6102:	490d      	ldr	r1, [pc, #52]	; (6138 <bt_att_create_pdu+0x50>)
    6104:	9301      	str	r3, [sp, #4]
    6106:	4b0d      	ldr	r3, [pc, #52]	; (613c <bt_att_create_pdu+0x54>)
    6108:	9103      	str	r1, [sp, #12]
    610a:	9202      	str	r2, [sp, #8]
    610c:	9300      	str	r3, [sp, #0]
    610e:	4a0c      	ldr	r2, [pc, #48]	; (6140 <bt_att_create_pdu+0x58>)
    6110:	4b0c      	ldr	r3, [pc, #48]	; (6144 <bt_att_create_pdu+0x5c>)
    6112:	490d      	ldr	r1, [pc, #52]	; (6148 <bt_att_create_pdu+0x60>)
    6114:	480d      	ldr	r0, [pc, #52]	; (614c <bt_att_create_pdu+0x64>)
    6116:	f7fb fc33 	bl	1980 <printk>
			att->chan.tx.mtu, len + sizeof(op));
		return NULL;
    611a:	2000      	movs	r0, #0
    611c:	e00a      	b.n	6134 <bt_att_create_pdu+0x4c>
	}

	buf = bt_l2cap_create_pdu(NULL, 0);
    611e:	2100      	movs	r1, #0
    6120:	0008      	movs	r0, r1
    6122:	f7ff f904 	bl	532e <bt_l2cap_create_pdu>

	hdr = net_buf_add(buf, sizeof(*hdr));
    6126:	2101      	movs	r1, #1
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
			att->chan.tx.mtu, len + sizeof(op));
		return NULL;
	}

	buf = bt_l2cap_create_pdu(NULL, 0);
    6128:	0004      	movs	r4, r0

	hdr = net_buf_add(buf, sizeof(*hdr));
    612a:	3008      	adds	r0, #8
    612c:	f00d fa4a 	bl	135c4 <net_buf_simple_add>
	hdr->code = op;
    6130:	7005      	strb	r5, [r0, #0]

	return buf;
    6132:	0020      	movs	r0, r4
}
    6134:	b005      	add	sp, #20
    6136:	bd30      	pop	{r4, r5, pc}
    6138:	000154c4 	.word	0x000154c4
    613c:	0001550f 	.word	0x0001550f
    6140:	000154d1 	.word	0x000154d1
    6144:	00017d20 	.word	0x00017d20
    6148:	0001548b 	.word	0x0001548b
    614c:	00016097 	.word	0x00016097

00006150 <att_indicate>:

	return 0;
}

static u8_t att_indicate(struct bt_att *att, struct net_buf *buf)
{
    6150:	b510      	push	{r4, lr}
	struct bt_conn *conn = att->chan.chan.conn;
	u16_t handle;

	handle = net_buf_pull_le16(buf);
    6152:	3108      	adds	r1, #8
	return 0;
}

static u8_t att_indicate(struct bt_att *att, struct net_buf *buf)
{
	struct bt_conn *conn = att->chan.chan.conn;
    6154:	6804      	ldr	r4, [r0, #0]
	u16_t handle;

	handle = net_buf_pull_le16(buf);
    6156:	0008      	movs	r0, r1
    6158:	f00d fa65 	bl	13626 <net_buf_simple_pull_le16>

	BT_DBG("handle 0x%04x", handle);

	bt_gatt_notification(conn, handle, buf->data, buf->len);

	buf = bt_att_create_pdu(conn, BT_ATT_OP_CONFIRM, 0);
    615c:	2200      	movs	r2, #0
    615e:	211e      	movs	r1, #30
    6160:	0020      	movs	r0, r4
    6162:	f7ff ffc1 	bl	60e8 <bt_att_create_pdu>
    6166:	1e02      	subs	r2, r0, #0
	if (!buf) {
    6168:	d004      	beq.n	6174 <att_indicate+0x24>
		return 0;
	}

	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_cfm_sent);
    616a:	4b03      	ldr	r3, [pc, #12]	; (6178 <att_indicate+0x28>)
    616c:	2104      	movs	r1, #4
    616e:	0020      	movs	r0, r4
    6170:	f7ff f8e2 	bl	5338 <bt_l2cap_send_cb>

	return 0;
}
    6174:	2000      	movs	r0, #0
    6176:	bd10      	pop	{r4, pc}
    6178:	00005f73 	.word	0x00005f73

0000617c <att_mtu_req>:

	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent);
}

static u8_t att_mtu_req(struct bt_att *att, struct net_buf *buf)
{
    617c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct net_buf *pdu;
	u16_t mtu_client, mtu_server;

	req = (void *)buf->data;

	mtu_client = sys_le16_to_cpu(req->mtu);
    617e:	688b      	ldr	r3, [r1, #8]

	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent);
}

static u8_t att_mtu_req(struct bt_att *att, struct net_buf *buf)
{
    6180:	0004      	movs	r4, r0
	struct net_buf *pdu;
	u16_t mtu_client, mtu_server;

	req = (void *)buf->data;

	mtu_client = sys_le16_to_cpu(req->mtu);
    6182:	785d      	ldrb	r5, [r3, #1]
    6184:	781a      	ldrb	r2, [r3, #0]
    6186:	022d      	lsls	r5, r5, #8
    6188:	4315      	orrs	r5, r2

	BT_DBG("Client MTU %u", mtu_client);

	/* Check if MTU is valid */
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
		return BT_ATT_ERR_INVALID_PDU;
    618a:	2004      	movs	r0, #4
	mtu_client = sys_le16_to_cpu(req->mtu);

	BT_DBG("Client MTU %u", mtu_client);

	/* Check if MTU is valid */
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    618c:	2d16      	cmp	r5, #22
    618e:	d920      	bls.n	61d2 <att_mtu_req+0x56>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent);
}

static u8_t att_mtu_req(struct bt_att *att, struct net_buf *buf)
{
	struct bt_conn *conn = att->chan.chan.conn;
    6190:	6827      	ldr	r7, [r4, #0]
	/* Check if MTU is valid */
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
		return BT_ATT_ERR_INVALID_PDU;
	}

	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
    6192:	2202      	movs	r2, #2
    6194:	2103      	movs	r1, #3
    6196:	0038      	movs	r0, r7
    6198:	f7ff ffa6 	bl	60e8 <bt_att_create_pdu>
    619c:	0006      	movs	r6, r0
	if (!pdu) {
		return BT_ATT_ERR_UNLIKELY;
    619e:	200e      	movs	r0, #14
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
		return BT_ATT_ERR_INVALID_PDU;
	}

	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
	if (!pdu) {
    61a0:	2e00      	cmp	r6, #0
    61a2:	d016      	beq.n	61d2 <att_mtu_req+0x56>

	mtu_server = BT_ATT_MTU;

	BT_DBG("Server MTU %u", mtu_server);

	rsp = net_buf_add(pdu, sizeof(*rsp));
    61a4:	0030      	movs	r0, r6
    61a6:	2102      	movs	r1, #2
    61a8:	3008      	adds	r0, #8
    61aa:	f00d fa0b 	bl	135c4 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
    61ae:	2341      	movs	r3, #65	; 0x41
    61b0:	7003      	strb	r3, [r0, #0]
    61b2:	2300      	movs	r3, #0

	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, pdu, att_rsp_sent);
    61b4:	0032      	movs	r2, r6
	mtu_server = BT_ATT_MTU;

	BT_DBG("Server MTU %u", mtu_server);

	rsp = net_buf_add(pdu, sizeof(*rsp));
	rsp->mtu = sys_cpu_to_le16(mtu_server);
    61b6:	7043      	strb	r3, [r0, #1]

	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, pdu, att_rsp_sent);
    61b8:	2104      	movs	r1, #4
    61ba:	4b06      	ldr	r3, [pc, #24]	; (61d4 <att_mtu_req+0x58>)
    61bc:	0038      	movs	r0, r7
    61be:	f7ff f8bb 	bl	5338 <bt_l2cap_send_cb>
	/* BLUETOOTH SPECIFICATION Version 4.2 [Vol 3, Part F] page 484:
	 *
	 * A device's Exchange MTU Request shall contain the same MTU as the
	 * device's Exchange MTU Response (i.e. the MTU shall be symmetric).
	 */
	att->chan.rx.mtu = min(mtu_client, mtu_server);
    61c2:	1c2b      	adds	r3, r5, #0
    61c4:	2d41      	cmp	r5, #65	; 0x41
    61c6:	d900      	bls.n	61ca <att_mtu_req+0x4e>
    61c8:	2341      	movs	r3, #65	; 0x41
	att->chan.tx.mtu = att->chan.rx.mtu;

	BT_DBG("Negotiated MTU %u", att->chan.rx.mtu);
	return 0;
    61ca:	2000      	movs	r0, #0
	/* BLUETOOTH SPECIFICATION Version 4.2 [Vol 3, Part F] page 484:
	 *
	 * A device's Exchange MTU Request shall contain the same MTU as the
	 * device's Exchange MTU Response (i.e. the MTU shall be symmetric).
	 */
	att->chan.rx.mtu = min(mtu_client, mtu_server);
    61cc:	8763      	strh	r3, [r4, #58]	; 0x3a
	att->chan.tx.mtu = att->chan.rx.mtu;
    61ce:	3456      	adds	r4, #86	; 0x56
    61d0:	8023      	strh	r3, [r4, #0]

	BT_DBG("Negotiated MTU %u", att->chan.rx.mtu);
	return 0;
}
    61d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    61d4:	00005f55 	.word	0x00005f55

000061d8 <send_err_rsp.part.9>:
	default:
		return att_pdu_sent;
	}
}

static void send_err_rsp(struct bt_conn *conn, u8_t req, u16_t handle,
    61d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    61da:	000f      	movs	r7, r1
    61dc:	0014      	movs	r4, r2
	/* Ignore opcode 0x00 */
	if (!req) {
		return;
	}

	buf = bt_att_create_pdu(conn, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    61de:	2101      	movs	r1, #1
    61e0:	2204      	movs	r2, #4
	default:
		return att_pdu_sent;
	}
}

static void send_err_rsp(struct bt_conn *conn, u8_t req, u16_t handle,
    61e2:	0006      	movs	r6, r0
    61e4:	9301      	str	r3, [sp, #4]
	/* Ignore opcode 0x00 */
	if (!req) {
		return;
	}

	buf = bt_att_create_pdu(conn, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    61e6:	f7ff ff7f 	bl	60e8 <bt_att_create_pdu>
    61ea:	1e05      	subs	r5, r0, #0
	if (!buf) {
    61ec:	d010      	beq.n	6210 <send_err_rsp.part.9+0x38>
		return;
	}

	rsp = net_buf_add(buf, sizeof(*rsp));
    61ee:	2104      	movs	r1, #4
    61f0:	3008      	adds	r0, #8
    61f2:	f00d f9e7 	bl	135c4 <net_buf_simple_add>
	rsp->request = req;
	rsp->handle = sys_cpu_to_le16(handle);
	rsp->error = err;
    61f6:	466b      	mov	r3, sp
    61f8:	791b      	ldrb	r3, [r3, #4]
		return;
	}

	rsp = net_buf_add(buf, sizeof(*rsp));
	rsp->request = req;
	rsp->handle = sys_cpu_to_le16(handle);
    61fa:	7044      	strb	r4, [r0, #1]
    61fc:	0a24      	lsrs	r4, r4, #8
	rsp->error = err;
    61fe:	70c3      	strb	r3, [r0, #3]
	if (!buf) {
		return;
	}

	rsp = net_buf_add(buf, sizeof(*rsp));
	rsp->request = req;
    6200:	7007      	strb	r7, [r0, #0]
	rsp->handle = sys_cpu_to_le16(handle);
    6202:	7084      	strb	r4, [r0, #2]
	rsp->error = err;

	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent);
    6204:	4b03      	ldr	r3, [pc, #12]	; (6214 <send_err_rsp.part.9+0x3c>)
    6206:	002a      	movs	r2, r5
    6208:	2104      	movs	r1, #4
    620a:	0030      	movs	r0, r6
    620c:	f7ff f894 	bl	5338 <bt_l2cap_send_cb>
}
    6210:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    6212:	46c0      	nop			; (mov r8, r8)
    6214:	00005f55 	.word	0x00005f55

00006218 <bt_att_recv>:

	return ATT_UNKNOWN;
}

static void bt_att_recv(struct bt_l2cap_chan *chan, struct net_buf *buf)
{
    6218:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_att_hdr *hdr = (void *)buf->data;
	const struct att_handler *handler;
	u8_t err;
	size_t i;

	if (buf->len < sizeof(*hdr)) {
    621a:	898b      	ldrh	r3, [r1, #12]

	return ATT_UNKNOWN;
}

static void bt_att_recv(struct bt_l2cap_chan *chan, struct net_buf *buf)
{
    621c:	b087      	sub	sp, #28
    621e:	0005      	movs	r5, r0
    6220:	000e      	movs	r6, r1
	struct bt_att_hdr *hdr = (void *)buf->data;
	const struct att_handler *handler;
	u8_t err;
	size_t i;

	if (buf->len < sizeof(*hdr)) {
    6222:	2b00      	cmp	r3, #0
    6224:	d108      	bne.n	6238 <bt_att_recv+0x20>
		BT_ERR("Too small ATT PDU received");
    6226:	4b44      	ldr	r3, [pc, #272]	; (6338 <bt_att_recv+0x120>)
    6228:	4a44      	ldr	r2, [pc, #272]	; (633c <bt_att_recv+0x124>)
    622a:	9301      	str	r3, [sp, #4]
    622c:	4b44      	ldr	r3, [pc, #272]	; (6340 <bt_att_recv+0x128>)
    622e:	4945      	ldr	r1, [pc, #276]	; (6344 <bt_att_recv+0x12c>)
    6230:	9300      	str	r3, [sp, #0]
    6232:	4845      	ldr	r0, [pc, #276]	; (6348 <bt_att_recv+0x130>)
    6234:	4b45      	ldr	r3, [pc, #276]	; (634c <bt_att_recv+0x134>)
    6236:	e038      	b.n	62aa <bt_att_recv+0x92>
		return;
	}

	BT_DBG("Received ATT code 0x%02x len %u", hdr->code, buf->len);

	net_buf_pull(buf, sizeof(*hdr));
    6238:	0030      	movs	r0, r6
}

static void bt_att_recv(struct bt_l2cap_chan *chan, struct net_buf *buf)
{
	struct bt_att *att = ATT_CHAN(chan);
	struct bt_att_hdr *hdr = (void *)buf->data;
    623a:	688f      	ldr	r7, [r1, #8]
		return;
	}

	BT_DBG("Received ATT code 0x%02x len %u", hdr->code, buf->len);

	net_buf_pull(buf, sizeof(*hdr));
    623c:	3008      	adds	r0, #8
    623e:	2101      	movs	r1, #1
    6240:	f00d f9e1 	bl	13606 <net_buf_simple_pull>

	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    6244:	2200      	movs	r2, #0
		if (hdr->code == handlers[i].op) {
    6246:	7839      	ldrb	r1, [r7, #0]
    6248:	4b41      	ldr	r3, [pc, #260]	; (6350 <bt_att_recv+0x138>)
    624a:	00d0      	lsls	r0, r2, #3
    624c:	9005      	str	r0, [sp, #20]
    624e:	5cc0      	ldrb	r0, [r0, r3]
    6250:	4288      	cmp	r0, r1
    6252:	d105      	bne.n	6260 <bt_att_recv+0x48>
		}
		return;
	}

	if (IS_ENABLED(CONFIG_BLUETOOTH_ATT_ENFORCE_FLOW)) {
		if (handler->type == ATT_REQUEST &&
    6254:	9a05      	ldr	r2, [sp, #20]
    6256:	189b      	adds	r3, r3, r2
    6258:	789c      	ldrb	r4, [r3, #2]
    625a:	2c01      	cmp	r4, #1
    625c:	d114      	bne.n	6288 <bt_att_recv+0x70>
    625e:	e003      	b.n	6268 <bt_att_recv+0x50>

	BT_DBG("Received ATT code 0x%02x len %u", hdr->code, buf->len);

	net_buf_pull(buf, sizeof(*hdr));

	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    6260:	3201      	adds	r2, #1
    6262:	2a1b      	cmp	r2, #27
    6264:	d1f1      	bne.n	624a <bt_att_recv+0x32>
    6266:	e04d      	b.n	6304 <bt_att_recv+0xec>
static inline int atomic_test_and_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
	atomic_val_t old;

	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    6268:	0028      	movs	r0, r5
    626a:	0021      	movs	r1, r4
    626c:	3090      	adds	r0, #144	; 0x90
    626e:	f00d fc7a 	bl	13b66 <atomic_or>
		}
		return;
	}

	if (IS_ENABLED(CONFIG_BLUETOOTH_ATT_ENFORCE_FLOW)) {
		if (handler->type == ATT_REQUEST &&
    6272:	4220      	tst	r0, r4
    6274:	d01c      	beq.n	62b0 <bt_att_recv+0x98>
		    atomic_test_and_set_bit(att->flags, ATT_PENDING_RSP)) {
			BT_WARN("Ignoring unexpected request");
    6276:	4b30      	ldr	r3, [pc, #192]	; (6338 <bt_att_recv+0x120>)
    6278:	4a36      	ldr	r2, [pc, #216]	; (6354 <bt_att_recv+0x13c>)
    627a:	9301      	str	r3, [sp, #4]
    627c:	4b36      	ldr	r3, [pc, #216]	; (6358 <bt_att_recv+0x140>)
    627e:	4931      	ldr	r1, [pc, #196]	; (6344 <bt_att_recv+0x12c>)
    6280:	9300      	str	r3, [sp, #0]
    6282:	4836      	ldr	r0, [pc, #216]	; (635c <bt_att_recv+0x144>)
    6284:	4b31      	ldr	r3, [pc, #196]	; (634c <bt_att_recv+0x134>)
    6286:	e010      	b.n	62aa <bt_att_recv+0x92>
			return;
		} else if (handler->type == ATT_INDICATION &&
    6288:	2c05      	cmp	r4, #5
    628a:	d111      	bne.n	62b0 <bt_att_recv+0x98>
    628c:	0028      	movs	r0, r5
    628e:	2102      	movs	r1, #2
    6290:	3090      	adds	r0, #144	; 0x90
    6292:	f00d fc68 	bl	13b66 <atomic_or>
    6296:	0783      	lsls	r3, r0, #30
    6298:	d50a      	bpl.n	62b0 <bt_att_recv+0x98>
			   atomic_test_and_set_bit(att->flags,
						   ATT_PENDING_CFM)) {
			BT_WARN("Ignoring unexpected indication");
    629a:	4b27      	ldr	r3, [pc, #156]	; (6338 <bt_att_recv+0x120>)
    629c:	4a2d      	ldr	r2, [pc, #180]	; (6354 <bt_att_recv+0x13c>)
    629e:	9301      	str	r3, [sp, #4]
    62a0:	4b2d      	ldr	r3, [pc, #180]	; (6358 <bt_att_recv+0x140>)
    62a2:	4928      	ldr	r1, [pc, #160]	; (6344 <bt_att_recv+0x12c>)
    62a4:	9300      	str	r3, [sp, #0]
    62a6:	482e      	ldr	r0, [pc, #184]	; (6360 <bt_att_recv+0x148>)
    62a8:	4b28      	ldr	r3, [pc, #160]	; (634c <bt_att_recv+0x134>)
    62aa:	f7fb fb69 	bl	1980 <printk>
			return;
    62ae:	e040      	b.n	6332 <bt_att_recv+0x11a>
		}
	}

	if (buf->len < handler->expect_len) {
    62b0:	4927      	ldr	r1, [pc, #156]	; (6350 <bt_att_recv+0x138>)
    62b2:	9b05      	ldr	r3, [sp, #20]
    62b4:	468c      	mov	ip, r1
    62b6:	4463      	add	r3, ip
    62b8:	89b2      	ldrh	r2, [r6, #12]
    62ba:	7859      	ldrb	r1, [r3, #1]
    62bc:	4291      	cmp	r1, r2
    62be:	d910      	bls.n	62e2 <bt_att_recv+0xca>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
    62c0:	4b1d      	ldr	r3, [pc, #116]	; (6338 <bt_att_recv+0x120>)
    62c2:	4920      	ldr	r1, [pc, #128]	; (6344 <bt_att_recv+0x12c>)
    62c4:	9303      	str	r3, [sp, #12]
    62c6:	783b      	ldrb	r3, [r7, #0]
    62c8:	4826      	ldr	r0, [pc, #152]	; (6364 <bt_att_recv+0x14c>)
    62ca:	9302      	str	r3, [sp, #8]
    62cc:	4b1c      	ldr	r3, [pc, #112]	; (6340 <bt_att_recv+0x128>)
    62ce:	9201      	str	r2, [sp, #4]
    62d0:	9300      	str	r3, [sp, #0]
    62d2:	4a1a      	ldr	r2, [pc, #104]	; (633c <bt_att_recv+0x124>)
    62d4:	4b1d      	ldr	r3, [pc, #116]	; (634c <bt_att_recv+0x134>)
    62d6:	f7fb fb53 	bl	1980 <printk>
		err = BT_ATT_ERR_INVALID_PDU;
	} else {
		err = handler->func(att, buf);
	}

	if (handler->type == ATT_REQUEST && err) {
    62da:	2c01      	cmp	r4, #1
    62dc:	d129      	bne.n	6332 <bt_att_recv+0x11a>
		}
	}

	if (buf->len < handler->expect_len) {
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
		err = BT_ATT_ERR_INVALID_PDU;
    62de:	2304      	movs	r3, #4
    62e0:	e008      	b.n	62f4 <bt_att_recv+0xdc>
	} else {
		err = handler->func(att, buf);
    62e2:	685b      	ldr	r3, [r3, #4]
    62e4:	0031      	movs	r1, r6
    62e6:	0028      	movs	r0, r5
    62e8:	4798      	blx	r3
    62ea:	0003      	movs	r3, r0
	}

	if (handler->type == ATT_REQUEST && err) {
    62ec:	2c01      	cmp	r4, #1
    62ee:	d120      	bne.n	6332 <bt_att_recv+0x11a>
    62f0:	2800      	cmp	r0, #0
    62f2:	d01e      	beq.n	6332 <bt_att_recv+0x11a>
		BT_DBG("ATT error 0x%02x", err);
		send_err_rsp(chan->conn, hdr->code, 0, err);
    62f4:	7839      	ldrb	r1, [r7, #0]
{
	struct bt_att_error_rsp *rsp;
	struct net_buf *buf;

	/* Ignore opcode 0x00 */
	if (!req) {
    62f6:	2900      	cmp	r1, #0
    62f8:	d01b      	beq.n	6332 <bt_att_recv+0x11a>
    62fa:	2200      	movs	r2, #0
    62fc:	6828      	ldr	r0, [r5, #0]
    62fe:	f7ff ff6b 	bl	61d8 <send_err_rsp.part.9>
    6302:	e016      	b.n	6332 <bt_att_recv+0x11a>
			break;
		}
	}

	if (!handler) {
		BT_WARN("Unknown ATT code 0x%02x", hdr->code);
    6304:	4b0c      	ldr	r3, [pc, #48]	; (6338 <bt_att_recv+0x120>)
    6306:	9101      	str	r1, [sp, #4]
    6308:	9302      	str	r3, [sp, #8]
    630a:	4b13      	ldr	r3, [pc, #76]	; (6358 <bt_att_recv+0x140>)
    630c:	4a11      	ldr	r2, [pc, #68]	; (6354 <bt_att_recv+0x13c>)
    630e:	9300      	str	r3, [sp, #0]
    6310:	490c      	ldr	r1, [pc, #48]	; (6344 <bt_att_recv+0x12c>)
    6312:	4b0e      	ldr	r3, [pc, #56]	; (634c <bt_att_recv+0x134>)
    6314:	4814      	ldr	r0, [pc, #80]	; (6368 <bt_att_recv+0x150>)
    6316:	f7fb fb33 	bl	1980 <printk>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
    631a:	783c      	ldrb	r4, [r7, #0]
    631c:	0020      	movs	r0, r4
    631e:	f7ff f963 	bl	55e8 <att_op_get_type>
    6322:	2800      	cmp	r0, #0
    6324:	d005      	beq.n	6332 <bt_att_recv+0x11a>
{
	struct bt_att_error_rsp *rsp;
	struct net_buf *buf;

	/* Ignore opcode 0x00 */
	if (!req) {
    6326:	2c00      	cmp	r4, #0
    6328:	d003      	beq.n	6332 <bt_att_recv+0x11a>
    632a:	2306      	movs	r3, #6
    632c:	2200      	movs	r2, #0
    632e:	0021      	movs	r1, r4
    6330:	e7e4      	b.n	62fc <bt_att_recv+0xe4>

	if (handler->type == ATT_REQUEST && err) {
		BT_DBG("ATT error 0x%02x", err);
		send_err_rsp(chan->conn, hdr->code, 0, err);
	}
}
    6332:	b007      	add	sp, #28
    6334:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6336:	46c0      	nop			; (mov r8, r8)
    6338:	000154c4 	.word	0x000154c4
    633c:	00015484 	.word	0x00015484
    6340:	000154c9 	.word	0x000154c9
    6344:	0001548b 	.word	0x0001548b
    6348:	000160cc 	.word	0x000160cc
    634c:	00017ce2 	.word	0x00017ce2
    6350:	00017b54 	.word	0x00017b54
    6354:	000154d1 	.word	0x000154d1
    6358:	0001550f 	.word	0x0001550f
    635c:	000160f7 	.word	0x000160f7
    6360:	00016123 	.word	0x00016123
    6364:	00016152 	.word	0x00016152
    6368:	00016181 	.word	0x00016181

0000636c <att_write_rsp.part.10>:
	data->err = 0;

	return BT_GATT_ITER_CONTINUE;
}

static u8_t att_write_rsp(struct bt_conn *conn, u8_t op, u8_t rsp,
    636c:	b5f0      	push	{r4, r5, r6, r7, lr}
    636e:	b08b      	sub	sp, #44	; 0x2c
    6370:	9301      	str	r3, [sp, #4]
    6372:	ab10      	add	r3, sp, #64	; 0x40
    6374:	881b      	ldrh	r3, [r3, #0]
    6376:	0017      	movs	r7, r2
    6378:	9302      	str	r3, [sp, #8]
    637a:	ab12      	add	r3, sp, #72	; 0x48
    637c:	781b      	ldrb	r3, [r3, #0]
    637e:	0005      	movs	r5, r0
    6380:	000e      	movs	r6, r1

	if (!handle) {
		return BT_ATT_ERR_INVALID_HANDLE;
	}

	memset(&data, 0, sizeof(data));
    6382:	2218      	movs	r2, #24
    6384:	2100      	movs	r1, #0
    6386:	a804      	add	r0, sp, #16
	data->err = 0;

	return BT_GATT_ITER_CONTINUE;
}

static u8_t att_write_rsp(struct bt_conn *conn, u8_t op, u8_t rsp,
    6388:	9303      	str	r3, [sp, #12]

	if (!handle) {
		return BT_ATT_ERR_INVALID_HANDLE;
	}

	memset(&data, 0, sizeof(data));
    638a:	f7fa fd00 	bl	d8e <memset>

	/* Only allocate buf if required to respond */
	if (rsp) {
    638e:	2f00      	cmp	r7, #0
    6390:	d119      	bne.n	63c6 <att_write_rsp.part.10+0x5a>
		}
	}

	data.conn = conn;
	data.op = op;
	data.offset = offset;
    6392:	466a      	mov	r2, sp
    6394:	8912      	ldrh	r2, [r2, #8]
			return BT_ATT_ERR_UNLIKELY;
		}
	}

	data.conn = conn;
	data.op = op;
    6396:	ab04      	add	r3, sp, #16
	data.offset = offset;
    6398:	825a      	strh	r2, [r3, #18]
	data.value = value;
	data.len = len;
    639a:	466a      	mov	r2, sp
			return BT_ATT_ERR_UNLIKELY;
		}
	}

	data.conn = conn;
	data.op = op;
    639c:	721e      	strb	r6, [r3, #8]
	data.offset = offset;
	data.value = value;
    639e:	9b11      	ldr	r3, [sp, #68]	; 0x44
	data.len = len;
    63a0:	7b12      	ldrb	r2, [r2, #12]
	}

	data.conn = conn;
	data.op = op;
	data.offset = offset;
	data.value = value;
    63a2:	9307      	str	r3, [sp, #28]
	data.len = len;
    63a4:	ab04      	add	r3, sp, #16
    63a6:	741a      	strb	r2, [r3, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    63a8:	2301      	movs	r3, #1

	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    63aa:	9901      	ldr	r1, [sp, #4]
	data.conn = conn;
	data.op = op;
	data.offset = offset;
	data.value = value;
	data.len = len;
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    63ac:	aa04      	add	r2, sp, #16
    63ae:	7513      	strb	r3, [r2, #20]

	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    63b0:	0008      	movs	r0, r1
    63b2:	0013      	movs	r3, r2
    63b4:	4a19      	ldr	r2, [pc, #100]	; (641c <att_write_rsp.part.10+0xb0>)
		if (!data.buf) {
			return BT_ATT_ERR_UNLIKELY;
		}
	}

	data.conn = conn;
    63b6:	9504      	str	r5, [sp, #16]
	data.offset = offset;
	data.value = value;
	data.len = len;
	data.err = BT_ATT_ERR_INVALID_HANDLE;

	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    63b8:	f000 ff12 	bl	71e0 <bt_gatt_foreach_attr>

	if (data.err) {
    63bc:	ab04      	add	r3, sp, #16
    63be:	7d1c      	ldrb	r4, [r3, #20]
    63c0:	2c00      	cmp	r4, #0
    63c2:	d10a      	bne.n	63da <att_write_rsp.part.10+0x6e>
    63c4:	e01e      	b.n	6404 <att_write_rsp.part.10+0x98>

	memset(&data, 0, sizeof(data));

	/* Only allocate buf if required to respond */
	if (rsp) {
		data.buf = bt_att_create_pdu(conn, rsp, 0);
    63c6:	2200      	movs	r2, #0
    63c8:	0039      	movs	r1, r7
    63ca:	0028      	movs	r0, r5
    63cc:	f7ff fe8c 	bl	60e8 <bt_att_create_pdu>
		if (!data.buf) {
			return BT_ATT_ERR_UNLIKELY;
    63d0:	240e      	movs	r4, #14

	memset(&data, 0, sizeof(data));

	/* Only allocate buf if required to respond */
	if (rsp) {
		data.buf = bt_att_create_pdu(conn, rsp, 0);
    63d2:	9005      	str	r0, [sp, #20]
		if (!data.buf) {
    63d4:	2800      	cmp	r0, #0
    63d6:	d1dc      	bne.n	6392 <att_write_rsp.part.10+0x26>
    63d8:	e01c      	b.n	6414 <att_write_rsp.part.10+0xa8>

	bt_gatt_foreach_attr(handle, handle, write_cb, &data);

	if (data.err) {
		/* In case of error discard data and respond with an error */
		if (rsp) {
    63da:	2f00      	cmp	r7, #0
    63dc:	d00d      	beq.n	63fa <att_write_rsp.part.10+0x8e>
			net_buf_unref(data.buf);
    63de:	9805      	ldr	r0, [sp, #20]
    63e0:	f00d f8ce 	bl	13580 <net_buf_unref>
{
	struct bt_att_error_rsp *rsp;
	struct net_buf *buf;

	/* Ignore opcode 0x00 */
	if (!req) {
    63e4:	2e00      	cmp	r6, #0
    63e6:	d101      	bne.n	63ec <att_write_rsp.part.10+0x80>
		if (rsp) {
			net_buf_unref(data.buf);
			/* Respond here since handle is set */
			send_err_rsp(conn, op, handle, data.err);
		}
		return op == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    63e8:	2400      	movs	r4, #0
    63ea:	e013      	b.n	6414 <att_write_rsp.part.10+0xa8>
    63ec:	ab04      	add	r3, sp, #16
    63ee:	7d1b      	ldrb	r3, [r3, #20]
    63f0:	9a01      	ldr	r2, [sp, #4]
    63f2:	0031      	movs	r1, r6
    63f4:	0028      	movs	r0, r5
    63f6:	f7ff feef 	bl	61d8 <send_err_rsp.part.9>
    63fa:	2e18      	cmp	r6, #24
    63fc:	d1f4      	bne.n	63e8 <att_write_rsp.part.10+0x7c>
    63fe:	ab04      	add	r3, sp, #16
    6400:	7d1c      	ldrb	r4, [r3, #20]
    6402:	e007      	b.n	6414 <att_write_rsp.part.10+0xa8>
	}

	if (data.buf) {
    6404:	9a05      	ldr	r2, [sp, #20]
    6406:	2a00      	cmp	r2, #0
    6408:	d0ee      	beq.n	63e8 <att_write_rsp.part.10+0x7c>
		bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf,
    640a:	4b05      	ldr	r3, [pc, #20]	; (6420 <att_write_rsp.part.10+0xb4>)
    640c:	2104      	movs	r1, #4
    640e:	0028      	movs	r0, r5
    6410:	f7fe ff92 	bl	5338 <bt_l2cap_send_cb>
				 att_rsp_sent);
	}

	return 0;
}
    6414:	0020      	movs	r0, r4
    6416:	b00b      	add	sp, #44	; 0x2c
    6418:	bdf0      	pop	{r4, r5, r6, r7, pc}
    641a:	46c0      	nop			; (mov r8, r8)
    641c:	00005f91 	.word	0x00005f91
    6420:	00005f55 	.word	0x00005f55

00006424 <att_write_cmd>:
	return att_exec_write_rsp(att, req->flags);
#endif /* CONFIG_BLUETOOTH_ATT_PREPARE_COUNT */
}

static u8_t att_write_cmd(struct bt_att *att, struct net_buf *buf)
{
    6424:	b530      	push	{r4, r5, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    6426:	6805      	ldr	r5, [r0, #0]
	u16_t handle;

	handle = net_buf_pull_le16(buf);
    6428:	0008      	movs	r0, r1
	return att_exec_write_rsp(att, req->flags);
#endif /* CONFIG_BLUETOOTH_ATT_PREPARE_COUNT */
}

static u8_t att_write_cmd(struct bt_att *att, struct net_buf *buf)
{
    642a:	b085      	sub	sp, #20
	struct bt_conn *conn = att->chan.chan.conn;
	u16_t handle;

	handle = net_buf_pull_le16(buf);
    642c:	3008      	adds	r0, #8
	return att_exec_write_rsp(att, req->flags);
#endif /* CONFIG_BLUETOOTH_ATT_PREPARE_COUNT */
}

static u8_t att_write_cmd(struct bt_att *att, struct net_buf *buf)
{
    642e:	000c      	movs	r4, r1
	struct bt_conn *conn = att->chan.chan.conn;
	u16_t handle;

	handle = net_buf_pull_le16(buf);
    6430:	f00d f8f9 	bl	13626 <net_buf_simple_pull_le16>
    6434:	0003      	movs	r3, r0
			  u8_t len)
{
	struct write_data data;

	if (!handle) {
		return BT_ATT_ERR_INVALID_HANDLE;
    6436:	2001      	movs	r0, #1
			  u16_t handle, u16_t offset, const void *value,
			  u8_t len)
{
	struct write_data data;

	if (!handle) {
    6438:	2b00      	cmp	r3, #0
    643a:	d009      	beq.n	6450 <att_write_cmd+0x2c>
    643c:	2100      	movs	r1, #0
    643e:	7b22      	ldrb	r2, [r4, #12]
    6440:	9100      	str	r1, [sp, #0]
    6442:	9202      	str	r2, [sp, #8]
    6444:	68a2      	ldr	r2, [r4, #8]
    6446:	0028      	movs	r0, r5
    6448:	9201      	str	r2, [sp, #4]
    644a:	000a      	movs	r2, r1
    644c:	f7ff ff8e 	bl	636c <att_write_rsp.part.10>
	handle = net_buf_pull_le16(buf);

	BT_DBG("handle 0x%04x", handle);

	return att_write_rsp(conn, 0, 0, handle, 0, buf->data, buf->len);
}
    6450:	b005      	add	sp, #20
    6452:	bd30      	pop	{r4, r5, pc}

00006454 <att_write_req>:

	return 0;
}

static u8_t att_write_req(struct bt_att *att, struct net_buf *buf)
{
    6454:	b530      	push	{r4, r5, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    6456:	6805      	ldr	r5, [r0, #0]
	u16_t handle;

	handle = net_buf_pull_le16(buf);
    6458:	0008      	movs	r0, r1

	return 0;
}

static u8_t att_write_req(struct bt_att *att, struct net_buf *buf)
{
    645a:	b085      	sub	sp, #20
	struct bt_conn *conn = att->chan.chan.conn;
	u16_t handle;

	handle = net_buf_pull_le16(buf);
    645c:	3008      	adds	r0, #8

	return 0;
}

static u8_t att_write_req(struct bt_att *att, struct net_buf *buf)
{
    645e:	000c      	movs	r4, r1
	struct bt_conn *conn = att->chan.chan.conn;
	u16_t handle;

	handle = net_buf_pull_le16(buf);
    6460:	f00d f8e1 	bl	13626 <net_buf_simple_pull_le16>
    6464:	0003      	movs	r3, r0
			  u8_t len)
{
	struct write_data data;

	if (!handle) {
		return BT_ATT_ERR_INVALID_HANDLE;
    6466:	2001      	movs	r0, #1
			  u16_t handle, u16_t offset, const void *value,
			  u8_t len)
{
	struct write_data data;

	if (!handle) {
    6468:	2b00      	cmp	r3, #0
    646a:	d00a      	beq.n	6482 <att_write_req+0x2e>
    646c:	7b22      	ldrb	r2, [r4, #12]
    646e:	2112      	movs	r1, #18
    6470:	9202      	str	r2, [sp, #8]
    6472:	68a2      	ldr	r2, [r4, #8]
    6474:	0028      	movs	r0, r5
    6476:	9201      	str	r2, [sp, #4]
    6478:	2200      	movs	r2, #0
    647a:	9200      	str	r2, [sp, #0]
    647c:	3213      	adds	r2, #19
    647e:	f7ff ff75 	bl	636c <att_write_rsp.part.10>

	BT_DBG("handle 0x%04x", handle);

	return att_write_rsp(conn, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
			     handle, 0, buf->data, buf->len);
}
    6482:	b005      	add	sp, #20
    6484:	bd30      	pop	{r4, r5, pc}
	...

00006488 <att_signed_write_cmd>:

	return att_write_rsp(conn, 0, 0, handle, 0, buf->data, buf->len);
}

static u8_t att_signed_write_cmd(struct bt_att *att, struct net_buf *buf)
{
    6488:	b5f0      	push	{r4, r5, r6, r7, lr}
	handle = sys_le16_to_cpu(req->handle);

	BT_DBG("handle 0x%04x", handle);

	/* Verifying data requires full buffer including attribute header */
	net_buf_push(buf, sizeof(struct bt_att_hdr));
    648a:	000e      	movs	r6, r1

	return att_write_rsp(conn, 0, 0, handle, 0, buf->data, buf->len);
}

static u8_t att_signed_write_cmd(struct bt_att *att, struct net_buf *buf)
{
    648c:	000c      	movs	r4, r1
	u16_t handle;
	int err;

	req = (void *)buf->data;

	handle = sys_le16_to_cpu(req->handle);
    648e:	688b      	ldr	r3, [r1, #8]
	return att_write_rsp(conn, 0, 0, handle, 0, buf->data, buf->len);
}

static u8_t att_signed_write_cmd(struct bt_att *att, struct net_buf *buf)
{
	struct bt_conn *conn = att->chan.chan.conn;
    6490:	6807      	ldr	r7, [r0, #0]
	u16_t handle;
	int err;

	req = (void *)buf->data;

	handle = sys_le16_to_cpu(req->handle);
    6492:	781a      	ldrb	r2, [r3, #0]
    6494:	785b      	ldrb	r3, [r3, #1]

	BT_DBG("handle 0x%04x", handle);

	/* Verifying data requires full buffer including attribute header */
	net_buf_push(buf, sizeof(struct bt_att_hdr));
    6496:	3608      	adds	r6, #8
	u16_t handle;
	int err;

	req = (void *)buf->data;

	handle = sys_le16_to_cpu(req->handle);
    6498:	021b      	lsls	r3, r3, #8

	return att_write_rsp(conn, 0, 0, handle, 0, buf->data, buf->len);
}

static u8_t att_signed_write_cmd(struct bt_att *att, struct net_buf *buf)
{
    649a:	b087      	sub	sp, #28
	u16_t handle;
	int err;

	req = (void *)buf->data;

	handle = sys_le16_to_cpu(req->handle);
    649c:	4313      	orrs	r3, r2

	BT_DBG("handle 0x%04x", handle);

	/* Verifying data requires full buffer including attribute header */
	net_buf_push(buf, sizeof(struct bt_att_hdr));
    649e:	2101      	movs	r1, #1
    64a0:	0030      	movs	r0, r6
	u16_t handle;
	int err;

	req = (void *)buf->data;

	handle = sys_le16_to_cpu(req->handle);
    64a2:	9305      	str	r3, [sp, #20]

	BT_DBG("handle 0x%04x", handle);

	/* Verifying data requires full buffer including attribute header */
	net_buf_push(buf, sizeof(struct bt_att_hdr));
    64a4:	f00d f8a7 	bl	135f6 <net_buf_simple_push>
	err = bt_smp_sign_verify(conn, buf);
    64a8:	0021      	movs	r1, r4
    64aa:	0038      	movs	r0, r7
    64ac:	f002 fcf6 	bl	8e9c <bt_smp_sign_verify>
    64b0:	1e05      	subs	r5, r0, #0
	if (err) {
    64b2:	d00b      	beq.n	64cc <att_signed_write_cmd+0x44>
		BT_ERR("Error verifying data");
    64b4:	4b13      	ldr	r3, [pc, #76]	; (6504 <att_signed_write_cmd+0x7c>)
    64b6:	4a14      	ldr	r2, [pc, #80]	; (6508 <att_signed_write_cmd+0x80>)
    64b8:	9301      	str	r3, [sp, #4]
    64ba:	4b14      	ldr	r3, [pc, #80]	; (650c <att_signed_write_cmd+0x84>)
    64bc:	4914      	ldr	r1, [pc, #80]	; (6510 <att_signed_write_cmd+0x88>)
    64be:	9300      	str	r3, [sp, #0]
    64c0:	4814      	ldr	r0, [pc, #80]	; (6514 <att_signed_write_cmd+0x8c>)
    64c2:	4b15      	ldr	r3, [pc, #84]	; (6518 <att_signed_write_cmd+0x90>)
    64c4:	f7fb fa5c 	bl	1980 <printk>
    64c8:	2000      	movs	r0, #0
    64ca:	e018      	b.n	64fe <att_signed_write_cmd+0x76>
		/* No response for this command */
		return 0;
	}

	net_buf_pull(buf, sizeof(struct bt_att_hdr));
    64cc:	2101      	movs	r1, #1
    64ce:	0030      	movs	r0, r6
    64d0:	f00d f899 	bl	13606 <net_buf_simple_pull>
	net_buf_pull(buf, sizeof(*req));
    64d4:	2102      	movs	r1, #2
    64d6:	0030      	movs	r0, r6
    64d8:	f00d f895 	bl	13606 <net_buf_simple_pull>
			  u16_t handle, u16_t offset, const void *value,
			  u8_t len)
{
	struct write_data data;

	if (!handle) {
    64dc:	9b05      	ldr	r3, [sp, #20]
		return BT_ATT_ERR_INVALID_HANDLE;
    64de:	2001      	movs	r0, #1
			  u16_t handle, u16_t offset, const void *value,
			  u8_t len)
{
	struct write_data data;

	if (!handle) {
    64e0:	2b00      	cmp	r3, #0
    64e2:	d00c      	beq.n	64fe <att_signed_write_cmd+0x76>
    64e4:	89a3      	ldrh	r3, [r4, #12]
    64e6:	9500      	str	r5, [sp, #0]
    64e8:	3b0c      	subs	r3, #12
    64ea:	b2db      	uxtb	r3, r3
    64ec:	9302      	str	r3, [sp, #8]
    64ee:	68a3      	ldr	r3, [r4, #8]
    64f0:	002a      	movs	r2, r5
    64f2:	9301      	str	r3, [sp, #4]
    64f4:	0029      	movs	r1, r5
    64f6:	9b05      	ldr	r3, [sp, #20]
    64f8:	0038      	movs	r0, r7
    64fa:	f7ff ff37 	bl	636c <att_write_rsp.part.10>
	net_buf_pull(buf, sizeof(struct bt_att_hdr));
	net_buf_pull(buf, sizeof(*req));

	return att_write_rsp(conn, 0, 0, handle, 0, buf->data,
			     buf->len - sizeof(struct bt_att_signature));
}
    64fe:	b007      	add	sp, #28
    6500:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6502:	46c0      	nop			; (mov r8, r8)
    6504:	000154c4 	.word	0x000154c4
    6508:	00015484 	.word	0x00015484
    650c:	000154c9 	.word	0x000154c9
    6510:	0001548b 	.word	0x0001548b
    6514:	000161a9 	.word	0x000161a9
    6518:	00017ca8 	.word	0x00017ca8

0000651c <att_exec_write_req>:
}
#endif /* CONFIG_BLUETOOTH_ATT_PREPARE_COUNT */


static u8_t att_exec_write_req(struct bt_att *att, struct net_buf *buf)
{
    651c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if CONFIG_BLUETOOTH_ATT_PREPARE_COUNT > 0
static u8_t att_exec_write_rsp(struct bt_att *att, u8_t flags)
{
	struct bt_conn *conn = att->chan.chan.conn;
	struct net_buf *buf;
	u8_t err = 0;
    651e:	2500      	movs	r5, #0

	req = (void *)buf->data;

	BT_DBG("flags 0x%02x", req->flags);

	return att_exec_write_rsp(att, req->flags);
    6520:	688b      	ldr	r3, [r1, #8]
}
#endif /* CONFIG_BLUETOOTH_ATT_PREPARE_COUNT */


static u8_t att_exec_write_req(struct bt_att *att, struct net_buf *buf)
{
    6522:	b089      	sub	sp, #36	; 0x24

	req = (void *)buf->data;

	BT_DBG("flags 0x%02x", req->flags);

	return att_exec_write_rsp(att, req->flags);
    6524:	781b      	ldrb	r3, [r3, #0]
}

#if CONFIG_BLUETOOTH_ATT_PREPARE_COUNT > 0
static u8_t att_exec_write_rsp(struct bt_att *att, u8_t flags)
{
	struct bt_conn *conn = att->chan.chan.conn;
    6526:	6806      	ldr	r6, [r0, #0]
}
#endif /* CONFIG_BLUETOOTH_ATT_PREPARE_COUNT */


static u8_t att_exec_write_req(struct bt_att *att, struct net_buf *buf)
{
    6528:	9007      	str	r0, [sp, #28]

	req = (void *)buf->data;

	BT_DBG("flags 0x%02x", req->flags);

	return att_exec_write_rsp(att, req->flags);
    652a:	9306      	str	r3, [sp, #24]
{
	struct bt_conn *conn = att->chan.chan.conn;
	struct net_buf *buf;
	u8_t err = 0;

	while ((buf = net_buf_get(&att->prep_queue, K_NO_WAIT))) {
    652c:	9807      	ldr	r0, [sp, #28]
    652e:	2100      	movs	r1, #0
    6530:	30dc      	adds	r0, #220	; 0xdc
    6532:	f00c fff9 	bl	13528 <net_buf_get>
    6536:	1e04      	subs	r4, r0, #0
    6538:	d028      	beq.n	658c <att_exec_write_req+0x70>

		BT_DBG("buf %p handle 0x%04x offset %u", buf, data->handle,
		       data->offset);

		/* Just discard the data if an error was set */
		if (!err && flags == BT_ATT_FLAG_EXEC) {
    653a:	2d00      	cmp	r5, #0
    653c:	d122      	bne.n	6584 <att_exec_write_req+0x68>
    653e:	9b06      	ldr	r3, [sp, #24]
    6540:	2b01      	cmp	r3, #1
    6542:	d11f      	bne.n	6584 <att_exec_write_req+0x68>
    6544:	2203      	movs	r2, #3
    6546:	89e3      	ldrh	r3, [r4, #14]
			  u8_t len)
{
	struct write_data data;

	if (!handle) {
		return BT_ATT_ERR_INVALID_HANDLE;
    6548:	9f06      	ldr	r7, [sp, #24]
    654a:	18e3      	adds	r3, r4, r3
    654c:	3313      	adds	r3, #19
    654e:	4393      	bics	r3, r2
    6550:	9305      	str	r3, [sp, #20]
		BT_DBG("buf %p handle 0x%04x offset %u", buf, data->handle,
		       data->offset);

		/* Just discard the data if an error was set */
		if (!err && flags == BT_ATT_FLAG_EXEC) {
			err = att_write_rsp(conn, BT_ATT_OP_EXEC_WRITE_REQ, 0,
    6552:	881b      	ldrh	r3, [r3, #0]
			  u16_t handle, u16_t offset, const void *value,
			  u8_t len)
{
	struct write_data data;

	if (!handle) {
    6554:	2b00      	cmp	r3, #0
    6556:	d00d      	beq.n	6574 <att_exec_write_req+0x58>
    6558:	7b22      	ldrb	r2, [r4, #12]
    655a:	2118      	movs	r1, #24
    655c:	9202      	str	r2, [sp, #8]
    655e:	68a2      	ldr	r2, [r4, #8]
    6560:	0030      	movs	r0, r6
    6562:	9201      	str	r2, [sp, #4]
    6564:	9a05      	ldr	r2, [sp, #20]
    6566:	8852      	ldrh	r2, [r2, #2]
    6568:	9200      	str	r2, [sp, #0]
    656a:	002a      	movs	r2, r5
    656c:	f7ff fefe 	bl	636c <att_write_rsp.part.10>
    6570:	1e07      	subs	r7, r0, #0
		/* Just discard the data if an error was set */
		if (!err && flags == BT_ATT_FLAG_EXEC) {
			err = att_write_rsp(conn, BT_ATT_OP_EXEC_WRITE_REQ, 0,
					    data->handle, data->offset,
					    buf->data, buf->len);
			if (err) {
    6572:	d007      	beq.n	6584 <att_exec_write_req+0x68>
    6574:	9b05      	ldr	r3, [sp, #20]
    6576:	2118      	movs	r1, #24
    6578:	881a      	ldrh	r2, [r3, #0]
    657a:	0030      	movs	r0, r6
    657c:	003b      	movs	r3, r7
    657e:	f7ff fe2b 	bl	61d8 <send_err_rsp.part.9>
    6582:	003d      	movs	r5, r7
				send_err_rsp(conn, BT_ATT_OP_EXEC_WRITE_REQ,
					     data->handle, err);
			}
		}

		net_buf_unref(buf);
    6584:	0020      	movs	r0, r4
    6586:	f00c fffb 	bl	13580 <net_buf_unref>
    658a:	e7cf      	b.n	652c <att_exec_write_req+0x10>
	}

	if (err) {
    658c:	2d00      	cmp	r5, #0
    658e:	d10e      	bne.n	65ae <att_exec_write_req+0x92>
		return 0;
	}

	/* Generate response */
	buf = bt_att_create_pdu(conn, BT_ATT_OP_EXEC_WRITE_RSP, 0);
    6590:	0002      	movs	r2, r0
    6592:	2119      	movs	r1, #25
    6594:	0030      	movs	r0, r6
    6596:	f7ff fda7 	bl	60e8 <bt_att_create_pdu>
    659a:	0002      	movs	r2, r0
	if (!buf) {
		return BT_ATT_ERR_UNLIKELY;
    659c:	200e      	movs	r0, #14
		return 0;
	}

	/* Generate response */
	buf = bt_att_create_pdu(conn, BT_ATT_OP_EXEC_WRITE_RSP, 0);
	if (!buf) {
    659e:	2a00      	cmp	r2, #0
    65a0:	d005      	beq.n	65ae <att_exec_write_req+0x92>
		return BT_ATT_ERR_UNLIKELY;
	}

	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent);
    65a2:	0030      	movs	r0, r6
    65a4:	4b03      	ldr	r3, [pc, #12]	; (65b4 <att_exec_write_req+0x98>)
    65a6:	2104      	movs	r1, #4
    65a8:	f7fe fec6 	bl	5338 <bt_l2cap_send_cb>

	return 0;
    65ac:	0028      	movs	r0, r5

	BT_DBG("flags 0x%02x", req->flags);

	return att_exec_write_rsp(att, req->flags);
#endif /* CONFIG_BLUETOOTH_ATT_PREPARE_COUNT */
}
    65ae:	b009      	add	sp, #36	; 0x24
    65b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    65b2:	46c0      	nop			; (mov r8, r8)
    65b4:	00005f55 	.word	0x00005f55

000065b8 <att_prepare_write_req>:
	return 0;
}
#endif /* CONFIG_BLUETOOTH_ATT_PREPARE_COUNT */

static u8_t att_prepare_write_req(struct bt_att *att, struct net_buf *buf)
{
    65b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    65ba:	0007      	movs	r7, r0

	req = (void *)buf->data;

	handle = sys_le16_to_cpu(req->handle);
	offset = sys_le16_to_cpu(req->offset);
	net_buf_pull(buf, sizeof(*req));
    65bc:	0008      	movs	r0, r1
	return BT_ATT_ERR_NOT_SUPPORTED;
#else
	struct bt_att_prepare_write_req *req;
	u16_t handle, offset;

	req = (void *)buf->data;
    65be:	688b      	ldr	r3, [r1, #8]
	return 0;
}
#endif /* CONFIG_BLUETOOTH_ATT_PREPARE_COUNT */

static u8_t att_prepare_write_req(struct bt_att *att, struct net_buf *buf)
{
    65c0:	b08b      	sub	sp, #44	; 0x2c
	struct bt_att_prepare_write_req *req;
	u16_t handle, offset;

	req = (void *)buf->data;

	handle = sys_le16_to_cpu(req->handle);
    65c2:	785d      	ldrb	r5, [r3, #1]
    65c4:	781a      	ldrb	r2, [r3, #0]
    65c6:	022d      	lsls	r5, r5, #8
    65c8:	4315      	orrs	r5, r2
	offset = sys_le16_to_cpu(req->offset);
    65ca:	789a      	ldrb	r2, [r3, #2]
    65cc:	78db      	ldrb	r3, [r3, #3]
	return 0;
}
#endif /* CONFIG_BLUETOOTH_ATT_PREPARE_COUNT */

static u8_t att_prepare_write_req(struct bt_att *att, struct net_buf *buf)
{
    65ce:	000c      	movs	r4, r1
	u16_t handle, offset;

	req = (void *)buf->data;

	handle = sys_le16_to_cpu(req->handle);
	offset = sys_le16_to_cpu(req->offset);
    65d0:	021b      	lsls	r3, r3, #8
    65d2:	4313      	orrs	r3, r2
	net_buf_pull(buf, sizeof(*req));
    65d4:	3008      	adds	r0, #8
    65d6:	2104      	movs	r1, #4
	u16_t handle, offset;

	req = (void *)buf->data;

	handle = sys_le16_to_cpu(req->handle);
	offset = sys_le16_to_cpu(req->offset);
    65d8:	9301      	str	r3, [sp, #4]
	struct bt_conn *conn = att->chan.chan.conn;
	struct prep_data data;
	struct bt_att_prepare_write_rsp *rsp;

	if (!handle) {
		return BT_ATT_ERR_INVALID_HANDLE;
    65da:	2601      	movs	r6, #1

	req = (void *)buf->data;

	handle = sys_le16_to_cpu(req->handle);
	offset = sys_le16_to_cpu(req->offset);
	net_buf_pull(buf, sizeof(*req));
    65dc:	f00d f813 	bl	13606 <net_buf_simple_pull>
{
	struct bt_conn *conn = att->chan.chan.conn;
	struct prep_data data;
	struct bt_att_prepare_write_rsp *rsp;

	if (!handle) {
    65e0:	2d00      	cmp	r5, #0
    65e2:	d054      	beq.n	668e <att_prepare_write_req+0xd6>
	offset = sys_le16_to_cpu(req->offset);
	net_buf_pull(buf, sizeof(*req));

	BT_DBG("handle 0x%04x offset %u", handle, offset);

	return att_prep_write_rsp(att, handle, offset, buf->data, buf->len);
    65e4:	68a3      	ldr	r3, [r4, #8]

	if (!handle) {
		return BT_ATT_ERR_INVALID_HANDLE;
	}

	memset(&data, 0, sizeof(data));
    65e6:	2214      	movs	r2, #20
	offset = sys_le16_to_cpu(req->offset);
	net_buf_pull(buf, sizeof(*req));

	BT_DBG("handle 0x%04x offset %u", handle, offset);

	return att_prep_write_rsp(att, handle, offset, buf->data, buf->len);
    65e8:	9303      	str	r3, [sp, #12]
    65ea:	7b23      	ldrb	r3, [r4, #12]

	if (!handle) {
		return BT_ATT_ERR_INVALID_HANDLE;
	}

	memset(&data, 0, sizeof(data));
    65ec:	ac05      	add	r4, sp, #20
	offset = sys_le16_to_cpu(req->offset);
	net_buf_pull(buf, sizeof(*req));

	BT_DBG("handle 0x%04x offset %u", handle, offset);

	return att_prep_write_rsp(att, handle, offset, buf->data, buf->len);
    65ee:	9302      	str	r3, [sp, #8]
}

static u8_t att_prep_write_rsp(struct bt_att *att, u16_t handle, u16_t offset,
			       const void *value, u8_t len)
{
	struct bt_conn *conn = att->chan.chan.conn;
    65f0:	683b      	ldr	r3, [r7, #0]

	if (!handle) {
		return BT_ATT_ERR_INVALID_HANDLE;
	}

	memset(&data, 0, sizeof(data));
    65f2:	2100      	movs	r1, #0
    65f4:	0020      	movs	r0, r4
}

static u8_t att_prep_write_rsp(struct bt_att *att, u16_t handle, u16_t offset,
			       const void *value, u8_t len)
{
	struct bt_conn *conn = att->chan.chan.conn;
    65f6:	9300      	str	r3, [sp, #0]

	if (!handle) {
		return BT_ATT_ERR_INVALID_HANDLE;
	}

	memset(&data, 0, sizeof(data));
    65f8:	f7fa fbc9 	bl	d8e <memset>

	data.conn = conn;
    65fc:	9b00      	ldr	r3, [sp, #0]
	data.offset = offset;
	data.value = value;
	data.len = len;
	data.err = BT_ATT_ERR_INVALID_HANDLE;

	bt_gatt_foreach_attr(handle, handle, prep_write_cb, &data);
    65fe:	4a25      	ldr	r2, [pc, #148]	; (6694 <att_prepare_write_req+0xdc>)
		return BT_ATT_ERR_INVALID_HANDLE;
	}

	memset(&data, 0, sizeof(data));

	data.conn = conn;
    6600:	9305      	str	r3, [sp, #20]
	data.offset = offset;
    6602:	466b      	mov	r3, sp
    6604:	889b      	ldrh	r3, [r3, #4]
	data.value = value;
	data.len = len;
	data.err = BT_ATT_ERR_INVALID_HANDLE;

	bt_gatt_foreach_attr(handle, handle, prep_write_cb, &data);
    6606:	0029      	movs	r1, r5
	}

	memset(&data, 0, sizeof(data));

	data.conn = conn;
	data.offset = offset;
    6608:	81e3      	strh	r3, [r4, #14]
	data.value = value;
    660a:	9b03      	ldr	r3, [sp, #12]
	data.len = len;
	data.err = BT_ATT_ERR_INVALID_HANDLE;

	bt_gatt_foreach_attr(handle, handle, prep_write_cb, &data);
    660c:	0028      	movs	r0, r5

	memset(&data, 0, sizeof(data));

	data.conn = conn;
	data.offset = offset;
	data.value = value;
    660e:	60a3      	str	r3, [r4, #8]
	data.len = len;
    6610:	466b      	mov	r3, sp
    6612:	7a1b      	ldrb	r3, [r3, #8]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    6614:	7426      	strb	r6, [r4, #16]
	memset(&data, 0, sizeof(data));

	data.conn = conn;
	data.offset = offset;
	data.value = value;
	data.len = len;
    6616:	7323      	strb	r3, [r4, #12]
	data.err = BT_ATT_ERR_INVALID_HANDLE;

	bt_gatt_foreach_attr(handle, handle, prep_write_cb, &data);
    6618:	0023      	movs	r3, r4
    661a:	f000 fde1 	bl	71e0 <bt_gatt_foreach_attr>

	if (data.err) {
    661e:	7c26      	ldrb	r6, [r4, #16]
    6620:	2e00      	cmp	r6, #0
    6622:	d007      	beq.n	6634 <att_prepare_write_req+0x7c>
    6624:	0033      	movs	r3, r6
    6626:	002a      	movs	r2, r5
    6628:	2116      	movs	r1, #22
    662a:	9800      	ldr	r0, [sp, #0]
    662c:	f7ff fdd4 	bl	61d8 <send_err_rsp.part.9>
		/* Respond here since handle is set */
		send_err_rsp(conn, BT_ATT_OP_PREPARE_WRITE_REQ, handle,
			     data.err);
		return 0;
    6630:	2600      	movs	r6, #0
    6632:	e02c      	b.n	668e <att_prepare_write_req+0xd6>
	}

	BT_DBG("buf %p handle 0x%04x offset %u", data.buf, handle, offset);

	/* Store buffer in the outstanding queue */
	net_buf_put(&att->prep_queue, data.buf);
    6634:	0038      	movs	r0, r7
    6636:	6861      	ldr	r1, [r4, #4]
    6638:	30dc      	adds	r0, #220	; 0xdc
    663a:	f00c ff92 	bl	13562 <net_buf_put>

	/* Generate response */
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_PREPARE_WRITE_RSP, 0);
    663e:	0032      	movs	r2, r6
    6640:	2117      	movs	r1, #23
    6642:	9800      	ldr	r0, [sp, #0]
    6644:	f7ff fd50 	bl	60e8 <bt_att_create_pdu>
    6648:	6060      	str	r0, [r4, #4]
	if (!data.buf) {
    664a:	2800      	cmp	r0, #0
    664c:	d01e      	beq.n	668c <att_prepare_write_req+0xd4>
		return BT_ATT_ERR_UNLIKELY;
	}

	rsp = net_buf_add(data.buf, sizeof(*rsp));
    664e:	2104      	movs	r1, #4
    6650:	3008      	adds	r0, #8
    6652:	f00c ffb7 	bl	135c4 <net_buf_simple_add>
	rsp->handle = sys_cpu_to_le16(handle);
	rsp->offset = sys_cpu_to_le16(offset);
    6656:	466b      	mov	r3, sp
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_PREPARE_WRITE_RSP, 0);
	if (!data.buf) {
		return BT_ATT_ERR_UNLIKELY;
	}

	rsp = net_buf_add(data.buf, sizeof(*rsp));
    6658:	0007      	movs	r7, r0
	rsp->handle = sys_cpu_to_le16(handle);
	rsp->offset = sys_cpu_to_le16(offset);
    665a:	791b      	ldrb	r3, [r3, #4]
	if (!data.buf) {
		return BT_ATT_ERR_UNLIKELY;
	}

	rsp = net_buf_add(data.buf, sizeof(*rsp));
	rsp->handle = sys_cpu_to_le16(handle);
    665c:	7005      	strb	r5, [r0, #0]
	rsp->offset = sys_cpu_to_le16(offset);
    665e:	7083      	strb	r3, [r0, #2]
    6660:	9b01      	ldr	r3, [sp, #4]
	if (!data.buf) {
		return BT_ATT_ERR_UNLIKELY;
	}

	rsp = net_buf_add(data.buf, sizeof(*rsp));
	rsp->handle = sys_cpu_to_le16(handle);
    6662:	0a2d      	lsrs	r5, r5, #8
	rsp->offset = sys_cpu_to_le16(offset);
    6664:	0a1b      	lsrs	r3, r3, #8
    6666:	70c3      	strb	r3, [r0, #3]
	if (!data.buf) {
		return BT_ATT_ERR_UNLIKELY;
	}

	rsp = net_buf_add(data.buf, sizeof(*rsp));
	rsp->handle = sys_cpu_to_le16(handle);
    6668:	7045      	strb	r5, [r0, #1]
	rsp->offset = sys_cpu_to_le16(offset);
	net_buf_add(data.buf, len);
    666a:	6860      	ldr	r0, [r4, #4]
    666c:	9902      	ldr	r1, [sp, #8]
    666e:	3008      	adds	r0, #8
    6670:	f00c ffa8 	bl	135c4 <net_buf_simple_add>
	memcpy(rsp->value, value, len);
    6674:	9a02      	ldr	r2, [sp, #8]
    6676:	9903      	ldr	r1, [sp, #12]
    6678:	1d38      	adds	r0, r7, #4
    667a:	f7fa fb5e 	bl	d3a <memcpy>

	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    667e:	4b06      	ldr	r3, [pc, #24]	; (6698 <att_prepare_write_req+0xe0>)
    6680:	6862      	ldr	r2, [r4, #4]
    6682:	2104      	movs	r1, #4
    6684:	9800      	ldr	r0, [sp, #0]
    6686:	f7fe fe57 	bl	5338 <bt_l2cap_send_cb>
    668a:	e000      	b.n	668e <att_prepare_write_req+0xd6>
	net_buf_put(&att->prep_queue, data.buf);

	/* Generate response */
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_PREPARE_WRITE_RSP, 0);
	if (!data.buf) {
		return BT_ATT_ERR_UNLIKELY;
    668c:	260e      	movs	r6, #14

	BT_DBG("handle 0x%04x offset %u", handle, offset);

	return att_prep_write_rsp(att, handle, offset, buf->data, buf->len);
#endif /* CONFIG_BLUETOOTH_ATT_PREPARE_COUNT */
}
    668e:	0030      	movs	r0, r6
    6690:	b00b      	add	sp, #44	; 0x2c
    6692:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6694:	00005fe9 	.word	0x00005fe9
    6698:	00005f55 	.word	0x00005f55

0000669c <att_read_group_req>:

	return 0;
}

static u8_t att_read_group_req(struct bt_att *att, struct net_buf *buf)
{
    669c:	b5f0      	push	{r4, r5, r6, r7, lr}
		struct bt_uuid_16 u16;
		struct bt_uuid_128 u128;
	} u;

	/* Type can only be UUID16 or UUID128 */
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    669e:	898b      	ldrh	r3, [r1, #12]

	return 0;
}

static u8_t att_read_group_req(struct bt_att *att, struct net_buf *buf)
{
    66a0:	b08f      	sub	sp, #60	; 0x3c
    66a2:	0007      	movs	r7, r0
    66a4:	000e      	movs	r6, r1
		struct bt_uuid_16 u16;
		struct bt_uuid_128 u128;
	} u;

	/* Type can only be UUID16 or UUID128 */
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    66a6:	2b06      	cmp	r3, #6
    66a8:	d002      	beq.n	66b0 <att_read_group_req+0x14>
		return BT_ATT_ERR_INVALID_PDU;
    66aa:	2504      	movs	r5, #4
		struct bt_uuid_16 u16;
		struct bt_uuid_128 u128;
	} u;

	/* Type can only be UUID16 or UUID128 */
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    66ac:	2b14      	cmp	r3, #20
    66ae:	d179      	bne.n	67a4 <att_read_group_req+0x108>

	req = (void *)buf->data;

	start_handle = sys_le16_to_cpu(req->start_handle);
	end_handle = sys_le16_to_cpu(req->end_handle);
	net_buf_pull(buf, sizeof(*req));
    66b0:	0030      	movs	r0, r6
	return 0;
}

static u8_t att_read_group_req(struct bt_att *att, struct net_buf *buf)
{
	struct bt_conn *conn = att->chan.chan.conn;
    66b2:	683b      	ldr	r3, [r7, #0]

	req = (void *)buf->data;

	start_handle = sys_le16_to_cpu(req->start_handle);
	end_handle = sys_le16_to_cpu(req->end_handle);
	net_buf_pull(buf, sizeof(*req));
    66b4:	2104      	movs	r1, #4
	return 0;
}

static u8_t att_read_group_req(struct bt_att *att, struct net_buf *buf)
{
	struct bt_conn *conn = att->chan.chan.conn;
    66b6:	9301      	str	r3, [sp, #4]
	/* Type can only be UUID16 or UUID128 */
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
		return BT_ATT_ERR_INVALID_PDU;
	}

	req = (void *)buf->data;
    66b8:	68b3      	ldr	r3, [r6, #8]

	start_handle = sys_le16_to_cpu(req->start_handle);
	end_handle = sys_le16_to_cpu(req->end_handle);
	net_buf_pull(buf, sizeof(*req));
    66ba:	3008      	adds	r0, #8
		return BT_ATT_ERR_INVALID_PDU;
	}

	req = (void *)buf->data;

	start_handle = sys_le16_to_cpu(req->start_handle);
    66bc:	785c      	ldrb	r4, [r3, #1]
    66be:	781a      	ldrb	r2, [r3, #0]
    66c0:	0224      	lsls	r4, r4, #8
    66c2:	4314      	orrs	r4, r2
	end_handle = sys_le16_to_cpu(req->end_handle);
    66c4:	789a      	ldrb	r2, [r3, #2]
    66c6:	78db      	ldrb	r3, [r3, #3]
	net_buf_pull(buf, sizeof(*req));

	if (!uuid_create(&u.uuid, buf)) {
		return BT_ATT_ERR_UNLIKELY;
    66c8:	250e      	movs	r5, #14
	}

	req = (void *)buf->data;

	start_handle = sys_le16_to_cpu(req->start_handle);
	end_handle = sys_le16_to_cpu(req->end_handle);
    66ca:	021b      	lsls	r3, r3, #8
    66cc:	4313      	orrs	r3, r2
    66ce:	9300      	str	r3, [sp, #0]
	net_buf_pull(buf, sizeof(*req));
    66d0:	f00c ff99 	bl	13606 <net_buf_simple_pull>

	if (!uuid_create(&u.uuid, buf)) {
    66d4:	0031      	movs	r1, r6
    66d6:	a804      	add	r0, sp, #16
    66d8:	f7ff f9ce 	bl	5a78 <uuid_create>
    66dc:	2800      	cmp	r0, #0
    66de:	d061      	beq.n	67a4 <att_read_group_req+0x108>
}

static bool range_is_valid(u16_t start, u16_t end, u16_t *err)
{
	/* Handle 0 is invalid */
	if (!start || !end) {
    66e0:	2c00      	cmp	r4, #0
    66e2:	d007      	beq.n	66f4 <att_read_group_req+0x58>
    66e4:	2500      	movs	r5, #0
    66e6:	9b00      	ldr	r3, [sp, #0]
    66e8:	42ab      	cmp	r3, r5
    66ea:	d002      	beq.n	66f2 <att_read_group_req+0x56>
		}
		return false;
	}

	/* Check if range is valid */
	if (start > end) {
    66ec:	429c      	cmp	r4, r3
    66ee:	d801      	bhi.n	66f4 <att_read_group_req+0x58>
    66f0:	e008      	b.n	6704 <att_read_group_req+0x68>
static bool range_is_valid(u16_t start, u16_t end, u16_t *err)
{
	/* Handle 0 is invalid */
	if (!start || !end) {
		if (err) {
			*err = 0;
    66f2:	9c00      	ldr	r4, [sp, #0]
    66f4:	2301      	movs	r3, #1
    66f6:	0022      	movs	r2, r4
    66f8:	2110      	movs	r1, #16
    66fa:	9801      	ldr	r0, [sp, #4]
    66fc:	f7ff fd6c 	bl	61d8 <send_err_rsp.part.9>
	       start_handle, end_handle, bt_uuid_str(&u.uuid));

	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
		send_err_rsp(conn, BT_ATT_OP_READ_GROUP_REQ, err_handle,
			     BT_ATT_ERR_INVALID_HANDLE);
		return 0;
    6700:	2500      	movs	r5, #0
    6702:	e04f      	b.n	67a4 <att_read_group_req+0x108>
	 * Read By Group Type Request. The "Primary Service" and "Secondary
	 * Service" grouping types may be used in the Read By Group Type
	 * Request. The "Characteristic" grouping type shall not be used in
	 * the ATT Read By Group Type Request.
	 */
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    6704:	ab02      	add	r3, sp, #8
    6706:	701d      	strb	r5, [r3, #0]
    6708:	23a0      	movs	r3, #160	; 0xa0
    670a:	aa02      	add	r2, sp, #8
    670c:	019b      	lsls	r3, r3, #6
    670e:	0011      	movs	r1, r2
    6710:	a804      	add	r0, sp, #16
    6712:	8053      	strh	r3, [r2, #2]
    6714:	f7fb fe32 	bl	237c <bt_uuid_cmp>
    6718:	2800      	cmp	r0, #0
    671a:	d00d      	beq.n	6738 <att_read_group_req+0x9c>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
    671c:	4b23      	ldr	r3, [pc, #140]	; (67ac <att_read_group_req+0x110>)
    671e:	a903      	add	r1, sp, #12
    6720:	a804      	add	r0, sp, #16
    6722:	700d      	strb	r5, [r1, #0]
    6724:	804b      	strh	r3, [r1, #2]
    6726:	f7fb fe29 	bl	237c <bt_uuid_cmp>
	 * Read By Group Type Request. The "Primary Service" and "Secondary
	 * Service" grouping types may be used in the Read By Group Type
	 * Request. The "Characteristic" grouping type shall not be used in
	 * the ATT Read By Group Type Request.
	 */
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    672a:	2800      	cmp	r0, #0
    672c:	d004      	beq.n	6738 <att_read_group_req+0x9c>
    672e:	2310      	movs	r3, #16
    6730:	0022      	movs	r2, r4
    6732:	0019      	movs	r1, r3
    6734:	9801      	ldr	r0, [sp, #4]
    6736:	e02b      	b.n	6790 <att_read_group_req+0xf4>
}

static u8_t att_read_group_rsp(struct bt_att *att, struct bt_uuid *uuid,
			       u16_t start_handle, u16_t end_handle)
{
	struct bt_conn *conn = att->chan.chan.conn;
    6738:	683e      	ldr	r6, [r7, #0]
	struct read_group_data data;

	memset(&data, 0, sizeof(data));
    673a:	2214      	movs	r2, #20
    673c:	2100      	movs	r1, #0
    673e:	a809      	add	r0, sp, #36	; 0x24
    6740:	f7fa fb25 	bl	d8e <memset>

	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
    6744:	2201      	movs	r2, #1
    6746:	2111      	movs	r1, #17
    6748:	0030      	movs	r0, r6
    674a:	f7ff fccd 	bl	60e8 <bt_att_create_pdu>
				     sizeof(*data.rsp));
	if (!data.buf) {
		return BT_ATT_ERR_UNLIKELY;
    674e:	250e      	movs	r5, #14
	struct bt_conn *conn = att->chan.chan.conn;
	struct read_group_data data;

	memset(&data, 0, sizeof(data));

	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
    6750:	900b      	str	r0, [sp, #44]	; 0x2c
				     sizeof(*data.rsp));
	if (!data.buf) {
    6752:	2800      	cmp	r0, #0
    6754:	d026      	beq.n	67a4 <att_read_group_req+0x108>
		return BT_ATT_ERR_UNLIKELY;
	}

	data.att = att;
	data.uuid = uuid;
    6756:	ab04      	add	r3, sp, #16
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    6758:	2101      	movs	r1, #1
    675a:	3008      	adds	r0, #8
				     sizeof(*data.rsp));
	if (!data.buf) {
		return BT_ATT_ERR_UNLIKELY;
	}

	data.att = att;
    675c:	9709      	str	r7, [sp, #36]	; 0x24
	data.uuid = uuid;
    675e:	930a      	str	r3, [sp, #40]	; 0x28
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
	data.rsp->len = 0;
    6760:	2700      	movs	r7, #0
		return BT_ATT_ERR_UNLIKELY;
	}

	data.att = att;
	data.uuid = uuid;
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    6762:	f00c ff2f 	bl	135c4 <net_buf_simple_add>
	data.rsp->len = 0;
	data.group = NULL;

	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    6766:	ab09      	add	r3, sp, #36	; 0x24
		return BT_ATT_ERR_UNLIKELY;
	}

	data.att = att;
	data.uuid = uuid;
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    6768:	900c      	str	r0, [sp, #48]	; 0x30
	data.rsp->len = 0;
	data.group = NULL;

	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    676a:	4a11      	ldr	r2, [pc, #68]	; (67b0 <att_read_group_req+0x114>)
	}

	data.att = att;
	data.uuid = uuid;
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
	data.rsp->len = 0;
    676c:	7007      	strb	r7, [r0, #0]
	data.group = NULL;

	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    676e:	9900      	ldr	r1, [sp, #0]
    6770:	0020      	movs	r0, r4

	data.att = att;
	data.uuid = uuid;
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
	data.rsp->len = 0;
	data.group = NULL;
    6772:	970d      	str	r7, [sp, #52]	; 0x34

	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    6774:	f000 fd34 	bl	71e0 <bt_gatt_foreach_attr>

	if (!data.rsp->len) {
    6778:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    677a:	781d      	ldrb	r5, [r3, #0]
    677c:	9300      	str	r3, [sp, #0]
    677e:	42bd      	cmp	r5, r7
    6780:	d109      	bne.n	6796 <att_read_group_req+0xfa>
		net_buf_unref(data.buf);
    6782:	980b      	ldr	r0, [sp, #44]	; 0x2c
    6784:	f00c fefc 	bl	13580 <net_buf_unref>
    6788:	230a      	movs	r3, #10
    678a:	0022      	movs	r2, r4
    678c:	2110      	movs	r1, #16
    678e:	0030      	movs	r0, r6
    6790:	f7ff fd22 	bl	61d8 <send_err_rsp.part.9>
    6794:	e006      	b.n	67a4 <att_read_group_req+0x108>
		send_err_rsp(conn, BT_ATT_OP_READ_GROUP_REQ, start_handle,
			     BT_ATT_ERR_ATTRIBUTE_NOT_FOUND);
		return 0;
	}

	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    6796:	4b07      	ldr	r3, [pc, #28]	; (67b4 <att_read_group_req+0x118>)
    6798:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    679a:	2104      	movs	r1, #4
    679c:	0030      	movs	r0, r6
    679e:	f7fe fdcb 	bl	5338 <bt_l2cap_send_cb>

	return 0;
    67a2:	003d      	movs	r5, r7
			     BT_ATT_ERR_UNSUPPORTED_GROUP_TYPE);
		return 0;
	}

	return att_read_group_rsp(att, &u.uuid, start_handle, end_handle);
}
    67a4:	0028      	movs	r0, r5
    67a6:	b00f      	add	sp, #60	; 0x3c
    67a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    67aa:	46c0      	nop			; (mov r8, r8)
    67ac:	00002801 	.word	0x00002801
    67b0:	00005765 	.word	0x00005765
    67b4:	00005f55 	.word	0x00005f55

000067b8 <att_read_mult_req>:
	return att_read_rsp(att, BT_ATT_OP_READ_BLOB_REQ,
			    BT_ATT_OP_READ_BLOB_RSP, handle, offset);
}

static u8_t att_read_mult_req(struct bt_att *att, struct net_buf *buf)
{
    67b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    67ba:	b087      	sub	sp, #28
	struct bt_conn *conn = att->chan.chan.conn;
    67bc:	6805      	ldr	r5, [r0, #0]
	struct read_data data;
	u16_t handle;

	memset(&data, 0, sizeof(data));
    67be:	ac01      	add	r4, sp, #4
    67c0:	2214      	movs	r2, #20
	return att_read_rsp(att, BT_ATT_OP_READ_BLOB_REQ,
			    BT_ATT_OP_READ_BLOB_RSP, handle, offset);
}

static u8_t att_read_mult_req(struct bt_att *att, struct net_buf *buf)
{
    67c2:	0006      	movs	r6, r0
    67c4:	000f      	movs	r7, r1
	struct bt_conn *conn = att->chan.chan.conn;
	struct read_data data;
	u16_t handle;

	memset(&data, 0, sizeof(data));
    67c6:	0020      	movs	r0, r4
    67c8:	2100      	movs	r1, #0
    67ca:	f7fa fae0 	bl	d8e <memset>

	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
    67ce:	2200      	movs	r2, #0
    67d0:	210f      	movs	r1, #15
    67d2:	0028      	movs	r0, r5
    67d4:	f7ff fc88 	bl	60e8 <bt_att_create_pdu>
	if (!data.buf) {
		return BT_ATT_ERR_UNLIKELY;
    67d8:	230e      	movs	r3, #14
	struct read_data data;
	u16_t handle;

	memset(&data, 0, sizeof(data));

	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
    67da:	60a0      	str	r0, [r4, #8]
	if (!data.buf) {
    67dc:	2800      	cmp	r0, #0
    67de:	d023      	beq.n	6828 <att_read_mult_req+0x70>
		return BT_ATT_ERR_UNLIKELY;
	}

	data.att = att;
    67e0:	9601      	str	r6, [sp, #4]

	while (buf->len >= sizeof(u16_t)) {
    67e2:	89bb      	ldrh	r3, [r7, #12]
    67e4:	2b01      	cmp	r3, #1
    67e6:	d918      	bls.n	681a <att_read_mult_req+0x62>
		handle = net_buf_pull_le16(buf);
    67e8:	0038      	movs	r0, r7
    67ea:	3008      	adds	r0, #8
    67ec:	f00c ff1b 	bl	13626 <net_buf_simple_pull_le16>
		 * permitted on any of the Characteristic Values.
		 *
		 * If handle is not valid then return invalid handle error.
		 * If handle is found error will be cleared by read_cb.
		 */
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    67f0:	2301      	movs	r3, #1

		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    67f2:	4a0f      	ldr	r2, [pc, #60]	; (6830 <att_read_mult_req+0x78>)
		 * permitted on any of the Characteristic Values.
		 *
		 * If handle is not valid then return invalid handle error.
		 * If handle is found error will be cleared by read_cb.
		 */
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    67f4:	7423      	strb	r3, [r4, #16]

		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    67f6:	0001      	movs	r1, r0
    67f8:	0023      	movs	r3, r4
	}

	data.att = att;

	while (buf->len >= sizeof(u16_t)) {
		handle = net_buf_pull_le16(buf);
    67fa:	0006      	movs	r6, r0
		 * If handle is not valid then return invalid handle error.
		 * If handle is found error will be cleared by read_cb.
		 */
		data.err = BT_ATT_ERR_INVALID_HANDLE;

		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    67fc:	f000 fcf0 	bl	71e0 <bt_gatt_foreach_attr>

		/* Stop reading in case of error */
		if (data.err) {
    6800:	7c23      	ldrb	r3, [r4, #16]
    6802:	2b00      	cmp	r3, #0
    6804:	d0ed      	beq.n	67e2 <att_read_mult_req+0x2a>
			net_buf_unref(data.buf);
    6806:	68a0      	ldr	r0, [r4, #8]
    6808:	f00c feba 	bl	13580 <net_buf_unref>
    680c:	7c23      	ldrb	r3, [r4, #16]
    680e:	0032      	movs	r2, r6
    6810:	210e      	movs	r1, #14
    6812:	0028      	movs	r0, r5
    6814:	f7ff fce0 	bl	61d8 <send_err_rsp.part.9>
    6818:	e005      	b.n	6826 <att_read_mult_req+0x6e>
				     data.err);
			return 0;
		}
	}

	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    681a:	4b06      	ldr	r3, [pc, #24]	; (6834 <att_read_mult_req+0x7c>)
    681c:	68a2      	ldr	r2, [r4, #8]
    681e:	2104      	movs	r1, #4
    6820:	0028      	movs	r0, r5
    6822:	f7fe fd89 	bl	5338 <bt_l2cap_send_cb>

	return 0;
    6826:	2300      	movs	r3, #0
}
    6828:	0018      	movs	r0, r3
    682a:	b007      	add	sp, #28
    682c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    682e:	46c0      	nop			; (mov r8, r8)
    6830:	00006075 	.word	0x00006075
    6834:	00005f55 	.word	0x00005f55

00006838 <att_read_rsp>:
	return BT_GATT_ITER_CONTINUE;
}

static u8_t att_read_rsp(struct bt_att *att, u8_t op, u8_t rsp, u16_t handle,
			 u16_t offset)
{
    6838:	b5f0      	push	{r4, r5, r6, r7, lr}
    683a:	b08b      	sub	sp, #44	; 0x2c
    683c:	001e      	movs	r6, r3
    683e:	ab10      	add	r3, sp, #64	; 0x40
    6840:	881b      	ldrh	r3, [r3, #0]
    6842:	9000      	str	r0, [sp, #0]
    6844:	9101      	str	r1, [sp, #4]
    6846:	9202      	str	r2, [sp, #8]
    6848:	9303      	str	r3, [sp, #12]
	struct bt_conn *conn = att->chan.chan.conn;
	struct read_data data;

	if (!handle) {
		return BT_ATT_ERR_INVALID_HANDLE;
    684a:	2501      	movs	r5, #1
			 u16_t offset)
{
	struct bt_conn *conn = att->chan.chan.conn;
	struct read_data data;

	if (!handle) {
    684c:	2e00      	cmp	r6, #0
    684e:	d033      	beq.n	68b8 <att_read_rsp+0x80>
}

static u8_t att_read_rsp(struct bt_att *att, u8_t op, u8_t rsp, u16_t handle,
			 u16_t offset)
{
	struct bt_conn *conn = att->chan.chan.conn;
    6850:	6807      	ldr	r7, [r0, #0]

	if (!handle) {
		return BT_ATT_ERR_INVALID_HANDLE;
	}

	memset(&data, 0, sizeof(data));
    6852:	ac05      	add	r4, sp, #20
    6854:	2214      	movs	r2, #20
    6856:	2100      	movs	r1, #0
    6858:	0020      	movs	r0, r4
    685a:	f7fa fa98 	bl	d8e <memset>

	data.buf = bt_att_create_pdu(conn, rsp, 0);
    685e:	2200      	movs	r2, #0
    6860:	9902      	ldr	r1, [sp, #8]
    6862:	0038      	movs	r0, r7
    6864:	f7ff fc40 	bl	60e8 <bt_att_create_pdu>
	if (!data.buf) {
		return BT_ATT_ERR_UNLIKELY;
    6868:	350d      	adds	r5, #13
		return BT_ATT_ERR_INVALID_HANDLE;
	}

	memset(&data, 0, sizeof(data));

	data.buf = bt_att_create_pdu(conn, rsp, 0);
    686a:	60a0      	str	r0, [r4, #8]
	if (!data.buf) {
    686c:	2800      	cmp	r0, #0
    686e:	d023      	beq.n	68b8 <att_read_rsp+0x80>
		return BT_ATT_ERR_UNLIKELY;
	}

	data.att = att;
    6870:	9b00      	ldr	r3, [sp, #0]
	data.offset = offset;

	/* Pre-set error if no attr will be found in handle */
	data.err = BT_ATT_ERR_INVALID_HANDLE;

	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    6872:	4a13      	ldr	r2, [pc, #76]	; (68c0 <att_read_rsp+0x88>)
	data.buf = bt_att_create_pdu(conn, rsp, 0);
	if (!data.buf) {
		return BT_ATT_ERR_UNLIKELY;
	}

	data.att = att;
    6874:	9305      	str	r3, [sp, #20]
	data.offset = offset;
    6876:	466b      	mov	r3, sp
    6878:	899b      	ldrh	r3, [r3, #12]

	/* Pre-set error if no attr will be found in handle */
	data.err = BT_ATT_ERR_INVALID_HANDLE;

	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    687a:	0031      	movs	r1, r6
	if (!data.buf) {
		return BT_ATT_ERR_UNLIKELY;
	}

	data.att = att;
	data.offset = offset;
    687c:	80a3      	strh	r3, [r4, #4]

	/* Pre-set error if no attr will be found in handle */
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    687e:	2301      	movs	r3, #1

	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    6880:	0030      	movs	r0, r6

	data.att = att;
	data.offset = offset;

	/* Pre-set error if no attr will be found in handle */
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    6882:	7423      	strb	r3, [r4, #16]

	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    6884:	0023      	movs	r3, r4
    6886:	f000 fcab 	bl	71e0 <bt_gatt_foreach_attr>

	/* In case of error discard data and respond with an error */
	if (data.err) {
    688a:	7c25      	ldrb	r5, [r4, #16]
    688c:	2d00      	cmp	r5, #0
    688e:	d00d      	beq.n	68ac <att_read_rsp+0x74>
		net_buf_unref(data.buf);
		/* Respond here since handle is set */
		send_err_rsp(conn, op, handle, data.err);
		return 0;
    6890:	2500      	movs	r5, #0

	bt_gatt_foreach_attr(handle, handle, read_cb, &data);

	/* In case of error discard data and respond with an error */
	if (data.err) {
		net_buf_unref(data.buf);
    6892:	68a0      	ldr	r0, [r4, #8]
    6894:	f00c fe74 	bl	13580 <net_buf_unref>
{
	struct bt_att_error_rsp *rsp;
	struct net_buf *buf;

	/* Ignore opcode 0x00 */
	if (!req) {
    6898:	9b01      	ldr	r3, [sp, #4]
    689a:	42ab      	cmp	r3, r5
    689c:	d00c      	beq.n	68b8 <att_read_rsp+0x80>
    689e:	7c23      	ldrb	r3, [r4, #16]
    68a0:	0032      	movs	r2, r6
    68a2:	9901      	ldr	r1, [sp, #4]
    68a4:	0038      	movs	r0, r7
    68a6:	f7ff fc97 	bl	61d8 <send_err_rsp.part.9>
    68aa:	e005      	b.n	68b8 <att_read_rsp+0x80>
		/* Respond here since handle is set */
		send_err_rsp(conn, op, handle, data.err);
		return 0;
	}

	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    68ac:	4b05      	ldr	r3, [pc, #20]	; (68c4 <att_read_rsp+0x8c>)
    68ae:	68a2      	ldr	r2, [r4, #8]
    68b0:	2104      	movs	r1, #4
    68b2:	0038      	movs	r0, r7
    68b4:	f7fe fd40 	bl	5338 <bt_l2cap_send_cb>

	return 0;
}
    68b8:	0028      	movs	r0, r5
    68ba:	b00b      	add	sp, #44	; 0x2c
    68bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    68be:	46c0      	nop			; (mov r8, r8)
    68c0:	00006075 	.word	0x00006075
    68c4:	00005f55 	.word	0x00005f55

000068c8 <att_read_blob_req>:
	return att_read_rsp(att, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
			    handle, 0);
}

static u8_t att_read_blob_req(struct bt_att *att, struct net_buf *buf)
{
    68c8:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_read_blob_req *req;
	u16_t handle, offset;

	req = (void *)buf->data;
    68ca:	688a      	ldr	r2, [r1, #8]

	handle = sys_le16_to_cpu(req->handle);
    68cc:	7853      	ldrb	r3, [r2, #1]
    68ce:	7811      	ldrb	r1, [r2, #0]
    68d0:	021b      	lsls	r3, r3, #8
	offset = sys_le16_to_cpu(req->offset);

	BT_DBG("handle 0x%04x offset %u", handle, offset);

	return att_read_rsp(att, BT_ATT_OP_READ_BLOB_REQ,
    68d2:	430b      	orrs	r3, r1
	u16_t handle, offset;

	req = (void *)buf->data;

	handle = sys_le16_to_cpu(req->handle);
	offset = sys_le16_to_cpu(req->offset);
    68d4:	7891      	ldrb	r1, [r2, #2]
    68d6:	78d2      	ldrb	r2, [r2, #3]
    68d8:	0212      	lsls	r2, r2, #8

	BT_DBG("handle 0x%04x offset %u", handle, offset);

	return att_read_rsp(att, BT_ATT_OP_READ_BLOB_REQ,
    68da:	430a      	orrs	r2, r1
    68dc:	9200      	str	r2, [sp, #0]
    68de:	210c      	movs	r1, #12
    68e0:	220d      	movs	r2, #13
    68e2:	f7ff ffa9 	bl	6838 <att_read_rsp>
			    BT_ATT_OP_READ_BLOB_RSP, handle, offset);
}
    68e6:	bd0e      	pop	{r1, r2, r3, pc}

000068e8 <att_read_req>:

	return 0;
}

static u8_t att_read_req(struct bt_att *att, struct net_buf *buf)
{
    68e8:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_read_req *req;
	u16_t handle;

	req = (void *)buf->data;

	handle = sys_le16_to_cpu(req->handle);
    68ea:	688b      	ldr	r3, [r1, #8]

	BT_DBG("handle 0x%04x", handle);

	return att_read_rsp(att, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
    68ec:	210a      	movs	r1, #10
	struct bt_att_read_req *req;
	u16_t handle;

	req = (void *)buf->data;

	handle = sys_le16_to_cpu(req->handle);
    68ee:	781a      	ldrb	r2, [r3, #0]
    68f0:	785b      	ldrb	r3, [r3, #1]
    68f2:	021b      	lsls	r3, r3, #8

	BT_DBG("handle 0x%04x", handle);

	return att_read_rsp(att, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
    68f4:	4313      	orrs	r3, r2
    68f6:	2200      	movs	r2, #0
    68f8:	9200      	str	r2, [sp, #0]
    68fa:	320b      	adds	r2, #11
    68fc:	f7ff ff9c 	bl	6838 <att_read_rsp>
			    handle, 0);
}
    6900:	bd0e      	pop	{r1, r2, r3, pc}
	...

00006904 <att_read_type_req>:

	return 0;
}

static u8_t att_read_type_req(struct bt_att *att, struct net_buf *buf)
{
    6904:	b5f0      	push	{r4, r5, r6, r7, lr}
    6906:	b08f      	sub	sp, #60	; 0x3c
    6908:	9001      	str	r0, [sp, #4]
		struct bt_uuid_16 u16;
		struct bt_uuid_128 u128;
	} u;

	/* Type can only be UUID16 or UUID128 */
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    690a:	898b      	ldrh	r3, [r1, #12]

	return 0;
}

static u8_t att_read_type_req(struct bt_att *att, struct net_buf *buf)
{
    690c:	000e      	movs	r6, r1
		struct bt_uuid_16 u16;
		struct bt_uuid_128 u128;
	} u;

	/* Type can only be UUID16 or UUID128 */
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    690e:	2b06      	cmp	r3, #6
    6910:	d002      	beq.n	6918 <att_read_type_req+0x14>
		return BT_ATT_ERR_INVALID_PDU;
    6912:	2504      	movs	r5, #4
		struct bt_uuid_16 u16;
		struct bt_uuid_128 u128;
	} u;

	/* Type can only be UUID16 or UUID128 */
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    6914:	2b14      	cmp	r3, #20
    6916:	d159      	bne.n	69cc <att_read_type_req+0xc8>

	req = (void *)buf->data;

	start_handle = sys_le16_to_cpu(req->start_handle);
	end_handle = sys_le16_to_cpu(req->end_handle);
	net_buf_pull(buf, sizeof(*req));
    6918:	0030      	movs	r0, r6
	return 0;
}

static u8_t att_read_type_req(struct bt_att *att, struct net_buf *buf)
{
	struct bt_conn *conn = att->chan.chan.conn;
    691a:	9b01      	ldr	r3, [sp, #4]

	req = (void *)buf->data;

	start_handle = sys_le16_to_cpu(req->start_handle);
	end_handle = sys_le16_to_cpu(req->end_handle);
	net_buf_pull(buf, sizeof(*req));
    691c:	2104      	movs	r1, #4
	return 0;
}

static u8_t att_read_type_req(struct bt_att *att, struct net_buf *buf)
{
	struct bt_conn *conn = att->chan.chan.conn;
    691e:	681f      	ldr	r7, [r3, #0]
	/* Type can only be UUID16 or UUID128 */
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
		return BT_ATT_ERR_INVALID_PDU;
	}

	req = (void *)buf->data;
    6920:	68b3      	ldr	r3, [r6, #8]

	start_handle = sys_le16_to_cpu(req->start_handle);
	end_handle = sys_le16_to_cpu(req->end_handle);
	net_buf_pull(buf, sizeof(*req));
    6922:	3008      	adds	r0, #8
		return BT_ATT_ERR_INVALID_PDU;
	}

	req = (void *)buf->data;

	start_handle = sys_le16_to_cpu(req->start_handle);
    6924:	785c      	ldrb	r4, [r3, #1]
    6926:	781a      	ldrb	r2, [r3, #0]
    6928:	0224      	lsls	r4, r4, #8
    692a:	4314      	orrs	r4, r2
	end_handle = sys_le16_to_cpu(req->end_handle);
    692c:	789a      	ldrb	r2, [r3, #2]
    692e:	78db      	ldrb	r3, [r3, #3]
	net_buf_pull(buf, sizeof(*req));

	if (!uuid_create(&u.uuid, buf)) {
		return BT_ATT_ERR_UNLIKELY;
    6930:	250e      	movs	r5, #14
	}

	req = (void *)buf->data;

	start_handle = sys_le16_to_cpu(req->start_handle);
	end_handle = sys_le16_to_cpu(req->end_handle);
    6932:	021b      	lsls	r3, r3, #8
    6934:	4313      	orrs	r3, r2
    6936:	9300      	str	r3, [sp, #0]
	net_buf_pull(buf, sizeof(*req));
    6938:	f00c fe65 	bl	13606 <net_buf_simple_pull>

	if (!uuid_create(&u.uuid, buf)) {
    693c:	0031      	movs	r1, r6
    693e:	a803      	add	r0, sp, #12
    6940:	f7ff f89a 	bl	5a78 <uuid_create>
    6944:	2800      	cmp	r0, #0
    6946:	d041      	beq.n	69cc <att_read_type_req+0xc8>
}

static bool range_is_valid(u16_t start, u16_t end, u16_t *err)
{
	/* Handle 0 is invalid */
	if (!start || !end) {
    6948:	2c00      	cmp	r4, #0
    694a:	d006      	beq.n	695a <att_read_type_req+0x56>
    694c:	9b00      	ldr	r3, [sp, #0]
    694e:	2b00      	cmp	r3, #0
    6950:	d002      	beq.n	6958 <att_read_type_req+0x54>
		}
		return false;
	}

	/* Check if range is valid */
	if (start > end) {
    6952:	429c      	cmp	r4, r3
    6954:	d801      	bhi.n	695a <att_read_type_req+0x56>
    6956:	e008      	b.n	696a <att_read_type_req+0x66>
static bool range_is_valid(u16_t start, u16_t end, u16_t *err)
{
	/* Handle 0 is invalid */
	if (!start || !end) {
		if (err) {
			*err = 0;
    6958:	9c00      	ldr	r4, [sp, #0]
    695a:	2301      	movs	r3, #1
    695c:	0022      	movs	r2, r4
    695e:	2108      	movs	r1, #8
    6960:	0038      	movs	r0, r7
    6962:	f7ff fc39 	bl	61d8 <send_err_rsp.part.9>
	       start_handle, end_handle, bt_uuid_str(&u.uuid));

	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
		send_err_rsp(conn, BT_ATT_OP_READ_TYPE_REQ, err_handle,
			     BT_ATT_ERR_INVALID_HANDLE);
		return 0;
    6966:	2500      	movs	r5, #0
    6968:	e030      	b.n	69cc <att_read_type_req+0xc8>
}

static u8_t att_read_type_rsp(struct bt_att *att, struct bt_uuid *uuid,
			      u16_t start_handle, u16_t end_handle)
{
	struct bt_conn *conn = att->chan.chan.conn;
    696a:	9b01      	ldr	r3, [sp, #4]
	struct read_type_data data;

	memset(&data, 0, sizeof(data));
    696c:	ae08      	add	r6, sp, #32
}

static u8_t att_read_type_rsp(struct bt_att *att, struct bt_uuid *uuid,
			      u16_t start_handle, u16_t end_handle)
{
	struct bt_conn *conn = att->chan.chan.conn;
    696e:	681f      	ldr	r7, [r3, #0]
	struct read_type_data data;

	memset(&data, 0, sizeof(data));
    6970:	2218      	movs	r2, #24
    6972:	2100      	movs	r1, #0
    6974:	0030      	movs	r0, r6
    6976:	f7fa fa0a 	bl	d8e <memset>

	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
    697a:	2201      	movs	r2, #1
    697c:	2109      	movs	r1, #9
    697e:	0038      	movs	r0, r7
    6980:	f7ff fbb2 	bl	60e8 <bt_att_create_pdu>
    6984:	60b0      	str	r0, [r6, #8]
				     sizeof(*data.rsp));
	if (!data.buf) {
    6986:	2800      	cmp	r0, #0
    6988:	d020      	beq.n	69cc <att_read_type_req+0xc8>
		return BT_ATT_ERR_UNLIKELY;
	}

	data.att = att;
    698a:	9b01      	ldr	r3, [sp, #4]
	data.uuid = uuid;
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    698c:	2101      	movs	r1, #1
				     sizeof(*data.rsp));
	if (!data.buf) {
		return BT_ATT_ERR_UNLIKELY;
	}

	data.att = att;
    698e:	9308      	str	r3, [sp, #32]
	data.uuid = uuid;
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    6990:	3008      	adds	r0, #8
	if (!data.buf) {
		return BT_ATT_ERR_UNLIKELY;
	}

	data.att = att;
	data.uuid = uuid;
    6992:	ab03      	add	r3, sp, #12
    6994:	6073      	str	r3, [r6, #4]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    6996:	f00c fe15 	bl	135c4 <net_buf_simple_add>
	data.rsp->len = 0;
    699a:	2300      	movs	r3, #0
		return BT_ATT_ERR_UNLIKELY;
	}

	data.att = att;
	data.uuid = uuid;
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    699c:	60f0      	str	r0, [r6, #12]
	data.rsp->len = 0;
    699e:	7003      	strb	r3, [r0, #0]

	/* Pre-set error if no attr will be found in handle */
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    69a0:	230a      	movs	r3, #10

	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    69a2:	4a0c      	ldr	r2, [pc, #48]	; (69d4 <att_read_type_req+0xd0>)
	data.uuid = uuid;
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
	data.rsp->len = 0;

	/* Pre-set error if no attr will be found in handle */
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    69a4:	7533      	strb	r3, [r6, #20]

	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    69a6:	9900      	ldr	r1, [sp, #0]
    69a8:	0033      	movs	r3, r6
    69aa:	0020      	movs	r0, r4
    69ac:	f000 fc18 	bl	71e0 <bt_gatt_foreach_attr>

	if (data.err) {
    69b0:	7d35      	ldrb	r5, [r6, #20]
    69b2:	2d00      	cmp	r5, #0
    69b4:	d004      	beq.n	69c0 <att_read_type_req+0xbc>
		net_buf_unref(data.buf);
    69b6:	68b0      	ldr	r0, [r6, #8]
    69b8:	f00c fde2 	bl	13580 <net_buf_unref>
    69bc:	7d33      	ldrb	r3, [r6, #20]
    69be:	e7cd      	b.n	695c <att_read_type_req+0x58>
		send_err_rsp(conn, BT_ATT_OP_READ_TYPE_REQ, start_handle,
			     data.err);
		return 0;
	}

	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    69c0:	4b05      	ldr	r3, [pc, #20]	; (69d8 <att_read_type_req+0xd4>)
    69c2:	68b2      	ldr	r2, [r6, #8]
    69c4:	2104      	movs	r1, #4
    69c6:	0038      	movs	r0, r7
    69c8:	f7fe fcb6 	bl	5338 <bt_l2cap_send_cb>
			     BT_ATT_ERR_INVALID_HANDLE);
		return 0;
	}

	return att_read_type_rsp(att, &u.uuid, start_handle, end_handle);
}
    69cc:	0028      	movs	r0, r5
    69ce:	b00f      	add	sp, #60	; 0x3c
    69d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    69d2:	46c0      	nop			; (mov r8, r8)
    69d4:	0000598b 	.word	0x0000598b
    69d8:	00005f55 	.word	0x00005f55

000069dc <att_find_type_req>:

	return 0;
}

static u8_t att_find_type_req(struct bt_att *att, struct net_buf *buf)
{
    69dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    69de:	000d      	movs	r5, r1
	struct bt_conn *conn = att->chan.chan.conn;
    69e0:	6803      	ldr	r3, [r0, #0]

	return 0;
}

static u8_t att_find_type_req(struct bt_att *att, struct net_buf *buf)
{
    69e2:	0007      	movs	r7, r0
	req = (void *)buf->data;

	start_handle = sys_le16_to_cpu(req->start_handle);
	end_handle = sys_le16_to_cpu(req->end_handle);
	type = sys_le16_to_cpu(req->type);
	value = net_buf_pull(buf, sizeof(*req));
    69e4:	0028      	movs	r0, r5

	return 0;
}

static u8_t att_find_type_req(struct bt_att *att, struct net_buf *buf)
{
    69e6:	b08b      	sub	sp, #44	; 0x2c
	struct bt_conn *conn = att->chan.chan.conn;
    69e8:	9301      	str	r3, [sp, #4]
	struct bt_att_find_type_req *req;
	u16_t start_handle, end_handle, err_handle, type;
	u8_t *value;

	req = (void *)buf->data;
    69ea:	688b      	ldr	r3, [r1, #8]

	start_handle = sys_le16_to_cpu(req->start_handle);
	end_handle = sys_le16_to_cpu(req->end_handle);
	type = sys_le16_to_cpu(req->type);
	value = net_buf_pull(buf, sizeof(*req));
    69ec:	3008      	adds	r0, #8
	u16_t start_handle, end_handle, err_handle, type;
	u8_t *value;

	req = (void *)buf->data;

	start_handle = sys_le16_to_cpu(req->start_handle);
    69ee:	785c      	ldrb	r4, [r3, #1]
    69f0:	781a      	ldrb	r2, [r3, #0]
    69f2:	0224      	lsls	r4, r4, #8
    69f4:	4314      	orrs	r4, r2
	end_handle = sys_le16_to_cpu(req->end_handle);
    69f6:	78da      	ldrb	r2, [r3, #3]
    69f8:	7899      	ldrb	r1, [r3, #2]
    69fa:	0212      	lsls	r2, r2, #8
    69fc:	430a      	orrs	r2, r1
    69fe:	9200      	str	r2, [sp, #0]
	type = sys_le16_to_cpu(req->type);
    6a00:	795e      	ldrb	r6, [r3, #5]
    6a02:	791a      	ldrb	r2, [r3, #4]
    6a04:	0236      	lsls	r6, r6, #8
	value = net_buf_pull(buf, sizeof(*req));
    6a06:	2106      	movs	r1, #6

	req = (void *)buf->data;

	start_handle = sys_le16_to_cpu(req->start_handle);
	end_handle = sys_le16_to_cpu(req->end_handle);
	type = sys_le16_to_cpu(req->type);
    6a08:	4316      	orrs	r6, r2
	value = net_buf_pull(buf, sizeof(*req));
    6a0a:	f00c fdfc 	bl	13606 <net_buf_simple_pull>
    6a0e:	9002      	str	r0, [sp, #8]
}

static bool range_is_valid(u16_t start, u16_t end, u16_t *err)
{
	/* Handle 0 is invalid */
	if (!start || !end) {
    6a10:	2c00      	cmp	r4, #0
    6a12:	d006      	beq.n	6a22 <att_find_type_req+0x46>
    6a14:	9b00      	ldr	r3, [sp, #0]
    6a16:	2b00      	cmp	r3, #0
    6a18:	d002      	beq.n	6a20 <att_find_type_req+0x44>
		}
		return false;
	}

	/* Check if range is valid */
	if (start > end) {
    6a1a:	429c      	cmp	r4, r3
    6a1c:	d801      	bhi.n	6a22 <att_find_type_req+0x46>
    6a1e:	e008      	b.n	6a32 <att_find_type_req+0x56>
static bool range_is_valid(u16_t start, u16_t end, u16_t *err)
{
	/* Handle 0 is invalid */
	if (!start || !end) {
		if (err) {
			*err = 0;
    6a20:	9c00      	ldr	r4, [sp, #0]
    6a22:	2301      	movs	r3, #1
    6a24:	0022      	movs	r2, r4
    6a26:	2106      	movs	r1, #6
    6a28:	9801      	ldr	r0, [sp, #4]
    6a2a:	f7ff fbd5 	bl	61d8 <send_err_rsp.part.9>
	 * UUID for the specific primary service.
	 */
	if (type != BT_UUID_GATT_PRIMARY_VAL) {
		send_err_rsp(conn, BT_ATT_OP_FIND_TYPE_REQ, start_handle,
			     BT_ATT_ERR_ATTRIBUTE_NOT_FOUND);
		return 0;
    6a2e:	2600      	movs	r6, #0
    6a30:	e036      	b.n	6aa0 <att_find_type_req+0xc4>
	/* The Attribute Protocol Find By Type Value Request shall be used with
	 * the Attribute Type parameter set to the UUID for "Primary Service"
	 * and the Attribute Value set to the 16-bit Bluetooth UUID or 128-bit
	 * UUID for the specific primary service.
	 */
	if (type != BT_UUID_GATT_PRIMARY_VAL) {
    6a32:	23a0      	movs	r3, #160	; 0xa0
    6a34:	019b      	lsls	r3, r3, #6
    6a36:	429e      	cmp	r6, r3
    6a38:	d001      	beq.n	6a3e <att_find_type_req+0x62>
    6a3a:	230a      	movs	r3, #10
    6a3c:	e7f2      	b.n	6a24 <att_find_type_req+0x48>
			     BT_ATT_ERR_ATTRIBUTE_NOT_FOUND);
		return 0;
	}

	return att_find_type_rsp(att, start_handle, end_handle, value,
				 buf->len);
    6a3e:	89ab      	ldrh	r3, [r5, #12]
			      u8_t value_len)
{
	struct bt_conn *conn = att->chan.chan.conn;
	struct find_type_data data;

	memset(&data, 0, sizeof(data));
    6a40:	ad05      	add	r5, sp, #20
			     BT_ATT_ERR_ATTRIBUTE_NOT_FOUND);
		return 0;
	}

	return att_find_type_rsp(att, start_handle, end_handle, value,
				 buf->len);
    6a42:	9303      	str	r3, [sp, #12]

static u8_t att_find_type_rsp(struct bt_att *att, u16_t start_handle,
			      u16_t end_handle, const void *value,
			      u8_t value_len)
{
	struct bt_conn *conn = att->chan.chan.conn;
    6a44:	683b      	ldr	r3, [r7, #0]
	struct find_type_data data;

	memset(&data, 0, sizeof(data));
    6a46:	2214      	movs	r2, #20
    6a48:	2100      	movs	r1, #0
    6a4a:	0028      	movs	r0, r5

static u8_t att_find_type_rsp(struct bt_att *att, u16_t start_handle,
			      u16_t end_handle, const void *value,
			      u8_t value_len)
{
	struct bt_conn *conn = att->chan.chan.conn;
    6a4c:	9301      	str	r3, [sp, #4]
	struct find_type_data data;

	memset(&data, 0, sizeof(data));
    6a4e:	f7fa f99e 	bl	d8e <memset>

	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
    6a52:	2200      	movs	r2, #0
    6a54:	2107      	movs	r1, #7
    6a56:	9801      	ldr	r0, [sp, #4]
    6a58:	f7ff fb46 	bl	60e8 <bt_att_create_pdu>
	if (!data.buf) {
		return BT_ATT_ERR_UNLIKELY;
    6a5c:	260e      	movs	r6, #14
	struct bt_conn *conn = att->chan.chan.conn;
	struct find_type_data data;

	memset(&data, 0, sizeof(data));

	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
    6a5e:	6068      	str	r0, [r5, #4]
	if (!data.buf) {
    6a60:	2800      	cmp	r0, #0
    6a62:	d01d      	beq.n	6aa0 <att_find_type_req+0xc4>
		return BT_ATT_ERR_UNLIKELY;
	}

	data.att = att;
	data.group = NULL;
	data.value = value;
    6a64:	9b02      	ldr	r3, [sp, #8]
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
	if (!data.buf) {
		return BT_ATT_ERR_UNLIKELY;
	}

	data.att = att;
    6a66:	9705      	str	r7, [sp, #20]
	data.group = NULL;
	data.value = value;
    6a68:	60eb      	str	r3, [r5, #12]
	data.value_len = value_len;
    6a6a:	466b      	mov	r3, sp
    6a6c:	7b1b      	ldrb	r3, [r3, #12]
	if (!data.buf) {
		return BT_ATT_ERR_UNLIKELY;
	}

	data.att = att;
	data.group = NULL;
    6a6e:	2700      	movs	r7, #0
	data.value = value;
	data.value_len = value_len;
    6a70:	742b      	strb	r3, [r5, #16]

	/* Pre-set error in case no service will be found */
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    6a72:	230a      	movs	r3, #10

	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    6a74:	4a0c      	ldr	r2, [pc, #48]	; (6aa8 <att_find_type_req+0xcc>)
	data.group = NULL;
	data.value = value;
	data.value_len = value_len;

	/* Pre-set error in case no service will be found */
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    6a76:	746b      	strb	r3, [r5, #17]

	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    6a78:	9900      	ldr	r1, [sp, #0]
    6a7a:	002b      	movs	r3, r5
    6a7c:	0020      	movs	r0, r4
	if (!data.buf) {
		return BT_ATT_ERR_UNLIKELY;
	}

	data.att = att;
	data.group = NULL;
    6a7e:	60af      	str	r7, [r5, #8]
	data.value_len = value_len;

	/* Pre-set error in case no service will be found */
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;

	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    6a80:	f000 fbae 	bl	71e0 <bt_gatt_foreach_attr>

	/* If error has not been cleared, no service has been found */
	if (data.err) {
    6a84:	7c6e      	ldrb	r6, [r5, #17]
    6a86:	42be      	cmp	r6, r7
    6a88:	d004      	beq.n	6a94 <att_find_type_req+0xb8>
		net_buf_unref(data.buf);
    6a8a:	6868      	ldr	r0, [r5, #4]
    6a8c:	f00c fd78 	bl	13580 <net_buf_unref>
    6a90:	7c6b      	ldrb	r3, [r5, #17]
    6a92:	e7c7      	b.n	6a24 <att_find_type_req+0x48>
		send_err_rsp(conn, BT_ATT_OP_FIND_TYPE_REQ, start_handle,
			     data.err);
		return 0;
	}

	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    6a94:	4b05      	ldr	r3, [pc, #20]	; (6aac <att_find_type_req+0xd0>)
    6a96:	686a      	ldr	r2, [r5, #4]
    6a98:	2104      	movs	r1, #4
    6a9a:	9801      	ldr	r0, [sp, #4]
    6a9c:	f7fe fc4c 	bl	5338 <bt_l2cap_send_cb>
		return 0;
	}

	return att_find_type_rsp(att, start_handle, end_handle, value,
				 buf->len);
}
    6aa0:	0030      	movs	r0, r6
    6aa2:	b00b      	add	sp, #44	; 0x2c
    6aa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6aa6:	46c0      	nop			; (mov r8, r8)
    6aa8:	00005851 	.word	0x00005851
    6aac:	00005f55 	.word	0x00005f55

00006ab0 <att_find_info_req>:

	return 0;
}

static u8_t att_find_info_req(struct bt_att *att, struct net_buf *buf)
{
    6ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_conn *conn = att->chan.chan.conn;
	struct bt_att_find_info_req *req;
	u16_t start_handle, end_handle, err_handle;

	req = (void *)buf->data;
    6ab2:	688b      	ldr	r3, [r1, #8]

	return 0;
}

static u8_t att_find_info_req(struct bt_att *att, struct net_buf *buf)
{
    6ab4:	b085      	sub	sp, #20
	struct bt_att_find_info_req *req;
	u16_t start_handle, end_handle, err_handle;

	req = (void *)buf->data;

	start_handle = sys_le16_to_cpu(req->start_handle);
    6ab6:	785c      	ldrb	r4, [r3, #1]
    6ab8:	781a      	ldrb	r2, [r3, #0]
    6aba:	0224      	lsls	r4, r4, #8

	return 0;
}

static u8_t att_find_info_req(struct bt_att *att, struct net_buf *buf)
{
    6abc:	0007      	movs	r7, r0
	struct bt_conn *conn = att->chan.chan.conn;
    6abe:	6806      	ldr	r6, [r0, #0]
	struct bt_att_find_info_req *req;
	u16_t start_handle, end_handle, err_handle;

	req = (void *)buf->data;

	start_handle = sys_le16_to_cpu(req->start_handle);
    6ac0:	4314      	orrs	r4, r2
}

static bool range_is_valid(u16_t start, u16_t end, u16_t *err)
{
	/* Handle 0 is invalid */
	if (!start || !end) {
    6ac2:	d008      	beq.n	6ad6 <att_find_info_req+0x26>
	u16_t start_handle, end_handle, err_handle;

	req = (void *)buf->data;

	start_handle = sys_le16_to_cpu(req->start_handle);
	end_handle = sys_le16_to_cpu(req->end_handle);
    6ac4:	78dd      	ldrb	r5, [r3, #3]
    6ac6:	789a      	ldrb	r2, [r3, #2]
    6ac8:	022d      	lsls	r5, r5, #8
    6aca:	4315      	orrs	r5, r2
}

static bool range_is_valid(u16_t start, u16_t end, u16_t *err)
{
	/* Handle 0 is invalid */
	if (!start || !end) {
    6acc:	d002      	beq.n	6ad4 <att_find_info_req+0x24>
		}
		return false;
	}

	/* Check if range is valid */
	if (start > end) {
    6ace:	42ac      	cmp	r4, r5
    6ad0:	d801      	bhi.n	6ad6 <att_find_info_req+0x26>
    6ad2:	e008      	b.n	6ae6 <att_find_info_req+0x36>
static bool range_is_valid(u16_t start, u16_t end, u16_t *err)
{
	/* Handle 0 is invalid */
	if (!start || !end) {
		if (err) {
			*err = 0;
    6ad4:	002c      	movs	r4, r5
    6ad6:	2301      	movs	r3, #1
    6ad8:	0022      	movs	r2, r4
    6ada:	2104      	movs	r1, #4
    6adc:	0030      	movs	r0, r6
    6ade:	f7ff fb7b 	bl	61d8 <send_err_rsp.part.9>
	       end_handle);

	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
		send_err_rsp(conn, BT_ATT_OP_FIND_INFO_REQ, err_handle,
			     BT_ATT_ERR_INVALID_HANDLE);
		return 0;
    6ae2:	2000      	movs	r0, #0
    6ae4:	e024      	b.n	6b30 <att_find_info_req+0x80>
			      u16_t end_handle)
{
	struct bt_conn *conn = att->chan.chan.conn;
	struct find_info_data data;

	memset(&data, 0, sizeof(data));
    6ae6:	2210      	movs	r2, #16
    6ae8:	2100      	movs	r1, #0
    6aea:	4668      	mov	r0, sp
    6aec:	f7fa f94f 	bl	d8e <memset>

	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
    6af0:	2200      	movs	r2, #0
    6af2:	2105      	movs	r1, #5
    6af4:	0030      	movs	r0, r6
    6af6:	f7ff faf7 	bl	60e8 <bt_att_create_pdu>
    6afa:	0003      	movs	r3, r0
    6afc:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
		return BT_ATT_ERR_UNLIKELY;
    6afe:	200e      	movs	r0, #14
	struct find_info_data data;

	memset(&data, 0, sizeof(data));

	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
	if (!data.buf) {
    6b00:	2b00      	cmp	r3, #0
    6b02:	d015      	beq.n	6b30 <att_find_info_req+0x80>
		return BT_ATT_ERR_UNLIKELY;
	}

	data.att = att;
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    6b04:	0029      	movs	r1, r5
    6b06:	466b      	mov	r3, sp
    6b08:	4a0a      	ldr	r2, [pc, #40]	; (6b34 <att_find_info_req+0x84>)
    6b0a:	0020      	movs	r0, r4
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
	if (!data.buf) {
		return BT_ATT_ERR_UNLIKELY;
	}

	data.att = att;
    6b0c:	9700      	str	r7, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    6b0e:	f000 fb67 	bl	71e0 <bt_gatt_foreach_attr>

	if (!data.rsp) {
    6b12:	9d02      	ldr	r5, [sp, #8]
    6b14:	2d00      	cmp	r5, #0
    6b16:	d104      	bne.n	6b22 <att_find_info_req+0x72>
		net_buf_unref(data.buf);
    6b18:	9801      	ldr	r0, [sp, #4]
    6b1a:	f00c fd31 	bl	13580 <net_buf_unref>
    6b1e:	230a      	movs	r3, #10
    6b20:	e7da      	b.n	6ad8 <att_find_info_req+0x28>
		send_err_rsp(conn, BT_ATT_OP_FIND_INFO_REQ, start_handle,
			     BT_ATT_ERR_ATTRIBUTE_NOT_FOUND);
		return 0;
	}

	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    6b22:	4b05      	ldr	r3, [pc, #20]	; (6b38 <att_find_info_req+0x88>)
    6b24:	9a01      	ldr	r2, [sp, #4]
    6b26:	2104      	movs	r1, #4
    6b28:	0030      	movs	r0, r6
    6b2a:	f7fe fc05 	bl	5338 <bt_l2cap_send_cb>
    6b2e:	e7d8      	b.n	6ae2 <att_find_info_req+0x32>
			     BT_ATT_ERR_INVALID_HANDLE);
		return 0;
	}

	return att_find_info_rsp(att, start_handle, end_handle);
}
    6b30:	b005      	add	sp, #20
    6b32:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6b34:	000056b3 	.word	0x000056b3
    6b38:	00005f55 	.word	0x00005f55

00006b3c <bt_att_init>:

	return -ENOMEM;
}

void bt_att_init(void)
{
    6b3c:	b510      	push	{r4, lr}
	static struct bt_l2cap_fixed_chan chan = {
		.cid		= BT_L2CAP_CID_ATT,
		.accept		= bt_att_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
    6b3e:	4803      	ldr	r0, [pc, #12]	; (6b4c <bt_att_init+0x10>)
    6b40:	f7fe fb20 	bl	5184 <bt_l2cap_le_fixed_chan_register>

	bt_gatt_init();
    6b44:	f000 faa8 	bl	7098 <bt_gatt_init>
}
    6b48:	bd10      	pop	{r4, pc}
    6b4a:	46c0      	nop			; (mov r8, r8)
    6b4c:	20000638 	.word	0x20000638

00006b50 <bt_att_req_send>:

	return 0;
}

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
    6b50:	b510      	push	{r4, lr}
    6b52:	000c      	movs	r4, r1
	struct bt_att *att;

	BT_DBG("conn %p req %p", conn, req);

	if (!conn || !req) {
    6b54:	2800      	cmp	r0, #0
    6b56:	d01c      	beq.n	6b92 <bt_att_req_send+0x42>
    6b58:	2900      	cmp	r1, #0
    6b5a:	d01a      	beq.n	6b92 <bt_att_req_send+0x42>
		return -EINVAL;
	}

	att = att_chan_get(conn);
    6b5c:	f7ff f9b4 	bl	5ec8 <att_chan_get>
	if (!att) {
    6b60:	2800      	cmp	r0, #0
    6b62:	d018      	beq.n	6b96 <bt_att_req_send+0x46>
		return -ENOTCONN;
	}

	/* Check if there is a request outstanding */
	if (att->req) {
    6b64:	0003      	movs	r3, r0
    6b66:	3394      	adds	r3, #148	; 0x94
    6b68:	681b      	ldr	r3, [r3, #0]
    6b6a:	2b00      	cmp	r3, #0
    6b6c:	d00d      	beq.n	6b8a <bt_att_req_send+0x3a>
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node)
{
	node->next = NULL;

	if (!list->tail) {
    6b6e:	0002      	movs	r2, r0
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node)
{
	node->next = NULL;
    6b70:	2300      	movs	r3, #0

	if (!list->tail) {
    6b72:	3298      	adds	r2, #152	; 0x98
    6b74:	6850      	ldr	r0, [r2, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node)
{
	node->next = NULL;
    6b76:	6023      	str	r3, [r4, #0]

	if (!list->tail) {
    6b78:	4298      	cmp	r0, r3
    6b7a:	d102      	bne.n	6b82 <bt_att_req_send+0x32>
		list->tail = node;
    6b7c:	6054      	str	r4, [r2, #4]
		list->head = node;
    6b7e:	6014      	str	r4, [r2, #0]
    6b80:	e00b      	b.n	6b9a <bt_att_req_send+0x4a>
	} else {
		list->tail->next = node;
    6b82:	6004      	str	r4, [r0, #0]
		list->tail = node;
    6b84:	6054      	str	r4, [r2, #4]
		/* Queue the request to be send later */
		sys_slist_append(&att->reqs, &req->node);
		return 0;
    6b86:	0018      	movs	r0, r3
    6b88:	e007      	b.n	6b9a <bt_att_req_send+0x4a>
	}

	return att_send_req(att, req);
    6b8a:	0021      	movs	r1, r4
    6b8c:	f7fe ffb4 	bl	5af8 <att_send_req>
    6b90:	e003      	b.n	6b9a <bt_att_req_send+0x4a>
	struct bt_att *att;

	BT_DBG("conn %p req %p", conn, req);

	if (!conn || !req) {
		return -EINVAL;
    6b92:	2016      	movs	r0, #22
    6b94:	e000      	b.n	6b98 <bt_att_req_send+0x48>
	}

	att = att_chan_get(conn);
	if (!att) {
		return -ENOTCONN;
    6b96:	2039      	movs	r0, #57	; 0x39
    6b98:	4240      	negs	r0, r0
		sys_slist_append(&att->reqs, &req->node);
		return 0;
	}

	return att_send_req(att, req);
}
    6b9a:	bd10      	pop	{r4, pc}

00006b9c <sc_ccc_cfg_changed>:

static void sc_ccc_cfg_changed(const struct bt_gatt_attr *attr,
			       u16_t value)
{
	BT_DBG("value 0x%04x", value);
}
    6b9c:	4770      	bx	lr

00006b9e <find_next>:

static u8_t find_next(const struct bt_gatt_attr *attr, void *user_data)
{
	struct bt_gatt_attr **next = user_data;

	*next = (struct bt_gatt_attr *)attr;
    6b9e:	6008      	str	r0, [r1, #0]

	return BT_GATT_ITER_STOP;
}
    6ba0:	2000      	movs	r0, #0
    6ba2:	4770      	bx	lr

00006ba4 <gatt_ccc_changed>:
				 sizeof(value));
}

static void gatt_ccc_changed(const struct bt_gatt_attr *attr,
			     struct _bt_gatt_ccc *ccc)
{
    6ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int i;
	u16_t value = 0x0000;
    6ba6:	2300      	movs	r3, #0

	for (i = 0; i < ccc->cfg_len; i++) {
		if (ccc->cfg[i].value > value) {
    6ba8:	260a      	movs	r6, #10
			     struct _bt_gatt_ccc *ccc)
{
	int i;
	u16_t value = 0x0000;

	for (i = 0; i < ccc->cfg_len; i++) {
    6baa:	001a      	movs	r2, r3
    6bac:	684d      	ldr	r5, [r1, #4]
    6bae:	42aa      	cmp	r2, r5
    6bb0:	d00b      	beq.n	6bca <gatt_ccc_changed+0x26>
		if (ccc->cfg[i].value > value) {
    6bb2:	0034      	movs	r4, r6
    6bb4:	4354      	muls	r4, r2
    6bb6:	680f      	ldr	r7, [r1, #0]
    6bb8:	193c      	adds	r4, r7, r4
    6bba:	8927      	ldrh	r7, [r4, #8]
    6bbc:	1c1c      	adds	r4, r3, #0
    6bbe:	42bb      	cmp	r3, r7
    6bc0:	d200      	bcs.n	6bc4 <gatt_ccc_changed+0x20>
    6bc2:	1c3c      	adds	r4, r7, #0
    6bc4:	b2a3      	uxth	r3, r4
			     struct _bt_gatt_ccc *ccc)
{
	int i;
	u16_t value = 0x0000;

	for (i = 0; i < ccc->cfg_len; i++) {
    6bc6:	3201      	adds	r2, #1
    6bc8:	e7f1      	b.n	6bae <gatt_ccc_changed+0xa>
		}
	}

	BT_DBG("ccc %p value 0x%04x", ccc, value);

	if (value != ccc->value) {
    6bca:	890a      	ldrh	r2, [r1, #8]
    6bcc:	429a      	cmp	r2, r3
    6bce:	d003      	beq.n	6bd8 <gatt_ccc_changed+0x34>
		ccc->value = value;
    6bd0:	810b      	strh	r3, [r1, #8]
		ccc->cfg_changed(attr, value);
    6bd2:	68ca      	ldr	r2, [r1, #12]
    6bd4:	0019      	movs	r1, r3
    6bd6:	4790      	blx	r2
	}
}
    6bd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00006bda <gatt_indicate_rsp>:
	return 0;
}

static void gatt_indicate_rsp(struct bt_conn *conn, u8_t err,
			      const void *pdu, u16_t length, void *user_data)
{
    6bda:	b510      	push	{r4, lr}
    6bdc:	9b02      	ldr	r3, [sp, #8]
    6bde:	000a      	movs	r2, r1
	struct bt_gatt_indicate_params *params = user_data;

	params->func(conn, params->attr, err);
    6be0:	69dc      	ldr	r4, [r3, #28]
    6be2:	6999      	ldr	r1, [r3, #24]
    6be4:	47a0      	blx	r4
}
    6be6:	bd10      	pop	{r4, pc}

00006be8 <sc_indicate_rsp>:

static struct k_sem sc_sem = K_SEM_INITIALIZER(sc_sem, 1, 1);

static void sc_indicate_rsp(struct bt_conn *conn,
			    const struct bt_gatt_attr *attr, u8_t err)
{
    6be8:	b510      	push	{r4, lr}
	BT_DBG("err 0x%02x", err);

	k_sem_give(&sc_sem);
    6bea:	4802      	ldr	r0, [pc, #8]	; (6bf4 <sc_indicate_rsp+0xc>)
    6bec:	f00d fe76 	bl	148dc <k_sem_give>
}
    6bf0:	bd10      	pop	{r4, pc}
    6bf2:	46c0      	nop			; (mov r8, r8)
    6bf4:	2000074c 	.word	0x2000074c

00006bf8 <bt_gatt_attr_write_ccc>:
}

ssize_t bt_gatt_attr_write_ccc(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, const void *buf,
			       u16_t len, u16_t offset, u8_t flags)
{
    6bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
    6bfa:	b087      	sub	sp, #28
    6bfc:	9105      	str	r1, [sp, #20]
    6bfe:	a90c      	add	r1, sp, #48	; 0x30
    6c00:	9004      	str	r0, [sp, #16]
    6c02:	8809      	ldrh	r1, [r1, #0]
	struct _bt_gatt_ccc *ccc = attr->user_data;
    6c04:	9805      	ldr	r0, [sp, #20]
    6c06:	68c5      	ldr	r5, [r0, #12]
	u16_t value;
	size_t i;

	if (offset > sizeof(u16_t)) {
    6c08:	2902      	cmp	r1, #2
    6c0a:	d859      	bhi.n	6cc0 <bt_gatt_attr_write_ccc+0xc8>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
	}

	if (offset + len > sizeof(u16_t)) {
    6c0c:	18c9      	adds	r1, r1, r3
    6c0e:	001e      	movs	r6, r3
    6c10:	2902      	cmp	r1, #2
    6c12:	dc57      	bgt.n	6cc4 <bt_gatt_attr_write_ccc+0xcc>
 *
 *  @return 16-bit integer in host endianness.
 */
static inline u16_t sys_get_le16(const u8_t src[2])
{
	return ((u16_t)src[1] << 8) | src[0];
    6c14:	7853      	ldrb	r3, [r2, #1]
    6c16:	7812      	ldrb	r2, [r2, #0]
    6c18:	021b      	lsls	r3, r3, #8
    6c1a:	431a      	orrs	r2, r3
    6c1c:	0017      	movs	r7, r2
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
	}

	value = sys_get_le16(buf);

	for (i = 0; i < ccc->cfg_len; i++) {
    6c1e:	2400      	movs	r4, #0
    6c20:	686b      	ldr	r3, [r5, #4]
    6c22:	429c      	cmp	r4, r3
    6c24:	d209      	bcs.n	6c3a <bt_gatt_attr_write_ccc+0x42>
		/* Check for existing configuration */
		if (!bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    6c26:	210a      	movs	r1, #10
    6c28:	4361      	muls	r1, r4
    6c2a:	682b      	ldr	r3, [r5, #0]
    6c2c:	9804      	ldr	r0, [sp, #16]
    6c2e:	1859      	adds	r1, r3, r1
    6c30:	3101      	adds	r1, #1
    6c32:	f7fe f879 	bl	4d28 <bt_conn_addr_le_cmp>
    6c36:	2800      	cmp	r0, #0
    6c38:	d105      	bne.n	6c46 <bt_gatt_attr_write_ccc+0x4e>
			break;
		}
	}

	if (i == ccc->cfg_len) {
    6c3a:	686b      	ldr	r3, [r5, #4]
    6c3c:	429c      	cmp	r4, r3
    6c3e:	d12c      	bne.n	6c9a <bt_gatt_attr_write_ccc+0xa2>
    6c40:	2400      	movs	r4, #0
    6c42:	220a      	movs	r2, #10
    6c44:	e00b      	b.n	6c5e <bt_gatt_attr_write_ccc+0x66>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
	}

	value = sys_get_le16(buf);

	for (i = 0; i < ccc->cfg_len; i++) {
    6c46:	3401      	adds	r4, #1
    6c48:	e7ea      	b.n	6c20 <bt_gatt_attr_write_ccc+0x28>
    6c4a:	0011      	movs	r1, r2
    6c4c:	4361      	muls	r1, r4
    6c4e:	9103      	str	r1, [sp, #12]
	}

	if (i == ccc->cfg_len) {
		for (i = 0; i < ccc->cfg_len; i++) {
			/* Check for unused configuration */
			if (ccc->cfg[i].valid) {
    6c50:	9803      	ldr	r0, [sp, #12]
    6c52:	6829      	ldr	r1, [r5, #0]
    6c54:	1808      	adds	r0, r1, r0
    6c56:	7801      	ldrb	r1, [r0, #0]
    6c58:	2900      	cmp	r1, #0
    6c5a:	d003      	beq.n	6c64 <bt_gatt_attr_write_ccc+0x6c>
			break;
		}
	}

	if (i == ccc->cfg_len) {
		for (i = 0; i < ccc->cfg_len; i++) {
    6c5c:	3401      	adds	r4, #1
    6c5e:	429c      	cmp	r4, r3
    6c60:	d1f3      	bne.n	6c4a <bt_gatt_attr_write_ccc+0x52>
    6c62:	e00e      	b.n	6c82 <bt_gatt_attr_write_ccc+0x8a>
			/* Check for unused configuration */
			if (ccc->cfg[i].valid) {
				continue;
			}

			bt_addr_le_copy(&ccc->cfg[i].peer, &conn->le.dst);
    6c64:	9904      	ldr	r1, [sp, #16]
    6c66:	3001      	adds	r0, #1
    6c68:	3154      	adds	r1, #84	; 0x54
	memcpy(dst, src, sizeof(*dst));
}

static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    6c6a:	2207      	movs	r2, #7
    6c6c:	f7fa f865 	bl	d3a <memcpy>

			if (value) {
    6c70:	2f00      	cmp	r7, #0
    6c72:	d003      	beq.n	6c7c <bt_gatt_attr_write_ccc+0x84>
				ccc->cfg[i].valid = true;
    6c74:	2301      	movs	r3, #1
    6c76:	682a      	ldr	r2, [r5, #0]
    6c78:	9903      	ldr	r1, [sp, #12]
    6c7a:	5453      	strb	r3, [r2, r1]
			}

			break;
		}

		if (i == ccc->cfg_len) {
    6c7c:	686b      	ldr	r3, [r5, #4]
    6c7e:	429c      	cmp	r4, r3
    6c80:	d111      	bne.n	6ca6 <bt_gatt_attr_write_ccc+0xae>
			BT_WARN("No space to store CCC cfg");
    6c82:	4b13      	ldr	r3, [pc, #76]	; (6cd0 <bt_gatt_attr_write_ccc+0xd8>)
    6c84:	4a13      	ldr	r2, [pc, #76]	; (6cd4 <bt_gatt_attr_write_ccc+0xdc>)
    6c86:	9301      	str	r3, [sp, #4]
    6c88:	4b13      	ldr	r3, [pc, #76]	; (6cd8 <bt_gatt_attr_write_ccc+0xe0>)
    6c8a:	4914      	ldr	r1, [pc, #80]	; (6cdc <bt_gatt_attr_write_ccc+0xe4>)
    6c8c:	9300      	str	r3, [sp, #0]
    6c8e:	4814      	ldr	r0, [pc, #80]	; (6ce0 <bt_gatt_attr_write_ccc+0xe8>)
    6c90:	4b14      	ldr	r3, [pc, #80]	; (6ce4 <bt_gatt_attr_write_ccc+0xec>)
    6c92:	f7fa fe75 	bl	1980 <printk>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    6c96:	2611      	movs	r6, #17
    6c98:	e015      	b.n	6cc6 <bt_gatt_attr_write_ccc+0xce>
		}
	} else if (!value) {
    6c9a:	2f00      	cmp	r7, #0
    6c9c:	d103      	bne.n	6ca6 <bt_gatt_attr_write_ccc+0xae>
		/* free existing configuration for default value */
		ccc->cfg[i].valid = false;
    6c9e:	230a      	movs	r3, #10
    6ca0:	4363      	muls	r3, r4
    6ca2:	682a      	ldr	r2, [r5, #0]
    6ca4:	549f      	strb	r7, [r3, r2]
	}

	ccc->cfg[i].value = value;
    6ca6:	230a      	movs	r3, #10
    6ca8:	435c      	muls	r4, r3
    6caa:	682b      	ldr	r3, [r5, #0]
    6cac:	191c      	adds	r4, r3, r4
    6cae:	8127      	strh	r7, [r4, #8]

	BT_DBG("handle 0x%04x value %u", attr->handle, ccc->cfg[i].value);

	/* Update cfg if don't match */
	if (ccc->cfg[i].value != ccc->value) {
    6cb0:	892b      	ldrh	r3, [r5, #8]
    6cb2:	42bb      	cmp	r3, r7
    6cb4:	d008      	beq.n	6cc8 <bt_gatt_attr_write_ccc+0xd0>
		gatt_ccc_changed(attr, ccc);
    6cb6:	0029      	movs	r1, r5
    6cb8:	9805      	ldr	r0, [sp, #20]
    6cba:	f7ff ff73 	bl	6ba4 <gatt_ccc_changed>
    6cbe:	e003      	b.n	6cc8 <bt_gatt_attr_write_ccc+0xd0>
	struct _bt_gatt_ccc *ccc = attr->user_data;
	u16_t value;
	size_t i;

	if (offset > sizeof(u16_t)) {
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    6cc0:	2607      	movs	r6, #7
    6cc2:	e000      	b.n	6cc6 <bt_gatt_attr_write_ccc+0xce>
	}

	if (offset + len > sizeof(u16_t)) {
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    6cc4:	260d      	movs	r6, #13
    6cc6:	4276      	negs	r6, r6
	if (ccc->cfg[i].value != ccc->value) {
		gatt_ccc_changed(attr, ccc);
	}

	return len;
}
    6cc8:	0030      	movs	r0, r6
    6cca:	b007      	add	sp, #28
    6ccc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6cce:	46c0      	nop			; (mov r8, r8)
    6cd0:	000154c4 	.word	0x000154c4
    6cd4:	000154d1 	.word	0x000154d1
    6cd8:	0001550f 	.word	0x0001550f
    6cdc:	0001548b 	.word	0x0001548b
    6ce0:	000161f1 	.word	0x000161f1
    6ce4:	00017d7b 	.word	0x00017d7b

00006ce8 <connected_cb>:
{
	return bt_att_get_mtu(conn);
}

static u8_t connected_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    6ce8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_conn *conn = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    6cea:	4b12      	ldr	r3, [pc, #72]	; (6d34 <connected_cb+0x4c>)
    6cec:	6882      	ldr	r2, [r0, #8]
{
	return bt_att_get_mtu(conn);
}

static u8_t connected_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    6cee:	0007      	movs	r7, r0
    6cf0:	9101      	str	r1, [sp, #4]
	struct bt_conn *conn = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    6cf2:	429a      	cmp	r2, r3
    6cf4:	d11c      	bne.n	6d30 <connected_cb+0x48>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
    6cf6:	68c5      	ldr	r5, [r0, #12]

	/* If already enabled skip */
	if (ccc->value) {
    6cf8:	892c      	ldrh	r4, [r5, #8]
    6cfa:	2c00      	cmp	r4, #0
    6cfc:	d118      	bne.n	6d30 <connected_cb+0x48>
		return BT_GATT_ITER_CONTINUE;
	}

	for (i = 0; i < ccc->cfg_len; i++) {
    6cfe:	686b      	ldr	r3, [r5, #4]
    6d00:	429c      	cmp	r4, r3
    6d02:	d215      	bcs.n	6d30 <connected_cb+0x48>
    6d04:	260a      	movs	r6, #10
    6d06:	4366      	muls	r6, r4
		/* Ignore configuration for different peer */
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    6d08:	682b      	ldr	r3, [r5, #0]
    6d0a:	9801      	ldr	r0, [sp, #4]
    6d0c:	1999      	adds	r1, r3, r6
    6d0e:	3101      	adds	r1, #1
    6d10:	f7fe f80a 	bl	4d28 <bt_conn_addr_le_cmp>
    6d14:	2800      	cmp	r0, #0
    6d16:	d109      	bne.n	6d2c <connected_cb+0x44>
			continue;
		}

		if (ccc->cfg[i].value) {
    6d18:	682b      	ldr	r3, [r5, #0]
    6d1a:	199e      	adds	r6, r3, r6
    6d1c:	8933      	ldrh	r3, [r6, #8]
    6d1e:	2b00      	cmp	r3, #0
    6d20:	d004      	beq.n	6d2c <connected_cb+0x44>
			gatt_ccc_changed(attr, ccc);
    6d22:	0029      	movs	r1, r5
    6d24:	0038      	movs	r0, r7
    6d26:	f7ff ff3d 	bl	6ba4 <gatt_ccc_changed>
    6d2a:	e001      	b.n	6d30 <connected_cb+0x48>
	/* If already enabled skip */
	if (ccc->value) {
		return BT_GATT_ITER_CONTINUE;
	}

	for (i = 0; i < ccc->cfg_len; i++) {
    6d2c:	3401      	adds	r4, #1
    6d2e:	e7e6      	b.n	6cfe <connected_cb+0x16>
			return BT_GATT_ITER_CONTINUE;
		}
	}

	return BT_GATT_ITER_CONTINUE;
}
    6d30:	2001      	movs	r0, #1
    6d32:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    6d34:	00006bf9 	.word	0x00006bf9

00006d38 <gatt_register>:
};

static struct bt_gatt_service gatt_svc = BT_GATT_SERVICE(gatt_attrs);

static int gatt_register(struct bt_gatt_service *svc)
{
    6d38:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    6d3a:	4a22      	ldr	r2, [pc, #136]	; (6dc4 <gatt_register+0x8c>)
	struct bt_gatt_service *last;
	u16_t handle;
	struct bt_gatt_attr *attrs = svc->attrs;
    6d3c:	6804      	ldr	r4, [r0, #0]
	u16_t count = svc->attr_count;

	if (sys_slist_is_empty(&db)) {
    6d3e:	6813      	ldr	r3, [r2, #0]
static int gatt_register(struct bt_gatt_service *svc)
{
	struct bt_gatt_service *last;
	u16_t handle;
	struct bt_gatt_attr *attrs = svc->attrs;
	u16_t count = svc->attr_count;
    6d40:	8881      	ldrh	r1, [r0, #4]

	if (sys_slist_is_empty(&db)) {
    6d42:	2b00      	cmp	r3, #0
    6d44:	d018      	beq.n	6d78 <gatt_register+0x40>
    6d46:	6853      	ldr	r3, [r2, #4]
		handle = 0;
		goto populate;
	}

	last = SYS_SLIST_PEEK_TAIL_CONTAINER(&db, last, node);
    6d48:	2b00      	cmp	r3, #0
    6d4a:	d036      	beq.n	6dba <gatt_register+0x82>
	handle = last->attrs[last->attr_count - 1].handle;
    6d4c:	3b08      	subs	r3, #8
    6d4e:	001d      	movs	r5, r3
    6d50:	682e      	ldr	r6, [r5, #0]
    6d52:	2514      	movs	r5, #20
    6d54:	889b      	ldrh	r3, [r3, #4]
    6d56:	436b      	muls	r3, r5
    6d58:	18f3      	adds	r3, r6, r3
    6d5a:	3b14      	subs	r3, #20
    6d5c:	8a1b      	ldrh	r3, [r3, #16]
    6d5e:	e00b      	b.n	6d78 <gatt_register+0x40>

populate:
	/* Populate the handles and append them to the list */
	for (; attrs && count; attrs++, count--) {
    6d60:	2900      	cmp	r1, #0
    6d62:	d01c      	beq.n	6d9e <gatt_register+0x66>
		if (!attrs->handle) {
    6d64:	8a25      	ldrh	r5, [r4, #16]
    6d66:	2d00      	cmp	r5, #0
    6d68:	d109      	bne.n	6d7e <gatt_register+0x46>
			/* Allocate handle if not set already */
			attrs->handle = ++handle;
    6d6a:	3301      	adds	r3, #1
    6d6c:	b29d      	uxth	r5, r3
    6d6e:	8225      	strh	r5, [r4, #16]
	last = SYS_SLIST_PEEK_TAIL_CONTAINER(&db, last, node);
	handle = last->attrs[last->attr_count - 1].handle;

populate:
	/* Populate the handles and append them to the list */
	for (; attrs && count; attrs++, count--) {
    6d70:	002b      	movs	r3, r5
    6d72:	3901      	subs	r1, #1
    6d74:	3414      	adds	r4, #20
    6d76:	b289      	uxth	r1, r1
    6d78:	2c00      	cmp	r4, #0
    6d7a:	d1f1      	bne.n	6d60 <gatt_register+0x28>
    6d7c:	e00f      	b.n	6d9e <gatt_register+0x66>
		if (!attrs->handle) {
			/* Allocate handle if not set already */
			attrs->handle = ++handle;
		} else if (attrs->handle > handle) {
    6d7e:	42ab      	cmp	r3, r5
    6d80:	d3f6      	bcc.n	6d70 <gatt_register+0x38>
			/* Use existing handle if valid */
			handle = attrs->handle;
		} else {
			/* Service has conflicting handles */
			BT_ERR("Unable to register handle 0x%04x",
    6d82:	4b11      	ldr	r3, [pc, #68]	; (6dc8 <gatt_register+0x90>)
    6d84:	9501      	str	r5, [sp, #4]
    6d86:	9302      	str	r3, [sp, #8]
    6d88:	4b10      	ldr	r3, [pc, #64]	; (6dcc <gatt_register+0x94>)
    6d8a:	4a11      	ldr	r2, [pc, #68]	; (6dd0 <gatt_register+0x98>)
    6d8c:	9300      	str	r3, [sp, #0]
    6d8e:	4911      	ldr	r1, [pc, #68]	; (6dd4 <gatt_register+0x9c>)
    6d90:	4b11      	ldr	r3, [pc, #68]	; (6dd8 <gatt_register+0xa0>)
    6d92:	4812      	ldr	r0, [pc, #72]	; (6ddc <gatt_register+0xa4>)
    6d94:	f7fa fdf4 	bl	1980 <printk>
			       attrs->handle);
			return -EINVAL;
    6d98:	2016      	movs	r0, #22
    6d9a:	4240      	negs	r0, r0
    6d9c:	e00f      	b.n	6dbe <gatt_register+0x86>
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node)
{
	node->next = NULL;
    6d9e:	2300      	movs	r3, #0
		BT_DBG("attr %p handle 0x%04x uuid %s perm 0x%02x",
		       attrs, attrs->handle, bt_uuid_str(attrs->uuid),
		       attrs->perm);
	}

	sys_slist_append(&db, &svc->node);
    6da0:	0001      	movs	r1, r0
    6da2:	6083      	str	r3, [r0, #8]

	if (!list->tail) {
    6da4:	6850      	ldr	r0, [r2, #4]
    6da6:	3108      	adds	r1, #8
    6da8:	4298      	cmp	r0, r3
    6daa:	d102      	bne.n	6db2 <gatt_register+0x7a>
		list->tail = node;
    6dac:	6051      	str	r1, [r2, #4]
		list->head = node;
    6dae:	6011      	str	r1, [r2, #0]
    6db0:	e005      	b.n	6dbe <gatt_register+0x86>
	} else {
		list->tail->next = node;
    6db2:	6001      	str	r1, [r0, #0]
		list->tail = node;
    6db4:	6051      	str	r1, [r2, #4]

	return 0;
    6db6:	0018      	movs	r0, r3
    6db8:	e001      	b.n	6dbe <gatt_register+0x86>
		handle = 0;
		goto populate;
	}

	last = SYS_SLIST_PEEK_TAIL_CONTAINER(&db, last, node);
	handle = last->attrs[last->attr_count - 1].handle;
    6dba:	681b      	ldr	r3, [r3, #0]
    6dbc:	deff      	udf	#255	; 0xff
	}

	sys_slist_append(&db, &svc->node);

	return 0;
}
    6dbe:	b004      	add	sp, #16
    6dc0:	bd70      	pop	{r4, r5, r6, pc}
    6dc2:	46c0      	nop			; (mov r8, r8)
    6dc4:	2000108c 	.word	0x2000108c
    6dc8:	000154c4 	.word	0x000154c4
    6dcc:	000154c9 	.word	0x000154c9
    6dd0:	00015484 	.word	0x00015484
    6dd4:	0001548b 	.word	0x0001548b
    6dd8:	00017d48 	.word	0x00017d48
    6ddc:	0001621b 	.word	0x0001621b

00006de0 <gatt_notify>:
	struct bt_gatt_indicate_params *params;
};

static int gatt_notify(struct bt_conn *conn, u16_t handle, const void *data,
		       size_t len)
{
    6de0:	b5f0      	push	{r4, r5, r6, r7, lr}
    6de2:	b087      	sub	sp, #28
    6de4:	9104      	str	r1, [sp, #16]
    6de6:	9205      	str	r2, [sp, #20]
	struct net_buf *buf;
	struct bt_att_notify *nfy;

	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY, sizeof(*nfy) + len);
    6de8:	211b      	movs	r1, #27
    6dea:	1c9a      	adds	r2, r3, #2
	struct bt_gatt_indicate_params *params;
};

static int gatt_notify(struct bt_conn *conn, u16_t handle, const void *data,
		       size_t len)
{
    6dec:	0007      	movs	r7, r0
    6dee:	001e      	movs	r6, r3
	struct net_buf *buf;
	struct bt_att_notify *nfy;

	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY, sizeof(*nfy) + len);
    6df0:	f7ff f97a 	bl	60e8 <bt_att_create_pdu>
    6df4:	1e05      	subs	r5, r0, #0
	if (!buf) {
    6df6:	d10c      	bne.n	6e12 <gatt_notify+0x32>
		BT_WARN("No buffer available to send notification");
    6df8:	4b16      	ldr	r3, [pc, #88]	; (6e54 <gatt_notify+0x74>)
    6dfa:	4a17      	ldr	r2, [pc, #92]	; (6e58 <gatt_notify+0x78>)
    6dfc:	9301      	str	r3, [sp, #4]
    6dfe:	4b17      	ldr	r3, [pc, #92]	; (6e5c <gatt_notify+0x7c>)
    6e00:	4917      	ldr	r1, [pc, #92]	; (6e60 <gatt_notify+0x80>)
    6e02:	9300      	str	r3, [sp, #0]
    6e04:	4817      	ldr	r0, [pc, #92]	; (6e64 <gatt_notify+0x84>)
    6e06:	4b18      	ldr	r3, [pc, #96]	; (6e68 <gatt_notify+0x88>)
    6e08:	f7fa fdba 	bl	1980 <printk>
    6e0c:	200c      	movs	r0, #12
    6e0e:	4240      	negs	r0, r0
    6e10:	e01d      	b.n	6e4e <gatt_notify+0x6e>
		return -ENOMEM;
	}

	BT_DBG("conn %p handle 0x%04x", conn, handle);

	nfy = net_buf_add(buf, sizeof(*nfy));
    6e12:	0003      	movs	r3, r0
    6e14:	3308      	adds	r3, #8
    6e16:	2102      	movs	r1, #2
    6e18:	0018      	movs	r0, r3
    6e1a:	9303      	str	r3, [sp, #12]
    6e1c:	f00c fbd2 	bl	135c4 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
    6e20:	466b      	mov	r3, sp
		return -ENOMEM;
	}

	BT_DBG("conn %p handle 0x%04x", conn, handle);

	nfy = net_buf_add(buf, sizeof(*nfy));
    6e22:	0004      	movs	r4, r0
	nfy->handle = sys_cpu_to_le16(handle);
    6e24:	7c1b      	ldrb	r3, [r3, #16]

	net_buf_add(buf, len);
    6e26:	0031      	movs	r1, r6
	}

	BT_DBG("conn %p handle 0x%04x", conn, handle);

	nfy = net_buf_add(buf, sizeof(*nfy));
	nfy->handle = sys_cpu_to_le16(handle);
    6e28:	7003      	strb	r3, [r0, #0]
    6e2a:	9b04      	ldr	r3, [sp, #16]
    6e2c:	0a1b      	lsrs	r3, r3, #8
    6e2e:	7043      	strb	r3, [r0, #1]

	net_buf_add(buf, len);
    6e30:	9803      	ldr	r0, [sp, #12]
    6e32:	f00c fbc7 	bl	135c4 <net_buf_simple_add>
	memcpy(nfy->value, data, len);
    6e36:	0032      	movs	r2, r6
    6e38:	9905      	ldr	r1, [sp, #20]
    6e3a:	1ca0      	adds	r0, r4, #2
    6e3c:	f7f9 ff7d 	bl	d3a <memcpy>
    6e40:	0038      	movs	r0, r7
    6e42:	2300      	movs	r3, #0
    6e44:	002a      	movs	r2, r5
    6e46:	2104      	movs	r1, #4
    6e48:	f7fe fa76 	bl	5338 <bt_l2cap_send_cb>

	bt_l2cap_send(conn, BT_L2CAP_CID_ATT, buf);

	return 0;
    6e4c:	2000      	movs	r0, #0
}
    6e4e:	b007      	add	sp, #28
    6e50:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6e52:	46c0      	nop			; (mov r8, r8)
    6e54:	000154c4 	.word	0x000154c4
    6e58:	000154d1 	.word	0x000154d1
    6e5c:	0001550f 	.word	0x0001550f
    6e60:	0001548b 	.word	0x0001548b
    6e64:	0001624c 	.word	0x0001624c
    6e68:	00017d32 	.word	0x00017d32

00006e6c <gatt_indicate>:
	return err;
}

static int gatt_indicate(struct bt_conn *conn,
			 struct bt_gatt_indicate_params *params)
{
    6e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct net_buf *buf;
	struct bt_att_indicate *ind;

	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    6e6e:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
	return err;
}

static int gatt_indicate(struct bt_conn *conn,
			 struct bt_gatt_indicate_params *params)
{
    6e70:	b087      	sub	sp, #28
    6e72:	000c      	movs	r4, r1
	struct net_buf *buf;
	struct bt_att_indicate *ind;

	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    6e74:	3202      	adds	r2, #2
    6e76:	211d      	movs	r1, #29
	return err;
}

static int gatt_indicate(struct bt_conn *conn,
			 struct bt_gatt_indicate_params *params)
{
    6e78:	0007      	movs	r7, r0
	struct net_buf *buf;
	struct bt_att_indicate *ind;

	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    6e7a:	f7ff f935 	bl	60e8 <bt_att_create_pdu>
    6e7e:	1e06      	subs	r6, r0, #0
				sizeof(*ind) + params->len);
	if (!buf) {
    6e80:	d10c      	bne.n	6e9c <gatt_indicate+0x30>
		BT_WARN("No buffer available to send indication");
    6e82:	4b20      	ldr	r3, [pc, #128]	; (6f04 <gatt_indicate+0x98>)
    6e84:	4a20      	ldr	r2, [pc, #128]	; (6f08 <gatt_indicate+0x9c>)
    6e86:	9301      	str	r3, [sp, #4]
    6e88:	4b20      	ldr	r3, [pc, #128]	; (6f0c <gatt_indicate+0xa0>)
    6e8a:	4921      	ldr	r1, [pc, #132]	; (6f10 <gatt_indicate+0xa4>)
    6e8c:	9300      	str	r3, [sp, #0]
    6e8e:	4821      	ldr	r0, [pc, #132]	; (6f14 <gatt_indicate+0xa8>)
    6e90:	4b21      	ldr	r3, [pc, #132]	; (6f18 <gatt_indicate+0xac>)
    6e92:	f7fa fd75 	bl	1980 <printk>
    6e96:	200c      	movs	r0, #12
    6e98:	4240      	negs	r0, r0
    6e9a:	e031      	b.n	6f00 <gatt_indicate+0x94>
		return -ENOMEM;
	}

	BT_DBG("conn %p handle 0x%04x", conn, params->attr->handle);

	ind = net_buf_add(buf, sizeof(*ind));
    6e9c:	0003      	movs	r3, r0
    6e9e:	3308      	adds	r3, #8
    6ea0:	2102      	movs	r1, #2
    6ea2:	0018      	movs	r0, r3
    6ea4:	9305      	str	r3, [sp, #20]
    6ea6:	f00c fb8d 	bl	135c4 <net_buf_simple_add>
    6eaa:	0005      	movs	r5, r0
	ind->handle = sys_cpu_to_le16(params->attr->handle);
    6eac:	69a3      	ldr	r3, [r4, #24]
    6eae:	7c1a      	ldrb	r2, [r3, #16]
    6eb0:	7002      	strb	r2, [r0, #0]
    6eb2:	7c5b      	ldrb	r3, [r3, #17]
    6eb4:	7043      	strb	r3, [r0, #1]

	net_buf_add(buf, params->len);
    6eb6:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
    6eb8:	9805      	ldr	r0, [sp, #20]
    6eba:	f00c fb83 	bl	135c4 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
    6ebe:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
    6ec0:	6a21      	ldr	r1, [r4, #32]
    6ec2:	1ca8      	adds	r0, r5, #2
    6ec4:	f7f9 ff39 	bl	d3a <memcpy>

	if (params) {
		struct bt_att_req *req = params;

		req->buf = buf;
		req->func = func;
    6ec8:	4b14      	ldr	r3, [pc, #80]	; (6f1c <gatt_indicate+0xb0>)
	int err;

	if (params) {
		struct bt_att_req *req = params;

		req->buf = buf;
    6eca:	6126      	str	r6, [r4, #16]
		req->func = func;
    6ecc:	6063      	str	r3, [r4, #4]
		req->destroy = destroy;
    6ece:	2300      	movs	r3, #0

		err = bt_att_req_send(conn, req);
    6ed0:	0021      	movs	r1, r4
	if (params) {
		struct bt_att_req *req = params;

		req->buf = buf;
		req->func = func;
		req->destroy = destroy;
    6ed2:	60a3      	str	r3, [r4, #8]

		err = bt_att_req_send(conn, req);
    6ed4:	0038      	movs	r0, r7
    6ed6:	f7ff fe3b 	bl	6b50 <bt_att_req_send>
    6eda:	0004      	movs	r4, r0
	} else {
		err = bt_att_send(conn, buf);
	}

	if (err) {
    6edc:	2000      	movs	r0, #0
    6ede:	4284      	cmp	r4, r0
    6ee0:	d00e      	beq.n	6f00 <gatt_indicate+0x94>
		BT_ERR("Error sending ATT PDU: %d", err);
    6ee2:	4b08      	ldr	r3, [pc, #32]	; (6f04 <gatt_indicate+0x98>)
    6ee4:	4a0e      	ldr	r2, [pc, #56]	; (6f20 <gatt_indicate+0xb4>)
    6ee6:	9302      	str	r3, [sp, #8]
    6ee8:	4b0e      	ldr	r3, [pc, #56]	; (6f24 <gatt_indicate+0xb8>)
    6eea:	4909      	ldr	r1, [pc, #36]	; (6f10 <gatt_indicate+0xa4>)
    6eec:	9300      	str	r3, [sp, #0]
    6eee:	9401      	str	r4, [sp, #4]
    6ef0:	4b0d      	ldr	r3, [pc, #52]	; (6f28 <gatt_indicate+0xbc>)
    6ef2:	480e      	ldr	r0, [pc, #56]	; (6f2c <gatt_indicate+0xc0>)
    6ef4:	f7fa fd44 	bl	1980 <printk>
		net_buf_unref(buf);
    6ef8:	0030      	movs	r0, r6
    6efa:	f00c fb41 	bl	13580 <net_buf_unref>
    6efe:	0020      	movs	r0, r4

	net_buf_add(buf, params->len);
	memcpy(ind->value, params->data, params->len);

	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
}
    6f00:	b007      	add	sp, #28
    6f02:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6f04:	000154c4 	.word	0x000154c4
    6f08:	000154d1 	.word	0x000154d1
    6f0c:	0001550f 	.word	0x0001550f
    6f10:	0001548b 	.word	0x0001548b
    6f14:	00016285 	.word	0x00016285
    6f18:	00017d56 	.word	0x00017d56
    6f1c:	00006bdb 	.word	0x00006bdb
    6f20:	00015484 	.word	0x00015484
    6f24:	000154c9 	.word	0x000154c9
    6f28:	00017d3e 	.word	0x00017d3e
    6f2c:	000162bc 	.word	0x000162bc

00006f30 <notify_cb>:

static u8_t notify_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    6f30:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct notify_data *data = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC)) {
    6f32:	2600      	movs	r6, #0

	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
}

static u8_t notify_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    6f34:	b085      	sub	sp, #20
	struct notify_data *data = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC)) {
    6f36:	ab02      	add	r3, sp, #8
    6f38:	aa02      	add	r2, sp, #8
    6f3a:	701e      	strb	r6, [r3, #0]
    6f3c:	4b27      	ldr	r3, [pc, #156]	; (6fdc <notify_cb+0xac>)

	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
}

static u8_t notify_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    6f3e:	0005      	movs	r5, r0
    6f40:	000c      	movs	r4, r1
	struct notify_data *data = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC)) {
    6f42:	6800      	ldr	r0, [r0, #0]
    6f44:	0011      	movs	r1, r2
    6f46:	8053      	strh	r3, [r2, #2]
    6f48:	f7fb fa18 	bl	237c <bt_uuid_cmp>
    6f4c:	42b0      	cmp	r0, r6
    6f4e:	d00a      	beq.n	6f66 <notify_cb+0x36>
		/* Stop if we reach the next characteristic */
		if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
    6f50:	4b23      	ldr	r3, [pc, #140]	; (6fe0 <notify_cb+0xb0>)
    6f52:	a903      	add	r1, sp, #12
    6f54:	6828      	ldr	r0, [r5, #0]
    6f56:	804b      	strh	r3, [r1, #2]
    6f58:	700e      	strb	r6, [r1, #0]
    6f5a:	f7fb fa0f 	bl	237c <bt_uuid_cmp>
			return BT_GATT_ITER_STOP;
    6f5e:	1e43      	subs	r3, r0, #1
    6f60:	4198      	sbcs	r0, r3
    6f62:	b2c0      	uxtb	r0, r0
    6f64:	e037      	b.n	6fd6 <notify_cb+0xa6>
		}
		return BT_GATT_ITER_CONTINUE;
	}

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    6f66:	4b1f      	ldr	r3, [pc, #124]	; (6fe4 <notify_cb+0xb4>)
    6f68:	68aa      	ldr	r2, [r5, #8]
    6f6a:	429a      	cmp	r2, r3
    6f6c:	d001      	beq.n	6f72 <notify_cb+0x42>
		return BT_GATT_ITER_CONTINUE;
    6f6e:	2001      	movs	r0, #1
    6f70:	e031      	b.n	6fd6 <notify_cb+0xa6>
	}

	ccc = attr->user_data;

	/* Notify all peers configured */
	for (i = 0; i < ccc->cfg_len; i++) {
    6f72:	0007      	movs	r7, r0
	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
    6f74:	68ee      	ldr	r6, [r5, #12]

	/* Notify all peers configured */
	for (i = 0; i < ccc->cfg_len; i++) {
    6f76:	6873      	ldr	r3, [r6, #4]
    6f78:	429f      	cmp	r7, r3
    6f7a:	d2f8      	bcs.n	6f6e <notify_cb+0x3e>
		struct bt_conn *conn;
		int err;

		if (ccc->value != data->type) {
    6f7c:	8932      	ldrh	r2, [r6, #8]
    6f7e:	88a3      	ldrh	r3, [r4, #4]
    6f80:	429a      	cmp	r2, r3
    6f82:	d126      	bne.n	6fd2 <notify_cb+0xa2>
			continue;
		}

		conn = bt_conn_lookup_addr_le(&ccc->cfg[i].peer);
    6f84:	200a      	movs	r0, #10
    6f86:	4378      	muls	r0, r7
    6f88:	6833      	ldr	r3, [r6, #0]
    6f8a:	1818      	adds	r0, r3, r0
    6f8c:	3001      	adds	r0, #1
    6f8e:	f7fd fee3 	bl	4d58 <bt_conn_lookup_addr_le>
    6f92:	1e05      	subs	r5, r0, #0
		if (!conn) {
    6f94:	d01d      	beq.n	6fd2 <notify_cb+0xa2>
			continue;
		}

		if (conn->state != BT_CONN_CONNECTED) {
    6f96:	0003      	movs	r3, r0
    6f98:	3351      	adds	r3, #81	; 0x51
    6f9a:	781b      	ldrb	r3, [r3, #0]
    6f9c:	2b03      	cmp	r3, #3
    6f9e:	d002      	beq.n	6fa6 <notify_cb+0x76>
			bt_conn_unref(conn);
    6fa0:	f7fd ff1a 	bl	4dd8 <bt_conn_unref>
    6fa4:	e015      	b.n	6fd2 <notify_cb+0xa2>
			continue;
		}

		if (data->type == BT_GATT_CCC_INDICATE) {
    6fa6:	88a3      	ldrh	r3, [r4, #4]
    6fa8:	2b02      	cmp	r3, #2
    6faa:	d103      	bne.n	6fb4 <notify_cb+0x84>
			err = gatt_indicate(conn, data->params);
    6fac:	6961      	ldr	r1, [r4, #20]
    6fae:	f7ff ff5d 	bl	6e6c <gatt_indicate>
    6fb2:	e005      	b.n	6fc0 <notify_cb+0x90>
		} else {
			err = gatt_notify(conn, data->attr->handle, data->data,
    6fb4:	68a2      	ldr	r2, [r4, #8]
    6fb6:	8a23      	ldrh	r3, [r4, #16]
    6fb8:	8a11      	ldrh	r1, [r2, #16]
    6fba:	68e2      	ldr	r2, [r4, #12]
    6fbc:	f7ff ff10 	bl	6de0 <gatt_notify>
    6fc0:	9001      	str	r0, [sp, #4]
					 data->len);
		}

		bt_conn_unref(conn);
    6fc2:	0028      	movs	r0, r5
    6fc4:	f7fd ff08 	bl	4dd8 <bt_conn_unref>
    6fc8:	2000      	movs	r0, #0

		if (err < 0) {
    6fca:	9b01      	ldr	r3, [sp, #4]
    6fcc:	4283      	cmp	r3, r0
    6fce:	db02      	blt.n	6fd6 <notify_cb+0xa6>
			return BT_GATT_ITER_STOP;
		}

		data->err = 0;
    6fd0:	6020      	str	r0, [r4, #0]
	}

	ccc = attr->user_data;

	/* Notify all peers configured */
	for (i = 0; i < ccc->cfg_len; i++) {
    6fd2:	3701      	adds	r7, #1
    6fd4:	e7cf      	b.n	6f76 <notify_cb+0x46>

		data->err = 0;
	}

	return BT_GATT_ITER_CONTINUE;
}
    6fd6:	b005      	add	sp, #20
    6fd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6fda:	46c0      	nop			; (mov r8, r8)
    6fdc:	00002902 	.word	0x00002902
    6fe0:	00002803 	.word	0x00002803
    6fe4:	00006bf9 	.word	0x00006bf9

00006fe8 <disconnected_cb>:

	return BT_GATT_ITER_CONTINUE;
}

static u8_t disconnected_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    6fe8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_conn *conn = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    6fea:	4b2a      	ldr	r3, [pc, #168]	; (7094 <disconnected_cb+0xac>)
    6fec:	6882      	ldr	r2, [r0, #8]

	return BT_GATT_ITER_CONTINUE;
}

static u8_t disconnected_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    6fee:	0007      	movs	r7, r0
    6ff0:	9101      	str	r1, [sp, #4]
	struct bt_conn *conn = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    6ff2:	429a      	cmp	r2, r3
    6ff4:	d14c      	bne.n	7090 <disconnected_cb+0xa8>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
    6ff6:	68c4      	ldr	r4, [r0, #12]

	/* If already disabled skip */
	if (!ccc->value) {
    6ff8:	2600      	movs	r6, #0
    6ffa:	8923      	ldrh	r3, [r4, #8]
    6ffc:	2b00      	cmp	r3, #0
    6ffe:	d047      	beq.n	7090 <disconnected_cb+0xa8>
		return BT_GATT_ITER_CONTINUE;
	}

	for (i = 0; i < ccc->cfg_len; i++) {
    7000:	6863      	ldr	r3, [r4, #4]
    7002:	429e      	cmp	r6, r3
    7004:	d238      	bcs.n	7078 <disconnected_cb+0x90>
    7006:	250a      	movs	r5, #10
    7008:	4375      	muls	r5, r6
		/* Ignore configurations with disabled value */
		if (!ccc->cfg[i].value) {
    700a:	6823      	ldr	r3, [r4, #0]
    700c:	1959      	adds	r1, r3, r5
    700e:	890b      	ldrh	r3, [r1, #8]
    7010:	2b00      	cmp	r3, #0
    7012:	d02f      	beq.n	7074 <disconnected_cb+0x8c>
			continue;
		}

		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    7014:	3101      	adds	r1, #1
    7016:	9801      	ldr	r0, [sp, #4]
    7018:	f7fd fe86 	bl	4d28 <bt_conn_addr_le_cmp>
    701c:	2800      	cmp	r0, #0
    701e:	d011      	beq.n	7044 <disconnected_cb+0x5c>
			struct bt_conn *tmp;

			/* Skip if there is another peer connected */
			tmp = bt_conn_lookup_addr_le(&ccc->cfg[i].peer);
    7020:	6823      	ldr	r3, [r4, #0]
    7022:	1958      	adds	r0, r3, r5
    7024:	3001      	adds	r0, #1
    7026:	f7fd fe97 	bl	4d58 <bt_conn_lookup_addr_le>
			if (tmp) {
    702a:	2800      	cmp	r0, #0
    702c:	d022      	beq.n	7074 <disconnected_cb+0x8c>
				if (tmp->state == BT_CONN_CONNECTED) {
    702e:	0003      	movs	r3, r0
    7030:	3351      	adds	r3, #81	; 0x51
    7032:	781b      	ldrb	r3, [r3, #0]
    7034:	2b03      	cmp	r3, #3
    7036:	d102      	bne.n	703e <disconnected_cb+0x56>
					bt_conn_unref(tmp);
    7038:	f7fd fece 	bl	4dd8 <bt_conn_unref>
    703c:	e028      	b.n	7090 <disconnected_cb+0xa8>
					return BT_GATT_ITER_CONTINUE;
				}

				bt_conn_unref(tmp);
    703e:	f7fd fecb 	bl	4dd8 <bt_conn_unref>
    7042:	e017      	b.n	7074 <disconnected_cb+0x8c>
			}
		} else {
			/* Clear value if not paired */
			if (!bt_addr_le_is_bonded(&conn->le.dst)) {
    7044:	9b01      	ldr	r3, [sp, #4]
    7046:	3354      	adds	r3, #84	; 0x54
    7048:	0018      	movs	r0, r3
    704a:	9300      	str	r3, [sp, #0]
    704c:	f7fd f92a 	bl	42a4 <bt_addr_le_is_bonded>
    7050:	1e01      	subs	r1, r0, #0
    7052:	6820      	ldr	r0, [r4, #0]
    7054:	d108      	bne.n	7068 <disconnected_cb+0x80>
				ccc->cfg[i].valid = false;
    7056:	5541      	strb	r1, [r0, r5]
				memset(&ccc->cfg[i].value, 0,
    7058:	6823      	ldr	r3, [r4, #0]
    705a:	2202      	movs	r2, #2
    705c:	195d      	adds	r5, r3, r5
    705e:	0028      	movs	r0, r5
    7060:	3008      	adds	r0, #8
    7062:	f7f9 fe94 	bl	d8e <memset>
    7066:	e005      	b.n	7074 <disconnected_cb+0x8c>
				       sizeof(ccc->cfg[i].value));
			} else {
				/* Update address in case it has changed */
				bt_addr_le_copy(&ccc->cfg[i].peer,
    7068:	1940      	adds	r0, r0, r5
    706a:	3001      	adds	r0, #1
    706c:	2207      	movs	r2, #7
    706e:	9900      	ldr	r1, [sp, #0]
    7070:	f7f9 fe63 	bl	d3a <memcpy>
	/* If already disabled skip */
	if (!ccc->value) {
		return BT_GATT_ITER_CONTINUE;
	}

	for (i = 0; i < ccc->cfg_len; i++) {
    7074:	3601      	adds	r6, #1
    7076:	e7c3      	b.n	7000 <disconnected_cb+0x18>
			}
		}
	}

	/* Reset value while disconnected */
	memset(&ccc->value, 0, sizeof(ccc->value));
    7078:	0020      	movs	r0, r4
    707a:	2202      	movs	r2, #2
    707c:	2100      	movs	r1, #0
    707e:	3008      	adds	r0, #8
    7080:	f7f9 fe85 	bl	d8e <memset>
	if (ccc->cfg_changed) {
    7084:	68e3      	ldr	r3, [r4, #12]
    7086:	2b00      	cmp	r3, #0
    7088:	d002      	beq.n	7090 <disconnected_cb+0xa8>
		ccc->cfg_changed(attr, ccc->value);
    708a:	8921      	ldrh	r1, [r4, #8]
    708c:	0038      	movs	r0, r7
    708e:	4798      	blx	r3
	}

	BT_DBG("ccc %p reseted", ccc);

	return BT_GATT_ITER_CONTINUE;
}
    7090:	2001      	movs	r0, #1
    7092:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    7094:	00006bf9 	.word	0x00006bf9

00007098 <bt_gatt_init>:

	return 0;
}

void bt_gatt_init(void)
{
    7098:	b510      	push	{r4, lr}
	/* Register mandatory services */
	gatt_register(&gap_svc);
    709a:	4803      	ldr	r0, [pc, #12]	; (70a8 <bt_gatt_init+0x10>)
    709c:	f7ff fe4c 	bl	6d38 <gatt_register>
	gatt_register(&gatt_svc);
    70a0:	4802      	ldr	r0, [pc, #8]	; (70ac <bt_gatt_init+0x14>)
    70a2:	f7ff fe49 	bl	6d38 <gatt_register>
}
    70a6:	bd10      	pop	{r4, pc}
    70a8:	2000078c 	.word	0x2000078c
    70ac:	20000740 	.word	0x20000740

000070b0 <bt_gatt_attr_read>:
}

ssize_t bt_gatt_attr_read(struct bt_conn *conn, const struct bt_gatt_attr *attr,
			  void *buf, u16_t buf_len, u16_t offset,
			  const void *value, u16_t value_len)
{
    70b0:	b510      	push	{r4, lr}
    70b2:	0010      	movs	r0, r2
    70b4:	aa02      	add	r2, sp, #8
    70b6:	8811      	ldrh	r1, [r2, #0]
    70b8:	aa04      	add	r2, sp, #16
    70ba:	8814      	ldrh	r4, [r2, #0]
	u16_t len;

	if (offset > value_len) {
    70bc:	42a1      	cmp	r1, r4
    70be:	d80a      	bhi.n	70d6 <bt_gatt_attr_read+0x26>
    70c0:	1a64      	subs	r4, r4, r1
    70c2:	429c      	cmp	r4, r3
    70c4:	dd00      	ble.n	70c8 <bt_gatt_attr_read+0x18>
    70c6:	001c      	movs	r4, r3
	len = min(buf_len, value_len - offset);

	BT_DBG("handle 0x%04x offset %u length %u", attr->handle, offset,
	       len);

	memcpy(buf, value + offset, len);
    70c8:	9b03      	ldr	r3, [sp, #12]
    70ca:	b2a4      	uxth	r4, r4
    70cc:	1859      	adds	r1, r3, r1
    70ce:	0022      	movs	r2, r4
    70d0:	f7f9 fe33 	bl	d3a <memcpy>

	return len;
    70d4:	e001      	b.n	70da <bt_gatt_attr_read+0x2a>
			  const void *value, u16_t value_len)
{
	u16_t len;

	if (offset > value_len) {
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    70d6:	2407      	movs	r4, #7
    70d8:	4264      	negs	r4, r4
	       len);

	memcpy(buf, value + offset, len);

	return len;
}
    70da:	0020      	movs	r0, r4
    70dc:	bd10      	pop	{r4, pc}
	...

000070e0 <read_appearance>:
}

static ssize_t read_appearance(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, void *buf,
			       u16_t len, u16_t offset)
{
    70e0:	b570      	push	{r4, r5, r6, lr}
    70e2:	b086      	sub	sp, #24
    70e4:	ac0a      	add	r4, sp, #40	; 0x28
    70e6:	8825      	ldrh	r5, [r4, #0]
	u16_t appearance = sys_cpu_to_le16(gap_appearance);
    70e8:	2416      	movs	r4, #22
    70ea:	4e05      	ldr	r6, [pc, #20]	; (7100 <read_appearance+0x20>)
    70ec:	446c      	add	r4, sp
    70ee:	8026      	strh	r6, [r4, #0]

	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
    70f0:	2602      	movs	r6, #2
    70f2:	9401      	str	r4, [sp, #4]
    70f4:	9602      	str	r6, [sp, #8]
    70f6:	9500      	str	r5, [sp, #0]
    70f8:	f7ff ffda 	bl	70b0 <bt_gatt_attr_read>
				 sizeof(appearance));
}
    70fc:	b006      	add	sp, #24
    70fe:	bd70      	pop	{r4, r5, r6, pc}
    7100:	00000341 	.word	0x00000341

00007104 <read_name>:

static sys_slist_t db;

static ssize_t read_name(struct bt_conn *conn, const struct bt_gatt_attr *attr,
			 void *buf, u16_t len, u16_t offset)
{
    7104:	b5f0      	push	{r4, r5, r6, r7, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, gap_name,
				 strlen(gap_name));
    7106:	4c0b      	ldr	r4, [pc, #44]	; (7134 <read_name+0x30>)

static sys_slist_t db;

static ssize_t read_name(struct bt_conn *conn, const struct bt_gatt_attr *attr,
			 void *buf, u16_t len, u16_t offset)
{
    7108:	b087      	sub	sp, #28
    710a:	0005      	movs	r5, r0
    710c:	001e      	movs	r6, r3
	return bt_gatt_attr_read(conn, attr, buf, len, offset, gap_name,
				 strlen(gap_name));
    710e:	0020      	movs	r0, r4

static sys_slist_t db;

static ssize_t read_name(struct bt_conn *conn, const struct bt_gatt_attr *attr,
			 void *buf, u16_t len, u16_t offset)
{
    7110:	ab0c      	add	r3, sp, #48	; 0x30
    7112:	881f      	ldrh	r7, [r3, #0]
    7114:	9104      	str	r1, [sp, #16]
    7116:	9205      	str	r2, [sp, #20]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, gap_name,
				 strlen(gap_name));
    7118:	f7f9 fde5 	bl	ce6 <strlen>
static sys_slist_t db;

static ssize_t read_name(struct bt_conn *conn, const struct bt_gatt_attr *attr,
			 void *buf, u16_t len, u16_t offset)
{
	return bt_gatt_attr_read(conn, attr, buf, len, offset, gap_name,
    711c:	b280      	uxth	r0, r0
    711e:	9002      	str	r0, [sp, #8]
    7120:	9401      	str	r4, [sp, #4]
    7122:	9700      	str	r7, [sp, #0]
    7124:	0033      	movs	r3, r6
    7126:	9a05      	ldr	r2, [sp, #20]
    7128:	9904      	ldr	r1, [sp, #16]
    712a:	0028      	movs	r0, r5
    712c:	f7ff ffc0 	bl	70b0 <bt_gatt_attr_read>
				 strlen(gap_name));
}
    7130:	b007      	add	sp, #28
    7132:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7134:	00015230 	.word	0x00015230

00007138 <bt_gatt_attr_read_service>:
}

ssize_t bt_gatt_attr_read_service(struct bt_conn *conn,
				  const struct bt_gatt_attr *attr,
				  void *buf, u16_t len, u16_t offset)
{
    7138:	b570      	push	{r4, r5, r6, lr}
    713a:	b086      	sub	sp, #24
    713c:	ac0a      	add	r4, sp, #40	; 0x28
    713e:	8825      	ldrh	r5, [r4, #0]
	struct bt_uuid *uuid = attr->user_data;
    7140:	68cc      	ldr	r4, [r1, #12]

	if (uuid->type == BT_UUID_TYPE_16) {
    7142:	7826      	ldrb	r6, [r4, #0]
    7144:	2e00      	cmp	r6, #0
    7146:	d107      	bne.n	7158 <bt_gatt_attr_read_service+0x20>
		u16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
    7148:	8864      	ldrh	r4, [r4, #2]
    714a:	3616      	adds	r6, #22
    714c:	446e      	add	r6, sp
    714e:	8034      	strh	r4, [r6, #0]

		return bt_gatt_attr_read(conn, attr, buf, len, offset,
    7150:	2402      	movs	r4, #2
    7152:	9601      	str	r6, [sp, #4]
    7154:	9402      	str	r4, [sp, #8]
    7156:	e003      	b.n	7160 <bt_gatt_attr_read_service+0x28>
					 &uuid16, 2);
	}

	return bt_gatt_attr_read(conn, attr, buf, len, offset,
    7158:	2610      	movs	r6, #16
				 BT_UUID_128(uuid)->val, 16);
    715a:	3401      	adds	r4, #1

		return bt_gatt_attr_read(conn, attr, buf, len, offset,
					 &uuid16, 2);
	}

	return bt_gatt_attr_read(conn, attr, buf, len, offset,
    715c:	9602      	str	r6, [sp, #8]
    715e:	9401      	str	r4, [sp, #4]
    7160:	9500      	str	r5, [sp, #0]
    7162:	f7ff ffa5 	bl	70b0 <bt_gatt_attr_read>
				 BT_UUID_128(uuid)->val, 16);
}
    7166:	b006      	add	sp, #24
    7168:	bd70      	pop	{r4, r5, r6, pc}

0000716a <bt_gatt_attr_read_ccc>:
}

ssize_t bt_gatt_attr_read_ccc(struct bt_conn *conn,
			      const struct bt_gatt_attr *attr, void *buf,
			      u16_t len, u16_t offset)
{
    716a:	b5f0      	push	{r4, r5, r6, r7, lr}
    716c:	0006      	movs	r6, r0
    716e:	000f      	movs	r7, r1
	struct _bt_gatt_ccc *ccc = attr->user_data;
	u16_t value;
	size_t i;

	for (i = 0; i < ccc->cfg_len; i++) {
    7170:	2400      	movs	r4, #0
}

ssize_t bt_gatt_attr_read_ccc(struct bt_conn *conn,
			      const struct bt_gatt_attr *attr, void *buf,
			      u16_t len, u16_t offset)
{
    7172:	b08b      	sub	sp, #44	; 0x2c
    7174:	9306      	str	r3, [sp, #24]
    7176:	ab10      	add	r3, sp, #64	; 0x40
    7178:	881b      	ldrh	r3, [r3, #0]
	struct _bt_gatt_ccc *ccc = attr->user_data;
    717a:	68cd      	ldr	r5, [r1, #12]
}

ssize_t bt_gatt_attr_read_ccc(struct bt_conn *conn,
			      const struct bt_gatt_attr *attr, void *buf,
			      u16_t len, u16_t offset)
{
    717c:	9205      	str	r2, [sp, #20]
    717e:	9307      	str	r3, [sp, #28]
	struct _bt_gatt_ccc *ccc = attr->user_data;
	u16_t value;
	size_t i;

	for (i = 0; i < ccc->cfg_len; i++) {
    7180:	686b      	ldr	r3, [r5, #4]
    7182:	429c      	cmp	r4, r3
    7184:	d216      	bcs.n	71b4 <bt_gatt_attr_read_ccc+0x4a>
    7186:	230a      	movs	r3, #10
    7188:	4363      	muls	r3, r4
    718a:	9304      	str	r3, [sp, #16]
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    718c:	9a04      	ldr	r2, [sp, #16]
    718e:	682b      	ldr	r3, [r5, #0]
    7190:	0030      	movs	r0, r6
    7192:	1899      	adds	r1, r3, r2
    7194:	3101      	adds	r1, #1
    7196:	f7fd fdc7 	bl	4d28 <bt_conn_addr_le_cmp>
    719a:	2800      	cmp	r0, #0
    719c:	d001      	beq.n	71a2 <bt_gatt_attr_read_ccc+0x38>
{
	struct _bt_gatt_ccc *ccc = attr->user_data;
	u16_t value;
	size_t i;

	for (i = 0; i < ccc->cfg_len; i++) {
    719e:	3401      	adds	r4, #1
    71a0:	e7ee      	b.n	7180 <bt_gatt_attr_read_ccc+0x16>
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
			continue;
		}

		value = sys_cpu_to_le16(ccc->cfg[i].value);
    71a2:	682a      	ldr	r2, [r5, #0]
    71a4:	9b04      	ldr	r3, [sp, #16]
    71a6:	4694      	mov	ip, r2
    71a8:	4463      	add	r3, ip
    71aa:	891a      	ldrh	r2, [r3, #8]
    71ac:	2316      	movs	r3, #22
    71ae:	a904      	add	r1, sp, #16
    71b0:	185b      	adds	r3, r3, r1
    71b2:	801a      	strh	r2, [r3, #0]
    71b4:	2316      	movs	r3, #22
		break;
	}

	/* Default to disable if there is no cfg for the peer */
	if (i == ccc->cfg_len) {
    71b6:	686a      	ldr	r2, [r5, #4]
    71b8:	a904      	add	r1, sp, #16
    71ba:	185b      	adds	r3, r3, r1
    71bc:	4294      	cmp	r4, r2
    71be:	d101      	bne.n	71c4 <bt_gatt_attr_read_ccc+0x5a>
		value = 0x0000;
    71c0:	2200      	movs	r2, #0
    71c2:	801a      	strh	r2, [r3, #0]
	}

	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
    71c4:	2202      	movs	r2, #2
    71c6:	9301      	str	r3, [sp, #4]
    71c8:	9b07      	ldr	r3, [sp, #28]
    71ca:	9202      	str	r2, [sp, #8]
    71cc:	9300      	str	r3, [sp, #0]
    71ce:	9a05      	ldr	r2, [sp, #20]
    71d0:	9b06      	ldr	r3, [sp, #24]
    71d2:	0039      	movs	r1, r7
    71d4:	0030      	movs	r0, r6
    71d6:	f7ff ff6b 	bl	70b0 <bt_gatt_attr_read>
				 sizeof(value));
}
    71da:	b00b      	add	sp, #44	; 0x2c
    71dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000071e0 <bt_gatt_foreach_attr>:
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
}

void bt_gatt_foreach_attr(u16_t start_handle, u16_t end_handle,
			  bt_gatt_attr_func_t func, void *user_data)
{
    71e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    71e2:	9301      	str	r3, [sp, #4]
    71e4:	4b12      	ldr	r3, [pc, #72]	; (7230 <bt_gatt_foreach_attr+0x50>)
    71e6:	0006      	movs	r6, r0
    71e8:	681b      	ldr	r3, [r3, #0]
    71ea:	000f      	movs	r7, r1
	struct bt_gatt_service *svc;

	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    71ec:	001c      	movs	r4, r3
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
}

void bt_gatt_foreach_attr(u16_t start_handle, u16_t end_handle,
			  bt_gatt_attr_func_t func, void *user_data)
{
    71ee:	9200      	str	r2, [sp, #0]
	struct bt_gatt_service *svc;

	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    71f0:	3c08      	subs	r4, #8
    71f2:	2b00      	cmp	r3, #0
    71f4:	d01b      	beq.n	722e <bt_gatt_foreach_attr+0x4e>
    71f6:	2c00      	cmp	r4, #0
    71f8:	d019      	beq.n	722e <bt_gatt_foreach_attr+0x4e>
    71fa:	2500      	movs	r5, #0
		int i;

		for (i = 0; i < svc->attr_count; i++) {
    71fc:	88a3      	ldrh	r3, [r4, #4]
    71fe:	429d      	cmp	r5, r3
    7200:	da10      	bge.n	7224 <bt_gatt_foreach_attr+0x44>
			struct bt_gatt_attr *attr = &svc->attrs[i];
    7202:	2014      	movs	r0, #20
    7204:	4368      	muls	r0, r5
    7206:	6823      	ldr	r3, [r4, #0]
    7208:	1818      	adds	r0, r3, r0

			/* Check if attribute handle is within range */
			if (attr->handle < start_handle ||
    720a:	8a03      	ldrh	r3, [r0, #16]
    720c:	42b3      	cmp	r3, r6
    720e:	d201      	bcs.n	7214 <bt_gatt_foreach_attr+0x34>
	struct bt_gatt_service *svc;

	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
		int i;

		for (i = 0; i < svc->attr_count; i++) {
    7210:	3501      	adds	r5, #1
    7212:	e7f3      	b.n	71fc <bt_gatt_foreach_attr+0x1c>
			struct bt_gatt_attr *attr = &svc->attrs[i];

			/* Check if attribute handle is within range */
			if (attr->handle < start_handle ||
    7214:	42bb      	cmp	r3, r7
    7216:	d8fb      	bhi.n	7210 <bt_gatt_foreach_attr+0x30>
			    attr->handle > end_handle) {
				continue;
			}

			if (func(attr, user_data) == BT_GATT_ITER_STOP) {
    7218:	9901      	ldr	r1, [sp, #4]
    721a:	9b00      	ldr	r3, [sp, #0]
    721c:	4798      	blx	r3
    721e:	2800      	cmp	r0, #0
    7220:	d1f6      	bne.n	7210 <bt_gatt_foreach_attr+0x30>
    7222:	e004      	b.n	722e <bt_gatt_foreach_attr+0x4e>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node)
{
	return node->next;
    7224:	68a4      	ldr	r4, [r4, #8]
void bt_gatt_foreach_attr(u16_t start_handle, u16_t end_handle,
			  bt_gatt_attr_func_t func, void *user_data)
{
	struct bt_gatt_service *svc;

	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    7226:	2c00      	cmp	r4, #0
    7228:	d001      	beq.n	722e <bt_gatt_foreach_attr+0x4e>
    722a:	3c08      	subs	r4, #8
    722c:	e7e3      	b.n	71f6 <bt_gatt_foreach_attr+0x16>
			if (func(attr, user_data) == BT_GATT_ITER_STOP) {
				return;
			}
		}
	}
}
    722e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    7230:	2000108c 	.word	0x2000108c

00007234 <bt_gatt_indicate.part.9>:
	bt_gatt_foreach_attr(attr->handle, 0xffff, notify_cb, &nfy);

	return nfy.err;
}

int bt_gatt_indicate(struct bt_conn *conn,
    7234:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

	if (conn) {
		return gatt_indicate(conn, params);
	}

	nfy.err = -ENOTCONN;
    7236:	2339      	movs	r3, #57	; 0x39
	nfy.type = BT_GATT_CCC_INDICATE;
    7238:	466a      	mov	r2, sp

	if (conn) {
		return gatt_indicate(conn, params);
	}

	nfy.err = -ENOTCONN;
    723a:	425b      	negs	r3, r3
    723c:	9300      	str	r3, [sp, #0]
	nfy.type = BT_GATT_CCC_INDICATE;
    723e:	333b      	adds	r3, #59	; 0x3b
    7240:	8093      	strh	r3, [r2, #4]
	nfy.params = params;

	bt_gatt_foreach_attr(params->attr->handle, 0xffff, notify_cb, &nfy);
    7242:	6983      	ldr	r3, [r0, #24]
		return gatt_indicate(conn, params);
	}

	nfy.err = -ENOTCONN;
	nfy.type = BT_GATT_CCC_INDICATE;
	nfy.params = params;
    7244:	9005      	str	r0, [sp, #20]

	bt_gatt_foreach_attr(params->attr->handle, 0xffff, notify_cb, &nfy);
    7246:	8a18      	ldrh	r0, [r3, #16]
    7248:	4a03      	ldr	r2, [pc, #12]	; (7258 <bt_gatt_indicate.part.9+0x24>)
    724a:	466b      	mov	r3, sp
    724c:	4903      	ldr	r1, [pc, #12]	; (725c <bt_gatt_indicate.part.9+0x28>)
    724e:	f7ff ffc7 	bl	71e0 <bt_gatt_foreach_attr>

	return nfy.err;
}
    7252:	9800      	ldr	r0, [sp, #0]
    7254:	b007      	add	sp, #28
    7256:	bd00      	pop	{pc}
    7258:	00006f31 	.word	0x00006f31
    725c:	0000ffff 	.word	0x0000ffff

00007260 <sc_indicate.isra.10>:
	BT_DBG("err 0x%02x", err);

	k_sem_give(&sc_sem);
}

static void sc_indicate(struct bt_gatt_attr *start, struct bt_gatt_attr *end)
    7260:	b573      	push	{r0, r1, r4, r5, r6, lr}
{
	static struct bt_gatt_indicate_params params;
	u16_t sc_range[2];

	if (k_sem_take(&sc_sem, K_NO_WAIT)) {
    7262:	4c12      	ldr	r4, [pc, #72]	; (72ac <sc_indicate.isra.10+0x4c>)
	BT_DBG("err 0x%02x", err);

	k_sem_give(&sc_sem);
}

static void sc_indicate(struct bt_gatt_attr *start, struct bt_gatt_attr *end)
    7264:	0006      	movs	r6, r0
    7266:	000d      	movs	r5, r1
{
	static struct bt_gatt_indicate_params params;
	u16_t sc_range[2];

	if (k_sem_take(&sc_sem, K_NO_WAIT)) {
    7268:	0020      	movs	r0, r4
    726a:	2100      	movs	r1, #0
    726c:	f00d fb72 	bl	14954 <k_sem_take>
    7270:	2800      	cmp	r0, #0
    7272:	d004      	beq.n	727e <sc_indicate.isra.10+0x1e>
		BT_DBG("Service Changed indicating, waiting until complete...");
		k_sem_take(&sc_sem, K_FOREVER);
    7274:	2101      	movs	r1, #1
    7276:	0020      	movs	r0, r4
    7278:	4249      	negs	r1, r1
    727a:	f00d fb6b 	bl	14954 <k_sem_take>
	}

	sc_range[0] = sys_cpu_to_le16(start->handle);
    727e:	8832      	ldrh	r2, [r6, #0]
    7280:	ab01      	add	r3, sp, #4
	sc_range[1] = sys_cpu_to_le16(end->handle);

	params.attr = &gatt_attrs[2];
    7282:	480b      	ldr	r0, [pc, #44]	; (72b0 <sc_indicate.isra.10+0x50>)
	if (k_sem_take(&sc_sem, K_NO_WAIT)) {
		BT_DBG("Service Changed indicating, waiting until complete...");
		k_sem_take(&sc_sem, K_FOREVER);
	}

	sc_range[0] = sys_cpu_to_le16(start->handle);
    7284:	801a      	strh	r2, [r3, #0]
	sc_range[1] = sys_cpu_to_le16(end->handle);
    7286:	882a      	ldrh	r2, [r5, #0]

	params.attr = &gatt_attrs[2];
	params.func = sc_indicate_rsp;
	params.data = &sc_range[0];
    7288:	6203      	str	r3, [r0, #32]
		BT_DBG("Service Changed indicating, waiting until complete...");
		k_sem_take(&sc_sem, K_FOREVER);
	}

	sc_range[0] = sys_cpu_to_le16(start->handle);
	sc_range[1] = sys_cpu_to_le16(end->handle);
    728a:	805a      	strh	r2, [r3, #2]

	params.attr = &gatt_attrs[2];
	params.func = sc_indicate_rsp;
	params.data = &sc_range[0];
	params.len = sizeof(sc_range);
    728c:	2304      	movs	r3, #4
	}

	sc_range[0] = sys_cpu_to_le16(start->handle);
	sc_range[1] = sys_cpu_to_le16(end->handle);

	params.attr = &gatt_attrs[2];
    728e:	4a09      	ldr	r2, [pc, #36]	; (72b4 <sc_indicate.isra.10+0x54>)
	params.func = sc_indicate_rsp;
	params.data = &sc_range[0];
	params.len = sizeof(sc_range);
    7290:	8483      	strh	r3, [r0, #36]	; 0x24
	}

	sc_range[0] = sys_cpu_to_le16(start->handle);
	sc_range[1] = sys_cpu_to_le16(end->handle);

	params.attr = &gatt_attrs[2];
    7292:	3228      	adds	r2, #40	; 0x28
    7294:	6182      	str	r2, [r0, #24]
	params.func = sc_indicate_rsp;
    7296:	4a08      	ldr	r2, [pc, #32]	; (72b8 <sc_indicate.isra.10+0x58>)
    7298:	61c2      	str	r2, [r0, #28]
    729a:	f7ff ffcb 	bl	7234 <bt_gatt_indicate.part.9>
	params.data = &sc_range[0];
	params.len = sizeof(sc_range);

	if (!bt_gatt_indicate(NULL, &params)) {
    729e:	2800      	cmp	r0, #0
    72a0:	d002      	beq.n	72a8 <sc_indicate.isra.10+0x48>
		return;
	}

	k_sem_give(&sc_sem);
    72a2:	0020      	movs	r0, r4
    72a4:	f00d fb1a 	bl	148dc <k_sem_give>
}
    72a8:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    72aa:	46c0      	nop			; (mov r8, r8)
    72ac:	2000074c 	.word	0x2000074c
    72b0:	20001064 	.word	0x20001064
    72b4:	20000658 	.word	0x20000658
    72b8:	00006be9 	.word	0x00006be9

000072bc <bt_gatt_service_register>:

int bt_gatt_service_register(struct bt_gatt_service *svc)
{
    72bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT(svc, "invalid parameters\n");
	__ASSERT(svc->attrs, "invalid parameters\n");
	__ASSERT(svc->attr_count, "invalid parameters\n");

	/* Do no allow to register mandatory services twice */
	if (!bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GAP) ||
    72be:	6803      	ldr	r3, [r0, #0]
    72c0:	2400      	movs	r4, #0

	k_sem_give(&sc_sem);
}

int bt_gatt_service_register(struct bt_gatt_service *svc)
{
    72c2:	0005      	movs	r5, r0
	__ASSERT(svc, "invalid parameters\n");
	__ASSERT(svc->attrs, "invalid parameters\n");
	__ASSERT(svc->attr_count, "invalid parameters\n");

	/* Do no allow to register mandatory services twice */
	if (!bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GAP) ||
    72c4:	6818      	ldr	r0, [r3, #0]
    72c6:	466b      	mov	r3, sp
    72c8:	701c      	strb	r4, [r3, #0]
    72ca:	23c0      	movs	r3, #192	; 0xc0
    72cc:	466a      	mov	r2, sp
    72ce:	015b      	lsls	r3, r3, #5
    72d0:	4669      	mov	r1, sp
    72d2:	8053      	strh	r3, [r2, #2]
    72d4:	f7fb f852 	bl	237c <bt_uuid_cmp>
    72d8:	42a0      	cmp	r0, r4
    72da:	d102      	bne.n	72e2 <bt_gatt_service_register+0x26>
	    !bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GATT)) {
		return -EALREADY;
    72dc:	2345      	movs	r3, #69	; 0x45
    72de:	425b      	negs	r3, r3
    72e0:	e018      	b.n	7314 <bt_gatt_service_register+0x58>
	__ASSERT(svc->attrs, "invalid parameters\n");
	__ASSERT(svc->attr_count, "invalid parameters\n");

	/* Do no allow to register mandatory services twice */
	if (!bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GAP) ||
	    !bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GATT)) {
    72e2:	682b      	ldr	r3, [r5, #0]
    72e4:	a901      	add	r1, sp, #4
    72e6:	6818      	ldr	r0, [r3, #0]
    72e8:	4b0b      	ldr	r3, [pc, #44]	; (7318 <bt_gatt_service_register+0x5c>)
    72ea:	700c      	strb	r4, [r1, #0]
    72ec:	804b      	strh	r3, [r1, #2]
    72ee:	f7fb f845 	bl	237c <bt_uuid_cmp>
	__ASSERT(svc, "invalid parameters\n");
	__ASSERT(svc->attrs, "invalid parameters\n");
	__ASSERT(svc->attr_count, "invalid parameters\n");

	/* Do no allow to register mandatory services twice */
	if (!bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GAP) ||
    72f2:	2800      	cmp	r0, #0
    72f4:	d0f2      	beq.n	72dc <bt_gatt_service_register+0x20>
	    !bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GATT)) {
		return -EALREADY;
	}

	err = gatt_register(svc);
    72f6:	0028      	movs	r0, r5
    72f8:	f7ff fd1e 	bl	6d38 <gatt_register>
    72fc:	1e03      	subs	r3, r0, #0
	if (err < 0) {
    72fe:	db09      	blt.n	7314 <bt_gatt_service_register+0x58>
    7300:	2314      	movs	r3, #20
    7302:	88a9      	ldrh	r1, [r5, #4]
		return err;
	}

	sc_indicate(&svc->attrs[0], &svc->attrs[svc->attr_count - 1]);
    7304:	6828      	ldr	r0, [r5, #0]
    7306:	4359      	muls	r1, r3
    7308:	1841      	adds	r1, r0, r1
    730a:	3904      	subs	r1, #4
    730c:	3010      	adds	r0, #16
    730e:	f7ff ffa7 	bl	7260 <sc_indicate.isra.10>

	return 0;
    7312:	0023      	movs	r3, r4
}
    7314:	0018      	movs	r0, r3
    7316:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    7318:	00001801 	.word	0x00001801

0000731c <bt_gatt_attr_next>:
	return BT_GATT_ITER_STOP;
}

struct bt_gatt_attr *bt_gatt_attr_next(const struct bt_gatt_attr *attr)
{
	struct bt_gatt_attr *next = NULL;
    731c:	2300      	movs	r3, #0

	return BT_GATT_ITER_STOP;
}

struct bt_gatt_attr *bt_gatt_attr_next(const struct bt_gatt_attr *attr)
{
    731e:	b507      	push	{r0, r1, r2, lr}
	struct bt_gatt_attr *next = NULL;
    7320:	9301      	str	r3, [sp, #4]

	bt_gatt_foreach_attr(attr->handle + 1, attr->handle + 1, find_next,
    7322:	8a00      	ldrh	r0, [r0, #16]
    7324:	ab01      	add	r3, sp, #4
    7326:	3001      	adds	r0, #1
    7328:	b280      	uxth	r0, r0
    732a:	0001      	movs	r1, r0
    732c:	4a02      	ldr	r2, [pc, #8]	; (7338 <bt_gatt_attr_next+0x1c>)
    732e:	f7ff ff57 	bl	71e0 <bt_gatt_foreach_attr>
			     &next);

	return next;
}
    7332:	9801      	ldr	r0, [sp, #4]
    7334:	bd0e      	pop	{r1, r2, r3, pc}
    7336:	46c0      	nop			; (mov r8, r8)
    7338:	00006b9f 	.word	0x00006b9f

0000733c <bt_gatt_attr_read_chrc>:
} __packed;

ssize_t bt_gatt_attr_read_chrc(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, void *buf,
			       u16_t len, u16_t offset)
{
    733c:	b5f0      	push	{r4, r5, r6, r7, lr}
    733e:	b08f      	sub	sp, #60	; 0x3c
    7340:	001f      	movs	r7, r3
    7342:	ab14      	add	r3, sp, #80	; 0x50
    7344:	881b      	ldrh	r3, [r3, #0]
	struct bt_gatt_chrc *chrc = attr->user_data;
    7346:	68ce      	ldr	r6, [r1, #12]
} __packed;

ssize_t bt_gatt_attr_read_chrc(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, void *buf,
			       u16_t len, u16_t offset)
{
    7348:	9005      	str	r0, [sp, #20]
    734a:	9307      	str	r3, [sp, #28]
    734c:	9206      	str	r2, [sp, #24]
	struct bt_gatt_chrc *chrc = attr->user_data;
	struct gatt_chrc pdu;
	const struct bt_gatt_attr *next;
	u8_t value_len;

	pdu.properties = chrc->properties;
    734e:	7932      	ldrb	r2, [r6, #4]
    7350:	ab09      	add	r3, sp, #36	; 0x24
	 * The Characteristic Value declaration contains the value of the
	 * characteristic. It is the first Attribute after the characteristic
	 * declaration. All characteristic definitions shall have a
	 * Characteristic Value declaration.
	 */
	next = bt_gatt_attr_next(attr);
    7352:	0008      	movs	r0, r1
} __packed;

ssize_t bt_gatt_attr_read_chrc(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, void *buf,
			       u16_t len, u16_t offset)
{
    7354:	000d      	movs	r5, r1
	struct bt_gatt_chrc *chrc = attr->user_data;
	struct gatt_chrc pdu;
	const struct bt_gatt_attr *next;
	u8_t value_len;

	pdu.properties = chrc->properties;
    7356:	701a      	strb	r2, [r3, #0]
	 * The Characteristic Value declaration contains the value of the
	 * characteristic. It is the first Attribute after the characteristic
	 * declaration. All characteristic definitions shall have a
	 * Characteristic Value declaration.
	 */
	next = bt_gatt_attr_next(attr);
    7358:	f7ff ffe0 	bl	731c <bt_gatt_attr_next>
    735c:	1e04      	subs	r4, r0, #0
	if (!next) {
    735e:	d111      	bne.n	7384 <bt_gatt_attr_read_chrc+0x48>
		BT_WARN("No value for characteristic at 0x%04x", attr->handle);
    7360:	4b1b      	ldr	r3, [pc, #108]	; (73d0 <bt_gatt_attr_read_chrc+0x94>)
    7362:	4a1c      	ldr	r2, [pc, #112]	; (73d4 <bt_gatt_attr_read_chrc+0x98>)
    7364:	9302      	str	r3, [sp, #8]
    7366:	8a2b      	ldrh	r3, [r5, #16]
    7368:	491b      	ldr	r1, [pc, #108]	; (73d8 <bt_gatt_attr_read_chrc+0x9c>)
    736a:	9301      	str	r3, [sp, #4]
    736c:	4b1b      	ldr	r3, [pc, #108]	; (73dc <bt_gatt_attr_read_chrc+0xa0>)
    736e:	481c      	ldr	r0, [pc, #112]	; (73e0 <bt_gatt_attr_read_chrc+0xa4>)
    7370:	9300      	str	r3, [sp, #0]
    7372:	4b1c      	ldr	r3, [pc, #112]	; (73e4 <bt_gatt_attr_read_chrc+0xa8>)
    7374:	f7fa fb04 	bl	1980 <printk>
		pdu.value_handle = 0x0000;
    7378:	2315      	movs	r3, #21
    737a:	aa04      	add	r2, sp, #16
    737c:	189b      	adds	r3, r3, r2
    737e:	701c      	strb	r4, [r3, #0]
    7380:	705c      	strb	r4, [r3, #1]
    7382:	e006      	b.n	7392 <bt_gatt_attr_read_chrc+0x56>
	} else {
		pdu.value_handle = sys_cpu_to_le16(next->handle);
    7384:	2315      	movs	r3, #21
    7386:	aa04      	add	r2, sp, #16
    7388:	189b      	adds	r3, r3, r2
    738a:	7c02      	ldrb	r2, [r0, #16]
    738c:	701a      	strb	r2, [r3, #0]
    738e:	7c42      	ldrb	r2, [r0, #17]
    7390:	705a      	strb	r2, [r3, #1]
    7392:	2017      	movs	r0, #23
	}
	value_len = sizeof(pdu.properties) + sizeof(pdu.value_handle);

	if (chrc->uuid->type == BT_UUID_TYPE_16) {
    7394:	6831      	ldr	r1, [r6, #0]
    7396:	aa04      	add	r2, sp, #16
    7398:	780b      	ldrb	r3, [r1, #0]
    739a:	1880      	adds	r0, r0, r2
    739c:	2b00      	cmp	r3, #0
    739e:	d105      	bne.n	73ac <bt_gatt_attr_read_chrc+0x70>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
    73a0:	884b      	ldrh	r3, [r1, #2]
    73a2:	7003      	strb	r3, [r0, #0]
    73a4:	0a1b      	lsrs	r3, r3, #8
    73a6:	7043      	strb	r3, [r0, #1]
		value_len += 2;
    73a8:	2305      	movs	r3, #5
    73aa:	e004      	b.n	73b6 <bt_gatt_attr_read_chrc+0x7a>
	} else {
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
    73ac:	3101      	adds	r1, #1
    73ae:	2210      	movs	r2, #16
    73b0:	f7f9 fcc3 	bl	d3a <memcpy>
		value_len += 16;
    73b4:	2313      	movs	r3, #19
	}

	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
    73b6:	9302      	str	r3, [sp, #8]
    73b8:	ab09      	add	r3, sp, #36	; 0x24
    73ba:	9301      	str	r3, [sp, #4]
    73bc:	9b07      	ldr	r3, [sp, #28]
    73be:	9a06      	ldr	r2, [sp, #24]
    73c0:	9300      	str	r3, [sp, #0]
    73c2:	0029      	movs	r1, r5
    73c4:	003b      	movs	r3, r7
    73c6:	9805      	ldr	r0, [sp, #20]
    73c8:	f7ff fe72 	bl	70b0 <bt_gatt_attr_read>
}
    73cc:	b00f      	add	sp, #60	; 0x3c
    73ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    73d0:	000154c4 	.word	0x000154c4
    73d4:	000154d1 	.word	0x000154d1
    73d8:	0001548b 	.word	0x0001548b
    73dc:	0001550f 	.word	0x0001550f
    73e0:	000162e6 	.word	0x000162e6
    73e4:	00017d64 	.word	0x00017d64

000073e8 <bt_gatt_attr_read_cep>:
}

ssize_t bt_gatt_attr_read_cep(struct bt_conn *conn,
			      const struct bt_gatt_attr *attr, void *buf,
			      u16_t len, u16_t offset)
{
    73e8:	b570      	push	{r4, r5, r6, lr}
    73ea:	b086      	sub	sp, #24
    73ec:	ac0a      	add	r4, sp, #40	; 0x28
    73ee:	8825      	ldrh	r5, [r4, #0]
	struct bt_gatt_cep *value = attr->user_data;
	u16_t props = sys_cpu_to_le16(value->properties);
    73f0:	68cc      	ldr	r4, [r1, #12]
    73f2:	8826      	ldrh	r6, [r4, #0]
    73f4:	2416      	movs	r4, #22
    73f6:	446c      	add	r4, sp
    73f8:	8026      	strh	r6, [r4, #0]

	return bt_gatt_attr_read(conn, attr, buf, len, offset, &props,
    73fa:	2602      	movs	r6, #2
    73fc:	9401      	str	r4, [sp, #4]
    73fe:	9602      	str	r6, [sp, #8]
    7400:	9500      	str	r5, [sp, #0]
    7402:	f7ff fe55 	bl	70b0 <bt_gatt_attr_read>
				 sizeof(props));
}
    7406:	b006      	add	sp, #24
    7408:	bd70      	pop	{r4, r5, r6, pc}
	...

0000740c <bt_gatt_notify>:
	return BT_GATT_ITER_CONTINUE;
}

int bt_gatt_notify(struct bt_conn *conn, const struct bt_gatt_attr *attr,
		   const void *data, u16_t len)
{
    740c:	b510      	push	{r4, lr}
    740e:	b086      	sub	sp, #24
    7410:	8a0c      	ldrh	r4, [r1, #16]
	struct notify_data nfy;

	__ASSERT(attr && attr->handle, "invalid parameters\n");

	if (conn) {
    7412:	2800      	cmp	r0, #0
    7414:	d003      	beq.n	741e <bt_gatt_notify+0x12>
		return gatt_notify(conn, attr->handle, data, len);
    7416:	0021      	movs	r1, r4
    7418:	f7ff fce2 	bl	6de0 <gatt_notify>
    741c:	e00f      	b.n	743e <bt_gatt_notify+0x32>
	}

	nfy.err = -ENOTCONN;
    741e:	2039      	movs	r0, #57	; 0x39
    7420:	4240      	negs	r0, r0
    7422:	9000      	str	r0, [sp, #0]
	nfy.attr = attr;
    7424:	9102      	str	r1, [sp, #8]
	nfy.type = BT_GATT_CCC_NOTIFY;
    7426:	4668      	mov	r0, sp
    7428:	2101      	movs	r1, #1
	nfy.data = data;
	nfy.len = len;
    742a:	8203      	strh	r3, [r0, #16]
		return gatt_notify(conn, attr->handle, data, len);
	}

	nfy.err = -ENOTCONN;
	nfy.attr = attr;
	nfy.type = BT_GATT_CCC_NOTIFY;
    742c:	8081      	strh	r1, [r0, #4]
	nfy.data = data;
    742e:	9203      	str	r2, [sp, #12]
	nfy.len = len;

	bt_gatt_foreach_attr(attr->handle, 0xffff, notify_cb, &nfy);
    7430:	0020      	movs	r0, r4
    7432:	466b      	mov	r3, sp
    7434:	4a03      	ldr	r2, [pc, #12]	; (7444 <bt_gatt_notify+0x38>)
    7436:	4904      	ldr	r1, [pc, #16]	; (7448 <bt_gatt_notify+0x3c>)
    7438:	f7ff fed2 	bl	71e0 <bt_gatt_foreach_attr>

	return nfy.err;
    743c:	9800      	ldr	r0, [sp, #0]
}
    743e:	b006      	add	sp, #24
    7440:	bd10      	pop	{r4, pc}
    7442:	46c0      	nop			; (mov r8, r8)
    7444:	00006f31 	.word	0x00006f31
    7448:	0000ffff 	.word	0x0000ffff

0000744c <bt_gatt_indicate>:

int bt_gatt_indicate(struct bt_conn *conn,
		     struct bt_gatt_indicate_params *params)
{
    744c:	b510      	push	{r4, lr}
	struct notify_data nfy;

	__ASSERT(params, "invalid parameters\n");
	__ASSERT(params->attr && params->attr->handle, "invalid parameters\n");

	if (conn) {
    744e:	2800      	cmp	r0, #0
    7450:	d002      	beq.n	7458 <bt_gatt_indicate+0xc>
		return gatt_indicate(conn, params);
    7452:	f7ff fd0b 	bl	6e6c <gatt_indicate>
    7456:	e002      	b.n	745e <bt_gatt_indicate+0x12>
    7458:	0008      	movs	r0, r1
    745a:	f7ff feeb 	bl	7234 <bt_gatt_indicate.part.9>
	nfy.params = params;

	bt_gatt_foreach_attr(params->attr->handle, 0xffff, notify_cb, &nfy);

	return nfy.err;
}
    745e:	bd10      	pop	{r4, pc}

00007460 <bt_gatt_connected>:
}

#endif /* CONFIG_BLUETOOTH_GATT_CLIENT */

void bt_gatt_connected(struct bt_conn *conn)
{
    7460:	b510      	push	{r4, lr}
    7462:	0003      	movs	r3, r0
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, connected_cb, conn);
    7464:	4a02      	ldr	r2, [pc, #8]	; (7470 <bt_gatt_connected+0x10>)
    7466:	4903      	ldr	r1, [pc, #12]	; (7474 <bt_gatt_connected+0x14>)
    7468:	2001      	movs	r0, #1
    746a:	f7ff feb9 	bl	71e0 <bt_gatt_foreach_attr>
#if defined(CONFIG_BLUETOOTH_GATT_CLIENT)
	add_subscriptions(conn);
#endif /* CONFIG_BLUETOOTH_GATT_CLIENT */
}
    746e:	bd10      	pop	{r4, pc}
    7470:	00006ce9 	.word	0x00006ce9
    7474:	0000ffff 	.word	0x0000ffff

00007478 <bt_gatt_disconnected>:

void bt_gatt_disconnected(struct bt_conn *conn)
{
    7478:	b510      	push	{r4, lr}
    747a:	0003      	movs	r3, r0
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    747c:	4a02      	ldr	r2, [pc, #8]	; (7488 <bt_gatt_disconnected+0x10>)
    747e:	4903      	ldr	r1, [pc, #12]	; (748c <bt_gatt_disconnected+0x14>)
    7480:	2001      	movs	r0, #1
    7482:	f7ff fead 	bl	71e0 <bt_gatt_foreach_attr>

#if defined(CONFIG_BLUETOOTH_GATT_CLIENT)
	remove_subscriptions(conn);
#endif /* CONFIG_BLUETOOTH_GATT_CLIENT */
}
    7486:	bd10      	pop	{r4, pc}
    7488:	00006fe9 	.word	0x00006fe9
    748c:	0000ffff 	.word	0x0000ffff

00007490 <sys_memcpy_swap>:
		 "Source and destination buffers must not overlap");

	src += length - 1;

	for (; length > 0; length--) {
		*((u8_t *)dst++) = *((u8_t *)src--);
    7490:	3901      	subs	r1, #1
		  (src > dst && (dst + length) <= src)),
		 "Source and destination buffers must not overlap");

	src += length - 1;

	for (; length > 0; length--) {
    7492:	2a00      	cmp	r2, #0
    7494:	d004      	beq.n	74a0 <sys_memcpy_swap+0x10>
		*((u8_t *)dst++) = *((u8_t *)src--);
    7496:	5c8b      	ldrb	r3, [r1, r2]
		  (src > dst && (dst + length) <= src)),
		 "Source and destination buffers must not overlap");

	src += length - 1;

	for (; length > 0; length--) {
    7498:	3a01      	subs	r2, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    749a:	7003      	strb	r3, [r0, #0]
    749c:	3001      	adds	r0, #1
    749e:	e7f8      	b.n	7492 <sys_memcpy_swap+0x2>
	}
}
    74a0:	4770      	bx	lr

000074a2 <sys_mem_swap>:
 *
 * @param buf A valid pointer on a memory area to swap
 * @param length Size of buf memory area
 */
static inline void sys_mem_swap(void *buf, size_t length)
{
    74a2:	b510      	push	{r4, lr}
    74a4:	1843      	adds	r3, r0, r1
    74a6:	0849      	lsrs	r1, r1, #1
    74a8:	1841      	adds	r1, r0, r1
    74aa:	3b01      	subs	r3, #1
	size_t i;

	for (i = 0; i < (length/2); i++) {
    74ac:	4288      	cmp	r0, r1
    74ae:	d005      	beq.n	74bc <sys_mem_swap+0x1a>
		u8_t tmp = ((u8_t *)buf)[i];
    74b0:	7802      	ldrb	r2, [r0, #0]

		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
    74b2:	781c      	ldrb	r4, [r3, #0]
    74b4:	7004      	strb	r4, [r0, #0]
		((u8_t *)buf)[length - 1 - i] = tmp;
    74b6:	701a      	strb	r2, [r3, #0]
    74b8:	3001      	adds	r0, #1
    74ba:	e7f6      	b.n	74aa <sys_mem_swap+0x8>
	}
}
    74bc:	bd10      	pop	{r4, pc}
	...

000074c0 <get_io_capa>:
static bool sc_local_pkey_valid;
static u8_t sc_public_key[64];

static u8_t get_io_capa(void)
{
	if (!bt_auth) {
    74c0:	4b12      	ldr	r3, [pc, #72]	; (750c <get_io_capa+0x4c>)

	if (bt_auth->passkey_display) {
		return BT_SMP_IO_DISPLAY_ONLY;
	}

	return BT_SMP_IO_NO_INPUT_OUTPUT;
    74c2:	2003      	movs	r0, #3
static bool sc_local_pkey_valid;
static u8_t sc_public_key[64];

static u8_t get_io_capa(void)
{
	if (!bt_auth) {
    74c4:	681b      	ldr	r3, [r3, #0]
    74c6:	2b00      	cmp	r3, #0
    74c8:	d01f      	beq.n	750a <get_io_capa+0x4a>
		return BT_SMP_IO_NO_INPUT_OUTPUT;
	}

	/* Passkey Confirmation is valid only for LE SC */
	if (bt_auth->passkey_display && bt_auth->passkey_entry &&
    74ca:	681a      	ldr	r2, [r3, #0]
    74cc:	2a00      	cmp	r2, #0
    74ce:	d00a      	beq.n	74e6 <get_io_capa+0x26>
    74d0:	6859      	ldr	r1, [r3, #4]
    74d2:	2900      	cmp	r1, #0
    74d4:	d007      	beq.n	74e6 <get_io_capa+0x26>
    74d6:	6899      	ldr	r1, [r3, #8]
	    (bt_auth->passkey_confirm || !sc_supported)) {
		return BT_SMP_IO_KEYBOARD_DISPLAY;
    74d8:	3001      	adds	r0, #1
	if (!bt_auth) {
		return BT_SMP_IO_NO_INPUT_OUTPUT;
	}

	/* Passkey Confirmation is valid only for LE SC */
	if (bt_auth->passkey_display && bt_auth->passkey_entry &&
    74da:	2900      	cmp	r1, #0
    74dc:	d115      	bne.n	750a <get_io_capa+0x4a>
	    (bt_auth->passkey_confirm || !sc_supported)) {
    74de:	490c      	ldr	r1, [pc, #48]	; (7510 <get_io_capa+0x50>)
    74e0:	7809      	ldrb	r1, [r1, #0]
    74e2:	2900      	cmp	r1, #0
    74e4:	d011      	beq.n	750a <get_io_capa+0x4a>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
	}

	/* DisplayYesNo is useful only for LE SC */
	if (sc_supported && bt_auth->passkey_display &&
    74e6:	490a      	ldr	r1, [pc, #40]	; (7510 <get_io_capa+0x50>)
    74e8:	7809      	ldrb	r1, [r1, #0]
    74ea:	2900      	cmp	r1, #0
    74ec:	d005      	beq.n	74fa <get_io_capa+0x3a>
    74ee:	2a00      	cmp	r2, #0
    74f0:	d003      	beq.n	74fa <get_io_capa+0x3a>
    74f2:	6899      	ldr	r1, [r3, #8]
	    bt_auth->passkey_confirm) {
		return BT_SMP_IO_DISPLAY_YESNO;
    74f4:	2001      	movs	r0, #1
	    (bt_auth->passkey_confirm || !sc_supported)) {
		return BT_SMP_IO_KEYBOARD_DISPLAY;
	}

	/* DisplayYesNo is useful only for LE SC */
	if (sc_supported && bt_auth->passkey_display &&
    74f6:	2900      	cmp	r1, #0
    74f8:	d107      	bne.n	750a <get_io_capa+0x4a>
	    bt_auth->passkey_confirm) {
		return BT_SMP_IO_DISPLAY_YESNO;
	}

	if (bt_auth->passkey_entry) {
    74fa:	685b      	ldr	r3, [r3, #4]
		return BT_SMP_IO_KEYBOARD_ONLY;
    74fc:	2002      	movs	r0, #2
	if (sc_supported && bt_auth->passkey_display &&
	    bt_auth->passkey_confirm) {
		return BT_SMP_IO_DISPLAY_YESNO;
	}

	if (bt_auth->passkey_entry) {
    74fe:	2b00      	cmp	r3, #0
    7500:	d103      	bne.n	750a <get_io_capa+0x4a>

	if (bt_auth->passkey_display) {
		return BT_SMP_IO_DISPLAY_ONLY;
	}

	return BT_SMP_IO_NO_INPUT_OUTPUT;
    7502:	3001      	adds	r0, #1

	if (bt_auth->passkey_entry) {
		return BT_SMP_IO_KEYBOARD_ONLY;
	}

	if (bt_auth->passkey_display) {
    7504:	2a00      	cmp	r2, #0
    7506:	d000      	beq.n	750a <get_io_capa+0x4a>
		return BT_SMP_IO_DISPLAY_ONLY;
    7508:	0018      	movs	r0, r3
	}

	return BT_SMP_IO_NO_INPUT_OUTPUT;
}
    750a:	4770      	bx	lr
    750c:	20002240 	.word	0x20002240
    7510:	200010a8 	.word	0x200010a8

00007514 <smp_security_request>:
}
#else
static u8_t smp_security_request(struct bt_smp *smp, struct net_buf *buf)
{
	return BT_SMP_ERR_CMD_NOTSUPP;
}
    7514:	2007      	movs	r0, #7
    7516:	4770      	bx	lr

00007518 <bt_smp_accept>:

	return true;
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    7518:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_smp *smp = &bt_smp_pool[i];

		if (smp->chan.chan.conn) {
    751a:	4a0c      	ldr	r2, [pc, #48]	; (754c <bt_smp_accept+0x34>)
    751c:	6813      	ldr	r3, [r2, #0]
    751e:	2b00      	cmp	r3, #0
    7520:	d104      	bne.n	752c <bt_smp_accept+0x14>
			continue;
		}

		smp->chan.chan.ops = &ops;
    7522:	480b      	ldr	r0, [pc, #44]	; (7550 <bt_smp_accept+0x38>)
    7524:	6050      	str	r0, [r2, #4]

		*chan = &smp->chan.chan;
    7526:	600a      	str	r2, [r1, #0]

		return 0;
    7528:	0018      	movs	r0, r3
    752a:	e00c      	b.n	7546 <bt_smp_accept+0x2e>
	}

	BT_ERR("No available SMP context for conn %p", conn);
    752c:	4b09      	ldr	r3, [pc, #36]	; (7554 <bt_smp_accept+0x3c>)
    752e:	9001      	str	r0, [sp, #4]
    7530:	9302      	str	r3, [sp, #8]
    7532:	4b09      	ldr	r3, [pc, #36]	; (7558 <bt_smp_accept+0x40>)
    7534:	4a09      	ldr	r2, [pc, #36]	; (755c <bt_smp_accept+0x44>)
    7536:	9300      	str	r3, [sp, #0]
    7538:	4909      	ldr	r1, [pc, #36]	; (7560 <bt_smp_accept+0x48>)
    753a:	4b0a      	ldr	r3, [pc, #40]	; (7564 <bt_smp_accept+0x4c>)
    753c:	480a      	ldr	r0, [pc, #40]	; (7568 <bt_smp_accept+0x50>)
    753e:	f7fa fa1f 	bl	1980 <printk>

	return -ENOMEM;
    7542:	200c      	movs	r0, #12
    7544:	4240      	negs	r0, r0
}
    7546:	b005      	add	sp, #20
    7548:	bd00      	pop	{pc}
    754a:	46c0      	nop			; (mov r8, r8)
    754c:	200010ec 	.word	0x200010ec
    7550:	20000798 	.word	0x20000798
    7554:	000154c4 	.word	0x000154c4
    7558:	000154c9 	.word	0x000154c9
    755c:	00015484 	.word	0x00015484
    7560:	0001548b 	.word	0x0001548b
    7564:	00017d9e 	.word	0x00017d9e
    7568:	0001631c 	.word	0x0001631c

0000756c <atomic_set_bit>:
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_or(ATOMIC_ELEM(target, bit), mask);
    756c:	221f      	movs	r2, #31
 * @param bit Bit number (starting from 0).
 *
 * @return N/A
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
    756e:	000b      	movs	r3, r1
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_or(ATOMIC_ELEM(target, bit), mask);
    7570:	400a      	ands	r2, r1
    7572:	2101      	movs	r1, #1
 * @param bit Bit number (starting from 0).
 *
 * @return N/A
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
    7574:	b510      	push	{r4, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_or(ATOMIC_ELEM(target, bit), mask);
    7576:	095b      	lsrs	r3, r3, #5
    7578:	009b      	lsls	r3, r3, #2
    757a:	4091      	lsls	r1, r2
    757c:	18c0      	adds	r0, r0, r3
    757e:	f00c faf2 	bl	13b66 <atomic_or>
}
    7582:	bd10      	pop	{r4, pc}

00007584 <bt_smp_aes_cmac>:
 *          : len    ( length of the message in octets )
 * Output   : out    ( message authentication code )
 */
static int bt_smp_aes_cmac(const u8_t *key, const u8_t *in, size_t len,
			   u8_t *out)
{
    7584:	b570      	push	{r4, r5, r6, lr}
    7586:	b0c2      	sub	sp, #264	; 0x108
    7588:	000d      	movs	r5, r1
    758a:	0016      	movs	r6, r2
	struct tc_aes_key_sched_struct sched;
	struct tc_cmac_struct state;

	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
    758c:	0001      	movs	r1, r0
    758e:	aa16      	add	r2, sp, #88	; 0x58
    7590:	4668      	mov	r0, sp
 *          : len    ( length of the message in octets )
 * Output   : out    ( message authentication code )
 */
static int bt_smp_aes_cmac(const u8_t *key, const u8_t *in, size_t len,
			   u8_t *out)
{
    7592:	001c      	movs	r4, r3
	struct tc_aes_key_sched_struct sched;
	struct tc_cmac_struct state;

	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
    7594:	f7fa fd4e 	bl	2034 <tc_cmac_setup>
    7598:	2800      	cmp	r0, #0
    759a:	d102      	bne.n	75a2 <bt_smp_aes_cmac+0x1e>
		return -EIO;
    759c:	2005      	movs	r0, #5
    759e:	4240      	negs	r0, r0
    75a0:	e00d      	b.n	75be <bt_smp_aes_cmac+0x3a>
	}

	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
    75a2:	0032      	movs	r2, r6
    75a4:	0029      	movs	r1, r5
    75a6:	4668      	mov	r0, sp
    75a8:	f7fa fd70 	bl	208c <tc_cmac_update>
    75ac:	2800      	cmp	r0, #0
    75ae:	d0f5      	beq.n	759c <bt_smp_aes_cmac+0x18>
		return -EIO;
	}

	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
    75b0:	4669      	mov	r1, sp
    75b2:	0020      	movs	r0, r4
    75b4:	f7fa fdd0 	bl	2158 <tc_cmac_final>
    75b8:	2800      	cmp	r0, #0
    75ba:	d0ef      	beq.n	759c <bt_smp_aes_cmac+0x18>
		return -EIO;
	}

	return 0;
    75bc:	2000      	movs	r0, #0
}
    75be:	b042      	add	sp, #264	; 0x108
    75c0:	bd70      	pop	{r4, r5, r6, pc}
	...

000075c4 <smp_sign_buf>:
 * msg buffer contains message itself, 32 bit count and signature,
 * so total buffer size is len + 4 + 8 octets.
 * API is Little Endian to make it suitable for Bluetooth.
 */
static int smp_sign_buf(const u8_t *key, u8_t *msg, u16_t len)
{
    75c4:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t *m = msg;
	u32_t cnt = UNALIGNED_GET((u32_t *)&msg[len]);
    75c6:	188c      	adds	r4, r1, r2
 * msg buffer contains message itself, 32 bit count and signature,
 * so total buffer size is len + 4 + 8 octets.
 * API is Little Endian to make it suitable for Bluetooth.
 */
static int smp_sign_buf(const u8_t *key, u8_t *msg, u16_t len)
{
    75c8:	0006      	movs	r6, r0
	u8_t *m = msg;
	u32_t cnt = UNALIGNED_GET((u32_t *)&msg[len]);
    75ca:	7860      	ldrb	r0, [r4, #1]
 * msg buffer contains message itself, 32 bit count and signature,
 * so total buffer size is len + 4 + 8 octets.
 * API is Little Endian to make it suitable for Bluetooth.
 */
static int smp_sign_buf(const u8_t *key, u8_t *msg, u16_t len)
{
    75cc:	000d      	movs	r5, r1
	u8_t *m = msg;
	u32_t cnt = UNALIGNED_GET((u32_t *)&msg[len]);
    75ce:	78a3      	ldrb	r3, [r4, #2]
    75d0:	7821      	ldrb	r1, [r4, #0]
    75d2:	0200      	lsls	r0, r0, #8
    75d4:	4308      	orrs	r0, r1
    75d6:	041b      	lsls	r3, r3, #16
    75d8:	4303      	orrs	r3, r0
    75da:	0018      	movs	r0, r3
    75dc:	78e3      	ldrb	r3, [r4, #3]
	int err;

	BT_DBG("Signing msg %s len %u key %s", bt_hex(msg, len), len,
	       bt_hex(key, 16));

	sys_mem_swap(m, len + sizeof(cnt));
    75de:	1d17      	adds	r7, r2, #4
 * API is Little Endian to make it suitable for Bluetooth.
 */
static int smp_sign_buf(const u8_t *key, u8_t *msg, u16_t len)
{
	u8_t *m = msg;
	u32_t cnt = UNALIGNED_GET((u32_t *)&msg[len]);
    75e0:	061b      	lsls	r3, r3, #24
 * msg buffer contains message itself, 32 bit count and signature,
 * so total buffer size is len + 4 + 8 octets.
 * API is Little Endian to make it suitable for Bluetooth.
 */
static int smp_sign_buf(const u8_t *key, u8_t *msg, u16_t len)
{
    75e2:	b08d      	sub	sp, #52	; 0x34
	u8_t *m = msg;
	u32_t cnt = UNALIGNED_GET((u32_t *)&msg[len]);
    75e4:	4303      	orrs	r3, r0
	int err;

	BT_DBG("Signing msg %s len %u key %s", bt_hex(msg, len), len,
	       bt_hex(key, 16));

	sys_mem_swap(m, len + sizeof(cnt));
    75e6:	0039      	movs	r1, r7
    75e8:	0028      	movs	r0, r5
 * API is Little Endian to make it suitable for Bluetooth.
 */
static int smp_sign_buf(const u8_t *key, u8_t *msg, u16_t len)
{
	u8_t *m = msg;
	u32_t cnt = UNALIGNED_GET((u32_t *)&msg[len]);
    75ea:	9303      	str	r3, [sp, #12]
	int err;

	BT_DBG("Signing msg %s len %u key %s", bt_hex(msg, len), len,
	       bt_hex(key, 16));

	sys_mem_swap(m, len + sizeof(cnt));
    75ec:	f7ff ff59 	bl	74a2 <sys_mem_swap>
	sys_memcpy_swap(key_s, key, 16);
    75f0:	0031      	movs	r1, r6
    75f2:	2210      	movs	r2, #16
    75f4:	a804      	add	r0, sp, #16
    75f6:	f7ff ff4b 	bl	7490 <sys_memcpy_swap>

	err = bt_smp_aes_cmac(key_s, m, len + sizeof(cnt), tmp);
    75fa:	ab08      	add	r3, sp, #32
    75fc:	003a      	movs	r2, r7
    75fe:	0029      	movs	r1, r5
    7600:	a804      	add	r0, sp, #16
    7602:	f7ff ffbf 	bl	7584 <bt_smp_aes_cmac>
    7606:	1e06      	subs	r6, r0, #0
	if (err) {
    7608:	d00a      	beq.n	7620 <smp_sign_buf+0x5c>
		BT_ERR("Data signing failed");
    760a:	4b10      	ldr	r3, [pc, #64]	; (764c <smp_sign_buf+0x88>)
    760c:	4a10      	ldr	r2, [pc, #64]	; (7650 <smp_sign_buf+0x8c>)
    760e:	9301      	str	r3, [sp, #4]
    7610:	4b10      	ldr	r3, [pc, #64]	; (7654 <smp_sign_buf+0x90>)
    7612:	4911      	ldr	r1, [pc, #68]	; (7658 <smp_sign_buf+0x94>)
    7614:	9300      	str	r3, [sp, #0]
    7616:	4811      	ldr	r0, [pc, #68]	; (765c <smp_sign_buf+0x98>)
    7618:	4b11      	ldr	r3, [pc, #68]	; (7660 <smp_sign_buf+0x9c>)
    761a:	f7fa f9b1 	bl	1980 <printk>
		return err;
    761e:	e011      	b.n	7644 <smp_sign_buf+0x80>
	}

	sys_mem_swap(tmp, sizeof(tmp));
    7620:	2110      	movs	r1, #16
    7622:	a808      	add	r0, sp, #32
    7624:	f7ff ff3d 	bl	74a2 <sys_mem_swap>
	memcpy(tmp + 4, &cnt, sizeof(cnt));
    7628:	2204      	movs	r2, #4
    762a:	a903      	add	r1, sp, #12
    762c:	a809      	add	r0, sp, #36	; 0x24
    762e:	f7f9 fb84 	bl	d3a <memcpy>

	/* Swap original message back */
	sys_mem_swap(m, len + sizeof(cnt));
    7632:	0039      	movs	r1, r7
    7634:	0028      	movs	r0, r5
    7636:	f7ff ff34 	bl	74a2 <sys_mem_swap>

	memcpy(sig, tmp + 4, 12);
    763a:	220c      	movs	r2, #12
    763c:	a909      	add	r1, sp, #36	; 0x24
    763e:	0020      	movs	r0, r4
    7640:	f7f9 fb7b 	bl	d3a <memcpy>

	BT_DBG("sig %s", bt_hex(sig, 12));

	return 0;
}
    7644:	0030      	movs	r0, r6
    7646:	b00d      	add	sp, #52	; 0x34
    7648:	bdf0      	pop	{r4, r5, r6, r7, pc}
    764a:	46c0      	nop			; (mov r8, r8)
    764c:	000154c4 	.word	0x000154c4
    7650:	00015484 	.word	0x00015484
    7654:	000154c9 	.word	0x000154c9
    7658:	0001548b 	.word	0x0001548b
    765c:	00016351 	.word	0x00016351
    7660:	00017e8d 	.word	0x00017e8d

00007664 <smp_f4>:
	return 0;
}

static int smp_f4(const u8_t *u, const u8_t *v, const u8_t *x,
		  u8_t z, u8_t res[16])
{
    7664:	b570      	push	{r4, r5, r6, lr}
    7666:	000e      	movs	r6, r1
    7668:	0014      	movs	r4, r2
    766a:	001d      	movs	r5, r3
    766c:	b096      	sub	sp, #88	; 0x58
	 * Core Spec 4.2 Vol 3 Part H 2.2.5
	 *
	 * note:
	 * bt_smp_aes_cmac uses BE data and smp_f4 accept LE so we swap
	 */
	sys_memcpy_swap(m, u, 32);
    766e:	0001      	movs	r1, r0
    7670:	2220      	movs	r2, #32
    7672:	a805      	add	r0, sp, #20
    7674:	f7ff ff0c 	bl	7490 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
    7678:	2220      	movs	r2, #32
    767a:	0031      	movs	r1, r6
    767c:	a80d      	add	r0, sp, #52	; 0x34
    767e:	f7ff ff07 	bl	7490 <sys_memcpy_swap>
	m[64] = z;
    7682:	ab15      	add	r3, sp, #84	; 0x54

	sys_memcpy_swap(xs, x, 16);
    7684:	0021      	movs	r1, r4
    7686:	2210      	movs	r2, #16
    7688:	a801      	add	r0, sp, #4
	 * note:
	 * bt_smp_aes_cmac uses BE data and smp_f4 accept LE so we swap
	 */
	sys_memcpy_swap(m, u, 32);
	sys_memcpy_swap(m + 32, v, 32);
	m[64] = z;
    768a:	701d      	strb	r5, [r3, #0]

	sys_memcpy_swap(xs, x, 16);
    768c:	f7ff ff00 	bl	7490 <sys_memcpy_swap>

	err = bt_smp_aes_cmac(xs, m, sizeof(m), res);
    7690:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    7692:	2241      	movs	r2, #65	; 0x41
    7694:	a905      	add	r1, sp, #20
    7696:	a801      	add	r0, sp, #4
    7698:	f7ff ff74 	bl	7584 <bt_smp_aes_cmac>
    769c:	1e04      	subs	r4, r0, #0
	if (err) {
    769e:	d103      	bne.n	76a8 <smp_f4+0x44>
		return err;
	}

	sys_mem_swap(res, 16);
    76a0:	2110      	movs	r1, #16
    76a2:	981a      	ldr	r0, [sp, #104]	; 0x68
    76a4:	f7ff fefd 	bl	74a2 <sys_mem_swap>

	BT_DBG("res %s", bt_hex(res, 16));

	return err;
}
    76a8:	0020      	movs	r0, r4
    76aa:	b016      	add	sp, #88	; 0x58
    76ac:	bd70      	pop	{r4, r5, r6, pc}

000076ae <smp_f6>:
}

static int smp_f6(const u8_t *w, const u8_t *n1, const u8_t *n2,
		  const u8_t *r, const u8_t *iocap, const bt_addr_le_t *a1,
		  const bt_addr_le_t *a2, u8_t *check)
{
    76ae:	b5f0      	push	{r4, r5, r6, r7, lr}
    76b0:	0017      	movs	r7, r2
    76b2:	001e      	movs	r6, r3
    76b4:	b099      	sub	sp, #100	; 0x64
    76b6:	9001      	str	r0, [sp, #4]
	BT_DBG("w %s", bt_hex(w, 16));
	BT_DBG("n1 %s n2 %s", bt_hex(n1, 16), bt_hex(n2, 16));
	BT_DBG("r %s io_cap %s", bt_hex(r, 16), bt_hex(iocap, 3));
	BT_DBG("a1 %s a2 %s", bt_hex(a1, 7), bt_hex(a2, 7));

	sys_memcpy_swap(m, n1, 16);
    76b8:	2210      	movs	r2, #16
    76ba:	a807      	add	r0, sp, #28
}

static int smp_f6(const u8_t *w, const u8_t *n1, const u8_t *n2,
		  const u8_t *r, const u8_t *iocap, const bt_addr_le_t *a1,
		  const bt_addr_le_t *a2, u8_t *check)
{
    76bc:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
    76be:	9c20      	ldr	r4, [sp, #128]	; 0x80
	BT_DBG("w %s", bt_hex(w, 16));
	BT_DBG("n1 %s n2 %s", bt_hex(n1, 16), bt_hex(n2, 16));
	BT_DBG("r %s io_cap %s", bt_hex(r, 16), bt_hex(iocap, 3));
	BT_DBG("a1 %s a2 %s", bt_hex(a1, 7), bt_hex(a2, 7));

	sys_memcpy_swap(m, n1, 16);
    76c0:	f7ff fee6 	bl	7490 <sys_memcpy_swap>
	sys_memcpy_swap(m + 16, n2, 16);
    76c4:	2210      	movs	r2, #16
    76c6:	0039      	movs	r1, r7
    76c8:	a80b      	add	r0, sp, #44	; 0x2c
    76ca:	f7ff fee1 	bl	7490 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, r, 16);
    76ce:	2210      	movs	r2, #16
    76d0:	0031      	movs	r1, r6
    76d2:	a80f      	add	r0, sp, #60	; 0x3c
    76d4:	f7ff fedc 	bl	7490 <sys_memcpy_swap>
	sys_memcpy_swap(m + 48, iocap, 3);
    76d8:	2203      	movs	r2, #3
    76da:	991e      	ldr	r1, [sp, #120]	; 0x78
    76dc:	a813      	add	r0, sp, #76	; 0x4c
    76de:	f7ff fed7 	bl	7490 <sys_memcpy_swap>

	m[51] = a1->type;
    76e2:	2347      	movs	r3, #71	; 0x47
    76e4:	782a      	ldrb	r2, [r5, #0]
    76e6:	a902      	add	r1, sp, #8
    76e8:	185b      	adds	r3, r3, r1
	memcpy(m + 52, a1->a.val, 6);
    76ea:	3501      	adds	r5, #1
	sys_memcpy_swap(m, n1, 16);
	sys_memcpy_swap(m + 16, n2, 16);
	sys_memcpy_swap(m + 32, r, 16);
	sys_memcpy_swap(m + 48, iocap, 3);

	m[51] = a1->type;
    76ec:	701a      	strb	r2, [r3, #0]
	memcpy(m + 52, a1->a.val, 6);
    76ee:	0029      	movs	r1, r5
    76f0:	2206      	movs	r2, #6
    76f2:	a814      	add	r0, sp, #80	; 0x50
    76f4:	f7f9 fb21 	bl	d3a <memcpy>
	sys_memcpy_swap(m + 52, a1->a.val, 6);
    76f8:	2206      	movs	r2, #6
    76fa:	0029      	movs	r1, r5
    76fc:	a814      	add	r0, sp, #80	; 0x50
    76fe:	f7ff fec7 	bl	7490 <sys_memcpy_swap>

	m[58] = a2->type;
    7702:	234e      	movs	r3, #78	; 0x4e
    7704:	7822      	ldrb	r2, [r4, #0]
    7706:	a902      	add	r1, sp, #8
    7708:	185b      	adds	r3, r3, r1
    770a:	701a      	strb	r2, [r3, #0]
	memcpy(m + 59, a2->a.val, 6);
    770c:	234f      	movs	r3, #79	; 0x4f
    770e:	a802      	add	r0, sp, #8
    7710:	3401      	adds	r4, #1
    7712:	181b      	adds	r3, r3, r0
    7714:	0021      	movs	r1, r4
    7716:	2206      	movs	r2, #6
    7718:	0018      	movs	r0, r3
    771a:	f7f9 fb0e 	bl	d3a <memcpy>
	sys_memcpy_swap(m + 59, a2->a.val, 6);
    771e:	234f      	movs	r3, #79	; 0x4f
    7720:	a802      	add	r0, sp, #8
    7722:	181b      	adds	r3, r3, r0
    7724:	0018      	movs	r0, r3
    7726:	0021      	movs	r1, r4
    7728:	2206      	movs	r2, #6
    772a:	f7ff feb1 	bl	7490 <sys_memcpy_swap>

	sys_memcpy_swap(ws, w, 16);
    772e:	2210      	movs	r2, #16
    7730:	9901      	ldr	r1, [sp, #4]
    7732:	a803      	add	r0, sp, #12
    7734:	f7ff feac 	bl	7490 <sys_memcpy_swap>

	err = bt_smp_aes_cmac(ws, m, sizeof(m), check);
    7738:	9b21      	ldr	r3, [sp, #132]	; 0x84
    773a:	2241      	movs	r2, #65	; 0x41
    773c:	a907      	add	r1, sp, #28
    773e:	a803      	add	r0, sp, #12
    7740:	f7ff ff20 	bl	7584 <bt_smp_aes_cmac>
    7744:	1e04      	subs	r4, r0, #0
	if (err) {
    7746:	d103      	bne.n	7750 <smp_f6+0xa2>
		return err;
	}

	BT_DBG("res %s", bt_hex(check, 16));

	sys_mem_swap(check, 16);
    7748:	2110      	movs	r1, #16
    774a:	9821      	ldr	r0, [sp, #132]	; 0x84
    774c:	f7ff fea9 	bl	74a2 <sys_mem_swap>

	return 0;
}
    7750:	0020      	movs	r0, r4
    7752:	b019      	add	sp, #100	; 0x64
    7754:	bdf0      	pop	{r4, r5, r6, r7, pc}

00007756 <atomic_test_and_clear_bit>:
 *
 * @return 1 if the bit was set, 0 if it wasn't.
 */
static inline int atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    7756:	231f      	movs	r3, #31
 * @param bit Bit number (starting from 0).
 *
 * @return 1 if the bit was set, 0 if it wasn't.
 */
static inline int atomic_test_and_clear_bit(atomic_t *target, int bit)
{
    7758:	b510      	push	{r4, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
    775a:	2401      	movs	r4, #1
    775c:	400b      	ands	r3, r1
    775e:	409c      	lsls	r4, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    7760:	43e2      	mvns	r2, r4
    7762:	094b      	lsrs	r3, r1, #5
    7764:	009b      	lsls	r3, r3, #2
    7766:	18c0      	adds	r0, r0, r3
    7768:	0011      	movs	r1, r2
    776a:	f00c fa07 	bl	13b7c <atomic_and>

	return (old & mask) != 0;
    776e:	4020      	ands	r0, r4
    7770:	1e44      	subs	r4, r0, #1
    7772:	41a0      	sbcs	r0, r4
}
    7774:	bd10      	pop	{r4, pc}

00007776 <smp_reset>:
	return BT_FEAT_SC(bt_dev.features);
}
#endif /* CONFIG_BLUETOOTH_BREDR */

static void smp_reset(struct bt_smp *smp)
{
    7776:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7778:	0004      	movs	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    777a:	6805      	ldr	r5, [r0, #0]

	k_delayed_work_cancel(&smp->work);
    777c:	3071      	adds	r0, #113	; 0x71
    777e:	30ff      	adds	r0, #255	; 0xff
    7780:	f00d fb8e 	bl	14ea0 <k_delayed_work_cancel>

	smp->method = JUST_WORKS;
	atomic_set(&smp->allowed_cmds, 0);
    7784:	0027      	movs	r7, r4
{
	struct bt_conn *conn = smp->chan.chan.conn;

	k_delayed_work_cancel(&smp->work);

	smp->method = JUST_WORKS;
    7786:	0023      	movs	r3, r4
    7788:	2600      	movs	r6, #0
    778a:	3398      	adds	r3, #152	; 0x98
	atomic_set(&smp->allowed_cmds, 0);
    778c:	3790      	adds	r7, #144	; 0x90
{
	struct bt_conn *conn = smp->chan.chan.conn;

	k_delayed_work_cancel(&smp->work);

	smp->method = JUST_WORKS;
    778e:	701e      	strb	r6, [r3, #0]
	atomic_set(&smp->allowed_cmds, 0);
    7790:	0031      	movs	r1, r6
    7792:	0038      	movs	r0, r7
    7794:	f00c f9dd 	bl	13b52 <atomic_set>
	atomic_set(smp->flags, 0);
    7798:	0020      	movs	r0, r4
    779a:	0031      	movs	r1, r6
    779c:	3094      	adds	r0, #148	; 0x94
    779e:	f00c f9d8 	bl	13b52 <atomic_set>

	if (conn->required_sec_level != conn->sec_level) {
    77a2:	7a2b      	ldrb	r3, [r5, #8]
    77a4:	7a6a      	ldrb	r2, [r5, #9]
    77a6:	429a      	cmp	r2, r3
    77a8:	d000      	beq.n	77ac <smp_reset+0x36>
		/* TODO report error */
		/* reset required security level in case of error */
		conn->required_sec_level = conn->sec_level;
    77aa:	726b      	strb	r3, [r5, #9]
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
		return;
	}

	if (IS_ENABLED(CONFIG_BLUETOOTH_PERIPHERAL)) {
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
    77ac:	0038      	movs	r0, r7
    77ae:	2101      	movs	r1, #1
    77b0:	f7ff fedc 	bl	756c <atomic_set_bit>
	}
}
    77b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000077b8 <smp_pairing_failed>:

	return 0;
}

static u8_t smp_pairing_failed(struct bt_smp *smp, struct net_buf *buf)
{
    77b8:	b530      	push	{r4, r5, lr}
    77ba:	0004      	movs	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
	struct bt_smp_pairing_fail *req = (void *)buf->data;

	BT_ERR("reason 0x%x", req->reason);
    77bc:	4b16      	ldr	r3, [pc, #88]	; (7818 <smp_pairing_failed+0x60>)

	return 0;
}

static u8_t smp_pairing_failed(struct bt_smp *smp, struct net_buf *buf)
{
    77be:	b085      	sub	sp, #20
	struct bt_conn *conn = smp->chan.chan.conn;
    77c0:	6805      	ldr	r5, [r0, #0]
	struct bt_smp_pairing_fail *req = (void *)buf->data;

	BT_ERR("reason 0x%x", req->reason);
    77c2:	9302      	str	r3, [sp, #8]
    77c4:	688b      	ldr	r3, [r1, #8]
    77c6:	4a15      	ldr	r2, [pc, #84]	; (781c <smp_pairing_failed+0x64>)
    77c8:	781b      	ldrb	r3, [r3, #0]
    77ca:	4915      	ldr	r1, [pc, #84]	; (7820 <smp_pairing_failed+0x68>)
    77cc:	9301      	str	r3, [sp, #4]
    77ce:	4b15      	ldr	r3, [pc, #84]	; (7824 <smp_pairing_failed+0x6c>)
    77d0:	4815      	ldr	r0, [pc, #84]	; (7828 <smp_pairing_failed+0x70>)
    77d2:	9300      	str	r3, [sp, #0]
    77d4:	4b15      	ldr	r3, [pc, #84]	; (782c <smp_pairing_failed+0x74>)
    77d6:	f7fa f8d3 	bl	1980 <printk>
	 * for now this to avoid warning about unused variable when debugs are
	 * disabled
	 */
	ARG_UNUSED(req);

	switch (smp->method) {
    77da:	0023      	movs	r3, r4
    77dc:	3398      	adds	r3, #152	; 0x98
    77de:	781b      	ldrb	r3, [r3, #0]
    77e0:	3b01      	subs	r3, #1
    77e2:	2b02      	cmp	r3, #2
    77e4:	d804      	bhi.n	77f0 <smp_pairing_failed+0x38>
	case PASSKEY_INPUT:
	case PASSKEY_DISPLAY:
	case PASSKEY_CONFIRM:
		bt_auth->cancel(conn);
    77e6:	4b12      	ldr	r3, [pc, #72]	; (7830 <smp_pairing_failed+0x78>)
    77e8:	0028      	movs	r0, r5
    77ea:	681b      	ldr	r3, [r3, #0]
    77ec:	68db      	ldr	r3, [r3, #12]
    77ee:	4798      	blx	r3

	/*
	 * Pairing Failed command may be sent at any time during the pairing,
	 * so if there are any keys distributed, shall be cleared.
	 */
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
    77f0:	0020      	movs	r0, r4
    77f2:	2102      	movs	r1, #2
    77f4:	3094      	adds	r0, #148	; 0x94
    77f6:	f7fa fe1a 	bl	242e <atomic_test_bit>
    77fa:	2800      	cmp	r0, #0
    77fc:	d005      	beq.n	780a <smp_pairing_failed+0x52>
	    smp->chan.chan.conn->le.keys) {
    77fe:	6823      	ldr	r3, [r4, #0]
    7800:	6fd8      	ldr	r0, [r3, #124]	; 0x7c

	/*
	 * Pairing Failed command may be sent at any time during the pairing,
	 * so if there are any keys distributed, shall be cleared.
	 */
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
    7802:	2800      	cmp	r0, #0
    7804:	d001      	beq.n	780a <smp_pairing_failed+0x52>
	    smp->chan.chan.conn->le.keys) {
		bt_keys_clear(smp->chan.chan.conn->le.keys);
    7806:	f001 fd11 	bl	922c <bt_keys_clear>
			sc_derive_link_key(smp);
		}
	}
#endif /* CONFIG_BLUETOOTH_BREDR */

	smp_reset(smp);
    780a:	0020      	movs	r0, r4
    780c:	f7ff ffb3 	bl	7776 <smp_reset>

	smp_pairing_complete(smp, req->reason);

	/* return no error to avoid sending Pairing Failed in response */
	return 0;
}
    7810:	2000      	movs	r0, #0
    7812:	b005      	add	sp, #20
    7814:	bd30      	pop	{r4, r5, pc}
    7816:	46c0      	nop			; (mov r8, r8)
    7818:	000154c4 	.word	0x000154c4
    781c:	00015484 	.word	0x00015484
    7820:	0001548b 	.word	0x0001548b
    7824:	000154c9 	.word	0x000154c9
    7828:	00016375 	.word	0x00016375
    782c:	00017de5 	.word	0x00017de5
    7830:	20002240 	.word	0x20002240

00007834 <bt_smp_disconnected>:
	k_delayed_work_init(&smp->work, smp_timeout);
	smp_reset(smp);
}

static void bt_smp_disconnected(struct bt_l2cap_chan *chan)
{
    7834:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp *smp = CONTAINER_OF(chan, struct bt_smp, chan);
	struct bt_keys *keys = chan->conn->le.keys;
    7836:	6803      	ldr	r3, [r0, #0]
	k_delayed_work_init(&smp->work, smp_timeout);
	smp_reset(smp);
}

static void bt_smp_disconnected(struct bt_l2cap_chan *chan)
{
    7838:	0005      	movs	r5, r0
	struct bt_smp *smp = CONTAINER_OF(chan, struct bt_smp, chan);
	struct bt_keys *keys = chan->conn->le.keys;
    783a:	6fdc      	ldr	r4, [r3, #124]	; 0x7c

	BT_DBG("chan %p cid 0x%04x", chan,
	       CONTAINER_OF(chan, struct bt_l2cap_le_chan, chan)->tx.cid);

	k_delayed_work_cancel(&smp->work);
    783c:	3071      	adds	r0, #113	; 0x71
    783e:	30ff      	adds	r0, #255	; 0xff
    7840:	f00d fb2e 	bl	14ea0 <k_delayed_work_cancel>

	if (keys) {
    7844:	2c00      	cmp	r4, #0
    7846:	d00d      	beq.n	7864 <bt_smp_disconnected+0x30>
		/*
		 * If debug keys were used for pairing remove them.
		 * No keys indicate no bonding so free keys storage.
		 */
		if (!keys->keys ||
    7848:	89a3      	ldrh	r3, [r4, #12]
    784a:	2b00      	cmp	r3, #0
    784c:	d103      	bne.n	7856 <bt_smp_disconnected+0x22>
		    atomic_test_bit(keys->flags, BT_KEYS_DEBUG)) {
			bt_keys_clear(keys);
    784e:	0020      	movs	r0, r4
    7850:	f001 fcec 	bl	922c <bt_keys_clear>
    7854:	e006      	b.n	7864 <bt_smp_disconnected+0x30>
		/*
		 * If debug keys were used for pairing remove them.
		 * No keys indicate no bonding so free keys storage.
		 */
		if (!keys->keys ||
		    atomic_test_bit(keys->flags, BT_KEYS_DEBUG)) {
    7856:	0020      	movs	r0, r4
    7858:	2101      	movs	r1, #1
    785a:	3008      	adds	r0, #8
    785c:	f7fa fde7 	bl	242e <atomic_test_bit>
	if (keys) {
		/*
		 * If debug keys were used for pairing remove them.
		 * No keys indicate no bonding so free keys storage.
		 */
		if (!keys->keys ||
    7860:	2800      	cmp	r0, #0
    7862:	d1f4      	bne.n	784e <bt_smp_disconnected+0x1a>
		    atomic_test_bit(keys->flags, BT_KEYS_DEBUG)) {
			bt_keys_clear(keys);
		}
	}

	memset(smp, 0, sizeof(*smp));
    7864:	22cc      	movs	r2, #204	; 0xcc
    7866:	0028      	movs	r0, r5
    7868:	0052      	lsls	r2, r2, #1
    786a:	2100      	movs	r1, #0
    786c:	f7f9 fa8f 	bl	d8e <memset>
}
    7870:	bd70      	pop	{r4, r5, r6, pc}
	...

00007874 <smp_timeout>:

	smp_reset(smp);
}

static void smp_timeout(struct k_work *work)
{
    7874:	b573      	push	{r0, r1, r4, r5, r6, lr}
    7876:	0004      	movs	r4, r0

	/*
	 * If SMP timeout occurred during key distribution we should assume
	 * pairing failed and don't store any keys from this pairing.
	 */
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
    7878:	0025      	movs	r5, r4
	smp_reset(smp);
}

static void smp_timeout(struct k_work *work)
{
	struct bt_smp *smp = CONTAINER_OF(work, struct bt_smp, work);
    787a:	0006      	movs	r6, r0

	BT_ERR("SMP Timeout");
    787c:	4b10      	ldr	r3, [pc, #64]	; (78c0 <smp_timeout+0x4c>)
    787e:	4911      	ldr	r1, [pc, #68]	; (78c4 <smp_timeout+0x50>)
    7880:	9301      	str	r3, [sp, #4]
    7882:	4b11      	ldr	r3, [pc, #68]	; (78c8 <smp_timeout+0x54>)
    7884:	4a11      	ldr	r2, [pc, #68]	; (78cc <smp_timeout+0x58>)
    7886:	9300      	str	r3, [sp, #0]
    7888:	4811      	ldr	r0, [pc, #68]	; (78d0 <smp_timeout+0x5c>)
    788a:	4b12      	ldr	r3, [pc, #72]	; (78d4 <smp_timeout+0x60>)

	/*
	 * If SMP timeout occurred during key distribution we should assume
	 * pairing failed and don't store any keys from this pairing.
	 */
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
    788c:	3ddc      	subs	r5, #220	; 0xdc

static void smp_timeout(struct k_work *work)
{
	struct bt_smp *smp = CONTAINER_OF(work, struct bt_smp, work);

	BT_ERR("SMP Timeout");
    788e:	f7fa f877 	bl	1980 <printk>
	smp_reset(smp);
}

static void smp_timeout(struct k_work *work)
{
	struct bt_smp *smp = CONTAINER_OF(work, struct bt_smp, work);
    7892:	3e71      	subs	r6, #113	; 0x71

	/*
	 * If SMP timeout occurred during key distribution we should assume
	 * pairing failed and don't store any keys from this pairing.
	 */
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
    7894:	2102      	movs	r1, #2
    7896:	0028      	movs	r0, r5
	smp_reset(smp);
}

static void smp_timeout(struct k_work *work)
{
	struct bt_smp *smp = CONTAINER_OF(work, struct bt_smp, work);
    7898:	3eff      	subs	r6, #255	; 0xff

	/*
	 * If SMP timeout occurred during key distribution we should assume
	 * pairing failed and don't store any keys from this pairing.
	 */
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
    789a:	f7fa fdc8 	bl	242e <atomic_test_bit>
    789e:	2800      	cmp	r0, #0
    78a0:	d006      	beq.n	78b0 <smp_timeout+0x3c>
	    smp->chan.chan.conn->le.keys) {
    78a2:	4b0d      	ldr	r3, [pc, #52]	; (78d8 <smp_timeout+0x64>)
    78a4:	58e3      	ldr	r3, [r4, r3]
    78a6:	6fd8      	ldr	r0, [r3, #124]	; 0x7c

	/*
	 * If SMP timeout occurred during key distribution we should assume
	 * pairing failed and don't store any keys from this pairing.
	 */
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
    78a8:	2800      	cmp	r0, #0
    78aa:	d001      	beq.n	78b0 <smp_timeout+0x3c>
	    smp->chan.chan.conn->le.keys) {
		bt_keys_clear(smp->chan.chan.conn->le.keys);
    78ac:	f001 fcbe 	bl	922c <bt_keys_clear>
			sc_derive_link_key(smp);
		}
	}
#endif /* CONFIG_BLUETOOTH_BREDR */

	smp_reset(smp);
    78b0:	0030      	movs	r0, r6
    78b2:	f7ff ff60 	bl	7776 <smp_reset>
		bt_keys_clear(smp->chan.chan.conn->le.keys);
	}

	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);

	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
    78b6:	0028      	movs	r0, r5
    78b8:	2104      	movs	r1, #4
    78ba:	f7ff fe57 	bl	756c <atomic_set_bit>
}
    78be:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    78c0:	000154c4 	.word	0x000154c4
    78c4:	0001548b 	.word	0x0001548b
    78c8:	000154c9 	.word	0x000154c9
    78cc:	00015484 	.word	0x00015484
    78d0:	00016391 	.word	0x00016391
    78d4:	00017e81 	.word	0x00017e81
    78d8:	fffffe90 	.word	0xfffffe90

000078dc <smp_signing_info>:
	return 0;
}

#if defined(CONFIG_BLUETOOTH_SIGNING)
static u8_t smp_signing_info(struct bt_smp *smp, struct net_buf *buf)
{
    78dc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    78de:	0004      	movs	r4, r0
    78e0:	000d      	movs	r5, r1
	struct bt_conn *conn = smp->chan.chan.conn;
    78e2:	6806      	ldr	r6, [r0, #0]

	BT_DBG("");

	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    78e4:	210a      	movs	r1, #10
    78e6:	3094      	adds	r0, #148	; 0x94
    78e8:	f7fa fda1 	bl	242e <atomic_test_bit>
    78ec:	2800      	cmp	r0, #0
    78ee:	d01c      	beq.n	792a <smp_signing_info+0x4e>
		struct bt_smp_signing_info *req = (void *)buf->data;
		struct bt_keys *keys;

		keys = bt_keys_get_type(BT_KEYS_REMOTE_CSRK, &conn->le.dst);
    78f0:	3654      	adds	r6, #84	; 0x54
    78f2:	0031      	movs	r1, r6
    78f4:	2010      	movs	r0, #16
	struct bt_conn *conn = smp->chan.chan.conn;

	BT_DBG("");

	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
		struct bt_smp_signing_info *req = (void *)buf->data;
    78f6:	68ad      	ldr	r5, [r5, #8]
		struct bt_keys *keys;

		keys = bt_keys_get_type(BT_KEYS_REMOTE_CSRK, &conn->le.dst);
    78f8:	f001 fc40 	bl	917c <bt_keys_get_type>
		if (!keys) {
    78fc:	2800      	cmp	r0, #0
    78fe:	d10f      	bne.n	7920 <smp_signing_info+0x44>
			BT_ERR("Unable to get keys for %s",
    7900:	0030      	movs	r0, r6
    7902:	f7fa fc8b 	bl	221c <bt_addr_le_str>
    7906:	4b12      	ldr	r3, [pc, #72]	; (7950 <smp_signing_info+0x74>)
    7908:	9001      	str	r0, [sp, #4]
    790a:	9302      	str	r3, [sp, #8]
    790c:	4b11      	ldr	r3, [pc, #68]	; (7954 <smp_signing_info+0x78>)
    790e:	4a12      	ldr	r2, [pc, #72]	; (7958 <smp_signing_info+0x7c>)
    7910:	9300      	str	r3, [sp, #0]
    7912:	4912      	ldr	r1, [pc, #72]	; (795c <smp_signing_info+0x80>)
    7914:	4b12      	ldr	r3, [pc, #72]	; (7960 <smp_signing_info+0x84>)
    7916:	4813      	ldr	r0, [pc, #76]	; (7964 <smp_signing_info+0x88>)
    7918:	f7fa f832 	bl	1980 <printk>
			       bt_addr_le_str(&conn->le.dst));
			return BT_SMP_ERR_UNSPECIFIED;
    791c:	2508      	movs	r5, #8
    791e:	e014      	b.n	794a <smp_signing_info+0x6e>
		}

		memcpy(keys->remote_csrk.val, req->csrk,
    7920:	305c      	adds	r0, #92	; 0x5c
    7922:	2210      	movs	r2, #16
    7924:	0029      	movs	r1, r5
    7926:	f7f9 fa08 	bl	d3a <memcpy>
		       sizeof(keys->remote_csrk.val));
	}

	smp->remote_dist &= ~BT_SMP_DIST_SIGN;
    792a:	22b7      	movs	r2, #183	; 0xb7
    792c:	2104      	movs	r1, #4
    792e:	0052      	lsls	r2, r2, #1
    7930:	5ca3      	ldrb	r3, [r4, r2]
	/* if all keys were distributed, pairing is done */
	if (!smp->local_dist && !smp->remote_dist) {
		smp_pairing_complete(smp, 0);
	}

	return 0;
    7932:	2500      	movs	r5, #0

		memcpy(keys->remote_csrk.val, req->csrk,
		       sizeof(keys->remote_csrk.val));
	}

	smp->remote_dist &= ~BT_SMP_DIST_SIGN;
    7934:	438b      	bics	r3, r1
    7936:	54a3      	strb	r3, [r4, r2]
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
		bt_smp_distribute_keys(smp);
	}

	/* if all keys were distributed, pairing is done */
	if (!smp->local_dist && !smp->remote_dist) {
    7938:	0023      	movs	r3, r4
    793a:	33fc      	adds	r3, #252	; 0xfc
    793c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    793e:	4b0a      	ldr	r3, [pc, #40]	; (7968 <smp_signing_info+0x8c>)
    7940:	421a      	tst	r2, r3
    7942:	d102      	bne.n	794a <smp_signing_info+0x6e>
			sc_derive_link_key(smp);
		}
	}
#endif /* CONFIG_BLUETOOTH_BREDR */

	smp_reset(smp);
    7944:	0020      	movs	r0, r4
    7946:	f7ff ff16 	bl	7776 <smp_reset>
	if (!smp->local_dist && !smp->remote_dist) {
		smp_pairing_complete(smp, 0);
	}

	return 0;
}
    794a:	0028      	movs	r0, r5
    794c:	b004      	add	sp, #16
    794e:	bd70      	pop	{r4, r5, r6, pc}
    7950:	000154c4 	.word	0x000154c4
    7954:	000154c9 	.word	0x000154c9
    7958:	00015484 	.word	0x00015484
    795c:	0001548b 	.word	0x0001548b
    7960:	00017ee4 	.word	0x00017ee4
    7964:	000163ad 	.word	0x000163ad
    7968:	00ffff00 	.word	0x00ffff00

0000796c <smp_ident_info>:
	/* return no error to avoid sending Pairing Failed in response */
	return 0;
}

static u8_t smp_ident_info(struct bt_smp *smp, struct net_buf *buf)
{
    796c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    796e:	0004      	movs	r4, r0
    7970:	000d      	movs	r5, r1
	BT_DBG("");

	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    7972:	3094      	adds	r0, #148	; 0x94
    7974:	210a      	movs	r1, #10
    7976:	f7fa fd5a 	bl	242e <atomic_test_bit>
    797a:	2800      	cmp	r0, #0
    797c:	d01d      	beq.n	79ba <smp_ident_info+0x4e>
		struct bt_smp_ident_info *req = (void *)buf->data;
		struct bt_conn *conn = smp->chan.chan.conn;
		struct bt_keys *keys;

		keys = bt_keys_get_type(BT_KEYS_IRK, &conn->le.dst);
    797e:	6826      	ldr	r6, [r4, #0]
    7980:	2002      	movs	r0, #2
    7982:	3654      	adds	r6, #84	; 0x54
    7984:	0031      	movs	r1, r6
static u8_t smp_ident_info(struct bt_smp *smp, struct net_buf *buf)
{
	BT_DBG("");

	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
		struct bt_smp_ident_info *req = (void *)buf->data;
    7986:	68ad      	ldr	r5, [r5, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
		struct bt_keys *keys;

		keys = bt_keys_get_type(BT_KEYS_IRK, &conn->le.dst);
    7988:	f001 fbf8 	bl	917c <bt_keys_get_type>
		if (!keys) {
    798c:	2800      	cmp	r0, #0
    798e:	d10f      	bne.n	79b0 <smp_ident_info+0x44>
			BT_ERR("Unable to get keys for %s",
    7990:	0030      	movs	r0, r6
    7992:	f7fa fc43 	bl	221c <bt_addr_le_str>
    7996:	4b0d      	ldr	r3, [pc, #52]	; (79cc <smp_ident_info+0x60>)
    7998:	9001      	str	r0, [sp, #4]
    799a:	9302      	str	r3, [sp, #8]
    799c:	4b0c      	ldr	r3, [pc, #48]	; (79d0 <smp_ident_info+0x64>)
    799e:	4a0d      	ldr	r2, [pc, #52]	; (79d4 <smp_ident_info+0x68>)
    79a0:	9300      	str	r3, [sp, #0]
    79a2:	490d      	ldr	r1, [pc, #52]	; (79d8 <smp_ident_info+0x6c>)
    79a4:	4b0d      	ldr	r3, [pc, #52]	; (79dc <smp_ident_info+0x70>)
    79a6:	480e      	ldr	r0, [pc, #56]	; (79e0 <smp_ident_info+0x74>)
    79a8:	f7f9 ffea 	bl	1980 <printk>
			       bt_addr_le_str(&conn->le.dst));
			return BT_SMP_ERR_UNSPECIFIED;
    79ac:	2008      	movs	r0, #8
    79ae:	e00a      	b.n	79c6 <smp_ident_info+0x5a>
		}

		memcpy(keys->irk.val, req->irk, 16);
    79b0:	3030      	adds	r0, #48	; 0x30
    79b2:	2210      	movs	r2, #16
    79b4:	0029      	movs	r1, r5
    79b6:	f7f9 f9c0 	bl	d3a <memcpy>
	}

	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
    79ba:	0020      	movs	r0, r4
    79bc:	2109      	movs	r1, #9
    79be:	3090      	adds	r0, #144	; 0x90
    79c0:	f7ff fdd4 	bl	756c <atomic_set_bit>

	return 0;
    79c4:	2000      	movs	r0, #0
}
    79c6:	b004      	add	sp, #16
    79c8:	bd70      	pop	{r4, r5, r6, pc}
    79ca:	46c0      	nop			; (mov r8, r8)
    79cc:	000154c4 	.word	0x000154c4
    79d0:	000154c9 	.word	0x000154c9
    79d4:	00015484 	.word	0x00015484
    79d8:	0001548b 	.word	0x0001548b
    79dc:	00017e18 	.word	0x00017e18
    79e0:	000163ad 	.word	0x000163ad

000079e4 <smp_master_ident>:

	return 0;
}

static u8_t smp_master_ident(struct bt_smp *smp, struct net_buf *buf)
{
    79e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    79e6:	0005      	movs	r5, r0
    79e8:	b085      	sub	sp, #20
    79ea:	000c      	movs	r4, r1
	struct bt_conn *conn = smp->chan.chan.conn;
    79ec:	6806      	ldr	r6, [r0, #0]

	BT_DBG("");

	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    79ee:	210a      	movs	r1, #10
    79f0:	3094      	adds	r0, #148	; 0x94
    79f2:	f7fa fd1c 	bl	242e <atomic_test_bit>
    79f6:	2800      	cmp	r0, #0
    79f8:	d03b      	beq.n	7a72 <smp_master_ident+0x8e>
		struct bt_smp_master_ident *req = (void *)buf->data;
		struct bt_keys *keys;

		keys = bt_keys_get_type(BT_KEYS_LTK, &conn->le.dst);
    79fa:	3654      	adds	r6, #84	; 0x54
    79fc:	0031      	movs	r1, r6
    79fe:	2004      	movs	r0, #4
	struct bt_conn *conn = smp->chan.chan.conn;

	BT_DBG("");

	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
		struct bt_smp_master_ident *req = (void *)buf->data;
    7a00:	68a4      	ldr	r4, [r4, #8]
		struct bt_keys *keys;

		keys = bt_keys_get_type(BT_KEYS_LTK, &conn->le.dst);
    7a02:	f001 fbbb 	bl	917c <bt_keys_get_type>
		if (!keys) {
    7a06:	2800      	cmp	r0, #0
    7a08:	d10f      	bne.n	7a2a <smp_master_ident+0x46>
			BT_ERR("Unable to get keys for %s",
    7a0a:	0030      	movs	r0, r6
    7a0c:	f7fa fc06 	bl	221c <bt_addr_le_str>
    7a10:	4b25      	ldr	r3, [pc, #148]	; (7aa8 <smp_master_ident+0xc4>)
    7a12:	9001      	str	r0, [sp, #4]
    7a14:	9302      	str	r3, [sp, #8]
    7a16:	4b25      	ldr	r3, [pc, #148]	; (7aac <smp_master_ident+0xc8>)
    7a18:	4a25      	ldr	r2, [pc, #148]	; (7ab0 <smp_master_ident+0xcc>)
    7a1a:	9300      	str	r3, [sp, #0]
    7a1c:	4925      	ldr	r1, [pc, #148]	; (7ab4 <smp_master_ident+0xd0>)
    7a1e:	4b26      	ldr	r3, [pc, #152]	; (7ab8 <smp_master_ident+0xd4>)
    7a20:	4826      	ldr	r0, [pc, #152]	; (7abc <smp_master_ident+0xd8>)
    7a22:	f7f9 ffad 	bl	1980 <printk>
			       bt_addr_le_str(&conn->le.dst));
			return BT_SMP_ERR_UNSPECIFIED;
    7a26:	2408      	movs	r4, #8
    7a28:	e03a      	b.n	7aa0 <smp_master_ident+0xbc>
		}

		keys->ltk.ediv = req->ediv;
    7a2a:	7863      	ldrb	r3, [r4, #1]
    7a2c:	7822      	ldrb	r2, [r4, #0]
    7a2e:	021b      	lsls	r3, r3, #8
    7a30:	4313      	orrs	r3, r2
    7a32:	8303      	strh	r3, [r0, #24]
		keys->ltk.rand = req->rand;
    7a34:	78e3      	ldrb	r3, [r4, #3]
    7a36:	78a1      	ldrb	r1, [r4, #2]
    7a38:	7927      	ldrb	r7, [r4, #4]
    7a3a:	021b      	lsls	r3, r3, #8
    7a3c:	430b      	orrs	r3, r1
    7a3e:	043f      	lsls	r7, r7, #16
    7a40:	001a      	movs	r2, r3
    7a42:	003b      	movs	r3, r7
    7a44:	7967      	ldrb	r7, [r4, #5]
    7a46:	4313      	orrs	r3, r2
    7a48:	063f      	lsls	r7, r7, #24
    7a4a:	79e2      	ldrb	r2, [r4, #7]
    7a4c:	79a6      	ldrb	r6, [r4, #6]
    7a4e:	431f      	orrs	r7, r3
    7a50:	7a23      	ldrb	r3, [r4, #8]
    7a52:	0212      	lsls	r2, r2, #8
    7a54:	4332      	orrs	r2, r6
    7a56:	041b      	lsls	r3, r3, #16
    7a58:	4313      	orrs	r3, r2
    7a5a:	001a      	movs	r2, r3
    7a5c:	7a63      	ldrb	r3, [r4, #9]

		smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
    7a5e:	2101      	movs	r1, #1
			       bt_addr_le_str(&conn->le.dst));
			return BT_SMP_ERR_UNSPECIFIED;
		}

		keys->ltk.ediv = req->ediv;
		keys->ltk.rand = req->rand;
    7a60:	061b      	lsls	r3, r3, #24
    7a62:	4313      	orrs	r3, r2

		smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
    7a64:	22b7      	movs	r2, #183	; 0xb7
			       bt_addr_le_str(&conn->le.dst));
			return BT_SMP_ERR_UNSPECIFIED;
		}

		keys->ltk.ediv = req->ediv;
		keys->ltk.rand = req->rand;
    7a66:	6107      	str	r7, [r0, #16]
    7a68:	6143      	str	r3, [r0, #20]

		smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
    7a6a:	0052      	lsls	r2, r2, #1
    7a6c:	5cab      	ldrb	r3, [r5, r2]
    7a6e:	438b      	bics	r3, r1
    7a70:	54ab      	strb	r3, [r5, r2]
	}

	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
    7a72:	23b7      	movs	r3, #183	; 0xb7
    7a74:	005b      	lsls	r3, r3, #1
    7a76:	5ceb      	ldrb	r3, [r5, r3]
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
    7a78:	2108      	movs	r1, #8
		keys->ltk.rand = req->rand;

		smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
	}

	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
    7a7a:	079a      	lsls	r2, r3, #30
    7a7c:	d402      	bmi.n	7a84 <smp_master_ident+0xa0>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    7a7e:	075b      	lsls	r3, r3, #29
    7a80:	d504      	bpl.n	7a8c <smp_master_ident+0xa8>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    7a82:	210a      	movs	r1, #10
    7a84:	0028      	movs	r0, r5
    7a86:	3090      	adds	r0, #144	; 0x90
    7a88:	f7ff fd70 	bl	756c <atomic_set_bit>
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
		bt_smp_distribute_keys(smp);
	}

	/* if all keys were distributed, pairing is done */
	if (!smp->local_dist && !smp->remote_dist) {
    7a8c:	002b      	movs	r3, r5
    7a8e:	33fc      	adds	r3, #252	; 0xfc
    7a90:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    7a92:	4b0b      	ldr	r3, [pc, #44]	; (7ac0 <smp_master_ident+0xdc>)
		smp_pairing_complete(smp, 0);
	}

	return 0;
    7a94:	2400      	movs	r4, #0
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
		bt_smp_distribute_keys(smp);
	}

	/* if all keys were distributed, pairing is done */
	if (!smp->local_dist && !smp->remote_dist) {
    7a96:	421a      	tst	r2, r3
    7a98:	d102      	bne.n	7aa0 <smp_master_ident+0xbc>
			sc_derive_link_key(smp);
		}
	}
#endif /* CONFIG_BLUETOOTH_BREDR */

	smp_reset(smp);
    7a9a:	0028      	movs	r0, r5
    7a9c:	f7ff fe6b 	bl	7776 <smp_reset>
	if (!smp->local_dist && !smp->remote_dist) {
		smp_pairing_complete(smp, 0);
	}

	return 0;
}
    7aa0:	0020      	movs	r0, r4
    7aa2:	b005      	add	sp, #20
    7aa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7aa6:	46c0      	nop			; (mov r8, r8)
    7aa8:	000154c4 	.word	0x000154c4
    7aac:	000154c9 	.word	0x000154c9
    7ab0:	00015484 	.word	0x00015484
    7ab4:	0001548b 	.word	0x0001548b
    7ab8:	00017e9a 	.word	0x00017e9a
    7abc:	000163ad 	.word	0x000163ad
    7ac0:	00ffff00 	.word	0x00ffff00

00007ac4 <smp_encrypt_info>:
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
	}
}

static u8_t smp_encrypt_info(struct bt_smp *smp, struct net_buf *buf)
{
    7ac4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    7ac6:	0004      	movs	r4, r0
    7ac8:	000d      	movs	r5, r1
	BT_DBG("");

	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    7aca:	3094      	adds	r0, #148	; 0x94
    7acc:	210a      	movs	r1, #10
    7ace:	f7fa fcae 	bl	242e <atomic_test_bit>
    7ad2:	2800      	cmp	r0, #0
    7ad4:	d01d      	beq.n	7b12 <smp_encrypt_info+0x4e>
		struct bt_smp_encrypt_info *req = (void *)buf->data;
		struct bt_conn *conn = smp->chan.chan.conn;
		struct bt_keys *keys;

		keys = bt_keys_get_type(BT_KEYS_LTK, &conn->le.dst);
    7ad6:	6826      	ldr	r6, [r4, #0]
    7ad8:	2004      	movs	r0, #4
    7ada:	3654      	adds	r6, #84	; 0x54
    7adc:	0031      	movs	r1, r6
static u8_t smp_encrypt_info(struct bt_smp *smp, struct net_buf *buf)
{
	BT_DBG("");

	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
		struct bt_smp_encrypt_info *req = (void *)buf->data;
    7ade:	68ad      	ldr	r5, [r5, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
		struct bt_keys *keys;

		keys = bt_keys_get_type(BT_KEYS_LTK, &conn->le.dst);
    7ae0:	f001 fb4c 	bl	917c <bt_keys_get_type>
		if (!keys) {
    7ae4:	2800      	cmp	r0, #0
    7ae6:	d10f      	bne.n	7b08 <smp_encrypt_info+0x44>
			BT_ERR("Unable to get keys for %s",
    7ae8:	0030      	movs	r0, r6
    7aea:	f7fa fb97 	bl	221c <bt_addr_le_str>
    7aee:	4b0d      	ldr	r3, [pc, #52]	; (7b24 <smp_encrypt_info+0x60>)
    7af0:	9001      	str	r0, [sp, #4]
    7af2:	9302      	str	r3, [sp, #8]
    7af4:	4b0c      	ldr	r3, [pc, #48]	; (7b28 <smp_encrypt_info+0x64>)
    7af6:	4a0d      	ldr	r2, [pc, #52]	; (7b2c <smp_encrypt_info+0x68>)
    7af8:	9300      	str	r3, [sp, #0]
    7afa:	490d      	ldr	r1, [pc, #52]	; (7b30 <smp_encrypt_info+0x6c>)
    7afc:	4b0d      	ldr	r3, [pc, #52]	; (7b34 <smp_encrypt_info+0x70>)
    7afe:	480e      	ldr	r0, [pc, #56]	; (7b38 <smp_encrypt_info+0x74>)
    7b00:	f7f9 ff3e 	bl	1980 <printk>
			       bt_addr_le_str(&conn->le.dst));
			return BT_SMP_ERR_UNSPECIFIED;
    7b04:	2008      	movs	r0, #8
    7b06:	e00a      	b.n	7b1e <smp_encrypt_info+0x5a>
		}

		memcpy(keys->ltk.val, req->ltk, 16);
    7b08:	301a      	adds	r0, #26
    7b0a:	2210      	movs	r2, #16
    7b0c:	0029      	movs	r1, r5
    7b0e:	f7f9 f914 	bl	d3a <memcpy>
	}

	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_MASTER_IDENT);
    7b12:	0020      	movs	r0, r4
    7b14:	2107      	movs	r1, #7
    7b16:	3090      	adds	r0, #144	; 0x90
    7b18:	f7ff fd28 	bl	756c <atomic_set_bit>

	return 0;
    7b1c:	2000      	movs	r0, #0
}
    7b1e:	b004      	add	sp, #16
    7b20:	bd70      	pop	{r4, r5, r6, pc}
    7b22:	46c0      	nop			; (mov r8, r8)
    7b24:	000154c4 	.word	0x000154c4
    7b28:	000154c9 	.word	0x000154c9
    7b2c:	00015484 	.word	0x00015484
    7b30:	0001548b 	.word	0x0001548b
    7b34:	00017e07 	.word	0x00017e07
    7b38:	000163ad 	.word	0x000163ad

00007b3c <bt_smp_connected>:
#endif /* CONFIG_BLUETOOTH_PERIPHERAL */
	}
}

static void bt_smp_connected(struct bt_l2cap_chan *chan)
{
    7b3c:	b510      	push	{r4, lr}
    7b3e:	0004      	movs	r4, r0
	struct bt_smp *smp = CONTAINER_OF(chan, struct bt_smp, chan);

	BT_DBG("chan %p cid 0x%04x", chan,
	       CONTAINER_OF(chan, struct bt_l2cap_le_chan, chan)->tx.cid);

	k_delayed_work_init(&smp->work, smp_timeout);
    7b40:	3071      	adds	r0, #113	; 0x71
    7b42:	4904      	ldr	r1, [pc, #16]	; (7b54 <bt_smp_connected+0x18>)
    7b44:	30ff      	adds	r0, #255	; 0xff
    7b46:	f00d f995 	bl	14e74 <k_delayed_work_init>
	smp_reset(smp);
    7b4a:	0020      	movs	r0, r4
    7b4c:	f7ff fe13 	bl	7776 <smp_reset>
}
    7b50:	bd10      	pop	{r4, pc}
    7b52:	46c0      	nop			; (mov r8, r8)
    7b54:	00007875 	.word	0x00007875

00007b58 <smp_chan_get>:
		return false;
	}
}

static struct bt_smp *smp_chan_get(struct bt_conn *conn)
{
    7b58:	b513      	push	{r0, r1, r4, lr}
	struct bt_l2cap_chan *chan;

	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
    7b5a:	2106      	movs	r1, #6
    7b5c:	f7fd fca6 	bl	54ac <bt_l2cap_le_lookup_rx_cid>
    7b60:	1e04      	subs	r4, r0, #0
	if (!chan) {
    7b62:	d109      	bne.n	7b78 <smp_chan_get+0x20>
		BT_ERR("Unable to find SMP channel");
    7b64:	4b05      	ldr	r3, [pc, #20]	; (7b7c <smp_chan_get+0x24>)
    7b66:	4a06      	ldr	r2, [pc, #24]	; (7b80 <smp_chan_get+0x28>)
    7b68:	9301      	str	r3, [sp, #4]
    7b6a:	4b06      	ldr	r3, [pc, #24]	; (7b84 <smp_chan_get+0x2c>)
    7b6c:	4906      	ldr	r1, [pc, #24]	; (7b88 <smp_chan_get+0x30>)
    7b6e:	9300      	str	r3, [sp, #0]
    7b70:	4806      	ldr	r0, [pc, #24]	; (7b8c <smp_chan_get+0x34>)
    7b72:	4b07      	ldr	r3, [pc, #28]	; (7b90 <smp_chan_get+0x38>)
    7b74:	f7f9 ff04 	bl	1980 <printk>
		return NULL;
	}

	return CONTAINER_OF(chan, struct bt_smp, chan);
}
    7b78:	0020      	movs	r0, r4
    7b7a:	bd16      	pop	{r1, r2, r4, pc}
    7b7c:	000154c4 	.word	0x000154c4
    7b80:	00015484 	.word	0x00015484
    7b84:	000154c9 	.word	0x000154c9
    7b88:	0001548b 	.word	0x0001548b
    7b8c:	000163d7 	.word	0x000163d7
    7b90:	00017ed7 	.word	0x00017ed7

00007b94 <smp_create_pdu.isra.2>:
				      size_t len)
{
	struct bt_smp_hdr *hdr;
	struct net_buf *buf;

	buf = bt_l2cap_create_pdu(NULL, 0);
    7b94:	2100      	movs	r1, #0
	}

	return gen_method_sc[remote_io][get_io_capa()];
}

static struct net_buf *smp_create_pdu(struct bt_conn *conn, u8_t op,
    7b96:	b570      	push	{r4, r5, r6, lr}
    7b98:	0005      	movs	r5, r0
				      size_t len)
{
	struct bt_smp_hdr *hdr;
	struct net_buf *buf;

	buf = bt_l2cap_create_pdu(NULL, 0);
    7b9a:	0008      	movs	r0, r1
    7b9c:	f7fd fbc7 	bl	532e <bt_l2cap_create_pdu>
	/* NULL is not a possible return due to K_FOREVER */

	hdr = net_buf_add(buf, sizeof(*hdr));
    7ba0:	2101      	movs	r1, #1
				      size_t len)
{
	struct bt_smp_hdr *hdr;
	struct net_buf *buf;

	buf = bt_l2cap_create_pdu(NULL, 0);
    7ba2:	0004      	movs	r4, r0
	/* NULL is not a possible return due to K_FOREVER */

	hdr = net_buf_add(buf, sizeof(*hdr));
    7ba4:	3008      	adds	r0, #8
    7ba6:	f00b fd0d 	bl	135c4 <net_buf_simple_add>
	hdr->code = op;
    7baa:	7005      	strb	r5, [r0, #0]

	return buf;
}
    7bac:	0020      	movs	r0, r4
    7bae:	bd70      	pop	{r4, r5, r6, pc}

00007bb0 <smp_check_complete.part.10>:
static void smp_pairing_complete(struct bt_smp *smp, u8_t status);
#if defined(CONFIG_BLUETOOTH_BREDR)
static void smp_pairing_br_complete(struct bt_smp_br *smp, u8_t status);
#endif

static void smp_check_complete(struct bt_conn *conn, u8_t dist_complete)
    7bb0:	b510      	push	{r4, lr}
    7bb2:	000c      	movs	r4, r1
	struct bt_l2cap_chan *chan;

	if (conn->type == BT_CONN_TYPE_LE) {
		struct bt_smp *smp;

		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
    7bb4:	2106      	movs	r1, #6
    7bb6:	f7fd fc67 	bl	5488 <bt_l2cap_le_lookup_tx_cid>
		__ASSERT(chan, "No SMP channel found");

		smp = CONTAINER_OF(chan, struct bt_smp, chan);
		smp->local_dist &= ~dist_complete;
    7bba:	226e      	movs	r2, #110	; 0x6e
    7bbc:	32ff      	adds	r2, #255	; 0xff
    7bbe:	5c83      	ldrb	r3, [r0, r2]
    7bc0:	43a3      	bics	r3, r4
    7bc2:	5483      	strb	r3, [r0, r2]

		/* if all keys were distributed, pairing is done */
		if (!smp->local_dist && !smp->remote_dist) {
    7bc4:	0003      	movs	r3, r0
    7bc6:	33fc      	adds	r3, #252	; 0xfc
    7bc8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    7bca:	4b03      	ldr	r3, [pc, #12]	; (7bd8 <smp_check_complete.part.10+0x28>)
    7bcc:	421a      	tst	r2, r3
    7bce:	d101      	bne.n	7bd4 <smp_check_complete.part.10+0x24>
			sc_derive_link_key(smp);
		}
	}
#endif /* CONFIG_BLUETOOTH_BREDR */

	smp_reset(smp);
    7bd0:	f7ff fdd1 	bl	7776 <smp_reset>
		if (!smp->local_dist && !smp->remote_dist) {
			smp_pairing_br_complete(smp, 0);
		}
	}
#endif
}
    7bd4:	bd10      	pop	{r4, pc}
    7bd6:	46c0      	nop			; (mov r8, r8)
    7bd8:	00ffff00 	.word	0x00ffff00

00007bdc <sign_info_sent>:

static void smp_check_complete(struct bt_conn *conn, u8_t dist_complete)
{
	struct bt_l2cap_chan *chan;

	if (conn->type == BT_CONN_TYPE_LE) {
    7bdc:	7883      	ldrb	r3, [r0, #2]
}
#endif /* CONFIG_BLUETOOTH_PRIVACY */

#if defined(CONFIG_BLUETOOTH_SIGNING)
static void sign_info_sent(struct bt_conn *conn)
{
    7bde:	b510      	push	{r4, lr}

static void smp_check_complete(struct bt_conn *conn, u8_t dist_complete)
{
	struct bt_l2cap_chan *chan;

	if (conn->type == BT_CONN_TYPE_LE) {
    7be0:	2b00      	cmp	r3, #0
    7be2:	d102      	bne.n	7bea <sign_info_sent+0xe>
    7be4:	2104      	movs	r1, #4
    7be6:	f7ff ffe3 	bl	7bb0 <smp_check_complete.part.10>

#if defined(CONFIG_BLUETOOTH_SIGNING)
static void sign_info_sent(struct bt_conn *conn)
{
	smp_check_complete(conn, BT_SMP_DIST_SIGN);
}
    7bea:	bd10      	pop	{r4, pc}

00007bec <smp_send>:
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
}

static void smp_send(struct bt_smp *smp, struct net_buf *buf,
		     bt_conn_tx_cb_t cb)
{
    7bec:	b510      	push	{r4, lr}
    7bee:	0004      	movs	r4, r0
    7bf0:	0013      	movs	r3, r2
	bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb);
    7bf2:	6800      	ldr	r0, [r0, #0]
    7bf4:	000a      	movs	r2, r1
    7bf6:	2106      	movs	r1, #6
    7bf8:	f7fd fb9e 	bl	5338 <bt_l2cap_send_cb>
	k_delayed_work_submit(&smp->work, SMP_TIMEOUT);
    7bfc:	0021      	movs	r1, r4
    7bfe:	3171      	adds	r1, #113	; 0x71
    7c00:	31ff      	adds	r1, #255	; 0xff
    7c02:	4a02      	ldr	r2, [pc, #8]	; (7c0c <smp_send+0x20>)
    7c04:	4802      	ldr	r0, [pc, #8]	; (7c10 <smp_send+0x24>)
    7c06:	f00d f983 	bl	14f10 <k_delayed_work_submit_to_queue>
}
    7c0a:	bd10      	pop	{r4, pc}
    7c0c:	00007530 	.word	0x00007530
    7c10:	20002358 	.word	0x20002358

00007c14 <compute_and_check_and_send_slave_dhcheck>:
}
#endif /* CONFIG_BLUETOOTH_CENTRAL */

#if defined(CONFIG_BLUETOOTH_PERIPHERAL)
static u8_t compute_and_check_and_send_slave_dhcheck(struct bt_smp *smp)
{
    7c14:	b5f0      	push	{r4, r5, r6, r7, lr}
    7c16:	0004      	movs	r4, r0
    7c18:	b0a5      	sub	sp, #148	; 0x94
	u8_t re[16], e[16], r[16];

	memset(r, 0, sizeof(r));
    7c1a:	2210      	movs	r2, #16
    7c1c:	2100      	movs	r1, #0
    7c1e:	a806      	add	r0, sp, #24
    7c20:	f7f9 f8b5 	bl	d8e <memset>

	switch (smp->method) {
    7c24:	0023      	movs	r3, r4
    7c26:	3398      	adds	r3, #152	; 0x98
    7c28:	7818      	ldrb	r0, [r3, #0]
	case PASSKEY_DISPLAY:
	case PASSKEY_INPUT:
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
		break;
	default:
		return BT_SMP_ERR_UNSPECIFIED;
    7c2a:	2308      	movs	r3, #8
{
	u8_t re[16], e[16], r[16];

	memset(r, 0, sizeof(r));

	switch (smp->method) {
    7c2c:	2803      	cmp	r0, #3
    7c2e:	d900      	bls.n	7c32 <compute_and_check_and_send_slave_dhcheck+0x1e>
    7c30:	e0c8      	b.n	7dc4 <compute_and_check_and_send_slave_dhcheck+0x1b0>
    7c32:	f7f8 faa1 	bl	178 <__gnu_thumb1_case_uqi>
    7c36:	0209      	.short	0x0209
    7c38:	0902      	.short	0x0902
	case JUST_WORKS:
	case PASSKEY_CONFIRM:
		break;
	case PASSKEY_DISPLAY:
	case PASSKEY_INPUT:
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
    7c3a:	0021      	movs	r1, r4
    7c3c:	3169      	adds	r1, #105	; 0x69
    7c3e:	2204      	movs	r2, #4
    7c40:	31ff      	adds	r1, #255	; 0xff
    7c42:	a806      	add	r0, sp, #24
    7c44:	f7f9 f879 	bl	d3a <memcpy>
	default:
		return BT_SMP_ERR_UNSPECIFIED;
	}

	/* calculate LTK and mackey */
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
    7c48:	0023      	movs	r3, r4
		  u8_t *ltk)
{
	static const u8_t salt[16] = { 0x6c, 0x88, 0x83, 0x91, 0xaa, 0xf5,
					  0xa5, 0x38, 0x60, 0x37, 0x0b, 0xdb,
					  0x5a, 0x60, 0x83, 0xbe };
	u8_t m[53] = { 0x00, /* counter */
    7c4a:	ad16      	add	r5, sp, #88	; 0x58
	default:
		return BT_SMP_ERR_UNSPECIFIED;
	}

	/* calculate LTK and mackey */
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
    7c4c:	33c7      	adds	r3, #199	; 0xc7
    7c4e:	9304      	str	r3, [sp, #16]
		  u8_t *ltk)
{
	static const u8_t salt[16] = { 0x6c, 0x88, 0x83, 0x91, 0xaa, 0xf5,
					  0xa5, 0x38, 0x60, 0x37, 0x0b, 0xdb,
					  0x5a, 0x60, 0x83, 0xbe };
	u8_t m[53] = { 0x00, /* counter */
    7c50:	2235      	movs	r2, #53	; 0x35
	default:
		return BT_SMP_ERR_UNSPECIFIED;
	}

	/* calculate LTK and mackey */
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
    7c52:	3b10      	subs	r3, #16
		  u8_t *ltk)
{
	static const u8_t salt[16] = { 0x6c, 0x88, 0x83, 0x91, 0xaa, 0xf5,
					  0xa5, 0x38, 0x60, 0x37, 0x0b, 0xdb,
					  0x5a, 0x60, 0x83, 0xbe };
	u8_t m[53] = { 0x00, /* counter */
    7c54:	2100      	movs	r1, #0
    7c56:	0028      	movs	r0, r5
	default:
		return BT_SMP_ERR_UNSPECIFIED;
	}

	/* calculate LTK and mackey */
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
    7c58:	9305      	str	r3, [sp, #20]
		   &smp->chan.chan.conn->le.init_addr,
    7c5a:	6826      	ldr	r6, [r4, #0]
		  u8_t *ltk)
{
	static const u8_t salt[16] = { 0x6c, 0x88, 0x83, 0x91, 0xaa, 0xf5,
					  0xa5, 0x38, 0x60, 0x37, 0x0b, 0xdb,
					  0x5a, 0x60, 0x83, 0xbe };
	u8_t m[53] = { 0x00, /* counter */
    7c5c:	f7f9 f897 	bl	d8e <memset>
    7c60:	2362      	movs	r3, #98	; 0x62
    7c62:	706b      	strb	r3, [r5, #1]
    7c64:	3312      	adds	r3, #18
    7c66:	70ab      	strb	r3, [r5, #2]
    7c68:	3b08      	subs	r3, #8
    7c6a:	70eb      	strb	r3, [r5, #3]
    7c6c:	3b07      	subs	r3, #7
    7c6e:	712b      	strb	r3, [r5, #4]
    7c70:	aa02      	add	r2, sp, #8
    7c72:	331e      	adds	r3, #30
	int err;

	BT_DBG("w %s", bt_hex(w, 32));
	BT_DBG("n1 %s n2 %s", bt_hex(n1, 16), bt_hex(n2, 16));

	sys_memcpy_swap(ws, w, 32);
    7c74:	0021      	movs	r1, r4
		  u8_t *ltk)
{
	static const u8_t salt[16] = { 0x6c, 0x88, 0x83, 0x91, 0xaa, 0xf5,
					  0xa5, 0x38, 0x60, 0x37, 0x0b, 0xdb,
					  0x5a, 0x60, 0x83, 0xbe };
	u8_t m[53] = { 0x00, /* counter */
    7c76:	189b      	adds	r3, r3, r2
    7c78:	2201      	movs	r2, #1
	}

	/* calculate LTK and mackey */
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
		   &smp->chan.chan.conn->le.init_addr,
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
    7c7a:	0027      	movs	r7, r4
	int err;

	BT_DBG("w %s", bt_hex(w, 32));
	BT_DBG("n1 %s n2 %s", bt_hex(n1, 16), bt_hex(n2, 16));

	sys_memcpy_swap(ws, w, 32);
    7c7c:	3128      	adds	r1, #40	; 0x28
		  u8_t *ltk)
{
	static const u8_t salt[16] = { 0x6c, 0x88, 0x83, 0x91, 0xaa, 0xf5,
					  0xa5, 0x38, 0x60, 0x37, 0x0b, 0xdb,
					  0x5a, 0x60, 0x83, 0xbe };
	u8_t m[53] = { 0x00, /* counter */
    7c7e:	701a      	strb	r2, [r3, #0]
	int err;

	BT_DBG("w %s", bt_hex(w, 32));
	BT_DBG("n1 %s n2 %s", bt_hex(n1, 16), bt_hex(n2, 16));

	sys_memcpy_swap(ws, w, 32);
    7c80:	31ff      	adds	r1, #255	; 0xff
    7c82:	2220      	movs	r2, #32
    7c84:	a80e      	add	r0, sp, #56	; 0x38
    7c86:	f7ff fc03 	bl	7490 <sys_memcpy_swap>
	}

	/* calculate LTK and mackey */
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
		   &smp->chan.chan.conn->le.init_addr,
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
    7c8a:	3758      	adds	r7, #88	; 0x58
	BT_DBG("w %s", bt_hex(w, 32));
	BT_DBG("n1 %s n2 %s", bt_hex(n1, 16), bt_hex(n2, 16));

	sys_memcpy_swap(ws, w, 32);

	err = bt_smp_aes_cmac(salt, ws, 32, t);
    7c8c:	ab0a      	add	r3, sp, #40	; 0x28
    7c8e:	2220      	movs	r2, #32
    7c90:	a90e      	add	r1, sp, #56	; 0x38
    7c92:	484e      	ldr	r0, [pc, #312]	; (7dcc <compute_and_check_and_send_slave_dhcheck+0x1b8>)
	}

	/* calculate LTK and mackey */
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
		   &smp->chan.chan.conn->le.init_addr,
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
    7c94:	37ff      	adds	r7, #255	; 0xff
	BT_DBG("w %s", bt_hex(w, 32));
	BT_DBG("n1 %s n2 %s", bt_hex(n1, 16), bt_hex(n2, 16));

	sys_memcpy_swap(ws, w, 32);

	err = bt_smp_aes_cmac(salt, ws, 32, t);
    7c96:	f7ff fc75 	bl	7584 <bt_smp_aes_cmac>
	if (err) {
    7c9a:	2800      	cmp	r0, #0
    7c9c:	d146      	bne.n	7d2c <compute_and_check_and_send_slave_dhcheck+0x118>
		return err;
	}

	BT_DBG("t %s", bt_hex(t, 16));

	sys_memcpy_swap(m + 5, n1, 16);
    7c9e:	ab02      	add	r3, sp, #8
    7ca0:	3055      	adds	r0, #85	; 0x55
    7ca2:	18c0      	adds	r0, r0, r3
    7ca4:	2210      	movs	r2, #16
    7ca6:	9904      	ldr	r1, [sp, #16]
    7ca8:	f7ff fbf2 	bl	7490 <sys_memcpy_swap>
	sys_memcpy_swap(m + 21, n2, 16);
    7cac:	2065      	movs	r0, #101	; 0x65
    7cae:	ab02      	add	r3, sp, #8
    7cb0:	18c0      	adds	r0, r0, r3
    7cb2:	2210      	movs	r2, #16
    7cb4:	9905      	ldr	r1, [sp, #20]
    7cb6:	f7ff fbeb 	bl	7490 <sys_memcpy_swap>
	m[37] = a1->type;
    7cba:	0033      	movs	r3, r6
    7cbc:	335b      	adds	r3, #91	; 0x5b
    7cbe:	781a      	ldrb	r2, [r3, #0]
    7cc0:	2356      	movs	r3, #86	; 0x56
    7cc2:	a902      	add	r1, sp, #8
    7cc4:	185b      	adds	r3, r3, r1
	sys_memcpy_swap(m + 38, a1->a.val, 6);
    7cc6:	2076      	movs	r0, #118	; 0x76
    7cc8:	0031      	movs	r1, r6

	BT_DBG("t %s", bt_hex(t, 16));

	sys_memcpy_swap(m + 5, n1, 16);
	sys_memcpy_swap(m + 21, n2, 16);
	m[37] = a1->type;
    7cca:	77da      	strb	r2, [r3, #31]
	sys_memcpy_swap(m + 38, a1->a.val, 6);
    7ccc:	ab02      	add	r3, sp, #8
    7cce:	18c0      	adds	r0, r0, r3
    7cd0:	315c      	adds	r1, #92	; 0x5c
    7cd2:	2206      	movs	r2, #6
    7cd4:	f7ff fbdc 	bl	7490 <sys_memcpy_swap>
	m[44] = a2->type;
    7cd8:	0033      	movs	r3, r6
	sys_memcpy_swap(m + 45, a2->a.val, 6);
    7cda:	0031      	movs	r1, r6
    7cdc:	207d      	movs	r0, #125	; 0x7d

	sys_memcpy_swap(m + 5, n1, 16);
	sys_memcpy_swap(m + 21, n2, 16);
	m[37] = a1->type;
	sys_memcpy_swap(m + 38, a1->a.val, 6);
	m[44] = a2->type;
    7cde:	3362      	adds	r3, #98	; 0x62
    7ce0:	781a      	ldrb	r2, [r3, #0]
    7ce2:	ab21      	add	r3, sp, #132	; 0x84
    7ce4:	701a      	strb	r2, [r3, #0]
	sys_memcpy_swap(m + 45, a2->a.val, 6);
    7ce6:	ab02      	add	r3, sp, #8
    7ce8:	18c0      	adds	r0, r0, r3
    7cea:	3163      	adds	r1, #99	; 0x63
    7cec:	2206      	movs	r2, #6
    7cee:	f7ff fbcf 	bl	7490 <sys_memcpy_swap>

	err = bt_smp_aes_cmac(t, m, sizeof(m), mackey);
    7cf2:	003b      	movs	r3, r7
    7cf4:	2235      	movs	r2, #53	; 0x35
    7cf6:	0029      	movs	r1, r5
    7cf8:	a80a      	add	r0, sp, #40	; 0x28
    7cfa:	f7ff fc43 	bl	7584 <bt_smp_aes_cmac>
	if (err) {
    7cfe:	2800      	cmp	r0, #0
    7d00:	d114      	bne.n	7d2c <compute_and_check_and_send_slave_dhcheck+0x118>
		return err;
	}

	BT_DBG("mackey %1s", bt_hex(mackey, 16));

	sys_mem_swap(mackey, 16);
    7d02:	2110      	movs	r1, #16
    7d04:	0038      	movs	r0, r7

	/* calculate LTK and mackey */
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
		   &smp->chan.chan.conn->le.init_addr,
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
		   smp->tk)) {
    7d06:	0026      	movs	r6, r4
		return err;
	}

	BT_DBG("mackey %1s", bt_hex(mackey, 16));

	sys_mem_swap(mackey, 16);
    7d08:	f7ff fbcb 	bl	74a2 <sys_mem_swap>

	/* counter for ltk is 1 */
	m[0] = 0x01;
    7d0c:	2301      	movs	r3, #1

	/* calculate LTK and mackey */
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
		   &smp->chan.chan.conn->le.init_addr,
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
		   smp->tk)) {
    7d0e:	36d7      	adds	r6, #215	; 0xd7
	BT_DBG("mackey %1s", bt_hex(mackey, 16));

	sys_mem_swap(mackey, 16);

	/* counter for ltk is 1 */
	m[0] = 0x01;
    7d10:	702b      	strb	r3, [r5, #0]

	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
    7d12:	2235      	movs	r2, #53	; 0x35
    7d14:	0033      	movs	r3, r6
    7d16:	0029      	movs	r1, r5
    7d18:	a80a      	add	r0, sp, #40	; 0x28
    7d1a:	f7ff fc33 	bl	7584 <bt_smp_aes_cmac>
	if (err) {
    7d1e:	2800      	cmp	r0, #0
    7d20:	d104      	bne.n	7d2c <compute_and_check_and_send_slave_dhcheck+0x118>
		return err;
	}

	BT_DBG("ltk %s", bt_hex(ltk, 16));

	sys_mem_swap(ltk, 16);
    7d22:	2110      	movs	r1, #16
    7d24:	0030      	movs	r0, r6
    7d26:	f7ff fbbc 	bl	74a2 <sys_mem_swap>
    7d2a:	e003      	b.n	7d34 <compute_and_check_and_send_slave_dhcheck+0x120>
	default:
		return BT_SMP_ERR_UNSPECIFIED;
	}

	/* calculate LTK and mackey */
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
    7d2c:	2800      	cmp	r0, #0
    7d2e:	d001      	beq.n	7d34 <compute_and_check_and_send_slave_dhcheck+0x120>
		   &smp->chan.chan.conn->le.init_addr,
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
		   smp->tk)) {
		return BT_SMP_ERR_UNSPECIFIED;
    7d30:	2308      	movs	r3, #8
    7d32:	e047      	b.n	7dc4 <compute_and_check_and_send_slave_dhcheck+0x1b0>
	}

	/* calculate local DHKey check */
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
		   &smp->chan.chan.conn->le.resp_addr,
    7d34:	6823      	ldr	r3, [r4, #0]
		   smp->tk)) {
		return BT_SMP_ERR_UNSPECIFIED;
	}

	/* calculate local DHKey check */
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
    7d36:	ad16      	add	r5, sp, #88	; 0x58
		   &smp->chan.chan.conn->le.resp_addr,
		   &smp->chan.chan.conn->le.init_addr, e)) {
    7d38:	001a      	movs	r2, r3
		return BT_SMP_ERR_UNSPECIFIED;
	}

	/* calculate local DHKey check */
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
		   &smp->chan.chan.conn->le.resp_addr,
    7d3a:	3362      	adds	r3, #98	; 0x62
		   smp->tk)) {
		return BT_SMP_ERR_UNSPECIFIED;
	}

	/* calculate local DHKey check */
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
    7d3c:	9301      	str	r3, [sp, #4]
    7d3e:	0023      	movs	r3, r4
		   &smp->chan.chan.conn->le.resp_addr,
		   &smp->chan.chan.conn->le.init_addr, e)) {
    7d40:	325b      	adds	r2, #91	; 0x5b
		   smp->tk)) {
		return BT_SMP_ERR_UNSPECIFIED;
	}

	/* calculate local DHKey check */
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
    7d42:	33a1      	adds	r3, #161	; 0xa1
    7d44:	9202      	str	r2, [sp, #8]
    7d46:	9300      	str	r3, [sp, #0]
    7d48:	9503      	str	r5, [sp, #12]
    7d4a:	ab06      	add	r3, sp, #24
    7d4c:	9a04      	ldr	r2, [sp, #16]
    7d4e:	9905      	ldr	r1, [sp, #20]
    7d50:	0038      	movs	r0, r7
    7d52:	f7ff fcac 	bl	76ae <smp_f6>
    7d56:	2800      	cmp	r0, #0
    7d58:	d1ea      	bne.n	7d30 <compute_and_check_and_send_slave_dhcheck+0x11c>
		return BT_SMP_ERR_UNSPECIFIED;
	}

	/* calculate remote DHKey check */
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
		   &smp->chan.chan.conn->le.init_addr,
    7d5a:	6823      	ldr	r3, [r4, #0]
		   &smp->chan.chan.conn->le.init_addr, e)) {
		return BT_SMP_ERR_UNSPECIFIED;
	}

	/* calculate remote DHKey check */
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
    7d5c:	ae0e      	add	r6, sp, #56	; 0x38
		   &smp->chan.chan.conn->le.init_addr,
		   &smp->chan.chan.conn->le.resp_addr, re)) {
    7d5e:	001a      	movs	r2, r3
		return BT_SMP_ERR_UNSPECIFIED;
	}

	/* calculate remote DHKey check */
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
		   &smp->chan.chan.conn->le.init_addr,
    7d60:	335b      	adds	r3, #91	; 0x5b
		   &smp->chan.chan.conn->le.init_addr, e)) {
		return BT_SMP_ERR_UNSPECIFIED;
	}

	/* calculate remote DHKey check */
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
    7d62:	9301      	str	r3, [sp, #4]
    7d64:	0023      	movs	r3, r4
		   &smp->chan.chan.conn->le.init_addr,
		   &smp->chan.chan.conn->le.resp_addr, re)) {
    7d66:	3262      	adds	r2, #98	; 0x62
		   &smp->chan.chan.conn->le.init_addr, e)) {
		return BT_SMP_ERR_UNSPECIFIED;
	}

	/* calculate remote DHKey check */
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
    7d68:	339a      	adds	r3, #154	; 0x9a
    7d6a:	9202      	str	r2, [sp, #8]
    7d6c:	9300      	str	r3, [sp, #0]
    7d6e:	9603      	str	r6, [sp, #12]
    7d70:	ab06      	add	r3, sp, #24
    7d72:	9a05      	ldr	r2, [sp, #20]
    7d74:	9904      	ldr	r1, [sp, #16]
    7d76:	0038      	movs	r0, r7
    7d78:	f7ff fc99 	bl	76ae <smp_f6>
    7d7c:	2800      	cmp	r0, #0
    7d7e:	d1d7      	bne.n	7d30 <compute_and_check_and_send_slave_dhcheck+0x11c>
		   &smp->chan.chan.conn->le.resp_addr, re)) {
		return BT_SMP_ERR_UNSPECIFIED;
	}

	/* compare received E with calculated remote */
	if (memcmp(smp->e, re, 16)) {
    7d80:	0020      	movs	r0, r4
    7d82:	3048      	adds	r0, #72	; 0x48
    7d84:	0031      	movs	r1, r6
    7d86:	2210      	movs	r2, #16
    7d88:	30ff      	adds	r0, #255	; 0xff
    7d8a:	f7f8 ffc1 	bl	d10 <memcmp>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
    7d8e:	230b      	movs	r3, #11
		   &smp->chan.chan.conn->le.resp_addr, re)) {
		return BT_SMP_ERR_UNSPECIFIED;
	}

	/* compare received E with calculated remote */
	if (memcmp(smp->e, re, 16)) {
    7d90:	1e06      	subs	r6, r0, #0
    7d92:	d117      	bne.n	7dc4 <compute_and_check_and_send_slave_dhcheck+0x1b0>
	struct bt_smp_dhkey_check *req;
	struct net_buf *buf;

	BT_DBG("");

	buf = smp_create_pdu(smp->chan.chan.conn, BT_SMP_DHKEY_CHECK,
    7d94:	200d      	movs	r0, #13
    7d96:	f7ff fefd 	bl	7b94 <smp_create_pdu.isra.2>
    7d9a:	1e07      	subs	r7, r0, #0
			     sizeof(*req));
	if (!buf) {
    7d9c:	d00c      	beq.n	7db8 <compute_and_check_and_send_slave_dhcheck+0x1a4>
		return BT_SMP_ERR_UNSPECIFIED;
	}

	req = net_buf_add(buf, sizeof(*req));
    7d9e:	2110      	movs	r1, #16
    7da0:	3008      	adds	r0, #8
    7da2:	f00b fc0f 	bl	135c4 <net_buf_simple_add>
	memcpy(req->e, e, sizeof(req->e));
    7da6:	2210      	movs	r2, #16
    7da8:	0029      	movs	r1, r5
    7daa:	f7f8 ffc6 	bl	d3a <memcpy>

	smp_send(smp, buf, NULL);
    7dae:	0032      	movs	r2, r6
    7db0:	0039      	movs	r1, r7
    7db2:	0020      	movs	r0, r4
    7db4:	f7ff ff1a 	bl	7bec <smp_send>
	}

	/* send local e */
	sc_smp_send_dhkey_check(smp, e);

	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    7db8:	0020      	movs	r0, r4
    7dba:	2101      	movs	r1, #1
    7dbc:	3094      	adds	r0, #148	; 0x94
    7dbe:	f7ff fbd5 	bl	756c <atomic_set_bit>
	return 0;
    7dc2:	2300      	movs	r3, #0
}
    7dc4:	0018      	movs	r0, r3
    7dc6:	b025      	add	sp, #148	; 0x94
    7dc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7dca:	46c0      	nop			; (mov r8, r8)
    7dcc:	00017f48 	.word	0x00017f48

00007dd0 <send_pairing_rsp>:
#endif /* CONFIG_BLUETOOTH_SIGNING */
}

#if defined(CONFIG_BLUETOOTH_PERIPHERAL)
static u8_t send_pairing_rsp(struct bt_smp *smp)
{
    7dd0:	b570      	push	{r4, r5, r6, lr}
    7dd2:	0005      	movs	r5, r0
	struct bt_conn *conn = smp->chan.chan.conn;
	struct bt_smp_pairing *rsp;
	struct net_buf *rsp_buf;

	rsp_buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
    7dd4:	2002      	movs	r0, #2
    7dd6:	f7ff fedd 	bl	7b94 <smp_create_pdu.isra.2>
    7dda:	0004      	movs	r4, r0
	if (!rsp_buf) {
		return BT_SMP_ERR_UNSPECIFIED;
    7ddc:	2008      	movs	r0, #8
	struct bt_conn *conn = smp->chan.chan.conn;
	struct bt_smp_pairing *rsp;
	struct net_buf *rsp_buf;

	rsp_buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
	if (!rsp_buf) {
    7dde:	2c00      	cmp	r4, #0
    7de0:	d00f      	beq.n	7e02 <send_pairing_rsp+0x32>
		return BT_SMP_ERR_UNSPECIFIED;
	}

	rsp = net_buf_add(rsp_buf, sizeof(*rsp));
    7de2:	0020      	movs	r0, r4
    7de4:	2106      	movs	r1, #6
    7de6:	3008      	adds	r0, #8
    7de8:	f00b fbec 	bl	135c4 <net_buf_simple_add>
	memcpy(rsp, smp->prsp + 1, sizeof(*rsp));
    7dec:	0029      	movs	r1, r5
    7dee:	2206      	movs	r2, #6
    7df0:	31a1      	adds	r1, #161	; 0xa1
    7df2:	f7f8 ffa2 	bl	d3a <memcpy>

	smp_send(smp, rsp_buf, NULL);
    7df6:	0028      	movs	r0, r5
    7df8:	2200      	movs	r2, #0
    7dfa:	0021      	movs	r1, r4
    7dfc:	f7ff fef6 	bl	7bec <smp_send>

	return 0;
    7e00:	2000      	movs	r0, #0
}
    7e02:	bd70      	pop	{r4, r5, r6, pc}

00007e04 <smp_pairing_req>:

	return 0;
}

static u8_t smp_pairing_req(struct bt_smp *smp, struct net_buf *buf)
{
    7e04:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_smp_pairing *req = (void *)buf->data;
    7e06:	688b      	ldr	r3, [r1, #8]

	return 0;
}

static u8_t smp_pairing_req(struct bt_smp *smp, struct net_buf *buf)
{
    7e08:	b08b      	sub	sp, #44	; 0x2c
	struct bt_smp_pairing *req = (void *)buf->data;
    7e0a:	9304      	str	r3, [sp, #16]
	struct bt_smp_pairing *rsp;
	int ret;

	BT_DBG("");

	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    7e0c:	78db      	ldrb	r3, [r3, #3]

	return 0;
}

static u8_t smp_pairing_req(struct bt_smp *smp, struct net_buf *buf)
{
    7e0e:	0005      	movs	r5, r0
	struct bt_smp_pairing *rsp;
	int ret;

	BT_DBG("");

	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    7e10:	3b07      	subs	r3, #7
	    (req->max_key_size < BT_SMP_MIN_ENC_KEY_SIZE)) {
		return BT_SMP_ERR_ENC_KEY_SIZE;
    7e12:	2406      	movs	r4, #6
	struct bt_smp_pairing *rsp;
	int ret;

	BT_DBG("");

	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    7e14:	2b09      	cmp	r3, #9
    7e16:	d900      	bls.n	7e1a <smp_pairing_req+0x16>
    7e18:	e152      	b.n	80c0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc0>
#endif /* !CONFIG_BLUETOOTH_SMP_SC_ONLY */

static int smp_init(struct bt_smp *smp)
{
	/* Initialize SMP context without clearing L2CAP channel context */
	memset((u8_t *)smp + sizeof(smp->chan), 0,
    7e1a:	0003      	movs	r3, r0
    7e1c:	3390      	adds	r3, #144	; 0x90
    7e1e:	22e0      	movs	r2, #224	; 0xe0
    7e20:	2100      	movs	r1, #0
    7e22:	0018      	movs	r0, r3
    7e24:	9305      	str	r3, [sp, #20]
    7e26:	f7f8 ffb2 	bl	d8e <memset>
	       sizeof(*smp) - (sizeof(smp->chan) + sizeof(smp->work)));

	/* Generate local random number */
	if (bt_rand(smp->prnd, 16)) {
    7e2a:	0028      	movs	r0, r5
    7e2c:	2110      	movs	r1, #16
    7e2e:	30b7      	adds	r0, #183	; 0xb7
    7e30:	f004 f956 	bl	c0e0 <bt_rand>
		return BT_SMP_ERR_ENC_KEY_SIZE;
	}

	ret = smp_init(smp);
	if (ret) {
		return ret;
    7e34:	3402      	adds	r4, #2
	/* Initialize SMP context without clearing L2CAP channel context */
	memset((u8_t *)smp + sizeof(smp->chan), 0,
	       sizeof(*smp) - (sizeof(smp->chan) + sizeof(smp->work)));

	/* Generate local random number */
	if (bt_rand(smp->prnd, 16)) {
    7e36:	2800      	cmp	r0, #0
    7e38:	d000      	beq.n	7e3c <smp_pairing_req+0x38>
    7e3a:	e141      	b.n	80c0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc0>
		return BT_SMP_ERR_UNSPECIFIED;
	}

	BT_DBG("prnd %s", bt_hex(smp->prnd, 16));

	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
    7e3c:	2105      	movs	r1, #5
    7e3e:	9805      	ldr	r0, [sp, #20]
    7e40:	f7ff fb94 	bl	756c <atomic_set_bit>
	if (ret) {
		return ret;
	}

	/* Store req for later use */
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
    7e44:	002b      	movs	r3, r5
    7e46:	2201      	movs	r2, #1
    7e48:	3399      	adds	r3, #153	; 0x99
    7e4a:	701a      	strb	r2, [r3, #0]
	memcpy(smp->preq + 1, req, sizeof(*req));
    7e4c:	189b      	adds	r3, r3, r2
    7e4e:	0018      	movs	r0, r3
    7e50:	3205      	adds	r2, #5
    7e52:	9904      	ldr	r1, [sp, #16]
    7e54:	9307      	str	r3, [sp, #28]
    7e56:	f7f8 ff70 	bl	d3a <memcpy>

	/* create rsp, it will be used later on */
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
    7e5a:	002b      	movs	r3, r5
    7e5c:	2202      	movs	r2, #2
    7e5e:	33a0      	adds	r3, #160	; 0xa0
    7e60:	701a      	strb	r2, [r3, #0]
	return 0;
}

static u8_t get_auth(u8_t auth)
{
	if (sc_supported) {
    7e62:	4a99      	ldr	r2, [pc, #612]	; (80c8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc8>)

	/* create rsp, it will be used later on */
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
	rsp = (struct bt_smp_pairing *)&smp->prsp[1];

	rsp->auth_req = get_auth(req->auth_req);
    7e64:	9b04      	ldr	r3, [sp, #16]
	return 0;
}

static u8_t get_auth(u8_t auth)
{
	if (sc_supported) {
    7e66:	7812      	ldrb	r2, [r2, #0]

	/* create rsp, it will be used later on */
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
	rsp = (struct bt_smp_pairing *)&smp->prsp[1];

	rsp->auth_req = get_auth(req->auth_req);
    7e68:	789b      	ldrb	r3, [r3, #2]
}

static u8_t get_auth(u8_t auth)
{
	if (sc_supported) {
		auth &= BT_SMP_AUTH_MASK_SC;
    7e6a:	3407      	adds	r4, #7
	return 0;
}

static u8_t get_auth(u8_t auth)
{
	if (sc_supported) {
    7e6c:	2a00      	cmp	r2, #0
    7e6e:	d100      	bne.n	7e72 <smp_pairing_req+0x6e>
		auth &= BT_SMP_AUTH_MASK_SC;
	} else {
		auth &= BT_SMP_AUTH_MASK;
    7e70:	2407      	movs	r4, #7
    7e72:	401c      	ands	r4, r3
	}

	if (get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) {
    7e74:	f7ff fb24 	bl	74c0 <get_io_capa>
    7e78:	2304      	movs	r3, #4
		auth &= ~(BT_SMP_AUTH_MITM);
	} else {
		auth |= BT_SMP_AUTH_MITM;
    7e7a:	001a      	movs	r2, r3
    7e7c:	4322      	orrs	r2, r4
    7e7e:	9206      	str	r2, [sp, #24]
		auth &= BT_SMP_AUTH_MASK_SC;
	} else {
		auth &= BT_SMP_AUTH_MASK;
	}

	if (get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) {
    7e80:	2803      	cmp	r0, #3
    7e82:	d101      	bne.n	7e88 <smp_pairing_req+0x84>
		auth &= ~(BT_SMP_AUTH_MITM);
    7e84:	439c      	bics	r4, r3
    7e86:	9406      	str	r4, [sp, #24]

	/* create rsp, it will be used later on */
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
	rsp = (struct bt_smp_pairing *)&smp->prsp[1];

	rsp->auth_req = get_auth(req->auth_req);
    7e88:	466b      	mov	r3, sp
    7e8a:	002e      	movs	r6, r5
    7e8c:	7e1b      	ldrb	r3, [r3, #24]
    7e8e:	36a1      	adds	r6, #161	; 0xa1
    7e90:	70b3      	strb	r3, [r6, #2]
	rsp->io_capability = get_io_capa();
    7e92:	f7ff fb15 	bl	74c0 <get_io_capa>
	rsp->oob_flag = BT_SMP_OOB_NOT_PRESENT;
    7e96:	2300      	movs	r3, #0
    7e98:	7073      	strb	r3, [r6, #1]
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
    7e9a:	3310      	adds	r3, #16
    7e9c:	70f3      	strb	r3, [r6, #3]
	rsp->init_key_dist = (req->init_key_dist & RECV_KEYS);
    7e9e:	9b04      	ldr	r3, [sp, #16]
	/* create rsp, it will be used later on */
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
	rsp = (struct bt_smp_pairing *)&smp->prsp[1];

	rsp->auth_req = get_auth(req->auth_req);
	rsp->io_capability = get_io_capa();
    7ea0:	7030      	strb	r0, [r6, #0]
	rsp->oob_flag = BT_SMP_OOB_NOT_PRESENT;
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
	rsp->init_key_dist = (req->init_key_dist & RECV_KEYS);
    7ea2:	791a      	ldrb	r2, [r3, #4]
    7ea4:	2307      	movs	r3, #7
    7ea6:	401a      	ands	r2, r3
    7ea8:	7132      	strb	r2, [r6, #4]
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
    7eaa:	9a04      	ldr	r2, [sp, #16]
    7eac:	002f      	movs	r7, r5
    7eae:	7952      	ldrb	r2, [r2, #5]
    7eb0:	3794      	adds	r7, #148	; 0x94
    7eb2:	4013      	ands	r3, r2
    7eb4:	7173      	strb	r3, [r6, #5]

	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    7eb6:	2308      	movs	r3, #8
    7eb8:	9a06      	ldr	r2, [sp, #24]
    7eba:	421a      	tst	r2, r3
    7ebc:	d00e      	beq.n	7edc <smp_pairing_req+0xd8>
    7ebe:	9a04      	ldr	r2, [sp, #16]
    7ec0:	7892      	ldrb	r2, [r2, #2]
    7ec2:	421a      	tst	r2, r3
    7ec4:	d00a      	beq.n	7edc <smp_pairing_req+0xd8>
	    (req->auth_req & BT_SMP_AUTH_SC)) {
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
    7ec6:	2105      	movs	r1, #5
    7ec8:	0038      	movs	r0, r7
    7eca:	f7ff fb4f 	bl	756c <atomic_set_bit>

		rsp->init_key_dist &= RECV_KEYS_SC;
    7ece:	2306      	movs	r3, #6
    7ed0:	7932      	ldrb	r2, [r6, #4]
    7ed2:	401a      	ands	r2, r3
    7ed4:	7132      	strb	r2, [r6, #4]
		rsp->resp_key_dist &= SEND_KEYS_SC;
    7ed6:	7972      	ldrb	r2, [r6, #5]
    7ed8:	4013      	ands	r3, r2
    7eda:	7173      	strb	r3, [r6, #5]
	}

	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
    7edc:	2320      	movs	r3, #32
    7ede:	78b2      	ldrb	r2, [r6, #2]
    7ee0:	421a      	tst	r2, r3
    7ee2:	d007      	beq.n	7ef4 <smp_pairing_req+0xf0>
    7ee4:	9a04      	ldr	r2, [sp, #16]
    7ee6:	7892      	ldrb	r2, [r2, #2]
    7ee8:	421a      	tst	r2, r3
    7eea:	d003      	beq.n	7ef4 <smp_pairing_req+0xf0>
	    (req->auth_req & BT_SMP_AUTH_CT2)) {
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
    7eec:	2111      	movs	r1, #17
    7eee:	0038      	movs	r0, r7
    7ef0:	f7ff fb3c 	bl	756c <atomic_set_bit>
	}

	smp->local_dist = rsp->resp_key_dist;
    7ef4:	236e      	movs	r3, #110	; 0x6e
    7ef6:	7972      	ldrb	r2, [r6, #5]
    7ef8:	33ff      	adds	r3, #255	; 0xff
    7efa:	54ea      	strb	r2, [r5, r3]
	smp->remote_dist = rsp->init_key_dist;
    7efc:	7932      	ldrb	r2, [r6, #4]
    7efe:	3301      	adds	r3, #1
    7f00:	54ea      	strb	r2, [r5, r3]

	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
    7f02:	78b2      	ldrb	r2, [r6, #2]
    7f04:	3b6e      	subs	r3, #110	; 0x6e
    7f06:	3bff      	subs	r3, #255	; 0xff
    7f08:	421a      	tst	r2, r3
    7f0a:	d007      	beq.n	7f1c <smp_pairing_req+0x118>
    7f0c:	9a04      	ldr	r2, [sp, #16]
    7f0e:	7892      	ldrb	r2, [r2, #2]
    7f10:	421a      	tst	r2, r3
    7f12:	d003      	beq.n	7f1c <smp_pairing_req+0x118>
	    (req->auth_req & BT_SMP_AUTH_BONDING)) {
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
    7f14:	210a      	movs	r1, #10
    7f16:	0038      	movs	r0, r7
    7f18:	f7ff fb28 	bl	756c <atomic_set_bit>
	}

	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
    7f1c:	2103      	movs	r1, #3
    7f1e:	0038      	movs	r0, r7
    7f20:	f7ff fb24 	bl	756c <atomic_set_bit>

	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    7f24:	2105      	movs	r1, #5
    7f26:	0038      	movs	r0, r7
    7f28:	f7fa fa81 	bl	242e <atomic_test_bit>
    7f2c:	9b04      	ldr	r3, [sp, #16]
    7f2e:	781b      	ldrb	r3, [r3, #0]
    7f30:	9304      	str	r3, [sp, #16]
    7f32:	002b      	movs	r3, r5
    7f34:	3398      	adds	r3, #152	; 0x98
    7f36:	9306      	str	r3, [sp, #24]
    7f38:	2800      	cmp	r0, #0
    7f3a:	d000      	beq.n	7f3e <smp_pairing_req+0x13a>
    7f3c:	e08b      	b.n	8056 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x56>
static u8_t legacy_get_pair_method(struct bt_smp *smp, u8_t remote_io)
{
	struct bt_smp_pairing *req, *rsp;
	u8_t method;

	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY)
    7f3e:	9b04      	ldr	r3, [sp, #16]
		return JUST_WORKS;
    7f40:	0004      	movs	r4, r0
static u8_t legacy_get_pair_method(struct bt_smp *smp, u8_t remote_io)
{
	struct bt_smp_pairing *req, *rsp;
	u8_t method;

	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY)
    7f42:	2b04      	cmp	r3, #4
    7f44:	d815      	bhi.n	7f72 <smp_pairing_req+0x16e>
    7f46:	9b07      	ldr	r3, [sp, #28]
    7f48:	3004      	adds	r0, #4
    7f4a:	789c      	ldrb	r4, [r3, #2]
    7f4c:	78b3      	ldrb	r3, [r6, #2]
    7f4e:	431c      	orrs	r4, r3
    7f50:	4004      	ands	r4, r0

	req = (struct bt_smp_pairing *)&smp->preq[1];
	rsp = (struct bt_smp_pairing *)&smp->prsp[1];

	/* if none side requires MITM use JustWorks */
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
    7f52:	d00e      	beq.n	7f72 <smp_pairing_req+0x16e>
		return JUST_WORKS;
	}

	method = gen_method_legacy[remote_io][get_io_capa()];
    7f54:	f7ff fab4 	bl	74c0 <get_io_capa>
    7f58:	2305      	movs	r3, #5
    7f5a:	9a04      	ldr	r2, [sp, #16]
    7f5c:	4353      	muls	r3, r2
    7f5e:	4a5b      	ldr	r2, [pc, #364]	; (80cc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xcc>)
    7f60:	18d3      	adds	r3, r2, r3
    7f62:	5c1c      	ldrb	r4, [r3, r0]

	/* if both sides have KeyboardDisplay capabilities, initiator displays
	 * and responder inputs
	 */
	if (method == PASSKEY_ROLE) {
    7f64:	2c04      	cmp	r4, #4
    7f66:	d104      	bne.n	7f72 <smp_pairing_req+0x16e>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    7f68:	682b      	ldr	r3, [r5, #0]
    7f6a:	78db      	ldrb	r3, [r3, #3]
			method = PASSKEY_DISPLAY;
		} else {
			method = PASSKEY_INPUT;
    7f6c:	425c      	negs	r4, r3
    7f6e:	415c      	adcs	r4, r3
    7f70:	3401      	adds	r4, #1
{
	u8_t ret;

	BT_DBG("");

	smp->method = legacy_get_pair_method(smp, remote_io);
    7f72:	9b06      	ldr	r3, [sp, #24]
    7f74:	701c      	strb	r4, [r3, #0]

	/* ask for consent if pairing is not due to sending SecReq*/
	if (smp->method == JUST_WORKS &&
    7f76:	2c00      	cmp	r4, #0
    7f78:	d10d      	bne.n	7f96 <smp_pairing_req+0x192>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    7f7a:	210c      	movs	r1, #12
    7f7c:	0038      	movs	r0, r7
    7f7e:	f7fa fa56 	bl	242e <atomic_test_bit>
	BT_DBG("");

	smp->method = legacy_get_pair_method(smp, remote_io);

	/* ask for consent if pairing is not due to sending SecReq*/
	if (smp->method == JUST_WORKS &&
    7f82:	2800      	cmp	r0, #0
    7f84:	d107      	bne.n	7f96 <smp_pairing_req+0x192>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    7f86:	4e52      	ldr	r6, [pc, #328]	; (80d0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd0>)
    7f88:	6833      	ldr	r3, [r6, #0]
    7f8a:	2b00      	cmp	r3, #0
    7f8c:	d003      	beq.n	7f96 <smp_pairing_req+0x192>
	    bt_auth && bt_auth->pairing_confirm) {
    7f8e:	691b      	ldr	r3, [r3, #16]
    7f90:	2b00      	cmp	r3, #0
    7f92:	d000      	beq.n	7f96 <smp_pairing_req+0x192>
    7f94:	e083      	b.n	809e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9e>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
		bt_auth->pairing_confirm(smp->chan.chan.conn);
		return 0;
	}

	ret = send_pairing_rsp(smp);
    7f96:	0028      	movs	r0, r5
    7f98:	f7ff ff1a 	bl	7dd0 <send_pairing_rsp>
    7f9c:	1e04      	subs	r4, r0, #0
	if (ret) {
    7f9e:	d000      	beq.n	7fa2 <smp_pairing_req+0x19e>
    7fa0:	e08e      	b.n	80c0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc0>
		return ret;
	}

	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    7fa2:	9805      	ldr	r0, [sp, #20]
    7fa4:	2103      	movs	r1, #3
    7fa6:	f7ff fae1 	bl	756c <atomic_set_bit>
	return method;
}

static u8_t legacy_request_tk(struct bt_smp *smp)
{
	struct bt_conn *conn = smp->chan.chan.conn;
    7faa:	682e      	ldr	r6, [r5, #0]
	/*
	 * Fail if we have keys that are stronger than keys that will be
	 * distributed in new pairing. This is to avoid replacing authenticated
	 * keys with unauthenticated ones.
	  */
	keys = bt_keys_find_addr(&conn->le.dst);
    7fac:	0030      	movs	r0, r6
    7fae:	3054      	adds	r0, #84	; 0x54
    7fb0:	f001 f928 	bl	9204 <bt_keys_find_addr>
	if (keys && atomic_test_bit(keys->flags, BT_KEYS_AUTHENTICATED) &&
    7fb4:	2800      	cmp	r0, #0
    7fb6:	d015      	beq.n	7fe4 <smp_pairing_req+0x1e0>
    7fb8:	3008      	adds	r0, #8
    7fba:	0021      	movs	r1, r4
    7fbc:	f7fa fa37 	bl	242e <atomic_test_bit>
    7fc0:	2800      	cmp	r0, #0
    7fc2:	d00f      	beq.n	7fe4 <smp_pairing_req+0x1e0>
    7fc4:	9b06      	ldr	r3, [sp, #24]
    7fc6:	781b      	ldrb	r3, [r3, #0]
    7fc8:	2b00      	cmp	r3, #0
    7fca:	d10b      	bne.n	7fe4 <smp_pairing_req+0x1e0>
	    smp->method == JUST_WORKS) {
		BT_ERR("JustWorks failed, authenticated keys present");
    7fcc:	4b41      	ldr	r3, [pc, #260]	; (80d4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd4>)
    7fce:	4a42      	ldr	r2, [pc, #264]	; (80d8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd8>)
    7fd0:	9301      	str	r3, [sp, #4]
    7fd2:	4b42      	ldr	r3, [pc, #264]	; (80dc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xdc>)
    7fd4:	4942      	ldr	r1, [pc, #264]	; (80e0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe0>)
    7fd6:	9300      	str	r3, [sp, #0]
    7fd8:	4842      	ldr	r0, [pc, #264]	; (80e4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe4>)
    7fda:	4b43      	ldr	r3, [pc, #268]	; (80e8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe8>)
    7fdc:	f7f9 fcd0 	bl	1980 <printk>
		return BT_SMP_ERR_UNSPECIFIED;
    7fe0:	3408      	adds	r4, #8
    7fe2:	e06d      	b.n	80c0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc0>
	}

	switch (smp->method) {
    7fe4:	9b06      	ldr	r3, [sp, #24]
    7fe6:	781c      	ldrb	r4, [r3, #0]
    7fe8:	2c01      	cmp	r4, #1
    7fea:	d01c      	beq.n	8026 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x26>
    7fec:	2c00      	cmp	r4, #0
    7fee:	d067      	beq.n	80c0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc0>
    7ff0:	2c02      	cmp	r4, #2
    7ff2:	d123      	bne.n	803c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3c>
	case PASSKEY_DISPLAY:
		if (bt_rand(&passkey, sizeof(passkey))) {
    7ff4:	2104      	movs	r1, #4
    7ff6:	a809      	add	r0, sp, #36	; 0x24
    7ff8:	f004 f872 	bl	c0e0 <bt_rand>
			return BT_SMP_ERR_UNSPECIFIED;
    7ffc:	3406      	adds	r4, #6
		return BT_SMP_ERR_UNSPECIFIED;
	}

	switch (smp->method) {
	case PASSKEY_DISPLAY:
		if (bt_rand(&passkey, sizeof(passkey))) {
    7ffe:	1e07      	subs	r7, r0, #0
    8000:	d15e      	bne.n	80c0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc0>
			return BT_SMP_ERR_UNSPECIFIED;
		}

		passkey %= 1000000;
    8002:	9809      	ldr	r0, [sp, #36]	; 0x24
    8004:	4939      	ldr	r1, [pc, #228]	; (80ec <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xec>)
    8006:	f7f8 f951 	bl	2ac <__aeabi_uidivmod>

		bt_auth->passkey_display(conn, passkey);
    800a:	4b31      	ldr	r3, [pc, #196]	; (80d0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd0>)
	case PASSKEY_DISPLAY:
		if (bt_rand(&passkey, sizeof(passkey))) {
			return BT_SMP_ERR_UNSPECIFIED;
		}

		passkey %= 1000000;
    800c:	9109      	str	r1, [sp, #36]	; 0x24

		bt_auth->passkey_display(conn, passkey);
    800e:	681b      	ldr	r3, [r3, #0]
    8010:	0030      	movs	r0, r6
    8012:	681b      	ldr	r3, [r3, #0]
    8014:	4798      	blx	r3

		passkey = sys_cpu_to_le32(passkey);
		memcpy(smp->tk, &passkey, sizeof(passkey));
    8016:	0028      	movs	r0, r5
    8018:	2204      	movs	r2, #4
    801a:	30d7      	adds	r0, #215	; 0xd7
    801c:	a909      	add	r1, sp, #36	; 0x24
    801e:	f7f8 fe8c 	bl	d3a <memcpy>
	default:
		BT_ERR("Unknown pairing method (%u)", smp->method);
		return BT_SMP_ERR_UNSPECIFIED;
	}

	return 0;
    8022:	003c      	movs	r4, r7
    8024:	e04c      	b.n	80c0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc0>
		passkey = sys_cpu_to_le32(passkey);
		memcpy(smp->tk, &passkey, sizeof(passkey));

		break;
	case PASSKEY_INPUT:
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    8026:	2109      	movs	r1, #9
    8028:	0038      	movs	r0, r7
    802a:	f7ff fa9f 	bl	756c <atomic_set_bit>
		bt_auth->passkey_entry(conn);
    802e:	4b28      	ldr	r3, [pc, #160]	; (80d0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd0>)
    8030:	0030      	movs	r0, r6
    8032:	681b      	ldr	r3, [r3, #0]
	default:
		BT_ERR("Unknown pairing method (%u)", smp->method);
		return BT_SMP_ERR_UNSPECIFIED;
	}

	return 0;
    8034:	2400      	movs	r4, #0
		memcpy(smp->tk, &passkey, sizeof(passkey));

		break;
	case PASSKEY_INPUT:
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
		bt_auth->passkey_entry(conn);
    8036:	685b      	ldr	r3, [r3, #4]
    8038:	4798      	blx	r3
    803a:	e041      	b.n	80c0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc0>
		break;
	case JUST_WORKS:
		break;
	default:
		BT_ERR("Unknown pairing method (%u)", smp->method);
    803c:	4b25      	ldr	r3, [pc, #148]	; (80d4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd4>)
    803e:	9401      	str	r4, [sp, #4]
    8040:	9302      	str	r3, [sp, #8]
    8042:	4b26      	ldr	r3, [pc, #152]	; (80dc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xdc>)
    8044:	4a24      	ldr	r2, [pc, #144]	; (80d8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd8>)
    8046:	9300      	str	r3, [sp, #0]
    8048:	4925      	ldr	r1, [pc, #148]	; (80e0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe0>)
    804a:	4b27      	ldr	r3, [pc, #156]	; (80e8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe8>)
    804c:	4828      	ldr	r0, [pc, #160]	; (80f0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xf0>)
    804e:	f7f9 fc97 	bl	1980 <printk>
		return BT_SMP_ERR_UNSPECIFIED;
    8052:	2408      	movs	r4, #8
    8054:	e034      	b.n	80c0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc0>

static u8_t get_pair_method(struct bt_smp *smp, u8_t remote_io)
{
	struct bt_smp_pairing *req, *rsp;

	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY)
    8056:	9b04      	ldr	r3, [sp, #16]
		return JUST_WORKS;
    8058:	2400      	movs	r4, #0

static u8_t get_pair_method(struct bt_smp *smp, u8_t remote_io)
{
	struct bt_smp_pairing *req, *rsp;

	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY)
    805a:	2b04      	cmp	r3, #4
    805c:	d80e      	bhi.n	807c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7c>
    805e:	2004      	movs	r0, #4
    8060:	9b07      	ldr	r3, [sp, #28]
    8062:	789c      	ldrb	r4, [r3, #2]
    8064:	78b3      	ldrb	r3, [r6, #2]
    8066:	431c      	orrs	r4, r3
    8068:	4004      	ands	r4, r0

	req = (struct bt_smp_pairing *)&smp->preq[1];
	rsp = (struct bt_smp_pairing *)&smp->prsp[1];

	/* if none side requires MITM use JustWorks */
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
    806a:	d007      	beq.n	807c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7c>
		return JUST_WORKS;
	}

	return gen_method_sc[remote_io][get_io_capa()];
    806c:	f7ff fa28 	bl	74c0 <get_io_capa>
    8070:	2305      	movs	r3, #5
    8072:	9a04      	ldr	r2, [sp, #16]
    8074:	4353      	muls	r3, r2
    8076:	4a1f      	ldr	r2, [pc, #124]	; (80f4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xf4>)
    8078:	18d3      	adds	r3, r2, r3
    807a:	5c1c      	ldrb	r4, [r3, r0]
#else
		return legacy_pairing_req(smp, req->io_capability);
#endif /* CONFIG_BLUETOOTH_SMP_SC_ONLY */
	}

	smp->method = get_pair_method(smp, req->io_capability);
    807c:	9b06      	ldr	r3, [sp, #24]
    807e:	701c      	strb	r4, [r3, #0]
	if (IS_ENABLED(CONFIG_BLUETOOTH_SMP_SC_ONLY) &&
	    smp->method == JUST_WORKS) {
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
	}

	if (smp->method == JUST_WORKS) {
    8080:	2c00      	cmp	r4, #0
    8082:	d115      	bne.n	80b0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb0>
		if (IS_ENABLED(CONFIG_BLUETOOTH_SMP_SC_ONLY)) {
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
		}

		/* ask for consent if pairing is not due to sending SecReq*/
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    8084:	210c      	movs	r1, #12
    8086:	0038      	movs	r0, r7
    8088:	f7fa f9d1 	bl	242e <atomic_test_bit>
    808c:	2800      	cmp	r0, #0
    808e:	d10f      	bne.n	80b0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb0>
    8090:	4e0f      	ldr	r6, [pc, #60]	; (80d0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd0>)
    8092:	6833      	ldr	r3, [r6, #0]
    8094:	2b00      	cmp	r3, #0
    8096:	d00b      	beq.n	80b0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb0>
		    bt_auth && bt_auth->pairing_confirm) {
    8098:	691b      	ldr	r3, [r3, #16]
    809a:	2b00      	cmp	r3, #0
    809c:	d008      	beq.n	80b0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb0>
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
    809e:	0038      	movs	r0, r7
    80a0:	2109      	movs	r1, #9
    80a2:	f7ff fa63 	bl	756c <atomic_set_bit>
			bt_auth->pairing_confirm(smp->chan.chan.conn);
    80a6:	6833      	ldr	r3, [r6, #0]
    80a8:	6828      	ldr	r0, [r5, #0]
    80aa:	691b      	ldr	r3, [r3, #16]
    80ac:	4798      	blx	r3
			return 0;
    80ae:	e007      	b.n	80c0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc0>
		}
	}

	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
    80b0:	210c      	movs	r1, #12
    80b2:	9805      	ldr	r0, [sp, #20]
    80b4:	f7ff fa5a 	bl	756c <atomic_set_bit>
	return send_pairing_rsp(smp);
    80b8:	0028      	movs	r0, r5
    80ba:	f7ff fe89 	bl	7dd0 <send_pairing_rsp>
    80be:	0004      	movs	r4, r0
}
    80c0:	0020      	movs	r0, r4
    80c2:	b00b      	add	sp, #44	; 0x2c
    80c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    80c6:	46c0      	nop			; (mov r8, r8)
    80c8:	200010a8 	.word	0x200010a8
    80cc:	00017ebe 	.word	0x00017ebe
    80d0:	20002240 	.word	0x20002240
    80d4:	000154c4 	.word	0x000154c4
    80d8:	00015484 	.word	0x00015484
    80dc:	000154c9 	.word	0x000154c9
    80e0:	0001548b 	.word	0x0001548b
    80e4:	00016402 	.word	0x00016402
    80e8:	00017f58 	.word	0x00017f58
    80ec:	000f4240 	.word	0x000f4240
    80f0:	0001643f 	.word	0x0001643f
    80f4:	00017dcc 	.word	0x00017dcc

000080f8 <sc_send_public_key>:
	return BT_SMP_ERR_CMD_NOTSUPP;
}
#endif /* CONFIG_BLUETOOTH_PERIPHERAL */

static u8_t sc_send_public_key(struct bt_smp *smp)
{
    80f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    80fa:	0006      	movs	r6, r0
	struct bt_smp_public_key *req;
	struct net_buf *req_buf;

	req_buf = smp_create_pdu(smp->chan.chan.conn, BT_SMP_CMD_PUBLIC_KEY,
    80fc:	200c      	movs	r0, #12
    80fe:	f7ff fd49 	bl	7b94 <smp_create_pdu.isra.2>
    8102:	0005      	movs	r5, r0
				 sizeof(*req));
	if (!req_buf) {
		return BT_SMP_ERR_UNSPECIFIED;
    8104:	2008      	movs	r0, #8
	struct bt_smp_public_key *req;
	struct net_buf *req_buf;

	req_buf = smp_create_pdu(smp->chan.chan.conn, BT_SMP_CMD_PUBLIC_KEY,
				 sizeof(*req));
	if (!req_buf) {
    8106:	2d00      	cmp	r5, #0
    8108:	d017      	beq.n	813a <sc_send_public_key+0x42>
		return BT_SMP_ERR_UNSPECIFIED;
	}

	req = net_buf_add(req_buf, sizeof(*req));
    810a:	0028      	movs	r0, r5
    810c:	2140      	movs	r1, #64	; 0x40
    810e:	3008      	adds	r0, #8
    8110:	f00b fa58 	bl	135c4 <net_buf_simple_add>
    8114:	0004      	movs	r4, r0

	memcpy(req->x, sc_public_key, sizeof(req->x));
    8116:	4f09      	ldr	r7, [pc, #36]	; (813c <sc_send_public_key+0x44>)
    8118:	2220      	movs	r2, #32
    811a:	0039      	movs	r1, r7
    811c:	f7f8 fe0d 	bl	d3a <memcpy>
	memcpy(req->y, &sc_public_key[32], sizeof(req->y));
    8120:	0039      	movs	r1, r7
    8122:	0020      	movs	r0, r4
    8124:	3120      	adds	r1, #32
    8126:	2220      	movs	r2, #32
    8128:	3020      	adds	r0, #32
    812a:	f7f8 fe06 	bl	d3a <memcpy>

	smp_send(smp, req_buf, NULL);
    812e:	0030      	movs	r0, r6
    8130:	2200      	movs	r2, #0
    8132:	0029      	movs	r1, r5
    8134:	f7ff fd5a 	bl	7bec <smp_send>

	if (IS_ENABLED(CONFIG_BLUETOOTH_USE_DEBUG_KEYS)) {
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
	}

	return 0;
    8138:	2000      	movs	r0, #0
}
    813a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    813c:	200010a9 	.word	0x200010a9

00008140 <smp_send_pairing_random>:

	return 0;
}

static u8_t smp_send_pairing_random(struct bt_smp *smp)
{
    8140:	b570      	push	{r4, r5, r6, lr}
    8142:	0005      	movs	r5, r0
	struct bt_conn *conn = smp->chan.chan.conn;
	struct bt_smp_pairing_random *req;
	struct net_buf *rsp_buf;

	rsp_buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
    8144:	2004      	movs	r0, #4
    8146:	f7ff fd25 	bl	7b94 <smp_create_pdu.isra.2>
    814a:	0004      	movs	r4, r0
	if (!rsp_buf) {
		return BT_SMP_ERR_UNSPECIFIED;
    814c:	2008      	movs	r0, #8
	struct bt_conn *conn = smp->chan.chan.conn;
	struct bt_smp_pairing_random *req;
	struct net_buf *rsp_buf;

	rsp_buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
	if (!rsp_buf) {
    814e:	2c00      	cmp	r4, #0
    8150:	d00f      	beq.n	8172 <smp_send_pairing_random+0x32>
		return BT_SMP_ERR_UNSPECIFIED;
	}

	req = net_buf_add(rsp_buf, sizeof(*req));
    8152:	0020      	movs	r0, r4
    8154:	2110      	movs	r1, #16
    8156:	3008      	adds	r0, #8
    8158:	f00b fa34 	bl	135c4 <net_buf_simple_add>
	memcpy(req->val, smp->prnd, sizeof(req->val));
    815c:	0029      	movs	r1, r5
    815e:	2210      	movs	r2, #16
    8160:	31b7      	adds	r1, #183	; 0xb7
    8162:	f7f8 fdea 	bl	d3a <memcpy>

	smp_send(smp, rsp_buf, NULL);
    8166:	0028      	movs	r0, r5
    8168:	2200      	movs	r2, #0
    816a:	0021      	movs	r1, r4
    816c:	f7ff fd3e 	bl	7bec <smp_send>

	return 0;
    8170:	2000      	movs	r0, #0
}
    8172:	bd70      	pop	{r4, r5, r6, pc}

00008174 <smp_pairing_rsp>:
    8174:	2007      	movs	r0, #7
    8176:	4770      	bx	lr

00008178 <smp_error>:
	bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb);
	k_delayed_work_submit(&smp->work, SMP_TIMEOUT);
}

static int smp_error(struct bt_smp *smp, u8_t reason)
{
    8178:	b570      	push	{r4, r5, r6, lr}
    817a:	0005      	movs	r5, r0
    817c:	000e      	movs	r6, r1
			sc_derive_link_key(smp);
		}
	}
#endif /* CONFIG_BLUETOOTH_BREDR */

	smp_reset(smp);
    817e:	f7ff fafa 	bl	7776 <smp_reset>
	struct net_buf *buf;

	/* reset context and report */
	smp_pairing_complete(smp, reason);

	buf = smp_create_pdu(smp->chan.chan.conn, BT_SMP_CMD_PAIRING_FAIL,
    8182:	2005      	movs	r0, #5
    8184:	f7ff fd06 	bl	7b94 <smp_create_pdu.isra.2>
    8188:	1e04      	subs	r4, r0, #0
			     sizeof(*rsp));
	if (!buf) {
    818a:	d00c      	beq.n	81a6 <smp_error+0x2e>
		return -ENOBUFS;
	}

	rsp = net_buf_add(buf, sizeof(*rsp));
    818c:	2101      	movs	r1, #1
    818e:	3008      	adds	r0, #8
    8190:	f00b fa18 	bl	135c4 <net_buf_simple_add>
	rsp->reason = reason;
    8194:	7006      	strb	r6, [r0, #0]
    8196:	6828      	ldr	r0, [r5, #0]
    8198:	2300      	movs	r3, #0
    819a:	0022      	movs	r2, r4
    819c:	2106      	movs	r1, #6
    819e:	f7fd f8cb 	bl	5338 <bt_l2cap_send_cb>

	/* SMP timer is not restarted for PairingFailed so don't use smp_send */
	bt_l2cap_send(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf);

	return 0;
    81a2:	2000      	movs	r0, #0
    81a4:	e001      	b.n	81aa <smp_error+0x32>
	smp_pairing_complete(smp, reason);

	buf = smp_create_pdu(smp->chan.chan.conn, BT_SMP_CMD_PAIRING_FAIL,
			     sizeof(*rsp));
	if (!buf) {
		return -ENOBUFS;
    81a6:	2037      	movs	r0, #55	; 0x37
    81a8:	4240      	negs	r0, r0

	/* SMP timer is not restarted for PairingFailed so don't use smp_send */
	bt_l2cap_send(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf);

	return 0;
}
    81aa:	bd70      	pop	{r4, r5, r6, pc}

000081ac <bt_smp_dhkey_ready>:
	return 0;
}
#endif /* CONFIG_BLUETOOTH_PERIPHERAL */

static void bt_smp_dhkey_ready(const u8_t *dhkey)
{
    81ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int i;

	BT_DBG("%p", dhkey);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		if (atomic_test_and_clear_bit(bt_smp_pool[i].flags,
    81ae:	4c1b      	ldr	r4, [pc, #108]	; (821c <bt_smp_dhkey_ready+0x70>)
	return 0;
}
#endif /* CONFIG_BLUETOOTH_PERIPHERAL */

static void bt_smp_dhkey_ready(const u8_t *dhkey)
{
    81b0:	0007      	movs	r7, r0
	int i;

	BT_DBG("%p", dhkey);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		if (atomic_test_and_clear_bit(bt_smp_pool[i].flags,
    81b2:	0025      	movs	r5, r4
    81b4:	3594      	adds	r5, #148	; 0x94
    81b6:	2107      	movs	r1, #7
    81b8:	0028      	movs	r0, r5
    81ba:	f7ff facc 	bl	7756 <atomic_test_and_clear_bit>
    81be:	0026      	movs	r6, r4
    81c0:	2800      	cmp	r0, #0
    81c2:	d02a      	beq.n	821a <bt_smp_dhkey_ready+0x6e>

	if (!smp) {
		return;
	}

	if (!dhkey) {
    81c4:	2f00      	cmp	r7, #0
    81c6:	d101      	bne.n	81cc <bt_smp_dhkey_ready+0x20>
		smp_error(smp, BT_SMP_ERR_DHKEY_CHECK_FAILED);
    81c8:	210b      	movs	r1, #11
    81ca:	e023      	b.n	8214 <bt_smp_dhkey_ready+0x68>
		return;
	}

	memcpy(smp->dhkey, dhkey, 32);
    81cc:	0020      	movs	r0, r4
    81ce:	3028      	adds	r0, #40	; 0x28
    81d0:	0039      	movs	r1, r7
    81d2:	30ff      	adds	r0, #255	; 0xff
    81d4:	2220      	movs	r2, #32
    81d6:	f7f8 fdb0 	bl	d3a <memcpy>

	/* wait for user passkey confirmation */
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    81da:	2109      	movs	r1, #9
    81dc:	0028      	movs	r0, r5
    81de:	f7fa f926 	bl	242e <atomic_test_bit>
    81e2:	2800      	cmp	r0, #0
    81e4:	d005      	beq.n	81f2 <bt_smp_dhkey_ready+0x46>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
    81e6:	0030      	movs	r0, r6
    81e8:	2108      	movs	r1, #8
    81ea:	3094      	adds	r0, #148	; 0x94
    81ec:	f7ff f9be 	bl	756c <atomic_set_bit>
		return;
    81f0:	e013      	b.n	821a <bt_smp_dhkey_ready+0x6e>
	}

	/* wait for remote DHKey Check */
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
    81f2:	210d      	movs	r1, #13
    81f4:	0028      	movs	r0, r5
    81f6:	f7fa f91a 	bl	242e <atomic_test_bit>
    81fa:	2800      	cmp	r0, #0
    81fc:	d1f3      	bne.n	81e6 <bt_smp_dhkey_ready+0x3a>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
		return;
	}

	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
    81fe:	2108      	movs	r1, #8
    8200:	0028      	movs	r0, r5
    8202:	f7fa f914 	bl	242e <atomic_test_bit>
    8206:	2800      	cmp	r0, #0
    8208:	d007      	beq.n	821a <bt_smp_dhkey_ready+0x6e>
			return;
		}
#endif /* CONFIG_BLUETOOTH_CENTRAL */

#if defined(CONFIG_BLUETOOTH_PERIPHERAL)
		err = compute_and_check_and_send_slave_dhcheck(smp);
    820a:	0020      	movs	r0, r4
    820c:	f7ff fd02 	bl	7c14 <compute_and_check_and_send_slave_dhcheck>
    8210:	1e01      	subs	r1, r0, #0
		if (err) {
    8212:	d002      	beq.n	821a <bt_smp_dhkey_ready+0x6e>
			smp_error(smp, err);
    8214:	0020      	movs	r0, r4
    8216:	f7ff ffaf 	bl	8178 <smp_error>
		}
#endif /* CONFIG_BLUETOOTH_PERIPHERAL */
	}
}
    821a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    821c:	200010ec 	.word	0x200010ec

00008220 <bt_smp_recv>:
	{ smp_public_key,          sizeof(struct bt_smp_public_key) },
	{ smp_dhkey_check,         sizeof(struct bt_smp_dhkey_check) },
};

static void bt_smp_recv(struct bt_l2cap_chan *chan, struct net_buf *buf)
{
    8220:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_smp *smp = CONTAINER_OF(chan, struct bt_smp, chan);
	struct bt_smp_hdr *hdr = (void *)buf->data;
	u8_t err;

	if (buf->len < sizeof(*hdr)) {
    8222:	898b      	ldrh	r3, [r1, #12]
	{ smp_public_key,          sizeof(struct bt_smp_public_key) },
	{ smp_dhkey_check,         sizeof(struct bt_smp_dhkey_check) },
};

static void bt_smp_recv(struct bt_l2cap_chan *chan, struct net_buf *buf)
{
    8224:	b085      	sub	sp, #20
    8226:	0004      	movs	r4, r0
    8228:	000d      	movs	r5, r1
	struct bt_smp *smp = CONTAINER_OF(chan, struct bt_smp, chan);
	struct bt_smp_hdr *hdr = (void *)buf->data;
	u8_t err;

	if (buf->len < sizeof(*hdr)) {
    822a:	2b00      	cmp	r3, #0
    822c:	d10a      	bne.n	8244 <bt_smp_recv+0x24>
		BT_ERR("Too small SMP PDU received");
    822e:	4b37      	ldr	r3, [pc, #220]	; (830c <bt_smp_recv+0xec>)
    8230:	4a37      	ldr	r2, [pc, #220]	; (8310 <bt_smp_recv+0xf0>)
    8232:	9301      	str	r3, [sp, #4]
    8234:	4b37      	ldr	r3, [pc, #220]	; (8314 <bt_smp_recv+0xf4>)
    8236:	4938      	ldr	r1, [pc, #224]	; (8318 <bt_smp_recv+0xf8>)
    8238:	9300      	str	r3, [sp, #0]
    823a:	4838      	ldr	r0, [pc, #224]	; (831c <bt_smp_recv+0xfc>)
    823c:	4b38      	ldr	r3, [pc, #224]	; (8320 <bt_smp_recv+0x100>)
    823e:	f7f9 fb9f 	bl	1980 <printk>
		return;
    8242:	e060      	b.n	8306 <bt_smp_recv+0xe6>
	}

	BT_DBG("Received SMP code 0x%02x len %u", hdr->code, buf->len);

	net_buf_pull(buf, sizeof(*hdr));
    8244:	0028      	movs	r0, r5
};

static void bt_smp_recv(struct bt_l2cap_chan *chan, struct net_buf *buf)
{
	struct bt_smp *smp = CONTAINER_OF(chan, struct bt_smp, chan);
	struct bt_smp_hdr *hdr = (void *)buf->data;
    8246:	688e      	ldr	r6, [r1, #8]
		return;
	}

	BT_DBG("Received SMP code 0x%02x len %u", hdr->code, buf->len);

	net_buf_pull(buf, sizeof(*hdr));
    8248:	3008      	adds	r0, #8
    824a:	2101      	movs	r1, #1
    824c:	f00b f9db 	bl	13606 <net_buf_simple_pull>
	/*
	 * If SMP timeout occurred "no further SMP commands shall be sent over
	 * the L2CAP Security Manager Channel. A new SM procedure shall only be
	 * performed when a new physical link has been established."
	 */
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    8250:	0020      	movs	r0, r4
    8252:	2104      	movs	r1, #4
    8254:	3094      	adds	r0, #148	; 0x94
    8256:	f7fa f8ea 	bl	242e <atomic_test_bit>
    825a:	2800      	cmp	r0, #0
    825c:	d00c      	beq.n	8278 <bt_smp_recv+0x58>
		BT_WARN("SMP command (code 0x%02x) received after timeout",
    825e:	4b2b      	ldr	r3, [pc, #172]	; (830c <bt_smp_recv+0xec>)
    8260:	4a30      	ldr	r2, [pc, #192]	; (8324 <bt_smp_recv+0x104>)
    8262:	9302      	str	r3, [sp, #8]
    8264:	7833      	ldrb	r3, [r6, #0]
    8266:	492c      	ldr	r1, [pc, #176]	; (8318 <bt_smp_recv+0xf8>)
    8268:	9301      	str	r3, [sp, #4]
    826a:	4b2f      	ldr	r3, [pc, #188]	; (8328 <bt_smp_recv+0x108>)
    826c:	482f      	ldr	r0, [pc, #188]	; (832c <bt_smp_recv+0x10c>)
    826e:	9300      	str	r3, [sp, #0]
    8270:	4b2b      	ldr	r3, [pc, #172]	; (8320 <bt_smp_recv+0x100>)
    8272:	f7f9 fb85 	bl	1980 <printk>
			hdr->code);
		return;
    8276:	e046      	b.n	8306 <bt_smp_recv+0xe6>
	}

	if (hdr->code >= ARRAY_SIZE(handlers) || !handlers[hdr->code].func) {
    8278:	7831      	ldrb	r1, [r6, #0]
    827a:	290d      	cmp	r1, #13
    827c:	d804      	bhi.n	8288 <bt_smp_recv+0x68>
    827e:	4f2c      	ldr	r7, [pc, #176]	; (8330 <bt_smp_recv+0x110>)
    8280:	00cb      	lsls	r3, r1, #3
    8282:	59db      	ldr	r3, [r3, r7]
    8284:	2b00      	cmp	r3, #0
    8286:	d10c      	bne.n	82a2 <bt_smp_recv+0x82>
		BT_WARN("Unhandled SMP code 0x%02x", hdr->code);
    8288:	4b20      	ldr	r3, [pc, #128]	; (830c <bt_smp_recv+0xec>)
    828a:	9101      	str	r1, [sp, #4]
    828c:	9302      	str	r3, [sp, #8]
    828e:	4b26      	ldr	r3, [pc, #152]	; (8328 <bt_smp_recv+0x108>)
    8290:	4921      	ldr	r1, [pc, #132]	; (8318 <bt_smp_recv+0xf8>)
    8292:	9300      	str	r3, [sp, #0]
    8294:	4a23      	ldr	r2, [pc, #140]	; (8324 <bt_smp_recv+0x104>)
    8296:	4b22      	ldr	r3, [pc, #136]	; (8320 <bt_smp_recv+0x100>)
    8298:	4826      	ldr	r0, [pc, #152]	; (8334 <bt_smp_recv+0x114>)
    829a:	f7f9 fb71 	bl	1980 <printk>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
    829e:	2107      	movs	r1, #7
    82a0:	e02e      	b.n	8300 <bt_smp_recv+0xe0>
		return;
	}

	if (!atomic_test_and_clear_bit(&smp->allowed_cmds, hdr->code)) {
    82a2:	0020      	movs	r0, r4
    82a4:	3090      	adds	r0, #144	; 0x90
    82a6:	f7ff fa56 	bl	7756 <atomic_test_and_clear_bit>
    82aa:	2800      	cmp	r0, #0
    82ac:	d10d      	bne.n	82ca <bt_smp_recv+0xaa>
		BT_WARN("Unexpected SMP code 0x%02x", hdr->code);
    82ae:	4b17      	ldr	r3, [pc, #92]	; (830c <bt_smp_recv+0xec>)
    82b0:	4919      	ldr	r1, [pc, #100]	; (8318 <bt_smp_recv+0xf8>)
    82b2:	9302      	str	r3, [sp, #8]
    82b4:	7833      	ldrb	r3, [r6, #0]
    82b6:	4a1b      	ldr	r2, [pc, #108]	; (8324 <bt_smp_recv+0x104>)
    82b8:	9301      	str	r3, [sp, #4]
    82ba:	4b1b      	ldr	r3, [pc, #108]	; (8328 <bt_smp_recv+0x108>)
    82bc:	481e      	ldr	r0, [pc, #120]	; (8338 <bt_smp_recv+0x118>)
    82be:	9300      	str	r3, [sp, #0]
    82c0:	4b17      	ldr	r3, [pc, #92]	; (8320 <bt_smp_recv+0x100>)
    82c2:	f7f9 fb5d 	bl	1980 <printk>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
    82c6:	2108      	movs	r1, #8
    82c8:	e01a      	b.n	8300 <bt_smp_recv+0xe0>
		return;
	}

	if (buf->len != handlers[hdr->code].expect_len) {
    82ca:	7831      	ldrb	r1, [r6, #0]
    82cc:	89aa      	ldrh	r2, [r5, #12]
    82ce:	00cb      	lsls	r3, r1, #3
    82d0:	18f8      	adds	r0, r7, r3
    82d2:	7900      	ldrb	r0, [r0, #4]
    82d4:	4290      	cmp	r0, r2
    82d6:	d00d      	beq.n	82f4 <bt_smp_recv+0xd4>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
    82d8:	4b0c      	ldr	r3, [pc, #48]	; (830c <bt_smp_recv+0xec>)
    82da:	9102      	str	r1, [sp, #8]
    82dc:	9303      	str	r3, [sp, #12]
    82de:	4b0d      	ldr	r3, [pc, #52]	; (8314 <bt_smp_recv+0xf4>)
    82e0:	9201      	str	r2, [sp, #4]
    82e2:	9300      	str	r3, [sp, #0]
    82e4:	490c      	ldr	r1, [pc, #48]	; (8318 <bt_smp_recv+0xf8>)
    82e6:	4b0e      	ldr	r3, [pc, #56]	; (8320 <bt_smp_recv+0x100>)
    82e8:	4a09      	ldr	r2, [pc, #36]	; (8310 <bt_smp_recv+0xf0>)
    82ea:	4814      	ldr	r0, [pc, #80]	; (833c <bt_smp_recv+0x11c>)
    82ec:	f7f9 fb48 	bl	1980 <printk>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
    82f0:	210a      	movs	r1, #10
    82f2:	e005      	b.n	8300 <bt_smp_recv+0xe0>
		return;
	}

	err = handlers[hdr->code].func(smp, buf);
    82f4:	0029      	movs	r1, r5
    82f6:	59db      	ldr	r3, [r3, r7]
    82f8:	0020      	movs	r0, r4
    82fa:	4798      	blx	r3
    82fc:	1e01      	subs	r1, r0, #0
	if (err) {
    82fe:	d002      	beq.n	8306 <bt_smp_recv+0xe6>
		smp_error(smp, err);
    8300:	0020      	movs	r0, r4
    8302:	f7ff ff39 	bl	8178 <smp_error>
	}
}
    8306:	b005      	add	sp, #20
    8308:	bdf0      	pop	{r4, r5, r6, r7, pc}
    830a:	46c0      	nop			; (mov r8, r8)
    830c:	000154c4 	.word	0x000154c4
    8310:	00015484 	.word	0x00015484
    8314:	000154c9 	.word	0x000154c9
    8318:	0001548b 	.word	0x0001548b
    831c:	0001646b 	.word	0x0001646b
    8320:	00017dac 	.word	0x00017dac
    8324:	000154d1 	.word	0x000154d1
    8328:	0001550f 	.word	0x0001550f
    832c:	00016496 	.word	0x00016496
    8330:	00017c2c 	.word	0x00017c2c
    8334:	000164d7 	.word	0x000164d7
    8338:	00016501 	.word	0x00016501
    833c:	00016152 	.word	0x00016152

00008340 <smp_dhkey_check>:

	return 0;
}

static u8_t smp_dhkey_check(struct bt_smp *smp, struct net_buf *buf)
{
    8340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
		return 0;
	}

#if defined(CONFIG_BLUETOOTH_PERIPHERAL)
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_SLAVE) {
    8342:	6803      	ldr	r3, [r0, #0]

	return 0;
}

static u8_t smp_dhkey_check(struct bt_smp *smp, struct net_buf *buf)
{
    8344:	0005      	movs	r5, r0
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
		return 0;
	}

#if defined(CONFIG_BLUETOOTH_PERIPHERAL)
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_SLAVE) {
    8346:	78db      	ldrb	r3, [r3, #3]

		return compute_and_check_and_send_slave_dhcheck(smp);
	}
#endif /* CONFIG_BLUETOOTH_PERIPHERAL */

	return 0;
    8348:	2600      	movs	r6, #0
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
		return 0;
	}

#if defined(CONFIG_BLUETOOTH_PERIPHERAL)
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_SLAVE) {
    834a:	2b01      	cmp	r3, #1
    834c:	d122      	bne.n	8394 <smp_dhkey_check+0x54>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    834e:	0004      	movs	r4, r0
    8350:	3494      	adds	r4, #148	; 0x94
	return 0;
}

static u8_t smp_dhkey_check(struct bt_smp *smp, struct net_buf *buf)
{
	struct bt_smp_dhkey_check *req = (void *)buf->data;
    8352:	688f      	ldr	r7, [r1, #8]
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    8354:	0020      	movs	r0, r4
    8356:	4910      	ldr	r1, [pc, #64]	; (8398 <smp_dhkey_check+0x58>)
    8358:	f00b fc10 	bl	13b7c <atomic_and>
	}

#if defined(CONFIG_BLUETOOTH_PERIPHERAL)
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_SLAVE) {
		atomic_clear_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
		memcpy(smp->e, req->e, sizeof(smp->e));
    835c:	0028      	movs	r0, r5
    835e:	3048      	adds	r0, #72	; 0x48
    8360:	0039      	movs	r1, r7
    8362:	2210      	movs	r2, #16
    8364:	30ff      	adds	r0, #255	; 0xff
    8366:	f7f8 fce8 	bl	d3a <memcpy>

		/* wait for DHKey being generated */
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
    836a:	2107      	movs	r1, #7
    836c:	0020      	movs	r0, r4
    836e:	f7fa f85e 	bl	242e <atomic_test_bit>
    8372:	42b0      	cmp	r0, r6
    8374:	d105      	bne.n	8382 <smp_dhkey_check+0x42>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
			return 0;
		}

		/* waiting for user to confirm passkey */
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    8376:	2109      	movs	r1, #9
    8378:	0020      	movs	r0, r4
    837a:	f7fa f858 	bl	242e <atomic_test_bit>
    837e:	2800      	cmp	r0, #0
    8380:	d004      	beq.n	838c <smp_dhkey_check+0x4c>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
    8382:	2108      	movs	r1, #8
    8384:	0020      	movs	r0, r4
    8386:	f7ff f8f1 	bl	756c <atomic_set_bit>
			return 0;
    838a:	e003      	b.n	8394 <smp_dhkey_check+0x54>
		}

		return compute_and_check_and_send_slave_dhcheck(smp);
    838c:	0028      	movs	r0, r5
    838e:	f7ff fc41 	bl	7c14 <compute_and_check_and_send_slave_dhcheck>
    8392:	0006      	movs	r6, r0
	}
#endif /* CONFIG_BLUETOOTH_PERIPHERAL */

	return 0;
}
    8394:	0030      	movs	r0, r6
    8396:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8398:	ffffdfff 	.word	0xffffdfff

0000839c <id_sent>:

static void smp_check_complete(struct bt_conn *conn, u8_t dist_complete)
{
	struct bt_l2cap_chan *chan;

	if (conn->type == BT_CONN_TYPE_LE) {
    839c:	7883      	ldrb	r3, [r0, #2]
}
#endif

#if defined(CONFIG_BLUETOOTH_PRIVACY)
static void id_sent(struct bt_conn *conn)
{
    839e:	b510      	push	{r4, lr}

static void smp_check_complete(struct bt_conn *conn, u8_t dist_complete)
{
	struct bt_l2cap_chan *chan;

	if (conn->type == BT_CONN_TYPE_LE) {
    83a0:	2b00      	cmp	r3, #0
    83a2:	d102      	bne.n	83aa <id_sent+0xe>
    83a4:	2102      	movs	r1, #2
    83a6:	f7ff fc03 	bl	7bb0 <smp_check_complete.part.10>

#if defined(CONFIG_BLUETOOTH_PRIVACY)
static void id_sent(struct bt_conn *conn)
{
	smp_check_complete(conn, BT_SMP_DIST_ID_KEY);
}
    83aa:	bd10      	pop	{r4, pc}

000083ac <ident_sent>:

static void smp_check_complete(struct bt_conn *conn, u8_t dist_complete)
{
	struct bt_l2cap_chan *chan;

	if (conn->type == BT_CONN_TYPE_LE) {
    83ac:	7883      	ldrb	r3, [r0, #2]
	return 0;
}

#if !defined(CONFIG_BLUETOOTH_SMP_SC_ONLY)
static void ident_sent(struct bt_conn *conn)
{
    83ae:	b510      	push	{r4, lr}

static void smp_check_complete(struct bt_conn *conn, u8_t dist_complete)
{
	struct bt_l2cap_chan *chan;

	if (conn->type == BT_CONN_TYPE_LE) {
    83b0:	2b00      	cmp	r3, #0
    83b2:	d102      	bne.n	83ba <ident_sent+0xe>
    83b4:	2101      	movs	r1, #1
    83b6:	f7ff fbfb 	bl	7bb0 <smp_check_complete.part.10>

#if !defined(CONFIG_BLUETOOTH_SMP_SC_ONLY)
static void ident_sent(struct bt_conn *conn)
{
	smp_check_complete(conn, BT_SMP_DIST_ENC_KEY);
}
    83ba:	bd10      	pop	{r4, pc}

000083bc <smp_send_pairing_confirm>:
	struct bt_conn *conn = smp->chan.chan.conn;
	struct bt_smp_pairing_confirm *req;
	struct net_buf *buf;
	u8_t r;

	switch (smp->method) {
    83bc:	0003      	movs	r3, r0
	return bt_encrypt_le(k, enc_data, enc_data);
}
#endif /* !CONFIG_BLUETOOTH_SMP_SC_ONLY */

static u8_t smp_send_pairing_confirm(struct bt_smp *smp)
{
    83be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
	struct bt_smp_pairing_confirm *req;
	struct net_buf *buf;
	u8_t r;

	switch (smp->method) {
    83c0:	3398      	adds	r3, #152	; 0x98
	return bt_encrypt_le(k, enc_data, enc_data);
}
#endif /* !CONFIG_BLUETOOTH_SMP_SC_ONLY */

static u8_t smp_send_pairing_confirm(struct bt_smp *smp)
{
    83c2:	0004      	movs	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
	struct bt_smp_pairing_confirm *req;
	struct net_buf *buf;
	u8_t r;

	switch (smp->method) {
    83c4:	7818      	ldrb	r0, [r3, #0]
		 */
		r = (smp->passkey >> smp->passkey_round) & 0x01;
		r |= 0x80;
		break;
	default:
		return BT_SMP_ERR_UNSPECIFIED;
    83c6:	2708      	movs	r7, #8
	struct bt_conn *conn = smp->chan.chan.conn;
	struct bt_smp_pairing_confirm *req;
	struct net_buf *buf;
	u8_t r;

	switch (smp->method) {
    83c8:	2803      	cmp	r0, #3
    83ca:	d835      	bhi.n	8438 <smp_send_pairing_confirm+0x7c>
    83cc:	f7f7 fed4 	bl	178 <__gnu_thumb1_case_uqi>
    83d0:	0e02020e 	.word	0x0e02020e
		 * bit of Z is set equal to one and the least
		 * significant bit is made up from one bit of the
		 * passkey e.g. if the passkey bit is 1, then Z = 0x81
		 * and if the passkey bit is 0, then Z = 0x80.
		 */
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    83d4:	23b6      	movs	r3, #182	; 0xb6
    83d6:	005b      	lsls	r3, r3, #1
    83d8:	5ce2      	ldrb	r2, [r4, r3]
    83da:	0023      	movs	r3, r4
    83dc:	33fc      	adds	r3, #252	; 0xfc
    83de:	6ede      	ldr	r6, [r3, #108]	; 0x6c
    83e0:	2301      	movs	r3, #1
    83e2:	40d6      	lsrs	r6, r2
    83e4:	401e      	ands	r6, r3
		r |= 0x80;
    83e6:	337f      	adds	r3, #127	; 0x7f
    83e8:	431e      	orrs	r6, r3
		break;
    83ea:	e000      	b.n	83ee <smp_send_pairing_confirm+0x32>
	u8_t r;

	switch (smp->method) {
	case PASSKEY_CONFIRM:
	case JUST_WORKS:
		r = 0;
    83ec:	2600      	movs	r6, #0
		break;
	default:
		return BT_SMP_ERR_UNSPECIFIED;
	}

	buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
    83ee:	2003      	movs	r0, #3
    83f0:	f7ff fbd0 	bl	7b94 <smp_create_pdu.isra.2>
	if (!buf) {
		return BT_SMP_ERR_UNSPECIFIED;
    83f4:	2708      	movs	r7, #8
		break;
	default:
		return BT_SMP_ERR_UNSPECIFIED;
	}

	buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
    83f6:	1e05      	subs	r5, r0, #0
	if (!buf) {
    83f8:	d01e      	beq.n	8438 <smp_send_pairing_confirm+0x7c>
		return BT_SMP_ERR_UNSPECIFIED;
	}

	req = net_buf_add(buf, sizeof(*req));
    83fa:	2110      	movs	r1, #16
    83fc:	19c0      	adds	r0, r0, r7
    83fe:	f00b f8e1 	bl	135c4 <net_buf_simple_add>

	if (smp_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
    8402:	0022      	movs	r2, r4
    8404:	0021      	movs	r1, r4
    8406:	9000      	str	r0, [sp, #0]
    8408:	0033      	movs	r3, r6
    840a:	32b7      	adds	r2, #183	; 0xb7
    840c:	31e7      	adds	r1, #231	; 0xe7
    840e:	480b      	ldr	r0, [pc, #44]	; (843c <smp_send_pairing_confirm+0x80>)
    8410:	f7ff f928 	bl	7664 <smp_f4>
    8414:	1e06      	subs	r6, r0, #0
    8416:	d003      	beq.n	8420 <smp_send_pairing_confirm+0x64>
		net_buf_unref(buf);
    8418:	0028      	movs	r0, r5
    841a:	f00b f8b1 	bl	13580 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
    841e:	e00b      	b.n	8438 <smp_send_pairing_confirm+0x7c>
	}

	smp_send(smp, buf, NULL);
    8420:	0002      	movs	r2, r0
    8422:	0029      	movs	r1, r5
    8424:	0020      	movs	r0, r4
    8426:	f7ff fbe1 	bl	7bec <smp_send>

	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
    842a:	0020      	movs	r0, r4
    842c:	2102      	movs	r1, #2
    842e:	3094      	adds	r0, #148	; 0x94
    8430:	4249      	negs	r1, r1
    8432:	f00b fba3 	bl	13b7c <atomic_and>

	return 0;
    8436:	0037      	movs	r7, r6
}
    8438:	0038      	movs	r0, r7
    843a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    843c:	200010a9 	.word	0x200010a9

00008440 <smp_public_key_slave.part.7>:
	err = sc_send_public_key(smp);
	if (err) {
		return err;
	}

	switch (smp->method) {
    8440:	0003      	movs	r3, r0

	return 0;
}

#if defined(CONFIG_BLUETOOTH_PERIPHERAL)
static u8_t smp_public_key_slave(struct bt_smp *smp)
    8442:	b570      	push	{r4, r5, r6, lr}
	err = sc_send_public_key(smp);
	if (err) {
		return err;
	}

	switch (smp->method) {
    8444:	3398      	adds	r3, #152	; 0x98
    8446:	781b      	ldrb	r3, [r3, #0]

	return 0;
}

#if defined(CONFIG_BLUETOOTH_PERIPHERAL)
static u8_t smp_public_key_slave(struct bt_smp *smp)
    8448:	0004      	movs	r4, r0
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
		bt_auth->passkey_entry(smp->chan.chan.conn);
		break;
	default:
		return BT_SMP_ERR_UNSPECIFIED;
    844a:	2008      	movs	r0, #8
	err = sc_send_public_key(smp);
	if (err) {
		return err;
	}

	switch (smp->method) {
    844c:	2b03      	cmp	r3, #3
    844e:	d84a      	bhi.n	84e6 <smp_public_key_slave.part.7+0xa6>
    8450:	0018      	movs	r0, r3
    8452:	f7f7 fe91 	bl	178 <__gnu_thumb1_case_uqi>
    8456:	2c02      	.short	0x2c02
    8458:	020d      	.short	0x020d
	case PASSKEY_CONFIRM:
	case JUST_WORKS:
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    845a:	0020      	movs	r0, r4
    845c:	2104      	movs	r1, #4
    845e:	3090      	adds	r0, #144	; 0x90
    8460:	f7ff f884 	bl	756c <atomic_set_bit>

		err = smp_send_pairing_confirm(smp);
    8464:	0020      	movs	r0, r4
    8466:	f7ff ffa9 	bl	83bc <smp_send_pairing_confirm>
		if (err) {
    846a:	2800      	cmp	r0, #0
    846c:	d02e      	beq.n	84cc <smp_public_key_slave.part.7+0x8c>
    846e:	e03a      	b.n	84e6 <smp_public_key_slave.part.7+0xa6>
	return 0;
}

static u8_t display_passkey(struct bt_smp *smp)
{
	if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
    8470:	0020      	movs	r0, r4
    8472:	3069      	adds	r0, #105	; 0x69
    8474:	2104      	movs	r1, #4
    8476:	30ff      	adds	r0, #255	; 0xff
    8478:	f003 fe32 	bl	c0e0 <bt_rand>
    847c:	1e05      	subs	r5, r0, #0
    847e:	d001      	beq.n	8484 <smp_public_key_slave.part.7+0x44>
		return BT_SMP_ERR_UNSPECIFIED;
    8480:	2008      	movs	r0, #8
    8482:	e030      	b.n	84e6 <smp_public_key_slave.part.7+0xa6>
	}

	smp->passkey %= 1000000;
    8484:	0026      	movs	r6, r4
    8486:	36fc      	adds	r6, #252	; 0xfc
    8488:	6ef0      	ldr	r0, [r6, #108]	; 0x6c
    848a:	4917      	ldr	r1, [pc, #92]	; (84e8 <smp_public_key_slave.part.7+0xa8>)
    848c:	f7f7 ff0e 	bl	2ac <__aeabi_uidivmod>
	smp->passkey_round = 0;
    8490:	23b6      	movs	r3, #182	; 0xb6
    8492:	005b      	lsls	r3, r3, #1
{
	if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
		return BT_SMP_ERR_UNSPECIFIED;
	}

	smp->passkey %= 1000000;
    8494:	66f1      	str	r1, [r6, #108]	; 0x6c
	smp->passkey_round = 0;
    8496:	54e5      	strb	r5, [r4, r3]

	bt_auth->passkey_display(smp->chan.chan.conn, smp->passkey);
    8498:	4b14      	ldr	r3, [pc, #80]	; (84ec <smp_public_key_slave.part.7+0xac>)
    849a:	6820      	ldr	r0, [r4, #0]
    849c:	681b      	ldr	r3, [r3, #0]
    849e:	681b      	ldr	r3, [r3, #0]
    84a0:	4798      	blx	r3
		err = display_passkey(smp);
		if (err) {
			return err;
		}

		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    84a2:	0020      	movs	r0, r4
    84a4:	2103      	movs	r1, #3
    84a6:	3090      	adds	r0, #144	; 0x90
    84a8:	f7ff f860 	bl	756c <atomic_set_bit>
    84ac:	e00e      	b.n	84cc <smp_public_key_slave.part.7+0x8c>
		break;
	case PASSKEY_INPUT:
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    84ae:	0020      	movs	r0, r4
    84b0:	2103      	movs	r1, #3
    84b2:	3090      	adds	r0, #144	; 0x90
    84b4:	f7ff f85a 	bl	756c <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    84b8:	0020      	movs	r0, r4
    84ba:	2109      	movs	r1, #9
    84bc:	3094      	adds	r0, #148	; 0x94
    84be:	f7ff f855 	bl	756c <atomic_set_bit>
		bt_auth->passkey_entry(smp->chan.chan.conn);
    84c2:	4b0a      	ldr	r3, [pc, #40]	; (84ec <smp_public_key_slave.part.7+0xac>)
    84c4:	6820      	ldr	r0, [r4, #0]
    84c6:	681b      	ldr	r3, [r3, #0]
    84c8:	685b      	ldr	r3, [r3, #4]
    84ca:	4798      	blx	r3
}
#endif /* CONFIG_BLUETOOTH_CENTRAL */

static u8_t generate_dhkey(struct bt_smp *smp)
{
	if (bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready)) {
    84cc:	0020      	movs	r0, r4
    84ce:	4908      	ldr	r1, [pc, #32]	; (84f0 <smp_public_key_slave.part.7+0xb0>)
    84d0:	30e7      	adds	r0, #231	; 0xe7
    84d2:	f7fc f835 	bl	4540 <bt_dh_key_gen>
    84d6:	1e05      	subs	r5, r0, #0
    84d8:	d1d2      	bne.n	8480 <smp_public_key_slave.part.7+0x40>
		return BT_SMP_ERR_UNSPECIFIED;
	}

	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
    84da:	0020      	movs	r0, r4
    84dc:	2107      	movs	r1, #7
    84de:	3094      	adds	r0, #148	; 0x94
    84e0:	f7ff f844 	bl	756c <atomic_set_bit>
	return 0;
    84e4:	0028      	movs	r0, r5
	default:
		return BT_SMP_ERR_UNSPECIFIED;
	}

	return generate_dhkey(smp);
}
    84e6:	bd70      	pop	{r4, r5, r6, pc}
    84e8:	000f4240 	.word	0x000f4240
    84ec:	20002240 	.word	0x20002240
    84f0:	000081ad 	.word	0x000081ad

000084f4 <bt_smp_pkey_ready>:
		smp_error(smp, err);
	}
}

static void bt_smp_pkey_ready(const u8_t *pkey)
{
    84f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    84f6:	1e04      	subs	r4, r0, #0
    84f8:	4d15      	ldr	r5, [pc, #84]	; (8550 <bt_smp_pkey_ready+0x5c>)
	int i;

	BT_DBG("");

	if (!pkey) {
    84fa:	d10b      	bne.n	8514 <bt_smp_pkey_ready+0x20>
		BT_WARN("Public key not available");
    84fc:	4b15      	ldr	r3, [pc, #84]	; (8554 <bt_smp_pkey_ready+0x60>)
    84fe:	4a16      	ldr	r2, [pc, #88]	; (8558 <bt_smp_pkey_ready+0x64>)
    8500:	9301      	str	r3, [sp, #4]
    8502:	4b16      	ldr	r3, [pc, #88]	; (855c <bt_smp_pkey_ready+0x68>)
    8504:	4916      	ldr	r1, [pc, #88]	; (8560 <bt_smp_pkey_ready+0x6c>)
    8506:	9300      	str	r3, [sp, #0]
    8508:	4816      	ldr	r0, [pc, #88]	; (8564 <bt_smp_pkey_ready+0x70>)
    850a:	4b17      	ldr	r3, [pc, #92]	; (8568 <bt_smp_pkey_ready+0x74>)
    850c:	f7f9 fa38 	bl	1980 <printk>
		sc_local_pkey_valid = false;
    8510:	702c      	strb	r4, [r5, #0]
    8512:	e01c      	b.n	854e <bt_smp_pkey_ready+0x5a>
		return;
	}

	memcpy(sc_public_key, pkey, 64);
    8514:	0001      	movs	r1, r0
    8516:	2240      	movs	r2, #64	; 0x40
    8518:	4814      	ldr	r0, [pc, #80]	; (856c <bt_smp_pkey_ready+0x78>)
    851a:	f7f8 fc0e 	bl	d3a <memcpy>

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_smp *smp = &bt_smp_pool[i];
		u8_t err;

		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
    851e:	4c14      	ldr	r4, [pc, #80]	; (8570 <bt_smp_pkey_ready+0x7c>)
		sc_local_pkey_valid = false;
		return;
	}

	memcpy(sc_public_key, pkey, 64);
	sc_local_pkey_valid = true;
    8520:	2301      	movs	r3, #1

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_smp *smp = &bt_smp_pool[i];
		u8_t err;

		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
    8522:	0020      	movs	r0, r4
    8524:	2106      	movs	r1, #6
    8526:	3094      	adds	r0, #148	; 0x94
		sc_local_pkey_valid = false;
		return;
	}

	memcpy(sc_public_key, pkey, 64);
	sc_local_pkey_valid = true;
    8528:	702b      	strb	r3, [r5, #0]

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_smp *smp = &bt_smp_pool[i];
		u8_t err;

		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
    852a:	f7f9 ff80 	bl	242e <atomic_test_bit>
    852e:	2800      	cmp	r0, #0
    8530:	d00d      	beq.n	854e <bt_smp_pkey_ready+0x5a>
#if defined(CONFIG_BLUETOOTH_PERIPHERAL)
static u8_t smp_public_key_slave(struct bt_smp *smp)
{
	u8_t err;

	err = sc_send_public_key(smp);
    8532:	0020      	movs	r0, r4
    8534:	f7ff fde0 	bl	80f8 <sc_send_public_key>
	if (err) {
    8538:	2800      	cmp	r0, #0
    853a:	d104      	bne.n	8546 <bt_smp_pkey_ready+0x52>
    853c:	0020      	movs	r0, r4
    853e:	f7ff ff7f 	bl	8440 <smp_public_key_slave.part.7>
			continue;
		}

#if defined(CONFIG_BLUETOOTH_PERIPHERAL)
		err = smp_public_key_slave(smp);
		if (err) {
    8542:	2800      	cmp	r0, #0
    8544:	d003      	beq.n	854e <bt_smp_pkey_ready+0x5a>
			smp_error(smp, err);
    8546:	0001      	movs	r1, r0
    8548:	0020      	movs	r0, r4
    854a:	f7ff fe15 	bl	8178 <smp_error>
		}
#endif /* CONFIG_BLUETOOTH_PERIPHERAL */
	}
}
    854e:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    8550:	200010e9 	.word	0x200010e9
    8554:	000154c4 	.word	0x000154c4
    8558:	000154d1 	.word	0x000154d1
    855c:	0001550f 	.word	0x0001550f
    8560:	0001548b 	.word	0x0001548b
    8564:	0001652c 	.word	0x0001652c
    8568:	00017f0c 	.word	0x00017f0c
    856c:	200010a9 	.word	0x200010a9
    8570:	200010ec 	.word	0x200010ec

00008574 <smp_public_key>:
	return generate_dhkey(smp);
}
#endif /* CONFIG_BLUETOOTH_PERIPHERAL */

static u8_t smp_public_key(struct bt_smp *smp, struct net_buf *buf)
{
    8574:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_smp_public_key *req = (void *)buf->data;
	u8_t err;

	BT_DBG("");

	memcpy(smp->pkey, req->x, 32);
    8576:	0006      	movs	r6, r0
	return generate_dhkey(smp);
}
#endif /* CONFIG_BLUETOOTH_PERIPHERAL */

static u8_t smp_public_key(struct bt_smp *smp, struct net_buf *buf)
{
    8578:	0004      	movs	r4, r0
	struct bt_smp_public_key *req = (void *)buf->data;
    857a:	688d      	ldr	r5, [r1, #8]
	u8_t err;

	BT_DBG("");

	memcpy(smp->pkey, req->x, 32);
    857c:	36e7      	adds	r6, #231	; 0xe7
    857e:	2220      	movs	r2, #32
    8580:	0029      	movs	r1, r5
    8582:	0030      	movs	r0, r6
    8584:	f7f8 fbd9 	bl	d3a <memcpy>
	memcpy(&smp->pkey[32], req->y, 32);
    8588:	0020      	movs	r0, r4
    858a:	0029      	movs	r1, r5
    858c:	3008      	adds	r0, #8
    858e:	3120      	adds	r1, #32
    8590:	2220      	movs	r2, #32
    8592:	30ff      	adds	r0, #255	; 0xff
    8594:	f7f8 fbd1 	bl	d3a <memcpy>

	/* mark key as debug if remote is using it */
	if (memcmp(smp->pkey, sc_debug_public_key, 64) == 0) {
    8598:	2240      	movs	r2, #64	; 0x40
    859a:	4913      	ldr	r1, [pc, #76]	; (85e8 <smp_public_key+0x74>)
    859c:	0030      	movs	r0, r6
    859e:	f7f8 fbb7 	bl	d10 <memcmp>
    85a2:	2800      	cmp	r0, #0
    85a4:	d10d      	bne.n	85c2 <smp_public_key+0x4e>
		BT_INFO("Remote is using Debug Public key");
    85a6:	4b11      	ldr	r3, [pc, #68]	; (85ec <smp_public_key+0x78>)
    85a8:	4911      	ldr	r1, [pc, #68]	; (85f0 <smp_public_key+0x7c>)
    85aa:	9301      	str	r3, [sp, #4]
    85ac:	9300      	str	r3, [sp, #0]
    85ae:	4a11      	ldr	r2, [pc, #68]	; (85f4 <smp_public_key+0x80>)
    85b0:	4b11      	ldr	r3, [pc, #68]	; (85f8 <smp_public_key+0x84>)
    85b2:	4812      	ldr	r0, [pc, #72]	; (85fc <smp_public_key+0x88>)
    85b4:	f7f9 f9e4 	bl	1980 <printk>
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
    85b8:	0020      	movs	r0, r4
    85ba:	210b      	movs	r1, #11
    85bc:	3094      	adds	r0, #148	; 0x94
    85be:	f7fe ffd5 	bl	756c <atomic_set_bit>

		return generate_dhkey(smp);
	}

#if defined(CONFIG_BLUETOOTH_PERIPHERAL)
	if (!sc_local_pkey_valid) {
    85c2:	4b0f      	ldr	r3, [pc, #60]	; (8600 <smp_public_key+0x8c>)
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
    85c4:	0020      	movs	r0, r4

		return generate_dhkey(smp);
	}

#if defined(CONFIG_BLUETOOTH_PERIPHERAL)
	if (!sc_local_pkey_valid) {
    85c6:	781d      	ldrb	r5, [r3, #0]
    85c8:	2d00      	cmp	r5, #0
    85ca:	d105      	bne.n	85d8 <smp_public_key+0x64>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
    85cc:	3094      	adds	r0, #148	; 0x94
    85ce:	2106      	movs	r1, #6
    85d0:	f7fe ffcc 	bl	756c <atomic_set_bit>
		return 0;
    85d4:	0028      	movs	r0, r5
    85d6:	e006      	b.n	85e6 <smp_public_key+0x72>
#if defined(CONFIG_BLUETOOTH_PERIPHERAL)
static u8_t smp_public_key_slave(struct bt_smp *smp)
{
	u8_t err;

	err = sc_send_public_key(smp);
    85d8:	f7ff fd8e 	bl	80f8 <sc_send_public_key>
	if (err) {
    85dc:	2800      	cmp	r0, #0
    85de:	d102      	bne.n	85e6 <smp_public_key+0x72>
    85e0:	0020      	movs	r0, r4
    85e2:	f7ff ff2d 	bl	8440 <smp_public_key_slave.part.7>
		return err;
	}
#endif /* CONFIG_BLUETOOTH_PERIPHERAL */

	return 0;
}
    85e6:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
    85e8:	00017e41 	.word	0x00017e41
    85ec:	00015150 	.word	0x00015150
    85f0:	0001548b 	.word	0x0001548b
    85f4:	00015634 	.word	0x00015634
    85f8:	00017df8 	.word	0x00017df8
    85fc:	00016555 	.word	0x00016555
    8600:	200010e9 	.word	0x200010e9

00008604 <bt_smp_encrypt_change>:
	memset(smp, 0, sizeof(*smp));
}

static void bt_smp_encrypt_change(struct bt_l2cap_chan *chan,
				  u8_t hci_status)
{
    8604:	b5f0      	push	{r4, r5, r6, r7, lr}
    8606:	0004      	movs	r4, r0
    8608:	b091      	sub	sp, #68	; 0x44
	struct bt_conn *conn = chan->conn;

	BT_DBG("chan %p conn %p handle %u encrypt 0x%02x hci status 0x%02x",
	       chan, conn, conn->handle, conn->encrypt, hci_status);

	if (hci_status) {
    860a:	2900      	cmp	r1, #0
    860c:	d000      	beq.n	8610 <bt_smp_encrypt_change+0xc>
    860e:	e171      	b.n	88f4 <bt_smp_encrypt_change+0x2f0>
		return;
	}

	if (!smp || !conn->encrypt) {
    8610:	6803      	ldr	r3, [r0, #0]
    8612:	7a9b      	ldrb	r3, [r3, #10]
    8614:	2b00      	cmp	r3, #0
    8616:	d100      	bne.n	861a <bt_smp_encrypt_change+0x16>
    8618:	e16c      	b.n	88f4 <bt_smp_encrypt_change+0x2f0>
		return;
	}

	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
    861a:	0005      	movs	r5, r0
    861c:	3594      	adds	r5, #148	; 0x94
    861e:	3101      	adds	r1, #1
    8620:	0028      	movs	r0, r5
    8622:	f7ff f898 	bl	7756 <atomic_test_and_clear_bit>
    8626:	2800      	cmp	r0, #0
    8628:	d100      	bne.n	862c <bt_smp_encrypt_change+0x28>
    862a:	e163      	b.n	88f4 <bt_smp_encrypt_change+0x2f0>
	 * enabled encryption.
	 *
	 * Since it is possible that slave might sent another Security Request
	 * eg with different AuthReq we should allow it.
	 */
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    862c:	2103      	movs	r1, #3
    862e:	0028      	movs	r0, r5
    8630:	f7f9 fefd 	bl	242e <atomic_test_bit>
    8634:	2800      	cmp	r0, #0
    8636:	d105      	bne.n	8644 <bt_smp_encrypt_change+0x40>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
    8638:	0020      	movs	r0, r4
    863a:	210b      	movs	r1, #11
    863c:	3090      	adds	r0, #144	; 0x90
    863e:	f7fe ff95 	bl	756c <atomic_set_bit>
    8642:	e157      	b.n	88f4 <bt_smp_encrypt_change+0x2f0>
		return;
	}

	/* derive BR/EDR LinkKey if supported by both sides */
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    8644:	2105      	movs	r1, #5
    8646:	0028      	movs	r0, r5
    8648:	f7f9 fef1 	bl	242e <atomic_test_bit>
    864c:	2800      	cmp	r0, #0
    864e:	d017      	beq.n	8680 <bt_smp_encrypt_change+0x7c>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
    8650:	266e      	movs	r6, #110	; 0x6e
    8652:	2308      	movs	r3, #8
    8654:	36ff      	adds	r6, #255	; 0xff
    8656:	5da2      	ldrb	r2, [r4, r6]
    8658:	421a      	tst	r2, r3
    865a:	d008      	beq.n	866e <bt_smp_encrypt_change+0x6a>
		    (smp->remote_dist & BT_SMP_DIST_LINK_KEY)) {
    865c:	22b7      	movs	r2, #183	; 0xb7
    865e:	0052      	lsls	r2, r2, #1
		return;
	}

	/* derive BR/EDR LinkKey if supported by both sides */
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
    8660:	5ca2      	ldrb	r2, [r4, r2]
    8662:	421a      	tst	r2, r3
    8664:	d003      	beq.n	866e <bt_smp_encrypt_change+0x6a>
		    (smp->remote_dist & BT_SMP_DIST_LINK_KEY)) {
			/*
			 * Link Key will be derived after key distribution to
			 * make sure remote device identity is known
			 */
			atomic_set_bit(smp->flags, SMP_FLAG_DERIVE_LK);
    8666:	210e      	movs	r1, #14
    8668:	0028      	movs	r0, r5
    866a:	f7fe ff7f 	bl	756c <atomic_set_bit>
		}
		/*
		 * Those are used as pairing finished indicator so generated
		 * but not distributed keys must be cleared here.
		 */
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
    866e:	2108      	movs	r1, #8
		smp->remote_dist &= ~BT_SMP_DIST_LINK_KEY;
    8670:	22b7      	movs	r2, #183	; 0xb7
		}
		/*
		 * Those are used as pairing finished indicator so generated
		 * but not distributed keys must be cleared here.
		 */
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
    8672:	5da3      	ldrb	r3, [r4, r6]
		smp->remote_dist &= ~BT_SMP_DIST_LINK_KEY;
    8674:	0052      	lsls	r2, r2, #1
		}
		/*
		 * Those are used as pairing finished indicator so generated
		 * but not distributed keys must be cleared here.
		 */
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
    8676:	438b      	bics	r3, r1
    8678:	55a3      	strb	r3, [r4, r6]
		smp->remote_dist &= ~BT_SMP_DIST_LINK_KEY;
    867a:	5ca3      	ldrb	r3, [r4, r2]
    867c:	438b      	bics	r3, r1
    867e:	54a3      	strb	r3, [r4, r2]
	}

	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
    8680:	23b7      	movs	r3, #183	; 0xb7
    8682:	005b      	lsls	r3, r3, #1
    8684:	5ce3      	ldrb	r3, [r4, r3]
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
    8686:	2106      	movs	r1, #6
		 */
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
		smp->remote_dist &= ~BT_SMP_DIST_LINK_KEY;
	}

	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
    8688:	07da      	lsls	r2, r3, #31
    868a:	d405      	bmi.n	8698 <bt_smp_encrypt_change+0x94>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
    868c:	2108      	movs	r1, #8
		smp->remote_dist &= ~BT_SMP_DIST_LINK_KEY;
	}

	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
    868e:	079a      	lsls	r2, r3, #30
    8690:	d402      	bmi.n	8698 <bt_smp_encrypt_change+0x94>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    8692:	075b      	lsls	r3, r3, #29
    8694:	d504      	bpl.n	86a0 <bt_smp_encrypt_change+0x9c>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    8696:	210a      	movs	r1, #10
    8698:	0020      	movs	r0, r4
    869a:	3090      	adds	r0, #144	; 0x90
    869c:	f7fe ff66 	bl	756c <atomic_set_bit>
	}

	atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
    86a0:	0028      	movs	r0, r5
    86a2:	2102      	movs	r1, #2
    86a4:	f7fe ff62 	bl	756c <atomic_set_bit>
}
#endif /* !CONFIG_BLUETOOTH_SMP_SC_ONLY */

static void bt_smp_distribute_keys(struct bt_smp *smp)
{
	struct bt_conn *conn = smp->chan.chan.conn;
    86a8:	6820      	ldr	r0, [r4, #0]
	struct bt_keys *keys = conn->le.keys;
    86aa:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
    86ac:	9305      	str	r3, [sp, #20]

	if (!keys) {
    86ae:	2b00      	cmp	r3, #0
    86b0:	d10e      	bne.n	86d0 <bt_smp_encrypt_change+0xcc>
		BT_ERR("No keys space for %s", bt_addr_le_str(&conn->le.dst));
    86b2:	3054      	adds	r0, #84	; 0x54
    86b4:	f7f9 fdb2 	bl	221c <bt_addr_le_str>
    86b8:	4b8f      	ldr	r3, [pc, #572]	; (88f8 <bt_smp_encrypt_change+0x2f4>)
    86ba:	9001      	str	r0, [sp, #4]
    86bc:	9302      	str	r3, [sp, #8]
    86be:	4b8f      	ldr	r3, [pc, #572]	; (88fc <bt_smp_encrypt_change+0x2f8>)
    86c0:	4a8f      	ldr	r2, [pc, #572]	; (8900 <bt_smp_encrypt_change+0x2fc>)
    86c2:	9300      	str	r3, [sp, #0]
    86c4:	498f      	ldr	r1, [pc, #572]	; (8904 <bt_smp_encrypt_change+0x300>)
    86c6:	4b90      	ldr	r3, [pc, #576]	; (8908 <bt_smp_encrypt_change+0x304>)
    86c8:	4890      	ldr	r0, [pc, #576]	; (890c <bt_smp_encrypt_change+0x308>)
    86ca:	f7f9 f959 	bl	1980 <printk>
    86ce:	e108      	b.n	88e2 <bt_smp_encrypt_change+0x2de>
		return;
	}

#if !defined(CONFIG_BLUETOOTH_SMP_SC_ONLY)
	/* Distribute legacy pairing specific keys */
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    86d0:	2105      	movs	r1, #5
    86d2:	0028      	movs	r0, r5
    86d4:	f7f9 feab 	bl	242e <atomic_test_bit>
    86d8:	9006      	str	r0, [sp, #24]
    86da:	2800      	cmp	r0, #0
    86dc:	d000      	beq.n	86e0 <bt_smp_encrypt_change+0xdc>
    86de:	e090      	b.n	8802 <bt_smp_encrypt_change+0x1fe>
static void legacy_distribute_keys(struct bt_smp *smp)
{
	struct bt_conn *conn = smp->chan.chan.conn;
	struct bt_keys *keys = conn->le.keys;

	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
    86e0:	236e      	movs	r3, #110	; 0x6e
    86e2:	33ff      	adds	r3, #255	; 0xff
    86e4:	5ce3      	ldrb	r3, [r4, r3]
    86e6:	07db      	lsls	r3, r3, #31
    86e8:	d400      	bmi.n	86ec <bt_smp_encrypt_change+0xe8>
    86ea:	e08a      	b.n	8802 <bt_smp_encrypt_change+0x1fe>
}

static void legacy_distribute_keys(struct bt_smp *smp)
{
	struct bt_conn *conn = smp->chan.chan.conn;
	struct bt_keys *keys = conn->le.keys;
    86ec:	6823      	ldr	r3, [r4, #0]
		struct net_buf *buf;
		u8_t key[16];
		u64_t rand;
		u16_t ediv;

		bt_rand(key, sizeof(key));
    86ee:	2110      	movs	r1, #16
    86f0:	a80c      	add	r0, sp, #48	; 0x30
}

static void legacy_distribute_keys(struct bt_smp *smp)
{
	struct bt_conn *conn = smp->chan.chan.conn;
	struct bt_keys *keys = conn->le.keys;
    86f2:	6fde      	ldr	r6, [r3, #124]	; 0x7c
		struct net_buf *buf;
		u8_t key[16];
		u64_t rand;
		u16_t ediv;

		bt_rand(key, sizeof(key));
    86f4:	f003 fcf4 	bl	c0e0 <bt_rand>
		bt_rand(&rand, sizeof(rand));
    86f8:	2108      	movs	r1, #8
    86fa:	a80a      	add	r0, sp, #40	; 0x28
    86fc:	f003 fcf0 	bl	c0e0 <bt_rand>
		bt_rand(&ediv, sizeof(ediv));
    8700:	2016      	movs	r0, #22
    8702:	ab04      	add	r3, sp, #16
    8704:	2102      	movs	r1, #2
    8706:	18c0      	adds	r0, r0, r3
    8708:	f003 fcea 	bl	c0e0 <bt_rand>

		buf = smp_create_pdu(conn, BT_SMP_CMD_ENCRYPT_INFO,
    870c:	2006      	movs	r0, #6
    870e:	f7ff fa41 	bl	7b94 <smp_create_pdu.isra.2>
    8712:	1e07      	subs	r7, r0, #0
				     sizeof(*info));
		if (!buf) {
    8714:	d108      	bne.n	8728 <bt_smp_encrypt_change+0x124>
			BT_ERR("Unable to allocate Encrypt Info buffer");
    8716:	4b78      	ldr	r3, [pc, #480]	; (88f8 <bt_smp_encrypt_change+0x2f4>)
    8718:	4a79      	ldr	r2, [pc, #484]	; (8900 <bt_smp_encrypt_change+0x2fc>)
    871a:	9301      	str	r3, [sp, #4]
    871c:	4b77      	ldr	r3, [pc, #476]	; (88fc <bt_smp_encrypt_change+0x2f8>)
    871e:	4979      	ldr	r1, [pc, #484]	; (8904 <bt_smp_encrypt_change+0x300>)
    8720:	9300      	str	r3, [sp, #0]
    8722:	487b      	ldr	r0, [pc, #492]	; (8910 <bt_smp_encrypt_change+0x30c>)
    8724:	4b7b      	ldr	r3, [pc, #492]	; (8914 <bt_smp_encrypt_change+0x310>)
    8726:	e024      	b.n	8772 <bt_smp_encrypt_change+0x16e>
			return;
		}

		info = net_buf_add(buf, sizeof(*info));
    8728:	2110      	movs	r1, #16
    872a:	3008      	adds	r0, #8
    872c:	f00a ff4a 	bl	135c4 <net_buf_simple_add>
    8730:	9007      	str	r0, [sp, #28]

		/* distributed only enc_size bytes of key */
		memcpy(info->ltk, key, keys->enc_size);
    8732:	79f2      	ldrb	r2, [r6, #7]
    8734:	a90c      	add	r1, sp, #48	; 0x30
    8736:	f7f8 fb00 	bl	d3a <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
    873a:	79f0      	ldrb	r0, [r6, #7]
    873c:	280f      	cmp	r0, #15
    873e:	d806      	bhi.n	874e <bt_smp_encrypt_change+0x14a>
			memset(info->ltk + keys->enc_size, 0,
    8740:	2210      	movs	r2, #16
    8742:	9b07      	ldr	r3, [sp, #28]
    8744:	1a12      	subs	r2, r2, r0
    8746:	9906      	ldr	r1, [sp, #24]
    8748:	1818      	adds	r0, r3, r0
    874a:	f7f8 fb20 	bl	d8e <memset>
			       sizeof(info->ltk) - keys->enc_size);
		}

		smp_send(smp, buf, NULL);
    874e:	0039      	movs	r1, r7
    8750:	2200      	movs	r2, #0
    8752:	0020      	movs	r0, r4
    8754:	f7ff fa4a 	bl	7bec <smp_send>

		buf = smp_create_pdu(conn, BT_SMP_CMD_MASTER_IDENT,
    8758:	2007      	movs	r0, #7
    875a:	f7ff fa1b 	bl	7b94 <smp_create_pdu.isra.2>
    875e:	1e07      	subs	r7, r0, #0
				     sizeof(*ident));
		if (!buf) {
    8760:	d10a      	bne.n	8778 <bt_smp_encrypt_change+0x174>
			BT_ERR("Unable to allocate Master Ident buffer");
    8762:	4b65      	ldr	r3, [pc, #404]	; (88f8 <bt_smp_encrypt_change+0x2f4>)
    8764:	4a66      	ldr	r2, [pc, #408]	; (8900 <bt_smp_encrypt_change+0x2fc>)
    8766:	9301      	str	r3, [sp, #4]
    8768:	4b64      	ldr	r3, [pc, #400]	; (88fc <bt_smp_encrypt_change+0x2f8>)
    876a:	4966      	ldr	r1, [pc, #408]	; (8904 <bt_smp_encrypt_change+0x300>)
    876c:	9300      	str	r3, [sp, #0]
    876e:	486a      	ldr	r0, [pc, #424]	; (8918 <bt_smp_encrypt_change+0x314>)
    8770:	4b68      	ldr	r3, [pc, #416]	; (8914 <bt_smp_encrypt_change+0x310>)
    8772:	f7f9 f905 	bl	1980 <printk>
    8776:	e044      	b.n	8802 <bt_smp_encrypt_change+0x1fe>
			return;
		}

		ident = net_buf_add(buf, sizeof(*ident));
    8778:	210a      	movs	r1, #10
    877a:	3008      	adds	r0, #8
    877c:	f00a ff22 	bl	135c4 <net_buf_simple_add>
		ident->rand = rand;
    8780:	aa0a      	add	r2, sp, #40	; 0x28
    8782:	7812      	ldrb	r2, [r2, #0]
    8784:	a904      	add	r1, sp, #16
    8786:	7082      	strb	r2, [r0, #2]
    8788:	2219      	movs	r2, #25
    878a:	1852      	adds	r2, r2, r1
    878c:	7812      	ldrb	r2, [r2, #0]
		ident->ediv = ediv;
    878e:	7d8b      	ldrb	r3, [r1, #22]
			BT_ERR("Unable to allocate Master Ident buffer");
			return;
		}

		ident = net_buf_add(buf, sizeof(*ident));
		ident->rand = rand;
    8790:	70c2      	strb	r2, [r0, #3]
    8792:	221a      	movs	r2, #26
    8794:	1852      	adds	r2, r2, r1
    8796:	7812      	ldrb	r2, [r2, #0]
    8798:	7102      	strb	r2, [r0, #4]
    879a:	221b      	movs	r2, #27
    879c:	1852      	adds	r2, r2, r1
    879e:	7812      	ldrb	r2, [r2, #0]
    87a0:	7142      	strb	r2, [r0, #5]
    87a2:	aa0b      	add	r2, sp, #44	; 0x2c
    87a4:	7812      	ldrb	r2, [r2, #0]
    87a6:	7182      	strb	r2, [r0, #6]
    87a8:	221d      	movs	r2, #29
    87aa:	1852      	adds	r2, r2, r1
    87ac:	7812      	ldrb	r2, [r2, #0]
    87ae:	71c2      	strb	r2, [r0, #7]
    87b0:	221e      	movs	r2, #30
    87b2:	1852      	adds	r2, r2, r1
    87b4:	7812      	ldrb	r2, [r2, #0]
    87b6:	7202      	strb	r2, [r0, #8]
    87b8:	221f      	movs	r2, #31
    87ba:	1852      	adds	r2, r2, r1
    87bc:	7812      	ldrb	r2, [r2, #0]
		ident->ediv = ediv;
    87be:	7003      	strb	r3, [r0, #0]
    87c0:	7dcb      	ldrb	r3, [r1, #23]
			BT_ERR("Unable to allocate Master Ident buffer");
			return;
		}

		ident = net_buf_add(buf, sizeof(*ident));
		ident->rand = rand;
    87c2:	7242      	strb	r2, [r0, #9]
		ident->ediv = ediv;
    87c4:	7043      	strb	r3, [r0, #1]

		smp_send(smp, buf, ident_sent);
    87c6:	0039      	movs	r1, r7
    87c8:	0020      	movs	r0, r4
    87ca:	4a54      	ldr	r2, [pc, #336]	; (891c <bt_smp_encrypt_change+0x318>)
    87cc:	f7ff fa0e 	bl	7bec <smp_send>

		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    87d0:	210a      	movs	r1, #10
    87d2:	0028      	movs	r0, r5
    87d4:	f7f9 fe2b 	bl	242e <atomic_test_bit>
    87d8:	2800      	cmp	r0, #0
    87da:	d012      	beq.n	8802 <bt_smp_encrypt_change+0x1fe>
			bt_keys_add_type(keys, BT_KEYS_SLAVE_LTK);
    87dc:	2101      	movs	r1, #1
    87de:	0030      	movs	r0, r6
    87e0:	f000 fd20 	bl	9224 <bt_keys_add_type>

			memcpy(keys->slave_ltk.val, key,
    87e4:	0030      	movs	r0, r6
    87e6:	2210      	movs	r2, #16
    87e8:	307a      	adds	r0, #122	; 0x7a
    87ea:	a90c      	add	r1, sp, #48	; 0x30
    87ec:	f7f8 faa5 	bl	d3a <memcpy>
			       sizeof(keys->slave_ltk.val));
			keys->slave_ltk.rand = rand;
    87f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    87f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    87f4:	6732      	str	r2, [r6, #112]	; 0x70
    87f6:	6773      	str	r3, [r6, #116]	; 0x74
			keys->slave_ltk.ediv = ediv;
    87f8:	0033      	movs	r3, r6
    87fa:	aa04      	add	r2, sp, #16
    87fc:	8ad2      	ldrh	r2, [r2, #22]
    87fe:	3378      	adds	r3, #120	; 0x78
    8800:	801a      	strh	r2, [r3, #0]
		legacy_distribute_keys(smp);
	}
#endif /* !CONFIG_BLUETOOTH_SMP_SC_ONLY */

#if defined(CONFIG_BLUETOOTH_PRIVACY)
	if (smp->local_dist & BT_SMP_DIST_ID_KEY) {
    8802:	236e      	movs	r3, #110	; 0x6e
    8804:	33ff      	adds	r3, #255	; 0xff
    8806:	5ce3      	ldrb	r3, [r4, r3]
    8808:	079b      	lsls	r3, r3, #30
    880a:	d537      	bpl.n	887c <bt_smp_encrypt_change+0x278>
		struct bt_smp_ident_info *id_info;
		struct bt_smp_ident_addr_info *id_addr_info;
		struct net_buf *buf;

		buf = smp_create_pdu(conn, BT_SMP_CMD_IDENT_INFO,
    880c:	2008      	movs	r0, #8
    880e:	f7ff f9c1 	bl	7b94 <smp_create_pdu.isra.2>
    8812:	1e06      	subs	r6, r0, #0
				     sizeof(*id_info));
		if (!buf) {
    8814:	d108      	bne.n	8828 <bt_smp_encrypt_change+0x224>
			BT_ERR("Unable to allocate Ident Info buffer");
    8816:	4b38      	ldr	r3, [pc, #224]	; (88f8 <bt_smp_encrypt_change+0x2f4>)
    8818:	4a39      	ldr	r2, [pc, #228]	; (8900 <bt_smp_encrypt_change+0x2fc>)
    881a:	9301      	str	r3, [sp, #4]
    881c:	4b37      	ldr	r3, [pc, #220]	; (88fc <bt_smp_encrypt_change+0x2f8>)
    881e:	4939      	ldr	r1, [pc, #228]	; (8904 <bt_smp_encrypt_change+0x300>)
    8820:	9300      	str	r3, [sp, #0]
    8822:	483f      	ldr	r0, [pc, #252]	; (8920 <bt_smp_encrypt_change+0x31c>)
    8824:	4b38      	ldr	r3, [pc, #224]	; (8908 <bt_smp_encrypt_change+0x304>)
    8826:	e019      	b.n	885c <bt_smp_encrypt_change+0x258>
			return;
		}

		id_info = net_buf_add(buf, sizeof(*id_info));
    8828:	2110      	movs	r1, #16
    882a:	3008      	adds	r0, #8
    882c:	f00a feca 	bl	135c4 <net_buf_simple_add>
		memcpy(id_info->irk, bt_dev.irk, 16);
    8830:	2210      	movs	r2, #16
    8832:	493c      	ldr	r1, [pc, #240]	; (8924 <bt_smp_encrypt_change+0x320>)
    8834:	f7f8 fa81 	bl	d3a <memcpy>

		smp_send(smp, buf, NULL);
    8838:	0031      	movs	r1, r6
    883a:	2200      	movs	r2, #0
    883c:	0020      	movs	r0, r4
    883e:	f7ff f9d5 	bl	7bec <smp_send>

		buf = smp_create_pdu(conn, BT_SMP_CMD_IDENT_ADDR_INFO,
    8842:	2009      	movs	r0, #9
    8844:	f7ff f9a6 	bl	7b94 <smp_create_pdu.isra.2>
    8848:	1e06      	subs	r6, r0, #0
				     sizeof(*id_addr_info));
		if (!buf) {
    884a:	d10a      	bne.n	8862 <bt_smp_encrypt_change+0x25e>
			BT_ERR("Unable to allocate Ident Addr Info buffer");
    884c:	4b2a      	ldr	r3, [pc, #168]	; (88f8 <bt_smp_encrypt_change+0x2f4>)
    884e:	4a2c      	ldr	r2, [pc, #176]	; (8900 <bt_smp_encrypt_change+0x2fc>)
    8850:	9301      	str	r3, [sp, #4]
    8852:	4b2a      	ldr	r3, [pc, #168]	; (88fc <bt_smp_encrypt_change+0x2f8>)
    8854:	492b      	ldr	r1, [pc, #172]	; (8904 <bt_smp_encrypt_change+0x300>)
    8856:	9300      	str	r3, [sp, #0]
    8858:	4833      	ldr	r0, [pc, #204]	; (8928 <bt_smp_encrypt_change+0x324>)
    885a:	4b2b      	ldr	r3, [pc, #172]	; (8908 <bt_smp_encrypt_change+0x304>)
    885c:	f7f9 f890 	bl	1980 <printk>
    8860:	e03f      	b.n	88e2 <bt_smp_encrypt_change+0x2de>
			return;
		}

		id_addr_info = net_buf_add(buf, sizeof(*id_addr_info));
    8862:	2107      	movs	r1, #7
    8864:	3008      	adds	r0, #8
    8866:	f00a fead 	bl	135c4 <net_buf_simple_add>
    886a:	2207      	movs	r2, #7
    886c:	492f      	ldr	r1, [pc, #188]	; (892c <bt_smp_encrypt_change+0x328>)
    886e:	f7f8 fa64 	bl	d3a <memcpy>
		bt_addr_le_copy(&id_addr_info->addr, &bt_dev.id_addr);

		smp_send(smp, buf, id_sent);
    8872:	4a2f      	ldr	r2, [pc, #188]	; (8930 <bt_smp_encrypt_change+0x32c>)
    8874:	0031      	movs	r1, r6
    8876:	0020      	movs	r0, r4
    8878:	f7ff f9b8 	bl	7bec <smp_send>
	}
#endif /* CONFIG_BLUETOOTH_PRIVACY */

#if defined(CONFIG_BLUETOOTH_SIGNING)
	if (smp->local_dist & BT_SMP_DIST_SIGN) {
    887c:	236e      	movs	r3, #110	; 0x6e
    887e:	33ff      	adds	r3, #255	; 0xff
    8880:	5ce3      	ldrb	r3, [r4, r3]
    8882:	075b      	lsls	r3, r3, #29
    8884:	d52d      	bpl.n	88e2 <bt_smp_encrypt_change+0x2de>
		struct bt_smp_signing_info *info;
		struct net_buf *buf;

		buf = smp_create_pdu(conn, BT_SMP_CMD_SIGNING_INFO,
    8886:	200a      	movs	r0, #10
    8888:	f7ff f984 	bl	7b94 <smp_create_pdu.isra.2>
    888c:	1e06      	subs	r6, r0, #0
				     sizeof(*info));
		if (!buf) {
    888e:	d108      	bne.n	88a2 <bt_smp_encrypt_change+0x29e>
			BT_ERR("Unable to allocate Signing Info buffer");
    8890:	4b19      	ldr	r3, [pc, #100]	; (88f8 <bt_smp_encrypt_change+0x2f4>)
    8892:	4a1b      	ldr	r2, [pc, #108]	; (8900 <bt_smp_encrypt_change+0x2fc>)
    8894:	9301      	str	r3, [sp, #4]
    8896:	4b19      	ldr	r3, [pc, #100]	; (88fc <bt_smp_encrypt_change+0x2f8>)
    8898:	491a      	ldr	r1, [pc, #104]	; (8904 <bt_smp_encrypt_change+0x300>)
    889a:	9300      	str	r3, [sp, #0]
    889c:	4825      	ldr	r0, [pc, #148]	; (8934 <bt_smp_encrypt_change+0x330>)
    889e:	4b1a      	ldr	r3, [pc, #104]	; (8908 <bt_smp_encrypt_change+0x304>)
    88a0:	e7dc      	b.n	885c <bt_smp_encrypt_change+0x258>
			return;
		}

		info = net_buf_add(buf, sizeof(*info));
    88a2:	2110      	movs	r1, #16
    88a4:	3008      	adds	r0, #8
    88a6:	f00a fe8d 	bl	135c4 <net_buf_simple_add>

		bt_rand(info->csrk, sizeof(info->csrk));
    88aa:	2110      	movs	r1, #16
		if (!buf) {
			BT_ERR("Unable to allocate Signing Info buffer");
			return;
		}

		info = net_buf_add(buf, sizeof(*info));
    88ac:	0007      	movs	r7, r0

		bt_rand(info->csrk, sizeof(info->csrk));
    88ae:	f003 fc17 	bl	c0e0 <bt_rand>

		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    88b2:	210a      	movs	r1, #10
    88b4:	0028      	movs	r0, r5
    88b6:	f7f9 fdba 	bl	242e <atomic_test_bit>
    88ba:	2800      	cmp	r0, #0
    88bc:	d00c      	beq.n	88d8 <bt_smp_encrypt_change+0x2d4>
			bt_keys_add_type(keys, BT_KEYS_LOCAL_CSRK);
    88be:	2108      	movs	r1, #8
    88c0:	9805      	ldr	r0, [sp, #20]
    88c2:	f000 fcaf 	bl	9224 <bt_keys_add_type>
			memcpy(keys->local_csrk.val, info->csrk, 16);
    88c6:	9805      	ldr	r0, [sp, #20]
    88c8:	2210      	movs	r2, #16
    88ca:	3048      	adds	r0, #72	; 0x48
    88cc:	0039      	movs	r1, r7
    88ce:	f7f8 fa34 	bl	d3a <memcpy>
			keys->local_csrk.cnt = 0;
    88d2:	2300      	movs	r3, #0
    88d4:	9a05      	ldr	r2, [sp, #20]
    88d6:	6593      	str	r3, [r2, #88]	; 0x58
		}

		smp_send(smp, buf, sign_info_sent);
    88d8:	4a17      	ldr	r2, [pc, #92]	; (8938 <bt_smp_encrypt_change+0x334>)
    88da:	0031      	movs	r1, r6
    88dc:	0020      	movs	r0, r4
    88de:	f7ff f985 	bl	7bec <smp_send>
	}

	bt_smp_distribute_keys(smp);

	/* if all keys were distributed, pairing is done */
	if (!smp->local_dist && !smp->remote_dist) {
    88e2:	0023      	movs	r3, r4
    88e4:	33fc      	adds	r3, #252	; 0xfc
    88e6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    88e8:	4b14      	ldr	r3, [pc, #80]	; (893c <bt_smp_encrypt_change+0x338>)
    88ea:	421a      	tst	r2, r3
    88ec:	d102      	bne.n	88f4 <bt_smp_encrypt_change+0x2f0>
			sc_derive_link_key(smp);
		}
	}
#endif /* CONFIG_BLUETOOTH_BREDR */

	smp_reset(smp);
    88ee:	0020      	movs	r0, r4
    88f0:	f7fe ff41 	bl	7776 <smp_reset>

	/* if all keys were distributed, pairing is done */
	if (!smp->local_dist && !smp->remote_dist) {
		smp_pairing_complete(smp, 0);
	}
}
    88f4:	b011      	add	sp, #68	; 0x44
    88f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    88f8:	000154c4 	.word	0x000154c4
    88fc:	000154c9 	.word	0x000154c9
    8900:	00015484 	.word	0x00015484
    8904:	0001548b 	.word	0x0001548b
    8908:	00017f1e 	.word	0x00017f1e
    890c:	00016586 	.word	0x00016586
    8910:	000165ab 	.word	0x000165ab
    8914:	00017ef5 	.word	0x00017ef5
    8918:	000165e2 	.word	0x000165e2
    891c:	000083ad 	.word	0x000083ad
    8920:	00016619 	.word	0x00016619
    8924:	200005ac 	.word	0x200005ac
    8928:	0001664e 	.word	0x0001664e
    892c:	200004d0 	.word	0x200004d0
    8930:	0000839d 	.word	0x0000839d
    8934:	00016688 	.word	0x00016688
    8938:	00007bdd 	.word	0x00007bdd
    893c:	00ffff00 	.word	0x00ffff00

00008940 <smp_c1>:

static int smp_c1(const u8_t k[16], const u8_t r[16],
		  const u8_t preq[7], const u8_t pres[7],
		  const bt_addr_le_t *ia, const bt_addr_le_t *ra,
		  u8_t enc_data[16])
{
    8940:	b5f0      	push	{r4, r5, r6, r7, lr}
    8942:	b089      	sub	sp, #36	; 0x24
    8944:	000f      	movs	r7, r1
    8946:	0011      	movs	r1, r2
	BT_DBG("k %s r %s", bt_hex(k, 16), bt_hex(r, 16));
	BT_DBG("ia %s ra %s", bt_addr_le_str(ia), bt_addr_le_str(ra));
	BT_DBG("preq %s pres %s", bt_hex(preq, 7), bt_hex(pres, 7));

	/* pres, preq, rat and iat are concatenated to generate p1 */
	p1[0] = ia->type;
    8948:	466a      	mov	r2, sp

static int smp_c1(const u8_t k[16], const u8_t r[16],
		  const u8_t preq[7], const u8_t pres[7],
		  const bt_addr_le_t *ia, const bt_addr_le_t *ra,
		  u8_t enc_data[16])
{
    894a:	001c      	movs	r4, r3
	BT_DBG("k %s r %s", bt_hex(k, 16), bt_hex(r, 16));
	BT_DBG("ia %s ra %s", bt_addr_le_str(ia), bt_addr_le_str(ra));
	BT_DBG("preq %s pres %s", bt_hex(preq, 7), bt_hex(pres, 7));

	/* pres, preq, rat and iat are concatenated to generate p1 */
	p1[0] = ia->type;
    894c:	9b0e      	ldr	r3, [sp, #56]	; 0x38

static int smp_c1(const u8_t k[16], const u8_t r[16],
		  const u8_t preq[7], const u8_t pres[7],
		  const bt_addr_le_t *ia, const bt_addr_le_t *ra,
		  u8_t enc_data[16])
{
    894e:	0006      	movs	r6, r0
	BT_DBG("k %s r %s", bt_hex(k, 16), bt_hex(r, 16));
	BT_DBG("ia %s ra %s", bt_addr_le_str(ia), bt_addr_le_str(ra));
	BT_DBG("preq %s pres %s", bt_hex(preq, 7), bt_hex(pres, 7));

	/* pres, preq, rat and iat are concatenated to generate p1 */
	p1[0] = ia->type;
    8950:	781b      	ldrb	r3, [r3, #0]

static int smp_c1(const u8_t k[16], const u8_t r[16],
		  const u8_t preq[7], const u8_t pres[7],
		  const bt_addr_le_t *ia, const bt_addr_le_t *ra,
		  u8_t enc_data[16])
{
    8952:	9d10      	ldr	r5, [sp, #64]	; 0x40
	BT_DBG("k %s r %s", bt_hex(k, 16), bt_hex(r, 16));
	BT_DBG("ia %s ra %s", bt_addr_le_str(ia), bt_addr_le_str(ra));
	BT_DBG("preq %s pres %s", bt_hex(preq, 7), bt_hex(pres, 7));

	/* pres, preq, rat and iat are concatenated to generate p1 */
	p1[0] = ia->type;
    8954:	7013      	strb	r3, [r2, #0]
	p1[1] = ra->type;
    8956:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8958:	781b      	ldrb	r3, [r3, #0]
    895a:	7053      	strb	r3, [r2, #1]
	memcpy(p1 + 2, preq, 7);
    895c:	466b      	mov	r3, sp
    895e:	2207      	movs	r2, #7
    8960:	1c98      	adds	r0, r3, #2
    8962:	f7f8 f9ea 	bl	d3a <memcpy>
	memcpy(p1 + 9, pres, 7);
    8966:	2009      	movs	r0, #9
    8968:	2207      	movs	r2, #7
    896a:	0021      	movs	r1, r4
    896c:	4468      	add	r0, sp
    896e:	f7f8 f9e4 	bl	d3a <memcpy>
    8972:	2300      	movs	r3, #0
static void xor_128(const u8_t p[16], const u8_t q[16], u8_t r[16])
{
	size_t len = 16;

	while (len--) {
		*r++ = *p++ ^ *q++;
    8974:	466a      	mov	r2, sp
    8976:	5cf9      	ldrb	r1, [r7, r3]
    8978:	5cd2      	ldrb	r2, [r2, r3]
    897a:	404a      	eors	r2, r1
    897c:	54ea      	strb	r2, [r5, r3]
    897e:	3301      	adds	r3, #1
#if !defined(CONFIG_BLUETOOTH_SMP_SC_ONLY)
static void xor_128(const u8_t p[16], const u8_t q[16], u8_t r[16])
{
	size_t len = 16;

	while (len--) {
    8980:	2b10      	cmp	r3, #16
    8982:	d1f7      	bne.n	8974 <smp_c1+0x34>
	/* c1 = e(k, e(k, r XOR p1) XOR p2) */

	/* Using enc_data as temporary output buffer */
	xor_128(r, p1, enc_data);

	err = bt_encrypt_le(k, enc_data, enc_data);
    8984:	002a      	movs	r2, r5
    8986:	0029      	movs	r1, r5
    8988:	0030      	movs	r0, r6
    898a:	f003 fbc7 	bl	c11c <bt_encrypt_le>
    898e:	1e04      	subs	r4, r0, #0
	if (err) {
    8990:	d11e      	bne.n	89d0 <smp_c1+0x90>
		return err;
	}

	/* ra is concatenated with ia and padding to generate p2 */
	memcpy(p2, ra->a.val, 6);
    8992:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8994:	af04      	add	r7, sp, #16
    8996:	1c59      	adds	r1, r3, #1
    8998:	2206      	movs	r2, #6
    899a:	0038      	movs	r0, r7
    899c:	f7f8 f9cd 	bl	d3a <memcpy>
	memcpy(p2 + 6, ia->a.val, 6);
    89a0:	2016      	movs	r0, #22
    89a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    89a4:	2206      	movs	r2, #6
    89a6:	1c59      	adds	r1, r3, #1
    89a8:	4468      	add	r0, sp
    89aa:	f7f8 f9c6 	bl	d3a <memcpy>
	memset(p2 + 12, 0, 4);
    89ae:	2204      	movs	r2, #4
    89b0:	0021      	movs	r1, r4
    89b2:	a807      	add	r0, sp, #28
    89b4:	f7f8 f9eb 	bl	d8e <memset>
static void xor_128(const u8_t p[16], const u8_t q[16], u8_t r[16])
{
	size_t len = 16;

	while (len--) {
		*r++ = *p++ ^ *q++;
    89b8:	5d2a      	ldrb	r2, [r5, r4]
    89ba:	5d3b      	ldrb	r3, [r7, r4]
    89bc:	4053      	eors	r3, r2
    89be:	552b      	strb	r3, [r5, r4]
    89c0:	3401      	adds	r4, #1
#if !defined(CONFIG_BLUETOOTH_SMP_SC_ONLY)
static void xor_128(const u8_t p[16], const u8_t q[16], u8_t r[16])
{
	size_t len = 16;

	while (len--) {
    89c2:	2c10      	cmp	r4, #16
    89c4:	d1f8      	bne.n	89b8 <smp_c1+0x78>

	BT_DBG("p2 %s", bt_hex(p2, 16));

	xor_128(enc_data, p2, enc_data);

	return bt_encrypt_le(k, enc_data, enc_data);
    89c6:	002a      	movs	r2, r5
    89c8:	0029      	movs	r1, r5
    89ca:	0030      	movs	r0, r6
    89cc:	f003 fba6 	bl	c11c <bt_encrypt_le>
}
    89d0:	b009      	add	sp, #36	; 0x24
    89d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000089d4 <legacy_pairing_confirm>:

	return 0;
}

static u8_t legacy_pairing_confirm(struct bt_smp *smp)
{
    89d4:	b5f0      	push	{r4, r5, r6, r7, lr}
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
		return legacy_send_pairing_confirm(smp);
	}

	if (IS_ENABLED(CONFIG_BLUETOOTH_PERIPHERAL)) {
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    89d6:	0006      	movs	r6, r0
    89d8:	3694      	adds	r6, #148	; 0x94

	return 0;
}

static u8_t legacy_pairing_confirm(struct bt_smp *smp)
{
    89da:	b087      	sub	sp, #28
    89dc:	0004      	movs	r4, r0
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
		return legacy_send_pairing_confirm(smp);
	}

	if (IS_ENABLED(CONFIG_BLUETOOTH_PERIPHERAL)) {
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    89de:	2109      	movs	r1, #9
    89e0:	0030      	movs	r0, r6
    89e2:	f7f9 fd24 	bl	242e <atomic_test_bit>
    89e6:	2800      	cmp	r0, #0
    89e8:	d132      	bne.n	8a50 <legacy_pairing_confirm+0x7c>
			atomic_set_bit(&smp->allowed_cmds,
    89ea:	0020      	movs	r0, r4
    89ec:	2104      	movs	r1, #4
    89ee:	3090      	adds	r0, #144	; 0x90
    89f0:	f7fe fdbc 	bl	756c <atomic_set_bit>
{
	struct bt_conn *conn = smp->chan.chan.conn;
	struct bt_smp_pairing_confirm *req;
	struct net_buf *buf;

	buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
    89f4:	2003      	movs	r0, #3
	return 0;
}

static u8_t legacy_send_pairing_confirm(struct bt_smp *smp)
{
	struct bt_conn *conn = smp->chan.chan.conn;
    89f6:	6827      	ldr	r7, [r4, #0]
	struct bt_smp_pairing_confirm *req;
	struct net_buf *buf;

	buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
    89f8:	f7ff f8cc 	bl	7b94 <smp_create_pdu.isra.2>
	if (!buf) {
		return BT_SMP_ERR_UNSPECIFIED;
    89fc:	2308      	movs	r3, #8
{
	struct bt_conn *conn = smp->chan.chan.conn;
	struct bt_smp_pairing_confirm *req;
	struct net_buf *buf;

	buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
    89fe:	1e05      	subs	r5, r0, #0
	if (!buf) {
		return BT_SMP_ERR_UNSPECIFIED;
    8a00:	9305      	str	r3, [sp, #20]
	struct bt_conn *conn = smp->chan.chan.conn;
	struct bt_smp_pairing_confirm *req;
	struct net_buf *buf;

	buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
	if (!buf) {
    8a02:	d02b      	beq.n	8a5c <legacy_pairing_confirm+0x88>
		return BT_SMP_ERR_UNSPECIFIED;
	}

	req = net_buf_add(buf, sizeof(*req));
    8a04:	2110      	movs	r1, #16
    8a06:	18c0      	adds	r0, r0, r3
    8a08:	f00a fddc 	bl	135c4 <net_buf_simple_add>

	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
    8a0c:	003b      	movs	r3, r7
    8a0e:	3362      	adds	r3, #98	; 0x62
		return BT_SMP_ERR_UNSPECIFIED;
	}

	req = net_buf_add(buf, sizeof(*req));

	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
    8a10:	9002      	str	r0, [sp, #8]
    8a12:	9301      	str	r3, [sp, #4]
    8a14:	0022      	movs	r2, r4
    8a16:	0023      	movs	r3, r4
    8a18:	0021      	movs	r1, r4
    8a1a:	0020      	movs	r0, r4
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
    8a1c:	375b      	adds	r7, #91	; 0x5b
		return BT_SMP_ERR_UNSPECIFIED;
	}

	req = net_buf_add(buf, sizeof(*req));

	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
    8a1e:	9700      	str	r7, [sp, #0]
    8a20:	33a0      	adds	r3, #160	; 0xa0
    8a22:	3299      	adds	r2, #153	; 0x99
    8a24:	31b7      	adds	r1, #183	; 0xb7
    8a26:	30d7      	adds	r0, #215	; 0xd7
    8a28:	f7ff ff8a 	bl	8940 <smp_c1>
    8a2c:	1e07      	subs	r7, r0, #0
    8a2e:	d003      	beq.n	8a38 <legacy_pairing_confirm+0x64>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
		net_buf_unref(buf);
    8a30:	0028      	movs	r0, r5
    8a32:	f00a fda5 	bl	13580 <net_buf_unref>
    8a36:	e011      	b.n	8a5c <legacy_pairing_confirm+0x88>
		return BT_SMP_ERR_UNSPECIFIED;
	}

	smp_send(smp, buf, NULL);
    8a38:	0002      	movs	r2, r0
    8a3a:	0029      	movs	r1, r5
    8a3c:	0020      	movs	r0, r4
    8a3e:	f7ff f8d5 	bl	7bec <smp_send>
    8a42:	2102      	movs	r1, #2
    8a44:	0030      	movs	r0, r6
    8a46:	4249      	negs	r1, r1
    8a48:	f00b f898 	bl	13b7c <atomic_and>

	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);

	return 0;
    8a4c:	9705      	str	r7, [sp, #20]
    8a4e:	e005      	b.n	8a5c <legacy_pairing_confirm+0x88>
			atomic_set_bit(&smp->allowed_cmds,
				       BT_SMP_CMD_PAIRING_RANDOM);
			return legacy_send_pairing_confirm(smp);
		}

		atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
    8a50:	2100      	movs	r1, #0
    8a52:	0030      	movs	r0, r6
    8a54:	f7fe fd8a 	bl	756c <atomic_set_bit>
	}

	return 0;
    8a58:	2300      	movs	r3, #0
    8a5a:	9305      	str	r3, [sp, #20]
}
    8a5c:	9805      	ldr	r0, [sp, #20]
    8a5e:	b007      	add	sp, #28
    8a60:	bdf0      	pop	{r4, r5, r6, r7, pc}

00008a62 <smp_pairing_confirm>:
	return BT_SMP_ERR_CMD_NOTSUPP;
}
#endif /* CONFIG_BLUETOOTH_CENTRAL */

static u8_t smp_pairing_confirm(struct bt_smp *smp, struct net_buf *buf)
{
    8a62:	b570      	push	{r4, r5, r6, lr}
    8a64:	0004      	movs	r4, r0
	if (!IS_ENABLED(CONFIG_BLUETOOTH_PERIPHERAL)) {
		return 0;
	}

#if !defined(CONFIG_BLUETOOTH_SMP_SC_ONLY)
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    8a66:	0025      	movs	r5, r4
{
	struct bt_smp_pairing_confirm *req = (void *)buf->data;

	BT_DBG("");

	memcpy(smp->pcnf, req->val, sizeof(smp->pcnf));
    8a68:	6889      	ldr	r1, [r1, #8]
    8a6a:	30a7      	adds	r0, #167	; 0xa7
    8a6c:	2210      	movs	r2, #16
	if (!IS_ENABLED(CONFIG_BLUETOOTH_PERIPHERAL)) {
		return 0;
	}

#if !defined(CONFIG_BLUETOOTH_SMP_SC_ONLY)
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    8a6e:	3594      	adds	r5, #148	; 0x94
{
	struct bt_smp_pairing_confirm *req = (void *)buf->data;

	BT_DBG("");

	memcpy(smp->pcnf, req->val, sizeof(smp->pcnf));
    8a70:	f7f8 f963 	bl	d3a <memcpy>
	if (!IS_ENABLED(CONFIG_BLUETOOTH_PERIPHERAL)) {
		return 0;
	}

#if !defined(CONFIG_BLUETOOTH_SMP_SC_ONLY)
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    8a74:	2105      	movs	r1, #5
    8a76:	0028      	movs	r0, r5
    8a78:	f7f9 fcd9 	bl	242e <atomic_test_bit>
    8a7c:	2800      	cmp	r0, #0
    8a7e:	d103      	bne.n	8a88 <smp_pairing_confirm+0x26>
		return legacy_pairing_confirm(smp);
    8a80:	0020      	movs	r0, r4
    8a82:	f7ff ffa7 	bl	89d4 <legacy_pairing_confirm>
    8a86:	e01c      	b.n	8ac2 <smp_pairing_confirm+0x60>
	}
#endif /* !CONFIG_BLUETOOTH_SMP_SC_ONLY */

	switch (smp->method) {
    8a88:	0023      	movs	r3, r4
    8a8a:	3398      	adds	r3, #152	; 0x98
    8a8c:	781b      	ldrb	r3, [r3, #0]
    8a8e:	2b01      	cmp	r3, #1
    8a90:	d003      	beq.n	8a9a <smp_pairing_confirm+0x38>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
		return smp_send_pairing_confirm(smp);
	case JUST_WORKS:
	case PASSKEY_CONFIRM:
	default:
		return BT_SMP_ERR_UNSPECIFIED;
    8a92:	2008      	movs	r0, #8
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
		return legacy_pairing_confirm(smp);
	}
#endif /* !CONFIG_BLUETOOTH_SMP_SC_ONLY */

	switch (smp->method) {
    8a94:	2b02      	cmp	r3, #2
    8a96:	d114      	bne.n	8ac2 <smp_pairing_confirm+0x60>
    8a98:	e00b      	b.n	8ab2 <smp_pairing_confirm+0x50>
	case PASSKEY_DISPLAY:
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
		return smp_send_pairing_confirm(smp);
	case PASSKEY_INPUT:
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    8a9a:	2109      	movs	r1, #9
    8a9c:	0028      	movs	r0, r5
    8a9e:	f7f9 fcc6 	bl	242e <atomic_test_bit>
    8aa2:	2800      	cmp	r0, #0
    8aa4:	d005      	beq.n	8ab2 <smp_pairing_confirm+0x50>
			atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
    8aa6:	0028      	movs	r0, r5
    8aa8:	2100      	movs	r1, #0
    8aaa:	f7fe fd5f 	bl	756c <atomic_set_bit>
			return 0;
    8aae:	2000      	movs	r0, #0
    8ab0:	e007      	b.n	8ac2 <smp_pairing_confirm+0x60>
		}

		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    8ab2:	0020      	movs	r0, r4
    8ab4:	2104      	movs	r1, #4
    8ab6:	3090      	adds	r0, #144	; 0x90
    8ab8:	f7fe fd58 	bl	756c <atomic_set_bit>
		return smp_send_pairing_confirm(smp);
    8abc:	0020      	movs	r0, r4
    8abe:	f7ff fc7d 	bl	83bc <smp_send_pairing_confirm>
	case JUST_WORKS:
	case PASSKEY_CONFIRM:
	default:
		return BT_SMP_ERR_UNSPECIFIED;
	}
}
    8ac2:	bd70      	pop	{r4, r5, r6, pc}

00008ac4 <smp_pairing_random>:

	return 0;
}

static u8_t smp_pairing_random(struct bt_smp *smp, struct net_buf *buf)
{
    8ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
    8ac6:	0004      	movs	r4, r0
	u32_t passkey;
	u8_t err;

	BT_DBG("");

	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    8ac8:	0003      	movs	r3, r0

#if !defined(CONFIG_BLUETOOTH_SMP_SC_ONLY)
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    8aca:	0027      	movs	r7, r4
	u32_t passkey;
	u8_t err;

	BT_DBG("");

	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    8acc:	33c7      	adds	r3, #199	; 0xc7

	return 0;
}

static u8_t smp_pairing_random(struct bt_smp *smp, struct net_buf *buf)
{
    8ace:	b0a1      	sub	sp, #132	; 0x84
	u32_t passkey;
	u8_t err;

	BT_DBG("");

	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    8ad0:	6889      	ldr	r1, [r1, #8]
    8ad2:	2210      	movs	r2, #16
    8ad4:	0018      	movs	r0, r3

#if !defined(CONFIG_BLUETOOTH_SMP_SC_ONLY)
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    8ad6:	3794      	adds	r7, #148	; 0x94
	u32_t passkey;
	u8_t err;

	BT_DBG("");

	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    8ad8:	9304      	str	r3, [sp, #16]
    8ada:	f7f8 f92e 	bl	d3a <memcpy>

#if !defined(CONFIG_BLUETOOTH_SMP_SC_ONLY)
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    8ade:	2105      	movs	r1, #5
    8ae0:	0038      	movs	r0, r7
    8ae2:	f7f9 fca4 	bl	242e <atomic_test_bit>
    8ae6:	2800      	cmp	r0, #0
    8ae8:	d13d      	bne.n	8b66 <smp_pairing_random+0xa2>
	int err;

	BT_DBG("");

	/* calculate confirmation */
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    8aea:	0022      	movs	r2, r4
}
#endif /* CONFIG_BLUETOOTH_PERIPHERAL */

static u8_t legacy_pairing_random(struct bt_smp *smp)
{
	struct bt_conn *conn = smp->chan.chan.conn;
    8aec:	6823      	ldr	r3, [r4, #0]
	int err;

	BT_DBG("");

	/* calculate confirmation */
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    8aee:	32d7      	adds	r2, #215	; 0xd7
    8af0:	9205      	str	r2, [sp, #20]
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
    8af2:	001a      	movs	r2, r3
    8af4:	335b      	adds	r3, #91	; 0x5b
    8af6:	3262      	adds	r2, #98	; 0x62
	int err;

	BT_DBG("");

	/* calculate confirmation */
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    8af8:	9201      	str	r2, [sp, #4]
    8afa:	9300      	str	r3, [sp, #0]
    8afc:	0022      	movs	r2, r4
    8afe:	0023      	movs	r3, r4
    8b00:	ae0c      	add	r6, sp, #48	; 0x30
    8b02:	9602      	str	r6, [sp, #8]
    8b04:	33a0      	adds	r3, #160	; 0xa0
    8b06:	3299      	adds	r2, #153	; 0x99
    8b08:	9904      	ldr	r1, [sp, #16]
    8b0a:	9805      	ldr	r0, [sp, #20]
    8b0c:	f7ff ff18 	bl	8940 <smp_c1>
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
	if (err) {
    8b10:	2800      	cmp	r0, #0
    8b12:	d16e      	bne.n	8bf2 <smp_pairing_random+0x12e>
		return BT_SMP_ERR_UNSPECIFIED;
	}

	BT_DBG("pcnf %s cfm %s", bt_hex(smp->pcnf, 16), bt_hex(tmp, 16));

	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
    8b14:	0020      	movs	r0, r4
    8b16:	2210      	movs	r2, #16
    8b18:	0031      	movs	r1, r6
    8b1a:	30a7      	adds	r0, #167	; 0xa7
    8b1c:	f7f8 f8f8 	bl	d10 <memcmp>
		return BT_SMP_ERR_CONFIRM_FAILED;
    8b20:	2504      	movs	r5, #4
		return BT_SMP_ERR_UNSPECIFIED;
	}

	BT_DBG("pcnf %s cfm %s", bt_hex(smp->pcnf, 16), bt_hex(tmp, 16));

	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
    8b22:	2800      	cmp	r0, #0
    8b24:	d000      	beq.n	8b28 <smp_pairing_random+0x64>
    8b26:	e0af      	b.n	8c88 <smp_pairing_random+0x1c4>
	 * r1' is concatenated with r2' to generate r' which is used as
	 * the 128-bit input parameter plaintextData to security function e:
	 *
	 *    r' = r1' || r2'
	 */
	memcpy(out, r2, 8);
    8b28:	2208      	movs	r2, #8
    8b2a:	9904      	ldr	r1, [sp, #16]
    8b2c:	0030      	movs	r0, r6
    8b2e:	f7f8 f904 	bl	d3a <memcpy>
	memcpy(out + 8, r1, 8);
    8b32:	0021      	movs	r1, r4
    8b34:	2208      	movs	r2, #8
    8b36:	31b7      	adds	r1, #183	; 0xb7
    8b38:	a80e      	add	r0, sp, #56	; 0x38
    8b3a:	f7f8 f8fe 	bl	d3a <memcpy>

	/* s1(k, r1 , r2) = e(k, r') */
	return bt_encrypt_le(k, out, out);
    8b3e:	0032      	movs	r2, r6
    8b40:	0031      	movs	r1, r6
    8b42:	9805      	ldr	r0, [sp, #20]
    8b44:	f003 faea 	bl	c11c <bt_encrypt_le>
    8b48:	1e05      	subs	r5, r0, #0
		return 0;
	}

	if (IS_ENABLED(CONFIG_BLUETOOTH_PERIPHERAL)) {
		err = smp_s1(smp->tk, smp->prnd, smp->rrnd, tmp);
		if (err) {
    8b4a:	d152      	bne.n	8bf2 <smp_pairing_random+0x12e>
			return BT_SMP_ERR_UNSPECIFIED;
		}

		memcpy(smp->tk, tmp, sizeof(smp->tk));
    8b4c:	2210      	movs	r2, #16
    8b4e:	0031      	movs	r1, r6
    8b50:	9805      	ldr	r0, [sp, #20]
    8b52:	f7f8 f8f2 	bl	d3a <memcpy>
		BT_DBG("generated STK %s", bt_hex(smp->tk, 16));

		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    8b56:	0038      	movs	r0, r7
    8b58:	2101      	movs	r1, #1
    8b5a:	f7fe fd07 	bl	756c <atomic_set_bit>

		smp_send_pairing_random(smp);
    8b5e:	0020      	movs	r0, r4
    8b60:	f7ff faee 	bl	8140 <smp_send_pairing_random>
    8b64:	e090      	b.n	8c88 <smp_pairing_random+0x1c4>
		return compute_and_send_master_dhcheck(smp);
	}
#endif /* CONFIG_BLUETOOTH_CENTRAL */

#if defined(CONFIG_BLUETOOTH_PERIPHERAL)
	switch (smp->method) {
    8b66:	0023      	movs	r3, r4
    8b68:	3398      	adds	r3, #152	; 0x98
    8b6a:	7818      	ldrb	r0, [r3, #0]
			return BT_SMP_ERR_UNSPECIFIED;
		}

		return 0;
	default:
		return BT_SMP_ERR_UNSPECIFIED;
    8b6c:	2508      	movs	r5, #8
		return compute_and_send_master_dhcheck(smp);
	}
#endif /* CONFIG_BLUETOOTH_CENTRAL */

#if defined(CONFIG_BLUETOOTH_PERIPHERAL)
	switch (smp->method) {
    8b6e:	2803      	cmp	r0, #3
    8b70:	d900      	bls.n	8b74 <smp_pairing_random+0xb0>
    8b72:	e089      	b.n	8c88 <smp_pairing_random+0x1c4>
    8b74:	f7f7 fb00 	bl	178 <__gnu_thumb1_case_uqi>
    8b78:	023f3f7b 	.word	0x023f3f7b

	BT_DBG("u %s", bt_hex(u, 32));
	BT_DBG("v %s", bt_hex(v, 32));
	BT_DBG("x %s y %s", bt_hex(x, 16), bt_hex(y, 16));

	sys_memcpy_swap(m, u, 32);
    8b7c:	0021      	movs	r1, r4
    8b7e:	2220      	movs	r2, #32
    8b80:	31e7      	adds	r1, #231	; 0xe7
    8b82:	a80c      	add	r0, sp, #48	; 0x30
    8b84:	f7fe fc84 	bl	7490 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
    8b88:	2220      	movs	r2, #32
    8b8a:	4941      	ldr	r1, [pc, #260]	; (8c90 <smp_pairing_random+0x1cc>)
    8b8c:	a814      	add	r0, sp, #80	; 0x50
    8b8e:	f7fe fc7f 	bl	7490 <sys_memcpy_swap>
	sys_memcpy_swap(m + 64, y, 16);
    8b92:	0021      	movs	r1, r4
    8b94:	2210      	movs	r2, #16
    8b96:	31b7      	adds	r1, #183	; 0xb7
    8b98:	a81c      	add	r0, sp, #112	; 0x70
    8b9a:	f7fe fc79 	bl	7490 <sys_memcpy_swap>

	sys_memcpy_swap(xs, x, 16);
    8b9e:	2210      	movs	r2, #16
    8ba0:	9904      	ldr	r1, [sp, #16]
    8ba2:	a808      	add	r0, sp, #32
    8ba4:	f7fe fc74 	bl	7490 <sys_memcpy_swap>

	/* reuse xs (key) as buffer for result */
	err = bt_smp_aes_cmac(xs, m, sizeof(m), xs);
    8ba8:	ab08      	add	r3, sp, #32
    8baa:	2250      	movs	r2, #80	; 0x50
    8bac:	a90c      	add	r1, sp, #48	; 0x30
    8bae:	0018      	movs	r0, r3
    8bb0:	f7fe fce8 	bl	7584 <bt_smp_aes_cmac>
	if (err) {
    8bb4:	2800      	cmp	r0, #0
    8bb6:	d11c      	bne.n	8bf2 <smp_pairing_random+0x12e>
		return err;
	}
	BT_DBG("res %s", bt_hex(xs, 16));

	memcpy(passkey, xs + 12, 4);
    8bb8:	2204      	movs	r2, #4
    8bba:	a90b      	add	r1, sp, #44	; 0x2c
    8bbc:	a807      	add	r0, sp, #28
    8bbe:	f7f8 f8bc 	bl	d3a <memcpy>
    8bc2:	9b07      	ldr	r3, [sp, #28]
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
    8bc4:	4933      	ldr	r1, [pc, #204]	; (8c94 <smp_pairing_random+0x1d0>)
    8bc6:	ba18      	rev	r0, r3
    8bc8:	f7f7 fb70 	bl	2ac <__aeabi_uidivmod>
		if (smp_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd,
			   &passkey)) {
			return BT_SMP_ERR_UNSPECIFIED;
		}

		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    8bcc:	0038      	movs	r0, r7
		return err;
	}
	BT_DBG("res %s", bt_hex(xs, 16));

	memcpy(passkey, xs + 12, 4);
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
    8bce:	9107      	str	r1, [sp, #28]
		if (smp_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd,
			   &passkey)) {
			return BT_SMP_ERR_UNSPECIFIED;
		}

		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    8bd0:	2109      	movs	r1, #9
    8bd2:	f7fe fccb 	bl	756c <atomic_set_bit>
		bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
    8bd6:	4b30      	ldr	r3, [pc, #192]	; (8c98 <smp_pairing_random+0x1d4>)
    8bd8:	9907      	ldr	r1, [sp, #28]
    8bda:	681b      	ldr	r3, [r3, #0]
    8bdc:	6820      	ldr	r0, [r4, #0]
    8bde:	689b      	ldr	r3, [r3, #8]
    8be0:	4798      	blx	r3
		break;
    8be2:	e044      	b.n	8c6e <smp_pairing_random+0x1aa>
			atomic_set_bit(&smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
			atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
			return 0;
		}

		if (bt_rand(smp->prnd, 16)) {
    8be4:	0020      	movs	r0, r4
    8be6:	2110      	movs	r1, #16
    8be8:	30b7      	adds	r0, #183	; 0xb7
    8bea:	f003 fa79 	bl	c0e0 <bt_rand>
    8bee:	2800      	cmp	r0, #0
    8bf0:	d04a      	beq.n	8c88 <smp_pairing_random+0x1c4>
#if defined(CONFIG_BLUETOOTH_PERIPHERAL)
	switch (smp->method) {
	case PASSKEY_CONFIRM:
		if (smp_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd,
			   &passkey)) {
			return BT_SMP_ERR_UNSPECIFIED;
    8bf2:	2508      	movs	r5, #8
    8bf4:	e048      	b.n	8c88 <smp_pairing_random+0x1c4>
		 * bit of Z is set equal to one and the least
		 * significant bit is made up from one bit of the
		 * passkey e.g. if the passkey bit is 1, then Z = 0x81
		 * and if the passkey bit is 0, then Z = 0x80.
		 */
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    8bf6:	23b6      	movs	r3, #182	; 0xb6
    8bf8:	005b      	lsls	r3, r3, #1
    8bfa:	5ce2      	ldrb	r2, [r4, r3]
    8bfc:	0023      	movs	r3, r4
    8bfe:	33fc      	adds	r3, #252	; 0xfc
    8c00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
		break;
	default:
		return BT_SMP_ERR_UNSPECIFIED;
	}

	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
    8c02:	0020      	movs	r0, r4
		 * bit of Z is set equal to one and the least
		 * significant bit is made up from one bit of the
		 * passkey e.g. if the passkey bit is 1, then Z = 0x81
		 * and if the passkey bit is 0, then Z = 0x80.
		 */
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    8c04:	40d3      	lsrs	r3, r2
    8c06:	2201      	movs	r2, #1
		break;
	default:
		return BT_SMP_ERR_UNSPECIFIED;
	}

	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
    8c08:	ae0c      	add	r6, sp, #48	; 0x30
		 * bit of Z is set equal to one and the least
		 * significant bit is made up from one bit of the
		 * passkey e.g. if the passkey bit is 1, then Z = 0x81
		 * and if the passkey bit is 0, then Z = 0x80.
		 */
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    8c0a:	4013      	ands	r3, r2
		break;
	default:
		return BT_SMP_ERR_UNSPECIFIED;
	}

	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
    8c0c:	327f      	adds	r2, #127	; 0x7f
    8c0e:	4313      	orrs	r3, r2
    8c10:	9600      	str	r6, [sp, #0]
    8c12:	9a04      	ldr	r2, [sp, #16]
    8c14:	491e      	ldr	r1, [pc, #120]	; (8c90 <smp_pairing_random+0x1cc>)
    8c16:	30e7      	adds	r0, #231	; 0xe7
    8c18:	f7fe fd24 	bl	7664 <smp_f4>
		return BT_SMP_ERR_UNSPECIFIED;
    8c1c:	2508      	movs	r5, #8
		break;
	default:
		return BT_SMP_ERR_UNSPECIFIED;
	}

	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
    8c1e:	2800      	cmp	r0, #0
    8c20:	d132      	bne.n	8c88 <smp_pairing_random+0x1c4>
		return BT_SMP_ERR_UNSPECIFIED;
	}

	BT_DBG("pcnf %s cfm %s", bt_hex(smp->pcnf, 16), bt_hex(cfm, 16));

	if (memcmp(smp->pcnf, cfm, 16)) {
    8c22:	0020      	movs	r0, r4
    8c24:	2210      	movs	r2, #16
    8c26:	0031      	movs	r1, r6
    8c28:	30a7      	adds	r0, #167	; 0xa7
    8c2a:	f7f8 f871 	bl	d10 <memcmp>
		return BT_SMP_ERR_CONFIRM_FAILED;
    8c2e:	3d04      	subs	r5, #4
		return BT_SMP_ERR_UNSPECIFIED;
	}

	BT_DBG("pcnf %s cfm %s", bt_hex(smp->pcnf, 16), bt_hex(cfm, 16));

	if (memcmp(smp->pcnf, cfm, 16)) {
    8c30:	2800      	cmp	r0, #0
    8c32:	d129      	bne.n	8c88 <smp_pairing_random+0x1c4>
		err = sc_smp_check_confirm(smp);
		if (err) {
			return err;
		}

		atomic_set_bit(&smp->allowed_cmds,
    8c34:	0026      	movs	r6, r4
    8c36:	3690      	adds	r6, #144	; 0x90
    8c38:	2103      	movs	r1, #3

	if (memcmp(smp->pcnf, cfm, 16)) {
		return BT_SMP_ERR_CONFIRM_FAILED;
	}

	return 0;
    8c3a:	0005      	movs	r5, r0
		err = sc_smp_check_confirm(smp);
		if (err) {
			return err;
		}

		atomic_set_bit(&smp->allowed_cmds,
    8c3c:	0030      	movs	r0, r6
    8c3e:	f7fe fc95 	bl	756c <atomic_set_bit>
			       BT_SMP_CMD_PAIRING_CONFIRM);
		smp_send_pairing_random(smp);
    8c42:	0020      	movs	r0, r4
    8c44:	f7ff fa7c 	bl	8140 <smp_send_pairing_random>

		smp->passkey_round++;
    8c48:	23b6      	movs	r3, #182	; 0xb6
    8c4a:	22b6      	movs	r2, #182	; 0xb6
    8c4c:	005b      	lsls	r3, r3, #1
    8c4e:	5ce3      	ldrb	r3, [r4, r3]
    8c50:	0052      	lsls	r2, r2, #1
    8c52:	3301      	adds	r3, #1
    8c54:	b2db      	uxtb	r3, r3
    8c56:	54a3      	strb	r3, [r4, r2]
		if (smp->passkey_round == 20) {
    8c58:	2b14      	cmp	r3, #20
    8c5a:	d1c3      	bne.n	8be4 <smp_pairing_random+0x120>
			atomic_set_bit(&smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
    8c5c:	0030      	movs	r0, r6
    8c5e:	210d      	movs	r1, #13
    8c60:	f7fe fc84 	bl	756c <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    8c64:	210d      	movs	r1, #13
    8c66:	0038      	movs	r0, r7
    8c68:	f7fe fc80 	bl	756c <atomic_set_bit>
			return 0;
    8c6c:	e00c      	b.n	8c88 <smp_pairing_random+0x1c4>
		return 0;
	default:
		return BT_SMP_ERR_UNSPECIFIED;
	}

	atomic_set_bit(&smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
    8c6e:	0020      	movs	r0, r4
    8c70:	210d      	movs	r1, #13
    8c72:	3090      	adds	r0, #144	; 0x90
    8c74:	f7fe fc7a 	bl	756c <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    8c78:	210d      	movs	r1, #13
    8c7a:	0038      	movs	r0, r7
    8c7c:	f7fe fc76 	bl	756c <atomic_set_bit>
	smp_send_pairing_random(smp);
    8c80:	0020      	movs	r0, r4
    8c82:	f7ff fa5d 	bl	8140 <smp_send_pairing_random>
#endif /* CONFIG_BLUETOOTH_PERIPHERAL */

	return 0;
    8c86:	2500      	movs	r5, #0
}
    8c88:	0028      	movs	r0, r5
    8c8a:	b021      	add	sp, #132	; 0x84
    8c8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8c8e:	46c0      	nop			; (mov r8, r8)
    8c90:	200010a9 	.word	0x200010a9
    8c94:	000f4240 	.word	0x000f4240
    8c98:	20002240 	.word	0x20002240

00008c9c <smp_ident_addr_info>:

	return 0;
}

static u8_t smp_ident_addr_info(struct bt_smp *smp, struct net_buf *buf)
{
    8c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
    8c9e:	688e      	ldr	r6, [r1, #8]

	return 0;
}

static u8_t smp_ident_addr_info(struct bt_smp *smp, struct net_buf *buf)
{
    8ca0:	b087      	sub	sp, #28
	return BT_ADDR_IS_RPA(&addr->a);
}

static inline bool bt_addr_le_is_identity(const bt_addr_le_t *addr)
{
	if (addr->type == BT_ADDR_LE_PUBLIC) {
    8ca2:	7833      	ldrb	r3, [r6, #0]
    8ca4:	0005      	movs	r5, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    8ca6:	6804      	ldr	r4, [r0, #0]
    8ca8:	2b00      	cmp	r3, #0
    8caa:	d01a      	beq.n	8ce2 <smp_ident_addr_info+0x46>
	struct bt_smp_ident_addr_info *req = (void *)buf->data;

	BT_DBG("identity %s", bt_addr_le_str(&req->addr));

	if (!bt_addr_le_is_identity(&req->addr)) {
    8cac:	223f      	movs	r2, #63	; 0x3f
    8cae:	79b3      	ldrb	r3, [r6, #6]
    8cb0:	4393      	bics	r3, r2
    8cb2:	2bc0      	cmp	r3, #192	; 0xc0
    8cb4:	d015      	beq.n	8ce2 <smp_ident_addr_info+0x46>
		BT_ERR("Invalid identity %s for %s",
    8cb6:	0030      	movs	r0, r6
    8cb8:	f7f9 fab0 	bl	221c <bt_addr_le_str>
    8cbc:	0005      	movs	r5, r0
    8cbe:	0020      	movs	r0, r4
    8cc0:	3054      	adds	r0, #84	; 0x54
    8cc2:	f7f9 faab 	bl	221c <bt_addr_le_str>
    8cc6:	4b3a      	ldr	r3, [pc, #232]	; (8db0 <smp_ident_addr_info+0x114>)
    8cc8:	9002      	str	r0, [sp, #8]
    8cca:	9303      	str	r3, [sp, #12]
    8ccc:	4b39      	ldr	r3, [pc, #228]	; (8db4 <smp_ident_addr_info+0x118>)
    8cce:	9501      	str	r5, [sp, #4]
    8cd0:	9300      	str	r3, [sp, #0]
    8cd2:	4a39      	ldr	r2, [pc, #228]	; (8db8 <smp_ident_addr_info+0x11c>)
    8cd4:	4b39      	ldr	r3, [pc, #228]	; (8dbc <smp_ident_addr_info+0x120>)
    8cd6:	493a      	ldr	r1, [pc, #232]	; (8dc0 <smp_ident_addr_info+0x124>)
    8cd8:	483a      	ldr	r0, [pc, #232]	; (8dc4 <smp_ident_addr_info+0x128>)
    8cda:	f7f8 fe51 	bl	1980 <printk>
		       bt_addr_le_str(&req->addr), bt_addr_le_str(&conn->le.dst));
		return BT_SMP_ERR_INVALID_PARAMS;
    8cde:	240a      	movs	r4, #10
    8ce0:	e062      	b.n	8da8 <smp_ident_addr_info+0x10c>
	}

	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    8ce2:	0028      	movs	r0, r5
    8ce4:	210a      	movs	r1, #10
    8ce6:	3094      	adds	r0, #148	; 0x94
    8ce8:	f7f9 fba1 	bl	242e <atomic_test_bit>
    8cec:	2800      	cmp	r0, #0
    8cee:	d043      	beq.n	8d78 <smp_ident_addr_info+0xdc>
		const bt_addr_le_t *dst;
		struct bt_keys *keys;

		keys = bt_keys_get_type(BT_KEYS_IRK, &conn->le.dst);
    8cf0:	0023      	movs	r3, r4
    8cf2:	3354      	adds	r3, #84	; 0x54
    8cf4:	0019      	movs	r1, r3
    8cf6:	2002      	movs	r0, #2
    8cf8:	9305      	str	r3, [sp, #20]
    8cfa:	f000 fa3f 	bl	917c <bt_keys_get_type>
    8cfe:	1e07      	subs	r7, r0, #0
		if (!keys) {
    8d00:	d10f      	bne.n	8d22 <smp_ident_addr_info+0x86>
			BT_ERR("Unable to get keys for %s",
    8d02:	9805      	ldr	r0, [sp, #20]
    8d04:	f7f9 fa8a 	bl	221c <bt_addr_le_str>
    8d08:	4b29      	ldr	r3, [pc, #164]	; (8db0 <smp_ident_addr_info+0x114>)
    8d0a:	9001      	str	r0, [sp, #4]
    8d0c:	9302      	str	r3, [sp, #8]
    8d0e:	4b29      	ldr	r3, [pc, #164]	; (8db4 <smp_ident_addr_info+0x118>)
    8d10:	4a29      	ldr	r2, [pc, #164]	; (8db8 <smp_ident_addr_info+0x11c>)
    8d12:	9300      	str	r3, [sp, #0]
    8d14:	492a      	ldr	r1, [pc, #168]	; (8dc0 <smp_ident_addr_info+0x124>)
    8d16:	4b29      	ldr	r3, [pc, #164]	; (8dbc <smp_ident_addr_info+0x120>)
    8d18:	482b      	ldr	r0, [pc, #172]	; (8dc8 <smp_ident_addr_info+0x12c>)
    8d1a:	f7f8 fe31 	bl	1980 <printk>
			       bt_addr_le_str(&conn->le.dst));
			return BT_SMP_ERR_UNSPECIFIED;
    8d1e:	2408      	movs	r4, #8
    8d20:	e042      	b.n	8da8 <smp_ident_addr_info+0x10c>
		 * in new pairing.
		 */
		if (conn->role == BT_HCI_ROLE_MASTER) {
			dst = &conn->le.resp_addr;
		} else {
			dst = &conn->le.init_addr;
    8d22:	0021      	movs	r1, r4
		 * We can't use conn->dst here as this might already contain
		 * identity address known from previous pairing. Since all keys
		 * are cleared on re-pairing we wouldn't store IRK distributed
		 * in new pairing.
		 */
		if (conn->role == BT_HCI_ROLE_MASTER) {
    8d24:	78e3      	ldrb	r3, [r4, #3]
			dst = &conn->le.resp_addr;
		} else {
			dst = &conn->le.init_addr;
    8d26:	315b      	adds	r1, #91	; 0x5b
		 * We can't use conn->dst here as this might already contain
		 * identity address known from previous pairing. Since all keys
		 * are cleared on re-pairing we wouldn't store IRK distributed
		 * in new pairing.
		 */
		if (conn->role == BT_HCI_ROLE_MASTER) {
    8d28:	2b00      	cmp	r3, #0
    8d2a:	d100      	bne.n	8d2e <smp_ident_addr_info+0x92>
			dst = &conn->le.resp_addr;
    8d2c:	3107      	adds	r1, #7
int bt_addr_le_create_nrpa(bt_addr_le_t *addr);
int bt_addr_le_create_static(bt_addr_le_t *addr);

static inline bool bt_addr_le_is_rpa(const bt_addr_le_t *addr)
{
	if (addr->type != BT_ADDR_LE_RANDOM) {
    8d2e:	780b      	ldrb	r3, [r1, #0]
    8d30:	2b01      	cmp	r3, #1
    8d32:	d121      	bne.n	8d78 <smp_ident_addr_info+0xdc>
		} else {
			dst = &conn->le.init_addr;
		}

		if (bt_addr_le_is_rpa(dst)) {
    8d34:	223f      	movs	r2, #63	; 0x3f
    8d36:	798b      	ldrb	r3, [r1, #6]
    8d38:	4393      	bics	r3, r2
    8d3a:	2b40      	cmp	r3, #64	; 0x40
    8d3c:	d11c      	bne.n	8d78 <smp_ident_addr_info+0xdc>
	return memcmp(a, b, sizeof(*a));
}

static inline void bt_addr_copy(bt_addr_t *dst, const bt_addr_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    8d3e:	0038      	movs	r0, r7
    8d40:	3a39      	subs	r2, #57	; 0x39
			/* always update last use RPA */
			bt_addr_copy(&keys->irk.rpa, &dst->a);
    8d42:	3101      	adds	r1, #1
    8d44:	3040      	adds	r0, #64	; 0x40
    8d46:	f7f7 fff8 	bl	d3a <memcpy>
	return BT_ADDR_IS_RPA(&addr->a);
}

static inline bool bt_addr_le_is_identity(const bt_addr_le_t *addr)
{
	if (addr->type == BT_ADDR_LE_PUBLIC) {
    8d4a:	0023      	movs	r3, r4
    8d4c:	3354      	adds	r3, #84	; 0x54
    8d4e:	781a      	ldrb	r2, [r3, #0]
    8d50:	2a00      	cmp	r2, #0
    8d52:	d011      	beq.n	8d78 <smp_ident_addr_info+0xdc>
			 * Update connection address and notify about identity
			 * resolved only if connection wasn't already reported
			 * with identity address. This may happen if IRK was
			 * present before ie. due to re-pairing.
			 */
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
    8d54:	223f      	movs	r2, #63	; 0x3f
    8d56:	799b      	ldrb	r3, [r3, #6]
    8d58:	4393      	bics	r3, r2
    8d5a:	2bc0      	cmp	r3, #192	; 0xc0
    8d5c:	d00c      	beq.n	8d78 <smp_ident_addr_info+0xdc>
	memcpy(dst, src, sizeof(*dst));
}

static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    8d5e:	3a38      	subs	r2, #56	; 0x38
    8d60:	0031      	movs	r1, r6
    8d62:	0038      	movs	r0, r7
    8d64:	f7f7 ffe9 	bl	d3a <memcpy>
    8d68:	2207      	movs	r2, #7
    8d6a:	0031      	movs	r1, r6
    8d6c:	9805      	ldr	r0, [sp, #20]
    8d6e:	f7f7 ffe4 	bl	d3a <memcpy>
				bt_addr_le_copy(&keys->addr, &req->addr);
				bt_addr_le_copy(&conn->le.dst, &req->addr);

				bt_conn_identity_resolved(conn);
    8d72:	0020      	movs	r0, r4
    8d74:	f7fb fc96 	bl	46a4 <bt_conn_identity_resolved>
			}
		}
	}

	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
    8d78:	22b7      	movs	r2, #183	; 0xb7
    8d7a:	0052      	lsls	r2, r2, #1
    8d7c:	5cab      	ldrb	r3, [r5, r2]
    8d7e:	2102      	movs	r1, #2
    8d80:	0018      	movs	r0, r3
    8d82:	4388      	bics	r0, r1
    8d84:	54a8      	strb	r0, [r5, r2]

	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    8d86:	075b      	lsls	r3, r3, #29
    8d88:	d504      	bpl.n	8d94 <smp_ident_addr_info+0xf8>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    8d8a:	0028      	movs	r0, r5
    8d8c:	210a      	movs	r1, #10
    8d8e:	3090      	adds	r0, #144	; 0x90
    8d90:	f7fe fbec 	bl	756c <atomic_set_bit>
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
		bt_smp_distribute_keys(smp);
	}

	/* if all keys were distributed, pairing is done */
	if (!smp->local_dist && !smp->remote_dist) {
    8d94:	002b      	movs	r3, r5
    8d96:	33fc      	adds	r3, #252	; 0xfc
    8d98:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    8d9a:	4b0c      	ldr	r3, [pc, #48]	; (8dcc <smp_ident_addr_info+0x130>)
		smp_pairing_complete(smp, 0);
	}

	return 0;
    8d9c:	2400      	movs	r4, #0
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
		bt_smp_distribute_keys(smp);
	}

	/* if all keys were distributed, pairing is done */
	if (!smp->local_dist && !smp->remote_dist) {
    8d9e:	421a      	tst	r2, r3
    8da0:	d102      	bne.n	8da8 <smp_ident_addr_info+0x10c>
			sc_derive_link_key(smp);
		}
	}
#endif /* CONFIG_BLUETOOTH_BREDR */

	smp_reset(smp);
    8da2:	0028      	movs	r0, r5
    8da4:	f7fe fce7 	bl	7776 <smp_reset>
	if (!smp->local_dist && !smp->remote_dist) {
		smp_pairing_complete(smp, 0);
	}

	return 0;
}
    8da8:	0020      	movs	r0, r4
    8daa:	b007      	add	sp, #28
    8dac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8dae:	46c0      	nop			; (mov r8, r8)
    8db0:	000154c4 	.word	0x000154c4
    8db4:	000154c9 	.word	0x000154c9
    8db8:	00015484 	.word	0x00015484
    8dbc:	00017db8 	.word	0x00017db8
    8dc0:	0001548b 	.word	0x0001548b
    8dc4:	000166bf 	.word	0x000166bf
    8dc8:	000163ad 	.word	0x000163ad
    8dcc:	00ffff00 	.word	0x00ffff00

00008dd0 <bt_smp_send_security_req>:
	return CONTAINER_OF(chan, struct bt_smp, chan);
}

#if defined(CONFIG_BLUETOOTH_PERIPHERAL)
int bt_smp_send_security_req(struct bt_conn *conn)
{
    8dd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    8dd2:	0006      	movs	r6, r0
	struct bt_smp *smp;
	struct bt_smp_security_request *req;
	struct net_buf *req_buf;

	BT_DBG("");
	smp = smp_chan_get(conn);
    8dd4:	f7fe fec0 	bl	7b58 <smp_chan_get>
    8dd8:	1e05      	subs	r5, r0, #0
	if (!smp) {
    8dda:	d051      	beq.n	8e80 <bt_smp_send_security_req+0xb0>
		return -ENOTCONN;
	}

	/* SMP Timeout */
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    8ddc:	0004      	movs	r4, r0
    8dde:	3494      	adds	r4, #148	; 0x94
    8de0:	2104      	movs	r1, #4
    8de2:	0020      	movs	r0, r4
    8de4:	f7f9 fb23 	bl	242e <atomic_test_bit>
    8de8:	2800      	cmp	r0, #0
    8dea:	d14b      	bne.n	8e84 <bt_smp_send_security_req+0xb4>
		return -EIO;
	}

	/* pairing is in progress */
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    8dec:	0020      	movs	r0, r4
    8dee:	2103      	movs	r1, #3
    8df0:	f7f9 fb1d 	bl	242e <atomic_test_bit>
    8df4:	1e04      	subs	r4, r0, #0
    8df6:	d147      	bne.n	8e88 <bt_smp_send_security_req+0xb8>
	return auth;
}

static bool sec_level_reachable(struct bt_conn *conn)
{
	switch (conn->required_sec_level) {
    8df8:	7a70      	ldrb	r0, [r6, #9]
    8dfa:	3801      	subs	r0, #1
    8dfc:	2803      	cmp	r0, #3
    8dfe:	d845      	bhi.n	8e8c <bt_smp_send_security_req+0xbc>
    8e00:	f7f7 f9ba 	bl	178 <__gnu_thumb1_case_uqi>
    8e04:	09021515 	.word	0x09021515
	case BT_SECURITY_LOW:
	case BT_SECURITY_MEDIUM:
		return true;
	case BT_SECURITY_HIGH:
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT;
    8e08:	f7fe fb5a 	bl	74c0 <get_io_capa>
    8e0c:	3803      	subs	r0, #3
    8e0e:	1e43      	subs	r3, r0, #1
    8e10:	4198      	sbcs	r0, r3
    8e12:	b2c0      	uxtb	r0, r0
    8e14:	e009      	b.n	8e2a <bt_smp_send_security_req+0x5a>
	case BT_SECURITY_FIPS:
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT &&
    8e16:	f7fe fb53 	bl	74c0 <get_io_capa>
    8e1a:	2200      	movs	r2, #0
    8e1c:	2803      	cmp	r0, #3
    8e1e:	d001      	beq.n	8e24 <bt_smp_send_security_req+0x54>
    8e20:	4b1d      	ldr	r3, [pc, #116]	; (8e98 <bt_smp_send_security_req+0xc8>)
    8e22:	781a      	ldrb	r2, [r3, #0]
    8e24:	2301      	movs	r3, #1
    8e26:	401a      	ands	r2, r3
    8e28:	0010      	movs	r0, r2
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
		return -EBUSY;
	}

	/* early verify if required sec level if reachable */
	if (!sec_level_reachable(conn)) {
    8e2a:	2800      	cmp	r0, #0
    8e2c:	d02e      	beq.n	8e8c <bt_smp_send_security_req+0xbc>
		return -EINVAL;
	}

	req_buf = smp_create_pdu(conn, BT_SMP_CMD_SECURITY_REQUEST,
    8e2e:	200b      	movs	r0, #11
    8e30:	f7fe feb0 	bl	7b94 <smp_create_pdu.isra.2>
    8e34:	1e07      	subs	r7, r0, #0
				 sizeof(*req));
	if (!req_buf) {
    8e36:	d02b      	beq.n	8e90 <bt_smp_send_security_req+0xc0>
		return -ENOBUFS;
	}

	req = net_buf_add(req_buf, sizeof(*req));
    8e38:	2101      	movs	r1, #1
    8e3a:	3008      	adds	r0, #8
    8e3c:	f00a fbc2 	bl	135c4 <net_buf_simple_add>
}

static u8_t get_auth(u8_t auth)
{
	if (sc_supported) {
		auth &= BT_SMP_AUTH_MASK_SC;
    8e40:	2209      	movs	r2, #9
	return 0;
}

static u8_t get_auth(u8_t auth)
{
	if (sc_supported) {
    8e42:	4b15      	ldr	r3, [pc, #84]	; (8e98 <bt_smp_send_security_req+0xc8>)
				 sizeof(*req));
	if (!req_buf) {
		return -ENOBUFS;
	}

	req = net_buf_add(req_buf, sizeof(*req));
    8e44:	9001      	str	r0, [sp, #4]
	return 0;
}

static u8_t get_auth(u8_t auth)
{
	if (sc_supported) {
    8e46:	781b      	ldrb	r3, [r3, #0]
		auth &= BT_SMP_AUTH_MASK_SC;
    8e48:	9200      	str	r2, [sp, #0]
	return 0;
}

static u8_t get_auth(u8_t auth)
{
	if (sc_supported) {
    8e4a:	2b00      	cmp	r3, #0
    8e4c:	d101      	bne.n	8e52 <bt_smp_send_security_req+0x82>
		auth &= BT_SMP_AUTH_MASK_SC;
	} else {
		auth &= BT_SMP_AUTH_MASK;
    8e4e:	3301      	adds	r3, #1
    8e50:	9300      	str	r3, [sp, #0]
	}

	if (get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) {
    8e52:	f7fe fb35 	bl	74c0 <get_io_capa>
    8e56:	2204      	movs	r2, #4
		auth &= ~(BT_SMP_AUTH_MITM);
	} else {
		auth |= BT_SMP_AUTH_MITM;
    8e58:	9b00      	ldr	r3, [sp, #0]
    8e5a:	4313      	orrs	r3, r2
		auth &= BT_SMP_AUTH_MASK_SC;
	} else {
		auth &= BT_SMP_AUTH_MASK;
	}

	if (get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) {
    8e5c:	2803      	cmp	r0, #3
    8e5e:	d101      	bne.n	8e64 <bt_smp_send_security_req+0x94>
		auth &= ~(BT_SMP_AUTH_MITM);
    8e60:	9b00      	ldr	r3, [sp, #0]
    8e62:	4393      	bics	r3, r2
	if (!req_buf) {
		return -ENOBUFS;
	}

	req = net_buf_add(req_buf, sizeof(*req));
	req->auth_req = get_auth(BT_SMP_AUTH_DEFAULT);
    8e64:	9a01      	ldr	r2, [sp, #4]
    8e66:	0030      	movs	r0, r6
    8e68:	7013      	strb	r3, [r2, #0]
    8e6a:	2106      	movs	r1, #6
    8e6c:	2300      	movs	r3, #0
    8e6e:	003a      	movs	r2, r7
    8e70:	f7fc fa62 	bl	5338 <bt_l2cap_send_cb>

	/* SMP timer is not restarted for SecRequest so don't use smp_send */
	bt_l2cap_send(conn, BT_L2CAP_CID_SMP, req_buf);

	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
    8e74:	0028      	movs	r0, r5
    8e76:	2105      	movs	r1, #5
    8e78:	3090      	adds	r0, #144	; 0x90
    8e7a:	f7fe fb77 	bl	756c <atomic_set_bit>

	return 0;
    8e7e:	e009      	b.n	8e94 <bt_smp_send_security_req+0xc4>
	struct net_buf *req_buf;

	BT_DBG("");
	smp = smp_chan_get(conn);
	if (!smp) {
		return -ENOTCONN;
    8e80:	2439      	movs	r4, #57	; 0x39
    8e82:	e006      	b.n	8e92 <bt_smp_send_security_req+0xc2>
	}

	/* SMP Timeout */
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
		return -EIO;
    8e84:	2405      	movs	r4, #5
    8e86:	e004      	b.n	8e92 <bt_smp_send_security_req+0xc2>
	}

	/* pairing is in progress */
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
		return -EBUSY;
    8e88:	2410      	movs	r4, #16
    8e8a:	e002      	b.n	8e92 <bt_smp_send_security_req+0xc2>
	}

	/* early verify if required sec level if reachable */
	if (!sec_level_reachable(conn)) {
		return -EINVAL;
    8e8c:	2416      	movs	r4, #22
    8e8e:	e000      	b.n	8e92 <bt_smp_send_security_req+0xc2>
	}

	req_buf = smp_create_pdu(conn, BT_SMP_CMD_SECURITY_REQUEST,
				 sizeof(*req));
	if (!req_buf) {
		return -ENOBUFS;
    8e90:	2437      	movs	r4, #55	; 0x37
    8e92:	4264      	negs	r4, r4
	bt_l2cap_send(conn, BT_L2CAP_CID_SMP, req_buf);

	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);

	return 0;
}
    8e94:	0020      	movs	r0, r4
    8e96:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    8e98:	200010a8 	.word	0x200010a8

00008e9c <bt_smp_sign_verify>:

	return 0;
}

int bt_smp_sign_verify(struct bt_conn *conn, struct net_buf *buf)
{
    8e9c:	b570      	push	{r4, r5, r6, lr}
    8e9e:	000c      	movs	r4, r1
    8ea0:	0005      	movs	r5, r0
	u8_t sig[12];
	u32_t cnt;
	int err;

	/* Store signature incl. count */
	memcpy(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig));
    8ea2:	8989      	ldrh	r1, [r1, #12]
    8ea4:	68a3      	ldr	r3, [r4, #8]

	return 0;
}

int bt_smp_sign_verify(struct bt_conn *conn, struct net_buf *buf)
{
    8ea6:	b088      	sub	sp, #32
	u8_t sig[12];
	u32_t cnt;
	int err;

	/* Store signature incl. count */
	memcpy(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig));
    8ea8:	390c      	subs	r1, #12
    8eaa:	1859      	adds	r1, r3, r1
    8eac:	220c      	movs	r2, #12
    8eae:	a805      	add	r0, sp, #20

	keys = bt_keys_find(BT_KEYS_REMOTE_CSRK, &conn->le.dst);
    8eb0:	3554      	adds	r5, #84	; 0x54
	u8_t sig[12];
	u32_t cnt;
	int err;

	/* Store signature incl. count */
	memcpy(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig));
    8eb2:	f7f7 ff42 	bl	d3a <memcpy>

	keys = bt_keys_find(BT_KEYS_REMOTE_CSRK, &conn->le.dst);
    8eb6:	0029      	movs	r1, r5
    8eb8:	2010      	movs	r0, #16
    8eba:	f000 f94d 	bl	9158 <bt_keys_find>
    8ebe:	1e06      	subs	r6, r0, #0
	if (!keys) {
    8ec0:	d10f      	bne.n	8ee2 <bt_smp_sign_verify+0x46>
		BT_ERR("Unable to find Remote CSRK for %s",
    8ec2:	0028      	movs	r0, r5
    8ec4:	f7f9 f9aa 	bl	221c <bt_addr_le_str>
    8ec8:	4b28      	ldr	r3, [pc, #160]	; (8f6c <bt_smp_sign_verify+0xd0>)
    8eca:	9001      	str	r0, [sp, #4]
    8ecc:	9302      	str	r3, [sp, #8]
    8ece:	4b28      	ldr	r3, [pc, #160]	; (8f70 <bt_smp_sign_verify+0xd4>)
    8ed0:	4a28      	ldr	r2, [pc, #160]	; (8f74 <bt_smp_sign_verify+0xd8>)
    8ed2:	9300      	str	r3, [sp, #0]
    8ed4:	4928      	ldr	r1, [pc, #160]	; (8f78 <bt_smp_sign_verify+0xdc>)
    8ed6:	4b29      	ldr	r3, [pc, #164]	; (8f7c <bt_smp_sign_verify+0xe0>)
    8ed8:	4829      	ldr	r0, [pc, #164]	; (8f80 <bt_smp_sign_verify+0xe4>)
    8eda:	f7f8 fd51 	bl	1980 <printk>
		       bt_addr_le_str(&conn->le.dst));
		return -ENOENT;
    8ede:	2002      	movs	r0, #2
    8ee0:	e022      	b.n	8f28 <bt_smp_sign_verify+0x8c>
	}

	/* Copy signing count */
	cnt = sys_cpu_to_le32(keys->remote_csrk.cnt);
    8ee2:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
	memcpy(net_buf_tail(buf) - sizeof(sig), &cnt, sizeof(cnt));
    8ee4:	89a0      	ldrh	r0, [r4, #12]
		       bt_addr_le_str(&conn->le.dst));
		return -ENOENT;
	}

	/* Copy signing count */
	cnt = sys_cpu_to_le32(keys->remote_csrk.cnt);
    8ee6:	9304      	str	r3, [sp, #16]
	memcpy(net_buf_tail(buf) - sizeof(sig), &cnt, sizeof(cnt));
    8ee8:	68a3      	ldr	r3, [r4, #8]
    8eea:	380c      	subs	r0, #12
    8eec:	2204      	movs	r2, #4
    8eee:	a904      	add	r1, sp, #16
    8ef0:	1818      	adds	r0, r3, r0
    8ef2:	f7f7 ff22 	bl	d3a <memcpy>

	BT_DBG("Sign data len %zu key %s count %u", buf->len - sizeof(sig),
	       bt_hex(keys->remote_csrk.val, 16), keys->remote_csrk.cnt);

	err = smp_sign_buf(keys->remote_csrk.val, buf->data,
    8ef6:	0030      	movs	r0, r6
    8ef8:	89a2      	ldrh	r2, [r4, #12]
    8efa:	68a1      	ldr	r1, [r4, #8]
    8efc:	3a0c      	subs	r2, #12
    8efe:	b292      	uxth	r2, r2
    8f00:	305c      	adds	r0, #92	; 0x5c
    8f02:	f7fe fb5f 	bl	75c4 <smp_sign_buf>
			   buf->len - sizeof(sig));
	if (err) {
    8f06:	2800      	cmp	r0, #0
    8f08:	d010      	beq.n	8f2c <bt_smp_sign_verify+0x90>
		BT_ERR("Unable to create signature for %s",
    8f0a:	0028      	movs	r0, r5
    8f0c:	f7f9 f986 	bl	221c <bt_addr_le_str>
    8f10:	4b16      	ldr	r3, [pc, #88]	; (8f6c <bt_smp_sign_verify+0xd0>)
    8f12:	9001      	str	r0, [sp, #4]
    8f14:	9302      	str	r3, [sp, #8]
    8f16:	4b16      	ldr	r3, [pc, #88]	; (8f70 <bt_smp_sign_verify+0xd4>)
    8f18:	4a16      	ldr	r2, [pc, #88]	; (8f74 <bt_smp_sign_verify+0xd8>)
    8f1a:	9300      	str	r3, [sp, #0]
    8f1c:	4916      	ldr	r1, [pc, #88]	; (8f78 <bt_smp_sign_verify+0xdc>)
    8f1e:	4b17      	ldr	r3, [pc, #92]	; (8f7c <bt_smp_sign_verify+0xe0>)
    8f20:	4818      	ldr	r0, [pc, #96]	; (8f84 <bt_smp_sign_verify+0xe8>)
    8f22:	f7f8 fd2d 	bl	1980 <printk>
		       bt_addr_le_str(&conn->le.dst));
		return -EIO;
    8f26:	2005      	movs	r0, #5
    8f28:	4240      	negs	r0, r0
    8f2a:	e01c      	b.n	8f66 <bt_smp_sign_verify+0xca>
	};

	if (memcmp(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig))) {
    8f2c:	89a1      	ldrh	r1, [r4, #12]
    8f2e:	68a3      	ldr	r3, [r4, #8]
    8f30:	390c      	subs	r1, #12
    8f32:	1859      	adds	r1, r3, r1
    8f34:	220c      	movs	r2, #12
    8f36:	a805      	add	r0, sp, #20
    8f38:	f7f7 feea 	bl	d10 <memcmp>
    8f3c:	2800      	cmp	r0, #0
    8f3e:	d00f      	beq.n	8f60 <bt_smp_sign_verify+0xc4>
		BT_ERR("Unable to verify signature for %s",
    8f40:	0028      	movs	r0, r5
    8f42:	f7f9 f96b 	bl	221c <bt_addr_le_str>
    8f46:	4b09      	ldr	r3, [pc, #36]	; (8f6c <bt_smp_sign_verify+0xd0>)
    8f48:	9001      	str	r0, [sp, #4]
    8f4a:	9302      	str	r3, [sp, #8]
    8f4c:	4b08      	ldr	r3, [pc, #32]	; (8f70 <bt_smp_sign_verify+0xd4>)
    8f4e:	4a09      	ldr	r2, [pc, #36]	; (8f74 <bt_smp_sign_verify+0xd8>)
    8f50:	9300      	str	r3, [sp, #0]
    8f52:	4909      	ldr	r1, [pc, #36]	; (8f78 <bt_smp_sign_verify+0xdc>)
    8f54:	4b09      	ldr	r3, [pc, #36]	; (8f7c <bt_smp_sign_verify+0xe0>)
    8f56:	480c      	ldr	r0, [pc, #48]	; (8f88 <bt_smp_sign_verify+0xec>)
    8f58:	f7f8 fd12 	bl	1980 <printk>
		       bt_addr_le_str(&conn->le.dst));
		return -EBADMSG;
    8f5c:	204d      	movs	r0, #77	; 0x4d
    8f5e:	e7e3      	b.n	8f28 <bt_smp_sign_verify+0x8c>
	};

	keys->remote_csrk.cnt++;
    8f60:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
    8f62:	3301      	adds	r3, #1
    8f64:	66f3      	str	r3, [r6, #108]	; 0x6c

	return 0;
}
    8f66:	b008      	add	sp, #32
    8f68:	bd70      	pop	{r4, r5, r6, pc}
    8f6a:	46c0      	nop			; (mov r8, r8)
    8f6c:	000154c4 	.word	0x000154c4
    8f70:	000154c9 	.word	0x000154c9
    8f74:	00015484 	.word	0x00015484
    8f78:	0001548b 	.word	0x0001548b
    8f7c:	00017eab 	.word	0x00017eab
    8f80:	000166ea 	.word	0x000166ea
    8f84:	0001671c 	.word	0x0001671c
    8f88:	0001674e 	.word	0x0001674e

00008f8c <bt_smp_update_keys>:
	return -EINVAL;
}
#endif /* !CONFIG_BLUETOOTH_SMP_SC_ONLY */

void bt_smp_update_keys(struct bt_conn *conn)
{
    8f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    8f8e:	b085      	sub	sp, #20
    8f90:	0004      	movs	r4, r0
	struct bt_smp *smp;

	smp = smp_chan_get(conn);
    8f92:	f7fe fde1 	bl	7b58 <smp_chan_get>
    8f96:	1e05      	subs	r5, r0, #0
	if (!smp) {
    8f98:	d067      	beq.n	906a <bt_smp_update_keys+0xde>
		return;
	}

	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    8f9a:	0006      	movs	r6, r0
    8f9c:	3694      	adds	r6, #148	; 0x94
    8f9e:	2103      	movs	r1, #3
    8fa0:	0030      	movs	r0, r6
    8fa2:	f7f9 fa44 	bl	242e <atomic_test_bit>
    8fa6:	2800      	cmp	r0, #0
    8fa8:	d05f      	beq.n	906a <bt_smp_update_keys+0xde>

	/*
	 * If link was successfully encrypted cleanup old keys as from now on
	 * only keys distributed in this pairing or LTK from LE SC will be used.
	 */
	if (conn->le.keys) {
    8faa:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
    8fac:	2800      	cmp	r0, #0
    8fae:	d001      	beq.n	8fb4 <bt_smp_update_keys+0x28>
		bt_keys_clear(conn->le.keys);
    8fb0:	f000 f93c 	bl	922c <bt_keys_clear>
	}

	conn->le.keys = bt_keys_get_addr(&conn->le.dst);
    8fb4:	0027      	movs	r7, r4
    8fb6:	3754      	adds	r7, #84	; 0x54
    8fb8:	0038      	movs	r0, r7
    8fba:	f000 f8ab 	bl	9114 <bt_keys_get_addr>
    8fbe:	67e0      	str	r0, [r4, #124]	; 0x7c
	if (!conn->le.keys) {
    8fc0:	2800      	cmp	r0, #0
    8fc2:	d10e      	bne.n	8fe2 <bt_smp_update_keys+0x56>
		BT_ERR("Unable to get keys for %s",
    8fc4:	0038      	movs	r0, r7
    8fc6:	f7f9 f929 	bl	221c <bt_addr_le_str>
    8fca:	4b29      	ldr	r3, [pc, #164]	; (9070 <bt_smp_update_keys+0xe4>)
    8fcc:	9001      	str	r0, [sp, #4]
    8fce:	9302      	str	r3, [sp, #8]
    8fd0:	4b28      	ldr	r3, [pc, #160]	; (9074 <bt_smp_update_keys+0xe8>)
    8fd2:	4a29      	ldr	r2, [pc, #164]	; (9078 <bt_smp_update_keys+0xec>)
    8fd4:	9300      	str	r3, [sp, #0]
    8fd6:	4929      	ldr	r1, [pc, #164]	; (907c <bt_smp_update_keys+0xf0>)
    8fd8:	4b29      	ldr	r3, [pc, #164]	; (9080 <bt_smp_update_keys+0xf4>)
    8fda:	482a      	ldr	r0, [pc, #168]	; (9084 <bt_smp_update_keys+0xf8>)
    8fdc:	f7f8 fcd0 	bl	1980 <printk>
		       bt_addr_le_str(&conn->le.dst));
		return;
    8fe0:	e043      	b.n	906a <bt_smp_update_keys+0xde>
	}

	/* mark keys as debug */
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
    8fe2:	210b      	movs	r1, #11
    8fe4:	0030      	movs	r0, r6
    8fe6:	f7f9 fa22 	bl	242e <atomic_test_bit>
    8fea:	2800      	cmp	r0, #0
    8fec:	d004      	beq.n	8ff8 <bt_smp_update_keys+0x6c>
		atomic_set_bit(conn->le.keys->flags, BT_KEYS_DEBUG);
    8fee:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
    8ff0:	2101      	movs	r1, #1
    8ff2:	3008      	adds	r0, #8
    8ff4:	f7fe faba 	bl	756c <atomic_set_bit>
	/*
	 * store key type deducted from pairing method used
	 * it is important to store it since type is used to determine
	 * security level upon encryption
	 */
	switch (smp->method) {
    8ff8:	002b      	movs	r3, r5
    8ffa:	3398      	adds	r3, #152	; 0x98
    8ffc:	781b      	ldrb	r3, [r3, #0]
    8ffe:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
    9000:	3b01      	subs	r3, #1
		atomic_set_bit(conn->le.keys->flags, BT_KEYS_AUTHENTICATED);
		break;
	case JUST_WORKS:
	default:
		/* unauthenticated key, clear it */
		atomic_clear_bit(conn->le.keys->flags, BT_KEYS_AUTHENTICATED);
    9002:	3008      	adds	r0, #8
	/*
	 * store key type deducted from pairing method used
	 * it is important to store it since type is used to determine
	 * security level upon encryption
	 */
	switch (smp->method) {
    9004:	2b02      	cmp	r3, #2
    9006:	d803      	bhi.n	9010 <bt_smp_update_keys+0x84>
	case PASSKEY_DISPLAY:
	case PASSKEY_INPUT:
	case PASSKEY_CONFIRM:
		atomic_set_bit(conn->le.keys->flags, BT_KEYS_AUTHENTICATED);
    9008:	2100      	movs	r1, #0
    900a:	f7fe faaf 	bl	756c <atomic_set_bit>
		break;
    900e:	e003      	b.n	9018 <bt_smp_update_keys+0x8c>
    9010:	2102      	movs	r1, #2
    9012:	4249      	negs	r1, r1
    9014:	f00a fdb2 	bl	13b7c <atomic_and>
	/*
	 * The smaller value of the initiating and responding devices maximum
	 * encryption key length parameters shall be used as the encryption key
	 * size.
	 */
	return min(req->max_key_size, rsp->max_key_size);
    9018:	002b      	movs	r3, r5
    901a:	339a      	adds	r3, #154	; 0x9a
		/* unauthenticated key, clear it */
		atomic_clear_bit(conn->le.keys->flags, BT_KEYS_AUTHENTICATED);
		break;
	}

	conn->le.keys->enc_size = get_encryption_key_size(smp);
    901c:	78da      	ldrb	r2, [r3, #3]
    901e:	7a99      	ldrb	r1, [r3, #10]
    9020:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
    9022:	1c0b      	adds	r3, r1, #0
    9024:	4291      	cmp	r1, r2
    9026:	d900      	bls.n	902a <bt_smp_update_keys+0x9e>
    9028:	1c13      	adds	r3, r2, #0
    902a:	71c3      	strb	r3, [r0, #7]
	/*
	 * Store LTK if LE SC is used, this is safe since LE SC is mutually
	 * exclusive with legacy pairing. Other keys are added on keys
	 * distribution.
	 */
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC) &&
    902c:	2105      	movs	r1, #5
    902e:	0030      	movs	r0, r6
    9030:	f7f9 f9fd 	bl	242e <atomic_test_bit>
    9034:	2800      	cmp	r0, #0
    9036:	d018      	beq.n	906a <bt_smp_update_keys+0xde>
	    atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    9038:	210a      	movs	r1, #10
    903a:	0030      	movs	r0, r6
    903c:	f7f9 f9f7 	bl	242e <atomic_test_bit>
	/*
	 * Store LTK if LE SC is used, this is safe since LE SC is mutually
	 * exclusive with legacy pairing. Other keys are added on keys
	 * distribution.
	 */
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC) &&
    9040:	2800      	cmp	r0, #0
    9042:	d012      	beq.n	906a <bt_smp_update_keys+0xde>
	    atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
		bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
    9044:	2120      	movs	r1, #32
    9046:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
    9048:	f000 f8ec 	bl	9224 <bt_keys_add_type>
		memcpy(conn->le.keys->ltk.val, smp->tk,
    904c:	0029      	movs	r1, r5
    904e:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
    9050:	31d7      	adds	r1, #215	; 0xd7
    9052:	2210      	movs	r2, #16
    9054:	301a      	adds	r0, #26
    9056:	f7f7 fe70 	bl	d3a <memcpy>
		       sizeof(conn->le.keys->ltk.val));
		conn->le.keys->ltk.rand = 0;
    905a:	2000      	movs	r0, #0
    905c:	2100      	movs	r1, #0
		conn->le.keys->ltk.ediv = 0;
    905e:	2200      	movs	r2, #0
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC) &&
	    atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
		bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
		memcpy(conn->le.keys->ltk.val, smp->tk,
		       sizeof(conn->le.keys->ltk.val));
		conn->le.keys->ltk.rand = 0;
    9060:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    9062:	6118      	str	r0, [r3, #16]
    9064:	6159      	str	r1, [r3, #20]
		conn->le.keys->ltk.ediv = 0;
    9066:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    9068:	831a      	strh	r2, [r3, #24]
	}
}
    906a:	b005      	add	sp, #20
    906c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    906e:	46c0      	nop			; (mov r8, r8)
    9070:	000154c4 	.word	0x000154c4
    9074:	000154c9 	.word	0x000154c9
    9078:	00015484 	.word	0x00015484
    907c:	0001548b 	.word	0x0001548b
    9080:	00017f35 	.word	0x00017f35
    9084:	000163ad 	.word	0x000163ad

00009088 <bt_smp_get_tk>:

bool bt_smp_get_tk(struct bt_conn *conn, u8_t *tk)
{
    9088:	b570      	push	{r4, r5, r6, lr}
    908a:	000e      	movs	r6, r1
	struct bt_smp *smp;
	u8_t enc_size;

	smp = smp_chan_get(conn);
    908c:	f7fe fd64 	bl	7b58 <smp_chan_get>
    9090:	1e05      	subs	r5, r0, #0
	if (!smp) {
    9092:	d101      	bne.n	9098 <bt_smp_get_tk+0x10>
		return false;
    9094:	2500      	movs	r5, #0
    9096:	e01e      	b.n	90d6 <bt_smp_get_tk+0x4e>
	}

	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    9098:	2103      	movs	r1, #3
    909a:	3094      	adds	r0, #148	; 0x94
    909c:	f7f9 f9c7 	bl	242e <atomic_test_bit>
    90a0:	2800      	cmp	r0, #0
    90a2:	d0f7      	beq.n	9094 <bt_smp_get_tk+0xc>
	/*
	 * The smaller value of the initiating and responding devices maximum
	 * encryption key length parameters shall be used as the encryption key
	 * size.
	 */
	return min(req->max_key_size, rsp->max_key_size);
    90a4:	002b      	movs	r3, r5
    90a6:	339a      	adds	r3, #154	; 0x9a
    90a8:	78da      	ldrb	r2, [r3, #3]
    90aa:	3307      	adds	r3, #7
    90ac:	78db      	ldrb	r3, [r3, #3]
    90ae:	1c1c      	adds	r4, r3, #0
    90b0:	4293      	cmp	r3, r2
    90b2:	d900      	bls.n	90b6 <bt_smp_get_tk+0x2e>
    90b4:	1c14      	adds	r4, r2, #0

	/*
	 * We keep both legacy STK and LE SC LTK in TK.
	 * Also use only enc_size bytes of key for encryption.
	 */
	memcpy(tk, smp->tk, enc_size);
    90b6:	0029      	movs	r1, r5
	/*
	 * The smaller value of the initiating and responding devices maximum
	 * encryption key length parameters shall be used as the encryption key
	 * size.
	 */
	return min(req->max_key_size, rsp->max_key_size);
    90b8:	b2e4      	uxtb	r4, r4

	/*
	 * We keep both legacy STK and LE SC LTK in TK.
	 * Also use only enc_size bytes of key for encryption.
	 */
	memcpy(tk, smp->tk, enc_size);
    90ba:	31d7      	adds	r1, #215	; 0xd7
    90bc:	0022      	movs	r2, r4
    90be:	0030      	movs	r0, r6
    90c0:	f7f7 fe3b 	bl	d3a <memcpy>
	if (enc_size < sizeof(smp->tk)) {
		memset(tk + enc_size, 0, sizeof(smp->tk) - enc_size);
	}

	return true;
    90c4:	2501      	movs	r5, #1
	/*
	 * We keep both legacy STK and LE SC LTK in TK.
	 * Also use only enc_size bytes of key for encryption.
	 */
	memcpy(tk, smp->tk, enc_size);
	if (enc_size < sizeof(smp->tk)) {
    90c6:	2c0f      	cmp	r4, #15
    90c8:	d805      	bhi.n	90d6 <bt_smp_get_tk+0x4e>
		memset(tk + enc_size, 0, sizeof(smp->tk) - enc_size);
    90ca:	2210      	movs	r2, #16
    90cc:	1930      	adds	r0, r6, r4
    90ce:	1b12      	subs	r2, r2, r4
    90d0:	2100      	movs	r1, #0
    90d2:	f7f7 fe5c 	bl	d8e <memset>
	}

	return true;
}
    90d6:	0028      	movs	r0, r5
    90d8:	bd70      	pop	{r4, r5, r6, pc}
	...

000090dc <bt_smp_init>:
	return (bt_dev.supported_commands[34] & 0x02) &&
	       (bt_dev.supported_commands[34] & 0x04);
}

int bt_smp_init(void)
{
    90dc:	b510      	push	{r4, lr}
	/*
	 * If controller based ECC is to be used it must support
	 * "LE Read Local P-256 Public Key" and "LE Generate DH Key" commands.
	 * Otherwise LE SC are not supported.
	 */
	return (bt_dev.supported_commands[34] & 0x02) &&
    90de:	4b09      	ldr	r3, [pc, #36]	; (9104 <bt_smp_init+0x28>)
	if (IS_ENABLED(CONFIG_BLUETOOTH_SMP_SC_ONLY) && !sc_supported) {
		BT_ERR("SC Only Mode selected but LE SC not supported");
		return -ENOENT;
	}

	bt_l2cap_le_fixed_chan_register(&chan);
    90e0:	4809      	ldr	r0, [pc, #36]	; (9108 <bt_smp_init+0x2c>)
	/*
	 * If controller based ECC is to be used it must support
	 * "LE Read Local P-256 Public Key" and "LE Generate DH Key" commands.
	 * Otherwise LE SC are not supported.
	 */
	return (bt_dev.supported_commands[34] & 0x02) &&
    90e2:	3340      	adds	r3, #64	; 0x40
	};
	static struct bt_pub_key_cb pub_key_cb = {
		.func           = bt_smp_pkey_ready,
	};

	sc_supported = le_sc_supported();
    90e4:	781a      	ldrb	r2, [r3, #0]
    90e6:	2306      	movs	r3, #6
    90e8:	4013      	ands	r3, r2
    90ea:	3b06      	subs	r3, #6
    90ec:	425a      	negs	r2, r3
    90ee:	4153      	adcs	r3, r2
    90f0:	4a06      	ldr	r2, [pc, #24]	; (910c <bt_smp_init+0x30>)
    90f2:	7013      	strb	r3, [r2, #0]
	if (IS_ENABLED(CONFIG_BLUETOOTH_SMP_SC_ONLY) && !sc_supported) {
		BT_ERR("SC Only Mode selected but LE SC not supported");
		return -ENOENT;
	}

	bt_l2cap_le_fixed_chan_register(&chan);
    90f4:	f7fc f846 	bl	5184 <bt_l2cap_le_fixed_chan_register>
	}
#endif

	BT_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	bt_pub_key_gen(&pub_key_cb);
    90f8:	4805      	ldr	r0, [pc, #20]	; (9110 <bt_smp_init+0x34>)
    90fa:	f7fb f9b7 	bl	446c <bt_pub_key_gen>

	return smp_self_test();
}
    90fe:	2000      	movs	r0, #0
    9100:	bd10      	pop	{r4, pc}
    9102:	46c0      	nop			; (mov r8, r8)
    9104:	200004d0 	.word	0x200004d0
    9108:	200007b4 	.word	0x200007b4
    910c:	200010a8 	.word	0x200010a8
    9110:	200007ac 	.word	0x200007ac

00009114 <bt_keys_get_addr>:
#include "keys.h"

static struct bt_keys key_pool[CONFIG_BLUETOOTH_MAX_PAIRED];

struct bt_keys *bt_keys_get_addr(const bt_addr_le_t *addr)
{
    9114:	b537      	push	{r0, r1, r2, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
}

static inline int bt_addr_le_cmp(const bt_addr_le_t *a, const bt_addr_le_t *b)
{
	return memcmp(a, b, sizeof(*a));
    9116:	4c0f      	ldr	r4, [pc, #60]	; (9154 <bt_keys_get_addr+0x40>)
    9118:	0001      	movs	r1, r0
    911a:	0005      	movs	r5, r0
    911c:	2207      	movs	r2, #7
    911e:	0020      	movs	r0, r4
    9120:	f7f7 fdf6 	bl	d10 <memcmp>
	int i;

	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		keys = &key_pool[i];
    9124:	0023      	movs	r3, r4

		if (!bt_addr_le_cmp(&keys->addr, addr)) {
    9126:	2800      	cmp	r0, #0
    9128:	d012      	beq.n	9150 <bt_keys_get_addr+0x3c>
			return keys;
		}

		if (!bt_addr_le_cmp(&keys->addr, BT_ADDR_LE_ANY)) {
    912a:	2207      	movs	r2, #7
    912c:	2100      	movs	r1, #0
    912e:	4668      	mov	r0, sp
    9130:	f7f7 fe2d 	bl	d8e <memset>
    9134:	2207      	movs	r2, #7
    9136:	4669      	mov	r1, sp
    9138:	0020      	movs	r0, r4
    913a:	f7f7 fde9 	bl	d10 <memcmp>
		}
	}

	BT_DBG("unable to create keys for %s", bt_addr_le_str(addr));

	return NULL;
    913e:	2300      	movs	r3, #0

		if (!bt_addr_le_cmp(&keys->addr, addr)) {
			return keys;
		}

		if (!bt_addr_le_cmp(&keys->addr, BT_ADDR_LE_ANY)) {
    9140:	4298      	cmp	r0, r3
    9142:	d105      	bne.n	9150 <bt_keys_get_addr+0x3c>
	memcpy(dst, src, sizeof(*dst));
}

static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    9144:	2207      	movs	r2, #7
    9146:	0029      	movs	r1, r5
    9148:	0020      	movs	r0, r4
    914a:	f7f7 fdf6 	bl	d3a <memcpy>
	int i;

	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		keys = &key_pool[i];
    914e:	0023      	movs	r3, r4
	}

	BT_DBG("unable to create keys for %s", bt_addr_le_str(addr));

	return NULL;
}
    9150:	0018      	movs	r0, r3
    9152:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    9154:	20001288 	.word	0x20001288

00009158 <bt_keys_find>:
struct bt_keys *bt_keys_find(int type, const bt_addr_le_t *addr)
{
    9158:	b510      	push	{r4, lr}
	int i;

	BT_DBG("type %d %s", type, bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type) &&
    915a:	4c07      	ldr	r4, [pc, #28]	; (9178 <bt_keys_find+0x20>)
    915c:	89a3      	ldrh	r3, [r4, #12]
    915e:	4218      	tst	r0, r3
    9160:	d101      	bne.n	9166 <bt_keys_find+0xe>
		    !bt_addr_le_cmp(&key_pool[i].addr, addr)) {
			return &key_pool[i];
		}
	}

	return NULL;
    9162:	2000      	movs	r0, #0
    9164:	e006      	b.n	9174 <bt_keys_find+0x1c>
	return memcmp(a, b, sizeof(*a));
}

static inline int bt_addr_le_cmp(const bt_addr_le_t *a, const bt_addr_le_t *b)
{
	return memcmp(a, b, sizeof(*a));
    9166:	2207      	movs	r2, #7
    9168:	0020      	movs	r0, r4
    916a:	f7f7 fdd1 	bl	d10 <memcmp>
	int i;

	BT_DBG("type %d %s", type, bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type) &&
    916e:	2800      	cmp	r0, #0
    9170:	d1f7      	bne.n	9162 <bt_keys_find+0xa>
		    !bt_addr_le_cmp(&key_pool[i].addr, addr)) {
			return &key_pool[i];
    9172:	0020      	movs	r0, r4
		}
	}

	return NULL;
}
    9174:	bd10      	pop	{r4, pc}
    9176:	46c0      	nop			; (mov r8, r8)
    9178:	20001288 	.word	0x20001288

0000917c <bt_keys_get_type>:

struct bt_keys *bt_keys_get_type(int type, const bt_addr_le_t *addr)
{
    917c:	b570      	push	{r4, r5, r6, lr}
    917e:	0004      	movs	r4, r0
    9180:	000e      	movs	r6, r1
	struct bt_keys *keys;

	BT_DBG("type %d %s", type, bt_addr_le_str(addr));

	keys = bt_keys_find(type, addr);
    9182:	f7ff ffe9 	bl	9158 <bt_keys_find>
    9186:	1e05      	subs	r5, r0, #0
	if (keys) {
    9188:	d108      	bne.n	919c <bt_keys_get_type+0x20>
		return keys;
	}

	keys = bt_keys_get_addr(addr);
    918a:	0030      	movs	r0, r6
    918c:	f7ff ffc2 	bl	9114 <bt_keys_get_addr>
	if (!keys) {
    9190:	2800      	cmp	r0, #0
    9192:	d003      	beq.n	919c <bt_keys_get_type+0x20>
		return NULL;
	}

	bt_keys_add_type(keys, type);

	return keys;
    9194:	0005      	movs	r5, r0
	return NULL;
}

void bt_keys_add_type(struct bt_keys *keys, int type)
{
	keys->keys |= type;
    9196:	8983      	ldrh	r3, [r0, #12]
    9198:	431c      	orrs	r4, r3
    919a:	8184      	strh	r4, [r0, #12]
	}

	bt_keys_add_type(keys, type);

	return keys;
}
    919c:	0028      	movs	r0, r5
    919e:	bd70      	pop	{r4, r5, r6, pc}

000091a0 <bt_keys_find_irk>:

struct bt_keys *bt_keys_find_irk(const bt_addr_le_t *addr)
{
    91a0:	b570      	push	{r4, r5, r6, lr}
int bt_addr_le_create_nrpa(bt_addr_le_t *addr);
int bt_addr_le_create_static(bt_addr_le_t *addr);

static inline bool bt_addr_le_is_rpa(const bt_addr_le_t *addr)
{
	if (addr->type != BT_ADDR_LE_RANDOM) {
    91a2:	7803      	ldrb	r3, [r0, #0]
    91a4:	0005      	movs	r5, r0
    91a6:	2b01      	cmp	r3, #1
    91a8:	d001      	beq.n	91ae <bt_keys_find_irk+0xe>
	int i;

	BT_DBG("%s", bt_addr_le_str(addr));

	if (!bt_addr_le_is_rpa(addr)) {
		return NULL;
    91aa:	2400      	movs	r4, #0
    91ac:	e025      	b.n	91fa <bt_keys_find_irk+0x5a>
{
	int i;

	BT_DBG("%s", bt_addr_le_str(addr));

	if (!bt_addr_le_is_rpa(addr)) {
    91ae:	223f      	movs	r2, #63	; 0x3f
    91b0:	7983      	ldrb	r3, [r0, #6]
    91b2:	4393      	bics	r3, r2
    91b4:	2b40      	cmp	r3, #64	; 0x40
    91b6:	d1f8      	bne.n	91aa <bt_keys_find_irk+0xa>
		return NULL;
	}

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
    91b8:	4c11      	ldr	r4, [pc, #68]	; (9200 <bt_keys_find_irk+0x60>)
    91ba:	89a3      	ldrh	r3, [r4, #12]
    91bc:	0026      	movs	r6, r4
    91be:	079b      	lsls	r3, r3, #30
    91c0:	d403      	bmi.n	91ca <bt_keys_find_irk+0x2a>
			return &key_pool[i];
		}
	}

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
    91c2:	89b3      	ldrh	r3, [r6, #12]
    91c4:	079b      	lsls	r3, r3, #30
    91c6:	d5f0      	bpl.n	91aa <bt_keys_find_irk+0xa>
    91c8:	e008      	b.n	91dc <bt_keys_find_irk+0x3c>
#define BT_ADDR_LE_NONE (&(bt_addr_le_t) { 0, \
			 { { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff } } })

static inline int bt_addr_cmp(const bt_addr_t *a, const bt_addr_t *b)
{
	return memcmp(a, b, sizeof(*a));
    91ca:	0021      	movs	r1, r4
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
			continue;
		}

		if (!bt_addr_cmp(&addr->a, &key_pool[i].irk.rpa)) {
    91cc:	3001      	adds	r0, #1
    91ce:	3140      	adds	r1, #64	; 0x40
    91d0:	2206      	movs	r2, #6
    91d2:	f7f7 fd9d 	bl	d10 <memcmp>
    91d6:	2800      	cmp	r0, #0
    91d8:	d1f3      	bne.n	91c2 <bt_keys_find_irk+0x22>
    91da:	e00e      	b.n	91fa <bt_keys_find_irk+0x5a>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
			continue;
		}

		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
    91dc:	0030      	movs	r0, r6
    91de:	3501      	adds	r5, #1
    91e0:	3030      	adds	r0, #48	; 0x30
    91e2:	0029      	movs	r1, r5
    91e4:	f7f9 f877 	bl	22d6 <bt_rpa_irk_matches>
    91e8:	2800      	cmp	r0, #0
    91ea:	d0de      	beq.n	91aa <bt_keys_find_irk+0xa>
	return memcmp(a, b, sizeof(*a));
}

static inline void bt_addr_copy(bt_addr_t *dst, const bt_addr_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    91ec:	0030      	movs	r0, r6
    91ee:	2206      	movs	r2, #6
    91f0:	3040      	adds	r0, #64	; 0x40
    91f2:	0029      	movs	r1, r5
    91f4:	f7f7 fda1 	bl	d3a <memcpy>
			       bt_addr_str(&key_pool[i].irk.rpa),
			       bt_addr_le_str(&key_pool[i].addr));

			bt_addr_copy(&key_pool[i].irk.rpa, &addr->a);

			return &key_pool[i];
    91f8:	0034      	movs	r4, r6
	}

	BT_DBG("No IRK for %s", bt_addr_le_str(addr));

	return NULL;
}
    91fa:	0020      	movs	r0, r4
    91fc:	bd70      	pop	{r4, r5, r6, pc}
    91fe:	46c0      	nop			; (mov r8, r8)
    9200:	20001288 	.word	0x20001288

00009204 <bt_keys_find_addr>:

struct bt_keys *bt_keys_find_addr(const bt_addr_le_t *addr)
{
    9204:	b510      	push	{r4, lr}
	return memcmp(a, b, sizeof(*a));
}

static inline int bt_addr_le_cmp(const bt_addr_le_t *a, const bt_addr_le_t *b)
{
	return memcmp(a, b, sizeof(*a));
    9206:	4c06      	ldr	r4, [pc, #24]	; (9220 <bt_keys_find_addr+0x1c>)
    9208:	0001      	movs	r1, r0
    920a:	2207      	movs	r2, #7
    920c:	0020      	movs	r0, r4
    920e:	f7f7 fd7f 	bl	d10 <memcmp>
		if (!bt_addr_le_cmp(&key_pool[i].addr, addr)) {
			return &key_pool[i];
		}
	}

	return NULL;
    9212:	4242      	negs	r2, r0
    9214:	4150      	adcs	r0, r2

	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if (!bt_addr_le_cmp(&key_pool[i].addr, addr)) {
			return &key_pool[i];
    9216:	0023      	movs	r3, r4
		}
	}

	return NULL;
    9218:	4240      	negs	r0, r0
    921a:	4003      	ands	r3, r0
}
    921c:	0018      	movs	r0, r3
    921e:	bd10      	pop	{r4, pc}
    9220:	20001288 	.word	0x20001288

00009224 <bt_keys_add_type>:

void bt_keys_add_type(struct bt_keys *keys, int type)
{
	keys->keys |= type;
    9224:	8983      	ldrh	r3, [r0, #12]
    9226:	4319      	orrs	r1, r3
    9228:	8181      	strh	r1, [r0, #12]
}
    922a:	4770      	bx	lr

0000922c <bt_keys_clear>:

void bt_keys_clear(struct bt_keys *keys)
{
    922c:	b510      	push	{r4, lr}
	BT_DBG("keys for %s", bt_addr_le_str(&keys->addr));

	memset(keys, 0, sizeof(*keys));
    922e:	2290      	movs	r2, #144	; 0x90
    9230:	2100      	movs	r1, #0
    9232:	f7f7 fdac 	bl	d8e <memset>
}
    9236:	bd10      	pop	{r4, pc}

00009238 <evt_create>:
static u64_t event_mask = DEFAULT_EVENT_MASK;
static u64_t event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
static u64_t le_event_mask = DEFAULT_LE_EVENT_MASK;

static void evt_create(struct net_buf *buf, u8_t evt, u8_t len)
{
    9238:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_hdr *hdr;

	hdr = net_buf_add(buf, sizeof(*hdr));
    923a:	3008      	adds	r0, #8
static u64_t event_mask = DEFAULT_EVENT_MASK;
static u64_t event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
static u64_t le_event_mask = DEFAULT_LE_EVENT_MASK;

static void evt_create(struct net_buf *buf, u8_t evt, u8_t len)
{
    923c:	000d      	movs	r5, r1
	struct bt_hci_evt_hdr *hdr;

	hdr = net_buf_add(buf, sizeof(*hdr));
    923e:	2102      	movs	r1, #2
static u64_t event_mask = DEFAULT_EVENT_MASK;
static u64_t event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
static u64_t le_event_mask = DEFAULT_LE_EVENT_MASK;

static void evt_create(struct net_buf *buf, u8_t evt, u8_t len)
{
    9240:	0014      	movs	r4, r2
	struct bt_hci_evt_hdr *hdr;

	hdr = net_buf_add(buf, sizeof(*hdr));
    9242:	f00a f9bf 	bl	135c4 <net_buf_simple_add>
	hdr->evt = evt;
    9246:	7005      	strb	r5, [r0, #0]
	hdr->len = len;
    9248:	7044      	strb	r4, [r0, #1]
}
    924a:	bd70      	pop	{r4, r5, r6, pc}

0000924c <cmd_status>:
	return net_buf_add(*buf, plen);
}

#if defined(CONFIG_BLUETOOTH_CONN)
static struct net_buf *cmd_status(u8_t status)
{
    924c:	b570      	push	{r4, r5, r6, lr}
    924e:	0005      	movs	r5, r0
	struct bt_hci_evt_cmd_status *cs;
	struct net_buf *buf;

	buf = bt_buf_get_cmd_complete(K_FOREVER);
    9250:	2001      	movs	r0, #1
    9252:	4240      	negs	r0, r0
    9254:	f7fb f8e8 	bl	4428 <bt_buf_get_cmd_complete>
    9258:	0004      	movs	r4, r0
	evt_create(buf, BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
    925a:	2204      	movs	r2, #4
    925c:	210f      	movs	r1, #15
    925e:	f7ff ffeb 	bl	9238 <evt_create>

	cs = net_buf_add(buf, sizeof(*cs));
    9262:	0020      	movs	r0, r4
    9264:	2104      	movs	r1, #4
    9266:	3008      	adds	r0, #8
    9268:	f00a f9ac 	bl	135c4 <net_buf_simple_add>
	cs->status = status;
	cs->ncmd = 1;
    926c:	2301      	movs	r3, #1
    926e:	7043      	strb	r3, [r0, #1]
	cs->opcode = sys_cpu_to_le16(_opcode);
    9270:	4b03      	ldr	r3, [pc, #12]	; (9280 <cmd_status+0x34>)

	buf = bt_buf_get_cmd_complete(K_FOREVER);
	evt_create(buf, BT_HCI_EVT_CMD_STATUS, sizeof(*cs));

	cs = net_buf_add(buf, sizeof(*cs));
	cs->status = status;
    9272:	7005      	strb	r5, [r0, #0]
	cs->ncmd = 1;
	cs->opcode = sys_cpu_to_le16(_opcode);
    9274:	781a      	ldrb	r2, [r3, #0]
    9276:	785b      	ldrb	r3, [r3, #1]
    9278:	7082      	strb	r2, [r0, #2]
    927a:	70c3      	strb	r3, [r0, #3]

	return buf;
}
    927c:	0020      	movs	r0, r4
    927e:	bd70      	pop	{r4, r5, r6, pc}
    9280:	20001320 	.word	0x20001320

00009284 <cmd_complete>:
	hdr->evt = evt;
	hdr->len = len;
}

static void *cmd_complete(struct net_buf **buf, u8_t plen)
{
    9284:	b570      	push	{r4, r5, r6, lr}
    9286:	0004      	movs	r4, r0
	struct bt_hci_evt_cmd_complete *cc;

	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    9288:	2001      	movs	r0, #1
	hdr->evt = evt;
	hdr->len = len;
}

static void *cmd_complete(struct net_buf **buf, u8_t plen)
{
    928a:	000d      	movs	r5, r1
	struct bt_hci_evt_cmd_complete *cc;

	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    928c:	4240      	negs	r0, r0
    928e:	f7fb f8cb 	bl	4428 <bt_buf_get_cmd_complete>

	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    9292:	1cea      	adds	r2, r5, #3

static void *cmd_complete(struct net_buf **buf, u8_t plen)
{
	struct bt_hci_evt_cmd_complete *cc;

	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    9294:	6020      	str	r0, [r4, #0]

	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    9296:	b2d2      	uxtb	r2, r2
    9298:	210e      	movs	r1, #14
    929a:	f7ff ffcd 	bl	9238 <evt_create>

	cc = net_buf_add(*buf, sizeof(*cc));
    929e:	6820      	ldr	r0, [r4, #0]
    92a0:	2103      	movs	r1, #3
    92a2:	3008      	adds	r0, #8
    92a4:	f00a f98e 	bl	135c4 <net_buf_simple_add>
	cc->ncmd = 1;
    92a8:	2301      	movs	r3, #1
    92aa:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(_opcode);
    92ac:	4b05      	ldr	r3, [pc, #20]	; (92c4 <cmd_complete+0x40>)

	return net_buf_add(*buf, plen);
    92ae:	0029      	movs	r1, r5

	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);

	cc = net_buf_add(*buf, sizeof(*cc));
	cc->ncmd = 1;
	cc->opcode = sys_cpu_to_le16(_opcode);
    92b0:	781a      	ldrb	r2, [r3, #0]
    92b2:	785b      	ldrb	r3, [r3, #1]
    92b4:	7042      	strb	r2, [r0, #1]
    92b6:	7083      	strb	r3, [r0, #2]

	return net_buf_add(*buf, plen);
    92b8:	6820      	ldr	r0, [r4, #0]
    92ba:	3008      	adds	r0, #8
    92bc:	f00a f982 	bl	135c4 <net_buf_simple_add>
}
    92c0:	bd70      	pop	{r4, r5, r6, pc}
    92c2:	46c0      	nop			; (mov r8, r8)
    92c4:	20001320 	.word	0x20001320

000092c8 <meta_evt>:
	return buf;
}
#endif

static void *meta_evt(struct net_buf *buf, u8_t subevt, u8_t melen)
{
    92c8:	b570      	push	{r4, r5, r6, lr}
    92ca:	0004      	movs	r4, r0
    92cc:	0015      	movs	r5, r2
	struct bt_hci_evt_le_meta_event *me;

	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    92ce:	3201      	adds	r2, #1
	return buf;
}
#endif

static void *meta_evt(struct net_buf *buf, u8_t subevt, u8_t melen)
{
    92d0:	000e      	movs	r6, r1
	struct bt_hci_evt_le_meta_event *me;

	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    92d2:	b2d2      	uxtb	r2, r2
	me = net_buf_add(buf, sizeof(*me));
    92d4:	3408      	adds	r4, #8

static void *meta_evt(struct net_buf *buf, u8_t subevt, u8_t melen)
{
	struct bt_hci_evt_le_meta_event *me;

	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    92d6:	213e      	movs	r1, #62	; 0x3e
    92d8:	f7ff ffae 	bl	9238 <evt_create>
	me = net_buf_add(buf, sizeof(*me));
    92dc:	2101      	movs	r1, #1
    92de:	0020      	movs	r0, r4
    92e0:	f00a f970 	bl	135c4 <net_buf_simple_add>
	me->subevent = subevt;

	return net_buf_add(buf, melen);
    92e4:	0029      	movs	r1, r5
{
	struct bt_hci_evt_le_meta_event *me;

	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
	me = net_buf_add(buf, sizeof(*me));
	me->subevent = subevt;
    92e6:	7006      	strb	r6, [r0, #0]

	return net_buf_add(buf, melen);
    92e8:	0020      	movs	r0, r4
    92ea:	f00a f96b 	bl	135c4 <net_buf_simple_add>
}
    92ee:	bd70      	pop	{r4, r5, r6, pc}

000092f0 <encrypt_change>:
static void encrypt_change(u8_t err, u16_t handle,
			   struct net_buf *buf)
{
	struct bt_hci_evt_encrypt_change *ep;

	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    92f0:	4b0c      	ldr	r3, [pc, #48]	; (9324 <encrypt_change+0x34>)
	       sizeof(u16_t));
}

static void encrypt_change(u8_t err, u16_t handle,
			   struct net_buf *buf)
{
    92f2:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_encrypt_change *ep;

	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    92f4:	681b      	ldr	r3, [r3, #0]
	       sizeof(u16_t));
}

static void encrypt_change(u8_t err, u16_t handle,
			   struct net_buf *buf)
{
    92f6:	0004      	movs	r4, r0
    92f8:	000d      	movs	r5, r1
    92fa:	0016      	movs	r6, r2
	struct bt_hci_evt_encrypt_change *ep;

	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    92fc:	061b      	lsls	r3, r3, #24
    92fe:	d510      	bpl.n	9322 <encrypt_change+0x32>
		return;
	}

	evt_create(buf, BT_HCI_EVT_ENCRYPT_CHANGE, sizeof(*ep));
    9300:	2204      	movs	r2, #4
    9302:	2108      	movs	r1, #8
    9304:	0030      	movs	r0, r6
    9306:	f7ff ff97 	bl	9238 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    930a:	0030      	movs	r0, r6
    930c:	2104      	movs	r1, #4
    930e:	3008      	adds	r0, #8
    9310:	f00a f958 	bl	135c4 <net_buf_simple_add>

	ep->status = err;
    9314:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
	ep->encrypt = !err ? 1 : 0;
    9316:	4263      	negs	r3, r4
    9318:	4163      	adcs	r3, r4

	evt_create(buf, BT_HCI_EVT_ENCRYPT_CHANGE, sizeof(*ep));
	ep = net_buf_add(buf, sizeof(*ep));

	ep->status = err;
	ep->handle = sys_cpu_to_le16(handle);
    931a:	7045      	strb	r5, [r0, #1]
    931c:	0a2d      	lsrs	r5, r5, #8
    931e:	7085      	strb	r5, [r0, #2]
	ep->encrypt = !err ? 1 : 0;
    9320:	70c3      	strb	r3, [r0, #3]
}
    9322:	bd70      	pop	{r4, r5, r6, pc}
    9324:	200007c0 	.word	0x200007c0

00009328 <le_remote_feat_complete>:
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_ENC */

static void le_remote_feat_complete(u8_t status, struct pdu_data *pdu_data,
				    u16_t handle, struct net_buf *buf)
{
    9328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    932a:	0014      	movs	r4, r2
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    932c:	4a10      	ldr	r2, [pc, #64]	; (9370 <le_remote_feat_complete+0x48>)
}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_ENC */

static void le_remote_feat_complete(u8_t status, struct pdu_data *pdu_data,
				    u16_t handle, struct net_buf *buf)
{
    932e:	0007      	movs	r7, r0
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9330:	6852      	ldr	r2, [r2, #4]
}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_ENC */

static void le_remote_feat_complete(u8_t status, struct pdu_data *pdu_data,
				    u16_t handle, struct net_buf *buf)
{
    9332:	000e      	movs	r6, r1
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9334:	0092      	lsls	r2, r2, #2
    9336:	d519      	bpl.n	936c <le_remote_feat_complete+0x44>
    9338:	2508      	movs	r5, #8
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
    933a:	4a0e      	ldr	r2, [pc, #56]	; (9374 <le_remote_feat_complete+0x4c>)
static void le_remote_feat_complete(u8_t status, struct pdu_data *pdu_data,
				    u16_t handle, struct net_buf *buf)
{
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    933c:	6812      	ldr	r2, [r2, #0]
    933e:	422a      	tst	r2, r5
    9340:	d014      	beq.n	936c <le_remote_feat_complete+0x44>
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
		return;
	}

	sep = meta_evt(buf, BT_HCI_EV_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));
    9342:	220b      	movs	r2, #11
    9344:	2104      	movs	r1, #4
    9346:	0018      	movs	r0, r3
    9348:	f7ff ffbe 	bl	92c8 <meta_evt>

	sep->status = status;
	sep->handle = sys_cpu_to_le16(handle);
    934c:	7044      	strb	r4, [r0, #1]
    934e:	40ec      	lsrs	r4, r5
		return;
	}

	sep = meta_evt(buf, BT_HCI_EV_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));

	sep->status = status;
    9350:	7007      	strb	r7, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    9352:	7084      	strb	r4, [r0, #2]
    9354:	3003      	adds	r0, #3
	if (!status) {
    9356:	2f00      	cmp	r7, #0
    9358:	d104      	bne.n	9364 <le_remote_feat_complete+0x3c>
		memcpy(&sep->features[0],
		       &pdu_data->payload.llctrl.ctrldata.feature_rsp.features[0],
    935a:	1d31      	adds	r1, r6, #4
	sep = meta_evt(buf, BT_HCI_EV_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));

	sep->status = status;
	sep->handle = sys_cpu_to_le16(handle);
	if (!status) {
		memcpy(&sep->features[0],
    935c:	002a      	movs	r2, r5
    935e:	f7f7 fcec 	bl	d3a <memcpy>
    9362:	e003      	b.n	936c <le_remote_feat_complete+0x44>
		       &pdu_data->payload.llctrl.ctrldata.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		memset(&sep->features[0], 0x00, sizeof(sep->features));
    9364:	002a      	movs	r2, r5
    9366:	2100      	movs	r1, #0
    9368:	f7f7 fd11 	bl	d8e <memset>
	}
}
    936c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    936e:	46c0      	nop			; (mov r8, r8)
    9370:	200007c0 	.word	0x200007c0
    9374:	200007c8 	.word	0x200007c8

00009378 <bt_addr_le_to_str.constprop.57>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    9378:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[7];

	switch (addr->type) {
    937a:	7803      	ldrb	r3, [r0, #0]
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    937c:	b088      	sub	sp, #32
    937e:	0004      	movs	r4, r0
    9380:	000e      	movs	r6, r1
    9382:	ad06      	add	r5, sp, #24
				    size_t len)
{
	char type[7];

	switch (addr->type) {
    9384:	2b00      	cmp	r3, #0
    9386:	d003      	beq.n	9390 <bt_addr_le_to_str.constprop.57+0x18>
    9388:	2b01      	cmp	r3, #1
    938a:	d106      	bne.n	939a <bt_addr_le_to_str.constprop.57+0x22>
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    938c:	490f      	ldr	r1, [pc, #60]	; (93cc <bt_addr_le_to_str.constprop.57+0x54>)
    938e:	e000      	b.n	9392 <bt_addr_le_to_str.constprop.57+0x1a>
{
	char type[7];

	switch (addr->type) {
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    9390:	490f      	ldr	r1, [pc, #60]	; (93d0 <bt_addr_le_to_str.constprop.57+0x58>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    9392:	0028      	movs	r0, r5
    9394:	f7f7 fc9e 	bl	cd4 <strcpy>
    9398:	e004      	b.n	93a4 <bt_addr_le_to_str.constprop.57+0x2c>
		break;
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    939a:	4a0e      	ldr	r2, [pc, #56]	; (93d4 <bt_addr_le_to_str.constprop.57+0x5c>)
    939c:	2107      	movs	r1, #7
    939e:	0028      	movs	r0, r5
    93a0:	f7f8 fafa 	bl	1998 <snprintk>
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    93a4:	7862      	ldrb	r2, [r4, #1]
    93a6:	79a3      	ldrb	r3, [r4, #6]
    93a8:	9204      	str	r2, [sp, #16]
    93aa:	78a2      	ldrb	r2, [r4, #2]
    93ac:	9505      	str	r5, [sp, #20]
    93ae:	9203      	str	r2, [sp, #12]
    93b0:	78e2      	ldrb	r2, [r4, #3]
    93b2:	211b      	movs	r1, #27
    93b4:	9202      	str	r2, [sp, #8]
    93b6:	7922      	ldrb	r2, [r4, #4]
    93b8:	0030      	movs	r0, r6
    93ba:	9201      	str	r2, [sp, #4]
    93bc:	7962      	ldrb	r2, [r4, #5]
    93be:	9200      	str	r2, [sp, #0]
    93c0:	4a05      	ldr	r2, [pc, #20]	; (93d8 <bt_addr_le_to_str.constprop.57+0x60>)
    93c2:	f7f8 fae9 	bl	1998 <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
    93c6:	b008      	add	sp, #32
    93c8:	bd70      	pop	{r4, r5, r6, pc}
    93ca:	46c0      	nop			; (mov r8, r8)
    93cc:	000151d2 	.word	0x000151d2
    93d0:	000151cb 	.word	0x000151cb
    93d4:	000151d9 	.word	0x000151d9
    93d8:	000151e0 	.word	0x000151e0

000093dc <le_adv_ext_report.isra.53>:
		  offsetof(struct pdu_adv, payload) + adv->len];

}

#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
static void le_adv_ext_report(struct pdu_data *pdu_data, u8_t *b,
    93dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    93de:	0004      	movs	r4, r0
	u8_t rssi;

	rssi = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
		 offsetof(struct pdu_adv, payload) + adv->len];

	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=-%u dB",
    93e0:	4b35      	ldr	r3, [pc, #212]	; (94b8 <le_adv_ext_report.isra.53+0xdc>)
{
	struct pdu_adv *adv = (struct pdu_adv *)pdu_data;
	u8_t rssi;

	rssi = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
		 offsetof(struct pdu_adv, payload) + adv->len];
    93e2:	7840      	ldrb	r0, [r0, #1]
		  offsetof(struct pdu_adv, payload) + adv->len];

}

#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
static void le_adv_ext_report(struct pdu_data *pdu_data, u8_t *b,
    93e4:	b093      	sub	sp, #76	; 0x4c
			      struct net_buf *buf, u8_t phy)
{
	struct pdu_adv *adv = (struct pdu_adv *)pdu_data;
	u8_t rssi;

	rssi = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    93e6:	1809      	adds	r1, r1, r0
		 offsetof(struct pdu_adv, payload) + adv->len];

	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=-%u dB",
    93e8:	9307      	str	r3, [sp, #28]
    93ea:	7a8b      	ldrb	r3, [r1, #10]
    93ec:	4f33      	ldr	r7, [pc, #204]	; (94bc <le_adv_ext_report.isra.53+0xe0>)
    93ee:	9306      	str	r3, [sp, #24]
    93f0:	7823      	ldrb	r3, [r4, #0]
    93f2:	4e33      	ldr	r6, [pc, #204]	; (94c0 <le_adv_ext_report.isra.53+0xe4>)
    93f4:	09d9      	lsrs	r1, r3, #7
    93f6:	9105      	str	r1, [sp, #20]
    93f8:	0659      	lsls	r1, r3, #25
    93fa:	071b      	lsls	r3, r3, #28
    93fc:	0f1b      	lsrs	r3, r3, #28
    93fe:	9302      	str	r3, [sp, #8]
    9400:	4b30      	ldr	r3, [pc, #192]	; (94c4 <le_adv_ext_report.isra.53+0xe8>)
    9402:	0fc9      	lsrs	r1, r1, #31
    9404:	9104      	str	r1, [sp, #16]
    9406:	9003      	str	r0, [sp, #12]
    9408:	9201      	str	r2, [sp, #4]
    940a:	9300      	str	r3, [sp, #0]
    940c:	003a      	movs	r2, r7
    940e:	4b2e      	ldr	r3, [pc, #184]	; (94c8 <le_adv_ext_report.isra.53+0xec>)
    9410:	0031      	movs	r1, r6
    9412:	482e      	ldr	r0, [pc, #184]	; (94cc <le_adv_ext_report.isra.53+0xf0>)
    9414:	f7f8 fab4 	bl	1980 <printk>
		phy, adv->type, adv->len, adv->tx_addr, adv->rx_addr, rssi);

	if ((adv->type == PDU_ADV_TYPE_EXT_IND) && adv->len) {
    9418:	230f      	movs	r3, #15
    941a:	7822      	ldrb	r2, [r4, #0]
    941c:	4013      	ands	r3, r2
    941e:	2b07      	cmp	r3, #7
    9420:	d147      	bne.n	94b2 <le_adv_ext_report.isra.53+0xd6>
    9422:	7863      	ldrb	r3, [r4, #1]
    9424:	2b00      	cmp	r3, #0
    9426:	d044      	beq.n	94b2 <le_adv_ext_report.isra.53+0xd6>

		p = (void *)&adv->payload.adv_ext_ind;
		h = (void *)p->ext_hdr_adi_adv_data;
		ptr = (u8_t *)h + sizeof(*h);

		BT_WARN("Ext. adv mode= 0x%x, hdr len= %u", p->adv_mode,
    9428:	4b23      	ldr	r3, [pc, #140]	; (94b8 <le_adv_ext_report.isra.53+0xdc>)
    942a:	0031      	movs	r1, r6
    942c:	9303      	str	r3, [sp, #12]
    942e:	78a3      	ldrb	r3, [r4, #2]
    9430:	4827      	ldr	r0, [pc, #156]	; (94d0 <le_adv_ext_report.isra.53+0xf4>)
    9432:	069a      	lsls	r2, r3, #26
    9434:	099b      	lsrs	r3, r3, #6
    9436:	9301      	str	r3, [sp, #4]
    9438:	4b22      	ldr	r3, [pc, #136]	; (94c4 <le_adv_ext_report.isra.53+0xe8>)
    943a:	0e92      	lsrs	r2, r2, #26
    943c:	9202      	str	r2, [sp, #8]
    943e:	9300      	str	r3, [sp, #0]
    9440:	003a      	movs	r2, r7
    9442:	4b21      	ldr	r3, [pc, #132]	; (94c8 <le_adv_ext_report.isra.53+0xec>)
    9444:	f7f8 fa9c 	bl	1980 <printk>
			p->ext_hdr_len);

		if (!p->ext_hdr_len) {
    9448:	78a3      	ldrb	r3, [r4, #2]
    944a:	069b      	lsls	r3, r3, #26
    944c:	d031      	beq.n	94b2 <le_adv_ext_report.isra.53+0xd6>
			goto no_ext_hdr;
		}

		if (h->adv_addr) {
    944e:	78e3      	ldrb	r3, [r4, #3]
		struct ext_adv_hdr *h;
		u8_t *ptr;

		p = (void *)&adv->payload.adv_ext_ind;
		h = (void *)p->ext_hdr_adi_adv_data;
		ptr = (u8_t *)h + sizeof(*h);
    9450:	1d25      	adds	r5, r4, #4

		if (!p->ext_hdr_len) {
			goto no_ext_hdr;
		}

		if (h->adv_addr) {
    9452:	07db      	lsls	r3, r3, #31
    9454:	d51d      	bpl.n	9492 <le_adv_ext_report.isra.53+0xb6>
			char addr_str[BT_ADDR_LE_STR_LEN];
			bt_addr_le_t addr;

			addr.type = adv->tx_addr;
    9456:	2124      	movs	r1, #36	; 0x24
    9458:	466a      	mov	r2, sp
			memcpy(&addr.a.val[0], ptr, sizeof(bt_addr_t));
    945a:	2025      	movs	r0, #37	; 0x25

		if (h->adv_addr) {
			char addr_str[BT_ADDR_LE_STR_LEN];
			bt_addr_le_t addr;

			addr.type = adv->tx_addr;
    945c:	7823      	ldrb	r3, [r4, #0]
    945e:	1852      	adds	r2, r2, r1
    9460:	065b      	lsls	r3, r3, #25
    9462:	0fdb      	lsrs	r3, r3, #31
    9464:	7013      	strb	r3, [r2, #0]
			memcpy(&addr.a.val[0], ptr, sizeof(bt_addr_t));
    9466:	0029      	movs	r1, r5
    9468:	2206      	movs	r2, #6
    946a:	4468      	add	r0, sp
    946c:	f7f7 fc65 	bl	d3a <memcpy>
			ptr += BDADDR_SIZE;

			bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    9470:	a90b      	add	r1, sp, #44	; 0x2c
    9472:	a809      	add	r0, sp, #36	; 0x24
    9474:	f7ff ff80 	bl	9378 <bt_addr_le_to_str.constprop.57>

			BT_WARN("AdvA: %s", addr_str);
    9478:	4b0f      	ldr	r3, [pc, #60]	; (94b8 <le_adv_ext_report.isra.53+0xdc>)
    947a:	003a      	movs	r2, r7
    947c:	9302      	str	r3, [sp, #8]
    947e:	ab0b      	add	r3, sp, #44	; 0x2c
    9480:	9301      	str	r3, [sp, #4]
    9482:	4b10      	ldr	r3, [pc, #64]	; (94c4 <le_adv_ext_report.isra.53+0xe8>)
    9484:	0031      	movs	r1, r6
    9486:	9300      	str	r3, [sp, #0]
    9488:	4812      	ldr	r0, [pc, #72]	; (94d4 <le_adv_ext_report.isra.53+0xf8>)
    948a:	4b0f      	ldr	r3, [pc, #60]	; (94c8 <le_adv_ext_report.isra.53+0xec>)
			char addr_str[BT_ADDR_LE_STR_LEN];
			bt_addr_le_t addr;

			addr.type = adv->tx_addr;
			memcpy(&addr.a.val[0], ptr, sizeof(bt_addr_t));
			ptr += BDADDR_SIZE;
    948c:	3506      	adds	r5, #6

			bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));

			BT_WARN("AdvA: %s", addr_str);
    948e:	f7f8 fa77 	bl	1980 <printk>

		}

		if (h->tx_pwr) {
    9492:	78e3      	ldrb	r3, [r4, #3]
    9494:	065b      	lsls	r3, r3, #25
    9496:	d50c      	bpl.n	94b2 <le_adv_ext_report.isra.53+0xd6>
			s8_t tx_pwr;

			tx_pwr = *(s8_t *)ptr;
			ptr++;

			BT_WARN("Tx pwr= %d dB", tx_pwr);
    9498:	4b07      	ldr	r3, [pc, #28]	; (94b8 <le_adv_ext_report.isra.53+0xdc>)
    949a:	4a08      	ldr	r2, [pc, #32]	; (94bc <le_adv_ext_report.isra.53+0xe0>)
    949c:	9302      	str	r3, [sp, #8]
    949e:	2300      	movs	r3, #0
    94a0:	56eb      	ldrsb	r3, [r5, r3]
    94a2:	4907      	ldr	r1, [pc, #28]	; (94c0 <le_adv_ext_report.isra.53+0xe4>)
    94a4:	9301      	str	r3, [sp, #4]
    94a6:	4b07      	ldr	r3, [pc, #28]	; (94c4 <le_adv_ext_report.isra.53+0xe8>)
    94a8:	480b      	ldr	r0, [pc, #44]	; (94d8 <le_adv_ext_report.isra.53+0xfc>)
    94aa:	9300      	str	r3, [sp, #0]
    94ac:	4b06      	ldr	r3, [pc, #24]	; (94c8 <le_adv_ext_report.isra.53+0xec>)
    94ae:	f7f8 fa67 	bl	1980 <printk>
		/* TODO: length check? */
	}

no_ext_hdr:
	return;
}
    94b2:	b013      	add	sp, #76	; 0x4c
    94b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    94b6:	46c0      	nop			; (mov r8, r8)
    94b8:	000154c4 	.word	0x000154c4
    94bc:	000154d1 	.word	0x000154d1
    94c0:	0001548b 	.word	0x0001548b
    94c4:	0001550f 	.word	0x0001550f
    94c8:	00017ffa 	.word	0x00017ffa
    94cc:	000167b1 	.word	0x000167b1
    94d0:	000167ff 	.word	0x000167ff
    94d4:	00016830 	.word	0x00016830
    94d8:	00016849 	.word	0x00016849

000094dc <sys_get_le64>:
 *  @param src Location of the little-endian 64-bit integer to get.
 *
 *  @return 64-bit integer in host endianness.
 */
static inline u64_t sys_get_le64(const u8_t src[8])
{
    94dc:	b530      	push	{r4, r5, lr}
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    94de:	7842      	ldrb	r2, [r0, #1]
 *  @param src Location of the little-endian 64-bit integer to get.
 *
 *  @return 64-bit integer in host endianness.
 */
static inline u64_t sys_get_le64(const u8_t src[8])
{
    94e0:	0003      	movs	r3, r0
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    94e2:	7804      	ldrb	r4, [r0, #0]
    94e4:	7880      	ldrb	r0, [r0, #2]
    94e6:	0212      	lsls	r2, r2, #8
    94e8:	4322      	orrs	r2, r4
    94ea:	0400      	lsls	r0, r0, #16
    94ec:	0011      	movs	r1, r2
    94ee:	0002      	movs	r2, r0
    94f0:	78d8      	ldrb	r0, [r3, #3]
    94f2:	430a      	orrs	r2, r1
    94f4:	0600      	lsls	r0, r0, #24
    94f6:	4310      	orrs	r0, r2
    94f8:	795a      	ldrb	r2, [r3, #5]
    94fa:	791d      	ldrb	r5, [r3, #4]
    94fc:	7999      	ldrb	r1, [r3, #6]
    94fe:	0212      	lsls	r2, r2, #8
    9500:	432a      	orrs	r2, r5
    9502:	0409      	lsls	r1, r1, #16
    9504:	0014      	movs	r4, r2
    9506:	000a      	movs	r2, r1
    9508:	79d9      	ldrb	r1, [r3, #7]
    950a:	4322      	orrs	r2, r4
    950c:	0609      	lsls	r1, r1, #24
    950e:	4311      	orrs	r1, r2
}
    9510:	bd30      	pop	{r4, r5, pc}
	...

00009514 <hci_cmd_handle>:

	return 0;
}

struct net_buf *hci_cmd_handle(struct net_buf *cmd)
{
    9514:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_cc_status *ccst;
	struct bt_hci_cmd_hdr *chdr;
	struct net_buf *evt = NULL;
    9516:	2500      	movs	r5, #0

	return 0;
}

struct net_buf *hci_cmd_handle(struct net_buf *cmd)
{
    9518:	b095      	sub	sp, #84	; 0x54
	struct bt_hci_evt_cc_status *ccst;
	struct bt_hci_cmd_hdr *chdr;
	struct net_buf *evt = NULL;
    951a:	950f      	str	r5, [sp, #60]	; 0x3c

	return 0;
}

struct net_buf *hci_cmd_handle(struct net_buf *cmd)
{
    951c:	0004      	movs	r4, r0
	struct bt_hci_cmd_hdr *chdr;
	struct net_buf *evt = NULL;
	u16_t ocf;
	int err;

	if (cmd->len < sizeof(*chdr)) {
    951e:	8980      	ldrh	r0, [r0, #12]
    9520:	2802      	cmp	r0, #2
    9522:	d808      	bhi.n	9536 <hci_cmd_handle+0x22>
		BT_ERR("No HCI Command header");
    9524:	4bb9      	ldr	r3, [pc, #740]	; (980c <hci_cmd_handle+0x2f8>)
    9526:	4aba      	ldr	r2, [pc, #744]	; (9810 <hci_cmd_handle+0x2fc>)
    9528:	9301      	str	r3, [sp, #4]
    952a:	4bba      	ldr	r3, [pc, #744]	; (9814 <hci_cmd_handle+0x300>)
    952c:	49ba      	ldr	r1, [pc, #744]	; (9818 <hci_cmd_handle+0x304>)
    952e:	9300      	str	r3, [sp, #0]
    9530:	48ba      	ldr	r0, [pc, #744]	; (981c <hci_cmd_handle+0x308>)
    9532:	4bbb      	ldr	r3, [pc, #748]	; (9820 <hci_cmd_handle+0x30c>)
    9534:	e011      	b.n	955a <hci_cmd_handle+0x46>
		return NULL;
	}

	chdr = (void *)cmd->data;
    9536:	68a3      	ldr	r3, [r4, #8]
	/* store in a global for later CC/CS event creation */
	_opcode = sys_le16_to_cpu(chdr->opcode);
    9538:	4eba      	ldr	r6, [pc, #744]	; (9824 <hci_cmd_handle+0x310>)
    953a:	785a      	ldrb	r2, [r3, #1]
    953c:	7819      	ldrb	r1, [r3, #0]
    953e:	0212      	lsls	r2, r2, #8
    9540:	430a      	orrs	r2, r1
    9542:	8032      	strh	r2, [r6, #0]

	if (cmd->len < chdr->param_len) {
    9544:	789b      	ldrb	r3, [r3, #2]
    9546:	4283      	cmp	r3, r0
    9548:	d90b      	bls.n	9562 <hci_cmd_handle+0x4e>
		BT_ERR("Invalid HCI CMD packet length");
    954a:	4bb0      	ldr	r3, [pc, #704]	; (980c <hci_cmd_handle+0x2f8>)
    954c:	4ab0      	ldr	r2, [pc, #704]	; (9810 <hci_cmd_handle+0x2fc>)
    954e:	9301      	str	r3, [sp, #4]
    9550:	4bb0      	ldr	r3, [pc, #704]	; (9814 <hci_cmd_handle+0x300>)
    9552:	49b1      	ldr	r1, [pc, #708]	; (9818 <hci_cmd_handle+0x304>)
    9554:	9300      	str	r3, [sp, #0]
    9556:	48b4      	ldr	r0, [pc, #720]	; (9828 <hci_cmd_handle+0x314>)
    9558:	4bb1      	ldr	r3, [pc, #708]	; (9820 <hci_cmd_handle+0x30c>)
    955a:	f7f8 fa11 	bl	1980 <printk>
		return NULL;
    955e:	0028      	movs	r0, r5
    9560:	e362      	b.n	9c28 <hci_cmd_handle+0x714>
	}

	net_buf_pull(cmd, sizeof(*chdr));
    9562:	0020      	movs	r0, r4
    9564:	2103      	movs	r1, #3
    9566:	3008      	adds	r0, #8
    9568:	f00a f84d 	bl	13606 <net_buf_simple_pull>

	ocf = BT_OCF(_opcode);
    956c:	8833      	ldrh	r3, [r6, #0]

	switch (BT_OGF(_opcode)) {
    956e:	0a98      	lsrs	r0, r3, #10
		return NULL;
	}

	net_buf_pull(cmd, sizeof(*chdr));

	ocf = BT_OCF(_opcode);
    9570:	059d      	lsls	r5, r3, #22

	switch (BT_OGF(_opcode)) {
    9572:	3801      	subs	r0, #1
		return NULL;
	}

	net_buf_pull(cmd, sizeof(*chdr));

	ocf = BT_OCF(_opcode);
    9574:	0dad      	lsrs	r5, r5, #22

	switch (BT_OGF(_opcode)) {
    9576:	2807      	cmp	r0, #7
    9578:	d900      	bls.n	957c <hci_cmd_handle+0x68>
    957a:	e34e      	b.n	9c1a <hci_cmd_handle+0x706>
    957c:	f7f6 fe06 	bl	18c <__gnu_thumb1_case_uhi>
    9580:	034d0008 	.word	0x034d0008
    9584:	0045001e 	.word	0x0045001e
    9588:	034d034d 	.word	0x034d034d
    958c:	00c7034d 	.word	0x00c7034d
#endif /* CONFIG_BLUETOOTH_CONN */

static int link_control_cmd_handle(u16_t  ocf, struct net_buf *cmd,
				   struct net_buf **evt)
{
	switch (ocf) {
    9590:	2d06      	cmp	r5, #6
    9592:	d00a      	beq.n	95aa <hci_cmd_handle+0x96>
    9594:	2d1d      	cmp	r5, #29
    9596:	d000      	beq.n	959a <hci_cmd_handle+0x86>
    9598:	e33f      	b.n	9c1a <hci_cmd_handle+0x706>
{
	struct bt_hci_cp_read_remote_version_info *cmd = (void *)buf->data;
	u16_t handle;
	u32_t status;

	handle = sys_le16_to_cpu(cmd->handle);
    959a:	68a2      	ldr	r2, [r4, #8]
    959c:	7850      	ldrb	r0, [r2, #1]
    959e:	7813      	ldrb	r3, [r2, #0]
    95a0:	0200      	lsls	r0, r0, #8
	status = ll_version_ind_send(handle);
    95a2:	4318      	orrs	r0, r3
    95a4:	f008 f955 	bl	11852 <ll_version_ind_send>
    95a8:	e2cd      	b.n	9b46 <hci_cmd_handle+0x632>
    95aa:	68a2      	ldr	r2, [r4, #8]
{
	struct bt_hci_cp_disconnect *cmd = (void *)buf->data;
	u16_t handle;
	u32_t status;

	handle = sys_le16_to_cpu(cmd->handle);
    95ac:	7850      	ldrb	r0, [r2, #1]
    95ae:	7813      	ldrb	r3, [r2, #0]
    95b0:	0200      	lsls	r0, r0, #8
	status = ll_terminate_ind_send(handle, cmd->reason);
    95b2:	7891      	ldrb	r1, [r2, #2]
    95b4:	4318      	orrs	r0, r3
    95b6:	f008 f962 	bl	1187e <ll_terminate_ind_send>
    95ba:	e2c4      	b.n	9b46 <hci_cmd_handle+0x632>
#endif

static int ctrl_bb_cmd_handle(u16_t  ocf, struct net_buf *cmd,
			      struct net_buf **evt)
{
	switch (ocf) {
    95bc:	2d03      	cmp	r5, #3
    95be:	d00c      	beq.n	95da <hci_cmd_handle+0xc6>
    95c0:	2d63      	cmp	r5, #99	; 0x63
    95c2:	d01d      	beq.n	9600 <hci_cmd_handle+0xec>
    95c4:	2d01      	cmp	r5, #1
    95c6:	d000      	beq.n	95ca <hci_cmd_handle+0xb6>
    95c8:	e327      	b.n	9c1a <hci_cmd_handle+0x706>
static void set_event_mask(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_cp_set_event_mask *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;

	event_mask = sys_get_le64(cmd->events);
    95ca:	68a0      	ldr	r0, [r4, #8]
    95cc:	f7ff ff86 	bl	94dc <sys_get_le64>
    95d0:	4b96      	ldr	r3, [pc, #600]	; (982c <hci_cmd_handle+0x318>)
    95d2:	6018      	str	r0, [r3, #0]
    95d4:	6059      	str	r1, [r3, #4]

	ccst = cmd_complete(evt, sizeof(*ccst));
    95d6:	0029      	movs	r1, r5
    95d8:	e30e      	b.n	9bf8 <hci_cmd_handle+0x6e4>

#if CONFIG_BLUETOOTH_CONTROLLER_DUP_FILTER_LEN > 0
	dup_count = -1;
#endif
	/* reset event masks */
	event_mask = DEFAULT_EVENT_MASK;
    95da:	2001      	movs	r0, #1
    95dc:	4994      	ldr	r1, [pc, #592]	; (9830 <hci_cmd_handle+0x31c>)
    95de:	4b93      	ldr	r3, [pc, #588]	; (982c <hci_cmd_handle+0x318>)
    95e0:	4240      	negs	r0, r0
    95e2:	6018      	str	r0, [r3, #0]
    95e4:	6059      	str	r1, [r3, #4]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    95e6:	2000      	movs	r0, #0
    95e8:	2100      	movs	r1, #0
    95ea:	4b92      	ldr	r3, [pc, #584]	; (9834 <hci_cmd_handle+0x320>)
    95ec:	6018      	str	r0, [r3, #0]
    95ee:	6059      	str	r1, [r3, #4]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    95f0:	201f      	movs	r0, #31
    95f2:	2100      	movs	r1, #0
    95f4:	4b90      	ldr	r3, [pc, #576]	; (9838 <hci_cmd_handle+0x324>)
    95f6:	6018      	str	r0, [r3, #0]
    95f8:	6059      	str	r1, [r3, #4]

	if (buf) {
		ll_reset();
    95fa:	f007 fff9 	bl	115f0 <ll_reset>
    95fe:	e2fa      	b.n	9bf6 <hci_cmd_handle+0x6e2>
static void set_event_mask_page_2(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_cp_set_event_mask_page_2 *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;

	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
    9600:	68a0      	ldr	r0, [r4, #8]
    9602:	f7ff ff6b 	bl	94dc <sys_get_le64>
    9606:	4b8b      	ldr	r3, [pc, #556]	; (9834 <hci_cmd_handle+0x320>)
    9608:	e0d9      	b.n	97be <hci_cmd_handle+0x2aa>
}

static int info_cmd_handle(u16_t  ocf, struct net_buf *cmd,
			   struct net_buf **evt)
{
	switch (ocf) {
    960a:	1e68      	subs	r0, r5, #1
    960c:	2808      	cmp	r0, #8
    960e:	d900      	bls.n	9612 <hci_cmd_handle+0xfe>
    9610:	e303      	b.n	9c1a <hci_cmd_handle+0x706>
    9612:	f7f6 fdbb 	bl	18c <__gnu_thumb1_case_uhi>
    9616:	0009      	.short	0x0009
    9618:	00630018 	.word	0x00630018
    961c:	03020302 	.word	0x03020302
    9620:	03020302 	.word	0x03020302
    9624:	00710302 	.word	0x00710302

static void read_local_version_info(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_rp_read_local_version_info *rp;

	rp = cmd_complete(evt, sizeof(*rp));
    9628:	2109      	movs	r1, #9
    962a:	a80f      	add	r0, sp, #60	; 0x3c
    962c:	f7ff fe2a 	bl	9284 <cmd_complete>

	rp->status = 0x00;
    9630:	2300      	movs	r3, #0
	rp->hci_version = BT_HCI_VERSION_5_0;
    9632:	2209      	movs	r2, #9
{
	struct bt_hci_rp_read_local_version_info *rp;

	rp = cmd_complete(evt, sizeof(*rp));

	rp->status = 0x00;
    9634:	7003      	strb	r3, [r0, #0]
	rp->hci_version = BT_HCI_VERSION_5_0;
	rp->hci_revision = sys_cpu_to_le16(0);
    9636:	7083      	strb	r3, [r0, #2]
    9638:	70c3      	strb	r3, [r0, #3]
	rp->lmp_version = RADIO_BLE_VERSION_NUMBER;
	rp->manufacturer = sys_cpu_to_le16(RADIO_BLE_COMPANY_ID);
    963a:	3b01      	subs	r3, #1
	struct bt_hci_rp_read_local_version_info *rp;

	rp = cmd_complete(evt, sizeof(*rp));

	rp->status = 0x00;
	rp->hci_version = BT_HCI_VERSION_5_0;
    963c:	7042      	strb	r2, [r0, #1]
	rp->hci_revision = sys_cpu_to_le16(0);
	rp->lmp_version = RADIO_BLE_VERSION_NUMBER;
    963e:	7102      	strb	r2, [r0, #4]
	rp->manufacturer = sys_cpu_to_le16(RADIO_BLE_COMPANY_ID);
    9640:	7143      	strb	r3, [r0, #5]
    9642:	7183      	strb	r3, [r0, #6]
    9644:	e145      	b.n	98d2 <hci_cmd_handle+0x3be>

static void read_supported_commands(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_rp_read_supported_commands *rp;

	rp = cmd_complete(evt, sizeof(*rp));
    9646:	2141      	movs	r1, #65	; 0x41
    9648:	a80f      	add	r0, sp, #60	; 0x3c
    964a:	f7ff fe1b 	bl	9284 <cmd_complete>

	rp->status = 0x00;
    964e:	2100      	movs	r1, #0

static void read_supported_commands(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_rp_read_supported_commands *rp;

	rp = cmd_complete(evt, sizeof(*rp));
    9650:	0004      	movs	r4, r0
	rp->commands[27] |= BIT(6) | BIT(7);
	/* LE Read Supported States */
	rp->commands[28] |= BIT(3);
#if defined(CONFIG_BLUETOOTH_BROADCASTER)
	/* LE Set Adv Params, LE Read Adv Channel TX Power, LE Set Adv Data */
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    9652:	2609      	movs	r6, #9
{
	struct bt_hci_rp_read_supported_commands *rp;

	rp = cmd_complete(evt, sizeof(*rp));

	rp->status = 0x00;
    9654:	7001      	strb	r1, [r0, #0]
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    9656:	2240      	movs	r2, #64	; 0x40
    9658:	3001      	adds	r0, #1
    965a:	f7f7 fb98 	bl	d8e <memset>
	rp->commands[27] |= BIT(6) | BIT(7);
	/* LE Read Supported States */
	rp->commands[28] |= BIT(3);
#if defined(CONFIG_BLUETOOTH_BROADCASTER)
	/* LE Set Adv Params, LE Read Adv Channel TX Power, LE Set Adv Data */
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    965e:	7ea5      	ldrb	r5, [r4, #26]
    9660:	4276      	negs	r6, r6
    9662:	4335      	orrs	r5, r6
    9664:	76a5      	strb	r5, [r4, #26]
	/* LE Set Scan Response Data, LE Set Adv Enable */
	rp->commands[26] |= BIT(0) | BIT(1);
    9666:	253d      	movs	r5, #61	; 0x3d

	rp->status = 0x00;
	memset(&rp->commands[0], 0, sizeof(rp->commands));

	/* Set Event Mask, and Reset. */
	rp->commands[5] |= BIT(6) | BIT(7);
    9668:	2240      	movs	r2, #64	; 0x40
	/* LE Set Event Mask, LE Read Buffer Size, LE Read Local Supp Feats,
	 * Set Random Addr
	 */
	rp->commands[25] |= BIT(0) | BIT(1) | BIT(2) | BIT(4);
	/* LE Read WL Size, LE Clear WL */
	rp->commands[26] |= BIT(6) | BIT(7);
    966a:	7ee1      	ldrb	r1, [r4, #27]
	rp->commands[28] |= BIT(3);
#if defined(CONFIG_BLUETOOTH_BROADCASTER)
	/* LE Set Adv Params, LE Read Adv Channel TX Power, LE Set Adv Data */
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
	/* LE Set Scan Response Data, LE Set Adv Enable */
	rp->commands[26] |= BIT(0) | BIT(1);
    966c:	426d      	negs	r5, r5
    966e:	4329      	orrs	r1, r5
    9670:	76e1      	strb	r1, [r4, #27]
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_ENC */
#endif /* CONFIG_BLUETOOTH_CENTRAL */
#if defined(CONFIG_BLUETOOTH_PERIPHERAL)
#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_ENC)
	/* LE LTK Request Reply, LE LTK Request Negative Reply */
	rp->commands[28] |= BIT(1) | BIT(2);
    9672:	210e      	movs	r1, #14

	rp->status = 0x00;
	memset(&rp->commands[0], 0, sizeof(rp->commands));

	/* Set Event Mask, and Reset. */
	rp->commands[5] |= BIT(6) | BIT(7);
    9674:	79a3      	ldrb	r3, [r4, #6]
    9676:	4252      	negs	r2, r2
    9678:	4313      	orrs	r3, r2
    967a:	71a3      	strb	r3, [r4, #6]
#if defined(CONFIG_BLUETOOTH_HCI_ACL_FLOW_CONTROL)
	/* Set FC, Host Buffer Size and Host Num Completed */
	rp->commands[10] |= BIT(5) | BIT(6) | BIT(7);
#endif
	/* Read Local Version Info, Read Local Supported Features. */
	rp->commands[14] |= BIT(3) | BIT(5);
    967c:	7be3      	ldrb	r3, [r4, #15]
    967e:	3268      	adds	r2, #104	; 0x68
    9680:	4313      	orrs	r3, r2
    9682:	73e3      	strb	r3, [r4, #15]
	/* Read BD ADDR. */
	rp->commands[15] |= BIT(1);
    9684:	7c23      	ldrb	r3, [r4, #16]
    9686:	3a26      	subs	r2, #38	; 0x26
    9688:	4313      	orrs	r3, r2
	/* LE Add Dev to WL, LE Remove Dev from WL */
	rp->commands[27] |= BIT(0) | BIT(1);
	/* LE Encrypt, LE Rand */
	rp->commands[27] |= BIT(6) | BIT(7);
	/* LE Read Supported States */
	rp->commands[28] |= BIT(3);
    968a:	7f62      	ldrb	r2, [r4, #29]
	/* Read Local Version Info, Read Local Supported Features. */
	rp->commands[14] |= BIT(3) | BIT(5);
	/* Read BD ADDR. */
	rp->commands[15] |= BIT(1);
	/* Set Event Mask Page 2 */
	rp->commands[22] |= BIT(2);
    968c:	2004      	movs	r0, #4
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_ENC */
#endif /* CONFIG_BLUETOOTH_CENTRAL */
#if defined(CONFIG_BLUETOOTH_PERIPHERAL)
#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_ENC)
	/* LE LTK Request Reply, LE LTK Request Negative Reply */
	rp->commands[28] |= BIT(1) | BIT(2);
    968e:	430a      	orrs	r2, r1
    9690:	7762      	strb	r2, [r4, #29]
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_ENC */
#endif
#if defined(CONFIG_BLUETOOTH_CONN)
	/* Disconnect. */
	rp->commands[0] |= BIT(5);
    9692:	7862      	ldrb	r2, [r4, #1]
    9694:	3112      	adds	r1, #18
    9696:	430a      	orrs	r2, r1
    9698:	7062      	strb	r2, [r4, #1]
	/* LE Connection Update, LE Read Remote Features */
	rp->commands[27] |= BIT(2) | BIT(5);
    969a:	2219      	movs	r2, #25
	rp->commands[10] |= BIT(5) | BIT(6) | BIT(7);
#endif
	/* Read Local Version Info, Read Local Supported Features. */
	rp->commands[14] |= BIT(3) | BIT(5);
	/* Read BD ADDR. */
	rp->commands[15] |= BIT(1);
    969c:	7423      	strb	r3, [r4, #16]
	/* Set Event Mask Page 2 */
	rp->commands[22] |= BIT(2);
    969e:	7de3      	ldrb	r3, [r4, #23]
#endif
#if defined(CONFIG_BLUETOOTH_CONN)
	/* Disconnect. */
	rp->commands[0] |= BIT(5);
	/* LE Connection Update, LE Read Remote Features */
	rp->commands[27] |= BIT(2) | BIT(5);
    96a0:	4252      	negs	r2, r2
	/* Read Local Version Info, Read Local Supported Features. */
	rp->commands[14] |= BIT(3) | BIT(5);
	/* Read BD ADDR. */
	rp->commands[15] |= BIT(1);
	/* Set Event Mask Page 2 */
	rp->commands[22] |= BIT(2);
    96a2:	4303      	orrs	r3, r0
    96a4:	75e3      	strb	r3, [r4, #23]
	 */
	rp->commands[25] |= BIT(0) | BIT(1) | BIT(2) | BIT(4);
	/* LE Read WL Size, LE Clear WL */
	rp->commands[26] |= BIT(6) | BIT(7);
	/* LE Add Dev to WL, LE Remove Dev from WL */
	rp->commands[27] |= BIT(0) | BIT(1);
    96a6:	7f23      	ldrb	r3, [r4, #28]
#endif /* CONFIG_BLUETOOTH_CONN */
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	/* LE resolving list commands, LE Read Peer RPA */
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
	/* LE Read Local RPA, LE Set AR Enable, Set RPA Timeout */
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
    96a8:	1d65      	adds	r5, r4, #5
#endif
#if defined(CONFIG_BLUETOOTH_CONN)
	/* Disconnect. */
	rp->commands[0] |= BIT(5);
	/* LE Connection Update, LE Read Remote Features */
	rp->commands[27] |= BIT(2) | BIT(5);
    96aa:	4313      	orrs	r3, r2
    96ac:	7723      	strb	r3, [r4, #28]
#endif /* CONFIG_BLUETOOTH_CONN */
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	/* LE resolving list commands, LE Read Peer RPA */
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
	/* LE Read Local RPA, LE Set AR Enable, Set RPA Timeout */
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
    96ae:	7feb      	ldrb	r3, [r5, #31]
	/* LE Remote Conn Param Req and Neg Reply */
	rp->commands[33] |= BIT(4) | BIT(5);
#endif /* CONFIG_BLUETOOTH_CONN */
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	/* LE resolving list commands, LE Read Peer RPA */
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    96b0:	1826      	adds	r6, r4, r0
	/* Disconnect. */
	rp->commands[0] |= BIT(5);
	/* LE Connection Update, LE Read Remote Features */
	rp->commands[27] |= BIT(2) | BIT(5);
	/* LE Remote Conn Param Req and Neg Reply */
	rp->commands[33] |= BIT(4) | BIT(5);
    96b2:	1ce7      	adds	r7, r4, #3
    96b4:	7ff9      	ldrb	r1, [r7, #31]
#endif /* CONFIG_BLUETOOTH_CONN */
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	/* LE resolving list commands, LE Read Peer RPA */
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    96b6:	7ff2      	ldrb	r2, [r6, #31]
	/* LE Read Local RPA, LE Set AR Enable, Set RPA Timeout */
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
	/* LE Set Privacy Mode */
	rp->commands[39] |= BIT(2);
    96b8:	3428      	adds	r4, #40	; 0x28
#endif /* CONFIG_BLUETOOTH_CONN */
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	/* LE resolving list commands, LE Read Peer RPA */
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
	/* LE Read Local RPA, LE Set AR Enable, Set RPA Timeout */
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
    96ba:	930d      	str	r3, [sp, #52]	; 0x34
	/* LE Set Privacy Mode */
	rp->commands[39] |= BIT(2);
    96bc:	7823      	ldrb	r3, [r4, #0]
    96be:	4318      	orrs	r0, r3
    96c0:	7020      	strb	r0, [r4, #0]
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
	/* LE Set Data Length, and LE Read Suggested Data Length. */
	rp->commands[33] |= BIT(6) | BIT(7);
    96c2:	2010      	movs	r0, #16
    96c4:	4240      	negs	r0, r0
    96c6:	4301      	orrs	r1, r0
    96c8:	77f9      	strb	r1, [r7, #31]
	/* LE Write Suggested Data Length. */
	rp->commands[34] |= BIT(0);
    96ca:	2107      	movs	r1, #7
    96cc:	4249      	negs	r1, r1
    96ce:	430a      	orrs	r2, r1
    96d0:	77f2      	strb	r2, [r6, #31]
	/* LE Read Maximum Data Length. */
	rp->commands[35] |= BIT(3);
    96d2:	220f      	movs	r2, #15
    96d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    96d6:	4313      	orrs	r3, r2
    96d8:	77eb      	strb	r3, [r5, #31]
    96da:	e29c      	b.n	9c16 <hci_cmd_handle+0x702>

static void read_local_features(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_rp_read_local_features *rp;

	rp = cmd_complete(evt, sizeof(*rp));
    96dc:	2109      	movs	r1, #9
    96de:	a80f      	add	r0, sp, #60	; 0x3c
    96e0:	f7ff fdd0 	bl	9284 <cmd_complete>

	rp->status = 0x00;
    96e4:	2100      	movs	r1, #0

static void read_local_features(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_rp_read_local_features *rp;

	rp = cmd_complete(evt, sizeof(*rp));
    96e6:	0004      	movs	r4, r0

	rp->status = 0x00;
    96e8:	7001      	strb	r1, [r0, #0]
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    96ea:	2208      	movs	r2, #8
    96ec:	3001      	adds	r0, #1
    96ee:	f7f7 fb4e 	bl	d8e <memset>
	/* BR/EDR not supported and LE supported */
	rp->features[4] = (1 << 5) | (1 << 6);
    96f2:	2360      	movs	r3, #96	; 0x60
    96f4:	7163      	strb	r3, [r4, #5]
    96f6:	e28e      	b.n	9c16 <hci_cmd_handle+0x702>

static void read_bd_addr(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_rp_read_bd_addr *rp;

	rp = cmd_complete(evt, sizeof(*rp));
    96f8:	2107      	movs	r1, #7
    96fa:	a80f      	add	r0, sp, #60	; 0x3c
    96fc:	f7ff fdc2 	bl	9284 <cmd_complete>
    9700:	0001      	movs	r1, r0

	rp->status = 0x00;
    9702:	2000      	movs	r0, #0
    9704:	7008      	strb	r0, [r1, #0]
	ll_addr_get(0, &rp->bdaddr.val[0]);
    9706:	3101      	adds	r1, #1
    9708:	f008 fec8 	bl	1249c <ll_addr_get>
    970c:	e283      	b.n	9c16 <hci_cmd_handle+0x702>
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */

static int controller_cmd_handle(u16_t  ocf, struct net_buf *cmd,
				 struct net_buf **evt)
{
	switch (ocf) {
    970e:	1e68      	subs	r0, r5, #1
    9710:	284d      	cmp	r0, #77	; 0x4d
    9712:	d900      	bls.n	9716 <hci_cmd_handle+0x202>
    9714:	e281      	b.n	9c1a <hci_cmd_handle+0x706>
    9716:	f7f6 fd39 	bl	18c <__gnu_thumb1_case_uhi>
    971a:	004e      	.short	0x004e
    971c:	00610055 	.word	0x00610055
    9720:	00730280 	.word	0x00730280
    9724:	00fa00df 	.word	0x00fa00df
    9728:	01080102 	.word	0x01080102
    972c:	0280010e 	.word	0x0280010e
    9730:	02800280 	.word	0x02800280
    9734:	00910280 	.word	0x00910280
    9738:	00a4009c 	.word	0x00a4009c
    973c:	013800a8 	.word	0x013800a8
    9740:	02800280 	.word	0x02800280
    9744:	00ac0130 	.word	0x00ac0130
    9748:	028000bf 	.word	0x028000bf
    974c:	0125011d 	.word	0x0125011d
    9750:	028000ca 	.word	0x028000ca
    9754:	02800280 	.word	0x02800280
    9758:	01690150 	.word	0x01690150
    975c:	019e0184 	.word	0x019e0184
    9760:	028001a8 	.word	0x028001a8
    9764:	021f0280 	.word	0x021f0280
    9768:	022a0226 	.word	0x022a0226
    976c:	023d0232 	.word	0x023d0232
    9770:	025b024c 	.word	0x025b024c
    9774:	01b40267 	.word	0x01b40267
    9778:	01e001c0 	.word	0x01e001c0
    977c:	028001f9 	.word	0x028001f9
    9780:	02800280 	.word	0x02800280
    9784:	02800280 	.word	0x02800280
    9788:	02800280 	.word	0x02800280
    978c:	02800280 	.word	0x02800280
    9790:	02800280 	.word	0x02800280
    9794:	02800280 	.word	0x02800280
    9798:	02800280 	.word	0x02800280
    979c:	02800280 	.word	0x02800280
    97a0:	02800280 	.word	0x02800280
    97a4:	02800280 	.word	0x02800280
    97a8:	02800280 	.word	0x02800280
    97ac:	02800280 	.word	0x02800280
    97b0:	02800280 	.word	0x02800280
    97b4:	0274      	.short	0x0274
static void le_set_event_mask(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_cp_set_event_mask *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;

	le_event_mask = sys_get_le64(cmd->events);
    97b6:	68a0      	ldr	r0, [r4, #8]
    97b8:	f7ff fe90 	bl	94dc <sys_get_le64>
    97bc:	4b1e      	ldr	r3, [pc, #120]	; (9838 <hci_cmd_handle+0x324>)
    97be:	6018      	str	r0, [r3, #0]
    97c0:	6059      	str	r1, [r3, #4]
    97c2:	e218      	b.n	9bf6 <hci_cmd_handle+0x6e2>

static void le_read_buffer_size(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_rp_le_read_buffer_size *rp;

	rp = cmd_complete(evt, sizeof(*rp));
    97c4:	2104      	movs	r1, #4
    97c6:	a80f      	add	r0, sp, #60	; 0x3c
    97c8:	f7ff fd5c 	bl	9284 <cmd_complete>

	rp->status = 0x00;
    97cc:	2300      	movs	r3, #0

	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    97ce:	211b      	movs	r1, #27
{
	struct bt_hci_rp_le_read_buffer_size *rp;

	rp = cmd_complete(evt, sizeof(*rp));

	rp->status = 0x00;
    97d0:	7003      	strb	r3, [r0, #0]

	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    97d2:	7083      	strb	r3, [r0, #2]
	rp->le_max_num = RADIO_PACKET_COUNT_TX_MAX;
    97d4:	3302      	adds	r3, #2

	rp = cmd_complete(evt, sizeof(*rp));

	rp->status = 0x00;

	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    97d6:	7041      	strb	r1, [r0, #1]
	rp->le_max_num = RADIO_PACKET_COUNT_TX_MAX;
    97d8:	70c3      	strb	r3, [r0, #3]
    97da:	e21c      	b.n	9c16 <hci_cmd_handle+0x702>

static void le_read_local_features(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_rp_le_read_local_features *rp;

	rp = cmd_complete(evt, sizeof(*rp));
    97dc:	2109      	movs	r1, #9
    97de:	a80f      	add	r0, sp, #60	; 0x3c
    97e0:	f7ff fd50 	bl	9284 <cmd_complete>

	rp->status = 0x00;
    97e4:	2500      	movs	r5, #0

static void le_read_local_features(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_rp_le_read_local_features *rp;

	rp = cmd_complete(evt, sizeof(*rp));
    97e6:	0004      	movs	r4, r0

	rp->status = 0x00;
    97e8:	7005      	strb	r5, [r0, #0]

	memset(&rp->features[0], 0x00, sizeof(rp->features));
    97ea:	2208      	movs	r2, #8
    97ec:	3001      	adds	r0, #1
    97ee:	0029      	movs	r1, r5
    97f0:	f7f7 facd 	bl	d8e <memset>
	rp->features[0] = RADIO_BLE_FEAT & 0xFF;
    97f4:	237f      	movs	r3, #127	; 0x7f
    97f6:	7063      	strb	r3, [r4, #1]
	rp->features[1] = (RADIO_BLE_FEAT >> 8)  & 0xFF;
    97f8:	3b3f      	subs	r3, #63	; 0x3f
    97fa:	70a3      	strb	r3, [r4, #2]
	rp->features[2] = (RADIO_BLE_FEAT >> 16)  & 0xFF;
    97fc:	70e5      	strb	r5, [r4, #3]
    97fe:	e20a      	b.n	9c16 <hci_cmd_handle+0x702>
static void le_set_random_address(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_cp_le_set_random_address *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;

	ll_addr_set(1, &cmd->bdaddr.val[0]);
    9800:	68a1      	ldr	r1, [r4, #8]
    9802:	2001      	movs	r0, #1
    9804:	f008 fe64 	bl	124d0 <ll_addr_set>
    9808:	e1f5      	b.n	9bf6 <hci_cmd_handle+0x6e2>
    980a:	46c0      	nop			; (mov r8, r8)
    980c:	000154c4 	.word	0x000154c4
    9810:	00015484 	.word	0x00015484
    9814:	000154c9 	.word	0x000154c9
    9818:	0001548b 	.word	0x0001548b
    981c:	00016867 	.word	0x00016867
    9820:	00017f8e 	.word	0x00017f8e
    9824:	20001320 	.word	0x20001320
    9828:	0001688d 	.word	0x0001688d
    982c:	200007c0 	.word	0x200007c0
    9830:	00001fff 	.word	0x00001fff
    9834:	20001318 	.word	0x20001318
    9838:	200007c8 	.word	0x200007c8

static void le_read_wl_size(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_rp_le_read_wl_size *rp;

	rp = cmd_complete(evt, sizeof(*rp));
    983c:	2102      	movs	r1, #2
    983e:	a80f      	add	r0, sp, #60	; 0x3c
    9840:	f7ff fd20 	bl	9284 <cmd_complete>
	rp->status = 0x00;
    9844:	2300      	movs	r3, #0
    9846:	7003      	strb	r3, [r0, #0]

static void le_read_wl_size(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_rp_le_read_wl_size *rp;

	rp = cmd_complete(evt, sizeof(*rp));
    9848:	0004      	movs	r4, r0
	rp->status = 0x00;

	rp->wl_size = ll_wl_size_get();
    984a:	f008 ff81 	bl	12750 <ll_wl_size_get>
    984e:	7060      	strb	r0, [r4, #1]
    9850:	e1e1      	b.n	9c16 <hci_cmd_handle+0x702>

static void le_clear_wl(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_evt_cc_status *ccst;

	ccst = cmd_complete(evt, sizeof(*ccst));
    9852:	2101      	movs	r1, #1
    9854:	a80f      	add	r0, sp, #60	; 0x3c
    9856:	f7ff fd15 	bl	9284 <cmd_complete>
    985a:	0004      	movs	r4, r0
	ccst->status = ll_wl_clear();
    985c:	f008 ff7a 	bl	12754 <ll_wl_clear>
    9860:	e1c0      	b.n	9be4 <hci_cmd_handle+0x6d0>
{
	struct bt_hci_cp_le_add_dev_to_wl *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;
	u32_t status;

	status = ll_wl_add(&cmd->addr);
    9862:	68a0      	ldr	r0, [r4, #8]
    9864:	f009 f816 	bl	12894 <ll_wl_add>
    9868:	e1cf      	b.n	9c0a <hci_cmd_handle+0x6f6>
{
	struct bt_hci_cp_le_rem_dev_from_wl *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;
	u32_t status;

	status = ll_wl_remove(&cmd->addr);
    986a:	68a0      	ldr	r0, [r4, #8]
    986c:	f008 ff92 	bl	12794 <ll_wl_remove>
    9870:	e1cb      	b.n	9c0a <hci_cmd_handle+0x6f6>
    9872:	68a0      	ldr	r0, [r4, #8]
{
	struct bt_hci_cp_le_encrypt *cmd = (void *)buf->data;
	struct bt_hci_rp_le_encrypt *rp;
	u8_t enc_data[16];

	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
    9874:	aa10      	add	r2, sp, #64	; 0x40
    9876:	0001      	movs	r1, r0
    9878:	2300      	movs	r3, #0
    987a:	3110      	adds	r1, #16
    987c:	f001 f920 	bl	aac0 <ecb_encrypt>

	rp = cmd_complete(evt, sizeof(*rp));
    9880:	2111      	movs	r1, #17
    9882:	a80f      	add	r0, sp, #60	; 0x3c
    9884:	f7ff fcfe 	bl	9284 <cmd_complete>

	rp->status = 0x00;
    9888:	2300      	movs	r3, #0
	memcpy(rp->enc_data, enc_data, 16);
    988a:	2210      	movs	r2, #16

	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);

	rp = cmd_complete(evt, sizeof(*rp));

	rp->status = 0x00;
    988c:	7003      	strb	r3, [r0, #0]
	memcpy(rp->enc_data, enc_data, 16);
    988e:	a910      	add	r1, sp, #64	; 0x40
    9890:	3001      	adds	r0, #1
    9892:	f7f7 fa52 	bl	d3a <memcpy>
    9896:	e1be      	b.n	9c16 <hci_cmd_handle+0x702>
static void le_rand(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_rp_le_rand *rp;
	u8_t count = sizeof(rp->rand);

	rp = cmd_complete(evt, sizeof(*rp));
    9898:	2109      	movs	r1, #9
    989a:	a80f      	add	r0, sp, #60	; 0x3c
    989c:	f7ff fcf2 	bl	9284 <cmd_complete>
	rp->status = 0x00;
    98a0:	2300      	movs	r3, #0

	bt_rand(rp->rand, count);
    98a2:	2108      	movs	r1, #8
{
	struct bt_hci_rp_le_rand *rp;
	u8_t count = sizeof(rp->rand);

	rp = cmd_complete(evt, sizeof(*rp));
	rp->status = 0x00;
    98a4:	7003      	strb	r3, [r0, #0]

	bt_rand(rp->rand, count);
    98a6:	3001      	adds	r0, #1
    98a8:	f002 fc1a 	bl	c0e0 <bt_rand>
    98ac:	e1b3      	b.n	9c16 <hci_cmd_handle+0x702>
static void le_read_supp_states(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_rp_le_read_supp_states *rp;
	u64_t states = 0;

	rp = cmd_complete(evt, sizeof(*rp));
    98ae:	2109      	movs	r1, #9
    98b0:	a80f      	add	r0, sp, #60	; 0x3c
    98b2:	f7ff fce7 	bl	9284 <cmd_complete>
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    98b6:	228f      	movs	r2, #143	; 0x8f
	rp->status = 0x00;
    98b8:	2300      	movs	r3, #0
    98ba:	7042      	strb	r2, [r0, #1]
	dst[1] = val >> 8;
    98bc:	323d      	adds	r2, #61	; 0x3d
    98be:	7082      	strb	r2, [r0, #2]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    98c0:	3a9c      	subs	r2, #156	; 0x9c
    98c2:	70c2      	strb	r2, [r0, #3]
	dst[1] = val >> 8;
    98c4:	32bc      	adds	r2, #188	; 0xbc
    98c6:	7102      	strb	r2, [r0, #4]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    98c8:	3a2c      	subs	r2, #44	; 0x2c
    98ca:	7142      	strb	r2, [r0, #5]
	dst[1] = val >> 8;
    98cc:	3abf      	subs	r2, #191	; 0xbf
    98ce:	7003      	strb	r3, [r0, #0]
    98d0:	7182      	strb	r2, [r0, #6]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    98d2:	71c3      	strb	r3, [r0, #7]
	dst[1] = val >> 8;
    98d4:	7203      	strb	r3, [r0, #8]
    98d6:	e19e      	b.n	9c16 <hci_cmd_handle+0x702>
    98d8:	68a1      	ldr	r1, [r4, #8]
	struct bt_hci_cp_le_set_adv_param *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;
	u16_t min_interval;
	u8_t status;

	min_interval = sys_le16_to_cpu(cmd->min_interval);
    98da:	784a      	ldrb	r2, [r1, #1]
    98dc:	7808      	ldrb	r0, [r1, #0]
    98de:	0212      	lsls	r2, r2, #8

#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
	status = ll_adv_params_set(0, 0, min_interval, cmd->type,
    98e0:	4302      	orrs	r2, r0
    98e2:	2000      	movs	r0, #0
    98e4:	790b      	ldrb	r3, [r1, #4]
    98e6:	900a      	str	r0, [sp, #40]	; 0x28
    98e8:	9009      	str	r0, [sp, #36]	; 0x24
    98ea:	9008      	str	r0, [sp, #32]
    98ec:	9007      	str	r0, [sp, #28]
    98ee:	9006      	str	r0, [sp, #24]
    98f0:	9005      	str	r0, [sp, #20]
    98f2:	7b8c      	ldrb	r4, [r1, #14]
    98f4:	9404      	str	r4, [sp, #16]
    98f6:	7b4c      	ldrb	r4, [r1, #13]
    98f8:	9403      	str	r4, [sp, #12]
				   cmd->own_addr_type, cmd->direct_addr.type,
				   &cmd->direct_addr.a.val[0], cmd->channel_map,
    98fa:	1dcc      	adds	r4, r1, #7
	u8_t status;

	min_interval = sys_le16_to_cpu(cmd->min_interval);

#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
	status = ll_adv_params_set(0, 0, min_interval, cmd->type,
    98fc:	9402      	str	r4, [sp, #8]
    98fe:	798c      	ldrb	r4, [r1, #6]
    9900:	9401      	str	r4, [sp, #4]
    9902:	7949      	ldrb	r1, [r1, #5]
    9904:	9100      	str	r1, [sp, #0]
    9906:	0001      	movs	r1, r0
    9908:	f009 fba4 	bl	13054 <ll_adv_params_set>
    990c:	e17d      	b.n	9c0a <hci_cmd_handle+0x6f6>

static void le_read_adv_chan_tx_power(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_rp_le_read_chan_tx_power *rp;

	rp = cmd_complete(evt, sizeof(*rp));
    990e:	2102      	movs	r1, #2
    9910:	a80f      	add	r0, sp, #60	; 0x3c
    9912:	f7ff fcb7 	bl	9284 <cmd_complete>

	rp->status = 0x00;
    9916:	2300      	movs	r3, #0
    9918:	7003      	strb	r3, [r0, #0]

	rp->tx_power_level = 0;
    991a:	7043      	strb	r3, [r0, #1]
    991c:	e17b      	b.n	9c16 <hci_cmd_handle+0x702>
    991e:	68a3      	ldr	r3, [r4, #8]
static void le_set_adv_data(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_cp_le_set_adv_data *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;

	ll_adv_data_set(cmd->len, &cmd->data[0]);
    9920:	1c59      	adds	r1, r3, #1
    9922:	7818      	ldrb	r0, [r3, #0]
    9924:	f009 fca6 	bl	13274 <ll_adv_data_set>
    9928:	e165      	b.n	9bf6 <hci_cmd_handle+0x6e2>
    992a:	68a3      	ldr	r3, [r4, #8]
static void le_set_scan_rsp_data(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_cp_le_set_scan_rsp_data *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;

	ll_scan_data_set(cmd->len, &cmd->data[0]);
    992c:	1c59      	adds	r1, r3, #1
    992e:	7818      	ldrb	r0, [r3, #0]
    9930:	f009 fcf6 	bl	13320 <ll_scan_data_set>
    9934:	e15f      	b.n	9bf6 <hci_cmd_handle+0x6e2>
{
	struct bt_hci_cp_le_set_adv_enable *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;
	u32_t status;

	status = ll_adv_enable(cmd->enable);
    9936:	68a3      	ldr	r3, [r4, #8]
    9938:	7818      	ldrb	r0, [r3, #0]
    993a:	f009 fd2d 	bl	13398 <ll_adv_enable>

	ccst = cmd_complete(evt, sizeof(*ccst));
    993e:	2101      	movs	r1, #1
{
	struct bt_hci_cp_le_set_adv_enable *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;
	u32_t status;

	status = ll_adv_enable(cmd->enable);
    9940:	0004      	movs	r4, r0

	ccst = cmd_complete(evt, sizeof(*ccst));
    9942:	a80f      	add	r0, sp, #60	; 0x3c
    9944:	f7ff fc9e 	bl	9284 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    9948:	2300      	movs	r3, #0
    994a:	429c      	cmp	r4, r3
    994c:	d100      	bne.n	9950 <hci_cmd_handle+0x43c>
    994e:	e169      	b.n	9c24 <hci_cmd_handle+0x710>
    9950:	330c      	adds	r3, #12
    9952:	e167      	b.n	9c24 <hci_cmd_handle+0x710>
    9954:	68a2      	ldr	r2, [r4, #8]
	struct bt_hci_rp_le_ltk_req_reply *rp;
	u32_t status;
	u16_t handle;

	handle = sys_le16_to_cpu(cmd->handle);
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
    9956:	2100      	movs	r1, #0
	struct bt_hci_cp_le_ltk_req_reply *cmd = (void *)buf->data;
	struct bt_hci_rp_le_ltk_req_reply *rp;
	u32_t status;
	u16_t handle;

	handle = sys_le16_to_cpu(cmd->handle);
    9958:	7854      	ldrb	r4, [r2, #1]
    995a:	7813      	ldrb	r3, [r2, #0]
    995c:	0224      	lsls	r4, r4, #8
    995e:	431c      	orrs	r4, r3
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
    9960:	3202      	adds	r2, #2
    9962:	e006      	b.n	9972 <hci_cmd_handle+0x45e>
	struct bt_hci_cp_le_ltk_req_neg_reply *cmd = (void *)buf->data;
	struct bt_hci_rp_le_ltk_req_neg_reply *rp;
	u32_t status;
	u16_t handle;

	handle = sys_le16_to_cpu(cmd->handle);
    9964:	68a2      	ldr	r2, [r4, #8]
	status = ll_start_enc_req_send(handle, BT_HCI_ERR_PIN_OR_KEY_MISSING,
    9966:	2106      	movs	r1, #6
	struct bt_hci_cp_le_ltk_req_neg_reply *cmd = (void *)buf->data;
	struct bt_hci_rp_le_ltk_req_neg_reply *rp;
	u32_t status;
	u16_t handle;

	handle = sys_le16_to_cpu(cmd->handle);
    9968:	7813      	ldrb	r3, [r2, #0]
    996a:	7854      	ldrb	r4, [r2, #1]
	status = ll_start_enc_req_send(handle, BT_HCI_ERR_PIN_OR_KEY_MISSING,
    996c:	2200      	movs	r2, #0
	struct bt_hci_cp_le_ltk_req_neg_reply *cmd = (void *)buf->data;
	struct bt_hci_rp_le_ltk_req_neg_reply *rp;
	u32_t status;
	u16_t handle;

	handle = sys_le16_to_cpu(cmd->handle);
    996e:	0224      	lsls	r4, r4, #8
    9970:	431c      	orrs	r4, r3
	status = ll_start_enc_req_send(handle, BT_HCI_ERR_PIN_OR_KEY_MISSING,
    9972:	0020      	movs	r0, r4
    9974:	f007 ff10 	bl	11798 <ll_start_enc_req_send>
    9978:	e05f      	b.n	9a3a <hci_cmd_handle+0x526>
{
	struct bt_hci_cp_le_read_remote_features *cmd = (void *)buf->data;
	u32_t status;
	u16_t handle;

	handle = sys_le16_to_cpu(cmd->handle);
    997a:	68a2      	ldr	r2, [r4, #8]
    997c:	7850      	ldrb	r0, [r2, #1]
    997e:	7813      	ldrb	r3, [r2, #0]
    9980:	0200      	lsls	r0, r0, #8
	status = ll_feature_req_send(handle);
    9982:	4318      	orrs	r0, r3
    9984:	f007 ff4f 	bl	11826 <ll_feature_req_send>
    9988:	e0dd      	b.n	9b46 <hci_cmd_handle+0x632>
    998a:	68a2      	ldr	r2, [r4, #8]
	u16_t conn_latency;
	u32_t status;
	u16_t handle;

	handle = sys_le16_to_cpu(cmd->handle);
	conn_interval_max = sys_le16_to_cpu(cmd->conn_interval_max);
    998c:	7953      	ldrb	r3, [r2, #5]
    998e:	7911      	ldrb	r1, [r2, #4]
	u16_t conn_interval_max;
	u16_t conn_latency;
	u32_t status;
	u16_t handle;

	handle = sys_le16_to_cpu(cmd->handle);
    9990:	7850      	ldrb	r0, [r2, #1]
	conn_interval_max = sys_le16_to_cpu(cmd->conn_interval_max);
    9992:	021b      	lsls	r3, r3, #8
	supervision_timeout = sys_le16_to_cpu(cmd->supervision_timeout);

	/** @todo if peer supports LE Conn Param Req,
	* use Req cmd (1) instead of Initiate cmd (0).
	*/
	status = ll_conn_update(handle, 0, 0, conn_interval_max,
    9994:	430b      	orrs	r3, r1
	u16_t conn_interval_max;
	u16_t conn_latency;
	u32_t status;
	u16_t handle;

	handle = sys_le16_to_cpu(cmd->handle);
    9996:	7811      	ldrb	r1, [r2, #0]
    9998:	0200      	lsls	r0, r0, #8
	supervision_timeout = sys_le16_to_cpu(cmd->supervision_timeout);

	/** @todo if peer supports LE Conn Param Req,
	* use Req cmd (1) instead of Initiate cmd (0).
	*/
	status = ll_conn_update(handle, 0, 0, conn_interval_max,
    999a:	4308      	orrs	r0, r1
	u16_t handle;

	handle = sys_le16_to_cpu(cmd->handle);
	conn_interval_max = sys_le16_to_cpu(cmd->conn_interval_max);
	conn_latency = sys_le16_to_cpu(cmd->conn_latency);
	supervision_timeout = sys_le16_to_cpu(cmd->supervision_timeout);
    999c:	7a51      	ldrb	r1, [r2, #9]
    999e:	7a14      	ldrb	r4, [r2, #8]
    99a0:	0209      	lsls	r1, r1, #8

	/** @todo if peer supports LE Conn Param Req,
	* use Req cmd (1) instead of Initiate cmd (0).
	*/
	status = ll_conn_update(handle, 0, 0, conn_interval_max,
    99a2:	4321      	orrs	r1, r4
    99a4:	9101      	str	r1, [sp, #4]
	u32_t status;
	u16_t handle;

	handle = sys_le16_to_cpu(cmd->handle);
	conn_interval_max = sys_le16_to_cpu(cmd->conn_interval_max);
	conn_latency = sys_le16_to_cpu(cmd->conn_latency);
    99a6:	7991      	ldrb	r1, [r2, #6]
    99a8:	79d2      	ldrb	r2, [r2, #7]
    99aa:	0212      	lsls	r2, r2, #8
	supervision_timeout = sys_le16_to_cpu(cmd->supervision_timeout);

	/** @todo if peer supports LE Conn Param Req,
	* use Req cmd (1) instead of Initiate cmd (0).
	*/
	status = ll_conn_update(handle, 0, 0, conn_interval_max,
    99ac:	430a      	orrs	r2, r1
    99ae:	9200      	str	r2, [sp, #0]
    99b0:	2200      	movs	r2, #0
    99b2:	0011      	movs	r1, r2
    99b4:	f007 fea6 	bl	11704 <ll_conn_update>
    99b8:	e0c5      	b.n	9b46 <hci_cmd_handle+0x632>
    99ba:	68a2      	ldr	r2, [r4, #8]
	u16_t latency;
	u16_t timeout;
	u32_t status;
	u16_t handle;

	handle = sys_le16_to_cpu(cmd->handle);
    99bc:	7854      	ldrb	r4, [r2, #1]
    99be:	7813      	ldrb	r3, [r2, #0]
    99c0:	0224      	lsls	r4, r4, #8
    99c2:	431c      	orrs	r4, r3
	interval_max = sys_le16_to_cpu(cmd->interval_max);
    99c4:	7953      	ldrb	r3, [r2, #5]
    99c6:	7911      	ldrb	r1, [r2, #4]
    99c8:	021b      	lsls	r3, r3, #8
	latency = sys_le16_to_cpu(cmd->latency);
	timeout = sys_le16_to_cpu(cmd->timeout);

	status = ll_conn_update(handle, 2, 0, interval_max, latency,
    99ca:	430b      	orrs	r3, r1
	u16_t handle;

	handle = sys_le16_to_cpu(cmd->handle);
	interval_max = sys_le16_to_cpu(cmd->interval_max);
	latency = sys_le16_to_cpu(cmd->latency);
	timeout = sys_le16_to_cpu(cmd->timeout);
    99cc:	7a51      	ldrb	r1, [r2, #9]
    99ce:	7a10      	ldrb	r0, [r2, #8]
    99d0:	0209      	lsls	r1, r1, #8

	status = ll_conn_update(handle, 2, 0, interval_max, latency,
    99d2:	4301      	orrs	r1, r0
    99d4:	9101      	str	r1, [sp, #4]
	u32_t status;
	u16_t handle;

	handle = sys_le16_to_cpu(cmd->handle);
	interval_max = sys_le16_to_cpu(cmd->interval_max);
	latency = sys_le16_to_cpu(cmd->latency);
    99d6:	7991      	ldrb	r1, [r2, #6]
    99d8:	79d2      	ldrb	r2, [r2, #7]
	timeout = sys_le16_to_cpu(cmd->timeout);

	status = ll_conn_update(handle, 2, 0, interval_max, latency,
    99da:	0020      	movs	r0, r4
	u32_t status;
	u16_t handle;

	handle = sys_le16_to_cpu(cmd->handle);
	interval_max = sys_le16_to_cpu(cmd->interval_max);
	latency = sys_le16_to_cpu(cmd->latency);
    99dc:	0212      	lsls	r2, r2, #8
	timeout = sys_le16_to_cpu(cmd->timeout);

	status = ll_conn_update(handle, 2, 0, interval_max, latency,
    99de:	430a      	orrs	r2, r1
    99e0:	9200      	str	r2, [sp, #0]
    99e2:	2102      	movs	r1, #2
    99e4:	2200      	movs	r2, #0
    99e6:	f007 fe8d 	bl	11704 <ll_conn_update>
    99ea:	e026      	b.n	9a3a <hci_cmd_handle+0x526>
    99ec:	68a3      	ldr	r3, [r4, #8]
	struct bt_hci_rp_le_conn_param_req_neg_reply *rp;
	u32_t status;
	u16_t handle;

	handle = sys_le16_to_cpu(cmd->handle);
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);
    99ee:	2400      	movs	r4, #0
	struct bt_hci_cp_le_conn_param_req_neg_reply *cmd = (void *)buf->data;
	struct bt_hci_rp_le_conn_param_req_neg_reply *rp;
	u32_t status;
	u16_t handle;

	handle = sys_le16_to_cpu(cmd->handle);
    99f0:	785d      	ldrb	r5, [r3, #1]
    99f2:	781a      	ldrb	r2, [r3, #0]
    99f4:	022d      	lsls	r5, r5, #8
    99f6:	4315      	orrs	r5, r2
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);
    99f8:	2102      	movs	r1, #2
    99fa:	789a      	ldrb	r2, [r3, #2]
    99fc:	0028      	movs	r0, r5
    99fe:	9401      	str	r4, [sp, #4]
    9a00:	9400      	str	r4, [sp, #0]
    9a02:	0023      	movs	r3, r4
    9a04:	f007 fe7e 	bl	11704 <ll_conn_update>

	rp = cmd_complete(evt, sizeof(*rp));
    9a08:	2103      	movs	r1, #3
	struct bt_hci_rp_le_conn_param_req_neg_reply *rp;
	u32_t status;
	u16_t handle;

	handle = sys_le16_to_cpu(cmd->handle);
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);
    9a0a:	0006      	movs	r6, r0

	rp = cmd_complete(evt, sizeof(*rp));
    9a0c:	a80f      	add	r0, sp, #60	; 0x3c
    9a0e:	f7ff fc39 	bl	9284 <cmd_complete>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    9a12:	42a6      	cmp	r6, r4
    9a14:	d000      	beq.n	9a18 <hci_cmd_handle+0x504>
    9a16:	340c      	adds	r4, #12
	rp->handle = sys_cpu_to_le16(handle);
    9a18:	7045      	strb	r5, [r0, #1]
    9a1a:	0a2d      	lsrs	r5, r5, #8

	handle = sys_le16_to_cpu(cmd->handle);
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);

	rp = cmd_complete(evt, sizeof(*rp));
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    9a1c:	7004      	strb	r4, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    9a1e:	7085      	strb	r5, [r0, #2]
    9a20:	e0f9      	b.n	9c16 <hci_cmd_handle+0x702>
    9a22:	68a3      	ldr	r3, [r4, #8]
	struct bt_hci_rp_le_set_data_len *rp;
	u32_t status;
	u16_t tx_octets;
	u16_t handle;

	handle = sys_le16_to_cpu(cmd->handle);
    9a24:	785c      	ldrb	r4, [r3, #1]
    9a26:	781a      	ldrb	r2, [r3, #0]
    9a28:	0224      	lsls	r4, r4, #8
	tx_octets = sys_le16_to_cpu(cmd->tx_octets);
    9a2a:	78d9      	ldrb	r1, [r3, #3]
	struct bt_hci_rp_le_set_data_len *rp;
	u32_t status;
	u16_t tx_octets;
	u16_t handle;

	handle = sys_le16_to_cpu(cmd->handle);
    9a2c:	4314      	orrs	r4, r2
	tx_octets = sys_le16_to_cpu(cmd->tx_octets);
    9a2e:	789a      	ldrb	r2, [r3, #2]
    9a30:	0209      	lsls	r1, r1, #8
	/** @todo add reject_ext_ind support in ctrl.c */
	status = ll_length_req_send(handle, tx_octets);
    9a32:	4311      	orrs	r1, r2
    9a34:	0020      	movs	r0, r4
    9a36:	f007 ff38 	bl	118aa <ll_length_req_send>
    9a3a:	0005      	movs	r5, r0

	rp = cmd_complete(evt, sizeof(*rp));
    9a3c:	2103      	movs	r1, #3
    9a3e:	a80f      	add	r0, sp, #60	; 0x3c
    9a40:	f7ff fc20 	bl	9284 <cmd_complete>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    9a44:	2300      	movs	r3, #0
    9a46:	429d      	cmp	r5, r3
    9a48:	d000      	beq.n	9a4c <hci_cmd_handle+0x538>
    9a4a:	330c      	adds	r3, #12
	rp->handle = sys_cpu_to_le16(handle);
    9a4c:	7044      	strb	r4, [r0, #1]
    9a4e:	0a24      	lsrs	r4, r4, #8
	tx_octets = sys_le16_to_cpu(cmd->tx_octets);
	/** @todo add reject_ext_ind support in ctrl.c */
	status = ll_length_req_send(handle, tx_octets);

	rp = cmd_complete(evt, sizeof(*rp));
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    9a50:	7003      	strb	r3, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    9a52:	7084      	strb	r4, [r0, #2]
    9a54:	e0df      	b.n	9c16 <hci_cmd_handle+0x702>

static void le_read_default_data_len(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_rp_le_read_default_data_len *rp;

	rp = cmd_complete(evt, sizeof(*rp));
    9a56:	2105      	movs	r1, #5
    9a58:	a80f      	add	r0, sp, #60	; 0x3c
    9a5a:	f7ff fc13 	bl	9284 <cmd_complete>
    9a5e:	0004      	movs	r4, r0

	ll_length_default_get(&rp->max_tx_octets, &rp->max_tx_time);
    9a60:	1cc1      	adds	r1, r0, #3
    9a62:	3001      	adds	r0, #1
    9a64:	f007 ff44 	bl	118f0 <ll_length_default_get>
    9a68:	e091      	b.n	9b8e <hci_cmd_handle+0x67a>
    9a6a:	68a3      	ldr	r3, [r4, #8]
{
	struct bt_hci_cp_le_write_default_data_len *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;
	u32_t status;

	status = ll_length_default_set(cmd->max_tx_octets, cmd->max_tx_time);
    9a6c:	78d9      	ldrb	r1, [r3, #3]
    9a6e:	789a      	ldrb	r2, [r3, #2]
    9a70:	7858      	ldrb	r0, [r3, #1]
    9a72:	0209      	lsls	r1, r1, #8
    9a74:	4311      	orrs	r1, r2
    9a76:	781a      	ldrb	r2, [r3, #0]
    9a78:	0200      	lsls	r0, r0, #8
    9a7a:	4310      	orrs	r0, r2
    9a7c:	f007 ff42 	bl	11904 <ll_length_default_set>
    9a80:	e039      	b.n	9af6 <hci_cmd_handle+0x5e2>

static void le_read_max_data_len(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_rp_le_read_max_data_len *rp;

	rp = cmd_complete(evt, sizeof(*rp));
    9a82:	2109      	movs	r1, #9
    9a84:	a80f      	add	r0, sp, #60	; 0x3c
    9a86:	f7ff fbfd 	bl	9284 <cmd_complete>
    9a8a:	0004      	movs	r4, r0

	ll_length_max_get(&rp->max_tx_octets, &rp->max_tx_time,
    9a8c:	1dc3      	adds	r3, r0, #7
    9a8e:	1d42      	adds	r2, r0, #5
    9a90:	1cc1      	adds	r1, r0, #3
    9a92:	3001      	adds	r0, #1
    9a94:	f007 ff3e 	bl	11914 <ll_length_max_get>
    9a98:	e079      	b.n	9b8e <hci_cmd_handle+0x67a>
	struct bt_hci_cp_le_read_phy *cmd = (void *) buf->data;
	struct bt_hci_rp_le_read_phy *rp;
	u16_t handle;
	u32_t status;

	handle = sys_le16_to_cpu(cmd->handle);
    9a9a:	68a3      	ldr	r3, [r4, #8]

	rp = cmd_complete(evt, sizeof(*rp));
    9a9c:	2105      	movs	r1, #5
	struct bt_hci_cp_le_read_phy *cmd = (void *) buf->data;
	struct bt_hci_rp_le_read_phy *rp;
	u16_t handle;
	u32_t status;

	handle = sys_le16_to_cpu(cmd->handle);
    9a9e:	785d      	ldrb	r5, [r3, #1]
    9aa0:	781a      	ldrb	r2, [r3, #0]
    9aa2:	022d      	lsls	r5, r5, #8

	rp = cmd_complete(evt, sizeof(*rp));
    9aa4:	a80f      	add	r0, sp, #60	; 0x3c
	struct bt_hci_cp_le_read_phy *cmd = (void *) buf->data;
	struct bt_hci_rp_le_read_phy *rp;
	u16_t handle;
	u32_t status;

	handle = sys_le16_to_cpu(cmd->handle);
    9aa6:	4315      	orrs	r5, r2

	rp = cmd_complete(evt, sizeof(*rp));
    9aa8:	f7ff fbec 	bl	9284 <cmd_complete>

	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
    9aac:	1d02      	adds	r2, r0, #4
    9aae:	1cc1      	adds	r1, r0, #3
	u16_t handle;
	u32_t status;

	handle = sys_le16_to_cpu(cmd->handle);

	rp = cmd_complete(evt, sizeof(*rp));
    9ab0:	0004      	movs	r4, r0

	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
    9ab2:	0028      	movs	r0, r5
    9ab4:	f007 ff37 	bl	11926 <ll_phy_get>

	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    9ab8:	2300      	movs	r3, #0
    9aba:	4298      	cmp	r0, r3
    9abc:	d000      	beq.n	9ac0 <hci_cmd_handle+0x5ac>
    9abe:	330c      	adds	r3, #12
	rp->handle = sys_cpu_to_le16(handle);
    9ac0:	7065      	strb	r5, [r4, #1]
    9ac2:	0a2d      	lsrs	r5, r5, #8

	rp = cmd_complete(evt, sizeof(*rp));

	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);

	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    9ac4:	7023      	strb	r3, [r4, #0]
 * @return least significant bit set, 0 if @a op is 0
 */

static ALWAYS_INLINE unsigned int find_lsb_set(u32_t op)
{
	return __builtin_ffs(op);
    9ac6:	78e0      	ldrb	r0, [r4, #3]
	rp->handle = sys_cpu_to_le16(handle);
    9ac8:	70a5      	strb	r5, [r4, #2]
    9aca:	f7f6 fd2b 	bl	524 <__ffssi2>
	rp->tx_phy = find_lsb_set(rp->tx_phy);
    9ace:	70e0      	strb	r0, [r4, #3]
    9ad0:	7920      	ldrb	r0, [r4, #4]
    9ad2:	f7f6 fd27 	bl	524 <__ffssi2>
	rp->rx_phy = find_lsb_set(rp->rx_phy);
    9ad6:	7120      	strb	r0, [r4, #4]
    9ad8:	e09d      	b.n	9c16 <hci_cmd_handle+0x702>
    9ada:	68a3      	ldr	r3, [r4, #8]
{
	struct bt_hci_cp_le_set_default_phy *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;
	u32_t status;

	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    9adc:	781a      	ldrb	r2, [r3, #0]
    9ade:	07d1      	lsls	r1, r2, #31
    9ae0:	d501      	bpl.n	9ae6 <hci_cmd_handle+0x5d2>
		cmd->tx_phys = 0x07;
    9ae2:	2107      	movs	r1, #7
    9ae4:	7059      	strb	r1, [r3, #1]
	}
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    9ae6:	0792      	lsls	r2, r2, #30
    9ae8:	d501      	bpl.n	9aee <hci_cmd_handle+0x5da>
		cmd->rx_phys = 0x07;
    9aea:	2207      	movs	r2, #7
    9aec:	709a      	strb	r2, [r3, #2]
	}

	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
    9aee:	7899      	ldrb	r1, [r3, #2]
    9af0:	7858      	ldrb	r0, [r3, #1]
    9af2:	f007 ff2f 	bl	11954 <ll_phy_default_set>
    9af6:	0004      	movs	r4, r0

	ccst = cmd_complete(evt, sizeof(*ccst));
    9af8:	2101      	movs	r1, #1
    9afa:	a80f      	add	r0, sp, #60	; 0x3c
    9afc:	f7ff fbc2 	bl	9284 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_INVALID_LL_PARAM;
    9b00:	2300      	movs	r3, #0
    9b02:	429c      	cmp	r4, r3
    9b04:	d100      	bne.n	9b08 <hci_cmd_handle+0x5f4>
    9b06:	e08d      	b.n	9c24 <hci_cmd_handle+0x710>
    9b08:	331e      	adds	r3, #30
    9b0a:	e08b      	b.n	9c24 <hci_cmd_handle+0x710>
    9b0c:	68a1      	ldr	r1, [r4, #8]
	struct bt_hci_cp_le_set_phy *cmd = (void *)buf->data;
	u32_t status;
	u16_t handle;
	u16_t phy_opts;

	handle = sys_le16_to_cpu(cmd->handle);
    9b0e:	7848      	ldrb	r0, [r1, #1]
    9b10:	780b      	ldrb	r3, [r1, #0]
    9b12:	0200      	lsls	r0, r0, #8
    9b14:	4318      	orrs	r0, r3
	phy_opts = sys_le16_to_cpu(cmd->phy_opts);
    9b16:	798b      	ldrb	r3, [r1, #6]
    9b18:	794c      	ldrb	r4, [r1, #5]

	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    9b1a:	788a      	ldrb	r2, [r1, #2]
	u32_t status;
	u16_t handle;
	u16_t phy_opts;

	handle = sys_le16_to_cpu(cmd->handle);
	phy_opts = sys_le16_to_cpu(cmd->phy_opts);
    9b1c:	021b      	lsls	r3, r3, #8
    9b1e:	4323      	orrs	r3, r4

	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    9b20:	07d4      	lsls	r4, r2, #31
    9b22:	d501      	bpl.n	9b28 <hci_cmd_handle+0x614>
		cmd->tx_phys = 0x07;
    9b24:	2407      	movs	r4, #7
    9b26:	70cc      	strb	r4, [r1, #3]
	}
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    9b28:	0792      	lsls	r2, r2, #30
    9b2a:	d501      	bpl.n	9b30 <hci_cmd_handle+0x61c>
		cmd->rx_phys = 0x07;
    9b2c:	2207      	movs	r2, #7
    9b2e:	710a      	strb	r2, [r1, #4]
	}
	if (phy_opts & 0x03) {
		phy_opts -= 1;
		phy_opts &= 1;
	} else {
		phy_opts = 0;
    9b30:	2200      	movs	r2, #0
		cmd->tx_phys = 0x07;
	}
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
		cmd->rx_phys = 0x07;
	}
	if (phy_opts & 0x03) {
    9b32:	079c      	lsls	r4, r3, #30
    9b34:	d002      	beq.n	9b3c <hci_cmd_handle+0x628>
		phy_opts -= 1;
    9b36:	1e5a      	subs	r2, r3, #1
		phy_opts &= 1;
    9b38:	2301      	movs	r3, #1
    9b3a:	401a      	ands	r2, r3
	} else {
		phy_opts = 0;
	}

	status = ll_phy_req_send(handle, cmd->tx_phys, phy_opts,
    9b3c:	790b      	ldrb	r3, [r1, #4]
    9b3e:	b2d2      	uxtb	r2, r2
    9b40:	78c9      	ldrb	r1, [r1, #3]
    9b42:	f007 ff0f 	bl	11964 <ll_phy_req_send>
				 cmd->rx_phys);

	*evt = cmd_status((!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED);
    9b46:	2300      	movs	r3, #0
    9b48:	4298      	cmp	r0, r3
    9b4a:	d000      	beq.n	9b4e <hci_cmd_handle+0x63a>
    9b4c:	330c      	adds	r3, #12
    9b4e:	0018      	movs	r0, r3
    9b50:	f7ff fb7c 	bl	924c <cmd_status>
    9b54:	900f      	str	r0, [sp, #60]	; 0x3c
    9b56:	e05e      	b.n	9c16 <hci_cmd_handle+0x702>
    9b58:	68a0      	ldr	r0, [r4, #8]
{
	struct bt_hci_cp_le_add_dev_to_rl *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;
	u32_t status;

	status = ll_rl_add(&cmd->peer_id_addr, cmd->peer_irk, cmd->local_irk);
    9b5a:	0002      	movs	r2, r0
    9b5c:	1dc1      	adds	r1, r0, #7
    9b5e:	3217      	adds	r2, #23
    9b60:	f009 f8a6 	bl	12cb0 <ll_rl_add>
    9b64:	e051      	b.n	9c0a <hci_cmd_handle+0x6f6>
{
	struct bt_hci_cp_le_rem_dev_from_rl *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;
	u32_t status;

	status = ll_rl_remove(&cmd->peer_id_addr);
    9b66:	68a0      	ldr	r0, [r4, #8]
    9b68:	f009 f940 	bl	12dec <ll_rl_remove>
    9b6c:	e04d      	b.n	9c0a <hci_cmd_handle+0x6f6>
}

static void le_clear_rl(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_evt_cc_status *ccst;
	ccst = cmd_complete(evt, sizeof(*ccst));
    9b6e:	2101      	movs	r1, #1
    9b70:	a80f      	add	r0, sp, #60	; 0x3c
    9b72:	f7ff fb87 	bl	9284 <cmd_complete>
    9b76:	0004      	movs	r4, r0

	ccst->status = ll_rl_clear();
    9b78:	f009 f87e 	bl	12c78 <ll_rl_clear>
    9b7c:	e032      	b.n	9be4 <hci_cmd_handle+0x6d0>

static void le_read_rl_size(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_rp_le_read_rl_size *rp;

	rp = cmd_complete(evt, sizeof(*rp));
    9b7e:	2102      	movs	r1, #2
    9b80:	a80f      	add	r0, sp, #60	; 0x3c
    9b82:	f7ff fb7f 	bl	9284 <cmd_complete>
    9b86:	0004      	movs	r4, r0

	rp->rl_size = ll_rl_size_get();
    9b88:	f009 f874 	bl	12c74 <ll_rl_size_get>
    9b8c:	7060      	strb	r0, [r4, #1]
	rp->status = 0x00;
    9b8e:	2300      	movs	r3, #0
    9b90:	7023      	strb	r3, [r4, #0]
    9b92:	e040      	b.n	9c16 <hci_cmd_handle+0x702>
	memcpy(dst, src, sizeof(*dst));
}

static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    9b94:	2207      	movs	r2, #7
    9b96:	68a1      	ldr	r1, [r4, #8]
    9b98:	a810      	add	r0, sp, #64	; 0x40
    9b9a:	f7f7 f8ce 	bl	d3a <memcpy>
	struct bt_hci_cp_le_read_peer_rpa *cmd = (void *)buf->data;
	struct bt_hci_rp_le_read_peer_rpa *rp;
	bt_addr_le_t peer_id_addr;

	bt_addr_le_copy(&peer_id_addr, &cmd->peer_id_addr);
	rp = cmd_complete(evt, sizeof(*rp));
    9b9e:	2107      	movs	r1, #7
    9ba0:	a80f      	add	r0, sp, #60	; 0x3c
    9ba2:	f7ff fb6f 	bl	9284 <cmd_complete>
    9ba6:	0004      	movs	r4, r0

	rp->status = ll_rl_prpa_get(&peer_id_addr, &rp->peer_rpa);
    9ba8:	1c41      	adds	r1, r0, #1
    9baa:	a810      	add	r0, sp, #64	; 0x40
    9bac:	f009 f98c 	bl	12ec8 <ll_rl_prpa_get>
    9bb0:	e018      	b.n	9be4 <hci_cmd_handle+0x6d0>
    9bb2:	2207      	movs	r2, #7
    9bb4:	68a1      	ldr	r1, [r4, #8]
    9bb6:	a810      	add	r0, sp, #64	; 0x40
    9bb8:	f7f7 f8bf 	bl	d3a <memcpy>
	struct bt_hci_cp_le_read_local_rpa *cmd = (void *)buf->data;
	struct bt_hci_rp_le_read_local_rpa *rp;
	bt_addr_le_t peer_id_addr;

	bt_addr_le_copy(&peer_id_addr, &cmd->peer_id_addr);
	rp = cmd_complete(evt, sizeof(*rp));
    9bbc:	2107      	movs	r1, #7
    9bbe:	a80f      	add	r0, sp, #60	; 0x3c
    9bc0:	f7ff fb60 	bl	9284 <cmd_complete>
    9bc4:	0004      	movs	r4, r0

	rp->status = ll_rl_lrpa_get(&peer_id_addr, &rp->local_rpa);
    9bc6:	1c41      	adds	r1, r0, #1
    9bc8:	a810      	add	r0, sp, #64	; 0x40
    9bca:	f009 f995 	bl	12ef8 <ll_rl_lrpa_get>
    9bce:	e009      	b.n	9be4 <hci_cmd_handle+0x6d0>

static void le_set_addr_res_enable(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_cp_le_set_addr_res_enable *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;
	u8_t enable = cmd->enable;
    9bd0:	68a3      	ldr	r3, [r4, #8]

	ccst = cmd_complete(evt, sizeof(*ccst));
    9bd2:	2101      	movs	r1, #1
    9bd4:	a80f      	add	r0, sp, #60	; 0x3c

static void le_set_addr_res_enable(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_cp_le_set_addr_res_enable *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;
	u8_t enable = cmd->enable;
    9bd6:	781d      	ldrb	r5, [r3, #0]

	ccst = cmd_complete(evt, sizeof(*ccst));
    9bd8:	f7ff fb54 	bl	9284 <cmd_complete>
    9bdc:	0004      	movs	r4, r0
	ccst->status = ll_rl_enable(enable);
    9bde:	0028      	movs	r0, r5
    9be0:	f009 f9a2 	bl	12f28 <ll_rl_enable>
    9be4:	7020      	strb	r0, [r4, #0]
    9be6:	e016      	b.n	9c16 <hci_cmd_handle+0x702>

static void le_set_rpa_timeout(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_cp_le_set_rpa_timeout *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;
	u16_t timeout = sys_le16_to_cpu(cmd->rpa_timeout);
    9be8:	68a2      	ldr	r2, [r4, #8]
    9bea:	7850      	ldrb	r0, [r2, #1]
    9bec:	7813      	ldrb	r3, [r2, #0]
    9bee:	0200      	lsls	r0, r0, #8

	ll_rl_timeout_set(timeout);
    9bf0:	4318      	orrs	r0, r3
    9bf2:	f009 f9b1 	bl	12f58 <ll_rl_timeout_set>

	ccst = cmd_complete(evt, sizeof(*ccst));
    9bf6:	2101      	movs	r1, #1
    9bf8:	a80f      	add	r0, sp, #60	; 0x3c
    9bfa:	f7ff fb43 	bl	9284 <cmd_complete>
	ccst->status = 0x00;
    9bfe:	2300      	movs	r3, #0
    9c00:	e010      	b.n	9c24 <hci_cmd_handle+0x710>
    9c02:	68a0      	ldr	r0, [r4, #8]
{
	struct bt_hci_cp_le_set_privacy_mode *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;
	u32_t status;

	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
    9c04:	79c1      	ldrb	r1, [r0, #7]
    9c06:	f009 f9af 	bl	12f68 <ll_priv_mode_set>
    9c0a:	0004      	movs	r4, r0

	ccst = cmd_complete(evt, sizeof(*ccst));
    9c0c:	2101      	movs	r1, #1
    9c0e:	a80f      	add	r0, sp, #60	; 0x3c
    9c10:	f7ff fb38 	bl	9284 <cmd_complete>
	ccst->status = status;
    9c14:	7004      	strb	r4, [r0, #0]
	if (err == -EINVAL) {
		ccst = cmd_complete(&evt, sizeof(*ccst));
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
	}

	return evt;
    9c16:	980f      	ldr	r0, [sp, #60]	; 0x3c
    9c18:	e006      	b.n	9c28 <hci_cmd_handle+0x714>
		err = -EINVAL;
		break;
	}

	if (err == -EINVAL) {
		ccst = cmd_complete(&evt, sizeof(*ccst));
    9c1a:	2101      	movs	r1, #1
    9c1c:	a80f      	add	r0, sp, #60	; 0x3c
    9c1e:	f7ff fb31 	bl	9284 <cmd_complete>
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
    9c22:	2301      	movs	r3, #1
    9c24:	7003      	strb	r3, [r0, #0]
    9c26:	e7f6      	b.n	9c16 <hci_cmd_handle+0x702>
	}

	return evt;
}
    9c28:	b015      	add	sp, #84	; 0x54
    9c2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

00009c2c <hci_acl_handle>:

int hci_acl_handle(struct net_buf *buf)
{
    9c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct pdu_data *pdu_data;
	u16_t handle;
	u8_t flags;
	u16_t len;

	if (buf->len < sizeof(*acl)) {
    9c2e:	8983      	ldrh	r3, [r0, #12]

	return evt;
}

int hci_acl_handle(struct net_buf *buf)
{
    9c30:	b085      	sub	sp, #20
    9c32:	0005      	movs	r5, r0
	struct pdu_data *pdu_data;
	u16_t handle;
	u8_t flags;
	u16_t len;

	if (buf->len < sizeof(*acl)) {
    9c34:	2b03      	cmp	r3, #3
    9c36:	d808      	bhi.n	9c4a <hci_acl_handle+0x1e>
		BT_ERR("No HCI ACL header");
    9c38:	4b30      	ldr	r3, [pc, #192]	; (9cfc <hci_acl_handle+0xd0>)
    9c3a:	4a31      	ldr	r2, [pc, #196]	; (9d00 <hci_acl_handle+0xd4>)
    9c3c:	9301      	str	r3, [sp, #4]
    9c3e:	4b31      	ldr	r3, [pc, #196]	; (9d04 <hci_acl_handle+0xd8>)
    9c40:	4931      	ldr	r1, [pc, #196]	; (9d08 <hci_acl_handle+0xdc>)
    9c42:	9300      	str	r3, [sp, #0]
    9c44:	4831      	ldr	r0, [pc, #196]	; (9d0c <hci_acl_handle+0xe0>)
    9c46:	4b32      	ldr	r3, [pc, #200]	; (9d10 <hci_acl_handle+0xe4>)
    9c48:	e017      	b.n	9c7a <hci_acl_handle+0x4e>
		return -EINVAL;
	}

	acl = (void *)buf->data;
    9c4a:	6883      	ldr	r3, [r0, #8]
	len = sys_le16_to_cpu(acl->len);
	handle = sys_le16_to_cpu(acl->handle);
	net_buf_pull(buf, sizeof(*acl));
    9c4c:	2104      	movs	r1, #4
		BT_ERR("No HCI ACL header");
		return -EINVAL;
	}

	acl = (void *)buf->data;
	len = sys_le16_to_cpu(acl->len);
    9c4e:	78de      	ldrb	r6, [r3, #3]
    9c50:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(acl->handle);
    9c52:	785c      	ldrb	r4, [r3, #1]
		BT_ERR("No HCI ACL header");
		return -EINVAL;
	}

	acl = (void *)buf->data;
	len = sys_le16_to_cpu(acl->len);
    9c54:	0236      	lsls	r6, r6, #8
    9c56:	4316      	orrs	r6, r2
	handle = sys_le16_to_cpu(acl->handle);
    9c58:	781a      	ldrb	r2, [r3, #0]
    9c5a:	0224      	lsls	r4, r4, #8
	net_buf_pull(buf, sizeof(*acl));
    9c5c:	3008      	adds	r0, #8
		return -EINVAL;
	}

	acl = (void *)buf->data;
	len = sys_le16_to_cpu(acl->len);
	handle = sys_le16_to_cpu(acl->handle);
    9c5e:	4314      	orrs	r4, r2
	net_buf_pull(buf, sizeof(*acl));
    9c60:	f009 fcd1 	bl	13606 <net_buf_simple_pull>

	if (buf->len < len) {
    9c64:	89ab      	ldrh	r3, [r5, #12]
    9c66:	42b3      	cmp	r3, r6
    9c68:	d20a      	bcs.n	9c80 <hci_acl_handle+0x54>
		BT_ERR("Invalid HCI ACL packet length");
    9c6a:	4b24      	ldr	r3, [pc, #144]	; (9cfc <hci_acl_handle+0xd0>)
    9c6c:	4a24      	ldr	r2, [pc, #144]	; (9d00 <hci_acl_handle+0xd4>)
    9c6e:	9301      	str	r3, [sp, #4]
    9c70:	4b24      	ldr	r3, [pc, #144]	; (9d04 <hci_acl_handle+0xd8>)
    9c72:	4925      	ldr	r1, [pc, #148]	; (9d08 <hci_acl_handle+0xdc>)
    9c74:	9300      	str	r3, [sp, #0]
    9c76:	4827      	ldr	r0, [pc, #156]	; (9d14 <hci_acl_handle+0xe8>)
    9c78:	4b25      	ldr	r3, [pc, #148]	; (9d10 <hci_acl_handle+0xe4>)
    9c7a:	f7f7 fe81 	bl	1980 <printk>
    9c7e:	e038      	b.n	9cf2 <hci_acl_handle+0xc6>
		return -EINVAL;
	}

	/* assigning flags first because handle will be overwritten */
	flags = bt_acl_flags(handle);
    9c80:	0b27      	lsrs	r7, r4, #12
	handle = bt_acl_handle(handle);
    9c82:	0524      	lsls	r4, r4, #20
    9c84:	0d23      	lsrs	r3, r4, #20
    9c86:	9303      	str	r3, [sp, #12]

	radio_pdu_node_tx = radio_tx_mem_acquire();
    9c88:	f007 ff86 	bl	11b98 <radio_tx_mem_acquire>
    9c8c:	1e04      	subs	r4, r0, #0
	if (!radio_pdu_node_tx) {
    9c8e:	d10b      	bne.n	9ca8 <hci_acl_handle+0x7c>
		BT_ERR("Tx Buffer Overflow");
    9c90:	4b1a      	ldr	r3, [pc, #104]	; (9cfc <hci_acl_handle+0xd0>)
    9c92:	4a1b      	ldr	r2, [pc, #108]	; (9d00 <hci_acl_handle+0xd4>)
    9c94:	9301      	str	r3, [sp, #4]
    9c96:	4b1b      	ldr	r3, [pc, #108]	; (9d04 <hci_acl_handle+0xd8>)
    9c98:	491b      	ldr	r1, [pc, #108]	; (9d08 <hci_acl_handle+0xdc>)
    9c9a:	9300      	str	r3, [sp, #0]
    9c9c:	481e      	ldr	r0, [pc, #120]	; (9d18 <hci_acl_handle+0xec>)
    9c9e:	4b1c      	ldr	r3, [pc, #112]	; (9d10 <hci_acl_handle+0xe4>)
    9ca0:	f7f7 fe6e 	bl	1980 <printk>
		return -ENOBUFS;
    9ca4:	2337      	movs	r3, #55	; 0x37
    9ca6:	e025      	b.n	9cf4 <hci_acl_handle+0xc8>
    9ca8:	2203      	movs	r2, #3
    9caa:	7903      	ldrb	r3, [r0, #4]
	}

	pdu_data = (struct pdu_data *)radio_pdu_node_tx->pdu_data;
	if (flags == BT_ACL_START_NO_FLUSH || flags == BT_ACL_START) {
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
    9cac:	4393      	bics	r3, r2
		BT_ERR("Tx Buffer Overflow");
		return -ENOBUFS;
	}

	pdu_data = (struct pdu_data *)radio_pdu_node_tx->pdu_data;
	if (flags == BT_ACL_START_NO_FLUSH || flags == BT_ACL_START) {
    9cae:	2f00      	cmp	r7, #0
    9cb0:	d002      	beq.n	9cb8 <hci_acl_handle+0x8c>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
	} else {
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    9cb2:	2201      	movs	r2, #1
		BT_ERR("Tx Buffer Overflow");
		return -ENOBUFS;
	}

	pdu_data = (struct pdu_data *)radio_pdu_node_tx->pdu_data;
	if (flags == BT_ACL_START_NO_FLUSH || flags == BT_ACL_START) {
    9cb4:	2f02      	cmp	r7, #2
    9cb6:	d100      	bne.n	9cba <hci_acl_handle+0x8e>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
    9cb8:	2202      	movs	r2, #2
	} else {
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    9cba:	4313      	orrs	r3, r2
    9cbc:	7123      	strb	r3, [r4, #4]
	}
	pdu_data->len = len;
    9cbe:	7166      	strb	r6, [r4, #5]
	memcpy(&pdu_data->payload.lldata[0], buf->data, len);
    9cc0:	0032      	movs	r2, r6
    9cc2:	68a9      	ldr	r1, [r5, #8]
    9cc4:	1de0      	adds	r0, r4, #7
    9cc6:	f7f7 f838 	bl	d3a <memcpy>

	if (radio_tx_mem_enqueue(handle, radio_pdu_node_tx)) {
    9cca:	0021      	movs	r1, r4
    9ccc:	9803      	ldr	r0, [sp, #12]
    9cce:	f007 ff77 	bl	11bc0 <radio_tx_mem_enqueue>
		BT_ERR("Invalid Tx Enqueue");
		radio_tx_mem_release(radio_pdu_node_tx);
		return -EINVAL;
	}

	return 0;
    9cd2:	2300      	movs	r3, #0
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
	}
	pdu_data->len = len;
	memcpy(&pdu_data->payload.lldata[0], buf->data, len);

	if (radio_tx_mem_enqueue(handle, radio_pdu_node_tx)) {
    9cd4:	4298      	cmp	r0, r3
    9cd6:	d00e      	beq.n	9cf6 <hci_acl_handle+0xca>
		BT_ERR("Invalid Tx Enqueue");
    9cd8:	4b08      	ldr	r3, [pc, #32]	; (9cfc <hci_acl_handle+0xd0>)
    9cda:	4a09      	ldr	r2, [pc, #36]	; (9d00 <hci_acl_handle+0xd4>)
    9cdc:	9301      	str	r3, [sp, #4]
    9cde:	4b09      	ldr	r3, [pc, #36]	; (9d04 <hci_acl_handle+0xd8>)
    9ce0:	4909      	ldr	r1, [pc, #36]	; (9d08 <hci_acl_handle+0xdc>)
    9ce2:	9300      	str	r3, [sp, #0]
    9ce4:	480d      	ldr	r0, [pc, #52]	; (9d1c <hci_acl_handle+0xf0>)
    9ce6:	4b0a      	ldr	r3, [pc, #40]	; (9d10 <hci_acl_handle+0xe4>)
    9ce8:	f7f7 fe4a 	bl	1980 <printk>
		radio_tx_mem_release(radio_pdu_node_tx);
    9cec:	0020      	movs	r0, r4
    9cee:	f007 ff5d 	bl	11bac <radio_tx_mem_release>
		return -EINVAL;
    9cf2:	2316      	movs	r3, #22
    9cf4:	425b      	negs	r3, r3
	}

	return 0;
}
    9cf6:	0018      	movs	r0, r3
    9cf8:	b005      	add	sp, #20
    9cfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9cfc:	000154c4 	.word	0x000154c4
    9d00:	00015484 	.word	0x00015484
    9d04:	000154c9 	.word	0x000154c9
    9d08:	0001548b 	.word	0x0001548b
    9d0c:	000168bb 	.word	0x000168bb
    9d10:	00017fac 	.word	0x00017fac
    9d14:	000168dd 	.word	0x000168dd
    9d18:	0001690b 	.word	0x0001690b
    9d1c:	0001692e 	.word	0x0001692e

00009d20 <hci_acl_encode>:
	}
}

#if defined(CONFIG_BLUETOOTH_CONN)
void hci_acl_encode(struct radio_pdu_node_rx *node_rx, struct net_buf *buf)
{
    9d20:	b573      	push	{r0, r1, r4, r5, r6, lr}
	u8_t *data;

	pdu_data = (struct pdu_data *)node_rx->pdu_data;
	handle = node_rx->hdr.handle;

	switch (pdu_data->ll_id) {
    9d22:	7a03      	ldrb	r3, [r0, #8]
	}
}

#if defined(CONFIG_BLUETOOTH_CONN)
void hci_acl_encode(struct radio_pdu_node_rx *node_rx, struct net_buf *buf)
{
    9d24:	0004      	movs	r4, r0
	u8_t *data;

	pdu_data = (struct pdu_data *)node_rx->pdu_data;
	handle = node_rx->hdr.handle;

	switch (pdu_data->ll_id) {
    9d26:	079b      	lsls	r3, r3, #30
    9d28:	0f9b      	lsrs	r3, r3, #30
    9d2a:	3b01      	subs	r3, #1
    9d2c:	b2db      	uxtb	r3, r3
	u16_t handle_flags;
	u16_t handle;
	u8_t *data;

	pdu_data = (struct pdu_data *)node_rx->pdu_data;
	handle = node_rx->hdr.handle;
    9d2e:	88c5      	ldrh	r5, [r0, #6]

	switch (pdu_data->ll_id) {
    9d30:	2b01      	cmp	r3, #1
    9d32:	d821      	bhi.n	9d78 <hci_acl_encode+0x58>
	case PDU_DATA_LLID_DATA_CONTINUE:
	case PDU_DATA_LLID_DATA_START:
		acl = (void *)net_buf_add(buf, sizeof(*acl));
    9d34:	3108      	adds	r1, #8
    9d36:	000e      	movs	r6, r1
    9d38:	2104      	movs	r1, #4
    9d3a:	0030      	movs	r0, r6
    9d3c:	f009 fc42 	bl	135c4 <net_buf_simple_add>
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
    9d40:	2303      	movs	r3, #3
    9d42:	7a22      	ldrb	r2, [r4, #8]
    9d44:	4013      	ands	r3, r2
    9d46:	2b02      	cmp	r3, #2
    9d48:	d102      	bne.n	9d50 <hci_acl_encode+0x30>
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
    9d4a:	2380      	movs	r3, #128	; 0x80
    9d4c:	019b      	lsls	r3, r3, #6
    9d4e:	e001      	b.n	9d54 <hci_acl_encode+0x34>
		} else {
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
    9d50:	2380      	movs	r3, #128	; 0x80
    9d52:	015b      	lsls	r3, r3, #5
    9d54:	431d      	orrs	r5, r3
		}
		acl->handle = sys_cpu_to_le16(handle_flags);
    9d56:	7005      	strb	r5, [r0, #0]
    9d58:	0a2d      	lsrs	r5, r5, #8
    9d5a:	7045      	strb	r5, [r0, #1]
		acl->len = sys_cpu_to_le16(pdu_data->len);
    9d5c:	7a63      	ldrb	r3, [r4, #9]
    9d5e:	7083      	strb	r3, [r0, #2]
    9d60:	2300      	movs	r3, #0
    9d62:	70c3      	strb	r3, [r0, #3]
		data = (void *)net_buf_add(buf, pdu_data->len);
    9d64:	7a61      	ldrb	r1, [r4, #9]
    9d66:	0030      	movs	r0, r6
    9d68:	f009 fc2c 	bl	135c4 <net_buf_simple_add>
		memcpy(data, &pdu_data->payload.lldata[0], pdu_data->len);
    9d6c:	0021      	movs	r1, r4
    9d6e:	7a62      	ldrb	r2, [r4, #9]
    9d70:	310b      	adds	r1, #11
    9d72:	f7f6 ffe2 	bl	d3a <memcpy>
	default:
		LL_ASSERT(0);
		break;
	}

}
    9d76:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
		}
#endif
		break;

	default:
		LL_ASSERT(0);
    9d78:	4b06      	ldr	r3, [pc, #24]	; (9d94 <hci_acl_encode+0x74>)
    9d7a:	4a07      	ldr	r2, [pc, #28]	; (9d98 <hci_acl_encode+0x78>)
    9d7c:	9301      	str	r3, [sp, #4]
    9d7e:	4b07      	ldr	r3, [pc, #28]	; (9d9c <hci_acl_encode+0x7c>)
    9d80:	4907      	ldr	r1, [pc, #28]	; (9da0 <hci_acl_encode+0x80>)
    9d82:	9300      	str	r3, [sp, #0]
    9d84:	4807      	ldr	r0, [pc, #28]	; (9da4 <hci_acl_encode+0x84>)
    9d86:	4b08      	ldr	r3, [pc, #32]	; (9da8 <hci_acl_encode+0x88>)
    9d88:	f7f7 fdfa 	bl	1980 <printk>
    9d8c:	b662      	cpsie	i
    9d8e:	2004      	movs	r0, #4
    9d90:	df02      	svc	2
    9d92:	46c0      	nop			; (mov r8, r8)
    9d94:	000154c4 	.word	0x000154c4
    9d98:	00015484 	.word	0x00015484
    9d9c:	000154c9 	.word	0x000154c9
    9da0:	0001548b 	.word	0x0001548b
    9da4:	00015b21 	.word	0x00015b21
    9da8:	00017f6a 	.word	0x00017f6a

00009dac <hci_evt_encode>:

}
#endif

void hci_evt_encode(struct radio_pdu_node_rx *node_rx, struct net_buf *buf)
{
    9dac:	b5f0      	push	{r4, r5, r6, r7, lr}
    9dae:	0004      	movs	r4, r0
	struct pdu_data *pdu_data;

	pdu_data = (struct pdu_data *)node_rx->pdu_data;
    9db0:	0007      	movs	r7, r0

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    9db2:	7900      	ldrb	r0, [r0, #4]

}
#endif

void hci_evt_encode(struct radio_pdu_node_rx *node_rx, struct net_buf *buf)
{
    9db4:	b091      	sub	sp, #68	; 0x44
    9db6:	000e      	movs	r6, r1
	struct pdu_data *pdu_data;

	pdu_data = (struct pdu_data *)node_rx->pdu_data;
    9db8:	3708      	adds	r7, #8
			   struct pdu_data *pdu_data, struct net_buf *buf)
{
	u8_t *b = (u8_t *)node_rx;
	u16_t handle;

	handle = node_rx->hdr.handle;
    9dba:	88e5      	ldrh	r5, [r4, #6]
{
	struct pdu_data *pdu_data;

	pdu_data = (struct pdu_data *)node_rx->pdu_data;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    9dbc:	2801      	cmp	r0, #1
    9dbe:	d100      	bne.n	9dc2 <hci_evt_encode+0x16>
    9dc0:	e18d      	b.n	a0de <hci_evt_encode+0x332>
	u8_t *b = (u8_t *)node_rx;
	u16_t handle;

	handle = node_rx->hdr.handle;

	switch (node_rx->hdr.type) {
    9dc2:	3802      	subs	r0, #2
    9dc4:	280a      	cmp	r0, #10
    9dc6:	d900      	bls.n	9dca <hci_evt_encode+0x1e>
    9dc8:	e183      	b.n	a0d2 <hci_evt_encode+0x326>
    9dca:	f7f6 f9df 	bl	18c <__gnu_thumb1_case_uhi>
    9dce:	000b      	.short	0x000b
    9dd0:	004c004a 	.word	0x004c004a
    9dd4:	008d0052 	.word	0x008d0052
    9dd8:	00e400c9 	.word	0x00e400c9
    9ddc:	01250110 	.word	0x01250110
    9de0:	014d0138 	.word	0x014d0138
}

static void le_advertising_report(struct pdu_data *pdu_data, u8_t *b,
				  struct net_buf *buf)
{
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    9de4:	2207      	movs	r2, #7
    9de6:	49d9      	ldr	r1, [pc, #868]	; (a14c <hci_evt_encode+0x3a0>)
    9de8:	a809      	add	r0, sp, #36	; 0x24
    9dea:	f7f6 ffa6 	bl	d3a <memcpy>
	struct bt_hci_evt_le_advertising_info *adv_info;
	u8_t data_len;
	u8_t *rssi;
	u8_t info_len;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9dee:	4bd8      	ldr	r3, [pc, #864]	; (a150 <hci_evt_encode+0x3a4>)
    9df0:	685b      	ldr	r3, [r3, #4]
    9df2:	009b      	lsls	r3, r3, #2
    9df4:	d400      	bmi.n	9df8 <hci_evt_encode+0x4c>
    9df6:	e26f      	b.n	a2d8 <hci_evt_encode+0x52c>
	    !(le_event_mask & BT_EVT_MASK_LE_ADVERTISING_REPORT)) {
    9df8:	4bd6      	ldr	r3, [pc, #856]	; (a154 <hci_evt_encode+0x3a8>)
	struct bt_hci_evt_le_advertising_info *adv_info;
	u8_t data_len;
	u8_t *rssi;
	u8_t info_len;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9dfa:	681b      	ldr	r3, [r3, #0]
    9dfc:	079b      	lsls	r3, r3, #30
    9dfe:	d400      	bmi.n	9e02 <hci_evt_encode+0x56>
    9e00:	e26a      	b.n	a2d8 <hci_evt_encode+0x52c>
		}
	}
fill_report:
#endif

	if (adv->type != PDU_ADV_TYPE_DIRECT_IND) {
    9e02:	230f      	movs	r3, #15
    9e04:	7a22      	ldrb	r2, [r4, #8]
		data_len = (adv->len - BDADDR_SIZE);
	} else {
		data_len = 0;
    9e06:	2500      	movs	r5, #0
		}
	}
fill_report:
#endif

	if (adv->type != PDU_ADV_TYPE_DIRECT_IND) {
    9e08:	4013      	ands	r3, r2
    9e0a:	2b01      	cmp	r3, #1
    9e0c:	d002      	beq.n	9e14 <hci_evt_encode+0x68>
		data_len = (adv->len - BDADDR_SIZE);
    9e0e:	7a65      	ldrb	r5, [r4, #9]
    9e10:	3d06      	subs	r5, #6
    9e12:	b2ed      	uxtb	r5, r5
		data_len = 0;
	}

	info_len = sizeof(struct bt_hci_evt_le_advertising_info) + data_len +
		   sizeof(*rssi);
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    9e14:	002a      	movs	r2, r5
    9e16:	320b      	adds	r2, #11
    9e18:	b2d2      	uxtb	r2, r2
    9e1a:	2102      	movs	r1, #2
    9e1c:	0030      	movs	r0, r6
    9e1e:	f7ff fa53 	bl	92c8 <meta_evt>
		       sizeof(*sep) + info_len);

	sep->num_reports = 1;
    9e22:	2301      	movs	r3, #1
	adv_info = (void *)(((u8_t *)sep) + sizeof(*sep));

	adv_info->evt_type = c_adv_type[adv->type];
	adv_info->addr.type = adv->tx_addr;
	memcpy(&adv_info->addr.a.val[0], &adv->payload.adv_ind.addr[0],
    9e24:	0021      	movs	r1, r4
	info_len = sizeof(struct bt_hci_evt_le_advertising_info) + data_len +
		   sizeof(*rssi);
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
		       sizeof(*sep) + info_len);

	sep->num_reports = 1;
    9e26:	7003      	strb	r3, [r0, #0]
	adv_info = (void *)(((u8_t *)sep) + sizeof(*sep));

	adv_info->evt_type = c_adv_type[adv->type];
    9e28:	7a23      	ldrb	r3, [r4, #8]
    9e2a:	aa09      	add	r2, sp, #36	; 0x24
    9e2c:	071b      	lsls	r3, r3, #28
    9e2e:	0f1b      	lsrs	r3, r3, #28
    9e30:	5cd3      	ldrb	r3, [r2, r3]
		data_len = 0;
	}

	info_len = sizeof(struct bt_hci_evt_le_advertising_info) + data_len +
		   sizeof(*rssi);
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    9e32:	0006      	movs	r6, r0
		       sizeof(*sep) + info_len);

	sep->num_reports = 1;
	adv_info = (void *)(((u8_t *)sep) + sizeof(*sep));

	adv_info->evt_type = c_adv_type[adv->type];
    9e34:	7043      	strb	r3, [r0, #1]
	adv_info->addr.type = adv->tx_addr;
    9e36:	7a23      	ldrb	r3, [r4, #8]
	memcpy(&adv_info->addr.a.val[0], &adv->payload.adv_ind.addr[0],
    9e38:	310a      	adds	r1, #10

	sep->num_reports = 1;
	adv_info = (void *)(((u8_t *)sep) + sizeof(*sep));

	adv_info->evt_type = c_adv_type[adv->type];
	adv_info->addr.type = adv->tx_addr;
    9e3a:	065b      	lsls	r3, r3, #25
    9e3c:	0fdb      	lsrs	r3, r3, #31
    9e3e:	7083      	strb	r3, [r0, #2]
	memcpy(&adv_info->addr.a.val[0], &adv->payload.adv_ind.addr[0],
    9e40:	2206      	movs	r2, #6
    9e42:	3003      	adds	r0, #3
    9e44:	f7f6 ff79 	bl	d3a <memcpy>
	       sizeof(bt_addr_t));

	adv_info->length = data_len;
	memcpy(&adv_info->data[0], &adv->payload.adv_ind.data[0], data_len);
    9e48:	0039      	movs	r1, r7
	adv_info->evt_type = c_adv_type[adv->type];
	adv_info->addr.type = adv->tx_addr;
	memcpy(&adv_info->addr.a.val[0], &adv->payload.adv_ind.addr[0],
	       sizeof(bt_addr_t));

	adv_info->length = data_len;
    9e4a:	7275      	strb	r5, [r6, #9]
	memcpy(&adv_info->data[0], &adv->payload.adv_ind.data[0], data_len);
    9e4c:	360a      	adds	r6, #10
    9e4e:	3108      	adds	r1, #8
    9e50:	002a      	movs	r2, r5
    9e52:	0030      	movs	r0, r6
    9e54:	f7f6 ff71 	bl	d3a <memcpy>
	/* RSSI */
	rssi = &adv_info->data[0] + data_len;
	*rssi = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    9e58:	7a61      	ldrb	r1, [r4, #9]
    9e5a:	1864      	adds	r4, r4, r1
    9e5c:	7aa3      	ldrb	r3, [r4, #10]
    9e5e:	5573      	strb	r3, [r6, r5]
    9e60:	e23a      	b.n	a2d8 <hci_evt_encode+0x52c>
}

static void le_adv_ext_1M_report(struct pdu_data *pdu_data, u8_t *b,
				 struct net_buf *buf)
{
	le_adv_ext_report(pdu_data, b, buf, BIT(0));
    9e62:	2201      	movs	r2, #1
    9e64:	e000      	b.n	9e68 <hci_evt_encode+0xbc>
}

static void le_adv_ext_coded_report(struct pdu_data *pdu_data, u8_t *b,
				    struct net_buf *buf)
{
	le_adv_ext_report(pdu_data, b, buf, BIT(2));
    9e66:	2204      	movs	r2, #4
    9e68:	0021      	movs	r1, r4
    9e6a:	0038      	movs	r0, r7
    9e6c:	f7ff fab6 	bl	93dc <le_adv_ext_report.isra.53>
    9e70:	e232      	b.n	a2d8 <hci_evt_encode+0x52c>
    9e72:	0025      	movs	r5, r4
	struct pdu_adv *adv = (struct pdu_adv *)pdu_data;
	struct bt_hci_evt_le_scan_req_received *sep;

	/* TODO: fill handle when Adv Ext. feature is implemented. */

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9e74:	4bb6      	ldr	r3, [pc, #728]	; (a150 <hci_evt_encode+0x3a4>)
    9e76:	350a      	adds	r5, #10
    9e78:	685b      	ldr	r3, [r3, #4]
    9e7a:	009b      	lsls	r3, r3, #2
    9e7c:	d503      	bpl.n	9e86 <hci_evt_encode+0xda>
	    !(le_event_mask & BT_EVT_MASK_LE_SCAN_REQ_RECEIVED)) {
    9e7e:	4bb5      	ldr	r3, [pc, #724]	; (a154 <hci_evt_encode+0x3a8>)
	struct pdu_adv *adv = (struct pdu_adv *)pdu_data;
	struct bt_hci_evt_le_scan_req_received *sep;

	/* TODO: fill handle when Adv Ext. feature is implemented. */

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9e80:	681b      	ldr	r3, [r3, #0]
    9e82:	035b      	lsls	r3, r3, #13
    9e84:	d421      	bmi.n	9eca <hci_evt_encode+0x11e>
		u8_t handle;
		u8_t rssi;

		handle = 0;
		addr.type = adv->tx_addr;
		memcpy(&addr.a.val[0], &adv->payload.scan_req.scan_addr[0],
    9e86:	201d      	movs	r0, #29
		bt_addr_le_t addr;
		u8_t handle;
		u8_t rssi;

		handle = 0;
		addr.type = adv->tx_addr;
    9e88:	7a23      	ldrb	r3, [r4, #8]
    9e8a:	ae07      	add	r6, sp, #28
    9e8c:	065b      	lsls	r3, r3, #25
    9e8e:	0fdb      	lsrs	r3, r3, #31
		memcpy(&addr.a.val[0], &adv->payload.scan_req.scan_addr[0],
    9e90:	2206      	movs	r2, #6
    9e92:	0029      	movs	r1, r5
    9e94:	4468      	add	r0, sp
		bt_addr_le_t addr;
		u8_t handle;
		u8_t rssi;

		handle = 0;
		addr.type = adv->tx_addr;
    9e96:	7033      	strb	r3, [r6, #0]
		memcpy(&addr.a.val[0], &adv->payload.scan_req.scan_addr[0],
    9e98:	f7f6 ff4f 	bl	d3a <memcpy>
		       sizeof(bt_addr_t));
		rssi = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    9e9c:	7a61      	ldrb	r1, [r4, #9]
			 offsetof(struct pdu_adv, payload) + adv->len];

		bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    9e9e:	0030      	movs	r0, r6

		handle = 0;
		addr.type = adv->tx_addr;
		memcpy(&addr.a.val[0], &adv->payload.scan_req.scan_addr[0],
		       sizeof(bt_addr_t));
		rssi = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    9ea0:	1864      	adds	r4, r4, r1
    9ea2:	7aa5      	ldrb	r5, [r4, #10]
			 offsetof(struct pdu_adv, payload) + adv->len];

		bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    9ea4:	ac09      	add	r4, sp, #36	; 0x24
    9ea6:	0021      	movs	r1, r4
    9ea8:	f7ff fa66 	bl	9378 <bt_addr_le_to_str.constprop.57>

		BT_WARN("handle: %d, addr: %s, rssi: -%d dB.",
    9eac:	4baa      	ldr	r3, [pc, #680]	; (a158 <hci_evt_encode+0x3ac>)
    9eae:	9503      	str	r5, [sp, #12]
    9eb0:	9304      	str	r3, [sp, #16]
    9eb2:	2300      	movs	r3, #0
    9eb4:	9301      	str	r3, [sp, #4]
    9eb6:	4ba9      	ldr	r3, [pc, #676]	; (a15c <hci_evt_encode+0x3b0>)
    9eb8:	9402      	str	r4, [sp, #8]
    9eba:	9300      	str	r3, [sp, #0]
    9ebc:	4aa8      	ldr	r2, [pc, #672]	; (a160 <hci_evt_encode+0x3b4>)
    9ebe:	4ba9      	ldr	r3, [pc, #676]	; (a164 <hci_evt_encode+0x3b8>)
    9ec0:	49a9      	ldr	r1, [pc, #676]	; (a168 <hci_evt_encode+0x3bc>)
    9ec2:	48aa      	ldr	r0, [pc, #680]	; (a16c <hci_evt_encode+0x3c0>)
    9ec4:	f7f7 fd5c 	bl	1980 <printk>
    9ec8:	e206      	b.n	a2d8 <hci_evt_encode+0x52c>
			handle, addr_str, rssi);

		return;
	}

	sep = meta_evt(buf, BT_HCI_EVT_LE_SCAN_REQ_RECEIVED, sizeof(*sep));
    9eca:	2208      	movs	r2, #8
    9ecc:	2113      	movs	r1, #19
    9ece:	0030      	movs	r0, r6
    9ed0:	f7ff f9fa 	bl	92c8 <meta_evt>
	sep->handle = 0;
    9ed4:	2300      	movs	r3, #0
    9ed6:	7003      	strb	r3, [r0, #0]
	sep->addr.type = adv->tx_addr;
    9ed8:	7a23      	ldrb	r3, [r4, #8]
	memcpy(&sep->addr.a.val[0], &adv->payload.scan_req.scan_addr[0],
    9eda:	2206      	movs	r2, #6
		return;
	}

	sep = meta_evt(buf, BT_HCI_EVT_LE_SCAN_REQ_RECEIVED, sizeof(*sep));
	sep->handle = 0;
	sep->addr.type = adv->tx_addr;
    9edc:	065b      	lsls	r3, r3, #25
    9ede:	0fdb      	lsrs	r3, r3, #31
    9ee0:	7043      	strb	r3, [r0, #1]
	memcpy(&sep->addr.a.val[0], &adv->payload.scan_req.scan_addr[0],
    9ee2:	0029      	movs	r1, r5
    9ee4:	3002      	adds	r0, #2
    9ee6:	e129      	b.n	a13c <hci_evt_encode+0x390>
			     struct net_buf *buf)
{
	struct bt_hci_evt_le_conn_complete *sep;
	struct radio_le_conn_cmplt *radio_cc;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9ee8:	4b99      	ldr	r3, [pc, #612]	; (a150 <hci_evt_encode+0x3a4>)
    9eea:	685b      	ldr	r3, [r3, #4]
    9eec:	009b      	lsls	r3, r3, #2
    9eee:	d400      	bmi.n	9ef2 <hci_evt_encode+0x146>
    9ef0:	e1f2      	b.n	a2d8 <hci_evt_encode+0x52c>
    9ef2:	2101      	movs	r1, #1
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE)) {
    9ef4:	4b97      	ldr	r3, [pc, #604]	; (a154 <hci_evt_encode+0x3a8>)
			     struct net_buf *buf)
{
	struct bt_hci_evt_le_conn_complete *sep;
	struct radio_le_conn_cmplt *radio_cc;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9ef6:	681b      	ldr	r3, [r3, #0]
    9ef8:	420b      	tst	r3, r1
    9efa:	d100      	bne.n	9efe <hci_evt_encode+0x152>
    9efc:	e1ec      	b.n	a2d8 <hci_evt_encode+0x52c>
		return;
	}

	radio_cc = (struct radio_le_conn_cmplt *) (pdu_data->payload.lldata);

	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*sep));
    9efe:	2212      	movs	r2, #18
    9f00:	0030      	movs	r0, r6
    9f02:	f7ff f9e1 	bl	92c8 <meta_evt>

	sep->status = radio_cc->status;
	sep->handle = sys_cpu_to_le16(handle);
	sep->role = radio_cc->role;
	sep->peer_addr.type = radio_cc->peer_addr_type;
	memcpy(&sep->peer_addr.a.val[0], &radio_cc->peer_addr[0], BDADDR_SIZE);
    9f06:	0021      	movs	r1, r4
		return;
	}

	radio_cc = (struct radio_le_conn_cmplt *) (pdu_data->payload.lldata);

	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*sep));
    9f08:	0006      	movs	r6, r0

	sep->status = radio_cc->status;
    9f0a:	0027      	movs	r7, r4
    9f0c:	7ae3      	ldrb	r3, [r4, #11]
	sep->handle = sys_cpu_to_le16(handle);
    9f0e:	7045      	strb	r5, [r0, #1]
    9f10:	0a2d      	lsrs	r5, r5, #8

	radio_cc = (struct radio_le_conn_cmplt *) (pdu_data->payload.lldata);

	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*sep));

	sep->status = radio_cc->status;
    9f12:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    9f14:	7085      	strb	r5, [r0, #2]
	sep->role = radio_cc->role;
    9f16:	7b23      	ldrb	r3, [r4, #12]
	sep->peer_addr.type = radio_cc->peer_addr_type;
	memcpy(&sep->peer_addr.a.val[0], &radio_cc->peer_addr[0], BDADDR_SIZE);
    9f18:	2206      	movs	r2, #6

	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*sep));

	sep->status = radio_cc->status;
	sep->handle = sys_cpu_to_le16(handle);
	sep->role = radio_cc->role;
    9f1a:	70c3      	strb	r3, [r0, #3]
	sep->peer_addr.type = radio_cc->peer_addr_type;
    9f1c:	7b63      	ldrb	r3, [r4, #13]
	memcpy(&sep->peer_addr.a.val[0], &radio_cc->peer_addr[0], BDADDR_SIZE);
    9f1e:	310e      	adds	r1, #14
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*sep));

	sep->status = radio_cc->status;
	sep->handle = sys_cpu_to_le16(handle);
	sep->role = radio_cc->role;
	sep->peer_addr.type = radio_cc->peer_addr_type;
    9f20:	7103      	strb	r3, [r0, #4]
	memcpy(&sep->peer_addr.a.val[0], &radio_cc->peer_addr[0], BDADDR_SIZE);
    9f22:	3005      	adds	r0, #5
    9f24:	f7f6 ff09 	bl	d3a <memcpy>
	sep->interval = sys_cpu_to_le16(radio_cc->interval);
    9f28:	7f63      	ldrb	r3, [r4, #29]
    9f2a:	7f22      	ldrb	r2, [r4, #28]
    9f2c:	021b      	lsls	r3, r3, #8
    9f2e:	4313      	orrs	r3, r2
    9f30:	72f3      	strb	r3, [r6, #11]
    9f32:	0a1b      	lsrs	r3, r3, #8
    9f34:	7333      	strb	r3, [r6, #12]
	sep->latency = sys_cpu_to_le16(radio_cc->latency);
    9f36:	7fe3      	ldrb	r3, [r4, #31]
    9f38:	7fa2      	ldrb	r2, [r4, #30]
    9f3a:	021b      	lsls	r3, r3, #8
    9f3c:	4313      	orrs	r3, r2
    9f3e:	7373      	strb	r3, [r6, #13]
    9f40:	0a1b      	lsrs	r3, r3, #8

	radio_cc = (struct radio_le_conn_cmplt *) (pdu_data->payload.lldata);

	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*sep));

	sep->status = radio_cc->status;
    9f42:	370b      	adds	r7, #11
	sep->handle = sys_cpu_to_le16(handle);
	sep->role = radio_cc->role;
	sep->peer_addr.type = radio_cc->peer_addr_type;
	memcpy(&sep->peer_addr.a.val[0], &radio_cc->peer_addr[0], BDADDR_SIZE);
	sep->interval = sys_cpu_to_le16(radio_cc->interval);
	sep->latency = sys_cpu_to_le16(radio_cc->latency);
    9f44:	73b3      	strb	r3, [r6, #14]
	sep->supv_timeout = sys_cpu_to_le16(radio_cc->timeout);
    9f46:	7dbb      	ldrb	r3, [r7, #22]
    9f48:	7d7a      	ldrb	r2, [r7, #21]
    9f4a:	021b      	lsls	r3, r3, #8
    9f4c:	4313      	orrs	r3, r2
    9f4e:	73f3      	strb	r3, [r6, #15]
    9f50:	0a1b      	lsrs	r3, r3, #8
    9f52:	7433      	strb	r3, [r6, #16]
	sep->clock_accuracy = radio_cc->mca;
    9f54:	7dfb      	ldrb	r3, [r7, #23]

	conn_count++;
    9f56:	4a86      	ldr	r2, [pc, #536]	; (a170 <hci_evt_encode+0x3c4>)
	sep->peer_addr.type = radio_cc->peer_addr_type;
	memcpy(&sep->peer_addr.a.val[0], &radio_cc->peer_addr[0], BDADDR_SIZE);
	sep->interval = sys_cpu_to_le16(radio_cc->interval);
	sep->latency = sys_cpu_to_le16(radio_cc->latency);
	sep->supv_timeout = sys_cpu_to_le16(radio_cc->timeout);
	sep->clock_accuracy = radio_cc->mca;
    9f58:	7473      	strb	r3, [r6, #17]

	conn_count++;
    9f5a:	6813      	ldr	r3, [r2, #0]
    9f5c:	3301      	adds	r3, #1
    9f5e:	e018      	b.n	9f92 <hci_evt_encode+0x1e6>
static void disconn_complete(struct pdu_data *pdu_data, u16_t handle,
			     struct net_buf *buf)
{
	struct bt_hci_evt_disconn_complete *ep;

	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
    9f60:	4b7b      	ldr	r3, [pc, #492]	; (a150 <hci_evt_encode+0x3a4>)
    9f62:	681b      	ldr	r3, [r3, #0]
    9f64:	06db      	lsls	r3, r3, #27
    9f66:	d400      	bmi.n	9f6a <hci_evt_encode+0x1be>
    9f68:	e1b6      	b.n	a2d8 <hci_evt_encode+0x52c>
		return;
	}

	evt_create(buf, BT_HCI_EVT_DISCONN_COMPLETE, sizeof(*ep));
    9f6a:	2204      	movs	r2, #4
    9f6c:	2105      	movs	r1, #5
    9f6e:	0030      	movs	r0, r6
    9f70:	f7ff f962 	bl	9238 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    9f74:	0030      	movs	r0, r6
    9f76:	2104      	movs	r1, #4
    9f78:	3008      	adds	r0, #8
    9f7a:	f009 fb23 	bl	135c4 <net_buf_simple_add>

	ep->status = 0x00;
    9f7e:	2300      	movs	r3, #0
	ep->handle = sys_cpu_to_le16(handle);
    9f80:	7045      	strb	r5, [r0, #1]
    9f82:	0a2d      	lsrs	r5, r5, #8
	}

	evt_create(buf, BT_HCI_EVT_DISCONN_COMPLETE, sizeof(*ep));
	ep = net_buf_add(buf, sizeof(*ep));

	ep->status = 0x00;
    9f84:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    9f86:	7085      	strb	r5, [r0, #2]
	ep->reason = *((u8_t *)pdu_data);
    9f88:	7a23      	ldrb	r3, [r4, #8]

	conn_count--;
    9f8a:	4a79      	ldr	r2, [pc, #484]	; (a170 <hci_evt_encode+0x3c4>)
	evt_create(buf, BT_HCI_EVT_DISCONN_COMPLETE, sizeof(*ep));
	ep = net_buf_add(buf, sizeof(*ep));

	ep->status = 0x00;
	ep->handle = sys_cpu_to_le16(handle);
	ep->reason = *((u8_t *)pdu_data);
    9f8c:	70c3      	strb	r3, [r0, #3]

	conn_count--;
    9f8e:	6813      	ldr	r3, [r2, #0]
    9f90:	3b01      	subs	r3, #1
    9f92:	6013      	str	r3, [r2, #0]
    9f94:	e1a0      	b.n	a2d8 <hci_evt_encode+0x52c>
				    struct net_buf *buf)
{
	struct bt_hci_evt_le_conn_update_complete *sep;
	struct radio_le_conn_update_cmplt *radio_cu;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9f96:	4b6e      	ldr	r3, [pc, #440]	; (a150 <hci_evt_encode+0x3a4>)
    9f98:	685b      	ldr	r3, [r3, #4]
    9f9a:	009b      	lsls	r3, r3, #2
    9f9c:	d400      	bmi.n	9fa0 <hci_evt_encode+0x1f4>
    9f9e:	e19b      	b.n	a2d8 <hci_evt_encode+0x52c>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
    9fa0:	4b6c      	ldr	r3, [pc, #432]	; (a154 <hci_evt_encode+0x3a8>)
				    struct net_buf *buf)
{
	struct bt_hci_evt_le_conn_update_complete *sep;
	struct radio_le_conn_update_cmplt *radio_cu;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9fa2:	681b      	ldr	r3, [r3, #0]
    9fa4:	075b      	lsls	r3, r3, #29
    9fa6:	d400      	bmi.n	9faa <hci_evt_encode+0x1fe>
    9fa8:	e196      	b.n	a2d8 <hci_evt_encode+0x52c>
	}

	radio_cu = (struct radio_le_conn_update_cmplt *)
			(pdu_data->payload.lldata);

	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_UPDATE_COMPLETE, sizeof(*sep));
    9faa:	2209      	movs	r2, #9
    9fac:	2103      	movs	r1, #3
    9fae:	0030      	movs	r0, r6
    9fb0:	f7ff f98a 	bl	92c8 <meta_evt>

	sep->status = radio_cu->status;
    9fb4:	0023      	movs	r3, r4
    9fb6:	7ae2      	ldrb	r2, [r4, #11]
	sep->handle = sys_cpu_to_le16(handle);
    9fb8:	7045      	strb	r5, [r0, #1]
    9fba:	0a2d      	lsrs	r5, r5, #8
	radio_cu = (struct radio_le_conn_update_cmplt *)
			(pdu_data->payload.lldata);

	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_UPDATE_COMPLETE, sizeof(*sep));

	sep->status = radio_cu->status;
    9fbc:	7002      	strb	r2, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    9fbe:	7085      	strb	r5, [r0, #2]
	sep->interval = sys_cpu_to_le16(radio_cu->interval);
    9fc0:	7b62      	ldrb	r2, [r4, #13]
    9fc2:	7b21      	ldrb	r1, [r4, #12]
    9fc4:	0212      	lsls	r2, r2, #8
    9fc6:	430a      	orrs	r2, r1
    9fc8:	70c2      	strb	r2, [r0, #3]
    9fca:	0a12      	lsrs	r2, r2, #8
    9fcc:	7102      	strb	r2, [r0, #4]
	sep->latency = sys_cpu_to_le16(radio_cu->latency);
    9fce:	7be2      	ldrb	r2, [r4, #15]
    9fd0:	7ba1      	ldrb	r1, [r4, #14]
    9fd2:	0212      	lsls	r2, r2, #8
    9fd4:	430a      	orrs	r2, r1
    9fd6:	7142      	strb	r2, [r0, #5]
    9fd8:	0a12      	lsrs	r2, r2, #8
    9fda:	7182      	strb	r2, [r0, #6]
	radio_cu = (struct radio_le_conn_update_cmplt *)
			(pdu_data->payload.lldata);

	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_UPDATE_COMPLETE, sizeof(*sep));

	sep->status = radio_cu->status;
    9fdc:	330b      	adds	r3, #11
	sep->handle = sys_cpu_to_le16(handle);
	sep->interval = sys_cpu_to_le16(radio_cu->interval);
	sep->latency = sys_cpu_to_le16(radio_cu->latency);
	sep->supv_timeout = sys_cpu_to_le16(radio_cu->timeout);
    9fde:	799b      	ldrb	r3, [r3, #6]
    9fe0:	7c22      	ldrb	r2, [r4, #16]
    9fe2:	021b      	lsls	r3, r3, #8
    9fe4:	4313      	orrs	r3, r2
    9fe6:	71c3      	strb	r3, [r0, #7]
    9fe8:	0a1b      	lsrs	r3, r3, #8
    9fea:	7203      	strb	r3, [r0, #8]
    9fec:	e174      	b.n	a2d8 <hci_evt_encode+0x52c>
static void enc_refresh_complete(struct pdu_data *pdu_data, u16_t handle,
				 struct net_buf *buf)
{
	struct bt_hci_evt_encrypt_key_refresh_complete *ep;

	if (!(event_mask & BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE)) {
    9fee:	4b58      	ldr	r3, [pc, #352]	; (a150 <hci_evt_encode+0x3a4>)
    9ff0:	685b      	ldr	r3, [r3, #4]
    9ff2:	041b      	lsls	r3, r3, #16
    9ff4:	d400      	bmi.n	9ff8 <hci_evt_encode+0x24c>
    9ff6:	e16f      	b.n	a2d8 <hci_evt_encode+0x52c>
		return;
	}

	evt_create(buf, BT_HCI_EVT_ENCRYPT_KEY_REFRESH_COMPLETE, sizeof(*ep));
    9ff8:	2203      	movs	r2, #3
    9ffa:	2130      	movs	r1, #48	; 0x30
    9ffc:	0030      	movs	r0, r6
    9ffe:	f7ff f91b 	bl	9238 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    a002:	0030      	movs	r0, r6
    a004:	2103      	movs	r1, #3
    a006:	3008      	adds	r0, #8
    a008:	f009 fadc 	bl	135c4 <net_buf_simple_add>

	ep->status = 0x00;
    a00c:	2300      	movs	r3, #0
	ep->handle = sys_cpu_to_le16(handle);
    a00e:	7045      	strb	r5, [r0, #1]
    a010:	0a2d      	lsrs	r5, r5, #8
	}

	evt_create(buf, BT_HCI_EVT_ENCRYPT_KEY_REFRESH_COMPLETE, sizeof(*ep));
	ep = net_buf_add(buf, sizeof(*ep));

	ep->status = 0x00;
    a012:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    a014:	7085      	strb	r5, [r0, #2]
    a016:	e15f      	b.n	a2d8 <hci_evt_encode+0x52c>
static void auth_payload_timeout_exp(struct pdu_data *pdu_data, u16_t handle,
				     struct net_buf *buf)
{
	struct bt_hci_evt_auth_payload_timeout_exp *ep;

	if (!(event_mask_page_2 & BT_EVT_MASK_AUTH_PAYLOAD_TIMEOUT_EXP)) {
    a018:	4b56      	ldr	r3, [pc, #344]	; (a174 <hci_evt_encode+0x3c8>)
    a01a:	681b      	ldr	r3, [r3, #0]
    a01c:	021b      	lsls	r3, r3, #8
    a01e:	d400      	bmi.n	a022 <hci_evt_encode+0x276>
    a020:	e15a      	b.n	a2d8 <hci_evt_encode+0x52c>
		return;
	}

	evt_create(buf, BT_HCI_EVT_AUTH_PAYLOAD_TIMEOUT_EXP, sizeof(*ep));
    a022:	2202      	movs	r2, #2
    a024:	2157      	movs	r1, #87	; 0x57
    a026:	0030      	movs	r0, r6
    a028:	f7ff f906 	bl	9238 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    a02c:	0030      	movs	r0, r6
    a02e:	2102      	movs	r1, #2
    a030:	3008      	adds	r0, #8
    a032:	f009 fac7 	bl	135c4 <net_buf_simple_add>

	ep->handle = sys_cpu_to_le16(handle);
    a036:	7005      	strb	r5, [r0, #0]
    a038:	0a2d      	lsrs	r5, r5, #8
    a03a:	7045      	strb	r5, [r0, #1]
    a03c:	e14c      	b.n	a2d8 <hci_evt_encode+0x52c>
			     struct net_buf *buf)
{
	struct bt_hci_evt_le_chan_sel_algo *sep;
	struct radio_le_chan_sel_algo *radio_le_chan_sel_algo;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    a03e:	4b44      	ldr	r3, [pc, #272]	; (a150 <hci_evt_encode+0x3a4>)
    a040:	685b      	ldr	r3, [r3, #4]
    a042:	009b      	lsls	r3, r3, #2
    a044:	d400      	bmi.n	a048 <hci_evt_encode+0x29c>
    a046:	e147      	b.n	a2d8 <hci_evt_encode+0x52c>
	    !(le_event_mask & BT_EVT_MASK_LE_CHAN_SEL_ALGO)) {
    a048:	4b42      	ldr	r3, [pc, #264]	; (a154 <hci_evt_encode+0x3a8>)
			     struct net_buf *buf)
{
	struct bt_hci_evt_le_chan_sel_algo *sep;
	struct radio_le_chan_sel_algo *radio_le_chan_sel_algo;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    a04a:	681b      	ldr	r3, [r3, #0]
    a04c:	031b      	lsls	r3, r3, #12
    a04e:	d400      	bmi.n	a052 <hci_evt_encode+0x2a6>
    a050:	e142      	b.n	a2d8 <hci_evt_encode+0x52c>
	}

	radio_le_chan_sel_algo = (struct radio_le_chan_sel_algo *)
					pdu_data->payload.lldata;

	sep = meta_evt(buf, BT_HCI_EVT_LE_CHAN_SEL_ALGO, sizeof(*sep));
    a052:	2203      	movs	r2, #3
    a054:	2114      	movs	r1, #20
    a056:	0030      	movs	r0, r6
    a058:	f7ff f936 	bl	92c8 <meta_evt>

	sep->handle = sys_cpu_to_le16(handle);
    a05c:	7005      	strb	r5, [r0, #0]
    a05e:	0a2d      	lsrs	r5, r5, #8
    a060:	7045      	strb	r5, [r0, #1]
	sep->chan_sel_algo = radio_le_chan_sel_algo->chan_sel_algo;
    a062:	7ae3      	ldrb	r3, [r4, #11]
    a064:	7083      	strb	r3, [r0, #2]
    a066:	e137      	b.n	a2d8 <hci_evt_encode+0x52c>
    a068:	0027      	movs	r7, r4
	struct radio_le_phy_upd_cmplt *radio_le_phy_upd_cmplt;

	radio_le_phy_upd_cmplt = (struct radio_le_phy_upd_cmplt *)
				 pdu_data->payload.lldata;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    a06a:	4b39      	ldr	r3, [pc, #228]	; (a150 <hci_evt_encode+0x3a4>)
    a06c:	370b      	adds	r7, #11
    a06e:	685b      	ldr	r3, [r3, #4]
    a070:	009b      	lsls	r3, r3, #2
    a072:	d503      	bpl.n	a07c <hci_evt_encode+0x2d0>
	    !(le_event_mask & BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE)) {
    a074:	4b37      	ldr	r3, [pc, #220]	; (a154 <hci_evt_encode+0x3a8>)
	struct radio_le_phy_upd_cmplt *radio_le_phy_upd_cmplt;

	radio_le_phy_upd_cmplt = (struct radio_le_phy_upd_cmplt *)
				 pdu_data->payload.lldata;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    a076:	681b      	ldr	r3, [r3, #0]
    a078:	051b      	lsls	r3, r3, #20
    a07a:	d416      	bmi.n	a0aa <hci_evt_encode+0x2fe>
    a07c:	7878      	ldrb	r0, [r7, #1]
    a07e:	f7f6 fa51 	bl	524 <__ffssi2>
    a082:	0006      	movs	r6, r0
    a084:	78b8      	ldrb	r0, [r7, #2]
    a086:	f7f6 fa4d 	bl	524 <__ffssi2>
	    !(le_event_mask & BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE)) {
		BT_WARN("handle: 0x%04x, status: %x, tx: %x, rx: %x.", handle,
    a08a:	4b33      	ldr	r3, [pc, #204]	; (a158 <hci_evt_encode+0x3ac>)
    a08c:	9004      	str	r0, [sp, #16]
    a08e:	9305      	str	r3, [sp, #20]
    a090:	9603      	str	r6, [sp, #12]
    a092:	7ae3      	ldrb	r3, [r4, #11]
    a094:	4a32      	ldr	r2, [pc, #200]	; (a160 <hci_evt_encode+0x3b4>)
    a096:	9302      	str	r3, [sp, #8]
    a098:	4b30      	ldr	r3, [pc, #192]	; (a15c <hci_evt_encode+0x3b0>)
    a09a:	9501      	str	r5, [sp, #4]
    a09c:	9300      	str	r3, [sp, #0]
    a09e:	4932      	ldr	r1, [pc, #200]	; (a168 <hci_evt_encode+0x3bc>)
    a0a0:	4b35      	ldr	r3, [pc, #212]	; (a178 <hci_evt_encode+0x3cc>)
    a0a2:	4836      	ldr	r0, [pc, #216]	; (a17c <hci_evt_encode+0x3d0>)
    a0a4:	f7f7 fc6c 	bl	1980 <printk>
    a0a8:	e116      	b.n	a2d8 <hci_evt_encode+0x52c>
			find_lsb_set(radio_le_phy_upd_cmplt->tx),
			find_lsb_set(radio_le_phy_upd_cmplt->rx));
		return;
	}

	sep = meta_evt(buf, BT_HCI_EVT_LE_PHY_UPDATE_COMPLETE, sizeof(*sep));
    a0aa:	2205      	movs	r2, #5
    a0ac:	210c      	movs	r1, #12
    a0ae:	0030      	movs	r0, r6
    a0b0:	f7ff f90a 	bl	92c8 <meta_evt>

	sep->status = radio_le_phy_upd_cmplt->status;
    a0b4:	7ae3      	ldrb	r3, [r4, #11]
	sep->handle = sys_cpu_to_le16(handle);
    a0b6:	7045      	strb	r5, [r0, #1]
    a0b8:	0a2d      	lsrs	r5, r5, #8
		return;
	}

	sep = meta_evt(buf, BT_HCI_EVT_LE_PHY_UPDATE_COMPLETE, sizeof(*sep));

	sep->status = radio_le_phy_upd_cmplt->status;
    a0ba:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    a0bc:	7085      	strb	r5, [r0, #2]
			find_lsb_set(radio_le_phy_upd_cmplt->tx),
			find_lsb_set(radio_le_phy_upd_cmplt->rx));
		return;
	}

	sep = meta_evt(buf, BT_HCI_EVT_LE_PHY_UPDATE_COMPLETE, sizeof(*sep));
    a0be:	0006      	movs	r6, r0
    a0c0:	7878      	ldrb	r0, [r7, #1]
    a0c2:	f7f6 fa2f 	bl	524 <__ffssi2>

	sep->status = radio_le_phy_upd_cmplt->status;
	sep->handle = sys_cpu_to_le16(handle);
	sep->tx_phy = find_lsb_set(radio_le_phy_upd_cmplt->tx);
    a0c6:	70f0      	strb	r0, [r6, #3]
    a0c8:	78b8      	ldrb	r0, [r7, #2]
    a0ca:	f7f6 fa2b 	bl	524 <__ffssi2>
	sep->rx_phy = find_lsb_set(radio_le_phy_upd_cmplt->rx);
    a0ce:	7130      	strb	r0, [r6, #4]
    a0d0:	e102      	b.n	a2d8 <hci_evt_encode+0x52c>
			pdu_data->payload.profile.max);
		return;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PROFILE_ISR */

	default:
		LL_ASSERT(0);
    a0d2:	4b21      	ldr	r3, [pc, #132]	; (a158 <hci_evt_encode+0x3ac>)
    a0d4:	9301      	str	r3, [sp, #4]
    a0d6:	4b2a      	ldr	r3, [pc, #168]	; (a180 <hci_evt_encode+0x3d4>)
    a0d8:	9300      	str	r3, [sp, #0]
    a0da:	4b2a      	ldr	r3, [pc, #168]	; (a184 <hci_evt_encode+0x3d8>)
    a0dc:	e0f4      	b.n	a2c8 <hci_evt_encode+0x51c>
static void encode_data_ctrl(struct radio_pdu_node_rx *node_rx,
			     struct pdu_data *pdu_data, struct net_buf *buf)
{
	u16_t handle = node_rx->hdr.handle;

	switch (pdu_data->payload.llctrl.opcode) {
    a0de:	7ae0      	ldrb	r0, [r4, #11]
    a0e0:	3803      	subs	r0, #3
    a0e2:	2812      	cmp	r0, #18
    a0e4:	d900      	bls.n	a0e8 <hci_evt_encode+0x33c>
    a0e6:	e0ea      	b.n	a2be <hci_evt_encode+0x512>
    a0e8:	f7f6 f846 	bl	178 <__gnu_thumb1_case_uqi>
    a0ec:	2be9e90a 	.word	0x2be9e90a
    a0f0:	e94ee9d3 	.word	0xe94ee9d3
    a0f4:	e97853e9 	.word	0xe97853e9
    a0f8:	e9e9e97e 	.word	0xe9e9e97e
    a0fc:	a6e9      	.short	0xa6e9
    a0fe:	a6          	.byte	0xa6
    a0ff:	00          	.byte	0x00
static void le_ltk_request(struct pdu_data *pdu_data, u16_t handle,
			   struct net_buf *buf)
{
	struct bt_hci_evt_le_ltk_request *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    a100:	4b13      	ldr	r3, [pc, #76]	; (a150 <hci_evt_encode+0x3a4>)
    a102:	685b      	ldr	r3, [r3, #4]
    a104:	009b      	lsls	r3, r3, #2
    a106:	d400      	bmi.n	a10a <hci_evt_encode+0x35e>
    a108:	e0e6      	b.n	a2d8 <hci_evt_encode+0x52c>
	    !(le_event_mask & BT_EVT_MASK_LE_LTK_REQUEST)) {
    a10a:	4b12      	ldr	r3, [pc, #72]	; (a154 <hci_evt_encode+0x3a8>)
static void le_ltk_request(struct pdu_data *pdu_data, u16_t handle,
			   struct net_buf *buf)
{
	struct bt_hci_evt_le_ltk_request *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    a10c:	681b      	ldr	r3, [r3, #0]
    a10e:	06db      	lsls	r3, r3, #27
    a110:	d400      	bmi.n	a114 <hci_evt_encode+0x368>
    a112:	e0e1      	b.n	a2d8 <hci_evt_encode+0x52c>
	    !(le_event_mask & BT_EVT_MASK_LE_LTK_REQUEST)) {
		return;
	}

	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
    a114:	220c      	movs	r2, #12
    a116:	2105      	movs	r1, #5
    a118:	0030      	movs	r0, r6
    a11a:	f7ff f8d5 	bl	92c8 <meta_evt>

	sep->handle = sys_cpu_to_le16(handle);
	memcpy(&sep->rand, pdu_data->payload.llctrl.ctrldata.enc_req.rand,
    a11e:	0021      	movs	r1, r4
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
	    !(le_event_mask & BT_EVT_MASK_LE_LTK_REQUEST)) {
		return;
	}

	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
    a120:	0006      	movs	r6, r0

	sep->handle = sys_cpu_to_le16(handle);
    a122:	7005      	strb	r5, [r0, #0]
    a124:	0a2d      	lsrs	r5, r5, #8
    a126:	7045      	strb	r5, [r0, #1]
	memcpy(&sep->rand, pdu_data->payload.llctrl.ctrldata.enc_req.rand,
    a128:	310c      	adds	r1, #12
    a12a:	2208      	movs	r2, #8
    a12c:	3002      	adds	r0, #2
    a12e:	f7f6 fe04 	bl	d3a <memcpy>
	       sizeof(u64_t));
	memcpy(&sep->ediv, pdu_data->payload.llctrl.ctrldata.enc_req.ediv,
    a132:	0021      	movs	r1, r4
    a134:	0030      	movs	r0, r6
    a136:	2202      	movs	r2, #2
    a138:	3114      	adds	r1, #20
    a13a:	300a      	adds	r0, #10
    a13c:	f7f6 fdfd 	bl	d3a <memcpy>
    a140:	e0ca      	b.n	a2d8 <hci_evt_encode+0x52c>
	case PDU_DATA_LLCTRL_TYPE_ENC_REQ:
		le_ltk_request(pdu_data, handle, buf);
		break;

	case PDU_DATA_LLCTRL_TYPE_START_ENC_RSP:
		encrypt_change(0x00, handle, buf);
    a142:	000a      	movs	r2, r1
    a144:	2000      	movs	r0, #0
    a146:	0029      	movs	r1, r5
    a148:	e04b      	b.n	a1e2 <hci_evt_encode+0x436>
    a14a:	46c0      	nop			; (mov r8, r8)
    a14c:	0001509b 	.word	0x0001509b
    a150:	200007c0 	.word	0x200007c0
    a154:	200007c8 	.word	0x200007c8
    a158:	000154c4 	.word	0x000154c4
    a15c:	0001550f 	.word	0x0001550f
    a160:	000154d1 	.word	0x000154d1
    a164:	00017f79 	.word	0x00017f79
    a168:	0001548b 	.word	0x0001548b
    a16c:	00016951 	.word	0x00016951
    a170:	20001324 	.word	0x20001324
    a174:	20001318 	.word	0x20001318
    a178:	00017fbb 	.word	0x00017fbb
    a17c:	00016985 	.word	0x00016985
    a180:	000154c9 	.word	0x000154c9
    a184:	00017fcf 	.word	0x00017fcf
		break;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_ENC */

	case PDU_DATA_LLCTRL_TYPE_FEATURE_RSP:
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
    a188:	000b      	movs	r3, r1
    a18a:	002a      	movs	r2, r5
    a18c:	0039      	movs	r1, r7
    a18e:	2000      	movs	r0, #0
    a190:	e086      	b.n	a2a0 <hci_evt_encode+0x4f4>
				struct net_buf *buf)
{
	struct pdu_data_llctrl_version_ind *ver_ind;
	struct bt_hci_evt_remote_version_info *ep;

	if (!(event_mask & BT_EVT_MASK_REMOTE_VERSION_INFO)) {
    a192:	4b52      	ldr	r3, [pc, #328]	; (a2dc <hci_evt_encode+0x530>)
    a194:	681b      	ldr	r3, [r3, #0]
    a196:	051b      	lsls	r3, r3, #20
    a198:	d400      	bmi.n	a19c <hci_evt_encode+0x3f0>
    a19a:	e09d      	b.n	a2d8 <hci_evt_encode+0x52c>
		return;
	}

	evt_create(buf, BT_HCI_EVT_REMOTE_VERSION_INFO, sizeof(*ep));
    a19c:	2208      	movs	r2, #8
    a19e:	210c      	movs	r1, #12
    a1a0:	0030      	movs	r0, r6
    a1a2:	f7ff f849 	bl	9238 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    a1a6:	0030      	movs	r0, r6
    a1a8:	2108      	movs	r1, #8
    a1aa:	3008      	adds	r0, #8
    a1ac:	f009 fa0a 	bl	135c4 <net_buf_simple_add>

	ver_ind = &pdu_data->payload.llctrl.ctrldata.version_ind;
	ep->status = 0x00;
    a1b0:	2300      	movs	r3, #0
	ep->handle = sys_cpu_to_le16(handle);
    a1b2:	7045      	strb	r5, [r0, #1]
    a1b4:	0a2d      	lsrs	r5, r5, #8

	evt_create(buf, BT_HCI_EVT_REMOTE_VERSION_INFO, sizeof(*ep));
	ep = net_buf_add(buf, sizeof(*ep));

	ver_ind = &pdu_data->payload.llctrl.ctrldata.version_ind;
	ep->status = 0x00;
    a1b6:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    a1b8:	7085      	strb	r5, [r0, #2]
	ep->version = ver_ind->version_number;
    a1ba:	7b23      	ldrb	r3, [r4, #12]
    a1bc:	70c3      	strb	r3, [r0, #3]
	ep->manufacturer = sys_cpu_to_le16(ver_ind->company_id);
    a1be:	7ba3      	ldrb	r3, [r4, #14]
    a1c0:	7b62      	ldrb	r2, [r4, #13]
    a1c2:	021b      	lsls	r3, r3, #8
    a1c4:	4313      	orrs	r3, r2
    a1c6:	7103      	strb	r3, [r0, #4]
    a1c8:	0a1b      	lsrs	r3, r3, #8
    a1ca:	7143      	strb	r3, [r0, #5]
	ep->subversion = sys_cpu_to_le16(ver_ind->sub_version_number);
    a1cc:	7c23      	ldrb	r3, [r4, #16]
    a1ce:	7be2      	ldrb	r2, [r4, #15]
    a1d0:	021b      	lsls	r3, r3, #8
    a1d2:	4313      	orrs	r3, r2
    a1d4:	7183      	strb	r3, [r0, #6]
    a1d6:	0a1b      	lsrs	r3, r3, #8
    a1d8:	71c3      	strb	r3, [r0, #7]
    a1da:	e07d      	b.n	a2d8 <hci_evt_encode+0x52c>
		remote_version_info(pdu_data, handle, buf);
		break;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_ENC)
	case PDU_DATA_LLCTRL_TYPE_REJECT_IND:
		encrypt_change(pdu_data->payload.llctrl.ctrldata.reject_ind.
    a1dc:	000a      	movs	r2, r1
    a1de:	0029      	movs	r1, r5
    a1e0:	7b20      	ldrb	r0, [r4, #12]
    a1e2:	f7ff f885 	bl	92f0 <encrypt_change>
    a1e6:	e077      	b.n	a2d8 <hci_evt_encode+0x52c>
static void le_conn_param_req(struct pdu_data *pdu_data, u16_t handle,
			      struct net_buf *buf)
{
	struct bt_hci_evt_le_conn_param_req *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    a1e8:	4b3c      	ldr	r3, [pc, #240]	; (a2dc <hci_evt_encode+0x530>)
    a1ea:	685b      	ldr	r3, [r3, #4]
    a1ec:	009b      	lsls	r3, r3, #2
    a1ee:	d573      	bpl.n	a2d8 <hci_evt_encode+0x52c>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
    a1f0:	4b3b      	ldr	r3, [pc, #236]	; (a2e0 <hci_evt_encode+0x534>)
static void le_conn_param_req(struct pdu_data *pdu_data, u16_t handle,
			      struct net_buf *buf)
{
	struct bt_hci_evt_le_conn_param_req *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    a1f2:	681b      	ldr	r3, [r3, #0]
    a1f4:	069b      	lsls	r3, r3, #26
    a1f6:	d56f      	bpl.n	a2d8 <hci_evt_encode+0x52c>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
		return;
	}

	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_PARAM_REQ, sizeof(*sep));
    a1f8:	220a      	movs	r2, #10
    a1fa:	2106      	movs	r1, #6
    a1fc:	0030      	movs	r0, r6
    a1fe:	f7ff f863 	bl	92c8 <meta_evt>

	sep->handle = sys_cpu_to_le16(handle);
    a202:	7005      	strb	r5, [r0, #0]
    a204:	0a2d      	lsrs	r5, r5, #8
    a206:	7045      	strb	r5, [r0, #1]
	sep->interval_min =
		pdu_data->payload.llctrl.ctrldata.conn_param_req.interval_min;
    a208:	7b63      	ldrb	r3, [r4, #13]
    a20a:	7b22      	ldrb	r2, [r4, #12]
    a20c:	021b      	lsls	r3, r3, #8
    a20e:	4313      	orrs	r3, r2
	}

	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_PARAM_REQ, sizeof(*sep));

	sep->handle = sys_cpu_to_le16(handle);
	sep->interval_min =
    a210:	7083      	strb	r3, [r0, #2]
    a212:	0a1b      	lsrs	r3, r3, #8
    a214:	70c3      	strb	r3, [r0, #3]
		pdu_data->payload.llctrl.ctrldata.conn_param_req.interval_min;
	sep->interval_max =
		pdu_data->payload.llctrl.ctrldata.conn_param_req.interval_max;
    a216:	7be3      	ldrb	r3, [r4, #15]
    a218:	7ba2      	ldrb	r2, [r4, #14]
    a21a:	021b      	lsls	r3, r3, #8
    a21c:	4313      	orrs	r3, r2
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_PARAM_REQ, sizeof(*sep));

	sep->handle = sys_cpu_to_le16(handle);
	sep->interval_min =
		pdu_data->payload.llctrl.ctrldata.conn_param_req.interval_min;
	sep->interval_max =
    a21e:	7103      	strb	r3, [r0, #4]
    a220:	0a1b      	lsrs	r3, r3, #8
    a222:	7143      	strb	r3, [r0, #5]
		pdu_data->payload.llctrl.ctrldata.conn_param_req.interval_max;
	sep->latency = pdu_data->payload.llctrl.ctrldata.conn_param_req.latency;
    a224:	7c63      	ldrb	r3, [r4, #17]
    a226:	7c22      	ldrb	r2, [r4, #16]
    a228:	021b      	lsls	r3, r3, #8
    a22a:	4313      	orrs	r3, r2
    a22c:	7183      	strb	r3, [r0, #6]
    a22e:	0a1b      	lsrs	r3, r3, #8
    a230:	71c3      	strb	r3, [r0, #7]
	sep->timeout = pdu_data->payload.llctrl.ctrldata.conn_param_req.timeout;
    a232:	7ca2      	ldrb	r2, [r4, #18]
    a234:	7ce3      	ldrb	r3, [r4, #19]
    a236:	e026      	b.n	a286 <hci_evt_encode+0x4da>
static void le_data_len_change(struct pdu_data *pdu_data, u16_t handle,
			       struct net_buf *buf)
{
	struct bt_hci_evt_le_data_len_change *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    a238:	4b28      	ldr	r3, [pc, #160]	; (a2dc <hci_evt_encode+0x530>)
    a23a:	685b      	ldr	r3, [r3, #4]
    a23c:	009b      	lsls	r3, r3, #2
    a23e:	d54b      	bpl.n	a2d8 <hci_evt_encode+0x52c>
	    !(le_event_mask & BT_EVT_MASK_LE_DATA_LEN_CHANGE)) {
    a240:	4b27      	ldr	r3, [pc, #156]	; (a2e0 <hci_evt_encode+0x534>)
static void le_data_len_change(struct pdu_data *pdu_data, u16_t handle,
			       struct net_buf *buf)
{
	struct bt_hci_evt_le_data_len_change *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    a242:	681b      	ldr	r3, [r3, #0]
    a244:	065b      	lsls	r3, r3, #25
    a246:	d547      	bpl.n	a2d8 <hci_evt_encode+0x52c>
	    !(le_event_mask & BT_EVT_MASK_LE_DATA_LEN_CHANGE)) {
		return;
	}

	sep = meta_evt(buf, BT_HCI_EVT_LE_DATA_LEN_CHANGE, sizeof(*sep));
    a248:	220a      	movs	r2, #10
    a24a:	2107      	movs	r1, #7
    a24c:	0030      	movs	r0, r6
    a24e:	f7ff f83b 	bl	92c8 <meta_evt>

	sep->handle = sys_cpu_to_le16(handle);
    a252:	7005      	strb	r5, [r0, #0]
    a254:	0a2d      	lsrs	r5, r5, #8
    a256:	7045      	strb	r5, [r0, #1]
	sep->max_tx_octets =
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_tx_octets;
    a258:	7c63      	ldrb	r3, [r4, #17]
    a25a:	7c22      	ldrb	r2, [r4, #16]
    a25c:	021b      	lsls	r3, r3, #8
    a25e:	4313      	orrs	r3, r2
	}

	sep = meta_evt(buf, BT_HCI_EVT_LE_DATA_LEN_CHANGE, sizeof(*sep));

	sep->handle = sys_cpu_to_le16(handle);
	sep->max_tx_octets =
    a260:	7083      	strb	r3, [r0, #2]
    a262:	0a1b      	lsrs	r3, r3, #8
    a264:	70c3      	strb	r3, [r0, #3]
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_tx_octets;
	sep->max_tx_time =
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_tx_time;
    a266:	7ce3      	ldrb	r3, [r4, #19]
    a268:	7ca2      	ldrb	r2, [r4, #18]
    a26a:	021b      	lsls	r3, r3, #8
    a26c:	4313      	orrs	r3, r2
	sep = meta_evt(buf, BT_HCI_EVT_LE_DATA_LEN_CHANGE, sizeof(*sep));

	sep->handle = sys_cpu_to_le16(handle);
	sep->max_tx_octets =
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_tx_octets;
	sep->max_tx_time =
    a26e:	7103      	strb	r3, [r0, #4]
    a270:	0a1b      	lsrs	r3, r3, #8
    a272:	7143      	strb	r3, [r0, #5]
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_tx_time;
	sep->max_rx_octets =
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_rx_octets;
    a274:	7b63      	ldrb	r3, [r4, #13]
    a276:	7b22      	ldrb	r2, [r4, #12]
    a278:	021b      	lsls	r3, r3, #8
    a27a:	4313      	orrs	r3, r2
	sep->handle = sys_cpu_to_le16(handle);
	sep->max_tx_octets =
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_tx_octets;
	sep->max_tx_time =
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_tx_time;
	sep->max_rx_octets =
    a27c:	7183      	strb	r3, [r0, #6]
    a27e:	0a1b      	lsrs	r3, r3, #8
    a280:	71c3      	strb	r3, [r0, #7]
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_rx_octets;
	sep->max_rx_time =
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_rx_time;
    a282:	7ba2      	ldrb	r2, [r4, #14]
    a284:	7be3      	ldrb	r3, [r4, #15]
    a286:	021b      	lsls	r3, r3, #8
    a288:	4313      	orrs	r3, r2
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_tx_octets;
	sep->max_tx_time =
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_tx_time;
	sep->max_rx_octets =
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_rx_octets;
	sep->max_rx_time =
    a28a:	7203      	strb	r3, [r0, #8]
    a28c:	0a1b      	lsrs	r3, r3, #8
    a28e:	7243      	strb	r3, [r0, #9]
    a290:	e022      	b.n	a2d8 <hci_evt_encode+0x52c>
    a292:	7b23      	ldrb	r3, [r4, #12]

static void le_unknown_rsp(struct pdu_data *pdu_data, u16_t handle,
			   struct net_buf *buf)
{

	switch (pdu_data->payload.llctrl.ctrldata.unknown_rsp.type) {
    a294:	2b0e      	cmp	r3, #14
    a296:	d106      	bne.n	a2a6 <hci_evt_encode+0x4fa>
	case PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ:
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    a298:	000b      	movs	r3, r1
    a29a:	002a      	movs	r2, r5
    a29c:	2100      	movs	r1, #0
    a29e:	201a      	movs	r0, #26
    a2a0:	f7ff f842 	bl	9328 <le_remote_feat_complete>
    a2a4:	e018      	b.n	a2d8 <hci_evt_encode+0x52c>
					    NULL, handle, buf);
		break;

	default:
		BT_WARN("type: 0x%02x",
    a2a6:	4a0f      	ldr	r2, [pc, #60]	; (a2e4 <hci_evt_encode+0x538>)
    a2a8:	9301      	str	r3, [sp, #4]
    a2aa:	4b0f      	ldr	r3, [pc, #60]	; (a2e8 <hci_evt_encode+0x53c>)
    a2ac:	9202      	str	r2, [sp, #8]
    a2ae:	9300      	str	r3, [sp, #0]
    a2b0:	4a0e      	ldr	r2, [pc, #56]	; (a2ec <hci_evt_encode+0x540>)
    a2b2:	4b0f      	ldr	r3, [pc, #60]	; (a2f0 <hci_evt_encode+0x544>)
    a2b4:	490f      	ldr	r1, [pc, #60]	; (a2f4 <hci_evt_encode+0x548>)
    a2b6:	4810      	ldr	r0, [pc, #64]	; (a2f8 <hci_evt_encode+0x54c>)
    a2b8:	f7f7 fb62 	bl	1980 <printk>
    a2bc:	e00c      	b.n	a2d8 <hci_evt_encode+0x52c>
	case PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP:
		le_unknown_rsp(pdu_data, handle, buf);
		break;

	default:
		LL_ASSERT(0);
    a2be:	4b09      	ldr	r3, [pc, #36]	; (a2e4 <hci_evt_encode+0x538>)
    a2c0:	9301      	str	r3, [sp, #4]
    a2c2:	4b0e      	ldr	r3, [pc, #56]	; (a2fc <hci_evt_encode+0x550>)
    a2c4:	9300      	str	r3, [sp, #0]
    a2c6:	4b0e      	ldr	r3, [pc, #56]	; (a300 <hci_evt_encode+0x554>)
    a2c8:	4a0e      	ldr	r2, [pc, #56]	; (a304 <hci_evt_encode+0x558>)
    a2ca:	490a      	ldr	r1, [pc, #40]	; (a2f4 <hci_evt_encode+0x548>)
    a2cc:	480e      	ldr	r0, [pc, #56]	; (a308 <hci_evt_encode+0x55c>)
    a2ce:	f7f7 fb57 	bl	1980 <printk>
    a2d2:	b662      	cpsie	i
    a2d4:	2004      	movs	r0, #4
    a2d6:	df02      	svc	2
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
		encode_control(node_rx, pdu_data, buf);
	} else {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
    a2d8:	b011      	add	sp, #68	; 0x44
    a2da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a2dc:	200007c0 	.word	0x200007c0
    a2e0:	200007c8 	.word	0x200007c8
    a2e4:	000154c4 	.word	0x000154c4
    a2e8:	0001550f 	.word	0x0001550f
    a2ec:	000154d1 	.word	0x000154d1
    a2f0:	00017f9d 	.word	0x00017f9d
    a2f4:	0001548b 	.word	0x0001548b
    a2f8:	000169c1 	.word	0x000169c1
    a2fc:	000154c9 	.word	0x000154c9
    a300:	00017fde 	.word	0x00017fde
    a304:	00015484 	.word	0x00015484
    a308:	00015b21 	.word	0x00015b21

0000a30c <hci_num_cmplt_encode>:

void hci_num_cmplt_encode(struct net_buf *buf, u16_t handle, u8_t num)
{
    a30c:	b570      	push	{r4, r5, r6, lr}
    a30e:	0005      	movs	r5, r0
    a310:	000c      	movs	r4, r1
    a312:	0016      	movs	r6, r2
	u8_t len;

	num_handles = 1;

	len = (sizeof(*ep) + (sizeof(*hc) * num_handles));
	evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);
    a314:	2113      	movs	r1, #19
    a316:	2205      	movs	r2, #5
    a318:	f7fe ff8e 	bl	9238 <evt_create>

	ep = net_buf_add(buf, len);
    a31c:	0028      	movs	r0, r5
    a31e:	2105      	movs	r1, #5
    a320:	3008      	adds	r0, #8
    a322:	f009 f94f 	bl	135c4 <net_buf_simple_add>
	ep->num_handles = num_handles;
    a326:	2301      	movs	r3, #1
	hc = &ep->h[0];
	hc->handle = sys_cpu_to_le16(handle);
	hc->count = sys_cpu_to_le16(num);
    a328:	2200      	movs	r2, #0

	len = (sizeof(*ep) + (sizeof(*hc) * num_handles));
	evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);

	ep = net_buf_add(buf, len);
	ep->num_handles = num_handles;
    a32a:	7003      	strb	r3, [r0, #0]
	hc = &ep->h[0];
	hc->handle = sys_cpu_to_le16(handle);
    a32c:	7044      	strb	r4, [r0, #1]
    a32e:	18c3      	adds	r3, r0, r3
	hc->count = sys_cpu_to_le16(num);
    a330:	b2b6      	uxth	r6, r6
	evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);

	ep = net_buf_add(buf, len);
	ep->num_handles = num_handles;
	hc = &ep->h[0];
	hc->handle = sys_cpu_to_le16(handle);
    a332:	0a24      	lsrs	r4, r4, #8
	hc->count = sys_cpu_to_le16(num);
    a334:	709e      	strb	r6, [r3, #2]
	evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);

	ep = net_buf_add(buf, len);
	ep->num_handles = num_handles;
	hc = &ep->h[0];
	hc->handle = sys_cpu_to_le16(handle);
    a336:	705c      	strb	r4, [r3, #1]
	hc->count = sys_cpu_to_le16(num);
    a338:	70da      	strb	r2, [r3, #3]
}
    a33a:	bd70      	pop	{r4, r5, r6, pc}

0000a33c <hci_get_class>:
{
	struct pdu_data *pdu_data;

	pdu_data = (struct pdu_data *)node_rx->pdu_data;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    a33c:	7903      	ldrb	r3, [r0, #4]
    a33e:	2b01      	cmp	r3, #1
    a340:	d006      	beq.n	a350 <hci_get_class+0x14>
    a342:	3b02      	subs	r3, #2
    a344:	b2db      	uxtb	r3, r3
    a346:	2b0a      	cmp	r3, #10
    a348:	d80a      	bhi.n	a360 <hci_get_class+0x24>
    a34a:	4a07      	ldr	r2, [pc, #28]	; (a368 <hci_get_class+0x2c>)
    a34c:	56d0      	ldrsb	r0, [r2, r3]
    a34e:	e009      	b.n	a364 <hci_get_class+0x28>
			return HCI_CLASS_EVT_CONNECTION;
		default:
			return -1;
		}

	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
    a350:	7a03      	ldrb	r3, [r0, #8]
    a352:	2003      	movs	r0, #3
    a354:	4003      	ands	r3, r0
		return HCI_CLASS_EVT_CONNECTION;
	} else {
		return HCI_CLASS_ACL_DATA;
    a356:	3b03      	subs	r3, #3
    a358:	425a      	negs	r2, r3
    a35a:	4153      	adcs	r3, r2
    a35c:	1ac0      	subs	r0, r0, r3
    a35e:	e001      	b.n	a364 <hci_get_class+0x28>
{
	struct pdu_data *pdu_data;

	pdu_data = (struct pdu_data *)node_rx->pdu_data;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    a360:	2001      	movs	r0, #1
    a362:	4240      	negs	r0, r0
	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
		return HCI_CLASS_EVT_CONNECTION;
	} else {
		return HCI_CLASS_ACL_DATA;
	}
}
    a364:	4770      	bx	lr
    a366:	46c0      	nop			; (mov r8, r8)
    a368:	00017fef 	.word	0x00017fef

0000a36c <hci_init>:

#if CONFIG_BLUETOOTH_CONTROLLER_DUP_FILTER_LEN > 0
	dup_count = -1;
#endif
	/* reset event masks */
	event_mask = DEFAULT_EVENT_MASK;
    a36c:	2001      	movs	r0, #1
    a36e:	4b08      	ldr	r3, [pc, #32]	; (a390 <hci_init+0x24>)
    a370:	4908      	ldr	r1, [pc, #32]	; (a394 <hci_init+0x28>)
    a372:	4240      	negs	r0, r0
    a374:	6018      	str	r0, [r3, #0]
    a376:	6059      	str	r1, [r3, #4]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    a378:	2000      	movs	r0, #0
    a37a:	2100      	movs	r1, #0
    a37c:	4b06      	ldr	r3, [pc, #24]	; (a398 <hci_init+0x2c>)
    a37e:	6018      	str	r0, [r3, #0]
    a380:	6059      	str	r1, [r3, #4]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    a382:	201f      	movs	r0, #31
    a384:	2100      	movs	r1, #0
    a386:	4b05      	ldr	r3, [pc, #20]	; (a39c <hci_init+0x30>)
    a388:	6018      	str	r0, [r3, #0]
    a38a:	6059      	str	r1, [r3, #4]
{
#if defined(CONFIG_BLUETOOTH_HCI_ACL_FLOW_CONTROL)
	hbuf_signal = signal_host_buf;
#endif
	reset(NULL, NULL);
}
    a38c:	4770      	bx	lr
    a38e:	46c0      	nop			; (mov r8, r8)
    a390:	200007c0 	.word	0x200007c0
    a394:	00001fff 	.word	0x00001fff
    a398:	20001318 	.word	0x20001318
    a39c:	200007c8 	.word	0x200007c8

0000a3a0 <_hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int _hci_driver_init(struct device *unused)
{
    a3a0:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
    a3a2:	4802      	ldr	r0, [pc, #8]	; (a3ac <_hci_driver_init+0xc>)
    a3a4:	f7f9 fef2 	bl	418c <bt_hci_driver_register>

	return 0;
}
    a3a8:	2000      	movs	r0, #0
    a3aa:	bd10      	pop	{r4, pc}
    a3ac:	0001801c 	.word	0x0001801c

0000a3b0 <recv_thread>:
	return buf;
}
#endif

static void recv_thread(void *p1, void *p2, void *p3)
{
    a3b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}

		/* process host buffers first if any */
		buf = process_hbuf();

#else
		node_rx = k_fifo_get(&recv_fifo, K_FOREVER);
    a3b2:	2101      	movs	r1, #1
    a3b4:	4826      	ldr	r0, [pc, #152]	; (a450 <recv_thread+0xa0>)
    a3b6:	4249      	negs	r1, r1
    a3b8:	f00a f872 	bl	144a0 <k_queue_get>
    a3bc:	1e04      	subs	r4, r0, #0
#endif
		BT_DBG("unblocked");

		if (node_rx && !buf) {
    a3be:	d044      	beq.n	a44a <recv_thread+0x9a>
	return buf;
}

static inline struct net_buf *process_node(struct radio_pdu_node_rx *node_rx)
{
	s8_t class = hci_get_class(node_rx);
    a3c0:	f7ff ffbc 	bl	a33c <hci_get_class>
    a3c4:	9403      	str	r4, [sp, #12]
					  s8_t class)
{
	struct net_buf *buf = NULL;

	/* Check if we need to generate an HCI event or ACL data */
	switch (class) {
    a3c6:	2800      	cmp	r0, #0
    a3c8:	db1c      	blt.n	a404 <recv_thread+0x54>
    a3ca:	2802      	cmp	r0, #2
    a3cc:	dd0b      	ble.n	a3e6 <recv_thread+0x36>
    a3ce:	2803      	cmp	r0, #3
    a3d0:	d118      	bne.n	a404 <recv_thread+0x54>
		}
		break;
#if defined(CONFIG_BLUETOOTH_CONN)
	case HCI_CLASS_ACL_DATA:
		/* generate ACL data */
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
    a3d2:	2101      	movs	r1, #1
    a3d4:	4249      	negs	r1, r1
    a3d6:	f7fa f815 	bl	4404 <bt_buf_get_rx>
    a3da:	0004      	movs	r4, r0
		hci_acl_encode(node_rx, buf);
    a3dc:	0001      	movs	r1, r0
    a3de:	9803      	ldr	r0, [sp, #12]
    a3e0:	f7ff fc9e 	bl	9d20 <hci_acl_encode>
    a3e4:	e01b      	b.n	a41e <recv_thread+0x6e>
	switch (class) {
	case HCI_CLASS_EVT_DISCARDABLE:
	case HCI_CLASS_EVT_REQUIRED:
	case HCI_CLASS_EVT_CONNECTION:
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
			buf = bt_buf_get_rx(BT_BUF_EVT, K_NO_WAIT);
    a3e6:	2100      	movs	r1, #0
	/* Check if we need to generate an HCI event or ACL data */
	switch (class) {
	case HCI_CLASS_EVT_DISCARDABLE:
	case HCI_CLASS_EVT_REQUIRED:
	case HCI_CLASS_EVT_CONNECTION:
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
    a3e8:	2801      	cmp	r0, #1
    a3ea:	d002      	beq.n	a3f2 <recv_thread+0x42>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_NO_WAIT);
		} else {
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    a3ec:	2101      	movs	r1, #1
    a3ee:	2001      	movs	r0, #1
    a3f0:	4249      	negs	r1, r1
    a3f2:	f7fa f807 	bl	4404 <bt_buf_get_rx>
    a3f6:	1e04      	subs	r4, r0, #0
		}
		if (buf) {
    a3f8:	d011      	beq.n	a41e <recv_thread+0x6e>
			hci_evt_encode(node_rx, buf);
    a3fa:	0001      	movs	r1, r0
    a3fc:	9803      	ldr	r0, [sp, #12]
    a3fe:	f7ff fcd5 	bl	9dac <hci_evt_encode>
    a402:	e00c      	b.n	a41e <recv_thread+0x6e>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
		hci_acl_encode(node_rx, buf);
		break;
#endif
	default:
		LL_ASSERT(0);
    a404:	4b13      	ldr	r3, [pc, #76]	; (a454 <recv_thread+0xa4>)
    a406:	4a14      	ldr	r2, [pc, #80]	; (a458 <recv_thread+0xa8>)
    a408:	9301      	str	r3, [sp, #4]
    a40a:	4b14      	ldr	r3, [pc, #80]	; (a45c <recv_thread+0xac>)
    a40c:	4914      	ldr	r1, [pc, #80]	; (a460 <recv_thread+0xb0>)
    a40e:	9300      	str	r3, [sp, #0]
    a410:	4814      	ldr	r0, [pc, #80]	; (a464 <recv_thread+0xb4>)
    a412:	4b15      	ldr	r3, [pc, #84]	; (a468 <recv_thread+0xb8>)
    a414:	f7f7 fab4 	bl	1980 <printk>
    a418:	b662      	cpsie	i
    a41a:	2004      	movs	r0, #4
    a41c:	df02      	svc	2
		break;
	}

	radio_rx_fc_set(node_rx->hdr.handle, 0);
    a41e:	9b03      	ldr	r3, [sp, #12]
    a420:	2100      	movs	r1, #0
    a422:	88d8      	ldrh	r0, [r3, #6]
    a424:	f007 fb86 	bl	11b34 <radio_rx_fc_set>
	node_rx->hdr.onion.next = 0;
    a428:	2200      	movs	r2, #0
    a42a:	9b03      	ldr	r3, [sp, #12]
	radio_rx_mem_release(&node_rx);
    a42c:	a803      	add	r0, sp, #12
		LL_ASSERT(0);
		break;
	}

	radio_rx_fc_set(node_rx->hdr.handle, 0);
	node_rx->hdr.onion.next = 0;
    a42e:	601a      	str	r2, [r3, #0]
	radio_rx_mem_release(&node_rx);
    a430:	f007 fb04 	bl	11a3c <radio_rx_mem_release>
		if (node_rx && !buf) {
			/* process regular node from radio */
			buf = process_node(node_rx);
		}

		if (buf) {
    a434:	2c00      	cmp	r4, #0
    a436:	d008      	beq.n	a44a <recv_thread+0x9a>
			if (buf->len) {
    a438:	89a3      	ldrh	r3, [r4, #12]
				BT_DBG("Packet in: type:%u len:%u",
					bt_buf_get_type(buf), buf->len);
				bt_recv(buf);
    a43a:	0020      	movs	r0, r4
			/* process regular node from radio */
			buf = process_node(node_rx);
		}

		if (buf) {
			if (buf->len) {
    a43c:	2b00      	cmp	r3, #0
    a43e:	d002      	beq.n	a446 <recv_thread+0x96>
				BT_DBG("Packet in: type:%u len:%u",
					bt_buf_get_type(buf), buf->len);
				bt_recv(buf);
    a440:	f7f8 ff96 	bl	3370 <bt_recv>
    a444:	e001      	b.n	a44a <recv_thread+0x9a>
			} else {
				net_buf_unref(buf);
    a446:	f009 f89b 	bl	13580 <net_buf_unref>
			}
		}

		k_yield();
    a44a:	f00a f973 	bl	14734 <k_yield>
		if (k_uptime_get_32() - rx_ts > K_SECONDS(5)) {
			STACK_ANALYZE("recv thread stack", recv_thread_stack);
			rx_ts = k_uptime_get_32();
		}
#endif
	}
    a44e:	e7b0      	b.n	a3b2 <recv_thread+0x2>
    a450:	200009bc 	.word	0x200009bc
    a454:	000154c4 	.word	0x000154c4
    a458:	00015484 	.word	0x00015484
    a45c:	000154c9 	.word	0x000154c9
    a460:	0001548b 	.word	0x0001548b
    a464:	00015b21 	.word	0x00015b21
    a468:	0001803c 	.word	0x0001803c

0000a46c <prio_recv_thread>:
static sys_slist_t hbuf_pend;
static s32_t hbuf_count;
#endif

static void prio_recv_thread(void *p1, void *p2, void *p3)
{
    a46c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	while (1) {
		struct radio_pdu_node_rx *node_rx;
		u8_t num_cmplt;
		u16_t handle;

		while ((num_cmplt = radio_rx_get(&node_rx, &handle))) {
    a46e:	466b      	mov	r3, sp
    a470:	1c9d      	adds	r5, r3, #2
    a472:	0029      	movs	r1, r5
    a474:	a801      	add	r0, sp, #4
    a476:	f007 faa5 	bl	119c4 <radio_rx_get>
    a47a:	1e04      	subs	r4, r0, #0
    a47c:	d00f      	beq.n	a49e <prio_recv_thread+0x32>
#if defined(CONFIG_BLUETOOTH_CONN)
			struct net_buf *buf;

			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    a47e:	2101      	movs	r1, #1
    a480:	2001      	movs	r0, #1
    a482:	4249      	negs	r1, r1
    a484:	f7f9 ffbe 	bl	4404 <bt_buf_get_rx>
    a488:	0006      	movs	r6, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    a48a:	8829      	ldrh	r1, [r5, #0]
    a48c:	0022      	movs	r2, r4
    a48e:	f7ff ff3d 	bl	a30c <hci_num_cmplt_encode>
			BT_DBG("Num Complete: 0x%04x:%u", handle, num_cmplt);
			bt_recv_prio(buf);
    a492:	0030      	movs	r0, r6
    a494:	f7f9 fd7c 	bl	3f90 <bt_recv_prio>
			k_yield();
    a498:	f00a f94c 	bl	14734 <k_yield>
    a49c:	e7e7      	b.n	a46e <prio_recv_thread+0x2>
#endif
		}

		if (node_rx) {
    a49e:	9b01      	ldr	r3, [sp, #4]
    a4a0:	2b00      	cmp	r3, #0
    a4a2:	d006      	beq.n	a4b2 <prio_recv_thread+0x46>

			radio_rx_dequeue();
    a4a4:	f007 fdfa 	bl	1209c <radio_rx_dequeue>

			BT_DBG("RX node enqueue");
			k_fifo_put(&recv_fifo, node_rx);
    a4a8:	9901      	ldr	r1, [sp, #4]
    a4aa:	4805      	ldr	r0, [pc, #20]	; (a4c0 <prio_recv_thread+0x54>)
    a4ac:	f009 ffa8 	bl	14400 <k_queue_append>
    a4b0:	e7dd      	b.n	a46e <prio_recv_thread+0x2>

			continue;
		}

		BT_DBG("sem take...");
		k_sem_take(&sem_prio_recv, K_FOREVER);
    a4b2:	2101      	movs	r1, #1
    a4b4:	4803      	ldr	r0, [pc, #12]	; (a4c4 <prio_recv_thread+0x58>)
    a4b6:	4249      	negs	r1, r1
    a4b8:	f00a fa4c 	bl	14954 <k_sem_take>
	while (1) {
		struct radio_pdu_node_rx *node_rx;
		u8_t num_cmplt;
		u16_t handle;

		while ((num_cmplt = radio_rx_get(&node_rx, &handle))) {
    a4bc:	e7d7      	b.n	a46e <prio_recv_thread+0x2>
    a4be:	46c0      	nop			; (mov r8, r8)
    a4c0:	200009bc 	.word	0x200009bc
    a4c4:	20000994 	.word	0x20000994

0000a4c8 <hci_driver_send>:

	return 0;
}

static int hci_driver_send(struct net_buf *buf)
{
    a4c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	u8_t type;
	int err;

	BT_DBG("enter");

	if (!buf->len) {
    a4ca:	8983      	ldrh	r3, [r0, #12]

	return 0;
}

static int hci_driver_send(struct net_buf *buf)
{
    a4cc:	0004      	movs	r4, r0
	u8_t type;
	int err;

	BT_DBG("enter");

	if (!buf->len) {
    a4ce:	2b00      	cmp	r3, #0
    a4d0:	d10a      	bne.n	a4e8 <hci_driver_send+0x20>
		BT_ERR("Empty HCI packet");
    a4d2:	4b1a      	ldr	r3, [pc, #104]	; (a53c <hci_driver_send+0x74>)
    a4d4:	4a1a      	ldr	r2, [pc, #104]	; (a540 <hci_driver_send+0x78>)
    a4d6:	9301      	str	r3, [sp, #4]
    a4d8:	4b1a      	ldr	r3, [pc, #104]	; (a544 <hci_driver_send+0x7c>)
    a4da:	491b      	ldr	r1, [pc, #108]	; (a548 <hci_driver_send+0x80>)
    a4dc:	9300      	str	r3, [sp, #0]
    a4de:	481b      	ldr	r0, [pc, #108]	; (a54c <hci_driver_send+0x84>)
    a4e0:	4b1b      	ldr	r3, [pc, #108]	; (a550 <hci_driver_send+0x88>)
    a4e2:	f7f7 fa4d 	bl	1980 <printk>
    a4e6:	e020      	b.n	a52a <hci_driver_send+0x62>
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return *(u8_t *)net_buf_user_data(buf);
    a4e8:	2203      	movs	r2, #3
    a4ea:	89c3      	ldrh	r3, [r0, #14]
    a4ec:	18c3      	adds	r3, r0, r3
    a4ee:	3313      	adds	r3, #19
    a4f0:	4393      	bics	r3, r2
    a4f2:	781b      	ldrb	r3, [r3, #0]
		return -EINVAL;
	}

	type = bt_buf_get_type(buf);
	switch (type) {
    a4f4:	2b00      	cmp	r3, #0
    a4f6:	d006      	beq.n	a506 <hci_driver_send+0x3e>
    a4f8:	2b02      	cmp	r3, #2
    a4fa:	d10b      	bne.n	a514 <hci_driver_send+0x4c>
#if defined(CONFIG_BLUETOOTH_CONN)
	case BT_BUF_ACL_OUT:
		err = hci_acl_handle(buf);
    a4fc:	f7ff fb96 	bl	9c2c <hci_acl_handle>
	default:
		BT_ERR("Unknown HCI type %u", type);
		return -EINVAL;
	}

	if (!err) {
    a500:	2800      	cmp	r0, #0
    a502:	d119      	bne.n	a538 <hci_driver_send+0x70>
    a504:	e014      	b.n	a530 <hci_driver_send+0x68>

static int cmd_handle(struct net_buf *buf)
{
	struct net_buf *evt;

	evt = hci_cmd_handle(buf);
    a506:	f7ff f805 	bl	9514 <hci_cmd_handle>
	if (evt) {
    a50a:	2800      	cmp	r0, #0
    a50c:	d010      	beq.n	a530 <hci_driver_send+0x68>
		BT_DBG("Replying with event of %u bytes", evt->len);
		bt_recv_prio(evt);
    a50e:	f7f9 fd3f 	bl	3f90 <bt_recv_prio>
    a512:	e00d      	b.n	a530 <hci_driver_send+0x68>
#endif
	case BT_BUF_CMD:
		err = cmd_handle(buf);
		break;
	default:
		BT_ERR("Unknown HCI type %u", type);
    a514:	4a09      	ldr	r2, [pc, #36]	; (a53c <hci_driver_send+0x74>)
    a516:	9301      	str	r3, [sp, #4]
    a518:	4b0a      	ldr	r3, [pc, #40]	; (a544 <hci_driver_send+0x7c>)
    a51a:	9202      	str	r2, [sp, #8]
    a51c:	9300      	str	r3, [sp, #0]
    a51e:	4a08      	ldr	r2, [pc, #32]	; (a540 <hci_driver_send+0x78>)
    a520:	4b0b      	ldr	r3, [pc, #44]	; (a550 <hci_driver_send+0x88>)
    a522:	4909      	ldr	r1, [pc, #36]	; (a548 <hci_driver_send+0x80>)
    a524:	480b      	ldr	r0, [pc, #44]	; (a554 <hci_driver_send+0x8c>)
    a526:	f7f7 fa2b 	bl	1980 <printk>
		return -EINVAL;
    a52a:	2016      	movs	r0, #22
    a52c:	4240      	negs	r0, r0
    a52e:	e003      	b.n	a538 <hci_driver_send+0x70>
	}

	if (!err) {
		net_buf_unref(buf);
    a530:	0020      	movs	r0, r4
    a532:	f009 f825 	bl	13580 <net_buf_unref>
    a536:	2000      	movs	r0, #0
	}

	BT_DBG("exit: %d", err);

	return err;
}
    a538:	b004      	add	sp, #16
    a53a:	bd10      	pop	{r4, pc}
    a53c:	000154c4 	.word	0x000154c4
    a540:	00015484 	.word	0x00015484
    a544:	000154c9 	.word	0x000154c9
    a548:	0001548b 	.word	0x0001548b
    a54c:	000169de 	.word	0x000169de
    a550:	0001800c 	.word	0x0001800c
    a554:	000169ff 	.word	0x000169ff

0000a558 <hci_driver_open>:

static int hci_driver_open(void)
{
    a558:	b510      	push	{r4, lr}
	u32_t err;

	DEBUG_INIT();

	err = ll_init(&sem_prio_recv);
    a55a:	481a      	ldr	r0, [pc, #104]	; (a5c4 <hci_driver_open+0x6c>)

	return err;
}

static int hci_driver_open(void)
{
    a55c:	b086      	sub	sp, #24
	u32_t err;

	DEBUG_INIT();

	err = ll_init(&sem_prio_recv);
    a55e:	f007 ff0d 	bl	1237c <ll_init>
    a562:	1e04      	subs	r4, r0, #0
	if (err) {
    a564:	d00b      	beq.n	a57e <hci_driver_open+0x26>
		BT_ERR("LL initialization failed: %u", err);
    a566:	4b18      	ldr	r3, [pc, #96]	; (a5c8 <hci_driver_open+0x70>)
    a568:	9001      	str	r0, [sp, #4]
    a56a:	9302      	str	r3, [sp, #8]
    a56c:	4b17      	ldr	r3, [pc, #92]	; (a5cc <hci_driver_open+0x74>)
    a56e:	4a18      	ldr	r2, [pc, #96]	; (a5d0 <hci_driver_open+0x78>)
    a570:	9300      	str	r3, [sp, #0]
    a572:	4918      	ldr	r1, [pc, #96]	; (a5d4 <hci_driver_open+0x7c>)
    a574:	4b18      	ldr	r3, [pc, #96]	; (a5d8 <hci_driver_open+0x80>)
    a576:	4819      	ldr	r0, [pc, #100]	; (a5dc <hci_driver_open+0x84>)
    a578:	f7f7 fa02 	bl	1980 <printk>
		return err;
    a57c:	e01e      	b.n	a5bc <hci_driver_open+0x64>
	}

#if defined(CONFIG_BLUETOOTH_HCI_ACL_FLOW_CONTROL)
	hci_init(&hbuf_signal);
#else
	hci_init(NULL);
    a57e:	f7ff fef5 	bl	a36c <hci_init>
#endif

	k_thread_create(&prio_recv_thread_data, prio_recv_thread_stack,
    a582:	230a      	movs	r3, #10
    a584:	22bb      	movs	r2, #187	; 0xbb
    a586:	425b      	negs	r3, r3
    a588:	9303      	str	r3, [sp, #12]
    a58a:	0092      	lsls	r2, r2, #2
    a58c:	4b14      	ldr	r3, [pc, #80]	; (a5e0 <hci_driver_open+0x88>)
    a58e:	4915      	ldr	r1, [pc, #84]	; (a5e4 <hci_driver_open+0x8c>)
    a590:	9405      	str	r4, [sp, #20]
    a592:	9404      	str	r4, [sp, #16]
    a594:	9402      	str	r4, [sp, #8]
    a596:	9401      	str	r4, [sp, #4]
    a598:	9400      	str	r4, [sp, #0]
    a59a:	4813      	ldr	r0, [pc, #76]	; (a5e8 <hci_driver_open+0x90>)
    a59c:	f00a fb90 	bl	14cc0 <k_thread_create>
			K_THREAD_STACK_SIZEOF(prio_recv_thread_stack),
			prio_recv_thread,
			NULL, NULL, NULL, K_PRIO_COOP(6), 0, K_NO_WAIT);

	k_thread_create(&recv_thread_data, recv_thread_stack,
    a5a0:	2309      	movs	r3, #9
    a5a2:	425b      	negs	r3, r3
    a5a4:	9303      	str	r3, [sp, #12]
    a5a6:	9405      	str	r4, [sp, #20]
    a5a8:	9404      	str	r4, [sp, #16]
    a5aa:	9402      	str	r4, [sp, #8]
    a5ac:	9401      	str	r4, [sp, #4]
    a5ae:	9400      	str	r4, [sp, #0]
    a5b0:	4b0e      	ldr	r3, [pc, #56]	; (a5ec <hci_driver_open+0x94>)
    a5b2:	4a0f      	ldr	r2, [pc, #60]	; (a5f0 <hci_driver_open+0x98>)
    a5b4:	490f      	ldr	r1, [pc, #60]	; (a5f4 <hci_driver_open+0x9c>)
    a5b6:	4810      	ldr	r0, [pc, #64]	; (a5f8 <hci_driver_open+0xa0>)
    a5b8:	f00a fb82 	bl	14cc0 <k_thread_create>
			NULL, NULL, NULL, K_PRIO_COOP(7), 0, K_NO_WAIT);

	BT_DBG("Success.");

	return 0;
}
    a5bc:	0020      	movs	r0, r4
    a5be:	b006      	add	sp, #24
    a5c0:	bd10      	pop	{r4, pc}
    a5c2:	46c0      	nop			; (mov r8, r8)
    a5c4:	20000994 	.word	0x20000994
    a5c8:	000154c4 	.word	0x000154c4
    a5cc:	000154c9 	.word	0x000154c9
    a5d0:	00015484 	.word	0x00015484
    a5d4:	0001548b 	.word	0x0001548b
    a5d8:	0001802c 	.word	0x0001802c
    a5dc:	00016a23 	.word	0x00016a23
    a5e0:	0000a46d 	.word	0x0000a46d
    a5e4:	20002f3c 	.word	0x20002f3c
    a5e8:	200022e0 	.word	0x200022e0
    a5ec:	0000a3b1 	.word	0x0000a3b1
    a5f0:	0000052c 	.word	0x0000052c
    a5f4:	20002494 	.word	0x20002494
    a5f8:	20002258 	.word	0x20002258

0000a5fc <mayfly_init>:
} mft[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT];

static void *mfl[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT][2];

void mayfly_init(void)
{
    a5fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	u8_t callee_id;

	callee_id = MAYFLY_CALLEE_COUNT;
    a5fe:	2504      	movs	r5, #4
	while (callee_id--) {
		u8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
			memq_init(mfl[callee_id][caller_id],
    a600:	270c      	movs	r7, #12
void mayfly_init(void)
{
	u8_t callee_id;

	callee_id = MAYFLY_CALLEE_COUNT;
	while (callee_id--) {
    a602:	3d01      	subs	r5, #1
    a604:	b2ed      	uxtb	r5, r5
    a606:	2dff      	cmp	r5, #255	; 0xff
    a608:	d015      	beq.n	a636 <mayfly_init+0x3a>
    a60a:	2404      	movs	r4, #4
		u8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
			memq_init(mfl[callee_id][caller_id],
    a60c:	2630      	movs	r6, #48	; 0x30
	callee_id = MAYFLY_CALLEE_COUNT;
	while (callee_id--) {
		u8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
    a60e:	3c01      	subs	r4, #1
    a610:	b2e4      	uxtb	r4, r4
    a612:	2cff      	cmp	r4, #255	; 0xff
    a614:	d0f5      	beq.n	a602 <mayfly_init+0x6>
			memq_init(mfl[callee_id][caller_id],
    a616:	0033      	movs	r3, r6
    a618:	0039      	movs	r1, r7
    a61a:	436b      	muls	r3, r5
    a61c:	4361      	muls	r1, r4
    a61e:	18c9      	adds	r1, r1, r3
    a620:	4b05      	ldr	r3, [pc, #20]	; (a638 <mayfly_init+0x3c>)
    a622:	00a8      	lsls	r0, r5, #2
    a624:	1859      	adds	r1, r3, r1
    a626:	1900      	adds	r0, r0, r4
    a628:	4b04      	ldr	r3, [pc, #16]	; (a63c <mayfly_init+0x40>)
    a62a:	00c0      	lsls	r0, r0, #3
    a62c:	1d0a      	adds	r2, r1, #4
    a62e:	1818      	adds	r0, r3, r0
    a630:	f000 f98c 	bl	a94c <memq_init>
    a634:	e7eb      	b.n	a60e <mayfly_init+0x12>
				  &mft[callee_id][caller_id].head,
				  &mft[callee_id][caller_id].tail);
		}
	}
}
    a636:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a638:	200013a8 	.word	0x200013a8
    a63c:	20001328 	.word	0x20001328

0000a640 <mayfly_enable>:

void mayfly_enable(u8_t caller_id, u8_t callee_id, u8_t enable)
{
    a640:	b570      	push	{r4, r5, r6, lr}
    a642:	250c      	movs	r5, #12
    a644:	2430      	movs	r4, #48	; 0x30
	if (enable) {
		if (mft[callee_id][caller_id].enable_req ==
    a646:	002b      	movs	r3, r5
    a648:	434c      	muls	r4, r1
    a64a:	4343      	muls	r3, r0
    a64c:	4e0b      	ldr	r6, [pc, #44]	; (a67c <mayfly_enable+0x3c>)
    a64e:	191c      	adds	r4, r3, r4
    a650:	1933      	adds	r3, r6, r4
	}
}

void mayfly_enable(u8_t caller_id, u8_t callee_id, u8_t enable)
{
	if (enable) {
    a652:	2a00      	cmp	r2, #0
    a654:	d008      	beq.n	a668 <mayfly_enable+0x28>
		if (mft[callee_id][caller_id].enable_req ==
    a656:	7a1d      	ldrb	r5, [r3, #8]
    a658:	7a5c      	ldrb	r4, [r3, #9]
    a65a:	42ac      	cmp	r4, r5
    a65c:	d101      	bne.n	a662 <mayfly_enable+0x22>
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
    a65e:	3401      	adds	r4, #1
    a660:	721c      	strb	r4, [r3, #8]
		}

		mayfly_enable_cb(caller_id, callee_id, enable);
    a662:	f007 fe01 	bl	12268 <mayfly_enable_cb>
    a666:	e007      	b.n	a678 <mayfly_enable+0x38>
	} else {
		if (mft[callee_id][caller_id].disable_req ==
    a668:	7a9c      	ldrb	r4, [r3, #10]
    a66a:	7ada      	ldrb	r2, [r3, #11]
    a66c:	42a2      	cmp	r2, r4
    a66e:	d103      	bne.n	a678 <mayfly_enable+0x38>
		    mft[callee_id][caller_id].disable_ack) {
			mft[callee_id][caller_id].disable_req++;
    a670:	3201      	adds	r2, #1
    a672:	729a      	strb	r2, [r3, #10]

			mayfly_pend(caller_id, callee_id);
    a674:	f007 fe50 	bl	12318 <mayfly_pend>
		}
	}
}
    a678:	bd70      	pop	{r4, r5, r6, pc}
    a67a:	46c0      	nop			; (mov r8, r8)
    a67c:	200013a8 	.word	0x200013a8

0000a680 <mayfly_enqueue>:

u32_t mayfly_enqueue(u8_t caller_id, u8_t callee_id, u8_t chain,
			struct mayfly *m)
{
    a680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a682:	0005      	movs	r5, r0
    a684:	000e      	movs	r6, r1
    a686:	001c      	movs	r4, r3
	u8_t state;
	u8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
    a688:	2a00      	cmp	r2, #0
    a68a:	d001      	beq.n	a690 <mayfly_enqueue+0x10>
    a68c:	2101      	movs	r1, #1
    a68e:	e017      	b.n	a6c0 <mayfly_enqueue+0x40>
			struct mayfly *m)
{
	u8_t state;
	u8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    a690:	f007 fe34 	bl	122fc <mayfly_prio_is_equal>
    a694:	2800      	cmp	r0, #0
    a696:	d0f9      	beq.n	a68c <mayfly_enqueue+0xc>
		!mayfly_is_enabled(caller_id, callee_id) ||
    a698:	0031      	movs	r1, r6
    a69a:	0028      	movs	r0, r5
    a69c:	f007 fe0a 	bl	122b4 <mayfly_is_enabled>
			struct mayfly *m)
{
	u8_t state;
	u8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    a6a0:	2800      	cmp	r0, #0
    a6a2:	d0f3      	beq.n	a68c <mayfly_enqueue+0xc>
		!mayfly_is_enabled(caller_id, callee_id) ||
		(mft[callee_id][caller_id].disable_req !=
    a6a4:	230c      	movs	r3, #12
    a6a6:	436b      	muls	r3, r5
    a6a8:	001a      	movs	r2, r3
    a6aa:	2330      	movs	r3, #48	; 0x30
    a6ac:	4373      	muls	r3, r6
    a6ae:	18d3      	adds	r3, r2, r3
    a6b0:	4a1d      	ldr	r2, [pc, #116]	; (a728 <mayfly_enqueue+0xa8>)
    a6b2:	18d3      	adds	r3, r2, r3
{
	u8_t state;
	u8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
    a6b4:	7a9a      	ldrb	r2, [r3, #10]
    a6b6:	7adb      	ldrb	r3, [r3, #11]
    a6b8:	1ad3      	subs	r3, r2, r3
    a6ba:	1e5a      	subs	r2, r3, #1
    a6bc:	4193      	sbcs	r3, r2
    a6be:	0019      	movs	r1, r3

	/* shadow the ack */
	ack = m->_ack;

	/* already in queue */
	state = (m->_req - ack) & 0x03;
    a6c0:	2203      	movs	r2, #3
		!mayfly_is_enabled(caller_id, callee_id) ||
		(mft[callee_id][caller_id].disable_req !=
		 mft[callee_id][caller_id].disable_ack);

	/* shadow the ack */
	ack = m->_ack;
    a6c2:	7863      	ldrb	r3, [r4, #1]

	/* already in queue */
	state = (m->_req - ack) & 0x03;
    a6c4:	7827      	ldrb	r7, [r4, #0]
    a6c6:	1aff      	subs	r7, r7, r3
    a6c8:	4017      	ands	r7, r2
	if (state != 0) {
    a6ca:	d010      	beq.n	a6ee <mayfly_enqueue+0x6e>
		if (chain) {
    a6cc:	2900      	cmp	r1, #0
    a6ce:	d00a      	beq.n	a6e6 <mayfly_enqueue+0x66>

				return 0;
			}

			/* already ready */
			return 1;
    a6d0:	2001      	movs	r0, #1

	/* already in queue */
	state = (m->_req - ack) & 0x03;
	if (state != 0) {
		if (chain) {
			if (state != 1) {
    a6d2:	4287      	cmp	r7, r0
    a6d4:	d026      	beq.n	a724 <mayfly_enqueue+0xa4>
				/* mark as ready in queue */
				m->_req = ack + 1;
    a6d6:	181b      	adds	r3, r3, r0
    a6d8:	b2db      	uxtb	r3, r3
    a6da:	7023      	strb	r3, [r4, #0]

				/* pend the callee for execution */
				mayfly_pend(caller_id, callee_id);
    a6dc:	0031      	movs	r1, r6
    a6de:	0028      	movs	r0, r5
    a6e0:	f007 fe1a 	bl	12318 <mayfly_pend>
    a6e4:	e008      	b.n	a6f8 <mayfly_enqueue+0x78>
			/* already ready */
			return 1;
		}

		/* mark as done in queue, and fall thru */
		m->_req = ack + 2;
    a6e6:	3302      	adds	r3, #2
    a6e8:	b2db      	uxtb	r3, r3
    a6ea:	7023      	strb	r3, [r4, #0]
    a6ec:	e001      	b.n	a6f2 <mayfly_enqueue+0x72>
	}

	/* handle mayfly(s) that can be inline */
	if (!chain) {
    a6ee:	2900      	cmp	r1, #0
    a6f0:	d104      	bne.n	a6fc <mayfly_enqueue+0x7c>
		/* call fp */
		m->fp(m->param);
    a6f2:	68e3      	ldr	r3, [r4, #12]
    a6f4:	68a0      	ldr	r0, [r4, #8]
    a6f6:	4798      	blx	r3

		return 0;
    a6f8:	2000      	movs	r0, #0
    a6fa:	e013      	b.n	a724 <mayfly_enqueue+0xa4>
	}

	/* new, add as ready in the queue */
	m->_req = ack + 1;
    a6fc:	3301      	adds	r3, #1
    a6fe:	b2db      	uxtb	r3, r3
    a700:	7023      	strb	r3, [r4, #0]
	memq_enqueue(m, m->_link, &mft[callee_id][caller_id].tail);
    a702:	220c      	movs	r2, #12
    a704:	2330      	movs	r3, #48	; 0x30
    a706:	436a      	muls	r2, r5
    a708:	4373      	muls	r3, r6
    a70a:	18d2      	adds	r2, r2, r3
    a70c:	4b06      	ldr	r3, [pc, #24]	; (a728 <mayfly_enqueue+0xa8>)
    a70e:	6861      	ldr	r1, [r4, #4]
    a710:	189a      	adds	r2, r3, r2
    a712:	3204      	adds	r2, #4
    a714:	0020      	movs	r0, r4
    a716:	f000 f91c 	bl	a952 <memq_enqueue>

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
    a71a:	0028      	movs	r0, r5
    a71c:	0031      	movs	r1, r6
    a71e:	f007 fdfb 	bl	12318 <mayfly_pend>

	return 0;
    a722:	0038      	movs	r0, r7
}
    a724:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a726:	46c0      	nop			; (mov r8, r8)
    a728:	200013a8 	.word	0x200013a8

0000a72c <mayfly_run>:

void mayfly_run(u8_t callee_id)
{
	u8_t disable = 0;
	u8_t enable = 0;
    a72c:	2300      	movs	r3, #0

	return 0;
}

void mayfly_run(u8_t callee_id)
{
    a72e:	b5f0      	push	{r4, r5, r6, r7, lr}
    a730:	0005      	movs	r5, r0
	u8_t disable = 0;
	u8_t enable = 0;
	u8_t caller_id;

	/* iterate through each caller queue to this callee_id */
	caller_id = MAYFLY_CALLER_COUNT;
    a732:	2404      	movs	r4, #4
	while (caller_id--) {
		void *link;
		struct mayfly *m = 0;

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].tail,
    a734:	2730      	movs	r7, #48	; 0x30

	return 0;
}

void mayfly_run(u8_t callee_id)
{
    a736:	b087      	sub	sp, #28
	u8_t disable = 0;
	u8_t enable = 0;
    a738:	9300      	str	r3, [sp, #0]
	return 0;
}

void mayfly_run(u8_t callee_id)
{
	u8_t disable = 0;
    a73a:	9301      	str	r3, [sp, #4]
	u8_t enable = 0;
	u8_t caller_id;

	/* iterate through each caller queue to this callee_id */
	caller_id = MAYFLY_CALLER_COUNT;
	while (caller_id--) {
    a73c:	3c01      	subs	r4, #1
    a73e:	b2e4      	uxtb	r4, r4
    a740:	2cff      	cmp	r4, #255	; 0xff
    a742:	d070      	beq.n	a826 <mayfly_run+0xfa>
		void *link;
		struct mayfly *m = 0;
    a744:	2300      	movs	r3, #0

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].tail,
    a746:	220c      	movs	r2, #12

	/* iterate through each caller queue to this callee_id */
	caller_id = MAYFLY_CALLER_COUNT;
	while (caller_id--) {
		void *link;
		struct mayfly *m = 0;
    a748:	9305      	str	r3, [sp, #20]

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].tail,
    a74a:	003b      	movs	r3, r7
    a74c:	4362      	muls	r2, r4
    a74e:	436b      	muls	r3, r5
    a750:	493b      	ldr	r1, [pc, #236]	; (a840 <mayfly_run+0x114>)
    a752:	18d3      	adds	r3, r2, r3
    a754:	18c8      	adds	r0, r1, r3
    a756:	aa05      	add	r2, sp, #20
    a758:	5859      	ldr	r1, [r3, r1]
    a75a:	6840      	ldr	r0, [r0, #4]
    a75c:	f000 f900 	bl	a960 <memq_peek>
    a760:	0006      	movs	r6, r0
				 mft[callee_id][caller_id].head,
				 (void **)&m);
		while (link) {
    a762:	2e00      	cmp	r6, #0
    a764:	d042      	beq.n	a7ec <mayfly_run+0xc0>
			u8_t state;
			u8_t req;

			/* execute work if ready */
			req = m->_req;
			state = (req - m->_ack) & 0x03;
    a766:	2003      	movs	r0, #3
		while (link) {
			u8_t state;
			u8_t req;

			/* execute work if ready */
			req = m->_req;
    a768:	9b05      	ldr	r3, [sp, #20]
			state = (req - m->_ack) & 0x03;
    a76a:	785a      	ldrb	r2, [r3, #1]
		while (link) {
			u8_t state;
			u8_t req;

			/* execute work if ready */
			req = m->_req;
    a76c:	7819      	ldrb	r1, [r3, #0]
			state = (req - m->_ack) & 0x03;
    a76e:	1a89      	subs	r1, r1, r2
    a770:	4008      	ands	r0, r1
    a772:	9002      	str	r0, [sp, #8]
			if (state == 1) {
    a774:	2801      	cmp	r0, #1
    a776:	d104      	bne.n	a782 <mayfly_run+0x56>
				/* mark mayfly as ran */
				m->_ack--;
    a778:	3a01      	subs	r2, #1
    a77a:	705a      	strb	r2, [r3, #1]

				/* call the mayfly function */
				m->fp(m->param);
    a77c:	6898      	ldr	r0, [r3, #8]
    a77e:	68da      	ldr	r2, [r3, #12]
    a780:	4790      	blx	r2
			}

			/* dequeue if not re-pended */
			req = m->_req;
    a782:	9a05      	ldr	r2, [sp, #20]
    a784:	7813      	ldrb	r3, [r2, #0]
    a786:	b2db      	uxtb	r3, r3
    a788:	9303      	str	r3, [sp, #12]
			if (((req - m->_ack) & 0x03) != 1) {
    a78a:	7853      	ldrb	r3, [r2, #1]
    a78c:	9a03      	ldr	r2, [sp, #12]
    a78e:	1ad3      	subs	r3, r2, r3
    a790:	2203      	movs	r2, #3
    a792:	4013      	ands	r3, r2
    a794:	2b01      	cmp	r3, #1
    a796:	d010      	beq.n	a7ba <mayfly_run+0x8e>
				memq_dequeue(mft[callee_id][caller_id].tail,
    a798:	003b      	movs	r3, r7
    a79a:	3209      	adds	r2, #9
    a79c:	4362      	muls	r2, r4
    a79e:	436b      	muls	r3, r5
    a7a0:	18d3      	adds	r3, r2, r3
    a7a2:	4a27      	ldr	r2, [pc, #156]	; (a840 <mayfly_run+0x114>)
    a7a4:	18d3      	adds	r3, r2, r3
    a7a6:	0019      	movs	r1, r3
    a7a8:	2200      	movs	r2, #0
    a7aa:	6858      	ldr	r0, [r3, #4]
    a7ac:	f000 f8e3 	bl	a976 <memq_dequeue>

				/* release link into dequeued mayfly struct */
				m->_link = link;

				/* reset mayfly state to idle */
				m->_ack = req;
    a7b0:	466a      	mov	r2, sp
				memq_dequeue(mft[callee_id][caller_id].tail,
					     &mft[callee_id][caller_id].head,
					     0);

				/* release link into dequeued mayfly struct */
				m->_link = link;
    a7b2:	9b05      	ldr	r3, [sp, #20]

				/* reset mayfly state to idle */
				m->_ack = req;
    a7b4:	7b12      	ldrb	r2, [r2, #12]
				memq_dequeue(mft[callee_id][caller_id].tail,
					     &mft[callee_id][caller_id].head,
					     0);

				/* release link into dequeued mayfly struct */
				m->_link = link;
    a7b6:	605e      	str	r6, [r3, #4]

				/* reset mayfly state to idle */
				m->_ack = req;
    a7b8:	705a      	strb	r2, [r3, #1]
			}

			/* fetch next mayfly in callee queue, if any */
			link = memq_peek(mft[callee_id][caller_id].tail,
    a7ba:	003b      	movs	r3, r7
    a7bc:	220c      	movs	r2, #12
    a7be:	436b      	muls	r3, r5
    a7c0:	4362      	muls	r2, r4
    a7c2:	491f      	ldr	r1, [pc, #124]	; (a840 <mayfly_run+0x114>)
    a7c4:	18d3      	adds	r3, r2, r3
    a7c6:	18c8      	adds	r0, r1, r3
    a7c8:	aa05      	add	r2, sp, #20
    a7ca:	5859      	ldr	r1, [r3, r1]
    a7cc:	6840      	ldr	r0, [r0, #4]
    a7ce:	f000 f8c7 	bl	a960 <memq_peek>
					 (void **)&m);

			/* yield out of mayfly_run if a mayfly function was
			 * called.
			 */
			if (state == 1) {
    a7d2:	9b02      	ldr	r3, [sp, #8]
				/* reset mayfly state to idle */
				m->_ack = req;
			}

			/* fetch next mayfly in callee queue, if any */
			link = memq_peek(mft[callee_id][caller_id].tail,
    a7d4:	0006      	movs	r6, r0
					 (void **)&m);

			/* yield out of mayfly_run if a mayfly function was
			 * called.
			 */
			if (state == 1) {
    a7d6:	2b01      	cmp	r3, #1
    a7d8:	d1c3      	bne.n	a762 <mayfly_run+0x36>
				/* pend callee (tailchain) if mayfly queue is
				 * not empty or all caller queues are not
				 * processed.
				 */
				if (caller_id || link) {
    a7da:	2c00      	cmp	r4, #0
    a7dc:	d101      	bne.n	a7e2 <mayfly_run+0xb6>
    a7de:	2800      	cmp	r0, #0
    a7e0:	d004      	beq.n	a7ec <mayfly_run+0xc0>
					mayfly_pend(callee_id, callee_id);
    a7e2:	0029      	movs	r1, r5
    a7e4:	0028      	movs	r0, r5
    a7e6:	f007 fd97 	bl	12318 <mayfly_pend>
    a7ea:	e027      	b.n	a83c <mayfly_run+0x110>
					return;
				}
			}
		}

		if (mft[callee_id][caller_id].disable_req !=
    a7ec:	003a      	movs	r2, r7
    a7ee:	200c      	movs	r0, #12
    a7f0:	436a      	muls	r2, r5
    a7f2:	4360      	muls	r0, r4
    a7f4:	4b12      	ldr	r3, [pc, #72]	; (a840 <mayfly_run+0x114>)
    a7f6:	1882      	adds	r2, r0, r2
    a7f8:	189a      	adds	r2, r3, r2
    a7fa:	7a90      	ldrb	r0, [r2, #10]
    a7fc:	7ad6      	ldrb	r6, [r2, #11]
    a7fe:	0019      	movs	r1, r3
    a800:	4286      	cmp	r6, r0
    a802:	d002      	beq.n	a80a <mayfly_run+0xde>
		    mft[callee_id][caller_id].disable_ack) {
			disable = 1;
    a804:	2301      	movs	r3, #1

			mft[callee_id][caller_id].disable_ack =
    a806:	72d0      	strb	r0, [r2, #11]
			}
		}

		if (mft[callee_id][caller_id].disable_req !=
		    mft[callee_id][caller_id].disable_ack) {
			disable = 1;
    a808:	9301      	str	r3, [sp, #4]

			mft[callee_id][caller_id].disable_ack =
				mft[callee_id][caller_id].disable_req;
		}

		if (mft[callee_id][caller_id].enable_req !=
    a80a:	230c      	movs	r3, #12
    a80c:	003a      	movs	r2, r7
    a80e:	4363      	muls	r3, r4
    a810:	436a      	muls	r2, r5
    a812:	189b      	adds	r3, r3, r2
    a814:	18cb      	adds	r3, r1, r3
    a816:	7a1a      	ldrb	r2, [r3, #8]
    a818:	7a59      	ldrb	r1, [r3, #9]
    a81a:	4291      	cmp	r1, r2
    a81c:	d08e      	beq.n	a73c <mayfly_run+0x10>
		    mft[callee_id][caller_id].enable_ack) {
			enable = 1;

			mft[callee_id][caller_id].enable_ack =
    a81e:	725a      	strb	r2, [r3, #9]
				mft[callee_id][caller_id].disable_req;
		}

		if (mft[callee_id][caller_id].enable_req !=
		    mft[callee_id][caller_id].enable_ack) {
			enable = 1;
    a820:	2301      	movs	r3, #1
    a822:	9300      	str	r3, [sp, #0]
    a824:	e78a      	b.n	a73c <mayfly_run+0x10>
			mft[callee_id][caller_id].enable_ack =
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
    a826:	9b01      	ldr	r3, [sp, #4]
    a828:	2b00      	cmp	r3, #0
    a82a:	d007      	beq.n	a83c <mayfly_run+0x110>
    a82c:	9b00      	ldr	r3, [sp, #0]
    a82e:	2b00      	cmp	r3, #0
    a830:	d104      	bne.n	a83c <mayfly_run+0x110>
		mayfly_enable_cb(callee_id, callee_id, 0);
    a832:	001a      	movs	r2, r3
    a834:	0029      	movs	r1, r5
    a836:	0028      	movs	r0, r5
    a838:	f007 fd16 	bl	12268 <mayfly_enable_cb>
	}
}
    a83c:	b007      	add	sp, #28
    a83e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a840:	200013a8 	.word	0x200013a8

0000a844 <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, u16_t mem_size, u16_t mem_count,
	      void **mem_head)
{
    a844:	b573      	push	{r0, r1, r4, r5, r6, lr}
    a846:	0014      	movs	r4, r2
	*mem_head = mem_pool;

	/* Store free mem_count after the list's next pointer at an aligned
	 * memory location to ensure atomic read/write (in ARM for now).
	 */
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    a848:	2203      	movs	r2, #3

#include "mem.h"

void mem_init(void *mem_pool, u16_t mem_size, u16_t mem_count,
	      void **mem_head)
{
    a84a:	0005      	movs	r5, r0
	*mem_head = mem_pool;
    a84c:	6018      	str	r0, [r3, #0]

	/* Store free mem_count after the list's next pointer at an aligned
	 * memory location to ensure atomic read/write (in ARM for now).
	 */
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    a84e:	1dc3      	adds	r3, r0, #7

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    a850:	1e60      	subs	r0, r4, #1
    a852:	b280      	uxth	r0, r0
    a854:	4348      	muls	r0, r1
	*mem_head = mem_pool;

	/* Store free mem_count after the list's next pointer at an aligned
	 * memory location to ensure atomic read/write (in ARM for now).
	 */
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    a856:	4393      	bics	r3, r2
    a858:	801c      	strh	r4, [r3, #0]

#include "mem.h"

void mem_init(void *mem_pool, u16_t mem_size, u16_t mem_count,
	      void **mem_head)
{
    a85a:	000e      	movs	r6, r1
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    a85c:	1828      	adds	r0, r5, r0
    a85e:	3201      	adds	r2, #1
    a860:	2100      	movs	r1, #0
    a862:	f7f6 fa94 	bl	d8e <memset>
    a866:	3c02      	subs	r4, #2
	       sizeof(mem_pool));
	while (mem_count--) {
    a868:	4b08      	ldr	r3, [pc, #32]	; (a88c <mem_init+0x48>)
    a86a:	b2a4      	uxth	r4, r4
    a86c:	429c      	cmp	r4, r3
    a86e:	d00b      	beq.n	a888 <mem_init+0x44>
		u32_t next;

		next = (u32_t)((u8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
    a870:	1c60      	adds	r0, r4, #1
    a872:	4370      	muls	r0, r6
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
	       sizeof(mem_pool));
	while (mem_count--) {
		u32_t next;

		next = (u32_t)((u8_t *) mem_pool +
    a874:	182b      	adds	r3, r5, r0
			       (mem_size * (mem_count + 1)));
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    a876:	1b80      	subs	r0, r0, r6
    a878:	1828      	adds	r0, r5, r0
    a87a:	2204      	movs	r2, #4
    a87c:	a901      	add	r1, sp, #4
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
	       sizeof(mem_pool));
	while (mem_count--) {
		u32_t next;

		next = (u32_t)((u8_t *) mem_pool +
    a87e:	9301      	str	r3, [sp, #4]
    a880:	3c01      	subs	r4, #1
			       (mem_size * (mem_count + 1)));
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    a882:	f7f6 fa5a 	bl	d3a <memcpy>
    a886:	e7ef      	b.n	a868 <mem_init+0x24>
		       (void *)&next, sizeof(next));
	}
}
    a888:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    a88a:	46c0      	nop			; (mov r8, r8)
    a88c:	0000ffff 	.word	0x0000ffff

0000a890 <mem_acquire>:

void *mem_acquire(void **mem_head)
{
    a890:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (*mem_head) {
    a892:	6805      	ldr	r5, [r0, #0]
		       (void *)&next, sizeof(next));
	}
}

void *mem_acquire(void **mem_head)
{
    a894:	0006      	movs	r6, r0
	if (*mem_head) {
    a896:	2d00      	cmp	r5, #0
    a898:	d011      	beq.n	a8be <mem_acquire+0x2e>
		u16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    a89a:	2703      	movs	r7, #3
    a89c:	1deb      	adds	r3, r5, #7
    a89e:	43bb      	bics	r3, r7
    a8a0:	881c      	ldrh	r4, [r3, #0]
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
    a8a2:	2204      	movs	r2, #4
    a8a4:	0029      	movs	r1, r5
    a8a6:	a801      	add	r0, sp, #4
    a8a8:	f7f6 fa47 	bl	d3a <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
    a8ac:	9b01      	ldr	r3, [sp, #4]
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
					       sizeof(mem_head)));
		free_count--;
    a8ae:	3c01      	subs	r4, #1
    a8b0:	b2a4      	uxth	r4, r4

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));

		/* Store free mem_count after the list's next pointer */
		if (head) {
    a8b2:	2b00      	cmp	r3, #0
    a8b4:	d002      	beq.n	a8bc <mem_acquire+0x2c>
			*((u16_t *)MROUND((u8_t *)head + sizeof(head))) =
    a8b6:	1dda      	adds	r2, r3, #7
    a8b8:	43ba      	bics	r2, r7
    a8ba:	8014      	strh	r4, [r2, #0]
				free_count;
		}

		*mem_head = head;
    a8bc:	6033      	str	r3, [r6, #0]
		return mem;
	}

	return NULL;
}
    a8be:	0028      	movs	r0, r5
    a8c0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000a8c2 <mem_release>:
void mem_release(void *mem, void **mem_head)
{
	u16_t free_count = 0;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
    a8c2:	680b      	ldr	r3, [r1, #0]

	return NULL;
}

void mem_release(void *mem, void **mem_head)
{
    a8c4:	b570      	push	{r4, r5, r6, lr}
    a8c6:	0005      	movs	r5, r0
    a8c8:	000c      	movs	r4, r1
	u16_t free_count = 0;
    a8ca:	1e1e      	subs	r6, r3, #0

	/* Get the free count from the list and increment it */
	if (*mem_head) {
    a8cc:	d003      	beq.n	a8d6 <mem_release+0x14>
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    a8ce:	2203      	movs	r2, #3
    a8d0:	3307      	adds	r3, #7
    a8d2:	4393      	bics	r3, r2
    a8d4:	881e      	ldrh	r6, [r3, #0]
					       sizeof(mem_head)));
	}
	free_count++;

	memcpy(mem, mem_head, sizeof(mem));
    a8d6:	0028      	movs	r0, r5
    a8d8:	2204      	movs	r2, #4
    a8da:	0021      	movs	r1, r4
    a8dc:	f7f6 fa2d 	bl	d3a <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
    a8e0:	2203      	movs	r2, #3
    a8e2:	1deb      	adds	r3, r5, #7
    a8e4:	3601      	adds	r6, #1
    a8e6:	4393      	bics	r3, r2
    a8e8:	801e      	strh	r6, [r3, #0]

	*mem_head = mem;
    a8ea:	6025      	str	r5, [r4, #0]
}
    a8ec:	bd70      	pop	{r4, r5, r6, pc}

0000a8ee <mem_free_count_get>:

u16_t mem_free_count_get(void *mem_head)
{
	u16_t free_count = 0;
    a8ee:	1e03      	subs	r3, r0, #0

	/* Get the free count from the list */
	if (mem_head) {
    a8f0:	d003      	beq.n	a8fa <mem_free_count_get+0xc>
		free_count = *((u16_t *)MROUND((u8_t *)mem_head +
    a8f2:	2303      	movs	r3, #3
    a8f4:	3007      	adds	r0, #7
    a8f6:	4398      	bics	r0, r3
    a8f8:	8803      	ldrh	r3, [r0, #0]
					       sizeof(mem_head)));
	}

	return free_count;
}
    a8fa:	0018      	movs	r0, r3
    a8fc:	4770      	bx	lr

0000a8fe <mem_get>:

void *mem_get(void *mem_pool, u16_t mem_size, u16_t index)
{
	return ((void *)((u8_t *)mem_pool + (mem_size * index)));
    a8fe:	434a      	muls	r2, r1
    a900:	1880      	adds	r0, r0, r2
}
    a902:	4770      	bx	lr

0000a904 <mem_index_get>:

u16_t mem_index_get(void *mem, void *mem_pool, u16_t mem_size)
{
	return ((u16_t)((u8_t *)mem - (u8_t *)mem_pool) / mem_size);
    a904:	1a40      	subs	r0, r0, r1
{
	return ((void *)((u8_t *)mem_pool + (mem_size * index)));
}

u16_t mem_index_get(void *mem, void *mem_pool, u16_t mem_size)
{
    a906:	b510      	push	{r4, lr}
	return ((u16_t)((u8_t *)mem - (u8_t *)mem_pool) / mem_size);
    a908:	b280      	uxth	r0, r0
    a90a:	0011      	movs	r1, r2
    a90c:	f7f5 fc48 	bl	1a0 <__aeabi_uidiv>
    a910:	b280      	uxth	r0, r0
}
    a912:	bd10      	pop	{r4, pc}

0000a914 <mem_rcopy>:

void mem_rcopy(u8_t *dst, u8_t const *src, u16_t len)
{
    a914:	b510      	push	{r4, lr}
	src += len;
	while (len--) {
    a916:	4b06      	ldr	r3, [pc, #24]	; (a930 <mem_rcopy+0x1c>)
	return ((u16_t)((u8_t *)mem - (u8_t *)mem_pool) / mem_size);
}

void mem_rcopy(u8_t *dst, u8_t const *src, u16_t len)
{
	src += len;
    a918:	1889      	adds	r1, r1, r2
	while (len--) {
    a91a:	3a01      	subs	r2, #1
    a91c:	b292      	uxth	r2, r2
    a91e:	429a      	cmp	r2, r3
    a920:	d004      	beq.n	a92c <mem_rcopy+0x18>
		*dst++ = *--src;
    a922:	3901      	subs	r1, #1
    a924:	780c      	ldrb	r4, [r1, #0]
    a926:	7004      	strb	r4, [r0, #0]
    a928:	3001      	adds	r0, #1
    a92a:	e7f6      	b.n	a91a <mem_rcopy+0x6>
	}
}
    a92c:	bd10      	pop	{r4, pc}
    a92e:	46c0      	nop			; (mov r8, r8)
    a930:	0000ffff 	.word	0x0000ffff

0000a934 <mem_nz>:

u8_t mem_nz(u8_t *src, u16_t len)
{
    a934:	1841      	adds	r1, r0, r1
	while (len--) {
    a936:	4288      	cmp	r0, r1
    a938:	d006      	beq.n	a948 <mem_nz+0x14>
    a93a:	3001      	adds	r0, #1
		if (*src++) {
    a93c:	1e43      	subs	r3, r0, #1
    a93e:	781b      	ldrb	r3, [r3, #0]
    a940:	2b00      	cmp	r3, #0
    a942:	d0f8      	beq.n	a936 <mem_nz+0x2>
			return 1;
    a944:	2001      	movs	r0, #1
    a946:	e000      	b.n	a94a <mem_nz+0x16>
		}
	}

	return 0;
    a948:	2000      	movs	r0, #0
}
    a94a:	4770      	bx	lr

0000a94c <memq_init>:
inline void *memq_peek(void *tail, void *head, void **mem);

void *memq_init(void *link, void **head, void **tail)
{
	/* head and tail pointer to the initial link node */
	*head = *tail = link;
    a94c:	6010      	str	r0, [r2, #0]
    a94e:	6008      	str	r0, [r1, #0]

	return link;
}
    a950:	4770      	bx	lr

0000a952 <memq_enqueue>:

void *memq_enqueue(void *mem, void *link, void **tail)
{
	/* make the current tail link node point to new link node */
	*((void **)*tail) = link;
    a952:	6813      	ldr	r3, [r2, #0]
    a954:	6019      	str	r1, [r3, #0]

	/* assign mem to current tail link node */
	*((void **)*tail + 1) = mem;
    a956:	6813      	ldr	r3, [r2, #0]
    a958:	6058      	str	r0, [r3, #4]

	/* increment the tail! */
	*tail = link;

	return link;
}
    a95a:	0008      	movs	r0, r1

	/* assign mem to current tail link node */
	*((void **)*tail + 1) = mem;

	/* increment the tail! */
	*tail = link;
    a95c:	6011      	str	r1, [r2, #0]

	return link;
}
    a95e:	4770      	bx	lr

0000a960 <memq_peek>:
{
	void *link;

	/* if head and tail are equal, then queue empty */
	if (head == tail) {
		return 0;
    a960:	2300      	movs	r3, #0
void *memq_peek(void *tail, void *head, void **mem)
{
	void *link;

	/* if head and tail are equal, then queue empty */
	if (head == tail) {
    a962:	4281      	cmp	r1, r0
    a964:	d005      	beq.n	a972 <memq_peek+0x12>
    a966:	000b      	movs	r3, r1

	/* pick the head link node */
	link = head;

	/* extract the element node */
	if (mem) {
    a968:	2a00      	cmp	r2, #0
    a96a:	d002      	beq.n	a972 <memq_peek+0x12>
		*mem = *((void **)link + 1);
    a96c:	684b      	ldr	r3, [r1, #4]
    a96e:	6013      	str	r3, [r2, #0]
    a970:	000b      	movs	r3, r1
	}

	return link;
}
    a972:	0018      	movs	r0, r3
    a974:	4770      	bx	lr

0000a976 <memq_dequeue>:
void *memq_dequeue(void *tail, void **head, void **mem)
{
	void *link;

	/* use memq peek to get the link and mem */
	link = memq_peek(tail, *head, mem);
    a976:	680b      	ldr	r3, [r1, #0]
void *memq_peek(void *tail, void *head, void **mem)
{
	void *link;

	/* if head and tail are equal, then queue empty */
	if (head == tail) {
    a978:	4283      	cmp	r3, r0
    a97a:	d004      	beq.n	a986 <memq_dequeue+0x10>

	/* pick the head link node */
	link = head;

	/* extract the element node */
	if (mem) {
    a97c:	2a00      	cmp	r2, #0
    a97e:	d005      	beq.n	a98c <memq_dequeue+0x16>
		*mem = *((void **)link + 1);
    a980:	6858      	ldr	r0, [r3, #4]
    a982:	6010      	str	r0, [r2, #0]
    a984:	e002      	b.n	a98c <memq_dequeue+0x16>

	/* use memq peek to get the link and mem */
	link = memq_peek(tail, *head, mem);

	/* increment the head to next link node */
	*head = *((void **)link);
    a986:	2300      	movs	r3, #0
    a988:	681b      	ldr	r3, [r3, #0]
    a98a:	deff      	udf	#255	; 0xff
    a98c:	681a      	ldr	r2, [r3, #0]

	return link;
}
    a98e:	0018      	movs	r0, r3

	/* use memq peek to get the link and mem */
	link = memq_peek(tail, *head, mem);

	/* increment the head to next link node */
	*head = *((void **)link);
    a990:	600a      	str	r2, [r1, #0]

	return link;
}
    a992:	4770      	bx	lr

0000a994 <util_ones_count_get>:

#include <zephyr/types.h>
#include "util.h"

u8_t util_ones_count_get(u8_t *octets, u8_t octets_len)
{
    a994:	0002      	movs	r2, r0
    a996:	1841      	adds	r1, r0, r1
	u8_t one_count = 0;
    a998:	2000      	movs	r0, #0

#include <zephyr/types.h>
#include "util.h"

u8_t util_ones_count_get(u8_t *octets, u8_t octets_len)
{
    a99a:	b510      	push	{r4, lr}
	u8_t one_count = 0;

	while (octets_len--) {
    a99c:	428a      	cmp	r2, r1
    a99e:	d009      	beq.n	a9b4 <util_ones_count_get+0x20>
		u8_t bite;

		bite = *octets;
    a9a0:	7814      	ldrb	r4, [r2, #0]
		while (bite) {
    a9a2:	2c00      	cmp	r4, #0
    a9a4:	d004      	beq.n	a9b0 <util_ones_count_get+0x1c>
			bite &= (bite - 1);
    a9a6:	1e63      	subs	r3, r4, #1
    a9a8:	401c      	ands	r4, r3
			one_count++;
    a9aa:	1c43      	adds	r3, r0, #1
    a9ac:	b2d8      	uxtb	r0, r3
    a9ae:	e7f8      	b.n	a9a2 <util_ones_count_get+0xe>
		}
		octets++;
    a9b0:	3201      	adds	r2, #1
    a9b2:	e7f3      	b.n	a99c <util_ones_count_get+0x8>
	}

	return one_count;
}
    a9b4:	bd10      	pop	{r4, pc}
	...

0000a9b8 <cntr_init>:

static u8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
    a9b8:	22a1      	movs	r2, #161	; 0xa1
    a9ba:	2100      	movs	r1, #0
    a9bc:	4b05      	ldr	r3, [pc, #20]	; (a9d4 <cntr_init+0x1c>)
    a9be:	00d2      	lsls	r2, r2, #3
    a9c0:	5099      	str	r1, [r3, r2]
	NRF_RTC->EVTENSET = (RTC_EVTENSET_COMPARE0_Msk |
    a9c2:	22c0      	movs	r2, #192	; 0xc0
    a9c4:	21d1      	movs	r1, #209	; 0xd1
    a9c6:	0292      	lsls	r2, r2, #10
    a9c8:	0089      	lsls	r1, r1, #2
    a9ca:	505a      	str	r2, [r3, r1]
			     RTC_EVTENSET_COMPARE1_Msk);
	NRF_RTC->INTENSET = (RTC_INTENSET_COMPARE0_Msk |
    a9cc:	3940      	subs	r1, #64	; 0x40
    a9ce:	505a      	str	r2, [r3, r1]
			     RTC_INTENSET_COMPARE1_Msk);
}
    a9d0:	4770      	bx	lr
    a9d2:	46c0      	nop			; (mov r8, r8)
    a9d4:	4000b000 	.word	0x4000b000

0000a9d8 <cntr_start>:

u32_t cntr_start(void)
{
	if (_refcount++) {
    a9d8:	4a05      	ldr	r2, [pc, #20]	; (a9f0 <cntr_start+0x18>)
    a9da:	2001      	movs	r0, #1
    a9dc:	7813      	ldrb	r3, [r2, #0]
    a9de:	1c59      	adds	r1, r3, #1
    a9e0:	7011      	strb	r1, [r2, #0]
    a9e2:	2b00      	cmp	r3, #0
    a9e4:	d102      	bne.n	a9ec <cntr_start+0x14>
		return 1;
	}

	NRF_RTC->TASKS_START = 1;
    a9e6:	4a03      	ldr	r2, [pc, #12]	; (a9f4 <cntr_start+0x1c>)
    a9e8:	6010      	str	r0, [r2, #0]

	return 0;
    a9ea:	0018      	movs	r0, r3
}
    a9ec:	4770      	bx	lr
    a9ee:	46c0      	nop			; (mov r8, r8)
    a9f0:	20001468 	.word	0x20001468
    a9f4:	4000b000 	.word	0x4000b000

0000a9f8 <cntr_stop>:

u32_t cntr_stop(void)
{
    a9f8:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT(_refcount);
    a9fa:	4a0d      	ldr	r2, [pc, #52]	; (aa30 <cntr_stop+0x38>)
    a9fc:	7813      	ldrb	r3, [r2, #0]
    a9fe:	2b00      	cmp	r3, #0
    aa00:	d10c      	bne.n	aa1c <cntr_stop+0x24>
    aa02:	4b0c      	ldr	r3, [pc, #48]	; (aa34 <cntr_stop+0x3c>)
    aa04:	4a0c      	ldr	r2, [pc, #48]	; (aa38 <cntr_stop+0x40>)
    aa06:	9301      	str	r3, [sp, #4]
    aa08:	4b0c      	ldr	r3, [pc, #48]	; (aa3c <cntr_stop+0x44>)
    aa0a:	490d      	ldr	r1, [pc, #52]	; (aa40 <cntr_stop+0x48>)
    aa0c:	9300      	str	r3, [sp, #0]
    aa0e:	480d      	ldr	r0, [pc, #52]	; (aa44 <cntr_stop+0x4c>)
    aa10:	4b0d      	ldr	r3, [pc, #52]	; (aa48 <cntr_stop+0x50>)
    aa12:	f7f6 ffb5 	bl	1980 <printk>
    aa16:	b662      	cpsie	i
    aa18:	2004      	movs	r0, #4
    aa1a:	df02      	svc	2

	if (--_refcount) {
    aa1c:	3b01      	subs	r3, #1
    aa1e:	b2db      	uxtb	r3, r3
    aa20:	7013      	strb	r3, [r2, #0]
    aa22:	2001      	movs	r0, #1
    aa24:	2b00      	cmp	r3, #0
    aa26:	d102      	bne.n	aa2e <cntr_stop+0x36>
		return 1;
	}

	NRF_RTC->TASKS_STOP = 1;
    aa28:	4a08      	ldr	r2, [pc, #32]	; (aa4c <cntr_stop+0x54>)
    aa2a:	6050      	str	r0, [r2, #4]

	return 0;
    aa2c:	0018      	movs	r0, r3
}
    aa2e:	bd0e      	pop	{r1, r2, r3, pc}
    aa30:	20001468 	.word	0x20001468
    aa34:	000154c4 	.word	0x000154c4
    aa38:	00015484 	.word	0x00015484
    aa3c:	000154c9 	.word	0x000154c9
    aa40:	0001548b 	.word	0x0001548b
    aa44:	00016a5b 	.word	0x00016a5b
    aa48:	00018048 	.word	0x00018048
    aa4c:	4000b000 	.word	0x4000b000

0000aa50 <cntr_cnt_get>:

u32_t cntr_cnt_get(void)
{
	return NRF_RTC->COUNTER;
    aa50:	4b01      	ldr	r3, [pc, #4]	; (aa58 <cntr_cnt_get+0x8>)
    aa52:	4a02      	ldr	r2, [pc, #8]	; (aa5c <cntr_cnt_get+0xc>)
    aa54:	58d0      	ldr	r0, [r2, r3]
}
    aa56:	4770      	bx	lr
    aa58:	00000504 	.word	0x00000504
    aa5c:	4000b000 	.word	0x4000b000

0000aa60 <cntr_cmp_set>:

void cntr_cmp_set(u8_t cmp, u32_t value)
{
	NRF_RTC->CC[cmp] = value;
    aa60:	3051      	adds	r0, #81	; 0x51
    aa62:	4b02      	ldr	r3, [pc, #8]	; (aa6c <cntr_cmp_set+0xc>)
    aa64:	30ff      	adds	r0, #255	; 0xff
    aa66:	0080      	lsls	r0, r0, #2
    aa68:	50c1      	str	r1, [r0, r3]
}
    aa6a:	4770      	bx	lr
    aa6c:	4000b000 	.word	0x4000b000

0000aa70 <do_ecb>:
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
	do {
		NRF_ECB->TASKS_STOPECB = 1;
    aa70:	2101      	movs	r1, #1
	u8_t clear_text[16];
	u8_t cipher_text[16];
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
    aa72:	b5f0      	push	{r4, r5, r6, r7, lr}
	do {
		NRF_ECB->TASKS_STOPECB = 1;
    aa74:	4b0f      	ldr	r3, [pc, #60]	; (aab4 <do_ecb+0x44>)
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
		NRF_ECB->EVENTS_ENDECB = 0;
    aa76:	4c10      	ldr	r4, [pc, #64]	; (aab8 <do_ecb+0x48>)
    aa78:	2500      	movs	r5, #0

static void do_ecb(struct ecb_param *ecb)
{
	do {
		NRF_ECB->TASKS_STOPECB = 1;
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
    aa7a:	4a10      	ldr	r2, [pc, #64]	; (aabc <do_ecb+0x4c>)
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
	do {
		NRF_ECB->TASKS_STOPECB = 1;
    aa7c:	6059      	str	r1, [r3, #4]
    aa7e:	0017      	movs	r7, r2
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
    aa80:	5098      	str	r0, [r3, r2]
		NRF_ECB->EVENTS_ENDECB = 0;
    aa82:	6065      	str	r5, [r4, #4]
		NRF_ECB->EVENTS_ERRORECB = 0;
    aa84:	60a5      	str	r5, [r4, #8]
    aa86:	4d0c      	ldr	r5, [pc, #48]	; (aab8 <do_ecb+0x48>)
		NRF_ECB->TASKS_STARTECB = 1;
    aa88:	6019      	str	r1, [r3, #0]
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
    aa8a:	686e      	ldr	r6, [r5, #4]
    aa8c:	2e00      	cmp	r6, #0
    aa8e:	d105      	bne.n	aa9c <do_ecb+0x2c>
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
    aa90:	68a6      	ldr	r6, [r4, #8]
		NRF_ECB->TASKS_STOPECB = 1;
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
		NRF_ECB->EVENTS_ENDECB = 0;
		NRF_ECB->EVENTS_ERRORECB = 0;
		NRF_ECB->TASKS_STARTECB = 1;
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
    aa92:	2e00      	cmp	r6, #0
    aa94:	d102      	bne.n	aa9c <do_ecb+0x2c>
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
		       (NRF_ECB->ECBDATAPTR != 0)) {
    aa96:	59de      	ldr	r6, [r3, r7]
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
		NRF_ECB->EVENTS_ENDECB = 0;
		NRF_ECB->EVENTS_ERRORECB = 0;
		NRF_ECB->TASKS_STARTECB = 1;
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
    aa98:	2e00      	cmp	r6, #0
    aa9a:	d1f6      	bne.n	aa8a <do_ecb+0x1a>
		       (NRF_ECB->ECBDATAPTR != 0)) {
			/*__WFE();*/
		}
		NRF_ECB->TASKS_STOPECB = 1;
    aa9c:	4e05      	ldr	r6, [pc, #20]	; (aab4 <do_ecb+0x44>)
    aa9e:	6071      	str	r1, [r6, #4]
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
    aaa0:	68ad      	ldr	r5, [r5, #8]
    aaa2:	2d00      	cmp	r5, #0
    aaa4:	d1e8      	bne.n	aa78 <do_ecb+0x8>
    aaa6:	589a      	ldr	r2, [r3, r2]
    aaa8:	2a00      	cmp	r2, #0
    aaaa:	d0e5      	beq.n	aa78 <do_ecb+0x8>

	NRF_ECB->ECBDATAPTR = 0;
    aaac:	4b03      	ldr	r3, [pc, #12]	; (aabc <do_ecb+0x4c>)
    aaae:	50f5      	str	r5, [r6, r3]
}
    aab0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    aab2:	46c0      	nop			; (mov r8, r8)
    aab4:	4000e000 	.word	0x4000e000
    aab8:	4000e0fc 	.word	0x4000e0fc
    aabc:	00000504 	.word	0x00000504

0000aac0 <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(u8_t const *const key_le, u8_t const *const clear_text_le,
		 u8_t * const cipher_text_le, u8_t * const cipher_text_be)
{
    aac0:	b570      	push	{r4, r5, r6, lr}
    aac2:	000e      	movs	r6, r1
    aac4:	b08c      	sub	sp, #48	; 0x30
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
    aac6:	0001      	movs	r1, r0
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(u8_t const *const key_le, u8_t const *const clear_text_le,
		 u8_t * const cipher_text_le, u8_t * const cipher_text_be)
{
    aac8:	0015      	movs	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
    aaca:	4668      	mov	r0, sp
    aacc:	2210      	movs	r2, #16
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(u8_t const *const key_le, u8_t const *const clear_text_le,
		 u8_t * const cipher_text_le, u8_t * const cipher_text_be)
{
    aace:	001c      	movs	r4, r3
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
    aad0:	f7ff ff20 	bl	a914 <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
    aad4:	a804      	add	r0, sp, #16
    aad6:	2210      	movs	r2, #16
    aad8:	0031      	movs	r1, r6
    aada:	f7ff ff1b 	bl	a914 <mem_rcopy>

	do_ecb(&ecb);
    aade:	4668      	mov	r0, sp
    aae0:	f7ff ffc6 	bl	aa70 <do_ecb>

	if (cipher_text_le) {
    aae4:	2d00      	cmp	r5, #0
    aae6:	d004      	beq.n	aaf2 <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
    aae8:	2210      	movs	r2, #16
    aaea:	a908      	add	r1, sp, #32
    aaec:	0028      	movs	r0, r5
    aaee:	f7ff ff11 	bl	a914 <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
    aaf2:	2c00      	cmp	r4, #0
    aaf4:	d004      	beq.n	ab00 <ecb_encrypt+0x40>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
    aaf6:	2210      	movs	r2, #16
    aaf8:	a908      	add	r1, sp, #32
    aafa:	0020      	movs	r0, r4
    aafc:	f7f6 f91d 	bl	d3a <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
    ab00:	b00c      	add	sp, #48	; 0x30
    ab02:	bd70      	pop	{r4, r5, r6, pc}

0000ab04 <isr_radio>:

static radio_isr_fp sfp_radio_isr;

void isr_radio(void)
{
	if (sfp_radio_isr) {
    ab04:	4b03      	ldr	r3, [pc, #12]	; (ab14 <isr_radio+0x10>)
#endif

static radio_isr_fp sfp_radio_isr;

void isr_radio(void)
{
    ab06:	b510      	push	{r4, lr}
	if (sfp_radio_isr) {
    ab08:	681b      	ldr	r3, [r3, #0]
    ab0a:	2b00      	cmp	r3, #0
    ab0c:	d000      	beq.n	ab10 <isr_radio+0xc>
		sfp_radio_isr();
    ab0e:	4798      	blx	r3
	}
}
    ab10:	bd10      	pop	{r4, pc}
    ab12:	46c0      	nop			; (mov r8, r8)
    ab14:	200014c4 	.word	0x200014c4

0000ab18 <radio_isr_set>:

void radio_isr_set(radio_isr_fp fp_radio_isr)
{
	sfp_radio_isr = fp_radio_isr;	/* atomic assignment of 32-bit word */
    ab18:	4b08      	ldr	r3, [pc, #32]	; (ab3c <radio_isr_set+0x24>)
		sfp_radio_isr();
	}
}

void radio_isr_set(radio_isr_fp fp_radio_isr)
{
    ab1a:	b510      	push	{r4, lr}
	sfp_radio_isr = fp_radio_isr;	/* atomic assignment of 32-bit word */
    ab1c:	6018      	str	r0, [r3, #0]

	NRF_RADIO->INTENSET = (0 |
    ab1e:	23c1      	movs	r3, #193	; 0xc1
    ab20:	2110      	movs	r1, #16
    ab22:	4a07      	ldr	r2, [pc, #28]	; (ab40 <radio_isr_set+0x28>)
    ab24:	009b      	lsls	r3, r3, #2
    ab26:	50d1      	str	r1, [r2, r3]
  \details Clears the pending bit of an external interrupt.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    ab28:	4a06      	ldr	r2, [pc, #24]	; (ab44 <radio_isr_set+0x2c>)
    ab2a:	3b85      	subs	r3, #133	; 0x85
    ab2c:	390e      	subs	r1, #14
    ab2e:	3bff      	subs	r3, #255	; 0xff
    ab30:	50d1      	str	r1, [r2, r3]
				/* | RADIO_INTENSET_RSSIEND_Msk |
				 */
	    );

	NVIC_ClearPendingIRQ(RADIO_IRQn);
	irq_enable(RADIO_IRQn);
    ab32:	2001      	movs	r0, #1
    ab34:	f008 fe92 	bl	1385c <_arch_irq_enable>
}
    ab38:	bd10      	pop	{r4, pc}
    ab3a:	46c0      	nop			; (mov r8, r8)
    ab3c:	200014c4 	.word	0x200014c4
    ab40:	40001000 	.word	0x40001000
    ab44:	e000e100 	.word	0xe000e100

0000ab48 <radio_reset>:

void radio_reset(void)
{
    ab48:	b510      	push	{r4, lr}
	irq_disable(RADIO_IRQn);
    ab4a:	2001      	movs	r0, #1
    ab4c:	f008 fe90 	bl	13870 <_arch_irq_disable>

	NRF_RADIO->POWER =
    ab50:	2100      	movs	r1, #0
    ab52:	4a03      	ldr	r2, [pc, #12]	; (ab60 <radio_reset+0x18>)
    ab54:	4b03      	ldr	r3, [pc, #12]	; (ab64 <radio_reset+0x1c>)
    ab56:	50d1      	str	r1, [r2, r3]
	    ((RADIO_POWER_POWER_Disabled << RADIO_POWER_POWER_Pos) &
	     RADIO_POWER_POWER_Msk);
	NRF_RADIO->POWER =
    ab58:	3101      	adds	r1, #1
    ab5a:	50d1      	str	r1, [r2, r3]
	    ((RADIO_POWER_POWER_Enabled << RADIO_POWER_POWER_Pos) &
	     RADIO_POWER_POWER_Msk);
}
    ab5c:	bd10      	pop	{r4, pc}
    ab5e:	46c0      	nop			; (mov r8, r8)
    ab60:	40001000 	.word	0x40001000
    ab64:	00000ffc 	.word	0x00000ffc

0000ab68 <radio_phy_set>:
		mode = RADIO_MODE_MODE_Ble_1Mbit;
		break;

#if defined(CONFIG_SOC_SERIES_NRF51X)
	case BIT(1):
		mode = RADIO_MODE_MODE_Nrf_2Mbit;
    ab68:	2301      	movs	r3, #1

void radio_phy_set(u8_t phy, u8_t flags)
{
	u32_t mode;

	switch (phy) {
    ab6a:	2802      	cmp	r0, #2
    ab6c:	d000      	beq.n	ab70 <radio_phy_set+0x8>
	case BIT(0):
	default:
		mode = RADIO_MODE_MODE_Ble_1Mbit;
    ab6e:	3302      	adds	r3, #2
		break;
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_SOC_SERIES_NRF52X */
	}

	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
    ab70:	22a2      	movs	r2, #162	; 0xa2
    ab72:	4902      	ldr	r1, [pc, #8]	; (ab7c <radio_phy_set+0x14>)
    ab74:	00d2      	lsls	r2, r2, #3
    ab76:	508b      	str	r3, [r1, r2]
#if defined(CONFIG_BLUETOOTH_CONTROLLER_RADIO_ENABLE_FAST)
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
				RADIO_MODECNF0_RU_Pos) &
			       RADIO_MODECNF0_RU_Msk;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_RADIO_ENABLE_FAST */
}
    ab78:	4770      	bx	lr
    ab7a:	46c0      	nop			; (mov r8, r8)
    ab7c:	40001000 	.word	0x40001000

0000ab80 <radio_tx_power_set>:

void radio_tx_power_set(u32_t power)
{
	/* TODO map power to h/w values. */
	NRF_RADIO->TXPOWER = power;
    ab80:	4b01      	ldr	r3, [pc, #4]	; (ab88 <radio_tx_power_set+0x8>)
    ab82:	4a02      	ldr	r2, [pc, #8]	; (ab8c <radio_tx_power_set+0xc>)
    ab84:	50d0      	str	r0, [r2, r3]
}
    ab86:	4770      	bx	lr
    ab88:	0000050c 	.word	0x0000050c
    ab8c:	40001000 	.word	0x40001000

0000ab90 <radio_freq_chan_set>:

void radio_freq_chan_set(u32_t chan)
{
	NRF_RADIO->FREQUENCY = chan;
    ab90:	23a1      	movs	r3, #161	; 0xa1
    ab92:	4a02      	ldr	r2, [pc, #8]	; (ab9c <radio_freq_chan_set+0xc>)
    ab94:	00db      	lsls	r3, r3, #3
    ab96:	50d0      	str	r0, [r2, r3]
}
    ab98:	4770      	bx	lr
    ab9a:	46c0      	nop			; (mov r8, r8)
    ab9c:	40001000 	.word	0x40001000

0000aba0 <radio_whiten_iv_set>:

void radio_whiten_iv_set(u32_t iv)
{
	NRF_RADIO->DATAWHITEIV = iv;
    aba0:	4b01      	ldr	r3, [pc, #4]	; (aba8 <radio_whiten_iv_set+0x8>)
    aba2:	4a02      	ldr	r2, [pc, #8]	; (abac <radio_whiten_iv_set+0xc>)
    aba4:	50d0      	str	r0, [r2, r3]
}
    aba6:	4770      	bx	lr
    aba8:	00000554 	.word	0x00000554
    abac:	40001000 	.word	0x40001000

0000abb0 <radio_aa_set>:

void radio_aa_set(u8_t *aa)
{
	NRF_RADIO->TXADDRESS =
    abb0:	2200      	movs	r2, #0
    abb2:	490a      	ldr	r1, [pc, #40]	; (abdc <radio_aa_set+0x2c>)
    abb4:	4b0a      	ldr	r3, [pc, #40]	; (abe0 <radio_aa_set+0x30>)
    abb6:	50ca      	str	r2, [r1, r3]
	    (((0UL) << RADIO_TXADDRESS_TXADDRESS_Pos) &
	     RADIO_TXADDRESS_TXADDRESS_Msk);
	NRF_RADIO->RXADDRESSES =
    abb8:	3201      	adds	r2, #1
    abba:	3304      	adds	r3, #4
    abbc:	50ca      	str	r2, [r1, r3]
	    ((RADIO_RXADDRESSES_ADDR0_Enabled) << RADIO_RXADDRESSES_ADDR0_Pos);
	NRF_RADIO->PREFIX0 = aa[3];
    abbe:	78c2      	ldrb	r2, [r0, #3]
    abc0:	4b08      	ldr	r3, [pc, #32]	; (abe4 <radio_aa_set+0x34>)
    abc2:	50ca      	str	r2, [r1, r3]
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
    abc4:	7883      	ldrb	r3, [r0, #2]
    abc6:	061a      	lsls	r2, r3, #24
    abc8:	7843      	ldrb	r3, [r0, #1]
    abca:	041b      	lsls	r3, r3, #16
    abcc:	4313      	orrs	r3, r2
    abce:	7802      	ldrb	r2, [r0, #0]
    abd0:	0212      	lsls	r2, r2, #8
    abd2:	4313      	orrs	r3, r2
    abd4:	4a04      	ldr	r2, [pc, #16]	; (abe8 <radio_aa_set+0x38>)
    abd6:	508b      	str	r3, [r1, r2]
}
    abd8:	4770      	bx	lr
    abda:	46c0      	nop			; (mov r8, r8)
    abdc:	40001000 	.word	0x40001000
    abe0:	0000052c 	.word	0x0000052c
    abe4:	00000524 	.word	0x00000524
    abe8:	0000051c 	.word	0x0000051c

0000abec <radio_pkt_configure>:
	ARG_UNUSED(phy);

	extra = 0;

	/* nRF51 supports only 27 byte PDU when using h/w CCM for encryption. */
	if (!IS_ENABLED(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH_CLEAR) && dc) {
    abec:	07d3      	lsls	r3, r2, #31
    abee:	d500      	bpl.n	abf2 <radio_pkt_configure+0x6>
		bits_len = 5;
    abf0:	2005      	movs	r0, #5
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
			    RADIO_PCNF0_S0LEN_Msk) |
			   ((((u32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) &
			    RADIO_PCNF0_LFLEN_Msk) |
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
			    RADIO_PCNF0_S1LEN_Msk) |
    abf2:	2208      	movs	r2, #8
    abf4:	23f0      	movs	r3, #240	; 0xf0
    abf6:	1a12      	subs	r2, r2, r0
    abf8:	031b      	lsls	r3, r3, #12
    abfa:	0412      	lsls	r2, r2, #16
    abfc:	401a      	ands	r2, r3
    abfe:	230f      	movs	r3, #15
    ac00:	4003      	ands	r3, r0
    ac02:	2080      	movs	r0, #128	; 0x80
    ac04:	0040      	lsls	r0, r0, #1
    ac06:	4318      	orrs	r0, r3
    ac08:	4310      	orrs	r0, r2
		extra |= (RADIO_PCNF0_S1INCL_Include <<
			  RADIO_PCNF0_S1INCL_Pos) & RADIO_PCNF0_S1INCL_Msk;
	}
#endif /* CONFIG_SOC_SERIES_NRF52X */

	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
    ac0a:	4b04      	ldr	r3, [pc, #16]	; (ac1c <radio_pkt_configure+0x30>)
    ac0c:	4a04      	ldr	r2, [pc, #16]	; (ac20 <radio_pkt_configure+0x34>)
    ac0e:	5098      	str	r0, [r3, r2]
			       RADIO_PCNF1_STATLEN_Msk) |
			     (((3UL) << RADIO_PCNF1_BALEN_Pos) &
			       RADIO_PCNF1_BALEN_Msk) |
			     (((RADIO_PCNF1_ENDIAN_Little) <<
			       RADIO_PCNF1_ENDIAN_Pos) &
			      RADIO_PCNF1_ENDIAN_Msk) |
    ac10:	4a04      	ldr	r2, [pc, #16]	; (ac24 <radio_pkt_configure+0x38>)
    ac12:	4311      	orrs	r1, r2
			    RADIO_PCNF0_LFLEN_Msk) |
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
			    RADIO_PCNF0_S1LEN_Msk) |
			   extra;

	NRF_RADIO->PCNF1 = (((((u32_t)max_len) << RADIO_PCNF1_MAXLEN_Pos) &
    ac14:	22a3      	movs	r2, #163	; 0xa3
    ac16:	00d2      	lsls	r2, r2, #3
    ac18:	5099      	str	r1, [r3, r2]
			     (((RADIO_PCNF1_ENDIAN_Little) <<
			       RADIO_PCNF1_ENDIAN_Pos) &
			      RADIO_PCNF1_ENDIAN_Msk) |
			     (((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
			       RADIO_PCNF1_WHITEEN_Msk));
}
    ac1a:	4770      	bx	lr
    ac1c:	40001000 	.word	0x40001000
    ac20:	00000514 	.word	0x00000514
    ac24:	02030000 	.word	0x02030000

0000ac28 <radio_pkt_rx_set>:
    ac28:	4b01      	ldr	r3, [pc, #4]	; (ac30 <radio_pkt_rx_set+0x8>)
    ac2a:	4a02      	ldr	r2, [pc, #8]	; (ac34 <radio_pkt_rx_set+0xc>)
    ac2c:	50d0      	str	r0, [r2, r3]
    ac2e:	4770      	bx	lr
    ac30:	00000504 	.word	0x00000504
    ac34:	40001000 	.word	0x40001000

0000ac38 <radio_pkt_tx_set>:
	NRF_RADIO->PACKETPTR = (u32_t)rx_packet;
}

void radio_pkt_tx_set(void *tx_packet)
{
	NRF_RADIO->PACKETPTR = (u32_t)tx_packet;
    ac38:	4b01      	ldr	r3, [pc, #4]	; (ac40 <radio_pkt_tx_set+0x8>)
    ac3a:	4a02      	ldr	r2, [pc, #8]	; (ac44 <radio_pkt_tx_set+0xc>)
    ac3c:	50d0      	str	r0, [r2, r3]
}
    ac3e:	4770      	bx	lr
    ac40:	00000504 	.word	0x00000504
    ac44:	40001000 	.word	0x40001000

0000ac48 <radio_tx_ready_delay_get>:
#else /* !CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW */
	return 131; /* floor(129.5 + 1.6) */
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW */
#endif /* !CONFIG_SOC_NRF52840 */
#endif /* CONFIG_SOC_SERIES_NRF52X */
}
    ac48:	208c      	movs	r0, #140	; 0x8c
    ac4a:	4770      	bx	lr

0000ac4c <radio_tx_chain_delay_get>:
	}
#else /* !CONFIG_SOC_NRF52840 */
	return 1; /* ceil(0.6) */
#endif /* !CONFIG_SOC_NRF52840 */
#endif /* CONFIG_SOC_SERIES_NRF52X */
}
    ac4c:	2001      	movs	r0, #1
    ac4e:	4770      	bx	lr

0000ac50 <radio_rx_ready_delay_get>:
#else /* !CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW */
	return 130; /* ceil(129.5 + 0.2) */
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW */
#endif /* !CONFIG_SOC_NRF52840 */
#endif /* CONFIG_SOC_SERIES_NRF52X */
}
    ac50:	208a      	movs	r0, #138	; 0x8a
    ac52:	4770      	bx	lr

0000ac54 <radio_rx_chain_delay_get>:
	case BIT(1):
		return 5; /* ceil(5) */
	}
#endif /* !CONFIG_SOC_NRF52840 */
#endif /* CONFIG_SOC_SERIES_NRF52X */
}
    ac54:	2003      	movs	r0, #3
    ac56:	4770      	bx	lr

0000ac58 <radio_rx_enable>:

void radio_rx_enable(void)
{
	NRF_RADIO->TASKS_RXEN = 1;
    ac58:	2201      	movs	r2, #1
    ac5a:	4b01      	ldr	r3, [pc, #4]	; (ac60 <radio_rx_enable+0x8>)
    ac5c:	605a      	str	r2, [r3, #4]
}
    ac5e:	4770      	bx	lr
    ac60:	40001000 	.word	0x40001000

0000ac64 <radio_tx_enable>:

void radio_tx_enable(void)
{
	NRF_RADIO->TASKS_TXEN = 1;
    ac64:	2201      	movs	r2, #1
    ac66:	4b01      	ldr	r3, [pc, #4]	; (ac6c <radio_tx_enable+0x8>)
    ac68:	601a      	str	r2, [r3, #0]
}
    ac6a:	4770      	bx	lr
    ac6c:	40001000 	.word	0x40001000

0000ac70 <radio_disable>:
	NRF_PPI->CHENCLR = PPI_CHEN_CH8_Msk | PPI_CHEN_CH11_Msk;
	NRF_PPI->TASKS_CHG[0].DIS = 1;
	NRF_PPI->TASKS_CHG[1].DIS = 1;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW */

	NRF_RADIO->SHORTS = 0;
    ac70:	2280      	movs	r2, #128	; 0x80
    ac72:	2100      	movs	r1, #0
    ac74:	4b02      	ldr	r3, [pc, #8]	; (ac80 <radio_disable+0x10>)
    ac76:	0092      	lsls	r2, r2, #2
    ac78:	5099      	str	r1, [r3, r2]
	NRF_RADIO->TASKS_DISABLE = 1;
    ac7a:	2201      	movs	r2, #1
    ac7c:	611a      	str	r2, [r3, #16]
}
    ac7e:	4770      	bx	lr
    ac80:	40001000 	.word	0x40001000

0000ac84 <radio_status_reset>:

void radio_status_reset(void)
{
	NRF_RADIO->EVENTS_READY = 0;
    ac84:	2200      	movs	r2, #0
    ac86:	4b03      	ldr	r3, [pc, #12]	; (ac94 <radio_status_reset+0x10>)
    ac88:	605a      	str	r2, [r3, #4]
	NRF_RADIO->EVENTS_ADDRESS = 0;
    ac8a:	609a      	str	r2, [r3, #8]
	NRF_RADIO->EVENTS_PAYLOAD = 0;
    ac8c:	60da      	str	r2, [r3, #12]
	NRF_RADIO->EVENTS_END = 0;
    ac8e:	611a      	str	r2, [r3, #16]
	NRF_RADIO->EVENTS_DISABLED = 0;
    ac90:	615a      	str	r2, [r3, #20]
}
    ac92:	4770      	bx	lr
    ac94:	400010fc 	.word	0x400010fc

0000ac98 <radio_is_ready>:

u32_t radio_is_ready(void)
{
	return (NRF_RADIO->EVENTS_READY != 0);
    ac98:	4b02      	ldr	r3, [pc, #8]	; (aca4 <radio_is_ready+0xc>)
    ac9a:	6858      	ldr	r0, [r3, #4]
    ac9c:	1e43      	subs	r3, r0, #1
    ac9e:	4198      	sbcs	r0, r3
}
    aca0:	4770      	bx	lr
    aca2:	46c0      	nop			; (mov r8, r8)
    aca4:	400010fc 	.word	0x400010fc

0000aca8 <radio_is_done>:

u32_t radio_is_done(void)
{
	return (NRF_RADIO->EVENTS_END != 0);
    aca8:	4b02      	ldr	r3, [pc, #8]	; (acb4 <radio_is_done+0xc>)
    acaa:	6918      	ldr	r0, [r3, #16]
    acac:	1e43      	subs	r3, r0, #1
    acae:	4198      	sbcs	r0, r3
}
    acb0:	4770      	bx	lr
    acb2:	46c0      	nop			; (mov r8, r8)
    acb4:	400010fc 	.word	0x400010fc

0000acb8 <radio_is_idle>:
	return (NRF_RADIO->EVENTS_DISABLED != 0);
}

u32_t radio_is_idle(void)
{
	return (NRF_RADIO->STATE == 0);
    acb8:	23aa      	movs	r3, #170	; 0xaa
    acba:	4a03      	ldr	r2, [pc, #12]	; (acc8 <radio_is_idle+0x10>)
    acbc:	00db      	lsls	r3, r3, #3
    acbe:	58d0      	ldr	r0, [r2, r3]
    acc0:	4243      	negs	r3, r0
    acc2:	4158      	adcs	r0, r3
}
    acc4:	4770      	bx	lr
    acc6:	46c0      	nop			; (mov r8, r8)
    acc8:	40001000 	.word	0x40001000

0000accc <radio_crc_configure>:

void radio_crc_configure(u32_t polynomial, u32_t iv)
{
    accc:	b510      	push	{r4, lr}
	NRF_RADIO->CRCCNF =
    acce:	2404      	movs	r4, #4
    acd0:	4b04      	ldr	r3, [pc, #16]	; (ace4 <radio_crc_configure+0x18>)
    acd2:	4a05      	ldr	r2, [pc, #20]	; (ace8 <radio_crc_configure+0x1c>)
    acd4:	34ff      	adds	r4, #255	; 0xff
    acd6:	509c      	str	r4, [r3, r2]
	    (((RADIO_CRCCNF_SKIPADDR_Skip) << RADIO_CRCCNF_SKIPADDR_Pos) &
	     RADIO_CRCCNF_SKIPADDR_Msk) |
	    (((RADIO_CRCCNF_LEN_Three) << RADIO_CRCCNF_LEN_Pos) &
	       RADIO_CRCCNF_LEN_Msk);
	NRF_RADIO->CRCPOLY = polynomial;
    acd8:	3204      	adds	r2, #4
    acda:	5098      	str	r0, [r3, r2]
	NRF_RADIO->CRCINIT = iv;
    acdc:	4a03      	ldr	r2, [pc, #12]	; (acec <radio_crc_configure+0x20>)
    acde:	5099      	str	r1, [r3, r2]
}
    ace0:	bd10      	pop	{r4, pc}
    ace2:	46c0      	nop			; (mov r8, r8)
    ace4:	40001000 	.word	0x40001000
    ace8:	00000534 	.word	0x00000534
    acec:	0000053c 	.word	0x0000053c

0000acf0 <radio_crc_is_valid>:

u32_t radio_crc_is_valid(void)
{
	return (NRF_RADIO->CRCSTATUS != 0);
    acf0:	2380      	movs	r3, #128	; 0x80
    acf2:	4a03      	ldr	r2, [pc, #12]	; (ad00 <radio_crc_is_valid+0x10>)
    acf4:	00db      	lsls	r3, r3, #3
    acf6:	58d0      	ldr	r0, [r2, r3]
    acf8:	1e43      	subs	r3, r0, #1
    acfa:	4198      	sbcs	r0, r3
}
    acfc:	4770      	bx	lr
    acfe:	46c0      	nop			; (mov r8, r8)
    ad00:	40001000 	.word	0x40001000

0000ad04 <radio_pkt_empty_get>:
			(RADIO_PDU_LEN_MAX + 3) : PDU_AC_SIZE_MAX];

void *radio_pkt_empty_get(void)
{
	return _pkt_empty;
}
    ad04:	4800      	ldr	r0, [pc, #0]	; (ad08 <radio_pkt_empty_get+0x4>)
    ad06:	4770      	bx	lr
    ad08:	20001494 	.word	0x20001494

0000ad0c <radio_pkt_scratch_get>:

void *radio_pkt_scratch_get(void)
{
	return _pkt_scratch;
}
    ad0c:	4800      	ldr	r0, [pc, #0]	; (ad10 <radio_pkt_scratch_get+0x4>)
    ad0e:	4770      	bx	lr
    ad10:	2000146c 	.word	0x2000146c

0000ad14 <radio_switch_complete_and_rx>:
#endif /* CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW */

void radio_switch_complete_and_rx(u8_t phy)
{
#if defined(CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
    ad14:	2380      	movs	r3, #128	; 0x80
    ad16:	210b      	movs	r1, #11
    ad18:	4a01      	ldr	r2, [pc, #4]	; (ad20 <radio_switch_complete_and_rx+0xc>)
    ad1a:	009b      	lsls	r3, r3, #2
    ad1c:	50d1      	str	r1, [r2, r3]
#else /* !CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(0, phy, 0);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW */
}
    ad1e:	4770      	bx	lr
    ad20:	40001000 	.word	0x40001000

0000ad24 <radio_switch_complete_and_tx>:

void radio_switch_complete_and_tx(u8_t phy, u8_t flags)
{
#if defined(CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
    ad24:	2380      	movs	r3, #128	; 0x80
    ad26:	2107      	movs	r1, #7
    ad28:	4a01      	ldr	r2, [pc, #4]	; (ad30 <radio_switch_complete_and_tx+0xc>)
    ad2a:	009b      	lsls	r3, r3, #2
    ad2c:	50d1      	str	r1, [r2, r3]
#else /* !CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(1, phy, flags);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW */
}
    ad2e:	4770      	bx	lr
    ad30:	40001000 	.word	0x40001000

0000ad34 <radio_switch_complete_and_disable>:

void radio_switch_complete_and_disable(void)
{
	NRF_RADIO->SHORTS =
    ad34:	2380      	movs	r3, #128	; 0x80
    ad36:	2103      	movs	r1, #3
    ad38:	4a01      	ldr	r2, [pc, #4]	; (ad40 <radio_switch_complete_and_disable+0xc>)
    ad3a:	009b      	lsls	r3, r3, #2
    ad3c:	50d1      	str	r1, [r2, r3]
	    (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk);

#if !defined(CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW)
	NRF_PPI->CHENCLR = PPI_CHEN_CH8_Msk | PPI_CHEN_CH11_Msk;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW */
}
    ad3e:	4770      	bx	lr
    ad40:	40001000 	.word	0x40001000

0000ad44 <radio_rssi_measure>:

void radio_rssi_measure(void)
{
	NRF_RADIO->SHORTS |=
    ad44:	2280      	movs	r2, #128	; 0x80
    ad46:	2088      	movs	r0, #136	; 0x88
    ad48:	4903      	ldr	r1, [pc, #12]	; (ad58 <radio_rssi_measure+0x14>)
    ad4a:	0092      	lsls	r2, r2, #2
    ad4c:	588b      	ldr	r3, [r1, r2]
    ad4e:	0040      	lsls	r0, r0, #1
    ad50:	4303      	orrs	r3, r0
    ad52:	508b      	str	r3, [r1, r2]
	    (RADIO_SHORTS_ADDRESS_RSSISTART_Msk |
	     RADIO_SHORTS_DISABLED_RSSISTOP_Msk);
}
    ad54:	4770      	bx	lr
    ad56:	46c0      	nop			; (mov r8, r8)
    ad58:	40001000 	.word	0x40001000

0000ad5c <radio_rssi_get>:

u32_t radio_rssi_get(void)
{
	return NRF_RADIO->RSSISAMPLE;
    ad5c:	23a9      	movs	r3, #169	; 0xa9
    ad5e:	4a02      	ldr	r2, [pc, #8]	; (ad68 <radio_rssi_get+0xc>)
    ad60:	00db      	lsls	r3, r3, #3
    ad62:	58d0      	ldr	r0, [r2, r3]
}
    ad64:	4770      	bx	lr
    ad66:	46c0      	nop			; (mov r8, r8)
    ad68:	40001000 	.word	0x40001000

0000ad6c <radio_rssi_status_reset>:

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
    ad6c:	2200      	movs	r2, #0
    ad6e:	4b01      	ldr	r3, [pc, #4]	; (ad74 <radio_rssi_status_reset+0x8>)
    ad70:	621a      	str	r2, [r3, #32]
}
    ad72:	4770      	bx	lr
    ad74:	400010fc 	.word	0x400010fc

0000ad78 <radio_rssi_is_ready>:

u32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
    ad78:	4b02      	ldr	r3, [pc, #8]	; (ad84 <radio_rssi_is_ready+0xc>)
    ad7a:	6a18      	ldr	r0, [r3, #32]
    ad7c:	1e43      	subs	r3, r0, #1
    ad7e:	4198      	sbcs	r0, r3
}
    ad80:	4770      	bx	lr
    ad82:	46c0      	nop			; (mov r8, r8)
    ad84:	400010fc 	.word	0x400010fc

0000ad88 <radio_filter_configure>:
			    u8_t *bdaddr)
{
	u8_t index;

	for (index = 0; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
    ad88:	23c0      	movs	r3, #192	; 0xc0
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
}

void radio_filter_configure(u8_t bitmask_enable, u8_t bitmask_addr_type,
			    u8_t *bdaddr)
{
    ad8a:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t index;

	for (index = 0; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
    ad8c:	00db      	lsls	r3, r3, #3
			((u32_t)bdaddr[2] << 16) |
			((u32_t)bdaddr[1] << 8) |
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((u32_t)bdaddr[5] << 8) | bdaddr[4];
    ad8e:	27c4      	movs	r7, #196	; 0xc4
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
}

void radio_filter_configure(u8_t bitmask_enable, u8_t bitmask_addr_type,
			    u8_t *bdaddr)
{
    ad90:	2600      	movs	r6, #0
	u8_t index;

	for (index = 0; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
    ad92:	469c      	mov	ip, r3
			((u32_t)bdaddr[2] << 16) |
			((u32_t)bdaddr[1] << 8) |
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((u32_t)bdaddr[5] << 8) | bdaddr[4];
    ad94:	00ff      	lsls	r7, r7, #3
	u8_t index;

	for (index = 0; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
			((u32_t)bdaddr[2] << 16) |
			((u32_t)bdaddr[1] << 8) |
    ad96:	7854      	ldrb	r4, [r2, #1]
    ad98:	7813      	ldrb	r3, [r2, #0]
    ad9a:	0224      	lsls	r4, r4, #8
    ad9c:	431c      	orrs	r4, r3
    ad9e:	7893      	ldrb	r3, [r2, #2]
    ada0:	4d0d      	ldr	r5, [pc, #52]	; (add8 <radio_filter_configure+0x50>)
    ada2:	041b      	lsls	r3, r3, #16
    ada4:	4323      	orrs	r3, r4
    ada6:	001c      	movs	r4, r3
    ada8:	78d3      	ldrb	r3, [r2, #3]
    adaa:	061b      	lsls	r3, r3, #24
    adac:	4323      	orrs	r3, r4
    adae:	00b4      	lsls	r4, r6, #2
    adb0:	1964      	adds	r4, r4, r5
			    u8_t *bdaddr)
{
	u8_t index;

	for (index = 0; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
    adb2:	4665      	mov	r5, ip
    adb4:	5163      	str	r3, [r4, r5]
    adb6:	7953      	ldrb	r3, [r2, #5]
    adb8:	7915      	ldrb	r5, [r2, #4]
    adba:	021b      	lsls	r3, r3, #8
			((u32_t)bdaddr[2] << 16) |
			((u32_t)bdaddr[1] << 8) |
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((u32_t)bdaddr[5] << 8) | bdaddr[4];
    adbc:	432b      	orrs	r3, r5
    adbe:	3601      	adds	r6, #1
    adc0:	51e3      	str	r3, [r4, r7]
		bdaddr += 6;
    adc2:	3206      	adds	r2, #6
void radio_filter_configure(u8_t bitmask_enable, u8_t bitmask_addr_type,
			    u8_t *bdaddr)
{
	u8_t index;

	for (index = 0; index < 8; index++) {
    adc4:	2e08      	cmp	r6, #8
    adc6:	d1e6      	bne.n	ad96 <radio_filter_configure+0xe>
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((u32_t)bdaddr[5] << 8) | bdaddr[4];
		bdaddr += 6;
	}

	NRF_RADIO->DACNF = ((u32_t)bitmask_addr_type << 8) | bitmask_enable;
    adc8:	23c8      	movs	r3, #200	; 0xc8
    adca:	0209      	lsls	r1, r1, #8
    adcc:	4a02      	ldr	r2, [pc, #8]	; (add8 <radio_filter_configure+0x50>)
    adce:	4308      	orrs	r0, r1
    add0:	00db      	lsls	r3, r3, #3
    add2:	50d0      	str	r0, [r2, r3]
}
    add4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    add6:	46c0      	nop			; (mov r8, r8)
    add8:	40001000 	.word	0x40001000

0000addc <radio_filter_disable>:

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
    addc:	22c8      	movs	r2, #200	; 0xc8
    adde:	20ff      	movs	r0, #255	; 0xff
    ade0:	4902      	ldr	r1, [pc, #8]	; (adec <radio_filter_disable+0x10>)
    ade2:	00d2      	lsls	r2, r2, #3
    ade4:	588b      	ldr	r3, [r1, r2]
    ade6:	4383      	bics	r3, r0
    ade8:	508b      	str	r3, [r1, r2]
}
    adea:	4770      	bx	lr
    adec:	40001000 	.word	0x40001000

0000adf0 <radio_filter_status_reset>:

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
    adf0:	2200      	movs	r2, #0
    adf2:	4b02      	ldr	r3, [pc, #8]	; (adfc <radio_filter_status_reset+0xc>)
    adf4:	619a      	str	r2, [r3, #24]
	NRF_RADIO->EVENTS_DEVMISS = 0;
    adf6:	61da      	str	r2, [r3, #28]
}
    adf8:	4770      	bx	lr
    adfa:	46c0      	nop			; (mov r8, r8)
    adfc:	400010fc 	.word	0x400010fc

0000ae00 <radio_filter_has_match>:

u32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
    ae00:	4b02      	ldr	r3, [pc, #8]	; (ae0c <radio_filter_has_match+0xc>)
    ae02:	6998      	ldr	r0, [r3, #24]
    ae04:	1e43      	subs	r3, r0, #1
    ae06:	4198      	sbcs	r0, r3
}
    ae08:	4770      	bx	lr
    ae0a:	46c0      	nop			; (mov r8, r8)
    ae0c:	400010fc 	.word	0x400010fc

0000ae10 <radio_filter_match_get>:

u32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
    ae10:	2382      	movs	r3, #130	; 0x82
    ae12:	4a02      	ldr	r2, [pc, #8]	; (ae1c <radio_filter_match_get+0xc>)
    ae14:	00db      	lsls	r3, r3, #3
    ae16:	58d0      	ldr	r0, [r2, r3]
}
    ae18:	4770      	bx	lr
    ae1a:	46c0      	nop			; (mov r8, r8)
    ae1c:	40001000 	.word	0x40001000

0000ae20 <radio_bc_configure>:

void radio_bc_configure(u32_t n)
{
	NRF_RADIO->BCC = n;
    ae20:	22ac      	movs	r2, #172	; 0xac
	NRF_RADIO->SHORTS |= RADIO_SHORTS_ADDRESS_BCSTART_Msk;
    ae22:	2180      	movs	r1, #128	; 0x80
	return NRF_RADIO->DAI;
}

void radio_bc_configure(u32_t n)
{
	NRF_RADIO->BCC = n;
    ae24:	4b04      	ldr	r3, [pc, #16]	; (ae38 <radio_bc_configure+0x18>)
    ae26:	00d2      	lsls	r2, r2, #3
    ae28:	5098      	str	r0, [r3, r2]
	NRF_RADIO->SHORTS |= RADIO_SHORTS_ADDRESS_BCSTART_Msk;
    ae2a:	2040      	movs	r0, #64	; 0x40
    ae2c:	0089      	lsls	r1, r1, #2
    ae2e:	585a      	ldr	r2, [r3, r1]
    ae30:	4302      	orrs	r2, r0
    ae32:	505a      	str	r2, [r3, r1]
}
    ae34:	4770      	bx	lr
    ae36:	46c0      	nop			; (mov r8, r8)
    ae38:	40001000 	.word	0x40001000

0000ae3c <radio_tmr_status_reset>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
}

void radio_tmr_status_reset(void)
{
	NRF_RTC0->EVTENCLR = RTC_EVTENCLR_COMPARE2_Msk;
    ae3c:	2180      	movs	r1, #128	; 0x80
    ae3e:	23d2      	movs	r3, #210	; 0xd2
    ae40:	4a04      	ldr	r2, [pc, #16]	; (ae54 <radio_tmr_status_reset+0x18>)
    ae42:	02c9      	lsls	r1, r1, #11
    ae44:	009b      	lsls	r3, r3, #2
    ae46:	50d1      	str	r1, [r2, r3]
	NRF_PPI->CHENCLR =
    ae48:	21ff      	movs	r1, #255	; 0xff
    ae4a:	4a03      	ldr	r2, [pc, #12]	; (ae58 <radio_tmr_status_reset+0x1c>)
    ae4c:	33c1      	adds	r3, #193	; 0xc1
    ae4e:	33ff      	adds	r3, #255	; 0xff
    ae50:	50d1      	str	r1, [r2, r3]
	    (PPI_CHEN_CH0_Msk | PPI_CHEN_CH1_Msk | PPI_CHEN_CH2_Msk |
	     PPI_CHEN_CH3_Msk | PPI_CHEN_CH4_Msk | PPI_CHEN_CH5_Msk |
	     PPI_CHEN_CH6_Msk | PPI_CHEN_CH7_Msk);
}
    ae52:	4770      	bx	lr
    ae54:	4000b000 	.word	0x4000b000
    ae58:	4001f000 	.word	0x4001f000

0000ae5c <radio_tmr_tifs_set>:

void radio_tmr_tifs_set(u32_t tifs)
{
#if defined(CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
    ae5c:	4b01      	ldr	r3, [pc, #4]	; (ae64 <radio_tmr_tifs_set+0x8>)
    ae5e:	4a02      	ldr	r2, [pc, #8]	; (ae68 <radio_tmr_tifs_set+0xc>)
    ae60:	50d0      	str	r0, [r2, r3]
#else /* !CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW */
	NRF_TIMER1->CC[sw_tifs_toggle] = tifs;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW */
}
    ae62:	4770      	bx	lr
    ae64:	00000544 	.word	0x00000544
    ae68:	40001000 	.word	0x40001000

0000ae6c <radio_tmr_start>:

u32_t radio_tmr_start(u8_t trx, u32_t ticks_start, u32_t remainder)
{
    ae6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
    ae6e:	4b20      	ldr	r3, [pc, #128]	; (aef0 <radio_tmr_start+0x84>)
	NRF_TIMER1->CC[sw_tifs_toggle] = tifs;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW */
}

u32_t radio_tmr_start(u8_t trx, u32_t ticks_start, u32_t remainder)
{
    ae70:	000c      	movs	r4, r1
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
    ae72:	18d1      	adds	r1, r2, r3
    ae74:	4b1f      	ldr	r3, [pc, #124]	; (aef4 <radio_tmr_start+0x88>)
	NRF_TIMER1->CC[sw_tifs_toggle] = tifs;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW */
}

u32_t radio_tmr_start(u8_t trx, u32_t ticks_start, u32_t remainder)
{
    ae76:	9001      	str	r0, [sp, #4]
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
    ae78:	4299      	cmp	r1, r3
    ae7a:	d902      	bls.n	ae82 <radio_tmr_start+0x16>
		ticks_start--;
		remainder += 30517578UL;
    ae7c:	4b1e      	ldr	r3, [pc, #120]	; (aef8 <radio_tmr_start+0x8c>)
}

u32_t radio_tmr_start(u8_t trx, u32_t ticks_start, u32_t remainder)
{
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
		ticks_start--;
    ae7e:	3c01      	subs	r4, #1
		remainder += 30517578UL;
    ae80:	18d2      	adds	r2, r2, r3
	}
	remainder /= 1000000UL;
    ae82:	491e      	ldr	r1, [pc, #120]	; (aefc <radio_tmr_start+0x90>)
    ae84:	0010      	movs	r0, r2
    ae86:	f7f5 f98b 	bl	1a0 <__aeabi_uidiv>

	NRF_TIMER0->TASKS_CLEAR = 1;
    ae8a:	2201      	movs	r2, #1
	NRF_TIMER0->MODE = 0;
	NRF_TIMER0->PRESCALER = 4;
    ae8c:	25a2      	movs	r5, #162	; 0xa2
		remainder += 30517578UL;
	}
	remainder /= 1000000UL;

	NRF_TIMER0->TASKS_CLEAR = 1;
	NRF_TIMER0->MODE = 0;
    ae8e:	2600      	movs	r6, #0
	NRF_TIMER0->PRESCALER = 4;
    ae90:	2704      	movs	r7, #4
		ticks_start--;
		remainder += 30517578UL;
	}
	remainder /= 1000000UL;

	NRF_TIMER0->TASKS_CLEAR = 1;
    ae92:	4b1b      	ldr	r3, [pc, #108]	; (af00 <radio_tmr_start+0x94>)
	NRF_TIMER0->MODE = 0;
	NRF_TIMER0->PRESCALER = 4;
    ae94:	00ed      	lsls	r5, r5, #3
		ticks_start--;
		remainder += 30517578UL;
	}
	remainder /= 1000000UL;

	NRF_TIMER0->TASKS_CLEAR = 1;
    ae96:	60da      	str	r2, [r3, #12]
	NRF_TIMER0->MODE = 0;
    ae98:	4a1a      	ldr	r2, [pc, #104]	; (af04 <radio_tmr_start+0x98>)
	NRF_TIMER0->PRESCALER = 4;
	NRF_TIMER0->BITMODE = 2;	/* 24 - bit */
    ae9a:	2102      	movs	r1, #2
		remainder += 30517578UL;
	}
	remainder /= 1000000UL;

	NRF_TIMER0->TASKS_CLEAR = 1;
	NRF_TIMER0->MODE = 0;
    ae9c:	509e      	str	r6, [r3, r2]
	NRF_TIMER0->PRESCALER = 4;
    ae9e:	515f      	str	r7, [r3, r5]
	NRF_TIMER0->BITMODE = 2;	/* 24 - bit */
    aea0:	27a1      	movs	r7, #161	; 0xa1
    aea2:	00ff      	lsls	r7, r7, #3
    aea4:	51d9      	str	r1, [r3, r7]

	NRF_TIMER0->CC[0] = remainder;
	NRF_TIMER0->EVENTS_COMPARE[0] = 0;

	NRF_RTC0->CC[2] = ticks_start;
    aea6:	21a9      	movs	r1, #169	; 0xa9
	NRF_TIMER0->TASKS_CLEAR = 1;
	NRF_TIMER0->MODE = 0;
	NRF_TIMER0->PRESCALER = 4;
	NRF_TIMER0->BITMODE = 2;	/* 24 - bit */

	NRF_TIMER0->CC[0] = remainder;
    aea8:	3738      	adds	r7, #56	; 0x38
    aeaa:	51d8      	str	r0, [r3, r7]
	NRF_TIMER0->EVENTS_COMPARE[0] = 0;
    aeac:	4f16      	ldr	r7, [pc, #88]	; (af08 <radio_tmr_start+0x9c>)

	NRF_RTC0->CC[2] = ticks_start;
    aeae:	00c9      	lsls	r1, r1, #3
	NRF_TIMER0->MODE = 0;
	NRF_TIMER0->PRESCALER = 4;
	NRF_TIMER0->BITMODE = 2;	/* 24 - bit */

	NRF_TIMER0->CC[0] = remainder;
	NRF_TIMER0->EVENTS_COMPARE[0] = 0;
    aeb0:	647e      	str	r6, [r7, #68]	; 0x44

	NRF_RTC0->CC[2] = ticks_start;
    aeb2:	4f16      	ldr	r7, [pc, #88]	; (af0c <radio_tmr_start+0xa0>)
    aeb4:	507c      	str	r4, [r7, r1]
	NRF_RTC0->EVTENSET = RTC_EVTENSET_COMPARE2_Msk;
    aeb6:	2180      	movs	r1, #128	; 0x80
    aeb8:	24d1      	movs	r4, #209	; 0xd1
    aeba:	02c9      	lsls	r1, r1, #11
    aebc:	00a4      	lsls	r4, r4, #2
    aebe:	5139      	str	r1, [r7, r4]
	NRF_RTC0->EVENTS_COMPARE[2] = 0;
    aec0:	4c13      	ldr	r4, [pc, #76]	; (af10 <radio_tmr_start+0xa4>)

	NRF_PPI->CH[1].EEP = (u32_t)&(NRF_RTC0->EVENTS_COMPARE[2]);
    aec2:	4f14      	ldr	r7, [pc, #80]	; (af14 <radio_tmr_start+0xa8>)
	NRF_TIMER0->CC[0] = remainder;
	NRF_TIMER0->EVENTS_COMPARE[0] = 0;

	NRF_RTC0->CC[2] = ticks_start;
	NRF_RTC0->EVTENSET = RTC_EVTENSET_COMPARE2_Msk;
	NRF_RTC0->EVENTS_COMPARE[2] = 0;
    aec4:	64e6      	str	r6, [r4, #76]	; 0x4c

	NRF_PPI->CH[1].EEP = (u32_t)&(NRF_RTC0->EVENTS_COMPARE[2]);
    aec6:	26a3      	movs	r6, #163	; 0xa3
    aec8:	4c13      	ldr	r4, [pc, #76]	; (af18 <radio_tmr_start+0xac>)
    aeca:	00f6      	lsls	r6, r6, #3
    aecc:	51a7      	str	r7, [r4, r6]
	NRF_PPI->CH[1].TEP = (u32_t)&(NRF_TIMER0->TASKS_START);
    aece:	4e13      	ldr	r6, [pc, #76]	; (af1c <radio_tmr_start+0xb0>)
	NRF_PPI->CHENSET = PPI_CHEN_CH1_Msk;

	if (trx) {
    aed0:	9901      	ldr	r1, [sp, #4]
	NRF_RTC0->CC[2] = ticks_start;
	NRF_RTC0->EVTENSET = RTC_EVTENSET_COMPARE2_Msk;
	NRF_RTC0->EVENTS_COMPARE[2] = 0;

	NRF_PPI->CH[1].EEP = (u32_t)&(NRF_RTC0->EVENTS_COMPARE[2]);
	NRF_PPI->CH[1].TEP = (u32_t)&(NRF_TIMER0->TASKS_START);
    aed2:	51a3      	str	r3, [r4, r6]
	NRF_PPI->CHENSET = PPI_CHEN_CH1_Msk;
    aed4:	2302      	movs	r3, #2
    aed6:	4e12      	ldr	r6, [pc, #72]	; (af20 <radio_tmr_start+0xb4>)
    aed8:	50a3      	str	r3, [r4, r2]
    aeda:	4b12      	ldr	r3, [pc, #72]	; (af24 <radio_tmr_start+0xb8>)

	if (trx) {
		NRF_PPI->CH[0].EEP =
    aedc:	5166      	str	r6, [r4, r5]

	NRF_PPI->CH[1].EEP = (u32_t)&(NRF_RTC0->EVENTS_COMPARE[2]);
	NRF_PPI->CH[1].TEP = (u32_t)&(NRF_TIMER0->TASKS_START);
	NRF_PPI->CHENSET = PPI_CHEN_CH1_Msk;

	if (trx) {
    aede:	2900      	cmp	r1, #0
    aee0:	d001      	beq.n	aee6 <radio_tmr_start+0x7a>
		NRF_PPI->CH[0].EEP =
			(u32_t)&(NRF_TIMER0->EVENTS_COMPARE[0]);
		NRF_PPI->CH[0].TEP =
    aee2:	4d11      	ldr	r5, [pc, #68]	; (af28 <radio_tmr_start+0xbc>)
    aee4:	e000      	b.n	aee8 <radio_tmr_start+0x7c>
			(u32_t)&(NRF_RADIO->TASKS_TXEN);
		NRF_PPI->CHENSET = PPI_CHEN_CH0_Msk;
	} else {
		NRF_PPI->CH[0].EEP =
			(u32_t)&(NRF_TIMER0->EVENTS_COMPARE[0]);
		NRF_PPI->CH[0].TEP =
    aee6:	4d11      	ldr	r5, [pc, #68]	; (af2c <radio_tmr_start+0xc0>)
    aee8:	50e5      	str	r5, [r4, r3]
			(u32_t)&(NRF_RADIO->TASKS_RXEN);
		NRF_PPI->CHENSET = PPI_CHEN_CH0_Msk;
    aeea:	2301      	movs	r3, #1
    aeec:	50a3      	str	r3, [r4, r2]
	NRF_PPI->CHG[0] = PPI_CHG_CH9_Msk | PPI_CHG_CH12_Msk;
	NRF_PPI->CHG[1] = PPI_CHG_CH10_Msk | PPI_CHG_CH13_Msk;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW */

	return remainder;
}
    aeee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    aef0:	fff0bdc0 	.word	0xfff0bdc0
    aef4:	7ff0bdbf 	.word	0x7ff0bdbf
    aef8:	01d1a94a 	.word	0x01d1a94a
    aefc:	000f4240 	.word	0x000f4240
    af00:	40008000 	.word	0x40008000
    af04:	00000504 	.word	0x00000504
    af08:	400080fc 	.word	0x400080fc
    af0c:	4000b000 	.word	0x4000b000
    af10:	4000b0fc 	.word	0x4000b0fc
    af14:	4000b148 	.word	0x4000b148
    af18:	4001f000 	.word	0x4001f000
    af1c:	0000051c 	.word	0x0000051c
    af20:	40008140 	.word	0x40008140
    af24:	00000514 	.word	0x00000514
    af28:	40001000 	.word	0x40001000
    af2c:	40001004 	.word	0x40001004

0000af30 <radio_tmr_stop>:

void radio_tmr_stop(void)
{
	NRF_TIMER0->TASKS_STOP = 1;
    af30:	2201      	movs	r2, #1
    af32:	4b02      	ldr	r3, [pc, #8]	; (af3c <radio_tmr_stop+0xc>)
    af34:	605a      	str	r2, [r3, #4]
	NRF_TIMER0->TASKS_SHUTDOWN = 1;
    af36:	611a      	str	r2, [r3, #16]

#if !defined(CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW)
	NRF_TIMER1->TASKS_STOP = 1;
	NRF_TIMER1->TASKS_SHUTDOWN = 1;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW */
}
    af38:	4770      	bx	lr
    af3a:	46c0      	nop			; (mov r8, r8)
    af3c:	40008000 	.word	0x40008000

0000af40 <radio_tmr_hcto_configure>:

void radio_tmr_hcto_configure(u32_t hcto)
{
	NRF_TIMER0->CC[2] = hcto;
    af40:	22a9      	movs	r2, #169	; 0xa9
    af42:	4b0c      	ldr	r3, [pc, #48]	; (af74 <radio_tmr_hcto_configure+0x34>)
    af44:	00d2      	lsls	r2, r2, #3
    af46:	5098      	str	r0, [r3, r2]
	NRF_TIMER0->EVENTS_COMPARE[2] = 0;
    af48:	2200      	movs	r2, #0
    af4a:	33fc      	adds	r3, #252	; 0xfc
    af4c:	64da      	str	r2, [r3, #76]	; 0x4c

	NRF_PPI->CH[4].EEP = (u32_t)&(NRF_RADIO->EVENTS_ADDRESS);
    af4e:	22a6      	movs	r2, #166	; 0xa6
    af50:	4b09      	ldr	r3, [pc, #36]	; (af78 <radio_tmr_hcto_configure+0x38>)
    af52:	490a      	ldr	r1, [pc, #40]	; (af7c <radio_tmr_hcto_configure+0x3c>)
    af54:	00d2      	lsls	r2, r2, #3
    af56:	5099      	str	r1, [r3, r2]
	NRF_PPI->CH[4].TEP = (u32_t)&(NRF_TIMER0->TASKS_CAPTURE[2]);
    af58:	4909      	ldr	r1, [pc, #36]	; (af80 <radio_tmr_hcto_configure+0x40>)
    af5a:	4a0a      	ldr	r2, [pc, #40]	; (af84 <radio_tmr_hcto_configure+0x44>)
    af5c:	5099      	str	r1, [r3, r2]
	NRF_PPI->CH[5].EEP = (u32_t)&(NRF_TIMER0->EVENTS_COMPARE[2]);
    af5e:	490a      	ldr	r1, [pc, #40]	; (af88 <radio_tmr_hcto_configure+0x48>)
    af60:	3204      	adds	r2, #4
    af62:	5099      	str	r1, [r3, r2]
	NRF_PPI->CH[5].TEP = (u32_t)&(NRF_RADIO->TASKS_DISABLE);
    af64:	4909      	ldr	r1, [pc, #36]	; (af8c <radio_tmr_hcto_configure+0x4c>)
    af66:	4a0a      	ldr	r2, [pc, #40]	; (af90 <radio_tmr_hcto_configure+0x50>)
    af68:	5099      	str	r1, [r3, r2]
	NRF_PPI->CHENSET = (PPI_CHEN_CH4_Msk | PPI_CHEN_CH5_Msk);
    af6a:	2130      	movs	r1, #48	; 0x30
    af6c:	4a09      	ldr	r2, [pc, #36]	; (af94 <radio_tmr_hcto_configure+0x54>)
    af6e:	5099      	str	r1, [r3, r2]
}
    af70:	4770      	bx	lr
    af72:	46c0      	nop			; (mov r8, r8)
    af74:	40008000 	.word	0x40008000
    af78:	4001f000 	.word	0x4001f000
    af7c:	40001104 	.word	0x40001104
    af80:	40008048 	.word	0x40008048
    af84:	00000534 	.word	0x00000534
    af88:	40008148 	.word	0x40008148
    af8c:	40001010 	.word	0x40001010
    af90:	0000053c 	.word	0x0000053c
    af94:	00000504 	.word	0x00000504

0000af98 <radio_tmr_aa_capture>:

void radio_tmr_aa_capture(void)
{
	NRF_PPI->CH[2].EEP = (u32_t)&(NRF_RADIO->EVENTS_READY);
    af98:	22a4      	movs	r2, #164	; 0xa4
    af9a:	4b08      	ldr	r3, [pc, #32]	; (afbc <radio_tmr_aa_capture+0x24>)
    af9c:	4908      	ldr	r1, [pc, #32]	; (afc0 <radio_tmr_aa_capture+0x28>)
    af9e:	00d2      	lsls	r2, r2, #3
    afa0:	5099      	str	r1, [r3, r2]
	NRF_PPI->CH[2].TEP = (u32_t)&(NRF_TIMER0->TASKS_CAPTURE[0]);
    afa2:	4908      	ldr	r1, [pc, #32]	; (afc4 <radio_tmr_aa_capture+0x2c>)
    afa4:	4a08      	ldr	r2, [pc, #32]	; (afc8 <radio_tmr_aa_capture+0x30>)
    afa6:	5099      	str	r1, [r3, r2]
	NRF_PPI->CH[3].EEP = (u32_t)&(NRF_RADIO->EVENTS_ADDRESS);
    afa8:	4908      	ldr	r1, [pc, #32]	; (afcc <radio_tmr_aa_capture+0x34>)
    afaa:	3204      	adds	r2, #4
    afac:	5099      	str	r1, [r3, r2]
	NRF_PPI->CH[3].TEP = (u32_t)&(NRF_TIMER0->TASKS_CAPTURE[1]);
    afae:	4908      	ldr	r1, [pc, #32]	; (afd0 <radio_tmr_aa_capture+0x38>)
    afb0:	4a08      	ldr	r2, [pc, #32]	; (afd4 <radio_tmr_aa_capture+0x3c>)
    afb2:	5099      	str	r1, [r3, r2]
	NRF_PPI->CHENSET = (PPI_CHEN_CH2_Msk | PPI_CHEN_CH3_Msk);
    afb4:	210c      	movs	r1, #12
    afb6:	4a08      	ldr	r2, [pc, #32]	; (afd8 <radio_tmr_aa_capture+0x40>)
    afb8:	5099      	str	r1, [r3, r2]
}
    afba:	4770      	bx	lr
    afbc:	4001f000 	.word	0x4001f000
    afc0:	40001100 	.word	0x40001100
    afc4:	40008040 	.word	0x40008040
    afc8:	00000524 	.word	0x00000524
    afcc:	40001104 	.word	0x40001104
    afd0:	40008044 	.word	0x40008044
    afd4:	0000052c 	.word	0x0000052c
    afd8:	00000504 	.word	0x00000504

0000afdc <radio_tmr_aa_get>:

u32_t radio_tmr_aa_get(void)
{
	return (NRF_TIMER0->CC[1] - NRF_TIMER0->CC[0]);
    afdc:	21a8      	movs	r1, #168	; 0xa8
    afde:	4a03      	ldr	r2, [pc, #12]	; (afec <radio_tmr_aa_get+0x10>)
    afe0:	4b03      	ldr	r3, [pc, #12]	; (aff0 <radio_tmr_aa_get+0x14>)
    afe2:	00c9      	lsls	r1, r1, #3
    afe4:	58d3      	ldr	r3, [r2, r3]
    afe6:	5850      	ldr	r0, [r2, r1]
    afe8:	1a18      	subs	r0, r3, r0
}
    afea:	4770      	bx	lr
    afec:	40008000 	.word	0x40008000
    aff0:	00000544 	.word	0x00000544

0000aff4 <radio_tmr_end_capture>:

void radio_tmr_end_capture(void)
{
	NRF_PPI->CH[7].EEP = (u32_t)&(NRF_RADIO->EVENTS_END);
    aff4:	22a9      	movs	r2, #169	; 0xa9
    aff6:	4b05      	ldr	r3, [pc, #20]	; (b00c <radio_tmr_end_capture+0x18>)
    aff8:	4905      	ldr	r1, [pc, #20]	; (b010 <radio_tmr_end_capture+0x1c>)
    affa:	00d2      	lsls	r2, r2, #3
    affc:	5099      	str	r1, [r3, r2]
	NRF_PPI->CH[7].TEP = (u32_t)&(NRF_TIMER0->TASKS_CAPTURE[2]);
    affe:	4905      	ldr	r1, [pc, #20]	; (b014 <radio_tmr_end_capture+0x20>)
    b000:	4a05      	ldr	r2, [pc, #20]	; (b018 <radio_tmr_end_capture+0x24>)
    b002:	5099      	str	r1, [r3, r2]
	NRF_PPI->CHENSET = PPI_CHEN_CH7_Msk;
    b004:	2180      	movs	r1, #128	; 0x80
    b006:	4a05      	ldr	r2, [pc, #20]	; (b01c <radio_tmr_end_capture+0x28>)
    b008:	5099      	str	r1, [r3, r2]
}
    b00a:	4770      	bx	lr
    b00c:	4001f000 	.word	0x4001f000
    b010:	4000110c 	.word	0x4000110c
    b014:	40008048 	.word	0x40008048
    b018:	0000054c 	.word	0x0000054c
    b01c:	00000504 	.word	0x00000504

0000b020 <radio_tmr_end_get>:

u32_t radio_tmr_end_get(void)
{
	return NRF_TIMER0->CC[2];
    b020:	23a9      	movs	r3, #169	; 0xa9
    b022:	4a02      	ldr	r2, [pc, #8]	; (b02c <radio_tmr_end_get+0xc>)
    b024:	00db      	lsls	r3, r3, #3
    b026:	58d0      	ldr	r0, [r2, r3]
}
    b028:	4770      	bx	lr
    b02a:	46c0      	nop			; (mov r8, r8)
    b02c:	40008000 	.word	0x40008000

0000b030 <radio_ccm_rx_pkt_set>:
}

static u8_t MALIGN(4) _ccm_scratch[(RADIO_PDU_LEN_MAX - 4) + 16];

void *radio_ccm_rx_pkt_set(struct ccm *ccm, void *pkt)
{
    b030:	b570      	push	{r4, r5, r6, lr}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    b032:	24a0      	movs	r4, #160	; 0xa0
    b034:	2200      	movs	r2, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    b036:	2502      	movs	r5, #2

static u8_t MALIGN(4) _ccm_scratch[(RADIO_PDU_LEN_MAX - 4) + 16];

void *radio_ccm_rx_pkt_set(struct ccm *ccm, void *pkt)
{
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    b038:	4b12      	ldr	r3, [pc, #72]	; (b084 <radio_ccm_rx_pkt_set+0x54>)
    b03a:	00e4      	lsls	r4, r4, #3
	    ((CCM_MODE_LENGTH_Extended << CCM_MODE_LENGTH_Pos) &
	       CCM_MODE_LENGTH_Msk) |
#endif
	    ((CCM_MODE_MODE_Decryption << CCM_MODE_MODE_Pos) &
	     CCM_MODE_MODE_Msk);
	NRF_CCM->CNFPTR = (u32_t)ccm;
    b03c:	26a1      	movs	r6, #161	; 0xa1

static u8_t MALIGN(4) _ccm_scratch[(RADIO_PDU_LEN_MAX - 4) + 16];

void *radio_ccm_rx_pkt_set(struct ccm *ccm, void *pkt)
{
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    b03e:	511a      	str	r2, [r3, r4]
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    b040:	511d      	str	r5, [r3, r4]
	NRF_CCM->MODE =
    b042:	2401      	movs	r4, #1
    b044:	4d10      	ldr	r5, [pc, #64]	; (b088 <radio_ccm_rx_pkt_set+0x58>)
	    ((CCM_MODE_LENGTH_Extended << CCM_MODE_LENGTH_Pos) &
	       CCM_MODE_LENGTH_Msk) |
#endif
	    ((CCM_MODE_MODE_Decryption << CCM_MODE_MODE_Pos) &
	     CCM_MODE_MODE_Msk);
	NRF_CCM->CNFPTR = (u32_t)ccm;
    b046:	00f6      	lsls	r6, r6, #3

void *radio_ccm_rx_pkt_set(struct ccm *ccm, void *pkt)
{
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
	NRF_CCM->MODE =
    b048:	515c      	str	r4, [r3, r5]
	    ((CCM_MODE_LENGTH_Extended << CCM_MODE_LENGTH_Pos) &
	       CCM_MODE_LENGTH_Msk) |
#endif
	    ((CCM_MODE_MODE_Decryption << CCM_MODE_MODE_Pos) &
	     CCM_MODE_MODE_Msk);
	NRF_CCM->CNFPTR = (u32_t)ccm;
    b04a:	5198      	str	r0, [r3, r6]
	NRF_CCM->INPTR = (u32_t)_pkt_scratch;
    b04c:	480f      	ldr	r0, [pc, #60]	; (b08c <radio_ccm_rx_pkt_set+0x5c>)
    b04e:	4e10      	ldr	r6, [pc, #64]	; (b090 <radio_ccm_rx_pkt_set+0x60>)
    b050:	5198      	str	r0, [r3, r6]
	NRF_CCM->OUTPTR = (u32_t)pkt;
    b052:	3604      	adds	r6, #4
    b054:	5199      	str	r1, [r3, r6]
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
    b056:	4e0f      	ldr	r6, [pc, #60]	; (b094 <radio_ccm_rx_pkt_set+0x64>)
    b058:	490f      	ldr	r1, [pc, #60]	; (b098 <radio_ccm_rx_pkt_set+0x68>)
    b05a:	505e      	str	r6, [r3, r1]
	NRF_CCM->SHORTS = 0;
    b05c:	2180      	movs	r1, #128	; 0x80
    b05e:	0089      	lsls	r1, r1, #2
    b060:	505a      	str	r2, [r3, r1]
	NRF_CCM->EVENTS_ENDKSGEN = 0;
    b062:	0019      	movs	r1, r3
    b064:	31fc      	adds	r1, #252	; 0xfc
    b066:	604a      	str	r2, [r1, #4]
	NRF_CCM->EVENTS_ENDCRYPT = 0;
    b068:	608a      	str	r2, [r1, #8]
	NRF_CCM->EVENTS_ERROR = 0;
    b06a:	60ca      	str	r2, [r1, #12]

	NRF_PPI->CH[6].EEP = (u32_t)&(NRF_RADIO->EVENTS_ADDRESS);
    b06c:	21a8      	movs	r1, #168	; 0xa8
    b06e:	4a0b      	ldr	r2, [pc, #44]	; (b09c <radio_ccm_rx_pkt_set+0x6c>)
    b070:	4e0b      	ldr	r6, [pc, #44]	; (b0a0 <radio_ccm_rx_pkt_set+0x70>)
    b072:	00c9      	lsls	r1, r1, #3
    b074:	5056      	str	r6, [r2, r1]
	NRF_PPI->CH[6].TEP = (u32_t)&(NRF_CCM->TASKS_CRYPT);
    b076:	4e0b      	ldr	r6, [pc, #44]	; (b0a4 <radio_ccm_rx_pkt_set+0x74>)
    b078:	490b      	ldr	r1, [pc, #44]	; (b0a8 <radio_ccm_rx_pkt_set+0x78>)
    b07a:	5056      	str	r6, [r2, r1]
	NRF_PPI->CHENSET = PPI_CHEN_CH6_Msk;
    b07c:	2140      	movs	r1, #64	; 0x40
    b07e:	5151      	str	r1, [r2, r5]

	NRF_CCM->TASKS_KSGEN = 1;
    b080:	601c      	str	r4, [r3, #0]

	return _pkt_scratch;
}
    b082:	bd70      	pop	{r4, r5, r6, pc}
    b084:	4000f000 	.word	0x4000f000
    b088:	00000504 	.word	0x00000504
    b08c:	2000146c 	.word	0x2000146c
    b090:	0000050c 	.word	0x0000050c
    b094:	20001498 	.word	0x20001498
    b098:	00000514 	.word	0x00000514
    b09c:	4001f000 	.word	0x4001f000
    b0a0:	40001104 	.word	0x40001104
    b0a4:	4000f004 	.word	0x4000f004
    b0a8:	00000544 	.word	0x00000544

0000b0ac <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
    b0ac:	b530      	push	{r4, r5, lr}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    b0ae:	24a0      	movs	r4, #160	; 0xa0
    b0b0:	2200      	movs	r2, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    b0b2:	2502      	movs	r5, #2
	return _pkt_scratch;
}

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    b0b4:	4b0d      	ldr	r3, [pc, #52]	; (b0ec <radio_ccm_tx_pkt_set+0x40>)
    b0b6:	00e4      	lsls	r4, r4, #3
    b0b8:	511a      	str	r2, [r3, r4]
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    b0ba:	511d      	str	r5, [r3, r4]
	NRF_CCM->MODE =
    b0bc:	4c0c      	ldr	r4, [pc, #48]	; (b0f0 <radio_ccm_tx_pkt_set+0x44>)
    b0be:	511a      	str	r2, [r3, r4]
	    ((CCM_MODE_LENGTH_Extended << CCM_MODE_LENGTH_Pos) &
	       CCM_MODE_LENGTH_Msk) |
#endif
	    ((CCM_MODE_MODE_Encryption << CCM_MODE_MODE_Pos) &
	     CCM_MODE_MODE_Msk);
	NRF_CCM->CNFPTR = (u32_t)ccm;
    b0c0:	3404      	adds	r4, #4
    b0c2:	5118      	str	r0, [r3, r4]
	NRF_CCM->INPTR = (u32_t)pkt;
    b0c4:	480b      	ldr	r0, [pc, #44]	; (b0f4 <radio_ccm_tx_pkt_set+0x48>)
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
    b0c6:	4c0c      	ldr	r4, [pc, #48]	; (b0f8 <radio_ccm_tx_pkt_set+0x4c>)
	       CCM_MODE_LENGTH_Msk) |
#endif
	    ((CCM_MODE_MODE_Encryption << CCM_MODE_MODE_Pos) &
	     CCM_MODE_MODE_Msk);
	NRF_CCM->CNFPTR = (u32_t)ccm;
	NRF_CCM->INPTR = (u32_t)pkt;
    b0c8:	5019      	str	r1, [r3, r0]
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
    b0ca:	21a2      	movs	r1, #162	; 0xa2
    b0cc:	480b      	ldr	r0, [pc, #44]	; (b0fc <radio_ccm_tx_pkt_set+0x50>)
    b0ce:	00c9      	lsls	r1, r1, #3
    b0d0:	5058      	str	r0, [r3, r1]
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
    b0d2:	490b      	ldr	r1, [pc, #44]	; (b100 <radio_ccm_tx_pkt_set+0x54>)
    b0d4:	505c      	str	r4, [r3, r1]
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
    b0d6:	2180      	movs	r1, #128	; 0x80
    b0d8:	2401      	movs	r4, #1
    b0da:	0089      	lsls	r1, r1, #2
    b0dc:	505c      	str	r4, [r3, r1]
	NRF_CCM->EVENTS_ENDKSGEN = 0;
    b0de:	0019      	movs	r1, r3
    b0e0:	31fc      	adds	r1, #252	; 0xfc
    b0e2:	604a      	str	r2, [r1, #4]
	NRF_CCM->EVENTS_ENDCRYPT = 0;
    b0e4:	608a      	str	r2, [r1, #8]
	NRF_CCM->EVENTS_ERROR = 0;
    b0e6:	60ca      	str	r2, [r1, #12]

	NRF_CCM->TASKS_KSGEN = 1;
    b0e8:	601c      	str	r4, [r3, #0]

	return _pkt_scratch;
}
    b0ea:	bd30      	pop	{r4, r5, pc}
    b0ec:	4000f000 	.word	0x4000f000
    b0f0:	00000504 	.word	0x00000504
    b0f4:	0000050c 	.word	0x0000050c
    b0f8:	20001498 	.word	0x20001498
    b0fc:	2000146c 	.word	0x2000146c
    b100:	00000514 	.word	0x00000514

0000b104 <radio_ccm_is_done>:

u32_t radio_ccm_is_done(void)
{
	NRF_CCM->INTENSET = CCM_INTENSET_ENDCRYPT_Msk;
    b104:	23c1      	movs	r3, #193	; 0xc1
    b106:	2102      	movs	r1, #2
    b108:	4a0d      	ldr	r2, [pc, #52]	; (b140 <radio_ccm_is_done+0x3c>)
    b10a:	009b      	lsls	r3, r3, #2
    b10c:	50d1      	str	r1, [r2, r3]
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
    b10e:	4a0d      	ldr	r2, [pc, #52]	; (b144 <radio_ccm_is_done+0x40>)
    b110:	6893      	ldr	r3, [r2, #8]
    b112:	2b00      	cmp	r3, #0
    b114:	d103      	bne.n	b11e <radio_ccm_is_done+0x1a>
    b116:	bf20      	wfe
  \brief   Send Event
  \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 */
__attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
{
  __ASM volatile ("sev");
    b118:	bf40      	sev
  \details Wait For Event is a hint instruction that permits the processor to enter
    a low-power state until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
{
  __ASM volatile ("wfe");
    b11a:	bf20      	wfe
    b11c:	e7f8      	b.n	b110 <radio_ccm_is_done+0xc>
		__WFE();
		__SEV();
		__WFE();
	}
	NRF_CCM->INTENCLR = CCM_INTENCLR_ENDCRYPT_Msk;
    b11e:	23c2      	movs	r3, #194	; 0xc2
    b120:	2102      	movs	r1, #2
    b122:	4a07      	ldr	r2, [pc, #28]	; (b140 <radio_ccm_is_done+0x3c>)
    b124:	009b      	lsls	r3, r3, #2
    b126:	50d1      	str	r1, [r2, r3]
    b128:	2180      	movs	r1, #128	; 0x80
    b12a:	4a07      	ldr	r2, [pc, #28]	; (b148 <radio_ccm_is_done+0x44>)
    b12c:	3b89      	subs	r3, #137	; 0x89
    b12e:	0209      	lsls	r1, r1, #8
    b130:	3bff      	subs	r3, #255	; 0xff
    b132:	50d1      	str	r1, [r2, r3]
	NVIC_ClearPendingIRQ(CCM_AAR_IRQn);

	return (NRF_CCM->EVENTS_ERROR == 0);
    b134:	4b03      	ldr	r3, [pc, #12]	; (b144 <radio_ccm_is_done+0x40>)
    b136:	68d8      	ldr	r0, [r3, #12]
    b138:	4243      	negs	r3, r0
    b13a:	4158      	adcs	r0, r3
}
    b13c:	4770      	bx	lr
    b13e:	46c0      	nop			; (mov r8, r8)
    b140:	4000f000 	.word	0x4000f000
    b144:	4000f0fc 	.word	0x4000f0fc
    b148:	e000e100 	.word	0xe000e100

0000b14c <radio_ccm_mic_is_valid>:

u32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
    b14c:	2380      	movs	r3, #128	; 0x80
    b14e:	4a03      	ldr	r2, [pc, #12]	; (b15c <radio_ccm_mic_is_valid+0x10>)
    b150:	00db      	lsls	r3, r3, #3
    b152:	58d0      	ldr	r0, [r2, r3]
    b154:	1e43      	subs	r3, r0, #1
    b156:	4198      	sbcs	r0, r3
}
    b158:	4770      	bx	lr
    b15a:	46c0      	nop			; (mov r8, r8)
    b15c:	4000f000 	.word	0x4000f000

0000b160 <radio_ar_configure>:

static u8_t MALIGN(4) _aar_scratch[3];

void radio_ar_configure(u32_t nirk, void *irk)
{
	NRF_AAR->ENABLE = 1;
    b160:	23a0      	movs	r3, #160	; 0xa0
    b162:	2201      	movs	r2, #1
}

static u8_t MALIGN(4) _aar_scratch[3];

void radio_ar_configure(u32_t nirk, void *irk)
{
    b164:	b570      	push	{r4, r5, r6, lr}
	NRF_AAR->ENABLE = 1;
    b166:	4c0e      	ldr	r4, [pc, #56]	; (b1a0 <radio_ar_configure+0x40>)
	NRF_AAR->NIRK = nirk;
    b168:	4d0e      	ldr	r5, [pc, #56]	; (b1a4 <radio_ar_configure+0x44>)

static u8_t MALIGN(4) _aar_scratch[3];

void radio_ar_configure(u32_t nirk, void *irk)
{
	NRF_AAR->ENABLE = 1;
    b16a:	00db      	lsls	r3, r3, #3
    b16c:	50e2      	str	r2, [r4, r3]
	NRF_AAR->NIRK = nirk;
	NRF_AAR->IRKPTR = (u32_t)irk;
    b16e:	3308      	adds	r3, #8
static u8_t MALIGN(4) _aar_scratch[3];

void radio_ar_configure(u32_t nirk, void *irk)
{
	NRF_AAR->ENABLE = 1;
	NRF_AAR->NIRK = nirk;
    b170:	5160      	str	r0, [r4, r5]
	NRF_AAR->IRKPTR = (u32_t)irk;
    b172:	50e1      	str	r1, [r4, r3]
	NRF_AAR->ADDRPTR = (u32_t)NRF_RADIO->PACKETPTR;
    b174:	4b0c      	ldr	r3, [pc, #48]	; (b1a8 <radio_ar_configure+0x48>)
	NRF_AAR->SCRATCHPTR = (u32_t)_aar_scratch[0];

	radio_bc_configure(64);
    b176:	2040      	movs	r0, #64	; 0x40
void radio_ar_configure(u32_t nirk, void *irk)
{
	NRF_AAR->ENABLE = 1;
	NRF_AAR->NIRK = nirk;
	NRF_AAR->IRKPTR = (u32_t)irk;
	NRF_AAR->ADDRPTR = (u32_t)NRF_RADIO->PACKETPTR;
    b178:	595a      	ldr	r2, [r3, r5]
    b17a:	23a2      	movs	r3, #162	; 0xa2
    b17c:	00db      	lsls	r3, r3, #3
    b17e:	50e2      	str	r2, [r4, r3]
	NRF_AAR->SCRATCHPTR = (u32_t)_aar_scratch[0];
    b180:	2200      	movs	r2, #0
    b182:	4b0a      	ldr	r3, [pc, #40]	; (b1ac <radio_ar_configure+0x4c>)
    b184:	50e2      	str	r2, [r4, r3]

	radio_bc_configure(64);
    b186:	f7ff fe4b 	bl	ae20 <radio_bc_configure>

	NRF_PPI->CH[6].EEP = (u32_t)&(NRF_RADIO->EVENTS_BCMATCH);
    b18a:	22a8      	movs	r2, #168	; 0xa8
    b18c:	4b08      	ldr	r3, [pc, #32]	; (b1b0 <radio_ar_configure+0x50>)
    b18e:	4909      	ldr	r1, [pc, #36]	; (b1b4 <radio_ar_configure+0x54>)
    b190:	00d2      	lsls	r2, r2, #3
    b192:	5099      	str	r1, [r3, r2]
	NRF_PPI->CH[6].TEP = (u32_t)&(NRF_AAR->TASKS_START);
    b194:	4a08      	ldr	r2, [pc, #32]	; (b1b8 <radio_ar_configure+0x58>)
    b196:	509c      	str	r4, [r3, r2]
	NRF_PPI->CHENSET = PPI_CHEN_CH6_Msk;
    b198:	2240      	movs	r2, #64	; 0x40
    b19a:	515a      	str	r2, [r3, r5]
}
    b19c:	bd70      	pop	{r4, r5, r6, pc}
    b19e:	46c0      	nop			; (mov r8, r8)
    b1a0:	4000f000 	.word	0x4000f000
    b1a4:	00000504 	.word	0x00000504
    b1a8:	40001000 	.word	0x40001000
    b1ac:	00000514 	.word	0x00000514
    b1b0:	4001f000 	.word	0x4001f000
    b1b4:	40001128 	.word	0x40001128
    b1b8:	00000544 	.word	0x00000544

0000b1bc <radio_ar_match_get>:

u32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
    b1bc:	2380      	movs	r3, #128	; 0x80
    b1be:	4a02      	ldr	r2, [pc, #8]	; (b1c8 <radio_ar_match_get+0xc>)
    b1c0:	00db      	lsls	r3, r3, #3
    b1c2:	58d0      	ldr	r0, [r2, r3]
}
    b1c4:	4770      	bx	lr
    b1c6:	46c0      	nop			; (mov r8, r8)
    b1c8:	4000f000 	.word	0x4000f000

0000b1cc <radio_ar_status_reset>:
	NRF_RADIO->EVENTS_BCMATCH = 0;
}

u32_t radio_bc_has_match(void)
{
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
    b1cc:	4b05      	ldr	r3, [pc, #20]	; (b1e4 <radio_ar_status_reset+0x18>)
    b1ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	return NRF_AAR->STATUS;
}

void radio_ar_status_reset(void)
{
	if (radio_bc_has_match()) {
    b1d0:	2a00      	cmp	r2, #0
    b1d2:	d004      	beq.n	b1de <radio_ar_status_reset+0x12>
		NRF_AAR->EVENTS_END = 0;
    b1d4:	2100      	movs	r1, #0
    b1d6:	4a04      	ldr	r2, [pc, #16]	; (b1e8 <radio_ar_status_reset+0x1c>)
    b1d8:	6051      	str	r1, [r2, #4]
		NRF_AAR->EVENTS_RESOLVED = 0;
    b1da:	6091      	str	r1, [r2, #8]
		NRF_AAR->EVENTS_NOTRESOLVED = 0;
    b1dc:	60d1      	str	r1, [r2, #12]
	NRF_RADIO->SHORTS |= RADIO_SHORTS_ADDRESS_BCSTART_Msk;
}

void radio_bc_status_reset(void)
{
	NRF_RADIO->EVENTS_BCMATCH = 0;
    b1de:	2200      	movs	r2, #0
    b1e0:	62da      	str	r2, [r3, #44]	; 0x2c
		NRF_AAR->EVENTS_RESOLVED = 0;
		NRF_AAR->EVENTS_NOTRESOLVED = 0;
	}

	radio_bc_status_reset();
}
    b1e2:	4770      	bx	lr
    b1e4:	400010fc 	.word	0x400010fc
    b1e8:	4000f0fc 	.word	0x4000f0fc

0000b1ec <radio_ar_has_match>:

u32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
			(NRF_AAR->EVENTS_END) &&
    b1ec:	2000      	movs	r0, #0
	NRF_RADIO->EVENTS_BCMATCH = 0;
}

u32_t radio_bc_has_match(void)
{
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
    b1ee:	4b06      	ldr	r3, [pc, #24]	; (b208 <radio_ar_has_match+0x1c>)
    b1f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}

u32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
			(NRF_AAR->EVENTS_END) &&
    b1f2:	4283      	cmp	r3, r0
    b1f4:	d006      	beq.n	b204 <radio_ar_has_match+0x18>
    b1f6:	4b05      	ldr	r3, [pc, #20]	; (b20c <radio_ar_has_match+0x20>)
    b1f8:	685a      	ldr	r2, [r3, #4]
	radio_bc_status_reset();
}

u32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
    b1fa:	4282      	cmp	r2, r0
    b1fc:	d002      	beq.n	b204 <radio_ar_has_match+0x18>
			(NRF_AAR->EVENTS_END) &&
			(NRF_AAR->EVENTS_RESOLVED));
    b1fe:	6898      	ldr	r0, [r3, #8]
}

u32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
			(NRF_AAR->EVENTS_END) &&
    b200:	1e43      	subs	r3, r0, #1
    b202:	4198      	sbcs	r0, r3
			(NRF_AAR->EVENTS_RESOLVED));
}
    b204:	4770      	bx	lr
    b206:	46c0      	nop			; (mov r8, r8)
    b208:	400010fc 	.word	0x400010fc
    b20c:	4000f0fc 	.word	0x4000f0fc

0000b210 <rand_init>:
};

static struct rand *rng;

void rand_init(u8_t *context, u8_t context_len)
{
    b210:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT(context_len > sizeof(struct rand));
    b212:	2904      	cmp	r1, #4
    b214:	d80c      	bhi.n	b230 <rand_init+0x20>
    b216:	4b0f      	ldr	r3, [pc, #60]	; (b254 <rand_init+0x44>)
    b218:	4a0f      	ldr	r2, [pc, #60]	; (b258 <rand_init+0x48>)
    b21a:	9301      	str	r3, [sp, #4]
    b21c:	4b0f      	ldr	r3, [pc, #60]	; (b25c <rand_init+0x4c>)
    b21e:	4910      	ldr	r1, [pc, #64]	; (b260 <rand_init+0x50>)
    b220:	9300      	str	r3, [sp, #0]
    b222:	4810      	ldr	r0, [pc, #64]	; (b264 <rand_init+0x54>)
    b224:	4b10      	ldr	r3, [pc, #64]	; (b268 <rand_init+0x58>)
    b226:	f7f6 fbab 	bl	1980 <printk>
    b22a:	b662      	cpsie	i
    b22c:	2004      	movs	r0, #4
    b22e:	df02      	svc	2

	rng = (struct rand *)context;
	rng->count = context_len - sizeof(struct rand) + 1;
    b230:	3903      	subs	r1, #3
    b232:	7001      	strb	r1, [r0, #0]
	rng->first = rng->last = 0;
    b234:	2100      	movs	r1, #0

	NRF_RNG->CONFIG = RNG_CONFIG_DERCEN_Msk;
    b236:	2201      	movs	r2, #1

void rand_init(u8_t *context, u8_t context_len)
{
	LL_ASSERT(context_len > sizeof(struct rand));

	rng = (struct rand *)context;
    b238:	4b0c      	ldr	r3, [pc, #48]	; (b26c <rand_init+0x5c>)
	rng->count = context_len - sizeof(struct rand) + 1;
	rng->first = rng->last = 0;
    b23a:	7081      	strb	r1, [r0, #2]

void rand_init(u8_t *context, u8_t context_len)
{
	LL_ASSERT(context_len > sizeof(struct rand));

	rng = (struct rand *)context;
    b23c:	6018      	str	r0, [r3, #0]
	rng->count = context_len - sizeof(struct rand) + 1;
	rng->first = rng->last = 0;
    b23e:	7041      	strb	r1, [r0, #1]

	NRF_RNG->CONFIG = RNG_CONFIG_DERCEN_Msk;
    b240:	4b0b      	ldr	r3, [pc, #44]	; (b270 <rand_init+0x60>)
    b242:	480c      	ldr	r0, [pc, #48]	; (b274 <rand_init+0x64>)
    b244:	501a      	str	r2, [r3, r0]
	NRF_RNG->EVENTS_VALRDY = 0;
    b246:	480c      	ldr	r0, [pc, #48]	; (b278 <rand_init+0x68>)
    b248:	6041      	str	r1, [r0, #4]
	NRF_RNG->INTENSET = RNG_INTENSET_VALRDY_Msk;
    b24a:	21c1      	movs	r1, #193	; 0xc1
    b24c:	0089      	lsls	r1, r1, #2
    b24e:	505a      	str	r2, [r3, r1]

	NRF_RNG->TASKS_START = 1;
    b250:	601a      	str	r2, [r3, #0]
}
    b252:	bd07      	pop	{r0, r1, r2, pc}
    b254:	000154c4 	.word	0x000154c4
    b258:	00015484 	.word	0x00015484
    b25c:	000154c9 	.word	0x000154c9
    b260:	0001548b 	.word	0x0001548b
    b264:	00016a86 	.word	0x00016a86
    b268:	00018052 	.word	0x00018052
    b26c:	200014c8 	.word	0x200014c8
    b270:	4000d000 	.word	0x4000d000
    b274:	00000504 	.word	0x00000504
    b278:	4000d0fc 	.word	0x4000d0fc

0000b27c <rand_get>:

size_t rand_get(size_t octets, u8_t *rand)
{
    b27c:	b510      	push	{r4, lr}
	u8_t reserved;
	u8_t first;

	while (octets) {
		if (rng->first == rng->last) {
    b27e:	4b14      	ldr	r3, [pc, #80]	; (b2d0 <rand_get+0x54>)
    b280:	681a      	ldr	r2, [r3, #0]
    b282:	7853      	ldrb	r3, [r2, #1]
size_t rand_get(size_t octets, u8_t *rand)
{
	u8_t reserved;
	u8_t first;

	while (octets) {
    b284:	2800      	cmp	r0, #0
    b286:	d00f      	beq.n	b2a8 <rand_get+0x2c>
		if (rng->first == rng->last) {
    b288:	7894      	ldrb	r4, [r2, #2]
    b28a:	429c      	cmp	r4, r3
    b28c:	d00c      	beq.n	b2a8 <rand_get+0x2c>
			break;
		}

		rand[--octets] = rng->rand[rng->first];
    b28e:	18d3      	adds	r3, r2, r3
    b290:	78db      	ldrb	r3, [r3, #3]
    b292:	3801      	subs	r0, #1
    b294:	540b      	strb	r3, [r1, r0]

		first = rng->first + 1;
    b296:	7853      	ldrb	r3, [r2, #1]
		if (first == rng->count) {
    b298:	7814      	ldrb	r4, [r2, #0]
			break;
		}

		rand[--octets] = rng->rand[rng->first];

		first = rng->first + 1;
    b29a:	3301      	adds	r3, #1
    b29c:	b2db      	uxtb	r3, r3
		if (first == rng->count) {
    b29e:	429c      	cmp	r4, r3
    b2a0:	d100      	bne.n	b2a4 <rand_get+0x28>
			first = 0;
    b2a2:	2300      	movs	r3, #0
		}
		rng->first = first;
    b2a4:	7053      	strb	r3, [r2, #1]
    b2a6:	e7ec      	b.n	b282 <rand_get+0x6>
	}

	reserved = RAND_RESERVED;
	first = rng->first;
	while (reserved--) {
    b2a8:	2105      	movs	r1, #5
    b2aa:	3901      	subs	r1, #1
    b2ac:	b2c9      	uxtb	r1, r1
    b2ae:	2900      	cmp	r1, #0
    b2b0:	d00d      	beq.n	b2ce <rand_get+0x52>
		if (first == rng->last) {
    b2b2:	7894      	ldrb	r4, [r2, #2]
    b2b4:	429c      	cmp	r4, r3
    b2b6:	d103      	bne.n	b2c0 <rand_get+0x44>
			NRF_RNG->TASKS_START = 1;
    b2b8:	2201      	movs	r2, #1
    b2ba:	4b06      	ldr	r3, [pc, #24]	; (b2d4 <rand_get+0x58>)
    b2bc:	601a      	str	r2, [r3, #0]

			break;
    b2be:	e006      	b.n	b2ce <rand_get+0x52>
		}

		first++;
    b2c0:	3301      	adds	r3, #1
		if (first == rng->count) {
    b2c2:	7814      	ldrb	r4, [r2, #0]
			NRF_RNG->TASKS_START = 1;

			break;
		}

		first++;
    b2c4:	b2db      	uxtb	r3, r3
		if (first == rng->count) {
    b2c6:	429c      	cmp	r4, r3
    b2c8:	d1ef      	bne.n	b2aa <rand_get+0x2e>
			first = 0;
    b2ca:	2300      	movs	r3, #0
    b2cc:	e7ed      	b.n	b2aa <rand_get+0x2e>
		}
	}

	return octets;
}
    b2ce:	bd10      	pop	{r4, pc}
    b2d0:	200014c8 	.word	0x200014c8
    b2d4:	4000d000 	.word	0x4000d000

0000b2d8 <isr_rand>:

void isr_rand(void *param)
{
	ARG_UNUSED(param);

	if (NRF_RNG->EVENTS_VALRDY) {
    b2d8:	4915      	ldr	r1, [pc, #84]	; (b330 <isr_rand+0x58>)

	return octets;
}

void isr_rand(void *param)
{
    b2da:	b570      	push	{r4, r5, r6, lr}
	ARG_UNUSED(param);

	if (NRF_RNG->EVENTS_VALRDY) {
    b2dc:	684b      	ldr	r3, [r1, #4]
    b2de:	2b00      	cmp	r3, #0
    b2e0:	d024      	beq.n	b32c <isr_rand+0x54>
		u8_t last;

		last = rng->last + 1;
    b2e2:	4b14      	ldr	r3, [pc, #80]	; (b334 <isr_rand+0x5c>)
    b2e4:	681a      	ldr	r2, [r3, #0]
    b2e6:	7890      	ldrb	r0, [r2, #2]
		if (last == rng->count) {
    b2e8:	7814      	ldrb	r4, [r2, #0]
	ARG_UNUSED(param);

	if (NRF_RNG->EVENTS_VALRDY) {
		u8_t last;

		last = rng->last + 1;
    b2ea:	1c43      	adds	r3, r0, #1
    b2ec:	b2db      	uxtb	r3, r3
		if (last == rng->count) {
    b2ee:	42a3      	cmp	r3, r4
    b2f0:	d100      	bne.n	b2f4 <isr_rand+0x1c>
			last = 0;
    b2f2:	2300      	movs	r3, #0
		}

		if (last == rng->first) {
    b2f4:	7856      	ldrb	r6, [r2, #1]
    b2f6:	4d10      	ldr	r5, [pc, #64]	; (b338 <isr_rand+0x60>)
    b2f8:	429e      	cmp	r6, r3
    b2fa:	d104      	bne.n	b306 <isr_rand+0x2e>
			/* this condition should not happen
			 * , but due to probable bug in HW
			 * , new value could be generated
			 * before task is stopped.
			 */
			NRF_RNG->TASKS_STOP = 1;
    b2fc:	2301      	movs	r3, #1
    b2fe:	606b      	str	r3, [r5, #4]
			NRF_RNG->EVENTS_VALRDY = 0;
    b300:	2300      	movs	r3, #0
    b302:	604b      	str	r3, [r1, #4]

			return;
    b304:	e012      	b.n	b32c <isr_rand+0x54>
		}

		rng->rand[rng->last] = NRF_RNG->VALUE;
    b306:	26a1      	movs	r6, #161	; 0xa1
    b308:	00f6      	lsls	r6, r6, #3
    b30a:	59ad      	ldr	r5, [r5, r6]
    b30c:	1810      	adds	r0, r2, r0
    b30e:	70c5      	strb	r5, [r0, #3]
		rng->last = last;
    b310:	7093      	strb	r3, [r2, #2]

		last = rng->last + 1;
    b312:	3301      	adds	r3, #1
    b314:	b2db      	uxtb	r3, r3
    b316:	2000      	movs	r0, #0
		if (last == rng->count) {
    b318:	429c      	cmp	r4, r3
    b31a:	d100      	bne.n	b31e <isr_rand+0x46>
			last = 0;
    b31c:	0003      	movs	r3, r0
		}

		NRF_RNG->EVENTS_VALRDY = 0;
    b31e:	6048      	str	r0, [r1, #4]

		if (last == rng->first) {
    b320:	7852      	ldrb	r2, [r2, #1]
    b322:	429a      	cmp	r2, r3
    b324:	d102      	bne.n	b32c <isr_rand+0x54>
			NRF_RNG->TASKS_STOP = 1;
    b326:	2201      	movs	r2, #1
    b328:	4b03      	ldr	r3, [pc, #12]	; (b338 <isr_rand+0x60>)
    b32a:	605a      	str	r2, [r3, #4]
		}
	}
}
    b32c:	bd70      	pop	{r4, r5, r6, pc}
    b32e:	46c0      	nop			; (mov r8, r8)
    b330:	4000d0fc 	.word	0x4000d0fc
    b334:	200014c8 	.word	0x200014c8
    b338:	4000d000 	.word	0x4000d000

0000b33c <ticker_dequeue>:
	current = previous;
	total = 0;
	ticker_current = 0;
	while (current != TICKER_NULL) {

		ticker_current = &node[current];
    b33c:	2324      	movs	r3, #36	; 0x24

	return id;
}

static u32_t ticker_dequeue(struct ticker_instance *instance, u8_t id)
{
    b33e:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t current;
	u32_t total;

	/* find the ticker's position in ticker list */
	node = &instance->node[0];
	previous = instance->ticker_id_head;
    b340:	7e04      	ldrb	r4, [r0, #24]
	current = previous;
	total = 0;
    b342:	2500      	movs	r5, #0
	u32_t total;

	/* find the ticker's position in ticker list */
	node = &instance->node[0];
	previous = instance->ticker_id_head;
	current = previous;
    b344:	0022      	movs	r2, r4
	total = 0;
	ticker_current = 0;
	while (current != TICKER_NULL) {

		ticker_current = &node[current];
    b346:	469c      	mov	ip, r3
	u32_t timeout;
	u8_t current;
	u32_t total;

	/* find the ticker's position in ticker list */
	node = &instance->node[0];
    b348:	6806      	ldr	r6, [r0, #0]
	previous = instance->ticker_id_head;
	current = previous;
	total = 0;
	ticker_current = 0;
	while (current != TICKER_NULL) {
    b34a:	2aff      	cmp	r2, #255	; 0xff
    b34c:	d00a      	beq.n	b364 <ticker_dequeue+0x28>

		ticker_current = &node[current];
    b34e:	4663      	mov	r3, ip
    b350:	4353      	muls	r3, r2
    b352:	18f3      	adds	r3, r6, r3
    b354:	781f      	ldrb	r7, [r3, #0]

		if (current == id) {
    b356:	428a      	cmp	r2, r1
    b358:	d006      	beq.n	b368 <ticker_dequeue+0x2c>
			break;
		}

		total += ticker_current->ticks_to_expire;
    b35a:	689b      	ldr	r3, [r3, #8]
		previous = current;
		current = ticker_current->next;
    b35c:	0014      	movs	r4, r2

		if (current == id) {
			break;
		}

		total += ticker_current->ticks_to_expire;
    b35e:	18ed      	adds	r5, r5, r3
		previous = current;
		current = ticker_current->next;
    b360:	003a      	movs	r2, r7
    b362:	e7f2      	b.n	b34a <ticker_dequeue+0xe>
	}

	/* ticker not in active list */
	if (current == TICKER_NULL) {
		return 0;
    b364:	2000      	movs	r0, #0
    b366:	e010      	b.n	b38a <ticker_dequeue+0x4e>
	}

	/* ticker is the first in the list */
	if (previous == current) {
    b368:	4294      	cmp	r4, r2
    b36a:	d100      	bne.n	b36e <ticker_dequeue+0x32>
		instance->ticker_id_head = ticker_current->next;
    b36c:	7607      	strb	r7, [r0, #24]
	timeout = ticker_current->ticks_to_expire;

	/* link previous ticker with next of this ticker
	 * i.e. removing the ticker from list
	 */
	node[previous].next = ticker_current->next;
    b36e:	2224      	movs	r2, #36	; 0x24
    b370:	4354      	muls	r4, r2
    b372:	7818      	ldrb	r0, [r3, #0]
	if (previous == current) {
		instance->ticker_id_head = ticker_current->next;
	}

	/* remaining timeout between next timeout */
	timeout = ticker_current->ticks_to_expire;
    b374:	6899      	ldr	r1, [r3, #8]

	/* link previous ticker with next of this ticker
	 * i.e. removing the ticker from list
	 */
	node[previous].next = ticker_current->next;
    b376:	55a0      	strb	r0, [r4, r6]

	/* if this is not the last ticker, increment the
	 * next ticker by this ticker timeout
	 */
	if (ticker_current->next != TICKER_NULL) {
    b378:	781b      	ldrb	r3, [r3, #0]
    b37a:	2bff      	cmp	r3, #255	; 0xff
    b37c:	d004      	beq.n	b388 <ticker_dequeue+0x4c>
		node[ticker_current->next].ticks_to_expire += timeout;
    b37e:	435a      	muls	r2, r3
    b380:	18b3      	adds	r3, r6, r2
    b382:	689a      	ldr	r2, [r3, #8]
    b384:	1852      	adds	r2, r2, r1
    b386:	609a      	str	r2, [r3, #8]
	}

	return (total + timeout);
    b388:	1868      	adds	r0, r5, r1
}
    b38a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000b38c <ticks_to_expire_prep>:
	instance->fp_sched(CALL_ID_WORKER, CALL_ID_JOB, 1);
}

static void ticks_to_expire_prep(struct ticker_node *ticker,
				 u32_t ticks_current, u32_t ticks_at_start)
{
    b38c:	b530      	push	{r4, r5, lr}
	u32_t ticks_to_expire = ticker->ticks_to_expire;
    b38e:	6883      	ldr	r3, [r0, #8]
	u16_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
    b390:	8a84      	ldrh	r4, [r0, #20]

	/* Calculate ticks to expire for this new node */
	if (((ticks_at_start - ticks_current) & BIT(31)) == 0) {
    b392:	1a55      	subs	r5, r2, r1
    b394:	d403      	bmi.n	b39e <ticks_to_expire_prep+0x12>
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
    b396:	022a      	lsls	r2, r5, #8
    b398:	0a12      	lsrs	r2, r2, #8
    b39a:	18d2      	adds	r2, r2, r3
    b39c:	e00a      	b.n	b3b4 <ticks_to_expire_prep+0x28>
	return cntr_cnt_get();
}

u32_t ticker_ticks_diff_get(u32_t ticks_now, u32_t ticks_old)
{
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    b39e:	1a89      	subs	r1, r1, r2
    b3a0:	0209      	lsls	r1, r1, #8
    b3a2:	0a09      	lsrs	r1, r1, #8
		u32_t delta_current_start;

		delta_current_start = ticker_ticks_diff_get(ticks_current,
							    ticks_at_start);
		if (ticks_to_expire > delta_current_start) {
			ticks_to_expire -= delta_current_start;
    b3a4:	1a5a      	subs	r2, r3, r1
	} else {
		u32_t delta_current_start;

		delta_current_start = ticker_ticks_diff_get(ticks_current,
							    ticks_at_start);
		if (ticks_to_expire > delta_current_start) {
    b3a6:	428b      	cmp	r3, r1
    b3a8:	d804      	bhi.n	b3b4 <ticks_to_expire_prep+0x28>
    b3aa:	1ae3      	subs	r3, r4, r3
			ticks_to_expire -= delta_current_start;
		} else {
			ticks_to_expire_minus +=
    b3ac:	185b      	adds	r3, r3, r1
    b3ae:	b29c      	uxth	r4, r3
			    (delta_current_start - ticks_to_expire);
			ticks_to_expire = 0;
    b3b0:	2200      	movs	r2, #0
    b3b2:	e004      	b.n	b3be <ticks_to_expire_prep+0x32>
		}
	}

	/* Handle any drifts requested */
	if (ticks_to_expire > ticks_to_expire_minus) {
    b3b4:	42a2      	cmp	r2, r4
    b3b6:	d902      	bls.n	b3be <ticks_to_expire_prep+0x32>
		ticks_to_expire -= ticks_to_expire_minus;
    b3b8:	1b12      	subs	r2, r2, r4
		ticks_to_expire_minus = 0;
    b3ba:	2300      	movs	r3, #0
    b3bc:	e002      	b.n	b3c4 <ticks_to_expire_prep+0x38>
	} else {
		ticks_to_expire_minus -= ticks_to_expire;
    b3be:	1aa3      	subs	r3, r4, r2
		ticks_to_expire = 0;
    b3c0:	2200      	movs	r2, #0
	/* Handle any drifts requested */
	if (ticks_to_expire > ticks_to_expire_minus) {
		ticks_to_expire -= ticks_to_expire_minus;
		ticks_to_expire_minus = 0;
	} else {
		ticks_to_expire_minus -= ticks_to_expire;
    b3c2:	b29b      	uxth	r3, r3
		ticks_to_expire = 0;
	}

	ticker->ticks_to_expire = ticks_to_expire;
    b3c4:	6082      	str	r2, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    b3c6:	8283      	strh	r3, [r0, #20]
}
    b3c8:	bd30      	pop	{r4, r5, pc}

0000b3ca <ticker_job_op_cb>:

	return decrement;
}

static void ticker_job_op_cb(struct ticker_user_op *user_op, u32_t status)
{
    b3ca:	0003      	movs	r3, r0
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    b3cc:	2200      	movs	r2, #0
    b3ce:	701a      	strb	r2, [r3, #0]
	user_op->status = status;
	if (user_op->fp_op_func) {
    b3d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24

	return decrement;
}

static void ticker_job_op_cb(struct ticker_user_op *user_op, u32_t status)
{
    b3d2:	b510      	push	{r4, lr}
    b3d4:	0008      	movs	r0, r1
	user_op->op = TICKER_USER_OP_TYPE_NONE;
	user_op->status = status;
    b3d6:	6219      	str	r1, [r3, #32]
	if (user_op->fp_op_func) {
    b3d8:	2a00      	cmp	r2, #0
    b3da:	d001      	beq.n	b3e0 <ticker_job_op_cb+0x16>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    b3dc:	6a99      	ldr	r1, [r3, #40]	; 0x28
    b3de:	4790      	blx	r2
	}
}
    b3e0:	bd10      	pop	{r4, pc}

0000b3e2 <ticker_instance1_cmp_set>:
{
	cntr_cmp_set(0, value);
}

static void ticker_instance1_cmp_set(u32_t value)
{
    b3e2:	b510      	push	{r4, lr}
    b3e4:	0001      	movs	r1, r0
	cntr_cmp_set(1, value);
    b3e6:	2001      	movs	r0, #1
    b3e8:	f7ff fb3a 	bl	aa60 <cntr_cmp_set>
}
    b3ec:	bd10      	pop	{r4, pc}

0000b3ee <ticker_instance0_cmp_set>:
		break;
	}
}

static void ticker_instance0_cmp_set(u32_t value)
{
    b3ee:	b510      	push	{r4, lr}
    b3f0:	0001      	movs	r1, r0
	cntr_cmp_set(0, value);
    b3f2:	2000      	movs	r0, #0
    b3f4:	f7ff fb34 	bl	aa60 <cntr_cmp_set>
}
    b3f8:	bd10      	pop	{r4, pc}
	...

0000b3fc <ticker_instance1_sched>:
		break;
	}
}

static void ticker_instance1_sched(u8_t caller_id, u8_t callee_id, u8_t chain)
{
    b3fc:	b513      	push	{r0, r1, r4, lr}
    b3fe:	000c      	movs	r4, r1
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
    b400:	2803      	cmp	r0, #3
    b402:	d821      	bhi.n	b448 <ticker_instance1_sched+0x4c>
    b404:	f7f4 feb8 	bl	178 <__gnu_thumb1_case_uqi>
    b408:	190c0802 	.word	0x190c0802
	case CALL_ID_TRIGGER:
		switch (callee_id) {
    b40c:	2901      	cmp	r1, #1
    b40e:	d11b      	bne.n	b448 <ticker_instance1_sched+0x4c>
				0, 0, link,
				&_instance[1],
				(void *)ticker_worker
			};

			mayfly_enqueue(MAYFLY_CALL_ID_0,
    b410:	4b14      	ldr	r3, [pc, #80]	; (b464 <ticker_instance1_sched+0x68>)
    b412:	2102      	movs	r1, #2
    b414:	2000      	movs	r0, #0
    b416:	e014      	b.n	b442 <ticker_instance1_sched+0x46>
				0, 0, link,
				(void *)&_instance[1],
				(void *)ticker_job
			};

			mayfly_enqueue(MAYFLY_CALL_ID_2,
    b418:	4b13      	ldr	r3, [pc, #76]	; (b468 <ticker_instance1_sched+0x6c>)
			break;
		}
		break;

	case CALL_ID_WORKER:
		switch (callee_id) {
    b41a:	2902      	cmp	r1, #2
    b41c:	d00a      	beq.n	b434 <ticker_instance1_sched+0x38>
    b41e:	e013      	b.n	b448 <ticker_instance1_sched+0x4c>
			break;
		}
		break;

	case CALL_ID_JOB:
		switch (callee_id) {
    b420:	2901      	cmp	r1, #1
    b422:	d003      	beq.n	b42c <ticker_instance1_sched+0x30>
    b424:	2902      	cmp	r1, #2
    b426:	d10f      	bne.n	b448 <ticker_instance1_sched+0x4c>
				0, 0, link,
				(void *)&_instance[1],
				(void *)ticker_job
			};

			mayfly_enqueue(MAYFLY_CALL_ID_2,
    b428:	4b10      	ldr	r3, [pc, #64]	; (b46c <ticker_instance1_sched+0x70>)
    b42a:	e003      	b.n	b434 <ticker_instance1_sched+0x38>
				0, 0, link,
				(void *)&_instance[1],
				(void *)ticker_worker
			};

			mayfly_enqueue(MAYFLY_CALL_ID_2,
    b42c:	2102      	movs	r1, #2
    b42e:	4b10      	ldr	r3, [pc, #64]	; (b470 <ticker_instance1_sched+0x74>)
    b430:	0008      	movs	r0, r1
    b432:	e006      	b.n	b442 <ticker_instance1_sched+0x46>
				0, 0, link,
				(void *)&_instance[1],
				(void *)ticker_job
			};

			mayfly_enqueue(MAYFLY_CALL_ID_2,
    b434:	0021      	movs	r1, r4
    b436:	0020      	movs	r0, r4
    b438:	e003      	b.n	b442 <ticker_instance1_sched+0x46>
			break;
		}
		break;

	case CALL_ID_USER:
		switch (callee_id) {
    b43a:	2902      	cmp	r1, #2
    b43c:	d104      	bne.n	b448 <ticker_instance1_sched+0x4c>
				(void *)&_instance[1],
				(void *)ticker_job
			};

			/* TODO: scheduler lock, if OS used */
			mayfly_enqueue(MAYFLY_CALL_ID_PROGRAM,
    b43e:	2003      	movs	r0, #3
    b440:	4b0c      	ldr	r3, [pc, #48]	; (b474 <ticker_instance1_sched+0x78>)
    b442:	f7ff f91d 	bl	a680 <mayfly_enqueue>

	default:
		LL_ASSERT(0);
		break;
	}
}
    b446:	bd13      	pop	{r0, r1, r4, pc}
			break;
		}
		break;

	default:
		LL_ASSERT(0);
    b448:	4b0b      	ldr	r3, [pc, #44]	; (b478 <ticker_instance1_sched+0x7c>)
    b44a:	4a0c      	ldr	r2, [pc, #48]	; (b47c <ticker_instance1_sched+0x80>)
    b44c:	9301      	str	r3, [sp, #4]
    b44e:	4b0c      	ldr	r3, [pc, #48]	; (b480 <ticker_instance1_sched+0x84>)
    b450:	490c      	ldr	r1, [pc, #48]	; (b484 <ticker_instance1_sched+0x88>)
    b452:	9300      	str	r3, [sp, #0]
    b454:	480c      	ldr	r0, [pc, #48]	; (b488 <ticker_instance1_sched+0x8c>)
    b456:	4b0d      	ldr	r3, [pc, #52]	; (b48c <ticker_instance1_sched+0x90>)
    b458:	f7f6 fa92 	bl	1980 <printk>
    b45c:	b662      	cpsie	i
    b45e:	2004      	movs	r0, #4
    b460:	df02      	svc	2
    b462:	46c0      	nop			; (mov r8, r8)
    b464:	20000820 	.word	0x20000820
    b468:	20000860 	.word	0x20000860
    b46c:	200007f0 	.word	0x200007f0
    b470:	200007e0 	.word	0x200007e0
    b474:	20000830 	.word	0x20000830
    b478:	000154c4 	.word	0x000154c4
    b47c:	00015484 	.word	0x00015484
    b480:	000154c9 	.word	0x000154c9
    b484:	0001548b 	.word	0x0001548b
    b488:	00015b21 	.word	0x00015b21
    b48c:	000180b1 	.word	0x000180b1

0000b490 <ticker_instance0_sched>:

	return 0;
}

static void ticker_instance0_sched(u8_t caller_id, u8_t callee_id, u8_t chain)
{
    b490:	b513      	push	{r0, r1, r4, lr}
    b492:	000c      	movs	r4, r1
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
    b494:	2803      	cmp	r0, #3
    b496:	d823      	bhi.n	b4e0 <ticker_instance0_sched+0x50>
    b498:	f7f4 fe6e 	bl	178 <__gnu_thumb1_case_uqi>
    b49c:	1a0d0702 	.word	0x1a0d0702
	case CALL_ID_TRIGGER:
		switch (callee_id) {
    b4a0:	2901      	cmp	r1, #1
    b4a2:	d11d      	bne.n	b4e0 <ticker_instance0_sched+0x50>
				0, 0, link,
				&_instance[0],
				(void *)ticker_worker
			};

			mayfly_enqueue(MAYFLY_CALL_ID_0,
    b4a4:	4b15      	ldr	r3, [pc, #84]	; (b4fc <ticker_instance0_sched+0x6c>)
    b4a6:	2100      	movs	r1, #0
    b4a8:	e010      	b.n	b4cc <ticker_instance0_sched+0x3c>
			break;
		}
		break;

	case CALL_ID_WORKER:
		switch (callee_id) {
    b4aa:	2902      	cmp	r1, #2
    b4ac:	d118      	bne.n	b4e0 <ticker_instance0_sched+0x50>
				0, 0, link,
				(void *)&_instance[0],
				(void *)ticker_job
			};

			mayfly_enqueue(MAYFLY_CALL_ID_0,
    b4ae:	4b14      	ldr	r3, [pc, #80]	; (b500 <ticker_instance0_sched+0x70>)
    b4b0:	2101      	movs	r1, #1
    b4b2:	2000      	movs	r0, #0
    b4b4:	e011      	b.n	b4da <ticker_instance0_sched+0x4a>
			break;
		}
		break;

	case CALL_ID_JOB:
		switch (callee_id) {
    b4b6:	2901      	cmp	r1, #1
    b4b8:	d004      	beq.n	b4c4 <ticker_instance0_sched+0x34>
    b4ba:	2902      	cmp	r1, #2
    b4bc:	d110      	bne.n	b4e0 <ticker_instance0_sched+0x50>
				0, 0, link,
				(void *)&_instance[0],
				(void *)ticker_job
			};

			mayfly_enqueue(MAYFLY_CALL_ID_1,
    b4be:	4b11      	ldr	r3, [pc, #68]	; (b504 <ticker_instance0_sched+0x74>)
    b4c0:	2101      	movs	r1, #1
    b4c2:	e003      	b.n	b4cc <ticker_instance0_sched+0x3c>
				0, 0, link,
				(void *)&_instance[0],
				(void *)ticker_worker
			};

			mayfly_enqueue(MAYFLY_CALL_ID_1,
    b4c4:	4b10      	ldr	r3, [pc, #64]	; (b508 <ticker_instance0_sched+0x78>)
    b4c6:	2100      	movs	r1, #0
    b4c8:	0020      	movs	r0, r4
    b4ca:	e006      	b.n	b4da <ticker_instance0_sched+0x4a>
				0, 0, link,
				(void *)&_instance[0],
				(void *)ticker_job
			};

			mayfly_enqueue(MAYFLY_CALL_ID_1,
    b4cc:	0008      	movs	r0, r1
    b4ce:	e004      	b.n	b4da <ticker_instance0_sched+0x4a>
			break;
		}
		break;

	case CALL_ID_USER:
		switch (callee_id) {
    b4d0:	2902      	cmp	r1, #2
    b4d2:	d105      	bne.n	b4e0 <ticker_instance0_sched+0x50>
				(void *)&_instance[0],
				(void *)ticker_job
			};

			/* TODO: scheduler lock, if OS used */
			mayfly_enqueue(MAYFLY_CALL_ID_PROGRAM,
    b4d4:	2101      	movs	r1, #1
    b4d6:	2003      	movs	r0, #3
    b4d8:	4b0c      	ldr	r3, [pc, #48]	; (b50c <ticker_instance0_sched+0x7c>)
    b4da:	f7ff f8d1 	bl	a680 <mayfly_enqueue>

	default:
		LL_ASSERT(0);
		break;
	}
}
    b4de:	bd13      	pop	{r0, r1, r4, pc}
			break;
		}
		break;

	default:
		LL_ASSERT(0);
    b4e0:	4b0b      	ldr	r3, [pc, #44]	; (b510 <ticker_instance0_sched+0x80>)
    b4e2:	4a0c      	ldr	r2, [pc, #48]	; (b514 <ticker_instance0_sched+0x84>)
    b4e4:	9301      	str	r3, [sp, #4]
    b4e6:	4b0c      	ldr	r3, [pc, #48]	; (b518 <ticker_instance0_sched+0x88>)
    b4e8:	490c      	ldr	r1, [pc, #48]	; (b51c <ticker_instance0_sched+0x8c>)
    b4ea:	9300      	str	r3, [sp, #0]
    b4ec:	480c      	ldr	r0, [pc, #48]	; (b520 <ticker_instance0_sched+0x90>)
    b4ee:	4b0d      	ldr	r3, [pc, #52]	; (b524 <ticker_instance0_sched+0x94>)
    b4f0:	f7f6 fa46 	bl	1980 <printk>
    b4f4:	b662      	cpsie	i
    b4f6:	2004      	movs	r0, #4
    b4f8:	df02      	svc	2
    b4fa:	46c0      	nop			; (mov r8, r8)
    b4fc:	20000850 	.word	0x20000850
    b500:	20000840 	.word	0x20000840
    b504:	20000800 	.word	0x20000800
    b508:	200007d0 	.word	0x200007d0
    b50c:	20000810 	.word	0x20000810
    b510:	000154c4 	.word	0x000154c4
    b514:	00015484 	.word	0x00015484
    b518:	000154c9 	.word	0x000154c9
    b51c:	0001548b 	.word	0x0001548b
    b520:	00015b21 	.word	0x00015b21
    b524:	0001805c 	.word	0x0001805c

0000b528 <ticker_instance1_caller_id_get>:

	return 0;
}

static u8_t ticker_instance1_caller_id_get(u8_t user_id)
{
    b528:	b507      	push	{r0, r1, r2, lr}
	switch (user_id) {
    b52a:	2802      	cmp	r0, #2
    b52c:	d00e      	beq.n	b54c <ticker_instance1_caller_id_get+0x24>
    b52e:	2803      	cmp	r0, #3
    b530:	d00c      	beq.n	b54c <ticker_instance1_caller_id_get+0x24>
		return CALL_ID_USER;

	case MAYFLY_CALL_ID_0:
	case MAYFLY_CALL_ID_1:
	default:
		LL_ASSERT(0);
    b532:	4b07      	ldr	r3, [pc, #28]	; (b550 <ticker_instance1_caller_id_get+0x28>)
    b534:	4a07      	ldr	r2, [pc, #28]	; (b554 <ticker_instance1_caller_id_get+0x2c>)
    b536:	9301      	str	r3, [sp, #4]
    b538:	4b07      	ldr	r3, [pc, #28]	; (b558 <ticker_instance1_caller_id_get+0x30>)
    b53a:	4908      	ldr	r1, [pc, #32]	; (b55c <ticker_instance1_caller_id_get+0x34>)
    b53c:	9300      	str	r3, [sp, #0]
    b53e:	4808      	ldr	r0, [pc, #32]	; (b560 <ticker_instance1_caller_id_get+0x38>)
    b540:	4b08      	ldr	r3, [pc, #32]	; (b564 <ticker_instance1_caller_id_get+0x3c>)
    b542:	f7f6 fa1d 	bl	1980 <printk>
    b546:	b662      	cpsie	i
    b548:	2004      	movs	r0, #4
    b54a:	df02      	svc	2
		break;
	}

	return 0;
}
    b54c:	bd0e      	pop	{r1, r2, r3, pc}
    b54e:	46c0      	nop			; (mov r8, r8)
    b550:	000154c4 	.word	0x000154c4
    b554:	00015484 	.word	0x00015484
    b558:	000154c9 	.word	0x000154c9
    b55c:	0001548b 	.word	0x0001548b
    b560:	00015b21 	.word	0x00015b21
    b564:	00018092 	.word	0x00018092

0000b568 <ticker_instance0_caller_id_get>:
 *       import it.
 ****************************************************************************/
#include "util/mayfly.h"

static u8_t ticker_instance0_caller_id_get(u8_t user_id)
{
    b568:	b507      	push	{r0, r1, r2, lr}
	switch (user_id) {
    b56a:	2801      	cmp	r0, #1
    b56c:	d010      	beq.n	b590 <ticker_instance0_caller_id_get+0x28>
    b56e:	2800      	cmp	r0, #0
    b570:	d010      	beq.n	b594 <ticker_instance0_caller_id_get+0x2c>
    b572:	2803      	cmp	r0, #3
    b574:	d00f      	beq.n	b596 <ticker_instance0_caller_id_get+0x2e>
	case MAYFLY_CALL_ID_PROGRAM:
		return CALL_ID_USER;

	case MAYFLY_CALL_ID_2:
	default:
		LL_ASSERT(0);
    b576:	4b08      	ldr	r3, [pc, #32]	; (b598 <ticker_instance0_caller_id_get+0x30>)
    b578:	4a08      	ldr	r2, [pc, #32]	; (b59c <ticker_instance0_caller_id_get+0x34>)
    b57a:	9301      	str	r3, [sp, #4]
    b57c:	4b08      	ldr	r3, [pc, #32]	; (b5a0 <ticker_instance0_caller_id_get+0x38>)
    b57e:	4909      	ldr	r1, [pc, #36]	; (b5a4 <ticker_instance0_caller_id_get+0x3c>)
    b580:	9300      	str	r3, [sp, #0]
    b582:	4809      	ldr	r0, [pc, #36]	; (b5a8 <ticker_instance0_caller_id_get+0x40>)
    b584:	4b09      	ldr	r3, [pc, #36]	; (b5ac <ticker_instance0_caller_id_get+0x44>)
    b586:	f7f6 f9fb 	bl	1980 <printk>
    b58a:	b662      	cpsie	i
    b58c:	2004      	movs	r0, #4
    b58e:	df02      	svc	2
	switch (user_id) {
	case MAYFLY_CALL_ID_0:
		return CALL_ID_WORKER;

	case MAYFLY_CALL_ID_1:
		return CALL_ID_JOB;
    b590:	2002      	movs	r0, #2
    b592:	e000      	b.n	b596 <ticker_instance0_caller_id_get+0x2e>

static u8_t ticker_instance0_caller_id_get(u8_t user_id)
{
	switch (user_id) {
	case MAYFLY_CALL_ID_0:
		return CALL_ID_WORKER;
    b594:	2001      	movs	r0, #1
		LL_ASSERT(0);
		break;
	}

	return 0;
}
    b596:	bd0e      	pop	{r1, r2, r3, pc}
    b598:	000154c4 	.word	0x000154c4
    b59c:	00015484 	.word	0x00015484
    b5a0:	000154c9 	.word	0x000154c9
    b5a4:	0001548b 	.word	0x0001548b
    b5a8:	00015b21 	.word	0x00015b21
    b5ac:	00018073 	.word	0x00018073

0000b5b0 <ticker_worker>:
	u32_t ticks_elapsed;
	u32_t ticks_expired;
	u8_t ticker_id_head;

	/* Defer worker if job running */
	instance->worker_trigger = 1;
    b5b0:	2301      	movs	r3, #1

	return (total + timeout);
}

static inline void ticker_worker(struct ticker_instance *instance)
{
    b5b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	u32_t ticks_expired;
	u8_t ticker_id_head;

	/* Defer worker if job running */
	instance->worker_trigger = 1;
	if (instance->job_guard) {
    b5b4:	7f06      	ldrb	r6, [r0, #28]

	return (total + timeout);
}

static inline void ticker_worker(struct ticker_instance *instance)
{
    b5b6:	0004      	movs	r4, r0
	u32_t ticks_elapsed;
	u32_t ticks_expired;
	u8_t ticker_id_head;

	/* Defer worker if job running */
	instance->worker_trigger = 1;
    b5b8:	7743      	strb	r3, [r0, #29]
	if (instance->job_guard) {
    b5ba:	2e00      	cmp	r6, #0
    b5bc:	d14b      	bne.n	b656 <ticker_worker+0xa6>
		return;
	}

	/* If no tickers to expire, do nothing */
	if (instance->ticker_id_head == TICKER_NULL) {
    b5be:	7e03      	ldrb	r3, [r0, #24]
    b5c0:	2bff      	cmp	r3, #255	; 0xff
    b5c2:	d101      	bne.n	b5c8 <ticker_worker+0x18>
		instance->worker_trigger = 0;
    b5c4:	7746      	strb	r6, [r0, #29]

		return;
    b5c6:	e046      	b.n	b656 <ticker_worker+0xa6>
	}

	/* ticks_elapsed is collected here, job will use it */
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
    b5c8:	f7ff fa42 	bl	aa50 <cntr_cnt_get>
	return cntr_cnt_get();
}

u32_t ticker_ticks_diff_get(u32_t ticks_now, u32_t ticks_old)
{
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    b5cc:	6963      	ldr	r3, [r4, #20]

	/* initialise actual elapsed ticks being consumed */
	ticks_expired = 0;

	/* auto variable containing the head of tickers expiring */
	ticker_id_head = instance->ticker_id_head;
    b5ce:	7e27      	ldrb	r7, [r4, #24]
	return cntr_cnt_get();
}

u32_t ticker_ticks_diff_get(u32_t ticks_now, u32_t ticks_old)
{
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    b5d0:	1ac5      	subs	r5, r0, r3
    b5d2:	022d      	lsls	r5, r5, #8
    b5d4:	0a2b      	lsrs	r3, r5, #8
    b5d6:	9300      	str	r3, [sp, #0]

	/* auto variable containing the head of tickers expiring */
	ticker_id_head = instance->ticker_id_head;

	/* expire all tickers within ticks_elapsed and collect ticks_expired */
	node = &instance->node[0];
    b5d8:	6823      	ldr	r3, [r4, #0]
    b5da:	9301      	str	r3, [sp, #4]
	while (ticker_id_head != TICKER_NULL) {
    b5dc:	2fff      	cmp	r7, #255	; 0xff
    b5de:	d007      	beq.n	b5f0 <ticker_worker+0x40>
		struct ticker_node *ticker;
		u32_t ticks_to_expire;

		/* auto variable for current ticker node */
		ticker = &node[ticker_id_head];
    b5e0:	2324      	movs	r3, #36	; 0x24
    b5e2:	435f      	muls	r7, r3
    b5e4:	9b01      	ldr	r3, [sp, #4]

		/* Do nothing if ticker did not expire */
		ticks_to_expire = ticker->ticks_to_expire;
		if (ticks_elapsed < ticks_to_expire) {
    b5e6:	9a00      	ldr	r2, [sp, #0]
	while (ticker_id_head != TICKER_NULL) {
		struct ticker_node *ticker;
		u32_t ticks_to_expire;

		/* auto variable for current ticker node */
		ticker = &node[ticker_id_head];
    b5e8:	19d9      	adds	r1, r3, r7

		/* Do nothing if ticker did not expire */
		ticks_to_expire = ticker->ticks_to_expire;
    b5ea:	688b      	ldr	r3, [r1, #8]
		if (ticks_elapsed < ticks_to_expire) {
    b5ec:	4293      	cmp	r3, r2
    b5ee:	d904      	bls.n	b5fa <ticker_worker+0x4a>
			DEBUG_TICKER_TASK(0);
		}
	}

	/* queue the elapsed value */
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
    b5f0:	7aa2      	ldrb	r2, [r4, #10]
    b5f2:	7ae3      	ldrb	r3, [r4, #11]
    b5f4:	4293      	cmp	r3, r2
    b5f6:	d122      	bne.n	b63e <ticker_worker+0x8e>
    b5f8:	e01b      	b.n	b632 <ticker_worker+0x82>

		/* move to next ticker */
		ticker_id_head = ticker->next;

		/* skip if not scheduled to execute */
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
    b5fa:	20ff      	movs	r0, #255	; 0xff
		if (ticks_elapsed < ticks_to_expire) {
			break;
		}

		/* decrement ticks_elapsed and collect expired ticks */
		ticks_elapsed -= ticks_to_expire;
    b5fc:	9a00      	ldr	r2, [sp, #0]
		ticks_expired += ticks_to_expire;
    b5fe:	18f6      	adds	r6, r6, r3
		if (ticks_elapsed < ticks_to_expire) {
			break;
		}

		/* decrement ticks_elapsed and collect expired ticks */
		ticks_elapsed -= ticks_to_expire;
    b600:	1ad2      	subs	r2, r2, r3
    b602:	9200      	str	r2, [sp, #0]

		/* move to next ticker */
		ticker_id_head = ticker->next;

		/* skip if not scheduled to execute */
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
    b604:	788a      	ldrb	r2, [r1, #2]
    b606:	784b      	ldrb	r3, [r1, #1]
		/* decrement ticks_elapsed and collect expired ticks */
		ticks_elapsed -= ticks_to_expire;
		ticks_expired += ticks_to_expire;

		/* move to next ticker */
		ticker_id_head = ticker->next;
    b608:	780f      	ldrb	r7, [r1, #0]

		/* skip if not scheduled to execute */
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
    b60a:	1a9b      	subs	r3, r3, r2
    b60c:	4003      	ands	r3, r0
    b60e:	2b01      	cmp	r3, #1
    b610:	d1e4      	bne.n	b5dc <ticker_worker+0x2c>
		}

		/* scheduled timeout is acknowledged to be complete */
		ticker->ack--;

		if (ticker->timeout_func) {
    b612:	68cb      	ldr	r3, [r1, #12]
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
			continue;
		}

		/* scheduled timeout is acknowledged to be complete */
		ticker->ack--;
    b614:	3a01      	subs	r2, #1
    b616:	708a      	strb	r2, [r1, #2]

		if (ticker->timeout_func) {
    b618:	1e1d      	subs	r5, r3, #0
    b61a:	d0df      	beq.n	b5dc <ticker_worker+0x2c>
					   ticks_expired -
					   ticker->ticks_to_expire_minus) &
					  0x00FFFFFF;

			DEBUG_TICKER_TASK(1);
			ticker->timeout_func(ticks_at_expire,
    b61c:	6963      	ldr	r3, [r4, #20]
    b61e:	8a88      	ldrh	r0, [r1, #20]
    b620:	8b4a      	ldrh	r2, [r1, #26]
    b622:	1a18      	subs	r0, r3, r0
    b624:	1980      	adds	r0, r0, r6
    b626:	0200      	lsls	r0, r0, #8
    b628:	690b      	ldr	r3, [r1, #16]
    b62a:	0a00      	lsrs	r0, r0, #8
    b62c:	6a09      	ldr	r1, [r1, #32]
    b62e:	47a8      	blx	r5
    b630:	e7d4      	b.n	b5dc <ticker_worker+0x2c>

	/* queue the elapsed value */
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
		u8_t last;

		last = instance->ticks_elapsed_last + 1;
    b632:	3301      	adds	r3, #1
    b634:	b2db      	uxtb	r3, r3
		if (last == DOUBLE_BUFFER_SIZE) {
    b636:	2b02      	cmp	r3, #2
    b638:	d100      	bne.n	b63c <ticker_worker+0x8c>
			last = 0;
    b63a:	2300      	movs	r3, #0
		}
		instance->ticks_elapsed_last = last;
    b63c:	72e3      	strb	r3, [r4, #11]
	}
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    b63e:	7ae3      	ldrb	r3, [r4, #11]

	instance->worker_trigger = 0;

	instance->fp_sched(CALL_ID_WORKER, CALL_ID_JOB, 1);
    b640:	2201      	movs	r2, #1
		if (last == DOUBLE_BUFFER_SIZE) {
			last = 0;
		}
		instance->ticks_elapsed_last = last;
	}
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    b642:	3302      	adds	r3, #2
    b644:	009b      	lsls	r3, r3, #2
    b646:	18e3      	adds	r3, r4, r3
    b648:	605e      	str	r6, [r3, #4]

	instance->worker_trigger = 0;
    b64a:	2300      	movs	r3, #0

	instance->fp_sched(CALL_ID_WORKER, CALL_ID_JOB, 1);
    b64c:	2102      	movs	r1, #2
		}
		instance->ticks_elapsed_last = last;
	}
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;

	instance->worker_trigger = 0;
    b64e:	7763      	strb	r3, [r4, #29]

	instance->fp_sched(CALL_ID_WORKER, CALL_ID_JOB, 1);
    b650:	0010      	movs	r0, r2
    b652:	6a63      	ldr	r3, [r4, #36]	; 0x24
    b654:	4798      	blx	r3
}
    b656:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

0000b658 <ticker_job>:
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
		  COUNTER_CMP_OFFSET_MIN) > ticker_ticks_diff_get(cc, ctr));
}

static inline void ticker_job(struct ticker_instance *instance)
{
    b658:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t flag_compare_update;

	DEBUG_TICKER_JOB(1);

	/* Defer worker, as job is now running */
	if (instance->worker_trigger) {
    b65a:	7f42      	ldrb	r2, [r0, #29]
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
		  COUNTER_CMP_OFFSET_MIN) > ticker_ticks_diff_get(cc, ctr));
}

static inline void ticker_job(struct ticker_instance *instance)
{
    b65c:	b099      	sub	sp, #100	; 0x64
    b65e:	0007      	movs	r7, r0
	u8_t flag_compare_update;

	DEBUG_TICKER_JOB(1);

	/* Defer worker, as job is now running */
	if (instance->worker_trigger) {
    b660:	2a00      	cmp	r2, #0
    b662:	d000      	beq.n	b666 <ticker_job+0xe>
    b664:	e387      	b.n	bd76 <ticker_job+0x71e>
		DEBUG_TICKER_JOB(0);

		return;
	}
	instance->job_guard = 1;
    b666:	2301      	movs	r3, #1
    b668:	7703      	strb	r3, [r0, #28]

	/* Back up the previous known tick */
	ticks_previous = instance->ticks_current;
    b66a:	6943      	ldr	r3, [r0, #20]
    b66c:	9308      	str	r3, [sp, #32]

	/* Update current tick with the elapsed value from queue, and dequeue */
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    b66e:	7a83      	ldrb	r3, [r0, #10]
    b670:	7ac1      	ldrb	r1, [r0, #11]
    b672:	4299      	cmp	r1, r3
    b674:	d013      	beq.n	b69e <ticker_job+0x46>
		u8_t first;

		first = instance->ticks_elapsed_first + 1;
    b676:	3301      	adds	r3, #1
    b678:	b2db      	uxtb	r3, r3
		if (first == DOUBLE_BUFFER_SIZE) {
    b67a:	2b02      	cmp	r3, #2
    b67c:	d100      	bne.n	b680 <ticker_job+0x28>
			first = 0;
    b67e:	0013      	movs	r3, r2
		}
		instance->ticks_elapsed_first = first;
    b680:	72bb      	strb	r3, [r7, #10]

		ticks_elapsed =
    b682:	3302      	adds	r3, #2
    b684:	009b      	lsls	r3, r3, #2
    b686:	18fb      	adds	r3, r7, r3
    b688:	685b      	ldr	r3, [r3, #4]
    b68a:	9304      	str	r3, [sp, #16]
		    instance->ticks_elapsed[instance->ticks_elapsed_first];

		instance->ticks_current += ticks_elapsed;
		instance->ticks_current &= 0x00FFFFFF;
    b68c:	9a04      	ldr	r2, [sp, #16]
    b68e:	9b08      	ldr	r3, [sp, #32]
    b690:	189b      	adds	r3, r3, r2
    b692:	021b      	lsls	r3, r3, #8
    b694:	0a1b      	lsrs	r3, r3, #8
    b696:	617b      	str	r3, [r7, #20]

		flag_elapsed = 1;
    b698:	2301      	movs	r3, #1
    b69a:	9307      	str	r3, [sp, #28]
    b69c:	e001      	b.n	b6a2 <ticker_job+0x4a>
	} else {
		/* No elapsed value in queue */
		flag_elapsed = 0;
    b69e:	9207      	str	r2, [sp, #28]
		ticks_elapsed = 0;
    b6a0:	9204      	str	r2, [sp, #16]
	flag_compare_update = 0;

	/* Remember the old head, so as to decide if new compare needs to be
	 * set.
	 */
	ticker_id_old_head = instance->ticker_id_head;
    b6a2:	7e3b      	ldrb	r3, [r7, #24]
    b6a4:	930a      	str	r3, [sp, #40]	; 0x28
	struct ticker_node *node;
	struct ticker_user *users;
	u8_t count_user;

	pending = 0;
	node = &instance->node[0];
    b6a6:	683b      	ldr	r3, [r7, #0]
    b6a8:	930d      	str	r3, [sp, #52]	; 0x34
	users = &instance->user[0];
    b6aa:	687b      	ldr	r3, [r7, #4]
    b6ac:	930f      	str	r3, [sp, #60]	; 0x3c
    b6ae:	7a7b      	ldrb	r3, [r7, #9]
    b6b0:	3b01      	subs	r3, #1
    b6b2:	b2db      	uxtb	r3, r3
    b6b4:	9306      	str	r3, [sp, #24]
		flag_elapsed = 0;
		ticks_elapsed = 0;
	}

	/* Initialise internal re-insert list */
	insert_head = TICKER_NULL;
    b6b6:	23ff      	movs	r3, #255	; 0xff
    b6b8:	9303      	str	r3, [sp, #12]
	u8_t pending;
	struct ticker_node *node;
	struct ticker_user *users;
	u8_t count_user;

	pending = 0;
    b6ba:	2300      	movs	r3, #0
    b6bc:	930e      	str	r3, [sp, #56]	; 0x38
	node = &instance->node[0];
	users = &instance->user[0];
	count_user = instance->count_user;
	while (count_user--) {
    b6be:	9b06      	ldr	r3, [sp, #24]
    b6c0:	2bff      	cmp	r3, #255	; 0xff
    b6c2:	d100      	bne.n	b6c6 <ticker_job+0x6e>
    b6c4:	e0d9      	b.n	b87a <ticker_job+0x222>
		struct ticker_user *user;
		struct ticker_user_op *user_ops;

		user = &users[count_user];
    b6c6:	9b06      	ldr	r3, [sp, #24]
    b6c8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    b6ca:	00db      	lsls	r3, r3, #3
    b6cc:	18d3      	adds	r3, r2, r3
    b6ce:	9305      	str	r3, [sp, #20]
		user_ops = &user->user_op[0];
    b6d0:	685b      	ldr	r3, [r3, #4]
    b6d2:	9310      	str	r3, [sp, #64]	; 0x40
		while (user->middle != user->last) {
    b6d4:	9b05      	ldr	r3, [sp, #20]
    b6d6:	78d9      	ldrb	r1, [r3, #3]
    b6d8:	9b05      	ldr	r3, [sp, #20]
    b6da:	789e      	ldrb	r6, [r3, #2]
    b6dc:	428e      	cmp	r6, r1
    b6de:	d100      	bne.n	b6e2 <ticker_job+0x8a>
    b6e0:	e0c6      	b.n	b870 <ticker_job+0x218>
			struct ticker_node *ticker;
			u8_t state;
			u8_t prev;
			u8_t middle;

			user_op = &user_ops[user->middle];
    b6e2:	252c      	movs	r5, #44	; 0x2c
    b6e4:	4375      	muls	r5, r6
    b6e6:	9b10      	ldr	r3, [sp, #64]	; 0x40

			/* Traverse queue (no dequeue) */
			prev = user->middle;
			middle = user->middle + 1;
			if (middle == user->count_user_op) {
    b6e8:	9a05      	ldr	r2, [sp, #20]
			struct ticker_node *ticker;
			u8_t state;
			u8_t prev;
			u8_t middle;

			user_op = &user_ops[user->middle];
    b6ea:	195d      	adds	r5, r3, r5

			/* Traverse queue (no dequeue) */
			prev = user->middle;
			middle = user->middle + 1;
			if (middle == user->count_user_op) {
    b6ec:	7812      	ldrb	r2, [r2, #0]

			user_op = &user_ops[user->middle];

			/* Traverse queue (no dequeue) */
			prev = user->middle;
			middle = user->middle + 1;
    b6ee:	1c73      	adds	r3, r6, #1
    b6f0:	b2db      	uxtb	r3, r3
			if (middle == user->count_user_op) {
    b6f2:	429a      	cmp	r2, r3
    b6f4:	d100      	bne.n	b6f8 <ticker_job+0xa0>
				middle = 0;
    b6f6:	2300      	movs	r3, #0
			}
			user->middle = middle;
    b6f8:	9a05      	ldr	r2, [sp, #20]
    b6fa:	7093      	strb	r3, [r2, #2]

			ticker = &node[user_op->id];

			/* if op is start, then skip update and stop ops */
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
    b6fc:	782a      	ldrb	r2, [r5, #0]
    b6fe:	2a03      	cmp	r2, #3
    b700:	d9ea      	bls.n	b6d8 <ticker_job+0x80>
			state = (ticker->req - ticker->ack) & 0xff;

			/* if not started or update not required,
			 * set status and continue.
			 */
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
    b702:	2a05      	cmp	r2, #5
    b704:	d815      	bhi.n	b732 <ticker_job+0xda>
			if (middle == user->count_user_op) {
				middle = 0;
			}
			user->middle = middle;

			ticker = &node[user_op->id];
    b706:	2424      	movs	r4, #36	; 0x24
    b708:	7869      	ldrb	r1, [r5, #1]
    b70a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    b70c:	434c      	muls	r4, r1
    b70e:	191c      	adds	r4, r3, r4
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
				continue;
			}

			/* determine the ticker state */
			state = (ticker->req - ticker->ack) & 0xff;
    b710:	7863      	ldrb	r3, [r4, #1]
    b712:	78a0      	ldrb	r0, [r4, #2]
    b714:	1a1b      	subs	r3, r3, r0
    b716:	b2db      	uxtb	r3, r3

			/* if not started or update not required,
			 * set status and continue.
			 */
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
    b718:	2b00      	cmp	r3, #0
    b71a:	d00a      	beq.n	b732 <ticker_job+0xda>
			    (state == 0) ||
    b71c:	2a04      	cmp	r2, #4
    b71e:	d10a      	bne.n	b736 <ticker_job+0xde>
			    ((user_op->op == TICKER_USER_OP_TYPE_UPDATE) &&
			     (user_op->params.update.ticks_drift_plus == 0) &&
    b720:	686a      	ldr	r2, [r5, #4]
    b722:	2a00      	cmp	r2, #0
    b724:	d107      	bne.n	b736 <ticker_job+0xde>
			     (user_op->params.update.ticks_drift_minus == 0) &&
			     (user_op->params.update.ticks_slot_plus == 0) &&
    b726:	68aa      	ldr	r2, [r5, #8]
    b728:	2a00      	cmp	r2, #0
    b72a:	d104      	bne.n	b736 <ticker_job+0xde>
			     (user_op->params.update.ticks_slot_minus == 0) &&
			     (user_op->params.update.lazy == 0) &&
    b72c:	68ea      	ldr	r2, [r5, #12]
    b72e:	0212      	lsls	r2, r2, #8
    b730:	d101      	bne.n	b736 <ticker_job+0xde>
			     (user_op->params.update.force == 0))) {
				ticker_job_op_cb(user_op,
    b732:	2101      	movs	r1, #1
    b734:	e08f      	b.n	b856 <ticker_job+0x1fe>
						 TICKER_STATUS_FAILURE);
				continue;
			}

			/* Delete node, if not expired */
			if (state == 1) {
    b736:	2b01      	cmp	r3, #1
    b738:	d000      	beq.n	b73c <ticker_job+0xe4>
    b73a:	e090      	b.n	b85e <ticker_job+0x206>
					  struct ticker_user_op *user_op,
					  u32_t ticks_elapsed,
					  u8_t *insert_head)
{
	/* Remove ticker node from list */
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    b73c:	0038      	movs	r0, r7
    b73e:	f7ff fdfd 	bl	b33c <ticker_dequeue>
    b742:	60a0      	str	r0, [r4, #8]

	/* Handle update of ticker by re-inserting it back. */
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    b744:	782b      	ldrb	r3, [r5, #0]
					  struct ticker_user_op *user_op,
					  u32_t ticks_elapsed,
					  u8_t *insert_head)
{
	/* Remove ticker node from list */
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    b746:	0006      	movs	r6, r0

	/* Handle update of ticker by re-inserting it back. */
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    b748:	2b04      	cmp	r3, #4
    b74a:	d000      	beq.n	b74e <ticker_job+0xf6>
    b74c:	e078      	b.n	b840 <ticker_job+0x1e8>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
    b74e:	697b      	ldr	r3, [r7, #20]
    b750:	9309      	str	r3, [sp, #36]	; 0x24
					  u8_t *insert_head)
{
	u32_t ticks_to_expire = ticker->ticks_to_expire;
	u32_t ticks_now;

	ticks_now = cntr_cnt_get();
    b752:	f7ff f97d 	bl	aa50 <cntr_cnt_get>
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    b756:	9a09      	ldr	r2, [sp, #36]	; 0x24
					  u8_t *insert_head)
{
	u32_t ticks_to_expire = ticker->ticks_to_expire;
	u32_t ticks_now;

	ticks_now = cntr_cnt_get();
    b758:	900b      	str	r0, [sp, #44]	; 0x2c
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    b75a:	1a80      	subs	r0, r0, r2
    b75c:	0200      	lsls	r0, r0, #8
    b75e:	9b04      	ldr	r3, [sp, #16]
    b760:	0a00      	lsrs	r0, r0, #8
    b762:	18c3      	adds	r3, r0, r3
	if (ticks_to_expire > ticks_elapsed) {
		ticks_to_expire -= ticks_elapsed;
    b764:	1af0      	subs	r0, r6, r3
	u32_t ticks_to_expire = ticker->ticks_to_expire;
	u32_t ticks_now;

	ticks_now = cntr_cnt_get();
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
	if (ticks_to_expire > ticks_elapsed) {
    b766:	429e      	cmp	r6, r3
    b768:	d804      	bhi.n	b774 <ticker_job+0x11c>
		ticks_to_expire -= ticks_elapsed;
	} else {
		ticker->ticks_to_expire_minus += ticks_elapsed -
    b76a:	8aa0      	ldrh	r0, [r4, #20]
    b76c:	1b80      	subs	r0, r0, r6
    b76e:	18c0      	adds	r0, r0, r3
    b770:	82a0      	strh	r0, [r4, #20]
						 ticks_to_expire;
		ticks_to_expire = 0;
    b772:	2000      	movs	r0, #0
	}

	if ((ticker->ticks_periodic != 0) &&
    b774:	6863      	ldr	r3, [r4, #4]
    b776:	2b00      	cmp	r3, #0
    b778:	d03d      	beq.n	b7f6 <ticker_job+0x19e>
	    (user_op->params.update.lazy != 0)) {
    b77a:	89ab      	ldrh	r3, [r5, #12]
		ticker->ticks_to_expire_minus += ticks_elapsed -
						 ticks_to_expire;
		ticks_to_expire = 0;
	}

	if ((ticker->ticks_periodic != 0) &&
    b77c:	2b00      	cmp	r3, #0
    b77e:	d03a      	beq.n	b7f6 <ticker_job+0x19e>
	    (user_op->params.update.lazy != 0)) {
		user_op->params.update.lazy--;
    b780:	3b01      	subs	r3, #1
    b782:	81ab      	strh	r3, [r5, #12]

		while ((ticks_to_expire > ticker->ticks_periodic) &&
    b784:	6863      	ldr	r3, [r4, #4]
    b786:	469c      	mov	ip, r3
    b788:	4584      	cmp	ip, r0
    b78a:	d301      	bcc.n	b790 <ticker_job+0x138>
}

static u8_t ticker_remainder_inc(struct ticker_node *ticker)
{
	ticker->remainder_current += ticker->remainder_periodic;
	if ((ticker->remainder_current < BIT(31)) &&
    b78c:	49c7      	ldr	r1, [pc, #796]	; (baac <ticker_job+0x454>)
    b78e:	e027      	b.n	b7e0 <ticker_job+0x188>
	if ((ticker->ticks_periodic != 0) &&
	    (user_op->params.update.lazy != 0)) {
		user_op->params.update.lazy--;

		while ((ticks_to_expire > ticker->ticks_periodic) &&
		       (ticker->lazy_current > user_op->params.update.lazy)) {
    b790:	8b63      	ldrh	r3, [r4, #26]
    b792:	930c      	str	r3, [sp, #48]	; 0x30

	if ((ticker->ticks_periodic != 0) &&
	    (user_op->params.update.lazy != 0)) {
		user_op->params.update.lazy--;

		while ((ticks_to_expire > ticker->ticks_periodic) &&
    b794:	89aa      	ldrh	r2, [r5, #12]
    b796:	429a      	cmp	r2, r3
    b798:	d2f8      	bcs.n	b78c <ticker_job+0x134>

static u8_t ticker_remainder_dec(struct ticker_node *ticker)
{
	u8_t decrement = 0;

	if ((ticker->remainder_current >= BIT(31)) ||
    b79a:	6a21      	ldr	r1, [r4, #32]
    b79c:	4ac4      	ldr	r2, [pc, #784]	; (bab0 <ticker_job+0x458>)
    b79e:	4bc3      	ldr	r3, [pc, #780]	; (baac <ticker_job+0x454>)
    b7a0:	188a      	adds	r2, r1, r2
    b7a2:	0016      	movs	r6, r2
	return 0;
}

static u8_t ticker_remainder_dec(struct ticker_node *ticker)
{
	u8_t decrement = 0;
    b7a4:	2200      	movs	r2, #0

	if ((ticker->remainder_current >= BIT(31)) ||
    b7a6:	429e      	cmp	r6, r3
    b7a8:	d903      	bls.n	b7b2 <ticker_job+0x15a>
	    (ticker->remainder_current <= (30517578UL / 2))) {
		decrement++;
		ticker->remainder_current += 30517578UL;
    b7aa:	4ac2      	ldr	r2, [pc, #776]	; (bab4 <ticker_job+0x45c>)
    b7ac:	1889      	adds	r1, r1, r2
{
	u8_t decrement = 0;

	if ((ticker->remainder_current >= BIT(31)) ||
	    (ticker->remainder_current <= (30517578UL / 2))) {
		decrement++;
    b7ae:	2201      	movs	r2, #1
		ticker->remainder_current += 30517578UL;
    b7b0:	6221      	str	r1, [r4, #32]
	}
	ticker->remainder_current -= ticker->remainder_periodic;
    b7b2:	6a21      	ldr	r1, [r4, #32]
    b7b4:	69e6      	ldr	r6, [r4, #28]

		while ((ticks_to_expire > ticker->ticks_periodic) &&
		       (ticker->lazy_current > user_op->params.update.lazy)) {
			ticks_to_expire -= ticker->ticks_periodic +
					   ticker_remainder_dec(ticker);
			ticker->lazy_current--;
    b7b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	if ((ticker->remainder_current >= BIT(31)) ||
	    (ticker->remainder_current <= (30517578UL / 2))) {
		decrement++;
		ticker->remainder_current += 30517578UL;
	}
	ticker->remainder_current -= ticker->remainder_periodic;
    b7b8:	1b89      	subs	r1, r1, r6
	    (user_op->params.update.lazy != 0)) {
		user_op->params.update.lazy--;

		while ((ticks_to_expire > ticker->ticks_periodic) &&
		       (ticker->lazy_current > user_op->params.update.lazy)) {
			ticks_to_expire -= ticker->ticks_periodic +
    b7ba:	4462      	add	r2, ip
					   ticker_remainder_dec(ticker);
			ticker->lazy_current--;
    b7bc:	3b01      	subs	r3, #1
	if ((ticker->remainder_current >= BIT(31)) ||
	    (ticker->remainder_current <= (30517578UL / 2))) {
		decrement++;
		ticker->remainder_current += 30517578UL;
	}
	ticker->remainder_current -= ticker->remainder_periodic;
    b7be:	6221      	str	r1, [r4, #32]
	    (user_op->params.update.lazy != 0)) {
		user_op->params.update.lazy--;

		while ((ticks_to_expire > ticker->ticks_periodic) &&
		       (ticker->lazy_current > user_op->params.update.lazy)) {
			ticks_to_expire -= ticker->ticks_periodic +
    b7c0:	1a80      	subs	r0, r0, r2
					   ticker_remainder_dec(ticker);
			ticker->lazy_current--;
    b7c2:	8363      	strh	r3, [r4, #26]
    b7c4:	e7e0      	b.n	b788 <ticker_job+0x130>
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
}

static u8_t ticker_remainder_inc(struct ticker_node *ticker)
{
	ticker->remainder_current += ticker->remainder_periodic;
    b7c6:	69e6      	ldr	r6, [r4, #28]
    b7c8:	6a23      	ldr	r3, [r4, #32]
    b7ca:	199b      	adds	r3, r3, r6
	if ((ticker->remainder_current < BIT(31)) &&
    b7cc:	4eb8      	ldr	r6, [pc, #736]	; (bab0 <ticker_job+0x458>)
    b7ce:	199e      	adds	r6, r3, r6
    b7d0:	428e      	cmp	r6, r1
    b7d2:	d90a      	bls.n	b7ea <ticker_job+0x192>
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
}

static u8_t ticker_remainder_inc(struct ticker_node *ticker)
{
	ticker->remainder_current += ticker->remainder_periodic;
    b7d4:	6223      	str	r3, [r4, #32]
	if ((ticker->remainder_current < BIT(31)) &&
	    (ticker->remainder_current > (30517578UL / 2))) {
		ticker->remainder_current -= 30517578UL;
		return 1;
	}
	return 0;
    b7d6:	2300      	movs	r3, #0
					   ticker_remainder_dec(ticker);
			ticker->lazy_current--;
		}

		while (ticker->lazy_current < user_op->params.update.lazy) {
			ticks_to_expire += ticker->ticks_periodic +
    b7d8:	4463      	add	r3, ip
					   ticker_remainder_inc(ticker);
			ticker->lazy_current++;
    b7da:	3201      	adds	r2, #1
					   ticker_remainder_dec(ticker);
			ticker->lazy_current--;
		}

		while (ticker->lazy_current < user_op->params.update.lazy) {
			ticks_to_expire += ticker->ticks_periodic +
    b7dc:	18c0      	adds	r0, r0, r3
					   ticker_remainder_inc(ticker);
			ticker->lazy_current++;
    b7de:	8362      	strh	r2, [r4, #26]
			ticks_to_expire -= ticker->ticks_periodic +
					   ticker_remainder_dec(ticker);
			ticker->lazy_current--;
		}

		while (ticker->lazy_current < user_op->params.update.lazy) {
    b7e0:	8b62      	ldrh	r2, [r4, #26]
    b7e2:	89ab      	ldrh	r3, [r5, #12]
    b7e4:	429a      	cmp	r2, r3
    b7e6:	d3ee      	bcc.n	b7c6 <ticker_job+0x16e>
    b7e8:	e004      	b.n	b7f4 <ticker_job+0x19c>
static u8_t ticker_remainder_inc(struct ticker_node *ticker)
{
	ticker->remainder_current += ticker->remainder_periodic;
	if ((ticker->remainder_current < BIT(31)) &&
	    (ticker->remainder_current > (30517578UL / 2))) {
		ticker->remainder_current -= 30517578UL;
    b7ea:	4eb3      	ldr	r6, [pc, #716]	; (bab8 <ticker_job+0x460>)
    b7ec:	199b      	adds	r3, r3, r6
    b7ee:	6223      	str	r3, [r4, #32]
		return 1;
    b7f0:	2301      	movs	r3, #1
    b7f2:	e7f1      	b.n	b7d8 <ticker_job+0x180>
			ticks_to_expire += ticker->ticks_periodic +
					   ticker_remainder_inc(ticker);
			ticker->lazy_current++;
		}

		ticker->lazy_periodic = user_op->params.update.lazy;
    b7f4:	8323      	strh	r3, [r4, #24]
	}

	ticker->ticks_to_expire = ticks_to_expire +
    b7f6:	88ab      	ldrh	r3, [r5, #4]
				  user_op->params.update.ticks_drift_plus;
	ticker->ticks_to_expire_minus +=
    b7f8:	8aa2      	ldrh	r2, [r4, #20]
		}

		ticker->lazy_periodic = user_op->params.update.lazy;
	}

	ticker->ticks_to_expire = ticks_to_expire +
    b7fa:	1818      	adds	r0, r3, r0
    b7fc:	60a0      	str	r0, [r4, #8]
				  user_op->params.update.ticks_drift_plus;
	ticker->ticks_to_expire_minus +=
    b7fe:	88eb      	ldrh	r3, [r5, #6]
				user_op->params.update.ticks_drift_minus;

	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
    b800:	9909      	ldr	r1, [sp, #36]	; 0x24
		ticker->lazy_periodic = user_op->params.update.lazy;
	}

	ticker->ticks_to_expire = ticks_to_expire +
				  user_op->params.update.ticks_drift_plus;
	ticker->ticks_to_expire_minus +=
    b802:	18d3      	adds	r3, r2, r3
    b804:	82a3      	strh	r3, [r4, #20]
				user_op->params.update.ticks_drift_minus;

	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
    b806:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    b808:	0020      	movs	r0, r4
    b80a:	f7ff fdbf 	bl	b38c <ticks_to_expire_prep>

	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
    b80e:	8ae2      	ldrh	r2, [r4, #22]
    b810:	892b      	ldrh	r3, [r5, #8]
    b812:	18d3      	adds	r3, r2, r3
    b814:	b29b      	uxth	r3, r3
    b816:	82e3      	strh	r3, [r4, #22]
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
    b818:	896a      	ldrh	r2, [r5, #10]
    b81a:	4293      	cmp	r3, r2
    b81c:	d901      	bls.n	b822 <ticker_job+0x1ca>
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
    b81e:	1a9b      	subs	r3, r3, r2
    b820:	e000      	b.n	b824 <ticker_job+0x1cc>
	} else {
		ticker->ticks_slot = 0;
    b822:	2300      	movs	r3, #0
    b824:	82e3      	strh	r3, [r4, #22]
	}

	if (user_op->params.update.force != 0) {
    b826:	7bab      	ldrb	r3, [r5, #14]
    b828:	2b00      	cmp	r3, #0
    b82a:	d000      	beq.n	b82e <ticker_job+0x1d6>
		ticker->force = user_op->params.update.force;
    b82c:	70e3      	strb	r3, [r4, #3]
	}

	ticker->next = *insert_head;
    b82e:	466b      	mov	r3, sp
    b830:	7b1b      	ldrb	r3, [r3, #12]
    b832:	7023      	strb	r3, [r4, #0]
	*insert_head = user_op->id;
    b834:	786b      	ldrb	r3, [r5, #1]
    b836:	9303      	str	r3, [sp, #12]
				       ticks_elapsed, insert_head);

		/* set schedule status of node
		 * as updating.
		 */
		ticker->req++;
    b838:	7863      	ldrb	r3, [r4, #1]
    b83a:	3301      	adds	r3, #1
    b83c:	7063      	strb	r3, [r4, #1]
    b83e:	e009      	b.n	b854 <ticker_job+0x1fc>
	} else {
		/* reset schedule status of node */
		ticker->req = ticker->ack;
    b840:	78a3      	ldrb	r3, [r4, #2]
    b842:	7063      	strb	r3, [r4, #1]

		if (instance->ticker_id_slot_previous == user_op->id) {
    b844:	7e7a      	ldrb	r2, [r7, #25]
    b846:	786b      	ldrb	r3, [r5, #1]
    b848:	429a      	cmp	r2, r3
    b84a:	d103      	bne.n	b854 <ticker_job+0x1fc>
			instance->ticker_id_slot_previous = TICKER_NULL;
    b84c:	23ff      	movs	r3, #255	; 0xff
    b84e:	767b      	strb	r3, [r7, #25]
			instance->ticks_slot_previous = 0;
    b850:	2300      	movs	r3, #0
    b852:	837b      	strh	r3, [r7, #26]
	}

	/* op success, @todo update may fail during
	 * actual insert! need to design that yet.
	 */
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
    b854:	2100      	movs	r1, #0
    b856:	0028      	movs	r0, r5
    b858:	f7ff fdb7 	bl	b3ca <ticker_job_op_cb>
    b85c:	e73a      	b.n	b6d4 <ticker_job+0x7c>
				/* update on expired node requested, deferi
				 * update until bottom half finishes.
				 */
				/* sched job to run after worker bottom half.
				 */
				instance->fp_sched(CALL_ID_JOB, CALL_ID_JOB, 1);
    b85e:	2102      	movs	r1, #2
    b860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b862:	2201      	movs	r2, #1
    b864:	0008      	movs	r0, r1
    b866:	4798      	blx	r3

				/* Update the index upto which management is
				 * complete.
				 */
				user->middle = prev;
    b868:	9b05      	ldr	r3, [sp, #20]
    b86a:	709e      	strb	r6, [r3, #2]

				pending = 1;
    b86c:	2301      	movs	r3, #1
    b86e:	930e      	str	r3, [sp, #56]	; 0x38
    b870:	9b06      	ldr	r3, [sp, #24]
    b872:	3b01      	subs	r3, #1
    b874:	b2db      	uxtb	r3, r3
    b876:	9306      	str	r3, [sp, #24]
    b878:	e721      	b.n	b6be <ticker_job+0x66>

	/* Initialise internal re-insert list */
	insert_head = TICKER_NULL;

	/* Initialise flag used to update next compare value */
	flag_compare_update = 0;
    b87a:	7e3b      	ldrb	r3, [r7, #24]
    b87c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    b87e:	1a9b      	subs	r3, r3, r2
    b880:	1e5a      	subs	r2, r3, #1
    b882:	4193      	sbcs	r3, r2
    b884:	b2db      	uxtb	r3, r3
    b886:	930d      	str	r3, [sp, #52]	; 0x34
	if (instance->ticker_id_head != ticker_id_old_head) {
		flag_compare_update = 1;
	}

	/* Handle expired tickers */
	if (flag_elapsed) {
    b888:	9b07      	ldr	r3, [sp, #28]
    b88a:	2b00      	cmp	r3, #0
    b88c:	d068      	beq.n	b960 <ticker_job+0x308>
					u8_t *insert_head)
{
	struct ticker_node *node;
	u32_t ticks_expired;

	node = &instance->node[0];
    b88e:	683b      	ldr	r3, [r7, #0]
    b890:	9307      	str	r3, [sp, #28]
	ticks_expired = 0;
    b892:	2300      	movs	r3, #0
    b894:	9305      	str	r3, [sp, #20]

		/* decrement ticks_slot_previous */
		if (instance->ticks_slot_previous > ticks_to_expire) {
			instance->ticks_slot_previous -= ticks_to_expire;
		} else {
			instance->ticker_id_slot_previous = TICKER_NULL;
    b896:	9b06      	ldr	r3, [sp, #24]
    b898:	9309      	str	r3, [sp, #36]	; 0x24
	struct ticker_node *node;
	u32_t ticks_expired;

	node = &instance->node[0];
	ticks_expired = 0;
	while (instance->ticker_id_head != TICKER_NULL) {
    b89a:	7e3e      	ldrb	r6, [r7, #24]
    b89c:	2eff      	cmp	r6, #255	; 0xff
    b89e:	d059      	beq.n	b954 <ticker_job+0x2fc>
		u32_t ticks_to_expire;
		u8_t id_expired;

		/* auto variable for current ticker node */
		id_expired = instance->ticker_id_head;
		ticker = &node[id_expired];
    b8a0:	2424      	movs	r4, #36	; 0x24
    b8a2:	4374      	muls	r4, r6
    b8a4:	9b07      	ldr	r3, [sp, #28]
    b8a6:	191c      	adds	r4, r3, r4

		/* Do nothing if ticker did not expire */
		ticks_to_expire = ticker->ticks_to_expire;
    b8a8:	68a5      	ldr	r5, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
    b8aa:	9b04      	ldr	r3, [sp, #16]
    b8ac:	429d      	cmp	r5, r3
    b8ae:	d902      	bls.n	b8b6 <ticker_job+0x25e>
			ticker->ticks_to_expire -= ticks_elapsed;
    b8b0:	1aed      	subs	r5, r5, r3
    b8b2:	60a5      	str	r5, [r4, #8]
    b8b4:	e04e      	b.n	b954 <ticker_job+0x2fc>
			break;
		}

		/* decrement ticks_elapsed and collect expired ticks */
		ticks_elapsed -= ticks_to_expire;
		ticks_expired += ticks_to_expire;
    b8b6:	9b05      	ldr	r3, [sp, #20]
    b8b8:	195b      	adds	r3, r3, r5
    b8ba:	9305      	str	r3, [sp, #20]

		/* decrement ticks_slot_previous */
		if (instance->ticks_slot_previous > ticks_to_expire) {
    b8bc:	8b7b      	ldrh	r3, [r7, #26]
    b8be:	429d      	cmp	r5, r3
    b8c0:	d201      	bcs.n	b8c6 <ticker_job+0x26e>
			instance->ticks_slot_previous -= ticks_to_expire;
    b8c2:	1b5b      	subs	r3, r3, r5
    b8c4:	e005      	b.n	b8d2 <ticker_job+0x27a>
		} else {
			instance->ticker_id_slot_previous = TICKER_NULL;
    b8c6:	466b      	mov	r3, sp
    b8c8:	2224      	movs	r2, #36	; 0x24
    b8ca:	189b      	adds	r3, r3, r2
    b8cc:	781b      	ldrb	r3, [r3, #0]
    b8ce:	767b      	strb	r3, [r7, #25]
			instance->ticks_slot_previous = 0;
    b8d0:	2300      	movs	r3, #0
    b8d2:	837b      	strh	r3, [r7, #26]
		}

		/* save current ticks_slot_previous */
		if (ticker->ticks_slot != 0) {
    b8d4:	8ae3      	ldrh	r3, [r4, #22]
    b8d6:	2b00      	cmp	r3, #0
    b8d8:	d002      	beq.n	b8e0 <ticker_job+0x288>
			instance->ticker_id_slot_previous = id_expired;
    b8da:	767e      	strb	r6, [r7, #25]
			instance->ticks_slot_previous = ticker->ticks_slot;
    b8dc:	8ae3      	ldrh	r3, [r4, #22]
    b8de:	837b      	strh	r3, [r7, #26]
		}

		/* ticker expired, set ticks_to_expire zero */
		ticker->ticks_to_expire = 0;
    b8e0:	2200      	movs	r2, #0

		/* remove the expired ticker from head */
		instance->ticker_id_head = ticker->next;
    b8e2:	7823      	ldrb	r3, [r4, #0]
			instance->ticker_id_slot_previous = id_expired;
			instance->ticks_slot_previous = ticker->ticks_slot;
		}

		/* ticker expired, set ticks_to_expire zero */
		ticker->ticks_to_expire = 0;
    b8e4:	60a2      	str	r2, [r4, #8]

		/* remove the expired ticker from head */
		instance->ticker_id_head = ticker->next;
    b8e6:	763b      	strb	r3, [r7, #24]

		/* ticker will be restarted if periodic */
		if (ticker->ticks_periodic != 0) {
    b8e8:	6860      	ldr	r0, [r4, #4]
    b8ea:	4290      	cmp	r0, r2
    b8ec:	d02a      	beq.n	b944 <ticker_job+0x2ec>
    b8ee:	8b23      	ldrh	r3, [r4, #24]
    b8f0:	9306      	str	r3, [sp, #24]
}

static u8_t ticker_remainder_inc(struct ticker_node *ticker)
{
	ticker->remainder_current += ticker->remainder_periodic;
	if ((ticker->remainder_current < BIT(31)) &&
    b8f2:	4b6e      	ldr	r3, [pc, #440]	; (baac <ticker_job+0x454>)
    b8f4:	469c      	mov	ip, r3
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
}

static u8_t ticker_remainder_inc(struct ticker_node *ticker)
{
	ticker->remainder_current += ticker->remainder_periodic;
    b8f6:	69e1      	ldr	r1, [r4, #28]
    b8f8:	6a23      	ldr	r3, [r4, #32]
    b8fa:	185b      	adds	r3, r3, r1
	if ((ticker->remainder_current < BIT(31)) &&
    b8fc:	496c      	ldr	r1, [pc, #432]	; (bab0 <ticker_job+0x458>)
    b8fe:	1859      	adds	r1, r3, r1
    b900:	4561      	cmp	r1, ip
    b902:	d902      	bls.n	b90a <ticker_job+0x2b2>
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
}

static u8_t ticker_remainder_inc(struct ticker_node *ticker)
{
	ticker->remainder_current += ticker->remainder_periodic;
    b904:	6223      	str	r3, [r4, #32]
	if ((ticker->remainder_current < BIT(31)) &&
	    (ticker->remainder_current > (30517578UL / 2))) {
		ticker->remainder_current -= 30517578UL;
		return 1;
	}
	return 0;
    b906:	2300      	movs	r3, #0
    b908:	e003      	b.n	b912 <ticker_job+0x2ba>
static u8_t ticker_remainder_inc(struct ticker_node *ticker)
{
	ticker->remainder_current += ticker->remainder_periodic;
	if ((ticker->remainder_current < BIT(31)) &&
	    (ticker->remainder_current > (30517578UL / 2))) {
		ticker->remainder_current -= 30517578UL;
    b90a:	496b      	ldr	r1, [pc, #428]	; (bab8 <ticker_job+0x460>)
    b90c:	185b      	adds	r3, r3, r1
    b90e:	6223      	str	r3, [r4, #32]
		return 1;
    b910:	2301      	movs	r3, #1
			/* Prepare for next interval */
			ticks_to_expire = 0;
			count = 1 + ticker->lazy_periodic;
			while (count--) {
				ticks_to_expire += ticker->ticks_periodic;
				ticks_to_expire += ticker_remainder_inc(ticker);
    b912:	181b      	adds	r3, r3, r0
    b914:	18d2      	adds	r2, r2, r3
			u32_t count;

			/* Prepare for next interval */
			ticks_to_expire = 0;
			count = 1 + ticker->lazy_periodic;
			while (count--) {
    b916:	9b06      	ldr	r3, [sp, #24]
    b918:	3b01      	subs	r3, #1
    b91a:	9306      	str	r3, [sp, #24]
    b91c:	d2eb      	bcs.n	b8f6 <ticker_job+0x29e>
				ticks_to_expire += ticker->ticks_periodic;
				ticks_to_expire += ticker_remainder_inc(ticker);
			}
			ticker->ticks_to_expire = ticks_to_expire;
			ticks_to_expire_prep(ticker, instance->ticks_current,
    b91e:	9b08      	ldr	r3, [sp, #32]
			count = 1 + ticker->lazy_periodic;
			while (count--) {
				ticks_to_expire += ticker->ticks_periodic;
				ticks_to_expire += ticker_remainder_inc(ticker);
			}
			ticker->ticks_to_expire = ticks_to_expire;
    b920:	60a2      	str	r2, [r4, #8]
			ticks_to_expire_prep(ticker, instance->ticks_current,
    b922:	9a05      	ldr	r2, [sp, #20]
    b924:	6979      	ldr	r1, [r7, #20]
    b926:	189a      	adds	r2, r3, r2
    b928:	0020      	movs	r0, r4
    b92a:	f7ff fd2f 	bl	b38c <ticks_to_expire_prep>
					     (ticks_previous + ticks_expired));
			ticker->lazy_current = ticker->lazy_periodic;
    b92e:	8b23      	ldrh	r3, [r4, #24]
    b930:	8363      	strh	r3, [r4, #26]
			ticker->force = 0;
    b932:	2300      	movs	r3, #0
    b934:	70e3      	strb	r3, [r4, #3]

			/* Add to insert list */
			ticker->next = *insert_head;
    b936:	466b      	mov	r3, sp
    b938:	7b1b      	ldrb	r3, [r3, #12]
    b93a:	7023      	strb	r3, [r4, #0]
			*insert_head = id_expired;

			/* set schedule status of node as restarting. */
			ticker->req++;
    b93c:	7863      	ldrb	r3, [r4, #1]
    b93e:	3301      	adds	r3, #1
    b940:	7063      	strb	r3, [r4, #1]
    b942:	e002      	b.n	b94a <ticker_job+0x2f2>
		} else {
			/* reset schedule status of node */
			ticker->req = ticker->ack;
    b944:	78a3      	ldrb	r3, [r4, #2]
    b946:	9e03      	ldr	r6, [sp, #12]
    b948:	7063      	strb	r3, [r4, #1]
			ticker->ticks_to_expire -= ticks_elapsed;
			break;
		}

		/* decrement ticks_elapsed and collect expired ticks */
		ticks_elapsed -= ticks_to_expire;
    b94a:	9b04      	ldr	r3, [sp, #16]
    b94c:	9603      	str	r6, [sp, #12]
    b94e:	1b5b      	subs	r3, r3, r5
    b950:	9304      	str	r3, [sp, #16]
    b952:	e7a2      	b.n	b89a <ticker_job+0x242>
	if (flag_elapsed) {
		ticker_job_worker_bh(instance, ticks_previous, ticks_elapsed,
				     &insert_head);

		/* detect change in head of the list */
		if (instance->ticker_id_head != ticker_id_old_head) {
    b954:	7e3b      	ldrb	r3, [r7, #24]
    b956:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    b958:	4293      	cmp	r3, r2
    b95a:	d001      	beq.n	b960 <ticker_job+0x308>
			flag_compare_update = 1;
    b95c:	2301      	movs	r3, #1
    b95e:	930d      	str	r3, [sp, #52]	; 0x34
{
	struct ticker_node *node;
	struct ticker_user *users;
	u8_t count_user;

	node = &instance->node[0];
    b960:	683b      	ldr	r3, [r7, #0]
    b962:	9310      	str	r3, [sp, #64]	; 0x40
	users = &instance->user[0];
    b964:	687b      	ldr	r3, [r7, #4]
    b966:	9314      	str	r3, [sp, #80]	; 0x50
    b968:	7a7b      	ldrb	r3, [r7, #9]
    b96a:	3b01      	subs	r3, #1
    b96c:	b2db      	uxtb	r3, r3
    b96e:	930c      	str	r3, [sp, #48]	; 0x30
	count_user = instance->count_user;
	while (count_user--) {
    b970:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b972:	2bff      	cmp	r3, #255	; 0xff
    b974:	d100      	bne.n	b978 <ticker_job+0x320>
    b976:	e134      	b.n	bbe2 <ticker_job+0x58a>
		struct ticker_user_op *user_ops;
		struct ticker_user *user;
		u8_t user_ops_first;

		user = &users[count_user];
    b978:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b97a:	9a14      	ldr	r2, [sp, #80]	; 0x50
    b97c:	00db      	lsls	r3, r3, #3
    b97e:	18d3      	adds	r3, r2, r3
    b980:	930b      	str	r3, [sp, #44]	; 0x2c
		user_ops = (void *)&user->user_op[0];
    b982:	685b      	ldr	r3, [r3, #4]
    b984:	9315      	str	r3, [sp, #84]	; 0x54
		user_ops_first = user->first;
    b986:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b988:	785b      	ldrb	r3, [r3, #1]
    b98a:	9307      	str	r3, [sp, #28]
		while ((insert_head != TICKER_NULL) ||
    b98c:	9b03      	ldr	r3, [sp, #12]
    b98e:	2bff      	cmp	r3, #255	; 0xff
    b990:	d100      	bne.n	b994 <ticker_job+0x33c>
    b992:	e10c      	b.n	bbae <ticker_job+0x556>
			u8_t id_insert;
			u32_t status;

			if (insert_head != TICKER_NULL) {
				id_insert = insert_head;
				ticker = &node[id_insert];
    b994:	2424      	movs	r4, #36	; 0x24
    b996:	9b03      	ldr	r3, [sp, #12]
				insert_head = ticker->next;

				user_op = NULL;
    b998:	2500      	movs	r5, #0
			u8_t id_insert;
			u32_t status;

			if (insert_head != TICKER_NULL) {
				id_insert = insert_head;
				ticker = &node[id_insert];
    b99a:	435c      	muls	r4, r3
    b99c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    b99e:	191c      	adds	r4, r3, r4
				insert_head = ticker->next;
    b9a0:	9b03      	ldr	r3, [sp, #12]
    b9a2:	9304      	str	r3, [sp, #16]
    b9a4:	7823      	ldrb	r3, [r4, #0]
    b9a6:	9303      	str	r3, [sp, #12]
    b9a8:	e017      	b.n	b9da <ticker_job+0x382>
				       struct ticker_user_op *user_op,
				       u32_t ticks_current)
{
	struct ticker_user_op_start *start = (void *)&user_op->params.start;

	ticker->ticks_periodic = start->ticks_periodic;
    b9aa:	68eb      	ldr	r3, [r5, #12]
					ticker_job_op_cb(user_op,
							 TICKER_STATUS_FAILURE);
					continue;
				}

				ticker_job_op_start(ticker, user_op,
    b9ac:	6979      	ldr	r1, [r7, #20]
				       struct ticker_user_op *user_op,
				       u32_t ticks_current)
{
	struct ticker_user_op_start *start = (void *)&user_op->params.start;

	ticker->ticks_periodic = start->ticks_periodic;
    b9ae:	6063      	str	r3, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
    b9b0:	692b      	ldr	r3, [r5, #16]
	ticker->ticks_slot = start->ticks_slot;
	ticker->timeout_func = start->fp_timeout_func;
	ticker->context = start->context;
	ticker->ticks_to_expire = start->ticks_first;
	ticker->ticks_to_expire_minus = 0;
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
    b9b2:	686a      	ldr	r2, [r5, #4]
				       u32_t ticks_current)
{
	struct ticker_user_op_start *start = (void *)&user_op->params.start;

	ticker->ticks_periodic = start->ticks_periodic;
	ticker->remainder_periodic = start->remainder_periodic;
    b9b4:	61e3      	str	r3, [r4, #28]
	ticker->lazy_periodic = start->lazy;
    b9b6:	8aab      	ldrh	r3, [r5, #20]
	ticker->ticks_slot = start->ticks_slot;
	ticker->timeout_func = start->fp_timeout_func;
	ticker->context = start->context;
	ticker->ticks_to_expire = start->ticks_first;
	ticker->ticks_to_expire_minus = 0;
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
    b9b8:	0020      	movs	r0, r4
{
	struct ticker_user_op_start *start = (void *)&user_op->params.start;

	ticker->ticks_periodic = start->ticks_periodic;
	ticker->remainder_periodic = start->remainder_periodic;
	ticker->lazy_periodic = start->lazy;
    b9ba:	8323      	strh	r3, [r4, #24]
	ticker->ticks_slot = start->ticks_slot;
    b9bc:	8aeb      	ldrh	r3, [r5, #22]
    b9be:	82e3      	strh	r3, [r4, #22]
	ticker->timeout_func = start->fp_timeout_func;
    b9c0:	69ab      	ldr	r3, [r5, #24]
    b9c2:	60e3      	str	r3, [r4, #12]
	ticker->context = start->context;
    b9c4:	69eb      	ldr	r3, [r5, #28]
    b9c6:	6123      	str	r3, [r4, #16]
	ticker->ticks_to_expire = start->ticks_first;
    b9c8:	68ab      	ldr	r3, [r5, #8]
	ticker->ticks_to_expire_minus = 0;
    b9ca:	82a6      	strh	r6, [r4, #20]
	ticker->remainder_periodic = start->remainder_periodic;
	ticker->lazy_periodic = start->lazy;
	ticker->ticks_slot = start->ticks_slot;
	ticker->timeout_func = start->fp_timeout_func;
	ticker->context = start->context;
	ticker->ticks_to_expire = start->ticks_first;
    b9cc:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = 0;
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
    b9ce:	f7ff fcdd 	bl	b38c <ticks_to_expire_prep>
	ticker->remainder_current = 0;
	ticker->lazy_current = 0;
	ticker->force = 1;
    b9d2:	2301      	movs	r3, #1
	ticker->timeout_func = start->fp_timeout_func;
	ticker->context = start->context;
	ticker->ticks_to_expire = start->ticks_first;
	ticker->ticks_to_expire_minus = 0;
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
	ticker->remainder_current = 0;
    b9d4:	6226      	str	r6, [r4, #32]
	ticker->lazy_current = 0;
    b9d6:	8366      	strh	r6, [r4, #26]
	ticker->force = 1;
    b9d8:	70e3      	strb	r3, [r4, #3]
static inline u32_t ticker_job_insert(struct ticker_instance *instance,
				      u8_t id_insert,
				      struct ticker_node *ticker,
				      u8_t *insert_head)
{
	struct ticker_node *node = &instance->node[0];
    b9da:	683b      	ldr	r3, [r7, #0]
	/* No. of times ticker has skipped its interval */
	if (ticker->lazy_current > ticker->lazy_periodic) {
		skip = ticker->lazy_current -
		       ticker->lazy_periodic;
	} else {
		skip = 0;
    b9dc:	2100      	movs	r1, #0
static inline u32_t ticker_job_insert(struct ticker_instance *instance,
				      u8_t id_insert,
				      struct ticker_node *ticker,
				      u8_t *insert_head)
{
	struct ticker_node *node = &instance->node[0];
    b9de:	9316      	str	r3, [sp, #88]	; 0x58
	u8_t id_collide;
	u16_t skip;

	/* Prepare to insert */
	ticker->next = TICKER_NULL;
    b9e0:	23ff      	movs	r3, #255	; 0xff

	/* No. of times ticker has skipped its interval */
	if (ticker->lazy_current > ticker->lazy_periodic) {
    b9e2:	8b22      	ldrh	r2, [r4, #24]
	struct ticker_node *node = &instance->node[0];
	u8_t id_collide;
	u16_t skip;

	/* Prepare to insert */
	ticker->next = TICKER_NULL;
    b9e4:	7023      	strb	r3, [r4, #0]

	/* No. of times ticker has skipped its interval */
	if (ticker->lazy_current > ticker->lazy_periodic) {
    b9e6:	8b63      	ldrh	r3, [r4, #26]
		skip = ticker->lazy_current -
		       ticker->lazy_periodic;
	} else {
		skip = 0;
    b9e8:	9111      	str	r1, [sp, #68]	; 0x44

	/* Prepare to insert */
	ticker->next = TICKER_NULL;

	/* No. of times ticker has skipped its interval */
	if (ticker->lazy_current > ticker->lazy_periodic) {
    b9ea:	4293      	cmp	r3, r2
    b9ec:	d902      	bls.n	b9f4 <ticker_job+0x39c>
		skip = ticker->lazy_current -
    b9ee:	1a9b      	subs	r3, r3, r2
    b9f0:	b29b      	uxth	r3, r3
    b9f2:	9311      	str	r3, [sp, #68]	; 0x44
	u8_t previous;
	u8_t current;
	u8_t collide;

	node = &instance->node[0];
	ticker_new = &node[id];
    b9f4:	2324      	movs	r3, #36	; 0x24
    b9f6:	9a04      	ldr	r2, [sp, #16]
    b9f8:	4353      	muls	r3, r2
    b9fa:	9317      	str	r3, [sp, #92]	; 0x5c
	u32_t ticks_to_expire;
	u8_t previous;
	u8_t current;
	u8_t collide;

	node = &instance->node[0];
    b9fc:	683b      	ldr	r3, [r7, #0]
    b9fe:	9309      	str	r3, [sp, #36]	; 0x24
	ticker_new = &node[id];
    ba00:	9a09      	ldr	r2, [sp, #36]	; 0x24
    ba02:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    ba04:	4694      	mov	ip, r2
    ba06:	4463      	add	r3, ip
    ba08:	469c      	mov	ip, r3
	ticks_to_expire = ticker_new->ticks_to_expire;
    ba0a:	689b      	ldr	r3, [r3, #8]
    ba0c:	9305      	str	r3, [sp, #20]

	collide = ticker_id_slot_previous = TICKER_NULL;
	current = instance->ticker_id_head;
	previous = current;
	ticks_slot_previous = instance->ticks_slot_previous;
    ba0e:	8b7a      	ldrh	r2, [r7, #26]
	node = &instance->node[0];
	ticker_new = &node[id];
	ticks_to_expire = ticker_new->ticks_to_expire;

	collide = ticker_id_slot_previous = TICKER_NULL;
	current = instance->ticker_id_head;
    ba10:	7e3b      	ldrb	r3, [r7, #24]
	previous = current;
	ticks_slot_previous = instance->ticks_slot_previous;
    ba12:	9208      	str	r2, [sp, #32]

	node = &instance->node[0];
	ticker_new = &node[id];
	ticks_to_expire = ticker_new->ticks_to_expire;

	collide = ticker_id_slot_previous = TICKER_NULL;
    ba14:	22ff      	movs	r2, #255	; 0xff
	current = instance->ticker_id_head;
	previous = current;
    ba16:	930f      	str	r3, [sp, #60]	; 0x3c

	node = &instance->node[0];
	ticker_new = &node[id];
	ticks_to_expire = ticker_new->ticks_to_expire;

	collide = ticker_id_slot_previous = TICKER_NULL;
    ba18:	9206      	str	r2, [sp, #24]
	current = instance->ticker_id_head;
	previous = current;
	ticks_slot_previous = instance->ticks_slot_previous;
	while ((current != TICKER_NULL) &&
    ba1a:	2bff      	cmp	r3, #255	; 0xff
    ba1c:	d01a      	beq.n	ba54 <ticker_job+0x3fc>
	       (ticks_to_expire >
		(ticks_to_expire_current =
		 (ticker_current = &node[current])->ticks_to_expire))) {
    ba1e:	2224      	movs	r2, #36	; 0x24
    ba20:	435a      	muls	r2, r3
    ba22:	9909      	ldr	r1, [sp, #36]	; 0x24

	collide = ticker_id_slot_previous = TICKER_NULL;
	current = instance->ticker_id_head;
	previous = current;
	ticks_slot_previous = instance->ticks_slot_previous;
	while ((current != TICKER_NULL) &&
    ba24:	9805      	ldr	r0, [sp, #20]
	       (ticks_to_expire >
		(ticks_to_expire_current =
		 (ticker_current = &node[current])->ticks_to_expire))) {
    ba26:	188a      	adds	r2, r1, r2
	current = instance->ticker_id_head;
	previous = current;
	ticks_slot_previous = instance->ticks_slot_previous;
	while ((current != TICKER_NULL) &&
	       (ticks_to_expire >
		(ticks_to_expire_current =
    ba28:	6891      	ldr	r1, [r2, #8]

	collide = ticker_id_slot_previous = TICKER_NULL;
	current = instance->ticker_id_head;
	previous = current;
	ticks_slot_previous = instance->ticks_slot_previous;
	while ((current != TICKER_NULL) &&
    ba2a:	4288      	cmp	r0, r1
    ba2c:	d912      	bls.n	ba54 <ticker_job+0x3fc>
	       (ticks_to_expire >
		(ticks_to_expire_current =
		 (ticker_current = &node[current])->ticks_to_expire))) {
		ticks_to_expire -= ticks_to_expire_current;
    ba2e:	9805      	ldr	r0, [sp, #20]
    ba30:	1a40      	subs	r0, r0, r1
    ba32:	9005      	str	r0, [sp, #20]

		if (ticker_current->ticks_slot != 0) {
    ba34:	8ad0      	ldrh	r0, [r2, #22]
    ba36:	2800      	cmp	r0, #0
    ba38:	d002      	beq.n	ba40 <ticker_job+0x3e8>
			ticks_slot_previous = ticker_current->ticks_slot;
    ba3a:	9008      	str	r0, [sp, #32]
    ba3c:	9306      	str	r3, [sp, #24]
    ba3e:	e006      	b.n	ba4e <ticker_job+0x3f6>
			ticker_id_slot_previous = current;
		} else {
			if (ticks_slot_previous > ticks_to_expire_current) {
    ba40:	9e08      	ldr	r6, [sp, #32]
    ba42:	42b1      	cmp	r1, r6
    ba44:	d202      	bcs.n	ba4c <ticker_job+0x3f4>
				ticks_slot_previous -= ticks_to_expire_current;
    ba46:	1a71      	subs	r1, r6, r1
    ba48:	9108      	str	r1, [sp, #32]
    ba4a:	e000      	b.n	ba4e <ticker_job+0x3f6>
			} else {
				ticks_slot_previous = 0;
    ba4c:	9008      	str	r0, [sp, #32]
			}
		}
		previous = current;
		current = ticker_current->next;
    ba4e:	930f      	str	r3, [sp, #60]	; 0x3c
    ba50:	7813      	ldrb	r3, [r2, #0]
    ba52:	e7e2      	b.n	ba1a <ticker_job+0x3c2>
	}

	collide = ticker_by_slot_get(&node[0], current,
				     ticks_to_expire + ticker_new->ticks_slot);
    ba54:	4662      	mov	r2, ip
		}
		previous = current;
		current = ticker_current->next;
	}

	collide = ticker_by_slot_get(&node[0], current,
    ba56:	9905      	ldr	r1, [sp, #20]
				     ticks_to_expire + ticker_new->ticks_slot);
    ba58:	8ad2      	ldrh	r2, [r2, #22]
    ba5a:	9212      	str	r2, [sp, #72]	; 0x48
		}
		previous = current;
		current = ticker_current->next;
	}

	collide = ticker_by_slot_get(&node[0], current,
    ba5c:	1850      	adds	r0, r2, r1
    ba5e:	001a      	movs	r2, r3
 * Static Functions
 ****************************************************************************/
static u8_t ticker_by_slot_get(struct ticker_node *node, u8_t ticker_id_head,
			       u32_t ticks_slot)
{
	while (ticker_id_head != TICKER_NULL) {
    ba60:	2aff      	cmp	r2, #255	; 0xff
    ba62:	d00f      	beq.n	ba84 <ticker_job+0x42c>
		struct ticker_node *ticker;
		u32_t ticks_to_expire;

		ticker = &node[ticker_id_head];
    ba64:	2124      	movs	r1, #36	; 0x24
    ba66:	4351      	muls	r1, r2
    ba68:	9e09      	ldr	r6, [sp, #36]	; 0x24
    ba6a:	1871      	adds	r1, r6, r1
		ticks_to_expire = ticker->ticks_to_expire;
    ba6c:	688e      	ldr	r6, [r1, #8]
    ba6e:	9613      	str	r6, [sp, #76]	; 0x4c

		if (ticks_slot <= ticks_to_expire) {
    ba70:	4286      	cmp	r6, r0
    ba72:	d206      	bcs.n	ba82 <ticker_job+0x42a>
			return TICKER_NULL;
		}

		if (ticker->ticks_slot) {
    ba74:	8ace      	ldrh	r6, [r1, #22]
    ba76:	2e00      	cmp	r6, #0
    ba78:	d104      	bne.n	ba84 <ticker_job+0x42c>
			break;
		}

		ticks_slot -= ticks_to_expire;
    ba7a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    ba7c:	1a80      	subs	r0, r0, r2
		ticker_id_head = ticker->next;
    ba7e:	780a      	ldrb	r2, [r1, #0]
    ba80:	e7ee      	b.n	ba60 <ticker_job+0x408>

		ticker = &node[ticker_id_head];
		ticks_to_expire = ticker->ticks_to_expire;

		if (ticks_slot <= ticks_to_expire) {
			return TICKER_NULL;
    ba82:	22ff      	movs	r2, #255	; 0xff
	}

	collide = ticker_by_slot_get(&node[0], current,
				     ticks_to_expire + ticker_new->ticks_slot);

	if ((ticker_new->ticks_slot == 0) ||
    ba84:	9912      	ldr	r1, [sp, #72]	; 0x48
    ba86:	2900      	cmp	r1, #0
    ba88:	d005      	beq.n	ba96 <ticker_job+0x43e>
    ba8a:	9908      	ldr	r1, [sp, #32]
    ba8c:	9805      	ldr	r0, [sp, #20]
    ba8e:	4288      	cmp	r0, r1
    ba90:	d327      	bcc.n	bae2 <ticker_job+0x48a>
	    ((ticks_slot_previous <= ticks_to_expire) &&
    ba92:	2aff      	cmp	r2, #255	; 0xff
    ba94:	d12e      	bne.n	baf4 <ticker_job+0x49c>
	     (collide == TICKER_NULL))) {
		ticker_new->ticks_to_expire = ticks_to_expire;
    ba96:	4662      	mov	r2, ip
    ba98:	9905      	ldr	r1, [sp, #20]
		ticker_new->next = current;
    ba9a:	7013      	strb	r3, [r2, #0]
				     ticks_to_expire + ticker_new->ticks_slot);

	if ((ticker_new->ticks_slot == 0) ||
	    ((ticks_slot_previous <= ticks_to_expire) &&
	     (collide == TICKER_NULL))) {
		ticker_new->ticks_to_expire = ticks_to_expire;
    ba9c:	6091      	str	r1, [r2, #8]
		ticker_new->next = current;

		if (previous == current) {
    ba9e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    baa0:	429a      	cmp	r2, r3
    baa2:	d10b      	bne.n	babc <ticker_job+0x464>
			instance->ticker_id_head = id;
    baa4:	466a      	mov	r2, sp
    baa6:	7c12      	ldrb	r2, [r2, #16]
    baa8:	763a      	strb	r2, [r7, #24]
    baaa:	e00e      	b.n	baca <ticker_job+0x472>
    baac:	7f172b59 	.word	0x7f172b59
    bab0:	ff172b5a 	.word	0xff172b5a
    bab4:	01d1a94a 	.word	0x01d1a94a
    bab8:	fe2e56b6 	.word	0xfe2e56b6
		} else {
			node[previous].next = id;
    babc:	2124      	movs	r1, #36	; 0x24
    babe:	4668      	mov	r0, sp
    bac0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    bac2:	7c00      	ldrb	r0, [r0, #16]
    bac4:	434a      	muls	r2, r1
    bac6:	9909      	ldr	r1, [sp, #36]	; 0x24
    bac8:	5450      	strb	r0, [r2, r1]
		}

		if (current != TICKER_NULL) {
    baca:	2bff      	cmp	r3, #255	; 0xff
    bacc:	d100      	bne.n	bad0 <ticker_job+0x478>
    bace:	e14a      	b.n	bd66 <ticker_job+0x70e>
			node[current].ticks_to_expire -= ticks_to_expire;
    bad0:	2224      	movs	r2, #36	; 0x24
    bad2:	4353      	muls	r3, r2
    bad4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    bad6:	9905      	ldr	r1, [sp, #20]
    bad8:	18d3      	adds	r3, r2, r3
    bada:	689a      	ldr	r2, [r3, #8]
    badc:	1a52      	subs	r2, r2, r1
    bade:	609a      	str	r2, [r3, #8]
    bae0:	e141      	b.n	bd66 <ticker_job+0x70e>
	} else {
		skip = 0;
	}

	/* If insert collides, remove colliding or advance to next interval */
	while (id_insert !=
    bae2:	9b04      	ldr	r3, [sp, #16]
    bae4:	9a06      	ldr	r2, [sp, #24]
    bae6:	4293      	cmp	r3, r2
    bae8:	d100      	bne.n	baec <ticker_job+0x494>
    baea:	e13c      	b.n	bd66 <ticker_job+0x70e>
	       (id_collide = ticker_enqueue(instance, id_insert))) {
		/* check for collision */
		if (id_collide != TICKER_NULL) {
    baec:	9b06      	ldr	r3, [sp, #24]
    baee:	2bff      	cmp	r3, #255	; 0xff
    baf0:	d105      	bne.n	bafe <ticker_job+0x4a6>
    baf2:	e027      	b.n	bb44 <ticker_job+0x4ec>
	} else {
		skip = 0;
	}

	/* If insert collides, remove colliding or advance to next interval */
	while (id_insert !=
    baf4:	9b04      	ldr	r3, [sp, #16]
    baf6:	4293      	cmp	r3, r2
    baf8:	d100      	bne.n	bafc <ticker_job+0x4a4>
    bafa:	e134      	b.n	bd66 <ticker_job+0x70e>
    bafc:	9206      	str	r2, [sp, #24]
	       (id_collide = ticker_enqueue(instance, id_insert))) {
		/* check for collision */
		if (id_collide != TICKER_NULL) {
			struct ticker_node *ticker_collide = &node[id_collide];
    bafe:	2624      	movs	r6, #36	; 0x24
    bb00:	9b06      	ldr	r3, [sp, #24]
			if (ticker_collide->lazy_current >
			    ticker_collide->lazy_periodic) {
				skip_collide = ticker_collide->lazy_current -
					       ticker_collide->lazy_periodic;
			} else {
				skip_collide = 0;
    bb02:	2200      	movs	r2, #0
	/* If insert collides, remove colliding or advance to next interval */
	while (id_insert !=
	       (id_collide = ticker_enqueue(instance, id_insert))) {
		/* check for collision */
		if (id_collide != TICKER_NULL) {
			struct ticker_node *ticker_collide = &node[id_collide];
    bb04:	435e      	muls	r6, r3
    bb06:	9b16      	ldr	r3, [sp, #88]	; 0x58
    bb08:	199e      	adds	r6, r3, r6
			u16_t skip_collide;

			/* No. of times ticker colliding has skipped its
			 * interval.
			 */
			if (ticker_collide->lazy_current >
    bb0a:	8b73      	ldrh	r3, [r6, #26]
			    ticker_collide->lazy_periodic) {
    bb0c:	8b31      	ldrh	r1, [r6, #24]
			u16_t skip_collide;

			/* No. of times ticker colliding has skipped its
			 * interval.
			 */
			if (ticker_collide->lazy_current >
    bb0e:	428b      	cmp	r3, r1
    bb10:	d901      	bls.n	bb16 <ticker_job+0x4be>
			    ticker_collide->lazy_periodic) {
				skip_collide = ticker_collide->lazy_current -
    bb12:	1a5b      	subs	r3, r3, r1
    bb14:	b29a      	uxth	r2, r3
					       ticker_collide->lazy_periodic;
			} else {
				skip_collide = 0;
			}

			if (ticker_collide->ticks_periodic &&
    bb16:	6873      	ldr	r3, [r6, #4]
    bb18:	2b00      	cmp	r3, #0
    bb1a:	d013      	beq.n	bb44 <ticker_job+0x4ec>
			    ticker_collide->ticks_periodic &&
    bb1c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    bb1e:	429a      	cmp	r2, r3
    bb20:	d810      	bhi.n	bb44 <ticker_job+0x4ec>
			    skip_collide <= skip &&
    bb22:	78f2      	ldrb	r2, [r6, #3]
    bb24:	78e3      	ldrb	r3, [r4, #3]
    bb26:	429a      	cmp	r2, r3
    bb28:	d20c      	bcs.n	bb44 <ticker_job+0x4ec>
			    ticker_collide->force < ticker->force) {
				/* dequeue and get the reminder of ticks
				 * to expire.
				 */
				ticker_collide->ticks_to_expire =
					ticker_dequeue(instance, id_collide);
    bb2a:	9906      	ldr	r1, [sp, #24]
    bb2c:	0038      	movs	r0, r7
    bb2e:	f7ff fc05 	bl	b33c <ticker_dequeue>

				/* unschedule node */
				ticker_collide->req = ticker_collide->ack;
    bb32:	78b3      	ldrb	r3, [r6, #2]
			    skip_collide <= skip &&
			    ticker_collide->force < ticker->force) {
				/* dequeue and get the reminder of ticks
				 * to expire.
				 */
				ticker_collide->ticks_to_expire =
    bb34:	60b0      	str	r0, [r6, #8]
					ticker_dequeue(instance, id_collide);

				/* unschedule node */
				ticker_collide->req = ticker_collide->ack;
    bb36:	7073      	strb	r3, [r6, #1]

				/* enqueue for re-insertion */
				ticker_collide->next = *insert_head;
    bb38:	466b      	mov	r3, sp
    bb3a:	7b1b      	ldrb	r3, [r3, #12]
    bb3c:	7033      	strb	r3, [r6, #0]
    bb3e:	9b06      	ldr	r3, [sp, #24]
    bb40:	9303      	str	r3, [sp, #12]
    bb42:	e75b      	b.n	b9fc <ticker_job+0x3a4>
				continue;
			}
		}

		/* occupied, try next interval */
		if (ticker->ticks_periodic != 0) {
    bb44:	6862      	ldr	r2, [r4, #4]
    bb46:	2a00      	cmp	r2, #0
    bb48:	d016      	beq.n	bb78 <ticker_job+0x520>
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
}

static u8_t ticker_remainder_inc(struct ticker_node *ticker)
{
	ticker->remainder_current += ticker->remainder_periodic;
    bb4a:	69e1      	ldr	r1, [r4, #28]
    bb4c:	6a23      	ldr	r3, [r4, #32]
    bb4e:	185b      	adds	r3, r3, r1
	if ((ticker->remainder_current < BIT(31)) &&
    bb50:	498a      	ldr	r1, [pc, #552]	; (bd7c <ticker_job+0x724>)
    bb52:	1858      	adds	r0, r3, r1
    bb54:	498a      	ldr	r1, [pc, #552]	; (bd80 <ticker_job+0x728>)
    bb56:	4288      	cmp	r0, r1
    bb58:	d902      	bls.n	bb60 <ticker_job+0x508>
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
}

static u8_t ticker_remainder_inc(struct ticker_node *ticker)
{
	ticker->remainder_current += ticker->remainder_periodic;
    bb5a:	6223      	str	r3, [r4, #32]
	if ((ticker->remainder_current < BIT(31)) &&
	    (ticker->remainder_current > (30517578UL / 2))) {
		ticker->remainder_current -= 30517578UL;
		return 1;
	}
	return 0;
    bb5c:	2300      	movs	r3, #0
    bb5e:	e003      	b.n	bb68 <ticker_job+0x510>
static u8_t ticker_remainder_inc(struct ticker_node *ticker)
{
	ticker->remainder_current += ticker->remainder_periodic;
	if ((ticker->remainder_current < BIT(31)) &&
	    (ticker->remainder_current > (30517578UL / 2))) {
		ticker->remainder_current -= 30517578UL;
    bb60:	4988      	ldr	r1, [pc, #544]	; (bd84 <ticker_job+0x72c>)
    bb62:	185b      	adds	r3, r3, r1
    bb64:	6223      	str	r3, [r4, #32]
		return 1;
    bb66:	2301      	movs	r3, #1
			}
		}

		/* occupied, try next interval */
		if (ticker->ticks_periodic != 0) {
			ticker->ticks_to_expire += ticker->ticks_periodic +
    bb68:	68a1      	ldr	r1, [r4, #8]
    bb6a:	1852      	adds	r2, r2, r1
    bb6c:	18d3      	adds	r3, r2, r3
    bb6e:	60a3      	str	r3, [r4, #8]
						   ticker_remainder_inc(ticker);
			ticker->lazy_current++;
    bb70:	8b63      	ldrh	r3, [r4, #26]
    bb72:	3301      	adds	r3, #1
    bb74:	8363      	strh	r3, [r4, #26]
    bb76:	e741      	b.n	b9fc <ticker_job+0x3a4>
		} else {
			return TICKER_STATUS_FAILURE;
    bb78:	2101      	movs	r1, #1
			}

			status = ticker_job_insert(instance, id_insert, ticker,
						   &insert_head);

			if (user_op) {
    bb7a:	2d00      	cmp	r5, #0
    bb7c:	d100      	bne.n	bb80 <ticker_job+0x528>
    bb7e:	e705      	b.n	b98c <ticker_job+0x334>
				ticker_job_op_cb(user_op, status);
    bb80:	0028      	movs	r0, r5
    bb82:	f7ff fc22 	bl	b3ca <ticker_job_op_cb>
    bb86:	e701      	b.n	b98c <ticker_job+0x334>

				user_op = NULL;
			} else {
				u8_t first;

				user_op = &user_ops[user_ops_first];
    bb88:	252c      	movs	r5, #44	; 0x2c
    bb8a:	9b07      	ldr	r3, [sp, #28]
    bb8c:	435d      	muls	r5, r3
    bb8e:	9b15      	ldr	r3, [sp, #84]	; 0x54
    bb90:	195d      	adds	r5, r3, r5
				first = user_ops_first + 1;
    bb92:	9b07      	ldr	r3, [sp, #28]
    bb94:	3301      	adds	r3, #1
    bb96:	b2db      	uxtb	r3, r3
    bb98:	9307      	str	r3, [sp, #28]
				if (first == user->count_user_op) {
    bb9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    bb9c:	9a07      	ldr	r2, [sp, #28]
    bb9e:	781b      	ldrb	r3, [r3, #0]
    bba0:	4293      	cmp	r3, r2
    bba2:	d101      	bne.n	bba8 <ticker_job+0x550>
					first = 0;
    bba4:	2300      	movs	r3, #0
    bba6:	9307      	str	r3, [sp, #28]
				}
				user_ops_first = first;

				id_insert = user_op->id;
				ticker = &node[id_insert];
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    bba8:	782b      	ldrb	r3, [r5, #0]
    bbaa:	2b03      	cmp	r3, #3
    bbac:	d005      	beq.n	bbba <ticker_job+0x562>
		u8_t user_ops_first;

		user = &users[count_user];
		user_ops = (void *)&user->user_op[0];
		user_ops_first = user->first;
		while ((insert_head != TICKER_NULL) ||
    bbae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    bbb0:	9a07      	ldr	r2, [sp, #28]
    bbb2:	789b      	ldrb	r3, [r3, #2]
    bbb4:	4293      	cmp	r3, r2
    bbb6:	d1e7      	bne.n	bb88 <ticker_job+0x530>
    bbb8:	e011      	b.n	bbde <ticker_job+0x586>
					first = 0;
				}
				user_ops_first = first;

				id_insert = user_op->id;
				ticker = &node[id_insert];
    bbba:	2424      	movs	r4, #36	; 0x24
				if (first == user->count_user_op) {
					first = 0;
				}
				user_ops_first = first;

				id_insert = user_op->id;
    bbbc:	786b      	ldrb	r3, [r5, #1]
				ticker = &node[id_insert];
    bbbe:	435c      	muls	r4, r3
				if (first == user->count_user_op) {
					first = 0;
				}
				user_ops_first = first;

				id_insert = user_op->id;
    bbc0:	9304      	str	r3, [sp, #16]
				ticker = &node[id_insert];
    bbc2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    bbc4:	191c      	adds	r4, r3, r4
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
					continue;
				}

				if (((ticker->req - ticker->ack) & 0xff) != 0) {
    bbc6:	7863      	ldrb	r3, [r4, #1]
    bbc8:	78a6      	ldrb	r6, [r4, #2]
    bbca:	1b9e      	subs	r6, r3, r6
    bbcc:	b2f6      	uxtb	r6, r6
    bbce:	2e00      	cmp	r6, #0
    bbd0:	d100      	bne.n	bbd4 <ticker_job+0x57c>
    bbd2:	e6ea      	b.n	b9aa <ticker_job+0x352>
					ticker_job_op_cb(user_op,
    bbd4:	2101      	movs	r1, #1
    bbd6:	0028      	movs	r0, r5
    bbd8:	f7ff fbf7 	bl	b3ca <ticker_job_op_cb>
    bbdc:	e7e7      	b.n	bbae <ticker_job+0x556>
    bbde:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    bbe0:	e6c3      	b.n	b96a <ticker_job+0x312>

	/* Handle insertions */
	ticker_job_list_insert(instance, insert_head);

	/* detect change in head of the list */
	if (instance->ticker_id_head != ticker_id_old_head) {
    bbe2:	7e3b      	ldrb	r3, [r7, #24]
    bbe4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    bbe6:	4293      	cmp	r3, r2
    bbe8:	d103      	bne.n	bbf2 <ticker_job+0x59a>
		flag_compare_update = 1;
	}

	/* Processing any list inquiries */
	if (!pending) {
    bbea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    bbec:	2b00      	cmp	r3, #0
    bbee:	d163      	bne.n	bcb8 <ticker_job+0x660>
    bbf0:	e005      	b.n	bbfe <ticker_job+0x5a6>
    bbf2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    bbf4:	2b00      	cmp	r3, #0
    bbf6:	d000      	beq.n	bbfa <ticker_job+0x5a2>
    bbf8:	e0ba      	b.n	bd70 <ticker_job+0x718>
	/* Handle insertions */
	ticker_job_list_insert(instance, insert_head);

	/* detect change in head of the list */
	if (instance->ticker_id_head != ticker_id_old_head) {
		flag_compare_update = 1;
    bbfa:	2301      	movs	r3, #1
    bbfc:	930d      	str	r3, [sp, #52]	; 0x34
static inline void ticker_job_list_inquire(struct ticker_instance *instance)
{
	struct ticker_user *users;
	u8_t count_user;

	users = &instance->user[0];
    bbfe:	687b      	ldr	r3, [r7, #4]
    bc00:	9306      	str	r3, [sp, #24]
    bc02:	7a7b      	ldrb	r3, [r7, #9]
    bc04:	3b01      	subs	r3, #1
    bc06:	b2dd      	uxtb	r5, r3
	count_user = instance->count_user;
	while (count_user--) {
    bc08:	2dff      	cmp	r5, #255	; 0xff
    bc0a:	d055      	beq.n	bcb8 <ticker_job+0x660>
		struct ticker_user_op *user_op;
		struct ticker_user *user;

		user = &users[count_user];
    bc0c:	9b06      	ldr	r3, [sp, #24]
    bc0e:	00ec      	lsls	r4, r5, #3
    bc10:	191c      	adds	r4, r3, r4
		user_op = &user->user_op[0];
    bc12:	6863      	ldr	r3, [r4, #4]
    bc14:	9307      	str	r3, [sp, #28]
		while (user->first != user->last) {
    bc16:	7863      	ldrb	r3, [r4, #1]
    bc18:	78e2      	ldrb	r2, [r4, #3]
    bc1a:	429a      	cmp	r2, r3
    bc1c:	d04a      	beq.n	bcb4 <ticker_job+0x65c>
			u8_t first;

			ticker_job_op_inquire(instance, &user_op[user->first]);
    bc1e:	222c      	movs	r2, #44	; 0x2c
    bc20:	4353      	muls	r3, r2
    bc22:	9a07      	ldr	r2, [sp, #28]
    bc24:	18d3      	adds	r3, r2, r3
					 struct ticker_user_op *uop)
{
	ticker_op_func fp_op_func;

	fp_op_func = NULL;
	switch (uop->op) {
    bc26:	781a      	ldrb	r2, [r3, #0]
    bc28:	2a01      	cmp	r2, #1
    bc2a:	d033      	beq.n	bc94 <ticker_job+0x63c>
    bc2c:	2a02      	cmp	r2, #2
    bc2e:	d138      	bne.n	bca2 <ticker_job+0x64a>
	case TICKER_USER_OP_TYPE_SLOT_GET:
		ticker_by_next_slot_get(instance,
    bc30:	68d9      	ldr	r1, [r3, #12]
    bc32:	685a      	ldr	r2, [r3, #4]
    bc34:	9104      	str	r1, [sp, #16]
	struct ticker_node *ticker;
	struct ticker_node *node;
	u32_t _ticks_to_expire;
	u8_t _ticker_id_head;

	node = instance->node;
    bc36:	6839      	ldr	r1, [r7, #0]
	ticker_op_func fp_op_func;

	fp_op_func = NULL;
	switch (uop->op) {
	case TICKER_USER_OP_TYPE_SLOT_GET:
		ticker_by_next_slot_get(instance,
    bc38:	9203      	str	r2, [sp, #12]
	struct ticker_node *ticker;
	struct ticker_node *node;
	u32_t _ticks_to_expire;
	u8_t _ticker_id_head;

	node = instance->node;
    bc3a:	468c      	mov	ip, r1

	_ticker_id_head = *ticker_id_head;
    bc3c:	9903      	ldr	r1, [sp, #12]
	ticker_op_func fp_op_func;

	fp_op_func = NULL;
	switch (uop->op) {
	case TICKER_USER_OP_TYPE_SLOT_GET:
		ticker_by_next_slot_get(instance,
    bc3e:	689a      	ldr	r2, [r3, #8]
	u32_t _ticks_to_expire;
	u8_t _ticker_id_head;

	node = instance->node;

	_ticker_id_head = *ticker_id_head;
    bc40:	7809      	ldrb	r1, [r1, #0]
	_ticks_to_expire = *ticks_to_expire;
	if ((_ticker_id_head == TICKER_NULL) ||
    bc42:	29ff      	cmp	r1, #255	; 0xff
    bc44:	d004      	beq.n	bc50 <ticker_job+0x5f8>
    bc46:	6810      	ldr	r0, [r2, #0]
    bc48:	0006      	movs	r6, r0
    bc4a:	6978      	ldr	r0, [r7, #20]
    bc4c:	4286      	cmp	r6, r0
    bc4e:	d004      	beq.n	bc5a <ticker_job+0x602>
	    (*ticks_current != instance->ticks_current)) {
		_ticker_id_head = instance->ticker_id_head;
		*ticks_current = instance->ticks_current;
    bc50:	6978      	ldr	r0, [r7, #20]

	_ticker_id_head = *ticker_id_head;
	_ticks_to_expire = *ticks_to_expire;
	if ((_ticker_id_head == TICKER_NULL) ||
	    (*ticks_current != instance->ticks_current)) {
		_ticker_id_head = instance->ticker_id_head;
    bc52:	7e39      	ldrb	r1, [r7, #24]
		*ticks_current = instance->ticks_current;
    bc54:	6010      	str	r0, [r2, #0]
		_ticks_to_expire = 0;
    bc56:	2200      	movs	r2, #0
    bc58:	e013      	b.n	bc82 <ticker_job+0x62a>
	} else {
		ticker = &node[_ticker_id_head];
    bc5a:	2024      	movs	r0, #36	; 0x24
    bc5c:	4341      	muls	r1, r0
		_ticker_id_head = ticker->next;
    bc5e:	4660      	mov	r0, ip
	u8_t _ticker_id_head;

	node = instance->node;

	_ticker_id_head = *ticker_id_head;
	_ticks_to_expire = *ticks_to_expire;
    bc60:	9a04      	ldr	r2, [sp, #16]
		_ticker_id_head = instance->ticker_id_head;
		*ticks_current = instance->ticks_current;
		_ticks_to_expire = 0;
	} else {
		ticker = &node[_ticker_id_head];
		_ticker_id_head = ticker->next;
    bc62:	5c41      	ldrb	r1, [r0, r1]
	u8_t _ticker_id_head;

	node = instance->node;

	_ticker_id_head = *ticker_id_head;
	_ticks_to_expire = *ticks_to_expire;
    bc64:	6812      	ldr	r2, [r2, #0]
    bc66:	e00c      	b.n	bc82 <ticker_job+0x62a>
		ticker = &node[_ticker_id_head];
		_ticker_id_head = ticker->next;
	}

	while ((_ticker_id_head != TICKER_NULL) &&
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0)) {
    bc68:	2024      	movs	r0, #36	; 0x24
    bc6a:	4348      	muls	r0, r1
    bc6c:	4460      	add	r0, ip
	} else {
		ticker = &node[_ticker_id_head];
		_ticker_id_head = ticker->next;
	}

	while ((_ticker_id_head != TICKER_NULL) &&
    bc6e:	8ac6      	ldrh	r6, [r0, #22]
    bc70:	9608      	str	r6, [sp, #32]
    bc72:	6886      	ldr	r6, [r0, #8]
    bc74:	9605      	str	r6, [sp, #20]
    bc76:	9e08      	ldr	r6, [sp, #32]
    bc78:	2e00      	cmp	r6, #0
    bc7a:	d105      	bne.n	bc88 <ticker_job+0x630>
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0)) {
		_ticks_to_expire += ticker->ticks_to_expire;
    bc7c:	9905      	ldr	r1, [sp, #20]
    bc7e:	1852      	adds	r2, r2, r1
		_ticker_id_head = ticker->next;
    bc80:	7801      	ldrb	r1, [r0, #0]
	} else {
		ticker = &node[_ticker_id_head];
		_ticker_id_head = ticker->next;
	}

	while ((_ticker_id_head != TICKER_NULL) &&
    bc82:	29ff      	cmp	r1, #255	; 0xff
    bc84:	d1f0      	bne.n	bc68 <ticker_job+0x610>
    bc86:	e001      	b.n	bc8c <ticker_job+0x634>
		_ticks_to_expire += ticker->ticks_to_expire;
		_ticker_id_head = ticker->next;
	}

	if (_ticker_id_head != TICKER_NULL) {
		_ticks_to_expire += ticker->ticks_to_expire;
    bc88:	9805      	ldr	r0, [sp, #20]
    bc8a:	1812      	adds	r2, r2, r0
	}

	*ticker_id_head = _ticker_id_head;
    bc8c:	9803      	ldr	r0, [sp, #12]
    bc8e:	7001      	strb	r1, [r0, #0]
	*ticks_to_expire = _ticks_to_expire;
    bc90:	9904      	ldr	r1, [sp, #16]
    bc92:	600a      	str	r2, [r1, #0]
					uop->params.slot_get.ticks_current,
					uop->params.slot_get.ticks_to_expire);
		/* Fall-through */

	case TICKER_USER_OP_TYPE_IDLE_GET:
		uop->status = TICKER_STATUS_SUCCESS;
    bc94:	2000      	movs	r0, #0
		fp_op_func = uop->fp_op_func;
    bc96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
					uop->params.slot_get.ticks_current,
					uop->params.slot_get.ticks_to_expire);
		/* Fall-through */

	case TICKER_USER_OP_TYPE_IDLE_GET:
		uop->status = TICKER_STATUS_SUCCESS;
    bc98:	6218      	str	r0, [r3, #32]
	default:
		/* do nothing for other ops */
		break;
	}

	if (fp_op_func) {
    bc9a:	4282      	cmp	r2, r0
    bc9c:	d001      	beq.n	bca2 <ticker_job+0x64a>
		fp_op_func(uop->status, uop->op_context);
    bc9e:	6a99      	ldr	r1, [r3, #40]	; 0x28
    bca0:	4790      	blx	r2
		while (user->first != user->last) {
			u8_t first;

			ticker_job_op_inquire(instance, &user_op[user->first]);

			first = user->first + 1;
    bca2:	7863      	ldrb	r3, [r4, #1]
			if (first == user->count_user_op) {
    bca4:	7822      	ldrb	r2, [r4, #0]
		while (user->first != user->last) {
			u8_t first;

			ticker_job_op_inquire(instance, &user_op[user->first]);

			first = user->first + 1;
    bca6:	3301      	adds	r3, #1
    bca8:	b2db      	uxtb	r3, r3
			if (first == user->count_user_op) {
    bcaa:	429a      	cmp	r2, r3
    bcac:	d100      	bne.n	bcb0 <ticker_job+0x658>
				first = 0;
    bcae:	2300      	movs	r3, #0
			}
			user->first = first;
    bcb0:	7063      	strb	r3, [r4, #1]
    bcb2:	e7b0      	b.n	bc16 <ticker_job+0x5be>
    bcb4:	1e6b      	subs	r3, r5, #1
    bcb6:	e7a6      	b.n	bc06 <ticker_job+0x5ae>
		/* Handle inquiries */
		ticker_job_list_inquire(instance);
	}

	/* Permit worker job to run */
	instance->job_guard = 0;
    bcb8:	2300      	movs	r3, #0
    bcba:	773b      	strb	r3, [r7, #28]

	/* update compare if head changed */
	if (flag_compare_update) {
    bcbc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    bcbe:	2b00      	cmp	r3, #0
    bcc0:	d048      	beq.n	bd54 <ticker_job+0x6fc>
	u32_t ctr_post;
	u32_t ctr;
	u32_t cc;
	u32_t i;

	if (instance->ticker_id_head == TICKER_NULL) {
    bcc2:	7e3b      	ldrb	r3, [r7, #24]
    bcc4:	2bff      	cmp	r3, #255	; 0xff
    bcc6:	d105      	bne.n	bcd4 <ticker_job+0x67c>
		if (cntr_stop() == 0) {
    bcc8:	f7fe fe96 	bl	a9f8 <cntr_stop>
    bccc:	2800      	cmp	r0, #0
    bcce:	d141      	bne.n	bd54 <ticker_job+0x6fc>
			instance->ticks_slot_previous = 0;
    bcd0:	8378      	strh	r0, [r7, #26]
    bcd2:	e03f      	b.n	bd54 <ticker_job+0x6fc>
		}

		return;
	}

	if (ticker_id_old_head == TICKER_NULL) {
    bcd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    bcd6:	2bff      	cmp	r3, #255	; 0xff
    bcd8:	d107      	bne.n	bcea <ticker_job+0x692>
		u32_t ticks_current;

		ticks_current = cntr_cnt_get();
    bcda:	f7fe feb9 	bl	aa50 <cntr_cnt_get>
    bcde:	0004      	movs	r4, r0

		if (cntr_start() == 0) {
    bce0:	f7fe fe7a 	bl	a9d8 <cntr_start>
    bce4:	2800      	cmp	r0, #0
    bce6:	d100      	bne.n	bcea <ticker_job+0x692>
			instance->ticks_current = ticks_current;
    bce8:	617c      	str	r4, [r7, #20]
		}
	}

	ticker = &instance->node[instance->ticker_id_head];
	ticks_to_expire = ticker->ticks_to_expire;
    bcea:	2324      	movs	r3, #36	; 0x24
    bcec:	260a      	movs	r6, #10
    bcee:	7e3a      	ldrb	r2, [r7, #24]
    bcf0:	4353      	muls	r3, r2
    bcf2:	683a      	ldr	r2, [r7, #0]
    bcf4:	18d3      	adds	r3, r2, r3
    bcf6:	689b      	ldr	r3, [r3, #8]
    bcf8:	9303      	str	r3, [sp, #12]
		u32_t ticks_elapsed;

		LL_ASSERT(i);
		i--;

		ctr = cntr_cnt_get();
    bcfa:	f7fe fea9 	bl	aa50 <cntr_cnt_get>
		cc = instance->ticks_current;
    bcfe:	697a      	ldr	r2, [r7, #20]
		u32_t ticks_elapsed;

		LL_ASSERT(i);
		i--;

		ctr = cntr_cnt_get();
    bd00:	0005      	movs	r5, r0
		cc = instance->ticks_current;
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
				COUNTER_CMP_OFFSET_MIN;
		cc += ((ticks_elapsed < ticks_to_expire) ?
		       ticks_to_expire : ticks_elapsed);
    bd02:	1a83      	subs	r3, r0, r2
    bd04:	021b      	lsls	r3, r3, #8
    bd06:	0a1b      	lsrs	r3, r3, #8
    bd08:	1cdc      	adds	r4, r3, #3
    bd0a:	9b03      	ldr	r3, [sp, #12]
    bd0c:	429c      	cmp	r4, r3
    bd0e:	d200      	bcs.n	bd12 <ticker_job+0x6ba>
    bd10:	001c      	movs	r4, r3

		ctr = cntr_cnt_get();
		cc = instance->ticks_current;
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
				COUNTER_CMP_OFFSET_MIN;
		cc += ((ticks_elapsed < ticks_to_expire) ?
    bd12:	1914      	adds	r4, r2, r4
		       ticks_to_expire : ticks_elapsed);
		cc &= 0x00FFFFFF;
    bd14:	0224      	lsls	r4, r4, #8
    bd16:	0a24      	lsrs	r4, r4, #8

		instance->fp_cmp_set(cc);
    bd18:	0020      	movs	r0, r4
    bd1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    bd1c:	4798      	blx	r3

		ctr_post = cntr_cnt_get();
    bd1e:	f7fe fe97 	bl	aa50 <cntr_cnt_get>
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
		  COUNTER_CMP_OFFSET_MIN) > ticker_ticks_diff_get(cc, ctr));
    bd22:	1b40      	subs	r0, r0, r5
    bd24:	0200      	lsls	r0, r0, #8
    bd26:	0a00      	lsrs	r0, r0, #8
    bd28:	1b64      	subs	r4, r4, r5
    bd2a:	0224      	lsls	r4, r4, #8
    bd2c:	3003      	adds	r0, #3
    bd2e:	0a24      	lsrs	r4, r4, #8
    bd30:	42a0      	cmp	r0, r4
    bd32:	d90f      	bls.n	bd54 <ticker_job+0x6fc>
    bd34:	3e01      	subs	r6, #1
	 */
	i = 10;
	do {
		u32_t ticks_elapsed;

		LL_ASSERT(i);
    bd36:	2e00      	cmp	r6, #0
    bd38:	d1df      	bne.n	bcfa <ticker_job+0x6a2>
    bd3a:	4b13      	ldr	r3, [pc, #76]	; (bd88 <ticker_job+0x730>)
    bd3c:	4a13      	ldr	r2, [pc, #76]	; (bd8c <ticker_job+0x734>)
    bd3e:	9301      	str	r3, [sp, #4]
    bd40:	4b13      	ldr	r3, [pc, #76]	; (bd90 <ticker_job+0x738>)
    bd42:	4914      	ldr	r1, [pc, #80]	; (bd94 <ticker_job+0x73c>)
    bd44:	9300      	str	r3, [sp, #0]
    bd46:	4814      	ldr	r0, [pc, #80]	; (bd98 <ticker_job+0x740>)
    bd48:	4b14      	ldr	r3, [pc, #80]	; (bd9c <ticker_job+0x744>)
    bd4a:	f7f5 fe19 	bl	1980 <printk>
    bd4e:	b662      	cpsie	i
    bd50:	2004      	movs	r0, #4
    bd52:	df02      	svc	2
	if (flag_compare_update) {
		ticker_job_compare_update(instance, ticker_id_old_head);
	}

	/* trigger worker if deferred */
	if (instance->worker_trigger) {
    bd54:	7f7b      	ldrb	r3, [r7, #29]
    bd56:	2b00      	cmp	r3, #0
    bd58:	d00d      	beq.n	bd76 <ticker_job+0x71e>
		instance->fp_sched(CALL_ID_JOB, CALL_ID_WORKER, 1);
    bd5a:	2201      	movs	r2, #1
    bd5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    bd5e:	0011      	movs	r1, r2
    bd60:	2002      	movs	r0, #2
    bd62:	4798      	blx	r3
    bd64:	e007      	b.n	bd76 <ticker_job+0x71e>
			return TICKER_STATUS_FAILURE;
		}
	}

	/* Inserted/Scheduled */
	ticker->req = ticker->ack + 1;
    bd66:	78a3      	ldrb	r3, [r4, #2]

	return TICKER_STATUS_SUCCESS;
    bd68:	2100      	movs	r1, #0
			return TICKER_STATUS_FAILURE;
		}
	}

	/* Inserted/Scheduled */
	ticker->req = ticker->ack + 1;
    bd6a:	3301      	adds	r3, #1
    bd6c:	7063      	strb	r3, [r4, #1]
    bd6e:	e704      	b.n	bb7a <ticker_job+0x522>
		/* Handle inquiries */
		ticker_job_list_inquire(instance);
	}

	/* Permit worker job to run */
	instance->job_guard = 0;
    bd70:	2300      	movs	r3, #0
    bd72:	773b      	strb	r3, [r7, #28]
    bd74:	e7a5      	b.n	bcc2 <ticker_job+0x66a>
	if (instance->worker_trigger) {
		instance->fp_sched(CALL_ID_JOB, CALL_ID_WORKER, 1);
	}

	DEBUG_TICKER_JOB(0);
}
    bd76:	b019      	add	sp, #100	; 0x64
    bd78:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bd7a:	46c0      	nop			; (mov r8, r8)
    bd7c:	ff172b5a 	.word	0xff172b5a
    bd80:	7f172b59 	.word	0x7f172b59
    bd84:	fe2e56b6 	.word	0xfe2e56b6
    bd88:	000154c4 	.word	0x000154c4
    bd8c:	00015484 	.word	0x00015484
    bd90:	000154c9 	.word	0x000154c9
    bd94:	0001548b 	.word	0x0001548b
    bd98:	00016ac9 	.word	0x00016ac9
    bd9c:	00017e27 	.word	0x00017e27

0000bda0 <ticker_init>:
/*****************************************************************************
 * Public Interface
 ****************************************************************************/
u32_t ticker_init(u8_t instance_index, u8_t count_node, void *node,
		  u8_t count_user, void *user, u8_t count_op, void *user_op)
{
    bda0:	b5f0      	push	{r4, r5, r6, r7, lr}
    bda2:	0006      	movs	r6, r0
    bda4:	a805      	add	r0, sp, #20
    bda6:	c880      	ldmia	r0!, {r7}
    bda8:	7804      	ldrb	r4, [r0, #0]
	    (sizeof(struct ticker_user) != TICKER_USER_T_SIZE) ||
	    (sizeof(struct ticker_user_op) != TICKER_USER_OP_T_SIZE)) {
		return TICKER_STATUS_FAILURE;
	}

	switch (instance_index) {
    bdaa:	2e00      	cmp	r6, #0
    bdac:	d009      	beq.n	bdc2 <ticker_init+0x22>
    bdae:	2e01      	cmp	r6, #1
    bdb0:	d139      	bne.n	be26 <ticker_init+0x86>
		instance->fp_sched = ticker_instance0_sched;
		instance->fp_cmp_set = ticker_instance0_cmp_set;
		break;

	case 1:
		instance->fp_caller_id_get = ticker_instance1_caller_id_get;
    bdb2:	481e      	ldr	r0, [pc, #120]	; (be2c <ticker_init+0x8c>)
    bdb4:	4d1e      	ldr	r5, [pc, #120]	; (be30 <ticker_init+0x90>)
    bdb6:	64c5      	str	r5, [r0, #76]	; 0x4c
		instance->fp_sched = ticker_instance1_sched;
    bdb8:	4d1e      	ldr	r5, [pc, #120]	; (be34 <ticker_init+0x94>)
    bdba:	6505      	str	r5, [r0, #80]	; 0x50
		instance->fp_cmp_set = ticker_instance1_cmp_set;
    bdbc:	4d1e      	ldr	r5, [pc, #120]	; (be38 <ticker_init+0x98>)
    bdbe:	6545      	str	r5, [r0, #84]	; 0x54
		break;
    bdc0:	e006      	b.n	bdd0 <ticker_init+0x30>
		return TICKER_STATUS_FAILURE;
	}

	switch (instance_index) {
	case 0:
		instance->fp_caller_id_get = ticker_instance0_caller_id_get;
    bdc2:	481a      	ldr	r0, [pc, #104]	; (be2c <ticker_init+0x8c>)
    bdc4:	4d1d      	ldr	r5, [pc, #116]	; (be3c <ticker_init+0x9c>)
    bdc6:	6205      	str	r5, [r0, #32]
		instance->fp_sched = ticker_instance0_sched;
    bdc8:	4d1d      	ldr	r5, [pc, #116]	; (be40 <ticker_init+0xa0>)
    bdca:	6245      	str	r5, [r0, #36]	; 0x24
		instance->fp_cmp_set = ticker_instance0_cmp_set;
    bdcc:	4d1d      	ldr	r5, [pc, #116]	; (be44 <ticker_init+0xa4>)
    bdce:	6285      	str	r5, [r0, #40]	; 0x28

	default:
		return TICKER_STATUS_FAILURE;
	}

	instance->count_node = count_node;
    bdd0:	202c      	movs	r0, #44	; 0x2c
    bdd2:	4370      	muls	r0, r6
    bdd4:	4684      	mov	ip, r0
    bdd6:	4d15      	ldr	r5, [pc, #84]	; (be2c <ticker_init+0x8c>)
    bdd8:	1828      	adds	r0, r5, r0
    bdda:	7201      	strb	r1, [r0, #8]
	instance->node = node;
    bddc:	4661      	mov	r1, ip
    bdde:	514a      	str	r2, [r1, r5]
	/** @todo check if enough ticker_user_op supplied */

	users = &instance->user[0];
	while (count_user--) {
		users[count_user].user_op = user_op_;
		user_op_ += users[count_user].count_user_op;
    bde0:	222c      	movs	r2, #44	; 0x2c
    bde2:	4694      	mov	ip, r2
	}

	instance->count_node = count_node;
	instance->node = node;

	instance->count_user = count_user;
    bde4:	7243      	strb	r3, [r0, #9]
	instance->user = user;
    bde6:	6047      	str	r7, [r0, #4]

	/** @todo check if enough ticker_user_op supplied */

	users = &instance->user[0];
	while (count_user--) {
    bde8:	3b01      	subs	r3, #1
    bdea:	b2db      	uxtb	r3, r3
    bdec:	2bff      	cmp	r3, #255	; 0xff
    bdee:	d00c      	beq.n	be0a <ticker_init+0x6a>
		users[count_user].user_op = user_op_;
    bdf0:	9807      	ldr	r0, [sp, #28]
    bdf2:	00da      	lsls	r2, r3, #3
    bdf4:	18ba      	adds	r2, r7, r2
    bdf6:	6050      	str	r0, [r2, #4]
		user_op_ += users[count_user].count_user_op;
    bdf8:	4660      	mov	r0, ip
    bdfa:	7812      	ldrb	r2, [r2, #0]
    bdfc:	9907      	ldr	r1, [sp, #28]
    bdfe:	4350      	muls	r0, r2
		count_op -= users[count_user].count_user_op;
    be00:	1aa4      	subs	r4, r4, r2
	/** @todo check if enough ticker_user_op supplied */

	users = &instance->user[0];
	while (count_user--) {
		users[count_user].user_op = user_op_;
		user_op_ += users[count_user].count_user_op;
    be02:	1808      	adds	r0, r1, r0
    be04:	9007      	str	r0, [sp, #28]
		count_op -= users[count_user].count_user_op;
    be06:	b2e4      	uxtb	r4, r4
    be08:	e7ee      	b.n	bde8 <ticker_init+0x48>
	}

	if (count_op) {
		return TICKER_STATUS_FAILURE;
    be0a:	2001      	movs	r0, #1
		users[count_user].user_op = user_op_;
		user_op_ += users[count_user].count_user_op;
		count_op -= users[count_user].count_user_op;
	}

	if (count_op) {
    be0c:	2c00      	cmp	r4, #0
    be0e:	d10b      	bne.n	be28 <ticker_init+0x88>
		return TICKER_STATUS_FAILURE;
	}

	instance->ticker_id_head = TICKER_NULL;
    be10:	302b      	adds	r0, #43	; 0x2b
    be12:	4346      	muls	r6, r0
    be14:	19ae      	adds	r6, r5, r6
    be16:	7633      	strb	r3, [r6, #24]
	instance->ticker_id_slot_previous = TICKER_NULL;
    be18:	7673      	strb	r3, [r6, #25]
	instance->ticks_slot_previous = 0;
    be1a:	8374      	strh	r4, [r6, #26]
	instance->ticks_current = 0;
    be1c:	6174      	str	r4, [r6, #20]
	instance->ticks_elapsed_first = 0;
    be1e:	72b4      	strb	r4, [r6, #10]
	instance->ticks_elapsed_last = 0;
    be20:	72f4      	strb	r4, [r6, #11]

	return TICKER_STATUS_SUCCESS;
    be22:	0020      	movs	r0, r4
    be24:	e000      	b.n	be28 <ticker_init+0x88>
		instance->fp_sched = ticker_instance1_sched;
		instance->fp_cmp_set = ticker_instance1_cmp_set;
		break;

	default:
		return TICKER_STATUS_FAILURE;
    be26:	2001      	movs	r0, #1
	instance->ticks_current = 0;
	instance->ticks_elapsed_first = 0;
	instance->ticks_elapsed_last = 0;

	return TICKER_STATUS_SUCCESS;
}
    be28:	bdf0      	pop	{r4, r5, r6, r7, pc}
    be2a:	46c0      	nop			; (mov r8, r8)
    be2c:	20001504 	.word	0x20001504
    be30:	0000b529 	.word	0x0000b529
    be34:	0000b3fd 	.word	0x0000b3fd
    be38:	0000b3e3 	.word	0x0000b3e3
    be3c:	0000b569 	.word	0x0000b569
    be40:	0000b491 	.word	0x0000b491
    be44:	0000b3ef 	.word	0x0000b3ef

0000be48 <ticker_trigger>:

void ticker_trigger(u8_t instance_index)
{
	DEBUG_TICKER_ISR(1);

	if (_instance[instance_index].fp_sched) {
    be48:	232c      	movs	r3, #44	; 0x2c
    be4a:	4358      	muls	r0, r3
    be4c:	4b05      	ldr	r3, [pc, #20]	; (be64 <ticker_trigger+0x1c>)
{
	return !!(_instance[instance_index].count_node);
}

void ticker_trigger(u8_t instance_index)
{
    be4e:	b510      	push	{r4, lr}
	DEBUG_TICKER_ISR(1);

	if (_instance[instance_index].fp_sched) {
    be50:	1818      	adds	r0, r3, r0
    be52:	6a43      	ldr	r3, [r0, #36]	; 0x24
    be54:	2b00      	cmp	r3, #0
    be56:	d003      	beq.n	be60 <ticker_trigger+0x18>
		_instance[instance_index].fp_sched(CALL_ID_TRIGGER,
    be58:	2201      	movs	r2, #1
    be5a:	2000      	movs	r0, #0
    be5c:	0011      	movs	r1, r2
    be5e:	4798      	blx	r3
						   CALL_ID_WORKER, 1);
	}

	DEBUG_TICKER_ISR(0);
}
    be60:	bd10      	pop	{r4, pc}
    be62:	46c0      	nop			; (mov r8, r8)
    be64:	20001504 	.word	0x20001504

0000be68 <ticker_start>:
u32_t ticker_start(u8_t instance_index, u8_t user_id, u8_t ticker_id,
		   u32_t ticks_anchor, u32_t ticks_first, u32_t ticks_periodic,
		   u32_t remainder_periodic, u16_t lazy, u16_t ticks_slot,
		   ticker_timeout_func ticker_timeout_func, void *context,
		   ticker_op_func fp_op_func, void *op_context)
{
    be68:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct ticker_instance *instance = &_instance[instance_index];
	struct ticker_user_op *user_op;
	struct ticker_user *user;
	u8_t last;

	user = &instance->user[user_id];
    be6a:	242c      	movs	r4, #44	; 0x2c
u32_t ticker_start(u8_t instance_index, u8_t user_id, u8_t ticker_id,
		   u32_t ticks_anchor, u32_t ticks_first, u32_t ticks_periodic,
		   u32_t remainder_periodic, u16_t lazy, u16_t ticks_slot,
		   ticker_timeout_func ticker_timeout_func, void *context,
		   ticker_op_func fp_op_func, void *op_context)
{
    be6c:	b085      	sub	sp, #20
    be6e:	9301      	str	r3, [sp, #4]
    be70:	ab0d      	add	r3, sp, #52	; 0x34
    be72:	881b      	ldrh	r3, [r3, #0]
	struct ticker_instance *instance = &_instance[instance_index];
	struct ticker_user_op *user_op;
	struct ticker_user *user;
	u8_t last;

	user = &instance->user[user_id];
    be74:	4360      	muls	r0, r4
u32_t ticker_start(u8_t instance_index, u8_t user_id, u8_t ticker_id,
		   u32_t ticks_anchor, u32_t ticks_first, u32_t ticks_periodic,
		   u32_t remainder_periodic, u16_t lazy, u16_t ticks_slot,
		   ticker_timeout_func ticker_timeout_func, void *context,
		   ticker_op_func fp_op_func, void *op_context)
{
    be76:	9302      	str	r3, [sp, #8]
    be78:	ab0e      	add	r3, sp, #56	; 0x38
    be7a:	881b      	ldrh	r3, [r3, #0]
	struct ticker_instance *instance = &_instance[instance_index];
	struct ticker_user_op *user_op;
	struct ticker_user *user;
	u8_t last;

	user = &instance->user[user_id];
    be7c:	00cd      	lsls	r5, r1, #3
u32_t ticker_start(u8_t instance_index, u8_t user_id, u8_t ticker_id,
		   u32_t ticks_anchor, u32_t ticks_first, u32_t ticks_periodic,
		   u32_t remainder_periodic, u16_t lazy, u16_t ticks_slot,
		   ticker_timeout_func ticker_timeout_func, void *context,
		   ticker_op_func fp_op_func, void *op_context)
{
    be7e:	9303      	str	r3, [sp, #12]
	struct ticker_instance *instance = &_instance[instance_index];
	struct ticker_user_op *user_op;
	struct ticker_user *user;
	u8_t last;

	user = &instance->user[user_id];
    be80:	4b1c      	ldr	r3, [pc, #112]	; (bef4 <ticker_start+0x8c>)
    be82:	181b      	adds	r3, r3, r0
    be84:	6858      	ldr	r0, [r3, #4]
    be86:	1945      	adds	r5, r0, r5

	last = user->last + 1;
    be88:	78ee      	ldrb	r6, [r5, #3]
	if (last >= user->count_user_op) {
    be8a:	7828      	ldrb	r0, [r5, #0]
	struct ticker_user *user;
	u8_t last;

	user = &instance->user[user_id];

	last = user->last + 1;
    be8c:	1c77      	adds	r7, r6, #1
    be8e:	b2ff      	uxtb	r7, r7
	if (last >= user->count_user_op) {
		last = 0;
    be90:	4287      	cmp	r7, r0
    be92:	4180      	sbcs	r0, r0
    be94:	4007      	ands	r7, r0
	}

	if (last == user->first) {
    be96:	7868      	ldrb	r0, [r5, #1]
    be98:	4684      	mov	ip, r0
		return TICKER_STATUS_FAILURE;
    be9a:	2001      	movs	r0, #1
	last = user->last + 1;
	if (last >= user->count_user_op) {
		last = 0;
	}

	if (last == user->first) {
    be9c:	45bc      	cmp	ip, r7
    be9e:	d026      	beq.n	beee <ticker_start+0x86>
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
    bea0:	4374      	muls	r4, r6
    bea2:	6868      	ldr	r0, [r5, #4]
	user_op->params.start.remainder_periodic = remainder_periodic;
	user_op->params.start.ticks_slot = ticks_slot;
	user_op->params.start.lazy = lazy;
	user_op->params.start.fp_timeout_func = ticker_timeout_func;
	user_op->params.start.context = context;
	user_op->status = TICKER_STATUS_BUSY;
    bea4:	2602      	movs	r6, #2

	if (last == user->first) {
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
    bea6:	1904      	adds	r4, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_START;
	user_op->id = ticker_id;
    bea8:	7062      	strb	r2, [r4, #1]
	user_op->params.start.ticks_at_start = ticks_anchor;
    beaa:	9a01      	ldr	r2, [sp, #4]
	if (last == user->first) {
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
	user_op->op = TICKER_USER_OP_TYPE_START;
    beac:	2003      	movs	r0, #3
	user_op->id = ticker_id;
	user_op->params.start.ticks_at_start = ticks_anchor;
    beae:	6062      	str	r2, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
    beb0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	if (last == user->first) {
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
	user_op->op = TICKER_USER_OP_TYPE_START;
    beb2:	7020      	strb	r0, [r4, #0]
	user_op->id = ticker_id;
	user_op->params.start.ticks_at_start = ticks_anchor;
	user_op->params.start.ticks_first = ticks_first;
    beb4:	60a2      	str	r2, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
    beb6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	user_op->params.start.remainder_periodic = remainder_periodic;
	user_op->params.start.ticks_slot = ticks_slot;
	user_op->params.start.lazy = lazy;
	user_op->params.start.fp_timeout_func = ticker_timeout_func;
	user_op->params.start.context = context;
	user_op->status = TICKER_STATUS_BUSY;
    beb8:	6226      	str	r6, [r4, #32]
	user_op = &user->user_op[user->last];
	user_op->op = TICKER_USER_OP_TYPE_START;
	user_op->id = ticker_id;
	user_op->params.start.ticks_at_start = ticks_anchor;
	user_op->params.start.ticks_first = ticks_first;
	user_op->params.start.ticks_periodic = ticks_periodic;
    beba:	60e2      	str	r2, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
    bebc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	user_op->fp_op_func = fp_op_func;
	user_op->op_context = op_context;

	user->last = last;

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
    bebe:	0008      	movs	r0, r1
	user_op->op = TICKER_USER_OP_TYPE_START;
	user_op->id = ticker_id;
	user_op->params.start.ticks_at_start = ticks_anchor;
	user_op->params.start.ticks_first = ticks_first;
	user_op->params.start.ticks_periodic = ticks_periodic;
	user_op->params.start.remainder_periodic = remainder_periodic;
    bec0:	6122      	str	r2, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
    bec2:	466a      	mov	r2, sp
    bec4:	8992      	ldrh	r2, [r2, #12]
    bec6:	82e2      	strh	r2, [r4, #22]
	user_op->params.start.lazy = lazy;
    bec8:	466a      	mov	r2, sp
    beca:	8912      	ldrh	r2, [r2, #8]
    becc:	82a2      	strh	r2, [r4, #20]
	user_op->params.start.fp_timeout_func = ticker_timeout_func;
    bece:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    bed0:	61a2      	str	r2, [r4, #24]
	user_op->params.start.context = context;
    bed2:	9a10      	ldr	r2, [sp, #64]	; 0x40
    bed4:	61e2      	str	r2, [r4, #28]
	user_op->status = TICKER_STATUS_BUSY;
	user_op->fp_op_func = fp_op_func;
    bed6:	9a11      	ldr	r2, [sp, #68]	; 0x44
    bed8:	6262      	str	r2, [r4, #36]	; 0x24
	user_op->op_context = op_context;
    beda:	9a12      	ldr	r2, [sp, #72]	; 0x48
    bedc:	62a2      	str	r2, [r4, #40]	; 0x28

	user->last = last;
    bede:	70ef      	strb	r7, [r5, #3]

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
    bee0:	6a5d      	ldr	r5, [r3, #36]	; 0x24
    bee2:	6a1b      	ldr	r3, [r3, #32]
    bee4:	4798      	blx	r3
    bee6:	2200      	movs	r2, #0
    bee8:	0031      	movs	r1, r6
    beea:	47a8      	blx	r5

	return user_op->status;
    beec:	6a20      	ldr	r0, [r4, #32]
}
    beee:	b005      	add	sp, #20
    bef0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bef2:	46c0      	nop			; (mov r8, r8)
    bef4:	20001504 	.word	0x20001504

0000bef8 <ticker_update>:

u32_t ticker_update(u8_t instance_index, u8_t user_id, u8_t ticker_id,
		    u16_t ticks_drift_plus, u16_t ticks_drift_minus,
		    u16_t ticks_slot_plus, u16_t ticks_slot_minus, u16_t lazy,
		    u8_t force, ticker_op_func fp_op_func, void *op_context)
{
    bef8:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct ticker_instance *instance = &_instance[instance_index];
	struct ticker_user_op *user_op;
	struct ticker_user *user;
	u8_t last;

	user = &instance->user[user_id];
    befa:	242c      	movs	r4, #44	; 0x2c

u32_t ticker_update(u8_t instance_index, u8_t user_id, u8_t ticker_id,
		    u16_t ticks_drift_plus, u16_t ticks_drift_minus,
		    u16_t ticks_slot_plus, u16_t ticks_slot_minus, u16_t lazy,
		    u8_t force, ticker_op_func fp_op_func, void *op_context)
{
    befc:	b087      	sub	sp, #28
    befe:	9300      	str	r3, [sp, #0]
    bf00:	ab0c      	add	r3, sp, #48	; 0x30
    bf02:	881b      	ldrh	r3, [r3, #0]
	struct ticker_instance *instance = &_instance[instance_index];
	struct ticker_user_op *user_op;
	struct ticker_user *user;
	u8_t last;

	user = &instance->user[user_id];
    bf04:	4360      	muls	r0, r4

u32_t ticker_update(u8_t instance_index, u8_t user_id, u8_t ticker_id,
		    u16_t ticks_drift_plus, u16_t ticks_drift_minus,
		    u16_t ticks_slot_plus, u16_t ticks_slot_minus, u16_t lazy,
		    u8_t force, ticker_op_func fp_op_func, void *op_context)
{
    bf06:	9301      	str	r3, [sp, #4]
    bf08:	ab0d      	add	r3, sp, #52	; 0x34
    bf0a:	881b      	ldrh	r3, [r3, #0]
	struct ticker_instance *instance = &_instance[instance_index];
	struct ticker_user_op *user_op;
	struct ticker_user *user;
	u8_t last;

	user = &instance->user[user_id];
    bf0c:	00cd      	lsls	r5, r1, #3

u32_t ticker_update(u8_t instance_index, u8_t user_id, u8_t ticker_id,
		    u16_t ticks_drift_plus, u16_t ticks_drift_minus,
		    u16_t ticks_slot_plus, u16_t ticks_slot_minus, u16_t lazy,
		    u8_t force, ticker_op_func fp_op_func, void *op_context)
{
    bf0e:	9302      	str	r3, [sp, #8]
    bf10:	ab0e      	add	r3, sp, #56	; 0x38
    bf12:	881b      	ldrh	r3, [r3, #0]
    bf14:	9303      	str	r3, [sp, #12]
    bf16:	ab0f      	add	r3, sp, #60	; 0x3c
    bf18:	881b      	ldrh	r3, [r3, #0]
    bf1a:	9304      	str	r3, [sp, #16]
    bf1c:	ab10      	add	r3, sp, #64	; 0x40
    bf1e:	781b      	ldrb	r3, [r3, #0]
    bf20:	9305      	str	r3, [sp, #20]
	struct ticker_instance *instance = &_instance[instance_index];
	struct ticker_user_op *user_op;
	struct ticker_user *user;
	u8_t last;

	user = &instance->user[user_id];
    bf22:	4b1c      	ldr	r3, [pc, #112]	; (bf94 <ticker_update+0x9c>)
    bf24:	181b      	adds	r3, r3, r0
    bf26:	6858      	ldr	r0, [r3, #4]
    bf28:	1945      	adds	r5, r0, r5

	last = user->last + 1;
    bf2a:	78ee      	ldrb	r6, [r5, #3]
	if (last >= user->count_user_op) {
    bf2c:	7828      	ldrb	r0, [r5, #0]
	struct ticker_user *user;
	u8_t last;

	user = &instance->user[user_id];

	last = user->last + 1;
    bf2e:	1c77      	adds	r7, r6, #1
    bf30:	b2ff      	uxtb	r7, r7
	if (last >= user->count_user_op) {
		last = 0;
    bf32:	4287      	cmp	r7, r0
    bf34:	4180      	sbcs	r0, r0
    bf36:	4007      	ands	r7, r0
	}

	if (last == user->first) {
    bf38:	7868      	ldrb	r0, [r5, #1]
    bf3a:	4684      	mov	ip, r0
		return TICKER_STATUS_FAILURE;
    bf3c:	2001      	movs	r0, #1
	last = user->last + 1;
	if (last >= user->count_user_op) {
		last = 0;
	}

	if (last == user->first) {
    bf3e:	45bc      	cmp	ip, r7
    bf40:	d026      	beq.n	bf90 <ticker_update+0x98>
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
    bf42:	4374      	muls	r4, r6
    bf44:	6868      	ldr	r0, [r5, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
	user_op->params.update.lazy = lazy;
	user_op->params.update.force = force;
	user_op->status = TICKER_STATUS_BUSY;
    bf46:	2602      	movs	r6, #2

	if (last == user->first) {
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
    bf48:	1904      	adds	r4, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
	user_op->id = ticker_id;
    bf4a:	7062      	strb	r2, [r4, #1]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
    bf4c:	466a      	mov	r2, sp
    bf4e:	8812      	ldrh	r2, [r2, #0]
	if (last == user->first) {
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
    bf50:	2004      	movs	r0, #4
	user_op->id = ticker_id;
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
    bf52:	80a2      	strh	r2, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
    bf54:	466a      	mov	r2, sp
    bf56:	8892      	ldrh	r2, [r2, #4]
	if (last == user->first) {
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
    bf58:	7020      	strb	r0, [r4, #0]
	user_op->id = ticker_id;
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
    bf5a:	80e2      	strh	r2, [r4, #6]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
    bf5c:	466a      	mov	r2, sp
    bf5e:	8912      	ldrh	r2, [r2, #8]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
	user_op->params.update.lazy = lazy;
	user_op->params.update.force = force;
	user_op->status = TICKER_STATUS_BUSY;
    bf60:	6226      	str	r6, [r4, #32]
	user_op = &user->user_op[user->last];
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
	user_op->id = ticker_id;
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
    bf62:	8122      	strh	r2, [r4, #8]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
    bf64:	466a      	mov	r2, sp
    bf66:	8992      	ldrh	r2, [r2, #12]
	user_op->fp_op_func = fp_op_func;
	user_op->op_context = op_context;

	user->last = last;

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
    bf68:	0008      	movs	r0, r1
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
	user_op->id = ticker_id;
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
    bf6a:	8162      	strh	r2, [r4, #10]
	user_op->params.update.lazy = lazy;
    bf6c:	466a      	mov	r2, sp
    bf6e:	8a12      	ldrh	r2, [r2, #16]
    bf70:	81a2      	strh	r2, [r4, #12]
	user_op->params.update.force = force;
    bf72:	466a      	mov	r2, sp
    bf74:	7d12      	ldrb	r2, [r2, #20]
    bf76:	73a2      	strb	r2, [r4, #14]
	user_op->status = TICKER_STATUS_BUSY;
	user_op->fp_op_func = fp_op_func;
    bf78:	9a11      	ldr	r2, [sp, #68]	; 0x44
    bf7a:	6262      	str	r2, [r4, #36]	; 0x24
	user_op->op_context = op_context;
    bf7c:	9a12      	ldr	r2, [sp, #72]	; 0x48
    bf7e:	62a2      	str	r2, [r4, #40]	; 0x28

	user->last = last;
    bf80:	70ef      	strb	r7, [r5, #3]

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
    bf82:	6a5d      	ldr	r5, [r3, #36]	; 0x24
    bf84:	6a1b      	ldr	r3, [r3, #32]
    bf86:	4798      	blx	r3
    bf88:	2200      	movs	r2, #0
    bf8a:	0031      	movs	r1, r6
    bf8c:	47a8      	blx	r5

	return user_op->status;
    bf8e:	6a20      	ldr	r0, [r4, #32]
}
    bf90:	b007      	add	sp, #28
    bf92:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bf94:	20001504 	.word	0x20001504

0000bf98 <ticker_stop>:

u32_t ticker_stop(u8_t instance_index, u8_t user_id, u8_t ticker_id,
		  ticker_op_func fp_op_func, void *op_context)
{
    bf98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct ticker_instance *instance = &_instance[instance_index];
	struct ticker_user_op *user_op;
	struct ticker_user *user;
	u8_t last;

	user = &instance->user[user_id];
    bf9a:	242c      	movs	r4, #44	; 0x2c
    bf9c:	4360      	muls	r0, r4
	return user_op->status;
}

u32_t ticker_stop(u8_t instance_index, u8_t user_id, u8_t ticker_id,
		  ticker_op_func fp_op_func, void *op_context)
{
    bf9e:	9301      	str	r3, [sp, #4]
	struct ticker_instance *instance = &_instance[instance_index];
	struct ticker_user_op *user_op;
	struct ticker_user *user;
	u8_t last;

	user = &instance->user[user_id];
    bfa0:	4b13      	ldr	r3, [pc, #76]	; (bff0 <ticker_stop+0x58>)
    bfa2:	00cd      	lsls	r5, r1, #3
    bfa4:	181b      	adds	r3, r3, r0
    bfa6:	6858      	ldr	r0, [r3, #4]
    bfa8:	1945      	adds	r5, r0, r5

	last = user->last + 1;
    bfaa:	78ee      	ldrb	r6, [r5, #3]
	if (last >= user->count_user_op) {
    bfac:	7828      	ldrb	r0, [r5, #0]
	struct ticker_user *user;
	u8_t last;

	user = &instance->user[user_id];

	last = user->last + 1;
    bfae:	1c77      	adds	r7, r6, #1
    bfb0:	b2ff      	uxtb	r7, r7
	if (last >= user->count_user_op) {
		last = 0;
    bfb2:	4287      	cmp	r7, r0
    bfb4:	4180      	sbcs	r0, r0
    bfb6:	4007      	ands	r7, r0
	}

	if (last == user->first) {
    bfb8:	7868      	ldrb	r0, [r5, #1]
    bfba:	4684      	mov	ip, r0
		return TICKER_STATUS_FAILURE;
    bfbc:	2001      	movs	r0, #1
	last = user->last + 1;
	if (last >= user->count_user_op) {
		last = 0;
	}

	if (last == user->first) {
    bfbe:	45bc      	cmp	ip, r7
    bfc0:	d014      	beq.n	bfec <ticker_stop+0x54>
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
    bfc2:	4374      	muls	r4, r6
    bfc4:	6868      	ldr	r0, [r5, #4]
	user_op->op = TICKER_USER_OP_TYPE_STOP;
	user_op->id = ticker_id;
	user_op->status = TICKER_STATUS_BUSY;
    bfc6:	2602      	movs	r6, #2

	if (last == user->first) {
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
    bfc8:	1904      	adds	r4, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_STOP;
    bfca:	2005      	movs	r0, #5
	user_op->id = ticker_id;
    bfcc:	7062      	strb	r2, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
	user_op->fp_op_func = fp_op_func;
    bfce:	9a01      	ldr	r2, [sp, #4]
	if (last == user->first) {
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
	user_op->op = TICKER_USER_OP_TYPE_STOP;
    bfd0:	7020      	strb	r0, [r4, #0]
	user_op->id = ticker_id;
	user_op->status = TICKER_STATUS_BUSY;
	user_op->fp_op_func = fp_op_func;
    bfd2:	6262      	str	r2, [r4, #36]	; 0x24
	user_op->op_context = op_context;
    bfd4:	9a08      	ldr	r2, [sp, #32]
	}

	user_op = &user->user_op[user->last];
	user_op->op = TICKER_USER_OP_TYPE_STOP;
	user_op->id = ticker_id;
	user_op->status = TICKER_STATUS_BUSY;
    bfd6:	6226      	str	r6, [r4, #32]
	user_op->fp_op_func = fp_op_func;
	user_op->op_context = op_context;
    bfd8:	62a2      	str	r2, [r4, #40]	; 0x28

	user->last = last;
    bfda:	70ef      	strb	r7, [r5, #3]

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
    bfdc:	6a5d      	ldr	r5, [r3, #36]	; 0x24
    bfde:	0008      	movs	r0, r1
    bfe0:	6a1b      	ldr	r3, [r3, #32]
    bfe2:	4798      	blx	r3
    bfe4:	2200      	movs	r2, #0
    bfe6:	0031      	movs	r1, r6
    bfe8:	47a8      	blx	r5

	return user_op->status;
    bfea:	6a20      	ldr	r0, [r4, #32]
}
    bfec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    bfee:	46c0      	nop			; (mov r8, r8)
    bff0:	20001504 	.word	0x20001504

0000bff4 <ticker_next_slot_get>:

u32_t ticker_next_slot_get(u8_t instance_index, u8_t user_id, u8_t *ticker_id,
			   u32_t *ticks_current, u32_t *ticks_to_expire,
			   ticker_op_func fp_op_func, void *op_context)
{
    bff4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct ticker_instance *instance = &_instance[instance_index];
	struct ticker_user_op *user_op;
	struct ticker_user *user;
	u8_t last;

	user = &instance->user[user_id];
    bff6:	242c      	movs	r4, #44	; 0x2c
    bff8:	4360      	muls	r0, r4
}

u32_t ticker_next_slot_get(u8_t instance_index, u8_t user_id, u8_t *ticker_id,
			   u32_t *ticks_current, u32_t *ticks_to_expire,
			   ticker_op_func fp_op_func, void *op_context)
{
    bffa:	9301      	str	r3, [sp, #4]
	struct ticker_instance *instance = &_instance[instance_index];
	struct ticker_user_op *user_op;
	struct ticker_user *user;
	u8_t last;

	user = &instance->user[user_id];
    bffc:	4b15      	ldr	r3, [pc, #84]	; (c054 <ticker_next_slot_get+0x60>)
    bffe:	00cd      	lsls	r5, r1, #3
    c000:	181b      	adds	r3, r3, r0
    c002:	6858      	ldr	r0, [r3, #4]
    c004:	1945      	adds	r5, r0, r5

	last = user->last + 1;
    c006:	78ee      	ldrb	r6, [r5, #3]
	if (last >= user->count_user_op) {
    c008:	7828      	ldrb	r0, [r5, #0]
	struct ticker_user *user;
	u8_t last;

	user = &instance->user[user_id];

	last = user->last + 1;
    c00a:	1c77      	adds	r7, r6, #1
    c00c:	b2ff      	uxtb	r7, r7
	if (last >= user->count_user_op) {
		last = 0;
    c00e:	4287      	cmp	r7, r0
    c010:	4180      	sbcs	r0, r0
    c012:	4007      	ands	r7, r0
	}

	if (last == user->first) {
    c014:	7868      	ldrb	r0, [r5, #1]
    c016:	4684      	mov	ip, r0
		return TICKER_STATUS_FAILURE;
    c018:	2001      	movs	r0, #1
	last = user->last + 1;
	if (last >= user->count_user_op) {
		last = 0;
	}

	if (last == user->first) {
    c01a:	45bc      	cmp	ip, r7
    c01c:	d019      	beq.n	c052 <ticker_next_slot_get+0x5e>
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
    c01e:	4374      	muls	r4, r6
    c020:	6868      	ldr	r0, [r5, #4]
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
    c022:	2602      	movs	r6, #2

	if (last == user->first) {
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
    c024:	1904      	adds	r4, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
	user_op->id = TICKER_NULL;
    c026:	20ff      	movs	r0, #255	; 0xff
	user_op->params.slot_get.ticker_id = ticker_id;
    c028:	6062      	str	r2, [r4, #4]
	user_op->params.slot_get.ticks_current = ticks_current;
    c02a:	9a01      	ldr	r2, [sp, #4]
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
	user_op->id = TICKER_NULL;
    c02c:	7060      	strb	r0, [r4, #1]
	user_op->params.slot_get.ticker_id = ticker_id;
	user_op->params.slot_get.ticks_current = ticks_current;
    c02e:	60a2      	str	r2, [r4, #8]
	user_op->params.slot_get.ticks_to_expire = ticks_to_expire;
    c030:	9a08      	ldr	r2, [sp, #32]
	if (last == user->first) {
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
    c032:	7026      	strb	r6, [r4, #0]
	user_op->id = TICKER_NULL;
	user_op->params.slot_get.ticker_id = ticker_id;
	user_op->params.slot_get.ticks_current = ticks_current;
	user_op->params.slot_get.ticks_to_expire = ticks_to_expire;
    c034:	60e2      	str	r2, [r4, #12]
	user_op->status = TICKER_STATUS_BUSY;
	user_op->fp_op_func = fp_op_func;
    c036:	9a09      	ldr	r2, [sp, #36]	; 0x24
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
	user_op->id = TICKER_NULL;
	user_op->params.slot_get.ticker_id = ticker_id;
	user_op->params.slot_get.ticks_current = ticks_current;
	user_op->params.slot_get.ticks_to_expire = ticks_to_expire;
	user_op->status = TICKER_STATUS_BUSY;
    c038:	6226      	str	r6, [r4, #32]
	user_op->fp_op_func = fp_op_func;
    c03a:	6262      	str	r2, [r4, #36]	; 0x24
	user_op->op_context = op_context;
    c03c:	9a0a      	ldr	r2, [sp, #40]	; 0x28

	user->last = last;

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
    c03e:	0008      	movs	r0, r1
	user_op->params.slot_get.ticker_id = ticker_id;
	user_op->params.slot_get.ticks_current = ticks_current;
	user_op->params.slot_get.ticks_to_expire = ticks_to_expire;
	user_op->status = TICKER_STATUS_BUSY;
	user_op->fp_op_func = fp_op_func;
	user_op->op_context = op_context;
    c040:	62a2      	str	r2, [r4, #40]	; 0x28

	user->last = last;
    c042:	70ef      	strb	r7, [r5, #3]

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
    c044:	6a5d      	ldr	r5, [r3, #36]	; 0x24
    c046:	6a1b      	ldr	r3, [r3, #32]
    c048:	4798      	blx	r3
    c04a:	2200      	movs	r2, #0
    c04c:	0031      	movs	r1, r6
    c04e:	47a8      	blx	r5

	return user_op->status;
    c050:	6a20      	ldr	r0, [r4, #32]
}
    c052:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    c054:	20001504 	.word	0x20001504

0000c058 <ticker_job_idle_get>:

u32_t ticker_job_idle_get(u8_t instance_index, u8_t user_id,
			  ticker_op_func fp_op_func, void *op_context)
{
    c058:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct ticker_instance *instance = &_instance[instance_index];
	struct ticker_user_op *user_op;
	struct ticker_user *user;
	u8_t last;

	user = &instance->user[user_id];
    c05a:	242c      	movs	r4, #44	; 0x2c
    c05c:	4360      	muls	r0, r4
	return user_op->status;
}

u32_t ticker_job_idle_get(u8_t instance_index, u8_t user_id,
			  ticker_op_func fp_op_func, void *op_context)
{
    c05e:	9301      	str	r3, [sp, #4]
	struct ticker_instance *instance = &_instance[instance_index];
	struct ticker_user_op *user_op;
	struct ticker_user *user;
	u8_t last;

	user = &instance->user[user_id];
    c060:	4b12      	ldr	r3, [pc, #72]	; (c0ac <ticker_job_idle_get+0x54>)
    c062:	00cd      	lsls	r5, r1, #3
    c064:	181b      	adds	r3, r3, r0
    c066:	6858      	ldr	r0, [r3, #4]
    c068:	1945      	adds	r5, r0, r5

	last = user->last + 1;
    c06a:	78ee      	ldrb	r6, [r5, #3]
	if (last >= user->count_user_op) {
    c06c:	7828      	ldrb	r0, [r5, #0]
	struct ticker_user *user;
	u8_t last;

	user = &instance->user[user_id];

	last = user->last + 1;
    c06e:	1c77      	adds	r7, r6, #1
    c070:	b2ff      	uxtb	r7, r7
	if (last >= user->count_user_op) {
		last = 0;
    c072:	4287      	cmp	r7, r0
    c074:	4180      	sbcs	r0, r0
    c076:	4007      	ands	r7, r0
	}

	if (last == user->first) {
    c078:	7868      	ldrb	r0, [r5, #1]
    c07a:	4684      	mov	ip, r0
		return TICKER_STATUS_FAILURE;
    c07c:	2001      	movs	r0, #1
	last = user->last + 1;
	if (last >= user->count_user_op) {
		last = 0;
	}

	if (last == user->first) {
    c07e:	45bc      	cmp	ip, r7
    c080:	d013      	beq.n	c0aa <ticker_job_idle_get+0x52>
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
    c082:	4374      	muls	r4, r6
    c084:	686e      	ldr	r6, [r5, #4]
    c086:	1934      	adds	r4, r6, r4
	user_op->op = TICKER_USER_OP_TYPE_IDLE_GET;
	user_op->id = TICKER_NULL;
	user_op->status = TICKER_STATUS_BUSY;
    c088:	2602      	movs	r6, #2
	user_op->fp_op_func = fp_op_func;
    c08a:	6262      	str	r2, [r4, #36]	; 0x24
	user_op->op_context = op_context;
    c08c:	9a01      	ldr	r2, [sp, #4]
	if (last == user->first) {
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
	user_op->op = TICKER_USER_OP_TYPE_IDLE_GET;
    c08e:	7020      	strb	r0, [r4, #0]
	user_op->id = TICKER_NULL;
    c090:	30fe      	adds	r0, #254	; 0xfe
    c092:	7060      	strb	r0, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
	user_op->fp_op_func = fp_op_func;
	user_op->op_context = op_context;
    c094:	62a2      	str	r2, [r4, #40]	; 0x28
	}

	user_op = &user->user_op[user->last];
	user_op->op = TICKER_USER_OP_TYPE_IDLE_GET;
	user_op->id = TICKER_NULL;
	user_op->status = TICKER_STATUS_BUSY;
    c096:	6226      	str	r6, [r4, #32]
	user_op->fp_op_func = fp_op_func;
	user_op->op_context = op_context;

	user->last = last;
    c098:	70ef      	strb	r7, [r5, #3]

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
    c09a:	6a5d      	ldr	r5, [r3, #36]	; 0x24
    c09c:	0008      	movs	r0, r1
    c09e:	6a1b      	ldr	r3, [r3, #32]
    c0a0:	4798      	blx	r3
    c0a2:	2200      	movs	r2, #0
    c0a4:	0031      	movs	r1, r6
    c0a6:	47a8      	blx	r5

	return user_op->status;
    c0a8:	6a20      	ldr	r0, [r4, #32]
}
    c0aa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    c0ac:	20001504 	.word	0x20001504

0000c0b0 <ticker_job_sched>:

void ticker_job_sched(u8_t instance_index, u8_t user_id)
{
	struct ticker_instance *instance = &_instance[instance_index];

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
    c0b0:	232c      	movs	r3, #44	; 0x2c

	return user_op->status;
}

void ticker_job_sched(u8_t instance_index, u8_t user_id)
{
    c0b2:	b510      	push	{r4, lr}
	struct ticker_instance *instance = &_instance[instance_index];

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
    c0b4:	4343      	muls	r3, r0
    c0b6:	4805      	ldr	r0, [pc, #20]	; (c0cc <ticker_job_sched+0x1c>)
    c0b8:	18c3      	adds	r3, r0, r3
    c0ba:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    c0bc:	0008      	movs	r0, r1
    c0be:	6a1b      	ldr	r3, [r3, #32]
    c0c0:	4798      	blx	r3
    c0c2:	2200      	movs	r2, #0
    c0c4:	2102      	movs	r1, #2
    c0c6:	47a0      	blx	r4
}
    c0c8:	bd10      	pop	{r4, pc}
    c0ca:	46c0      	nop			; (mov r8, r8)
    c0cc:	20001504 	.word	0x20001504

0000c0d0 <ticker_ticks_now_get>:

u32_t ticker_ticks_now_get(void)
{
    c0d0:	b510      	push	{r4, lr}
	return cntr_cnt_get();
    c0d2:	f7fe fcbd 	bl	aa50 <cntr_cnt_get>
}
    c0d6:	bd10      	pop	{r4, pc}

0000c0d8 <ticker_ticks_diff_get>:

u32_t ticker_ticks_diff_get(u32_t ticks_now, u32_t ticks_old)
{
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    c0d8:	1a40      	subs	r0, r0, r1
    c0da:	0200      	lsls	r0, r0, #8
    c0dc:	0a00      	lsrs	r0, r0, #8
}
    c0de:	4770      	bx	lr

0000c0e0 <bt_rand>:
#include "hal/ecb.h"

K_MUTEX_DEFINE(mutex_rand);

int bt_rand(void *buf, size_t len)
{
    c0e0:	b570      	push	{r4, r5, r6, lr}
    c0e2:	0006      	movs	r6, r0
    c0e4:	000c      	movs	r4, r1
	while (len) {
    c0e6:	2c00      	cmp	r4, #0
    c0e8:	d013      	beq.n	c112 <bt_rand+0x32>
		k_mutex_lock(&mutex_rand, K_FOREVER);
    c0ea:	2101      	movs	r1, #1
    c0ec:	4d0a      	ldr	r5, [pc, #40]	; (c118 <bt_rand+0x38>)
    c0ee:	4249      	negs	r1, r1
    c0f0:	0028      	movs	r0, r5
    c0f2:	f007 fe6f 	bl	13dd4 <k_mutex_lock>
		len = rand_get(len, buf);
    c0f6:	0020      	movs	r0, r4
    c0f8:	0031      	movs	r1, r6
    c0fa:	f7ff f8bf 	bl	b27c <rand_get>
    c0fe:	0004      	movs	r4, r0
		k_mutex_unlock(&mutex_rand);
    c100:	0028      	movs	r0, r5
    c102:	f007 fec9 	bl	13e98 <k_mutex_unlock>
		if (len) {
    c106:	2c00      	cmp	r4, #0
    c108:	d003      	beq.n	c112 <bt_rand+0x32>
    c10a:	bf20      	wfe
  \brief   Send Event
  \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 */
__attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
{
  __ASM volatile ("sev");
    c10c:	bf40      	sev
  \details Wait For Event is a hint instruction that permits the processor to enter
    a low-power state until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
{
  __ASM volatile ("wfe");
    c10e:	bf20      	wfe
    c110:	e7e9      	b.n	c0e6 <bt_rand+0x6>
			cpu_sleep();
		}
	}

	return 0;
}
    c112:	2000      	movs	r0, #0
    c114:	bd70      	pop	{r4, r5, r6, pc}
    c116:	46c0      	nop			; (mov r8, r8)
    c118:	200009a8 	.word	0x200009a8

0000c11c <bt_encrypt_le>:

int bt_encrypt_le(const u8_t key[16], const u8_t plaintext[16],
		  u8_t enc_data[16])
{
    c11c:	b510      	push	{r4, lr}
	BT_DBG("key %s plaintext %s", bt_hex(key, 16), bt_hex(plaintext, 16));

	ecb_encrypt(key, plaintext, enc_data, NULL);
    c11e:	2300      	movs	r3, #0
    c120:	f7fe fcce 	bl	aac0 <ecb_encrypt>

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
}
    c124:	2000      	movs	r0, #0
    c126:	bd10      	pop	{r4, pc}

0000c128 <cpu_sleep>:
    c128:	bf20      	wfe
  \brief   Send Event
  \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 */
__attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
{
  __ASM volatile ("sev");
    c12a:	bf40      	sev
  \details Wait For Event is a hint instruction that permits the processor to enter
    a low-power state until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
{
  __ASM volatile ("wfe");
    c12c:	bf20      	wfe
static inline void cpu_sleep(void)
{
	__WFE();
	__SEV();
	__WFE();
}
    c12e:	4770      	bx	lr

0000c130 <ticker_if_done>:
}
#endif

static void ticker_if_done(u32_t status, void *ops_context)
{
	*((u32_t volatile *)ops_context) = status;
    c130:	6008      	str	r0, [r1, #0]
}
    c132:	4770      	bx	lr

0000c134 <prepare_reduced>:
{
	/* It is acceptable that ticker_update will fail, if ticker is stopped;
	 * for example, scan ticker is stopped on connection estblishment but
	 * is also preempted.
	 */
	if (status == 0) {
    c134:	2800      	cmp	r0, #0
    c136:	d104      	bne.n	c142 <prepare_reduced+0xe>
		struct shdr *hdr = (struct shdr *)op_context;

		hdr->ticks_xtal_to_start |= ((u32_t)1 << 31);
    c138:	2380      	movs	r3, #128	; 0x80
    c13a:	680a      	ldr	r2, [r1, #0]
    c13c:	061b      	lsls	r3, r3, #24
    c13e:	4313      	orrs	r3, r2
    c140:	600b      	str	r3, [r1, #0]
	}
}
    c142:	4770      	bx	lr

0000c144 <prepare_normal>:
{
	/* It is acceptable that ticker_update will fail, if ticker is stopped;
	 * for example, scan ticker is stopped on connection estblishment but
	 * is also preempted.
	 */
	if (status == 0) {
    c144:	2800      	cmp	r0, #0
    c146:	d103      	bne.n	c150 <prepare_normal+0xc>
		struct shdr *hdr = (struct shdr *)op_context;

		hdr->ticks_xtal_to_start &= ~((u32_t)1 << 31);
    c148:	680b      	ldr	r3, [r1, #0]
    c14a:	005b      	lsls	r3, r3, #1
    c14c:	085b      	lsrs	r3, r3, #1
    c14e:	600b      	str	r3, [r1, #0]
	}
}
    c150:	4770      	bx	lr

0000c152 <chan_sel_remap>:

	return 0;
}

static u8_t chan_sel_remap(u8_t *chan_map, u8_t chan_index)
{
    c152:	b5f0      	push	{r4, r5, r6, r7, lr}
    c154:	0002      	movs	r2, r0
    c156:	1d46      	adds	r6, r0, #5
		u8_t bit_count;

		bite = *chan_map;
		bit_count = 8;
		while (bit_count--) {
			if (bite & 0x01) {
    c158:	2701      	movs	r7, #1
static u8_t chan_sel_remap(u8_t *chan_map, u8_t chan_index)
{
	u8_t chan_next;
	u8_t byte_count;

	chan_next = 0;
    c15a:	2000      	movs	r0, #0
	byte_count = 5;
	while (byte_count--) {
    c15c:	42b2      	cmp	r2, r6
    c15e:	d011      	beq.n	c184 <chan_sel_remap+0x32>
    c160:	0004      	movs	r4, r0
		u8_t bite;
		u8_t bit_count;

		bite = *chan_map;
    c162:	7815      	ldrb	r5, [r2, #0]
    c164:	3408      	adds	r4, #8
    c166:	b2e4      	uxtb	r4, r4
		bit_count = 8;
		while (bit_count--) {
    c168:	42a0      	cmp	r0, r4
    c16a:	d009      	beq.n	c180 <chan_sel_remap+0x2e>
			if (bite & 0x01) {
    c16c:	423d      	tst	r5, r7
    c16e:	d003      	beq.n	c178 <chan_sel_remap+0x26>
				if (chan_index == 0) {
    c170:	2900      	cmp	r1, #0
    c172:	d007      	beq.n	c184 <chan_sel_remap+0x32>
					break;
				}
				chan_index--;
    c174:	3901      	subs	r1, #1
    c176:	b2c9      	uxtb	r1, r1
			}
			chan_next++;
    c178:	1c43      	adds	r3, r0, #1
    c17a:	b2d8      	uxtb	r0, r3
			bite >>= 1;
    c17c:	086d      	lsrs	r5, r5, #1
    c17e:	e7f3      	b.n	c168 <chan_sel_remap+0x16>

		if (bit_count < 8) {
			break;
		}

		chan_map++;
    c180:	3201      	adds	r2, #1
    c182:	e7eb      	b.n	c15c <chan_sel_remap+0xa>
	}

	return chan_next;
}
    c184:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0000c188 <packet_rx_acquired_count_get>:
	}
}

static u8_t packet_rx_acquired_count_get(void)
{
	if (_radio.packet_rx_acquire >=
    c188:	229f      	movs	r2, #159	; 0x9f
    c18a:	4b09      	ldr	r3, [pc, #36]	; (c1b0 <packet_rx_acquired_count_get+0x28>)
    c18c:	0052      	lsls	r2, r2, #1
    c18e:	5c98      	ldrb	r0, [r3, r2]
	    _radio.packet_rx_last) {
    c190:	223e      	movs	r2, #62	; 0x3e
    c192:	32ff      	adds	r2, #255	; 0xff
    c194:	5c99      	ldrb	r1, [r3, r2]
	}
}

static u8_t packet_rx_acquired_count_get(void)
{
	if (_radio.packet_rx_acquire >=
    c196:	4288      	cmp	r0, r1
    c198:	d302      	bcc.n	c1a0 <packet_rx_acquired_count_get+0x18>
	    _radio.packet_rx_last) {
		return (_radio.packet_rx_acquire -
			_radio.packet_rx_last);
    c19a:	5c9b      	ldrb	r3, [r3, r2]

static u8_t packet_rx_acquired_count_get(void)
{
	if (_radio.packet_rx_acquire >=
	    _radio.packet_rx_last) {
		return (_radio.packet_rx_acquire -
    c19c:	1ac0      	subs	r0, r0, r3
    c19e:	e005      	b.n	c1ac <packet_rx_acquired_count_get+0x24>
			_radio.packet_rx_last);
	} else {
		return (_radio.packet_rx_count -
    c1a0:	219e      	movs	r1, #158	; 0x9e
    c1a2:	0049      	lsls	r1, r1, #1
			_radio.packet_rx_last +
    c1a4:	5c9a      	ldrb	r2, [r3, r2]
	if (_radio.packet_rx_acquire >=
	    _radio.packet_rx_last) {
		return (_radio.packet_rx_acquire -
			_radio.packet_rx_last);
	} else {
		return (_radio.packet_rx_count -
    c1a6:	5c5b      	ldrb	r3, [r3, r1]
    c1a8:	18c0      	adds	r0, r0, r3
    c1aa:	1a80      	subs	r0, r0, r2
    c1ac:	b2c0      	uxtb	r0, r0
			_radio.packet_rx_last +
			_radio.packet_rx_acquire);
	}
}
    c1ae:	4770      	bx	lr
    c1b0:	200015c0 	.word	0x200015c0

0000c1b4 <packet_rx_reserve_get>:

static struct radio_pdu_node_rx *packet_rx_reserve_get(u8_t count)
{
    c1b4:	b510      	push	{r4, lr}
    c1b6:	0004      	movs	r4, r0
	struct radio_pdu_node_rx *radio_pdu_node_rx;

	if (count > packet_rx_acquired_count_get()) {
    c1b8:	f7ff ffe6 	bl	c188 <packet_rx_acquired_count_get>
    c1bc:	0003      	movs	r3, r0
		return 0;
    c1be:	2000      	movs	r0, #0

static struct radio_pdu_node_rx *packet_rx_reserve_get(u8_t count)
{
	struct radio_pdu_node_rx *radio_pdu_node_rx;

	if (count > packet_rx_acquired_count_get()) {
    c1c0:	42a3      	cmp	r3, r4
    c1c2:	d309      	bcc.n	c1d8 <packet_rx_reserve_get+0x24>
		return 0;
	}

	radio_pdu_node_rx = _radio.packet_rx[_radio.packet_rx_last];
    c1c4:	223e      	movs	r2, #62	; 0x3e
    c1c6:	4b05      	ldr	r3, [pc, #20]	; (c1dc <packet_rx_reserve_get+0x28>)
    c1c8:	32ff      	adds	r2, #255	; 0xff
    c1ca:	5c9a      	ldrb	r2, [r3, r2]
    c1cc:	33fc      	adds	r3, #252	; 0xfc
    c1ce:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
    c1d0:	0093      	lsls	r3, r2, #2
    c1d2:	5858      	ldr	r0, [r3, r1]
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    c1d4:	2301      	movs	r3, #1
    c1d6:	7103      	strb	r3, [r0, #4]

	return radio_pdu_node_rx;
}
    c1d8:	bd10      	pop	{r4, pc}
    c1da:	46c0      	nop			; (mov r8, r8)
    c1dc:	200015c0 	.word	0x200015c0

0000c1e0 <packet_rx_allocate>:

	*pdu_data_tx = _pdu_data_tx;
}

static void packet_rx_allocate(u8_t max)
{
    c1e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	u8_t acquire;

	if (max > _radio.link_rx_data_quota) {
    c1e2:	23a8      	movs	r3, #168	; 0xa8
    c1e4:	4d22      	ldr	r5, [pc, #136]	; (c270 <packet_rx_allocate+0x90>)
    c1e6:	005b      	lsls	r3, r3, #1
    c1e8:	5ceb      	ldrb	r3, [r5, r3]
    c1ea:	1c1e      	adds	r6, r3, #0
    c1ec:	4283      	cmp	r3, r0
    c1ee:	d900      	bls.n	c1f2 <packet_rx_allocate+0x12>
    c1f0:	1c06      	adds	r6, r0, #0
		max = _radio.link_rx_data_quota;
	}

	acquire = _radio.packet_rx_acquire + 1;
    c1f2:	239f      	movs	r3, #159	; 0x9f
    c1f4:	005b      	lsls	r3, r3, #1
    c1f6:	5cec      	ldrb	r4, [r5, r3]
	if (acquire == _radio.packet_rx_count) {
    c1f8:	3b02      	subs	r3, #2

	if (max > _radio.link_rx_data_quota) {
		max = _radio.link_rx_data_quota;
	}

	acquire = _radio.packet_rx_acquire + 1;
    c1fa:	3401      	adds	r4, #1
	if (acquire == _radio.packet_rx_count) {
    c1fc:	5ceb      	ldrb	r3, [r5, r3]

	if (max > _radio.link_rx_data_quota) {
		max = _radio.link_rx_data_quota;
	}

	acquire = _radio.packet_rx_acquire + 1;
    c1fe:	b2e4      	uxtb	r4, r4
    c200:	b2f6      	uxtb	r6, r6
	if (acquire == _radio.packet_rx_count) {
    c202:	42a3      	cmp	r3, r4
    c204:	d11b      	bne.n	c23e <packet_rx_allocate+0x5e>
		acquire = 0;
    c206:	2400      	movs	r4, #0
    c208:	e019      	b.n	c23e <packet_rx_allocate+0x5e>
			break;
		}

		radio_pdu_node_rx->hdr.onion.link = link;

		_radio.packet_rx[_radio.packet_rx_acquire] = radio_pdu_node_rx;
    c20a:	239f      	movs	r3, #159	; 0x9f
    c20c:	002a      	movs	r2, r5
		if (!radio_pdu_node_rx) {
			mem_release(link, &_radio.link_rx_free);
			break;
		}

		radio_pdu_node_rx->hdr.onion.link = link;
    c20e:	6007      	str	r7, [r0, #0]

		_radio.packet_rx[_radio.packet_rx_acquire] = radio_pdu_node_rx;
    c210:	005b      	lsls	r3, r3, #1
    c212:	5ceb      	ldrb	r3, [r5, r3]
    c214:	32fc      	adds	r2, #252	; 0xfc
    c216:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
    c218:	009b      	lsls	r3, r3, #2
    c21a:	5098      	str	r0, [r3, r2]
		_radio.packet_rx_acquire = acquire;
    c21c:	239f      	movs	r3, #159	; 0x9f
    c21e:	005b      	lsls	r3, r3, #1
    c220:	54ec      	strb	r4, [r5, r3]

		acquire = _radio.packet_rx_acquire + 1;
		if (acquire == _radio.packet_rx_count) {
    c222:	3b02      	subs	r3, #2
		radio_pdu_node_rx->hdr.onion.link = link;

		_radio.packet_rx[_radio.packet_rx_acquire] = radio_pdu_node_rx;
		_radio.packet_rx_acquire = acquire;

		acquire = _radio.packet_rx_acquire + 1;
    c224:	3401      	adds	r4, #1
		if (acquire == _radio.packet_rx_count) {
    c226:	5ceb      	ldrb	r3, [r5, r3]
		radio_pdu_node_rx->hdr.onion.link = link;

		_radio.packet_rx[_radio.packet_rx_acquire] = radio_pdu_node_rx;
		_radio.packet_rx_acquire = acquire;

		acquire = _radio.packet_rx_acquire + 1;
    c228:	b2e4      	uxtb	r4, r4
		if (acquire == _radio.packet_rx_count) {
    c22a:	42a3      	cmp	r3, r4
    c22c:	d100      	bne.n	c230 <packet_rx_allocate+0x50>
			acquire = 0;
    c22e:	2400      	movs	r4, #0
		}

		_radio.link_rx_data_quota--;
    c230:	22a8      	movs	r2, #168	; 0xa8
    c232:	0052      	lsls	r2, r2, #1
    c234:	5cab      	ldrb	r3, [r5, r2]
    c236:	3e01      	subs	r6, #1
    c238:	3b01      	subs	r3, #1
    c23a:	54ab      	strb	r3, [r5, r2]
    c23c:	b2f6      	uxtb	r6, r6
	acquire = _radio.packet_rx_acquire + 1;
	if (acquire == _radio.packet_rx_count) {
		acquire = 0;
	}

	while ((max--) && (acquire != _radio.packet_rx_last)) {
    c23e:	2e00      	cmp	r6, #0
    c240:	d014      	beq.n	c26c <packet_rx_allocate+0x8c>
    c242:	233e      	movs	r3, #62	; 0x3e
    c244:	33ff      	adds	r3, #255	; 0xff
    c246:	5ceb      	ldrb	r3, [r5, r3]
    c248:	429c      	cmp	r4, r3
    c24a:	d00f      	beq.n	c26c <packet_rx_allocate+0x8c>
		void *link;
		struct radio_pdu_node_rx *radio_pdu_node_rx;

		link = mem_acquire(&_radio.link_rx_free);
    c24c:	4809      	ldr	r0, [pc, #36]	; (c274 <packet_rx_allocate+0x94>)
    c24e:	f7fe fb1f 	bl	a890 <mem_acquire>
    c252:	1e07      	subs	r7, r0, #0
		if (!link) {
    c254:	d00a      	beq.n	c26c <packet_rx_allocate+0x8c>
			break;
		}

		radio_pdu_node_rx = mem_acquire(&_radio.pkt_rx_data_free);
    c256:	0028      	movs	r0, r5
    c258:	302d      	adds	r0, #45	; 0x2d
    c25a:	30ff      	adds	r0, #255	; 0xff
    c25c:	f7fe fb18 	bl	a890 <mem_acquire>
		if (!radio_pdu_node_rx) {
    c260:	2800      	cmp	r0, #0
    c262:	d1d2      	bne.n	c20a <packet_rx_allocate+0x2a>
			mem_release(link, &_radio.link_rx_free);
    c264:	4903      	ldr	r1, [pc, #12]	; (c274 <packet_rx_allocate+0x94>)
    c266:	0038      	movs	r0, r7
    c268:	f7fe fb2b 	bl	a8c2 <mem_release>
			acquire = 0;
		}

		_radio.link_rx_data_quota--;
	}
}
    c26c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c26e:	46c0      	nop			; (mov r8, r8)
    c270:	200015c0 	.word	0x200015c0
    c274:	20001704 	.word	0x20001704

0000c278 <common_init>:
	/* memory allocations */
	common_init();
}

static void common_init(void)
{
    c278:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	void *link;

	/* initialise connection pool. */
	if (_radio.connection_count) {
    c27a:	4c3b      	ldr	r4, [pc, #236]	; (c368 <common_init+0xf0>)
    c27c:	0023      	movs	r3, r4
    c27e:	0020      	movs	r0, r4
    c280:	33ff      	adds	r3, #255	; 0xff
    c282:	7b5a      	ldrb	r2, [r3, #13]
    c284:	30fc      	adds	r0, #252	; 0xfc
    c286:	2a00      	cmp	r2, #0
    c288:	d009      	beq.n	c29e <common_init+0x26>
		mem_init(_radio.conn_pool, CONNECTION_T_SIZE,
    c28a:	0023      	movs	r3, r4
    c28c:	218c      	movs	r1, #140	; 0x8c
    c28e:	3309      	adds	r3, #9
    c290:	33ff      	adds	r3, #255	; 0xff
    c292:	b292      	uxth	r2, r2
    c294:	0049      	lsls	r1, r1, #1
    c296:	6880      	ldr	r0, [r0, #8]
    c298:	f7fe fad4 	bl	a844 <mem_init>
    c29c:	e000      	b.n	c2a0 <common_init+0x28>
			 _radio.connection_count,
			 &_radio.conn_free);
	} else {
		_radio.conn_free = NULL;
    c29e:	60c2      	str	r2, [r0, #12]
	}

	/* initialise rx pool. */
	mem_init(_radio.pkt_rx_data_pool,
    c2a0:	0023      	movs	r3, r4
    c2a2:	229b      	movs	r2, #155	; 0x9b
    c2a4:	0026      	movs	r6, r4
    c2a6:	0027      	movs	r7, r4
    c2a8:	332d      	adds	r3, #45	; 0x2d
    c2aa:	37fc      	adds	r7, #252	; 0xfc
    c2ac:	0052      	lsls	r2, r2, #1
    c2ae:	36fe      	adds	r6, #254	; 0xfe
    c2b0:	33ff      	adds	r3, #255	; 0xff
    c2b2:	5ca2      	ldrb	r2, [r4, r2]
    c2b4:	8ef1      	ldrh	r1, [r6, #54]	; 0x36
    c2b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    c2b8:	f7fe fac4 	bl	a844 <mem_init>
		 _radio.packet_rx_data_count,
		 &_radio.pkt_rx_data_free);

	/* initialise rx link pool. */
	mem_init(_radio.link_rx_pool, (sizeof(void *) * 2),
		 (_radio.packet_rx_count + _radio.connection_count),
    c2bc:	0025      	movs	r5, r4
    c2be:	239e      	movs	r3, #158	; 0x9e
    c2c0:	35ff      	adds	r5, #255	; 0xff
    c2c2:	005b      	lsls	r3, r3, #1
		 _radio.packet_rx_data_size,
		 _radio.packet_rx_data_count,
		 &_radio.pkt_rx_data_free);

	/* initialise rx link pool. */
	mem_init(_radio.link_rx_pool, (sizeof(void *) * 2),
    c2c4:	5ce2      	ldrb	r2, [r4, r3]
    c2c6:	7b6b      	ldrb	r3, [r5, #13]
    c2c8:	2108      	movs	r1, #8
    c2ca:	18d2      	adds	r2, r2, r3
    c2cc:	6c78      	ldr	r0, [r7, #68]	; 0x44
    c2ce:	4b27      	ldr	r3, [pc, #156]	; (c36c <common_init+0xf4>)
    c2d0:	f7fe fab8 	bl	a844 <mem_init>
		 (_radio.packet_rx_count + _radio.connection_count),
		 &_radio.link_rx_free);

	/* initialise ctrl tx pool. */
	mem_init(_radio.pkt_tx_ctrl_pool, PACKET_TX_CTRL_SIZE_MIN,
    c2d4:	0023      	movs	r3, r4
    c2d6:	3359      	adds	r3, #89	; 0x59
    c2d8:	33ff      	adds	r3, #255	; 0xff
    c2da:	2202      	movs	r2, #2
    c2dc:	2124      	movs	r1, #36	; 0x24
    c2de:	6db8      	ldr	r0, [r7, #88]	; 0x58
    c2e0:	f7fe fab0 	bl	a844 <mem_init>
		 PACKET_MEM_COUNT_TX_CTRL, &_radio.pkt_tx_ctrl_free);

	/* initialise data tx pool. */
	mem_init(_radio.pkt_tx_data_pool, _radio.packet_tx_data_size,
		 (_radio.packet_tx_count - 1), &_radio.pkt_tx_data_free);
    c2e4:	22b8      	movs	r2, #184	; 0xb8
	/* initialise ctrl tx pool. */
	mem_init(_radio.pkt_tx_ctrl_pool, PACKET_TX_CTRL_SIZE_MIN,
		 PACKET_MEM_COUNT_TX_CTRL, &_radio.pkt_tx_ctrl_free);

	/* initialise data tx pool. */
	mem_init(_radio.pkt_tx_data_pool, _radio.packet_tx_data_size,
    c2e6:	0023      	movs	r3, r4
    c2e8:	21b2      	movs	r1, #178	; 0xb2
		 (_radio.packet_tx_count - 1), &_radio.pkt_tx_data_free);
    c2ea:	0052      	lsls	r2, r2, #1
	/* initialise ctrl tx pool. */
	mem_init(_radio.pkt_tx_ctrl_pool, PACKET_TX_CTRL_SIZE_MIN,
		 PACKET_MEM_COUNT_TX_CTRL, &_radio.pkt_tx_ctrl_free);

	/* initialise data tx pool. */
	mem_init(_radio.pkt_tx_data_pool, _radio.packet_tx_data_size,
    c2ec:	5ca2      	ldrb	r2, [r4, r2]
    c2ee:	3361      	adds	r3, #97	; 0x61
    c2f0:	3a01      	subs	r2, #1
    c2f2:	0049      	lsls	r1, r1, #1
    c2f4:	6e38      	ldr	r0, [r7, #96]	; 0x60
    c2f6:	33ff      	adds	r3, #255	; 0xff
    c2f8:	b292      	uxth	r2, r2
    c2fa:	5a61      	ldrh	r1, [r4, r1]
    c2fc:	f7fe faa2 	bl	a844 <mem_init>
		 (_radio.packet_tx_count - 1), &_radio.pkt_tx_data_free);

	/* initialise the event-cum-data memq */
	link = mem_acquire(&_radio.link_rx_free);
    c300:	481a      	ldr	r0, [pc, #104]	; (c36c <common_init+0xf4>)
    c302:	f7fe fac5 	bl	a890 <mem_acquire>
	LL_ASSERT(link);
    c306:	2800      	cmp	r0, #0
    c308:	d10c      	bne.n	c324 <common_init+0xac>
    c30a:	4b19      	ldr	r3, [pc, #100]	; (c370 <common_init+0xf8>)
    c30c:	4a19      	ldr	r2, [pc, #100]	; (c374 <common_init+0xfc>)
    c30e:	9301      	str	r3, [sp, #4]
    c310:	4b19      	ldr	r3, [pc, #100]	; (c378 <common_init+0x100>)
    c312:	491a      	ldr	r1, [pc, #104]	; (c37c <common_init+0x104>)
    c314:	9300      	str	r3, [sp, #0]
    c316:	481a      	ldr	r0, [pc, #104]	; (c380 <common_init+0x108>)
    c318:	4b1a      	ldr	r3, [pc, #104]	; (c384 <common_init+0x10c>)
    c31a:	f7f5 fb31 	bl	1980 <printk>
    c31e:	b662      	cpsie	i
    c320:	2004      	movs	r0, #4
    c322:	df02      	svc	2
	memq_init(link, &_radio.link_rx_head, (void *)&_radio.link_rx_tail);
    c324:	0022      	movs	r2, r4
    c326:	0021      	movs	r1, r4
    c328:	324d      	adds	r2, #77	; 0x4d
    c32a:	3149      	adds	r1, #73	; 0x49
    c32c:	31ff      	adds	r1, #255	; 0xff
    c32e:	32ff      	adds	r2, #255	; 0xff
    c330:	f7fe fb0c 	bl	a94c <memq_init>

	/* initialise advertiser channel map */
	_radio.advertiser.chan_map = 0x07;
    c334:	2238      	movs	r2, #56	; 0x38
    c336:	3406      	adds	r4, #6
    c338:	7fe3      	ldrb	r3, [r4, #31]

	/* initialise connection channel map */
	_radio.data_chan_map[0] = 0xFF;
    c33a:	20ff      	movs	r0, #255	; 0xff
	link = mem_acquire(&_radio.link_rx_free);
	LL_ASSERT(link);
	memq_init(link, &_radio.link_rx_head, (void *)&_radio.link_rx_tail);

	/* initialise advertiser channel map */
	_radio.advertiser.chan_map = 0x07;
    c33c:	4313      	orrs	r3, r2
    c33e:	77e3      	strb	r3, [r4, #31]
	/* initialise connection channel map */
	_radio.data_chan_map[0] = 0xFF;
	_radio.data_chan_map[1] = 0xFF;
	_radio.data_chan_map[2] = 0xFF;
	_radio.data_chan_map[3] = 0xFF;
	_radio.data_chan_map[4] = 0x1F;
    c340:	231f      	movs	r3, #31
    c342:	76eb      	strb	r3, [r5, #27]
	_radio.data_chan_count = 37;
    c344:	3306      	adds	r3, #6
    c346:	772b      	strb	r3, [r5, #28]

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
	/* Initialize the DLE defaults */
	_radio.default_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
    c348:	3b0a      	subs	r3, #10
    c34a:	8433      	strh	r3, [r6, #32]
	_radio.default_tx_time = RADIO_LL_LENGTH_TIME_RX_MIN;
    c34c:	332e      	adds	r3, #46	; 0x2e
    c34e:	33ff      	adds	r3, #255	; 0xff
    c350:	8473      	strh	r3, [r6, #34]	; 0x22
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
	/* Initialize the DLE defaults */
	_radio.default_phy_tx = BIT(0);
    c352:	3b48      	subs	r3, #72	; 0x48
    c354:	3bff      	subs	r3, #255	; 0xff

	/* initialise advertiser channel map */
	_radio.advertiser.chan_map = 0x07;

	/* initialise connection channel map */
	_radio.data_chan_map[0] = 0xFF;
    c356:	75e8      	strb	r0, [r5, #23]
	_radio.data_chan_map[1] = 0xFF;
    c358:	7628      	strb	r0, [r5, #24]
	_radio.data_chan_map[2] = 0xFF;
    c35a:	7668      	strb	r0, [r5, #25]
	_radio.data_chan_map[3] = 0xFF;
    c35c:	76a8      	strb	r0, [r5, #26]
	_radio.default_tx_time = RADIO_LL_LENGTH_TIME_RX_MIN;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
	/* Initialize the DLE defaults */
	_radio.default_phy_tx = BIT(0);
    c35e:	84b3      	strh	r3, [r6, #36]	; 0x24
	_radio.default_phy_rx = BIT(0);
    c360:	84f3      	strh	r3, [r6, #38]	; 0x26
	_radio.default_phy_rx |= BIT(2);
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PHY_CODED */
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PHY */

	/* allocate the rx queue */
	packet_rx_allocate(0xFF);
    c362:	f7ff ff3d 	bl	c1e0 <packet_rx_allocate>
}
    c366:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    c368:	200015c0 	.word	0x200015c0
    c36c:	20001704 	.word	0x20001704
    c370:	000154c4 	.word	0x000154c4
    c374:	00015484 	.word	0x00015484
    c378:	000154c9 	.word	0x000154c9
    c37c:	0001548b 	.word	0x0001548b
    c380:	00016aec 	.word	0x00016aec
    c384:	0001855f 	.word	0x0001855f

0000c388 <tx_cmplt_get>:
	return 0;
}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PHY */

static u8_t tx_cmplt_get(u16_t *handle, u8_t *first, u8_t last)
{
    c388:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t _first;
	u8_t cmplt;

	_first = *first;
    c38a:	780c      	ldrb	r4, [r1, #0]
	return 0;
}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PHY */

static u8_t tx_cmplt_get(u16_t *handle, u8_t *first, u8_t last)
{
    c38c:	b085      	sub	sp, #20
    c38e:	9001      	str	r0, [sp, #4]
    c390:	9102      	str	r1, [sp, #8]
    c392:	9203      	str	r2, [sp, #12]
	u8_t _first;
	u8_t cmplt;

	_first = *first;
	if (_first == last) {
		return 0;
    c394:	2000      	movs	r0, #0
{
	u8_t _first;
	u8_t cmplt;

	_first = *first;
	if (_first == last) {
    c396:	4294      	cmp	r4, r2
    c398:	d03f      	beq.n	c41a <tx_cmplt_get+0x92>
		return 0;
	}

	cmplt = 0;
    c39a:	0006      	movs	r6, r0
	*handle = _radio.pkt_release[_first].handle;
    c39c:	4d20      	ldr	r5, [pc, #128]	; (c420 <tx_cmplt_get+0x98>)
    c39e:	00e3      	lsls	r3, r4, #3
    c3a0:	35fc      	adds	r5, #252	; 0xfc
    c3a2:	6f2a      	ldr	r2, [r5, #112]	; 0x70
    c3a4:	5a9b      	ldrh	r3, [r3, r2]
    c3a6:	9a01      	ldr	r2, [sp, #4]
    c3a8:	8013      	strh	r3, [r2, #0]
	do {
		struct radio_pdu_node_tx *node_tx;
		struct pdu_data *pdu_data_tx;

		if (*handle != _radio.pkt_release[_first].handle) {
    c3aa:	6f2a      	ldr	r2, [r5, #112]	; 0x70
    c3ac:	00e3      	lsls	r3, r4, #3
    c3ae:	18d3      	adds	r3, r2, r3
    c3b0:	9a01      	ldr	r2, [sp, #4]
    c3b2:	8811      	ldrh	r1, [r2, #0]
    c3b4:	881a      	ldrh	r2, [r3, #0]
    c3b6:	4291      	cmp	r1, r2
    c3b8:	d12c      	bne.n	c414 <tx_cmplt_get+0x8c>
			break;
		}

		node_tx = _radio.pkt_release[_first].node_tx;
    c3ba:	6858      	ldr	r0, [r3, #4]
		/*@FIXME: assign before first 3 if conditions */
		pdu_data_tx = (struct pdu_data *)node_tx->pdu_data;
		if ((!node_tx) || (node_tx == (struct radio_pdu_node_tx *)1) ||
    c3bc:	2801      	cmp	r0, #1
    c3be:	d90d      	bls.n	c3dc <tx_cmplt_get+0x54>
    c3c0:	2203      	movs	r2, #3
    c3c2:	0001      	movs	r1, r0
    c3c4:	4391      	bics	r1, r2
    c3c6:	d00e      	beq.n	c3e6 <tx_cmplt_get+0x5e>
		    ((((u32_t)node_tx & ~(0x00000003)) != 0) &&
    c3c8:	1d01      	adds	r1, r0, #4
    c3ca:	d00c      	beq.n	c3e6 <tx_cmplt_get+0x5e>
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
    c3cc:	7941      	ldrb	r1, [r0, #5]
    c3ce:	2900      	cmp	r1, #0
    c3d0:	d009      	beq.n	c3e6 <tx_cmplt_get+0x5e>
    c3d2:	7901      	ldrb	r1, [r0, #4]
    c3d4:	400a      	ands	r2, r1
    c3d6:	3a01      	subs	r2, #1
    c3d8:	2a01      	cmp	r2, #1
    c3da:	d804      	bhi.n	c3e6 <tx_cmplt_get+0x5e>
		     ((pdu_data_tx->ll_id == PDU_DATA_LLID_DATA_START) ||
		      (pdu_data_tx->ll_id == PDU_DATA_LLID_DATA_CONTINUE)))) {

			/* data packet, hence count num cmplt */
			_radio.pkt_release[_first].node_tx =
    c3dc:	2201      	movs	r2, #1
    c3de:	605a      	str	r2, [r3, #4]
				(struct radio_pdu_node_tx *)1;

			cmplt++;
    c3e0:	18b3      	adds	r3, r6, r2
    c3e2:	b2de      	uxtb	r6, r3
    c3e4:	e001      	b.n	c3ea <tx_cmplt_get+0x62>
		} else {
			/* ctrl packet, hence not num cmplt */
			_radio.pkt_release[_first].node_tx =
    c3e6:	2202      	movs	r2, #2
    c3e8:	605a      	str	r2, [r3, #4]
				(struct radio_pdu_node_tx *)2;
		}

		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
    c3ea:	2303      	movs	r3, #3
    c3ec:	0002      	movs	r2, r0
    c3ee:	4f0c      	ldr	r7, [pc, #48]	; (c420 <tx_cmplt_get+0x98>)
    c3f0:	439a      	bics	r2, r3
    c3f2:	d004      	beq.n	c3fe <tx_cmplt_get+0x76>
			mem_release(node_tx, &_radio.pkt_tx_data_free);
    c3f4:	0039      	movs	r1, r7
    c3f6:	3161      	adds	r1, #97	; 0x61
    c3f8:	31ff      	adds	r1, #255	; 0xff
    c3fa:	f7fe fa62 	bl	a8c2 <mem_release>
		}

		_first = _first + 1;
		if (_first == _radio.packet_tx_count) {
    c3fe:	23b8      	movs	r3, #184	; 0xb8
    c400:	005b      	lsls	r3, r3, #1

		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
			mem_release(node_tx, &_radio.pkt_tx_data_free);
		}

		_first = _first + 1;
    c402:	3401      	adds	r4, #1
		if (_first == _radio.packet_tx_count) {
    c404:	5cfb      	ldrb	r3, [r7, r3]

		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
			mem_release(node_tx, &_radio.pkt_tx_data_free);
		}

		_first = _first + 1;
    c406:	b2e4      	uxtb	r4, r4
		if (_first == _radio.packet_tx_count) {
    c408:	42a3      	cmp	r3, r4
    c40a:	d100      	bne.n	c40e <tx_cmplt_get+0x86>
			_first = 0;
    c40c:	2400      	movs	r4, #0
		}

	} while (_first != last);
    c40e:	9b03      	ldr	r3, [sp, #12]
    c410:	429c      	cmp	r4, r3
    c412:	d1ca      	bne.n	c3aa <tx_cmplt_get+0x22>

	*first = _first;

	return cmplt;
    c414:	0030      	movs	r0, r6
			_first = 0;
		}

	} while (_first != last);

	*first = _first;
    c416:	9b02      	ldr	r3, [sp, #8]
    c418:	701c      	strb	r4, [r3, #0]

	return cmplt;
}
    c41a:	b005      	add	sp, #20
    c41c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c41e:	46c0      	nop			; (mov r8, r8)
    c420:	200015c0 	.word	0x200015c0

0000c424 <connection_get>:

static struct connection *connection_get(u16_t handle)
{
	struct connection *conn;

	if (handle < _radio.connection_count) {
    c424:	4b0a      	ldr	r3, [pc, #40]	; (c450 <connection_get+0x2c>)
{
	return &_radio.advertiser.scan_data;
}

static struct connection *connection_get(u16_t handle)
{
    c426:	b510      	push	{r4, lr}
	struct connection *conn;

	if (handle < _radio.connection_count) {
    c428:	001a      	movs	r2, r3
    c42a:	32ff      	adds	r2, #255	; 0xff
    c42c:	7b52      	ldrb	r2, [r2, #13]
{
	return &_radio.advertiser.scan_data;
}

static struct connection *connection_get(u16_t handle)
{
    c42e:	0004      	movs	r4, r0
	struct connection *conn;

	if (handle < _radio.connection_count) {
    c430:	4282      	cmp	r2, r0
    c432:	d90b      	bls.n	c44c <connection_get+0x28>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE, handle);
    c434:	218c      	movs	r1, #140	; 0x8c
    c436:	33fc      	adds	r3, #252	; 0xfc
    c438:	0002      	movs	r2, r0
    c43a:	0049      	lsls	r1, r1, #1
    c43c:	6898      	ldr	r0, [r3, #8]
    c43e:	f7fe fa5e 	bl	a8fe <mem_get>
		if ((conn) && (conn->handle == handle)) {
    c442:	2800      	cmp	r0, #0
    c444:	d002      	beq.n	c44c <connection_get+0x28>
    c446:	8c03      	ldrh	r3, [r0, #32]
    c448:	42a3      	cmp	r3, r4
    c44a:	d000      	beq.n	c44e <connection_get+0x2a>
			return conn;
		}
	}

	return 0;
    c44c:	2000      	movs	r0, #0
}
    c44e:	bd10      	pop	{r4, pc}
    c450:	200015c0 	.word	0x200015c0

0000c454 <role_disable>:
	}
}

static u32_t role_disable(u8_t ticker_id_primary, u8_t ticker_id_stop)
{
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    c454:	2302      	movs	r3, #2
		LL_ASSERT(0);
	}
}

static u32_t role_disable(u8_t ticker_id_primary, u8_t ticker_id_stop)
{
    c456:	b5f0      	push	{r4, r5, r6, r7, lr}
    c458:	b089      	sub	sp, #36	; 0x24
    c45a:	0004      	movs	r4, r0
    c45c:	9103      	str	r1, [sp, #12]
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    c45e:	9304      	str	r3, [sp, #16]
	u32_t ret;

	/* Determine xtal, active and start ticks. Stop directed adv stop
	 * ticker.
	 */
	switch (ticker_id_primary) {
    c460:	2805      	cmp	r0, #5
    c462:	d008      	beq.n	c476 <role_disable+0x22>
    c464:	2806      	cmp	r0, #6
    c466:	d127      	bne.n	c4b8 <role_disable+0x64>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
			  (ret_cb == TICKER_STATUS_FAILURE));
		break;

	case RADIO_TICKER_ID_SCAN:
		ticks_xtal_to_start =
    c468:	4b92      	ldr	r3, [pc, #584]	; (c6b4 <role_disable+0x260>)
    c46a:	001a      	movs	r2, r3
			_radio.scanner.hdr.ticks_xtal_to_start;
		ticks_active_to_start =
    c46c:	33d0      	adds	r3, #208	; 0xd0
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
			  (ret_cb == TICKER_STATUS_FAILURE));
		break;

	case RADIO_TICKER_ID_SCAN:
		ticks_xtal_to_start =
    c46e:	32cc      	adds	r2, #204	; 0xcc
    c470:	6817      	ldr	r7, [r2, #0]
			_radio.scanner.hdr.ticks_xtal_to_start;
		ticks_active_to_start =
    c472:	681b      	ldr	r3, [r3, #0]
    c474:	e02b      	b.n	c4ce <role_disable+0x7a>
	/* Determine xtal, active and start ticks. Stop directed adv stop
	 * ticker.
	 */
	switch (ticker_id_primary) {
	case RADIO_TICKER_ID_ADV:
		ticks_xtal_to_start =
    c476:	4b8f      	ldr	r3, [pc, #572]	; (c6b4 <role_disable+0x260>)
			_radio.advertiser.hdr.ticks_active_to_start;

		/* Stop ticker "may" be in use for direct adv,
		 * hence stop may fail if ticker not used.
		 */
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    c478:	9a03      	ldr	r2, [sp, #12]
	/* Determine xtal, active and start ticks. Stop directed adv stop
	 * ticker.
	 */
	switch (ticker_id_primary) {
	case RADIO_TICKER_ID_ADV:
		ticks_xtal_to_start =
    c47a:	695f      	ldr	r7, [r3, #20]
			_radio.advertiser.hdr.ticks_xtal_to_start;
		ticks_active_to_start =
    c47c:	699b      	ldr	r3, [r3, #24]
			_radio.advertiser.hdr.ticks_active_to_start;

		/* Stop ticker "may" be in use for direct adv,
		 * hence stop may fail if ticker not used.
		 */
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    c47e:	2103      	movs	r1, #3
	 */
	switch (ticker_id_primary) {
	case RADIO_TICKER_ID_ADV:
		ticks_xtal_to_start =
			_radio.advertiser.hdr.ticks_xtal_to_start;
		ticks_active_to_start =
    c480:	9302      	str	r3, [sp, #8]
			_radio.advertiser.hdr.ticks_active_to_start;

		/* Stop ticker "may" be in use for direct adv,
		 * hence stop may fail if ticker not used.
		 */
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    c482:	ab04      	add	r3, sp, #16
    c484:	9300      	str	r3, [sp, #0]
    c486:	2000      	movs	r0, #0
    c488:	4b8b      	ldr	r3, [pc, #556]	; (c6b8 <role_disable+0x264>)
    c48a:	f7ff fd85 	bl	bf98 <ticker_stop>
				  RADIO_TICKER_USER_ID_APP, ticker_id_stop,
				  ticker_if_done, (void *)&ret_cb);
		if (ret == TICKER_STATUS_BUSY) {
    c48e:	2802      	cmp	r0, #2
    c490:	d003      	beq.n	c49a <role_disable+0x46>
			while (ret_cb == TICKER_STATUS_BUSY) {
				cpu_sleep();
			}
		}

		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
    c492:	9b04      	ldr	r3, [sp, #16]
    c494:	2b00      	cmp	r3, #0
    c496:	d106      	bne.n	c4a6 <role_disable+0x52>
    c498:	e028      	b.n	c4ec <role_disable+0x98>
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
				  RADIO_TICKER_USER_ID_APP, ticker_id_stop,
				  ticker_if_done, (void *)&ret_cb);
		if (ret == TICKER_STATUS_BUSY) {
			/* wait for ticker to be stopped */
			while (ret_cb == TICKER_STATUS_BUSY) {
    c49a:	9b04      	ldr	r3, [sp, #16]
    c49c:	2b02      	cmp	r3, #2
    c49e:	d1f8      	bne.n	c492 <role_disable+0x3e>
				cpu_sleep();
    c4a0:	f7ff fe42 	bl	c128 <cpu_sleep>
    c4a4:	e7f9      	b.n	c49a <role_disable+0x46>
			}
		}

		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
    c4a6:	9b04      	ldr	r3, [sp, #16]
    c4a8:	2b01      	cmp	r3, #1
    c4aa:	d01f      	beq.n	c4ec <role_disable+0x98>
    c4ac:	4b83      	ldr	r3, [pc, #524]	; (c6bc <role_disable+0x268>)
    c4ae:	9301      	str	r3, [sp, #4]
    c4b0:	4b83      	ldr	r3, [pc, #524]	; (c6c0 <role_disable+0x26c>)
    c4b2:	9300      	str	r3, [sp, #0]
    c4b4:	4b83      	ldr	r3, [pc, #524]	; (c6c4 <role_disable+0x270>)
    c4b6:	e0cb      	b.n	c650 <role_disable+0x1fc>
			_radio.scanner.hdr.ticks_xtal_to_start;
		ticks_active_to_start =
			_radio.scanner.hdr.ticks_active_to_start;
		break;
	default:
		if (ticker_id_primary >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    c4b8:	2806      	cmp	r0, #6
    c4ba:	d90a      	bls.n	c4d2 <role_disable+0x7e>
			struct connection *conn;
			u16_t conn_handle;

			conn_handle = ticker_id_primary -
				      RADIO_TICKER_ID_FIRST_CONNECTION;
			conn = connection_get(conn_handle);
    c4bc:	3807      	subs	r0, #7
    c4be:	b280      	uxth	r0, r0
    c4c0:	f7ff ffb0 	bl	c424 <connection_get>
			if (!conn) {
    c4c4:	2800      	cmp	r0, #0
    c4c6:	d100      	bne.n	c4ca <role_disable+0x76>
    c4c8:	e0f1      	b.n	c6ae <role_disable+0x25a>
				return 1;
			}

			ticks_xtal_to_start =
    c4ca:	6807      	ldr	r7, [r0, #0]
				conn->hdr.ticks_xtal_to_start;
			ticks_active_to_start =
    c4cc:	6843      	ldr	r3, [r0, #4]
    c4ce:	9302      	str	r3, [sp, #8]
    c4d0:	e00c      	b.n	c4ec <role_disable+0x98>
				conn->hdr.ticks_active_to_start;
		} else {
			LL_ASSERT(0);
    c4d2:	4b7a      	ldr	r3, [pc, #488]	; (c6bc <role_disable+0x268>)
    c4d4:	9301      	str	r3, [sp, #4]
    c4d6:	4b7a      	ldr	r3, [pc, #488]	; (c6c0 <role_disable+0x26c>)
    c4d8:	9300      	str	r3, [sp, #0]
    c4da:	4b7a      	ldr	r3, [pc, #488]	; (c6c4 <role_disable+0x270>)
    c4dc:	4a7a      	ldr	r2, [pc, #488]	; (c6c8 <role_disable+0x274>)
    c4de:	497b      	ldr	r1, [pc, #492]	; (c6cc <role_disable+0x278>)
    c4e0:	487b      	ldr	r0, [pc, #492]	; (c6d0 <role_disable+0x27c>)
    c4e2:	f7f5 fa4d 	bl	1980 <printk>
    c4e6:	b662      	cpsie	i
    c4e8:	2004      	movs	r0, #4
    c4ea:	df02      	svc	2
		}
		break;
	}

	LL_ASSERT(!_radio.ticker_id_stop);
    c4ec:	4d71      	ldr	r5, [pc, #452]	; (c6b4 <role_disable+0x260>)
    c4ee:	7ba8      	ldrb	r0, [r5, #14]
    c4f0:	b2c0      	uxtb	r0, r0
    c4f2:	2800      	cmp	r0, #0
    c4f4:	d008      	beq.n	c508 <role_disable+0xb4>
    c4f6:	4b71      	ldr	r3, [pc, #452]	; (c6bc <role_disable+0x268>)
    c4f8:	4a73      	ldr	r2, [pc, #460]	; (c6c8 <role_disable+0x274>)
    c4fa:	9301      	str	r3, [sp, #4]
    c4fc:	4b70      	ldr	r3, [pc, #448]	; (c6c0 <role_disable+0x26c>)
    c4fe:	4973      	ldr	r1, [pc, #460]	; (c6cc <role_disable+0x278>)
    c500:	9300      	str	r3, [sp, #0]
    c502:	4874      	ldr	r0, [pc, #464]	; (c6d4 <role_disable+0x280>)
    c504:	4b6f      	ldr	r3, [pc, #444]	; (c6c4 <role_disable+0x270>)
    c506:	e7ec      	b.n	c4e2 <role_disable+0x8e>
	_radio.ticker_id_stop = ticker_id_primary;

	/* Step 1: Is Primary started? Stop the Primary ticker */
	ret_cb = TICKER_STATUS_BUSY;
    c508:	2302      	movs	r3, #2
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    c50a:	4e6b      	ldr	r6, [pc, #428]	; (c6b8 <role_disable+0x264>)
		}
		break;
	}

	LL_ASSERT(!_radio.ticker_id_stop);
	_radio.ticker_id_stop = ticker_id_primary;
    c50c:	73ac      	strb	r4, [r5, #14]

	/* Step 1: Is Primary started? Stop the Primary ticker */
	ret_cb = TICKER_STATUS_BUSY;
    c50e:	9304      	str	r3, [sp, #16]
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    c510:	ab04      	add	r3, sp, #16
    c512:	9300      	str	r3, [sp, #0]
    c514:	0022      	movs	r2, r4
    c516:	0033      	movs	r3, r6
    c518:	2103      	movs	r1, #3
    c51a:	f7ff fd3d 	bl	bf98 <ticker_stop>
			  RADIO_TICKER_USER_ID_APP, ticker_id_primary,
			  ticker_if_done, (void *)&ret_cb);

	if (ret == TICKER_STATUS_BUSY) {
    c51e:	2802      	cmp	r0, #2
    c520:	d005      	beq.n	c52e <role_disable+0xda>
		while (ret_cb == TICKER_STATUS_BUSY) {
			cpu_sleep();
		}
	}

	if (ret_cb != TICKER_STATUS_SUCCESS) {
    c522:	9b04      	ldr	r3, [sp, #16]
    c524:	4d63      	ldr	r5, [pc, #396]	; (c6b4 <role_disable+0x260>)
    c526:	2b00      	cmp	r3, #0
    c528:	d000      	beq.n	c52c <role_disable+0xd8>
    c52a:	e0bc      	b.n	c6a6 <role_disable+0x252>
    c52c:	e00d      	b.n	c54a <role_disable+0xf6>
			  RADIO_TICKER_USER_ID_APP, ticker_id_primary,
			  ticker_if_done, (void *)&ret_cb);

	if (ret == TICKER_STATUS_BUSY) {
		/* if inside our event, enable Job. */
		if (_radio.ticker_id_event == ticker_id_primary) {
    c52e:	7b6b      	ldrb	r3, [r5, #13]
    c530:	429c      	cmp	r4, r3
    c532:	d104      	bne.n	c53e <role_disable+0xea>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
    c534:	2201      	movs	r2, #1
    c536:	2003      	movs	r0, #3
    c538:	0011      	movs	r1, r2
    c53a:	f7fe f881 	bl	a640 <mayfly_enable>
				      RADIO_TICKER_USER_ID_JOB, 1);
		}

		/* wait for ticker to be stopped */
		while (ret_cb == TICKER_STATUS_BUSY) {
    c53e:	9b04      	ldr	r3, [sp, #16]
    c540:	2b02      	cmp	r3, #2
    c542:	d1ee      	bne.n	c522 <role_disable+0xce>
			cpu_sleep();
    c544:	f7ff fdf0 	bl	c128 <cpu_sleep>
    c548:	e7f9      	b.n	c53e <role_disable+0xea>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
		goto role_disable_cleanup;
	}

	/* Inside our event, gracefully handle XTAL and Radio actives */
	if ((_radio.ticker_id_prepare == ticker_id_primary)
    c54a:	7b2b      	ldrb	r3, [r5, #12]
    c54c:	429c      	cmp	r4, r3
    c54e:	d003      	beq.n	c558 <role_disable+0x104>
	    || (_radio.ticker_id_event == ticker_id_primary)) {
    c550:	7b6b      	ldrb	r3, [r5, #13]
    c552:	429c      	cmp	r4, r3
    c554:	d000      	beq.n	c558 <role_disable+0x104>
    c556:	e0a1      	b.n	c69c <role_disable+0x248>
				       u32_t ticks_active_to_start)
{
	static void *s_link[2];
	static struct mayfly s_mfy_radio_inactive = {0, 0, s_link, NULL,
		mayfly_radio_inactive};
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    c558:	2302      	movs	r3, #2
	u32_t ret;

	/* Step 2: Is caller before Event? Stop Event */
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    c55a:	2200      	movs	r2, #0
				       u32_t ticks_active_to_start)
{
	static void *s_link[2];
	static struct mayfly s_mfy_radio_inactive = {0, 0, s_link, NULL,
		mayfly_radio_inactive};
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    c55c:	9305      	str	r3, [sp, #20]
	u32_t ret;

	/* Step 2: Is caller before Event? Stop Event */
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    c55e:	ab05      	add	r3, sp, #20
    c560:	9300      	str	r3, [sp, #0]
    c562:	2103      	movs	r1, #3
    c564:	0033      	movs	r3, r6
    c566:	0010      	movs	r0, r2
    c568:	f7ff fd16 	bl	bf98 <ticker_stop>
			  RADIO_TICKER_USER_ID_APP, RADIO_TICKER_ID_EVENT,
			  ticker_if_done, (void *)&ret_cb);

	if (ret == TICKER_STATUS_BUSY) {
    c56c:	2802      	cmp	r0, #2
    c56e:	d107      	bne.n	c580 <role_disable+0x12c>
		mayfly_enable(RADIO_TICKER_USER_ID_APP,
    c570:	2201      	movs	r2, #1
    c572:	0011      	movs	r1, r2
    c574:	1880      	adds	r0, r0, r2
    c576:	f7fe f863 	bl	a640 <mayfly_enable>
			      RADIO_TICKER_USER_ID_JOB, 1);

		LL_ASSERT(ret_cb != TICKER_STATUS_BUSY);
    c57a:	9b05      	ldr	r3, [sp, #20]
    c57c:	2b02      	cmp	r3, #2
    c57e:	d053      	beq.n	c628 <role_disable+0x1d4>
	}

	if (ret_cb == TICKER_STATUS_SUCCESS) {
    c580:	9805      	ldr	r0, [sp, #20]
    c582:	2302      	movs	r3, #2
    c584:	2800      	cmp	r0, #0
    c586:	d139      	bne.n	c5fc <role_disable+0x1a8>
		static void *s_link[2];
		static struct mayfly s_mfy_xtal_stop = {0, 0, s_link, NULL,
			mayfly_xtal_stop};
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    c588:	9306      	str	r3, [sp, #24]
		u32_t ret;

		/* Reset the stored ticker id in prepare phase. */
		LL_ASSERT(_radio.ticker_id_prepare);
    c58a:	7b2b      	ldrb	r3, [r5, #12]
    c58c:	2b00      	cmp	r3, #0
    c58e:	d108      	bne.n	c5a2 <role_disable+0x14e>
    c590:	4b4a      	ldr	r3, [pc, #296]	; (c6bc <role_disable+0x268>)
    c592:	4a4d      	ldr	r2, [pc, #308]	; (c6c8 <role_disable+0x274>)
    c594:	9301      	str	r3, [sp, #4]
    c596:	4b4a      	ldr	r3, [pc, #296]	; (c6c0 <role_disable+0x26c>)
    c598:	494c      	ldr	r1, [pc, #304]	; (c6cc <role_disable+0x278>)
    c59a:	9300      	str	r3, [sp, #0]
    c59c:	484e      	ldr	r0, [pc, #312]	; (c6d8 <role_disable+0x284>)
    c59e:	4b4f      	ldr	r3, [pc, #316]	; (c6dc <role_disable+0x288>)
    c5a0:	e79f      	b.n	c4e2 <role_disable+0x8e>
		_radio.ticker_id_prepare = 0;

		/* Step 2.1: Is caller between Primary and Marker0?
		 * Stop the Marker0 event
		 */
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    c5a2:	ab06      	add	r3, sp, #24
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
		u32_t ret;

		/* Reset the stored ticker id in prepare phase. */
		LL_ASSERT(_radio.ticker_id_prepare);
		_radio.ticker_id_prepare = 0;
    c5a4:	7328      	strb	r0, [r5, #12]

		/* Step 2.1: Is caller between Primary and Marker0?
		 * Stop the Marker0 event
		 */
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    c5a6:	2201      	movs	r2, #1
    c5a8:	9300      	str	r3, [sp, #0]
    c5aa:	2103      	movs	r1, #3
    c5ac:	0033      	movs	r3, r6
    c5ae:	f7ff fcf3 	bl	bf98 <ticker_stop>
				  RADIO_TICKER_USER_ID_APP,
				  RADIO_TICKER_ID_MARKER_0,
				  ticker_if_done, (void *)&ret_cb);

		if (ret == TICKER_STATUS_BUSY) {
    c5b2:	2802      	cmp	r0, #2
    c5b4:	d107      	bne.n	c5c6 <role_disable+0x172>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
    c5b6:	2201      	movs	r2, #1
    c5b8:	0011      	movs	r1, r2
    c5ba:	1880      	adds	r0, r0, r2
    c5bc:	f7fe f840 	bl	a640 <mayfly_enable>
				      RADIO_TICKER_USER_ID_JOB, 1);

			LL_ASSERT(ret_cb != TICKER_STATUS_BUSY);
    c5c0:	9b06      	ldr	r3, [sp, #24]
    c5c2:	2b02      	cmp	r3, #2
    c5c4:	d030      	beq.n	c628 <role_disable+0x1d4>
		}

		if (ret_cb == TICKER_STATUS_SUCCESS) {
    c5c6:	9906      	ldr	r1, [sp, #24]
    c5c8:	2900      	cmp	r1, #0
    c5ca:	d104      	bne.n	c5d6 <role_disable+0x182>
			/* Step 2.1.1: Check and deassert Radio Active or XTAL
			 * start
			 */
			if (ticks_active_to_start > ticks_xtal_to_start) {
    c5cc:	9b02      	ldr	r3, [sp, #8]
    c5ce:	42bb      	cmp	r3, r7
    c5d0:	d90c      	bls.n	c5ec <role_disable+0x198>
				u32_t retval;

				/* radio active asserted, handle deasserting
				 * here
				 */
				retval = mayfly_enqueue(
    c5d2:	4b43      	ldr	r3, [pc, #268]	; (c6e0 <role_disable+0x28c>)
    c5d4:	e00b      	b.n	c5ee <role_disable+0x19a>
						RADIO_TICKER_USER_ID_APP,
						RADIO_TICKER_USER_ID_WORKER, 0,
						&s_mfy_xtal_stop);
				LL_ASSERT(!retval);
			}
		} else if (ret_cb == TICKER_STATUS_FAILURE) {
    c5d6:	9b06      	ldr	r3, [sp, #24]
    c5d8:	2b01      	cmp	r3, #1
    c5da:	d159      	bne.n	c690 <role_disable+0x23c>
			u32_t retval;

			/* Step 2.1.2: Deassert Radio Active and XTAL start */

			/* radio active asserted, handle deasserting here */
			retval = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    c5dc:	2200      	movs	r2, #0
    c5de:	4b40      	ldr	r3, [pc, #256]	; (c6e0 <role_disable+0x28c>)
    c5e0:	0011      	movs	r1, r2
    c5e2:	2003      	movs	r0, #3
    c5e4:	f7fe f84c 	bl	a680 <mayfly_enqueue>
    c5e8:	1e01      	subs	r1, r0, #0
						RADIO_TICKER_USER_ID_WORKER, 0,
						&s_mfy_radio_inactive);
			LL_ASSERT(!retval);
    c5ea:	d142      	bne.n	c672 <role_disable+0x21e>

			/* XTAL started, handle XTAL stop here */
			retval = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    c5ec:	4b3d      	ldr	r3, [pc, #244]	; (c6e4 <role_disable+0x290>)
    c5ee:	000a      	movs	r2, r1
    c5f0:	2003      	movs	r0, #3
    c5f2:	f7fe f845 	bl	a680 <mayfly_enqueue>
						RADIO_TICKER_USER_ID_WORKER, 0,
						&s_mfy_xtal_stop);
			LL_ASSERT(!retval);
    c5f6:	2800      	cmp	r0, #0
    c5f8:	d050      	beq.n	c69c <role_disable+0x248>
    c5fa:	e03a      	b.n	c672 <role_disable+0x21e>
		} else {
			LL_ASSERT(0);
		}
	} else if (ret_cb == TICKER_STATUS_FAILURE) {
    c5fc:	9c05      	ldr	r4, [sp, #20]
    c5fe:	2c01      	cmp	r4, #1
    c600:	d146      	bne.n	c690 <role_disable+0x23c>
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    c602:	9307      	str	r3, [sp, #28]
		 * (role dependent)
		 */
		/* Stop ticker "may" be in use for direct adv or scanner,
		 * hence stop may fail if ticker not used.
		 */
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    c604:	ab07      	add	r3, sp, #28
    c606:	9300      	str	r3, [sp, #0]
    c608:	9a03      	ldr	r2, [sp, #12]
    c60a:	0033      	movs	r3, r6
    c60c:	2103      	movs	r1, #3
    c60e:	2000      	movs	r0, #0
    c610:	f7ff fcc2 	bl	bf98 <ticker_stop>
				  RADIO_TICKER_USER_ID_APP, ticker_id_stop,
				  ticker_if_done, (void *)&ret_cb);

		if (ret == TICKER_STATUS_BUSY) {
    c614:	2802      	cmp	r0, #2
    c616:	d110      	bne.n	c63a <role_disable+0x1e6>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
    c618:	0022      	movs	r2, r4
    c61a:	0021      	movs	r1, r4
    c61c:	3001      	adds	r0, #1
    c61e:	f7fe f80f 	bl	a640 <mayfly_enable>
				      RADIO_TICKER_USER_ID_JOB, 1);

			LL_ASSERT(ret_cb != TICKER_STATUS_BUSY);
    c622:	9b07      	ldr	r3, [sp, #28]
    c624:	2b02      	cmp	r3, #2
    c626:	d108      	bne.n	c63a <role_disable+0x1e6>
    c628:	4b24      	ldr	r3, [pc, #144]	; (c6bc <role_disable+0x268>)
    c62a:	4a27      	ldr	r2, [pc, #156]	; (c6c8 <role_disable+0x274>)
    c62c:	9301      	str	r3, [sp, #4]
    c62e:	4b24      	ldr	r3, [pc, #144]	; (c6c0 <role_disable+0x26c>)
    c630:	4926      	ldr	r1, [pc, #152]	; (c6cc <role_disable+0x278>)
    c632:	9300      	str	r3, [sp, #0]
    c634:	482c      	ldr	r0, [pc, #176]	; (c6e8 <role_disable+0x294>)
    c636:	4b29      	ldr	r3, [pc, #164]	; (c6dc <role_disable+0x288>)
    c638:	e753      	b.n	c4e2 <role_disable+0x8e>
		}

		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
    c63a:	9b07      	ldr	r3, [sp, #28]
    c63c:	2b00      	cmp	r3, #0
    c63e:	d00b      	beq.n	c658 <role_disable+0x204>
    c640:	9b07      	ldr	r3, [sp, #28]
    c642:	2b01      	cmp	r3, #1
    c644:	d008      	beq.n	c658 <role_disable+0x204>
    c646:	4b1d      	ldr	r3, [pc, #116]	; (c6bc <role_disable+0x268>)
    c648:	9301      	str	r3, [sp, #4]
    c64a:	4b1d      	ldr	r3, [pc, #116]	; (c6c0 <role_disable+0x26c>)
    c64c:	9300      	str	r3, [sp, #0]
    c64e:	4b23      	ldr	r3, [pc, #140]	; (c6dc <role_disable+0x288>)
    c650:	4a1d      	ldr	r2, [pc, #116]	; (c6c8 <role_disable+0x274>)
    c652:	491e      	ldr	r1, [pc, #120]	; (c6cc <role_disable+0x278>)
    c654:	4825      	ldr	r0, [pc, #148]	; (c6ec <role_disable+0x298>)
    c656:	e744      	b.n	c4e2 <role_disable+0x8e>
			  (ret_cb == TICKER_STATUS_FAILURE));

		if (_radio.role != ROLE_NONE) {
    c658:	7beb      	ldrb	r3, [r5, #15]
    c65a:	2b00      	cmp	r3, #0
    c65c:	d01e      	beq.n	c69c <role_disable+0x248>
			static struct mayfly s_mfy_radio_stop = {0, 0, s_link,
				NULL, mayfly_radio_stop};
			u32_t retval;

			/* Radio state STOP is supplied in params */
			s_mfy_radio_stop.param = (void *)STATE_STOP;
    c65e:	2204      	movs	r2, #4
    c660:	4b23      	ldr	r3, [pc, #140]	; (c6f0 <role_disable+0x29c>)

			/* Stop Radio Tx/Rx */
			retval = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    c662:	2003      	movs	r0, #3
			static struct mayfly s_mfy_radio_stop = {0, 0, s_link,
				NULL, mayfly_radio_stop};
			u32_t retval;

			/* Radio state STOP is supplied in params */
			s_mfy_radio_stop.param = (void *)STATE_STOP;
    c664:	609a      	str	r2, [r3, #8]

			/* Stop Radio Tx/Rx */
			retval = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    c666:	2200      	movs	r2, #0
    c668:	0011      	movs	r1, r2
    c66a:	f7fe f809 	bl	a680 <mayfly_enqueue>
						RADIO_TICKER_USER_ID_WORKER, 0,
						&s_mfy_radio_stop);
			LL_ASSERT(!retval);
    c66e:	2800      	cmp	r0, #0
    c670:	d008      	beq.n	c684 <role_disable+0x230>
    c672:	4b12      	ldr	r3, [pc, #72]	; (c6bc <role_disable+0x268>)
    c674:	4a14      	ldr	r2, [pc, #80]	; (c6c8 <role_disable+0x274>)
    c676:	9301      	str	r3, [sp, #4]
    c678:	4b11      	ldr	r3, [pc, #68]	; (c6c0 <role_disable+0x26c>)
    c67a:	4914      	ldr	r1, [pc, #80]	; (c6cc <role_disable+0x278>)
    c67c:	9300      	str	r3, [sp, #0]
    c67e:	481d      	ldr	r0, [pc, #116]	; (c6f4 <role_disable+0x2a0>)
    c680:	4b16      	ldr	r3, [pc, #88]	; (c6dc <role_disable+0x288>)
    c682:	e72e      	b.n	c4e2 <role_disable+0x8e>

			/* wait for radio ISR to exit */
			while (_radio.role != ROLE_NONE) {
    c684:	7beb      	ldrb	r3, [r5, #15]
    c686:	2b00      	cmp	r3, #0
    c688:	d008      	beq.n	c69c <role_disable+0x248>
				cpu_sleep();
    c68a:	f7ff fd4d 	bl	c128 <cpu_sleep>
    c68e:	e7f9      	b.n	c684 <role_disable+0x230>
			}
		}
	} else {
		LL_ASSERT(0);
    c690:	4b0a      	ldr	r3, [pc, #40]	; (c6bc <role_disable+0x268>)
    c692:	9301      	str	r3, [sp, #4]
    c694:	4b0a      	ldr	r3, [pc, #40]	; (c6c0 <role_disable+0x26c>)
    c696:	9300      	str	r3, [sp, #0]
    c698:	4b10      	ldr	r3, [pc, #64]	; (c6dc <role_disable+0x288>)
    c69a:	e71f      	b.n	c4dc <role_disable+0x88>

		role_active_disable(ticker_id_stop,
				    ticks_xtal_to_start, ticks_active_to_start);
	}

	if (!_radio.ticker_id_stop) {
    c69c:	7bab      	ldrb	r3, [r5, #14]
    c69e:	2b00      	cmp	r3, #0
    c6a0:	d101      	bne.n	c6a6 <role_disable+0x252>
		ret_cb = TICKER_STATUS_FAILURE;
    c6a2:	3301      	adds	r3, #1
    c6a4:	9304      	str	r3, [sp, #16]
	}

role_disable_cleanup:
	_radio.ticker_id_stop = 0;
    c6a6:	2300      	movs	r3, #0
    c6a8:	73ab      	strb	r3, [r5, #14]

	return ret_cb;
    c6aa:	9804      	ldr	r0, [sp, #16]
    c6ac:	e000      	b.n	c6b0 <role_disable+0x25c>

			conn_handle = ticker_id_primary -
				      RADIO_TICKER_ID_FIRST_CONNECTION;
			conn = connection_get(conn_handle);
			if (!conn) {
				return 1;
    c6ae:	2001      	movs	r0, #1

role_disable_cleanup:
	_radio.ticker_id_stop = 0;

	return ret_cb;
}
    c6b0:	b009      	add	sp, #36	; 0x24
    c6b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c6b4:	200015c0 	.word	0x200015c0
    c6b8:	0000c131 	.word	0x0000c131
    c6bc:	000154c4 	.word	0x000154c4
    c6c0:	000154c9 	.word	0x000154c9
    c6c4:	0001852b 	.word	0x0001852b
    c6c8:	00015484 	.word	0x00015484
    c6cc:	0001548b 	.word	0x0001548b
    c6d0:	00015b21 	.word	0x00015b21
    c6d4:	00016b52 	.word	0x00016b52
    c6d8:	00016bb7 	.word	0x00016bb7
    c6dc:	0001825b 	.word	0x0001825b
    c6e0:	200008d0 	.word	0x200008d0
    c6e4:	20000890 	.word	0x20000890
    c6e8:	00016b8a 	.word	0x00016b8a
    c6ec:	00016b12 	.word	0x00016b12
    c6f0:	200008f0 	.word	0x200008f0
    c6f4:	00016bf1 	.word	0x00016bf1

0000c6f8 <mayfly_xtal_retain>:
	DEBUG_RADIO_CLOSE(0);
}

#if defined(CONFIG_BLUETOOTH_CONTROLLER_XTAL_ADVANCED)
static void mayfly_xtal_retain(u8_t caller_id, u8_t retain)
{
    c6f8:	b507      	push	{r0, r1, r2, lr}
    c6fa:	4b1e      	ldr	r3, [pc, #120]	; (c774 <mayfly_xtal_retain+0x7c>)
	static u8_t s_xtal_retained;

	if (retain) {
    c6fc:	2900      	cmp	r1, #0
    c6fe:	d021      	beq.n	c744 <mayfly_xtal_retain+0x4c>
		if (!s_xtal_retained) {
    c700:	7819      	ldrb	r1, [r3, #0]
    c702:	2900      	cmp	r1, #0
    c704:	d134      	bne.n	c770 <mayfly_xtal_retain+0x78>
			static struct mayfly s_mfy_xtal_start = {0, 0, s_link,
				NULL, mayfly_xtal_start};
			u32_t retval;

			/* Only user id job will try to retain the XTAL. */
			LL_ASSERT(caller_id == RADIO_TICKER_USER_ID_JOB);
    c706:	2801      	cmp	r0, #1
    c708:	d008      	beq.n	c71c <mayfly_xtal_retain+0x24>
    c70a:	4b1b      	ldr	r3, [pc, #108]	; (c778 <mayfly_xtal_retain+0x80>)
    c70c:	4a1b      	ldr	r2, [pc, #108]	; (c77c <mayfly_xtal_retain+0x84>)
    c70e:	9301      	str	r3, [sp, #4]
    c710:	4b1b      	ldr	r3, [pc, #108]	; (c780 <mayfly_xtal_retain+0x88>)
    c712:	491c      	ldr	r1, [pc, #112]	; (c784 <mayfly_xtal_retain+0x8c>)
    c714:	9300      	str	r3, [sp, #0]
    c716:	481c      	ldr	r0, [pc, #112]	; (c788 <mayfly_xtal_retain+0x90>)
    c718:	4b1c      	ldr	r3, [pc, #112]	; (c78c <mayfly_xtal_retain+0x94>)
    c71a:	e00e      	b.n	c73a <mayfly_xtal_retain+0x42>

			s_xtal_retained = 1;

			retval = mayfly_enqueue(caller_id,
    c71c:	000a      	movs	r2, r1
			u32_t retval;

			/* Only user id job will try to retain the XTAL. */
			LL_ASSERT(caller_id == RADIO_TICKER_USER_ID_JOB);

			s_xtal_retained = 1;
    c71e:	7018      	strb	r0, [r3, #0]

			retval = mayfly_enqueue(caller_id,
    c720:	4b1b      	ldr	r3, [pc, #108]	; (c790 <mayfly_xtal_retain+0x98>)
    c722:	f7fd ffad 	bl	a680 <mayfly_enqueue>
						RADIO_TICKER_USER_ID_WORKER, 0,
						&s_mfy_xtal_start);
			LL_ASSERT(!retval);
    c726:	2800      	cmp	r0, #0
    c728:	d022      	beq.n	c770 <mayfly_xtal_retain+0x78>
    c72a:	4b13      	ldr	r3, [pc, #76]	; (c778 <mayfly_xtal_retain+0x80>)
    c72c:	4a13      	ldr	r2, [pc, #76]	; (c77c <mayfly_xtal_retain+0x84>)
    c72e:	9301      	str	r3, [sp, #4]
    c730:	4b13      	ldr	r3, [pc, #76]	; (c780 <mayfly_xtal_retain+0x88>)
    c732:	4914      	ldr	r1, [pc, #80]	; (c784 <mayfly_xtal_retain+0x8c>)
    c734:	9300      	str	r3, [sp, #0]
    c736:	4817      	ldr	r0, [pc, #92]	; (c794 <mayfly_xtal_retain+0x9c>)
    c738:	4b14      	ldr	r3, [pc, #80]	; (c78c <mayfly_xtal_retain+0x94>)
    c73a:	f7f5 f921 	bl	1980 <printk>
    c73e:	b662      	cpsie	i
    c740:	2004      	movs	r0, #4
    c742:	df02      	svc	2
		}
	} else {
		if (s_xtal_retained) {
    c744:	781a      	ldrb	r2, [r3, #0]
    c746:	2a00      	cmp	r2, #0
    c748:	d012      	beq.n	c770 <mayfly_xtal_retain+0x78>
				{0, 0, s_link[1], NULL, mayfly_xtal_stop}
			};
			struct mayfly *p_mfy_xtal_stop = NULL;
			u32_t retval;

			s_xtal_retained = 0;
    c74a:	7019      	strb	r1, [r3, #0]
    c74c:	4b12      	ldr	r3, [pc, #72]	; (c798 <mayfly_xtal_retain+0xa0>)

			switch (caller_id) {
    c74e:	2800      	cmp	r0, #0
    c750:	d00b      	beq.n	c76a <mayfly_xtal_retain+0x72>
			case RADIO_TICKER_USER_ID_WORKER:
				p_mfy_xtal_stop = &s_mfy_xtal_stop[0];
				break;

			case RADIO_TICKER_USER_ID_JOB:
				p_mfy_xtal_stop = &s_mfy_xtal_stop[1];
    c752:	3310      	adds	r3, #16
			struct mayfly *p_mfy_xtal_stop = NULL;
			u32_t retval;

			s_xtal_retained = 0;

			switch (caller_id) {
    c754:	2801      	cmp	r0, #1
    c756:	d008      	beq.n	c76a <mayfly_xtal_retain+0x72>
			case RADIO_TICKER_USER_ID_JOB:
				p_mfy_xtal_stop = &s_mfy_xtal_stop[1];
				break;

			default:
				LL_ASSERT(0);
    c758:	4b07      	ldr	r3, [pc, #28]	; (c778 <mayfly_xtal_retain+0x80>)
    c75a:	4a08      	ldr	r2, [pc, #32]	; (c77c <mayfly_xtal_retain+0x84>)
    c75c:	9301      	str	r3, [sp, #4]
    c75e:	4b08      	ldr	r3, [pc, #32]	; (c780 <mayfly_xtal_retain+0x88>)
    c760:	4908      	ldr	r1, [pc, #32]	; (c784 <mayfly_xtal_retain+0x8c>)
    c762:	9300      	str	r3, [sp, #0]
    c764:	480d      	ldr	r0, [pc, #52]	; (c79c <mayfly_xtal_retain+0xa4>)
    c766:	4b09      	ldr	r3, [pc, #36]	; (c78c <mayfly_xtal_retain+0x94>)
    c768:	e7e7      	b.n	c73a <mayfly_xtal_retain+0x42>
				break;
			}

			retval = mayfly_enqueue(caller_id,
    c76a:	2200      	movs	r2, #0
    c76c:	0011      	movs	r1, r2
    c76e:	e7d8      	b.n	c722 <mayfly_xtal_retain+0x2a>
						RADIO_TICKER_USER_ID_WORKER, 0,
						p_mfy_xtal_stop);
			LL_ASSERT(!retval);
		}
	}
}
    c770:	bd07      	pop	{r0, r1, r2, pc}
    c772:	46c0      	nop			; (mov r8, r8)
    c774:	200015a5 	.word	0x200015a5
    c778:	000154c4 	.word	0x000154c4
    c77c:	00015484 	.word	0x00015484
    c780:	000154c9 	.word	0x000154c9
    c784:	0001548b 	.word	0x0001548b
    c788:	00016c1a 	.word	0x00016c1a
    c78c:	0001831c 	.word	0x0001831c
    c790:	20000870 	.word	0x20000870
    c794:	00016bf1 	.word	0x00016bf1
    c798:	20000900 	.word	0x20000900
    c79c:	00015b21 	.word	0x00015b21

0000c7a0 <rx_packet_set>:

	DEBUG_RADIO_START_M(0);
}

static void rx_packet_set(struct connection *conn, struct pdu_data *pdu_data_rx)
{
    c7a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#else /* !CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */
	max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
	phy = conn->phy_rx;
    c7a2:	0003      	movs	r3, r0

	DEBUG_RADIO_START_M(0);
}

static void rx_packet_set(struct connection *conn, struct pdu_data *pdu_data_rx)
{
    c7a4:	0006      	movs	r6, r0
#else /* !CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */
	max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
	phy = conn->phy_rx;
    c7a6:	3333      	adds	r3, #51	; 0x33
    c7a8:	781c      	ldrb	r4, [r3, #0]
{
	u16_t max_rx_octets;
	u8_t phy;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
	max_rx_octets = conn->max_rx_octets;
    c7aa:	8e05      	ldrh	r5, [r0, #48]	; 0x30
#else /* !CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */
	max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
	phy = conn->phy_rx;
    c7ac:	06a4      	lsls	r4, r4, #26
    c7ae:	0f64      	lsrs	r4, r4, #29
#else /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */
	phy = 0;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */

	radio_phy_set(phy, 0);
    c7b0:	0020      	movs	r0, r4

	DEBUG_RADIO_START_M(0);
}

static void rx_packet_set(struct connection *conn, struct pdu_data *pdu_data_rx)
{
    c7b2:	000f      	movs	r7, r1
	phy = conn->phy_rx;
#else /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */
	phy = 0;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */

	radio_phy_set(phy, 0);
    c7b4:	2100      	movs	r1, #0
    c7b6:	f7fe f9d7 	bl	ab68 <radio_phy_set>

	if (conn->enc_rx) {
    c7ba:	0033      	movs	r3, r6
    c7bc:	2201      	movs	r2, #1
    c7be:	33c0      	adds	r3, #192	; 0xc0
    c7c0:	781b      	ldrb	r3, [r3, #0]
    c7c2:	0064      	lsls	r4, r4, #1
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
    c7c4:	4322      	orrs	r2, r4
	phy = 0;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */

	radio_phy_set(phy, 0);

	if (conn->enc_rx) {
    c7c6:	06db      	lsls	r3, r3, #27
    c7c8:	d50a      	bpl.n	c7e0 <rx_packet_set+0x40>
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
    c7ca:	1d29      	adds	r1, r5, #4
    c7cc:	b2c9      	uxtb	r1, r1
    c7ce:	2008      	movs	r0, #8
    c7d0:	f7fe fa0c 	bl	abec <radio_pkt_configure>

		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&conn->ccm_rx,
    c7d4:	0030      	movs	r0, r6
    c7d6:	0039      	movs	r1, r7
    c7d8:	30c1      	adds	r0, #193	; 0xc1
    c7da:	f7fe fc29 	bl	b030 <radio_ccm_rx_pkt_set>
    c7de:	e004      	b.n	c7ea <rx_packet_set+0x4a>
						      pdu_data_rx));
	} else {
		radio_pkt_configure(8, max_rx_octets, (phy << 1) | 0x01);
    c7e0:	2008      	movs	r0, #8
    c7e2:	b2e9      	uxtb	r1, r5
    c7e4:	f7fe fa02 	bl	abec <radio_pkt_configure>

		radio_pkt_rx_set(pdu_data_rx);
    c7e8:	0038      	movs	r0, r7
    c7ea:	f7fe fa1d 	bl	ac28 <radio_pkt_rx_set>
	}
}
    c7ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000c7f0 <prepare_pdu_data_tx>:
	}
}

static void prepare_pdu_data_tx(struct connection *conn,
				struct pdu_data **pdu_data_tx)
{
    c7f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct pdu_data *_pdu_data_tx;

	/*@FIXME: assign before checking first 3 conditions */
	_pdu_data_tx = (struct pdu_data *)conn->pkt_tx_head->pdu_data;

	if ((conn->empty != 0) || /* empty packet */
    c7f2:	0006      	movs	r6, r0
    c7f4:	0004      	movs	r4, r0
    c7f6:	36c0      	adds	r6, #192	; 0xc0
	}
}

static void prepare_pdu_data_tx(struct connection *conn,
				struct pdu_data **pdu_data_tx)
{
    c7f8:	000d      	movs	r5, r1
	struct pdu_data *_pdu_data_tx;

	/*@FIXME: assign before checking first 3 conditions */
	_pdu_data_tx = (struct pdu_data *)conn->pkt_tx_head->pdu_data;

	if ((conn->empty != 0) || /* empty packet */
    c7fa:	7831      	ldrb	r1, [r6, #0]
	}
}

static void prepare_pdu_data_tx(struct connection *conn,
				struct pdu_data **pdu_data_tx)
{
    c7fc:	0002      	movs	r2, r0
	struct pdu_data *_pdu_data_tx;

	/*@FIXME: assign before checking first 3 conditions */
	_pdu_data_tx = (struct pdu_data *)conn->pkt_tx_head->pdu_data;

	if ((conn->empty != 0) || /* empty packet */
    c7fe:	09cb      	lsrs	r3, r1, #7
    c800:	34fc      	adds	r4, #252	; 0xfc
    c802:	2b00      	cmp	r3, #0
    c804:	d133      	bne.n	c86e <prepare_pdu_data_tx+0x7e>
				struct pdu_data **pdu_data_tx)
{
	struct pdu_data *_pdu_data_tx;

	/*@FIXME: assign before checking first 3 conditions */
	_pdu_data_tx = (struct pdu_data *)conn->pkt_tx_head->pdu_data;
    c806:	68a3      	ldr	r3, [r4, #8]

	if ((conn->empty != 0) || /* empty packet */
    c808:	2b00      	cmp	r3, #0
    c80a:	d030      	beq.n	c86e <prepare_pdu_data_tx+0x7e>
				struct pdu_data **pdu_data_tx)
{
	struct pdu_data *_pdu_data_tx;

	/*@FIXME: assign before checking first 3 conditions */
	_pdu_data_tx = (struct pdu_data *)conn->pkt_tx_head->pdu_data;
    c80c:	1d18      	adds	r0, r3, #4
    c80e:	9001      	str	r0, [sp, #4]

	if ((conn->empty != 0) || /* empty packet */
	   /* no ctrl or data packet */
	   (conn->pkt_tx_head == 0) ||
    c810:	0708      	lsls	r0, r1, #28
    c812:	d542      	bpl.n	c89a <prepare_pdu_data_tx+0xaa>
	   /* data tx paused, only control packets allowed */
	   ((conn->pause_tx) && (_pdu_data_tx != 0) &&
    c814:	795f      	ldrb	r7, [r3, #5]
    c816:	2f00      	cmp	r7, #0
    c818:	d03f      	beq.n	c89a <prepare_pdu_data_tx+0xaa>
	    (_pdu_data_tx->len != 0) &&
    c81a:	791f      	ldrb	r7, [r3, #4]
    c81c:	43ff      	mvns	r7, r7
    c81e:	07b8      	lsls	r0, r7, #30
    c820:	d125      	bne.n	c86e <prepare_pdu_data_tx+0x7e>
	    ((_pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
	     ((conn->role.master.role == 0) &&
    c822:	0017      	movs	r7, r2
    c824:	3744      	adds	r7, #68	; 0x44
	   /* no ctrl or data packet */
	   (conn->pkt_tx_head == 0) ||
	   /* data tx paused, only control packets allowed */
	   ((conn->pause_tx) && (_pdu_data_tx != 0) &&
	    (_pdu_data_tx->len != 0) &&
	    ((_pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    c826:	783f      	ldrb	r7, [r7, #0]
    c828:	79db      	ldrb	r3, [r3, #7]
    c82a:	46bc      	mov	ip, r7
    c82c:	4660      	mov	r0, ip
    c82e:	2740      	movs	r7, #64	; 0x40
    c830:	07c0      	lsls	r0, r0, #31
    c832:	d40c      	bmi.n	c84e <prepare_pdu_data_tx+0x5e>
	     ((conn->role.master.role == 0) &&
    c834:	4239      	tst	r1, r7
    c836:	d102      	bne.n	c83e <prepare_pdu_data_tx+0x4e>
	      (((conn->refresh == 0) &&
    c838:	2b02      	cmp	r3, #2
    c83a:	d105      	bne.n	c848 <prepare_pdu_data_tx+0x58>
    c83c:	e02d      	b.n	c89a <prepare_pdu_data_tx+0xaa>
		(_pdu_data_tx->payload.llctrl.opcode !=
		 PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_START_ENC_RSP) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_REJECT_IND) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
	       ((conn->refresh != 0) &&
    c83e:	1e99      	subs	r1, r3, #2
    c840:	2901      	cmp	r1, #1
    c842:	d92a      	bls.n	c89a <prepare_pdu_data_tx+0xaa>
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
    c844:	2b0b      	cmp	r3, #11
    c846:	d028      	beq.n	c89a <prepare_pdu_data_tx+0xaa>
	      (((conn->refresh == 0) &&
		(_pdu_data_tx->payload.llctrl.opcode !=
		 PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_START_ENC_RSP) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_REJECT_IND) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    c848:	2b06      	cmp	r3, #6
    c84a:	d10c      	bne.n	c866 <prepare_pdu_data_tx+0x76>
    c84c:	e025      	b.n	c89a <prepare_pdu_data_tx+0xaa>
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_START_ENC_RSP) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_REJECT_IND) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
	     ((conn->role.slave.role != 0) &&
    c84e:	4239      	tst	r1, r7
    c850:	d102      	bne.n	c858 <prepare_pdu_data_tx+0x68>
	      (((conn->refresh == 0) &&
    c852:	2b02      	cmp	r3, #2
    c854:	d104      	bne.n	c860 <prepare_pdu_data_tx+0x70>
    c856:	e020      	b.n	c89a <prepare_pdu_data_tx+0xaa>
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_START_ENC_REQ) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_START_ENC_RSP) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_REJECT_IND) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
	       ((conn->refresh != 0) &&
    c858:	27fd      	movs	r7, #253	; 0xfd
    c85a:	1e99      	subs	r1, r3, #2
    c85c:	4239      	tst	r1, r7
    c85e:	d01c      	beq.n	c89a <prepare_pdu_data_tx+0xaa>
	      (((conn->refresh == 0) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_START_ENC_REQ) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_START_ENC_RSP) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_REJECT_IND) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    c860:	1f59      	subs	r1, r3, #5
    c862:	2901      	cmp	r1, #1
    c864:	d919      	bls.n	c89a <prepare_pdu_data_tx+0xaa>
    c866:	21fb      	movs	r1, #251	; 0xfb
    c868:	3b0d      	subs	r3, #13
    c86a:	420b      	tst	r3, r1
    c86c:	d015      	beq.n	c89a <prepare_pdu_data_tx+0xaa>

static struct pdu_data *empty_tx_enqueue(struct connection *conn)
{
	struct pdu_data *pdu_data_tx;

	conn->empty = 1;
    c86e:	2280      	movs	r2, #128	; 0x80
    c870:	7833      	ldrb	r3, [r6, #0]
    c872:	4252      	negs	r2, r2
    c874:	4313      	orrs	r3, r2
    c876:	7033      	strb	r3, [r6, #0]

	pdu_data_tx = (struct pdu_data *)radio_pkt_empty_get();
    c878:	f7fe fa44 	bl	ad04 <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    c87c:	2203      	movs	r2, #3
    c87e:	7803      	ldrb	r3, [r0, #0]
    c880:	4393      	bics	r3, r2
    c882:	3a02      	subs	r2, #2
    c884:	4313      	orrs	r3, r2
    c886:	7003      	strb	r3, [r0, #0]
	pdu_data_tx->len = 0;
    c888:	2300      	movs	r3, #0
    c88a:	7043      	strb	r3, [r0, #1]
	if (conn->pkt_tx_head) {
    c88c:	68a1      	ldr	r1, [r4, #8]
    c88e:	7803      	ldrb	r3, [r0, #0]
    c890:	320f      	adds	r2, #15
    c892:	2900      	cmp	r1, #0
    c894:	d129      	bne.n	c8ea <prepare_pdu_data_tx+0xfa>
		pdu_data_tx->md = 1;
	} else {
		pdu_data_tx->md = 0;
    c896:	4393      	bics	r3, r2
    c898:	e028      	b.n	c8ec <prepare_pdu_data_tx+0xfc>
	} else {
		u16_t max_tx_octets;

		_pdu_data_tx =
			(struct pdu_data *)(conn->pkt_tx_head->pdu_data +
					    conn->packet_tx_head_offset);
    c89a:	0011      	movs	r1, r2
    c89c:	31ff      	adds	r1, #255	; 0xff
    c89e:	7d8b      	ldrb	r3, [r1, #22]
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND))))))) {
			_pdu_data_tx = empty_tx_enqueue(conn);
	} else {
		u16_t max_tx_octets;

		_pdu_data_tx =
    c8a0:	9801      	ldr	r0, [sp, #4]
			(struct pdu_data *)(conn->pkt_tx_head->pdu_data +
					    conn->packet_tx_head_offset);

		if (!conn->packet_tx_head_len) {
    c8a2:	7d4e      	ldrb	r6, [r1, #21]
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND))))))) {
			_pdu_data_tx = empty_tx_enqueue(conn);
	} else {
		u16_t max_tx_octets;

		_pdu_data_tx =
    c8a4:	18c0      	adds	r0, r0, r3
			(struct pdu_data *)(conn->pkt_tx_head->pdu_data +
					    conn->packet_tx_head_offset);

		if (!conn->packet_tx_head_len) {
    c8a6:	2e00      	cmp	r6, #0
    c8a8:	d101      	bne.n	c8ae <prepare_pdu_data_tx+0xbe>
			conn->packet_tx_head_len = _pdu_data_tx->len;
    c8aa:	7846      	ldrb	r6, [r0, #1]
    c8ac:	754e      	strb	r6, [r1, #21]
		}

		if (conn->packet_tx_head_offset) {
    c8ae:	2b00      	cmp	r3, #0
    c8b0:	d005      	beq.n	c8be <prepare_pdu_data_tx+0xce>
			_pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    c8b2:	2603      	movs	r6, #3
    c8b4:	7803      	ldrb	r3, [r0, #0]
    c8b6:	43b3      	bics	r3, r6
    c8b8:	3e02      	subs	r6, #2
    c8ba:	4333      	orrs	r3, r6
    c8bc:	7003      	strb	r3, [r0, #0]
		}

		_pdu_data_tx->len = conn->packet_tx_head_len -
		    conn->packet_tx_head_offset;
		_pdu_data_tx->md = 0;
    c8be:	2610      	movs	r6, #16

		if (conn->packet_tx_head_offset) {
			_pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
		}

		_pdu_data_tx->len = conn->packet_tx_head_len -
    c8c0:	7d4b      	ldrb	r3, [r1, #21]
    c8c2:	7d89      	ldrb	r1, [r1, #22]
    c8c4:	1a5b      	subs	r3, r3, r1
		    conn->packet_tx_head_offset;
		_pdu_data_tx->md = 0;
    c8c6:	7801      	ldrb	r1, [r0, #0]

		if (conn->packet_tx_head_offset) {
			_pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
		}

		_pdu_data_tx->len = conn->packet_tx_head_len -
    c8c8:	b2db      	uxtb	r3, r3
		    conn->packet_tx_head_offset;
		_pdu_data_tx->md = 0;
    c8ca:	43b1      	bics	r1, r6

		if (conn->packet_tx_head_offset) {
			_pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
		}

		_pdu_data_tx->len = conn->packet_tx_head_len -
    c8cc:	7043      	strb	r3, [r0, #1]
		    conn->packet_tx_head_offset;
		_pdu_data_tx->md = 0;
    c8ce:	7001      	strb	r1, [r0, #0]

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
		max_tx_octets = conn->max_tx_octets;
    c8d0:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
#else /* !CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */
		max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

		if (_pdu_data_tx->len > max_tx_octets) {
    c8d2:	429a      	cmp	r2, r3
    c8d4:	d203      	bcs.n	c8de <prepare_pdu_data_tx+0xee>
			_pdu_data_tx->len = max_tx_octets;
			_pdu_data_tx->md = 1;
    c8d6:	b2cb      	uxtb	r3, r1
    c8d8:	4333      	orrs	r3, r6
#else /* !CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */
		max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

		if (_pdu_data_tx->len > max_tx_octets) {
			_pdu_data_tx->len = max_tx_octets;
    c8da:	7042      	strb	r2, [r0, #1]
			_pdu_data_tx->md = 1;
    c8dc:	7003      	strb	r3, [r0, #0]
		}

		if (conn->pkt_tx_head->next) {
    c8de:	68a3      	ldr	r3, [r4, #8]
    c8e0:	681b      	ldr	r3, [r3, #0]
    c8e2:	2b00      	cmp	r3, #0
    c8e4:	d003      	beq.n	c8ee <prepare_pdu_data_tx+0xfe>
			_pdu_data_tx->md = 1;
    c8e6:	2210      	movs	r2, #16
    c8e8:	7803      	ldrb	r3, [r0, #0]
    c8ea:	4313      	orrs	r3, r2
    c8ec:	7003      	strb	r3, [r0, #0]
		}
	}

	_pdu_data_tx->rfu = 0;
    c8ee:	231f      	movs	r3, #31
    c8f0:	7802      	ldrb	r2, [r0, #0]
    c8f2:	4013      	ands	r3, r2
    c8f4:	7003      	strb	r3, [r0, #0]

#if !defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH_CLEAR)
	_pdu_data_tx->resv = 0;
    c8f6:	2300      	movs	r3, #0
    c8f8:	7083      	strb	r3, [r0, #2]
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH_CLEAR */

	*pdu_data_tx = _pdu_data_tx;
    c8fa:	6028      	str	r0, [r5, #0]
}
    c8fc:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

0000c8fe <tx_packet_set>:
		radio_pkt_rx_set(pdu_data_rx);
	}
}

static void tx_packet_set(struct connection *conn, struct pdu_data *pdu_data_tx)
{
    c8fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#else /* !CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */
	max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
	phy = conn->phy_tx;
    c900:	0003      	movs	r3, r0
		radio_pkt_rx_set(pdu_data_rx);
	}
}

static void tx_packet_set(struct connection *conn, struct pdu_data *pdu_data_tx)
{
    c902:	0006      	movs	r6, r0
#else /* !CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */
	max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
	phy = conn->phy_tx;
    c904:	3332      	adds	r3, #50	; 0x32
		radio_pkt_rx_set(pdu_data_rx);
	}
}

static void tx_packet_set(struct connection *conn, struct pdu_data *pdu_data_tx)
{
    c906:	000f      	movs	r7, r1
#else /* !CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */
	max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
	phy = conn->phy_tx;
    c908:	7819      	ldrb	r1, [r3, #0]
{
	u16_t max_tx_octets;
	u8_t phy, flags;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
	max_tx_octets = conn->max_tx_octets;
    c90a:	8dc5      	ldrh	r5, [r0, #46]	; 0x2e
#else /* !CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */
	max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
	phy = conn->phy_tx;
    c90c:	068c      	lsls	r4, r1, #26
    c90e:	0f64      	lsrs	r4, r4, #29
#else /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */
	phy = 0;
	flags = 0;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */

	radio_phy_set(phy, flags);
    c910:	0020      	movs	r0, r4
    c912:	09c9      	lsrs	r1, r1, #7
    c914:	f7fe f928 	bl	ab68 <radio_phy_set>

	if (conn->enc_tx) {
    c918:	0033      	movs	r3, r6
    c91a:	2201      	movs	r2, #1
    c91c:	33c0      	adds	r3, #192	; 0xc0
    c91e:	781b      	ldrb	r3, [r3, #0]
    c920:	0064      	lsls	r4, r4, #1
		radio_pkt_configure(8, (max_tx_octets + 4), (phy << 1) | 0x01);
    c922:	4322      	orrs	r2, r4
	flags = 0;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */

	radio_phy_set(phy, flags);

	if (conn->enc_tx) {
    c924:	069b      	lsls	r3, r3, #26
    c926:	d50a      	bpl.n	c93e <tx_packet_set+0x40>
		radio_pkt_configure(8, (max_tx_octets + 4), (phy << 1) | 0x01);
    c928:	1d29      	adds	r1, r5, #4
    c92a:	b2c9      	uxtb	r1, r1
    c92c:	2008      	movs	r0, #8
    c92e:	f7fe f95d 	bl	abec <radio_pkt_configure>

		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&conn->ccm_tx,
    c932:	0030      	movs	r0, r6
    c934:	0039      	movs	r1, r7
    c936:	30e2      	adds	r0, #226	; 0xe2
    c938:	f7fe fbb8 	bl	b0ac <radio_ccm_tx_pkt_set>
    c93c:	e004      	b.n	c948 <tx_packet_set+0x4a>
						      pdu_data_tx));
	} else {
		radio_pkt_configure(8, max_tx_octets, (phy << 1) | 0x01);
    c93e:	2008      	movs	r0, #8
    c940:	b2e9      	uxtb	r1, r5
    c942:	f7fe f953 	bl	abec <radio_pkt_configure>

		radio_pkt_tx_set(pdu_data_tx);
    c946:	0038      	movs	r0, r7
    c948:	f7fe f976 	bl	ac38 <radio_pkt_tx_set>
	}
}
    c94c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0000c950 <packet_rx_enqueue>:
		       &s_mfy_callback);
#endif
}

static void packet_rx_enqueue(void)
{
    c950:	b537      	push	{r0, r1, r2, r4, r5, lr}
	void *link;
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	u8_t last;

	LL_ASSERT(_radio.packet_rx_last != _radio.packet_rx_acquire);
    c952:	243e      	movs	r4, #62	; 0x3e
    c954:	219f      	movs	r1, #159	; 0x9f
    c956:	4a1d      	ldr	r2, [pc, #116]	; (c9cc <packet_rx_enqueue+0x7c>)
    c958:	34ff      	adds	r4, #255	; 0xff
    c95a:	0049      	lsls	r1, r1, #1
    c95c:	5d13      	ldrb	r3, [r2, r4]
    c95e:	5c51      	ldrb	r1, [r2, r1]
    c960:	4299      	cmp	r1, r3
    c962:	d108      	bne.n	c976 <packet_rx_enqueue+0x26>
    c964:	4b1a      	ldr	r3, [pc, #104]	; (c9d0 <packet_rx_enqueue+0x80>)
    c966:	4a1b      	ldr	r2, [pc, #108]	; (c9d4 <packet_rx_enqueue+0x84>)
    c968:	9301      	str	r3, [sp, #4]
    c96a:	4b1b      	ldr	r3, [pc, #108]	; (c9d8 <packet_rx_enqueue+0x88>)
    c96c:	491b      	ldr	r1, [pc, #108]	; (c9dc <packet_rx_enqueue+0x8c>)
    c96e:	9300      	str	r3, [sp, #0]
    c970:	481b      	ldr	r0, [pc, #108]	; (c9e0 <packet_rx_enqueue+0x90>)
    c972:	4b1c      	ldr	r3, [pc, #112]	; (c9e4 <packet_rx_enqueue+0x94>)
    c974:	e022      	b.n	c9bc <packet_rx_enqueue+0x6c>

	/* Remember the rx node and acquired link mem */
	radio_pdu_node_rx = _radio.packet_rx[_radio.packet_rx_last];
    c976:	0011      	movs	r1, r2
    c978:	5d13      	ldrb	r3, [r2, r4]
    c97a:	31fc      	adds	r1, #252	; 0xfc
    c97c:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
    c97e:	009b      	lsls	r3, r3, #2
    c980:	5858      	ldr	r0, [r3, r1]

	/* serialize release queue with rx queue by storing reference to last
	 * element in release queue
	 */
	radio_pdu_node_rx->hdr.onion.packet_release_last =
	    _radio.packet_release_last;
    c982:	23ba      	movs	r3, #186	; 0xba

	/* dequeue from acquired rx queue */
	last = _radio.packet_rx_last + 1;
	if (last == _radio.packet_rx_count) {
    c984:	259e      	movs	r5, #158	; 0x9e

	/* serialize release queue with rx queue by storing reference to last
	 * element in release queue
	 */
	radio_pdu_node_rx->hdr.onion.packet_release_last =
	    _radio.packet_release_last;
    c986:	005b      	lsls	r3, r3, #1
    c988:	5cd3      	ldrb	r3, [r2, r3]

	LL_ASSERT(_radio.packet_rx_last != _radio.packet_rx_acquire);

	/* Remember the rx node and acquired link mem */
	radio_pdu_node_rx = _radio.packet_rx[_radio.packet_rx_last];
	link = radio_pdu_node_rx->hdr.onion.link;
    c98a:	6801      	ldr	r1, [r0, #0]

	/* serialize release queue with rx queue by storing reference to last
	 * element in release queue
	 */
	radio_pdu_node_rx->hdr.onion.packet_release_last =
    c98c:	7003      	strb	r3, [r0, #0]
	    _radio.packet_release_last;

	/* dequeue from acquired rx queue */
	last = _radio.packet_rx_last + 1;
    c98e:	5d13      	ldrb	r3, [r2, r4]
	if (last == _radio.packet_rx_count) {
    c990:	006d      	lsls	r5, r5, #1
	 */
	radio_pdu_node_rx->hdr.onion.packet_release_last =
	    _radio.packet_release_last;

	/* dequeue from acquired rx queue */
	last = _radio.packet_rx_last + 1;
    c992:	3301      	adds	r3, #1
	if (last == _radio.packet_rx_count) {
    c994:	5d55      	ldrb	r5, [r2, r5]
	 */
	radio_pdu_node_rx->hdr.onion.packet_release_last =
	    _radio.packet_release_last;

	/* dequeue from acquired rx queue */
	last = _radio.packet_rx_last + 1;
    c996:	b2db      	uxtb	r3, r3
	if (last == _radio.packet_rx_count) {
    c998:	429d      	cmp	r5, r3
    c99a:	d100      	bne.n	c99e <packet_rx_enqueue+0x4e>
		last = 0;
    c99c:	2300      	movs	r3, #0
	}
	_radio.packet_rx_last = last;
    c99e:	5513      	strb	r3, [r2, r4]

	/* Enqueue into event-cum-data queue */
	link = memq_enqueue(radio_pdu_node_rx, link,
    c9a0:	324d      	adds	r2, #77	; 0x4d
    c9a2:	32ff      	adds	r2, #255	; 0xff
    c9a4:	f7fd ffd5 	bl	a952 <memq_enqueue>
			    (void *)&_radio.link_rx_tail);
	LL_ASSERT(link);
    c9a8:	2800      	cmp	r0, #0
    c9aa:	d10c      	bne.n	c9c6 <packet_rx_enqueue+0x76>
    c9ac:	4b08      	ldr	r3, [pc, #32]	; (c9d0 <packet_rx_enqueue+0x80>)
    c9ae:	4a09      	ldr	r2, [pc, #36]	; (c9d4 <packet_rx_enqueue+0x84>)
    c9b0:	9301      	str	r3, [sp, #4]
    c9b2:	4b09      	ldr	r3, [pc, #36]	; (c9d8 <packet_rx_enqueue+0x88>)
    c9b4:	4909      	ldr	r1, [pc, #36]	; (c9dc <packet_rx_enqueue+0x8c>)
    c9b6:	9300      	str	r3, [sp, #0]
    c9b8:	480b      	ldr	r0, [pc, #44]	; (c9e8 <packet_rx_enqueue+0x98>)
    c9ba:	4b0a      	ldr	r3, [pc, #40]	; (c9e4 <packet_rx_enqueue+0x94>)
    c9bc:	f7f4 ffe0 	bl	1980 <printk>
    c9c0:	b662      	cpsie	i
    c9c2:	2004      	movs	r0, #4
    c9c4:	df02      	svc	2
	/* Inline call of callback. If JOB configured as lower priority then
	 * callback will tailchain at end of every radio ISR. If JOB configured
	 * as same then call inline so as to have callback for every radio ISR.
	 */
#if (RADIO_TICKER_USER_ID_WORKER_PRIO == RADIO_TICKER_USER_ID_JOB_PRIO)
	radio_event_callback();
    c9c6:	f005 fcd1 	bl	1236c <radio_event_callback>
			    (void *)&_radio.link_rx_tail);
	LL_ASSERT(link);

	/* callback to trigger application action */
	packet_rx_callback();
}
    c9ca:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    c9cc:	200015c0 	.word	0x200015c0
    c9d0:	000154c4 	.word	0x000154c4
    c9d4:	00015484 	.word	0x00015484
    c9d8:	000154c9 	.word	0x000154c9
    c9dc:	0001548b 	.word	0x0001548b
    c9e0:	00016c4a 	.word	0x00016c4a
    c9e4:	000183ce 	.word	0x000183ce
    c9e8:	00016aec 	.word	0x00016aec

0000c9ec <rx_fc_lock>:

	packet_rx_allocate(0xff);
}

static void rx_fc_lock(u16_t handle)
{
    c9ec:	b510      	push	{r4, lr}
	if (_radio.fc_req == _radio.fc_ack) {
    c9ee:	21be      	movs	r1, #190	; 0xbe
    c9f0:	247e      	movs	r4, #126	; 0x7e
    c9f2:	4b0b      	ldr	r3, [pc, #44]	; (ca20 <rx_fc_lock+0x34>)
    c9f4:	0049      	lsls	r1, r1, #1
    c9f6:	34ff      	adds	r4, #255	; 0xff
    c9f8:	5c5a      	ldrb	r2, [r3, r1]
    c9fa:	5d1c      	ldrb	r4, [r3, r4]
    c9fc:	4294      	cmp	r4, r2
    c9fe:	d10d      	bne.n	ca1c <rx_fc_lock+0x30>
		u8_t req;

		_radio.fc_handle[_radio.fc_req] = handle;
    ca00:	5c5a      	ldrb	r2, [r3, r1]
    ca02:	32b8      	adds	r2, #184	; 0xb8
    ca04:	0052      	lsls	r2, r2, #1
    ca06:	189a      	adds	r2, r3, r2
    ca08:	80d0      	strh	r0, [r2, #6]
		req = _radio.fc_req + 1;
    ca0a:	5c5a      	ldrb	r2, [r3, r1]
    ca0c:	3201      	adds	r2, #1
    ca0e:	b2d2      	uxtb	r2, r2
		if (req == TRIPLE_BUFFER_SIZE) {
    ca10:	2a03      	cmp	r2, #3
    ca12:	d100      	bne.n	ca16 <rx_fc_lock+0x2a>
			req = 0;
    ca14:	2200      	movs	r2, #0
		}
		_radio.fc_req = req;
    ca16:	21be      	movs	r1, #190	; 0xbe
    ca18:	0049      	lsls	r1, r1, #1
    ca1a:	545a      	strb	r2, [r3, r1]
	}
}
    ca1c:	bd10      	pop	{r4, pc}
    ca1e:	46c0      	nop			; (mov r8, r8)
    ca20:	200015c0 	.word	0x200015c0

0000ca24 <ticker_success_assert>:
{
	*((u32_t volatile *)ops_context) = status;
}

static void ticker_success_assert(u32_t status, void *params)
{
    ca24:	b507      	push	{r0, r1, r2, lr}
	ARG_UNUSED(params);

	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    ca26:	2800      	cmp	r0, #0
    ca28:	d00c      	beq.n	ca44 <ticker_success_assert+0x20>
    ca2a:	4b07      	ldr	r3, [pc, #28]	; (ca48 <ticker_success_assert+0x24>)
    ca2c:	4a07      	ldr	r2, [pc, #28]	; (ca4c <ticker_success_assert+0x28>)
    ca2e:	9301      	str	r3, [sp, #4]
    ca30:	4b07      	ldr	r3, [pc, #28]	; (ca50 <ticker_success_assert+0x2c>)
    ca32:	4908      	ldr	r1, [pc, #32]	; (ca54 <ticker_success_assert+0x30>)
    ca34:	9300      	str	r3, [sp, #0]
    ca36:	4808      	ldr	r0, [pc, #32]	; (ca58 <ticker_success_assert+0x34>)
    ca38:	4b08      	ldr	r3, [pc, #32]	; (ca5c <ticker_success_assert+0x38>)
    ca3a:	f7f4 ffa1 	bl	1980 <printk>
    ca3e:	b662      	cpsie	i
    ca40:	2004      	movs	r0, #4
    ca42:	df02      	svc	2
}
    ca44:	bd07      	pop	{r0, r1, r2, pc}
    ca46:	46c0      	nop			; (mov r8, r8)
    ca48:	000154c4 	.word	0x000154c4
    ca4c:	00015484 	.word	0x00015484
    ca50:	000154c9 	.word	0x000154c9
    ca54:	0001548b 	.word	0x0001548b
    ca58:	00016c9d 	.word	0x00016c9d
    ca5c:	00018414 	.word	0x00018414

0000ca60 <ticker_stop_adv_assert>:

static void ticker_stop_adv_assert(u32_t status, void *params)
{
    ca60:	b507      	push	{r0, r1, r2, lr}
	ARG_UNUSED(params);

	if (status == TICKER_STATUS_FAILURE) {
    ca62:	2801      	cmp	r0, #1
    ca64:	d113      	bne.n	ca8e <ticker_stop_adv_assert+0x2e>
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_ADV) {
    ca66:	4b0a      	ldr	r3, [pc, #40]	; (ca90 <ticker_stop_adv_assert+0x30>)
    ca68:	7b9a      	ldrb	r2, [r3, #14]
    ca6a:	2a05      	cmp	r2, #5
    ca6c:	d102      	bne.n	ca74 <ticker_stop_adv_assert+0x14>
			 * while in role_disable. Let the role_disable
			 * be made aware of, so it can return failure
			 * (to stop Adv role as it is now transitioned
			 * to Slave role).
			 */
			_radio.ticker_id_stop = 0;
    ca6e:	2200      	movs	r2, #0
    ca70:	739a      	strb	r2, [r3, #14]
    ca72:	e00c      	b.n	ca8e <ticker_stop_adv_assert+0x2e>
		} else {
			LL_ASSERT(0);
    ca74:	4b07      	ldr	r3, [pc, #28]	; (ca94 <ticker_stop_adv_assert+0x34>)
    ca76:	4a08      	ldr	r2, [pc, #32]	; (ca98 <ticker_stop_adv_assert+0x38>)
    ca78:	9301      	str	r3, [sp, #4]
    ca7a:	4b08      	ldr	r3, [pc, #32]	; (ca9c <ticker_stop_adv_assert+0x3c>)
    ca7c:	4908      	ldr	r1, [pc, #32]	; (caa0 <ticker_stop_adv_assert+0x40>)
    ca7e:	9300      	str	r3, [sp, #0]
    ca80:	4808      	ldr	r0, [pc, #32]	; (caa4 <ticker_stop_adv_assert+0x44>)
    ca82:	4b09      	ldr	r3, [pc, #36]	; (caa8 <ticker_stop_adv_assert+0x48>)
    ca84:	f7f4 ff7c 	bl	1980 <printk>
    ca88:	b662      	cpsie	i
    ca8a:	2004      	movs	r0, #4
    ca8c:	df02      	svc	2
		}
	}
}
    ca8e:	bd07      	pop	{r0, r1, r2, pc}
    ca90:	200015c0 	.word	0x200015c0
    ca94:	000154c4 	.word	0x000154c4
    ca98:	00015484 	.word	0x00015484
    ca9c:	000154c9 	.word	0x000154c9
    caa0:	0001548b 	.word	0x0001548b
    caa4:	00015b21 	.word	0x00015b21
    caa8:	00018501 	.word	0x00018501

0000caac <ticker_stop_scan_assert>:

static void ticker_stop_scan_assert(u32_t status, void *params)
{
    caac:	b507      	push	{r0, r1, r2, lr}
	ARG_UNUSED(params);

	if (status == TICKER_STATUS_FAILURE) {
    caae:	2801      	cmp	r0, #1
    cab0:	d113      	bne.n	cada <ticker_stop_scan_assert+0x2e>
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_SCAN) {
    cab2:	4b0a      	ldr	r3, [pc, #40]	; (cadc <ticker_stop_scan_assert+0x30>)
    cab4:	7b9a      	ldrb	r2, [r3, #14]
    cab6:	2a06      	cmp	r2, #6
    cab8:	d102      	bne.n	cac0 <ticker_stop_scan_assert+0x14>
			 * while in role_disable. Let the role_disable
			 * be made aware of, so it can return failure
			 * (to stop Scan role as it is now transitioned
			 * to Master role).
			 */
			_radio.ticker_id_stop = 0;
    caba:	2200      	movs	r2, #0
    cabc:	739a      	strb	r2, [r3, #14]
    cabe:	e00c      	b.n	cada <ticker_stop_scan_assert+0x2e>
		} else {
			LL_ASSERT(0);
    cac0:	4b07      	ldr	r3, [pc, #28]	; (cae0 <ticker_stop_scan_assert+0x34>)
    cac2:	4a08      	ldr	r2, [pc, #32]	; (cae4 <ticker_stop_scan_assert+0x38>)
    cac4:	9301      	str	r3, [sp, #4]
    cac6:	4b08      	ldr	r3, [pc, #32]	; (cae8 <ticker_stop_scan_assert+0x3c>)
    cac8:	4908      	ldr	r1, [pc, #32]	; (caec <ticker_stop_scan_assert+0x40>)
    caca:	9300      	str	r3, [sp, #0]
    cacc:	4808      	ldr	r0, [pc, #32]	; (caf0 <ticker_stop_scan_assert+0x44>)
    cace:	4b09      	ldr	r3, [pc, #36]	; (caf4 <ticker_stop_scan_assert+0x48>)
    cad0:	f7f4 ff56 	bl	1980 <printk>
    cad4:	b662      	cpsie	i
    cad6:	2004      	movs	r0, #4
    cad8:	df02      	svc	2
		}
	}
}
    cada:	bd07      	pop	{r0, r1, r2, pc}
    cadc:	200015c0 	.word	0x200015c0
    cae0:	000154c4 	.word	0x000154c4
    cae4:	00015484 	.word	0x00015484
    cae8:	000154c9 	.word	0x000154c9
    caec:	0001548b 	.word	0x0001548b
    caf0:	00015b21 	.word	0x00015b21
    caf4:	000184c0 	.word	0x000184c0

0000caf8 <ticker_update_adv_assert>:

static void ticker_update_adv_assert(u32_t status, void *params)
{
    caf8:	b507      	push	{r0, r1, r2, lr}
	ARG_UNUSED(params);

	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
    cafa:	2800      	cmp	r0, #0
    cafc:	d010      	beq.n	cb20 <ticker_update_adv_assert+0x28>
    cafe:	4b09      	ldr	r3, [pc, #36]	; (cb24 <ticker_update_adv_assert+0x2c>)
    cb00:	7b9b      	ldrb	r3, [r3, #14]
    cb02:	2b05      	cmp	r3, #5
    cb04:	d00c      	beq.n	cb20 <ticker_update_adv_assert+0x28>
    cb06:	4b08      	ldr	r3, [pc, #32]	; (cb28 <ticker_update_adv_assert+0x30>)
    cb08:	4a08      	ldr	r2, [pc, #32]	; (cb2c <ticker_update_adv_assert+0x34>)
    cb0a:	9301      	str	r3, [sp, #4]
    cb0c:	4b08      	ldr	r3, [pc, #32]	; (cb30 <ticker_update_adv_assert+0x38>)
    cb0e:	4909      	ldr	r1, [pc, #36]	; (cb34 <ticker_update_adv_assert+0x3c>)
    cb10:	9300      	str	r3, [sp, #0]
    cb12:	4809      	ldr	r0, [pc, #36]	; (cb38 <ticker_update_adv_assert+0x40>)
    cb14:	4b09      	ldr	r3, [pc, #36]	; (cb3c <ticker_update_adv_assert+0x44>)
    cb16:	f7f4 ff33 	bl	1980 <printk>
    cb1a:	b662      	cpsie	i
    cb1c:	2004      	movs	r0, #4
    cb1e:	df02      	svc	2
		  (_radio.ticker_id_stop == RADIO_TICKER_ID_ADV));
}
    cb20:	bd07      	pop	{r0, r1, r2, pc}
    cb22:	46c0      	nop			; (mov r8, r8)
    cb24:	200015c0 	.word	0x200015c0
    cb28:	000154c4 	.word	0x000154c4
    cb2c:	00015484 	.word	0x00015484
    cb30:	000154c9 	.word	0x000154c9
    cb34:	0001548b 	.word	0x0001548b
    cb38:	00016cca 	.word	0x00016cca
    cb3c:	000181fd 	.word	0x000181fd

0000cb40 <ticker_update_slave_assert>:

static void ticker_update_slave_assert(u32_t status, void *params)
{
    cb40:	b507      	push	{r0, r1, r2, lr}
	u8_t ticker_id = (u32_t)params & 0xFF;

	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
    cb42:	2800      	cmp	r0, #0
    cb44:	d011      	beq.n	cb6a <ticker_update_slave_assert+0x2a>
    cb46:	4b09      	ldr	r3, [pc, #36]	; (cb6c <ticker_update_slave_assert+0x2c>)
    cb48:	b2c9      	uxtb	r1, r1
    cb4a:	7b9b      	ldrb	r3, [r3, #14]
    cb4c:	4299      	cmp	r1, r3
    cb4e:	d00c      	beq.n	cb6a <ticker_update_slave_assert+0x2a>
    cb50:	4b07      	ldr	r3, [pc, #28]	; (cb70 <ticker_update_slave_assert+0x30>)
    cb52:	4a08      	ldr	r2, [pc, #32]	; (cb74 <ticker_update_slave_assert+0x34>)
    cb54:	9301      	str	r3, [sp, #4]
    cb56:	4b08      	ldr	r3, [pc, #32]	; (cb78 <ticker_update_slave_assert+0x38>)
    cb58:	4908      	ldr	r1, [pc, #32]	; (cb7c <ticker_update_slave_assert+0x3c>)
    cb5a:	9300      	str	r3, [sp, #0]
    cb5c:	4808      	ldr	r0, [pc, #32]	; (cb80 <ticker_update_slave_assert+0x40>)
    cb5e:	4b09      	ldr	r3, [pc, #36]	; (cb84 <ticker_update_slave_assert+0x44>)
    cb60:	f7f4 ff0e 	bl	1980 <printk>
    cb64:	b662      	cpsie	i
    cb66:	2004      	movs	r0, #4
    cb68:	df02      	svc	2
		  (_radio.ticker_id_stop == ticker_id));
}
    cb6a:	bd07      	pop	{r0, r1, r2, pc}
    cb6c:	200015c0 	.word	0x200015c0
    cb70:	000154c4 	.word	0x000154c4
    cb74:	00015484 	.word	0x00015484
    cb78:	000154c9 	.word	0x000154c9
    cb7c:	0001548b 	.word	0x0001548b
    cb80:	00016d19 	.word	0x00016d19
    cb84:	00018474 	.word	0x00018474

0000cb88 <ticker_op_latency_cancelled>:
{
	mem_release(node_tx, &_radio.pkt_tx_data_free);
}

static void ticker_op_latency_cancelled(u32_t ticker_status, void *params)
{
    cb88:	b507      	push	{r0, r1, r2, lr}
	struct connection *conn;

	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
    cb8a:	2800      	cmp	r0, #0
    cb8c:	d00c      	beq.n	cba8 <ticker_op_latency_cancelled+0x20>
    cb8e:	4b09      	ldr	r3, [pc, #36]	; (cbb4 <ticker_op_latency_cancelled+0x2c>)
    cb90:	4a09      	ldr	r2, [pc, #36]	; (cbb8 <ticker_op_latency_cancelled+0x30>)
    cb92:	9301      	str	r3, [sp, #4]
    cb94:	4b09      	ldr	r3, [pc, #36]	; (cbbc <ticker_op_latency_cancelled+0x34>)
    cb96:	490a      	ldr	r1, [pc, #40]	; (cbc0 <ticker_op_latency_cancelled+0x38>)
    cb98:	9300      	str	r3, [sp, #0]
    cb9a:	480a      	ldr	r0, [pc, #40]	; (cbc4 <ticker_op_latency_cancelled+0x3c>)
    cb9c:	4b0a      	ldr	r3, [pc, #40]	; (cbc8 <ticker_op_latency_cancelled+0x40>)
    cb9e:	f7f4 feef 	bl	1980 <printk>
    cba2:	b662      	cpsie	i
    cba4:	2004      	movs	r0, #4
    cba6:	df02      	svc	2

	conn = (struct connection *)params;
	conn->role.slave.latency_cancel = 0;
    cba8:	2210      	movs	r2, #16
    cbaa:	3144      	adds	r1, #68	; 0x44
    cbac:	780b      	ldrb	r3, [r1, #0]
    cbae:	4393      	bics	r3, r2
    cbb0:	700b      	strb	r3, [r1, #0]
}
    cbb2:	bd07      	pop	{r0, r1, r2, pc}
    cbb4:	000154c4 	.word	0x000154c4
    cbb8:	00015484 	.word	0x00015484
    cbbc:	000154c9 	.word	0x000154c9
    cbc0:	0001548b 	.word	0x0001548b
    cbc4:	00016d70 	.word	0x00016d70
    cbc8:	00018362 	.word	0x00018362

0000cbcc <ticker_job_disable>:
	DEBUG_RADIO_ISR(0);
}

#if (RADIO_TICKER_USER_ID_WORKER_PRIO == RADIO_TICKER_USER_ID_JOB_PRIO)
static void ticker_job_disable(u32_t status, void *op_context)
{
    cbcc:	b510      	push	{r4, lr}
	ARG_UNUSED(status);
	ARG_UNUSED(op_context);

	if (_radio.state != STATE_NONE) {
    cbce:	4b05      	ldr	r3, [pc, #20]	; (cbe4 <ticker_job_disable+0x18>)
    cbd0:	7c1b      	ldrb	r3, [r3, #16]
    cbd2:	2b00      	cmp	r3, #0
    cbd4:	d004      	beq.n	cbe0 <ticker_job_disable+0x14>
		mayfly_enable(RADIO_TICKER_USER_ID_JOB,
    cbd6:	2101      	movs	r1, #1
    cbd8:	2200      	movs	r2, #0
    cbda:	0008      	movs	r0, r1
    cbdc:	f7fd fd30 	bl	a640 <mayfly_enable>
			      RADIO_TICKER_USER_ID_JOB, 0);
	}
}
    cbe0:	bd10      	pop	{r4, pc}
    cbe2:	46c0      	nop			; (mov r8, r8)
    cbe4:	200015c0 	.word	0x200015c0

0000cbe8 <event_stop>:
	}
}

static void event_stop(u32_t ticks_at_expire, u32_t remainder,
		       u16_t lazy, void *context)
{
    cbe8:	b507      	push	{r0, r1, r2, lr}
    cbea:	001a      	movs	r2, r3
	ARG_UNUSED(lazy);

	/* Radio state requested (stop or abort) stored in context is supplied
	 * in params.
	 */
	s_mfy_radio_stop.param = context;
    cbec:	4b0b      	ldr	r3, [pc, #44]	; (cc1c <event_stop+0x34>)
    cbee:	609a      	str	r2, [r3, #8]

	/* Stop Radio Tx/Rx */
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    cbf0:	2200      	movs	r2, #0
    cbf2:	0011      	movs	r1, r2
    cbf4:	0010      	movs	r0, r2
    cbf6:	f7fd fd43 	bl	a680 <mayfly_enqueue>
				RADIO_TICKER_USER_ID_WORKER, 0,
				&s_mfy_radio_stop);
	LL_ASSERT(!retval);
    cbfa:	2800      	cmp	r0, #0
    cbfc:	d00c      	beq.n	cc18 <event_stop+0x30>
    cbfe:	4b08      	ldr	r3, [pc, #32]	; (cc20 <event_stop+0x38>)
    cc00:	4a08      	ldr	r2, [pc, #32]	; (cc24 <event_stop+0x3c>)
    cc02:	9301      	str	r3, [sp, #4]
    cc04:	4b08      	ldr	r3, [pc, #32]	; (cc28 <event_stop+0x40>)
    cc06:	4909      	ldr	r1, [pc, #36]	; (cc2c <event_stop+0x44>)
    cc08:	9300      	str	r3, [sp, #0]
    cc0a:	4809      	ldr	r0, [pc, #36]	; (cc30 <event_stop+0x48>)
    cc0c:	4b09      	ldr	r3, [pc, #36]	; (cc34 <event_stop+0x4c>)
    cc0e:	f7f4 feb7 	bl	1980 <printk>
    cc12:	b662      	cpsie	i
    cc14:	2004      	movs	r0, #4
    cc16:	df02      	svc	2
}
    cc18:	bd07      	pop	{r0, r1, r2, pc}
    cc1a:	46c0      	nop			; (mov r8, r8)
    cc1c:	200008e0 	.word	0x200008e0
    cc20:	000154c4 	.word	0x000154c4
    cc24:	00015484 	.word	0x00015484
    cc28:	000154c9 	.word	0x000154c9
    cc2c:	0001548b 	.word	0x0001548b
    cc30:	00016bf1 	.word	0x00016bf1
    cc34:	000181f2 	.word	0x000181f2

0000cc38 <event_adv_stop>:
	DEBUG_RADIO_START_A(0);
}

void event_adv_stop(u32_t ticks_at_expire, u32_t remainder, u16_t lazy,
		    void *context)
{
    cc38:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ARG_UNUSED(context);

	/* Abort an event, if any, to avoid Rx queue corruption used by Radio
	 * ISR.
	 */
	event_stop(0, 0, 0, (void *)STATE_ABORT);
    cc3a:	2200      	movs	r2, #0
    cc3c:	2305      	movs	r3, #5
    cc3e:	0011      	movs	r1, r2
    cc40:	0010      	movs	r0, r2
    cc42:	f7ff ffd1 	bl	cbe8 <event_stop>

	/* Stop Direct Adv */
	ticker_status =
    cc46:	2100      	movs	r1, #0
    cc48:	4b1a      	ldr	r3, [pc, #104]	; (ccb4 <event_adv_stop+0x7c>)
    cc4a:	2205      	movs	r2, #5
    cc4c:	9300      	str	r3, [sp, #0]
    cc4e:	0008      	movs	r0, r1
    cc50:	4b19      	ldr	r3, [pc, #100]	; (ccb8 <event_adv_stop+0x80>)
    cc52:	f7ff f9a1 	bl	bf98 <ticker_stop>
	    ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
			RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_ID_ADV,
			ticker_success_assert, (void *)__LINE__);
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    cc56:	2302      	movs	r3, #2
    cc58:	4398      	bics	r0, r3
    cc5a:	1e05      	subs	r5, r0, #0
    cc5c:	d008      	beq.n	cc70 <event_adv_stop+0x38>
    cc5e:	4b17      	ldr	r3, [pc, #92]	; (ccbc <event_adv_stop+0x84>)
    cc60:	4a17      	ldr	r2, [pc, #92]	; (ccc0 <event_adv_stop+0x88>)
    cc62:	9301      	str	r3, [sp, #4]
    cc64:	4b17      	ldr	r3, [pc, #92]	; (ccc4 <event_adv_stop+0x8c>)
    cc66:	4918      	ldr	r1, [pc, #96]	; (ccc8 <event_adv_stop+0x90>)
    cc68:	9300      	str	r3, [sp, #0]
    cc6a:	4818      	ldr	r0, [pc, #96]	; (cccc <event_adv_stop+0x94>)
    cc6c:	4b18      	ldr	r3, [pc, #96]	; (ccd0 <event_adv_stop+0x98>)
    cc6e:	e00c      	b.n	cc8a <event_adv_stop+0x52>
		  (ticker_status == TICKER_STATUS_BUSY));

	/* Prepare the rx packet structure */
	radio_pdu_node_rx = packet_rx_reserve_get(1);
    cc70:	2001      	movs	r0, #1
    cc72:	f7ff fa9f 	bl	c1b4 <packet_rx_reserve_get>
    cc76:	1e04      	subs	r4, r0, #0
	LL_ASSERT(radio_pdu_node_rx);
    cc78:	d10c      	bne.n	cc94 <event_adv_stop+0x5c>
    cc7a:	4b10      	ldr	r3, [pc, #64]	; (ccbc <event_adv_stop+0x84>)
    cc7c:	4a10      	ldr	r2, [pc, #64]	; (ccc0 <event_adv_stop+0x88>)
    cc7e:	9301      	str	r3, [sp, #4]
    cc80:	4b10      	ldr	r3, [pc, #64]	; (ccc4 <event_adv_stop+0x8c>)
    cc82:	4911      	ldr	r1, [pc, #68]	; (ccc8 <event_adv_stop+0x90>)
    cc84:	9300      	str	r3, [sp, #0]
    cc86:	4813      	ldr	r0, [pc, #76]	; (ccd4 <event_adv_stop+0x9c>)
    cc88:	4b11      	ldr	r3, [pc, #68]	; (ccd0 <event_adv_stop+0x98>)
    cc8a:	f7f4 fe79 	bl	1980 <printk>
    cc8e:	b662      	cpsie	i
    cc90:	2004      	movs	r0, #4
    cc92:	df02      	svc	2

	/** Connection handle */
	radio_pdu_node_rx->hdr.handle = 0xffff;
    cc94:	2301      	movs	r3, #1
    cc96:	425b      	negs	r3, r3
    cc98:	80c3      	strh	r3, [r0, #6]
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    cc9a:	3307      	adds	r3, #7

	/* prepare connection complete structure */
	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
	radio_le_conn_cmplt =
		(struct radio_le_conn_cmplt *)&pdu_data_rx->payload;
	memset(radio_le_conn_cmplt, 0x00, sizeof(struct radio_le_conn_cmplt));
    cc9c:	0029      	movs	r1, r5
	radio_pdu_node_rx = packet_rx_reserve_get(1);
	LL_ASSERT(radio_pdu_node_rx);

	/** Connection handle */
	radio_pdu_node_rx->hdr.handle = 0xffff;
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    cc9e:	7103      	strb	r3, [r0, #4]

	/* prepare connection complete structure */
	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
	radio_le_conn_cmplt =
		(struct radio_le_conn_cmplt *)&pdu_data_rx->payload;
	memset(radio_le_conn_cmplt, 0x00, sizeof(struct radio_le_conn_cmplt));
    cca0:	2218      	movs	r2, #24
	radio_pdu_node_rx->hdr.handle = 0xffff;
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;

	/* prepare connection complete structure */
	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
	radio_le_conn_cmplt =
    cca2:	300b      	adds	r0, #11
		(struct radio_le_conn_cmplt *)&pdu_data_rx->payload;
	memset(radio_le_conn_cmplt, 0x00, sizeof(struct radio_le_conn_cmplt));
    cca4:	f7f4 f873 	bl	d8e <memset>
	radio_le_conn_cmplt->status = 0x3c;
    cca8:	233c      	movs	r3, #60	; 0x3c
    ccaa:	72e3      	strb	r3, [r4, #11]

	/* enqueue connection complete structure into queue */
	packet_rx_enqueue();
    ccac:	f7ff fe50 	bl	c950 <packet_rx_enqueue>
}
    ccb0:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    ccb2:	46c0      	nop			; (mov r8, r8)
    ccb4:	000013bd 	.word	0x000013bd
    ccb8:	0000ca25 	.word	0x0000ca25
    ccbc:	000154c4 	.word	0x000154c4
    ccc0:	00015484 	.word	0x00015484
    ccc4:	000154c9 	.word	0x000154c9
    ccc8:	0001548b 	.word	0x0001548b
    cccc:	00016da4 	.word	0x00016da4
    ccd0:	000181ce 	.word	0x000181ce
    ccd4:	00016df2 	.word	0x00016df2

0000ccd8 <event_active>:
	}
}

static void event_active(u32_t ticks_at_expire, u32_t remainder,
			 u16_t lazy, void *context)
{
    ccd8:	b507      	push	{r0, r1, r2, lr}
	ARG_UNUSED(ticks_at_expire);
	ARG_UNUSED(remainder);
	ARG_UNUSED(lazy);
	ARG_UNUSED(context);

	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    ccda:	2200      	movs	r2, #0
    ccdc:	4b0a      	ldr	r3, [pc, #40]	; (cd08 <event_active+0x30>)
    ccde:	0011      	movs	r1, r2
    cce0:	0010      	movs	r0, r2
    cce2:	f7fd fccd 	bl	a680 <mayfly_enqueue>
				RADIO_TICKER_USER_ID_WORKER, 0,
				&s_mfy_radio_active);
	LL_ASSERT(!retval);
    cce6:	2800      	cmp	r0, #0
    cce8:	d00c      	beq.n	cd04 <event_active+0x2c>
    ccea:	4b08      	ldr	r3, [pc, #32]	; (cd0c <event_active+0x34>)
    ccec:	4a08      	ldr	r2, [pc, #32]	; (cd10 <event_active+0x38>)
    ccee:	9301      	str	r3, [sp, #4]
    ccf0:	4b08      	ldr	r3, [pc, #32]	; (cd14 <event_active+0x3c>)
    ccf2:	4909      	ldr	r1, [pc, #36]	; (cd18 <event_active+0x40>)
    ccf4:	9300      	str	r3, [sp, #0]
    ccf6:	4809      	ldr	r0, [pc, #36]	; (cd1c <event_active+0x44>)
    ccf8:	4b09      	ldr	r3, [pc, #36]	; (cd20 <event_active+0x48>)
    ccfa:	f7f4 fe41 	bl	1980 <printk>
    ccfe:	b662      	cpsie	i
    cd00:	2004      	movs	r0, #4
    cd02:	df02      	svc	2
}
    cd04:	bd07      	pop	{r0, r1, r2, pc}
    cd06:	46c0      	nop			; (mov r8, r8)
    cd08:	200008b0 	.word	0x200008b0
    cd0c:	000154c4 	.word	0x000154c4
    cd10:	00015484 	.word	0x00015484
    cd14:	000154c9 	.word	0x000154c9
    cd18:	0001548b 	.word	0x0001548b
    cd1c:	00016bf1 	.word	0x00016bf1
    cd20:	000182af 	.word	0x000182af

0000cd24 <event_xtal>:
	clock_control_on(_radio.hf_clock, NULL);
}

static void event_xtal(u32_t ticks_at_expire, u32_t remainder,
		       u16_t lazy, void *context)
{
    cd24:	b507      	push	{r0, r1, r2, lr}
	ARG_UNUSED(ticks_at_expire);
	ARG_UNUSED(remainder);
	ARG_UNUSED(lazy);
	ARG_UNUSED(context);

	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    cd26:	2200      	movs	r2, #0
    cd28:	4b0a      	ldr	r3, [pc, #40]	; (cd54 <event_xtal+0x30>)
    cd2a:	0011      	movs	r1, r2
    cd2c:	0010      	movs	r0, r2
    cd2e:	f7fd fca7 	bl	a680 <mayfly_enqueue>
				RADIO_TICKER_USER_ID_WORKER, 0,
				&s_mfy_xtal_start);
	LL_ASSERT(!retval);
    cd32:	2800      	cmp	r0, #0
    cd34:	d00c      	beq.n	cd50 <event_xtal+0x2c>
    cd36:	4b08      	ldr	r3, [pc, #32]	; (cd58 <event_xtal+0x34>)
    cd38:	4a08      	ldr	r2, [pc, #32]	; (cd5c <event_xtal+0x38>)
    cd3a:	9301      	str	r3, [sp, #4]
    cd3c:	4b08      	ldr	r3, [pc, #32]	; (cd60 <event_xtal+0x3c>)
    cd3e:	4909      	ldr	r1, [pc, #36]	; (cd64 <event_xtal+0x40>)
    cd40:	9300      	str	r3, [sp, #0]
    cd42:	4809      	ldr	r0, [pc, #36]	; (cd68 <event_xtal+0x44>)
    cd44:	4b09      	ldr	r3, [pc, #36]	; (cd6c <event_xtal+0x48>)
    cd46:	f7f4 fe1b 	bl	1980 <printk>
    cd4a:	b662      	cpsie	i
    cd4c:	2004      	movs	r0, #4
    cd4e:	df02      	svc	2
}
    cd50:	bd07      	pop	{r0, r1, r2, pc}
    cd52:	46c0      	nop			; (mov r8, r8)
    cd54:	200008a0 	.word	0x200008a0
    cd58:	000154c4 	.word	0x000154c4
    cd5c:	00015484 	.word	0x00015484
    cd60:	000154c9 	.word	0x000154c9
    cd64:	0001548b 	.word	0x0001548b
    cd68:	00016bf1 	.word	0x00016bf1
    cd6c:	0001822b 	.word	0x0001822b

0000cd70 <mayfly_radio_active>:
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
		  (_radio.ticker_id_stop == ticker_id));
}

static void mayfly_radio_active(void *params)
{
    cd70:	b507      	push	{r0, r1, r2, lr}
    cd72:	4b11      	ldr	r3, [pc, #68]	; (cdb8 <mayfly_radio_active+0x48>)
	static u8_t s_active;

	if ((u32_t)params) {
    cd74:	2800      	cmp	r0, #0
    cd76:	d006      	beq.n	cd86 <mayfly_radio_active+0x16>
		if (s_active++) {
    cd78:	781a      	ldrb	r2, [r3, #0]
			return;
		}

		DEBUG_RADIO_ACTIVE(1);

		radio_active_callback(1);
    cd7a:	2001      	movs	r0, #1
static void mayfly_radio_active(void *params)
{
	static u8_t s_active;

	if ((u32_t)params) {
		if (s_active++) {
    cd7c:	1c51      	adds	r1, r2, #1
    cd7e:	7019      	strb	r1, [r3, #0]
    cd80:	2a00      	cmp	r2, #0
    cd82:	d117      	bne.n	cdb4 <mayfly_radio_active+0x44>
    cd84:	e014      	b.n	cdb0 <mayfly_radio_active+0x40>

		DEBUG_RADIO_ACTIVE(1);

		radio_active_callback(1);
	} else {
		LL_ASSERT(s_active);
    cd86:	7818      	ldrb	r0, [r3, #0]
    cd88:	2800      	cmp	r0, #0
    cd8a:	d10c      	bne.n	cda6 <mayfly_radio_active+0x36>
    cd8c:	4b0b      	ldr	r3, [pc, #44]	; (cdbc <mayfly_radio_active+0x4c>)
    cd8e:	4a0c      	ldr	r2, [pc, #48]	; (cdc0 <mayfly_radio_active+0x50>)
    cd90:	9301      	str	r3, [sp, #4]
    cd92:	4b0c      	ldr	r3, [pc, #48]	; (cdc4 <mayfly_radio_active+0x54>)
    cd94:	490c      	ldr	r1, [pc, #48]	; (cdc8 <mayfly_radio_active+0x58>)
    cd96:	9300      	str	r3, [sp, #0]
    cd98:	480c      	ldr	r0, [pc, #48]	; (cdcc <mayfly_radio_active+0x5c>)
    cd9a:	4b0d      	ldr	r3, [pc, #52]	; (cdd0 <mayfly_radio_active+0x60>)
    cd9c:	f7f4 fdf0 	bl	1980 <printk>
    cda0:	b662      	cpsie	i
    cda2:	2004      	movs	r0, #4
    cda4:	df02      	svc	2

		if (--s_active) {
    cda6:	3801      	subs	r0, #1
    cda8:	b2c0      	uxtb	r0, r0
    cdaa:	7018      	strb	r0, [r3, #0]
    cdac:	2800      	cmp	r0, #0
    cdae:	d101      	bne.n	cdb4 <mayfly_radio_active+0x44>
			return;
		}

		DEBUG_RADIO_ACTIVE(0);

		radio_active_callback(0);
    cdb0:	f005 fada 	bl	12368 <radio_active_callback>
	}
}
    cdb4:	bd07      	pop	{r0, r1, r2, pc}
    cdb6:	46c0      	nop			; (mov r8, r8)
    cdb8:	200015a4 	.word	0x200015a4
    cdbc:	000154c4 	.word	0x000154c4
    cdc0:	00015484 	.word	0x00015484
    cdc4:	000154c9 	.word	0x000154c9
    cdc8:	0001548b 	.word	0x0001548b
    cdcc:	00016e25 	.word	0x00016e25
    cdd0:	00018493 	.word	0x00018493

0000cdd4 <mayfly_radio_inactive>:
				&s_mfy_radio_active);
	LL_ASSERT(!retval);
}

static void mayfly_radio_inactive(void *params)
{
    cdd4:	b510      	push	{r4, lr}
	ARG_UNUSED(params);

	mayfly_radio_active(0);
    cdd6:	2000      	movs	r0, #0
    cdd8:	f7ff ffca 	bl	cd70 <mayfly_radio_active>

	DEBUG_RADIO_CLOSE(0);
}
    cddc:	bd10      	pop	{r4, pc}
	...

0000cde0 <mayfly_radio_stop>:
	}
}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_SCHED_ADVANCED */

static void mayfly_radio_stop(void *params)
{
    cde0:	b507      	push	{r0, r1, r2, lr}
	enum state state = (enum state)((u32_t)params & 0xff);
    cde2:	b2c0      	uxtb	r0, r0
	u32_t radio_used;

	LL_ASSERT((state == STATE_STOP) || (state == STATE_ABORT));
    cde4:	1f03      	subs	r3, r0, #4
    cde6:	2b01      	cmp	r3, #1
    cde8:	d90c      	bls.n	ce04 <mayfly_radio_stop+0x24>
    cdea:	4b0e      	ldr	r3, [pc, #56]	; (ce24 <mayfly_radio_stop+0x44>)
    cdec:	4a0e      	ldr	r2, [pc, #56]	; (ce28 <mayfly_radio_stop+0x48>)
    cdee:	9301      	str	r3, [sp, #4]
    cdf0:	4b0e      	ldr	r3, [pc, #56]	; (ce2c <mayfly_radio_stop+0x4c>)
    cdf2:	490f      	ldr	r1, [pc, #60]	; (ce30 <mayfly_radio_stop+0x50>)
    cdf4:	9300      	str	r3, [sp, #0]
    cdf6:	480f      	ldr	r0, [pc, #60]	; (ce34 <mayfly_radio_stop+0x54>)
    cdf8:	4b0f      	ldr	r3, [pc, #60]	; (ce38 <mayfly_radio_stop+0x58>)
    cdfa:	f7f4 fdc1 	bl	1980 <printk>
    cdfe:	b662      	cpsie	i
    ce00:	2004      	movs	r0, #4
    ce02:	df02      	svc	2

	radio_used = ((_radio.state != STATE_NONE) &&
    ce04:	4a0d      	ldr	r2, [pc, #52]	; (ce3c <mayfly_radio_stop+0x5c>)
    ce06:	7c13      	ldrb	r3, [r2, #16]
		      (_radio.state != STATE_STOP) &&
    ce08:	2b00      	cmp	r3, #0
    ce0a:	d006      	beq.n	ce1a <mayfly_radio_stop+0x3a>
	enum state state = (enum state)((u32_t)params & 0xff);
	u32_t radio_used;

	LL_ASSERT((state == STATE_STOP) || (state == STATE_ABORT));

	radio_used = ((_radio.state != STATE_NONE) &&
    ce0c:	3b04      	subs	r3, #4
    ce0e:	2b01      	cmp	r3, #1
    ce10:	d903      	bls.n	ce1a <mayfly_radio_stop+0x3a>
		      (_radio.state != STATE_STOP) &&
		      (_radio.state != STATE_ABORT));
	if (radio_used || !radio_is_idle()) {
		if (radio_used) {
			_radio.state = state;
    ce12:	7410      	strb	r0, [r2, #16]
		}

		/** @todo try designing so as to not to abort tx packet */
		radio_disable();
    ce14:	f7fd ff2c 	bl	ac70 <radio_disable>
	}
}
    ce18:	e003      	b.n	ce22 <mayfly_radio_stop+0x42>
	LL_ASSERT((state == STATE_STOP) || (state == STATE_ABORT));

	radio_used = ((_radio.state != STATE_NONE) &&
		      (_radio.state != STATE_STOP) &&
		      (_radio.state != STATE_ABORT));
	if (radio_used || !radio_is_idle()) {
    ce1a:	f7fd ff4d 	bl	acb8 <radio_is_idle>
    ce1e:	2800      	cmp	r0, #0
    ce20:	d0f8      	beq.n	ce14 <mayfly_radio_stop+0x34>
		}

		/** @todo try designing so as to not to abort tx packet */
		radio_disable();
	}
}
    ce22:	bd07      	pop	{r0, r1, r2, pc}
    ce24:	000154c4 	.word	0x000154c4
    ce28:	00015484 	.word	0x00015484
    ce2c:	000154c9 	.word	0x000154c9
    ce30:	0001548b 	.word	0x0001548b
    ce34:	00016e4f 	.word	0x00016e4f
    ce38:	0001843e 	.word	0x0001843e
    ce3c:	200015c0 	.word	0x200015c0

0000ce40 <pdu_node_tx_release>:
	}
}

static void pdu_node_tx_release(u16_t handle,
				struct radio_pdu_node_tx *node_tx)
{
    ce40:	b573      	push	{r0, r1, r4, r5, r6, lr}
	u8_t last;

	last = _radio.packet_release_last + 1;
    ce42:	24ba      	movs	r4, #186	; 0xba
	if (last == _radio.packet_tx_count) {
    ce44:	25b8      	movs	r5, #184	; 0xb8
static void pdu_node_tx_release(u16_t handle,
				struct radio_pdu_node_tx *node_tx)
{
	u8_t last;

	last = _radio.packet_release_last + 1;
    ce46:	4b15      	ldr	r3, [pc, #84]	; (ce9c <pdu_node_tx_release+0x5c>)
    ce48:	0064      	lsls	r4, r4, #1
    ce4a:	5d1a      	ldrb	r2, [r3, r4]
	if (last == _radio.packet_tx_count) {
    ce4c:	006d      	lsls	r5, r5, #1
static void pdu_node_tx_release(u16_t handle,
				struct radio_pdu_node_tx *node_tx)
{
	u8_t last;

	last = _radio.packet_release_last + 1;
    ce4e:	3201      	adds	r2, #1
	if (last == _radio.packet_tx_count) {
    ce50:	5d5d      	ldrb	r5, [r3, r5]
static void pdu_node_tx_release(u16_t handle,
				struct radio_pdu_node_tx *node_tx)
{
	u8_t last;

	last = _radio.packet_release_last + 1;
    ce52:	b2d2      	uxtb	r2, r2
	if (last == _radio.packet_tx_count) {
    ce54:	4295      	cmp	r5, r2
    ce56:	d100      	bne.n	ce5a <pdu_node_tx_release+0x1a>
		last = 0;
    ce58:	2200      	movs	r2, #0
	}

	LL_ASSERT(last != _radio.packet_release_first);
    ce5a:	2574      	movs	r5, #116	; 0x74
    ce5c:	35ff      	adds	r5, #255	; 0xff
    ce5e:	5d5d      	ldrb	r5, [r3, r5]
    ce60:	4295      	cmp	r5, r2
    ce62:	d10c      	bne.n	ce7e <pdu_node_tx_release+0x3e>
    ce64:	4b0e      	ldr	r3, [pc, #56]	; (cea0 <pdu_node_tx_release+0x60>)
    ce66:	4a0f      	ldr	r2, [pc, #60]	; (cea4 <pdu_node_tx_release+0x64>)
    ce68:	9301      	str	r3, [sp, #4]
    ce6a:	4b0f      	ldr	r3, [pc, #60]	; (cea8 <pdu_node_tx_release+0x68>)
    ce6c:	490f      	ldr	r1, [pc, #60]	; (ceac <pdu_node_tx_release+0x6c>)
    ce6e:	9300      	str	r3, [sp, #0]
    ce70:	480f      	ldr	r0, [pc, #60]	; (ceb0 <pdu_node_tx_release+0x70>)
    ce72:	4b10      	ldr	r3, [pc, #64]	; (ceb4 <pdu_node_tx_release+0x74>)
    ce74:	f7f4 fd84 	bl	1980 <printk>
    ce78:	b662      	cpsie	i
    ce7a:	2004      	movs	r0, #4
    ce7c:	df02      	svc	2

	/* Enqueue app mem for release */
	_radio.pkt_release[_radio.packet_release_last].handle = handle;
    ce7e:	001d      	movs	r5, r3
    ce80:	35fc      	adds	r5, #252	; 0xfc
    ce82:	6f2e      	ldr	r6, [r5, #112]	; 0x70
    ce84:	5d1d      	ldrb	r5, [r3, r4]
    ce86:	00ed      	lsls	r5, r5, #3
    ce88:	53a8      	strh	r0, [r5, r6]
	_radio.pkt_release[_radio.packet_release_last].node_tx = node_tx;
    ce8a:	5d18      	ldrb	r0, [r3, r4]
    ce8c:	00c0      	lsls	r0, r0, #3
    ce8e:	1830      	adds	r0, r6, r0
    ce90:	6041      	str	r1, [r0, #4]
	_radio.packet_release_last = last;
    ce92:	551a      	strb	r2, [r3, r4]
	/* Inline call of callback. If JOB configured as lower priority then
	 * callback will tailchain at end of every radio ISR. If JOB configured
	 * as same then call inline so as to have callback for every radio ISR.
	 */
#if (RADIO_TICKER_USER_ID_WORKER_PRIO == RADIO_TICKER_USER_ID_JOB_PRIO)
	radio_event_callback();
    ce94:	f005 fa6a 	bl	1236c <radio_event_callback>
	_radio.pkt_release[_radio.packet_release_last].node_tx = node_tx;
	_radio.packet_release_last = last;

	/* callback to trigger application action */
	packet_rx_callback();
}
    ce98:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    ce9a:	46c0      	nop			; (mov r8, r8)
    ce9c:	200015c0 	.word	0x200015c0
    cea0:	000154c4 	.word	0x000154c4
    cea4:	00015484 	.word	0x00015484
    cea8:	000154c9 	.word	0x000154c9
    ceac:	0001548b 	.word	0x0001548b
    ceb0:	00016ea0 	.word	0x00016ea0
    ceb4:	0001842a 	.word	0x0001842a

0000ceb8 <packet_tx_enqueue>:
	/* callback to trigger application action */
	packet_rx_callback();
}

static void packet_tx_enqueue(u8_t max)
{
    ceb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    ceba:	9001      	str	r0, [sp, #4]
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
    cebc:	9b01      	ldr	r3, [sp, #4]
    cebe:	2b00      	cmp	r3, #0
    cec0:	d042      	beq.n	cf48 <packet_tx_enqueue+0x90>
    cec2:	2772      	movs	r7, #114	; 0x72
    cec4:	23b9      	movs	r3, #185	; 0xb9
    cec6:	4e21      	ldr	r6, [pc, #132]	; (cf4c <packet_tx_enqueue+0x94>)
    cec8:	005b      	lsls	r3, r3, #1
    ceca:	37ff      	adds	r7, #255	; 0xff
    cecc:	5cf1      	ldrb	r1, [r6, r3]
    cece:	5df2      	ldrb	r2, [r6, r7]
    ced0:	0033      	movs	r3, r6
    ced2:	4291      	cmp	r1, r2
    ced4:	d038      	beq.n	cf48 <packet_tx_enqueue+0x90>
		struct pdu_data_q_tx *pdu_data_q_tx;
		struct radio_pdu_node_tx *node_tx_new;
		struct connection *conn;
		u8_t first;

		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
    ced6:	33fc      	adds	r3, #252	; 0xfc
    ced8:	5df5      	ldrb	r5, [r6, r7]
    ceda:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    cedc:	00ed      	lsls	r5, r5, #3
    cede:	1955      	adds	r5, r2, r5
		node_tx_new = pdu_data_q_tx->node_tx;
		node_tx_new->next = NULL;
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    cee0:	218c      	movs	r1, #140	; 0x8c
		struct connection *conn;
		u8_t first;

		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
		node_tx_new = pdu_data_q_tx->node_tx;
		node_tx_new->next = NULL;
    cee2:	2200      	movs	r2, #0
		struct radio_pdu_node_tx *node_tx_new;
		struct connection *conn;
		u8_t first;

		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
		node_tx_new = pdu_data_q_tx->node_tx;
    cee4:	686c      	ldr	r4, [r5, #4]
		node_tx_new->next = NULL;
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    cee6:	6898      	ldr	r0, [r3, #8]
		struct connection *conn;
		u8_t first;

		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
		node_tx_new = pdu_data_q_tx->node_tx;
		node_tx_new->next = NULL;
    cee8:	6022      	str	r2, [r4, #0]
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    ceea:	0049      	lsls	r1, r1, #1
    ceec:	882a      	ldrh	r2, [r5, #0]
    ceee:	f7fd fd06 	bl	a8fe <mem_get>
				pdu_data_q_tx->handle);

		if (conn->handle == pdu_data_q_tx->handle) {
    cef2:	882b      	ldrh	r3, [r5, #0]
    cef4:	8c02      	ldrh	r2, [r0, #32]
    cef6:	429a      	cmp	r2, r3
    cef8:	d10f      	bne.n	cf1a <packet_tx_enqueue+0x62>
			if (conn->pkt_tx_data == 0) {
    cefa:	30fc      	adds	r0, #252	; 0xfc
    cefc:	6903      	ldr	r3, [r0, #16]
    cefe:	2b00      	cmp	r3, #0
    cf00:	d105      	bne.n	cf0e <packet_tx_enqueue+0x56>
				conn->pkt_tx_data = node_tx_new;

				if (conn->pkt_tx_head == 0) {
    cf02:	6883      	ldr	r3, [r0, #8]
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
				pdu_data_q_tx->handle);

		if (conn->handle == pdu_data_q_tx->handle) {
			if (conn->pkt_tx_data == 0) {
				conn->pkt_tx_data = node_tx_new;
    cf04:	6104      	str	r4, [r0, #16]

				if (conn->pkt_tx_head == 0) {
    cf06:	2b00      	cmp	r3, #0
    cf08:	d101      	bne.n	cf0e <packet_tx_enqueue+0x56>
					conn->pkt_tx_head = node_tx_new;
    cf0a:	6084      	str	r4, [r0, #8]
					conn->pkt_tx_last = NULL;
    cf0c:	6143      	str	r3, [r0, #20]
				}
			}

			if (conn->pkt_tx_last) {
    cf0e:	6943      	ldr	r3, [r0, #20]
    cf10:	2b00      	cmp	r3, #0
    cf12:	d000      	beq.n	cf16 <packet_tx_enqueue+0x5e>
				conn->pkt_tx_last->next = node_tx_new;
    cf14:	601c      	str	r4, [r3, #0]
			}

			conn->pkt_tx_last = node_tx_new;
    cf16:	6144      	str	r4, [r0, #20]
    cf18:	e007      	b.n	cf2a <packet_tx_enqueue+0x72>
			pdu_data_tx = (struct pdu_data *)node_tx_new->pdu_data;

			/* By setting it resv, when app gets num cmplt, no
			 * num cmplt is counted, but the buffer is released
			 */
			pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    cf1a:	2203      	movs	r2, #3
    cf1c:	7923      	ldrb	r3, [r4, #4]

			pdu_node_tx_release(pdu_data_q_tx->handle, node_tx_new);
    cf1e:	0021      	movs	r1, r4
			pdu_data_tx = (struct pdu_data *)node_tx_new->pdu_data;

			/* By setting it resv, when app gets num cmplt, no
			 * num cmplt is counted, but the buffer is released
			 */
			pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    cf20:	4393      	bics	r3, r2
    cf22:	7123      	strb	r3, [r4, #4]

			pdu_node_tx_release(pdu_data_q_tx->handle, node_tx_new);
    cf24:	8828      	ldrh	r0, [r5, #0]
    cf26:	f7ff ff8b 	bl	ce40 <pdu_node_tx_release>
		}

		first = _radio.packet_tx_first + 1;
		if (first == _radio.packet_tx_count) {
    cf2a:	22b8      	movs	r2, #184	; 0xb8
			pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;

			pdu_node_tx_release(pdu_data_q_tx->handle, node_tx_new);
		}

		first = _radio.packet_tx_first + 1;
    cf2c:	5df3      	ldrb	r3, [r6, r7]
		if (first == _radio.packet_tx_count) {
    cf2e:	0052      	lsls	r2, r2, #1
			pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;

			pdu_node_tx_release(pdu_data_q_tx->handle, node_tx_new);
		}

		first = _radio.packet_tx_first + 1;
    cf30:	3301      	adds	r3, #1
		if (first == _radio.packet_tx_count) {
    cf32:	5cb2      	ldrb	r2, [r6, r2]
			pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;

			pdu_node_tx_release(pdu_data_q_tx->handle, node_tx_new);
		}

		first = _radio.packet_tx_first + 1;
    cf34:	b2db      	uxtb	r3, r3
		if (first == _radio.packet_tx_count) {
    cf36:	429a      	cmp	r2, r3
    cf38:	d100      	bne.n	cf3c <packet_tx_enqueue+0x84>
			first = 0;
    cf3a:	2300      	movs	r3, #0
		}
		_radio.packet_tx_first = first;
    cf3c:	55f3      	strb	r3, [r6, r7]
    cf3e:	9f01      	ldr	r7, [sp, #4]
    cf40:	3f01      	subs	r7, #1
    cf42:	b2fb      	uxtb	r3, r7
    cf44:	9301      	str	r3, [sp, #4]
    cf46:	e7b9      	b.n	cebc <packet_tx_enqueue+0x4>
	}
}
    cf48:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    cf4a:	46c0      	nop			; (mov r8, r8)
    cf4c:	200015c0 	.word	0x200015c0

0000cf50 <event_common_prepare>:
				  u32_t *ticks_active_to_start,
				  u32_t ticks_preempt_to_start,
				  u8_t ticker_id,
				  ticker_timeout_func ticker_timeout_fp,
				  void *context)
{
    cf50:	b5f0      	push	{r4, r5, r6, r7, lr}
    cf52:	0005      	movs	r5, r0
    cf54:	0017      	movs	r7, r2
    cf56:	b08f      	sub	sp, #60	; 0x3c
    cf58:	930a      	str	r3, [sp, #40]	; 0x28
    cf5a:	ab14      	add	r3, sp, #80	; 0x50
    cf5c:	cb04      	ldmia	r3!, {r2}
    cf5e:	910d      	str	r1, [sp, #52]	; 0x34
    cf60:	781b      	ldrb	r3, [r3, #0]
    cf62:	920b      	str	r2, [sp, #44]	; 0x2c
    cf64:	930c      	str	r3, [sp, #48]	; 0x30
	u32_t ticker_status;
	u32_t _ticks_xtal_to_start = *ticks_xtal_to_start;
	u32_t _ticks_active_to_start = *ticks_active_to_start;
    cf66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
				  u8_t ticker_id,
				  ticker_timeout_func ticker_timeout_fp,
				  void *context)
{
	u32_t ticker_status;
	u32_t _ticks_xtal_to_start = *ticks_xtal_to_start;
    cf68:	683c      	ldr	r4, [r7, #0]
	u32_t _ticks_active_to_start = *ticks_active_to_start;
    cf6a:	681e      	ldr	r6, [r3, #0]
	u32_t ticks_to_start;

	/* Check for stale ticks_at_expire */
	if (ticker_ticks_diff_get(ticker_ticks_now_get(), ticks_at_expire) >
    cf6c:	f7ff f8b0 	bl	c0d0 <ticker_ticks_now_get>
    cf70:	0029      	movs	r1, r5
    cf72:	f7ff f8b1 	bl	c0d8 <ticker_ticks_diff_get>
    cf76:	2809      	cmp	r0, #9
    cf78:	d907      	bls.n	cf8a <event_common_prepare+0x3a>
	    TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US)) {
		/* Abort any running role, as it probably is the cause for
		 * stale ticks_at_expire.
		 */
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    cf7a:	2200      	movs	r2, #0
    cf7c:	2305      	movs	r3, #5
    cf7e:	0011      	movs	r1, r2
    cf80:	0010      	movs	r0, r2
    cf82:	f7ff fe31 	bl	cbe8 <event_stop>

		/* TODO: How much consecutive skips is tolerable? */
		return 1;
    cf86:	2501      	movs	r5, #1
    cf88:	e0b9      	b.n	d0fe <event_common_prepare+0x1ae>
	}

	/* in case this event is short prepare, xtal to start duration will be
	 * active to start duration.
	 */
	if (_ticks_xtal_to_start & ((u32_t)1 << 31)) {
    cf8a:	2c00      	cmp	r4, #0
    cf8c:	da04      	bge.n	cf98 <event_common_prepare+0x48>
		_ticks_xtal_to_start =
    cf8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cf90:	0034      	movs	r4, r6
    cf92:	429e      	cmp	r6, r3
    cf94:	d200      	bcs.n	cf98 <event_common_prepare+0x48>
    cf96:	001c      	movs	r4, r3

	/* decide whether its XTAL start or active event that is the current
	 * execution context and accordingly setup the ticker for the other
	 * event (XTAL or active event). These are oneshot ticker.
	 */
	if (_ticks_active_to_start < _ticks_xtal_to_start) {
    cf98:	42b4      	cmp	r4, r6
    cf9a:	d919      	bls.n	cfd0 <event_common_prepare+0x80>

		/* XTAL is before Active */
		ticks_to_active = _ticks_xtal_to_start - _ticks_active_to_start;
		ticks_to_start = _ticks_xtal_to_start;

		ticker_status =
    cf9c:	2000      	movs	r0, #0
    cf9e:	4b59      	ldr	r3, [pc, #356]	; (d104 <event_common_prepare+0x1b4>)
    cfa0:	9006      	str	r0, [sp, #24]
    cfa2:	9308      	str	r3, [sp, #32]
    cfa4:	4b58      	ldr	r3, [pc, #352]	; (d108 <event_common_prepare+0x1b8>)
    cfa6:	9004      	str	r0, [sp, #16]
    cfa8:	9307      	str	r3, [sp, #28]
    cfaa:	4b58      	ldr	r3, [pc, #352]	; (d10c <event_common_prepare+0x1bc>)
    cfac:	9003      	str	r0, [sp, #12]
    cfae:	9305      	str	r3, [sp, #20]
    cfb0:	1ba3      	subs	r3, r4, r6
    cfb2:	9300      	str	r3, [sp, #0]
    cfb4:	9002      	str	r0, [sp, #8]
    cfb6:	002b      	movs	r3, r5
    cfb8:	9001      	str	r0, [sp, #4]
    cfba:	2201      	movs	r2, #1
    cfbc:	0001      	movs	r1, r0
    cfbe:	f7fe ff53 	bl	be68 <ticker_start>
				     RADIO_TICKER_ID_MARKER_0, ticks_at_expire,
				     ticks_to_active, TICKER_NULL_PERIOD,
				     TICKER_NULL_REMAINDER, TICKER_NULL_LAZY,
				     TICKER_NULL_SLOT, event_active, NULL,
				     ticker_success_assert, (void *)__LINE__);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    cfc2:	2302      	movs	r3, #2
    cfc4:	4398      	bics	r0, r3
    cfc6:	d177      	bne.n	d0b8 <event_common_prepare+0x168>
			  (ticker_status == TICKER_STATUS_BUSY));

		event_xtal(0, 0, 0, NULL);
    cfc8:	0003      	movs	r3, r0
    cfca:	0002      	movs	r2, r0
    cfcc:	0001      	movs	r1, r0
    cfce:	e029      	b.n	d024 <event_common_prepare+0xd4>
	} else if (_ticks_active_to_start > _ticks_xtal_to_start) {
    cfd0:	42b4      	cmp	r4, r6
    cfd2:	d21d      	bcs.n	d010 <event_common_prepare+0xc0>

		/* Active is before XTAL */
		ticks_to_xtal = _ticks_active_to_start - _ticks_xtal_to_start;
		ticks_to_start = _ticks_active_to_start;

		event_active(0, 0, 0, NULL);
    cfd4:	2300      	movs	r3, #0
    cfd6:	001a      	movs	r2, r3
    cfd8:	0019      	movs	r1, r3
    cfda:	0018      	movs	r0, r3
    cfdc:	f7ff fe7c 	bl	ccd8 <event_active>

		ticker_status =
    cfe0:	2000      	movs	r0, #0
    cfe2:	4b4b      	ldr	r3, [pc, #300]	; (d110 <event_common_prepare+0x1c0>)
		event_xtal(0, 0, 0, NULL);
	} else if (_ticks_active_to_start > _ticks_xtal_to_start) {
		u32_t ticks_to_xtal;

		/* Active is before XTAL */
		ticks_to_xtal = _ticks_active_to_start - _ticks_xtal_to_start;
    cfe4:	1b34      	subs	r4, r6, r4
		ticks_to_start = _ticks_active_to_start;

		event_active(0, 0, 0, NULL);

		ticker_status =
    cfe6:	9308      	str	r3, [sp, #32]
    cfe8:	4b47      	ldr	r3, [pc, #284]	; (d108 <event_common_prepare+0x1b8>)
    cfea:	9006      	str	r0, [sp, #24]
    cfec:	9307      	str	r3, [sp, #28]
    cfee:	4b49      	ldr	r3, [pc, #292]	; (d114 <event_common_prepare+0x1c4>)
    cff0:	9004      	str	r0, [sp, #16]
    cff2:	9305      	str	r3, [sp, #20]
    cff4:	9003      	str	r0, [sp, #12]
    cff6:	002b      	movs	r3, r5
    cff8:	9002      	str	r0, [sp, #8]
    cffa:	9001      	str	r0, [sp, #4]
    cffc:	9400      	str	r4, [sp, #0]
    cffe:	2201      	movs	r2, #1
    d000:	0001      	movs	r1, r0
    d002:	f7fe ff31 	bl	be68 <ticker_start>
				     RADIO_TICKER_ID_MARKER_0, ticks_at_expire,
				     ticks_to_xtal, TICKER_NULL_PERIOD,
				     TICKER_NULL_REMAINDER, TICKER_NULL_LAZY,
				     TICKER_NULL_SLOT, event_xtal, NULL,
				     ticker_success_assert, (void *)__LINE__);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    d006:	2302      	movs	r3, #2
    d008:	4398      	bics	r0, r3
    d00a:	d155      	bne.n	d0b8 <event_common_prepare+0x168>
    d00c:	0034      	movs	r4, r6
    d00e:	e00b      	b.n	d028 <event_common_prepare+0xd8>
		/* Active and XTAL are at the same time,
		 * no ticker required to be setup.
		 */
		ticks_to_start = _ticks_xtal_to_start;

		event_active(0, 0, 0, NULL);
    d010:	2300      	movs	r3, #0
    d012:	001a      	movs	r2, r3
    d014:	0019      	movs	r1, r3
    d016:	0018      	movs	r0, r3
    d018:	f7ff fe5e 	bl	ccd8 <event_active>
		event_xtal(0, 0, 0, NULL);
    d01c:	2300      	movs	r3, #0
    d01e:	001a      	movs	r2, r3
    d020:	0019      	movs	r1, r3
    d022:	0018      	movs	r0, r3
    d024:	f7ff fe7e 	bl	cd24 <event_xtal>

	/* remember the remainder to be used in pkticker */
	_radio.remainder_anchor = remainder;

	/* setup the start ticker */
	ticker_status =
    d028:	2000      	movs	r0, #0
		event_active(0, 0, 0, NULL);
		event_xtal(0, 0, 0, NULL);
	}

	/* remember the remainder to be used in pkticker */
	_radio.remainder_anchor = remainder;
    d02a:	4b3b      	ldr	r3, [pc, #236]	; (d118 <event_common_prepare+0x1c8>)
    d02c:	9a0d      	ldr	r2, [sp, #52]	; 0x34

	/* setup the start ticker */
	ticker_status =
    d02e:	0001      	movs	r1, r0
		event_active(0, 0, 0, NULL);
		event_xtal(0, 0, 0, NULL);
	}

	/* remember the remainder to be used in pkticker */
	_radio.remainder_anchor = remainder;
    d030:	609a      	str	r2, [r3, #8]

	/* setup the start ticker */
	ticker_status =
    d032:	4b3a      	ldr	r3, [pc, #232]	; (d11c <event_common_prepare+0x1cc>)
    d034:	9004      	str	r0, [sp, #16]
    d036:	9308      	str	r3, [sp, #32]
    d038:	4b33      	ldr	r3, [pc, #204]	; (d108 <event_common_prepare+0x1b8>)
    d03a:	9003      	str	r0, [sp, #12]
    d03c:	9307      	str	r3, [sp, #28]
    d03e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    d040:	9002      	str	r0, [sp, #8]
    d042:	9306      	str	r3, [sp, #24]
    d044:	9b16      	ldr	r3, [sp, #88]	; 0x58
    d046:	9001      	str	r0, [sp, #4]
    d048:	9305      	str	r3, [sp, #20]
    d04a:	9400      	str	r4, [sp, #0]
    d04c:	002b      	movs	r3, r5
    d04e:	0002      	movs	r2, r0
    d050:	f7fe ff0a 	bl	be68 <ticker_start>
			     ticks_at_expire, ticks_to_start,
			     TICKER_NULL_PERIOD, TICKER_NULL_REMAINDER,
			     TICKER_NULL_LAZY, TICKER_NULL_SLOT,
			     ticker_timeout_fp, context, ticker_success_assert,
			     (void *)__LINE__);
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    d054:	2302      	movs	r3, #2
    d056:	4398      	bics	r0, r3
    d058:	4b2b      	ldr	r3, [pc, #172]	; (d108 <event_common_prepare+0x1b8>)
    d05a:	1e05      	subs	r5, r0, #0
    d05c:	930b      	str	r3, [sp, #44]	; 0x2c
    d05e:	d12b      	bne.n	d0b8 <event_common_prepare+0x168>
				     ticker_success_assert, (void *)__LINE__);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
			  (ticker_status == TICKER_STATUS_BUSY));
	}
#else
	event_stop(0, 0, 0, (void *)STATE_ABORT);
    d060:	2305      	movs	r3, #5
    d062:	0002      	movs	r2, r0
    d064:	0001      	movs	r1, r0
    d066:	f7ff fdbf 	bl	cbe8 <event_stop>
#endif
#undef RADIO_DEFERRED_PREEMPT

	/** Handle change in _ticks_active_to_start */
	if (_radio.ticks_active_to_start != _ticks_active_to_start) {
    d06a:	23c0      	movs	r3, #192	; 0xc0
    d06c:	4a2a      	ldr	r2, [pc, #168]	; (d118 <event_common_prepare+0x1c8>)
    d06e:	005b      	lsls	r3, r3, #1
    d070:	58d2      	ldr	r2, [r2, r3]
    d072:	4296      	cmp	r6, r2
    d074:	d029      	beq.n	d0ca <event_common_prepare+0x17a>
		u32_t ticks_to_start_new =
    d076:	683b      	ldr	r3, [r7, #0]
    d078:	005b      	lsls	r3, r3, #1
    d07a:	085b      	lsrs	r3, r3, #1
    d07c:	4293      	cmp	r3, r2
    d07e:	d200      	bcs.n	d082 <event_common_prepare+0x132>
    d080:	0013      	movs	r3, r2
			((_radio.ticks_active_to_start <
			  (*ticks_xtal_to_start & ~(((u32_t)1 << 31)))) ?
			 (*ticks_xtal_to_start & ~(((u32_t)1 << 31))) :
			 _radio.ticks_active_to_start);

		*ticks_active_to_start = _radio.ticks_active_to_start;
    d082:	990a      	ldr	r1, [sp, #40]	; 0x28
    d084:	600a      	str	r2, [r1, #0]

		if ((*ticks_xtal_to_start) & ((u32_t)1 << 31)) {
    d086:	683a      	ldr	r2, [r7, #0]
    d088:	2a00      	cmp	r2, #0
    d08a:	da02      	bge.n	d092 <event_common_prepare+0x142>
			*ticks_xtal_to_start &= ~(((u32_t)1 << 31));
    d08c:	0052      	lsls	r2, r2, #1
    d08e:	0852      	lsrs	r2, r2, #1
    d090:	603a      	str	r2, [r7, #0]
		}

		/* drift the primary as required due to active line change */
		ticker_status =
    d092:	2000      	movs	r0, #0
    d094:	4922      	ldr	r1, [pc, #136]	; (d120 <event_common_prepare+0x1d0>)
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    d096:	b29a      	uxth	r2, r3
		if ((*ticks_xtal_to_start) & ((u32_t)1 << 31)) {
			*ticks_xtal_to_start &= ~(((u32_t)1 << 31));
		}

		/* drift the primary as required due to active line change */
		ticker_status =
    d098:	9106      	str	r1, [sp, #24]
    d09a:	990b      	ldr	r1, [sp, #44]	; 0x2c
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    d09c:	b2a3      	uxth	r3, r4
		if ((*ticks_xtal_to_start) & ((u32_t)1 << 31)) {
			*ticks_xtal_to_start &= ~(((u32_t)1 << 31));
		}

		/* drift the primary as required due to active line change */
		ticker_status =
    d09e:	9105      	str	r1, [sp, #20]
    d0a0:	9302      	str	r3, [sp, #8]
    d0a2:	9201      	str	r2, [sp, #4]
    d0a4:	9200      	str	r2, [sp, #0]
    d0a6:	9004      	str	r0, [sp, #16]
    d0a8:	9003      	str	r0, [sp, #12]
    d0aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    d0ac:	0001      	movs	r1, r0
    d0ae:	f7fe ff23 	bl	bef8 <ticker_update>
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
				      RADIO_TICKER_USER_ID_WORKER, ticker_id,
				      ticks_to_start, ticks_to_start_new,
				      ticks_to_start_new, ticks_to_start, 0, 0,
				      ticker_success_assert, (void *)__LINE__);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    d0b2:	2302      	movs	r3, #2
    d0b4:	4398      	bics	r0, r3
    d0b6:	d008      	beq.n	d0ca <event_common_prepare+0x17a>
    d0b8:	4b1a      	ldr	r3, [pc, #104]	; (d124 <event_common_prepare+0x1d4>)
    d0ba:	4a1b      	ldr	r2, [pc, #108]	; (d128 <event_common_prepare+0x1d8>)
    d0bc:	9301      	str	r3, [sp, #4]
    d0be:	4b1b      	ldr	r3, [pc, #108]	; (d12c <event_common_prepare+0x1dc>)
    d0c0:	491b      	ldr	r1, [pc, #108]	; (d130 <event_common_prepare+0x1e0>)
    d0c2:	9300      	str	r3, [sp, #0]
    d0c4:	481b      	ldr	r0, [pc, #108]	; (d134 <event_common_prepare+0x1e4>)
    d0c6:	4b1c      	ldr	r3, [pc, #112]	; (d138 <event_common_prepare+0x1e8>)
    d0c8:	e014      	b.n	d0f4 <event_common_prepare+0x1a4>
			  (ticker_status == TICKER_STATUS_BUSY));
	}

	/* route all packets queued for connections */
	packet_tx_enqueue(0xFF);
    d0ca:	20ff      	movs	r0, #255	; 0xff
    d0cc:	f7ff fef4 	bl	ceb8 <packet_tx_enqueue>
		static void *s_link[2];
		static struct mayfly s_mfy_xtal_stop_calc = {0, 0, s_link, NULL,
			mayfly_xtal_stop_calc};
		u32_t retval;

		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
    d0d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    d0d2:	4b1a      	ldr	r3, [pc, #104]	; (d13c <event_common_prepare+0x1ec>)

		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    d0d4:	2000      	movs	r0, #0
		static void *s_link[2];
		static struct mayfly s_mfy_xtal_stop_calc = {0, 0, s_link, NULL,
			mayfly_xtal_stop_calc};
		u32_t retval;

		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
    d0d6:	609a      	str	r2, [r3, #8]

		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    d0d8:	2201      	movs	r2, #1
    d0da:	0011      	movs	r1, r2
    d0dc:	f7fd fad0 	bl	a680 <mayfly_enqueue>
					RADIO_TICKER_USER_ID_JOB, 1,
					&s_mfy_xtal_stop_calc);
		LL_ASSERT(!retval);
    d0e0:	2800      	cmp	r0, #0
    d0e2:	d00c      	beq.n	d0fe <event_common_prepare+0x1ae>
    d0e4:	4b0f      	ldr	r3, [pc, #60]	; (d124 <event_common_prepare+0x1d4>)
    d0e6:	4a10      	ldr	r2, [pc, #64]	; (d128 <event_common_prepare+0x1d8>)
    d0e8:	9301      	str	r3, [sp, #4]
    d0ea:	4b10      	ldr	r3, [pc, #64]	; (d12c <event_common_prepare+0x1dc>)
    d0ec:	4910      	ldr	r1, [pc, #64]	; (d130 <event_common_prepare+0x1e0>)
    d0ee:	9300      	str	r3, [sp, #0]
    d0f0:	4813      	ldr	r0, [pc, #76]	; (d140 <event_common_prepare+0x1f0>)
    d0f2:	4b11      	ldr	r3, [pc, #68]	; (d138 <event_common_prepare+0x1e8>)
    d0f4:	f7f4 fc44 	bl	1980 <printk>
    d0f8:	b662      	cpsie	i
    d0fa:	2004      	movs	r0, #4
    d0fc:	df02      	svc	2
	}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_XTAL_ADVANCED */

	return 0;
}
    d0fe:	0028      	movs	r0, r5
    d100:	b00f      	add	sp, #60	; 0x3c
    d102:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d104:	00001168 	.word	0x00001168
    d108:	0000ca25 	.word	0x0000ca25
    d10c:	0000ccd9 	.word	0x0000ccd9
    d110:	0000117d 	.word	0x0000117d
    d114:	0000cd25 	.word	0x0000cd25
    d118:	200015c0 	.word	0x200015c0
    d11c:	00001195 	.word	0x00001195
    d120:	000011c2 	.word	0x000011c2
    d124:	000154c4 	.word	0x000154c4
    d128:	00015484 	.word	0x00015484
    d12c:	000154c9 	.word	0x000154c9
    d130:	0001548b 	.word	0x0001548b
    d134:	00016da4 	.word	0x00016da4
    d138:	00018216 	.word	0x00018216
    d13c:	20000880 	.word	0x20000880
    d140:	00016bf1 	.word	0x00016bf1

0000d144 <connection_release>:
	/* callback to trigger application action */
	packet_rx_callback();
}

static void connection_release(struct connection *conn)
{
    d144:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	u32_t ticker_status;

	/* Enable Ticker Job, we are in a radio event which disabled it if
	 * worker0 and job0 priority where same.
	 */
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    d146:	2201      	movs	r2, #1
	/* callback to trigger application action */
	packet_rx_callback();
}

static void connection_release(struct connection *conn)
{
    d148:	0005      	movs	r5, r0
	u32_t ticker_status;

	/* Enable Ticker Job, we are in a radio event which disabled it if
	 * worker0 and job0 priority where same.
	 */
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    d14a:	0011      	movs	r1, r2
    d14c:	2000      	movs	r0, #0
    d14e:	f7fd fa77 	bl	a640 <mayfly_enable>
	/** @todo correctly stop tickers ensuring crystal and radio active are
	 * placed in right states
	 */

	/* Stop Master/Slave role ticker */
	ticker_status =
    d152:	2100      	movs	r1, #0
    d154:	8c2a      	ldrh	r2, [r5, #32]
    d156:	4f39      	ldr	r7, [pc, #228]	; (d23c <connection_release+0xf8>)
    d158:	4b39      	ldr	r3, [pc, #228]	; (d240 <connection_release+0xfc>)
    d15a:	3207      	adds	r2, #7
    d15c:	9300      	str	r3, [sp, #0]
    d15e:	b2d2      	uxtb	r2, r2
    d160:	003b      	movs	r3, r7
    d162:	0008      	movs	r0, r1
    d164:	f7fe ff18 	bl	bf98 <ticker_stop>
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
			    RADIO_TICKER_USER_ID_WORKER,
			    (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle),
			    ticker_success_assert, (void *)__LINE__);
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    d168:	2402      	movs	r4, #2
    d16a:	43a0      	bics	r0, r4
    d16c:	d11d      	bne.n	d1aa <connection_release+0x66>
		  (ticker_status == TICKER_STATUS_BUSY));

	/* Stop Marker 0 and event single-shot tickers */
	if ((_radio.state == STATE_ABORT) &&
    d16e:	4b35      	ldr	r3, [pc, #212]	; (d244 <connection_release+0x100>)
    d170:	7c1a      	ldrb	r2, [r3, #16]
    d172:	001e      	movs	r6, r3
    d174:	2a05      	cmp	r2, #5
    d176:	d001      	beq.n	d17c <connection_release+0x38>
		/* By setting it resv, when app gets num cmplt, no num cmplt
		 * is counted, but the buffer is released
		 */
		node_tx = conn->pkt_tx_head;
		pdu_data_tx = (struct pdu_data *)node_tx->pdu_data;
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    d178:	2703      	movs	r7, #3
    d17a:	e02f      	b.n	d1dc <connection_release+0x98>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
		  (ticker_status == TICKER_STATUS_BUSY));

	/* Stop Marker 0 and event single-shot tickers */
	if ((_radio.state == STATE_ABORT) &&
	    (_radio.ticker_id_prepare == (RADIO_TICKER_ID_FIRST_CONNECTION +
    d17c:	7b1a      	ldrb	r2, [r3, #12]
			    ticker_success_assert, (void *)__LINE__);
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
		  (ticker_status == TICKER_STATUS_BUSY));

	/* Stop Marker 0 and event single-shot tickers */
	if ((_radio.state == STATE_ABORT) &&
    d17e:	8c2b      	ldrh	r3, [r5, #32]
    d180:	3307      	adds	r3, #7
    d182:	429a      	cmp	r2, r3
    d184:	d1f8      	bne.n	d178 <connection_release+0x34>
	    (_radio.ticker_id_prepare == (RADIO_TICKER_ID_FIRST_CONNECTION +
					  conn->handle))) {
		ticker_status =
    d186:	4b30      	ldr	r3, [pc, #192]	; (d248 <connection_release+0x104>)
    d188:	2201      	movs	r2, #1
    d18a:	9300      	str	r3, [sp, #0]
    d18c:	0001      	movs	r1, r0
    d18e:	003b      	movs	r3, r7
    d190:	f7fe ff02 	bl	bf98 <ticker_stop>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
				    RADIO_TICKER_USER_ID_WORKER,
				    RADIO_TICKER_ID_MARKER_0,
				    ticker_success_assert, (void *)__LINE__);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    d194:	43a0      	bics	r0, r4
    d196:	d108      	bne.n	d1aa <connection_release+0x66>
			  (ticker_status == TICKER_STATUS_BUSY));
		ticker_status =
    d198:	4b2c      	ldr	r3, [pc, #176]	; (d24c <connection_release+0x108>)
    d19a:	0002      	movs	r2, r0
    d19c:	9300      	str	r3, [sp, #0]
    d19e:	0001      	movs	r1, r0
    d1a0:	003b      	movs	r3, r7
    d1a2:	f7fe fef9 	bl	bf98 <ticker_stop>
		    ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
				RADIO_TICKER_USER_ID_WORKER,
				RADIO_TICKER_ID_EVENT,
				ticker_success_assert, (void *)__LINE__);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    d1a6:	43a0      	bics	r0, r4
    d1a8:	d0e6      	beq.n	d178 <connection_release+0x34>
    d1aa:	4b29      	ldr	r3, [pc, #164]	; (d250 <connection_release+0x10c>)
    d1ac:	4a29      	ldr	r2, [pc, #164]	; (d254 <connection_release+0x110>)
    d1ae:	9301      	str	r3, [sp, #4]
    d1b0:	4b29      	ldr	r3, [pc, #164]	; (d258 <connection_release+0x114>)
    d1b2:	492a      	ldr	r1, [pc, #168]	; (d25c <connection_release+0x118>)
    d1b4:	9300      	str	r3, [sp, #0]
    d1b6:	482a      	ldr	r0, [pc, #168]	; (d260 <connection_release+0x11c>)
    d1b8:	4b2a      	ldr	r3, [pc, #168]	; (d264 <connection_release+0x120>)
    d1ba:	f7f4 fbe1 	bl	1980 <printk>
    d1be:	b662      	cpsie	i
    d1c0:	2004      	movs	r0, #4
    d1c2:	df02      	svc	2
			  (ticker_status == TICKER_STATUS_BUSY));
	}

	/* flush and release, data packet before ctrl */
	while ((conn->pkt_tx_head != conn->pkt_tx_ctrl) &&
    d1c4:	6923      	ldr	r3, [r4, #16]
    d1c6:	4299      	cmp	r1, r3
    d1c8:	d01a      	beq.n	d200 <connection_release+0xbc>
		/* By setting it resv, when app gets num cmplt, no num cmplt
		 * is counted, but the buffer is released
		 */
		node_tx = conn->pkt_tx_head;
		pdu_data_tx = (struct pdu_data *)node_tx->pdu_data;
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    d1ca:	790b      	ldrb	r3, [r1, #4]
    d1cc:	43bb      	bics	r3, r7
    d1ce:	710b      	strb	r3, [r1, #4]

		conn->pkt_tx_head = conn->pkt_tx_head->next;
    d1d0:	68a3      	ldr	r3, [r4, #8]
    d1d2:	681b      	ldr	r3, [r3, #0]
    d1d4:	60a3      	str	r3, [r4, #8]

		pdu_node_tx_release(conn->handle, node_tx);
    d1d6:	8c28      	ldrh	r0, [r5, #32]
    d1d8:	f7ff fe32 	bl	ce40 <pdu_node_tx_release>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
			  (ticker_status == TICKER_STATUS_BUSY));
	}

	/* flush and release, data packet before ctrl */
	while ((conn->pkt_tx_head != conn->pkt_tx_ctrl) &&
    d1dc:	002c      	movs	r4, r5
    d1de:	34fc      	adds	r4, #252	; 0xfc
    d1e0:	68a1      	ldr	r1, [r4, #8]
    d1e2:	68e3      	ldr	r3, [r4, #12]
    d1e4:	4299      	cmp	r1, r3
    d1e6:	d1ed      	bne.n	d1c4 <connection_release+0x80>
    d1e8:	e00a      	b.n	d200 <connection_release+0xbc>

		pdu_node_tx_release(conn->handle, node_tx);
	}

	/* flush and release, ctrl packet before data */
	while ((conn->pkt_tx_head) &&
    d1ea:	6923      	ldr	r3, [r4, #16]
    d1ec:	4298      	cmp	r0, r3
    d1ee:	d00a      	beq.n	d206 <connection_release+0xc2>

		release = conn->pkt_tx_head;
		conn->pkt_tx_head = conn->pkt_tx_head->next;
		conn->pkt_tx_ctrl = conn->pkt_tx_head;

		mem_release(release, &_radio.pkt_tx_ctrl_free);
    d1f0:	0031      	movs	r1, r6
	while ((conn->pkt_tx_head) &&
	       (conn->pkt_tx_head != conn->pkt_tx_data)) {
		void *release;

		release = conn->pkt_tx_head;
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    d1f2:	6803      	ldr	r3, [r0, #0]
		conn->pkt_tx_ctrl = conn->pkt_tx_head;

		mem_release(release, &_radio.pkt_tx_ctrl_free);
    d1f4:	3159      	adds	r1, #89	; 0x59
	while ((conn->pkt_tx_head) &&
	       (conn->pkt_tx_head != conn->pkt_tx_data)) {
		void *release;

		release = conn->pkt_tx_head;
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    d1f6:	60a3      	str	r3, [r4, #8]
		conn->pkt_tx_ctrl = conn->pkt_tx_head;
    d1f8:	60e3      	str	r3, [r4, #12]

		mem_release(release, &_radio.pkt_tx_ctrl_free);
    d1fa:	31ff      	adds	r1, #255	; 0xff
    d1fc:	f7fd fb61 	bl	a8c2 <mem_release>

		pdu_node_tx_release(conn->handle, node_tx);
	}

	/* flush and release, ctrl packet before data */
	while ((conn->pkt_tx_head) &&
    d200:	68a0      	ldr	r0, [r4, #8]
    d202:	2800      	cmp	r0, #0
    d204:	d1f1      	bne.n	d1ea <connection_release+0xa6>
		conn->pkt_tx_head = conn->pkt_tx_head->next;
		conn->pkt_tx_ctrl = conn->pkt_tx_head;

		mem_release(release, &_radio.pkt_tx_ctrl_free);
	}
	conn->pkt_tx_ctrl = NULL;
    d206:	2300      	movs	r3, #0
		/* By setting it resv, when app gets num cmplt, no num cmplt
		 * is counted, but the buffer is released
		 */
		node_tx = conn->pkt_tx_head;
		pdu_data_tx = (struct pdu_data *)node_tx->pdu_data;
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    d208:	2703      	movs	r7, #3
		conn->pkt_tx_head = conn->pkt_tx_head->next;
		conn->pkt_tx_ctrl = conn->pkt_tx_head;

		mem_release(release, &_radio.pkt_tx_ctrl_free);
	}
	conn->pkt_tx_ctrl = NULL;
    d20a:	60e3      	str	r3, [r4, #12]

	/* flush and release, rest of data */
	while (conn->pkt_tx_head) {
    d20c:	68a1      	ldr	r1, [r4, #8]
    d20e:	2900      	cmp	r1, #0
    d210:	d00a      	beq.n	d228 <connection_release+0xe4>
		/* By setting it resv, when app gets num cmplt, no num cmplt
		 * is counted, but the buffer is released
		 */
		node_tx = conn->pkt_tx_head;
		pdu_data_tx = (struct pdu_data *)node_tx->pdu_data;
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    d212:	790b      	ldrb	r3, [r1, #4]
    d214:	43bb      	bics	r3, r7
    d216:	710b      	strb	r3, [r1, #4]

		conn->pkt_tx_head = conn->pkt_tx_head->next;
    d218:	68a3      	ldr	r3, [r4, #8]
    d21a:	681b      	ldr	r3, [r3, #0]
    d21c:	60a3      	str	r3, [r4, #8]
		conn->pkt_tx_data = conn->pkt_tx_head;
    d21e:	6123      	str	r3, [r4, #16]

		pdu_node_tx_release(conn->handle, node_tx);
    d220:	8c28      	ldrh	r0, [r5, #32]
    d222:	f7ff fe0d 	bl	ce40 <pdu_node_tx_release>
    d226:	e7f1      	b.n	d20c <connection_release+0xc8>
	}

	conn->handle = 0xffff;
    d228:	2301      	movs	r3, #1
    d22a:	425b      	negs	r3, r3
    d22c:	842b      	strh	r3, [r5, #32]

	/* reset mutex */
	if (_radio.conn_upd == conn) {
    d22e:	3386      	adds	r3, #134	; 0x86
    d230:	33ff      	adds	r3, #255	; 0xff
    d232:	58f2      	ldr	r2, [r6, r3]
    d234:	4295      	cmp	r5, r2
    d236:	d100      	bne.n	d23a <connection_release+0xf6>
		_radio.conn_upd = NULL;
    d238:	50f1      	str	r1, [r6, r3]
	}
}
    d23a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    d23c:	0000ca25 	.word	0x0000ca25
    d240:	00001cf6 	.word	0x00001cf6
    d244:	200015c0 	.word	0x200015c0
    d248:	00001d02 	.word	0x00001d02
    d24c:	00001d09 	.word	0x00001d09
    d250:	000154c4 	.word	0x000154c4
    d254:	00015484 	.word	0x00015484
    d258:	000154c9 	.word	0x000154c9
    d25c:	0001548b 	.word	0x0001548b
    d260:	00016da4 	.word	0x00016da4
    d264:	00018450 	.word	0x00018450

0000d268 <chan_set>:
}
#endif /* RADIO_UNIT_TEST */
#endif /* CONFIG_BLUETOOTH_CONTROLLER_CHAN_SEL_2 */

static void chan_set(u32_t chan)
{
    d268:	b513      	push	{r0, r1, r4, lr}
    d26a:	0004      	movs	r4, r0
	switch (chan) {
    d26c:	2826      	cmp	r0, #38	; 0x26
    d26e:	d005      	beq.n	d27c <chan_set+0x14>
    d270:	2827      	cmp	r0, #39	; 0x27
    d272:	d005      	beq.n	d280 <chan_set+0x18>
	case 37:
		radio_freq_chan_set(2);
    d274:	2002      	movs	r0, #2
#endif /* RADIO_UNIT_TEST */
#endif /* CONFIG_BLUETOOTH_CONTROLLER_CHAN_SEL_2 */

static void chan_set(u32_t chan)
{
	switch (chan) {
    d276:	2c25      	cmp	r4, #37	; 0x25
    d278:	d104      	bne.n	d284 <chan_set+0x1c>
    d27a:	e007      	b.n	d28c <chan_set+0x24>
	case 37:
		radio_freq_chan_set(2);
		break;

	case 38:
		radio_freq_chan_set(26);
    d27c:	201a      	movs	r0, #26
    d27e:	e005      	b.n	d28c <chan_set+0x24>
		break;

	case 39:
		radio_freq_chan_set(80);
    d280:	2050      	movs	r0, #80	; 0x50
    d282:	e003      	b.n	d28c <chan_set+0x24>
		break;

	default:
		if (chan < 11) {
    d284:	2c0a      	cmp	r4, #10
    d286:	d807      	bhi.n	d298 <chan_set+0x30>
			radio_freq_chan_set(4 + (2 * chan));
    d288:	1ca0      	adds	r0, r4, #2
    d28a:	0040      	lsls	r0, r0, #1
    d28c:	f7fd fc80 	bl	ab90 <radio_freq_chan_set>
			LL_ASSERT(0);
		}
		break;
	}

	radio_whiten_iv_set(chan);
    d290:	0020      	movs	r0, r4
    d292:	f7fd fc85 	bl	aba0 <radio_whiten_iv_set>
}
    d296:	bd13      	pop	{r0, r1, r4, pc}

	default:
		if (chan < 11) {
			radio_freq_chan_set(4 + (2 * chan));
		} else if (chan < 40) {
			radio_freq_chan_set(28 + (2 * (chan - 11)));
    d298:	1ce0      	adds	r0, r4, #3
		break;

	default:
		if (chan < 11) {
			radio_freq_chan_set(4 + (2 * chan));
		} else if (chan < 40) {
    d29a:	2c27      	cmp	r4, #39	; 0x27
    d29c:	d9f5      	bls.n	d28a <chan_set+0x22>
			radio_freq_chan_set(28 + (2 * (chan - 11)));
		} else {
			LL_ASSERT(0);
    d29e:	4b06      	ldr	r3, [pc, #24]	; (d2b8 <chan_set+0x50>)
    d2a0:	4a06      	ldr	r2, [pc, #24]	; (d2bc <chan_set+0x54>)
    d2a2:	9301      	str	r3, [sp, #4]
    d2a4:	4b06      	ldr	r3, [pc, #24]	; (d2c0 <chan_set+0x58>)
    d2a6:	4907      	ldr	r1, [pc, #28]	; (d2c4 <chan_set+0x5c>)
    d2a8:	9300      	str	r3, [sp, #0]
    d2aa:	4807      	ldr	r0, [pc, #28]	; (d2c8 <chan_set+0x60>)
    d2ac:	4b07      	ldr	r3, [pc, #28]	; (d2cc <chan_set+0x64>)
    d2ae:	f7f4 fb67 	bl	1980 <printk>
    d2b2:	b662      	cpsie	i
    d2b4:	2004      	movs	r0, #4
    d2b6:	df02      	svc	2
    d2b8:	000154c4 	.word	0x000154c4
    d2bc:	00015484 	.word	0x00015484
    d2c0:	000154c9 	.word	0x000154c9
    d2c4:	0001548b 	.word	0x0001548b
    d2c8:	00015b21 	.word	0x00015b21
    d2cc:	000180e9 	.word	0x000180e9

0000d2d0 <adv_setup>:

	DEBUG_RADIO_PREPARE_A(0);
}

static void adv_setup(void)
{
    d2d0:	b570      	push	{r4, r5, r6, lr}
	u8_t bitmap;
	u8_t chan;
	u8_t upd = 0;

	/* Use latest adv data PDU buffer */
	if (_radio.advertiser.adv_data.first !=
    d2d2:	4c35      	ldr	r4, [pc, #212]	; (d3a8 <adv_setup+0xd8>)
    d2d4:	0023      	movs	r3, r4
	    _radio.advertiser.adv_data.last) {
    d2d6:	0022      	movs	r2, r4
	u8_t bitmap;
	u8_t chan;
	u8_t upd = 0;

	/* Use latest adv data PDU buffer */
	if (_radio.advertiser.adv_data.first !=
    d2d8:	3375      	adds	r3, #117	; 0x75
	    _radio.advertiser.adv_data.last) {
    d2da:	3276      	adds	r2, #118	; 0x76
	u8_t bitmap;
	u8_t chan;
	u8_t upd = 0;

	/* Use latest adv data PDU buffer */
	if (_radio.advertiser.adv_data.first !=
    d2dc:	7811      	ldrb	r1, [r2, #0]
    d2de:	781b      	ldrb	r3, [r3, #0]
static void adv_setup(void)
{
	struct pdu_adv *pdu;
	u8_t bitmap;
	u8_t chan;
	u8_t upd = 0;
    d2e0:	2200      	movs	r2, #0

	/* Use latest adv data PDU buffer */
	if (_radio.advertiser.adv_data.first !=
    d2e2:	4299      	cmp	r1, r3
    d2e4:	d008      	beq.n	d2f8 <adv_setup+0x28>
	    _radio.advertiser.adv_data.last) {
		u8_t first;

		first = _radio.advertiser.adv_data.first + 1;
    d2e6:	3301      	adds	r3, #1
    d2e8:	b2db      	uxtb	r3, r3
		if (first == DOUBLE_BUFFER_SIZE) {
    d2ea:	2b02      	cmp	r3, #2
    d2ec:	d100      	bne.n	d2f0 <adv_setup+0x20>
			first = 0;
    d2ee:	0013      	movs	r3, r2
		}
		_radio.advertiser.adv_data.first = first;
    d2f0:	0022      	movs	r2, r4
    d2f2:	3275      	adds	r2, #117	; 0x75
    d2f4:	7013      	strb	r3, [r2, #0]
		upd = 1;
    d2f6:	2201      	movs	r2, #1
	}

	/* Use latest scan data PDU buffer */
	if (_radio.advertiser.scan_data.first != _radio.
    d2f8:	0023      	movs	r3, r4
	    advertiser.scan_data.last) {
    d2fa:	0021      	movs	r1, r4
		_radio.advertiser.adv_data.first = first;
		upd = 1;
	}

	/* Use latest scan data PDU buffer */
	if (_radio.advertiser.scan_data.first != _radio.
    d2fc:	33c5      	adds	r3, #197	; 0xc5
	    advertiser.scan_data.last) {
    d2fe:	31c6      	adds	r1, #198	; 0xc6
		_radio.advertiser.adv_data.first = first;
		upd = 1;
	}

	/* Use latest scan data PDU buffer */
	if (_radio.advertiser.scan_data.first != _radio.
    d300:	781b      	ldrb	r3, [r3, #0]
    d302:	7809      	ldrb	r1, [r1, #0]
    d304:	4299      	cmp	r1, r3
    d306:	d008      	beq.n	d31a <adv_setup+0x4a>
	    advertiser.scan_data.last) {
		u8_t first;

		first = _radio.advertiser.scan_data.first + 1;
    d308:	3301      	adds	r3, #1
    d30a:	b2db      	uxtb	r3, r3
		if (first == DOUBLE_BUFFER_SIZE) {
    d30c:	2b02      	cmp	r3, #2
    d30e:	d100      	bne.n	d312 <adv_setup+0x42>
			first = 0;
    d310:	2300      	movs	r3, #0
		}
		_radio.advertiser.scan_data.first = first;
    d312:	0022      	movs	r2, r4
    d314:	32c5      	adds	r2, #197	; 0xc5
    d316:	7013      	strb	r3, [r2, #0]
		upd = 1;
    d318:	2201      	movs	r2, #1
	}

	pdu = (struct pdu_adv *)
		_radio.advertiser.adv_data.data[
			_radio.advertiser.adv_data.first];
    d31a:	0023      	movs	r3, r4
    d31c:	3375      	adds	r3, #117	; 0x75
		}
		_radio.advertiser.scan_data.first = first;
		upd = 1;
	}

	pdu = (struct pdu_adv *)
    d31e:	781d      	ldrb	r5, [r3, #0]
    d320:	2327      	movs	r3, #39	; 0x27
    d322:	435d      	muls	r5, r3
    d324:	3520      	adds	r5, #32
    d326:	1965      	adds	r5, r4, r5
    d328:	1dee      	adds	r6, r5, #7
		_radio.advertiser.adv_data.data[
			_radio.advertiser.adv_data.first];
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	if (upd) {
    d32a:	2a00      	cmp	r2, #0
    d32c:	d00a      	beq.n	d344 <adv_setup+0x74>
		struct pdu_adv *scan_pdu = (struct pdu_adv *)
		_radio.advertiser.scan_data.data[
			_radio.advertiser.scan_data.first];
    d32e:	0022      	movs	r2, r4

		/* Copy the address from the adv packet we will send into the
		 * scan response.
		 */
		memcpy(&scan_pdu->payload.scan_rsp.addr[0],
    d330:	0029      	movs	r1, r5
			_radio.advertiser.adv_data.first];
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	if (upd) {
		struct pdu_adv *scan_pdu = (struct pdu_adv *)
		_radio.advertiser.scan_data.data[
			_radio.advertiser.scan_data.first];
    d332:	32c5      	adds	r2, #197	; 0xc5
	pdu = (struct pdu_adv *)
		_radio.advertiser.adv_data.data[
			_radio.advertiser.adv_data.first];
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	if (upd) {
		struct pdu_adv *scan_pdu = (struct pdu_adv *)
    d334:	7810      	ldrb	r0, [r2, #0]
			_radio.advertiser.scan_data.first];

		/* Copy the address from the adv packet we will send into the
		 * scan response.
		 */
		memcpy(&scan_pdu->payload.scan_rsp.addr[0],
    d336:	3109      	adds	r1, #9
	pdu = (struct pdu_adv *)
		_radio.advertiser.adv_data.data[
			_radio.advertiser.adv_data.first];
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	if (upd) {
		struct pdu_adv *scan_pdu = (struct pdu_adv *)
    d338:	4358      	muls	r0, r3
    d33a:	1820      	adds	r0, r4, r0
			_radio.advertiser.scan_data.first];

		/* Copy the address from the adv packet we will send into the
		 * scan response.
		 */
		memcpy(&scan_pdu->payload.scan_rsp.addr[0],
    d33c:	3079      	adds	r0, #121	; 0x79
    d33e:	2206      	movs	r2, #6
    d340:	f7f3 fcfb 	bl	d3a <memcpy>
		       &pdu->payload.adv_ind.addr[0], BDADDR_SIZE);
	}
#else
	ARG_UNUSED(upd);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */
	radio_pkt_tx_set(pdu);
    d344:	0030      	movs	r0, r6
    d346:	f7fd fc77 	bl	ac38 <radio_pkt_tx_set>
	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
    d34a:	230f      	movs	r3, #15
    d34c:	79ea      	ldrb	r2, [r5, #7]
    d34e:	4013      	ands	r3, r2
    d350:	2b02      	cmp	r3, #2
    d352:	d00a      	beq.n	d36a <adv_setup+0x9a>
    d354:	2b07      	cmp	r3, #7
    d356:	d008      	beq.n	d36a <adv_setup+0x9a>
	    (!IS_ENABLED(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT) ||
	     (pdu->type != PDU_ADV_TYPE_EXT_IND))) {
		_radio.state = STATE_TX;
    d358:	2302      	movs	r3, #2
		radio_tmr_tifs_set(RADIO_TIFS);
    d35a:	2096      	movs	r0, #150	; 0x96
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */
	radio_pkt_tx_set(pdu);
	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
	    (!IS_ENABLED(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT) ||
	     (pdu->type != PDU_ADV_TYPE_EXT_IND))) {
		_radio.state = STATE_TX;
    d35c:	7423      	strb	r3, [r4, #16]
		radio_tmr_tifs_set(RADIO_TIFS);
    d35e:	f7fd fd7d 	bl	ae5c <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    d362:	2000      	movs	r0, #0
    d364:	f7fd fcd6 	bl	ad14 <radio_switch_complete_and_rx>
    d368:	e003      	b.n	d372 <adv_setup+0xa2>
	} else {
		_radio.state = STATE_CLOSE;
    d36a:	2303      	movs	r3, #3
    d36c:	7423      	strb	r3, [r4, #16]
		radio_switch_complete_and_disable();
    d36e:	f7fd fce1 	bl	ad34 <radio_switch_complete_and_disable>
	}

	bitmap = _radio.advertiser.chan_map_current;
    d372:	1d63      	adds	r3, r4, #5
    d374:	7fdb      	ldrb	r3, [r3, #31]
	chan = 0;
    d376:	2000      	movs	r0, #0
	} else {
		_radio.state = STATE_CLOSE;
		radio_switch_complete_and_disable();
	}

	bitmap = _radio.advertiser.chan_map_current;
    d378:	071b      	lsls	r3, r3, #28
    d37a:	0f5b      	lsrs	r3, r3, #29
    d37c:	b2da      	uxtb	r2, r3
    d37e:	0011      	movs	r1, r2
	chan = 0;
	while ((bitmap & 0x01) == 0) {
    d380:	2501      	movs	r5, #1
    d382:	4229      	tst	r1, r5
    d384:	d103      	bne.n	d38e <adv_setup+0xbe>
		chan++;
    d386:	3001      	adds	r0, #1
    d388:	b2c0      	uxtb	r0, r0
		bitmap >>= 1;
    d38a:	0849      	lsrs	r1, r1, #1
    d38c:	e7f9      	b.n	d382 <adv_setup+0xb2>
	}
	_radio.advertiser.chan_map_current &=
    d38e:	210e      	movs	r1, #14
    d390:	3207      	adds	r2, #7
    d392:	3405      	adds	r4, #5
    d394:	4013      	ands	r3, r2
    d396:	005a      	lsls	r2, r3, #1
    d398:	7fe3      	ldrb	r3, [r4, #31]
		(_radio.advertiser.chan_map_current - 1);

	chan_set(37 + chan);
    d39a:	3025      	adds	r0, #37	; 0x25
	chan = 0;
	while ((bitmap & 0x01) == 0) {
		chan++;
		bitmap >>= 1;
	}
	_radio.advertiser.chan_map_current &=
    d39c:	438b      	bics	r3, r1
    d39e:	4313      	orrs	r3, r2
    d3a0:	77e3      	strb	r3, [r4, #31]
		(_radio.advertiser.chan_map_current - 1);

	chan_set(37 + chan);
    d3a2:	f7ff ff61 	bl	d268 <chan_set>
}
    d3a6:	bd70      	pop	{r4, r5, r6, pc}
    d3a8:	200015c0 	.word	0x200015c0

0000d3ac <terminate_ind_rx_enqueue>:
{
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	void *link;

	/* Prepare the rx packet structure */
	radio_pdu_node_rx =
    d3ac:	0003      	movs	r3, r0
		_radio.conn_upd = NULL;
	}
}

static void terminate_ind_rx_enqueue(struct connection *conn, u8_t reason)
{
    d3ae:	b507      	push	{r0, r1, r2, lr}
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	void *link;

	/* Prepare the rx packet structure */
	radio_pdu_node_rx =
    d3b0:	33a8      	adds	r3, #168	; 0xa8
		_radio.conn_upd = NULL;
	}
}

static void terminate_ind_rx_enqueue(struct connection *conn, u8_t reason)
{
    d3b2:	000a      	movs	r2, r1
	void *link;

	/* Prepare the rx packet structure */
	radio_pdu_node_rx =
		(struct radio_pdu_node_rx *)&conn->llcp_terminate.radio_pdu_node_rx;
	LL_ASSERT(radio_pdu_node_rx->hdr.onion.link);
    d3b4:	6819      	ldr	r1, [r3, #0]
    d3b6:	2900      	cmp	r1, #0
    d3b8:	d108      	bne.n	d3cc <terminate_ind_rx_enqueue+0x20>
    d3ba:	4b15      	ldr	r3, [pc, #84]	; (d410 <terminate_ind_rx_enqueue+0x64>)
    d3bc:	4a15      	ldr	r2, [pc, #84]	; (d414 <terminate_ind_rx_enqueue+0x68>)
    d3be:	9301      	str	r3, [sp, #4]
    d3c0:	4b15      	ldr	r3, [pc, #84]	; (d418 <terminate_ind_rx_enqueue+0x6c>)
    d3c2:	4916      	ldr	r1, [pc, #88]	; (d41c <terminate_ind_rx_enqueue+0x70>)
    d3c4:	9300      	str	r3, [sp, #0]
    d3c6:	4816      	ldr	r0, [pc, #88]	; (d420 <terminate_ind_rx_enqueue+0x74>)
    d3c8:	4b16      	ldr	r3, [pc, #88]	; (d424 <terminate_ind_rx_enqueue+0x78>)
    d3ca:	e018      	b.n	d3fe <terminate_ind_rx_enqueue+0x52>

	radio_pdu_node_rx->hdr.handle = conn->handle;
    d3cc:	8c00      	ldrh	r0, [r0, #32]
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
	*((u8_t *)radio_pdu_node_rx->pdu_data) = reason;
    d3ce:	721a      	strb	r2, [r3, #8]
	/* Prepare the rx packet structure */
	radio_pdu_node_rx =
		(struct radio_pdu_node_rx *)&conn->llcp_terminate.radio_pdu_node_rx;
	LL_ASSERT(radio_pdu_node_rx->hdr.onion.link);

	radio_pdu_node_rx->hdr.handle = conn->handle;
    d3d0:	80d8      	strh	r0, [r3, #6]
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    d3d2:	2007      	movs	r0, #7

	/* Serialize release queue with rx queue by storing reference to
	 * last element in release queue
	 */
	radio_pdu_node_rx->hdr.onion.packet_release_last =
	    _radio.packet_release_last;
    d3d4:	4a14      	ldr	r2, [pc, #80]	; (d428 <terminate_ind_rx_enqueue+0x7c>)
	radio_pdu_node_rx =
		(struct radio_pdu_node_rx *)&conn->llcp_terminate.radio_pdu_node_rx;
	LL_ASSERT(radio_pdu_node_rx->hdr.onion.link);

	radio_pdu_node_rx->hdr.handle = conn->handle;
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    d3d6:	7118      	strb	r0, [r3, #4]

	/* Serialize release queue with rx queue by storing reference to
	 * last element in release queue
	 */
	radio_pdu_node_rx->hdr.onion.packet_release_last =
	    _radio.packet_release_last;
    d3d8:	306e      	adds	r0, #110	; 0x6e
    d3da:	30ff      	adds	r0, #255	; 0xff
    d3dc:	5c10      	ldrb	r0, [r2, r0]

	/* Enqueue into event-cum-data queue */
	link = memq_enqueue(radio_pdu_node_rx, link,
    d3de:	324d      	adds	r2, #77	; 0x4d
	link = radio_pdu_node_rx->hdr.onion.link;

	/* Serialize release queue with rx queue by storing reference to
	 * last element in release queue
	 */
	radio_pdu_node_rx->hdr.onion.packet_release_last =
    d3e0:	7018      	strb	r0, [r3, #0]
	    _radio.packet_release_last;

	/* Enqueue into event-cum-data queue */
	link = memq_enqueue(radio_pdu_node_rx, link,
    d3e2:	32ff      	adds	r2, #255	; 0xff
    d3e4:	0018      	movs	r0, r3
    d3e6:	f7fd fab4 	bl	a952 <memq_enqueue>
			    (void *)&_radio.link_rx_tail);
	LL_ASSERT(link);
    d3ea:	2800      	cmp	r0, #0
    d3ec:	d10c      	bne.n	d408 <terminate_ind_rx_enqueue+0x5c>
    d3ee:	4b08      	ldr	r3, [pc, #32]	; (d410 <terminate_ind_rx_enqueue+0x64>)
    d3f0:	4a08      	ldr	r2, [pc, #32]	; (d414 <terminate_ind_rx_enqueue+0x68>)
    d3f2:	9301      	str	r3, [sp, #4]
    d3f4:	4b08      	ldr	r3, [pc, #32]	; (d418 <terminate_ind_rx_enqueue+0x6c>)
    d3f6:	4909      	ldr	r1, [pc, #36]	; (d41c <terminate_ind_rx_enqueue+0x70>)
    d3f8:	9300      	str	r3, [sp, #0]
    d3fa:	480c      	ldr	r0, [pc, #48]	; (d42c <terminate_ind_rx_enqueue+0x80>)
    d3fc:	4b09      	ldr	r3, [pc, #36]	; (d424 <terminate_ind_rx_enqueue+0x78>)
    d3fe:	f7f4 fabf 	bl	1980 <printk>
    d402:	b662      	cpsie	i
    d404:	2004      	movs	r0, #4
    d406:	df02      	svc	2
	/* Inline call of callback. If JOB configured as lower priority then
	 * callback will tailchain at end of every radio ISR. If JOB configured
	 * as same then call inline so as to have callback for every radio ISR.
	 */
#if (RADIO_TICKER_USER_ID_WORKER_PRIO == RADIO_TICKER_USER_ID_JOB_PRIO)
	radio_event_callback();
    d408:	f004 ffb0 	bl	1236c <radio_event_callback>
			    (void *)&_radio.link_rx_tail);
	LL_ASSERT(link);

	/* callback to trigger application action */
	packet_rx_callback();
}
    d40c:	bd07      	pop	{r0, r1, r2, pc}
    d40e:	46c0      	nop			; (mov r8, r8)
    d410:	000154c4 	.word	0x000154c4
    d414:	00015484 	.word	0x00015484
    d418:	000154c9 	.word	0x000154c9
    d41c:	0001548b 	.word	0x0001548b
    d420:	00016ee5 	.word	0x00016ee5
    d424:	000184a7 	.word	0x000184a7
    d428:	200015c0 	.word	0x200015c0
    d42c:	00016aec 	.word	0x00016aec

0000d430 <isr_rx_scan_report>:

	return 1;
}

static u32_t isr_rx_scan_report(u8_t rssi_ready)
{
    d430:	b573      	push	{r0, r1, r4, r5, r6, lr}
    d432:	0004      	movs	r4, r0
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	struct pdu_adv *pdu_adv_rx;

	radio_pdu_node_rx = packet_rx_reserve_get(3);
    d434:	2003      	movs	r0, #3
    d436:	f7fe febd 	bl	c1b4 <packet_rx_reserve_get>
	if (radio_pdu_node_rx == 0) {
    d43a:	2800      	cmp	r0, #0
    d43c:	d02e      	beq.n	d49c <isr_rx_scan_report+0x6c>
		return 1;
	}

	/* Prepare the report (adv or scan resp) */
	radio_pdu_node_rx->hdr.handle = 0xffff;
    d43e:	2301      	movs	r3, #1
    d440:	425b      	negs	r3, r3
    d442:	80c3      	strh	r3, [r0, #6]
	if (0) {
#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
	} else if (_radio.scanner.phy) {
    d444:	4b16      	ldr	r3, [pc, #88]	; (d4a0 <isr_rx_scan_report+0x70>)
    d446:	33dd      	adds	r3, #221	; 0xdd
    d448:	781b      	ldrb	r3, [r3, #0]
    d44a:	075a      	lsls	r2, r3, #29
    d44c:	d015      	beq.n	d47a <isr_rx_scan_report+0x4a>
		switch (_radio.scanner.phy) {
    d44e:	075b      	lsls	r3, r3, #29
    d450:	0f5b      	lsrs	r3, r3, #29
    d452:	b2da      	uxtb	r2, r3
    d454:	2a01      	cmp	r2, #1
    d456:	d00e      	beq.n	d476 <isr_rx_scan_report+0x46>
    d458:	2a04      	cmp	r2, #4
    d45a:	d00f      	beq.n	d47c <isr_rx_scan_report+0x4c>
			radio_pdu_node_rx->hdr.type =
				NODE_RX_TYPE_EXT_CODED_REPORT;
			break;

		default:
			LL_ASSERT(0);
    d45c:	4b11      	ldr	r3, [pc, #68]	; (d4a4 <isr_rx_scan_report+0x74>)
    d45e:	4a12      	ldr	r2, [pc, #72]	; (d4a8 <isr_rx_scan_report+0x78>)
    d460:	9301      	str	r3, [sp, #4]
    d462:	4b12      	ldr	r3, [pc, #72]	; (d4ac <isr_rx_scan_report+0x7c>)
    d464:	4912      	ldr	r1, [pc, #72]	; (d4b0 <isr_rx_scan_report+0x80>)
    d466:	9300      	str	r3, [sp, #0]
    d468:	4812      	ldr	r0, [pc, #72]	; (d4b4 <isr_rx_scan_report+0x84>)
    d46a:	4b13      	ldr	r3, [pc, #76]	; (d4b8 <isr_rx_scan_report+0x88>)
    d46c:	f7f4 fa88 	bl	1980 <printk>
    d470:	b662      	cpsie	i
    d472:	2004      	movs	r0, #4
    d474:	df02      	svc	2
	if (0) {
#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
	} else if (_radio.scanner.phy) {
		switch (_radio.scanner.phy) {
		case BIT(0):
			radio_pdu_node_rx->hdr.type =
    d476:	2303      	movs	r3, #3
    d478:	e000      	b.n	d47c <isr_rx_scan_report+0x4c>
			LL_ASSERT(0);
			break;
		}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */
	} else {
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    d47a:	2302      	movs	r3, #2
	}

	/* save the RSSI value */
	pdu_adv_rx = (struct pdu_adv *)radio_pdu_node_rx->pdu_data;
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
    d47c:	7a45      	ldrb	r5, [r0, #9]
			LL_ASSERT(0);
			break;
		}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */
	} else {
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    d47e:	7103      	strb	r3, [r0, #4]
	}

	/* save the RSSI value */
	pdu_adv_rx = (struct pdu_adv *)radio_pdu_node_rx->pdu_data;
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
    d480:	1940      	adds	r0, r0, r5
    d482:	300a      	adds	r0, #10
    d484:	0005      	movs	r5, r0
    d486:	267f      	movs	r6, #127	; 0x7f
			     pdu_adv_rx->len] =
    d488:	2c00      	cmp	r4, #0
    d48a:	d002      	beq.n	d492 <isr_rx_scan_report+0x62>
		(rssi_ready) ? (radio_rssi_get() & 0x7f) : 0x7f;
    d48c:	f7fd fc66 	bl	ad5c <radio_rssi_get>
	}

	/* save the RSSI value */
	pdu_adv_rx = (struct pdu_adv *)radio_pdu_node_rx->pdu_data;
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
			     pdu_adv_rx->len] =
    d490:	4006      	ands	r6, r0
    d492:	702e      	strb	r6, [r5, #0]
		(rssi_ready) ? (radio_rssi_get() & 0x7f) : 0x7f;

	packet_rx_enqueue();
    d494:	f7ff fa5c 	bl	c950 <packet_rx_enqueue>

	return 0;
    d498:	2000      	movs	r0, #0
    d49a:	e000      	b.n	d49e <isr_rx_scan_report+0x6e>
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	struct pdu_adv *pdu_adv_rx;

	radio_pdu_node_rx = packet_rx_reserve_get(3);
	if (radio_pdu_node_rx == 0) {
		return 1;
    d49c:	2001      	movs	r0, #1
		(rssi_ready) ? (radio_rssi_get() & 0x7f) : 0x7f;

	packet_rx_enqueue();

	return 0;
}
    d49e:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
    d4a0:	200015c0 	.word	0x200015c0
    d4a4:	000154c4 	.word	0x000154c4
    d4a8:	00015484 	.word	0x00015484
    d4ac:	000154c9 	.word	0x000154c9
    d4b0:	0001548b 	.word	0x0001548b
    d4b4:	00015b21 	.word	0x00015b21
    d4b8:	000183a5 	.word	0x000183a5

0000d4bc <isr_rx_scan>:

static inline u32_t isr_rx_scan(u8_t irkmatch_id, u8_t rssi_ready)
{
    d4bc:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct pdu_adv *pdu_adv_rx;

	pdu_adv_rx = (struct pdu_adv *)
		_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
    d4be:	4dcd      	ldr	r5, [pc, #820]	; (d7f4 <isr_rx_scan+0x338>)
    d4c0:	233e      	movs	r3, #62	; 0x3e
    d4c2:	002a      	movs	r2, r5

	return 0;
}

static inline u32_t isr_rx_scan(u8_t irkmatch_id, u8_t rssi_ready)
{
    d4c4:	b095      	sub	sp, #84	; 0x54
    d4c6:	9012      	str	r0, [sp, #72]	; 0x48
	struct pdu_adv *pdu_adv_rx;

	pdu_adv_rx = (struct pdu_adv *)
		_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
    d4c8:	33ff      	adds	r3, #255	; 0xff
    d4ca:	32fc      	adds	r2, #252	; 0xfc
    d4cc:	5ceb      	ldrb	r3, [r5, r3]

	return 0;
}

static inline u32_t isr_rx_scan(u8_t irkmatch_id, u8_t rssi_ready)
{
    d4ce:	000c      	movs	r4, r1
	struct pdu_adv *pdu_adv_rx;

	pdu_adv_rx = (struct pdu_adv *)
		_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
    d4d0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
    d4d2:	009b      	lsls	r3, r3, #2
    d4d4:	585e      	ldr	r6, [r3, r1]

	/* Initiator */
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    d4d6:	6813      	ldr	r3, [r2, #0]
    d4d8:	2b00      	cmp	r3, #0
    d4da:	d100      	bne.n	d4de <isr_rx_scan+0x22>
    d4dc:	e23a      	b.n	d954 <isr_rx_scan+0x498>
    d4de:	23bf      	movs	r3, #191	; 0xbf
    d4e0:	005b      	lsls	r3, r3, #1
    d4e2:	5ceb      	ldrb	r3, [r5, r3]
    d4e4:	2b00      	cmp	r3, #0
    d4e6:	d008      	beq.n	d4fa <isr_rx_scan+0x3e>
				      (_radio.fc_req == _radio.fc_ack)) &&
    d4e8:	23be      	movs	r3, #190	; 0xbe
    d4ea:	227e      	movs	r2, #126	; 0x7e
    d4ec:	005b      	lsls	r3, r3, #1
    d4ee:	32ff      	adds	r2, #255	; 0xff
    d4f0:	5ceb      	ldrb	r3, [r5, r3]

	pdu_adv_rx = (struct pdu_adv *)
		_radio.packet_rx[_radio.packet_rx_last]->pdu_data;

	/* Initiator */
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    d4f2:	5caa      	ldrb	r2, [r5, r2]
    d4f4:	429a      	cmp	r2, r3
    d4f6:	d000      	beq.n	d4fa <isr_rx_scan+0x3e>
    d4f8:	e22c      	b.n	d954 <isr_rx_scan+0x498>
				      (_radio.fc_req == _radio.fc_ack)) &&
    d4fa:	7a33      	ldrb	r3, [r6, #8]
    d4fc:	071a      	lsls	r2, r3, #28
    d4fe:	d006      	beq.n	d50e <isr_rx_scan+0x52>
	    (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) &&
	      (((_radio.scanner.filter_policy & 0x01) != 0) ||
	       ((_radio.scanner.adv_addr_type == pdu_adv_rx->tx_addr) &&
		(memcmp(&_radio.scanner.adv_addr[0],
			&pdu_adv_rx->payload.adv_ind.addr[0],
			BDADDR_SIZE) == 0)))) ||
    d500:	220f      	movs	r2, #15
    d502:	7a33      	ldrb	r3, [r6, #8]
    d504:	401a      	ands	r2, r3
    d506:	2a01      	cmp	r2, #1
    d508:	d000      	beq.n	d50c <isr_rx_scan+0x50>
    d50a:	e223      	b.n	d954 <isr_rx_scan+0x498>
    d50c:	e029      	b.n	d562 <isr_rx_scan+0xa6>

	/* Initiator */
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
				      (_radio.fc_req == _radio.fc_ack)) &&
	    (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) &&
	      (((_radio.scanner.filter_policy & 0x01) != 0) ||
    d50e:	002a      	movs	r2, r5
    d510:	32dd      	adds	r2, #221	; 0xdd
    d512:	7812      	ldrb	r2, [r2, #0]
		_radio.packet_rx[_radio.packet_rx_last]->pdu_data;

	/* Initiator */
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
				      (_radio.fc_req == _radio.fc_ack)) &&
	    (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) &&
    d514:	06d1      	lsls	r1, r2, #27
    d516:	d514      	bpl.n	d542 <isr_rx_scan+0x86>
		*/
	       (((_radio.scanner.filter_policy & 0x02) != 0) &&
		(pdu_adv_rx->rx_addr != 0) &&
		((pdu_adv_rx->payload.direct_ind.tgt_addr[5] & 0xc0) ==
		 0x40))))) &&
	    ((radio_tmr_end_get() + 502) <
    d518:	f7fd fd82 	bl	b020 <radio_tmr_end_get>
	     TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot))) {
    d51c:	002b      	movs	r3, r5
		* is resolvable private address
		*/
	       (((_radio.scanner.filter_policy & 0x02) != 0) &&
		(pdu_adv_rx->rx_addr != 0) &&
		((pdu_adv_rx->payload.direct_ind.tgt_addr[5] & 0xc0) ==
		 0x40))))) &&
    d51e:	30f7      	adds	r0, #247	; 0xf7
    d520:	30ff      	adds	r0, #255	; 0xff
	    ((radio_tmr_end_get() + 502) <
	     TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot))) {
    d522:	33d8      	adds	r3, #216	; 0xd8
		* is resolvable private address
		*/
	       (((_radio.scanner.filter_policy & 0x02) != 0) &&
		(pdu_adv_rx->rx_addr != 0) &&
		((pdu_adv_rx->payload.direct_ind.tgt_addr[5] & 0xc0) ==
		 0x40))))) &&
    d524:	0007      	movs	r7, r0
    d526:	4ab4      	ldr	r2, [pc, #720]	; (d7f8 <isr_rx_scan+0x33c>)
    d528:	6818      	ldr	r0, [r3, #0]
    d52a:	2100      	movs	r1, #0
    d52c:	2307      	movs	r3, #7
    d52e:	f7f2 ffcd 	bl	4cc <__aeabi_lmul>
    d532:	4ab2      	ldr	r2, [pc, #712]	; (d7fc <isr_rx_scan+0x340>)
    d534:	2300      	movs	r3, #0
    d536:	f7f2 ffa9 	bl	48c <__aeabi_uldivmod>
    d53a:	4287      	cmp	r7, r0
    d53c:	d300      	bcc.n	d540 <isr_rx_scan+0x84>
    d53e:	e209      	b.n	d954 <isr_rx_scan+0x498>
    d540:	e031      	b.n	d5a6 <isr_rx_scan+0xea>
	/* Initiator */
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
				      (_radio.fc_req == _radio.fc_ack)) &&
	    (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) &&
	      (((_radio.scanner.filter_policy & 0x01) != 0) ||
	       ((_radio.scanner.adv_addr_type == pdu_adv_rx->tx_addr) &&
    d542:	0652      	lsls	r2, r2, #25
    d544:	065b      	lsls	r3, r3, #25

	/* Initiator */
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
				      (_radio.fc_req == _radio.fc_ack)) &&
	    (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) &&
	      (((_radio.scanner.filter_policy & 0x01) != 0) ||
    d546:	0fd2      	lsrs	r2, r2, #31
    d548:	0fdb      	lsrs	r3, r3, #31
    d54a:	429a      	cmp	r2, r3
    d54c:	d1d8      	bne.n	d500 <isr_rx_scan+0x44>
	       ((_radio.scanner.adv_addr_type == pdu_adv_rx->tx_addr) &&
		(memcmp(&_radio.scanner.adv_addr[0],
    d54e:	0028      	movs	r0, r5
    d550:	0031      	movs	r1, r6
    d552:	30de      	adds	r0, #222	; 0xde
    d554:	2206      	movs	r2, #6
    d556:	310a      	adds	r1, #10
    d558:	f7f3 fbda 	bl	d10 <memcmp>
	/* Initiator */
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
				      (_radio.fc_req == _radio.fc_ack)) &&
	    (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) &&
	      (((_radio.scanner.filter_policy & 0x01) != 0) ||
	       ((_radio.scanner.adv_addr_type == pdu_adv_rx->tx_addr) &&
    d55c:	2800      	cmp	r0, #0
    d55e:	d0db      	beq.n	d518 <isr_rx_scan+0x5c>
    d560:	e7ce      	b.n	d500 <isr_rx_scan+0x44>
		(memcmp(&_radio.scanner.adv_addr[0],
			&pdu_adv_rx->payload.adv_ind.addr[0],
			BDADDR_SIZE) == 0)))) ||
	     ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
	      (/* allow directed adv packets addressed to this device */
	       ((_radio.scanner.init_addr_type == pdu_adv_rx->rx_addr) &&
    d562:	002a      	movs	r2, r5
    d564:	32dd      	adds	r2, #221	; 0xdd
    d566:	7812      	ldrb	r2, [r2, #0]
	      (((_radio.scanner.filter_policy & 0x01) != 0) ||
	       ((_radio.scanner.adv_addr_type == pdu_adv_rx->tx_addr) &&
		(memcmp(&_radio.scanner.adv_addr[0],
			&pdu_adv_rx->payload.adv_ind.addr[0],
			BDADDR_SIZE) == 0)))) ||
	     ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
    d568:	09db      	lsrs	r3, r3, #7
    d56a:	09d2      	lsrs	r2, r2, #7
    d56c:	429a      	cmp	r2, r3
    d56e:	d005      	beq.n	d57c <isr_rx_scan+0xc0>
			&pdu_adv_rx->payload.direct_ind.tgt_addr[0],
			BDADDR_SIZE) == 0)) ||
	       /* allow directed adv packets where initiator address
		* is resolvable private address
		*/
	       (((_radio.scanner.filter_policy & 0x02) != 0) &&
    d570:	002b      	movs	r3, r5
    d572:	33dd      	adds	r3, #221	; 0xdd
    d574:	781b      	ldrb	r3, [r3, #0]
	     ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
	      (/* allow directed adv packets addressed to this device */
	       ((_radio.scanner.init_addr_type == pdu_adv_rx->rx_addr) &&
		(memcmp(&_radio.scanner.init_addr[0],
			&pdu_adv_rx->payload.direct_ind.tgt_addr[0],
			BDADDR_SIZE) == 0)) ||
    d576:	069b      	lsls	r3, r3, #26
    d578:	d40a      	bmi.n	d590 <isr_rx_scan+0xd4>
    d57a:	e1eb      	b.n	d954 <isr_rx_scan+0x498>
			&pdu_adv_rx->payload.adv_ind.addr[0],
			BDADDR_SIZE) == 0)))) ||
	     ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
	      (/* allow directed adv packets addressed to this device */
	       ((_radio.scanner.init_addr_type == pdu_adv_rx->rx_addr) &&
		(memcmp(&_radio.scanner.init_addr[0],
    d57c:	0028      	movs	r0, r5
    d57e:	0031      	movs	r1, r6
    d580:	30e4      	adds	r0, #228	; 0xe4
    d582:	2206      	movs	r2, #6
    d584:	3110      	adds	r1, #16
    d586:	f7f3 fbc3 	bl	d10 <memcmp>
		(memcmp(&_radio.scanner.adv_addr[0],
			&pdu_adv_rx->payload.adv_ind.addr[0],
			BDADDR_SIZE) == 0)))) ||
	     ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
	      (/* allow directed adv packets addressed to this device */
	       ((_radio.scanner.init_addr_type == pdu_adv_rx->rx_addr) &&
    d58a:	2800      	cmp	r0, #0
    d58c:	d0c4      	beq.n	d518 <isr_rx_scan+0x5c>
    d58e:	e7ef      	b.n	d570 <isr_rx_scan+0xb4>
			&pdu_adv_rx->payload.direct_ind.tgt_addr[0],
			BDADDR_SIZE) == 0)) ||
	       /* allow directed adv packets where initiator address
		* is resolvable private address
		*/
	       (((_radio.scanner.filter_policy & 0x02) != 0) &&
    d590:	7a33      	ldrb	r3, [r6, #8]
    d592:	09db      	lsrs	r3, r3, #7
    d594:	d100      	bne.n	d598 <isr_rx_scan+0xdc>
    d596:	e1dd      	b.n	d954 <isr_rx_scan+0x498>
		(pdu_adv_rx->rx_addr != 0) &&
    d598:	223f      	movs	r2, #63	; 0x3f
    d59a:	7d73      	ldrb	r3, [r6, #21]
    d59c:	4393      	bics	r3, r2
    d59e:	2b40      	cmp	r3, #64	; 0x40
    d5a0:	d000      	beq.n	d5a4 <isr_rx_scan+0xe8>
    d5a2:	e1d7      	b.n	d954 <isr_rx_scan+0x498>
    d5a4:	e7b8      	b.n	d518 <isr_rx_scan+0x5c>
		u32_t conn_offset_us;
		u32_t ticker_status;
		u32_t conn_space_us;

		if (IS_ENABLED(CONFIG_BLUETOOTH_CONTROLLER_CHAN_SEL_2)) {
			radio_pdu_node_rx = packet_rx_reserve_get(4);
    d5a6:	2004      	movs	r0, #4
    d5a8:	f7fe fe04 	bl	c1b4 <packet_rx_reserve_get>
    d5ac:	900a      	str	r0, [sp, #40]	; 0x28
		} else {
			radio_pdu_node_rx = packet_rx_reserve_get(3);
		}

		if (radio_pdu_node_rx == 0) {
    d5ae:	2800      	cmp	r0, #0
    d5b0:	d100      	bne.n	d5b4 <isr_rx_scan+0xf8>
    d5b2:	e26c      	b.n	da8e <isr_rx_scan+0x5d2>
			return 1;
		}

		_radio.state = STATE_STOP;
    d5b4:	2304      	movs	r3, #4

		/* acquire the master context from scanner */
		conn = _radio.scanner.conn;
		_radio.scanner.conn = NULL;
    d5b6:	2200      	movs	r2, #0

		if (radio_pdu_node_rx == 0) {
			return 1;
		}

		_radio.state = STATE_STOP;
    d5b8:	742b      	strb	r3, [r5, #16]

		/* acquire the master context from scanner */
		conn = _radio.scanner.conn;
    d5ba:	4b91      	ldr	r3, [pc, #580]	; (d800 <isr_rx_scan+0x344>)
    d5bc:	681f      	ldr	r7, [r3, #0]
		_radio.scanner.conn = NULL;
    d5be:	601a      	str	r2, [r3, #0]

		/* Tx the connect request packet */
		pdu_adv_tx = (struct pdu_adv *)radio_pkt_scratch_get();
    d5c0:	f7fd fba4 	bl	ad0c <radio_pkt_scratch_get>
		pdu_adv_tx->type = PDU_ADV_TYPE_CONNECT_IND;
    d5c4:	220f      	movs	r2, #15
    d5c6:	7803      	ldrb	r3, [r0, #0]
			pdu_adv_tx->chan_sel = 1;
		} else {
			pdu_adv_tx->chan_sel = 0;
		}

		pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    d5c8:	2140      	movs	r1, #64	; 0x40
		conn = _radio.scanner.conn;
		_radio.scanner.conn = NULL;

		/* Tx the connect request packet */
		pdu_adv_tx = (struct pdu_adv *)radio_pkt_scratch_get();
		pdu_adv_tx->type = PDU_ADV_TYPE_CONNECT_IND;
    d5ca:	4393      	bics	r3, r2

		if (IS_ENABLED(CONFIG_BLUETOOTH_CONTROLLER_CHAN_SEL_2)) {
			pdu_adv_tx->chan_sel = 1;
    d5cc:	3216      	adds	r2, #22
    d5ce:	4313      	orrs	r3, r2
    d5d0:	7003      	strb	r3, [r0, #0]
		} else {
			pdu_adv_tx->chan_sel = 0;
		}

		pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    d5d2:	002b      	movs	r3, r5
    d5d4:	33dd      	adds	r3, #221	; 0xdd
    d5d6:	781b      	ldrb	r3, [r3, #0]
		/* acquire the master context from scanner */
		conn = _radio.scanner.conn;
		_radio.scanner.conn = NULL;

		/* Tx the connect request packet */
		pdu_adv_tx = (struct pdu_adv *)radio_pkt_scratch_get();
    d5d8:	0004      	movs	r4, r0
			pdu_adv_tx->chan_sel = 1;
		} else {
			pdu_adv_tx->chan_sel = 0;
		}

		pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    d5da:	09db      	lsrs	r3, r3, #7
    d5dc:	019a      	lsls	r2, r3, #6
    d5de:	7803      	ldrb	r3, [r0, #0]
    d5e0:	438b      	bics	r3, r1
    d5e2:	4313      	orrs	r3, r2
    d5e4:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    d5e6:	7a33      	ldrb	r3, [r6, #8]
    d5e8:	7801      	ldrb	r1, [r0, #0]
    d5ea:	065b      	lsls	r3, r3, #25
    d5ec:	0fdb      	lsrs	r3, r3, #31
    d5ee:	01da      	lsls	r2, r3, #7
    d5f0:	237f      	movs	r3, #127	; 0x7f
    d5f2:	400b      	ands	r3, r1
    d5f4:	4313      	orrs	r3, r2
    d5f6:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->len = sizeof(struct pdu_adv_payload_connect_ind);
    d5f8:	2322      	movs	r3, #34	; 0x22
		memcpy(&pdu_adv_tx->payload.connect_ind.init_addr[0],
    d5fa:	0029      	movs	r1, r5
			pdu_adv_tx->chan_sel = 0;
		}

		pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
		pdu_adv_tx->len = sizeof(struct pdu_adv_payload_connect_ind);
    d5fc:	7043      	strb	r3, [r0, #1]
		memcpy(&pdu_adv_tx->payload.connect_ind.init_addr[0],
    d5fe:	1c83      	adds	r3, r0, #2
    d600:	31e4      	adds	r1, #228	; 0xe4
    d602:	2206      	movs	r2, #6
    d604:	0018      	movs	r0, r3
    d606:	9311      	str	r3, [sp, #68]	; 0x44
    d608:	f7f3 fb97 	bl	d3a <memcpy>
		       &_radio.scanner.init_addr[0], BDADDR_SIZE);
		memcpy(&pdu_adv_tx->payload.connect_ind.adv_addr[0],
    d60c:	0023      	movs	r3, r4
    d60e:	0031      	movs	r1, r6
    d610:	3308      	adds	r3, #8
    d612:	0018      	movs	r0, r3
    d614:	2206      	movs	r2, #6
    d616:	310a      	adds	r1, #10
    d618:	930f      	str	r3, [sp, #60]	; 0x3c
    d61a:	f7f3 fb8e 	bl	d3a <memcpy>
			 &pdu_adv_rx->payload.adv_ind.addr[0], BDADDR_SIZE);
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.
		       access_addr[0], &conn->access_addr[0], 4);
    d61e:	0039      	movs	r1, r7
		pdu_adv_tx->len = sizeof(struct pdu_adv_payload_connect_ind);
		memcpy(&pdu_adv_tx->payload.connect_ind.init_addr[0],
		       &_radio.scanner.init_addr[0], BDADDR_SIZE);
		memcpy(&pdu_adv_tx->payload.connect_ind.adv_addr[0],
			 &pdu_adv_rx->payload.adv_ind.addr[0], BDADDR_SIZE);
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.
    d620:	0020      	movs	r0, r4
		       access_addr[0], &conn->access_addr[0], 4);
    d622:	3110      	adds	r1, #16
		pdu_adv_tx->len = sizeof(struct pdu_adv_payload_connect_ind);
		memcpy(&pdu_adv_tx->payload.connect_ind.init_addr[0],
		       &_radio.scanner.init_addr[0], BDADDR_SIZE);
		memcpy(&pdu_adv_tx->payload.connect_ind.adv_addr[0],
			 &pdu_adv_rx->payload.adv_ind.addr[0], BDADDR_SIZE);
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.
    d624:	2204      	movs	r2, #4
    d626:	300e      	adds	r0, #14
    d628:	f7f3 fb87 	bl	d3a <memcpy>
		       access_addr[0], &conn->access_addr[0], 4);
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.crc_init[0],
		       &conn->crc_init[0], 3);
    d62c:	0039      	movs	r1, r7
		       &_radio.scanner.init_addr[0], BDADDR_SIZE);
		memcpy(&pdu_adv_tx->payload.connect_ind.adv_addr[0],
			 &pdu_adv_rx->payload.adv_ind.addr[0], BDADDR_SIZE);
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.
		       access_addr[0], &conn->access_addr[0], 4);
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.crc_init[0],
    d62e:	0020      	movs	r0, r4
		       &conn->crc_init[0], 3);
    d630:	3114      	adds	r1, #20
		       &_radio.scanner.init_addr[0], BDADDR_SIZE);
		memcpy(&pdu_adv_tx->payload.connect_ind.adv_addr[0],
			 &pdu_adv_rx->payload.adv_ind.addr[0], BDADDR_SIZE);
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.
		       access_addr[0], &conn->access_addr[0], 4);
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.crc_init[0],
    d632:	2203      	movs	r2, #3
    d634:	3012      	adds	r0, #18
    d636:	f7f3 fb80 	bl	d3a <memcpy>
		       &conn->crc_init[0], 3);
		pdu_adv_tx->payload.connect_ind.lldata. win_size = 1;
    d63a:	2301      	movs	r3, #1

		conn_interval_us =
			(u32_t)_radio.scanner.conn_interval * 1250;
    d63c:	35f0      	adds	r5, #240	; 0xf0
			 &pdu_adv_rx->payload.adv_ind.addr[0], BDADDR_SIZE);
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.
		       access_addr[0], &conn->access_addr[0], 4);
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.crc_init[0],
		       &conn->crc_init[0], 3);
		pdu_adv_tx->payload.connect_ind.lldata. win_size = 1;
    d63e:	7563      	strb	r3, [r4, #21]

		conn_interval_us =
    d640:	882b      	ldrh	r3, [r5, #0]
    d642:	4a70      	ldr	r2, [pc, #448]	; (d804 <isr_rx_scan+0x348>)
    d644:	435a      	muls	r2, r3
    d646:	9210      	str	r2, [sp, #64]	; 0x40
			(u32_t)_radio.scanner.conn_interval * 1250;

		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
    d648:	f7fd fcea 	bl	b020 <radio_tmr_end_get>
    d64c:	23db      	movs	r3, #219	; 0xdb
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
    d64e:	2100      	movs	r1, #0
		pdu_adv_tx->payload.connect_ind.lldata. win_size = 1;

		conn_interval_us =
			(u32_t)_radio.scanner.conn_interval * 1250;

		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
    d650:	00db      	lsls	r3, r3, #3
    d652:	18c5      	adds	r5, r0, r3
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
    d654:	0008      	movs	r0, r1
    d656:	f7fd faf9 	bl	ac4c <radio_tx_chain_delay_get>
		conn_offset_us -= radio_tx_ready_delay_get(0, 0);
    d65a:	2100      	movs	r1, #0

		conn_interval_us =
			(u32_t)_radio.scanner.conn_interval * 1250;

		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
    d65c:	1a2d      	subs	r5, r5, r0
		conn_offset_us -= radio_tx_ready_delay_get(0, 0);
    d65e:	0008      	movs	r0, r1
    d660:	f7fd faf2 	bl	ac48 <radio_tx_ready_delay_get>

		if (_radio.scanner.win_offset_us == 0) {
    d664:	4b66      	ldr	r3, [pc, #408]	; (d800 <isr_rx_scan+0x344>)
		conn_interval_us =
			(u32_t)_radio.scanner.conn_interval * 1250;

		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
		conn_offset_us -= radio_tx_ready_delay_get(0, 0);
    d666:	1a28      	subs	r0, r5, r0

		if (_radio.scanner.win_offset_us == 0) {
    d668:	685b      	ldr	r3, [r3, #4]
    d66a:	930d      	str	r3, [sp, #52]	; 0x34
    d66c:	2b00      	cmp	r3, #0
    d66e:	d10f      	bne.n	d690 <isr_rx_scan+0x1d4>
			conn_space_us = conn_offset_us;
			pdu_adv_tx->payload.connect_ind.lldata.win_offset = 0;
    d670:	2234      	movs	r2, #52	; 0x34
    d672:	466b      	mov	r3, sp
    d674:	189b      	adds	r3, r3, r2
    d676:	781b      	ldrb	r3, [r3, #0]
    d678:	75a3      	strb	r3, [r4, #22]
    d67a:	466b      	mov	r3, sp
    d67c:	189b      	adds	r3, r3, r2
    d67e:	781b      	ldrb	r3, [r3, #0]
		conn_interval_us =
			(u32_t)_radio.scanner.conn_interval * 1250;

		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
		conn_offset_us -= radio_tx_ready_delay_get(0, 0);
    d680:	900d      	str	r0, [sp, #52]	; 0x34

		if (_radio.scanner.win_offset_us == 0) {
			conn_space_us = conn_offset_us;
			pdu_adv_tx->payload.connect_ind.lldata.win_offset = 0;
    d682:	75e3      	strb	r3, [r4, #23]
    d684:	e011      	b.n	d6aa <isr_rx_scan+0x1ee>
		} else {
			conn_space_us = _radio.scanner.win_offset_us;
			while ((conn_space_us & ((u32_t)1 << 31)) ||
			       (conn_space_us < conn_offset_us)) {
				conn_space_us += conn_interval_us;
    d686:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d688:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d68a:	4694      	mov	ip, r2
    d68c:	4463      	add	r3, ip
    d68e:	930d      	str	r3, [sp, #52]	; 0x34
		if (_radio.scanner.win_offset_us == 0) {
			conn_space_us = conn_offset_us;
			pdu_adv_tx->payload.connect_ind.lldata.win_offset = 0;
		} else {
			conn_space_us = _radio.scanner.win_offset_us;
			while ((conn_space_us & ((u32_t)1 << 31)) ||
    d690:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d692:	2b00      	cmp	r3, #0
    d694:	dbf7      	blt.n	d686 <isr_rx_scan+0x1ca>
    d696:	4283      	cmp	r3, r0
    d698:	d3f5      	bcc.n	d686 <isr_rx_scan+0x1ca>
			       (conn_space_us < conn_offset_us)) {
				conn_space_us += conn_interval_us;
			}
			pdu_adv_tx->payload.connect_ind.lldata.win_offset =
    d69a:	1a18      	subs	r0, r3, r0
    d69c:	4959      	ldr	r1, [pc, #356]	; (d804 <isr_rx_scan+0x348>)
    d69e:	f7f2 fd7f 	bl	1a0 <__aeabi_uidiv>
    d6a2:	b280      	uxth	r0, r0
    d6a4:	75a0      	strb	r0, [r4, #22]
    d6a6:	0a00      	lsrs	r0, r0, #8
    d6a8:	75e0      	strb	r0, [r4, #23]
			_radio.scanner.conn_interval;
		pdu_adv_tx->payload.connect_ind.lldata.latency =
			_radio.scanner.conn_latency;
		pdu_adv_tx->payload.connect_ind.lldata.timeout =
			_radio.scanner.conn_timeout;
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.chan_map[0],
    d6aa:	0039      	movs	r1, r7
    d6ac:	0020      	movs	r0, r4
			}
			pdu_adv_tx->payload.connect_ind.lldata.win_offset =
				(conn_space_us - conn_offset_us) / 1250;
		}

		pdu_adv_tx->payload.connect_ind.lldata.interval =
    d6ae:	4b56      	ldr	r3, [pc, #344]	; (d808 <isr_rx_scan+0x34c>)
			_radio.scanner.conn_interval;
		pdu_adv_tx->payload.connect_ind.lldata.latency =
			_radio.scanner.conn_latency;
		pdu_adv_tx->payload.connect_ind.lldata.timeout =
			_radio.scanner.conn_timeout;
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.chan_map[0],
    d6b0:	2205      	movs	r2, #5
			}
			pdu_adv_tx->payload.connect_ind.lldata.win_offset =
				(conn_space_us - conn_offset_us) / 1250;
		}

		pdu_adv_tx->payload.connect_ind.lldata.interval =
    d6b2:	781b      	ldrb	r3, [r3, #0]
			_radio.scanner.conn_interval;
		pdu_adv_tx->payload.connect_ind.lldata.latency =
			_radio.scanner.conn_latency;
		pdu_adv_tx->payload.connect_ind.lldata.timeout =
			_radio.scanner.conn_timeout;
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.chan_map[0],
    d6b4:	3117      	adds	r1, #23
			}
			pdu_adv_tx->payload.connect_ind.lldata.win_offset =
				(conn_space_us - conn_offset_us) / 1250;
		}

		pdu_adv_tx->payload.connect_ind.lldata.interval =
    d6b6:	7623      	strb	r3, [r4, #24]
    d6b8:	4b53      	ldr	r3, [pc, #332]	; (d808 <isr_rx_scan+0x34c>)
			_radio.scanner.conn_interval;
		pdu_adv_tx->payload.connect_ind.lldata.latency =
			_radio.scanner.conn_latency;
		pdu_adv_tx->payload.connect_ind.lldata.timeout =
			_radio.scanner.conn_timeout;
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.chan_map[0],
    d6ba:	301e      	adds	r0, #30
			}
			pdu_adv_tx->payload.connect_ind.lldata.win_offset =
				(conn_space_us - conn_offset_us) / 1250;
		}

		pdu_adv_tx->payload.connect_ind.lldata.interval =
    d6bc:	785b      	ldrb	r3, [r3, #1]
			_radio.scanner.conn_interval;
    d6be:	4d4d      	ldr	r5, [pc, #308]	; (d7f4 <isr_rx_scan+0x338>)
			}
			pdu_adv_tx->payload.connect_ind.lldata.win_offset =
				(conn_space_us - conn_offset_us) / 1250;
		}

		pdu_adv_tx->payload.connect_ind.lldata.interval =
    d6c0:	7663      	strb	r3, [r4, #25]
			_radio.scanner.conn_interval;
		pdu_adv_tx->payload.connect_ind.lldata.latency =
    d6c2:	4b52      	ldr	r3, [pc, #328]	; (d80c <isr_rx_scan+0x350>)
    d6c4:	781b      	ldrb	r3, [r3, #0]
    d6c6:	76a3      	strb	r3, [r4, #26]
    d6c8:	4b50      	ldr	r3, [pc, #320]	; (d80c <isr_rx_scan+0x350>)
    d6ca:	785b      	ldrb	r3, [r3, #1]
    d6cc:	76e3      	strb	r3, [r4, #27]
			_radio.scanner.conn_latency;
		pdu_adv_tx->payload.connect_ind.lldata.timeout =
    d6ce:	4b50      	ldr	r3, [pc, #320]	; (d810 <isr_rx_scan+0x354>)
    d6d0:	781b      	ldrb	r3, [r3, #0]
    d6d2:	7723      	strb	r3, [r4, #28]
    d6d4:	4b4e      	ldr	r3, [pc, #312]	; (d810 <isr_rx_scan+0x354>)
    d6d6:	785b      	ldrb	r3, [r3, #1]
    d6d8:	7763      	strb	r3, [r4, #29]
			_radio.scanner.conn_timeout;
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.chan_map[0],
    d6da:	f7f3 fb2e 	bl	d3a <memcpy>
		       &conn->data_chan_map[0],
		       sizeof(pdu_adv_tx->payload.connect_ind.lldata.chan_map));
		pdu_adv_tx->payload.connect_ind.lldata.hop =
    d6de:	1d23      	adds	r3, r4, #4
    d6e0:	9313      	str	r3, [sp, #76]	; 0x4c
    d6e2:	231f      	movs	r3, #31
    d6e4:	7fba      	ldrb	r2, [r7, #30]
    d6e6:	401a      	ands	r2, r3
    d6e8:	0011      	movs	r1, r2
    d6ea:	1d22      	adds	r2, r4, #4
    d6ec:	7fd2      	ldrb	r2, [r2, #31]
    d6ee:	439a      	bics	r2, r3
    d6f0:	430a      	orrs	r2, r1
    d6f2:	1d21      	adds	r1, r4, #4
    d6f4:	77ca      	strb	r2, [r1, #31]
			conn->data_chan_hop;
		pdu_adv_tx->payload.connect_ind.lldata.sca = _radio.sca;
    d6f6:	002a      	movs	r2, r5
    d6f8:	32ff      	adds	r2, #255	; 0xff
    d6fa:	7fc9      	ldrb	r1, [r1, #31]
    d6fc:	7f52      	ldrb	r2, [r2, #29]
    d6fe:	400b      	ands	r3, r1
    d700:	0152      	lsls	r2, r2, #5
    d702:	4313      	orrs	r3, r2
    d704:	1d22      	adds	r2, r4, #4
    d706:	77d3      	strb	r3, [r2, #31]

		radio_switch_complete_and_disable();
    d708:	f7fd fb14 	bl	ad34 <radio_switch_complete_and_disable>

		radio_pkt_tx_set(pdu_adv_tx);
    d70c:	0020      	movs	r0, r4
    d70e:	f7fd fa93 	bl	ac38 <radio_pkt_tx_set>

		/* assert if radio packet ptr is not set and radio started tx */
		LL_ASSERT(!radio_is_ready());
    d712:	f7fd fac1 	bl	ac98 <radio_is_ready>
    d716:	900e      	str	r0, [sp, #56]	; 0x38
    d718:	2800      	cmp	r0, #0
    d71a:	d008      	beq.n	d72e <isr_rx_scan+0x272>
    d71c:	4b3d      	ldr	r3, [pc, #244]	; (d814 <isr_rx_scan+0x358>)
    d71e:	4a3e      	ldr	r2, [pc, #248]	; (d818 <isr_rx_scan+0x35c>)
    d720:	9301      	str	r3, [sp, #4]
    d722:	4b3e      	ldr	r3, [pc, #248]	; (d81c <isr_rx_scan+0x360>)
    d724:	493e      	ldr	r1, [pc, #248]	; (d820 <isr_rx_scan+0x364>)
    d726:	9300      	str	r3, [sp, #0]
    d728:	483e      	ldr	r0, [pc, #248]	; (d824 <isr_rx_scan+0x368>)
    d72a:	4b3f      	ldr	r3, [pc, #252]	; (d828 <isr_rx_scan+0x36c>)
    d72c:	e05c      	b.n	d7e8 <isr_rx_scan+0x32c>

		radio_tmr_end_capture();
    d72e:	f7fd fc61 	bl	aff4 <radio_tmr_end_capture>
		 * {cpu_sleep();}
		 * radio_status_reset();
		 */

		/* Populate the master context */
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    d732:	228c      	movs	r2, #140	; 0x8c
    d734:	35fc      	adds	r5, #252	; 0xfc
    d736:	68a9      	ldr	r1, [r5, #8]
    d738:	0052      	lsls	r2, r2, #1
    d73a:	0038      	movs	r0, r7
    d73c:	f7fd f8e2 	bl	a904 <mem_index_get>
					     CONNECTION_T_SIZE);

		/* Prepare the rx packet structure */
		radio_pdu_node_rx->hdr.handle = conn->handle;
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    d740:	2206      	movs	r2, #6
		/* Populate the master context */
		conn->handle = mem_index_get(conn, _radio.conn_pool,
					     CONNECTION_T_SIZE);

		/* Prepare the rx packet structure */
		radio_pdu_node_rx->hdr.handle = conn->handle;
    d742:	9b0a      	ldr	r3, [sp, #40]	; 0x28
		 * {cpu_sleep();}
		 * radio_status_reset();
		 */

		/* Populate the master context */
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    d744:	8438      	strh	r0, [r7, #32]

		/* prepare connection complete structure */
		pdu_data = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
		radio_le_conn_cmplt =
		    (struct radio_le_conn_cmplt *)&pdu_data->payload;
		radio_le_conn_cmplt->status = 0x00;
    d746:	2138      	movs	r1, #56	; 0x38
		conn->handle = mem_index_get(conn, _radio.conn_pool,
					     CONNECTION_T_SIZE);

		/* Prepare the rx packet structure */
		radio_pdu_node_rx->hdr.handle = conn->handle;
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    d748:	711a      	strb	r2, [r3, #4]

		/* prepare connection complete structure */
		pdu_data = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
		radio_le_conn_cmplt =
		    (struct radio_le_conn_cmplt *)&pdu_data->payload;
		radio_le_conn_cmplt->status = 0x00;
    d74a:	466a      	mov	r2, sp
    d74c:	001d      	movs	r5, r3
    d74e:	1852      	adds	r2, r2, r1
    d750:	7812      	ldrb	r2, [r2, #0]
		/* Populate the master context */
		conn->handle = mem_index_get(conn, _radio.conn_pool,
					     CONNECTION_T_SIZE);

		/* Prepare the rx packet structure */
		radio_pdu_node_rx->hdr.handle = conn->handle;
    d752:	80d8      	strh	r0, [r3, #6]

		/* prepare connection complete structure */
		pdu_data = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
		radio_le_conn_cmplt =
		    (struct radio_le_conn_cmplt *)&pdu_data->payload;
		radio_le_conn_cmplt->status = 0x00;
    d754:	72da      	strb	r2, [r3, #11]
		radio_le_conn_cmplt->role = 0x00;
    d756:	466b      	mov	r3, sp
    d758:	000a      	movs	r2, r1
		radio_le_conn_cmplt->peer_addr_type = pdu_adv_tx->rx_addr;
		memcpy(&radio_le_conn_cmplt->peer_addr[0],
    d75a:	0028      	movs	r0, r5
		/* prepare connection complete structure */
		pdu_data = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
		radio_le_conn_cmplt =
		    (struct radio_le_conn_cmplt *)&pdu_data->payload;
		radio_le_conn_cmplt->status = 0x00;
		radio_le_conn_cmplt->role = 0x00;
    d75c:	185b      	adds	r3, r3, r1
    d75e:	781b      	ldrb	r3, [r3, #0]
		radio_le_conn_cmplt->peer_addr_type = pdu_adv_tx->rx_addr;
		memcpy(&radio_le_conn_cmplt->peer_addr[0],
    d760:	3a32      	subs	r2, #50	; 0x32
		/* prepare connection complete structure */
		pdu_data = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
		radio_le_conn_cmplt =
		    (struct radio_le_conn_cmplt *)&pdu_data->payload;
		radio_le_conn_cmplt->status = 0x00;
		radio_le_conn_cmplt->role = 0x00;
    d762:	732b      	strb	r3, [r5, #12]
		radio_le_conn_cmplt->peer_addr_type = pdu_adv_tx->rx_addr;
    d764:	7823      	ldrb	r3, [r4, #0]
		memcpy(&radio_le_conn_cmplt->peer_addr[0],
    d766:	990f      	ldr	r1, [sp, #60]	; 0x3c
		pdu_data = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
		radio_le_conn_cmplt =
		    (struct radio_le_conn_cmplt *)&pdu_data->payload;
		radio_le_conn_cmplt->status = 0x00;
		radio_le_conn_cmplt->role = 0x00;
		radio_le_conn_cmplt->peer_addr_type = pdu_adv_tx->rx_addr;
    d768:	09db      	lsrs	r3, r3, #7
    d76a:	736b      	strb	r3, [r5, #13]
		memcpy(&radio_le_conn_cmplt->peer_addr[0],
    d76c:	300e      	adds	r0, #14
    d76e:	f7f3 fae4 	bl	d3a <memcpy>
		       &pdu_adv_tx->payload.connect_ind.adv_addr[0],
		       BDADDR_SIZE);
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
    d772:	7823      	ldrb	r3, [r4, #0]
		memcpy(&radio_le_conn_cmplt->own_addr[0],
    d774:	980a      	ldr	r0, [sp, #40]	; 0x28
		radio_le_conn_cmplt->role = 0x00;
		radio_le_conn_cmplt->peer_addr_type = pdu_adv_tx->rx_addr;
		memcpy(&radio_le_conn_cmplt->peer_addr[0],
		       &pdu_adv_tx->payload.connect_ind.adv_addr[0],
		       BDADDR_SIZE);
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
    d776:	065b      	lsls	r3, r3, #25
    d778:	0fdb      	lsrs	r3, r3, #31
    d77a:	752b      	strb	r3, [r5, #20]
		memcpy(&radio_le_conn_cmplt->own_addr[0],
    d77c:	9911      	ldr	r1, [sp, #68]	; 0x44
    d77e:	2206      	movs	r2, #6
    d780:	3015      	adds	r0, #21
    d782:	f7f3 fada 	bl	d3a <memcpy>
		       &pdu_adv_tx->payload.connect_ind.init_addr[0],
		       BDADDR_SIZE);
		radio_le_conn_cmplt->peer_irk_index = irkmatch_id;
    d786:	2248      	movs	r2, #72	; 0x48
    d788:	466b      	mov	r3, sp
    d78a:	189b      	adds	r3, r3, r2
    d78c:	781b      	ldrb	r3, [r3, #0]
		radio_le_conn_cmplt->interval = _radio.scanner.conn_interval;
    d78e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
		       BDADDR_SIZE);
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
		memcpy(&radio_le_conn_cmplt->own_addr[0],
		       &pdu_adv_tx->payload.connect_ind.init_addr[0],
		       BDADDR_SIZE);
		radio_le_conn_cmplt->peer_irk_index = irkmatch_id;
    d790:	76eb      	strb	r3, [r5, #27]
		radio_le_conn_cmplt->interval = _radio.scanner.conn_interval;
    d792:	4b1d      	ldr	r3, [pc, #116]	; (d808 <isr_rx_scan+0x34c>)

		/* prepare connection complete structure */
		pdu_data = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
		radio_le_conn_cmplt =
		    (struct radio_le_conn_cmplt *)&pdu_data->payload;
		radio_le_conn_cmplt->status = 0x00;
    d794:	350b      	adds	r5, #11
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
		memcpy(&radio_le_conn_cmplt->own_addr[0],
		       &pdu_adv_tx->payload.connect_ind.init_addr[0],
		       BDADDR_SIZE);
		radio_le_conn_cmplt->peer_irk_index = irkmatch_id;
		radio_le_conn_cmplt->interval = _radio.scanner.conn_interval;
    d796:	781b      	ldrb	r3, [r3, #0]
    d798:	7713      	strb	r3, [r2, #28]
    d79a:	4b1b      	ldr	r3, [pc, #108]	; (d808 <isr_rx_scan+0x34c>)
    d79c:	785b      	ldrb	r3, [r3, #1]
    d79e:	7753      	strb	r3, [r2, #29]
		radio_le_conn_cmplt->latency = _radio.scanner. conn_latency;
    d7a0:	4b1a      	ldr	r3, [pc, #104]	; (d80c <isr_rx_scan+0x350>)
    d7a2:	781b      	ldrb	r3, [r3, #0]
    d7a4:	7793      	strb	r3, [r2, #30]
    d7a6:	4b19      	ldr	r3, [pc, #100]	; (d80c <isr_rx_scan+0x350>)
    d7a8:	785b      	ldrb	r3, [r3, #1]
    d7aa:	77d3      	strb	r3, [r2, #31]
		radio_le_conn_cmplt->timeout = _radio.scanner.conn_timeout;
    d7ac:	0013      	movs	r3, r2
    d7ae:	4a18      	ldr	r2, [pc, #96]	; (d810 <isr_rx_scan+0x354>)
    d7b0:	3320      	adds	r3, #32
    d7b2:	7812      	ldrb	r2, [r2, #0]
    d7b4:	701a      	strb	r2, [r3, #0]
    d7b6:	4a16      	ldr	r2, [pc, #88]	; (d810 <isr_rx_scan+0x354>)
    d7b8:	7852      	ldrb	r2, [r2, #1]
    d7ba:	705a      	strb	r2, [r3, #1]
		radio_le_conn_cmplt->mca =
			pdu_adv_tx->payload.connect_ind.lldata.sca;
    d7bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    d7be:	7fdb      	ldrb	r3, [r3, #31]
    d7c0:	095b      	lsrs	r3, r3, #5
		       BDADDR_SIZE);
		radio_le_conn_cmplt->peer_irk_index = irkmatch_id;
		radio_le_conn_cmplt->interval = _radio.scanner.conn_interval;
		radio_le_conn_cmplt->latency = _radio.scanner. conn_latency;
		radio_le_conn_cmplt->timeout = _radio.scanner.conn_timeout;
		radio_le_conn_cmplt->mca =
    d7c2:	75eb      	strb	r3, [r5, #23]
			pdu_adv_tx->payload.connect_ind.lldata.sca;

		/* enqueue connection complete structure into queue */
		rx_fc_lock(conn->handle);
    d7c4:	8c38      	ldrh	r0, [r7, #32]
    d7c6:	f7ff f911 	bl	c9ec <rx_fc_lock>
		packet_rx_enqueue();
    d7ca:	f7ff f8c1 	bl	c950 <packet_rx_enqueue>
		/* Use Channel Selection Algorithm #2 if peer too supports it */
		if (IS_ENABLED(CONFIG_BLUETOOTH_CONTROLLER_CHAN_SEL_2)) {
			struct radio_le_chan_sel_algo *le_chan_sel_algo;

			/* Generate LE Channel Selection Algorithm event */
			radio_pdu_node_rx = packet_rx_reserve_get(3);
    d7ce:	2003      	movs	r0, #3
    d7d0:	f7fe fcf0 	bl	c1b4 <packet_rx_reserve_get>
			LL_ASSERT(radio_pdu_node_rx);
    d7d4:	2800      	cmp	r0, #0
    d7d6:	d12b      	bne.n	d830 <isr_rx_scan+0x374>
    d7d8:	4b0e      	ldr	r3, [pc, #56]	; (d814 <isr_rx_scan+0x358>)
    d7da:	4a0f      	ldr	r2, [pc, #60]	; (d818 <isr_rx_scan+0x35c>)
    d7dc:	9301      	str	r3, [sp, #4]
    d7de:	4b0f      	ldr	r3, [pc, #60]	; (d81c <isr_rx_scan+0x360>)
    d7e0:	490f      	ldr	r1, [pc, #60]	; (d820 <isr_rx_scan+0x364>)
    d7e2:	9300      	str	r3, [sp, #0]
    d7e4:	4811      	ldr	r0, [pc, #68]	; (d82c <isr_rx_scan+0x370>)
    d7e6:	4b10      	ldr	r3, [pc, #64]	; (d828 <isr_rx_scan+0x36c>)
    d7e8:	f7f4 f8ca 	bl	1980 <printk>
    d7ec:	b662      	cpsie	i
    d7ee:	2004      	movs	r0, #4
    d7f0:	df02      	svc	2
    d7f2:	46c0      	nop			; (mov r8, r8)
    d7f4:	200015c0 	.word	0x200015c0
    d7f8:	1afd498d 	.word	0x1afd498d
    d7fc:	3b9aca00 	.word	0x3b9aca00
    d800:	200016bc 	.word	0x200016bc
    d804:	000004e2 	.word	0x000004e2
    d808:	200016b0 	.word	0x200016b0
    d80c:	200016b2 	.word	0x200016b2
    d810:	200016b4 	.word	0x200016b4
    d814:	000154c4 	.word	0x000154c4
    d818:	00015484 	.word	0x00015484
    d81c:	000154c9 	.word	0x000154c9
    d820:	0001548b 	.word	0x0001548b
    d824:	00016f28 	.word	0x00016f28
    d828:	000183e0 	.word	0x000183e0
    d82c:	00016df2 	.word	0x00016df2

			radio_pdu_node_rx->hdr.handle = conn->handle;
    d830:	8c3b      	ldrh	r3, [r7, #32]
    d832:	80c3      	strh	r3, [r0, #6]
			radio_pdu_node_rx->hdr.type =
    d834:	230b      	movs	r3, #11
    d836:	7103      	strb	r3, [r0, #4]
			pdu_data = (struct pdu_data *)
				radio_pdu_node_rx->pdu_data;
			le_chan_sel_algo = (struct radio_le_chan_sel_algo *)
				&pdu_data->payload;

			if (pdu_adv_rx->chan_sel) {
    d838:	7a32      	ldrb	r2, [r6, #8]
    d83a:	3315      	adds	r3, #21
    d83c:	4013      	ands	r3, r2
    d83e:	d00e      	beq.n	d85e <isr_rx_scan+0x3a2>
				u16_t aa_ls =
    d840:	7c7b      	ldrb	r3, [r7, #17]
    d842:	7c39      	ldrb	r1, [r7, #16]
    d844:	021b      	lsls	r3, r3, #8
					((u16_t)conn->access_addr[1] << 8) |
					conn->access_addr[0];
				u16_t aa_ms =
    d846:	7cfa      	ldrb	r2, [r7, #19]
				radio_pdu_node_rx->pdu_data;
			le_chan_sel_algo = (struct radio_le_chan_sel_algo *)
				&pdu_data->payload;

			if (pdu_adv_rx->chan_sel) {
				u16_t aa_ls =
    d848:	4319      	orrs	r1, r3
					((u16_t)conn->access_addr[1] << 8) |
					conn->access_addr[0];
				u16_t aa_ms =
    d84a:	7cbb      	ldrb	r3, [r7, #18]
    d84c:	0212      	lsls	r2, r2, #8
    d84e:	4313      	orrs	r3, r2
					((u16_t)conn->access_addr[3] << 8) |
					 conn->access_addr[2];

				conn->data_chan_sel = 1;
    d850:	2440      	movs	r4, #64	; 0x40
				conn->data_chan_id = aa_ms ^ aa_ls;
    d852:	404b      	eors	r3, r1
    d854:	83fb      	strh	r3, [r7, #30]

				le_chan_sel_algo->chan_sel_algo = 0x01;
    d856:	2301      	movs	r3, #1
					conn->access_addr[0];
				u16_t aa_ms =
					((u16_t)conn->access_addr[3] << 8) |
					 conn->access_addr[2];

				conn->data_chan_sel = 1;
    d858:	7f3a      	ldrb	r2, [r7, #28]
    d85a:	4322      	orrs	r2, r4
    d85c:	773a      	strb	r2, [r7, #28]
				conn->data_chan_id = aa_ms ^ aa_ls;

				le_chan_sel_algo->chan_sel_algo = 0x01;
			} else {
				le_chan_sel_algo->chan_sel_algo = 0x00;
    d85e:	72c3      	strb	r3, [r0, #11]
			}

			packet_rx_enqueue();
    d860:	f7ff f876 	bl	c950 <packet_rx_enqueue>
		}

		/* Calculate master slot */
		conn->hdr.ticks_slot = _radio.scanner.ticks_conn_slot;
    d864:	4b8c      	ldr	r3, [pc, #560]	; (da98 <isr_rx_scan+0x5dc>)
    d866:	001a      	movs	r2, r3
    d868:	32f8      	adds	r2, #248	; 0xf8
    d86a:	6812      	ldr	r2, [r2, #0]
    d86c:	60fa      	str	r2, [r7, #12]
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    d86e:	22c0      	movs	r2, #192	; 0xc0
    d870:	0052      	lsls	r2, r2, #1
    d872:	589c      	ldr	r4, [r3, r2]
		conn->hdr.ticks_xtal_to_start =
    d874:	2327      	movs	r3, #39	; 0x27
			TICKER_US_TO_TICKS(RADIO_TICKER_XTAL_OFFSET_US);
		conn->hdr.ticks_preempt_to_start =
    d876:	2200      	movs	r2, #0
			packet_rx_enqueue();
		}

		/* Calculate master slot */
		conn->hdr.ticks_slot = _radio.scanner.ticks_conn_slot;
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    d878:	607c      	str	r4, [r7, #4]
		conn->hdr.ticks_xtal_to_start =
    d87a:	603b      	str	r3, [r7, #0]
			TICKER_US_TO_TICKS(RADIO_TICKER_XTAL_OFFSET_US);
		conn->hdr.ticks_preempt_to_start =
    d87c:	60ba      	str	r2, [r7, #8]
			TICKER_US_TO_TICKS(RADIO_TICKER_PREEMPT_PART_MIN_US);
		ticks_slot_offset =
    d87e:	429c      	cmp	r4, r3
    d880:	d200      	bcs.n	d884 <isr_rx_scan+0x3c8>
    d882:	001c      	movs	r4, r3
			 conn->hdr.ticks_xtal_to_start) ?
			conn->hdr.ticks_xtal_to_start :
			conn->hdr.ticks_active_to_start;

		/* Stop Scanner */
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    d884:	2100      	movs	r1, #0
    d886:	4b85      	ldr	r3, [pc, #532]	; (da9c <isr_rx_scan+0x5e0>)
    d888:	2206      	movs	r2, #6
    d88a:	9300      	str	r3, [sp, #0]
    d88c:	0008      	movs	r0, r1
    d88e:	4b84      	ldr	r3, [pc, #528]	; (daa0 <isr_rx_scan+0x5e4>)
    d890:	f7fe fb82 	bl	bf98 <ticker_stop>
					    RADIO_TICKER_USER_ID_WORKER,
					    RADIO_TICKER_ID_SCAN,
					    ticker_stop_scan_assert,
					    (void *)__LINE__);
		ticker_stop_scan_assert(ticker_status, (void *)__LINE__);
    d894:	21a2      	movs	r1, #162	; 0xa2

		/* Scanner stop can expire while here in this ISR.
		 * Deferred attempt to stop can fail as it would have
		 * expired, hence ignore failure.
		 */
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    d896:	2500      	movs	r5, #0
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
					    RADIO_TICKER_USER_ID_WORKER,
					    RADIO_TICKER_ID_SCAN,
					    ticker_stop_scan_assert,
					    (void *)__LINE__);
		ticker_stop_scan_assert(ticker_status, (void *)__LINE__);
    d898:	00c9      	lsls	r1, r1, #3
    d89a:	f7ff f907 	bl	caac <ticker_stop_scan_assert>

		/* Scanner stop can expire while here in this ISR.
		 * Deferred attempt to stop can fail as it would have
		 * expired, hence ignore failure.
		 */
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    d89e:	002b      	movs	r3, r5
    d8a0:	2204      	movs	r2, #4
    d8a2:	0029      	movs	r1, r5
    d8a4:	9500      	str	r5, [sp, #0]
    d8a6:	0028      	movs	r0, r5
    d8a8:	f7fe fb76 	bl	bf98 <ticker_stop>
				     RADIO_TICKER_USER_ID_WORKER,
				     RADIO_TICKER_ID_FIRST_CONNECTION +
				     conn->handle,
				     (_radio.ticks_anchor - ticks_slot_offset),
				     TICKER_US_TO_TICKS(conn_space_us),
				     TICKER_US_TO_TICKS(conn_interval_us),
    d8ac:	4a7d      	ldr	r2, [pc, #500]	; (daa4 <isr_rx_scan+0x5e8>)
    d8ae:	2300      	movs	r3, #0
    d8b0:	9810      	ldr	r0, [sp, #64]	; 0x40
    d8b2:	0029      	movs	r1, r5
    d8b4:	f7f2 fe0a 	bl	4cc <__aeabi_lmul>
    d8b8:	4a7b      	ldr	r2, [pc, #492]	; (daa8 <isr_rx_scan+0x5ec>)
    d8ba:	2307      	movs	r3, #7
    d8bc:	900a      	str	r0, [sp, #40]	; 0x28
    d8be:	910b      	str	r1, [sp, #44]	; 0x2c
    d8c0:	f7f2 fde4 	bl	48c <__aeabi_uldivmod>
		ticker_status =
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
				     RADIO_TICKER_USER_ID_WORKER,
				     RADIO_TICKER_ID_FIRST_CONNECTION +
				     conn->handle,
				     (_radio.ticks_anchor - ticks_slot_offset),
    d8c4:	4b74      	ldr	r3, [pc, #464]	; (da98 <isr_rx_scan+0x5dc>)
				     TICKER_US_TO_TICKS(conn_space_us),
				     TICKER_US_TO_TICKS(conn_interval_us),
    d8c6:	900e      	str	r0, [sp, #56]	; 0x38
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
			    RADIO_TICKER_USER_ID_WORKER,
			    RADIO_TICKER_ID_SCAN_STOP, NULL, NULL);

		/* Start master */
		ticker_status =
    d8c8:	685b      	ldr	r3, [r3, #4]
    d8ca:	4a77      	ldr	r2, [pc, #476]	; (daa8 <isr_rx_scan+0x5ec>)
    d8cc:	1b1b      	subs	r3, r3, r4
    d8ce:	930f      	str	r3, [sp, #60]	; 0x3c
    d8d0:	4b76      	ldr	r3, [pc, #472]	; (daac <isr_rx_scan+0x5f0>)
    d8d2:	8c3e      	ldrh	r6, [r7, #32]
    d8d4:	9308      	str	r3, [sp, #32]
    d8d6:	4b76      	ldr	r3, [pc, #472]	; (dab0 <isr_rx_scan+0x5f4>)
    d8d8:	9706      	str	r7, [sp, #24]
    d8da:	9307      	str	r3, [sp, #28]
    d8dc:	4b75      	ldr	r3, [pc, #468]	; (dab4 <isr_rx_scan+0x5f8>)
    d8de:	3607      	adds	r6, #7
    d8e0:	9305      	str	r3, [sp, #20]
    d8e2:	68fb      	ldr	r3, [r7, #12]
    d8e4:	9503      	str	r5, [sp, #12]
    d8e6:	191c      	adds	r4, r3, r4
    d8e8:	b2a4      	uxth	r4, r4
    d8ea:	2307      	movs	r3, #7
    d8ec:	9404      	str	r4, [sp, #16]
    d8ee:	f7f2 fded 	bl	4cc <__aeabi_lmul>
    d8f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d8f4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    d8f6:	22fa      	movs	r2, #250	; 0xfa
    d8f8:	1a1b      	subs	r3, r3, r0
    d8fa:	418c      	sbcs	r4, r1
    d8fc:	0092      	lsls	r2, r2, #2
    d8fe:	0018      	movs	r0, r3
    d900:	0021      	movs	r1, r4
    d902:	2300      	movs	r3, #0
    d904:	f7f2 fdc2 	bl	48c <__aeabi_uldivmod>
    d908:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d90a:	9002      	str	r0, [sp, #8]
    d90c:	9301      	str	r3, [sp, #4]
    d90e:	4a65      	ldr	r2, [pc, #404]	; (daa4 <isr_rx_scan+0x5e8>)
    d910:	2300      	movs	r3, #0
    d912:	980d      	ldr	r0, [sp, #52]	; 0x34
    d914:	0029      	movs	r1, r5
    d916:	f7f2 fdd9 	bl	4cc <__aeabi_lmul>
    d91a:	4a63      	ldr	r2, [pc, #396]	; (daa8 <isr_rx_scan+0x5ec>)
    d91c:	2307      	movs	r3, #7
    d91e:	f7f2 fdb5 	bl	48c <__aeabi_uldivmod>
    d922:	0200      	lsls	r0, r0, #8
    d924:	0a00      	lsrs	r0, r0, #8
    d926:	b2f6      	uxtb	r6, r6
    d928:	9000      	str	r0, [sp, #0]
    d92a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d92c:	0032      	movs	r2, r6
    d92e:	0029      	movs	r1, r5
    d930:	0028      	movs	r0, r5
    d932:	f7fe fa99 	bl	be68 <ticker_start>
				     TICKER_REMAINDER(conn_interval_us),
				     TICKER_NULL_LAZY,
				     (ticks_slot_offset + conn->hdr.ticks_slot),
				     event_master_prepare, conn,
				     ticker_success_assert, (void *)__LINE__);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    d936:	2302      	movs	r3, #2
    d938:	4398      	bics	r0, r3
    d93a:	0004      	movs	r4, r0
    d93c:	42a8      	cmp	r0, r5
    d93e:	d100      	bne.n	d942 <isr_rx_scan+0x486>
    d940:	e0a6      	b.n	da90 <isr_rx_scan+0x5d4>
    d942:	4b5d      	ldr	r3, [pc, #372]	; (dab8 <isr_rx_scan+0x5fc>)
    d944:	4a5d      	ldr	r2, [pc, #372]	; (dabc <isr_rx_scan+0x600>)
    d946:	9301      	str	r3, [sp, #4]
    d948:	4b5d      	ldr	r3, [pc, #372]	; (dac0 <isr_rx_scan+0x604>)
    d94a:	495e      	ldr	r1, [pc, #376]	; (dac4 <isr_rx_scan+0x608>)
    d94c:	9300      	str	r3, [sp, #0]
    d94e:	485e      	ldr	r0, [pc, #376]	; (dac8 <isr_rx_scan+0x60c>)
    d950:	4b5e      	ldr	r3, [pc, #376]	; (dacc <isr_rx_scan+0x610>)
    d952:	e749      	b.n	d7e8 <isr_rx_scan+0x32c>

		return 0;
	}

	/* Active scanner */
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    d954:	230f      	movs	r3, #15
    d956:	7a32      	ldrb	r2, [r6, #8]
    d958:	4013      	ands	r3, r2
    d95a:	d001      	beq.n	d960 <isr_rx_scan+0x4a4>
    d95c:	2b06      	cmp	r3, #6
    d95e:	d152      	bne.n	da06 <isr_rx_scan+0x54a>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
    d960:	495b      	ldr	r1, [pc, #364]	; (dad0 <isr_rx_scan+0x614>)
		 (_radio.scanner.type != 0) &&
    d962:	4d4d      	ldr	r5, [pc, #308]	; (da98 <isr_rx_scan+0x5dc>)
		return 0;
	}

	/* Active scanner */
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
    d964:	7809      	ldrb	r1, [r1, #0]
    d966:	0709      	lsls	r1, r1, #28
    d968:	d547      	bpl.n	d9fa <isr_rx_scan+0x53e>
		 (_radio.scanner.type != 0) &&
		 (_radio.scanner.conn == 0)) {
    d96a:	0029      	movs	r1, r5
    d96c:	31fc      	adds	r1, #252	; 0xfc
	}

	/* Active scanner */
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
		 (_radio.scanner.type != 0) &&
    d96e:	6809      	ldr	r1, [r1, #0]
    d970:	2900      	cmp	r1, #0
    d972:	d142      	bne.n	d9fa <isr_rx_scan+0x53e>
		 (_radio.scanner.conn == 0)) {
		struct pdu_adv *pdu_adv_tx;
		u32_t err;

		/* save the adv packet */
		err = isr_rx_scan_report(rssi_ready);
    d974:	0020      	movs	r0, r4
    d976:	f7ff fd5b 	bl	d430 <isr_rx_scan_report>
    d97a:	1e04      	subs	r4, r0, #0
		if (err) {
    d97c:	d000      	beq.n	d980 <isr_rx_scan+0x4c4>
    d97e:	e087      	b.n	da90 <isr_rx_scan+0x5d4>
			return err;
		}

		/* prepare the scan request packet */
		pdu_adv_tx = (struct pdu_adv *)radio_pkt_scratch_get();
    d980:	f7fd f9c4 	bl	ad0c <radio_pkt_scratch_get>
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    d984:	220f      	movs	r2, #15
		pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    d986:	2140      	movs	r1, #64	; 0x40
			return err;
		}

		/* prepare the scan request packet */
		pdu_adv_tx = (struct pdu_adv *)radio_pkt_scratch_get();
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    d988:	7803      	ldrb	r3, [r0, #0]
		if (err) {
			return err;
		}

		/* prepare the scan request packet */
		pdu_adv_tx = (struct pdu_adv *)radio_pkt_scratch_get();
    d98a:	0007      	movs	r7, r0
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    d98c:	4393      	bics	r3, r2
    d98e:	3a0c      	subs	r2, #12
    d990:	4313      	orrs	r3, r2
    d992:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    d994:	4b4e      	ldr	r3, [pc, #312]	; (dad0 <isr_rx_scan+0x614>)
    d996:	781b      	ldrb	r3, [r3, #0]
    d998:	09db      	lsrs	r3, r3, #7
    d99a:	019a      	lsls	r2, r3, #6
    d99c:	7803      	ldrb	r3, [r0, #0]
    d99e:	438b      	bics	r3, r1
    d9a0:	4313      	orrs	r3, r2
    d9a2:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    d9a4:	7a33      	ldrb	r3, [r6, #8]
    d9a6:	7801      	ldrb	r1, [r0, #0]
    d9a8:	065b      	lsls	r3, r3, #25
    d9aa:	0fdb      	lsrs	r3, r3, #31
    d9ac:	01da      	lsls	r2, r3, #7
    d9ae:	237f      	movs	r3, #127	; 0x7f
    d9b0:	400b      	ands	r3, r1
    d9b2:	4313      	orrs	r3, r2
    d9b4:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->len = sizeof(struct pdu_adv_payload_scan_req);
		memcpy(&pdu_adv_tx->payload.scan_req.scan_addr[0],
    d9b6:	0029      	movs	r1, r5
		/* prepare the scan request packet */
		pdu_adv_tx = (struct pdu_adv *)radio_pkt_scratch_get();
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
		pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
		pdu_adv_tx->len = sizeof(struct pdu_adv_payload_scan_req);
    d9b8:	230c      	movs	r3, #12
		memcpy(&pdu_adv_tx->payload.scan_req.scan_addr[0],
    d9ba:	31e4      	adds	r1, #228	; 0xe4
		/* prepare the scan request packet */
		pdu_adv_tx = (struct pdu_adv *)radio_pkt_scratch_get();
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
		pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
		pdu_adv_tx->len = sizeof(struct pdu_adv_payload_scan_req);
    d9bc:	7043      	strb	r3, [r0, #1]
		memcpy(&pdu_adv_tx->payload.scan_req.scan_addr[0],
    d9be:	2206      	movs	r2, #6
    d9c0:	3002      	adds	r0, #2
    d9c2:	f7f3 f9ba 	bl	d3a <memcpy>
		       &_radio.scanner.init_addr[0], BDADDR_SIZE);
		memcpy(&pdu_adv_tx->payload.scan_req.adv_addr[0],
		       &pdu_adv_rx->payload.adv_ind.addr[0], BDADDR_SIZE);
    d9c6:	0031      	movs	r1, r6
		pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
		pdu_adv_tx->len = sizeof(struct pdu_adv_payload_scan_req);
		memcpy(&pdu_adv_tx->payload.scan_req.scan_addr[0],
		       &_radio.scanner.init_addr[0], BDADDR_SIZE);
		memcpy(&pdu_adv_tx->payload.scan_req.adv_addr[0],
    d9c8:	0038      	movs	r0, r7
		       &pdu_adv_rx->payload.adv_ind.addr[0], BDADDR_SIZE);
    d9ca:	310a      	adds	r1, #10
		pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
		pdu_adv_tx->len = sizeof(struct pdu_adv_payload_scan_req);
		memcpy(&pdu_adv_tx->payload.scan_req.scan_addr[0],
		       &_radio.scanner.init_addr[0], BDADDR_SIZE);
		memcpy(&pdu_adv_tx->payload.scan_req.adv_addr[0],
    d9cc:	2206      	movs	r2, #6
    d9ce:	3008      	adds	r0, #8
    d9d0:	f7f3 f9b3 	bl	d3a <memcpy>
		       &pdu_adv_rx->payload.adv_ind.addr[0], BDADDR_SIZE);

		/* switch scanner state to active */
		_radio.scanner.state = 1;
    d9d4:	0029      	movs	r1, r5
    d9d6:	2202      	movs	r2, #2
    d9d8:	31dc      	adds	r1, #220	; 0xdc
    d9da:	780b      	ldrb	r3, [r1, #0]
		_radio.state = STATE_TX;

		radio_tmr_tifs_set(RADIO_TIFS);
    d9dc:	2096      	movs	r0, #150	; 0x96
		       &_radio.scanner.init_addr[0], BDADDR_SIZE);
		memcpy(&pdu_adv_tx->payload.scan_req.adv_addr[0],
		       &pdu_adv_rx->payload.adv_ind.addr[0], BDADDR_SIZE);

		/* switch scanner state to active */
		_radio.scanner.state = 1;
    d9de:	4313      	orrs	r3, r2
    d9e0:	700b      	strb	r3, [r1, #0]
		_radio.state = STATE_TX;
    d9e2:	742a      	strb	r2, [r5, #16]

		radio_tmr_tifs_set(RADIO_TIFS);
    d9e4:	f7fd fa3a 	bl	ae5c <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    d9e8:	0020      	movs	r0, r4
    d9ea:	f7fd f993 	bl	ad14 <radio_switch_complete_and_rx>
		radio_pkt_tx_set(pdu_adv_tx);
    d9ee:	0038      	movs	r0, r7
    d9f0:	f7fd f922 	bl	ac38 <radio_pkt_tx_set>
		radio_tmr_end_capture();
    d9f4:	f7fd fafe 	bl	aff4 <radio_tmr_end_capture>

		return 0;
    d9f8:	e04a      	b.n	da90 <isr_rx_scan+0x5d4>
	}
	/* Passive scanner or scan responses */
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    d9fa:	2b00      	cmp	r3, #0
    d9fc:	d103      	bne.n	da06 <isr_rx_scan+0x54a>
#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND) &&
		   (_radio.scanner.phy)) ||
#endif /* CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
		   (_radio.scanner.state != 0))) &&
    d9fe:	7a73      	ldrb	r3, [r6, #9]
    da00:	2b00      	cmp	r3, #0
    da02:	d13a      	bne.n	da7a <isr_rx_scan+0x5be>
    da04:	e043      	b.n	da8e <isr_rx_scan+0x5d2>
		radio_tmr_end_capture();

		return 0;
	}
	/* Passive scanner or scan responses */
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    da06:	2b01      	cmp	r3, #1
    da08:	d005      	beq.n	da16 <isr_rx_scan+0x55a>
		    /* allow directed adv packets where initiator address
		     * is resolvable private address
		     */
		    (((_radio.scanner.filter_policy & 0x02) != 0) &&
		     (pdu_adv_rx->rx_addr != 0) &&
		     ((pdu_adv_rx->payload.direct_ind.tgt_addr[5] & 0xc0) == 0x40)))) ||
    da0a:	220b      	movs	r2, #11
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
    da0c:	7a31      	ldrb	r1, [r6, #8]
		    /* allow directed adv packets where initiator address
		     * is resolvable private address
		     */
		    (((_radio.scanner.filter_policy & 0x02) != 0) &&
		     (pdu_adv_rx->rx_addr != 0) &&
		     ((pdu_adv_rx->payload.direct_ind.tgt_addr[5] & 0xc0) == 0x40)))) ||
    da0e:	400a      	ands	r2, r1
    da10:	2a02      	cmp	r2, #2
    da12:	d120      	bne.n	da56 <isr_rx_scan+0x59a>
    da14:	e7f3      	b.n	d9fe <isr_rx_scan+0x542>
	}
	/* Passive scanner or scan responses */
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
		   (/* allow directed adv packets addressed to this device */
		    ((_radio.scanner.init_addr_type == pdu_adv_rx->rx_addr) &&
    da16:	4d20      	ldr	r5, [pc, #128]	; (da98 <isr_rx_scan+0x5dc>)

		return 0;
	}
	/* Passive scanner or scan responses */
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
    da18:	09d2      	lsrs	r2, r2, #7
		   (/* allow directed adv packets addressed to this device */
		    ((_radio.scanner.init_addr_type == pdu_adv_rx->rx_addr) &&
    da1a:	002b      	movs	r3, r5
    da1c:	33dd      	adds	r3, #221	; 0xdd
    da1e:	781b      	ldrb	r3, [r3, #0]

		return 0;
	}
	/* Passive scanner or scan responses */
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
    da20:	09db      	lsrs	r3, r3, #7
    da22:	4293      	cmp	r3, r2
    da24:	d004      	beq.n	da30 <isr_rx_scan+0x574>
			     &pdu_adv_rx->payload.direct_ind.tgt_addr[0],
			     BDADDR_SIZE) == 0)) ||
		    /* allow directed adv packets where initiator address
		     * is resolvable private address
		     */
		    (((_radio.scanner.filter_policy & 0x02) != 0) &&
    da26:	35dd      	adds	r5, #221	; 0xdd
    da28:	782b      	ldrb	r3, [r5, #0]
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
		   (/* allow directed adv packets addressed to this device */
		    ((_radio.scanner.init_addr_type == pdu_adv_rx->rx_addr) &&
		     (memcmp(&_radio.scanner.init_addr[0],
			     &pdu_adv_rx->payload.direct_ind.tgt_addr[0],
			     BDADDR_SIZE) == 0)) ||
    da2a:	069b      	lsls	r3, r3, #26
    da2c:	d40a      	bmi.n	da44 <isr_rx_scan+0x588>
    da2e:	e7ec      	b.n	da0a <isr_rx_scan+0x54e>
	/* Passive scanner or scan responses */
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
		   (/* allow directed adv packets addressed to this device */
		    ((_radio.scanner.init_addr_type == pdu_adv_rx->rx_addr) &&
		     (memcmp(&_radio.scanner.init_addr[0],
    da30:	0028      	movs	r0, r5
    da32:	0031      	movs	r1, r6
    da34:	30e4      	adds	r0, #228	; 0xe4
    da36:	2206      	movs	r2, #6
    da38:	3110      	adds	r1, #16
    da3a:	f7f3 f969 	bl	d10 <memcmp>
	}
	/* Passive scanner or scan responses */
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
		   (/* allow directed adv packets addressed to this device */
		    ((_radio.scanner.init_addr_type == pdu_adv_rx->rx_addr) &&
    da3e:	2800      	cmp	r0, #0
    da40:	d0dd      	beq.n	d9fe <isr_rx_scan+0x542>
    da42:	e7f0      	b.n	da26 <isr_rx_scan+0x56a>
			     &pdu_adv_rx->payload.direct_ind.tgt_addr[0],
			     BDADDR_SIZE) == 0)) ||
		    /* allow directed adv packets where initiator address
		     * is resolvable private address
		     */
		    (((_radio.scanner.filter_policy & 0x02) != 0) &&
    da44:	7a33      	ldrb	r3, [r6, #8]
    da46:	09db      	lsrs	r3, r3, #7
    da48:	d0df      	beq.n	da0a <isr_rx_scan+0x54e>
		     (pdu_adv_rx->rx_addr != 0) &&
    da4a:	223f      	movs	r2, #63	; 0x3f
    da4c:	7d73      	ldrb	r3, [r6, #21]
    da4e:	4393      	bics	r3, r2
    da50:	2b40      	cmp	r3, #64	; 0x40
    da52:	d1da      	bne.n	da0a <isr_rx_scan+0x54e>
    da54:	e7d3      	b.n	d9fe <isr_rx_scan+0x542>
		     ((pdu_adv_rx->payload.direct_ind.tgt_addr[5] & 0xc0) == 0x40)))) ||
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
    da56:	230f      	movs	r3, #15
    da58:	400b      	ands	r3, r1
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND) ||
    da5a:	2b07      	cmp	r3, #7
    da5c:	d105      	bne.n	da6a <isr_rx_scan+0x5ae>
#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND) &&
    da5e:	4a0e      	ldr	r2, [pc, #56]	; (da98 <isr_rx_scan+0x5dc>)
    da60:	32dd      	adds	r2, #221	; 0xdd
    da62:	7812      	ldrb	r2, [r2, #0]
    da64:	421a      	tst	r2, r3
    da66:	d1ca      	bne.n	d9fe <isr_rx_scan+0x542>
    da68:	e011      	b.n	da8e <isr_rx_scan+0x5d2>
		   (_radio.scanner.phy)) ||
    da6a:	2b04      	cmp	r3, #4
    da6c:	d10f      	bne.n	da8e <isr_rx_scan+0x5d2>
#endif /* CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
		   (_radio.scanner.state != 0))) &&
    da6e:	4b0a      	ldr	r3, [pc, #40]	; (da98 <isr_rx_scan+0x5dc>)
    da70:	33dc      	adds	r3, #220	; 0xdc
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND) ||
#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND) &&
		   (_radio.scanner.phy)) ||
#endif /* CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
    da72:	781b      	ldrb	r3, [r3, #0]
    da74:	079b      	lsls	r3, r3, #30
    da76:	d4c2      	bmi.n	d9fe <isr_rx_scan+0x542>
    da78:	e009      	b.n	da8e <isr_rx_scan+0x5d2>
		   (_radio.scanner.state != 0))) &&
		 (pdu_adv_rx->len != 0) && (!_radio.scanner.conn)) {
    da7a:	4b07      	ldr	r3, [pc, #28]	; (da98 <isr_rx_scan+0x5dc>)
    da7c:	33fc      	adds	r3, #252	; 0xfc
    da7e:	681b      	ldr	r3, [r3, #0]
    da80:	2b00      	cmp	r3, #0
    da82:	d104      	bne.n	da8e <isr_rx_scan+0x5d2>
		u32_t err;

		/* save the scan response packet */
		err = isr_rx_scan_report(rssi_ready);
    da84:	0020      	movs	r0, r4
    da86:	f7ff fcd3 	bl	d430 <isr_rx_scan_report>
    da8a:	1e04      	subs	r4, r0, #0
		if (err) {
    da8c:	d100      	bne.n	da90 <isr_rx_scan+0x5d4>
	else {
		/* ignore and close this rx/tx chain ( code below ) */
		return 1;
	}

	return 1;
    da8e:	2401      	movs	r4, #1
}
    da90:	0020      	movs	r0, r4
    da92:	b015      	add	sp, #84	; 0x54
    da94:	bdf0      	pop	{r4, r5, r6, r7, pc}
    da96:	46c0      	nop			; (mov r8, r8)
    da98:	200015c0 	.word	0x200015c0
    da9c:	0000050f 	.word	0x0000050f
    daa0:	0000caad 	.word	0x0000caad
    daa4:	3b9aca00 	.word	0x3b9aca00
    daa8:	1afd498d 	.word	0x1afd498d
    daac:	00000527 	.word	0x00000527
    dab0:	0000ca25 	.word	0x0000ca25
    dab4:	0000f45d 	.word	0x0000f45d
    dab8:	000154c4 	.word	0x000154c4
    dabc:	00015484 	.word	0x00015484
    dac0:	000154c9 	.word	0x000154c9
    dac4:	0001548b 	.word	0x0001548b
    dac8:	00016da4 	.word	0x00016da4
    dacc:	000183e0 	.word	0x000183e0
    dad0:	2000169d 	.word	0x2000169d

0000dad4 <prepare_normal_set>:
	}
}

static void prepare_normal_set(struct shdr *hdr, u8_t ticker_user_id,
			       u8_t ticker_id)
{
    dad4:	b530      	push	{r4, r5, lr}
	if (hdr->ticks_xtal_to_start & ((u32_t)1 << 31)) {
    dad6:	6803      	ldr	r3, [r0, #0]
	}
}

static void prepare_normal_set(struct shdr *hdr, u8_t ticker_user_id,
			       u8_t ticker_id)
{
    dad8:	b089      	sub	sp, #36	; 0x24
	if (hdr->ticks_xtal_to_start & ((u32_t)1 << 31)) {
    dada:	2b00      	cmp	r3, #0
    dadc:	da24      	bge.n	db28 <prepare_normal_set+0x54>
		u32_t ticks_drift_minus =
			(hdr->ticks_xtal_to_start & (~((u32_t)1 << 31))) -
			ticks_prepare_to_start;

		ticker_status =
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    dade:	6845      	ldr	r5, [r0, #4]
    dae0:	6884      	ldr	r4, [r0, #8]
    dae2:	005b      	lsls	r3, r3, #1
    dae4:	085b      	lsrs	r3, r3, #1
    dae6:	42ac      	cmp	r4, r5
    dae8:	d200      	bcs.n	daec <prepare_normal_set+0x18>
    daea:	002c      	movs	r4, r5
			ticks_active_to_start : hdr->ticks_preempt_to_start;
		u32_t ticks_drift_minus =
			(hdr->ticks_xtal_to_start & (~((u32_t)1 << 31))) -
			ticks_prepare_to_start;

		ticker_status =
    daec:	9006      	str	r0, [sp, #24]
    daee:	480f      	ldr	r0, [pc, #60]	; (db2c <prepare_normal_set+0x58>)
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    daf0:	1b1b      	subs	r3, r3, r4
			ticks_active_to_start : hdr->ticks_preempt_to_start;
		u32_t ticks_drift_minus =
			(hdr->ticks_xtal_to_start & (~((u32_t)1 << 31))) -
			ticks_prepare_to_start;

		ticker_status =
    daf2:	9005      	str	r0, [sp, #20]
    daf4:	2000      	movs	r0, #0
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    daf6:	b29b      	uxth	r3, r3
			ticks_active_to_start : hdr->ticks_preempt_to_start;
		u32_t ticks_drift_minus =
			(hdr->ticks_xtal_to_start & (~((u32_t)1 << 31))) -
			ticks_prepare_to_start;

		ticker_status =
    daf8:	9301      	str	r3, [sp, #4]
    dafa:	9300      	str	r3, [sp, #0]
    dafc:	9004      	str	r0, [sp, #16]
    dafe:	0003      	movs	r3, r0
    db00:	9003      	str	r0, [sp, #12]
    db02:	9002      	str	r0, [sp, #8]
    db04:	f7fe f9f8 	bl	bef8 <ticker_update>
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
				      ticker_user_id,
				      ticker_id, 0, ticks_drift_minus,
				      ticks_drift_minus, 0, 0, 0,
				      prepare_normal, hdr);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    db08:	2302      	movs	r3, #2
    db0a:	4398      	bics	r0, r3
    db0c:	d00c      	beq.n	db28 <prepare_normal_set+0x54>
    db0e:	4b08      	ldr	r3, [pc, #32]	; (db30 <prepare_normal_set+0x5c>)
    db10:	4a08      	ldr	r2, [pc, #32]	; (db34 <prepare_normal_set+0x60>)
    db12:	9301      	str	r3, [sp, #4]
    db14:	4b08      	ldr	r3, [pc, #32]	; (db38 <prepare_normal_set+0x64>)
    db16:	4909      	ldr	r1, [pc, #36]	; (db3c <prepare_normal_set+0x68>)
    db18:	9300      	str	r3, [sp, #0]
    db1a:	4809      	ldr	r0, [pc, #36]	; (db40 <prepare_normal_set+0x6c>)
    db1c:	4b09      	ldr	r3, [pc, #36]	; (db44 <prepare_normal_set+0x70>)
    db1e:	f7f3 ff2f 	bl	1980 <printk>
    db22:	b662      	cpsie	i
    db24:	2004      	movs	r0, #4
    db26:	df02      	svc	2
			  (ticker_status == TICKER_STATUS_BUSY));
	}
}
    db28:	b009      	add	sp, #36	; 0x24
    db2a:	bd30      	pop	{r4, r5, pc}
    db2c:	0000c145 	.word	0x0000c145
    db30:	000154c4 	.word	0x000154c4
    db34:	00015484 	.word	0x00015484
    db38:	000154c9 	.word	0x000154c9
    db3c:	0001548b 	.word	0x0001548b
    db40:	00016da4 	.word	0x00016da4
    db44:	000180f2 	.word	0x000180f2

0000db48 <preempt_calc>:

#if (RADIO_TICKER_PREEMPT_PART_US <= RADIO_TICKER_PREEMPT_PART_MIN_US)
static u32_t preempt_calc(struct shdr *hdr, u8_t ticker_id,
			  u32_t ticks_at_expire)
{
    db48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    db4a:	0014      	movs	r4, r2
    db4c:	000f      	movs	r7, r1
    db4e:	0006      	movs	r6, r0
	u32_t diff =
		ticker_ticks_diff_get(ticker_ticks_now_get(), ticks_at_expire);
    db50:	f7fe fabe 	bl	c0d0 <ticker_ticks_now_get>

#if (RADIO_TICKER_PREEMPT_PART_US <= RADIO_TICKER_PREEMPT_PART_MIN_US)
static u32_t preempt_calc(struct shdr *hdr, u8_t ticker_id,
			  u32_t ticks_at_expire)
{
	u32_t diff =
    db54:	0021      	movs	r1, r4
    db56:	f7fe fabf 	bl	c0d8 <ticker_ticks_diff_get>
		ticker_ticks_diff_get(ticker_ticks_now_get(), ticks_at_expire);

	diff += 3;
    db5a:	1cc5      	adds	r5, r0, #3
		}

		return 1;
	}

	return 0;
    db5c:	2400      	movs	r4, #0
{
	u32_t diff =
		ticker_ticks_diff_get(ticker_ticks_now_get(), ticks_at_expire);

	diff += 3;
	if (diff > TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US)) {
    db5e:	2d09      	cmp	r5, #9
    db60:	d90e      	bls.n	db80 <preempt_calc+0x38>
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_WORKER, 0);
    db62:	0021      	movs	r1, r4
    db64:	0020      	movs	r0, r4
    db66:	f7fe fdc7 	bl	c6f8 <mayfly_xtal_retain>

		prepare_normal_set(hdr, RADIO_TICKER_USER_ID_WORKER, ticker_id);
    db6a:	0021      	movs	r1, r4
    db6c:	0030      	movs	r0, r6
    db6e:	003a      	movs	r2, r7
    db70:	f7ff ffb0 	bl	dad4 <prepare_normal_set>

		diff += hdr->ticks_preempt_to_start;
    db74:	68b3      	ldr	r3, [r6, #8]
		if (diff <
			TICKER_US_TO_TICKS(RADIO_TICKER_PREEMPT_PART_MAX_US)) {
			hdr->ticks_preempt_to_start = diff;
		}

		return 1;
    db76:	3401      	adds	r4, #1
	if (diff > TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US)) {
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_WORKER, 0);

		prepare_normal_set(hdr, RADIO_TICKER_USER_ID_WORKER, ticker_id);

		diff += hdr->ticks_preempt_to_start;
    db78:	18e8      	adds	r0, r5, r3
		if (diff <
    db7a:	2826      	cmp	r0, #38	; 0x26
    db7c:	d800      	bhi.n	db80 <preempt_calc+0x38>
			TICKER_US_TO_TICKS(RADIO_TICKER_PREEMPT_PART_MAX_US)) {
			hdr->ticks_preempt_to_start = diff;
    db7e:	60b0      	str	r0, [r6, #8]

		return 1;
	}

	return 0;
}
    db80:	0020      	movs	r0, r4
    db82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000db84 <mayfly_xtal_stop_calc>:
 * close and issues a conn param req or does a conn update.
 *
 * @todo Detect drift for overlapping tickers.
 */
static void mayfly_xtal_stop_calc(void *params)
{
    db84:	b530      	push	{r4, r5, lr}
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    db86:	2302      	movs	r3, #2
	u32_t ticks_to_expire;
	u32_t ticks_current;
	u8_t ticker_id;
	u32_t ret;

	ticker_id = 0xff;
    db88:	2423      	movs	r4, #35	; 0x23
 * close and issues a conn param req or does a conn update.
 *
 * @todo Detect drift for overlapping tickers.
 */
static void mayfly_xtal_stop_calc(void *params)
{
    db8a:	b08d      	sub	sp, #52	; 0x34
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    db8c:	9309      	str	r3, [sp, #36]	; 0x24
	u32_t ticks_to_expire;
	u32_t ticks_current;
	u8_t ticker_id;
	u32_t ret;

	ticker_id = 0xff;
    db8e:	446c      	add	r4, sp
    db90:	33fd      	adds	r3, #253	; 0xfd
    db92:	7023      	strb	r3, [r4, #0]
	ticks_to_expire = 0;
    db94:	2300      	movs	r3, #0
    db96:	930a      	str	r3, [sp, #40]	; 0x28
	do {
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    db98:	ab09      	add	r3, sp, #36	; 0x24
    db9a:	9302      	str	r3, [sp, #8]
    db9c:	4b47      	ldr	r3, [pc, #284]	; (dcbc <mayfly_xtal_stop_calc+0x138>)
    db9e:	0022      	movs	r2, r4
    dba0:	9301      	str	r3, [sp, #4]
    dba2:	ab0a      	add	r3, sp, #40	; 0x28
    dba4:	9300      	str	r3, [sp, #0]
    dba6:	2101      	movs	r1, #1
    dba8:	ab0b      	add	r3, sp, #44	; 0x2c
    dbaa:	2000      	movs	r0, #0
    dbac:	f7fe fa22 	bl	bff4 <ticker_next_slot_get>
					   RADIO_TICKER_USER_ID_JOB, &ticker_id,
					   &ticks_current, &ticks_to_expire,
					   ticker_if_done, (void *)&ret_cb);

		if (ret == TICKER_STATUS_BUSY) {
    dbb0:	2802      	cmp	r0, #2
    dbb2:	d00b      	beq.n	dbcc <mayfly_xtal_stop_calc+0x48>
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
						 RADIO_TICKER_USER_ID_JOB);
			}
		}

		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    dbb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    dbb6:	2b00      	cmp	r3, #0
    dbb8:	d010      	beq.n	dbdc <mayfly_xtal_stop_calc+0x58>
    dbba:	4b41      	ldr	r3, [pc, #260]	; (dcc0 <mayfly_xtal_stop_calc+0x13c>)
    dbbc:	4a41      	ldr	r2, [pc, #260]	; (dcc4 <mayfly_xtal_stop_calc+0x140>)
    dbbe:	9301      	str	r3, [sp, #4]
    dbc0:	4b41      	ldr	r3, [pc, #260]	; (dcc8 <mayfly_xtal_stop_calc+0x144>)
    dbc2:	4942      	ldr	r1, [pc, #264]	; (dccc <mayfly_xtal_stop_calc+0x148>)
    dbc4:	9300      	str	r3, [sp, #0]
    dbc6:	4842      	ldr	r0, [pc, #264]	; (dcd0 <mayfly_xtal_stop_calc+0x14c>)
    dbc8:	4b42      	ldr	r3, [pc, #264]	; (dcd4 <mayfly_xtal_stop_calc+0x150>)
    dbca:	e049      	b.n	dc60 <mayfly_xtal_stop_calc+0xdc>
					   RADIO_TICKER_USER_ID_JOB, &ticker_id,
					   &ticks_current, &ticks_to_expire,
					   ticker_if_done, (void *)&ret_cb);

		if (ret == TICKER_STATUS_BUSY) {
			while (ret_cb == TICKER_STATUS_BUSY) {
    dbcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    dbce:	2b02      	cmp	r3, #2
    dbd0:	d1f0      	bne.n	dbb4 <mayfly_xtal_stop_calc+0x30>
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    dbd2:	2101      	movs	r1, #1
    dbd4:	2000      	movs	r0, #0
    dbd6:	f7fe fa6b 	bl	c0b0 <ticker_job_sched>
    dbda:	e7f7      	b.n	dbcc <mayfly_xtal_stop_calc+0x48>
						 RADIO_TICKER_USER_ID_JOB);
			}
		}

		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
	} while (ticker_id != 0xff &&
    dbdc:	7822      	ldrb	r2, [r4, #0]
		 ticker_id >= (RADIO_TICKER_ID_FIRST_CONNECTION +
			       _radio.connection_count));
    dbde:	2aff      	cmp	r2, #255	; 0xff
    dbe0:	d043      	beq.n	dc6a <mayfly_xtal_stop_calc+0xe6>
    dbe2:	4d3d      	ldr	r5, [pc, #244]	; (dcd8 <mayfly_xtal_stop_calc+0x154>)
    dbe4:	002b      	movs	r3, r5
    dbe6:	33ff      	adds	r3, #255	; 0xff
						 RADIO_TICKER_USER_ID_JOB);
			}
		}

		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
	} while (ticker_id != 0xff &&
    dbe8:	7b5b      	ldrb	r3, [r3, #13]
    dbea:	3307      	adds	r3, #7
    dbec:	429a      	cmp	r2, r3
    dbee:	dad3      	bge.n	db98 <mayfly_xtal_stop_calc+0x14>
		 ticker_id >= (RADIO_TICKER_ID_FIRST_CONNECTION +
			       _radio.connection_count));

	if ((ticker_id != 0xff) &&
    dbf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    dbf2:	2ba8      	cmp	r3, #168	; 0xa8
    dbf4:	d839      	bhi.n	dc6a <mayfly_xtal_stop_calc+0xe6>
	    (ticks_to_expire <
	     TICKER_US_TO_TICKS(CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD))) {
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_JOB, 1);
    dbf6:	2101      	movs	r1, #1
    dbf8:	0008      	movs	r0, r1
    dbfa:	f7fe fd7d 	bl	c6f8 <mayfly_xtal_retain>

		if (ticker_id >= RADIO_TICKER_ID_ADV) {
    dbfe:	7822      	ldrb	r2, [r4, #0]
    dc00:	2a04      	cmp	r2, #4
    dc02:	d958      	bls.n	dcb6 <mayfly_xtal_stop_calc+0x132>
			u32_t ticks_prepare_to_start;
			struct connection *conn = NULL;
			struct shdr *hdr = NULL;

			/* Select the role's scheduling header */
			if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    dc04:	2a06      	cmp	r2, #6
    dc06:	d950      	bls.n	dcaa <mayfly_xtal_stop_calc+0x126>
				conn = mem_get(_radio.conn_pool,
    dc08:	218c      	movs	r1, #140	; 0x8c
    dc0a:	3a07      	subs	r2, #7
    dc0c:	35fc      	adds	r5, #252	; 0xfc
    dc0e:	b292      	uxth	r2, r2
    dc10:	0049      	lsls	r1, r1, #1
    dc12:	68a8      	ldr	r0, [r5, #8]
    dc14:	f7fc fe73 	bl	a8fe <mem_get>
			}

			/* compensate for reduced next ticker's prepare or
			 * reduce next ticker's prepare.
			 */
			ticks_prepare_to_start =
    dc18:	6843      	ldr	r3, [r0, #4]
    dc1a:	6882      	ldr	r2, [r0, #8]
    dc1c:	429a      	cmp	r2, r3
    dc1e:	d200      	bcs.n	dc22 <mayfly_xtal_stop_calc+0x9e>
    dc20:	001a      	movs	r2, r3
				(hdr->ticks_active_to_start >
				 hdr->ticks_preempt_to_start) ?
				hdr->ticks_active_to_start :
				hdr->ticks_preempt_to_start;
			if ((hdr->ticks_xtal_to_start & ((u32_t)1 << 31)) != 0) {
    dc22:	6803      	ldr	r3, [r0, #0]
    dc24:	2b00      	cmp	r3, #0
    dc26:	db46      	blt.n	dcb6 <mayfly_xtal_stop_calc+0x132>
						    ticks_prepare_to_start);
			} else {
				/* Postpone the primary because we dont have
				 * to start xtal.
				 */
				if (hdr->ticks_xtal_to_start >
    dc28:	429a      	cmp	r2, r3
    dc2a:	d244      	bcs.n	dcb6 <mayfly_xtal_stop_calc+0x132>
						hdr->ticks_xtal_to_start -
						ticks_prepare_to_start;
					u32_t ticker_status;

					ticker_status =
						ticker_update(
    dc2c:	1a9b      	subs	r3, r3, r2
					u32_t ticks_drift_plus =
						hdr->ticks_xtal_to_start -
						ticks_prepare_to_start;
					u32_t ticker_status;

					ticker_status =
    dc2e:	7822      	ldrb	r2, [r4, #0]
    dc30:	9006      	str	r0, [sp, #24]
    dc32:	2000      	movs	r0, #0
    dc34:	4929      	ldr	r1, [pc, #164]	; (dcdc <mayfly_xtal_stop_calc+0x158>)
						ticker_update(
    dc36:	b29b      	uxth	r3, r3
					u32_t ticks_drift_plus =
						hdr->ticks_xtal_to_start -
						ticks_prepare_to_start;
					u32_t ticker_status;

					ticker_status =
    dc38:	9105      	str	r1, [sp, #20]
    dc3a:	9302      	str	r3, [sp, #8]
    dc3c:	9004      	str	r0, [sp, #16]
    dc3e:	9003      	str	r0, [sp, #12]
    dc40:	9001      	str	r0, [sp, #4]
    dc42:	9000      	str	r0, [sp, #0]
    dc44:	2101      	movs	r1, #1
    dc46:	f7fe f957 	bl	bef8 <ticker_update>
							      ticks_drift_plus, 0,
							      0, ticks_drift_plus,
							      0, 0,
							      prepare_reduced,
							      hdr);
					LL_ASSERT((TICKER_STATUS_SUCCESS ==
    dc4a:	2302      	movs	r3, #2
    dc4c:	4398      	bics	r0, r3
    dc4e:	d032      	beq.n	dcb6 <mayfly_xtal_stop_calc+0x132>
    dc50:	4b1b      	ldr	r3, [pc, #108]	; (dcc0 <mayfly_xtal_stop_calc+0x13c>)
    dc52:	4a1c      	ldr	r2, [pc, #112]	; (dcc4 <mayfly_xtal_stop_calc+0x140>)
    dc54:	9301      	str	r3, [sp, #4]
    dc56:	4b1c      	ldr	r3, [pc, #112]	; (dcc8 <mayfly_xtal_stop_calc+0x144>)
    dc58:	491c      	ldr	r1, [pc, #112]	; (dccc <mayfly_xtal_stop_calc+0x148>)
    dc5a:	9300      	str	r3, [sp, #0]
    dc5c:	4820      	ldr	r0, [pc, #128]	; (dce0 <mayfly_xtal_stop_calc+0x15c>)
    dc5e:	4b1d      	ldr	r3, [pc, #116]	; (dcd4 <mayfly_xtal_stop_calc+0x150>)
    dc60:	f7f3 fe8e 	bl	1980 <printk>
    dc64:	b662      	cpsie	i
    dc66:	2004      	movs	r0, #4
    dc68:	df02      	svc	2
				}
			}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_SCHED_ADVANCED */
		}
	} else {
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_JOB, 0);
    dc6a:	2100      	movs	r1, #0
    dc6c:	2001      	movs	r0, #1
    dc6e:	f7fe fd43 	bl	c6f8 <mayfly_xtal_retain>

		if ((ticker_id != 0xff) && (ticker_id >= RADIO_TICKER_ID_ADV)) {
    dc72:	7822      	ldrb	r2, [r4, #0]
    dc74:	1f53      	subs	r3, r2, #5
    dc76:	b2db      	uxtb	r3, r3
    dc78:	2bf9      	cmp	r3, #249	; 0xf9
    dc7a:	d81c      	bhi.n	dcb6 <mayfly_xtal_stop_calc+0x132>
    dc7c:	4b16      	ldr	r3, [pc, #88]	; (dcd8 <mayfly_xtal_stop_calc+0x154>)
			struct shdr *hdr = NULL;

			/* Select the role's scheduling header */
			if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    dc7e:	2a06      	cmp	r2, #6
    dc80:	d908      	bls.n	dc94 <mayfly_xtal_stop_calc+0x110>
				struct connection *conn;

				conn = mem_get(_radio.conn_pool,
    dc82:	218c      	movs	r1, #140	; 0x8c
    dc84:	33fc      	adds	r3, #252	; 0xfc
    dc86:	3a07      	subs	r2, #7
    dc88:	b292      	uxth	r2, r2
    dc8a:	0049      	lsls	r1, r1, #1
    dc8c:	6898      	ldr	r0, [r3, #8]
    dc8e:	f7fc fe36 	bl	a8fe <mem_get>
    dc92:	e005      	b.n	dca0 <mayfly_xtal_stop_calc+0x11c>
					       CONNECTION_T_SIZE,
					       (ticker_id -
						RADIO_TICKER_ID_FIRST_CONNECTION));
				hdr = &conn->hdr;
			} else if (ticker_id == RADIO_TICKER_ID_ADV) {
				hdr = &_radio.advertiser.hdr;
    dc94:	0018      	movs	r0, r3
    dc96:	3014      	adds	r0, #20
				conn = mem_get(_radio.conn_pool,
					       CONNECTION_T_SIZE,
					       (ticker_id -
						RADIO_TICKER_ID_FIRST_CONNECTION));
				hdr = &conn->hdr;
			} else if (ticker_id == RADIO_TICKER_ID_ADV) {
    dc98:	2a05      	cmp	r2, #5
    dc9a:	d001      	beq.n	dca0 <mayfly_xtal_stop_calc+0x11c>
				hdr = &_radio.advertiser.hdr;
			} else if (ticker_id == RADIO_TICKER_ID_SCAN) {
				hdr = &_radio.scanner.hdr;
    dc9c:	33cc      	adds	r3, #204	; 0xcc
    dc9e:	0018      	movs	r0, r3
			} else {
				LL_ASSERT(0);
			}

			/* Use normal prepare */
			prepare_normal_set(hdr, RADIO_TICKER_USER_ID_JOB,
    dca0:	7822      	ldrb	r2, [r4, #0]
    dca2:	2101      	movs	r1, #1
    dca4:	f7ff ff16 	bl	dad4 <prepare_normal_set>
					   ticker_id);
		}
	}
}
    dca8:	e005      	b.n	dcb6 <mayfly_xtal_stop_calc+0x132>
					       CONNECTION_T_SIZE,
					       (ticker_id -
						RADIO_TICKER_ID_FIRST_CONNECTION));
				hdr = &conn->hdr;
			} else if (ticker_id == RADIO_TICKER_ID_ADV) {
				hdr = &_radio.advertiser.hdr;
    dcaa:	0028      	movs	r0, r5
    dcac:	3014      	adds	r0, #20
				conn = mem_get(_radio.conn_pool,
					       CONNECTION_T_SIZE,
					       (ticker_id -
						RADIO_TICKER_ID_FIRST_CONNECTION));
				hdr = &conn->hdr;
			} else if (ticker_id == RADIO_TICKER_ID_ADV) {
    dcae:	2a05      	cmp	r2, #5
    dcb0:	d0b2      	beq.n	dc18 <mayfly_xtal_stop_calc+0x94>
				hdr = &_radio.advertiser.hdr;
			} else if (ticker_id == RADIO_TICKER_ID_SCAN) {
				hdr = &_radio.scanner.hdr;
    dcb2:	30b8      	adds	r0, #184	; 0xb8
    dcb4:	e7b0      	b.n	dc18 <mayfly_xtal_stop_calc+0x94>
			/* Use normal prepare */
			prepare_normal_set(hdr, RADIO_TICKER_USER_ID_JOB,
					   ticker_id);
		}
	}
}
    dcb6:	b00d      	add	sp, #52	; 0x34
    dcb8:	bd30      	pop	{r4, r5, pc}
    dcba:	46c0      	nop			; (mov r8, r8)
    dcbc:	0000c131 	.word	0x0000c131
    dcc0:	000154c4 	.word	0x000154c4
    dcc4:	00015484 	.word	0x00015484
    dcc8:	000154c9 	.word	0x000154c9
    dccc:	0001548b 	.word	0x0001548b
    dcd0:	00016f5b 	.word	0x00016f5b
    dcd4:	00018125 	.word	0x00018125
    dcd8:	200015c0 	.word	0x200015c0
    dcdc:	0000c135 	.word	0x0000c135
    dce0:	00016f88 	.word	0x00016f88

0000dce4 <radio_event_adv_prepare>:
			    0x555555);
}

void radio_event_adv_prepare(u32_t ticks_at_expire, u32_t remainder,
			     u16_t lazy, void *context)
{
    dce4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	ARG_UNUSED(lazy);
	ARG_UNUSED(context);

	DEBUG_RADIO_PREPARE_A(1);

	LL_ASSERT(!_radio.ticker_id_prepare);
    dce6:	4c11      	ldr	r4, [pc, #68]	; (dd2c <radio_event_adv_prepare+0x48>)
    dce8:	7b25      	ldrb	r5, [r4, #12]
    dcea:	b2ed      	uxtb	r5, r5
    dcec:	2d00      	cmp	r5, #0
    dcee:	d00c      	beq.n	dd0a <radio_event_adv_prepare+0x26>
    dcf0:	4b0f      	ldr	r3, [pc, #60]	; (dd30 <radio_event_adv_prepare+0x4c>)
    dcf2:	4a10      	ldr	r2, [pc, #64]	; (dd34 <radio_event_adv_prepare+0x50>)
    dcf4:	9301      	str	r3, [sp, #4]
    dcf6:	4b10      	ldr	r3, [pc, #64]	; (dd38 <radio_event_adv_prepare+0x54>)
    dcf8:	4910      	ldr	r1, [pc, #64]	; (dd3c <radio_event_adv_prepare+0x58>)
    dcfa:	9300      	str	r3, [sp, #0]
    dcfc:	4810      	ldr	r0, [pc, #64]	; (dd40 <radio_event_adv_prepare+0x5c>)
    dcfe:	4b11      	ldr	r3, [pc, #68]	; (dd44 <radio_event_adv_prepare+0x60>)
    dd00:	f7f3 fe3e 	bl	1980 <printk>
    dd04:	b662      	cpsie	i
    dd06:	2004      	movs	r0, #4
    dd08:	df02      	svc	2

	err = event_common_prepare(ticks_at_expire, remainder,
    dd0a:	9503      	str	r5, [sp, #12]
    dd0c:	4d0e      	ldr	r5, [pc, #56]	; (dd48 <radio_event_adv_prepare+0x64>)
    dd0e:	0023      	movs	r3, r4
    dd10:	9502      	str	r5, [sp, #8]
    dd12:	2505      	movs	r5, #5
    dd14:	0022      	movs	r2, r4
    dd16:	9501      	str	r5, [sp, #4]
    dd18:	69e6      	ldr	r6, [r4, #28]
    dd1a:	3318      	adds	r3, #24
    dd1c:	3214      	adds	r2, #20
    dd1e:	9600      	str	r6, [sp, #0]
    dd20:	f7ff f916 	bl	cf50 <event_common_prepare>
				   &_radio.advertiser.hdr.ticks_xtal_to_start,
				   &_radio.advertiser.hdr.ticks_active_to_start,
				   _radio.advertiser.hdr.ticks_preempt_to_start,
				   RADIO_TICKER_ID_ADV, event_adv, NULL);
	if (!err) {
    dd24:	2800      	cmp	r0, #0
    dd26:	d100      	bne.n	dd2a <radio_event_adv_prepare+0x46>
		_radio.ticker_id_prepare = RADIO_TICKER_ID_ADV;
    dd28:	7325      	strb	r5, [r4, #12]
	}

	DEBUG_RADIO_PREPARE_A(0);
}
    dd2a:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
    dd2c:	200015c0 	.word	0x200015c0
    dd30:	000154c4 	.word	0x000154c4
    dd34:	00015484 	.word	0x00015484
    dd38:	000154c9 	.word	0x000154c9
    dd3c:	0001548b 	.word	0x0001548b
    dd40:	00016fd6 	.word	0x00016fd6
    dd44:	0001838d 	.word	0x0001838d
    dd48:	0000dd99 	.word	0x0000dd99

0000dd4c <adv_scan_configure.constprop.30>:
	radio_reset();
	radio_tx_power_set(0);
	radio_isr_set(isr);
}

static void adv_scan_configure(u8_t phy, u8_t flags)
    dd4c:	b513      	push	{r0, r1, r4, lr}
    dd4e:	0004      	movs	r4, r0
{
	u32_t aa = 0x8e89bed6;
    dd50:	4b0d      	ldr	r3, [pc, #52]	; (dd88 <adv_scan_configure.constprop.30+0x3c>)
    dd52:	9301      	str	r3, [sp, #4]
	return access_addr;
}

static void adv_scan_conn_configure(void)
{
	radio_reset();
    dd54:	f7fc fef8 	bl	ab48 <radio_reset>
	radio_tx_power_set(0);
    dd58:	2000      	movs	r0, #0
    dd5a:	f7fc ff11 	bl	ab80 <radio_tx_power_set>
	radio_isr_set(isr);
    dd5e:	480b      	ldr	r0, [pc, #44]	; (dd8c <adv_scan_configure.constprop.30+0x40>)
    dd60:	f7fc feda 	bl	ab18 <radio_isr_set>
static void adv_scan_configure(u8_t phy, u8_t flags)
{
	u32_t aa = 0x8e89bed6;

	adv_scan_conn_configure();
	radio_phy_set(phy, flags);
    dd64:	2101      	movs	r1, #1
    dd66:	0020      	movs	r0, r4
    dd68:	f7fc fefe 	bl	ab68 <radio_phy_set>
	radio_aa_set((u8_t *)&aa);
	radio_pkt_configure(8, PDU_AC_PAYLOAD_SIZE_MAX, (phy << 1));
    dd6c:	0064      	lsls	r4, r4, #1
{
	u32_t aa = 0x8e89bed6;

	adv_scan_conn_configure();
	radio_phy_set(phy, flags);
	radio_aa_set((u8_t *)&aa);
    dd6e:	a801      	add	r0, sp, #4
    dd70:	f7fc ff1e 	bl	abb0 <radio_aa_set>
	radio_pkt_configure(8, PDU_AC_PAYLOAD_SIZE_MAX, (phy << 1));
    dd74:	b2e2      	uxtb	r2, r4
    dd76:	2125      	movs	r1, #37	; 0x25
    dd78:	2008      	movs	r0, #8
    dd7a:	f7fc ff37 	bl	abec <radio_pkt_configure>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    dd7e:	4904      	ldr	r1, [pc, #16]	; (dd90 <adv_scan_configure.constprop.30+0x44>)
    dd80:	4804      	ldr	r0, [pc, #16]	; (dd94 <adv_scan_configure.constprop.30+0x48>)
    dd82:	f7fc ffa3 	bl	accc <radio_crc_configure>
			    0x555555);
}
    dd86:	bd13      	pop	{r0, r1, r4, pc}
    dd88:	8e89bed6 	.word	0x8e89bed6
    dd8c:	0000f609 	.word	0x0000f609
    dd90:	00555555 	.word	0x00555555
    dd94:	0000065b 	.word	0x0000065b

0000dd98 <event_adv>:
	chan_set(37 + chan);
}

static void event_adv(u32_t ticks_at_expire, u32_t remainder,
		      u16_t lazy, void *context)
{
    dd98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	ARG_UNUSED(lazy);
	ARG_UNUSED(context);

	DEBUG_RADIO_START_A(1);

	LL_ASSERT(_radio.role == ROLE_NONE);
    dd9a:	4b3a      	ldr	r3, [pc, #232]	; (de84 <event_adv+0xec>)
	chan_set(37 + chan);
}

static void event_adv(u32_t ticks_at_expire, u32_t remainder,
		      u16_t lazy, void *context)
{
    dd9c:	0005      	movs	r5, r0
	ARG_UNUSED(lazy);
	ARG_UNUSED(context);

	DEBUG_RADIO_START_A(1);

	LL_ASSERT(_radio.role == ROLE_NONE);
    dd9e:	7bda      	ldrb	r2, [r3, #15]
    dda0:	001c      	movs	r4, r3
    dda2:	b2d2      	uxtb	r2, r2
    dda4:	2a00      	cmp	r2, #0
    dda6:	d008      	beq.n	ddba <event_adv+0x22>
    dda8:	4b37      	ldr	r3, [pc, #220]	; (de88 <event_adv+0xf0>)
    ddaa:	4a38      	ldr	r2, [pc, #224]	; (de8c <event_adv+0xf4>)
    ddac:	9301      	str	r3, [sp, #4]
    ddae:	4b38      	ldr	r3, [pc, #224]	; (de90 <event_adv+0xf8>)
    ddb0:	4938      	ldr	r1, [pc, #224]	; (de94 <event_adv+0xfc>)
    ddb2:	9300      	str	r3, [sp, #0]
    ddb4:	4838      	ldr	r0, [pc, #224]	; (de98 <event_adv+0x100>)
    ddb6:	4b39      	ldr	r3, [pc, #228]	; (de9c <event_adv+0x104>)
    ddb8:	e00b      	b.n	ddd2 <event_adv+0x3a>
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV);
    ddba:	7b1b      	ldrb	r3, [r3, #12]
    ddbc:	b2db      	uxtb	r3, r3
    ddbe:	2b05      	cmp	r3, #5
    ddc0:	d00c      	beq.n	dddc <event_adv+0x44>
    ddc2:	4b31      	ldr	r3, [pc, #196]	; (de88 <event_adv+0xf0>)
    ddc4:	4a31      	ldr	r2, [pc, #196]	; (de8c <event_adv+0xf4>)
    ddc6:	9301      	str	r3, [sp, #4]
    ddc8:	4b31      	ldr	r3, [pc, #196]	; (de90 <event_adv+0xf8>)
    ddca:	4932      	ldr	r1, [pc, #200]	; (de94 <event_adv+0xfc>)
    ddcc:	9300      	str	r3, [sp, #0]
    ddce:	4834      	ldr	r0, [pc, #208]	; (dea0 <event_adv+0x108>)
    ddd0:	4b32      	ldr	r3, [pc, #200]	; (de9c <event_adv+0x104>)
    ddd2:	f7f3 fdd5 	bl	1980 <printk>
    ddd6:	b662      	cpsie	i
    ddd8:	2004      	movs	r0, #4
    ddda:	df02      	svc	2
	/** @todo check if XTAL is started,
	 * options 1: abort Radio Start,
	 * 2: wait for XTAL start.
	 */

	_radio.role = ROLE_ADV;
    dddc:	2601      	movs	r6, #1
	_radio.ticker_id_event = RADIO_TICKER_ID_ADV;
	_radio.ticks_anchor = ticks_at_expire;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
	/* TODO: if coded we use S8? */
	adv_scan_configure(_radio.advertiser.phy_p, 1);
    ddde:	1da7      	adds	r7, r4, #6
	 */

	_radio.role = ROLE_ADV;
	_radio.ticker_id_prepare = 0;
	_radio.ticker_id_event = RADIO_TICKER_ID_ADV;
	_radio.ticks_anchor = ticks_at_expire;
    dde0:	6060      	str	r0, [r4, #4]

#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
	/* TODO: if coded we use S8? */
	adv_scan_configure(_radio.advertiser.phy_p, 1);
    dde2:	7ff8      	ldrb	r0, [r7, #31]
	/** @todo check if XTAL is started,
	 * options 1: abort Radio Start,
	 * 2: wait for XTAL start.
	 */

	_radio.role = ROLE_ADV;
    dde4:	73e6      	strb	r6, [r4, #15]
	_radio.ticker_id_event = RADIO_TICKER_ID_ADV;
	_radio.ticks_anchor = ticks_at_expire;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
	/* TODO: if coded we use S8? */
	adv_scan_configure(_radio.advertiser.phy_p, 1);
    dde6:	0740      	lsls	r0, r0, #29
    dde8:	0f40      	lsrs	r0, r0, #29
	 * options 1: abort Radio Start,
	 * 2: wait for XTAL start.
	 */

	_radio.role = ROLE_ADV;
	_radio.ticker_id_prepare = 0;
    ddea:	7322      	strb	r2, [r4, #12]
	_radio.ticker_id_event = RADIO_TICKER_ID_ADV;
    ddec:	7363      	strb	r3, [r4, #13]
	_radio.ticks_anchor = ticks_at_expire;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
	/* TODO: if coded we use S8? */
	adv_scan_configure(_radio.advertiser.phy_p, 1);
    ddee:	f7ff ffad 	bl	dd4c <adv_scan_configure.constprop.30>
#else /* !CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */
	adv_scan_configure(0, 0);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */

	_radio.advertiser.chan_map_current = _radio.advertiser.chan_map;
    ddf2:	200e      	movs	r0, #14
    ddf4:	7ffb      	ldrb	r3, [r7, #31]
    ddf6:	1d61      	adds	r1, r4, #5
    ddf8:	069b      	lsls	r3, r3, #26
    ddfa:	0f5b      	lsrs	r3, r3, #29
    ddfc:	005a      	lsls	r2, r3, #1
    ddfe:	7fcb      	ldrb	r3, [r1, #31]
    de00:	4383      	bics	r3, r0
    de02:	4313      	orrs	r3, r2
    de04:	77cb      	strb	r3, [r1, #31]
	adv_setup();
    de06:	f7ff fa63 	bl	d2d0 <adv_setup>

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	if (ctrl_rl_enabled()) {
    de0a:	f004 fde1 	bl	129d0 <ctrl_rl_enabled>
    de0e:	223f      	movs	r2, #63	; 0x3f
    de10:	7ffb      	ldrb	r3, [r7, #31]
		struct ll_filter *filter =
    de12:	4393      	bics	r3, r2

	_radio.advertiser.chan_map_current = _radio.advertiser.chan_map;
	adv_setup();

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	if (ctrl_rl_enabled()) {
    de14:	2800      	cmp	r0, #0
    de16:	d003      	beq.n	de20 <event_adv+0x88>
		struct ll_filter *filter =
    de18:	1e58      	subs	r0, r3, #1
    de1a:	4183      	sbcs	r3, r0
    de1c:	b2d8      	uxtb	r0, r3
    de1e:	e002      	b.n	de26 <event_adv+0x8e>
				       filter->addr_type_bitmask,
				       (u8_t *)filter->bdaddr);
	} else
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */
	/* Setup Radio Filter */
	if (_radio.advertiser.filter_policy) {
    de20:	2b00      	cmp	r3, #0
    de22:	d007      	beq.n	de34 <event_adv+0x9c>

		struct ll_filter *wl = ctrl_filter_get(true);
    de24:	0030      	movs	r0, r6
    de26:	f004 fc89 	bl	1273c <ctrl_filter_get>

		radio_filter_configure(wl->enable_bitmask,
				       wl->addr_type_bitmask,
				       (u8_t *)wl->bdaddr);
    de2a:	1c82      	adds	r2, r0, #2
	/* Setup Radio Filter */
	if (_radio.advertiser.filter_policy) {

		struct ll_filter *wl = ctrl_filter_get(true);

		radio_filter_configure(wl->enable_bitmask,
    de2c:	7841      	ldrb	r1, [r0, #1]
    de2e:	7800      	ldrb	r0, [r0, #0]
    de30:	f7fc ffaa 	bl	ad88 <radio_filter_configure>
				       wl->addr_type_bitmask,
				       (u8_t *)wl->bdaddr);
	}

	radio_tmr_start(1,
    de34:	0029      	movs	r1, r5
    de36:	68a2      	ldr	r2, [r4, #8]
    de38:	3109      	adds	r1, #9
    de3a:	2001      	movs	r0, #1
    de3c:	f7fd f816 	bl	ae6c <radio_tmr_start>
			ticks_at_expire +
			TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US),
			_radio.remainder_anchor);
	radio_tmr_end_capture();
    de40:	f7fd f8d8 	bl	aff4 <radio_tmr_end_capture>

#if (defined(CONFIG_BLUETOOTH_CONTROLLER_XTAL_ADVANCED) && \
     (RADIO_TICKER_PREEMPT_PART_US <= RADIO_TICKER_PREEMPT_PART_MIN_US))
	/* check if preempt to start has changed */
	if (preempt_calc(&_radio.advertiser.hdr, RADIO_TICKER_ID_ADV,
    de44:	0020      	movs	r0, r4
    de46:	002a      	movs	r2, r5
    de48:	3014      	adds	r0, #20
    de4a:	2105      	movs	r1, #5
    de4c:	f7ff fe7c 	bl	db48 <preempt_calc>
    de50:	2800      	cmp	r0, #0
    de52:	d004      	beq.n	de5e <event_adv+0xc6>
			 ticks_at_expire) != 0) {
		_radio.state = STATE_STOP;
    de54:	2304      	movs	r3, #4
    de56:	7423      	strb	r3, [r4, #16]
		radio_disable();
    de58:	f7fc ff0a 	bl	ac70 <radio_disable>
    de5c:	e010      	b.n	de80 <event_adv+0xe8>
	{
	/* Ticker Job Silence */
#if (RADIO_TICKER_USER_ID_WORKER_PRIO == RADIO_TICKER_USER_ID_JOB_PRIO)
		u32_t ticker_status;

		ticker_status =
    de5e:	0003      	movs	r3, r0
    de60:	4a10      	ldr	r2, [pc, #64]	; (dea4 <event_adv+0x10c>)
    de62:	0001      	movs	r1, r0
    de64:	f7fe f8f8 	bl	c058 <ticker_job_idle_get>
		    ticker_job_idle_get(RADIO_TICKER_INSTANCE_ID_RADIO,
					RADIO_TICKER_USER_ID_WORKER,
					ticker_job_disable, NULL);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    de68:	2302      	movs	r3, #2
    de6a:	4398      	bics	r0, r3
    de6c:	d008      	beq.n	de80 <event_adv+0xe8>
    de6e:	4b06      	ldr	r3, [pc, #24]	; (de88 <event_adv+0xf0>)
    de70:	4a06      	ldr	r2, [pc, #24]	; (de8c <event_adv+0xf4>)
    de72:	9301      	str	r3, [sp, #4]
    de74:	4b06      	ldr	r3, [pc, #24]	; (de90 <event_adv+0xf8>)
    de76:	4907      	ldr	r1, [pc, #28]	; (de94 <event_adv+0xfc>)
    de78:	9300      	str	r3, [sp, #0]
    de7a:	480b      	ldr	r0, [pc, #44]	; (dea8 <event_adv+0x110>)
    de7c:	4b07      	ldr	r3, [pc, #28]	; (de9c <event_adv+0x104>)
    de7e:	e7a8      	b.n	ddd2 <event_adv+0x3a>
			  (ticker_status == TICKER_STATUS_BUSY));
#endif
	}

	DEBUG_RADIO_START_A(0);
}
    de80:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    de82:	46c0      	nop			; (mov r8, r8)
    de84:	200015c0 	.word	0x200015c0
    de88:	000154c4 	.word	0x000154c4
    de8c:	00015484 	.word	0x00015484
    de90:	000154c9 	.word	0x000154c9
    de94:	0001548b 	.word	0x0001548b
    de98:	00017011 	.word	0x00017011
    de9c:	00018288 	.word	0x00018288
    dea0:	0001708a 	.word	0x0001708a
    dea4:	0000cbcd 	.word	0x0000cbcd
    dea8:	00016da4 	.word	0x00016da4

0000deac <mayfly_xtal_start>:
static void mayfly_xtal_start(void *params)
{
	ARG_UNUSED(params);

	/* turn on 16MHz clock, non-blocking mode. */
	clock_control_on(_radio.hf_clock, NULL);
    deac:	4b03      	ldr	r3, [pc, #12]	; (debc <mayfly_xtal_start+0x10>)
				&s_mfy_radio_inactive);
	LL_ASSERT(!retval);
}

static void mayfly_xtal_start(void *params)
{
    deae:	b510      	push	{r4, lr}
	ARG_UNUSED(params);

	/* turn on 16MHz clock, non-blocking mode. */
	clock_control_on(_radio.hf_clock, NULL);
    deb0:	6818      	ldr	r0, [r3, #0]
    deb2:	2100      	movs	r1, #0
    deb4:	6843      	ldr	r3, [r0, #4]
    deb6:	681b      	ldr	r3, [r3, #0]
    deb8:	4798      	blx	r3
}
    deba:	bd10      	pop	{r4, pc}
    debc:	200015c0 	.word	0x200015c0

0000dec0 <mayfly_xtal_stop>:

static void mayfly_xtal_stop(void *params)
{
	ARG_UNUSED(params);

	clock_control_off(_radio.hf_clock, NULL);
    dec0:	4b03      	ldr	r3, [pc, #12]	; (ded0 <mayfly_xtal_stop+0x10>)
				&s_mfy_xtal_start);
	LL_ASSERT(!retval);
}

static void mayfly_xtal_stop(void *params)
{
    dec2:	b510      	push	{r4, lr}
	ARG_UNUSED(params);

	clock_control_off(_radio.hf_clock, NULL);
    dec4:	6818      	ldr	r0, [r3, #0]
static inline int clock_control_off(struct device *dev,
				    clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->off(dev, sys);
    dec6:	2100      	movs	r1, #0
    dec8:	6843      	ldr	r3, [r0, #4]
    deca:	685b      	ldr	r3, [r3, #4]
    decc:	4798      	blx	r3

	DEBUG_RADIO_CLOSE(0);
}
    dece:	bd10      	pop	{r4, pc}
    ded0:	200015c0 	.word	0x200015c0

0000ded4 <chan_sel_2>:
	return prn_e;
}

static u8_t chan_sel_2(u16_t counter, u16_t chan_id, u8_t *chan_map,
		       u8_t chan_count)
{
    ded4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    ded6:	9301      	str	r3, [sp, #4]
	u8_t o;

	o = 0;
	for (iterate = 0; iterate < 8; iterate++) {
		o <<= 1;
		o |= (i & 1);
    ded8:	2301      	movs	r3, #1
	return prn_e;
}

static u8_t chan_sel_2(u16_t counter, u16_t chan_id, u8_t *chan_map,
		       u8_t chan_count)
{
    deda:	0014      	movs	r4, r2
static u16_t chan_prn(u16_t counter, u16_t chan_id)
{
	u8_t iterate;
	u16_t prn_e;

	prn_e = counter ^ chan_id;
    dedc:	2603      	movs	r6, #3
	u8_t o;

	o = 0;
	for (iterate = 0; iterate < 8; iterate++) {
		o <<= 1;
		o |= (i & 1);
    dede:	469c      	mov	ip, r3
static u16_t chan_prn(u16_t counter, u16_t chan_id)
{
	u8_t iterate;
	u16_t prn_e;

	prn_e = counter ^ chan_id;
    dee0:	4048      	eors	r0, r1
	return o;
}

static u16_t chan_perm(u16_t i)
{
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    dee2:	2308      	movs	r3, #8
static u8_t chan_rev_8(u8_t i)
{
	u8_t iterate;
	u8_t o;

	o = 0;
    dee4:	2200      	movs	r2, #0
	return o;
}

static u16_t chan_perm(u16_t i)
{
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    dee6:	0a05      	lsrs	r5, r0, #8
	u8_t o;

	o = 0;
	for (iterate = 0; iterate < 8; iterate++) {
		o <<= 1;
		o |= (i & 1);
    dee8:	4667      	mov	r7, ip
    deea:	0052      	lsls	r2, r2, #1
    deec:	402f      	ands	r7, r5
    deee:	3b01      	subs	r3, #1
    def0:	433a      	orrs	r2, r7
    def2:	b2db      	uxtb	r3, r3
    def4:	b2d2      	uxtb	r2, r2
		i >>= 1;
    def6:	086d      	lsrs	r5, r5, #1
{
	u8_t iterate;
	u8_t o;

	o = 0;
	for (iterate = 0; iterate < 8; iterate++) {
    def8:	2b00      	cmp	r3, #0
    defa:	d1f5      	bne.n	dee8 <chan_sel_2+0x14>
	return o;
}

static u16_t chan_perm(u16_t i)
{
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    defc:	2708      	movs	r7, #8
    defe:	0212      	lsls	r2, r2, #8
    df00:	b212      	sxth	r2, r2
    df02:	b2c0      	uxtb	r0, r0
	u8_t o;

	o = 0;
	for (iterate = 0; iterate < 8; iterate++) {
		o <<= 1;
		o |= (i & 1);
    df04:	4665      	mov	r5, ip
    df06:	005b      	lsls	r3, r3, #1
    df08:	4005      	ands	r5, r0
    df0a:	3f01      	subs	r7, #1
    df0c:	432b      	orrs	r3, r5
    df0e:	b2ff      	uxtb	r7, r7
    df10:	b2db      	uxtb	r3, r3
		i >>= 1;
    df12:	0840      	lsrs	r0, r0, #1
{
	u8_t iterate;
	u8_t o;

	o = 0;
	for (iterate = 0; iterate < 8; iterate++) {
    df14:	2f00      	cmp	r7, #0
    df16:	d1f5      	bne.n	df04 <chan_sel_2+0x30>
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
}

static u16_t chan_mam(u16_t a, u16_t b)
{
	return ((u32_t)a * 17 + b) & 0xFFFF;
    df18:	431a      	orrs	r2, r3
    df1a:	0010      	movs	r0, r2
    df1c:	2311      	movs	r3, #17
    df1e:	4358      	muls	r0, r3
    df20:	3e01      	subs	r6, #1
    df22:	1808      	adds	r0, r1, r0
    df24:	b2f6      	uxtb	r6, r6
    df26:	b280      	uxth	r0, r0
	u8_t iterate;
	u16_t prn_e;

	prn_e = counter ^ chan_id;

	for (iterate = 0; iterate < 3; iterate++) {
    df28:	2e00      	cmp	r6, #0
    df2a:	d1da      	bne.n	dee2 <chan_sel_2+0xe>
		prn_e = chan_perm(prn_e);
		prn_e = chan_mam(prn_e, chan_id);
	}

	prn_e ^= chan_id;
    df2c:	4041      	eors	r1, r0
    df2e:	000e      	movs	r6, r1
{
	u8_t chan_next;
	u16_t prn_e;

	prn_e = chan_prn(counter, chan_id);
	chan_next = prn_e % 37;
    df30:	2125      	movs	r1, #37	; 0x25
    df32:	0030      	movs	r0, r6
    df34:	f7f2 f9ba 	bl	2ac <__aeabi_uidivmod>

	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    df38:	2207      	movs	r2, #7
{
	u8_t chan_next;
	u16_t prn_e;

	prn_e = chan_prn(counter, chan_id);
	chan_next = prn_e % 37;
    df3a:	b2c8      	uxtb	r0, r1

	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    df3c:	08c3      	lsrs	r3, r0, #3
    df3e:	5ce3      	ldrb	r3, [r4, r3]
    df40:	4002      	ands	r2, r0
    df42:	4113      	asrs	r3, r2
    df44:	2201      	movs	r2, #1
    df46:	4213      	tst	r3, r2
    df48:	d105      	bne.n	df56 <chan_sel_2+0x82>
		u8_t chan_index;

		chan_index = ((u32_t)chan_count * prn_e) >> 16;
		chan_next = chan_sel_remap(chan_map, chan_index);
    df4a:	9901      	ldr	r1, [sp, #4]
    df4c:	0020      	movs	r0, r4
    df4e:	4371      	muls	r1, r6
    df50:	0c09      	lsrs	r1, r1, #16
    df52:	f7fe f8fe 	bl	c152 <chan_sel_remap>
	} else {
		/* channel can be used, return it */
	}

	return chan_next;
}
    df56:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000df58 <connection_configure>:
					   conn->handle;
	}
}

static void connection_configure(struct connection *conn)
{
    df58:	b510      	push	{r4, lr}
    df5a:	0004      	movs	r4, r0
	return access_addr;
}

static void adv_scan_conn_configure(void)
{
	radio_reset();
    df5c:	f7fc fdf4 	bl	ab48 <radio_reset>
	radio_tx_power_set(0);
    df60:	2000      	movs	r0, #0
    df62:	f7fc fe0d 	bl	ab80 <radio_tx_power_set>
	radio_isr_set(isr);
    df66:	4809      	ldr	r0, [pc, #36]	; (df8c <connection_configure+0x34>)
    df68:	f7fc fdd6 	bl	ab18 <radio_isr_set>
}

static void connection_configure(struct connection *conn)
{
	adv_scan_conn_configure();
	radio_aa_set(conn->access_addr);
    df6c:	0020      	movs	r0, r4
    df6e:	3010      	adds	r0, #16
    df70:	f7fc fe1e 	bl	abb0 <radio_aa_set>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    df74:	7da1      	ldrb	r1, [r4, #22]
    df76:	7d63      	ldrb	r3, [r4, #21]
    df78:	0409      	lsls	r1, r1, #16
    df7a:	021b      	lsls	r3, r3, #8
    df7c:	4319      	orrs	r1, r3
    df7e:	7d23      	ldrb	r3, [r4, #20]
    df80:	4803      	ldr	r0, [pc, #12]	; (df90 <connection_configure+0x38>)
    df82:	4319      	orrs	r1, r3
    df84:	f7fc fea2 	bl	accc <radio_crc_configure>
			    (((u32_t)conn->crc_init[2] << 16) |
			     ((u32_t)conn->crc_init[1] << 8) |
			     ((u32_t)conn->crc_init[0])));
}
    df88:	bd10      	pop	{r4, pc}
    df8a:	46c0      	nop			; (mov r8, r8)
    df8c:	0000f609 	.word	0x0000f609
    df90:	0000065b 	.word	0x0000065b

0000df94 <event_slave>:
	DEBUG_RADIO_PREPARE_S(0);
}

static void event_slave(u32_t ticks_at_expire, u32_t remainder, u16_t lazy,
			void *context)
{
    df94:	b5f0      	push	{r4, r5, r6, r7, lr}
	ARG_UNUSED(remainder);
	ARG_UNUSED(lazy);

	DEBUG_RADIO_START_S(1);

	LL_ASSERT(_radio.role == ROLE_NONE);
    df96:	4a6b      	ldr	r2, [pc, #428]	; (e144 <event_slave+0x1b0>)
	DEBUG_RADIO_PREPARE_S(0);
}

static void event_slave(u32_t ticks_at_expire, u32_t remainder, u16_t lazy,
			void *context)
{
    df98:	001c      	movs	r4, r3
	ARG_UNUSED(remainder);
	ARG_UNUSED(lazy);

	DEBUG_RADIO_START_S(1);

	LL_ASSERT(_radio.role == ROLE_NONE);
    df9a:	7bd3      	ldrb	r3, [r2, #15]
	DEBUG_RADIO_PREPARE_S(0);
}

static void event_slave(u32_t ticks_at_expire, u32_t remainder, u16_t lazy,
			void *context)
{
    df9c:	b085      	sub	sp, #20
	ARG_UNUSED(remainder);
	ARG_UNUSED(lazy);

	DEBUG_RADIO_START_S(1);

	LL_ASSERT(_radio.role == ROLE_NONE);
    df9e:	b2db      	uxtb	r3, r3
	DEBUG_RADIO_PREPARE_S(0);
}

static void event_slave(u32_t ticks_at_expire, u32_t remainder, u16_t lazy,
			void *context)
{
    dfa0:	0006      	movs	r6, r0
    dfa2:	0015      	movs	r5, r2
	ARG_UNUSED(remainder);
	ARG_UNUSED(lazy);

	DEBUG_RADIO_START_S(1);

	LL_ASSERT(_radio.role == ROLE_NONE);
    dfa4:	2b00      	cmp	r3, #0
    dfa6:	d008      	beq.n	dfba <event_slave+0x26>
    dfa8:	4b67      	ldr	r3, [pc, #412]	; (e148 <event_slave+0x1b4>)
    dfaa:	4a68      	ldr	r2, [pc, #416]	; (e14c <event_slave+0x1b8>)
    dfac:	9301      	str	r3, [sp, #4]
    dfae:	4b68      	ldr	r3, [pc, #416]	; (e150 <event_slave+0x1bc>)
    dfb0:	4968      	ldr	r1, [pc, #416]	; (e154 <event_slave+0x1c0>)
    dfb2:	9300      	str	r3, [sp, #0]
    dfb4:	4868      	ldr	r0, [pc, #416]	; (e158 <event_slave+0x1c4>)
    dfb6:	4b69      	ldr	r3, [pc, #420]	; (e15c <event_slave+0x1c8>)
    dfb8:	e00d      	b.n	dfd6 <event_slave+0x42>

	conn = (struct connection *)context;
	LL_ASSERT(_radio.ticker_id_prepare ==
    dfba:	7b12      	ldrb	r2, [r2, #12]
    dfbc:	8c21      	ldrh	r1, [r4, #32]
    dfbe:	b2d2      	uxtb	r2, r2
    dfc0:	3107      	adds	r1, #7
    dfc2:	428a      	cmp	r2, r1
    dfc4:	d00c      	beq.n	dfe0 <event_slave+0x4c>
    dfc6:	4b60      	ldr	r3, [pc, #384]	; (e148 <event_slave+0x1b4>)
    dfc8:	4a60      	ldr	r2, [pc, #384]	; (e14c <event_slave+0x1b8>)
    dfca:	9301      	str	r3, [sp, #4]
    dfcc:	4b60      	ldr	r3, [pc, #384]	; (e150 <event_slave+0x1bc>)
    dfce:	4961      	ldr	r1, [pc, #388]	; (e154 <event_slave+0x1c0>)
    dfd0:	9300      	str	r3, [sp, #0]
    dfd2:	4863      	ldr	r0, [pc, #396]	; (e160 <event_slave+0x1cc>)
    dfd4:	4b61      	ldr	r3, [pc, #388]	; (e15c <event_slave+0x1c8>)
    dfd6:	f7f3 fcd3 	bl	1980 <printk>
    dfda:	b662      	cpsie	i
    dfdc:	2004      	movs	r0, #4
    dfde:	df02      	svc	2
		  (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle));

	_radio.role = ROLE_SLAVE;
    dfe0:	2103      	movs	r1, #3
	_radio.state = STATE_RX;
	_radio.ticker_id_prepare = 0;
	_radio.ticker_id_event =
    dfe2:	b2d2      	uxtb	r2, r2

	conn = (struct connection *)context;
	LL_ASSERT(_radio.ticker_id_prepare ==
		  (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle));

	_radio.role = ROLE_SLAVE;
    dfe4:	73e9      	strb	r1, [r5, #15]
		(RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
	_radio.ticks_anchor = ticks_at_expire;
	_radio.packet_counter = 0;
	_radio.crc_expire = 0;

	_radio.conn_curr = conn;
    dfe6:	002f      	movs	r7, r5
	LL_ASSERT(_radio.ticker_id_prepare ==
		  (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle));

	_radio.role = ROLE_SLAVE;
	_radio.state = STATE_RX;
	_radio.ticker_id_prepare = 0;
    dfe8:	732b      	strb	r3, [r5, #12]
	_radio.ticker_id_event =
    dfea:	736a      	strb	r2, [r5, #13]
		(RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
	_radio.ticks_anchor = ticks_at_expire;
	_radio.packet_counter = 0;
    dfec:	002a      	movs	r2, r5
	conn = (struct connection *)context;
	LL_ASSERT(_radio.ticker_id_prepare ==
		  (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle));

	_radio.role = ROLE_SLAVE;
	_radio.state = STATE_RX;
    dfee:	3902      	subs	r1, #2
	_radio.ticker_id_prepare = 0;
	_radio.ticker_id_event =
		(RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
	_radio.ticks_anchor = ticks_at_expire;
	_radio.packet_counter = 0;
    dff0:	32ff      	adds	r2, #255	; 0xff
	_radio.crc_expire = 0;

	_radio.conn_curr = conn;
    dff2:	37fc      	adds	r7, #252	; 0xfc
	_radio.state = STATE_RX;
	_radio.ticker_id_prepare = 0;
	_radio.ticker_id_event =
		(RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
	_radio.ticks_anchor = ticks_at_expire;
	_radio.packet_counter = 0;
    dff4:	7553      	strb	r3, [r2, #21]
	_radio.crc_expire = 0;
    dff6:	7593      	strb	r3, [r2, #22]

	_radio.conn_curr = conn;
    dff8:	617c      	str	r4, [r7, #20]
	conn = (struct connection *)context;
	LL_ASSERT(_radio.ticker_id_prepare ==
		  (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle));

	_radio.role = ROLE_SLAVE;
	_radio.state = STATE_RX;
    dffa:	7429      	strb	r1, [r5, #16]
	_radio.ticker_id_prepare = 0;
	_radio.ticker_id_event =
		(RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
	_radio.ticks_anchor = ticks_at_expire;
    dffc:	6068      	str	r0, [r5, #4]
	_radio.packet_counter = 0;
	_radio.crc_expire = 0;

	_radio.conn_curr = conn;

	conn->latency_event = conn->latency_prepare;
    dffe:	8d22      	ldrh	r2, [r4, #40]	; 0x28
	conn->latency_prepare = 0;

	connection_configure(conn);
    e000:	0020      	movs	r0, r4
	_radio.packet_counter = 0;
	_radio.crc_expire = 0;

	_radio.conn_curr = conn;

	conn->latency_event = conn->latency_prepare;
    e002:	8562      	strh	r2, [r4, #42]	; 0x2a
	conn->latency_prepare = 0;
    e004:	8523      	strh	r3, [r4, #40]	; 0x28

	connection_configure(conn);
    e006:	f7ff ffa7 	bl	df58 <connection_configure>

	radio_tmr_tifs_set(RADIO_TIFS);
    e00a:	2096      	movs	r0, #150	; 0x96
    e00c:	f7fc ff26 	bl	ae5c <radio_tmr_tifs_set>

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
	radio_switch_complete_and_tx(conn->phy_tx, conn->phy_flags);
    e010:	0023      	movs	r3, r4
    e012:	3332      	adds	r3, #50	; 0x32
    e014:	7818      	ldrb	r0, [r3, #0]
    e016:	09c1      	lsrs	r1, r0, #7
    e018:	0680      	lsls	r0, r0, #26
    e01a:	0f40      	lsrs	r0, r0, #29
    e01c:	f7fc fe82 	bl	ad24 <radio_switch_complete_and_tx>
#else /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */
	radio_switch_complete_and_tx(0, 0);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */

	rx_packet_set(conn, (struct pdu_data *)
		      _radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    e020:	233e      	movs	r3, #62	; 0x3e
    e022:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    e024:	0027      	movs	r7, r4
    e026:	33ff      	adds	r3, #255	; 0xff
    e028:	5ceb      	ldrb	r3, [r5, r3]
	radio_switch_complete_and_tx(conn->phy_tx, conn->phy_flags);
#else /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */
	radio_switch_complete_and_tx(0, 0);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */

	rx_packet_set(conn, (struct pdu_data *)
    e02a:	0020      	movs	r0, r4
		      _radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    e02c:	009b      	lsls	r3, r3, #2
    e02e:	5899      	ldr	r1, [r3, r2]
    e030:	3717      	adds	r7, #23
    e032:	3108      	adds	r1, #8
	radio_switch_complete_and_tx(conn->phy_tx, conn->phy_flags);
#else /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */
	radio_switch_complete_and_tx(0, 0);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */

	rx_packet_set(conn, (struct pdu_data *)
    e034:	f7fe fbb4 	bl	c7a0 <rx_packet_set>
		      _radio.packet_rx[_radio.packet_rx_last]->pdu_data);

	/* Setup Radio Channel */
	if (conn->data_chan_sel) {
    e038:	7f22      	ldrb	r2, [r4, #28]
    e03a:	0693      	lsls	r3, r2, #26
#if defined(CONFIG_BLUETOOTH_CONTROLLER_CHAN_SEL_2)
		data_chan_use = chan_sel_2(conn->event_counter - 1,
    e03c:	0e9b      	lsrs	r3, r3, #26

	rx_packet_set(conn, (struct pdu_data *)
		      _radio.packet_rx[_radio.packet_rx_last]->pdu_data);

	/* Setup Radio Channel */
	if (conn->data_chan_sel) {
    e03e:	0652      	lsls	r2, r2, #25
    e040:	d507      	bpl.n	e052 <event_slave+0xbe>
#if defined(CONFIG_BLUETOOTH_CONTROLLER_CHAN_SEL_2)
		data_chan_use = chan_sel_2(conn->event_counter - 1,
    e042:	8c60      	ldrh	r0, [r4, #34]	; 0x22
    e044:	8be1      	ldrh	r1, [r4, #30]
    e046:	3801      	subs	r0, #1
    e048:	003a      	movs	r2, r7
    e04a:	b280      	uxth	r0, r0
    e04c:	f7ff ff42 	bl	ded4 <chan_sel_2>
    e050:	e01a      	b.n	e088 <event_slave+0xf4>
static u8_t chan_sel_1(u8_t *chan_use, u8_t hop, u16_t latency, u8_t *chan_map,
		       u8_t chan_count)
{
	u8_t chan_next;

	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    e052:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
	} else {
		data_chan_use = chan_sel_1(&conn->data_chan_use,
					   conn->data_chan_hop,
					   conn->latency_event,
					   &conn->data_chan_map[0],
					   conn->data_chan_count);
    e054:	9303      	str	r3, [sp, #12]
static u8_t chan_sel_1(u8_t *chan_use, u8_t hop, u16_t latency, u8_t *chan_map,
		       u8_t chan_count)
{
	u8_t chan_next;

	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    e056:	7fa3      	ldrb	r3, [r4, #30]
    e058:	3001      	adds	r0, #1
    e05a:	4358      	muls	r0, r3
    e05c:	7fe3      	ldrb	r3, [r4, #31]
    e05e:	2125      	movs	r1, #37	; 0x25
    e060:	18c0      	adds	r0, r0, r3
    e062:	f7f2 fa0d 	bl	480 <__aeabi_idivmod>
	*chan_use = chan_next;

	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    e066:	2207      	movs	r2, #7
static u8_t chan_sel_1(u8_t *chan_use, u8_t hop, u16_t latency, u8_t *chan_map,
		       u8_t chan_count)
{
	u8_t chan_next;

	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    e068:	b2c8      	uxtb	r0, r1
	*chan_use = chan_next;
    e06a:	77e0      	strb	r0, [r4, #31]

	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    e06c:	08c3      	lsrs	r3, r0, #3
    e06e:	5cfb      	ldrb	r3, [r7, r3]
    e070:	4011      	ands	r1, r2
    e072:	410b      	asrs	r3, r1
    e074:	3a06      	subs	r2, #6
    e076:	4213      	tst	r3, r2
    e078:	d106      	bne.n	e088 <event_slave+0xf4>
		u8_t chan_index;

		chan_index = chan_next % chan_count;
    e07a:	9903      	ldr	r1, [sp, #12]
    e07c:	f7f2 f916 	bl	2ac <__aeabi_uidivmod>
		chan_next = chan_sel_remap(chan_map, chan_index);
    e080:	0038      	movs	r0, r7
	*chan_use = chan_next;

	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
		u8_t chan_index;

		chan_index = chan_next % chan_count;
    e082:	b2c9      	uxtb	r1, r1
		chan_next = chan_sel_remap(chan_map, chan_index);
    e084:	f7fe f865 	bl	c152 <chan_sel_remap>
					   conn->data_chan_hop,
					   conn->latency_event,
					   &conn->data_chan_map[0],
					   conn->data_chan_count);
	}
	chan_set(data_chan_use);
    e088:	f7ff f8ee 	bl	d268 <chan_set>

	/* current window widening */
	conn->role.slave.window_widening_event_us +=
    e08c:	6d22      	ldr	r2, [r4, #80]	; 0x50
    e08e:	6d63      	ldr	r3, [r4, #84]	; 0x54
    e090:	189b      	adds	r3, r3, r2
		conn->role.slave.window_widening_prepare_us;
	conn->role.slave.window_widening_prepare_us = 0;
    e092:	2200      	movs	r2, #0
    e094:	6522      	str	r2, [r4, #80]	; 0x50
	if (conn->role.slave.window_widening_event_us >
	    conn->role.slave.window_widening_max_us) {
    e096:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
					   conn->data_chan_count);
	}
	chan_set(data_chan_use);

	/* current window widening */
	conn->role.slave.window_widening_event_us +=
    e098:	6563      	str	r3, [r4, #84]	; 0x54
		conn->role.slave.window_widening_prepare_us;
	conn->role.slave.window_widening_prepare_us = 0;
	if (conn->role.slave.window_widening_event_us >
    e09a:	4293      	cmp	r3, r2
    e09c:	d900      	bls.n	e0a0 <event_slave+0x10c>
	    conn->role.slave.window_widening_max_us) {
		conn->role.slave.window_widening_event_us =
    e09e:	6562      	str	r2, [r4, #84]	; 0x54
	}

	/* current window size */
	conn->role.slave.window_size_event_us +=
		conn->role.slave.window_size_prepare_us;
	conn->role.slave.window_size_prepare_us = 0;
    e0a0:	2000      	movs	r0, #0

	remainder_us =
    e0a2:	0031      	movs	r1, r6
		conn->role.slave.window_widening_event_us =
			conn->role.slave.window_widening_max_us;
	}

	/* current window size */
	conn->role.slave.window_size_event_us +=
    e0a4:	6da2      	ldr	r2, [r4, #88]	; 0x58
    e0a6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
		conn->role.slave.window_size_prepare_us;
	conn->role.slave.window_size_prepare_us = 0;

	remainder_us =
    e0a8:	3109      	adds	r1, #9
		conn->role.slave.window_widening_event_us =
			conn->role.slave.window_widening_max_us;
	}

	/* current window size */
	conn->role.slave.window_size_event_us +=
    e0aa:	189b      	adds	r3, r3, r2
    e0ac:	65e3      	str	r3, [r4, #92]	; 0x5c
		conn->role.slave.window_size_prepare_us;
	conn->role.slave.window_size_prepare_us = 0;

	remainder_us =
    e0ae:	68aa      	ldr	r2, [r5, #8]
	}

	/* current window size */
	conn->role.slave.window_size_event_us +=
		conn->role.slave.window_size_prepare_us;
	conn->role.slave.window_size_prepare_us = 0;
    e0b0:	65a0      	str	r0, [r4, #88]	; 0x58

	remainder_us =
    e0b2:	f7fc fedb 	bl	ae6c <radio_tmr_start>
    e0b6:	0005      	movs	r5, r0
		radio_tmr_start(0, ticks_at_expire +
				TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US),
				_radio.remainder_anchor);
	radio_tmr_aa_capture();
    e0b8:	f7fc ff6e 	bl	af98 <radio_tmr_aa_capture>
	hcto = remainder_us + (RADIO_TICKER_JITTER_US << 2) +
    e0bc:	6d63      	ldr	r3, [r4, #84]	; 0x54
    e0be:	0058      	lsls	r0, r3, #1
    e0c0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    e0c2:	3340      	adds	r3, #64	; 0x40
    e0c4:	18c0      	adds	r0, r0, r3
    e0c6:	1947      	adds	r7, r0, r5
	       (conn->role.slave.window_widening_event_us << 1) +
	       conn->role.slave.window_size_event_us;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
	hcto += radio_rx_ready_delay_get(conn->phy_rx);
    e0c8:	0025      	movs	r5, r4
    e0ca:	3533      	adds	r5, #51	; 0x33
    e0cc:	7828      	ldrb	r0, [r5, #0]
    e0ce:	0680      	lsls	r0, r0, #26
    e0d0:	0f40      	lsrs	r0, r0, #29
    e0d2:	f7fc fdbd 	bl	ac50 <radio_rx_ready_delay_get>
	hcto += addr_us_get(conn->phy_rx);
    e0d6:	782b      	ldrb	r3, [r5, #0]
	hcto = remainder_us + (RADIO_TICKER_JITTER_US << 2) +
	       (conn->role.slave.window_widening_event_us << 1) +
	       conn->role.slave.window_size_event_us;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
	hcto += radio_rx_ready_delay_get(conn->phy_rx);
    e0d8:	1838      	adds	r0, r7, r0
	hcto += addr_us_get(conn->phy_rx);
    e0da:	069b      	lsls	r3, r3, #26
	packet_rx_allocate(0xFF);
}

static inline u32_t addr_us_get(u8_t phy)
{
	switch (phy) {
    e0dc:	0f5b      	lsrs	r3, r3, #29
	default:
	case BIT(0):
		return 40;
	case BIT(1):
		return 24;
    e0de:	2218      	movs	r2, #24
	packet_rx_allocate(0xFF);
}

static inline u32_t addr_us_get(u8_t phy)
{
	switch (phy) {
    e0e0:	2b02      	cmp	r3, #2
    e0e2:	d005      	beq.n	e0f0 <event_slave+0x15c>
    e0e4:	2b04      	cmp	r3, #4
    e0e6:	d102      	bne.n	e0ee <event_slave+0x15a>
	case BIT(0):
		return 40;
	case BIT(1):
		return 24;
	case BIT(2):
		return 376;
    e0e8:	3261      	adds	r2, #97	; 0x61
    e0ea:	32ff      	adds	r2, #255	; 0xff
    e0ec:	e000      	b.n	e0f0 <event_slave+0x15c>
static inline u32_t addr_us_get(u8_t phy)
{
	switch (phy) {
	default:
	case BIT(0):
		return 40;
    e0ee:	2228      	movs	r2, #40	; 0x28
#else /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */
	hcto += radio_rx_ready_delay_get(0);
	hcto += addr_us_get(0);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */

	radio_tmr_hcto_configure(hcto);
    e0f0:	1810      	adds	r0, r2, r0
    e0f2:	f7fc ff25 	bl	af40 <radio_tmr_hcto_configure>
	radio_tmr_end_capture();
    e0f6:	f7fc ff7d 	bl	aff4 <radio_tmr_end_capture>
#endif /* CONFIG_BLUETOOTH_CONTROLLER_CONN_RSSI */

#if (defined(CONFIG_BLUETOOTH_CONTROLLER_XTAL_ADVANCED) && \
     (RADIO_TICKER_PREEMPT_PART_US <= RADIO_TICKER_PREEMPT_PART_MIN_US))
	/* check if preempt to start has changed */
	if (preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
    e0fa:	8c21      	ldrh	r1, [r4, #32]
    e0fc:	0032      	movs	r2, r6
    e0fe:	3107      	adds	r1, #7
    e100:	b2c9      	uxtb	r1, r1
    e102:	0020      	movs	r0, r4
    e104:	f7ff fd20 	bl	db48 <preempt_calc>
    e108:	2800      	cmp	r0, #0
    e10a:	d005      	beq.n	e118 <event_slave+0x184>
				      conn->handle), ticks_at_expire) != 0) {
		_radio.state = STATE_STOP;
    e10c:	2204      	movs	r2, #4
    e10e:	4b0d      	ldr	r3, [pc, #52]	; (e144 <event_slave+0x1b0>)
    e110:	741a      	strb	r2, [r3, #16]
		radio_disable();
    e112:	f7fc fdad 	bl	ac70 <radio_disable>
    e116:	e010      	b.n	e13a <event_slave+0x1a6>
	{
	/* Ticker Job Silence */
#if (RADIO_TICKER_USER_ID_WORKER_PRIO == RADIO_TICKER_USER_ID_JOB_PRIO)
		u32_t ticker_status;

		ticker_status =
    e118:	0003      	movs	r3, r0
    e11a:	4a12      	ldr	r2, [pc, #72]	; (e164 <event_slave+0x1d0>)
    e11c:	0001      	movs	r1, r0
    e11e:	f7fd ff9b 	bl	c058 <ticker_job_idle_get>
			ticker_job_idle_get(RADIO_TICKER_INSTANCE_ID_RADIO,
					    RADIO_TICKER_USER_ID_WORKER,
					    ticker_job_disable, NULL);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    e122:	2302      	movs	r3, #2
    e124:	4398      	bics	r0, r3
    e126:	d008      	beq.n	e13a <event_slave+0x1a6>
    e128:	4b07      	ldr	r3, [pc, #28]	; (e148 <event_slave+0x1b4>)
    e12a:	4a08      	ldr	r2, [pc, #32]	; (e14c <event_slave+0x1b8>)
    e12c:	9301      	str	r3, [sp, #4]
    e12e:	4b08      	ldr	r3, [pc, #32]	; (e150 <event_slave+0x1bc>)
    e130:	4908      	ldr	r1, [pc, #32]	; (e154 <event_slave+0x1c0>)
    e132:	9300      	str	r3, [sp, #0]
    e134:	480c      	ldr	r0, [pc, #48]	; (e168 <event_slave+0x1d4>)
    e136:	4b09      	ldr	r3, [pc, #36]	; (e15c <event_slave+0x1c8>)
    e138:	e74d      	b.n	dfd6 <event_slave+0x42>
			  (ticker_status == TICKER_STATUS_BUSY));
#endif
	}

	/* Route the tx packet to respective connections */
	packet_tx_enqueue(2);
    e13a:	2002      	movs	r0, #2
    e13c:	f7fe febc 	bl	ceb8 <packet_tx_enqueue>

	DEBUG_RADIO_START_S(0);
}
    e140:	b005      	add	sp, #20
    e142:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e144:	200015c0 	.word	0x200015c0
    e148:	000154c4 	.word	0x000154c4
    e14c:	00015484 	.word	0x00015484
    e150:	000154c9 	.word	0x000154c9
    e154:	0001548b 	.word	0x0001548b
    e158:	00017011 	.word	0x00017011
    e15c:	000182a3 	.word	0x000182a3
    e160:	000170c9 	.word	0x000170c9
    e164:	0000cbcd 	.word	0x0000cbcd
    e168:	00016da4 	.word	0x00016da4

0000e16c <ctrl_tx_enqueue>:
			    struct radio_pdu_node_tx *node_tx)
{
	/* check if a packet was tx-ed and not acked by peer */
	if (
	    /* An explicit empty PDU is not enqueued */
	    (conn->empty == 0) &&
    e16c:	0003      	movs	r3, r0
	p->next = node_tx;
}

static void ctrl_tx_enqueue(struct connection *conn,
			    struct radio_pdu_node_tx *node_tx)
{
    e16e:	b510      	push	{r4, lr}
	/* check if a packet was tx-ed and not acked by peer */
	if (
	    /* An explicit empty PDU is not enqueued */
	    (conn->empty == 0) &&
    e170:	33c0      	adds	r3, #192	; 0xc0
    e172:	781a      	ldrb	r2, [r3, #0]
    e174:	30fc      	adds	r0, #252	; 0xfc

static void ctrl_tx_enqueue(struct connection *conn,
			    struct radio_pdu_node_tx *node_tx)
{
	/* check if a packet was tx-ed and not acked by peer */
	if (
    e176:	09d3      	lsrs	r3, r2, #7
    e178:	d11c      	bne.n	e1b4 <ctrl_tx_enqueue+0x48>
	    /* An explicit empty PDU is not enqueued */
	    (conn->empty == 0) &&
	    /* and data/ctrl packet is in the head */
	    (conn->pkt_tx_head) && (
    e17a:	6883      	ldr	r3, [r0, #8]
			    struct radio_pdu_node_tx *node_tx)
{
	/* check if a packet was tx-ed and not acked by peer */
	if (
	    /* An explicit empty PDU is not enqueued */
	    (conn->empty == 0) &&
    e17c:	2b00      	cmp	r3, #0
    e17e:	d019      	beq.n	e1b4 <ctrl_tx_enqueue+0x48>
	    /* and data/ctrl packet is in the head */
	    (conn->pkt_tx_head) && (
    e180:	0712      	lsls	r2, r2, #28
    e182:	d502      	bpl.n	e18a <ctrl_tx_enqueue+0x1e>
				    /* data PDU tx is not paused */
				    (conn->pause_tx == 0) ||
    e184:	68c2      	ldr	r2, [r0, #12]
    e186:	4293      	cmp	r3, r2
    e188:	d114      	bne.n	e1b4 <ctrl_tx_enqueue+0x48>

		/* if data transmited once, keep it at head of the tx list,
		 * as we will insert a ctrl after it, hence advance the
		 * data pointer
		 */
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
    e18a:	6902      	ldr	r2, [r0, #16]
    e18c:	4293      	cmp	r3, r2
    e18e:	d101      	bne.n	e194 <ctrl_tx_enqueue+0x28>
			conn->pkt_tx_data = conn->pkt_tx_data->next;
    e190:	681a      	ldr	r2, [r3, #0]
    e192:	6102      	str	r2, [r0, #16]
		}

		/* if no ctrl packet already queued, new ctrl added will be
		 * the ctrl pointer and is inserted after head.
		 */
		if (!conn->pkt_tx_ctrl) {
    e194:	68c2      	ldr	r2, [r0, #12]
    e196:	2a00      	cmp	r2, #0
    e198:	d103      	bne.n	e1a2 <ctrl_tx_enqueue+0x36>
			node_tx->next = conn->pkt_tx_head->next;
    e19a:	681a      	ldr	r2, [r3, #0]
    e19c:	600a      	str	r2, [r1, #0]
			conn->pkt_tx_head->next = node_tx;
    e19e:	6019      	str	r1, [r3, #0]
    e1a0:	e00e      	b.n	e1c0 <ctrl_tx_enqueue+0x54>
{
	struct radio_pdu_node_tx *p;

	/* TODO: optimise by having a ctrl_last member. */
	p = conn->pkt_tx_ctrl;
	while (p->next != conn->pkt_tx_data) {
    e1a2:	6903      	ldr	r3, [r0, #16]
    e1a4:	6814      	ldr	r4, [r2, #0]
    e1a6:	429c      	cmp	r4, r3
    e1a8:	d001      	beq.n	e1ae <ctrl_tx_enqueue+0x42>
    e1aa:	0022      	movs	r2, r4
    e1ac:	e7fa      	b.n	e1a4 <ctrl_tx_enqueue+0x38>
		p = p->next;
	}

	node_tx->next = p->next;
    e1ae:	600b      	str	r3, [r1, #0]
	p->next = node_tx;
    e1b0:	6011      	str	r1, [r2, #0]
    e1b2:	e00f      	b.n	e1d4 <ctrl_tx_enqueue+0x68>
		/* No packet needing ACK. */

		/* If first ctrl packet then add it as head else add it to the
		 * tail of the ctrl packets.
		 */
		if (!conn->pkt_tx_ctrl) {
    e1b4:	68c3      	ldr	r3, [r0, #12]
    e1b6:	2b00      	cmp	r3, #0
    e1b8:	d104      	bne.n	e1c4 <ctrl_tx_enqueue+0x58>
			node_tx->next = conn->pkt_tx_head;
    e1ba:	6883      	ldr	r3, [r0, #8]
    e1bc:	600b      	str	r3, [r1, #0]
			conn->pkt_tx_head = node_tx;
    e1be:	6081      	str	r1, [r0, #8]
			conn->pkt_tx_ctrl = node_tx;
    e1c0:	60c1      	str	r1, [r0, #12]
    e1c2:	e007      	b.n	e1d4 <ctrl_tx_enqueue+0x68>
{
	struct radio_pdu_node_tx *p;

	/* TODO: optimise by having a ctrl_last member. */
	p = conn->pkt_tx_ctrl;
	while (p->next != conn->pkt_tx_data) {
    e1c4:	6902      	ldr	r2, [r0, #16]
    e1c6:	681c      	ldr	r4, [r3, #0]
    e1c8:	4294      	cmp	r4, r2
    e1ca:	d001      	beq.n	e1d0 <ctrl_tx_enqueue+0x64>
    e1cc:	0023      	movs	r3, r4
    e1ce:	e7fa      	b.n	e1c6 <ctrl_tx_enqueue+0x5a>
		p = p->next;
	}

	node_tx->next = p->next;
    e1d0:	600a      	str	r2, [r1, #0]
	p->next = node_tx;
    e1d2:	6019      	str	r1, [r3, #0]
			ctrl_tx_enqueue_tail(conn, node_tx);
		}
	}

	/* Update last pointer if ctrl added at end of tx list */
	if (node_tx->next == 0) {
    e1d4:	680b      	ldr	r3, [r1, #0]
    e1d6:	2b00      	cmp	r3, #0
    e1d8:	d100      	bne.n	e1dc <ctrl_tx_enqueue+0x70>
		conn->pkt_tx_last = node_tx;
    e1da:	6141      	str	r1, [r0, #20]
	}
}
    e1dc:	bd10      	pop	{r4, pc}
	...

0000e1e0 <start_enc_rsp_send>:
	ctrl_tx_enqueue(conn, node_tx);
}

static void start_enc_rsp_send(struct connection *conn,
			       struct pdu_data *pdu_ctrl_tx)
{
    e1e0:	b513      	push	{r0, r1, r4, lr}
    e1e2:	000b      	movs	r3, r1
	struct radio_pdu_node_tx *node_tx = NULL;
    e1e4:	2100      	movs	r1, #0
	ctrl_tx_enqueue(conn, node_tx);
}

static void start_enc_rsp_send(struct connection *conn,
			       struct pdu_data *pdu_ctrl_tx)
{
    e1e6:	0004      	movs	r4, r0
	struct radio_pdu_node_tx *node_tx = NULL;

	if (!pdu_ctrl_tx) {
    e1e8:	428b      	cmp	r3, r1
    e1ea:	d115      	bne.n	e218 <start_enc_rsp_send+0x38>
		/* acquire tx mem */
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    e1ec:	4811      	ldr	r0, [pc, #68]	; (e234 <start_enc_rsp_send+0x54>)
    e1ee:	3059      	adds	r0, #89	; 0x59
    e1f0:	30ff      	adds	r0, #255	; 0xff
    e1f2:	f7fc fb4d 	bl	a890 <mem_acquire>
    e1f6:	0001      	movs	r1, r0
		LL_ASSERT(node_tx);

		pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
    e1f8:	1d03      	adds	r3, r0, #4
	struct radio_pdu_node_tx *node_tx = NULL;

	if (!pdu_ctrl_tx) {
		/* acquire tx mem */
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
		LL_ASSERT(node_tx);
    e1fa:	2800      	cmp	r0, #0
    e1fc:	d10c      	bne.n	e218 <start_enc_rsp_send+0x38>
    e1fe:	4b0e      	ldr	r3, [pc, #56]	; (e238 <start_enc_rsp_send+0x58>)
    e200:	4a0e      	ldr	r2, [pc, #56]	; (e23c <start_enc_rsp_send+0x5c>)
    e202:	9301      	str	r3, [sp, #4]
    e204:	4b0e      	ldr	r3, [pc, #56]	; (e240 <start_enc_rsp_send+0x60>)
    e206:	490f      	ldr	r1, [pc, #60]	; (e244 <start_enc_rsp_send+0x64>)
    e208:	9300      	str	r3, [sp, #0]
    e20a:	480f      	ldr	r0, [pc, #60]	; (e248 <start_enc_rsp_send+0x68>)
    e20c:	4b0f      	ldr	r3, [pc, #60]	; (e24c <start_enc_rsp_send+0x6c>)
    e20e:	f7f3 fbb7 	bl	1980 <printk>
    e212:	b662      	cpsie	i
    e214:	2004      	movs	r0, #4
    e216:	df02      	svc	2

		pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	}

	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e218:	2003      	movs	r0, #3
    e21a:	781a      	ldrb	r2, [r3, #0]
    e21c:	4302      	orrs	r2, r0
    e21e:	701a      	strb	r2, [r3, #0]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata);
    e220:	2201      	movs	r2, #1
    e222:	705a      	strb	r2, [r3, #1]
	pdu_ctrl_tx->payload.llctrl.opcode =
    e224:	3205      	adds	r2, #5
    e226:	70da      	strb	r2, [r3, #3]
		PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;

	if (node_tx) {
    e228:	2900      	cmp	r1, #0
    e22a:	d002      	beq.n	e232 <start_enc_rsp_send+0x52>
		ctrl_tx_enqueue(conn, node_tx);
    e22c:	0020      	movs	r0, r4
    e22e:	f7ff ff9d 	bl	e16c <ctrl_tx_enqueue>
	}
}
    e232:	bd13      	pop	{r0, r1, r4, pc}
    e234:	200015c0 	.word	0x200015c0
    e238:	000154c4 	.word	0x000154c4
    e23c:	00015484 	.word	0x00015484
    e240:	000154c9 	.word	0x000154c9
    e244:	0001548b 	.word	0x0001548b
    e248:	00017119 	.word	0x00017119
    e24c:	000180c8 	.word	0x000180c8

0000e250 <pause_enc_rsp_send>:

static void pause_enc_rsp_send(struct connection *conn)
{
    e250:	b513      	push	{r0, r1, r4, lr}
    e252:	0004      	movs	r4, r0
	struct radio_pdu_node_tx *node_tx;
	struct pdu_data *pdu_ctrl_tx;

	/* acquire tx mem */
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    e254:	480f      	ldr	r0, [pc, #60]	; (e294 <pause_enc_rsp_send+0x44>)
    e256:	3059      	adds	r0, #89	; 0x59
    e258:	30ff      	adds	r0, #255	; 0xff
    e25a:	f7fc fb19 	bl	a890 <mem_acquire>
    e25e:	1e01      	subs	r1, r0, #0
	LL_ASSERT(node_tx);
    e260:	d10c      	bne.n	e27c <pause_enc_rsp_send+0x2c>
    e262:	4b0d      	ldr	r3, [pc, #52]	; (e298 <pause_enc_rsp_send+0x48>)
    e264:	4a0d      	ldr	r2, [pc, #52]	; (e29c <pause_enc_rsp_send+0x4c>)
    e266:	9301      	str	r3, [sp, #4]
    e268:	4b0d      	ldr	r3, [pc, #52]	; (e2a0 <pause_enc_rsp_send+0x50>)
    e26a:	490e      	ldr	r1, [pc, #56]	; (e2a4 <pause_enc_rsp_send+0x54>)
    e26c:	9300      	str	r3, [sp, #0]
    e26e:	480e      	ldr	r0, [pc, #56]	; (e2a8 <pause_enc_rsp_send+0x58>)
    e270:	4b0e      	ldr	r3, [pc, #56]	; (e2ac <pause_enc_rsp_send+0x5c>)
    e272:	f7f3 fb85 	bl	1980 <printk>
    e276:	b662      	cpsie	i
    e278:	2004      	movs	r0, #4
    e27a:	df02      	svc	2

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e27c:	2203      	movs	r2, #3
    e27e:	7903      	ldrb	r3, [r0, #4]
    e280:	4313      	orrs	r3, r2
    e282:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata);
    e284:	2301      	movs	r3, #1
    e286:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode =
    e288:	330a      	adds	r3, #10
    e28a:	71c3      	strb	r3, [r0, #7]
		PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;

	ctrl_tx_enqueue(conn, node_tx);
    e28c:	0020      	movs	r0, r4
    e28e:	f7ff ff6d 	bl	e16c <ctrl_tx_enqueue>
}
    e292:	bd13      	pop	{r0, r1, r4, pc}
    e294:	200015c0 	.word	0x200015c0
    e298:	000154c4 	.word	0x000154c4
    e29c:	00015484 	.word	0x00015484
    e2a0:	000154c9 	.word	0x000154c9
    e2a4:	0001548b 	.word	0x0001548b
    e2a8:	00017119 	.word	0x00017119
    e2ac:	0001832f 	.word	0x0001832f

0000e2b0 <reject_ind_ext_send>:
}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

static void reject_ind_ext_send(struct connection *conn,
				u8_t reject_opcode, u8_t error_code)
{
    e2b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    e2b2:	0004      	movs	r4, r0
	struct radio_pdu_node_tx *node_tx;
	struct pdu_data *pdu_ctrl_tx;

	/* acquire tx mem */
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    e2b4:	4811      	ldr	r0, [pc, #68]	; (e2fc <reject_ind_ext_send+0x4c>)
}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

static void reject_ind_ext_send(struct connection *conn,
				u8_t reject_opcode, u8_t error_code)
{
    e2b6:	000e      	movs	r6, r1
	struct radio_pdu_node_tx *node_tx;
	struct pdu_data *pdu_ctrl_tx;

	/* acquire tx mem */
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    e2b8:	3059      	adds	r0, #89	; 0x59
    e2ba:	30ff      	adds	r0, #255	; 0xff
}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

static void reject_ind_ext_send(struct connection *conn,
				u8_t reject_opcode, u8_t error_code)
{
    e2bc:	0015      	movs	r5, r2
	struct radio_pdu_node_tx *node_tx;
	struct pdu_data *pdu_ctrl_tx;

	/* acquire tx mem */
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    e2be:	f7fc fae7 	bl	a890 <mem_acquire>
    e2c2:	1e01      	subs	r1, r0, #0
	LL_ASSERT(node_tx);
    e2c4:	d10c      	bne.n	e2e0 <reject_ind_ext_send+0x30>
    e2c6:	4b0e      	ldr	r3, [pc, #56]	; (e300 <reject_ind_ext_send+0x50>)
    e2c8:	4a0e      	ldr	r2, [pc, #56]	; (e304 <reject_ind_ext_send+0x54>)
    e2ca:	9301      	str	r3, [sp, #4]
    e2cc:	4b0e      	ldr	r3, [pc, #56]	; (e308 <reject_ind_ext_send+0x58>)
    e2ce:	490f      	ldr	r1, [pc, #60]	; (e30c <reject_ind_ext_send+0x5c>)
    e2d0:	9300      	str	r3, [sp, #0]
    e2d2:	480f      	ldr	r0, [pc, #60]	; (e310 <reject_ind_ext_send+0x60>)
    e2d4:	4b0f      	ldr	r3, [pc, #60]	; (e314 <reject_ind_ext_send+0x64>)
    e2d6:	f7f3 fb53 	bl	1980 <printk>
    e2da:	b662      	cpsie	i
    e2dc:	2004      	movs	r0, #4
    e2de:	df02      	svc	2

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e2e0:	2203      	movs	r2, #3
    e2e2:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
		sizeof(struct pdu_data_llctrl_reject_ext_ind);
	pdu_ctrl_tx->payload.llctrl.opcode =
		PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
	pdu_ctrl_tx->payload.llctrl.ctrldata.reject_ext_ind.reject_opcode =
    e2e4:	7206      	strb	r6, [r0, #8]
	/* acquire tx mem */
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
	LL_ASSERT(node_tx);

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e2e6:	4313      	orrs	r3, r2
    e2e8:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
		sizeof(struct pdu_data_llctrl_reject_ext_ind);
	pdu_ctrl_tx->payload.llctrl.opcode =
    e2ea:	2311      	movs	r3, #17
		PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
	pdu_ctrl_tx->payload.llctrl.ctrldata.reject_ext_ind.reject_opcode =
		reject_opcode;
	pdu_ctrl_tx->payload.llctrl.ctrldata.reject_ext_ind.error_code =
    e2ec:	7245      	strb	r5, [r0, #9]
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
	LL_ASSERT(node_tx);

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
    e2ee:	7142      	strb	r2, [r0, #5]
		sizeof(struct pdu_data_llctrl_reject_ext_ind);
	pdu_ctrl_tx->payload.llctrl.opcode =
    e2f0:	71c3      	strb	r3, [r0, #7]
	pdu_ctrl_tx->payload.llctrl.ctrldata.reject_ext_ind.reject_opcode =
		reject_opcode;
	pdu_ctrl_tx->payload.llctrl.ctrldata.reject_ext_ind.error_code =
		error_code;

	ctrl_tx_enqueue(conn, node_tx);
    e2f2:	0020      	movs	r0, r4
    e2f4:	f7ff ff3a 	bl	e16c <ctrl_tx_enqueue>
}
    e2f8:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    e2fa:	46c0      	nop			; (mov r8, r8)
    e2fc:	200015c0 	.word	0x200015c0
    e300:	000154c4 	.word	0x000154c4
    e304:	00015484 	.word	0x00015484
    e308:	000154c9 	.word	0x000154c9
    e30c:	0001548b 	.word	0x0001548b
    e310:	00017119 	.word	0x00017119
    e314:	00018147 	.word	0x00018147

0000e318 <event_connection_prepare>:
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PHY */

static void event_connection_prepare(u32_t ticks_at_expire,
				     u32_t remainder, u16_t lazy,
				     struct connection *conn)
{
    e318:	b5f0      	push	{r4, r5, r6, r7, lr}
	u16_t event_counter;
	u32_t err;

	LL_ASSERT(!_radio.ticker_id_prepare);
    e31a:	4dbb      	ldr	r5, [pc, #748]	; (e608 <event_connection_prepare+0x2f0>)
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PHY */

static void event_connection_prepare(u32_t ticks_at_expire,
				     u32_t remainder, u16_t lazy,
				     struct connection *conn)
{
    e31c:	b093      	sub	sp, #76	; 0x4c
    e31e:	900d      	str	r0, [sp, #52]	; 0x34
    e320:	9111      	str	r1, [sp, #68]	; 0x44
    e322:	001f      	movs	r7, r3
	u16_t event_counter;
	u32_t err;

	LL_ASSERT(!_radio.ticker_id_prepare);
    e324:	7b2b      	ldrb	r3, [r5, #12]
    e326:	2b00      	cmp	r3, #0
    e328:	d008      	beq.n	e33c <event_connection_prepare+0x24>
    e32a:	4bb8      	ldr	r3, [pc, #736]	; (e60c <event_connection_prepare+0x2f4>)
    e32c:	4ab8      	ldr	r2, [pc, #736]	; (e610 <event_connection_prepare+0x2f8>)
    e32e:	9301      	str	r3, [sp, #4]
    e330:	4bb8      	ldr	r3, [pc, #736]	; (e614 <event_connection_prepare+0x2fc>)
    e332:	49b9      	ldr	r1, [pc, #740]	; (e618 <event_connection_prepare+0x300>)
    e334:	9300      	str	r3, [sp, #0]
    e336:	48b9      	ldr	r0, [pc, #740]	; (e61c <event_connection_prepare+0x304>)
    e338:	4bb9      	ldr	r3, [pc, #740]	; (e620 <event_connection_prepare+0x308>)
    e33a:	e212      	b.n	e762 <event_connection_prepare+0x44a>

	/* Calc window widening */
	if (conn->role.slave.role != 0) {
    e33c:	003b      	movs	r3, r7
    e33e:	3344      	adds	r3, #68	; 0x44
    e340:	781b      	ldrb	r3, [r3, #0]
    e342:	07db      	lsls	r3, r3, #31
    e344:	d509      	bpl.n	e35a <event_connection_prepare+0x42>
		conn->role.slave.window_widening_prepare_us +=
    e346:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    e348:	1c53      	adds	r3, r2, #1
    e34a:	434b      	muls	r3, r1
    e34c:	6d39      	ldr	r1, [r7, #80]	; 0x50
    e34e:	185b      	adds	r3, r3, r1
		    conn->role.slave.window_widening_periodic_us * (lazy + 1);
		if (conn->role.slave.window_widening_prepare_us >
		    conn->role.slave.window_widening_max_us) {
    e350:	6cf9      	ldr	r1, [r7, #76]	; 0x4c

	LL_ASSERT(!_radio.ticker_id_prepare);

	/* Calc window widening */
	if (conn->role.slave.role != 0) {
		conn->role.slave.window_widening_prepare_us +=
    e352:	653b      	str	r3, [r7, #80]	; 0x50
		    conn->role.slave.window_widening_periodic_us * (lazy + 1);
		if (conn->role.slave.window_widening_prepare_us >
    e354:	428b      	cmp	r3, r1
    e356:	d900      	bls.n	e35a <event_connection_prepare+0x42>
		    conn->role.slave.window_widening_max_us) {
			conn->role.slave.window_widening_prepare_us =
    e358:	6539      	str	r1, [r7, #80]	; 0x50
				conn->role.slave.window_widening_max_us;
		}
	}

	/* save the latency for use in event */
	conn->latency_prepare += lazy;
    e35a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
    e35c:	18d2      	adds	r2, r2, r3

	/* calc current event counter value */
	event_counter = conn->event_counter + conn->latency_prepare;
    e35e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
				conn->role.slave.window_widening_max_us;
		}
	}

	/* save the latency for use in event */
	conn->latency_prepare += lazy;
    e360:	b292      	uxth	r2, r2
    e362:	853a      	strh	r2, [r7, #40]	; 0x28

	/* calc current event counter value */
	event_counter = conn->event_counter + conn->latency_prepare;
    e364:	18d2      	adds	r2, r2, r3
    e366:	b293      	uxth	r3, r2
    e368:	930a      	str	r3, [sp, #40]	; 0x28

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
	/* check if PHY Req procedure is requested and no other procedure
	 * using instant is active.
	 */
	if ((conn->llcp_ack == conn->llcp_req) &&
    e36a:	003b      	movs	r3, r7
    e36c:	3369      	adds	r3, #105	; 0x69
    e36e:	781a      	ldrb	r2, [r3, #0]
    e370:	3b01      	subs	r3, #1
    e372:	781b      	ldrb	r3, [r3, #0]
    e374:	429a      	cmp	r2, r3
    e376:	d000      	beq.n	e37a <event_connection_prepare+0x62>
    e378:	e0bd      	b.n	e4f6 <event_connection_prepare+0x1de>
	    (conn->llcp_phy.ack != conn->llcp_phy.req)) {
    e37a:	003e      	movs	r6, r7

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
	/* check if PHY Req procedure is requested and no other procedure
	 * using instant is active.
	 */
	if ((conn->llcp_ack == conn->llcp_req) &&
    e37c:	003b      	movs	r3, r7
	    (conn->llcp_phy.ack != conn->llcp_phy.req)) {
    e37e:	36bd      	adds	r6, #189	; 0xbd

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
	/* check if PHY Req procedure is requested and no other procedure
	 * using instant is active.
	 */
	if ((conn->llcp_ack == conn->llcp_req) &&
    e380:	33bc      	adds	r3, #188	; 0xbc
    e382:	7832      	ldrb	r2, [r6, #0]
    e384:	781b      	ldrb	r3, [r3, #0]
    e386:	429a      	cmp	r2, r3
    e388:	d101      	bne.n	e38e <event_connection_prepare+0x76>
    e38a:	f000 fe7c 	bl	f086 <event_connection_prepare+0xd6e>
	    (conn->llcp_phy.ack != conn->llcp_phy.req)) {
		/* Stop previous event, to avoid Radio DMA corrupting the
		 * rx queue
		 */
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    e38e:	2200      	movs	r2, #0
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
static inline void event_phy_req_prep(struct connection *conn)
{
	switch (conn->llcp_phy.state) {
    e390:	003c      	movs	r4, r7
	if ((conn->llcp_ack == conn->llcp_req) &&
	    (conn->llcp_phy.ack != conn->llcp_phy.req)) {
		/* Stop previous event, to avoid Radio DMA corrupting the
		 * rx queue
		 */
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    e392:	0010      	movs	r0, r2
    e394:	2305      	movs	r3, #5
    e396:	0011      	movs	r1, r2
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
static inline void event_phy_req_prep(struct connection *conn)
{
	switch (conn->llcp_phy.state) {
    e398:	34be      	adds	r4, #190	; 0xbe
	if ((conn->llcp_ack == conn->llcp_req) &&
	    (conn->llcp_phy.ack != conn->llcp_phy.req)) {
		/* Stop previous event, to avoid Radio DMA corrupting the
		 * rx queue
		 */
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    e39a:	f7fe fc25 	bl	cbe8 <event_stop>
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
static inline void event_phy_req_prep(struct connection *conn)
{
	switch (conn->llcp_phy.state) {
    e39e:	7820      	ldrb	r0, [r4, #0]
    e3a0:	0780      	lsls	r0, r0, #30
    e3a2:	0f80      	lsrs	r0, r0, #30
    e3a4:	f7f1 fee8 	bl	178 <__gnu_thumb1_case_uqi>
    e3a8:	409e9e02 	.word	0x409e9e02
	{
		struct pdu_data_llctrl_phy_req_rsp *pr;
		struct radio_pdu_node_tx *node_tx;
		struct pdu_data *pdu_ctrl_tx;

		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    e3ac:	0028      	movs	r0, r5
    e3ae:	3059      	adds	r0, #89	; 0x59
    e3b0:	30ff      	adds	r0, #255	; 0xff
    e3b2:	f7fc fa6d 	bl	a890 <mem_acquire>
    e3b6:	1e01      	subs	r1, r0, #0
		if (!node_tx) {
    e3b8:	d100      	bne.n	e3bc <event_connection_prepare+0xa4>
    e3ba:	e093      	b.n	e4e4 <event_connection_prepare+0x1cc>
			break;
		}

		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    e3bc:	2603      	movs	r6, #3
    e3be:	2201      	movs	r2, #1
    e3c0:	7823      	ldrb	r3, [r4, #0]

		/* update preferred phy */
		conn->phy_pref_tx = conn->llcp_phy.tx;
    e3c2:	2507      	movs	r5, #7
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
		if (!node_tx) {
			break;
		}

		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    e3c4:	43b3      	bics	r3, r6
    e3c6:	4313      	orrs	r3, r2

		/* update preferred phy */
		conn->phy_pref_tx = conn->llcp_phy.tx;
    e3c8:	003a      	movs	r2, r7
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
		if (!node_tx) {
			break;
		}

		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    e3ca:	7023      	strb	r3, [r4, #0]

		/* update preferred phy */
		conn->phy_pref_tx = conn->llcp_phy.tx;
    e3cc:	3232      	adds	r2, #50	; 0x32
    e3ce:	7810      	ldrb	r0, [r2, #0]
    e3d0:	089b      	lsrs	r3, r3, #2
    e3d2:	43a8      	bics	r0, r5
    e3d4:	402b      	ands	r3, r5
    e3d6:	4303      	orrs	r3, r0
    e3d8:	7013      	strb	r3, [r2, #0]
		conn->phy_pref_rx = conn->llcp_phy.rx;
    e3da:	7823      	ldrb	r3, [r4, #0]
    e3dc:	7850      	ldrb	r0, [r2, #1]
    e3de:	095b      	lsrs	r3, r3, #5
    e3e0:	43a8      	bics	r0, r5
    e3e2:	402b      	ands	r3, r5
    e3e4:	4303      	orrs	r3, r0
    e3e6:	7053      	strb	r3, [r2, #1]
		conn->phy_pref_flags = conn->llcp_phy.flags;
    e3e8:	003b      	movs	r3, r7
    e3ea:	2001      	movs	r0, #1
    e3ec:	2540      	movs	r5, #64	; 0x40
    e3ee:	33bf      	adds	r3, #191	; 0xbf
    e3f0:	781b      	ldrb	r3, [r3, #0]
    e3f2:	07db      	lsls	r3, r3, #31
    e3f4:	0fdb      	lsrs	r3, r3, #31
    e3f6:	4018      	ands	r0, r3
    e3f8:	7813      	ldrb	r3, [r2, #0]
    e3fa:	0180      	lsls	r0, r0, #6
    e3fc:	43ab      	bics	r3, r5
    e3fe:	4318      	orrs	r0, r3
    e400:	7010      	strb	r0, [r2, #0]

		/* place the phy req packet as next in tx queue */
		pdu_ctrl_tx = (struct pdu_data *) node_tx->pdu_data;
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e402:	790b      	ldrb	r3, [r1, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
    e404:	714e      	strb	r6, [r1, #5]
		conn->phy_pref_rx = conn->llcp_phy.rx;
		conn->phy_pref_flags = conn->llcp_phy.flags;

		/* place the phy req packet as next in tx queue */
		pdu_ctrl_tx = (struct pdu_data *) node_tx->pdu_data;
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e406:	4333      	orrs	r3, r6
    e408:	710b      	strb	r3, [r1, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
				   sizeof(struct pdu_data_llctrl_phy_req_rsp);
		pdu_ctrl_tx->payload.llctrl.opcode =
    e40a:	2316      	movs	r3, #22
    e40c:	71cb      	strb	r3, [r1, #7]
			PDU_DATA_LLCTRL_TYPE_PHY_REQ;

		pr = (struct pdu_data_llctrl_phy_req_rsp *)
		     &pdu_ctrl_tx->payload.llctrl.ctrldata.phy_req;
		pr->tx_phys = conn->llcp_phy.tx;
    e40e:	7823      	ldrb	r3, [r4, #0]
		pr->rx_phys = conn->llcp_phy.rx;

		ctrl_tx_enqueue(conn, node_tx);
    e410:	0038      	movs	r0, r7
		pdu_ctrl_tx->payload.llctrl.opcode =
			PDU_DATA_LLCTRL_TYPE_PHY_REQ;

		pr = (struct pdu_data_llctrl_phy_req_rsp *)
		     &pdu_ctrl_tx->payload.llctrl.ctrldata.phy_req;
		pr->tx_phys = conn->llcp_phy.tx;
    e412:	06db      	lsls	r3, r3, #27
    e414:	0f5b      	lsrs	r3, r3, #29
    e416:	720b      	strb	r3, [r1, #8]
		pr->rx_phys = conn->llcp_phy.rx;
    e418:	7823      	ldrb	r3, [r4, #0]
    e41a:	095b      	lsrs	r3, r3, #5
    e41c:	724b      	strb	r3, [r1, #9]

		ctrl_tx_enqueue(conn, node_tx);
    e41e:	f7ff fea5 	bl	e16c <ctrl_tx_enqueue>

		/* Start Procedure Timeout (TODO: this shall not replace
		 * terminate procedure).
		 */
		conn->procedure_expire = conn->procedure_reload;
    e422:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
    e424:	877b      	strh	r3, [r7, #58]	; 0x3a
    e426:	e05d      	b.n	e4e4 <event_connection_prepare+0x1cc>
	break;

	case LLCP_PHY_STATE_UPD:
	{
		/* Procedure complete */
		conn->llcp_phy.ack = conn->llcp_phy.req;
    e428:	003b      	movs	r3, r7
    e42a:	33bc      	adds	r3, #188	; 0xbc
    e42c:	781b      	ldrb	r3, [r3, #0]
    e42e:	7033      	strb	r3, [r6, #0]

		/* select only one tx phy, prefer 2M */
		if (conn->llcp_phy.tx & BIT(1)) {
    e430:	003b      	movs	r3, r7
    e432:	33be      	adds	r3, #190	; 0xbe
    e434:	781a      	ldrb	r2, [r3, #0]
    e436:	06d1      	lsls	r1, r2, #27
    e438:	0f49      	lsrs	r1, r1, #29
    e43a:	0788      	lsls	r0, r1, #30
    e43c:	d503      	bpl.n	e446 <event_connection_prepare+0x12e>
			conn->llcp_phy.tx = BIT(1);
    e43e:	211c      	movs	r1, #28
    e440:	438a      	bics	r2, r1
    e442:	3914      	subs	r1, #20
    e444:	e00b      	b.n	e45e <event_connection_prepare+0x146>
    e446:	2004      	movs	r0, #4
		} else if (conn->llcp_phy.tx & BIT(0)) {
    e448:	07cc      	lsls	r4, r1, #31
    e44a:	d503      	bpl.n	e454 <event_connection_prepare+0x13c>
			conn->llcp_phy.tx = BIT(0);
    e44c:	211c      	movs	r1, #28
    e44e:	438a      	bics	r2, r1
    e450:	4302      	orrs	r2, r0
    e452:	e005      	b.n	e460 <event_connection_prepare+0x148>
    e454:	241c      	movs	r4, #28
		} else if (conn->llcp_phy.tx & BIT(2)) {
			conn->llcp_phy.tx = BIT(2);
    e456:	43a2      	bics	r2, r4
		/* select only one tx phy, prefer 2M */
		if (conn->llcp_phy.tx & BIT(1)) {
			conn->llcp_phy.tx = BIT(1);
		} else if (conn->llcp_phy.tx & BIT(0)) {
			conn->llcp_phy.tx = BIT(0);
		} else if (conn->llcp_phy.tx & BIT(2)) {
    e458:	4201      	tst	r1, r0
    e45a:	d001      	beq.n	e460 <event_connection_prepare+0x148>
			conn->llcp_phy.tx = BIT(2);
    e45c:	2110      	movs	r1, #16
    e45e:	430a      	orrs	r2, r1
		} else {
			conn->llcp_phy.tx = 0;
    e460:	701a      	strb	r2, [r3, #0]
		}

		/* select only one rx phy, prefer 2M */
		if (conn->llcp_phy.rx & BIT(1)) {
    e462:	7818      	ldrb	r0, [r3, #0]
    e464:	0941      	lsrs	r1, r0, #5
    e466:	078a      	lsls	r2, r1, #30
    e468:	d504      	bpl.n	e474 <event_connection_prepare+0x15c>
			conn->llcp_phy.rx = BIT(1);
    e46a:	211f      	movs	r1, #31
    e46c:	0002      	movs	r2, r0
    e46e:	400a      	ands	r2, r1
    e470:	3121      	adds	r1, #33	; 0x21
    e472:	e00d      	b.n	e490 <event_connection_prepare+0x178>
		} else if (conn->llcp_phy.rx & BIT(0)) {
    e474:	07ca      	lsls	r2, r1, #31
    e476:	d504      	bpl.n	e482 <event_connection_prepare+0x16a>
			conn->llcp_phy.rx = BIT(0);
    e478:	211f      	movs	r1, #31
    e47a:	0002      	movs	r2, r0
    e47c:	400a      	ands	r2, r1
    e47e:	3101      	adds	r1, #1
    e480:	e006      	b.n	e490 <event_connection_prepare+0x178>
    e482:	221f      	movs	r2, #31
		} else if (conn->llcp_phy.rx & BIT(2)) {
    e484:	2404      	movs	r4, #4
			conn->llcp_phy.rx = BIT(2);
    e486:	4002      	ands	r2, r0
		/* select only one rx phy, prefer 2M */
		if (conn->llcp_phy.rx & BIT(1)) {
			conn->llcp_phy.rx = BIT(1);
		} else if (conn->llcp_phy.rx & BIT(0)) {
			conn->llcp_phy.rx = BIT(0);
		} else if (conn->llcp_phy.rx & BIT(2)) {
    e488:	4221      	tst	r1, r4
    e48a:	d002      	beq.n	e492 <event_connection_prepare+0x17a>
			conn->llcp_phy.rx = BIT(2);
    e48c:	2180      	movs	r1, #128	; 0x80
    e48e:	4249      	negs	r1, r1
    e490:	430a      	orrs	r2, r1
		} else {
			conn->llcp_phy.rx = 0;
		}

		/* Initiate PHY Update Ind */
		conn->llcp.phy_upd_ind.tx = conn->llcp_phy.tx;
    e492:	0039      	movs	r1, r7
    e494:	2407      	movs	r4, #7
    e496:	251c      	movs	r5, #28
		} else if (conn->llcp_phy.rx & BIT(0)) {
			conn->llcp_phy.rx = BIT(0);
		} else if (conn->llcp_phy.rx & BIT(2)) {
			conn->llcp_phy.rx = BIT(2);
		} else {
			conn->llcp_phy.rx = 0;
    e498:	701a      	strb	r2, [r3, #0]
		}

		/* Initiate PHY Update Ind */
		conn->llcp.phy_upd_ind.tx = conn->llcp_phy.tx;
    e49a:	781a      	ldrb	r2, [r3, #0]
    e49c:	316c      	adds	r1, #108	; 0x6c
    e49e:	7808      	ldrb	r0, [r1, #0]
    e4a0:	0892      	lsrs	r2, r2, #2
    e4a2:	4022      	ands	r2, r4
    e4a4:	43a8      	bics	r0, r5
    e4a6:	0092      	lsls	r2, r2, #2
    e4a8:	4302      	orrs	r2, r0
    e4aa:	700a      	strb	r2, [r1, #0]
		conn->llcp.phy_upd_ind.rx = conn->llcp_phy.rx;
    e4ac:	781b      	ldrb	r3, [r3, #0]
    e4ae:	7808      	ldrb	r0, [r1, #0]
    e4b0:	095b      	lsrs	r3, r3, #5
    e4b2:	015a      	lsls	r2, r3, #5
    e4b4:	231f      	movs	r3, #31
    e4b6:	4003      	ands	r3, r0
    e4b8:	4313      	orrs	r3, r2
		/* conn->llcp.phy_upd_ind.instant = 0; */
		conn->llcp.phy_upd_ind.initiate = 1;
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    e4ba:	003a      	movs	r2, r7

		/* Initiate PHY Update Ind */
		conn->llcp.phy_upd_ind.tx = conn->llcp_phy.tx;
		conn->llcp.phy_upd_ind.rx = conn->llcp_phy.rx;
		/* conn->llcp.phy_upd_ind.instant = 0; */
		conn->llcp.phy_upd_ind.initiate = 1;
    e4bc:	b2d8      	uxtb	r0, r3
    e4be:	2301      	movs	r3, #1
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    e4c0:	32bf      	adds	r2, #191	; 0xbf
    e4c2:	7812      	ldrb	r2, [r2, #0]
    e4c4:	40da      	lsrs	r2, r3
    e4c6:	401a      	ands	r2, r3
    e4c8:	409a      	lsls	r2, r3
    e4ca:	4303      	orrs	r3, r0
    e4cc:	2002      	movs	r0, #2
    e4ce:	4383      	bics	r3, r0
    e4d0:	4313      	orrs	r3, r2
    e4d2:	700b      	strb	r3, [r1, #0]

		conn->llcp_type = LLCP_PHY_UPD;
    e4d4:	003b      	movs	r3, r7
		conn->llcp_ack--;
    e4d6:	003a      	movs	r2, r7
		conn->llcp.phy_upd_ind.rx = conn->llcp_phy.rx;
		/* conn->llcp.phy_upd_ind.instant = 0; */
		conn->llcp.phy_upd_ind.initiate = 1;
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;

		conn->llcp_type = LLCP_PHY_UPD;
    e4d8:	336a      	adds	r3, #106	; 0x6a
    e4da:	701c      	strb	r4, [r3, #0]
		conn->llcp_ack--;
    e4dc:	3269      	adds	r2, #105	; 0x69
    e4de:	7813      	ldrb	r3, [r2, #0]
    e4e0:	3b01      	subs	r3, #1
    e4e2:	7013      	strb	r3, [r2, #0]
		event_phy_req_prep(conn);
	}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PHY */

	/* check if procedure is requested */
	if (conn->llcp_ack != conn->llcp_req) {
    e4e4:	003b      	movs	r3, r7
    e4e6:	3369      	adds	r3, #105	; 0x69
    e4e8:	781a      	ldrb	r2, [r3, #0]
    e4ea:	3b01      	subs	r3, #1
    e4ec:	781b      	ldrb	r3, [r3, #0]
    e4ee:	429a      	cmp	r2, r3
    e4f0:	d101      	bne.n	e4f6 <event_connection_prepare+0x1de>
    e4f2:	f000 fdc8 	bl	f086 <event_connection_prepare+0xd6e>
		/* Stop previous event, to avoid Radio DMA corrupting the
		 * rx queue
		 */
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    e4f6:	2200      	movs	r2, #0
    e4f8:	2305      	movs	r3, #5
    e4fa:	0010      	movs	r0, r2
    e4fc:	0011      	movs	r1, r2
    e4fe:	f7fe fb73 	bl	cbe8 <event_stop>

		switch (conn->llcp_type) {
    e502:	003b      	movs	r3, r7
    e504:	336a      	adds	r3, #106	; 0x6a
    e506:	7818      	ldrb	r0, [r3, #0]
    e508:	3801      	subs	r0, #1
    e50a:	2806      	cmp	r0, #6
    e50c:	d901      	bls.n	e512 <event_connection_prepare+0x1fa>
    e50e:	f000 fdb3 	bl	f078 <event_connection_prepare+0xd60>
    e512:	f7f1 fe3b 	bl	18c <__gnu_thumb1_case_uhi>
    e516:	0007      	.short	0x0007
    e518:	03520309 	.word	0x03520309
    e51c:	049e0470 	.word	0x049e0470
    e520:	051404fa 	.word	0x051404fa
					   u32_t ticks_at_expire)
{
	struct connection *conn_upd;
	u16_t instant_latency;

	conn_upd = _radio.conn_upd;
    e524:	23c2      	movs	r3, #194	; 0xc2
    e526:	4838      	ldr	r0, [pc, #224]	; (e608 <event_connection_prepare+0x2f0>)
    e528:	005b      	lsls	r3, r3, #1
    e52a:	58c2      	ldr	r2, [r0, r3]

	/* set mutex */
	if (!conn_upd) {
    e52c:	2a00      	cmp	r2, #0
    e52e:	d100      	bne.n	e532 <event_connection_prepare+0x21a>
		_radio.conn_upd = conn;
    e530:	50c7      	str	r7, [r0, r3]
	}

	instant_latency =
		((event_counter - conn->llcp.connection_update.instant) &
		 0xffff);
	if (conn->llcp.connection_update.state) {
    e532:	003d      	movs	r5, r7
    e534:	2307      	movs	r3, #7
    e536:	3595      	adds	r5, #149	; 0x95
    e538:	7829      	ldrb	r1, [r5, #0]
    e53a:	400b      	ands	r3, r1
    e53c:	d100      	bne.n	e540 <event_connection_prepare+0x228>
    e53e:	e115      	b.n	e76c <event_connection_prepare+0x454>
		if (((conn_upd == 0) || (conn_upd == conn)) &&
    e540:	2a00      	cmp	r2, #0
    e542:	d003      	beq.n	e54c <event_connection_prepare+0x234>
    e544:	4297      	cmp	r7, r2
    e546:	d001      	beq.n	e54c <event_connection_prepare+0x234>
    e548:	f000 fd9d 	bl	f086 <event_connection_prepare+0xd6e>
    e54c:	3b04      	subs	r3, #4
    e54e:	2b01      	cmp	r3, #1
    e550:	d801      	bhi.n	e556 <event_connection_prepare+0x23e>
    e552:	f000 fd98 	bl	f086 <event_connection_prepare+0xd6e>
#endif /* CONFIG_BLUETOOTH_CONTROLLER_SCHED_ADVANCED */
			struct radio_pdu_node_tx *node_tx;
			struct pdu_data *pdu_ctrl_tx;
			u8_t state;

			node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    e556:	3059      	adds	r0, #89	; 0x59
    e558:	30ff      	adds	r0, #255	; 0xff
    e55a:	f7fc f999 	bl	a890 <mem_acquire>
    e55e:	1e04      	subs	r4, r0, #0
			if (!node_tx) {
    e560:	d101      	bne.n	e566 <event_connection_prepare+0x24e>
    e562:	f000 fd90 	bl	f086 <event_connection_prepare+0xd6e>
			pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_SCHED_ADVANCED)
			fp_mayfly_select_or_use = mayfly_sched_win_offset_use;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_SCHED_ADVANCED */
			state = conn->llcp.connection_update.state;
    e566:	782b      	ldrb	r3, [r5, #0]
    e568:	075b      	lsls	r3, r3, #29
    e56a:	0f5b      	lsrs	r3, r3, #29
			if ((state == LLCP_CONN_STATE_RSP) &&
    e56c:	2b03      	cmp	r3, #3
    e56e:	d105      	bne.n	e57c <event_connection_prepare+0x264>
			    (conn->role.master.role == 0)) {
    e570:	003b      	movs	r3, r7
    e572:	3344      	adds	r3, #68	; 0x44

#if defined(CONFIG_BLUETOOTH_CONTROLLER_SCHED_ADVANCED)
			fp_mayfly_select_or_use = mayfly_sched_win_offset_use;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_SCHED_ADVANCED */
			state = conn->llcp.connection_update.state;
			if ((state == LLCP_CONN_STATE_RSP) &&
    e574:	781b      	ldrb	r3, [r3, #0]
    e576:	07db      	lsls	r3, r3, #31
    e578:	d508      	bpl.n	e58c <event_connection_prepare+0x274>
    e57a:	e094      	b.n	e6a6 <event_connection_prepare+0x38e>
				fp_mayfly_select_or_use =
					mayfly_sched_win_offset_select;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_SCHED_ADVANCED */
			}

			switch (state) {
    e57c:	2b02      	cmp	r3, #2
    e57e:	d053      	beq.n	e628 <event_connection_prepare+0x310>
    e580:	2b03      	cmp	r3, #3
    e582:	d100      	bne.n	e586 <event_connection_prepare+0x26e>
    e584:	e08f      	b.n	e6a6 <event_connection_prepare+0x38e>
    e586:	2b01      	cmp	r3, #1
    e588:	d000      	beq.n	e58c <event_connection_prepare+0x274>
    e58a:	e0e2      	b.n	e752 <event_connection_prepare+0x43a>
			case LLCP_CONN_STATE_INITIATE:
				if (conn->role.master.role == 0) {
    e58c:	003b      	movs	r3, r7
    e58e:	3344      	adds	r3, #68	; 0x44
    e590:	781a      	ldrb	r2, [r3, #0]
    e592:	2301      	movs	r3, #1
    e594:	401a      	ands	r2, r3
    e596:	d147      	bne.n	e628 <event_connection_prepare+0x310>
			  u32_t ticks_at_expire,
			  struct mayfly *mayfly_sched_offset,
			  void (*fp_mayfly_select_or_use)(void *))
{
	/* move to in progress */
	conn->llcp.connection_update.state = LLCP_CONN_STATE_INPROG;
    e598:	2107      	movs	r1, #7
    e59a:	782b      	ldrb	r3, [r5, #0]
    e59c:	438b      	bics	r3, r1
    e59e:	702b      	strb	r3, [r5, #0]

	/* set instant */
	conn->llcp.connection_update.instant =
    e5a0:	003d      	movs	r5, r7
    e5a2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    e5a4:	990a      	ldr	r1, [sp, #40]	; 0x28
    e5a6:	3306      	adds	r3, #6
    e5a8:	18cb      	adds	r3, r1, r3
		event_counter + conn->latency + 6;

	/* place the conn update req packet as next in tx queue */
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e5aa:	2103      	movs	r1, #3
{
	/* move to in progress */
	conn->llcp.connection_update.state = LLCP_CONN_STATE_INPROG;

	/* set instant */
	conn->llcp.connection_update.instant =
    e5ac:	3574      	adds	r5, #116	; 0x74
    e5ae:	802b      	strh	r3, [r5, #0]
		event_counter + conn->latency + 6;

	/* place the conn update req packet as next in tx queue */
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e5b0:	7923      	ldrb	r3, [r4, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
		sizeof(struct pdu_data_llctrl_conn_update_ind);
	pdu_ctrl_tx->payload.llctrl.opcode =
    e5b2:	71e2      	strb	r2, [r4, #7]
	/* set instant */
	conn->llcp.connection_update.instant =
		event_counter + conn->latency + 6;

	/* place the conn update req packet as next in tx queue */
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e5b4:	430b      	orrs	r3, r1
    e5b6:	7123      	strb	r3, [r4, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
    e5b8:	230c      	movs	r3, #12
    e5ba:	7163      	strb	r3, [r4, #5]
		sizeof(struct pdu_data_llctrl_conn_update_ind);
	pdu_ctrl_tx->payload.llctrl.opcode =
		PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.win_size =
		conn->llcp.connection_update.win_size;
    e5bc:	003b      	movs	r3, r7
    e5be:	3394      	adds	r3, #148	; 0x94
    e5c0:	781b      	ldrb	r3, [r3, #0]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.
		win_offset = conn->llcp.connection_update.win_offset_us / 1250;
    e5c2:	4918      	ldr	r1, [pc, #96]	; (e624 <event_connection_prepare+0x30c>)
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
		sizeof(struct pdu_data_llctrl_conn_update_ind);
	pdu_ctrl_tx->payload.llctrl.opcode =
		PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.win_size =
    e5c4:	7223      	strb	r3, [r4, #8]
		conn->llcp.connection_update.win_size;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.
		win_offset = conn->llcp.connection_update.win_offset_us / 1250;
    e5c6:	003b      	movs	r3, r7
    e5c8:	338c      	adds	r3, #140	; 0x8c
    e5ca:	6818      	ldr	r0, [r3, #0]
    e5cc:	f7f1 fde8 	bl	1a0 <__aeabi_uidiv>
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.interval =
		conn->llcp.connection_update.interval;
    e5d0:	003b      	movs	r3, r7
	pdu_ctrl_tx->payload.llctrl.opcode =
		PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.win_size =
		conn->llcp.connection_update.win_size;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.
		win_offset = conn->llcp.connection_update.win_offset_us / 1250;
    e5d2:	b280      	uxth	r0, r0
    e5d4:	7260      	strb	r0, [r4, #9]
    e5d6:	0a00      	lsrs	r0, r0, #8
    e5d8:	72a0      	strb	r0, [r4, #10]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.interval =
		conn->llcp.connection_update.interval;
    e5da:	336c      	adds	r3, #108	; 0x6c
    e5dc:	881b      	ldrh	r3, [r3, #0]
		PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.win_size =
		conn->llcp.connection_update.win_size;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.
		win_offset = conn->llcp.connection_update.win_offset_us / 1250;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.interval =
    e5de:	72e3      	strb	r3, [r4, #11]
    e5e0:	0a1b      	lsrs	r3, r3, #8
    e5e2:	7323      	strb	r3, [r4, #12]
		conn->llcp.connection_update.interval;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.latency =
		conn->llcp.connection_update.latency;
    e5e4:	003b      	movs	r3, r7
    e5e6:	336e      	adds	r3, #110	; 0x6e
    e5e8:	881b      	ldrh	r3, [r3, #0]
		conn->llcp.connection_update.win_size;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.
		win_offset = conn->llcp.connection_update.win_offset_us / 1250;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.interval =
		conn->llcp.connection_update.interval;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.latency =
    e5ea:	7363      	strb	r3, [r4, #13]
    e5ec:	0a1b      	lsrs	r3, r3, #8
    e5ee:	73a3      	strb	r3, [r4, #14]
		conn->llcp.connection_update.latency;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.timeout =
		conn->llcp.connection_update.timeout;
    e5f0:	003b      	movs	r3, r7
    e5f2:	3370      	adds	r3, #112	; 0x70
    e5f4:	881b      	ldrh	r3, [r3, #0]
		win_offset = conn->llcp.connection_update.win_offset_us / 1250;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.interval =
		conn->llcp.connection_update.interval;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.latency =
		conn->llcp.connection_update.latency;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.timeout =
    e5f6:	73e3      	strb	r3, [r4, #15]
    e5f8:	0a1b      	lsrs	r3, r3, #8
    e5fa:	7423      	strb	r3, [r4, #16]
		conn->llcp.connection_update.timeout;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.instant =
		conn->llcp.connection_update.instant;
    e5fc:	882b      	ldrh	r3, [r5, #0]
		conn->llcp.connection_update.interval;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.latency =
		conn->llcp.connection_update.latency;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.timeout =
		conn->llcp.connection_update.timeout;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.instant =
    e5fe:	7463      	strb	r3, [r4, #17]
    e600:	0a1b      	lsrs	r3, r3, #8
    e602:	74a3      	strb	r3, [r4, #18]
    e604:	e2b6      	b.n	eb74 <event_connection_prepare+0x85c>
    e606:	46c0      	nop			; (mov r8, r8)
    e608:	200015c0 	.word	0x200015c0
    e60c:	000154c4 	.word	0x000154c4
    e610:	00015484 	.word	0x00015484
    e614:	000154c9 	.word	0x000154c9
    e618:	0001548b 	.word	0x0001548b
    e61c:	00016fd6 	.word	0x00016fd6
    e620:	000183ec 	.word	0x000183ec
    e624:	000004e2 	.word	0x000004e2
					    struct pdu_data *pdu_ctrl_tx,
					    u32_t ticks_at_expire,
					    struct mayfly *mayfly_sched_offset)
{
	/* move to wait for conn_update/rsp/rej */
	conn->llcp.connection_update.state = LLCP_CONN_STATE_RSP_WAIT;
    e628:	2207      	movs	r2, #7
    e62a:	782b      	ldrb	r3, [r5, #0]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
		sizeof(struct pdu_data_llctrl_conn_param_req);
	pdu_ctrl_tx->payload.llctrl.opcode =
		PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.interval_min =
		conn->llcp.connection_update.interval;
    e62c:	0039      	movs	r1, r7
					    struct pdu_data *pdu_ctrl_tx,
					    u32_t ticks_at_expire,
					    struct mayfly *mayfly_sched_offset)
{
	/* move to wait for conn_update/rsp/rej */
	conn->llcp.connection_update.state = LLCP_CONN_STATE_RSP_WAIT;
    e62e:	4393      	bics	r3, r2
    e630:	3a02      	subs	r2, #2
    e632:	4313      	orrs	r3, r2
    e634:	702b      	strb	r3, [r5, #0]

	/* place the conn param req packet as next in tx queue */
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e636:	7923      	ldrb	r3, [r4, #4]
    e638:	3a02      	subs	r2, #2
    e63a:	4313      	orrs	r3, r2
    e63c:	7123      	strb	r3, [r4, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
    e63e:	2318      	movs	r3, #24
    e640:	7163      	strb	r3, [r4, #5]
		sizeof(struct pdu_data_llctrl_conn_param_req);
	pdu_ctrl_tx->payload.llctrl.opcode =
    e642:	3b09      	subs	r3, #9
    e644:	71e3      	strb	r3, [r4, #7]
		PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.interval_min =
		conn->llcp.connection_update.interval;
    e646:	316c      	adds	r1, #108	; 0x6c
    e648:	880b      	ldrh	r3, [r1, #0]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
		sizeof(struct pdu_data_llctrl_conn_param_req);
	pdu_ctrl_tx->payload.llctrl.opcode =
		PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.interval_min =
    e64a:	2200      	movs	r2, #0
    e64c:	7223      	strb	r3, [r4, #8]
    e64e:	0a1b      	lsrs	r3, r3, #8
    e650:	7263      	strb	r3, [r4, #9]
		conn->llcp.connection_update.interval;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.interval_max =
		conn->llcp.connection_update.interval;
    e652:	880b      	ldrh	r3, [r1, #0]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.latency =
		conn->llcp.connection_update.latency;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.timeout =
		conn->llcp.connection_update.timeout;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.preferred_periodicity = 0;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.reference_conn_event_count = event_counter;
    e654:	2128      	movs	r1, #40	; 0x28
		sizeof(struct pdu_data_llctrl_conn_param_req);
	pdu_ctrl_tx->payload.llctrl.opcode =
		PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.interval_min =
		conn->llcp.connection_update.interval;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.interval_max =
    e656:	72a3      	strb	r3, [r4, #10]
    e658:	0a1b      	lsrs	r3, r3, #8
    e65a:	72e3      	strb	r3, [r4, #11]
		conn->llcp.connection_update.interval;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.latency =
		conn->llcp.connection_update.latency;
    e65c:	003b      	movs	r3, r7
    e65e:	336e      	adds	r3, #110	; 0x6e
    e660:	881b      	ldrh	r3, [r3, #0]
		PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.interval_min =
		conn->llcp.connection_update.interval;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.interval_max =
		conn->llcp.connection_update.interval;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.latency =
    e662:	7323      	strb	r3, [r4, #12]
    e664:	0a1b      	lsrs	r3, r3, #8
    e666:	7363      	strb	r3, [r4, #13]
		conn->llcp.connection_update.latency;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.timeout =
		conn->llcp.connection_update.timeout;
    e668:	003b      	movs	r3, r7
    e66a:	3370      	adds	r3, #112	; 0x70
    e66c:	881b      	ldrh	r3, [r3, #0]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.preferred_periodicity = 0;
    e66e:	7422      	strb	r2, [r4, #16]
		conn->llcp.connection_update.interval;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.interval_max =
		conn->llcp.connection_update.interval;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.latency =
		conn->llcp.connection_update.latency;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.timeout =
    e670:	73a3      	strb	r3, [r4, #14]
    e672:	0a1b      	lsrs	r3, r3, #8
    e674:	73e3      	strb	r3, [r4, #15]
		conn->llcp.connection_update.timeout;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.preferred_periodicity = 0;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.reference_conn_event_count = event_counter;
    e676:	466b      	mov	r3, sp
    e678:	185b      	adds	r3, r3, r1
    e67a:	781b      	ldrb	r3, [r3, #0]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset0 = 0x0000;
    e67c:	74e2      	strb	r2, [r4, #19]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.latency =
		conn->llcp.connection_update.latency;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.timeout =
		conn->llcp.connection_update.timeout;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.preferred_periodicity = 0;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.reference_conn_event_count = event_counter;
    e67e:	7463      	strb	r3, [r4, #17]
    e680:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset0 = 0x0000;
    e682:	7522      	strb	r2, [r4, #20]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.latency =
		conn->llcp.connection_update.latency;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.timeout =
		conn->llcp.connection_update.timeout;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.preferred_periodicity = 0;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.reference_conn_event_count = event_counter;
    e684:	0a1b      	lsrs	r3, r3, #8
    e686:	74a3      	strb	r3, [r4, #18]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset0 = 0x0000;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset1 = 0xffff;
    e688:	2301      	movs	r3, #1
    e68a:	425b      	negs	r3, r3
    e68c:	7563      	strb	r3, [r4, #21]
    e68e:	75a3      	strb	r3, [r4, #22]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset2 = 0xffff;
    e690:	75e3      	strb	r3, [r4, #23]
    e692:	7623      	strb	r3, [r4, #24]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset3 = 0xffff;
    e694:	7663      	strb	r3, [r4, #25]
    e696:	76a3      	strb	r3, [r4, #26]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset4 = 0xffff;
    e698:	76e3      	strb	r3, [r4, #27]
    e69a:	7723      	strb	r3, [r4, #28]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset5 = 0xffff;
    e69c:	7763      	strb	r3, [r4, #29]
    e69e:	77a3      	strb	r3, [r4, #30]

	/* Start Procedure Timeout */
	conn->procedure_expire = conn->procedure_reload;
    e6a0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
    e6a2:	877b      	strh	r3, [r7, #58]	; 0x3a
    e6a4:	e266      	b.n	eb74 <event_connection_prepare+0x85c>

static inline void event_conn_update_st_rsp(struct connection *conn,
					    struct pdu_data *pdu_ctrl_tx)
{
	/* procedure request acked */
	conn->llcp_ack = conn->llcp_req;
    e6a6:	003b      	movs	r3, r7
    e6a8:	3368      	adds	r3, #104	; 0x68
    e6aa:	781a      	ldrb	r2, [r3, #0]

	/* reset mutex */
	_radio.conn_upd = NULL;
    e6ac:	2100      	movs	r1, #0

static inline void event_conn_update_st_rsp(struct connection *conn,
					    struct pdu_data *pdu_ctrl_tx)
{
	/* procedure request acked */
	conn->llcp_ack = conn->llcp_req;
    e6ae:	705a      	strb	r2, [r3, #1]

	/* reset mutex */
	_radio.conn_upd = NULL;
    e6b0:	23c2      	movs	r3, #194	; 0xc2
    e6b2:	4aba      	ldr	r2, [pc, #744]	; (e99c <event_connection_prepare+0x684>)
    e6b4:	005b      	lsls	r3, r3, #1
    e6b6:	50d1      	str	r1, [r2, r3]

	/** @todo REJECT_IND_EXT */

	/* place the conn param rsp packet as next in tx queue */
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e6b8:	2203      	movs	r2, #3
    e6ba:	7923      	ldrb	r3, [r4, #4]
    e6bc:	4313      	orrs	r3, r2
    e6be:	7123      	strb	r3, [r4, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
    e6c0:	2318      	movs	r3, #24
		sizeof(struct pdu_data_llctrl_conn_param_rsp);
	pdu_ctrl_tx->payload.llctrl.opcode =
		PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.interval_min =
		conn->llcp.connection_update.interval;
    e6c2:	003a      	movs	r2, r7

	/** @todo REJECT_IND_EXT */

	/* place the conn param rsp packet as next in tx queue */
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
    e6c4:	7163      	strb	r3, [r4, #5]
		sizeof(struct pdu_data_llctrl_conn_param_rsp);
	pdu_ctrl_tx->payload.llctrl.opcode =
    e6c6:	3b08      	subs	r3, #8
    e6c8:	71e3      	strb	r3, [r4, #7]
		PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.interval_min =
		conn->llcp.connection_update.interval;
    e6ca:	326c      	adds	r2, #108	; 0x6c
    e6cc:	8813      	ldrh	r3, [r2, #0]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
		sizeof(struct pdu_data_llctrl_conn_param_rsp);
	pdu_ctrl_tx->payload.llctrl.opcode =
		PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.interval_min =
    e6ce:	7223      	strb	r3, [r4, #8]
    e6d0:	0a1b      	lsrs	r3, r3, #8
    e6d2:	7263      	strb	r3, [r4, #9]
		conn->llcp.connection_update.interval;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.interval_max =
		conn->llcp.connection_update.interval;
    e6d4:	8813      	ldrh	r3, [r2, #0]
		sizeof(struct pdu_data_llctrl_conn_param_rsp);
	pdu_ctrl_tx->payload.llctrl.opcode =
		PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.interval_min =
		conn->llcp.connection_update.interval;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.interval_max =
    e6d6:	72a3      	strb	r3, [r4, #10]
    e6d8:	0a1b      	lsrs	r3, r3, #8
    e6da:	72e3      	strb	r3, [r4, #11]
		conn->llcp.connection_update.interval;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.latency =
		conn->llcp.connection_update.latency;
    e6dc:	003b      	movs	r3, r7
    e6de:	336e      	adds	r3, #110	; 0x6e
    e6e0:	881b      	ldrh	r3, [r3, #0]
		PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.interval_min =
		conn->llcp.connection_update.interval;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.interval_max =
		conn->llcp.connection_update.interval;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.latency =
    e6e2:	7323      	strb	r3, [r4, #12]
    e6e4:	0a1b      	lsrs	r3, r3, #8
    e6e6:	7363      	strb	r3, [r4, #13]
		conn->llcp.connection_update.latency;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.timeout =
		conn->llcp.connection_update.timeout;
    e6e8:	003b      	movs	r3, r7
    e6ea:	3370      	adds	r3, #112	; 0x70
    e6ec:	881b      	ldrh	r3, [r3, #0]
		conn->llcp.connection_update.interval;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.interval_max =
		conn->llcp.connection_update.interval;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.latency =
		conn->llcp.connection_update.latency;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.timeout =
    e6ee:	73a3      	strb	r3, [r4, #14]
    e6f0:	0a1b      	lsrs	r3, r3, #8
    e6f2:	73e3      	strb	r3, [r4, #15]
		conn->llcp.connection_update.timeout;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.preferred_periodicity =
		conn->llcp.connection_update.preferred_periodicity;
    e6f4:	003b      	movs	r3, r7
    e6f6:	3372      	adds	r3, #114	; 0x72
    e6f8:	781b      	ldrb	r3, [r3, #0]
		conn->llcp.connection_update.interval;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.latency =
		conn->llcp.connection_update.latency;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.timeout =
		conn->llcp.connection_update.timeout;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.preferred_periodicity =
    e6fa:	7423      	strb	r3, [r4, #16]
		conn->llcp.connection_update.preferred_periodicity;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.reference_conn_event_count =
		conn->llcp.connection_update.instant;
    e6fc:	003b      	movs	r3, r7
    e6fe:	3374      	adds	r3, #116	; 0x74
    e700:	881b      	ldrh	r3, [r3, #0]
		conn->llcp.connection_update.latency;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.timeout =
		conn->llcp.connection_update.timeout;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.preferred_periodicity =
		conn->llcp.connection_update.preferred_periodicity;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.reference_conn_event_count =
    e702:	7463      	strb	r3, [r4, #17]
    e704:	0a1b      	lsrs	r3, r3, #8
    e706:	74a3      	strb	r3, [r4, #18]
		conn->llcp.connection_update.instant;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset0 =
		conn->llcp.connection_update.offset0;
    e708:	003b      	movs	r3, r7
    e70a:	3376      	adds	r3, #118	; 0x76
    e70c:	881b      	ldrh	r3, [r3, #0]
		conn->llcp.connection_update.timeout;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.preferred_periodicity =
		conn->llcp.connection_update.preferred_periodicity;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.reference_conn_event_count =
		conn->llcp.connection_update.instant;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset0 =
    e70e:	74e3      	strb	r3, [r4, #19]
    e710:	0a1b      	lsrs	r3, r3, #8
    e712:	7523      	strb	r3, [r4, #20]
		conn->llcp.connection_update.offset0;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset1 =
		conn->llcp.connection_update.offset1;
    e714:	003b      	movs	r3, r7
    e716:	3378      	adds	r3, #120	; 0x78
    e718:	881b      	ldrh	r3, [r3, #0]
		conn->llcp.connection_update.preferred_periodicity;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.reference_conn_event_count =
		conn->llcp.connection_update.instant;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset0 =
		conn->llcp.connection_update.offset0;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset1 =
    e71a:	7563      	strb	r3, [r4, #21]
    e71c:	0a1b      	lsrs	r3, r3, #8
    e71e:	75a3      	strb	r3, [r4, #22]
		conn->llcp.connection_update.offset1;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset2 =
		conn->llcp.connection_update.offset2;
    e720:	003b      	movs	r3, r7
    e722:	337a      	adds	r3, #122	; 0x7a
    e724:	881b      	ldrh	r3, [r3, #0]
		conn->llcp.connection_update.instant;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset0 =
		conn->llcp.connection_update.offset0;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset1 =
		conn->llcp.connection_update.offset1;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset2 =
    e726:	75e3      	strb	r3, [r4, #23]
    e728:	0a1b      	lsrs	r3, r3, #8
    e72a:	7623      	strb	r3, [r4, #24]
		conn->llcp.connection_update.offset2;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset3 =
		conn->llcp.connection_update.offset3;
    e72c:	003b      	movs	r3, r7
    e72e:	337c      	adds	r3, #124	; 0x7c
    e730:	881b      	ldrh	r3, [r3, #0]
		conn->llcp.connection_update.offset0;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset1 =
		conn->llcp.connection_update.offset1;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset2 =
		conn->llcp.connection_update.offset2;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset3 =
    e732:	7663      	strb	r3, [r4, #25]
    e734:	0a1b      	lsrs	r3, r3, #8
    e736:	76a3      	strb	r3, [r4, #26]
		conn->llcp.connection_update.offset3;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset4 =
		conn->llcp.connection_update.offset4;
    e738:	003b      	movs	r3, r7
    e73a:	337e      	adds	r3, #126	; 0x7e
    e73c:	881b      	ldrh	r3, [r3, #0]
		conn->llcp.connection_update.offset1;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset2 =
		conn->llcp.connection_update.offset2;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset3 =
		conn->llcp.connection_update.offset3;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset4 =
    e73e:	76e3      	strb	r3, [r4, #27]
    e740:	0a1b      	lsrs	r3, r3, #8
    e742:	7723      	strb	r3, [r4, #28]
		conn->llcp.connection_update.offset4;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset5 =
		conn->llcp.connection_update.offset5;
    e744:	003b      	movs	r3, r7
    e746:	3380      	adds	r3, #128	; 0x80
    e748:	881b      	ldrh	r3, [r3, #0]
		conn->llcp.connection_update.offset2;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset3 =
		conn->llcp.connection_update.offset3;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset4 =
		conn->llcp.connection_update.offset4;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset5 =
    e74a:	7763      	strb	r3, [r4, #29]
    e74c:	0a1b      	lsrs	r3, r3, #8
    e74e:	77a3      	strb	r3, [r4, #30]
    e750:	e210      	b.n	eb74 <event_connection_prepare+0x85c>
			case LLCP_CONN_STATE_RSP:
				event_conn_update_st_rsp(conn, pdu_ctrl_tx);
				break;

			default:
				LL_ASSERT(0);
    e752:	4b93      	ldr	r3, [pc, #588]	; (e9a0 <event_connection_prepare+0x688>)
    e754:	9301      	str	r3, [sp, #4]
    e756:	4b93      	ldr	r3, [pc, #588]	; (e9a4 <event_connection_prepare+0x68c>)
    e758:	9300      	str	r3, [sp, #0]
    e75a:	4b93      	ldr	r3, [pc, #588]	; (e9a8 <event_connection_prepare+0x690>)
    e75c:	4a93      	ldr	r2, [pc, #588]	; (e9ac <event_connection_prepare+0x694>)
    e75e:	4994      	ldr	r1, [pc, #592]	; (e9b0 <event_connection_prepare+0x698>)
    e760:	4894      	ldr	r0, [pc, #592]	; (e9b4 <event_connection_prepare+0x69c>)
    e762:	f7f3 f90d 	bl	1980 <printk>
    e766:	b662      	cpsie	i
    e768:	2004      	movs	r0, #4
    e76a:	df02      	svc	2
	if (!conn_upd) {
		_radio.conn_upd = conn;
	}

	instant_latency =
		((event_counter - conn->llcp.connection_update.instant) &
    e76c:	003a      	movs	r2, r7
    e76e:	3274      	adds	r2, #116	; 0x74
	/* set mutex */
	if (!conn_upd) {
		_radio.conn_upd = conn;
	}

	instant_latency =
    e770:	8812      	ldrh	r2, [r2, #0]
    e772:	990a      	ldr	r1, [sp, #40]	; 0x28
    e774:	1a8a      	subs	r2, r1, r2
				break;
			}

			ctrl_tx_enqueue(conn, node_tx);
		}
	} else if (instant_latency <= 0x7FFF) {
    e776:	b295      	uxth	r5, r2
    e778:	0412      	lsls	r2, r2, #16
    e77a:	d501      	bpl.n	e780 <event_connection_prepare+0x468>
    e77c:	f000 fc83 	bl	f086 <event_connection_prepare+0xd6e>
		u16_t conn_interval_new;
		u16_t latency;
		u32_t mayfly_was_enabled;

		/* procedure request acked */
		conn->llcp_ack = conn->llcp_req;
    e780:	003a      	movs	r2, r7
    e782:	3268      	adds	r2, #104	; 0x68
    e784:	7811      	ldrb	r1, [r2, #0]

		/* Reset ticker_id_prepare as role is not continued further
		 * due to conn update at this event.
		 */
		_radio.ticker_id_prepare = 0;
    e786:	7303      	strb	r3, [r0, #12]
		u16_t conn_interval_new;
		u16_t latency;
		u32_t mayfly_was_enabled;

		/* procedure request acked */
		conn->llcp_ack = conn->llcp_req;
    e788:	7051      	strb	r1, [r2, #1]
		 * due to conn update at this event.
		 */
		_radio.ticker_id_prepare = 0;

		/* reset mutex */
		if (_radio.conn_upd == conn) {
    e78a:	22c2      	movs	r2, #194	; 0xc2
    e78c:	0052      	lsls	r2, r2, #1
    e78e:	5881      	ldr	r1, [r0, r2]
    e790:	428f      	cmp	r7, r1
    e792:	d100      	bne.n	e796 <event_connection_prepare+0x47e>
			_radio.conn_upd = NULL;
    e794:	5083      	str	r3, [r0, r2]
    e796:	003e      	movs	r6, r7
		}

		/* Prepare the rx packet structure */
		if ((conn->llcp.connection_update.interval !=
    e798:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    e79a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    e79c:	366c      	adds	r6, #108	; 0x6c
    e79e:	4293      	cmp	r3, r2
    e7a0:	d10d      	bne.n	e7be <event_connection_prepare+0x4a6>
		     conn->conn_interval) ||
		    (conn->llcp.connection_update.latency != conn->latency) ||
		    (conn->llcp.connection_update.timeout !=
    e7a2:	003b      	movs	r3, r7
    e7a4:	3370      	adds	r3, #112	; 0x70
		}

		/* Prepare the rx packet structure */
		if ((conn->llcp.connection_update.interval !=
		     conn->conn_interval) ||
		    (conn->llcp.connection_update.latency != conn->latency) ||
    e7a6:	881c      	ldrh	r4, [r3, #0]
    e7a8:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
    e7aa:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
    e7ac:	21fa      	movs	r1, #250	; 0xfa
    e7ae:	4358      	muls	r0, r3
    e7b0:	237d      	movs	r3, #125	; 0x7d
    e7b2:	0089      	lsls	r1, r1, #2
    e7b4:	4358      	muls	r0, r3
    e7b6:	f7f1 fd7d 	bl	2b4 <__aeabi_idiv>
    e7ba:	4284      	cmp	r4, r0
    e7bc:	d022      	beq.n	e804 <event_connection_prepare+0x4ec>
		    (conn->llcp.connection_update.timeout !=
		     (conn->conn_interval * conn->supervision_reload * 125 / 1000))) {
			radio_pdu_node_rx = packet_rx_reserve_get(2);
    e7be:	2002      	movs	r0, #2
    e7c0:	f7fd fcf8 	bl	c1b4 <packet_rx_reserve_get>
			LL_ASSERT(radio_pdu_node_rx);
    e7c4:	2800      	cmp	r0, #0
    e7c6:	d105      	bne.n	e7d4 <event_connection_prepare+0x4bc>
    e7c8:	4b75      	ldr	r3, [pc, #468]	; (e9a0 <event_connection_prepare+0x688>)
    e7ca:	9301      	str	r3, [sp, #4]
    e7cc:	4b75      	ldr	r3, [pc, #468]	; (e9a4 <event_connection_prepare+0x68c>)
    e7ce:	9300      	str	r3, [sp, #0]
    e7d0:	4b75      	ldr	r3, [pc, #468]	; (e9a8 <event_connection_prepare+0x690>)
    e7d2:	e373      	b.n	eebc <event_connection_prepare+0xba4>

			radio_pdu_node_rx->hdr.handle = conn->handle;
    e7d4:	8c3b      	ldrh	r3, [r7, #32]
    e7d6:	80c3      	strh	r3, [r0, #6]
			radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    e7d8:	2308      	movs	r3, #8
    e7da:	7103      	strb	r3, [r0, #4]
			pdu_data_rx =
				(struct pdu_data *)radio_pdu_node_rx->pdu_data;
			radio_le_conn_update_cmplt =
				(struct radio_le_conn_update_cmplt *)
				&pdu_data_rx->payload;
			radio_le_conn_update_cmplt->status = 0x00;
    e7dc:	2300      	movs	r3, #0
    e7de:	72c3      	strb	r3, [r0, #11]
			radio_le_conn_update_cmplt->interval =
				conn->llcp.connection_update.interval;
    e7e0:	8833      	ldrh	r3, [r6, #0]
				(struct pdu_data *)radio_pdu_node_rx->pdu_data;
			radio_le_conn_update_cmplt =
				(struct radio_le_conn_update_cmplt *)
				&pdu_data_rx->payload;
			radio_le_conn_update_cmplt->status = 0x00;
			radio_le_conn_update_cmplt->interval =
    e7e2:	7303      	strb	r3, [r0, #12]
    e7e4:	0a1b      	lsrs	r3, r3, #8
    e7e6:	7343      	strb	r3, [r0, #13]
				conn->llcp.connection_update.interval;
			radio_le_conn_update_cmplt->latency =
				conn->llcp.connection_update.latency;
    e7e8:	003b      	movs	r3, r7
    e7ea:	336e      	adds	r3, #110	; 0x6e
    e7ec:	881b      	ldrh	r3, [r3, #0]
				(struct radio_le_conn_update_cmplt *)
				&pdu_data_rx->payload;
			radio_le_conn_update_cmplt->status = 0x00;
			radio_le_conn_update_cmplt->interval =
				conn->llcp.connection_update.interval;
			radio_le_conn_update_cmplt->latency =
    e7ee:	7383      	strb	r3, [r0, #14]
    e7f0:	0a1b      	lsrs	r3, r3, #8
    e7f2:	73c3      	strb	r3, [r0, #15]
				conn->llcp.connection_update.latency;
			radio_le_conn_update_cmplt->timeout =
				conn->llcp.connection_update.timeout;
    e7f4:	003b      	movs	r3, r7
    e7f6:	3370      	adds	r3, #112	; 0x70
    e7f8:	881b      	ldrh	r3, [r3, #0]
			radio_le_conn_update_cmplt->status = 0x00;
			radio_le_conn_update_cmplt->interval =
				conn->llcp.connection_update.interval;
			radio_le_conn_update_cmplt->latency =
				conn->llcp.connection_update.latency;
			radio_le_conn_update_cmplt->timeout =
    e7fa:	7403      	strb	r3, [r0, #16]
    e7fc:	0a1b      	lsrs	r3, r3, #8
    e7fe:	7443      	strb	r3, [r0, #17]
				conn->llcp.connection_update.timeout;

			/* enqueue connection update complete structure
			 * into queue.
			 */
			packet_rx_enqueue();
    e800:	f7fe f8a6 	bl	c950 <packet_rx_enqueue>
		}

		/* restore to normal prepare */
		if (conn->hdr.ticks_xtal_to_start & ((u32_t)1 << 31)) {
    e804:	683b      	ldr	r3, [r7, #0]
    e806:	2b00      	cmp	r3, #0
    e808:	da0b      	bge.n	e822 <event_connection_prepare+0x50a>
			u32_t ticks_prepare_to_start =
    e80a:	6879      	ldr	r1, [r7, #4]
    e80c:	68ba      	ldr	r2, [r7, #8]
    e80e:	428a      	cmp	r2, r1
    e810:	d200      	bcs.n	e814 <event_connection_prepare+0x4fc>
    e812:	000a      	movs	r2, r1
				(conn->hdr.ticks_active_to_start >
				 conn->hdr.ticks_preempt_to_start) ?
				conn->hdr.ticks_active_to_start :
				conn->hdr.ticks_preempt_to_start;

			conn->hdr.ticks_xtal_to_start &= ~((u32_t)1 << 31);
    e814:	005b      	lsls	r3, r3, #1
    e816:	085b      	lsrs	r3, r3, #1
    e818:	603b      	str	r3, [r7, #0]
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
    e81a:	1ad3      	subs	r3, r2, r3
    e81c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    e81e:	18d3      	adds	r3, r2, r3
    e820:	930d      	str	r3, [sp, #52]	; 0x34
					    ticks_prepare_to_start);
		}

		/* compensate for instant_latency due to laziness */
		conn_interval_old = instant_latency * conn->conn_interval;
    e822:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
    e824:	001c      	movs	r4, r3
    e826:	436c      	muls	r4, r5
    e828:	930a      	str	r3, [sp, #40]	; 0x28
		latency = conn_interval_old /
			conn->llcp.connection_update.interval;
    e82a:	8836      	ldrh	r6, [r6, #0]
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
					    ticks_prepare_to_start);
		}

		/* compensate for instant_latency due to laziness */
		conn_interval_old = instant_latency * conn->conn_interval;
    e82c:	b2a4      	uxth	r4, r4
		latency = conn_interval_old /
    e82e:	0031      	movs	r1, r6
    e830:	0020      	movs	r0, r4
    e832:	f7f1 fcb5 	bl	1a0 <__aeabi_uidiv>
    e836:	b283      	uxth	r3, r0
			conn->llcp.connection_update.interval;
		conn_interval_new = latency *
    e838:	0018      	movs	r0, r3
    e83a:	4370      	muls	r0, r6
    e83c:	b280      	uxth	r0, r0
					    ticks_prepare_to_start);
		}

		/* compensate for instant_latency due to laziness */
		conn_interval_old = instant_latency * conn->conn_interval;
		latency = conn_interval_old /
    e83e:	930e      	str	r3, [sp, #56]	; 0x38
			conn->llcp.connection_update.interval;
		conn_interval_new = latency *
			conn->llcp.connection_update.interval;
		if (conn_interval_new > conn_interval_old) {
    e840:	4284      	cmp	r4, r0
    e842:	d20f      	bcs.n	e864 <event_connection_prepare+0x54c>
			ticks_at_expire +=
    e844:	2324      	movs	r3, #36	; 0x24
    e846:	1b00      	subs	r0, r0, r4
    e848:	4a5b      	ldr	r2, [pc, #364]	; (e9b8 <event_connection_prepare+0x6a0>)
    e84a:	33ff      	adds	r3, #255	; 0xff
    e84c:	17c1      	asrs	r1, r0, #31
    e84e:	f7f1 fe3d 	bl	4cc <__aeabi_lmul>
    e852:	2307      	movs	r3, #7
    e854:	4a59      	ldr	r2, [pc, #356]	; (e9bc <event_connection_prepare+0x6a4>)
    e856:	f7f1 fe19 	bl	48c <__aeabi_uldivmod>
    e85a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    e85c:	0200      	lsls	r0, r0, #8
    e85e:	0a00      	lsrs	r0, r0, #8
    e860:	18c3      	adds	r3, r0, r3
    e862:	e00e      	b.n	e882 <event_connection_prepare+0x56a>
				TICKER_US_TO_TICKS((conn_interval_new -
						    conn_interval_old) * 1250);
		} else {
			ticks_at_expire -=
    e864:	2324      	movs	r3, #36	; 0x24
    e866:	1a20      	subs	r0, r4, r0
    e868:	4a53      	ldr	r2, [pc, #332]	; (e9b8 <event_connection_prepare+0x6a0>)
    e86a:	33ff      	adds	r3, #255	; 0xff
    e86c:	17c1      	asrs	r1, r0, #31
    e86e:	f7f1 fe2d 	bl	4cc <__aeabi_lmul>
    e872:	2307      	movs	r3, #7
    e874:	4a51      	ldr	r2, [pc, #324]	; (e9bc <event_connection_prepare+0x6a4>)
    e876:	f7f1 fe09 	bl	48c <__aeabi_uldivmod>
    e87a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    e87c:	0200      	lsls	r0, r0, #8
    e87e:	0a00      	lsrs	r0, r0, #8
    e880:	1a1b      	subs	r3, r3, r0
    e882:	930c      	str	r3, [sp, #48]	; 0x30
				TICKER_US_TO_TICKS((conn_interval_old -
						    conn_interval_new) * 1250);
		}
		conn->latency_prepare -= (instant_latency - latency);
    e884:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
    e886:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    e888:	1b5b      	subs	r3, r3, r5
    e88a:	18d3      	adds	r3, r2, r3
    e88c:	853b      	strh	r3, [r7, #40]	; 0x28

		/* calculate the offset, window widening and interval */
		ticks_slot_offset =
    e88e:	687a      	ldr	r2, [r7, #4]
    e890:	683b      	ldr	r3, [r7, #0]
    e892:	920d      	str	r2, [sp, #52]	; 0x34
    e894:	429a      	cmp	r2, r3
    e896:	d200      	bcs.n	e89a <event_connection_prepare+0x582>
    e898:	930d      	str	r3, [sp, #52]	; 0x34
			 conn->hdr.ticks_xtal_to_start) ?
			conn->hdr.ticks_xtal_to_start :
			conn->hdr.ticks_active_to_start;
		conn_interval_us = conn->llcp.connection_update.interval * 1250;
		periodic_us = conn_interval_us;
		if (conn->role.slave.role != 0) {
    e89a:	003c      	movs	r4, r7
    e89c:	2301      	movs	r3, #1
    e89e:	3444      	adds	r4, #68	; 0x44
		ticks_slot_offset =
			(conn->hdr.ticks_active_to_start <
			 conn->hdr.ticks_xtal_to_start) ?
			conn->hdr.ticks_xtal_to_start :
			conn->hdr.ticks_active_to_start;
		conn_interval_us = conn->llcp.connection_update.interval * 1250;
    e8a0:	4847      	ldr	r0, [pc, #284]	; (e9c0 <event_connection_prepare+0x6a8>)
		periodic_us = conn_interval_us;
		if (conn->role.slave.role != 0) {
    e8a2:	7821      	ldrb	r1, [r4, #0]
		ticks_slot_offset =
			(conn->hdr.ticks_active_to_start <
			 conn->hdr.ticks_xtal_to_start) ?
			conn->hdr.ticks_xtal_to_start :
			conn->hdr.ticks_active_to_start;
		conn_interval_us = conn->llcp.connection_update.interval * 1250;
    e8a4:	4346      	muls	r6, r0
		periodic_us = conn_interval_us;
		if (conn->role.slave.role != 0) {
    e8a6:	4019      	ands	r1, r3
    e8a8:	900f      	str	r0, [sp, #60]	; 0x3c
    e8aa:	d100      	bne.n	e8ae <event_connection_prepare+0x596>
    e8ac:	e094      	b.n	e9d8 <event_connection_prepare+0x6c0>
			conn->role.slave.window_widening_prepare_us -=
    e8ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
				conn->role.slave.window_widening_periodic_us *
				instant_latency;

			conn->role.slave.window_widening_periodic_us =
				(((gc_lookup_ppm[_radio.sca] +
    e8b0:	4a44      	ldr	r2, [pc, #272]	; (e9c4 <event_connection_prepare+0x6ac>)
			conn->hdr.ticks_xtal_to_start :
			conn->hdr.ticks_active_to_start;
		conn_interval_us = conn->llcp.connection_update.interval * 1250;
		periodic_us = conn_interval_us;
		if (conn->role.slave.role != 0) {
			conn->role.slave.window_widening_prepare_us -=
    e8b2:	435d      	muls	r5, r3
    e8b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    e8b6:	1b5d      	subs	r5, r3, r5
				conn->role.slave.window_widening_periodic_us *
				instant_latency;

			conn->role.slave.window_widening_periodic_us =
				(((gc_lookup_ppm[_radio.sca] +
    e8b8:	4b38      	ldr	r3, [pc, #224]	; (e99c <event_connection_prepare+0x684>)
			conn->hdr.ticks_xtal_to_start :
			conn->hdr.ticks_active_to_start;
		conn_interval_us = conn->llcp.connection_update.interval * 1250;
		periodic_us = conn_interval_us;
		if (conn->role.slave.role != 0) {
			conn->role.slave.window_widening_prepare_us -=
    e8ba:	653d      	str	r5, [r7, #80]	; 0x50
				conn->role.slave.window_widening_periodic_us *
				instant_latency;

			conn->role.slave.window_widening_periodic_us =
				(((gc_lookup_ppm[_radio.sca] +
    e8bc:	33ff      	adds	r3, #255	; 0xff
    e8be:	7f5b      	ldrb	r3, [r3, #29]
				   gc_lookup_ppm[conn->role.slave.sca]) *
    e8c0:	7821      	ldrb	r1, [r4, #0]
			conn->role.slave.window_widening_prepare_us -=
				conn->role.slave.window_widening_periodic_us *
				instant_latency;

			conn->role.slave.window_widening_periodic_us =
				(((gc_lookup_ppm[_radio.sca] +
    e8c2:	005b      	lsls	r3, r3, #1
				   gc_lookup_ppm[conn->role.slave.sca]) *
				  conn_interval_us) + (1000000 - 1)) / 1000000;
    e8c4:	5a98      	ldrh	r0, [r3, r2]
				conn->role.slave.window_widening_periodic_us *
				instant_latency;

			conn->role.slave.window_widening_periodic_us =
				(((gc_lookup_ppm[_radio.sca] +
				   gc_lookup_ppm[conn->role.slave.sca]) *
    e8c6:	230e      	movs	r3, #14
    e8c8:	400b      	ands	r3, r1
				  conn_interval_us) + (1000000 - 1)) / 1000000;
    e8ca:	5a9b      	ldrh	r3, [r3, r2]
    e8cc:	493e      	ldr	r1, [pc, #248]	; (e9c8 <event_connection_prepare+0x6b0>)
    e8ce:	18c0      	adds	r0, r0, r3
    e8d0:	4370      	muls	r0, r6
    e8d2:	4b3e      	ldr	r3, [pc, #248]	; (e9cc <event_connection_prepare+0x6b4>)
    e8d4:	18c0      	adds	r0, r0, r3
    e8d6:	f7f1 fc63 	bl	1a0 <__aeabi_uidiv>
			conn->role.slave.window_widening_max_us =
				(conn_interval_us >> 1) - RADIO_TIFS;
			conn->role.slave.window_size_prepare_us =
				conn->llcp.connection_update.win_size * 1250;
    e8da:	003b      	movs	r3, r7
			conn->role.slave.window_widening_periodic_us =
				(((gc_lookup_ppm[_radio.sca] +
				   gc_lookup_ppm[conn->role.slave.sca]) *
				  conn_interval_us) + (1000000 - 1)) / 1000000;
			conn->role.slave.window_widening_max_us =
				(conn_interval_us >> 1) - RADIO_TIFS;
    e8dc:	0872      	lsrs	r2, r6, #1
    e8de:	3a96      	subs	r2, #150	; 0x96
		if (conn->role.slave.role != 0) {
			conn->role.slave.window_widening_prepare_us -=
				conn->role.slave.window_widening_periodic_us *
				instant_latency;

			conn->role.slave.window_widening_periodic_us =
    e8e0:	64b8      	str	r0, [r7, #72]	; 0x48
				(((gc_lookup_ppm[_radio.sca] +
				   gc_lookup_ppm[conn->role.slave.sca]) *
				  conn_interval_us) + (1000000 - 1)) / 1000000;
			conn->role.slave.window_widening_max_us =
    e8e2:	64fa      	str	r2, [r7, #76]	; 0x4c
				(conn_interval_us >> 1) - RADIO_TIFS;
			conn->role.slave.window_size_prepare_us =
				conn->llcp.connection_update.win_size * 1250;
    e8e4:	3394      	adds	r3, #148	; 0x94
				(((gc_lookup_ppm[_radio.sca] +
				   gc_lookup_ppm[conn->role.slave.sca]) *
				  conn_interval_us) + (1000000 - 1)) / 1000000;
			conn->role.slave.window_widening_max_us =
				(conn_interval_us >> 1) - RADIO_TIFS;
			conn->role.slave.window_size_prepare_us =
    e8e6:	781b      	ldrb	r3, [r3, #0]
    e8e8:	990f      	ldr	r1, [sp, #60]	; 0x3c
				instant_latency;

			conn->role.slave.window_widening_periodic_us =
				(((gc_lookup_ppm[_radio.sca] +
				   gc_lookup_ppm[conn->role.slave.sca]) *
				  conn_interval_us) + (1000000 - 1)) / 1000000;
    e8ea:	0004      	movs	r4, r0
			conn->role.slave.window_widening_max_us =
				(conn_interval_us >> 1) - RADIO_TIFS;
			conn->role.slave.window_size_prepare_us =
    e8ec:	434b      	muls	r3, r1
    e8ee:	65bb      	str	r3, [r7, #88]	; 0x58
				conn->llcp.connection_update.win_size * 1250;
			conn->role.slave.ticks_to_offset = 0;
    e8f0:	2300      	movs	r3, #0

			conn->role.slave.window_widening_prepare_us +=
				conn->role.slave.window_widening_periodic_us *
    e8f2:	980e      	ldr	r0, [sp, #56]	; 0x38
				  conn_interval_us) + (1000000 - 1)) / 1000000;
			conn->role.slave.window_widening_max_us =
				(conn_interval_us >> 1) - RADIO_TIFS;
			conn->role.slave.window_size_prepare_us =
				conn->llcp.connection_update.win_size * 1250;
			conn->role.slave.ticks_to_offset = 0;
    e8f4:	667b      	str	r3, [r7, #100]	; 0x64

			conn->role.slave.window_widening_prepare_us +=
				conn->role.slave.window_widening_periodic_us *
    e8f6:	4360      	muls	r0, r4
				(conn_interval_us >> 1) - RADIO_TIFS;
			conn->role.slave.window_size_prepare_us =
				conn->llcp.connection_update.win_size * 1250;
			conn->role.slave.ticks_to_offset = 0;

			conn->role.slave.window_widening_prepare_us +=
    e8f8:	182d      	adds	r5, r5, r0
				conn->role.slave.window_widening_periodic_us *
				latency;
			if (conn->role.slave.window_widening_prepare_us >
    e8fa:	42aa      	cmp	r2, r5
    e8fc:	d301      	bcc.n	e902 <event_connection_prepare+0x5ea>
				(conn_interval_us >> 1) - RADIO_TIFS;
			conn->role.slave.window_size_prepare_us =
				conn->llcp.connection_update.win_size * 1250;
			conn->role.slave.ticks_to_offset = 0;

			conn->role.slave.window_widening_prepare_us +=
    e8fe:	653d      	str	r5, [r7, #80]	; 0x50
    e900:	e000      	b.n	e904 <event_connection_prepare+0x5ec>
				conn->role.slave.window_widening_periodic_us *
				latency;
			if (conn->role.slave.window_widening_prepare_us >
			    conn->role.slave.window_widening_max_us) {
				conn->role.slave.window_widening_prepare_us =
    e902:	653a      	str	r2, [r7, #80]	; 0x50
					conn->role.slave.window_widening_max_us;
			}

			ticks_at_expire -=
    e904:	4a32      	ldr	r2, [pc, #200]	; (e9d0 <event_connection_prepare+0x6b8>)
    e906:	2300      	movs	r3, #0
    e908:	2100      	movs	r1, #0
    e90a:	f7f1 fddf 	bl	4cc <__aeabi_lmul>
				TICKER_US_TO_TICKS(conn->role.slave.window_widening_periodic_us *
						   latency);
			ticks_win_offset =
				TICKER_US_TO_TICKS((conn->llcp.connection_update.win_offset_us /
    e90e:	003d      	movs	r5, r7
			    conn->role.slave.window_widening_max_us) {
				conn->role.slave.window_widening_prepare_us =
					conn->role.slave.window_widening_max_us;
			}

			ticks_at_expire -=
    e910:	4a2a      	ldr	r2, [pc, #168]	; (e9bc <event_connection_prepare+0x6a4>)
    e912:	2307      	movs	r3, #7
    e914:	f7f1 fdba 	bl	48c <__aeabi_uldivmod>
    e918:	9b0c      	ldr	r3, [sp, #48]	; 0x30
				TICKER_US_TO_TICKS(conn->role.slave.window_widening_periodic_us *
						   latency);
			ticks_win_offset =
				TICKER_US_TO_TICKS((conn->llcp.connection_update.win_offset_us /
    e91a:	358c      	adds	r5, #140	; 0x8c
			    conn->role.slave.window_widening_max_us) {
				conn->role.slave.window_widening_prepare_us =
					conn->role.slave.window_widening_max_us;
			}

			ticks_at_expire -=
    e91c:	1a1b      	subs	r3, r3, r0
				TICKER_US_TO_TICKS(conn->role.slave.window_widening_periodic_us *
						   latency);
			ticks_win_offset =
    e91e:	4928      	ldr	r1, [pc, #160]	; (e9c0 <event_connection_prepare+0x6a8>)
    e920:	6828      	ldr	r0, [r5, #0]
			    conn->role.slave.window_widening_max_us) {
				conn->role.slave.window_widening_prepare_us =
					conn->role.slave.window_widening_max_us;
			}

			ticks_at_expire -=
    e922:	930c      	str	r3, [sp, #48]	; 0x30
				TICKER_US_TO_TICKS(conn->role.slave.window_widening_periodic_us *
						   latency);
			ticks_win_offset =
    e924:	f7f1 fc3c 	bl	1a0 <__aeabi_uidiv>
    e928:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    e92a:	4a29      	ldr	r2, [pc, #164]	; (e9d0 <event_connection_prepare+0x6b8>)
    e92c:	4343      	muls	r3, r0
    e92e:	2100      	movs	r1, #0
    e930:	0018      	movs	r0, r3
    e932:	2300      	movs	r3, #0
    e934:	f7f1 fdca 	bl	4cc <__aeabi_lmul>
    e938:	4a20      	ldr	r2, [pc, #128]	; (e9bc <event_connection_prepare+0x6a4>)
    e93a:	2307      	movs	r3, #7
    e93c:	f7f1 fda6 	bl	48c <__aeabi_uldivmod>
    e940:	0200      	lsls	r0, r0, #8
    e942:	0a03      	lsrs	r3, r0, #8
    e944:	930e      	str	r3, [sp, #56]	; 0x38
				TICKER_US_TO_TICKS((conn->llcp.connection_update.win_offset_us /
						    1250) * 1250);
			periodic_us -=
    e946:	1b33      	subs	r3, r6, r4
				conn->role.slave.window_widening_periodic_us;

			if (conn->llcp.connection_update.is_internal == 2) {
    e948:	003c      	movs	r4, r7
    e94a:	2218      	movs	r2, #24
    e94c:	3495      	adds	r4, #149	; 0x95
				TICKER_US_TO_TICKS(conn->role.slave.window_widening_periodic_us *
						   latency);
			ticks_win_offset =
				TICKER_US_TO_TICKS((conn->llcp.connection_update.win_offset_us /
						    1250) * 1250);
			periodic_us -=
    e94e:	930f      	str	r3, [sp, #60]	; 0x3c
				conn->role.slave.window_widening_periodic_us;

			if (conn->llcp.connection_update.is_internal == 2) {
    e950:	7823      	ldrb	r3, [r4, #0]
    e952:	4013      	ands	r3, r2
    e954:	2b10      	cmp	r3, #16
    e956:	d14e      	bne.n	e9f6 <event_connection_prepare+0x6de>
		(conn->llcp_version.sub_version_number >= RADIO_BLE_SUB_VERSION_NUMBER));
}

static u32_t conn_update_req(struct connection *conn)
{
	if (conn->llcp_req != conn->llcp_ack) {
    e958:	003b      	movs	r3, r7
    e95a:	003a      	movs	r2, r7
    e95c:	3368      	adds	r3, #104	; 0x68
    e95e:	3269      	adds	r2, #105	; 0x69
    e960:	781b      	ldrb	r3, [r3, #0]
    e962:	9210      	str	r2, [sp, #64]	; 0x40
    e964:	7812      	ldrb	r2, [r2, #0]
    e966:	9211      	str	r2, [sp, #68]	; 0x44
    e968:	429a      	cmp	r2, r3
    e96a:	d144      	bne.n	e9f6 <event_connection_prepare+0x6de>
	return 0;
}

static u32_t is_peer_compatible(struct connection *conn)
{
	return ((conn->llcp_version.rx) &&
    e96c:	003b      	movs	r3, r7
		(conn->llcp_version.version_number >= RADIO_BLE_VERSION_NUMBER) &&
		(conn->llcp_version.company_id == RADIO_BLE_COMPANY_ID) &&
    e96e:	2202      	movs	r2, #2
	return 0;
}

static u32_t is_peer_compatible(struct connection *conn)
{
	return ((conn->llcp_version.rx) &&
    e970:	339c      	adds	r3, #156	; 0x9c
		(conn->llcp_version.version_number >= RADIO_BLE_VERSION_NUMBER) &&
		(conn->llcp_version.company_id == RADIO_BLE_COMPANY_ID) &&
    e972:	781b      	ldrb	r3, [r3, #0]
    e974:	4213      	tst	r3, r2
    e976:	d03e      	beq.n	e9f6 <event_connection_prepare+0x6de>
}

static u32_t is_peer_compatible(struct connection *conn)
{
	return ((conn->llcp_version.rx) &&
		(conn->llcp_version.version_number >= RADIO_BLE_VERSION_NUMBER) &&
    e978:	003b      	movs	r3, r7
    e97a:	339d      	adds	r3, #157	; 0x9d
	return 0;
}

static u32_t is_peer_compatible(struct connection *conn)
{
	return ((conn->llcp_version.rx) &&
    e97c:	781b      	ldrb	r3, [r3, #0]
    e97e:	2b08      	cmp	r3, #8
    e980:	d939      	bls.n	e9f6 <event_connection_prepare+0x6de>
		(conn->llcp_version.version_number >= RADIO_BLE_VERSION_NUMBER) &&
		(conn->llcp_version.company_id == RADIO_BLE_COMPANY_ID) &&
    e982:	003b      	movs	r3, r7
    e984:	339e      	adds	r3, #158	; 0x9e
}

static u32_t is_peer_compatible(struct connection *conn)
{
	return ((conn->llcp_version.rx) &&
		(conn->llcp_version.version_number >= RADIO_BLE_VERSION_NUMBER) &&
    e986:	881b      	ldrh	r3, [r3, #0]
    e988:	4a12      	ldr	r2, [pc, #72]	; (e9d4 <event_connection_prepare+0x6bc>)
    e98a:	4293      	cmp	r3, r2
    e98c:	d133      	bne.n	e9f6 <event_connection_prepare+0x6de>
		(conn->llcp_version.company_id == RADIO_BLE_COMPANY_ID) &&
		(conn->llcp_version.sub_version_number >= RADIO_BLE_SUB_VERSION_NUMBER));
    e98e:	003a      	movs	r2, r7
    e990:	32a0      	adds	r2, #160	; 0xa0

static u32_t is_peer_compatible(struct connection *conn)
{
	return ((conn->llcp_version.rx) &&
		(conn->llcp_version.version_number >= RADIO_BLE_VERSION_NUMBER) &&
		(conn->llcp_version.company_id == RADIO_BLE_COMPANY_ID) &&
    e992:	8812      	ldrh	r2, [r2, #0]
    e994:	429a      	cmp	r2, r3
    e996:	d12e      	bne.n	e9f6 <event_connection_prepare+0x6de>
    e998:	f000 fd18 	bl	f3cc <event_connection_prepare+0x10b4>
    e99c:	200015c0 	.word	0x200015c0
    e9a0:	000154c4 	.word	0x000154c4
    e9a4:	000154c9 	.word	0x000154c9
    e9a8:	000182e9 	.word	0x000182e9
    e9ac:	00015484 	.word	0x00015484
    e9b0:	0001548b 	.word	0x0001548b
    e9b4:	00015b21 	.word	0x00015b21
    e9b8:	09ce5400 	.word	0x09ce5400
    e9bc:	1afd498d 	.word	0x1afd498d
    e9c0:	000004e2 	.word	0x000004e2
    e9c4:	00018172 	.word	0x00018172
    e9c8:	000f4240 	.word	0x000f4240
    e9cc:	000f423f 	.word	0x000f423f
    e9d0:	3b9aca00 	.word	0x3b9aca00
    e9d4:	0000ffff 	.word	0x0000ffff
			if (conn->llcp.connection_update.is_internal == 2) {
				conn_update_req(conn);
			}
		} else {
			ticks_win_offset =
				TICKER_US_TO_TICKS(conn->llcp.connection_update.win_offset_us);
    e9d8:	003b      	movs	r3, r7
    e9da:	338c      	adds	r3, #140	; 0x8c

			if (conn->llcp.connection_update.is_internal == 2) {
				conn_update_req(conn);
			}
		} else {
			ticks_win_offset =
    e9dc:	6818      	ldr	r0, [r3, #0]
    e9de:	4ae6      	ldr	r2, [pc, #920]	; (ed78 <event_connection_prepare+0xa60>)
    e9e0:	2300      	movs	r3, #0
    e9e2:	f7f1 fd73 	bl	4cc <__aeabi_lmul>
    e9e6:	2307      	movs	r3, #7
    e9e8:	4ae4      	ldr	r2, [pc, #912]	; (ed7c <event_connection_prepare+0xa64>)
    e9ea:	f7f1 fd4f 	bl	48c <__aeabi_uldivmod>
    e9ee:	0200      	lsls	r0, r0, #8
    e9f0:	0a03      	lsrs	r3, r0, #8
    e9f2:	930e      	str	r3, [sp, #56]	; 0x38
			(conn->hdr.ticks_active_to_start <
			 conn->hdr.ticks_xtal_to_start) ?
			conn->hdr.ticks_xtal_to_start :
			conn->hdr.ticks_active_to_start;
		conn_interval_us = conn->llcp.connection_update.interval * 1250;
		periodic_us = conn_interval_us;
    e9f4:	960f      	str	r6, [sp, #60]	; 0x3c
			}
		} else {
			ticks_win_offset =
				TICKER_US_TO_TICKS(conn->llcp.connection_update.win_offset_us);
		}
		conn->conn_interval = conn->llcp.connection_update.interval;
    e9f6:	003b      	movs	r3, r7
    e9f8:	336c      	adds	r3, #108	; 0x6c
    e9fa:	881b      	ldrh	r3, [r3, #0]
		conn->latency = conn->llcp.connection_update.latency;
		conn->supervision_reload =
    e9fc:	0031      	movs	r1, r6
			}
		} else {
			ticks_win_offset =
				TICKER_US_TO_TICKS(conn->llcp.connection_update.win_offset_us);
		}
		conn->conn_interval = conn->llcp.connection_update.interval;
    e9fe:	84bb      	strh	r3, [r7, #36]	; 0x24
		conn->latency = conn->llcp.connection_update.latency;
    ea00:	003b      	movs	r3, r7
    ea02:	336e      	adds	r3, #110	; 0x6e
    ea04:	881c      	ldrh	r4, [r3, #0]
    ea06:	84fc      	strh	r4, [r7, #38]	; 0x26
		conn->supervision_reload =
    ea08:	8858      	ldrh	r0, [r3, #2]
    ea0a:	4bdd      	ldr	r3, [pc, #884]	; (ed80 <event_connection_prepare+0xa68>)
    ea0c:	4358      	muls	r0, r3
    ea0e:	f7f1 fbc7 	bl	1a0 <__aeabi_uidiv>
			RADIO_CONN_EVENTS((conn->llcp.connection_update.timeout
					   * 10 * 1000), conn_interval_us);
		conn->procedure_reload =
    ea12:	0031      	movs	r1, r6
			ticks_win_offset =
				TICKER_US_TO_TICKS(conn->llcp.connection_update.win_offset_us);
		}
		conn->conn_interval = conn->llcp.connection_update.interval;
		conn->latency = conn->llcp.connection_update.latency;
		conn->supervision_reload =
    ea14:	86b8      	strh	r0, [r7, #52]	; 0x34
			RADIO_CONN_EVENTS((conn->llcp.connection_update.timeout
					   * 10 * 1000), conn_interval_us);
		conn->procedure_reload =
    ea16:	48db      	ldr	r0, [pc, #876]	; (ed84 <event_connection_prepare+0xa6c>)
    ea18:	f7f1 fbc2 	bl	1a0 <__aeabi_uidiv>
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);

#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_PING)
		/* APTO in no. of connection events */
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    ea1c:	0031      	movs	r1, r6
		conn->conn_interval = conn->llcp.connection_update.interval;
		conn->latency = conn->llcp.connection_update.latency;
		conn->supervision_reload =
			RADIO_CONN_EVENTS((conn->llcp.connection_update.timeout
					   * 10 * 1000), conn_interval_us);
		conn->procedure_reload =
    ea1e:	8738      	strh	r0, [r7, #56]	; 0x38
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);

#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_PING)
		/* APTO in no. of connection events */
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    ea20:	48d9      	ldr	r0, [pc, #868]	; (ed88 <event_connection_prepare+0xa70>)
    ea22:	f7f1 fbbd 	bl	1a0 <__aeabi_uidiv>
    ea26:	1cba      	adds	r2, r7, #2
    ea28:	b283      	uxth	r3, r0
    ea2a:	87d3      	strh	r3, [r2, #62]	; 0x3e
						      conn_interval_us);
		/* Dispatch LE Ping PDU 6 connection events (that peer would
		 * listen to) before 30s timeout
		 * TODO: "peer listens to" is greater than 30s due to latency
		 */
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    ea2c:	1da2      	adds	r2, r4, #6
    ea2e:	4293      	cmp	r3, r2
    ea30:	dd02      	ble.n	ea38 <event_connection_prepare+0x720>
    ea32:	1b1b      	subs	r3, r3, r4
    ea34:	3b06      	subs	r3, #6
    ea36:	b29b      	uxth	r3, r3
    ea38:	87bb      	strh	r3, [r7, #60]	; 0x3c
				     (conn->apto_reload - (conn->latency + 6)) :
				     conn->apto_reload;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

		if (!conn->llcp.connection_update.is_internal) {
    ea3a:	003b      	movs	r3, r7
    ea3c:	3395      	adds	r3, #149	; 0x95
    ea3e:	781a      	ldrb	r2, [r3, #0]
    ea40:	2318      	movs	r3, #24
    ea42:	4013      	ands	r3, r2
    ea44:	d100      	bne.n	ea48 <event_connection_prepare+0x730>
			conn->supervision_expire = 0;
    ea46:	86fb      	strh	r3, [r7, #54]	; 0x36
		}

		/* disable ticker job, in order to chain stop and start
		 * to avoid RTC being stopped if no tickers active.
		 */
		mayfly_was_enabled =
    ea48:	2101      	movs	r1, #1
    ea4a:	2000      	movs	r0, #0
    ea4c:	f003 fc32 	bl	122b4 <mayfly_is_enabled>
			mayfly_is_enabled(RADIO_TICKER_USER_ID_WORKER,
					  RADIO_TICKER_USER_ID_JOB);
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    ea50:	2200      	movs	r2, #0
    ea52:	2101      	movs	r1, #1
		}

		/* disable ticker job, in order to chain stop and start
		 * to avoid RTC being stopped if no tickers active.
		 */
		mayfly_was_enabled =
    ea54:	0006      	movs	r6, r0
			mayfly_is_enabled(RADIO_TICKER_USER_ID_WORKER,
					  RADIO_TICKER_USER_ID_JOB);
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    ea56:	0010      	movs	r0, r2
    ea58:	f7fb fdf2 	bl	a640 <mayfly_enable>
			      RADIO_TICKER_USER_ID_JOB, 0);

		/* start slave/master with new timings */
		ticker_status =
    ea5c:	2100      	movs	r1, #0
    ea5e:	8c3a      	ldrh	r2, [r7, #32]
    ea60:	4bca      	ldr	r3, [pc, #808]	; (ed8c <event_connection_prepare+0xa74>)
    ea62:	3207      	adds	r2, #7
    ea64:	9300      	str	r3, [sp, #0]
    ea66:	b2d2      	uxtb	r2, r2
    ea68:	4bc9      	ldr	r3, [pc, #804]	; (ed90 <event_connection_prepare+0xa78>)
    ea6a:	0008      	movs	r0, r1
    ea6c:	f7fd fa94 	bl	bf98 <ticker_stop>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
				    RADIO_TICKER_USER_ID_WORKER,
				    RADIO_TICKER_ID_FIRST_CONNECTION +
				    conn->handle, ticker_success_assert,
				    (void *)__LINE__);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    ea70:	2302      	movs	r3, #2
    ea72:	4398      	bics	r0, r3
    ea74:	1e05      	subs	r5, r0, #0
    ea76:	d144      	bne.n	eb02 <event_connection_prepare+0x7ea>
			  (ticker_status == TICKER_STATUS_BUSY));
		ticker_status =
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    ea78:	8c3b      	ldrh	r3, [r7, #32]
				     RADIO_TICKER_USER_ID_WORKER,
				     RADIO_TICKER_ID_FIRST_CONNECTION +
				     conn->handle,
				     ticks_at_expire, ticks_win_offset,
				     TICKER_US_TO_TICKS(periodic_us),
    ea7a:	4abf      	ldr	r2, [pc, #764]	; (ed78 <event_connection_prepare+0xa60>)
				    conn->handle, ticker_success_assert,
				    (void *)__LINE__);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
			  (ticker_status == TICKER_STATUS_BUSY));
		ticker_status =
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    ea7c:	3307      	adds	r3, #7
    ea7e:	b2db      	uxtb	r3, r3
    ea80:	9310      	str	r3, [sp, #64]	; 0x40
				     RADIO_TICKER_USER_ID_WORKER,
				     RADIO_TICKER_ID_FIRST_CONNECTION +
				     conn->handle,
				     ticks_at_expire, ticks_win_offset,
				     TICKER_US_TO_TICKS(periodic_us),
    ea82:	980f      	ldr	r0, [sp, #60]	; 0x3c
    ea84:	2300      	movs	r3, #0
    ea86:	0029      	movs	r1, r5
    ea88:	f7f1 fd20 	bl	4cc <__aeabi_lmul>
    ea8c:	4abb      	ldr	r2, [pc, #748]	; (ed7c <event_connection_prepare+0xa64>)
    ea8e:	2307      	movs	r3, #7
    ea90:	900a      	str	r0, [sp, #40]	; 0x28
    ea92:	910b      	str	r1, [sp, #44]	; 0x2c
    ea94:	f7f1 fcfa 	bl	48c <__aeabi_uldivmod>
				    conn->handle, ticker_success_assert,
				    (void *)__LINE__);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
			  (ticker_status == TICKER_STATUS_BUSY));
		ticker_status =
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    ea98:	0204      	lsls	r4, r0, #8
    ea9a:	0a24      	lsrs	r4, r4, #8
    ea9c:	4ab7      	ldr	r2, [pc, #732]	; (ed7c <event_connection_prepare+0xa64>)
    ea9e:	2307      	movs	r3, #7
    eaa0:	0020      	movs	r0, r4
    eaa2:	0029      	movs	r1, r5
    eaa4:	f7f1 fd12 	bl	4cc <__aeabi_lmul>
    eaa8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    eaaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    eaac:	1a12      	subs	r2, r2, r0
    eaae:	418b      	sbcs	r3, r1
    eab0:	0010      	movs	r0, r2
    eab2:	22fa      	movs	r2, #250	; 0xfa
    eab4:	0019      	movs	r1, r3
    eab6:	0092      	lsls	r2, r2, #2
    eab8:	2300      	movs	r3, #0
    eaba:	f7f1 fce7 	bl	48c <__aeabi_uldivmod>
    eabe:	68fa      	ldr	r2, [r7, #12]
    eac0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    eac2:	4694      	mov	ip, r2
				     ticks_at_expire, ticks_win_offset,
				     TICKER_US_TO_TICKS(periodic_us),
				     TICKER_REMAINDER(periodic_us),
				     TICKER_NULL_LAZY,
				     (ticks_slot_offset + conn->hdr.ticks_slot),
				     (conn->role.slave.role != 0) ?
    eac4:	003a      	movs	r2, r7
    eac6:	3244      	adds	r2, #68	; 0x44
				    conn->handle, ticker_success_assert,
				    (void *)__LINE__);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
			  (ticker_status == TICKER_STATUS_BUSY));
		ticker_status =
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    eac8:	0001      	movs	r1, r0
    eaca:	7810      	ldrb	r0, [r2, #0]
    eacc:	4463      	add	r3, ip
    eace:	b29b      	uxth	r3, r3
    ead0:	4ab0      	ldr	r2, [pc, #704]	; (ed94 <event_connection_prepare+0xa7c>)
    ead2:	07c0      	lsls	r0, r0, #31
    ead4:	d400      	bmi.n	ead8 <event_connection_prepare+0x7c0>
    ead6:	4ab0      	ldr	r2, [pc, #704]	; (ed98 <event_connection_prepare+0xa80>)
				    RADIO_TICKER_ID_FIRST_CONNECTION +
				    conn->handle, ticker_success_assert,
				    (void *)__LINE__);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
			  (ticker_status == TICKER_STATUS_BUSY));
		ticker_status =
    ead8:	48b0      	ldr	r0, [pc, #704]	; (ed9c <event_connection_prepare+0xa84>)
    eada:	9304      	str	r3, [sp, #16]
    eadc:	9008      	str	r0, [sp, #32]
    eade:	48ac      	ldr	r0, [pc, #688]	; (ed90 <event_connection_prepare+0xa78>)
    eae0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    eae2:	9007      	str	r0, [sp, #28]
    eae4:	2000      	movs	r0, #0
    eae6:	9205      	str	r2, [sp, #20]
    eae8:	9102      	str	r1, [sp, #8]
    eaea:	9300      	str	r3, [sp, #0]
    eaec:	9706      	str	r7, [sp, #24]
    eaee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    eaf0:	9003      	str	r0, [sp, #12]
    eaf2:	9401      	str	r4, [sp, #4]
    eaf4:	9a10      	ldr	r2, [sp, #64]	; 0x40
    eaf6:	0001      	movs	r1, r0
    eaf8:	f7fd f9b6 	bl	be68 <ticker_start>
				     (ticks_slot_offset + conn->hdr.ticks_slot),
				     (conn->role.slave.role != 0) ?
				     event_slave_prepare : event_master_prepare,
				     conn, ticker_success_assert,
				     (void *)__LINE__);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    eafc:	2302      	movs	r3, #2
    eafe:	4398      	bics	r0, r3
    eb00:	d008      	beq.n	eb14 <event_connection_prepare+0x7fc>
    eb02:	4ba7      	ldr	r3, [pc, #668]	; (eda0 <event_connection_prepare+0xa88>)
    eb04:	4aa7      	ldr	r2, [pc, #668]	; (eda4 <event_connection_prepare+0xa8c>)
    eb06:	9301      	str	r3, [sp, #4]
    eb08:	4ba7      	ldr	r3, [pc, #668]	; (eda8 <event_connection_prepare+0xa90>)
    eb0a:	49a8      	ldr	r1, [pc, #672]	; (edac <event_connection_prepare+0xa94>)
    eb0c:	9300      	str	r3, [sp, #0]
    eb0e:	48a8      	ldr	r0, [pc, #672]	; (edb0 <event_connection_prepare+0xa98>)
    eb10:	4ba8      	ldr	r3, [pc, #672]	; (edb4 <event_connection_prepare+0xa9c>)
    eb12:	e626      	b.n	e762 <event_connection_prepare+0x44a>
			  (ticker_status == TICKER_STATUS_BUSY));

		/* enable ticker job, if disabled in this function */
		if (mayfly_was_enabled) {
    eb14:	2e00      	cmp	r6, #0
    eb16:	d101      	bne.n	eb1c <event_connection_prepare+0x804>
    eb18:	f000 fc86 	bl	f428 <event_connection_prepare+0x1110>
			mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    eb1c:	2201      	movs	r2, #1
    eb1e:	0011      	movs	r1, r2
    eb20:	f7fb fd8e 	bl	a640 <mayfly_enable>
    eb24:	f000 fc80 	bl	f428 <event_connection_prepare+0x1110>
}

static inline void event_ch_map_prep(struct connection *conn,
				     u16_t event_counter)
{
	if (conn->llcp.chan_map.initiate) {
    eb28:	003d      	movs	r5, r7
    eb2a:	356c      	adds	r5, #108	; 0x6c
    eb2c:	782b      	ldrb	r3, [r5, #0]
    eb2e:	2b00      	cmp	r3, #0
    eb30:	d022      	beq.n	eb78 <event_connection_prepare+0x860>
		struct radio_pdu_node_tx *node_tx;

		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    eb32:	48a1      	ldr	r0, [pc, #644]	; (edb8 <event_connection_prepare+0xaa0>)
    eb34:	3059      	adds	r0, #89	; 0x59
    eb36:	30ff      	adds	r0, #255	; 0xff
    eb38:	f7fb feaa 	bl	a890 <mem_acquire>
    eb3c:	1e04      	subs	r4, r0, #0
		if (node_tx) {
    eb3e:	d100      	bne.n	eb42 <event_connection_prepare+0x82a>
    eb40:	e2a1      	b.n	f086 <event_connection_prepare+0xd6e>
			struct pdu_data *pdu_ctrl_tx =
				(struct pdu_data *)node_tx->pdu_data;

			/* reset initiate flag */
			conn->llcp.chan_map.initiate = 0;
    eb42:	2300      	movs	r3, #0
    eb44:	702b      	strb	r3, [r5, #0]

			/* set instant */
			conn->llcp.chan_map.instant =
    eb46:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    eb48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    eb4a:	3306      	adds	r3, #6
    eb4c:	18d3      	adds	r3, r2, r3
				event_counter + conn->latency + 6;

			/* place the channel map req packet as next in
			 * tx queue
			 */
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    eb4e:	2203      	movs	r2, #3

			/* reset initiate flag */
			conn->llcp.chan_map.initiate = 0;

			/* set instant */
			conn->llcp.chan_map.instant =
    eb50:	80eb      	strh	r3, [r5, #6]
				event_counter + conn->latency + 6;

			/* place the channel map req packet as next in
			 * tx queue
			 */
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    eb52:	7903      	ldrb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
						    ctrldata) +
				sizeof(struct pdu_data_llctrl_chan_map_ind);
			pdu_ctrl_tx->payload.llctrl.opcode =
				PDU_DATA_LLCTRL_TYPE_CHAN_MAP_IND;
			memcpy(&pdu_ctrl_tx->payload.llctrl.
    eb54:	0039      	movs	r1, r7
				event_counter + conn->latency + 6;

			/* place the channel map req packet as next in
			 * tx queue
			 */
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    eb56:	4313      	orrs	r3, r2
    eb58:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    eb5a:	2308      	movs	r3, #8
    eb5c:	7143      	strb	r3, [r0, #5]
						    ctrldata) +
				sizeof(struct pdu_data_llctrl_chan_map_ind);
			pdu_ctrl_tx->payload.llctrl.opcode =
    eb5e:	3b07      	subs	r3, #7
    eb60:	71c3      	strb	r3, [r0, #7]
				PDU_DATA_LLCTRL_TYPE_CHAN_MAP_IND;
			memcpy(&pdu_ctrl_tx->payload.llctrl.
    eb62:	3202      	adds	r2, #2
    eb64:	3008      	adds	r0, #8
    eb66:	316d      	adds	r1, #109	; 0x6d
    eb68:	f7f2 f8e7 	bl	d3a <memcpy>
			       ctrldata.chan_map_ind.chm[0],
			       &conn->llcp.chan_map.chm[0],
			       sizeof(pdu_ctrl_tx->payload.
				      llctrl.ctrldata.chan_map_ind.chm));
			pdu_ctrl_tx->payload.llctrl.ctrldata.chan_map_ind.instant =
				conn->llcp.chan_map.instant;
    eb6c:	88eb      	ldrh	r3, [r5, #6]
			memcpy(&pdu_ctrl_tx->payload.llctrl.
			       ctrldata.chan_map_ind.chm[0],
			       &conn->llcp.chan_map.chm[0],
			       sizeof(pdu_ctrl_tx->payload.
				      llctrl.ctrldata.chan_map_ind.chm));
			pdu_ctrl_tx->payload.llctrl.ctrldata.chan_map_ind.instant =
    eb6e:	7363      	strb	r3, [r4, #13]
    eb70:	0a1b      	lsrs	r3, r3, #8
    eb72:	73a3      	strb	r3, [r4, #14]
				conn->llcp.chan_map.instant;

			ctrl_tx_enqueue(conn, node_tx);
    eb74:	0021      	movs	r1, r4
    eb76:	e13a      	b.n	edee <event_connection_prepare+0xad6>
		}
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
    eb78:	003b      	movs	r3, r7
    eb7a:	3372      	adds	r3, #114	; 0x72
    eb7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    eb7e:	881b      	ldrh	r3, [r3, #0]
    eb80:	1ad3      	subs	r3, r2, r3
    eb82:	4a8e      	ldr	r2, [pc, #568]	; (edbc <event_connection_prepare+0xaa4>)
    eb84:	b29b      	uxth	r3, r3
    eb86:	4293      	cmp	r3, r2
    eb88:	dd00      	ble.n	eb8c <event_connection_prepare+0x874>
    eb8a:	e27c      	b.n	f086 <event_connection_prepare+0xd6e>
			    <= 0x7FFF) {
		/* procedure request acked */
		conn->llcp_ack = conn->llcp_req;
    eb8c:	003b      	movs	r3, r7

		/* copy to active channel map */
		memcpy(&conn->data_chan_map[0],
    eb8e:	003c      	movs	r4, r7
    eb90:	0039      	movs	r1, r7
			ctrl_tx_enqueue(conn, node_tx);
		}
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
			    <= 0x7FFF) {
		/* procedure request acked */
		conn->llcp_ack = conn->llcp_req;
    eb92:	3368      	adds	r3, #104	; 0x68
    eb94:	781a      	ldrb	r2, [r3, #0]

		/* copy to active channel map */
		memcpy(&conn->data_chan_map[0],
    eb96:	3417      	adds	r4, #23
			ctrl_tx_enqueue(conn, node_tx);
		}
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
			    <= 0x7FFF) {
		/* procedure request acked */
		conn->llcp_ack = conn->llcp_req;
    eb98:	705a      	strb	r2, [r3, #1]

		/* copy to active channel map */
		memcpy(&conn->data_chan_map[0],
    eb9a:	316d      	adds	r1, #109	; 0x6d
    eb9c:	2205      	movs	r2, #5
    eb9e:	0020      	movs	r0, r4
    eba0:	f7f2 f8cb 	bl	d3a <memcpy>
		       &conn->llcp.chan_map.chm[0],
		       sizeof(conn->data_chan_map));
		conn->data_chan_count =
			util_ones_count_get(&conn->data_chan_map[0],
    eba4:	2105      	movs	r1, #5
    eba6:	0020      	movs	r0, r4
    eba8:	f7fb fef4 	bl	a994 <util_ones_count_get>

		/* copy to active channel map */
		memcpy(&conn->data_chan_map[0],
		       &conn->llcp.chan_map.chm[0],
		       sizeof(conn->data_chan_map));
		conn->data_chan_count =
    ebac:	223f      	movs	r2, #63	; 0x3f
    ebae:	7f3b      	ldrb	r3, [r7, #28]
    ebb0:	4010      	ands	r0, r2
    ebb2:	4393      	bics	r3, r2
    ebb4:	4318      	orrs	r0, r3
    ebb6:	7738      	strb	r0, [r7, #28]
    ebb8:	e265      	b.n	f086 <event_connection_prepare+0xd6e>
#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_ENC)
static inline void event_enc_prep(struct connection *conn)
{
	struct radio_pdu_node_tx *node_tx;

	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    ebba:	4e7f      	ldr	r6, [pc, #508]	; (edb8 <event_connection_prepare+0xaa0>)
    ebbc:	0035      	movs	r5, r6
    ebbe:	3559      	adds	r5, #89	; 0x59
    ebc0:	35ff      	adds	r5, #255	; 0xff
    ebc2:	0028      	movs	r0, r5
    ebc4:	f7fb fe64 	bl	a890 <mem_acquire>
    ebc8:	900c      	str	r0, [sp, #48]	; 0x30
	if (node_tx) {
    ebca:	2800      	cmp	r0, #0
    ebcc:	d100      	bne.n	ebd0 <event_connection_prepare+0x8b8>
    ebce:	e25a      	b.n	f086 <event_connection_prepare+0xd6e>
		struct pdu_data *pdu_ctrl_tx =
			(struct pdu_data *)node_tx->pdu_data;

		/* procedure request acked */
		conn->llcp_ack = conn->llcp_req;
    ebd0:	003b      	movs	r3, r7
    ebd2:	3368      	adds	r3, #104	; 0x68
    ebd4:	781a      	ldrb	r2, [r3, #0]
    ebd6:	705a      	strb	r2, [r3, #1]

		/* master sends encrypted enc start rsp in control priority */
		if (conn->role.master.role == 0) {
    ebd8:	3b24      	subs	r3, #36	; 0x24
    ebda:	781c      	ldrb	r4, [r3, #0]
    ebdc:	2301      	movs	r3, #1
    ebde:	401c      	ands	r4, r3
    ebe0:	d13a      	bne.n	ec58 <event_connection_prepare+0x940>
			/* calc the Session Key */
			ecb_encrypt(&conn->llcp.encryption.ltk[0],
    ebe2:	003d      	movs	r5, r7
    ebe4:	0039      	movs	r1, r7
    ebe6:	0038      	movs	r0, r7
    ebe8:	35c1      	adds	r5, #193	; 0xc1
    ebea:	002b      	movs	r3, r5
    ebec:	0022      	movs	r2, r4
    ebee:	3187      	adds	r1, #135	; 0x87
    ebf0:	3077      	adds	r0, #119	; 0x77
    ebf2:	f7fb ff65 	bl	aac0 <ecb_encrypt>
				    &conn->llcp.encryption.skd[0],
				    NULL, &conn->ccm_rx.key[0]);

			/* copy the Session Key */
			memcpy(&conn->ccm_tx.key[0], &conn->ccm_rx.key[0],
    ebf6:	0038      	movs	r0, r7
    ebf8:	0029      	movs	r1, r5
    ebfa:	2210      	movs	r2, #16
    ebfc:	30e2      	adds	r0, #226	; 0xe2
    ebfe:	f7f2 f89c 	bl	d3a <memcpy>
			       sizeof(conn->ccm_tx.key));

			/* copy the IV */
			memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
    ec02:	0039      	movs	r1, r7
    ec04:	0038      	movs	r0, r7
    ec06:	2208      	movs	r2, #8
    ec08:	31da      	adds	r1, #218	; 0xda
    ec0a:	30fb      	adds	r0, #251	; 0xfb
    ec0c:	f7f2 f895 	bl	d3a <memcpy>
			       sizeof(conn->ccm_tx.iv));

			/* initialise counter */
			conn->ccm_rx.counter = 0;
    ec10:	003b      	movs	r3, r7
			conn->ccm_tx.counter = 0;

			/* set direction: slave to master = 0,
			 * master to slave = 1
			 */
			conn->ccm_rx.direction = 0;
    ec12:	003a      	movs	r2, r7
    ec14:	2101      	movs	r1, #1
			/* copy the IV */
			memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
			       sizeof(conn->ccm_tx.iv));

			/* initialise counter */
			conn->ccm_rx.counter = 0;
    ec16:	33d1      	adds	r3, #209	; 0xd1
    ec18:	701c      	strb	r4, [r3, #0]
    ec1a:	705c      	strb	r4, [r3, #1]
    ec1c:	709c      	strb	r4, [r3, #2]
    ec1e:	70dc      	strb	r4, [r3, #3]
    ec20:	711c      	strb	r4, [r3, #4]
    ec22:	715c      	strb	r4, [r3, #5]
    ec24:	719c      	strb	r4, [r3, #6]
    ec26:	71dc      	strb	r4, [r3, #7]
			conn->ccm_tx.counter = 0;
    ec28:	3321      	adds	r3, #33	; 0x21
    ec2a:	801c      	strh	r4, [r3, #0]
    ec2c:	805c      	strh	r4, [r3, #2]
    ec2e:	809c      	strh	r4, [r3, #4]
    ec30:	80dc      	strh	r4, [r3, #6]

			/* set direction: slave to master = 0,
			 * master to slave = 1
			 */
			conn->ccm_rx.direction = 0;
    ec32:	32d9      	adds	r2, #217	; 0xd9
    ec34:	7813      	ldrb	r3, [r2, #0]
			/* enable receive and transmit encryption */
			conn->enc_rx = 1;
			conn->enc_tx = 1;

			/* send enc start resp */
			start_enc_rsp_send(conn, pdu_ctrl_tx);
    ec36:	0038      	movs	r0, r7
			conn->ccm_tx.counter = 0;

			/* set direction: slave to master = 0,
			 * master to slave = 1
			 */
			conn->ccm_rx.direction = 0;
    ec38:	438b      	bics	r3, r1
    ec3a:	7013      	strb	r3, [r2, #0]
			conn->ccm_tx.direction = 1;
    ec3c:	3221      	adds	r2, #33	; 0x21
    ec3e:	7813      	ldrb	r3, [r2, #0]
    ec40:	430b      	orrs	r3, r1
    ec42:	7013      	strb	r3, [r2, #0]

			/* enable receive and transmit encryption */
			conn->enc_rx = 1;
			conn->enc_tx = 1;
    ec44:	2330      	movs	r3, #48	; 0x30
			 */
			conn->ccm_rx.direction = 0;
			conn->ccm_tx.direction = 1;

			/* enable receive and transmit encryption */
			conn->enc_rx = 1;
    ec46:	3a3a      	subs	r2, #58	; 0x3a
    ec48:	7811      	ldrb	r1, [r2, #0]
			conn->enc_tx = 1;
    ec4a:	430b      	orrs	r3, r1
    ec4c:	7013      	strb	r3, [r2, #0]
{
	struct radio_pdu_node_tx *node_tx;

	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
	if (node_tx) {
		struct pdu_data *pdu_ctrl_tx =
    ec4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ec50:	1d19      	adds	r1, r3, #4
			/* enable receive and transmit encryption */
			conn->enc_rx = 1;
			conn->enc_tx = 1;

			/* send enc start resp */
			start_enc_rsp_send(conn, pdu_ctrl_tx);
    ec52:	f7ff fac5 	bl	e1e0 <start_enc_rsp_send>
    ec56:	e0c9      	b.n	edec <event_connection_prepare+0xad4>
		/* slave send reject ind or start enc req at control priority */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_FAST_ENC)
		else {
#else /* !CONFIG_BLUETOOTH_CONTROLLER_FAST_ENC */
		else if (!conn->pause_tx || conn->refresh) {
    ec58:	003b      	movs	r3, r7
    ec5a:	33c0      	adds	r3, #192	; 0xc0
    ec5c:	781c      	ldrb	r4, [r3, #0]
    ec5e:	930e      	str	r3, [sp, #56]	; 0x38
    ec60:	2348      	movs	r3, #72	; 0x48
    ec62:	401c      	ands	r4, r3
    ec64:	2c08      	cmp	r4, #8
    ec66:	d100      	bne.n	ec6a <event_connection_prepare+0x952>
    ec68:	e0ae      	b.n	edc8 <event_connection_prepare+0xab0>
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_FAST_ENC */

			/* ll ctrl packet */
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    ec6a:	2603      	movs	r6, #3
    ec6c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ec6e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    ec70:	791b      	ldrb	r3, [r3, #4]
    ec72:	4333      	orrs	r3, r6
    ec74:	7113      	strb	r3, [r2, #4]

			/* place the reject ind packet as next in tx queue */
			if (conn->llcp.encryption.error_code) {
    ec76:	003b      	movs	r3, r7
    ec78:	336c      	adds	r3, #108	; 0x6c
    ec7a:	781c      	ldrb	r4, [r3, #0]
    ec7c:	2c00      	cmp	r4, #0
    ec7e:	d009      	beq.n	ec94 <event_connection_prepare+0x97c>
				pdu_ctrl_tx->len =
    ec80:	2202      	movs	r2, #2
    ec82:	990c      	ldr	r1, [sp, #48]	; 0x30
    ec84:	714a      	strb	r2, [r1, #5]
				    offsetof(struct pdu_data_llctrl, ctrldata) +
				    sizeof(struct pdu_data_llctrl_reject_ind);
				pdu_ctrl_tx->payload.llctrl.opcode =
    ec86:	320b      	adds	r2, #11
    ec88:	71ca      	strb	r2, [r1, #7]
					PDU_DATA_LLCTRL_TYPE_REJECT_IND;
				pdu_ctrl_tx->payload.llctrl.ctrldata.reject_ind.error_code =
					conn->llcp.encryption.error_code;
    ec8a:	781a      	ldrb	r2, [r3, #0]
				pdu_ctrl_tx->len =
				    offsetof(struct pdu_data_llctrl, ctrldata) +
				    sizeof(struct pdu_data_llctrl_reject_ind);
				pdu_ctrl_tx->payload.llctrl.opcode =
					PDU_DATA_LLCTRL_TYPE_REJECT_IND;
				pdu_ctrl_tx->payload.llctrl.ctrldata.reject_ind.error_code =
    ec8c:	720a      	strb	r2, [r1, #8]
					conn->llcp.encryption.error_code;

				conn->llcp.encryption.error_code = 0;
    ec8e:	2200      	movs	r2, #0
    ec90:	701a      	strb	r2, [r3, #0]
    ec92:	e0ab      	b.n	edec <event_connection_prepare+0xad4>
{
	struct radio_pdu_node_tx *node_tx;
	struct pdu_data *pdu_ctrl_tx;

	/* acquire tx mem */
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    ec94:	0028      	movs	r0, r5
    ec96:	f7fb fdfb 	bl	a890 <mem_acquire>
    ec9a:	1e05      	subs	r5, r0, #0
	LL_ASSERT(node_tx);
    ec9c:	d108      	bne.n	ecb0 <event_connection_prepare+0x998>
    ec9e:	4b40      	ldr	r3, [pc, #256]	; (eda0 <event_connection_prepare+0xa88>)
    eca0:	4a40      	ldr	r2, [pc, #256]	; (eda4 <event_connection_prepare+0xa8c>)
    eca2:	9301      	str	r3, [sp, #4]
    eca4:	4b40      	ldr	r3, [pc, #256]	; (eda8 <event_connection_prepare+0xa90>)
    eca6:	4941      	ldr	r1, [pc, #260]	; (edac <event_connection_prepare+0xa94>)
    eca8:	9300      	str	r3, [sp, #0]
    ecaa:	4845      	ldr	r0, [pc, #276]	; (edc0 <event_connection_prepare+0xaa8>)
    ecac:	4b45      	ldr	r3, [pc, #276]	; (edc4 <event_connection_prepare+0xaac>)
    ecae:	e558      	b.n	e762 <event_connection_prepare+0x44a>

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    ecb0:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata)
		+ sizeof(struct pdu_data_llctrl_enc_rsp);
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
	/** @todo */
	memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.enc_rsp.skds[0], 0xaa,
    ecb2:	2208      	movs	r2, #8
	/* acquire tx mem */
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
	LL_ASSERT(node_tx);

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    ecb4:	431e      	orrs	r6, r3
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata)
    ecb6:	230d      	movs	r3, #13
    ecb8:	7143      	strb	r3, [r0, #5]
		+ sizeof(struct pdu_data_llctrl_enc_rsp);
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
	/** @todo */
	memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.enc_rsp.skds[0], 0xaa,
    ecba:	0003      	movs	r3, r0
	/* acquire tx mem */
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
	LL_ASSERT(node_tx);

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    ecbc:	7106      	strb	r6, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata)
		+ sizeof(struct pdu_data_llctrl_enc_rsp);
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
    ecbe:	2604      	movs	r6, #4
	/** @todo */
	memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.enc_rsp.skds[0], 0xaa,
    ecc0:	3308      	adds	r3, #8

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata)
		+ sizeof(struct pdu_data_llctrl_enc_rsp);
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
    ecc2:	71c6      	strb	r6, [r0, #7]
	/** @todo */
	memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.enc_rsp.skds[0], 0xaa,
    ecc4:	21aa      	movs	r1, #170	; 0xaa
    ecc6:	0018      	movs	r0, r3
    ecc8:	930f      	str	r3, [sp, #60]	; 0x3c
    ecca:	f7f2 f860 	bl	d8e <memset>
		sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.enc_rsp.skds));
	/** @todo */
	memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.enc_rsp.ivs[0], 0xbb,
    ecce:	002b      	movs	r3, r5
    ecd0:	3310      	adds	r3, #16
    ecd2:	0018      	movs	r0, r3
    ecd4:	0032      	movs	r2, r6
    ecd6:	21bb      	movs	r1, #187	; 0xbb
    ecd8:	9310      	str	r3, [sp, #64]	; 0x40
    ecda:	f7f2 f858 	bl	d8e <memset>
	       sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.enc_rsp.ivs));

	/* things from slave stored for session key calculation */
	memcpy(&conn->llcp.encryption.skd[8],
    ecde:	0038      	movs	r0, r7
    ece0:	2208      	movs	r2, #8
    ece2:	990f      	ldr	r1, [sp, #60]	; 0x3c
    ece4:	308f      	adds	r0, #143	; 0x8f
    ece6:	f7f2 f828 	bl	d3a <memcpy>
	       &pdu_ctrl_tx->payload.llctrl.ctrldata.enc_rsp.skds[0], 8);
	memcpy(&conn->ccm_rx.iv[4],
    ecea:	0038      	movs	r0, r7
    ecec:	0032      	movs	r2, r6
    ecee:	9910      	ldr	r1, [sp, #64]	; 0x40
    ecf0:	30de      	adds	r0, #222	; 0xde
    ecf2:	f7f2 f822 	bl	d3a <memcpy>
	       &pdu_ctrl_tx->payload.llctrl.ctrldata.enc_rsp.ivs[0], 4);

	ctrl_tx_enqueue(conn, node_tx);
    ecf6:	0029      	movs	r1, r5
    ecf8:	0038      	movs	r0, r7
				 */
				enc_rsp_send(conn);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_FAST_ENC */

				/* calc the Session Key */
				ecb_encrypt(&conn->llcp.encryption.ltk[0],
    ecfa:	003d      	movs	r5, r7
	memcpy(&conn->llcp.encryption.skd[8],
	       &pdu_ctrl_tx->payload.llctrl.ctrldata.enc_rsp.skds[0], 8);
	memcpy(&conn->ccm_rx.iv[4],
	       &pdu_ctrl_tx->payload.llctrl.ctrldata.enc_rsp.ivs[0], 4);

	ctrl_tx_enqueue(conn, node_tx);
    ecfc:	f7ff fa36 	bl	e16c <ctrl_tx_enqueue>
				 */
				enc_rsp_send(conn);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_FAST_ENC */

				/* calc the Session Key */
				ecb_encrypt(&conn->llcp.encryption.ltk[0],
    ed00:	0039      	movs	r1, r7
    ed02:	0038      	movs	r0, r7
    ed04:	35c1      	adds	r5, #193	; 0xc1
    ed06:	002b      	movs	r3, r5
    ed08:	0022      	movs	r2, r4
    ed0a:	3187      	adds	r1, #135	; 0x87
    ed0c:	3077      	adds	r0, #119	; 0x77
    ed0e:	f7fb fed7 	bl	aac0 <ecb_encrypt>
					    &conn->llcp.encryption.skd[0], NULL,
					    &conn->ccm_rx.key[0]);

				/* copy the Session Key */
				memcpy(&conn->ccm_tx.key[0],
    ed12:	0038      	movs	r0, r7
    ed14:	2210      	movs	r2, #16
    ed16:	0029      	movs	r1, r5
    ed18:	30e2      	adds	r0, #226	; 0xe2
    ed1a:	f7f2 f80e 	bl	d3a <memcpy>
				       &conn->ccm_rx.key[0],
				       sizeof(conn->ccm_tx.key));

				/* copy the IV */
				memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
    ed1e:	0039      	movs	r1, r7
    ed20:	0038      	movs	r0, r7
    ed22:	2208      	movs	r2, #8
    ed24:	31da      	adds	r1, #218	; 0xda
    ed26:	30fb      	adds	r0, #251	; 0xfb
    ed28:	f7f2 f807 	bl	d3a <memcpy>
				       sizeof(conn->ccm_tx.iv));

				/* initialise counter */
				conn->ccm_rx.counter = 0;
    ed2c:	003b      	movs	r3, r7
				conn->ccm_tx.counter = 0;

				/* set direction: slave to master = 0,
				 * master to slave = 1
				 */
				conn->ccm_rx.direction = 1;
    ed2e:	003a      	movs	r2, r7
    ed30:	2101      	movs	r1, #1
				/* copy the IV */
				memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
				       sizeof(conn->ccm_tx.iv));

				/* initialise counter */
				conn->ccm_rx.counter = 0;
    ed32:	33d1      	adds	r3, #209	; 0xd1
    ed34:	701c      	strb	r4, [r3, #0]
    ed36:	715c      	strb	r4, [r3, #5]
    ed38:	705c      	strb	r4, [r3, #1]
    ed3a:	709c      	strb	r4, [r3, #2]
    ed3c:	70dc      	strb	r4, [r3, #3]
    ed3e:	711c      	strb	r4, [r3, #4]
    ed40:	719c      	strb	r4, [r3, #6]
    ed42:	71dc      	strb	r4, [r3, #7]
				conn->ccm_tx.counter = 0;
    ed44:	3321      	adds	r3, #33	; 0x21
    ed46:	801c      	strh	r4, [r3, #0]
    ed48:	809c      	strh	r4, [r3, #4]
    ed4a:	805c      	strh	r4, [r3, #2]
    ed4c:	80dc      	strh	r4, [r3, #6]

				/* set direction: slave to master = 0,
				 * master to slave = 1
				 */
				conn->ccm_rx.direction = 1;
    ed4e:	32d9      	adds	r2, #217	; 0xd9
    ed50:	7813      	ldrb	r3, [r2, #0]
    ed52:	430b      	orrs	r3, r1
    ed54:	7013      	strb	r3, [r2, #0]
				conn->ccm_tx.direction = 0;
    ed56:	3221      	adds	r2, #33	; 0x21
    ed58:	7813      	ldrb	r3, [r2, #0]
    ed5a:	438b      	bics	r3, r1
    ed5c:	7013      	strb	r3, [r2, #0]

				/* enable receive encryption (transmit turned
				 * on when start enc resp from master is
				 * received)
				 */
				conn->enc_rx = 1;
    ed5e:	2210      	movs	r2, #16
    ed60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ed62:	781b      	ldrb	r3, [r3, #0]
    ed64:	4313      	orrs	r3, r2
    ed66:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    ed68:	7013      	strb	r3, [r2, #0]

				/* prepare the start enc req */
				pdu_ctrl_tx->len =
    ed6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
					offsetof(struct pdu_data_llctrl,
						 ctrldata);
				pdu_ctrl_tx->payload.llctrl.opcode =
    ed6c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
				 * received)
				 */
				conn->enc_rx = 1;

				/* prepare the start enc req */
				pdu_ctrl_tx->len =
    ed6e:	7159      	strb	r1, [r3, #5]
					offsetof(struct pdu_data_llctrl,
						 ctrldata);
				pdu_ctrl_tx->payload.llctrl.opcode =
    ed70:	2305      	movs	r3, #5
    ed72:	71d3      	strb	r3, [r2, #7]
    ed74:	e03a      	b.n	edec <event_connection_prepare+0xad4>
    ed76:	46c0      	nop			; (mov r8, r8)
    ed78:	3b9aca00 	.word	0x3b9aca00
    ed7c:	1afd498d 	.word	0x1afd498d
    ed80:	00002710 	.word	0x00002710
    ed84:	02625a00 	.word	0x02625a00
    ed88:	01c9c380 	.word	0x01c9c380
    ed8c:	00001654 	.word	0x00001654
    ed90:	0000ca25 	.word	0x0000ca25
    ed94:	0000f465 	.word	0x0000f465
    ed98:	0000f45d 	.word	0x0000f45d
    ed9c:	00001664 	.word	0x00001664
    eda0:	000154c4 	.word	0x000154c4
    eda4:	00015484 	.word	0x00015484
    eda8:	000154c9 	.word	0x000154c9
    edac:	0001548b 	.word	0x0001548b
    edb0:	00016da4 	.word	0x00016da4
    edb4:	000182e9 	.word	0x000182e9
    edb8:	200015c0 	.word	0x200015c0
    edbc:	00007fff 	.word	0x00007fff
    edc0:	00017119 	.word	0x00017119
    edc4:	00018552 	.word	0x00018552
			}

#if !defined(CONFIG_BLUETOOTH_CONTROLLER_FAST_ENC)
		} else {
			/* enable transmit encryption */
			_radio.conn_curr->enc_tx = 1;
    edc8:	36fc      	adds	r6, #252	; 0xfc
    edca:	6970      	ldr	r0, [r6, #20]
    edcc:	2120      	movs	r1, #32
    edce:	0002      	movs	r2, r0
    edd0:	32c0      	adds	r2, #192	; 0xc0
    edd2:	7813      	ldrb	r3, [r2, #0]
    edd4:	430b      	orrs	r3, r1
    edd6:	7013      	strb	r3, [r2, #0]

			start_enc_rsp_send(_radio.conn_curr, NULL);
    edd8:	2100      	movs	r1, #0
    edda:	f7ff fa01 	bl	e1e0 <start_enc_rsp_send>

			/* resume data packet rx and tx */
			_radio.conn_curr->pause_rx = 0;
			_radio.conn_curr->pause_tx = 0;
    edde:	2104      	movs	r1, #4
			_radio.conn_curr->enc_tx = 1;

			start_enc_rsp_send(_radio.conn_curr, NULL);

			/* resume data packet rx and tx */
			_radio.conn_curr->pause_rx = 0;
    ede0:	6972      	ldr	r2, [r6, #20]
    ede2:	32c0      	adds	r2, #192	; 0xc0
    ede4:	7813      	ldrb	r3, [r2, #0]
			_radio.conn_curr->pause_tx = 0;
    ede6:	438b      	bics	r3, r1
    ede8:	43a3      	bics	r3, r4
    edea:	7013      	strb	r3, [r2, #0]
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_FAST_ENC */

		}

		ctrl_tx_enqueue(conn, node_tx);
    edec:	990c      	ldr	r1, [sp, #48]	; 0x30
    edee:	0038      	movs	r0, r7
    edf0:	f7ff f9bc 	bl	e16c <ctrl_tx_enqueue>
    edf4:	e147      	b.n	f086 <event_connection_prepare+0xd6e>

static inline void event_fex_prep(struct connection *conn)
{
	struct radio_pdu_node_tx *node_tx;

	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    edf6:	48c4      	ldr	r0, [pc, #784]	; (f108 <event_connection_prepare+0xdf0>)
    edf8:	3059      	adds	r0, #89	; 0x59
    edfa:	30ff      	adds	r0, #255	; 0xff
    edfc:	f7fb fd48 	bl	a890 <mem_acquire>
    ee00:	1e04      	subs	r4, r0, #0
	if (node_tx) {
    ee02:	d100      	bne.n	ee06 <event_connection_prepare+0xaee>
    ee04:	e13f      	b.n	f086 <event_connection_prepare+0xd6e>
		struct pdu_data *pdu_ctrl_tx =
			(struct pdu_data *)node_tx->pdu_data;

		/* procedure request acked */
		conn->llcp_ack = conn->llcp_req;
    ee06:	003b      	movs	r3, r7

		/* use initial feature bitmap */
		conn->llcp_features = RADIO_BLE_FEAT;
    ee08:	003d      	movs	r5, r7
	if (node_tx) {
		struct pdu_data *pdu_ctrl_tx =
			(struct pdu_data *)node_tx->pdu_data;

		/* procedure request acked */
		conn->llcp_ack = conn->llcp_req;
    ee0a:	3368      	adds	r3, #104	; 0x68
    ee0c:	781a      	ldrb	r2, [r3, #0]

		/* use initial feature bitmap */
		conn->llcp_features = RADIO_BLE_FEAT;
    ee0e:	3598      	adds	r5, #152	; 0x98
	if (node_tx) {
		struct pdu_data *pdu_ctrl_tx =
			(struct pdu_data *)node_tx->pdu_data;

		/* procedure request acked */
		conn->llcp_ack = conn->llcp_req;
    ee10:	705a      	strb	r2, [r3, #1]

		/* use initial feature bitmap */
		conn->llcp_features = RADIO_BLE_FEAT;

		/* place the feature exchange req packet as next in tx queue */
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    ee12:	2203      	movs	r2, #3

		/* procedure request acked */
		conn->llcp_ack = conn->llcp_req;

		/* use initial feature bitmap */
		conn->llcp_features = RADIO_BLE_FEAT;
    ee14:	4bbd      	ldr	r3, [pc, #756]	; (f10c <event_connection_prepare+0xdf4>)
    ee16:	602b      	str	r3, [r5, #0]

		/* place the feature exchange req packet as next in tx queue */
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    ee18:	7903      	ldrb	r3, [r0, #4]
    ee1a:	4313      	orrs	r3, r2
    ee1c:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
    ee1e:	2309      	movs	r3, #9
    ee20:	7143      	strb	r3, [r0, #5]
			sizeof(struct pdu_data_llctrl_feature_req);
		pdu_ctrl_tx->payload.llctrl.opcode =
			(conn->role.master.role == 0) ?
    ee22:	003b      	movs	r3, r7
    ee24:	3344      	adds	r3, #68	; 0x44

		/* place the feature exchange req packet as next in tx queue */
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
			sizeof(struct pdu_data_llctrl_feature_req);
		pdu_ctrl_tx->payload.llctrl.opcode =
    ee26:	781a      	ldrb	r2, [r3, #0]
    ee28:	2308      	movs	r3, #8
    ee2a:	07d2      	lsls	r2, r2, #31
    ee2c:	d500      	bpl.n	ee30 <event_connection_prepare+0xb18>
    ee2e:	3306      	adds	r3, #6
			(conn->role.master.role == 0) ?
			PDU_DATA_LLCTRL_TYPE_FEATURE_REQ :
			PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ;
		memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[0],
    ee30:	0020      	movs	r0, r4

		/* place the feature exchange req packet as next in tx queue */
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
			sizeof(struct pdu_data_llctrl_feature_req);
		pdu_ctrl_tx->payload.llctrl.opcode =
    ee32:	71e3      	strb	r3, [r4, #7]
			(conn->role.master.role == 0) ?
			PDU_DATA_LLCTRL_TYPE_FEATURE_REQ :
			PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ;
		memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[0],
    ee34:	2100      	movs	r1, #0
    ee36:	3008      	adds	r0, #8
    ee38:	2208      	movs	r2, #8
    ee3a:	f7f1 ffa8 	bl	d8e <memset>
		       0x00,
		       sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features));
		pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[0] =
    ee3e:	782b      	ldrb	r3, [r5, #0]
		pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[1] =
			(conn->llcp_features >> 8) & 0xFF;
		pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[2] =
			(conn->llcp_features >> 16) & 0xFF;

		ctrl_tx_enqueue(conn, node_tx);
    ee40:	0021      	movs	r1, r4
			PDU_DATA_LLCTRL_TYPE_FEATURE_REQ :
			PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ;
		memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[0],
		       0x00,
		       sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features));
		pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[0] =
    ee42:	7223      	strb	r3, [r4, #8]
			conn->llcp_features & 0xFF;
		pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[1] =
    ee44:	682b      	ldr	r3, [r5, #0]
    ee46:	0a1b      	lsrs	r3, r3, #8
    ee48:	7263      	strb	r3, [r4, #9]
			(conn->llcp_features >> 8) & 0xFF;
		pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[2] =
    ee4a:	682b      	ldr	r3, [r5, #0]
    ee4c:	0c1b      	lsrs	r3, r3, #16
    ee4e:	72a3      	strb	r3, [r4, #10]
    ee50:	e06f      	b.n	ef32 <event_connection_prepare+0xc1a>
}

static inline void event_vex_prep(struct connection *conn)
{

	if (conn->llcp_version.tx == 0) {
    ee52:	003d      	movs	r5, r7
    ee54:	2401      	movs	r4, #1
    ee56:	359c      	adds	r5, #156	; 0x9c
    ee58:	782b      	ldrb	r3, [r5, #0]
    ee5a:	4223      	tst	r3, r4
    ee5c:	d11e      	bne.n	ee9c <event_connection_prepare+0xb84>
		struct radio_pdu_node_tx *node_tx;

		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    ee5e:	48aa      	ldr	r0, [pc, #680]	; (f108 <event_connection_prepare+0xdf0>)
    ee60:	3059      	adds	r0, #89	; 0x59
    ee62:	30ff      	adds	r0, #255	; 0xff
    ee64:	f7fb fd14 	bl	a890 <mem_acquire>
    ee68:	1e01      	subs	r1, r0, #0
		if (node_tx) {
    ee6a:	d100      	bne.n	ee6e <event_connection_prepare+0xb56>
    ee6c:	e10b      	b.n	f086 <event_connection_prepare+0xd6e>
			struct pdu_data *pdu_ctrl_tx =
				(struct pdu_data *)node_tx->pdu_data;

			/* procedure request acked */
			conn->llcp_ack = conn->llcp_req;
    ee6e:	003b      	movs	r3, r7
    ee70:	3368      	adds	r3, #104	; 0x68
    ee72:	781a      	ldrb	r2, [r3, #0]
    ee74:	705a      	strb	r2, [r3, #1]

			/* set version ind tx-ed flag */
			conn->llcp_version.tx = 1;

			/* place the version ind packet as next in tx queue */
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    ee76:	2203      	movs	r2, #3

			/* procedure request acked */
			conn->llcp_ack = conn->llcp_req;

			/* set version ind tx-ed flag */
			conn->llcp_version.tx = 1;
    ee78:	782b      	ldrb	r3, [r5, #0]
    ee7a:	431c      	orrs	r4, r3
    ee7c:	702c      	strb	r4, [r5, #0]

			/* place the version ind packet as next in tx queue */
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    ee7e:	7903      	ldrb	r3, [r0, #4]
    ee80:	4313      	orrs	r3, r2
    ee82:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    ee84:	2306      	movs	r3, #6
    ee86:	7143      	strb	r3, [r0, #5]
						    ctrldata) +
				sizeof(struct pdu_data_llctrl_version_ind);
			pdu_ctrl_tx->payload.llctrl.opcode =
    ee88:	18db      	adds	r3, r3, r3
    ee8a:	71c3      	strb	r3, [r0, #7]
				PDU_DATA_LLCTRL_TYPE_VERSION_IND;
			pdu_ctrl_tx->payload.llctrl.ctrldata.version_ind.version_number =
    ee8c:	3b03      	subs	r3, #3
    ee8e:	7203      	strb	r3, [r0, #8]
				RADIO_BLE_VERSION_NUMBER;
			pdu_ctrl_tx->payload.llctrl.ctrldata.version_ind.company_id =
    ee90:	3b0a      	subs	r3, #10
    ee92:	7243      	strb	r3, [r0, #9]
    ee94:	7283      	strb	r3, [r0, #10]
				RADIO_BLE_COMPANY_ID;
			pdu_ctrl_tx->payload.llctrl.ctrldata.version_ind.sub_version_number =
    ee96:	72c3      	strb	r3, [r0, #11]
    ee98:	7303      	strb	r3, [r0, #12]
    ee9a:	e04a      	b.n	ef32 <event_connection_prepare+0xc1a>
			/* Start Procedure Timeout (@todo this shall not
			 * replace terminate procedure)
			 */
			conn->procedure_expire = conn->procedure_reload;
		}
	} else if (conn->llcp_version.rx != 0) {
    ee9c:	2002      	movs	r0, #2
    ee9e:	4203      	tst	r3, r0
    eea0:	d02c      	beq.n	eefc <event_connection_prepare+0xbe4>
		struct radio_pdu_node_rx *radio_pdu_node_rx;
		struct pdu_data *pdu_ctrl_rx;

		/* procedure request acked */
		conn->llcp_ack = conn->llcp_req;
    eea2:	003b      	movs	r3, r7
    eea4:	3368      	adds	r3, #104	; 0x68
    eea6:	781a      	ldrb	r2, [r3, #0]
    eea8:	705a      	strb	r2, [r3, #1]

		/* Prepare the rx packet structure */
		radio_pdu_node_rx = packet_rx_reserve_get(2);
    eeaa:	f7fd f983 	bl	c1b4 <packet_rx_reserve_get>
		LL_ASSERT(radio_pdu_node_rx);
    eeae:	2800      	cmp	r0, #0
    eeb0:	d108      	bne.n	eec4 <event_connection_prepare+0xbac>
    eeb2:	4b97      	ldr	r3, [pc, #604]	; (f110 <event_connection_prepare+0xdf8>)
    eeb4:	9301      	str	r3, [sp, #4]
    eeb6:	4b97      	ldr	r3, [pc, #604]	; (f114 <event_connection_prepare+0xdfc>)
    eeb8:	9300      	str	r3, [sp, #0]
    eeba:	4b97      	ldr	r3, [pc, #604]	; (f118 <event_connection_prepare+0xe00>)
    eebc:	4a97      	ldr	r2, [pc, #604]	; (f11c <event_connection_prepare+0xe04>)
    eebe:	4998      	ldr	r1, [pc, #608]	; (f120 <event_connection_prepare+0xe08>)
    eec0:	4898      	ldr	r0, [pc, #608]	; (f124 <event_connection_prepare+0xe0c>)
    eec2:	e44e      	b.n	e762 <event_connection_prepare+0x44a>
		radio_pdu_node_rx->hdr.handle = conn->handle;
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;

		/* prepare version ind structure */
		pdu_ctrl_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    eec4:	2203      	movs	r2, #3

		/* Prepare the rx packet structure */
		radio_pdu_node_rx = packet_rx_reserve_get(2);
		LL_ASSERT(radio_pdu_node_rx);

		radio_pdu_node_rx->hdr.handle = conn->handle;
    eec6:	8c3b      	ldrh	r3, [r7, #32]
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    eec8:	7104      	strb	r4, [r0, #4]

		/* Prepare the rx packet structure */
		radio_pdu_node_rx = packet_rx_reserve_get(2);
		LL_ASSERT(radio_pdu_node_rx);

		radio_pdu_node_rx->hdr.handle = conn->handle;
    eeca:	80c3      	strh	r3, [r0, #6]
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;

		/* prepare version ind structure */
		pdu_ctrl_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    eecc:	7a03      	ldrb	r3, [r0, #8]
    eece:	4313      	orrs	r3, r2
    eed0:	7203      	strb	r3, [r0, #8]
		pdu_ctrl_rx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
    eed2:	2306      	movs	r3, #6
    eed4:	7243      	strb	r3, [r0, #9]
			sizeof(struct pdu_data_llctrl_version_ind);
		pdu_ctrl_rx->payload.llctrl.opcode =
    eed6:	18db      	adds	r3, r3, r3
    eed8:	72c3      	strb	r3, [r0, #11]
			PDU_DATA_LLCTRL_TYPE_VERSION_IND;
		pdu_ctrl_rx->payload.llctrl.ctrldata.version_ind.version_number =
			conn->llcp_version.version_number;
    eeda:	003b      	movs	r3, r7
    eedc:	339d      	adds	r3, #157	; 0x9d
    eede:	781b      	ldrb	r3, [r3, #0]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
		pdu_ctrl_rx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
			sizeof(struct pdu_data_llctrl_version_ind);
		pdu_ctrl_rx->payload.llctrl.opcode =
			PDU_DATA_LLCTRL_TYPE_VERSION_IND;
		pdu_ctrl_rx->payload.llctrl.ctrldata.version_ind.version_number =
    eee0:	7303      	strb	r3, [r0, #12]
			conn->llcp_version.version_number;
		pdu_ctrl_rx->payload.llctrl.ctrldata.version_ind.company_id =
			conn->llcp_version.company_id;
    eee2:	003b      	movs	r3, r7
    eee4:	339e      	adds	r3, #158	; 0x9e
    eee6:	881b      	ldrh	r3, [r3, #0]
			sizeof(struct pdu_data_llctrl_version_ind);
		pdu_ctrl_rx->payload.llctrl.opcode =
			PDU_DATA_LLCTRL_TYPE_VERSION_IND;
		pdu_ctrl_rx->payload.llctrl.ctrldata.version_ind.version_number =
			conn->llcp_version.version_number;
		pdu_ctrl_rx->payload.llctrl.ctrldata.version_ind.company_id =
    eee8:	7343      	strb	r3, [r0, #13]
    eeea:	0a1b      	lsrs	r3, r3, #8
    eeec:	7383      	strb	r3, [r0, #14]
			conn->llcp_version.company_id;
		pdu_ctrl_rx->payload.llctrl.ctrldata.version_ind.sub_version_number =
			conn->llcp_version.sub_version_number;
    eeee:	003b      	movs	r3, r7
    eef0:	33a0      	adds	r3, #160	; 0xa0
    eef2:	881b      	ldrh	r3, [r3, #0]
			PDU_DATA_LLCTRL_TYPE_VERSION_IND;
		pdu_ctrl_rx->payload.llctrl.ctrldata.version_ind.version_number =
			conn->llcp_version.version_number;
		pdu_ctrl_rx->payload.llctrl.ctrldata.version_ind.company_id =
			conn->llcp_version.company_id;
		pdu_ctrl_rx->payload.llctrl.ctrldata.version_ind.sub_version_number =
    eef4:	73c3      	strb	r3, [r0, #15]
    eef6:	0a1b      	lsrs	r3, r3, #8
    eef8:	7403      	strb	r3, [r0, #16]
    eefa:	e0ba      	b.n	f072 <event_connection_prepare+0xd5a>

		/* enqueue version ind structure into rx queue */
		packet_rx_enqueue();
	} else {
		/* tx-ed but no rx, and new request placed */
		LL_ASSERT(0);
    eefc:	4b84      	ldr	r3, [pc, #528]	; (f110 <event_connection_prepare+0xdf8>)
    eefe:	9301      	str	r3, [sp, #4]
    ef00:	4b84      	ldr	r3, [pc, #528]	; (f114 <event_connection_prepare+0xdfc>)
    ef02:	9300      	str	r3, [sp, #0]
    ef04:	4b84      	ldr	r3, [pc, #528]	; (f118 <event_connection_prepare+0xe00>)
    ef06:	f7ff fc29 	bl	e75c <event_connection_prepare+0x444>
#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_PING)
static inline void event_ping_prep(struct connection *conn)
{
	struct radio_pdu_node_tx *node_tx;

	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    ef0a:	487f      	ldr	r0, [pc, #508]	; (f108 <event_connection_prepare+0xdf0>)
    ef0c:	3059      	adds	r0, #89	; 0x59
    ef0e:	30ff      	adds	r0, #255	; 0xff
    ef10:	f7fb fcbe 	bl	a890 <mem_acquire>
    ef14:	1e01      	subs	r1, r0, #0
	if (node_tx) {
    ef16:	d100      	bne.n	ef1a <event_connection_prepare+0xc02>
    ef18:	e0b5      	b.n	f086 <event_connection_prepare+0xd6e>
		struct pdu_data *pdu_ctrl_tx =
			(struct pdu_data *)node_tx->pdu_data;

		/* procedure request acked */
		conn->llcp_ack = conn->llcp_req;
    ef1a:	003b      	movs	r3, r7
    ef1c:	3368      	adds	r3, #104	; 0x68
    ef1e:	781a      	ldrb	r2, [r3, #0]
    ef20:	705a      	strb	r2, [r3, #1]

		/* place the ping req packet as next in tx queue */
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    ef22:	2203      	movs	r2, #3
    ef24:	7903      	ldrb	r3, [r0, #4]
    ef26:	4313      	orrs	r3, r2
    ef28:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata);
    ef2a:	2301      	movs	r3, #1
    ef2c:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->payload.llctrl.opcode =
    ef2e:	3311      	adds	r3, #17
    ef30:	71c3      	strb	r3, [r0, #7]
			PDU_DATA_LLCTRL_TYPE_PING_REQ;

		ctrl_tx_enqueue(conn, node_tx);
    ef32:	0038      	movs	r0, r7
    ef34:	f7ff f91a 	bl	e16c <ctrl_tx_enqueue>

		/* Start Procedure Timeout (@todo this shall not replace
		 * terminate procedure)
		 */
		conn->procedure_expire = conn->procedure_reload;
    ef38:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
    ef3a:	877b      	strh	r3, [r7, #58]	; 0x3a
    ef3c:	e0a3      	b.n	f086 <event_connection_prepare+0xd6e>
}

static inline void event_phy_upd_ind_prep(struct connection *conn,
					  u16_t event_counter)
{
	if (conn->llcp.phy_upd_ind.initiate) {
    ef3e:	003c      	movs	r4, r7
    ef40:	2501      	movs	r5, #1
    ef42:	346c      	adds	r4, #108	; 0x6c
    ef44:	7821      	ldrb	r1, [r4, #0]
    ef46:	4229      	tst	r1, r5
    ef48:	d031      	beq.n	efae <event_connection_prepare+0xc96>
		struct radio_pdu_node_tx *node_tx;

		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    ef4a:	486f      	ldr	r0, [pc, #444]	; (f108 <event_connection_prepare+0xdf0>)
    ef4c:	3059      	adds	r0, #89	; 0x59
    ef4e:	30ff      	adds	r0, #255	; 0xff
    ef50:	f7fb fc9e 	bl	a890 <mem_acquire>
    ef54:	1e01      	subs	r1, r0, #0
		if (node_tx) {
    ef56:	d100      	bne.n	ef5a <event_connection_prepare+0xc42>
    ef58:	e095      	b.n	f086 <event_connection_prepare+0xd6e>
			struct pdu_data *pdu_ctrl_tx = (struct pdu_data *)
						       node_tx->pdu_data;
			struct pdu_data_llctrl_phy_upd_ind *p;

			/* reset initiate flag */
			conn->llcp.phy_upd_ind.initiate = 0;
    ef5a:	7822      	ldrb	r2, [r4, #0]
    ef5c:	43aa      	bics	r2, r5

			/* Check if both tx and rx PHY unchanged */
			if (!((conn->llcp.phy_upd_ind.tx |
    ef5e:	06d3      	lsls	r3, r2, #27
    ef60:	0f5b      	lsrs	r3, r3, #29
			struct pdu_data *pdu_ctrl_tx = (struct pdu_data *)
						       node_tx->pdu_data;
			struct pdu_data_llctrl_phy_upd_ind *p;

			/* reset initiate flag */
			conn->llcp.phy_upd_ind.initiate = 0;
    ef62:	7022      	strb	r2, [r4, #0]

			/* Check if both tx and rx PHY unchanged */
			if (!((conn->llcp.phy_upd_ind.tx |
			       conn->llcp.phy_upd_ind.rx) & 0x07)) {
    ef64:	0952      	lsrs	r2, r2, #5

			/* reset initiate flag */
			conn->llcp.phy_upd_ind.initiate = 0;

			/* Check if both tx and rx PHY unchanged */
			if (!((conn->llcp.phy_upd_ind.tx |
    ef66:	431a      	orrs	r2, r3
    ef68:	b2d3      	uxtb	r3, r2
    ef6a:	003a      	movs	r2, r7
    ef6c:	326e      	adds	r2, #110	; 0x6e
    ef6e:	2b00      	cmp	r3, #0
    ef70:	d104      	bne.n	ef7c <event_connection_prepare+0xc64>
			       conn->llcp.phy_upd_ind.rx) & 0x07)) {
				/* Procedure complete */
				conn->llcp_ack = conn->llcp_req;
    ef72:	0038      	movs	r0, r7
    ef74:	3068      	adds	r0, #104	; 0x68
    ef76:	7805      	ldrb	r5, [r0, #0]
    ef78:	7045      	strb	r5, [r0, #1]
    ef7a:	e003      	b.n	ef84 <event_connection_prepare+0xc6c>

				/* 0 instant */
				conn->llcp.phy_upd_ind.instant = 0;
			} else {
				/* set instant */
				conn->llcp.phy_upd_ind.instant = event_counter +
    ef7c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    ef7e:	980a      	ldr	r0, [sp, #40]	; 0x28
    ef80:	3306      	adds	r3, #6
    ef82:	18c3      	adds	r3, r0, r3
			}

			/* place the phy update ind packet as next in
			 * tx queue
			 */
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    ef84:	2003      	movs	r0, #3

				/* 0 instant */
				conn->llcp.phy_upd_ind.instant = 0;
			} else {
				/* set instant */
				conn->llcp.phy_upd_ind.instant = event_counter +
    ef86:	8013      	strh	r3, [r2, #0]
			}

			/* place the phy update ind packet as next in
			 * tx queue
			 */
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    ef88:	790b      	ldrb	r3, [r1, #4]
    ef8a:	4303      	orrs	r3, r0
    ef8c:	710b      	strb	r3, [r1, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    ef8e:	2305      	movs	r3, #5
    ef90:	714b      	strb	r3, [r1, #5]
						    ctrldata) +
				sizeof(struct pdu_data_llctrl_phy_upd_ind);
			pdu_ctrl_tx->payload.llctrl.opcode =
    ef92:	3313      	adds	r3, #19
    ef94:	71cb      	strb	r3, [r1, #7]
				PDU_DATA_LLCTRL_TYPE_PHY_UPD_IND;
			p = &pdu_ctrl_tx->payload.llctrl.ctrldata.phy_upd_ind;
			p->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
    ef96:	7823      	ldrb	r3, [r4, #0]
    ef98:	06db      	lsls	r3, r3, #27
    ef9a:	0f5b      	lsrs	r3, r3, #29
    ef9c:	720b      	strb	r3, [r1, #8]
			p->s_to_m_phy = conn->llcp.phy_upd_ind.rx;
    ef9e:	7823      	ldrb	r3, [r4, #0]
    efa0:	095b      	lsrs	r3, r3, #5
    efa2:	724b      	strb	r3, [r1, #9]
			p->instant = conn->llcp.phy_upd_ind.instant;
    efa4:	8813      	ldrh	r3, [r2, #0]
    efa6:	728b      	strb	r3, [r1, #10]
    efa8:	0a1b      	lsrs	r3, r3, #8
    efaa:	72cb      	strb	r3, [r1, #11]
    efac:	e71f      	b.n	edee <event_connection_prepare+0xad6>

			ctrl_tx_enqueue(conn, node_tx);
		}
	} else if (((event_counter - conn->llcp.phy_upd_ind.instant) & 0xFFFF)
    efae:	003b      	movs	r3, r7
    efb0:	336e      	adds	r3, #110	; 0x6e
    efb2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    efb4:	881b      	ldrh	r3, [r3, #0]
    efb6:	1ad3      	subs	r3, r2, r3
    efb8:	4a5b      	ldr	r2, [pc, #364]	; (f128 <event_connection_prepare+0xe10>)
    efba:	b29b      	uxth	r3, r3
    efbc:	4293      	cmp	r3, r2
    efbe:	dc62      	bgt.n	f086 <event_connection_prepare+0xd6e>
		struct radio_le_phy_upd_cmplt *p;
		struct pdu_data *pdu_data;
		u8_t old_tx, old_rx;

		/* procedure request acked */
		conn->llcp_ack = conn->llcp_req;
    efc0:	003b      	movs	r3, r7

		/* apply new phy */
		old_tx = conn->phy_tx;
    efc2:	003e      	movs	r6, r7
		struct radio_le_phy_upd_cmplt *p;
		struct pdu_data *pdu_data;
		u8_t old_tx, old_rx;

		/* procedure request acked */
		conn->llcp_ack = conn->llcp_req;
    efc4:	3368      	adds	r3, #104	; 0x68
    efc6:	781a      	ldrb	r2, [r3, #0]

		/* apply new phy */
		old_tx = conn->phy_tx;
    efc8:	3632      	adds	r6, #50	; 0x32
		struct radio_le_phy_upd_cmplt *p;
		struct pdu_data *pdu_data;
		u8_t old_tx, old_rx;

		/* procedure request acked */
		conn->llcp_ack = conn->llcp_req;
    efca:	705a      	strb	r2, [r3, #1]

		/* apply new phy */
		old_tx = conn->phy_tx;
		old_rx = conn->phy_rx;
    efcc:	3b35      	subs	r3, #53	; 0x35
    efce:	781a      	ldrb	r2, [r3, #0]
		if (conn->llcp.phy_upd_ind.tx) {
    efd0:	231c      	movs	r3, #28

		/* procedure request acked */
		conn->llcp_ack = conn->llcp_req;

		/* apply new phy */
		old_tx = conn->phy_tx;
    efd2:	7835      	ldrb	r5, [r6, #0]
		old_rx = conn->phy_rx;
    efd4:	0692      	lsls	r2, r2, #26

		/* procedure request acked */
		conn->llcp_ack = conn->llcp_req;

		/* apply new phy */
		old_tx = conn->phy_tx;
    efd6:	06a8      	lsls	r0, r5, #26
    efd8:	0f40      	lsrs	r0, r0, #29
		old_rx = conn->phy_rx;
    efda:	0f52      	lsrs	r2, r2, #29
		if (conn->llcp.phy_upd_ind.tx) {
    efdc:	4219      	tst	r1, r3
    efde:	d007      	beq.n	eff0 <event_connection_prepare+0xcd8>
			conn->phy_tx = conn->llcp.phy_upd_ind.tx;
    efe0:	7823      	ldrb	r3, [r4, #0]
    efe2:	2438      	movs	r4, #56	; 0x38
    efe4:	06db      	lsls	r3, r3, #27
    efe6:	0f5b      	lsrs	r3, r3, #29
    efe8:	00db      	lsls	r3, r3, #3
    efea:	43a5      	bics	r5, r4
    efec:	431d      	orrs	r5, r3
    efee:	7035      	strb	r5, [r6, #0]
		}
		if (conn->llcp.phy_upd_ind.rx) {
    eff0:	231f      	movs	r3, #31
    eff2:	000c      	movs	r4, r1
    eff4:	439c      	bics	r4, r3
    eff6:	d00b      	beq.n	f010 <event_connection_prepare+0xcf8>
			conn->phy_rx = conn->llcp.phy_upd_ind.rx;
    eff8:	003b      	movs	r3, r7
    effa:	003c      	movs	r4, r7
    effc:	2638      	movs	r6, #56	; 0x38
    effe:	336c      	adds	r3, #108	; 0x6c
    f000:	781b      	ldrb	r3, [r3, #0]
    f002:	3432      	adds	r4, #50	; 0x32
    f004:	7865      	ldrb	r5, [r4, #1]
    f006:	095b      	lsrs	r3, r3, #5
    f008:	00db      	lsls	r3, r3, #3
    f00a:	43b5      	bics	r5, r6
    f00c:	431d      	orrs	r5, r3
    f00e:	7065      	strb	r5, [r4, #1]
		}
		conn->phy_flags = conn->phy_pref_flags;
    f010:	003c      	movs	r4, r7
    f012:	257f      	movs	r5, #127	; 0x7f
    f014:	3432      	adds	r4, #50	; 0x32
    f016:	7826      	ldrb	r6, [r4, #0]
    f018:	0673      	lsls	r3, r6, #25
    f01a:	0fdb      	lsrs	r3, r3, #31
    f01c:	4035      	ands	r5, r6
    f01e:	01db      	lsls	r3, r3, #7
    f020:	432b      	orrs	r3, r5
    f022:	003d      	movs	r5, r7
    f024:	7023      	strb	r3, [r4, #0]
    f026:	3533      	adds	r5, #51	; 0x33

		/* generate event if phy changed or initiated by cmd */
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
    f028:	078b      	lsls	r3, r1, #30
    f02a:	d409      	bmi.n	f040 <event_connection_prepare+0xd28>
    f02c:	7823      	ldrb	r3, [r4, #0]
    f02e:	069b      	lsls	r3, r3, #26
    f030:	0f5b      	lsrs	r3, r3, #29
    f032:	4283      	cmp	r3, r0
    f034:	d104      	bne.n	f040 <event_connection_prepare+0xd28>
		    (conn->phy_rx == old_rx)) {
    f036:	782b      	ldrb	r3, [r5, #0]
    f038:	069b      	lsls	r3, r3, #26
			conn->phy_rx = conn->llcp.phy_upd_ind.rx;
		}
		conn->phy_flags = conn->phy_pref_flags;

		/* generate event if phy changed or initiated by cmd */
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
    f03a:	0f5b      	lsrs	r3, r3, #29
    f03c:	4293      	cmp	r3, r2
    f03e:	d022      	beq.n	f086 <event_connection_prepare+0xd6e>
		    (conn->phy_rx == old_rx)) {
			return;
		}

		node_rx = packet_rx_reserve_get(2);
    f040:	2002      	movs	r0, #2
    f042:	f7fd f8b7 	bl	c1b4 <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
    f046:	2800      	cmp	r0, #0
    f048:	d105      	bne.n	f056 <event_connection_prepare+0xd3e>
    f04a:	4b31      	ldr	r3, [pc, #196]	; (f110 <event_connection_prepare+0xdf8>)
    f04c:	9301      	str	r3, [sp, #4]
    f04e:	4b31      	ldr	r3, [pc, #196]	; (f114 <event_connection_prepare+0xdfc>)
    f050:	9300      	str	r3, [sp, #0]
    f052:	4b36      	ldr	r3, [pc, #216]	; (f12c <event_connection_prepare+0xe14>)
    f054:	e173      	b.n	f33e <event_connection_prepare+0x1026>

		node_rx->hdr.handle = conn->handle;
    f056:	8c3b      	ldrh	r3, [r7, #32]
    f058:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    f05a:	230c      	movs	r3, #12
    f05c:	7103      	strb	r3, [r0, #4]

		pdu_data = (struct pdu_data *)&node_rx->pdu_data;
		p = (struct radio_le_phy_upd_cmplt *)&pdu_data->payload;
		p->status = 0;
    f05e:	2300      	movs	r3, #0
    f060:	72c3      	strb	r3, [r0, #11]
		p->tx = conn->phy_tx;
    f062:	7823      	ldrb	r3, [r4, #0]
    f064:	069b      	lsls	r3, r3, #26
    f066:	0f5b      	lsrs	r3, r3, #29
    f068:	7303      	strb	r3, [r0, #12]
		p->rx = conn->phy_rx;
    f06a:	782b      	ldrb	r3, [r5, #0]
    f06c:	069b      	lsls	r3, r3, #26
    f06e:	0f5b      	lsrs	r3, r3, #29
    f070:	7343      	strb	r3, [r0, #13]

		packet_rx_enqueue();
    f072:	f7fd fc6d 	bl	c950 <packet_rx_enqueue>
    f076:	e006      	b.n	f086 <event_connection_prepare+0xd6e>
			event_phy_upd_ind_prep(conn, event_counter);
			break;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PHY */

		default:
			LL_ASSERT(0);
    f078:	4b25      	ldr	r3, [pc, #148]	; (f110 <event_connection_prepare+0xdf8>)
    f07a:	9301      	str	r3, [sp, #4]
    f07c:	4b25      	ldr	r3, [pc, #148]	; (f114 <event_connection_prepare+0xdfc>)
    f07e:	9300      	str	r3, [sp, #0]
    f080:	4b2b      	ldr	r3, [pc, #172]	; (f130 <event_connection_prepare+0xe18>)
    f082:	f7ff fb6b 	bl	e75c <event_connection_prepare+0x444>
			break;
		}
	}

	/* Terminate Procedure Request */
	if (conn->llcp_terminate.ack != conn->llcp_terminate.req) {
    f086:	003c      	movs	r4, r7
    f088:	003d      	movs	r5, r7
    f08a:	34a5      	adds	r4, #165	; 0xa5
    f08c:	35a4      	adds	r5, #164	; 0xa4
    f08e:	7822      	ldrb	r2, [r4, #0]
    f090:	782b      	ldrb	r3, [r5, #0]
    f092:	429a      	cmp	r2, r3
    f094:	d01e      	beq.n	f0d4 <event_connection_prepare+0xdbc>
		struct radio_pdu_node_tx *node_tx;

		/* Stop previous event, to avoid Radio DMA corrupting the rx
		 * queue
		 */
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    f096:	2200      	movs	r2, #0
    f098:	2305      	movs	r3, #5
    f09a:	0011      	movs	r1, r2
    f09c:	0010      	movs	r0, r2
    f09e:	f7fd fda3 	bl	cbe8 <event_stop>

		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    f0a2:	4819      	ldr	r0, [pc, #100]	; (f108 <event_connection_prepare+0xdf0>)
    f0a4:	3059      	adds	r0, #89	; 0x59
    f0a6:	30ff      	adds	r0, #255	; 0xff
    f0a8:	f7fb fbf2 	bl	a890 <mem_acquire>
    f0ac:	1e01      	subs	r1, r0, #0
		if (node_tx) {
    f0ae:	d011      	beq.n	f0d4 <event_connection_prepare+0xdbc>

			/* Terminate Procedure acked */
			conn->llcp_terminate.ack = conn->llcp_terminate.req;

			/* place the terminate ind packet in tx queue */
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    f0b0:	2203      	movs	r2, #3
		if (node_tx) {
			struct pdu_data *pdu_ctrl_tx =
			    (struct pdu_data *)node_tx->pdu_data;

			/* Terminate Procedure acked */
			conn->llcp_terminate.ack = conn->llcp_terminate.req;
    f0b2:	782b      	ldrb	r3, [r5, #0]
    f0b4:	7023      	strb	r3, [r4, #0]

			/* place the terminate ind packet in tx queue */
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    f0b6:	7903      	ldrb	r3, [r0, #4]
    f0b8:	4313      	orrs	r3, r2
    f0ba:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len =
    f0bc:	2302      	movs	r3, #2
    f0be:	7143      	strb	r3, [r0, #5]
				offsetof(struct pdu_data_llctrl, ctrldata) +
				sizeof(struct pdu_data_llctrl_terminate_ind);
			pdu_ctrl_tx->payload.llctrl.opcode =
    f0c0:	71c3      	strb	r3, [r0, #7]
				PDU_DATA_LLCTRL_TYPE_TERMINATE_IND;
			pdu_ctrl_tx->payload.llctrl.ctrldata.terminate_ind.
				error_code = conn->llcp_terminate.reason_own;
    f0c2:	003b      	movs	r3, r7
    f0c4:	33a6      	adds	r3, #166	; 0xa6
    f0c6:	781b      	ldrb	r3, [r3, #0]
    f0c8:	7203      	strb	r3, [r0, #8]

			ctrl_tx_enqueue(conn, node_tx);
    f0ca:	0038      	movs	r0, r7
    f0cc:	f7ff f84e 	bl	e16c <ctrl_tx_enqueue>

			/* Terminate Procedure timeout is started, will
			 * replace any other timeout running
			 */
			conn->procedure_expire = conn->procedure_reload;
    f0d0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
    f0d2:	877b      	strh	r3, [r7, #58]	; 0x3a
		}
	}

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
	/* check if procedure is requested */
	if (conn->llcp_length.ack != conn->llcp_length.req) {
    f0d4:	003b      	movs	r3, r7
    f0d6:	33b5      	adds	r3, #181	; 0xb5
    f0d8:	930c      	str	r3, [sp, #48]	; 0x30
    f0da:	781a      	ldrb	r2, [r3, #0]
    f0dc:	3b01      	subs	r3, #1
    f0de:	781b      	ldrb	r3, [r3, #0]
    f0e0:	429a      	cmp	r2, r3
    f0e2:	d100      	bne.n	f0e6 <event_connection_prepare+0xdce>
    f0e4:	e152      	b.n	f38c <event_connection_prepare+0x1074>
		/* Stop previous event, to avoid Radio DMA corrupting the
		 * rx queue
		 */
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    f0e6:	2200      	movs	r2, #0
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
static inline void event_len_prep(struct connection *conn)
{
	switch (conn->llcp_length.state) {
    f0e8:	003d      	movs	r5, r7
	/* check if procedure is requested */
	if (conn->llcp_length.ack != conn->llcp_length.req) {
		/* Stop previous event, to avoid Radio DMA corrupting the
		 * rx queue
		 */
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    f0ea:	0010      	movs	r0, r2
    f0ec:	2305      	movs	r3, #5
    f0ee:	0011      	movs	r1, r2
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
static inline void event_len_prep(struct connection *conn)
{
	switch (conn->llcp_length.state) {
    f0f0:	35b6      	adds	r5, #182	; 0xb6
	/* check if procedure is requested */
	if (conn->llcp_length.ack != conn->llcp_length.req) {
		/* Stop previous event, to avoid Radio DMA corrupting the
		 * rx queue
		 */
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    f0f2:	f7fd fd79 	bl	cbe8 <event_stop>
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
static inline void event_len_prep(struct connection *conn)
{
	switch (conn->llcp_length.state) {
    f0f6:	7828      	ldrb	r0, [r5, #0]
    f0f8:	0780      	lsls	r0, r0, #30
    f0fa:	0f80      	lsrs	r0, r0, #30
    f0fc:	f7f1 f846 	bl	18c <__gnu_thumb1_case_uhi>
    f100:	0146001a 	.word	0x0146001a
    f104:	005d0146 	.word	0x005d0146
    f108:	200015c0 	.word	0x200015c0
    f10c:	0000407f 	.word	0x0000407f
    f110:	000154c4 	.word	0x000154c4
    f114:	000154c9 	.word	0x000154c9
    f118:	00018116 	.word	0x00018116
    f11c:	00015484 	.word	0x00015484
    f120:	0001548b 	.word	0x0001548b
    f124:	00016df2 	.word	0x00016df2
    f128:	00007fff 	.word	0x00007fff
    f12c:	0001815b 	.word	0x0001815b
    f130:	000183ec 	.word	0x000183ec
		struct pdu_data_llctrl_length_req_rsp *lr;
		struct radio_pdu_node_tx *node_tx;
		struct pdu_data *pdu_ctrl_tx;
		u16_t free_count_rx;

		free_count_rx = packet_rx_acquired_count_get() +
    f134:	f7fd f828 	bl	c188 <packet_rx_acquired_count_get>
			mem_free_count_get(_radio.pkt_rx_data_free);
    f138:	4ebc      	ldr	r6, [pc, #752]	; (f42c <event_connection_prepare+0x1114>)
		struct pdu_data_llctrl_length_req_rsp *lr;
		struct radio_pdu_node_tx *node_tx;
		struct pdu_data *pdu_ctrl_tx;
		u16_t free_count_rx;

		free_count_rx = packet_rx_acquired_count_get() +
    f13a:	0004      	movs	r4, r0
			mem_free_count_get(_radio.pkt_rx_data_free);
    f13c:	0033      	movs	r3, r6
    f13e:	33fc      	adds	r3, #252	; 0xfc
    f140:	6b18      	ldr	r0, [r3, #48]	; 0x30
    f142:	f7fb fbd4 	bl	a8ee <mem_free_count_get>
		struct pdu_data_llctrl_length_req_rsp *lr;
		struct radio_pdu_node_tx *node_tx;
		struct pdu_data *pdu_ctrl_tx;
		u16_t free_count_rx;

		free_count_rx = packet_rx_acquired_count_get() +
    f146:	1904      	adds	r4, r0, r4
    f148:	b2a0      	uxth	r0, r4
			mem_free_count_get(_radio.pkt_rx_data_free);
		LL_ASSERT(free_count_rx <= 0xFF);
    f14a:	28ff      	cmp	r0, #255	; 0xff
    f14c:	d842      	bhi.n	f1d4 <event_connection_prepare+0xebc>

		if (_radio.packet_rx_data_count != free_count_rx) {
    f14e:	239b      	movs	r3, #155	; 0x9b
    f150:	005b      	lsls	r3, r3, #1
    f152:	5cf3      	ldrb	r3, [r6, r3]
    f154:	4283      	cmp	r3, r0
    f156:	d000      	beq.n	f15a <event_connection_prepare+0xe42>
    f158:	e118      	b.n	f38c <event_connection_prepare+0x1074>
			break;
		}

		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    f15a:	0030      	movs	r0, r6
    f15c:	3059      	adds	r0, #89	; 0x59
    f15e:	30ff      	adds	r0, #255	; 0xff
    f160:	f7fb fb96 	bl	a890 <mem_acquire>
    f164:	1e01      	subs	r1, r0, #0
		if (!node_tx) {
    f166:	d100      	bne.n	f16a <event_connection_prepare+0xe52>
    f168:	e110      	b.n	f38c <event_connection_prepare+0x1074>
			break;
		}

		/* wait for resp before completing the procedure */
		conn->llcp_length.state = LLCP_LENGTH_STATE_ACK_WAIT;
    f16a:	2203      	movs	r2, #3
    f16c:	2001      	movs	r0, #1
    f16e:	782b      	ldrb	r3, [r5, #0]
    f170:	4393      	bics	r3, r2
    f172:	4303      	orrs	r3, r0
    f174:	702b      	strb	r3, [r5, #0]

		/* set the default tx octets to requested value */
		conn->default_tx_octets = conn->llcp_length.tx_octets;
    f176:	003b      	movs	r3, r7
    f178:	33ba      	adds	r3, #186	; 0xba
    f17a:	881b      	ldrh	r3, [r3, #0]
    f17c:	85bb      	strh	r3, [r7, #44]	; 0x2c

		/* place the length req packet as next in tx queue */
		pdu_ctrl_tx = (struct pdu_data *) node_tx->pdu_data;
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    f17e:	790b      	ldrb	r3, [r1, #4]
			PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;

		lr = (struct pdu_data_llctrl_length_req_rsp *)
			&pdu_ctrl_tx->payload.llctrl.ctrldata.length_req;
		lr->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
		lr->max_rx_time = ((RADIO_LL_LENGTH_OCTETS_RX_MAX + 14) << 3);
    f180:	72c8      	strb	r0, [r1, #11]
		/* set the default tx octets to requested value */
		conn->default_tx_octets = conn->llcp_length.tx_octets;

		/* place the length req packet as next in tx queue */
		pdu_ctrl_tx = (struct pdu_data *) node_tx->pdu_data;
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    f182:	431a      	orrs	r2, r3
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
    f184:	2309      	movs	r3, #9
    f186:	714b      	strb	r3, [r1, #5]
			sizeof(struct pdu_data_llctrl_length_req_rsp);
		pdu_ctrl_tx->payload.llctrl.opcode =
    f188:	330b      	adds	r3, #11
    f18a:	71cb      	strb	r3, [r1, #7]
			PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;

		lr = (struct pdu_data_llctrl_length_req_rsp *)
			&pdu_ctrl_tx->payload.llctrl.ctrldata.length_req;
		lr->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
    f18c:	3307      	adds	r3, #7
    f18e:	720b      	strb	r3, [r1, #8]
    f190:	2300      	movs	r3, #0
    f192:	724b      	strb	r3, [r1, #9]
		lr->max_rx_time = ((RADIO_LL_LENGTH_OCTETS_RX_MAX + 14) << 3);
    f194:	3348      	adds	r3, #72	; 0x48
		/* set the default tx octets to requested value */
		conn->default_tx_octets = conn->llcp_length.tx_octets;

		/* place the length req packet as next in tx queue */
		pdu_ctrl_tx = (struct pdu_data *) node_tx->pdu_data;
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    f196:	710a      	strb	r2, [r1, #4]
			PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;

		lr = (struct pdu_data_llctrl_length_req_rsp *)
			&pdu_ctrl_tx->payload.llctrl.ctrldata.length_req;
		lr->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
		lr->max_rx_time = ((RADIO_LL_LENGTH_OCTETS_RX_MAX + 14) << 3);
    f198:	728b      	strb	r3, [r1, #10]
		lr->max_tx_octets = conn->default_tx_octets;
    f19a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
		lr->max_tx_time = ((conn->default_tx_octets + 14) << 3);

		ctrl_tx_enqueue(conn, node_tx);
    f19c:	0038      	movs	r0, r7

		lr = (struct pdu_data_llctrl_length_req_rsp *)
			&pdu_ctrl_tx->payload.llctrl.ctrldata.length_req;
		lr->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
		lr->max_rx_time = ((RADIO_LL_LENGTH_OCTETS_RX_MAX + 14) << 3);
		lr->max_tx_octets = conn->default_tx_octets;
    f19e:	0a1a      	lsrs	r2, r3, #8
    f1a0:	730b      	strb	r3, [r1, #12]
		lr->max_tx_time = ((conn->default_tx_octets + 14) << 3);
    f1a2:	330e      	adds	r3, #14
    f1a4:	00db      	lsls	r3, r3, #3
    f1a6:	b29b      	uxth	r3, r3
    f1a8:	738b      	strb	r3, [r1, #14]
    f1aa:	0a1b      	lsrs	r3, r3, #8
    f1ac:	73cb      	strb	r3, [r1, #15]

		lr = (struct pdu_data_llctrl_length_req_rsp *)
			&pdu_ctrl_tx->payload.llctrl.ctrldata.length_req;
		lr->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
		lr->max_rx_time = ((RADIO_LL_LENGTH_OCTETS_RX_MAX + 14) << 3);
		lr->max_tx_octets = conn->default_tx_octets;
    f1ae:	734a      	strb	r2, [r1, #13]
		lr->max_tx_time = ((conn->default_tx_octets + 14) << 3);

		ctrl_tx_enqueue(conn, node_tx);
    f1b0:	f7fe ffdc 	bl	e16c <ctrl_tx_enqueue>

		/* Start Procedure Timeout (@todo this shall not replace
		 * terminate procedure).
		 */
		conn->procedure_expire = conn->procedure_reload;
    f1b4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
    f1b6:	877b      	strh	r3, [r7, #58]	; 0x3a
    f1b8:	e0e8      	b.n	f38c <event_connection_prepare+0x1074>
		/* Ensure the rx pool is not in use.
		 * This is important to be able to re-size the pool
		 * ensuring there is no chance that an operation on
		 * the pool is pre-empted causing memory corruption.
		 */
		free_count_rx = packet_rx_acquired_count_get() +
    f1ba:	f7fc ffe5 	bl	c188 <packet_rx_acquired_count_get>
			mem_free_count_get(_radio.pkt_rx_data_free);
    f1be:	4d9b      	ldr	r5, [pc, #620]	; (f42c <event_connection_prepare+0x1114>)
		/* Ensure the rx pool is not in use.
		 * This is important to be able to re-size the pool
		 * ensuring there is no chance that an operation on
		 * the pool is pre-empted causing memory corruption.
		 */
		free_count_rx = packet_rx_acquired_count_get() +
    f1c0:	0004      	movs	r4, r0
			mem_free_count_get(_radio.pkt_rx_data_free);
    f1c2:	002e      	movs	r6, r5
    f1c4:	36fc      	adds	r6, #252	; 0xfc
    f1c6:	6b30      	ldr	r0, [r6, #48]	; 0x30
    f1c8:	f7fb fb91 	bl	a8ee <mem_free_count_get>
		/* Ensure the rx pool is not in use.
		 * This is important to be able to re-size the pool
		 * ensuring there is no chance that an operation on
		 * the pool is pre-empted causing memory corruption.
		 */
		free_count_rx = packet_rx_acquired_count_get() +
    f1cc:	1904      	adds	r4, r0, r4
    f1ce:	b2a0      	uxth	r0, r4
			mem_free_count_get(_radio.pkt_rx_data_free);
		LL_ASSERT(free_count_rx <= 0xFF);
    f1d0:	28ff      	cmp	r0, #255	; 0xff
    f1d2:	d909      	bls.n	f1e8 <event_connection_prepare+0xed0>
    f1d4:	4b96      	ldr	r3, [pc, #600]	; (f430 <event_connection_prepare+0x1118>)
    f1d6:	4a97      	ldr	r2, [pc, #604]	; (f434 <event_connection_prepare+0x111c>)
    f1d8:	9301      	str	r3, [sp, #4]
    f1da:	4b97      	ldr	r3, [pc, #604]	; (f438 <event_connection_prepare+0x1120>)
    f1dc:	4997      	ldr	r1, [pc, #604]	; (f43c <event_connection_prepare+0x1124>)
    f1de:	9300      	str	r3, [sp, #0]
    f1e0:	4897      	ldr	r0, [pc, #604]	; (f440 <event_connection_prepare+0x1128>)
    f1e2:	4b98      	ldr	r3, [pc, #608]	; (f444 <event_connection_prepare+0x112c>)
    f1e4:	f7ff fabd 	bl	e762 <event_connection_prepare+0x44a>

		if (_radio.packet_rx_data_count != free_count_rx) {
    f1e8:	239b      	movs	r3, #155	; 0x9b
    f1ea:	005b      	lsls	r3, r3, #1
    f1ec:	5ceb      	ldrb	r3, [r5, r3]
    f1ee:	4283      	cmp	r3, r0
    f1f0:	d006      	beq.n	f200 <event_connection_prepare+0xee8>
			/** TODO another role instance has obtained
			 * memory from rx pool.
			 */
			LL_ASSERT(0);
    f1f2:	4b8f      	ldr	r3, [pc, #572]	; (f430 <event_connection_prepare+0x1118>)
    f1f4:	9301      	str	r3, [sp, #4]
    f1f6:	4b90      	ldr	r3, [pc, #576]	; (f438 <event_connection_prepare+0x1120>)
    f1f8:	9300      	str	r3, [sp, #0]
    f1fa:	4b92      	ldr	r3, [pc, #584]	; (f444 <event_connection_prepare+0x112c>)
    f1fc:	f7ff faae 	bl	e75c <event_connection_prepare+0x444>
		}

		/* Procedure complete */
		conn->llcp_length.ack = conn->llcp_length.req;
    f200:	003b      	movs	r3, r7
    f202:	33b4      	adds	r3, #180	; 0xb4
    f204:	781b      	ldrb	r3, [r3, #0]
    f206:	9a0c      	ldr	r2, [sp, #48]	; 0x30
		conn->procedure_expire = 0;

		/* resume data packet tx */
		_radio.conn_curr->pause_tx = 0;
    f208:	2108      	movs	r1, #8
			 */
			LL_ASSERT(0);
		}

		/* Procedure complete */
		conn->llcp_length.ack = conn->llcp_length.req;
    f20a:	7013      	strb	r3, [r2, #0]
		conn->procedure_expire = 0;
    f20c:	2300      	movs	r3, #0
    f20e:	877b      	strh	r3, [r7, #58]	; 0x3a

		/* resume data packet tx */
		_radio.conn_curr->pause_tx = 0;
    f210:	6973      	ldr	r3, [r6, #20]
		 * context.
		 * Design mem_* such that mem_init could interrupt mem_acquire,
		 * when the pool is full?
		 */
		free_count_conn = mem_free_count_get(_radio.conn_free);
		if (_radio.advertiser.conn) {
    f212:	35c8      	adds	r5, #200	; 0xc8
		/* Procedure complete */
		conn->llcp_length.ack = conn->llcp_length.req;
		conn->procedure_expire = 0;

		/* resume data packet tx */
		_radio.conn_curr->pause_tx = 0;
    f214:	33c0      	adds	r3, #192	; 0xc0
    f216:	781a      	ldrb	r2, [r3, #0]
    f218:	438a      	bics	r2, r1
    f21a:	701a      	strb	r2, [r3, #0]

		/* Use the new rx octets in the connection */
		conn->max_rx_octets = conn->llcp_length.rx_octets;
    f21c:	003b      	movs	r3, r7
    f21e:	33b8      	adds	r3, #184	; 0xb8
    f220:	881b      	ldrh	r3, [r3, #0]
		 * rule that the rx buffers are allocated in application
		 * context.
		 * Design mem_* such that mem_init could interrupt mem_acquire,
		 * when the pool is full?
		 */
		free_count_conn = mem_free_count_get(_radio.conn_free);
    f222:	68f0      	ldr	r0, [r6, #12]

		/* resume data packet tx */
		_radio.conn_curr->pause_tx = 0;

		/* Use the new rx octets in the connection */
		conn->max_rx_octets = conn->llcp_length.rx_octets;
    f224:	863b      	strh	r3, [r7, #48]	; 0x30
		 * rule that the rx buffers are allocated in application
		 * context.
		 * Design mem_* such that mem_init could interrupt mem_acquire,
		 * when the pool is full?
		 */
		free_count_conn = mem_free_count_get(_radio.conn_free);
    f226:	f7fb fb62 	bl	a8ee <mem_free_count_get>
		if (_radio.advertiser.conn) {
    f22a:	682b      	ldr	r3, [r5, #0]
    f22c:	2b00      	cmp	r3, #0
    f22e:	d001      	beq.n	f234 <event_connection_prepare+0xf1c>
			free_count_conn++;
    f230:	3001      	adds	r0, #1
    f232:	b280      	uxth	r0, r0
		}
		if (_radio.scanner.conn) {
    f234:	4b7d      	ldr	r3, [pc, #500]	; (f42c <event_connection_prepare+0x1114>)
    f236:	001a      	movs	r2, r3
    f238:	32fc      	adds	r2, #252	; 0xfc
    f23a:	6812      	ldr	r2, [r2, #0]
    f23c:	2a00      	cmp	r2, #0
    f23e:	d001      	beq.n	f244 <event_connection_prepare+0xf2c>
			free_count_conn++;
    f240:	3001      	adds	r0, #1
    f242:	b280      	uxth	r0, r0
		}
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
    f244:	2103      	movs	r1, #3
    f246:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
					     conn->max_rx_octets);
		/* Resize to lower or higher size if this is the only active
		 * connection, or resize to only higher sizes as there may be
		 * other connections using the current size.
		 */
		if (((free_count_conn + 1) == _radio.connection_count) ||
    f248:	3001      	adds	r0, #1
			free_count_conn++;
		}
		if (_radio.scanner.conn) {
			free_count_conn++;
		}
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
    f24a:	320e      	adds	r2, #14
    f24c:	438a      	bics	r2, r1
    f24e:	b292      	uxth	r2, r2
    f250:	920c      	str	r2, [sp, #48]	; 0x30
					     conn->max_rx_octets);
		/* Resize to lower or higher size if this is the only active
		 * connection, or resize to only higher sizes as there may be
		 * other connections using the current size.
		 */
		if (((free_count_conn + 1) == _radio.connection_count) ||
    f252:	001a      	movs	r2, r3
    f254:	32ff      	adds	r2, #255	; 0xff
    f256:	7b52      	ldrb	r2, [r2, #13]
    f258:	4290      	cmp	r0, r2
    f25a:	d004      	beq.n	f266 <event_connection_prepare+0xf4e>
		    (packet_rx_data_size > _radio.packet_rx_data_size)) {
    f25c:	33fe      	adds	r3, #254	; 0xfe
					     conn->max_rx_octets);
		/* Resize to lower or higher size if this is the only active
		 * connection, or resize to only higher sizes as there may be
		 * other connections using the current size.
		 */
		if (((free_count_conn + 1) == _radio.connection_count) ||
    f25e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
    f260:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    f262:	4293      	cmp	r3, r2
    f264:	d261      	bcs.n	f32a <event_connection_prepare+0x1012>
		    (packet_rx_data_size > _radio.packet_rx_data_size)) {
			/* as rx mem is to be re-sized, release acquired
			 * memq link.
			 */
			while (_radio.packet_rx_acquire !=
    f266:	269f      	movs	r6, #159	; 0x9f
    f268:	0076      	lsls	r6, r6, #1
				_radio.packet_rx_last) {
    f26a:	223e      	movs	r2, #62	; 0x3e
		if (((free_count_conn + 1) == _radio.connection_count) ||
		    (packet_rx_data_size > _radio.packet_rx_data_size)) {
			/* as rx mem is to be re-sized, release acquired
			 * memq link.
			 */
			while (_radio.packet_rx_acquire !=
    f26c:	4d6f      	ldr	r5, [pc, #444]	; (f42c <event_connection_prepare+0x1114>)
				_radio.packet_rx_last) {
    f26e:	32ff      	adds	r2, #255	; 0xff
		if (((free_count_conn + 1) == _radio.connection_count) ||
		    (packet_rx_data_size > _radio.packet_rx_data_size)) {
			/* as rx mem is to be re-sized, release acquired
			 * memq link.
			 */
			while (_radio.packet_rx_acquire !=
    f270:	5dab      	ldrb	r3, [r5, r6]
				_radio.packet_rx_last) {
    f272:	5caa      	ldrb	r2, [r5, r2]
    f274:	002c      	movs	r4, r5
		if (((free_count_conn + 1) == _radio.connection_count) ||
		    (packet_rx_data_size > _radio.packet_rx_data_size)) {
			/* as rx mem is to be re-sized, release acquired
			 * memq link.
			 */
			while (_radio.packet_rx_acquire !=
    f276:	4293      	cmp	r3, r2
    f278:	d029      	beq.n	f2ce <event_connection_prepare+0xfb6>
				_radio.packet_rx_last) {

				struct radio_pdu_node_rx *node_rx;

				if (_radio.packet_rx_acquire == 0) {
    f27a:	2b00      	cmp	r3, #0
    f27c:	d102      	bne.n	f284 <event_connection_prepare+0xf6c>
					_radio.packet_rx_acquire =
    f27e:	333d      	adds	r3, #61	; 0x3d
    f280:	33ff      	adds	r3, #255	; 0xff
    f282:	5ceb      	ldrb	r3, [r5, r3]
						_radio.packet_rx_count - 1;
				} else {
					_radio.packet_rx_acquire -= 1;
    f284:	3b01      	subs	r3, #1
    f286:	55ab      	strb	r3, [r5, r6]
				}

				node_rx = _radio.packet_rx[
    f288:	239f      	movs	r3, #159	; 0x9f
						_radio.packet_rx_acquire];
				mem_release(node_rx->hdr.onion.link,
    f28a:	0021      	movs	r1, r4
						_radio.packet_rx_count - 1;
				} else {
					_radio.packet_rx_acquire -= 1;
				}

				node_rx = _radio.packet_rx[
    f28c:	005b      	lsls	r3, r3, #1
    f28e:	5ceb      	ldrb	r3, [r5, r3]
    f290:	34fc      	adds	r4, #252	; 0xfc
    f292:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    f294:	009b      	lsls	r3, r3, #2
						_radio.packet_rx_acquire];
				mem_release(node_rx->hdr.onion.link,
    f296:	589b      	ldr	r3, [r3, r2]
    f298:	3145      	adds	r1, #69	; 0x45
    f29a:	31ff      	adds	r1, #255	; 0xff
    f29c:	6818      	ldr	r0, [r3, #0]
    f29e:	f7fb fb10 	bl	a8c2 <mem_release>
					&_radio.link_rx_free);

				LL_ASSERT(_radio.link_rx_data_quota <
    f2a2:	229e      	movs	r2, #158	; 0x9e
    f2a4:	21a8      	movs	r1, #168	; 0xa8
    f2a6:	0052      	lsls	r2, r2, #1
    f2a8:	0049      	lsls	r1, r1, #1
    f2aa:	5caa      	ldrb	r2, [r5, r2]
    f2ac:	5c6b      	ldrb	r3, [r5, r1]
    f2ae:	3a01      	subs	r2, #1
    f2b0:	4293      	cmp	r3, r2
    f2b2:	db09      	blt.n	f2c8 <event_connection_prepare+0xfb0>
    f2b4:	4b5e      	ldr	r3, [pc, #376]	; (f430 <event_connection_prepare+0x1118>)
    f2b6:	4a5f      	ldr	r2, [pc, #380]	; (f434 <event_connection_prepare+0x111c>)
    f2b8:	9301      	str	r3, [sp, #4]
    f2ba:	4b5f      	ldr	r3, [pc, #380]	; (f438 <event_connection_prepare+0x1120>)
    f2bc:	495f      	ldr	r1, [pc, #380]	; (f43c <event_connection_prepare+0x1124>)
    f2be:	9300      	str	r3, [sp, #0]
    f2c0:	4861      	ldr	r0, [pc, #388]	; (f448 <event_connection_prepare+0x1130>)
    f2c2:	4b60      	ldr	r3, [pc, #384]	; (f444 <event_connection_prepare+0x112c>)
    f2c4:	f7ff fa4d 	bl	e762 <event_connection_prepare+0x44a>
					  (_radio.packet_rx_count - 1));
				_radio.link_rx_data_quota++;
    f2c8:	3301      	adds	r3, #1
    f2ca:	546b      	strb	r3, [r5, r1]
    f2cc:	e7cd      	b.n	f26a <event_connection_prepare+0xf52>
    f2ce:	002b      	movs	r3, r5
				 * later down in code.
				 */
			}

			/* calculate the new rx node size and new count */
			if (conn->max_rx_octets < (PDU_AC_SIZE_MAX + 1)) {
    f2d0:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
    f2d2:	33fe      	adds	r3, #254	; 0xfe
    f2d4:	2a27      	cmp	r2, #39	; 0x27
    f2d6:	d801      	bhi.n	f2dc <event_connection_prepare+0xfc4>
				_radio.packet_rx_data_size =
    f2d8:	2230      	movs	r2, #48	; 0x30
    f2da:	e001      	b.n	f2e0 <event_connection_prepare+0xfc8>
				    MROUND(offsetof(struct radio_pdu_node_rx,
						    pdu_data) +
					   (PDU_AC_SIZE_MAX + 1));
			} else {
				_radio.packet_rx_data_size =
    f2dc:	466a      	mov	r2, sp
    f2de:	8e12      	ldrh	r2, [r2, #48]	; 0x30
    f2e0:	86da      	strh	r2, [r3, #54]	; 0x36
					packet_rx_data_size;
			}
			_radio.packet_rx_data_count =
				_radio.packet_rx_data_pool_size /
				_radio.packet_rx_data_size;
    f2e2:	0023      	movs	r3, r4
    f2e4:	33fe      	adds	r3, #254	; 0xfe
    f2e6:	8edd      	ldrh	r5, [r3, #54]	; 0x36
					   (PDU_AC_SIZE_MAX + 1));
			} else {
				_radio.packet_rx_data_size =
					packet_rx_data_size;
			}
			_radio.packet_rx_data_count =
    f2e8:	8e98      	ldrh	r0, [r3, #52]	; 0x34
    f2ea:	0029      	movs	r1, r5
    f2ec:	f7f0 ff58 	bl	1a0 <__aeabi_uidiv>
    f2f0:	219b      	movs	r1, #155	; 0x9b
    f2f2:	b282      	uxth	r2, r0
    f2f4:	b2d3      	uxtb	r3, r2
    f2f6:	0049      	lsls	r1, r1, #1
    f2f8:	5463      	strb	r3, [r4, r1]
				_radio.packet_rx_data_pool_size /
				_radio.packet_rx_data_size;
			LL_ASSERT(_radio.packet_rx_data_count);
    f2fa:	2b00      	cmp	r3, #0
    f2fc:	d109      	bne.n	f312 <event_connection_prepare+0xffa>
    f2fe:	4b4c      	ldr	r3, [pc, #304]	; (f430 <event_connection_prepare+0x1118>)
    f300:	4a4c      	ldr	r2, [pc, #304]	; (f434 <event_connection_prepare+0x111c>)
    f302:	9301      	str	r3, [sp, #4]
    f304:	4b4c      	ldr	r3, [pc, #304]	; (f438 <event_connection_prepare+0x1120>)
    f306:	494d      	ldr	r1, [pc, #308]	; (f43c <event_connection_prepare+0x1124>)
    f308:	9300      	str	r3, [sp, #0]
    f30a:	4850      	ldr	r0, [pc, #320]	; (f44c <event_connection_prepare+0x1134>)
    f30c:	4b4d      	ldr	r3, [pc, #308]	; (f444 <event_connection_prepare+0x112c>)
    f30e:	f7ff fa28 	bl	e762 <event_connection_prepare+0x44a>

			/* re-size (re-init) the free rx pool */
			mem_init(_radio.pkt_rx_data_pool,
    f312:	0023      	movs	r3, r4
    f314:	34fc      	adds	r4, #252	; 0xfc
    f316:	332d      	adds	r3, #45	; 0x2d
    f318:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    f31a:	33ff      	adds	r3, #255	; 0xff
    f31c:	b2d2      	uxtb	r2, r2
    f31e:	0029      	movs	r1, r5
    f320:	f7fb fa90 	bl	a844 <mem_init>
				 &_radio.pkt_rx_data_free);

			/* allocate the rx queue include one extra for
			 * generating event in following lines.
			 */
			packet_rx_allocate(4);
    f324:	2004      	movs	r0, #4
    f326:	f7fc ff5b 	bl	c1e0 <packet_rx_allocate>
		}

		/* Prepare the rx packet structure */
		node_rx = packet_rx_reserve_get(2);
    f32a:	2002      	movs	r0, #2
    f32c:	f7fc ff42 	bl	c1b4 <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
    f330:	2800      	cmp	r0, #0
    f332:	d109      	bne.n	f348 <event_connection_prepare+0x1030>
    f334:	4b3e      	ldr	r3, [pc, #248]	; (f430 <event_connection_prepare+0x1118>)
    f336:	9301      	str	r3, [sp, #4]
    f338:	4b3f      	ldr	r3, [pc, #252]	; (f438 <event_connection_prepare+0x1120>)
    f33a:	9300      	str	r3, [sp, #0]
    f33c:	4b41      	ldr	r3, [pc, #260]	; (f444 <event_connection_prepare+0x112c>)
    f33e:	4a3d      	ldr	r2, [pc, #244]	; (f434 <event_connection_prepare+0x111c>)
    f340:	493e      	ldr	r1, [pc, #248]	; (f43c <event_connection_prepare+0x1124>)
    f342:	4843      	ldr	r0, [pc, #268]	; (f450 <event_connection_prepare+0x1138>)
    f344:	f7ff fa0d 	bl	e762 <event_connection_prepare+0x44a>
		node_rx->hdr.handle = conn->handle;
    f348:	8c3b      	ldrh	r3, [r7, #32]
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;

		/* prepare length rsp structure */
		pdu_ctrl_rx = (struct pdu_data *) node_rx->pdu_data;
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    f34a:	2203      	movs	r2, #3
		}

		/* Prepare the rx packet structure */
		node_rx = packet_rx_reserve_get(2);
		LL_ASSERT(node_rx);
		node_rx->hdr.handle = conn->handle;
    f34c:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    f34e:	2301      	movs	r3, #1
    f350:	7103      	strb	r3, [r0, #4]

		/* prepare length rsp structure */
		pdu_ctrl_rx = (struct pdu_data *) node_rx->pdu_data;
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    f352:	7a03      	ldrb	r3, [r0, #8]
    f354:	4313      	orrs	r3, r2
    f356:	7203      	strb	r3, [r0, #8]
		pdu_ctrl_rx->len = offsetof(struct pdu_data_llctrl,
    f358:	2309      	movs	r3, #9
    f35a:	7243      	strb	r3, [r0, #9]
					    ctrldata) +
			sizeof(struct pdu_data_llctrl_length_req_rsp);
		pdu_ctrl_rx->payload.llctrl.opcode =
    f35c:	330c      	adds	r3, #12
    f35e:	72c3      	strb	r3, [r0, #11]
			PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;

		lr = (struct pdu_data_llctrl_length_req_rsp *)
			&pdu_ctrl_rx->payload.llctrl.ctrldata.length_req;
		lr->max_rx_octets = conn->max_rx_octets;
    f360:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
    f362:	0a1a      	lsrs	r2, r3, #8
    f364:	7303      	strb	r3, [r0, #12]
		lr->max_rx_time = ((conn->max_rx_octets + 14) << 3);
    f366:	330e      	adds	r3, #14
    f368:	00db      	lsls	r3, r3, #3
    f36a:	b29b      	uxth	r3, r3
    f36c:	7383      	strb	r3, [r0, #14]
    f36e:	0a1b      	lsrs	r3, r3, #8
		pdu_ctrl_rx->payload.llctrl.opcode =
			PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;

		lr = (struct pdu_data_llctrl_length_req_rsp *)
			&pdu_ctrl_rx->payload.llctrl.ctrldata.length_req;
		lr->max_rx_octets = conn->max_rx_octets;
    f370:	7342      	strb	r2, [r0, #13]
		lr->max_rx_time = ((conn->max_rx_octets + 14) << 3);
    f372:	73c3      	strb	r3, [r0, #15]
		lr->max_tx_octets = conn->max_tx_octets;
    f374:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
    f376:	0a1a      	lsrs	r2, r3, #8
    f378:	7403      	strb	r3, [r0, #16]
		lr->max_tx_time = ((conn->max_tx_octets + 14) << 3);
    f37a:	330e      	adds	r3, #14
    f37c:	00db      	lsls	r3, r3, #3
    f37e:	b29b      	uxth	r3, r3
    f380:	7483      	strb	r3, [r0, #18]
    f382:	0a1b      	lsrs	r3, r3, #8

		lr = (struct pdu_data_llctrl_length_req_rsp *)
			&pdu_ctrl_rx->payload.llctrl.ctrldata.length_req;
		lr->max_rx_octets = conn->max_rx_octets;
		lr->max_rx_time = ((conn->max_rx_octets + 14) << 3);
		lr->max_tx_octets = conn->max_tx_octets;
    f384:	7442      	strb	r2, [r0, #17]
		lr->max_tx_time = ((conn->max_tx_octets + 14) << 3);
    f386:	74c3      	strb	r3, [r0, #19]

		/* enqueue version ind structure into rx queue */
		packet_rx_enqueue();
    f388:	f7fd fae2 	bl	c950 <packet_rx_enqueue>
				   &conn->hdr.ticks_xtal_to_start,
				   &conn->hdr.ticks_active_to_start,
				   conn->hdr.ticks_preempt_to_start,
				   (RADIO_TICKER_ID_FIRST_CONNECTION +
				    conn->handle),
				   (conn->role.slave.role != 0) ? event_slave :
    f38c:	0039      	movs	r1, r7
		event_len_prep(conn);
	}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

	/* store the next event counter value */
	conn->event_counter = event_counter + 1;
    f38e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
				   &conn->hdr.ticks_xtal_to_start,
				   &conn->hdr.ticks_active_to_start,
				   conn->hdr.ticks_preempt_to_start,
				   (RADIO_TICKER_ID_FIRST_CONNECTION +
				    conn->handle),
				   (conn->role.slave.role != 0) ? event_slave :
    f390:	3144      	adds	r1, #68	; 0x44
		event_len_prep(conn);
	}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

	/* store the next event counter value */
	conn->event_counter = event_counter + 1;
    f392:	3201      	adds	r2, #1
    f394:	847a      	strh	r2, [r7, #34]	; 0x22

	/* Setup XTAL startup and radio active events */
	err = event_common_prepare(ticks_at_expire, remainder,
    f396:	8c3a      	ldrh	r2, [r7, #32]
    f398:	780c      	ldrb	r4, [r1, #0]
    f39a:	3207      	adds	r2, #7
    f39c:	1d3b      	adds	r3, r7, #4
    f39e:	68b8      	ldr	r0, [r7, #8]
    f3a0:	b2d2      	uxtb	r2, r2
    f3a2:	492c      	ldr	r1, [pc, #176]	; (f454 <event_connection_prepare+0x113c>)
    f3a4:	07e4      	lsls	r4, r4, #31
    f3a6:	d400      	bmi.n	f3aa <event_connection_prepare+0x1092>
    f3a8:	492b      	ldr	r1, [pc, #172]	; (f458 <event_connection_prepare+0x1140>)
    f3aa:	9102      	str	r1, [sp, #8]
    f3ac:	9201      	str	r2, [sp, #4]
    f3ae:	9000      	str	r0, [sp, #0]
    f3b0:	9703      	str	r7, [sp, #12]
    f3b2:	003a      	movs	r2, r7
    f3b4:	9911      	ldr	r1, [sp, #68]	; 0x44
    f3b6:	980d      	ldr	r0, [sp, #52]	; 0x34
    f3b8:	f7fd fdca 	bl	cf50 <event_common_prepare>
				   (RADIO_TICKER_ID_FIRST_CONNECTION +
				    conn->handle),
				   (conn->role.slave.role != 0) ? event_slave :
								  event_master,
				   conn);
	if (!err) {
    f3bc:	2800      	cmp	r0, #0
    f3be:	d133      	bne.n	f428 <event_connection_prepare+0x1110>
		_radio.ticker_id_prepare = RADIO_TICKER_ID_FIRST_CONNECTION +
    f3c0:	8c3b      	ldrh	r3, [r7, #32]
    f3c2:	4a1a      	ldr	r2, [pc, #104]	; (f42c <event_connection_prepare+0x1114>)
    f3c4:	3307      	adds	r3, #7
    f3c6:	b2db      	uxtb	r3, r3
    f3c8:	7313      	strb	r3, [r2, #12]
    f3ca:	e02d      	b.n	f428 <event_connection_prepare+0x1110>
		return 1;
	}

	if ((conn->role.master.role == 0) || (is_peer_compatible(conn))) {
		/** Perform slave intiated conn param req */
		conn->llcp.connection_update.win_size = 1;
    f3cc:	003b      	movs	r3, r7
    f3ce:	2201      	movs	r2, #1
    f3d0:	3394      	adds	r3, #148	; 0x94
    f3d2:	701a      	strb	r2, [r3, #0]
		conn->llcp.connection_update.win_offset_us = 0;
    f3d4:	2300      	movs	r3, #0
		conn->llcp.connection_update.interval = conn->conn_interval;
    f3d6:	466a      	mov	r2, sp
	}

	if ((conn->role.master.role == 0) || (is_peer_compatible(conn))) {
		/** Perform slave intiated conn param req */
		conn->llcp.connection_update.win_size = 1;
		conn->llcp.connection_update.win_offset_us = 0;
    f3d8:	602b      	str	r3, [r5, #0]
		conn->llcp.connection_update.interval = conn->conn_interval;
    f3da:	003b      	movs	r3, r7
    f3dc:	8d12      	ldrh	r2, [r2, #40]	; 0x28
    f3de:	336c      	adds	r3, #108	; 0x6c
    f3e0:	801a      	strh	r2, [r3, #0]
		conn->llcp.connection_update.latency = conn->latency;
    f3e2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
		conn->llcp.connection_update.timeout = conn->conn_interval *
    f3e4:	21fa      	movs	r1, #250	; 0xfa
	if ((conn->role.master.role == 0) || (is_peer_compatible(conn))) {
		/** Perform slave intiated conn param req */
		conn->llcp.connection_update.win_size = 1;
		conn->llcp.connection_update.win_offset_us = 0;
		conn->llcp.connection_update.interval = conn->conn_interval;
		conn->llcp.connection_update.latency = conn->latency;
    f3e6:	805a      	strh	r2, [r3, #2]
		conn->llcp.connection_update.timeout = conn->conn_interval *
    f3e8:	8eb8      	ldrh	r0, [r7, #52]	; 0x34
    f3ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f3ec:	0089      	lsls	r1, r1, #2
    f3ee:	4343      	muls	r3, r0
    f3f0:	0018      	movs	r0, r3
    f3f2:	237d      	movs	r3, #125	; 0x7d
    f3f4:	4358      	muls	r0, r3
    f3f6:	f7f0 ff5d 	bl	2b4 <__aeabi_idiv>
    f3fa:	003b      	movs	r3, r7
			conn->supervision_reload * 125 / 1000;
		/* conn->llcp.connection_update.instant     = 0; */
		conn->llcp.connection_update.state =
    f3fc:	2207      	movs	r2, #7
		/** Perform slave intiated conn param req */
		conn->llcp.connection_update.win_size = 1;
		conn->llcp.connection_update.win_offset_us = 0;
		conn->llcp.connection_update.interval = conn->conn_interval;
		conn->llcp.connection_update.latency = conn->latency;
		conn->llcp.connection_update.timeout = conn->conn_interval *
    f3fe:	3370      	adds	r3, #112	; 0x70
    f400:	8018      	strh	r0, [r3, #0]
			conn->supervision_reload * 125 / 1000;
		/* conn->llcp.connection_update.instant     = 0; */
		conn->llcp.connection_update.state =
    f402:	7823      	ldrb	r3, [r4, #0]
    f404:	4393      	bics	r3, r2
			(conn->role.master.role == 0) ?
			LLCP_CONN_STATE_INITIATE : LLCP_CONN_STATE_REQ;
		conn->llcp.connection_update.is_internal = 1;
    f406:	3a05      	subs	r2, #5
    f408:	4313      	orrs	r3, r2
    f40a:	3216      	adds	r2, #22
    f40c:	4393      	bics	r3, r2
    f40e:	3a10      	subs	r2, #16
    f410:	4313      	orrs	r3, r2
    f412:	7023      	strb	r3, [r4, #0]

		conn->llcp_type = LLCP_CONNECTION_UPDATE;
    f414:	003b      	movs	r3, r7
    f416:	3a07      	subs	r2, #7
    f418:	336a      	adds	r3, #106	; 0x6a
    f41a:	701a      	strb	r2, [r3, #0]
		conn->llcp_ack--;
    f41c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    f41e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    f420:	3b01      	subs	r3, #1
    f422:	7013      	strb	r3, [r2, #0]
    f424:	f7ff fae7 	bl	e9f6 <event_connection_prepare+0x6de>
				   conn);
	if (!err) {
		_radio.ticker_id_prepare = RADIO_TICKER_ID_FIRST_CONNECTION +
					   conn->handle;
	}
}
    f428:	b013      	add	sp, #76	; 0x4c
    f42a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f42c:	200015c0 	.word	0x200015c0
    f430:	000154c4 	.word	0x000154c4
    f434:	00015484 	.word	0x00015484
    f438:	000154c9 	.word	0x000154c9
    f43c:	0001548b 	.word	0x0001548b
    f440:	0001716b 	.word	0x0001716b
    f444:	00018342 	.word	0x00018342
    f448:	000171a2 	.word	0x000171a2
    f44c:	000171fc 	.word	0x000171fc
    f450:	00017142 	.word	0x00017142
    f454:	0000df95 	.word	0x0000df95
    f458:	0000f46d 	.word	0x0000f46d

0000f45c <event_master_prepare>:
	DEBUG_RADIO_START_S(0);
}

static void event_master_prepare(u32_t ticks_at_expire, u32_t remainder,
				 u16_t lazy, void *context)
{
    f45c:	b510      	push	{r4, lr}
	DEBUG_RADIO_PREPARE_M(1);

	event_connection_prepare(ticks_at_expire, remainder, lazy, context);
    f45e:	f7fe ff5b 	bl	e318 <event_connection_prepare>

	DEBUG_RADIO_PREPARE_M(0);
}
    f462:	bd10      	pop	{r4, pc}

0000f464 <event_slave_prepare>:
    f464:	b510      	push	{r4, lr}
    f466:	f7fe ff57 	bl	e318 <event_connection_prepare>
    f46a:	bd10      	pop	{r4, pc}

0000f46c <event_master>:

static void event_master(u32_t ticks_at_expire, u32_t remainder, u16_t lazy,
			 void *context)
{
    f46c:	b5f0      	push	{r4, r5, r6, r7, lr}
    f46e:	001c      	movs	r4, r3
	ARG_UNUSED(remainder);
	ARG_UNUSED(lazy);

	DEBUG_RADIO_START_M(1);

	LL_ASSERT(_radio.role == ROLE_NONE);
    f470:	4b5b      	ldr	r3, [pc, #364]	; (f5e0 <event_master+0x174>)
	DEBUG_RADIO_PREPARE_M(0);
}

static void event_master(u32_t ticks_at_expire, u32_t remainder, u16_t lazy,
			 void *context)
{
    f472:	b087      	sub	sp, #28
	ARG_UNUSED(remainder);
	ARG_UNUSED(lazy);

	DEBUG_RADIO_START_M(1);

	LL_ASSERT(_radio.role == ROLE_NONE);
    f474:	7bd9      	ldrb	r1, [r3, #15]
	DEBUG_RADIO_PREPARE_M(0);
}

static void event_master(u32_t ticks_at_expire, u32_t remainder, u16_t lazy,
			 void *context)
{
    f476:	0005      	movs	r5, r0
	ARG_UNUSED(remainder);
	ARG_UNUSED(lazy);

	DEBUG_RADIO_START_M(1);

	LL_ASSERT(_radio.role == ROLE_NONE);
    f478:	b2c9      	uxtb	r1, r1
    f47a:	2900      	cmp	r1, #0
    f47c:	d008      	beq.n	f490 <event_master+0x24>
    f47e:	4b59      	ldr	r3, [pc, #356]	; (f5e4 <event_master+0x178>)
    f480:	4a59      	ldr	r2, [pc, #356]	; (f5e8 <event_master+0x17c>)
    f482:	9301      	str	r3, [sp, #4]
    f484:	4b59      	ldr	r3, [pc, #356]	; (f5ec <event_master+0x180>)
    f486:	495a      	ldr	r1, [pc, #360]	; (f5f0 <event_master+0x184>)
    f488:	9300      	str	r3, [sp, #0]
    f48a:	485a      	ldr	r0, [pc, #360]	; (f5f4 <event_master+0x188>)
    f48c:	4b5a      	ldr	r3, [pc, #360]	; (f5f8 <event_master+0x18c>)
    f48e:	e00d      	b.n	f4ac <event_master+0x40>

	conn = (struct connection *)context;
	LL_ASSERT(_radio.ticker_id_prepare ==
    f490:	7b1a      	ldrb	r2, [r3, #12]
    f492:	8c20      	ldrh	r0, [r4, #32]
    f494:	b2d2      	uxtb	r2, r2
    f496:	3007      	adds	r0, #7
    f498:	4282      	cmp	r2, r0
    f49a:	d00c      	beq.n	f4b6 <event_master+0x4a>
    f49c:	4b51      	ldr	r3, [pc, #324]	; (f5e4 <event_master+0x178>)
    f49e:	4a52      	ldr	r2, [pc, #328]	; (f5e8 <event_master+0x17c>)
    f4a0:	9301      	str	r3, [sp, #4]
    f4a2:	4b52      	ldr	r3, [pc, #328]	; (f5ec <event_master+0x180>)
    f4a4:	4952      	ldr	r1, [pc, #328]	; (f5f0 <event_master+0x184>)
    f4a6:	9300      	str	r3, [sp, #0]
    f4a8:	4854      	ldr	r0, [pc, #336]	; (f5fc <event_master+0x190>)
    f4aa:	4b53      	ldr	r3, [pc, #332]	; (f5f8 <event_master+0x18c>)
    f4ac:	f7f2 fa68 	bl	1980 <printk>
    f4b0:	b662      	cpsie	i
    f4b2:	2004      	movs	r0, #4
    f4b4:	df02      	svc	2
		  (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle));

	_radio.role = ROLE_MASTER;
    f4b6:	2604      	movs	r6, #4
	_radio.state = STATE_TX;
	_radio.ticker_id_prepare = 0;
	_radio.ticker_id_event =
    f4b8:	b2d2      	uxtb	r2, r2

	conn = (struct connection *)context;
	LL_ASSERT(_radio.ticker_id_prepare ==
		  (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle));

	_radio.role = ROLE_MASTER;
    f4ba:	73de      	strb	r6, [r3, #15]
	_radio.state = STATE_TX;
    f4bc:	2002      	movs	r0, #2
	_radio.ticker_id_prepare = 0;
    f4be:	7319      	strb	r1, [r3, #12]
	_radio.ticker_id_event =
    f4c0:	735a      	strb	r2, [r3, #13]
	    (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
	_radio.ticks_anchor = ticks_at_expire;
	_radio.packet_counter = 0;
    f4c2:	001a      	movs	r2, r3
	conn = (struct connection *)context;
	LL_ASSERT(_radio.ticker_id_prepare ==
		  (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle));

	_radio.role = ROLE_MASTER;
	_radio.state = STATE_TX;
    f4c4:	7418      	strb	r0, [r3, #16]
	_radio.ticker_id_prepare = 0;
	_radio.ticker_id_event =
	    (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
	_radio.ticks_anchor = ticks_at_expire;
	_radio.packet_counter = 0;
    f4c6:	32ff      	adds	r2, #255	; 0xff
	_radio.role = ROLE_MASTER;
	_radio.state = STATE_TX;
	_radio.ticker_id_prepare = 0;
	_radio.ticker_id_event =
	    (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
	_radio.ticks_anchor = ticks_at_expire;
    f4c8:	605d      	str	r5, [r3, #4]
	_radio.packet_counter = 0;
	_radio.crc_expire = 0;

	_radio.conn_curr = conn;
    f4ca:	33fc      	adds	r3, #252	; 0xfc
	_radio.state = STATE_TX;
	_radio.ticker_id_prepare = 0;
	_radio.ticker_id_event =
	    (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
	_radio.ticks_anchor = ticks_at_expire;
	_radio.packet_counter = 0;
    f4cc:	7551      	strb	r1, [r2, #21]
	_radio.crc_expire = 0;
    f4ce:	7591      	strb	r1, [r2, #22]

	_radio.conn_curr = conn;
    f4d0:	615c      	str	r4, [r3, #20]

	conn->latency_event = conn->latency_prepare;
    f4d2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
	conn->latency_prepare = 0;
    f4d4:	8521      	strh	r1, [r4, #40]	; 0x28
	_radio.packet_counter = 0;
	_radio.crc_expire = 0;

	_radio.conn_curr = conn;

	conn->latency_event = conn->latency_prepare;
    f4d6:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn->latency_prepare = 0;

	/* Route the tx packet to respective connections */
	packet_tx_enqueue(2);
    f4d8:	f7fd fcee 	bl	ceb8 <packet_tx_enqueue>

	/* prepare transmit packet */
	prepare_pdu_data_tx(conn, &pdu_data_tx);
    f4dc:	a905      	add	r1, sp, #20
    f4de:	0020      	movs	r0, r4
    f4e0:	f7fd f986 	bl	c7f0 <prepare_pdu_data_tx>

	pdu_data_tx->sn = conn->sn;
    f4e4:	0020      	movs	r0, r4
    f4e6:	2701      	movs	r7, #1
    f4e8:	30c0      	adds	r0, #192	; 0xc0
    f4ea:	7803      	ldrb	r3, [r0, #0]
    f4ec:	9905      	ldr	r1, [sp, #20]
    f4ee:	403b      	ands	r3, r7
    f4f0:	00db      	lsls	r3, r3, #3
    f4f2:	9303      	str	r3, [sp, #12]
    f4f4:	780b      	ldrb	r3, [r1, #0]
    f4f6:	001a      	movs	r2, r3
    f4f8:	2308      	movs	r3, #8
    f4fa:	439a      	bics	r2, r3
    f4fc:	0013      	movs	r3, r2
    f4fe:	9a03      	ldr	r2, [sp, #12]
    f500:	4313      	orrs	r3, r2
    f502:	700b      	strb	r3, [r1, #0]
	pdu_data_tx->nesn = conn->nesn;
    f504:	7803      	ldrb	r3, [r0, #0]

	connection_configure(conn);
    f506:	0020      	movs	r0, r4

	/* prepare transmit packet */
	prepare_pdu_data_tx(conn, &pdu_data_tx);

	pdu_data_tx->sn = conn->sn;
	pdu_data_tx->nesn = conn->nesn;
    f508:	40fb      	lsrs	r3, r7
    f50a:	403b      	ands	r3, r7
    f50c:	009a      	lsls	r2, r3, #2
    f50e:	780b      	ldrb	r3, [r1, #0]
    f510:	43b3      	bics	r3, r6
    f512:	4313      	orrs	r3, r2
    f514:	700b      	strb	r3, [r1, #0]

	connection_configure(conn);
    f516:	f7fe fd1f 	bl	df58 <connection_configure>

	radio_tmr_tifs_set(RADIO_TIFS);
    f51a:	2096      	movs	r0, #150	; 0x96
    f51c:	f7fb fc9e 	bl	ae5c <radio_tmr_tifs_set>

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
	radio_switch_complete_and_rx(conn->phy_rx);
    f520:	0023      	movs	r3, r4
    f522:	0026      	movs	r6, r4
    f524:	3333      	adds	r3, #51	; 0x33
    f526:	7818      	ldrb	r0, [r3, #0]
    f528:	3617      	adds	r6, #23
    f52a:	0680      	lsls	r0, r0, #26
    f52c:	0f40      	lsrs	r0, r0, #29
    f52e:	f7fb fbf1 	bl	ad14 <radio_switch_complete_and_rx>
#else /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */
	radio_switch_complete_and_rx(0);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */

	tx_packet_set(conn, pdu_data_tx);
    f532:	9905      	ldr	r1, [sp, #20]
    f534:	0020      	movs	r0, r4
    f536:	f7fd f9e2 	bl	c8fe <tx_packet_set>

	/* Setup Radio Channel */
	if (conn->data_chan_sel) {
    f53a:	7f22      	ldrb	r2, [r4, #28]
    f53c:	0693      	lsls	r3, r2, #26
#if defined(CONFIG_BLUETOOTH_CONTROLLER_CHAN_SEL_2)
		data_chan_use = chan_sel_2(conn->event_counter - 1,
    f53e:	0e9b      	lsrs	r3, r3, #26
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */

	tx_packet_set(conn, pdu_data_tx);

	/* Setup Radio Channel */
	if (conn->data_chan_sel) {
    f540:	0652      	lsls	r2, r2, #25
    f542:	d507      	bpl.n	f554 <event_master+0xe8>
#if defined(CONFIG_BLUETOOTH_CONTROLLER_CHAN_SEL_2)
		data_chan_use = chan_sel_2(conn->event_counter - 1,
    f544:	8c60      	ldrh	r0, [r4, #34]	; 0x22
    f546:	8be1      	ldrh	r1, [r4, #30]
    f548:	3801      	subs	r0, #1
    f54a:	0032      	movs	r2, r6
    f54c:	b280      	uxth	r0, r0
    f54e:	f7fe fcc1 	bl	ded4 <chan_sel_2>
    f552:	e019      	b.n	f588 <event_master+0x11c>
static u8_t chan_sel_1(u8_t *chan_use, u8_t hop, u16_t latency, u8_t *chan_map,
		       u8_t chan_count)
{
	u8_t chan_next;

	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    f554:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
	} else {
		data_chan_use = chan_sel_1(&conn->data_chan_use,
					   conn->data_chan_hop,
					   conn->latency_event,
					   &conn->data_chan_map[0],
					   conn->data_chan_count);
    f556:	9303      	str	r3, [sp, #12]
static u8_t chan_sel_1(u8_t *chan_use, u8_t hop, u16_t latency, u8_t *chan_map,
		       u8_t chan_count)
{
	u8_t chan_next;

	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    f558:	7fa3      	ldrb	r3, [r4, #30]
    f55a:	3001      	adds	r0, #1
    f55c:	4358      	muls	r0, r3
    f55e:	7fe3      	ldrb	r3, [r4, #31]
    f560:	2125      	movs	r1, #37	; 0x25
    f562:	18c0      	adds	r0, r0, r3
    f564:	f7f0 ff8c 	bl	480 <__aeabi_idivmod>
	*chan_use = chan_next;

	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    f568:	2207      	movs	r2, #7
static u8_t chan_sel_1(u8_t *chan_use, u8_t hop, u16_t latency, u8_t *chan_map,
		       u8_t chan_count)
{
	u8_t chan_next;

	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    f56a:	b2c8      	uxtb	r0, r1
	*chan_use = chan_next;
    f56c:	77e0      	strb	r0, [r4, #31]

	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    f56e:	08c3      	lsrs	r3, r0, #3
    f570:	5cf3      	ldrb	r3, [r6, r3]
    f572:	4011      	ands	r1, r2
    f574:	410b      	asrs	r3, r1
    f576:	423b      	tst	r3, r7
    f578:	d106      	bne.n	f588 <event_master+0x11c>
		u8_t chan_index;

		chan_index = chan_next % chan_count;
    f57a:	9903      	ldr	r1, [sp, #12]
    f57c:	f7f0 fe96 	bl	2ac <__aeabi_uidivmod>
		chan_next = chan_sel_remap(chan_map, chan_index);
    f580:	0030      	movs	r0, r6
	*chan_use = chan_next;

	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
		u8_t chan_index;

		chan_index = chan_next % chan_count;
    f582:	b2c9      	uxtb	r1, r1
		chan_next = chan_sel_remap(chan_map, chan_index);
    f584:	f7fc fde5 	bl	c152 <chan_sel_remap>
					   conn->data_chan_hop,
					   conn->latency_event,
					   &conn->data_chan_map[0],
					   conn->data_chan_count);
	}
	chan_set(data_chan_use);
    f588:	f7fd fe6e 	bl	d268 <chan_set>
	     (conn->supervision_expire <= 6)) ||
	    ((conn->role.master.connect_expire != 0) &&
	     (conn->role.master.connect_expire <= 6)))
#endif
	{
		radio_tmr_start(1, ticks_at_expire +
    f58c:	0029      	movs	r1, r5
    f58e:	4e14      	ldr	r6, [pc, #80]	; (f5e0 <event_master+0x174>)
    f590:	3109      	adds	r1, #9
    f592:	68b2      	ldr	r2, [r6, #8]
    f594:	2001      	movs	r0, #1
    f596:	f7fb fc69 	bl	ae6c <radio_tmr_start>
				TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US),
				_radio.remainder_anchor);
		radio_tmr_end_capture();
    f59a:	f7fb fd2b 	bl	aff4 <radio_tmr_end_capture>

#if (defined(CONFIG_BLUETOOTH_CONTROLLER_XTAL_ADVANCED) && \
     (RADIO_TICKER_PREEMPT_PART_US <= RADIO_TICKER_PREEMPT_PART_MIN_US))
	/* check if preempt to start has changed */
	if (0 !=
	    preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
    f59e:	8c21      	ldrh	r1, [r4, #32]
    f5a0:	002a      	movs	r2, r5
    f5a2:	3107      	adds	r1, #7
    f5a4:	b2c9      	uxtb	r1, r1
    f5a6:	0020      	movs	r0, r4
    f5a8:	f7fe face 	bl	db48 <preempt_calc>
#endif

#if (defined(CONFIG_BLUETOOTH_CONTROLLER_XTAL_ADVANCED) && \
     (RADIO_TICKER_PREEMPT_PART_US <= RADIO_TICKER_PREEMPT_PART_MIN_US))
	/* check if preempt to start has changed */
	if (0 !=
    f5ac:	2800      	cmp	r0, #0
    f5ae:	d004      	beq.n	f5ba <event_master+0x14e>
	    preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
				      conn->handle), ticks_at_expire)) {
		_radio.state = STATE_STOP;
    f5b0:	2304      	movs	r3, #4
    f5b2:	7433      	strb	r3, [r6, #16]
		radio_disable();
    f5b4:	f7fb fb5c 	bl	ac70 <radio_disable>
    f5b8:	e010      	b.n	f5dc <event_master+0x170>
	{
	/* Ticker Job Silence */
#if (RADIO_TICKER_USER_ID_WORKER_PRIO == RADIO_TICKER_USER_ID_JOB_PRIO)
		u32_t ticker_status;

		ticker_status =
    f5ba:	0003      	movs	r3, r0
    f5bc:	4a10      	ldr	r2, [pc, #64]	; (f600 <event_master+0x194>)
    f5be:	0001      	movs	r1, r0
    f5c0:	f7fc fd4a 	bl	c058 <ticker_job_idle_get>
			ticker_job_idle_get(RADIO_TICKER_INSTANCE_ID_RADIO,
					    RADIO_TICKER_USER_ID_WORKER,
					    ticker_job_disable, NULL);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    f5c4:	2302      	movs	r3, #2
    f5c6:	4398      	bics	r0, r3
    f5c8:	d008      	beq.n	f5dc <event_master+0x170>
    f5ca:	4b06      	ldr	r3, [pc, #24]	; (f5e4 <event_master+0x178>)
    f5cc:	4a06      	ldr	r2, [pc, #24]	; (f5e8 <event_master+0x17c>)
    f5ce:	9301      	str	r3, [sp, #4]
    f5d0:	4b06      	ldr	r3, [pc, #24]	; (f5ec <event_master+0x180>)
    f5d2:	4907      	ldr	r1, [pc, #28]	; (f5f0 <event_master+0x184>)
    f5d4:	9300      	str	r3, [sp, #0]
    f5d6:	480b      	ldr	r0, [pc, #44]	; (f604 <event_master+0x198>)
    f5d8:	4b07      	ldr	r3, [pc, #28]	; (f5f8 <event_master+0x18c>)
    f5da:	e767      	b.n	f4ac <event_master+0x40>
			  (ticker_status == TICKER_STATUS_BUSY));
#endif
	}

	DEBUG_RADIO_START_M(0);
}
    f5dc:	b007      	add	sp, #28
    f5de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f5e0:	200015c0 	.word	0x200015c0
    f5e4:	000154c4 	.word	0x000154c4
    f5e8:	00015484 	.word	0x00015484
    f5ec:	000154c9 	.word	0x000154c9
    f5f0:	0001548b 	.word	0x0001548b
    f5f4:	00017011 	.word	0x00017011
    f5f8:	000182c9 	.word	0x000182c9
    f5fc:	000170c9 	.word	0x000170c9
    f600:	0000cbcd 	.word	0x0000cbcd
    f604:	00016da4 	.word	0x00016da4

0000f608 <isr>:

	DEBUG_RADIO_CLOSE(0);
}

static void isr(void)
{
    f608:	b5f0      	push	{r4, r5, r6, r7, lr}
    f60a:	b097      	sub	sp, #92	; 0x5c
	u8_t rssi_ready;

	DEBUG_RADIO_ISR(1);

	/* Read radio status and events */
	trx_done = radio_is_done();
    f60c:	f7fb fb4c 	bl	aca8 <radio_is_done>
    f610:	b2c4      	uxtb	r4, r0
	if (trx_done) {
    f612:	2c00      	cmp	r4, #0
    f614:	d014      	beq.n	f640 <isr+0x38>
		 * and generate the profiling event at the end of the ISR.
		 */
		radio_tmr_sample();
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PROFILE_ISR */

		crc_ok = radio_crc_is_valid();
    f616:	f7fb fb6b 	bl	acf0 <radio_crc_is_valid>
    f61a:	b2c3      	uxtb	r3, r0
    f61c:	9311      	str	r3, [sp, #68]	; 0x44
		devmatch_ok = radio_filter_has_match();
    f61e:	f7fb fbef 	bl	ae00 <radio_filter_has_match>
    f622:	b2c7      	uxtb	r7, r0
		devmatch_id = radio_filter_match_get();
    f624:	f7fb fbf4 	bl	ae10 <radio_filter_match_get>
		irkmatch_ok = radio_ar_has_match();
    f628:	f7fb fde0 	bl	b1ec <radio_ar_has_match>
    f62c:	b2c6      	uxtb	r6, r0
		irkmatch_id = radio_ar_match_get();
    f62e:	f7fb fdc5 	bl	b1bc <radio_ar_match_get>
    f632:	b2c3      	uxtb	r3, r0
    f634:	930e      	str	r3, [sp, #56]	; 0x38
		rssi_ready = radio_rssi_is_ready();
    f636:	f7fb fb9f 	bl	ad78 <radio_rssi_is_ready>
    f63a:	b2c3      	uxtb	r3, r0
    f63c:	930a      	str	r3, [sp, #40]	; 0x28
    f63e:	e005      	b.n	f64c <isr+0x44>
	} else {
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready = 0;
		devmatch_id = irkmatch_id = 0xFF;
    f640:	23ff      	movs	r3, #255	; 0xff
		devmatch_id = radio_filter_match_get();
		irkmatch_ok = radio_ar_has_match();
		irkmatch_id = radio_ar_match_get();
		rssi_ready = radio_rssi_is_ready();
	} else {
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready = 0;
    f642:	0026      	movs	r6, r4
    f644:	0027      	movs	r7, r4
    f646:	940a      	str	r4, [sp, #40]	; 0x28
		devmatch_id = irkmatch_id = 0xFF;
    f648:	930e      	str	r3, [sp, #56]	; 0x38
		devmatch_id = radio_filter_match_get();
		irkmatch_ok = radio_ar_has_match();
		irkmatch_id = radio_ar_match_get();
		rssi_ready = radio_rssi_is_ready();
	} else {
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready = 0;
    f64a:	9411      	str	r4, [sp, #68]	; 0x44
		devmatch_id = irkmatch_id = 0xFF;
	}

	/* Clear radio status and events */
	radio_status_reset();
    f64c:	f7fb fb1a 	bl	ac84 <radio_status_reset>
	radio_tmr_status_reset();
    f650:	f7fb fbf4 	bl	ae3c <radio_tmr_status_reset>
	radio_filter_status_reset();
    f654:	f7fb fbcc 	bl	adf0 <radio_filter_status_reset>
	radio_ar_status_reset();
    f658:	f7fb fdb8 	bl	b1cc <radio_ar_status_reset>
	radio_rssi_status_reset();
    f65c:	f7fb fb86 	bl	ad6c <radio_rssi_status_reset>

	switch (_radio.state) {
    f660:	4da3      	ldr	r5, [pc, #652]	; (f8f0 <isr+0x2e8>)
    f662:	7c2b      	ldrb	r3, [r5, #16]
    f664:	2b05      	cmp	r3, #5
    f666:	d901      	bls.n	f66c <isr+0x64>
    f668:	f001 febe 	bl	113e8 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x13e9>
    f66c:	0018      	movs	r0, r3
    f66e:	f7f0 fd8d 	bl	18c <__gnu_thumb1_case_uhi>
    f672:	0f1e      	.short	0x0f1e
    f674:	000600af 	.word	0x000600af
    f678:	0ca40ca4 	.word	0x0ca40ca4
    f67c:	0ca4      	.short	0x0ca4

static inline void isr_radio_state_tx(void)
{
	u32_t hcto;

	_radio.state = STATE_RX;
    f67e:	2301      	movs	r3, #1
    f680:	742b      	strb	r3, [r5, #16]

	hcto = radio_tmr_end_get() + RADIO_TIFS + 4 + 1; /* 1us, end jitter */
    f682:	f7fb fccd 	bl	b020 <radio_tmr_end_get>
    f686:	0004      	movs	r4, r0

	radio_tmr_tifs_set(RADIO_TIFS);
    f688:	2096      	movs	r0, #150	; 0x96
    f68a:	f7fb fbe7 	bl	ae5c <radio_tmr_tifs_set>

	switch (_radio.role) {
    f68e:	7be8      	ldrb	r0, [r5, #15]
    f690:	3801      	subs	r0, #1
    f692:	2803      	cmp	r0, #3
    f694:	d900      	bls.n	f698 <isr+0x90>
    f696:	e094      	b.n	f7c2 <isr+0x1ba>
    f698:	f7f0 fd6e 	bl	178 <__gnu_thumb1_case_uqi>
    f69c:	4b4b2902 	.word	0x4b4b2902
	case ROLE_ADV:
		radio_switch_complete_and_tx(0, 0);
    f6a0:	2100      	movs	r1, #0
    f6a2:	0008      	movs	r0, r1
    f6a4:	f7fb fb3e 	bl	ad24 <radio_switch_complete_and_tx>
		radio_pkt_rx_set(radio_pkt_scratch_get());
    f6a8:	f7fb fb30 	bl	ad0c <radio_pkt_scratch_get>
    f6ac:	f7fb fabc 	bl	ac28 <radio_pkt_rx_set>

		/* assert if radio packet ptr is not set and radio started rx */
		LL_ASSERT(!radio_is_ready());
    f6b0:	f7fb faf2 	bl	ac98 <radio_is_ready>
    f6b4:	2800      	cmp	r0, #0
    f6b6:	d154      	bne.n	f762 <isr+0x15a>

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
		if (ctrl_rl_enabled()) {
    f6b8:	f003 f98a 	bl	129d0 <ctrl_rl_enabled>
    f6bc:	2800      	cmp	r0, #0
    f6be:	d007      	beq.n	f6d0 <isr+0xc8>
			u8_t count, *irks = ctrl_irks_get(&count);
    f6c0:	ad15      	add	r5, sp, #84	; 0x54
    f6c2:	0028      	movs	r0, r5
    f6c4:	f002 ffb0 	bl	12628 <ctrl_irks_get>
    f6c8:	0001      	movs	r1, r0

			radio_ar_configure(count, irks);
    f6ca:	7828      	ldrb	r0, [r5, #0]
    f6cc:	f7fb fd48 	bl	b160 <radio_ar_configure>
		}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */

		hcto += radio_rx_chain_delay_get(0, 0);
    f6d0:	2100      	movs	r1, #0
    f6d2:	0008      	movs	r0, r1
    f6d4:	f7fb fabe 	bl	ac54 <radio_rx_chain_delay_get>
		hcto += addr_us_get(0);
		hcto -= radio_tx_chain_delay_get(0, 0);
    f6d8:	2100      	movs	r1, #0
			radio_ar_configure(count, irks);
		}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */

		hcto += radio_rx_chain_delay_get(0, 0);
		hcto += addr_us_get(0);
    f6da:	34c3      	adds	r4, #195	; 0xc3
    f6dc:	1824      	adds	r4, r4, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    f6de:	0008      	movs	r0, r1
    f6e0:	f7fb fab4 	bl	ac4c <radio_tx_chain_delay_get>

		radio_tmr_hcto_configure(hcto);
    f6e4:	1a20      	subs	r0, r4, r0
    f6e6:	f7fb fc2b 	bl	af40 <radio_tmr_hcto_configure>
    f6ea:	f001 fc7d 	bl	10fe8 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xfe9>
#endif /* CONFIG_BLUETOOTH_CONTROLLER_SCAN_REQ_RSSI */

		break;

	case ROLE_SCAN:
		radio_switch_complete_and_tx(0, 0);
    f6ee:	2100      	movs	r1, #0
    f6f0:	0008      	movs	r0, r1
    f6f2:	f7fb fb17 	bl	ad24 <radio_switch_complete_and_tx>
		radio_pkt_rx_set(_radio.packet_rx[_radio.packet_rx_last]->
    f6f6:	233e      	movs	r3, #62	; 0x3e
    f6f8:	33ff      	adds	r3, #255	; 0xff
    f6fa:	5ceb      	ldrb	r3, [r5, r3]
    f6fc:	35fc      	adds	r5, #252	; 0xfc
    f6fe:	6bea      	ldr	r2, [r5, #60]	; 0x3c
    f700:	009b      	lsls	r3, r3, #2
    f702:	5898      	ldr	r0, [r3, r2]
    f704:	3008      	adds	r0, #8
    f706:	f7fb fa8f 	bl	ac28 <radio_pkt_rx_set>
				    pdu_data);

		/* assert if radio packet ptr is not set and radio started rx */
		LL_ASSERT(!radio_is_ready());
    f70a:	f7fb fac5 	bl	ac98 <radio_is_ready>
    f70e:	1e05      	subs	r5, r0, #0
    f710:	d127      	bne.n	f762 <isr+0x15a>

		hcto += radio_rx_chain_delay_get(0, 0);
    f712:	0001      	movs	r1, r0
    f714:	f7fb fa9e 	bl	ac54 <radio_rx_chain_delay_get>
		hcto += addr_us_get(0);
    f718:	34c3      	adds	r4, #195	; 0xc3
    f71a:	1824      	adds	r4, r4, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    f71c:	0029      	movs	r1, r5
    f71e:	0028      	movs	r0, r5
    f720:	f7fb fa94 	bl	ac4c <radio_tx_chain_delay_get>

		radio_tmr_hcto_configure(hcto);
    f724:	1a20      	subs	r0, r4, r0
    f726:	f7fb fc0b 	bl	af40 <radio_tmr_hcto_configure>
		radio_rssi_measure();
    f72a:	f7fb fb0b 	bl	ad44 <radio_rssi_measure>
    f72e:	f001 febe 	bl	114ae <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x14af>
		/* fall thru */

	case ROLE_SLAVE:

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
		radio_switch_complete_and_tx(_radio.conn_curr->phy_tx,
    f732:	002e      	movs	r6, r5
    f734:	36fc      	adds	r6, #252	; 0xfc
					     _radio.conn_curr->phy_flags);
    f736:	6973      	ldr	r3, [r6, #20]
    f738:	3332      	adds	r3, #50	; 0x32
    f73a:	7818      	ldrb	r0, [r3, #0]
		/* fall thru */

	case ROLE_SLAVE:

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
		radio_switch_complete_and_tx(_radio.conn_curr->phy_tx,
    f73c:	09c1      	lsrs	r1, r0, #7
    f73e:	0680      	lsls	r0, r0, #26
    f740:	0f40      	lsrs	r0, r0, #29
    f742:	f7fb faef 	bl	ad24 <radio_switch_complete_and_tx>
#else /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */
		radio_switch_complete_and_tx(0, 0);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */

		rx_packet_set(_radio.conn_curr, (struct pdu_data *)_radio.
			      packet_rx[_radio.packet_rx_last]->pdu_data);
    f746:	233e      	movs	r3, #62	; 0x3e
    f748:	33ff      	adds	r3, #255	; 0xff
    f74a:	5ceb      	ldrb	r3, [r5, r3]
					     _radio.conn_curr->phy_flags);
#else /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */
		radio_switch_complete_and_tx(0, 0);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */

		rx_packet_set(_radio.conn_curr, (struct pdu_data *)_radio.
    f74c:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
			      packet_rx[_radio.packet_rx_last]->pdu_data);
    f74e:	009b      	lsls	r3, r3, #2
					     _radio.conn_curr->phy_flags);
#else /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */
		radio_switch_complete_and_tx(0, 0);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */

		rx_packet_set(_radio.conn_curr, (struct pdu_data *)_radio.
    f750:	5899      	ldr	r1, [r3, r2]
    f752:	6970      	ldr	r0, [r6, #20]
    f754:	3108      	adds	r1, #8
    f756:	f7fd f823 	bl	c7a0 <rx_packet_set>
			      packet_rx[_radio.packet_rx_last]->pdu_data);

		/* assert if radio packet ptr is not set and radio started rx */
		LL_ASSERT(!radio_is_ready());
    f75a:	f7fb fa9d 	bl	ac98 <radio_is_ready>
    f75e:	2800      	cmp	r0, #0
    f760:	d006      	beq.n	f770 <isr+0x168>
    f762:	4b64      	ldr	r3, [pc, #400]	; (f8f4 <isr+0x2ec>)
    f764:	9301      	str	r3, [sp, #4]
    f766:	4b64      	ldr	r3, [pc, #400]	; (f8f8 <isr+0x2f0>)
    f768:	9300      	str	r3, [sp, #0]
    f76a:	4b64      	ldr	r3, [pc, #400]	; (f8fc <isr+0x2f4>)
    f76c:	f000 fcce 	bl	1010c <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x10d>

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
		hcto += radio_rx_chain_delay_get(_radio.conn_curr->phy_tx,
						 _radio.conn_curr->phy_flags);
    f770:	6973      	ldr	r3, [r6, #20]
{
	u32_t hcto;

	_radio.state = STATE_RX;

	hcto = radio_tmr_end_get() + RADIO_TIFS + 4 + 1; /* 1us, end jitter */
    f772:	349b      	adds	r4, #155	; 0x9b
		/* assert if radio packet ptr is not set and radio started rx */
		LL_ASSERT(!radio_is_ready());

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
		hcto += radio_rx_chain_delay_get(_radio.conn_curr->phy_tx,
						 _radio.conn_curr->phy_flags);
    f774:	3332      	adds	r3, #50	; 0x32
    f776:	7818      	ldrb	r0, [r3, #0]

		/* assert if radio packet ptr is not set and radio started rx */
		LL_ASSERT(!radio_is_ready());

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
		hcto += radio_rx_chain_delay_get(_radio.conn_curr->phy_tx,
    f778:	09c1      	lsrs	r1, r0, #7
    f77a:	0680      	lsls	r0, r0, #26
    f77c:	0f40      	lsrs	r0, r0, #29
    f77e:	f7fb fa69 	bl	ac54 <radio_rx_chain_delay_get>
						 _radio.conn_curr->phy_flags);
		hcto += addr_us_get(_radio.conn_curr->phy_rx);
    f782:	6973      	ldr	r3, [r6, #20]

		/* assert if radio packet ptr is not set and radio started rx */
		LL_ASSERT(!radio_is_ready());

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
		hcto += radio_rx_chain_delay_get(_radio.conn_curr->phy_tx,
    f784:	1824      	adds	r4, r4, r0
						 _radio.conn_curr->phy_flags);
		hcto += addr_us_get(_radio.conn_curr->phy_rx);
    f786:	001a      	movs	r2, r3
    f788:	3233      	adds	r2, #51	; 0x33
    f78a:	7810      	ldrb	r0, [r2, #0]
	switch (phy) {
	default:
	case BIT(0):
		return 40;
	case BIT(1):
		return 24;
    f78c:	2218      	movs	r2, #24
		LL_ASSERT(!radio_is_ready());

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
		hcto += radio_rx_chain_delay_get(_radio.conn_curr->phy_tx,
						 _radio.conn_curr->phy_flags);
		hcto += addr_us_get(_radio.conn_curr->phy_rx);
    f78e:	0680      	lsls	r0, r0, #26
    f790:	0f40      	lsrs	r0, r0, #29
	packet_rx_allocate(0xFF);
}

static inline u32_t addr_us_get(u8_t phy)
{
	switch (phy) {
    f792:	2802      	cmp	r0, #2
    f794:	d005      	beq.n	f7a2 <isr+0x19a>
    f796:	2804      	cmp	r0, #4
    f798:	d102      	bne.n	f7a0 <isr+0x198>
	case BIT(0):
		return 40;
	case BIT(1):
		return 24;
	case BIT(2):
		return 376;
    f79a:	3261      	adds	r2, #97	; 0x61
    f79c:	32ff      	adds	r2, #255	; 0xff
    f79e:	e000      	b.n	f7a2 <isr+0x19a>
static inline u32_t addr_us_get(u8_t phy)
{
	switch (phy) {
	default:
	case BIT(0):
		return 40;
    f7a0:	2228      	movs	r2, #40	; 0x28
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
		hcto += radio_rx_chain_delay_get(_radio.conn_curr->phy_tx,
						 _radio.conn_curr->phy_flags);
		hcto += addr_us_get(_radio.conn_curr->phy_rx);
		hcto -= radio_tx_chain_delay_get(_radio.conn_curr->phy_rx,
						 _radio.conn_curr->phy_flags);
    f7a2:	3332      	adds	r3, #50	; 0x32
    f7a4:	7819      	ldrb	r1, [r3, #0]
		LL_ASSERT(!radio_is_ready());

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
		hcto += radio_rx_chain_delay_get(_radio.conn_curr->phy_tx,
						 _radio.conn_curr->phy_flags);
		hcto += addr_us_get(_radio.conn_curr->phy_rx);
    f7a6:	1914      	adds	r4, r2, r4
		hcto -= radio_tx_chain_delay_get(_radio.conn_curr->phy_rx,
    f7a8:	09c9      	lsrs	r1, r1, #7
    f7aa:	f7fb fa4f 	bl	ac4c <radio_tx_chain_delay_get>
		hcto += radio_rx_chain_delay_get(0, 0);
		hcto += addr_us_get(0);
		hcto -= radio_tx_chain_delay_get(0, 0);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */

		radio_tmr_hcto_configure(hcto);
    f7ae:	1a20      	subs	r0, r4, r0
    f7b0:	f7fb fbc6 	bl	af40 <radio_tmr_hcto_configure>
		radio_tmr_end_capture();
    f7b4:	f7fb fc1e 	bl	aff4 <radio_tmr_end_capture>
		/* TODO: use timebox for tx enqueue (instead of 1 packet
		 * that is routed, which may not be for the current connection)
		 * try to route as much tx packet in queue into corresponding
		 * connection's tx list.
		 */
		packet_tx_enqueue(1);
    f7b8:	2001      	movs	r0, #1
    f7ba:	f7fd fb7d 	bl	ceb8 <packet_tx_enqueue>
    f7be:	f001 fe76 	bl	114ae <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x14af>

		break;

	case ROLE_NONE:
	default:
		LL_ASSERT(0);
    f7c2:	4b4c      	ldr	r3, [pc, #304]	; (f8f4 <isr+0x2ec>)
    f7c4:	9301      	str	r3, [sp, #4]
    f7c6:	4b4c      	ldr	r3, [pc, #304]	; (f8f8 <isr+0x2f0>)
    f7c8:	9300      	str	r3, [sp, #0]
    f7ca:	4b4c      	ldr	r3, [pc, #304]	; (f8fc <isr+0x2f4>)
    f7cc:	f001 fe11 	bl	113f2 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x13f3>
				      u8_t irkmatch_ok, u8_t irkmatch_id,
				      u8_t rssi_ready)
{
	u32_t err;

	if (!((trx_done) || ((SILENT_CONNECTION) &&
    f7d0:	2c00      	cmp	r4, #0
    f7d2:	d106      	bne.n	f7e2 <isr+0x1da>
			     (_radio.role == ROLE_SLAVE)))) {
		_radio.state = STATE_CLOSE;
    f7d4:	2203      	movs	r2, #3
    f7d6:	4b46      	ldr	r3, [pc, #280]	; (f8f0 <isr+0x2e8>)
    f7d8:	741a      	strb	r2, [r3, #16]
		radio_disable();
    f7da:	f7fb fa49 	bl	ac70 <radio_disable>
    f7de:	f001 fe66 	bl	114ae <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x14af>

		return;
	}

	switch (_radio.role) {
    f7e2:	7be8      	ldrb	r0, [r5, #15]
    f7e4:	3801      	subs	r0, #1
    f7e6:	2803      	cmp	r0, #3
    f7e8:	d901      	bls.n	f7ee <isr+0x1e6>
    f7ea:	f001 fbe0 	bl	10fae <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xfaf>
    f7ee:	f7f0 fccd 	bl	18c <__gnu_thumb1_case_uhi>
    f7f2:	0004      	.short	0x0004
    f7f4:	02a50258 	.word	0x02a50258
    f7f8:	02a5      	.short	0x02a5
	case ROLE_ADV:
		if (crc_ok) {
    f7fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
    f7fc:	2b00      	cmp	r3, #0
    f7fe:	d0e9      	beq.n	f7d4 <isr+0x1cc>
{
	struct pdu_adv *pdu_adv, *_pdu_adv;
	struct radio_pdu_node_rx *radio_pdu_node_rx;
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	/* An IRK match implies address resolution enabled */
	u8_t rl_idx = irkmatch_ok ? ctrl_rl_idx(irkmatch_id) : RL_IDX_NONE;
    f800:	240f      	movs	r4, #15
    f802:	2e00      	cmp	r6, #0
    f804:	d003      	beq.n	f80e <isr+0x206>
    f806:	980e      	ldr	r0, [sp, #56]	; 0x38
    f808:	f002 ff18 	bl	1263c <ctrl_rl_idx>
    f80c:	0004      	movs	r4, r0
#else
	u8_t rl_idx = RL_IDX_NONE;
#endif
	pdu_adv = (struct pdu_adv *)radio_pkt_scratch_get();
    f80e:	f7fb fa7d 	bl	ad0c <radio_pkt_scratch_get>
	_pdu_adv = (struct pdu_adv *)&_radio.advertiser.adv_data.data
		[_radio.advertiser.adv_data.first][0];
    f812:	002b      	movs	r3, r5
    f814:	3375      	adds	r3, #117	; 0x75
    f816:	781b      	ldrb	r3, [r3, #0]
	/* An IRK match implies address resolution enabled */
	u8_t rl_idx = irkmatch_ok ? ctrl_rl_idx(irkmatch_id) : RL_IDX_NONE;
#else
	u8_t rl_idx = RL_IDX_NONE;
#endif
	pdu_adv = (struct pdu_adv *)radio_pkt_scratch_get();
    f818:	0006      	movs	r6, r0
	_pdu_adv = (struct pdu_adv *)&_radio.advertiser.adv_data.data
		[_radio.advertiser.adv_data.first][0];
    f81a:	930a      	str	r3, [sp, #40]	; 0x28

	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
    f81c:	230f      	movs	r3, #15
    f81e:	7800      	ldrb	r0, [r0, #0]
    f820:	4003      	ands	r3, r0
    f822:	2b03      	cmp	r3, #3
    f824:	d11b      	bne.n	f85e <isr+0x256>
    f826:	7873      	ldrb	r3, [r6, #1]
    f828:	2b0c      	cmp	r3, #12
    f82a:	d118      	bne.n	f85e <isr+0x256>

static inline bool isr_adv_sr_check(struct pdu_adv *pdu, u8_t devmatch_ok,
				    u8_t rl_idx)
{
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	return ((((_radio.advertiser.filter_policy & 0x01) == 0) &&
    f82c:	1dab      	adds	r3, r5, #6
    f82e:	7fdb      	ldrb	r3, [r3, #31]
		 ctrl_rl_allowed(pdu->tx_addr,
				 pdu->payload.scan_req.scan_addr)) ||
		(devmatch_ok) || (ctrl_irk_whitelisted(rl_idx))) &&
    f830:	065b      	lsls	r3, r3, #25
    f832:	d504      	bpl.n	f83e <isr+0x236>
				    u8_t rl_idx)
{
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	return ((((_radio.advertiser.filter_policy & 0x01) == 0) &&
		 ctrl_rl_allowed(pdu->tx_addr,
				 pdu->payload.scan_req.scan_addr)) ||
    f834:	2f00      	cmp	r7, #0
    f836:	d001      	beq.n	f83c <isr+0x234>
    f838:	f001 fe2c 	bl	11494 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x1495>
    f83c:	e008      	b.n	f850 <isr+0x248>
static inline bool isr_adv_sr_check(struct pdu_adv *pdu, u8_t devmatch_ok,
				    u8_t rl_idx)
{
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	return ((((_radio.advertiser.filter_policy & 0x01) == 0) &&
		 ctrl_rl_allowed(pdu->tx_addr,
    f83e:	0640      	lsls	r0, r0, #25
				 pdu->payload.scan_req.scan_addr)) ||
    f840:	1cb1      	adds	r1, r6, #2
static inline bool isr_adv_sr_check(struct pdu_adv *pdu, u8_t devmatch_ok,
				    u8_t rl_idx)
{
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	return ((((_radio.advertiser.filter_policy & 0x01) == 0) &&
		 ctrl_rl_allowed(pdu->tx_addr,
    f842:	0fc0      	lsrs	r0, r0, #31
    f844:	f003 f88c 	bl	12960 <ctrl_rl_allowed>

static inline bool isr_adv_sr_check(struct pdu_adv *pdu, u8_t devmatch_ok,
				    u8_t rl_idx)
{
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	return ((((_radio.advertiser.filter_policy & 0x01) == 0) &&
    f848:	2800      	cmp	r0, #0
    f84a:	d0f3      	beq.n	f834 <isr+0x22c>
    f84c:	f001 fe22 	bl	11494 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x1495>
		 ctrl_rl_allowed(pdu->tx_addr,
				 pdu->payload.scan_req.scan_addr)) ||
		(devmatch_ok) || (ctrl_irk_whitelisted(rl_idx))) &&
    f850:	0020      	movs	r0, r4
    f852:	f002 ff39 	bl	126c8 <ctrl_irk_whitelisted>
	pdu_adv = (struct pdu_adv *)radio_pkt_scratch_get();
	_pdu_adv = (struct pdu_adv *)&_radio.advertiser.adv_data.data
		[_radio.advertiser.adv_data.first][0];

	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
	    (pdu_adv->len == sizeof(struct pdu_adv_payload_scan_req)) &&
    f856:	2800      	cmp	r0, #0
    f858:	d001      	beq.n	f85e <isr+0x256>
    f85a:	f001 fe1b 	bl	11494 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x1495>

		radio_pkt_tx_set(&_radio.advertiser.scan_data.
		     data[_radio.advertiser.scan_data.first][0]);

		return 0;
	} else if ((pdu_adv->type == PDU_ADV_TYPE_CONNECT_IND) &&
    f85e:	230f      	movs	r3, #15
    f860:	7830      	ldrb	r0, [r6, #0]
    f862:	4003      	ands	r3, r0
    f864:	2b05      	cmp	r3, #5
    f866:	d1b5      	bne.n	f7d4 <isr+0x1cc>
    f868:	7873      	ldrb	r3, [r6, #1]
    f86a:	2b22      	cmp	r3, #34	; 0x22
    f86c:	d1b2      	bne.n	f7d4 <isr+0x1cc>

static inline bool isr_adv_ci_check(struct pdu_adv *adv, struct pdu_adv *ci,
				    u8_t devmatch_ok, u8_t rl_idx)
{
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	return ((((_radio.advertiser.filter_policy & 0x02) == 0) &&
    f86e:	1dab      	adds	r3, r5, #6
    f870:	7fdb      	ldrb	r3, [r3, #31]
    f872:	099b      	lsrs	r3, r3, #6
		 ctrl_rl_allowed(ci->tx_addr,
				 ci->payload.connect_ind.init_addr)) ||
		(devmatch_ok) || (ctrl_irk_whitelisted(rl_idx))) &&
    f874:	079b      	lsls	r3, r3, #30
    f876:	d502      	bpl.n	f87e <isr+0x276>
				    u8_t devmatch_ok, u8_t rl_idx)
{
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	return ((((_radio.advertiser.filter_policy & 0x02) == 0) &&
		 ctrl_rl_allowed(ci->tx_addr,
				 ci->payload.connect_ind.init_addr)) ||
    f878:	2f00      	cmp	r7, #0
    f87a:	d107      	bne.n	f88c <isr+0x284>
    f87c:	e012      	b.n	f8a4 <isr+0x29c>
static inline bool isr_adv_ci_check(struct pdu_adv *adv, struct pdu_adv *ci,
				    u8_t devmatch_ok, u8_t rl_idx)
{
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	return ((((_radio.advertiser.filter_policy & 0x02) == 0) &&
		 ctrl_rl_allowed(ci->tx_addr,
    f87e:	0640      	lsls	r0, r0, #25
				 ci->payload.connect_ind.init_addr)) ||
    f880:	1cb1      	adds	r1, r6, #2
static inline bool isr_adv_ci_check(struct pdu_adv *adv, struct pdu_adv *ci,
				    u8_t devmatch_ok, u8_t rl_idx)
{
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	return ((((_radio.advertiser.filter_policy & 0x02) == 0) &&
		 ctrl_rl_allowed(ci->tx_addr,
    f882:	0fc0      	lsrs	r0, r0, #31
    f884:	f003 f86c 	bl	12960 <ctrl_rl_allowed>

static inline bool isr_adv_ci_check(struct pdu_adv *adv, struct pdu_adv *ci,
				    u8_t devmatch_ok, u8_t rl_idx)
{
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	return ((((_radio.advertiser.filter_policy & 0x02) == 0) &&
    f888:	2800      	cmp	r0, #0
    f88a:	d0f5      	beq.n	f878 <isr+0x270>
	u8_t rl_idx = irkmatch_ok ? ctrl_rl_idx(irkmatch_id) : RL_IDX_NONE;
#else
	u8_t rl_idx = RL_IDX_NONE;
#endif
	pdu_adv = (struct pdu_adv *)radio_pkt_scratch_get();
	_pdu_adv = (struct pdu_adv *)&_radio.advertiser.adv_data.data
    f88c:	2327      	movs	r3, #39	; 0x27
    f88e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    f890:	4353      	muls	r3, r2
    f892:	3320      	adds	r3, #32
    f894:	18eb      	adds	r3, r5, r3

static inline bool isr_adv_ci_direct_check(struct pdu_adv *adv,
					   struct pdu_adv *ci,
					   u8_t rl_idx)
{
	return ((adv->type != PDU_ADV_TYPE_DIRECT_IND) ||
    f896:	79da      	ldrb	r2, [r3, #7]
	u8_t rl_idx = irkmatch_ok ? ctrl_rl_idx(irkmatch_id) : RL_IDX_NONE;
#else
	u8_t rl_idx = RL_IDX_NONE;
#endif
	pdu_adv = (struct pdu_adv *)radio_pkt_scratch_get();
	_pdu_adv = (struct pdu_adv *)&_radio.advertiser.adv_data.data
    f898:	9311      	str	r3, [sp, #68]	; 0x44

static inline bool isr_adv_ci_direct_check(struct pdu_adv *adv,
					   struct pdu_adv *ci,
					   u8_t rl_idx)
{
	return ((adv->type != PDU_ADV_TYPE_DIRECT_IND) ||
    f89a:	230f      	movs	r3, #15
    f89c:	4013      	ands	r3, r2
    f89e:	2b01      	cmp	r3, #1
    f8a0:	d13b      	bne.n	f91a <isr+0x312>
    f8a2:	e005      	b.n	f8b0 <isr+0x2a8>
{
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	return ((((_radio.advertiser.filter_policy & 0x02) == 0) &&
		 ctrl_rl_allowed(ci->tx_addr,
				 ci->payload.connect_ind.init_addr)) ||
		(devmatch_ok) || (ctrl_irk_whitelisted(rl_idx))) &&
    f8a4:	0020      	movs	r0, r4
    f8a6:	f002 ff0f 	bl	126c8 <ctrl_irk_whitelisted>
    f8aa:	2800      	cmp	r0, #0
    f8ac:	d1ee      	bne.n	f88c <isr+0x284>
    f8ae:	e791      	b.n	f7d4 <isr+0x1cc>
static inline bool isr_adv_ci_direct_check(struct pdu_adv *adv,
					   struct pdu_adv *ci,
					   u8_t rl_idx)
{
	return ((adv->type != PDU_ADV_TYPE_DIRECT_IND) ||
		((adv->tx_addr == ci->rx_addr) &&
    f8b0:	7833      	ldrb	r3, [r6, #0]
    f8b2:	0651      	lsls	r1, r2, #25

static inline bool isr_adv_ci_direct_check(struct pdu_adv *adv,
					   struct pdu_adv *ci,
					   u8_t rl_idx)
{
	return ((adv->type != PDU_ADV_TYPE_DIRECT_IND) ||
    f8b4:	0fc9      	lsrs	r1, r1, #31
    f8b6:	09d8      	lsrs	r0, r3, #7
    f8b8:	4281      	cmp	r1, r0
    f8ba:	d18b      	bne.n	f7d4 <isr+0x1cc>
		((adv->tx_addr == ci->rx_addr) &&
		 (adv->rx_addr == ci->tx_addr) &&
    f8bc:	065b      	lsls	r3, r3, #25
static inline bool isr_adv_ci_direct_check(struct pdu_adv *adv,
					   struct pdu_adv *ci,
					   u8_t rl_idx)
{
	return ((adv->type != PDU_ADV_TYPE_DIRECT_IND) ||
		((adv->tx_addr == ci->rx_addr) &&
    f8be:	09d2      	lsrs	r2, r2, #7
    f8c0:	0fdb      	lsrs	r3, r3, #31
    f8c2:	429a      	cmp	r2, r3
    f8c4:	d186      	bne.n	f7d4 <isr+0x1cc>
		 (adv->rx_addr == ci->tx_addr) &&
		 !memcmp(adv->payload.direct_ind.adv_addr,
    f8c6:	0031      	movs	r1, r6
    f8c8:	9811      	ldr	r0, [sp, #68]	; 0x44
    f8ca:	2206      	movs	r2, #6
    f8cc:	3108      	adds	r1, #8
    f8ce:	3009      	adds	r0, #9
    f8d0:	f7f1 fa1e 	bl	d10 <memcmp>
					   struct pdu_adv *ci,
					   u8_t rl_idx)
{
	return ((adv->type != PDU_ADV_TYPE_DIRECT_IND) ||
		((adv->tx_addr == ci->rx_addr) &&
		 (adv->rx_addr == ci->tx_addr) &&
    f8d4:	2800      	cmp	r0, #0
    f8d6:	d000      	beq.n	f8da <isr+0x2d2>
    f8d8:	e77c      	b.n	f7d4 <isr+0x1cc>

static inline bool isr_adv_tgta_check(struct pdu_adv *adv, struct pdu_adv *ci,
				      u8_t rl_idx)
{
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	if (rl_idx != RL_IDX_NONE) {
    f8da:	2c0f      	cmp	r4, #15
    f8dc:	d010      	beq.n	f900 <isr+0x2f8>
		return rl_idx == _radio.advertiser.rl_idx;
    f8de:	3507      	adds	r5, #7
    f8e0:	7fe8      	ldrb	r0, [r5, #31]
    f8e2:	0700      	lsls	r0, r0, #28
    f8e4:	0f00      	lsrs	r0, r0, #28
    f8e6:	1b00      	subs	r0, r0, r4
    f8e8:	4243      	negs	r3, r0
    f8ea:	4143      	adcs	r3, r0
    f8ec:	b2d8      	uxtb	r0, r3
    f8ee:	e011      	b.n	f914 <isr+0x30c>
    f8f0:	200015c0 	.word	0x200015c0
    f8f4:	000154c4 	.word	0x000154c4
    f8f8:	000154c9 	.word	0x000154c9
    f8fc:	00018518 	.word	0x00018518
	}
#endif
	return !memcmp(adv->payload.direct_ind.tgt_addr,
    f900:	9811      	ldr	r0, [sp, #68]	; 0x44
		       ci->payload.connect_ind.init_addr, BDADDR_SIZE);
    f902:	1cb1      	adds	r1, r6, #2
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	if (rl_idx != RL_IDX_NONE) {
		return rl_idx == _radio.advertiser.rl_idx;
	}
#endif
	return !memcmp(adv->payload.direct_ind.tgt_addr,
    f904:	2206      	movs	r2, #6
    f906:	300f      	adds	r0, #15
    f908:	f7f1 fa02 	bl	d10 <memcmp>
    f90c:	0003      	movs	r3, r0
    f90e:	4258      	negs	r0, r3
    f910:	4158      	adcs	r0, r3
    f912:	b2c0      	uxtb	r0, r0
		radio_pkt_tx_set(&_radio.advertiser.scan_data.
		     data[_radio.advertiser.scan_data.first][0]);

		return 0;
	} else if ((pdu_adv->type == PDU_ADV_TYPE_CONNECT_IND) &&
		   (pdu_adv->len == sizeof(struct pdu_adv_payload_connect_ind)) &&
    f914:	2800      	cmp	r0, #0
    f916:	d100      	bne.n	f91a <isr+0x312>
    f918:	e75c      	b.n	f7d4 <isr+0x1cc>
		   isr_adv_ci_check(_pdu_adv, pdu_adv, devmatch_ok, rl_idx) &&
		   ((_radio.fc_ena == 0) || (_radio.fc_req == _radio.fc_ack)) &&
    f91a:	23bf      	movs	r3, #191	; 0xbf
    f91c:	4ce8      	ldr	r4, [pc, #928]	; (fcc0 <isr+0x6b8>)
    f91e:	005b      	lsls	r3, r3, #1
		     data[_radio.advertiser.scan_data.first][0]);

		return 0;
	} else if ((pdu_adv->type == PDU_ADV_TYPE_CONNECT_IND) &&
		   (pdu_adv->len == sizeof(struct pdu_adv_payload_connect_ind)) &&
		   isr_adv_ci_check(_pdu_adv, pdu_adv, devmatch_ok, rl_idx) &&
    f920:	5ce3      	ldrb	r3, [r4, r3]
    f922:	2b00      	cmp	r3, #0
    f924:	d008      	beq.n	f938 <isr+0x330>
		   ((_radio.fc_ena == 0) || (_radio.fc_req == _radio.fc_ack)) &&
    f926:	23be      	movs	r3, #190	; 0xbe
    f928:	227e      	movs	r2, #126	; 0x7e
    f92a:	005b      	lsls	r3, r3, #1
    f92c:	32ff      	adds	r2, #255	; 0xff
    f92e:	5ce3      	ldrb	r3, [r4, r3]
    f930:	5ca2      	ldrb	r2, [r4, r2]
    f932:	429a      	cmp	r2, r3
    f934:	d000      	beq.n	f938 <isr+0x330>
    f936:	e74d      	b.n	f7d4 <isr+0x1cc>
		   (_radio.advertiser.conn)) {
    f938:	0025      	movs	r5, r4
    f93a:	35c8      	adds	r5, #200	; 0xc8

		return 0;
	} else if ((pdu_adv->type == PDU_ADV_TYPE_CONNECT_IND) &&
		   (pdu_adv->len == sizeof(struct pdu_adv_payload_connect_ind)) &&
		   isr_adv_ci_check(_pdu_adv, pdu_adv, devmatch_ok, rl_idx) &&
		   ((_radio.fc_ena == 0) || (_radio.fc_req == _radio.fc_ack)) &&
    f93c:	682b      	ldr	r3, [r5, #0]
    f93e:	2b00      	cmp	r3, #0
    f940:	d100      	bne.n	f944 <isr+0x33c>
    f942:	e747      	b.n	f7d4 <isr+0x1cc>
		u32_t conn_offset_us;
		u32_t rx_ready_delay;
		u32_t ticker_status;

		if (IS_ENABLED(CONFIG_BLUETOOTH_CONTROLLER_CHAN_SEL_2)) {
			radio_pdu_node_rx = packet_rx_reserve_get(4);
    f944:	2004      	movs	r0, #4
    f946:	f7fc fc35 	bl	c1b4 <packet_rx_reserve_get>
    f94a:	900a      	str	r0, [sp, #40]	; 0x28
		} else {
			radio_pdu_node_rx = packet_rx_reserve_get(3);
		}

		if (radio_pdu_node_rx == 0) {
    f94c:	2800      	cmp	r0, #0
    f94e:	d100      	bne.n	f952 <isr+0x34a>
    f950:	e740      	b.n	f7d4 <isr+0x1cc>
			return 1;
		}

		_radio.state = STATE_STOP;
    f952:	2304      	movs	r3, #4
    f954:	7423      	strb	r3, [r4, #16]
		radio_disable();
    f956:	f7fb f98b 	bl	ac70 <radio_disable>
		/* acquire the slave context from advertiser */
		conn = _radio.advertiser.conn;
		_radio.advertiser.conn = NULL;

		/* Populate the slave context */
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    f95a:	228c      	movs	r2, #140	; 0x8c
		_radio.state = STATE_STOP;
		radio_disable();

		/* acquire the slave context from advertiser */
		conn = _radio.advertiser.conn;
		_radio.advertiser.conn = NULL;
    f95c:	2300      	movs	r3, #0

		_radio.state = STATE_STOP;
		radio_disable();

		/* acquire the slave context from advertiser */
		conn = _radio.advertiser.conn;
    f95e:	682f      	ldr	r7, [r5, #0]
		_radio.advertiser.conn = NULL;

		/* Populate the slave context */
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    f960:	34fc      	adds	r4, #252	; 0xfc
    f962:	68a1      	ldr	r1, [r4, #8]
    f964:	0052      	lsls	r2, r2, #1
    f966:	0038      	movs	r0, r7
		_radio.state = STATE_STOP;
		radio_disable();

		/* acquire the slave context from advertiser */
		conn = _radio.advertiser.conn;
		_radio.advertiser.conn = NULL;
    f968:	602b      	str	r3, [r5, #0]

		/* Populate the slave context */
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    f96a:	f7fa ffcb 	bl	a904 <mem_index_get>
			CONNECTION_T_SIZE);
		memcpy(&conn->crc_init[0],
    f96e:	0031      	movs	r1, r6
		/* acquire the slave context from advertiser */
		conn = _radio.advertiser.conn;
		_radio.advertiser.conn = NULL;

		/* Populate the slave context */
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    f970:	8438      	strh	r0, [r7, #32]
			CONNECTION_T_SIZE);
		memcpy(&conn->crc_init[0],
    f972:	0038      	movs	r0, r7
    f974:	2203      	movs	r2, #3
    f976:	3112      	adds	r1, #18
    f978:	3014      	adds	r0, #20
		       &pdu_adv->payload.connect_ind.lldata.crc_init[0],
		       3);
		memcpy(&conn->access_addr[0],
    f97a:	003d      	movs	r5, r7
		_radio.advertiser.conn = NULL;

		/* Populate the slave context */
		conn->handle = mem_index_get(conn, _radio.conn_pool,
			CONNECTION_T_SIZE);
		memcpy(&conn->crc_init[0],
    f97c:	f7f1 f9dd 	bl	d3a <memcpy>
		       &pdu_adv->payload.connect_ind.lldata.crc_init[0],
		       3);
		memcpy(&conn->access_addr[0],
    f980:	0031      	movs	r1, r6
    f982:	3510      	adds	r5, #16
    f984:	2204      	movs	r2, #4
    f986:	310e      	adds	r1, #14
    f988:	0028      	movs	r0, r5
		       &pdu_adv->payload.connect_ind.lldata.access_addr[0],
		       4);
		memcpy(&conn->data_chan_map[0],
    f98a:	003c      	movs	r4, r7
		conn->handle = mem_index_get(conn, _radio.conn_pool,
			CONNECTION_T_SIZE);
		memcpy(&conn->crc_init[0],
		       &pdu_adv->payload.connect_ind.lldata.crc_init[0],
		       3);
		memcpy(&conn->access_addr[0],
    f98c:	f7f1 f9d5 	bl	d3a <memcpy>
		       &pdu_adv->payload.connect_ind.lldata.access_addr[0],
		       4);
		memcpy(&conn->data_chan_map[0],
    f990:	0031      	movs	r1, r6
    f992:	3417      	adds	r4, #23
    f994:	2205      	movs	r2, #5
    f996:	311e      	adds	r1, #30
    f998:	0020      	movs	r0, r4
    f99a:	f7f1 f9ce 	bl	d3a <memcpy>
		       &pdu_adv->payload.connect_ind.lldata.chan_map[0],
		       sizeof(conn->data_chan_map));
		conn->data_chan_count =
			util_ones_count_get(&conn->data_chan_map[0],
    f99e:	2105      	movs	r1, #5
    f9a0:	0020      	movs	r0, r4
    f9a2:	f7fa fff7 	bl	a994 <util_ones_count_get>
		       &pdu_adv->payload.connect_ind.lldata.access_addr[0],
		       4);
		memcpy(&conn->data_chan_map[0],
		       &pdu_adv->payload.connect_ind.lldata.chan_map[0],
		       sizeof(conn->data_chan_map));
		conn->data_chan_count =
    f9a6:	223f      	movs	r2, #63	; 0x3f
    f9a8:	7f3b      	ldrb	r3, [r7, #28]
    f9aa:	4010      	ands	r0, r2
    f9ac:	4393      	bics	r3, r2
    f9ae:	4318      	orrs	r0, r3
    f9b0:	7738      	strb	r0, [r7, #28]
		conn->conn_interval =
			pdu_adv->payload.connect_ind.lldata.interval;
		conn_interval_us =
			pdu_adv->payload.connect_ind.lldata.interval * 1250;
		conn->latency = pdu_adv->payload.connect_ind.lldata.latency;
		memcpy((void *)&conn->role.slave.force, &conn->access_addr[0],
    f9b2:	0038      	movs	r0, r7
		       &pdu_adv->payload.connect_ind.lldata.chan_map[0],
		       sizeof(conn->data_chan_map));
		conn->data_chan_count =
			util_ones_count_get(&conn->data_chan_map[0],
					    sizeof(conn->data_chan_map));
		conn->data_chan_hop = pdu_adv->payload.connect_ind.lldata.hop;
    f9b4:	1d33      	adds	r3, r6, #4
    f9b6:	7fdb      	ldrb	r3, [r3, #31]
		conn->conn_interval =
			pdu_adv->payload.connect_ind.lldata.interval;
		conn_interval_us =
    f9b8:	4cc2      	ldr	r4, [pc, #776]	; (fcc4 <isr+0x6bc>)
		       &pdu_adv->payload.connect_ind.lldata.chan_map[0],
		       sizeof(conn->data_chan_map));
		conn->data_chan_count =
			util_ones_count_get(&conn->data_chan_map[0],
					    sizeof(conn->data_chan_map));
		conn->data_chan_hop = pdu_adv->payload.connect_ind.lldata.hop;
    f9ba:	06db      	lsls	r3, r3, #27
    f9bc:	0edb      	lsrs	r3, r3, #27
    f9be:	77bb      	strb	r3, [r7, #30]
		conn->conn_interval =
			pdu_adv->payload.connect_ind.lldata.interval;
    f9c0:	7e73      	ldrb	r3, [r6, #25]
    f9c2:	7e32      	ldrb	r2, [r6, #24]
    f9c4:	021b      	lsls	r3, r3, #8
    f9c6:	4313      	orrs	r3, r2
		       sizeof(conn->data_chan_map));
		conn->data_chan_count =
			util_ones_count_get(&conn->data_chan_map[0],
					    sizeof(conn->data_chan_map));
		conn->data_chan_hop = pdu_adv->payload.connect_ind.lldata.hop;
		conn->conn_interval =
    f9c8:	84bb      	strh	r3, [r7, #36]	; 0x24
			pdu_adv->payload.connect_ind.lldata.interval;
		conn_interval_us =
			pdu_adv->payload.connect_ind.lldata.interval * 1250;
    f9ca:	7e73      	ldrb	r3, [r6, #25]
    f9cc:	7e32      	ldrb	r2, [r6, #24]
    f9ce:	021b      	lsls	r3, r3, #8
			util_ones_count_get(&conn->data_chan_map[0],
					    sizeof(conn->data_chan_map));
		conn->data_chan_hop = pdu_adv->payload.connect_ind.lldata.hop;
		conn->conn_interval =
			pdu_adv->payload.connect_ind.lldata.interval;
		conn_interval_us =
    f9d0:	4313      	orrs	r3, r2
    f9d2:	4363      	muls	r3, r4
    f9d4:	930c      	str	r3, [sp, #48]	; 0x30
			pdu_adv->payload.connect_ind.lldata.interval * 1250;
		conn->latency = pdu_adv->payload.connect_ind.lldata.latency;
    f9d6:	7ef3      	ldrb	r3, [r6, #27]
    f9d8:	7eb2      	ldrb	r2, [r6, #26]
    f9da:	021b      	lsls	r3, r3, #8
    f9dc:	4313      	orrs	r3, r2
    f9de:	84fb      	strh	r3, [r7, #38]	; 0x26
		memcpy((void *)&conn->role.slave.force, &conn->access_addr[0],
    f9e0:	2204      	movs	r2, #4
    f9e2:	0029      	movs	r1, r5
    f9e4:	3060      	adds	r0, #96	; 0x60
    f9e6:	f7f1 f9a8 	bl	d3a <memcpy>
		       sizeof(conn->role.slave.force));
		conn->supervision_reload =
			RADIO_CONN_EVENTS((pdu_adv->payload.connect_ind.lldata.timeout
    f9ea:	7f70      	ldrb	r0, [r6, #29]
    f9ec:	7f33      	ldrb	r3, [r6, #28]
    f9ee:	0200      	lsls	r0, r0, #8
		conn_interval_us =
			pdu_adv->payload.connect_ind.lldata.interval * 1250;
		conn->latency = pdu_adv->payload.connect_ind.lldata.latency;
		memcpy((void *)&conn->role.slave.force, &conn->access_addr[0],
		       sizeof(conn->role.slave.force));
		conn->supervision_reload =
    f9f0:	4318      	orrs	r0, r3
    f9f2:	4bb5      	ldr	r3, [pc, #724]	; (fcc8 <isr+0x6c0>)
    f9f4:	990c      	ldr	r1, [sp, #48]	; 0x30
    f9f6:	4358      	muls	r0, r3
    f9f8:	f7f0 fbd2 	bl	1a0 <__aeabi_uidiv>
			RADIO_CONN_EVENTS((pdu_adv->payload.connect_ind.lldata.timeout
					   * 10 * 1000), conn_interval_us);
		conn->procedure_reload = RADIO_CONN_EVENTS((40 * 1000 * 1000),
    f9fc:	990c      	ldr	r1, [sp, #48]	; 0x30
		conn_interval_us =
			pdu_adv->payload.connect_ind.lldata.interval * 1250;
		conn->latency = pdu_adv->payload.connect_ind.lldata.latency;
		memcpy((void *)&conn->role.slave.force, &conn->access_addr[0],
		       sizeof(conn->role.slave.force));
		conn->supervision_reload =
    f9fe:	86b8      	strh	r0, [r7, #52]	; 0x34
			RADIO_CONN_EVENTS((pdu_adv->payload.connect_ind.lldata.timeout
					   * 10 * 1000), conn_interval_us);
		conn->procedure_reload = RADIO_CONN_EVENTS((40 * 1000 * 1000),
    fa00:	48b2      	ldr	r0, [pc, #712]	; (fccc <isr+0x6c4>)
    fa02:	f7f0 fbcd 	bl	1a0 <__aeabi_uidiv>
							   conn_interval_us);

#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_PING)
		/* APTO in no. of connection events */
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    fa06:	990c      	ldr	r1, [sp, #48]	; 0x30
		memcpy((void *)&conn->role.slave.force, &conn->access_addr[0],
		       sizeof(conn->role.slave.force));
		conn->supervision_reload =
			RADIO_CONN_EVENTS((pdu_adv->payload.connect_ind.lldata.timeout
					   * 10 * 1000), conn_interval_us);
		conn->procedure_reload = RADIO_CONN_EVENTS((40 * 1000 * 1000),
    fa08:	8738      	strh	r0, [r7, #56]	; 0x38
							   conn_interval_us);

#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_PING)
		/* APTO in no. of connection events */
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    fa0a:	48b1      	ldr	r0, [pc, #708]	; (fcd0 <isr+0x6c8>)
    fa0c:	f7f0 fbc8 	bl	1a0 <__aeabi_uidiv>
    fa10:	1cbb      	adds	r3, r7, #2
    fa12:	b282      	uxth	r2, r0
    fa14:	87da      	strh	r2, [r3, #62]	; 0x3e
						      conn_interval_us);
		/* Dispatch LE Ping PDU 6 connection events (that peer would
		 * listen to) before 30s timeout
		 * TODO: "peer listens to" is greater than 30s due to latency
		 */
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    fa16:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    fa18:	9412      	str	r4, [sp, #72]	; 0x48
    fa1a:	1d99      	adds	r1, r3, #6
    fa1c:	428a      	cmp	r2, r1
    fa1e:	dd02      	ble.n	fa26 <isr+0x41e>
    fa20:	1ad3      	subs	r3, r2, r3
    fa22:	3b06      	subs	r3, #6
    fa24:	b29a      	uxth	r2, r3
    fa26:	87ba      	strh	r2, [r7, #60]	; 0x3c
				     (conn->apto_reload - (conn->latency + 6)) :
				     conn->apto_reload;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

		/* Prepare the rx packet structure */
		radio_pdu_node_rx->hdr.handle = conn->handle;
    fa28:	8c3b      	ldrh	r3, [r7, #32]
    fa2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    fa2c:	2406      	movs	r4, #6
				     (conn->apto_reload - (conn->latency + 6)) :
				     conn->apto_reload;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

		/* Prepare the rx packet structure */
		radio_pdu_node_rx->hdr.handle = conn->handle;
    fa2e:	80d3      	strh	r3, [r2, #6]

		/* prepare connection complete structure */
		pdu_data = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
		radio_le_conn_cmplt =
			(struct radio_le_conn_cmplt *)&pdu_data->payload;
		radio_le_conn_cmplt->status = 0x00;
    fa30:	2300      	movs	r3, #0
		radio_le_conn_cmplt->role = 0x01;
		radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
		memcpy(&radio_le_conn_cmplt->peer_addr[0],
    fa32:	0010      	movs	r0, r2

		/* prepare connection complete structure */
		pdu_data = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
		radio_le_conn_cmplt =
			(struct radio_le_conn_cmplt *)&pdu_data->payload;
		radio_le_conn_cmplt->status = 0x00;
    fa34:	72d3      	strb	r3, [r2, #11]
		radio_le_conn_cmplt->role = 0x01;
    fa36:	3301      	adds	r3, #1
				     conn->apto_reload;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

		/* Prepare the rx packet structure */
		radio_pdu_node_rx->hdr.handle = conn->handle;
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    fa38:	7114      	strb	r4, [r2, #4]
		/* prepare connection complete structure */
		pdu_data = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
		radio_le_conn_cmplt =
			(struct radio_le_conn_cmplt *)&pdu_data->payload;
		radio_le_conn_cmplt->status = 0x00;
		radio_le_conn_cmplt->role = 0x01;
    fa3a:	7313      	strb	r3, [r2, #12]
		radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    fa3c:	7833      	ldrb	r3, [r6, #0]

		/* prepare connection complete structure */
		pdu_data = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
		radio_le_conn_cmplt =
			(struct radio_le_conn_cmplt *)&pdu_data->payload;
		radio_le_conn_cmplt->status = 0x00;
    fa3e:	0015      	movs	r5, r2
		radio_le_conn_cmplt->role = 0x01;
		radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    fa40:	065b      	lsls	r3, r3, #25
    fa42:	0fdb      	lsrs	r3, r3, #31
    fa44:	7353      	strb	r3, [r2, #13]
		memcpy(&radio_le_conn_cmplt->peer_addr[0],
		       &pdu_adv->payload.connect_ind.init_addr[0],
    fa46:	1cb1      	adds	r1, r6, #2
		radio_le_conn_cmplt =
			(struct radio_le_conn_cmplt *)&pdu_data->payload;
		radio_le_conn_cmplt->status = 0x00;
		radio_le_conn_cmplt->role = 0x01;
		radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
		memcpy(&radio_le_conn_cmplt->peer_addr[0],
    fa48:	0022      	movs	r2, r4
    fa4a:	300e      	adds	r0, #14
    fa4c:	f7f1 f975 	bl	d3a <memcpy>
		       &pdu_adv->payload.connect_ind.init_addr[0],
		       BDADDR_SIZE);
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
		memcpy(&radio_le_conn_cmplt->own_addr[0],
    fa50:	0031      	movs	r1, r6
		radio_le_conn_cmplt->role = 0x01;
		radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
		memcpy(&radio_le_conn_cmplt->peer_addr[0],
		       &pdu_adv->payload.connect_ind.init_addr[0],
		       BDADDR_SIZE);
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
    fa52:	7833      	ldrb	r3, [r6, #0]
		memcpy(&radio_le_conn_cmplt->own_addr[0],
    fa54:	980a      	ldr	r0, [sp, #40]	; 0x28
		radio_le_conn_cmplt->role = 0x01;
		radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
		memcpy(&radio_le_conn_cmplt->peer_addr[0],
		       &pdu_adv->payload.connect_ind.init_addr[0],
		       BDADDR_SIZE);
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
    fa56:	09db      	lsrs	r3, r3, #7
    fa58:	752b      	strb	r3, [r5, #20]
		memcpy(&radio_le_conn_cmplt->own_addr[0],
    fa5a:	3108      	adds	r1, #8
    fa5c:	0022      	movs	r2, r4
    fa5e:	3015      	adds	r0, #21
    fa60:	f7f1 f96b 	bl	d3a <memcpy>
		       &pdu_adv->payload.connect_ind.adv_addr[0], BDADDR_SIZE);
		radio_le_conn_cmplt->peer_irk_index = irkmatch_id;
    fa64:	2238      	movs	r2, #56	; 0x38
    fa66:	466b      	mov	r3, sp
    fa68:	189b      	adds	r3, r3, r2
    fa6a:	781b      	ldrb	r3, [r3, #0]

		/* prepare connection complete structure */
		pdu_data = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
		radio_le_conn_cmplt =
			(struct radio_le_conn_cmplt *)&pdu_data->payload;
		radio_le_conn_cmplt->status = 0x00;
    fa6c:	350b      	adds	r5, #11
		       &pdu_adv->payload.connect_ind.init_addr[0],
		       BDADDR_SIZE);
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
		memcpy(&radio_le_conn_cmplt->own_addr[0],
		       &pdu_adv->payload.connect_ind.adv_addr[0], BDADDR_SIZE);
		radio_le_conn_cmplt->peer_irk_index = irkmatch_id;
    fa6e:	742b      	strb	r3, [r5, #16]
		radio_le_conn_cmplt->interval =
			pdu_adv->payload.connect_ind.lldata.interval;
    fa70:	7e73      	ldrb	r3, [r6, #25]
    fa72:	7e32      	ldrb	r2, [r6, #24]
    fa74:	021b      	lsls	r3, r3, #8
    fa76:	4313      	orrs	r3, r2
		       BDADDR_SIZE);
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
		memcpy(&radio_le_conn_cmplt->own_addr[0],
		       &pdu_adv->payload.connect_ind.adv_addr[0], BDADDR_SIZE);
		radio_le_conn_cmplt->peer_irk_index = irkmatch_id;
		radio_le_conn_cmplt->interval =
    fa78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    fa7a:	7713      	strb	r3, [r2, #28]
    fa7c:	0a1b      	lsrs	r3, r3, #8
    fa7e:	7753      	strb	r3, [r2, #29]
			pdu_adv->payload.connect_ind.lldata.interval;
		radio_le_conn_cmplt->latency =
			pdu_adv->payload.connect_ind.lldata.latency;
    fa80:	7ef3      	ldrb	r3, [r6, #27]
    fa82:	7eb2      	ldrb	r2, [r6, #26]
    fa84:	021b      	lsls	r3, r3, #8
    fa86:	4313      	orrs	r3, r2
		memcpy(&radio_le_conn_cmplt->own_addr[0],
		       &pdu_adv->payload.connect_ind.adv_addr[0], BDADDR_SIZE);
		radio_le_conn_cmplt->peer_irk_index = irkmatch_id;
		radio_le_conn_cmplt->interval =
			pdu_adv->payload.connect_ind.lldata.interval;
		radio_le_conn_cmplt->latency =
    fa88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    fa8a:	7793      	strb	r3, [r2, #30]
    fa8c:	0a1b      	lsrs	r3, r3, #8
    fa8e:	77d3      	strb	r3, [r2, #31]
			pdu_adv->payload.connect_ind.lldata.latency;
		radio_le_conn_cmplt->timeout =
			pdu_adv->payload.connect_ind.lldata.timeout;
    fa90:	7f73      	ldrb	r3, [r6, #29]
    fa92:	7f32      	ldrb	r2, [r6, #28]
    fa94:	021b      	lsls	r3, r3, #8
    fa96:	4313      	orrs	r3, r2
		radio_le_conn_cmplt->peer_irk_index = irkmatch_id;
		radio_le_conn_cmplt->interval =
			pdu_adv->payload.connect_ind.lldata.interval;
		radio_le_conn_cmplt->latency =
			pdu_adv->payload.connect_ind.lldata.latency;
		radio_le_conn_cmplt->timeout =
    fa98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    fa9a:	3220      	adds	r2, #32
    fa9c:	7013      	strb	r3, [r2, #0]
    fa9e:	0a1b      	lsrs	r3, r3, #8
    faa0:	7053      	strb	r3, [r2, #1]
			pdu_adv->payload.connect_ind.lldata.timeout;
		radio_le_conn_cmplt->mca =
			pdu_adv->payload.connect_ind.lldata.sca;
    faa2:	1d33      	adds	r3, r6, #4
    faa4:	7fdb      	ldrb	r3, [r3, #31]
    faa6:	095b      	lsrs	r3, r3, #5
			pdu_adv->payload.connect_ind.lldata.interval;
		radio_le_conn_cmplt->latency =
			pdu_adv->payload.connect_ind.lldata.latency;
		radio_le_conn_cmplt->timeout =
			pdu_adv->payload.connect_ind.lldata.timeout;
		radio_le_conn_cmplt->mca =
    faa8:	75eb      	strb	r3, [r5, #23]
			pdu_adv->payload.connect_ind.lldata.sca;

		/* enqueue connection complete structure into queue */
		rx_fc_lock(conn->handle);
    faaa:	8c38      	ldrh	r0, [r7, #32]
    faac:	f7fc ff9e 	bl	c9ec <rx_fc_lock>
		packet_rx_enqueue();
    fab0:	f7fc ff4e 	bl	c950 <packet_rx_enqueue>
		/* Use Channel Selection Algorithm #2 if peer too supports it */
		if (IS_ENABLED(CONFIG_BLUETOOTH_CONTROLLER_CHAN_SEL_2)) {
			struct radio_le_chan_sel_algo *le_chan_sel_algo;

			/* Generate LE Channel Selection Algorithm event */
			radio_pdu_node_rx = packet_rx_reserve_get(3);
    fab4:	2003      	movs	r0, #3
    fab6:	f7fc fb7d 	bl	c1b4 <packet_rx_reserve_get>
			LL_ASSERT(radio_pdu_node_rx);
    faba:	2800      	cmp	r0, #0
    fabc:	d106      	bne.n	facc <isr+0x4c4>
    fabe:	4b85      	ldr	r3, [pc, #532]	; (fcd4 <isr+0x6cc>)
    fac0:	9301      	str	r3, [sp, #4]
    fac2:	4b85      	ldr	r3, [pc, #532]	; (fcd8 <isr+0x6d0>)
    fac4:	9300      	str	r3, [sp, #0]
    fac6:	4b85      	ldr	r3, [pc, #532]	; (fcdc <isr+0x6d4>)
    fac8:	f001 fc0e 	bl	112e8 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x12e9>

			radio_pdu_node_rx->hdr.handle = conn->handle;
    facc:	8c3b      	ldrh	r3, [r7, #32]
    face:	80c3      	strh	r3, [r0, #6]
			radio_pdu_node_rx->hdr.type =
    fad0:	230b      	movs	r3, #11
    fad2:	7103      	strb	r3, [r0, #4]
			pdu_data = (struct pdu_data *)
				radio_pdu_node_rx->pdu_data;
			le_chan_sel_algo = (struct radio_le_chan_sel_algo *)
				&pdu_data->payload;

			if (pdu_adv->chan_sel) {
    fad4:	7832      	ldrb	r2, [r6, #0]
    fad6:	3315      	adds	r3, #21
    fad8:	4013      	ands	r3, r2
    fada:	d00e      	beq.n	fafa <isr+0x4f2>
				u16_t aa_ls =
    fadc:	7c7b      	ldrb	r3, [r7, #17]
    fade:	7c3a      	ldrb	r2, [r7, #16]
    fae0:	021b      	lsls	r3, r3, #8
    fae2:	431a      	orrs	r2, r3
					((u16_t)conn->access_addr[1] << 8) |
					conn->access_addr[0];
				u16_t aa_ms =
    fae4:	7cfb      	ldrb	r3, [r7, #19]
    fae6:	7cb9      	ldrb	r1, [r7, #18]
    fae8:	021b      	lsls	r3, r3, #8
    faea:	430b      	orrs	r3, r1
					((u16_t)conn->access_addr[3] << 8) |
					 conn->access_addr[2];

				conn->data_chan_sel = 1;
    faec:	2440      	movs	r4, #64	; 0x40
				conn->data_chan_id = aa_ms ^ aa_ls;
    faee:	4053      	eors	r3, r2
    faf0:	83fb      	strh	r3, [r7, #30]

				le_chan_sel_algo->chan_sel_algo = 0x01;
    faf2:	2301      	movs	r3, #1
					conn->access_addr[0];
				u16_t aa_ms =
					((u16_t)conn->access_addr[3] << 8) |
					 conn->access_addr[2];

				conn->data_chan_sel = 1;
    faf4:	7f39      	ldrb	r1, [r7, #28]
    faf6:	4321      	orrs	r1, r4
    faf8:	7739      	strb	r1, [r7, #28]
				conn->data_chan_id = aa_ms ^ aa_ls;

				le_chan_sel_algo->chan_sel_algo = 0x01;
			} else {
				le_chan_sel_algo->chan_sel_algo = 0x00;
    fafa:	72c3      	strb	r3, [r0, #11]
			}

			packet_rx_enqueue();
    fafc:	f7fc ff28 	bl	c950 <packet_rx_enqueue>
		}

		/* calculate the window widening */
		conn->role.slave.sca = pdu_adv->payload.connect_ind.lldata.sca;
    fb00:	0039      	movs	r1, r7
    fb02:	240e      	movs	r4, #14
    fb04:	1d33      	adds	r3, r6, #4
    fb06:	7fdb      	ldrb	r3, [r3, #31]
    fb08:	3144      	adds	r1, #68	; 0x44
    fb0a:	780a      	ldrb	r2, [r1, #0]
    fb0c:	095b      	lsrs	r3, r3, #5
    fb0e:	0058      	lsls	r0, r3, #1
		conn->role.slave.window_widening_periodic_us =
			(((gc_lookup_ppm[_radio.sca] +
    fb10:	4d6b      	ldr	r5, [pc, #428]	; (fcc0 <isr+0x6b8>)

			packet_rx_enqueue();
		}

		/* calculate the window widening */
		conn->role.slave.sca = pdu_adv->payload.connect_ind.lldata.sca;
    fb12:	43a2      	bics	r2, r4
    fb14:	4302      	orrs	r2, r0
    fb16:	700a      	strb	r2, [r1, #0]
		conn->role.slave.window_widening_periodic_us =
			(((gc_lookup_ppm[_radio.sca] +
    fb18:	002a      	movs	r2, r5
    fb1a:	32ff      	adds	r2, #255	; 0xff
    fb1c:	7f52      	ldrb	r2, [r2, #29]
    fb1e:	4970      	ldr	r1, [pc, #448]	; (fce0 <isr+0x6d8>)
    fb20:	0052      	lsls	r2, r2, #1
			   gc_lookup_ppm[conn->role.slave.sca]) *
    fb22:	005b      	lsls	r3, r3, #1
			packet_rx_enqueue();
		}

		/* calculate the window widening */
		conn->role.slave.sca = pdu_adv->payload.connect_ind.lldata.sca;
		conn->role.slave.window_widening_periodic_us =
    fb24:	5a50      	ldrh	r0, [r2, r1]
    fb26:	5a5b      	ldrh	r3, [r3, r1]
    fb28:	496e      	ldr	r1, [pc, #440]	; (fce4 <isr+0x6dc>)
    fb2a:	18c0      	adds	r0, r0, r3
    fb2c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
			  conn_interval_us) + (1000000 - 1)) / 1000000;
		conn->role.slave.window_widening_max_us =
			(conn_interval_us >> 1) - RADIO_TIFS;
		conn->role.slave.window_size_event_us =
			pdu_adv->payload.connect_ind.lldata.win_size * 1250;
		conn->role.slave.window_size_prepare_us = 0;
    fb2e:	2400      	movs	r4, #0
			packet_rx_enqueue();
		}

		/* calculate the window widening */
		conn->role.slave.sca = pdu_adv->payload.connect_ind.lldata.sca;
		conn->role.slave.window_widening_periodic_us =
    fb30:	4358      	muls	r0, r3
    fb32:	4b6d      	ldr	r3, [pc, #436]	; (fce8 <isr+0x6e0>)
    fb34:	18c0      	adds	r0, r0, r3
    fb36:	f7f0 fb33 	bl	1a0 <__aeabi_uidiv>
			(((gc_lookup_ppm[_radio.sca] +
			   gc_lookup_ppm[conn->role.slave.sca]) *
			  conn_interval_us) + (1000000 - 1)) / 1000000;
		conn->role.slave.window_widening_max_us =
    fb3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
			packet_rx_enqueue();
		}

		/* calculate the window widening */
		conn->role.slave.sca = pdu_adv->payload.connect_ind.lldata.sca;
		conn->role.slave.window_widening_periodic_us =
    fb3c:	64b8      	str	r0, [r7, #72]	; 0x48
			(((gc_lookup_ppm[_radio.sca] +
			   gc_lookup_ppm[conn->role.slave.sca]) *
			  conn_interval_us) + (1000000 - 1)) / 1000000;
		conn->role.slave.window_widening_max_us =
    fb3e:	085b      	lsrs	r3, r3, #1
    fb40:	3b96      	subs	r3, #150	; 0x96
    fb42:	64fb      	str	r3, [r7, #76]	; 0x4c
			(conn_interval_us >> 1) - RADIO_TIFS;
		conn->role.slave.window_size_event_us =
    fb44:	7d73      	ldrb	r3, [r6, #21]
    fb46:	9a12      	ldr	r2, [sp, #72]	; 0x48
			pdu_adv->payload.connect_ind.lldata.win_size * 1250;
		conn->role.slave.window_size_prepare_us = 0;
    fb48:	65bc      	str	r4, [r7, #88]	; 0x58
			(((gc_lookup_ppm[_radio.sca] +
			   gc_lookup_ppm[conn->role.slave.sca]) *
			  conn_interval_us) + (1000000 - 1)) / 1000000;
		conn->role.slave.window_widening_max_us =
			(conn_interval_us >> 1) - RADIO_TIFS;
		conn->role.slave.window_size_event_us =
    fb4a:	4353      	muls	r3, r2
			pdu_adv->payload.connect_ind.lldata.win_size * 1250;
		conn->role.slave.window_size_prepare_us = 0;

		rx_ready_delay = radio_rx_ready_delay_get(0);
    fb4c:	0020      	movs	r0, r4
			(((gc_lookup_ppm[_radio.sca] +
			   gc_lookup_ppm[conn->role.slave.sca]) *
			  conn_interval_us) + (1000000 - 1)) / 1000000;
		conn->role.slave.window_widening_max_us =
			(conn_interval_us >> 1) - RADIO_TIFS;
		conn->role.slave.window_size_event_us =
    fb4e:	65fb      	str	r3, [r7, #92]	; 0x5c
			pdu_adv->payload.connect_ind.lldata.win_size * 1250;
		conn->role.slave.window_size_prepare_us = 0;

		rx_ready_delay = radio_rx_ready_delay_get(0);
    fb50:	f7fb f87e 	bl	ac50 <radio_rx_ready_delay_get>

		/* calculate slave slot */
		conn->hdr.ticks_slot =
    fb54:	4a65      	ldr	r2, [pc, #404]	; (fcec <isr+0x6e4>)
			(conn_interval_us >> 1) - RADIO_TIFS;
		conn->role.slave.window_size_event_us =
			pdu_adv->payload.connect_ind.lldata.win_size * 1250;
		conn->role.slave.window_size_prepare_us = 0;

		rx_ready_delay = radio_rx_ready_delay_get(0);
    fb56:	900e      	str	r0, [sp, #56]	; 0x38

		/* calculate slave slot */
		conn->hdr.ticks_slot =
    fb58:	2300      	movs	r3, #0
    fb5a:	1880      	adds	r0, r0, r2
    fb5c:	0021      	movs	r1, r4
    fb5e:	4a64      	ldr	r2, [pc, #400]	; (fcf0 <isr+0x6e8>)
    fb60:	f7f0 fcb4 	bl	4cc <__aeabi_lmul>
    fb64:	4a63      	ldr	r2, [pc, #396]	; (fcf4 <isr+0x6ec>)
    fb66:	2307      	movs	r3, #7
    fb68:	f7f0 fc90 	bl	48c <__aeabi_uldivmod>
			TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
					   rx_ready_delay + 328 + RADIO_TIFS +
					   328);
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    fb6c:	23c0      	movs	r3, #192	; 0xc0
    fb6e:	005b      	lsls	r3, r3, #1
    fb70:	58ea      	ldr	r2, [r5, r3]
		conn->role.slave.window_size_prepare_us = 0;

		rx_ready_delay = radio_rx_ready_delay_get(0);

		/* calculate slave slot */
		conn->hdr.ticks_slot =
    fb72:	0200      	lsls	r0, r0, #8
			TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
					   rx_ready_delay + 328 + RADIO_TIFS +
					   328);
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
		conn->hdr.ticks_xtal_to_start =
    fb74:	3b5a      	subs	r3, #90	; 0x5a
		conn->role.slave.window_size_prepare_us = 0;

		rx_ready_delay = radio_rx_ready_delay_get(0);

		/* calculate slave slot */
		conn->hdr.ticks_slot =
    fb76:	0a00      	lsrs	r0, r0, #8
			TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
					   rx_ready_delay + 328 + RADIO_TIFS +
					   328);
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
		conn->hdr.ticks_xtal_to_start =
    fb78:	3bff      	subs	r3, #255	; 0xff
		conn->role.slave.window_size_prepare_us = 0;

		rx_ready_delay = radio_rx_ready_delay_get(0);

		/* calculate slave slot */
		conn->hdr.ticks_slot =
    fb7a:	60f8      	str	r0, [r7, #12]
			TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
					   rx_ready_delay + 328 + RADIO_TIFS +
					   328);
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    fb7c:	607a      	str	r2, [r7, #4]
		conn->hdr.ticks_xtal_to_start =
    fb7e:	603b      	str	r3, [r7, #0]
			TICKER_US_TO_TICKS(RADIO_TICKER_XTAL_OFFSET_US);
		conn->hdr.ticks_preempt_to_start =
    fb80:	60bc      	str	r4, [r7, #8]
			TICKER_US_TO_TICKS(RADIO_TICKER_PREEMPT_PART_MIN_US);
		ticks_slot_offset =
    fb82:	920a      	str	r2, [sp, #40]	; 0x28
    fb84:	429a      	cmp	r2, r3
    fb86:	d200      	bcs.n	fb8a <isr+0x582>
    fb88:	930a      	str	r3, [sp, #40]	; 0x28
			(conn->hdr.ticks_active_to_start <
			 conn->hdr.ticks_xtal_to_start) ?
			conn->hdr.ticks_xtal_to_start :
			conn->hdr.ticks_active_to_start;
		conn_interval_us -=
    fb8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    fb8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
    fb8e:	2500      	movs	r5, #0
    fb90:	1a9b      	subs	r3, r3, r2
    fb92:	930c      	str	r3, [sp, #48]	; 0x30
			conn->role.slave.window_widening_periodic_us;

		conn_offset_us = radio_tmr_end_get();
    fb94:	f7fb fa44 	bl	b020 <radio_tmr_end_get>
    fb98:	9013      	str	r0, [sp, #76]	; 0x4c
		conn_offset_us +=
			((u64_t)pdu_adv->payload.connect_ind.lldata.win_offset +
    fb9a:	7df3      	ldrb	r3, [r6, #23]
    fb9c:	7db2      	ldrb	r2, [r6, #22]
    fb9e:	021b      	lsls	r3, r3, #8
    fba0:	4313      	orrs	r3, r2
    fba2:	001c      	movs	r4, r3
    fba4:	9b12      	ldr	r3, [sp, #72]	; 0x48
			 1) * 1250;
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
    fba6:	0029      	movs	r1, r5
    fba8:	3401      	adds	r4, #1
    fbaa:	0028      	movs	r0, r5
    fbac:	435c      	muls	r4, r3
    fbae:	f7fb f84d 	bl	ac4c <radio_tx_chain_delay_get>
    fbb2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    fbb4:	3c20      	subs	r4, #32
    fbb6:	191c      	adds	r4, r3, r4
		conn_offset_us -= rx_ready_delay;
		conn_offset_us -= RADIO_TICKER_JITTER_US << 1;
    fbb8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    fbba:	1a20      	subs	r0, r4, r0
    fbbc:	1ac3      	subs	r3, r0, r3
    fbbe:	930e      	str	r3, [sp, #56]	; 0x38

		/* Stop Advertiser */
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    fbc0:	4b4d      	ldr	r3, [pc, #308]	; (fcf8 <isr+0x6f0>)
    fbc2:	2205      	movs	r2, #5
    fbc4:	9300      	str	r3, [sp, #0]
    fbc6:	0029      	movs	r1, r5
    fbc8:	4b4c      	ldr	r3, [pc, #304]	; (fcfc <isr+0x6f4>)
    fbca:	0028      	movs	r0, r5
    fbcc:	f7fc f9e4 	bl	bf98 <ticker_stop>
					    RADIO_TICKER_USER_ID_WORKER,
					    RADIO_TICKER_ID_ADV,
					    ticker_stop_adv_assert,
					    (void *)__LINE__);
		ticker_stop_adv_assert(ticker_status, (void *)__LINE__);
    fbd0:	494b      	ldr	r1, [pc, #300]	; (fd00 <isr+0x6f8>)
    fbd2:	f7fc ff45 	bl	ca60 <ticker_stop_adv_assert>

		/* Stop Direct Adv Stopper */
		if (_pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    fbd6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    fbd8:	79da      	ldrb	r2, [r3, #7]
    fbda:	230f      	movs	r3, #15
    fbdc:	4013      	ands	r3, r2
    fbde:	2b01      	cmp	r3, #1
    fbe0:	d106      	bne.n	fbf0 <isr+0x5e8>
			/* Advertiser stop can expire while here in this ISR.
			 * Deferred attempt to stop can fail as it would have
			 * expired, hence ignore failure.
			 */
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    fbe2:	9500      	str	r5, [sp, #0]
    fbe4:	002b      	movs	r3, r5
    fbe6:	2203      	movs	r2, #3
    fbe8:	0029      	movs	r1, r5
    fbea:	0028      	movs	r0, r5
    fbec:	f7fc f9d4 	bl	bf98 <ticker_stop>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
		     RADIO_TICKER_USER_ID_WORKER,
		     RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle,
		     (_radio.ticks_anchor - ticks_slot_offset),
		     TICKER_US_TO_TICKS(conn_offset_us),
		     TICKER_US_TO_TICKS(conn_interval_us),
    fbf0:	2400      	movs	r4, #0
    fbf2:	980c      	ldr	r0, [sp, #48]	; 0x30
    fbf4:	4a3e      	ldr	r2, [pc, #248]	; (fcf0 <isr+0x6e8>)
    fbf6:	2300      	movs	r3, #0
    fbf8:	0021      	movs	r1, r4
    fbfa:	f7f0 fc67 	bl	4cc <__aeabi_lmul>
    fbfe:	4a3d      	ldr	r2, [pc, #244]	; (fcf4 <isr+0x6ec>)
    fc00:	2307      	movs	r3, #7
    fc02:	900c      	str	r0, [sp, #48]	; 0x30
    fc04:	910d      	str	r1, [sp, #52]	; 0x34
    fc06:	f7f0 fc41 	bl	48c <__aeabi_uldivmod>

		/* Start Slave */
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
		     RADIO_TICKER_USER_ID_WORKER,
		     RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle,
		     (_radio.ticks_anchor - ticks_slot_offset),
    fc0a:	4b2d      	ldr	r3, [pc, #180]	; (fcc0 <isr+0x6b8>)
				    RADIO_TICKER_USER_ID_WORKER,
				    RADIO_TICKER_ID_ADV_STOP, NULL, NULL);
		}

		/* Start Slave */
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    fc0c:	8c3e      	ldrh	r6, [r7, #32]
    fc0e:	685d      	ldr	r5, [r3, #4]
    fc10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    fc12:	9706      	str	r7, [sp, #24]
    fc14:	1aed      	subs	r5, r5, r3
    fc16:	4b3b      	ldr	r3, [pc, #236]	; (fd04 <isr+0x6fc>)
    fc18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    fc1a:	9308      	str	r3, [sp, #32]
    fc1c:	4b3a      	ldr	r3, [pc, #232]	; (fd08 <isr+0x700>)
    fc1e:	0021      	movs	r1, r4
    fc20:	9307      	str	r3, [sp, #28]
    fc22:	4b3a      	ldr	r3, [pc, #232]	; (fd0c <isr+0x704>)
    fc24:	3607      	adds	r6, #7
    fc26:	9305      	str	r3, [sp, #20]
    fc28:	68fb      	ldr	r3, [r7, #12]
    fc2a:	0207      	lsls	r7, r0, #8
    fc2c:	189b      	adds	r3, r3, r2
    fc2e:	b29b      	uxth	r3, r3
    fc30:	0a3f      	lsrs	r7, r7, #8
    fc32:	9304      	str	r3, [sp, #16]
    fc34:	4a2f      	ldr	r2, [pc, #188]	; (fcf4 <isr+0x6ec>)
    fc36:	2307      	movs	r3, #7
    fc38:	0038      	movs	r0, r7
    fc3a:	9403      	str	r4, [sp, #12]
    fc3c:	f7f0 fc46 	bl	4cc <__aeabi_lmul>
    fc40:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    fc42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    fc44:	1a12      	subs	r2, r2, r0
    fc46:	418b      	sbcs	r3, r1
    fc48:	0010      	movs	r0, r2
    fc4a:	22fa      	movs	r2, #250	; 0xfa
    fc4c:	0019      	movs	r1, r3
    fc4e:	0092      	lsls	r2, r2, #2
    fc50:	2300      	movs	r3, #0
    fc52:	f7f0 fc1b 	bl	48c <__aeabi_uldivmod>
    fc56:	4a26      	ldr	r2, [pc, #152]	; (fcf0 <isr+0x6e8>)
    fc58:	9002      	str	r0, [sp, #8]
    fc5a:	2300      	movs	r3, #0
    fc5c:	980e      	ldr	r0, [sp, #56]	; 0x38
    fc5e:	0021      	movs	r1, r4
    fc60:	9701      	str	r7, [sp, #4]
    fc62:	f7f0 fc33 	bl	4cc <__aeabi_lmul>
    fc66:	4a23      	ldr	r2, [pc, #140]	; (fcf4 <isr+0x6ec>)
    fc68:	2307      	movs	r3, #7
    fc6a:	f7f0 fc0f 	bl	48c <__aeabi_uldivmod>
    fc6e:	0200      	lsls	r0, r0, #8
    fc70:	0a00      	lsrs	r0, r0, #8
    fc72:	b2f6      	uxtb	r6, r6
    fc74:	9000      	str	r0, [sp, #0]
    fc76:	002b      	movs	r3, r5
    fc78:	0032      	movs	r2, r6
    fc7a:	0021      	movs	r1, r4
    fc7c:	0020      	movs	r0, r4
    fc7e:	f7fc f8f3 	bl	be68 <ticker_start>
		     TICKER_US_TO_TICKS(conn_interval_us),
		     TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
		     (ticks_slot_offset + conn->hdr.ticks_slot),
		     event_slave_prepare, conn, ticker_success_assert,
		     (void *)__LINE__);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    fc82:	2302      	movs	r3, #2
    fc84:	4398      	bics	r0, r3
    fc86:	42a0      	cmp	r0, r4
    fc88:	d101      	bne.n	fc8e <isr+0x686>
    fc8a:	f001 fc10 	bl	114ae <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x14af>
    fc8e:	4b11      	ldr	r3, [pc, #68]	; (fcd4 <isr+0x6cc>)
    fc90:	4a1f      	ldr	r2, [pc, #124]	; (fd10 <isr+0x708>)
    fc92:	9301      	str	r3, [sp, #4]
    fc94:	4b10      	ldr	r3, [pc, #64]	; (fcd8 <isr+0x6d0>)
    fc96:	491f      	ldr	r1, [pc, #124]	; (fd14 <isr+0x70c>)
    fc98:	9300      	str	r3, [sp, #0]
    fc9a:	481f      	ldr	r0, [pc, #124]	; (fd18 <isr+0x710>)
    fc9c:	4b0f      	ldr	r3, [pc, #60]	; (fcdc <isr+0x6d4>)
    fc9e:	f001 fbab 	bl	113f8 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x13f9>
			radio_disable();
		}
		break;

	case ROLE_SCAN:
		if ((crc_ok) &&
    fca2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    fca4:	2b00      	cmp	r3, #0
    fca6:	d139      	bne.n	fd1c <isr+0x714>
			err = isr_rx_scan(irkmatch_id, rssi_ready);
		} else {
			err = 1;
		}
		if (err) {
			_radio.state = STATE_CLOSE;
    fca8:	2303      	movs	r3, #3
    fcaa:	742b      	strb	r3, [r5, #16]
			radio_disable();
    fcac:	f7fa ffe0 	bl	ac70 <radio_disable>
			/* switch scanner state to idle */
			_radio.scanner.state = 0;
    fcb0:	2202      	movs	r2, #2
    fcb2:	35dc      	adds	r5, #220	; 0xdc
    fcb4:	782b      	ldrb	r3, [r5, #0]
    fcb6:	4393      	bics	r3, r2
    fcb8:	702b      	strb	r3, [r5, #0]
    fcba:	f001 fbf8 	bl	114ae <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x14af>
    fcbe:	46c0      	nop			; (mov r8, r8)
    fcc0:	200015c0 	.word	0x200015c0
    fcc4:	000004e2 	.word	0x000004e2
    fcc8:	00002710 	.word	0x00002710
    fccc:	02625a00 	.word	0x02625a00
    fcd0:	01c9c380 	.word	0x01c9c380
    fcd4:	000154c4 	.word	0x000154c4
    fcd8:	000154c9 	.word	0x000154c9
    fcdc:	00018538 	.word	0x00018538
    fce0:	00018172 	.word	0x00018172
    fce4:	000f4240 	.word	0x000f4240
    fce8:	000f423f 	.word	0x000f423f
    fcec:	00000452 	.word	0x00000452
    fcf0:	3b9aca00 	.word	0x3b9aca00
    fcf4:	1afd498d 	.word	0x1afd498d
    fcf8:	000003e6 	.word	0x000003e6
    fcfc:	0000ca61 	.word	0x0000ca61
    fd00:	000003e7 	.word	0x000003e7
    fd04:	000003fe 	.word	0x000003fe
    fd08:	0000ca25 	.word	0x0000ca25
    fd0c:	0000f465 	.word	0x0000f465
    fd10:	00015484 	.word	0x00015484
    fd14:	0001548b 	.word	0x0001548b
    fd18:	00016da4 	.word	0x00016da4
		}
		break;

	case ROLE_SCAN:
		if ((crc_ok) &&
		    (((_radio.scanner.filter_policy & 0x01) == 0) ||
    fd1c:	002b      	movs	r3, r5
    fd1e:	33dd      	adds	r3, #221	; 0xdd
    fd20:	781b      	ldrb	r3, [r3, #0]
			radio_disable();
		}
		break;

	case ROLE_SCAN:
		if ((crc_ok) &&
    fd22:	06db      	lsls	r3, r3, #27
    fd24:	d501      	bpl.n	fd2a <isr+0x722>
		    (((_radio.scanner.filter_policy & 0x01) == 0) ||
		     (devmatch_ok) || (irkmatch_ok))) {
    fd26:	433e      	orrs	r6, r7
    fd28:	d0be      	beq.n	fca8 <isr+0x6a0>
			err = isr_rx_scan(irkmatch_id, rssi_ready);
    fd2a:	990a      	ldr	r1, [sp, #40]	; 0x28
    fd2c:	980e      	ldr	r0, [sp, #56]	; 0x38
    fd2e:	f7fd fbc5 	bl	d4bc <isr_rx_scan>
		} else {
			err = 1;
		}
		if (err) {
    fd32:	2800      	cmp	r0, #0
    fd34:	d101      	bne.n	fd3a <isr+0x732>
    fd36:	f001 fbba 	bl	114ae <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x14af>
    fd3a:	e7b5      	b.n	fca8 <isr+0x6a0>
#else /* !CONFIG_BLUETOOTH_CONTROLLER_CONN_RSSI */
	ARG_UNUSED(rssi_ready);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_CONN_RSSI */

	/* Increment packet counter for this connection event */
	_radio.packet_counter++;
    fd3c:	002a      	movs	r2, r5
    fd3e:	32ff      	adds	r2, #255	; 0xff
    fd40:	7d53      	ldrb	r3, [r2, #21]

	/* received data packet */
	radio_pdu_node_rx = _radio.packet_rx[_radio.packet_rx_last];
    fd42:	0029      	movs	r1, r5
#else /* !CONFIG_BLUETOOTH_CONTROLLER_CONN_RSSI */
	ARG_UNUSED(rssi_ready);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_CONN_RSSI */

	/* Increment packet counter for this connection event */
	_radio.packet_counter++;
    fd44:	3301      	adds	r3, #1
    fd46:	7553      	strb	r3, [r2, #21]

	/* received data packet */
	radio_pdu_node_rx = _radio.packet_rx[_radio.packet_rx_last];
    fd48:	233e      	movs	r3, #62	; 0x3e
    fd4a:	33ff      	adds	r3, #255	; 0xff
    fd4c:	5ceb      	ldrb	r3, [r5, r3]
    fd4e:	31fc      	adds	r1, #252	; 0xfc
    fd50:	6bc8      	ldr	r0, [r1, #60]	; 0x3c
    fd52:	009b      	lsls	r3, r3, #2
    fd54:	581f      	ldr	r7, [r3, r0]
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    fd56:	2001      	movs	r0, #1

	if (crc_ok) {
    fd58:	9b11      	ldr	r3, [sp, #68]	; 0x44
	/* Increment packet counter for this connection event */
	_radio.packet_counter++;

	/* received data packet */
	radio_pdu_node_rx = _radio.packet_rx[_radio.packet_rx_last];
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    fd5a:	7138      	strb	r0, [r7, #4]

	if (crc_ok) {
    fd5c:	2b00      	cmp	r3, #0
    fd5e:	d101      	bne.n	fd64 <isr+0x75c>
    fd60:	f001 f87e 	bl	10e60 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xe61>
	/* Reset CRC expiry counter */
	_radio.crc_expire = 0;

	/* Ack for transmitted data */
	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
	if (pdu_data_rx->nesn != _radio.conn_curr->sn) {
    fd64:	694c      	ldr	r4, [r1, #20]
	struct pdu_data *pdu_data_tx;
	u8_t terminate = 0;
	u8_t nack = 0;

	/* Reset CRC expiry counter */
	_radio.crc_expire = 0;
    fd66:	2300      	movs	r3, #0

	/* Ack for transmitted data */
	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
	if (pdu_data_rx->nesn != _radio.conn_curr->sn) {
    fd68:	0021      	movs	r1, r4
	struct pdu_data *pdu_data_tx;
	u8_t terminate = 0;
	u8_t nack = 0;

	/* Reset CRC expiry counter */
	_radio.crc_expire = 0;
    fd6a:	7593      	strb	r3, [r2, #22]

	/* Ack for transmitted data */
	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
	if (pdu_data_rx->nesn != _radio.conn_curr->sn) {
    fd6c:	31c0      	adds	r1, #192	; 0xc0
    fd6e:	780b      	ldrb	r3, [r1, #0]
    fd70:	7a3d      	ldrb	r5, [r7, #8]
    fd72:	07da      	lsls	r2, r3, #31
    fd74:	0fd2      	lsrs	r2, r2, #31
    fd76:	076d      	lsls	r5, r5, #29
    fd78:	b2d2      	uxtb	r2, r2
    fd7a:	0fed      	lsrs	r5, r5, #31
    fd7c:	4295      	cmp	r5, r2
    fd7e:	d100      	bne.n	fd82 <isr+0x77a>
    fd80:	e126      	b.n	ffd0 <isr+0x9c8>

		/* Increment serial number */
		_radio.conn_curr->sn++;
    fd82:	1812      	adds	r2, r2, r0
    fd84:	4002      	ands	r2, r0
    fd86:	4383      	bics	r3, r0
    fd88:	4313      	orrs	r3, r2

		if (_radio.conn_curr->empty == 0) {
    fd8a:	0018      	movs	r0, r3
    fd8c:	227f      	movs	r2, #127	; 0x7f
	/* Ack for transmitted data */
	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
	if (pdu_data_rx->nesn != _radio.conn_curr->sn) {

		/* Increment serial number */
		_radio.conn_curr->sn++;
    fd8e:	700b      	strb	r3, [r1, #0]

		if (_radio.conn_curr->empty == 0) {
    fd90:	4390      	bics	r0, r2
    fd92:	d000      	beq.n	fd96 <isr+0x78e>
    fd94:	e10d      	b.n	ffb2 <isr+0x9aa>
			struct radio_pdu_node_tx *node_tx;
			u8_t pdu_data_tx_len, pdu_data_tx_ll_id;

			node_tx = _radio.conn_curr->pkt_tx_head;
    fd96:	0022      	movs	r2, r4
    fd98:	32fc      	adds	r2, #252	; 0xfc
    fd9a:	6895      	ldr	r5, [r2, #8]
			pdu_data_tx = (struct pdu_data *)
				(node_tx->pdu_data +
				 _radio.conn_curr->packet_tx_head_offset);
    fd9c:	3203      	adds	r2, #3
		if (_radio.conn_curr->empty == 0) {
			struct radio_pdu_node_tx *node_tx;
			u8_t pdu_data_tx_len, pdu_data_tx_ll_id;

			node_tx = _radio.conn_curr->pkt_tx_head;
			pdu_data_tx = (struct pdu_data *)
    fd9e:	7d92      	ldrb	r2, [r2, #22]
				(node_tx->pdu_data +
    fda0:	1d29      	adds	r1, r5, #4
		if (_radio.conn_curr->empty == 0) {
			struct radio_pdu_node_tx *node_tx;
			u8_t pdu_data_tx_len, pdu_data_tx_ll_id;

			node_tx = _radio.conn_curr->pkt_tx_head;
			pdu_data_tx = (struct pdu_data *)
    fda2:	188a      	adds	r2, r1, r2
    fda4:	920a      	str	r2, [sp, #40]	; 0x28
				(node_tx->pdu_data +
				 _radio.conn_curr->packet_tx_head_offset);

			pdu_data_tx_len = pdu_data_tx->len;
    fda6:	7852      	ldrb	r2, [r2, #1]
    fda8:	920c      	str	r2, [sp, #48]	; 0x30
			pdu_data_tx_ll_id = pdu_data_tx->ll_id;

			if (pdu_data_tx_len != 0) {
    fdaa:	2a00      	cmp	r2, #0
    fdac:	d100      	bne.n	fdb0 <isr+0x7a8>
    fdae:	e0cf      	b.n	ff50 <isr+0x948>
			pdu_data_tx = (struct pdu_data *)
				(node_tx->pdu_data +
				 _radio.conn_curr->packet_tx_head_offset);

			pdu_data_tx_len = pdu_data_tx->len;
			pdu_data_tx_ll_id = pdu_data_tx->ll_id;
    fdb0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    fdb2:	7810      	ldrb	r0, [r2, #0]
    fdb4:	0780      	lsls	r0, r0, #30
    fdb6:	0f82      	lsrs	r2, r0, #30
    fdb8:	4694      	mov	ip, r2

			if (pdu_data_tx_len != 0) {
				/* if encrypted increment tx counter */
				if (_radio.conn_curr->enc_tx) {
    fdba:	069b      	lsls	r3, r3, #26
    fdbc:	d51d      	bpl.n	fdfa <isr+0x7f2>
					_radio.conn_curr->ccm_tx.counter++;
    fdbe:	0023      	movs	r3, r4
    fdc0:	0021      	movs	r1, r4
    fdc2:	33f4      	adds	r3, #244	; 0xf4
    fdc4:	881b      	ldrh	r3, [r3, #0]
    fdc6:	31f2      	adds	r1, #242	; 0xf2
    fdc8:	880a      	ldrh	r2, [r1, #0]
    fdca:	041b      	lsls	r3, r3, #16
    fdcc:	4313      	orrs	r3, r2
    fdce:	930e      	str	r3, [sp, #56]	; 0x38
    fdd0:	0023      	movs	r3, r4
    fdd2:	33f6      	adds	r3, #246	; 0xf6
    fdd4:	881a      	ldrh	r2, [r3, #0]
    fdd6:	3302      	adds	r3, #2
    fdd8:	881b      	ldrh	r3, [r3, #0]
    fdda:	000e      	movs	r6, r1
    fddc:	041b      	lsls	r3, r3, #16
    fdde:	4313      	orrs	r3, r2
    fde0:	930f      	str	r3, [sp, #60]	; 0x3c
    fde2:	2201      	movs	r2, #1
    fde4:	980e      	ldr	r0, [sp, #56]	; 0x38
    fde6:	990f      	ldr	r1, [sp, #60]	; 0x3c
    fde8:	2300      	movs	r3, #0
    fdea:	1880      	adds	r0, r0, r2
    fdec:	4159      	adcs	r1, r3
    fdee:	0c02      	lsrs	r2, r0, #16
    fdf0:	0c0b      	lsrs	r3, r1, #16
    fdf2:	8030      	strh	r0, [r6, #0]
    fdf4:	8072      	strh	r2, [r6, #2]
    fdf6:	80b1      	strh	r1, [r6, #4]
    fdf8:	80f3      	strh	r3, [r6, #6]
				}

				/* process ctrl packet on tx cmplt */
				if (pdu_data_tx_ll_id == PDU_DATA_LLID_CTRL) {
    fdfa:	4663      	mov	r3, ip
isr_rx_conn_pkt(struct radio_pdu_node_rx *radio_pdu_node_rx,
		struct radio_pdu_node_tx **tx_release, u8_t *rx_enqueue)
{
	struct pdu_data *pdu_data_rx;
	struct pdu_data *pdu_data_tx;
	u8_t terminate = 0;
    fdfc:	2600      	movs	r6, #0
				if (_radio.conn_curr->enc_tx) {
					_radio.conn_curr->ccm_tx.counter++;
				}

				/* process ctrl packet on tx cmplt */
				if (pdu_data_tx_ll_id == PDU_DATA_LLID_CTRL) {
    fdfe:	2b03      	cmp	r3, #3
    fe00:	d000      	beq.n	fe04 <isr+0x7fc>
    fe02:	e0a8      	b.n	ff56 <isr+0x94e>
static inline u8_t isr_rx_conn_pkt_ack(struct pdu_data *pdu_data_tx,
				       struct radio_pdu_node_tx **node_tx)
{
	u8_t terminate = 0;

	switch (pdu_data_tx->payload.llctrl.opcode) {
    fe04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    fe06:	78d8      	ldrb	r0, [r3, #3]
    fe08:	3802      	subs	r0, #2
    fe0a:	2814      	cmp	r0, #20
    fe0c:	d900      	bls.n	fe10 <isr+0x808>
    fe0e:	e0a1      	b.n	ff54 <isr+0x94c>
    fe10:	4ec6      	ldr	r6, [pc, #792]	; (1012c <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x12d>)
    fe12:	f7f0 f9b1 	bl	178 <__gnu_thumb1_case_uqi>
    fe16:	240b      	.short	0x240b
    fe18:	9f9f9f6e 	.word	0x9f9f9f6e
    fe1c:	463d9f9f 	.word	0x463d9f9f
    fe20:	9f9f729f 	.word	0x9f9f729f
    fe24:	9f9f9f9f 	.word	0x9f9f9f9f
    fe28:	9f7b      	.short	0x9f7b
    fe2a:	95          	.byte	0x95
    fe2b:	00          	.byte	0x00
	case PDU_DATA_LLCTRL_TYPE_TERMINATE_IND:
		_radio.state = STATE_CLOSE;
    fe2c:	2303      	movs	r3, #3
    fe2e:	7433      	strb	r3, [r6, #16]
		radio_disable();
    fe30:	f7fa ff1e 	bl	ac70 <radio_disable>

		/* assert if radio packet ptr is not set and radio started tx */
		LL_ASSERT(!radio_is_ready());
    fe34:	f7fa ff30 	bl	ac98 <radio_is_ready>
    fe38:	2800      	cmp	r0, #0
    fe3a:	d005      	beq.n	fe48 <isr+0x840>
    fe3c:	4bbc      	ldr	r3, [pc, #752]	; (10130 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x131>)
    fe3e:	9301      	str	r3, [sp, #4]
    fe40:	4bbc      	ldr	r3, [pc, #752]	; (10134 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x135>)
    fe42:	9300      	str	r3, [sp, #0]
    fe44:	4bbc      	ldr	r3, [pc, #752]	; (10138 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x139>)
    fe46:	e161      	b.n	1010c <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x10d>

		terminate_ind_rx_enqueue(_radio.conn_curr,
		     (pdu_data_tx->payload.llctrl.ctrldata.terminate_ind.
    fe48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
		radio_disable();

		/* assert if radio packet ptr is not set and radio started tx */
		LL_ASSERT(!radio_is_ready());

		terminate_ind_rx_enqueue(_radio.conn_curr,
    fe4a:	36fc      	adds	r6, #252	; 0xfc
		     (pdu_data_tx->payload.llctrl.ctrldata.terminate_ind.
    fe4c:	7919      	ldrb	r1, [r3, #4]
		radio_disable();

		/* assert if radio packet ptr is not set and radio started tx */
		LL_ASSERT(!radio_is_ready());

		terminate_ind_rx_enqueue(_radio.conn_curr,
    fe4e:	6970      	ldr	r0, [r6, #20]
    fe50:	2913      	cmp	r1, #19
    fe52:	d100      	bne.n	fe56 <isr+0x84e>
    fe54:	3103      	adds	r1, #3
    fe56:	f7fd faa9 	bl	d3ac <terminate_ind_rx_enqueue>
		      error_code == 0x13) ?  0x16 :
		     pdu_data_tx->payload.llctrl.ctrldata.terminate_ind.
		     error_code);

		/* Ack received, hence terminate */
		terminate = 1;
    fe5a:	2601      	movs	r6, #1
    fe5c:	e07b      	b.n	ff56 <isr+0x94e>
		break;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_ENC)
	case PDU_DATA_LLCTRL_TYPE_ENC_REQ:
		/* things from master stored for session key calculation */
		memcpy(&_radio.conn_curr->llcp.encryption.skd[0],
    fe5e:	0020      	movs	r0, r4
		       &pdu_data_tx->payload.llctrl.ctrldata.enc_req.skdm[0],
    fe60:	990a      	ldr	r1, [sp, #40]	; 0x28
		break;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_ENC)
	case PDU_DATA_LLCTRL_TYPE_ENC_REQ:
		/* things from master stored for session key calculation */
		memcpy(&_radio.conn_curr->llcp.encryption.skd[0],
    fe62:	2208      	movs	r2, #8
		       &pdu_data_tx->payload.llctrl.ctrldata.enc_req.skdm[0],
    fe64:	310e      	adds	r1, #14
		       8);
		memcpy(&_radio.conn_curr->ccm_rx.iv[0],
    fe66:	36fc      	adds	r6, #252	; 0xfc
		break;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_ENC)
	case PDU_DATA_LLCTRL_TYPE_ENC_REQ:
		/* things from master stored for session key calculation */
		memcpy(&_radio.conn_curr->llcp.encryption.skd[0],
    fe68:	3087      	adds	r0, #135	; 0x87
    fe6a:	f7f0 ff66 	bl	d3a <memcpy>
		       &pdu_data_tx->payload.llctrl.ctrldata.enc_req.skdm[0],
		       8);
		memcpy(&_radio.conn_curr->ccm_rx.iv[0],
		       &pdu_data_tx->payload.llctrl.ctrldata.enc_req.ivm[0],
    fe6e:	990a      	ldr	r1, [sp, #40]	; 0x28
	case PDU_DATA_LLCTRL_TYPE_ENC_REQ:
		/* things from master stored for session key calculation */
		memcpy(&_radio.conn_curr->llcp.encryption.skd[0],
		       &pdu_data_tx->payload.llctrl.ctrldata.enc_req.skdm[0],
		       8);
		memcpy(&_radio.conn_curr->ccm_rx.iv[0],
    fe70:	6970      	ldr	r0, [r6, #20]
		       &pdu_data_tx->payload.llctrl.ctrldata.enc_req.ivm[0],
    fe72:	3116      	adds	r1, #22
	case PDU_DATA_LLCTRL_TYPE_ENC_REQ:
		/* things from master stored for session key calculation */
		memcpy(&_radio.conn_curr->llcp.encryption.skd[0],
		       &pdu_data_tx->payload.llctrl.ctrldata.enc_req.skdm[0],
		       8);
		memcpy(&_radio.conn_curr->ccm_rx.iv[0],
    fe74:	2204      	movs	r2, #4
    fe76:	30da      	adds	r0, #218	; 0xda
    fe78:	f7f0 ff5f 	bl	d3a <memcpy>
		       &pdu_data_tx->payload.llctrl.ctrldata.enc_req.ivm[0],
		       4);

		/* pause data packet tx */
		_radio.conn_curr->pause_tx = 1;
    fe7c:	6972      	ldr	r2, [r6, #20]
    fe7e:	2008      	movs	r0, #8
    fe80:	0011      	movs	r1, r2
    fe82:	31c0      	adds	r1, #192	; 0xc0
    fe84:	780b      	ldrb	r3, [r1, #0]
    fe86:	4303      	orrs	r3, r0
    fe88:	700b      	strb	r3, [r1, #0]

		/* Start Procedure Timeout (this will not replace terminate
		 * procedure which always gets place before any packets
		 * going out, hence safe by design).
		 */
		_radio.conn_curr->procedure_expire =
    fe8a:	8f13      	ldrh	r3, [r2, #56]	; 0x38
    fe8c:	8753      	strh	r3, [r2, #58]	; 0x3a
    fe8e:	e061      	b.n	ff54 <isr+0x94c>
		 */
		break;

	case PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_REQ:
		/* pause data packet tx */
		_radio.conn_curr->pause_tx = 1;
    fe90:	0022      	movs	r2, r4

		/* key refresh */
		_radio.conn_curr->refresh = 1;
    fe92:	2348      	movs	r3, #72	; 0x48
		 */
		break;

	case PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_REQ:
		/* pause data packet tx */
		_radio.conn_curr->pause_tx = 1;
    fe94:	32c0      	adds	r2, #192	; 0xc0
    fe96:	7811      	ldrb	r1, [r2, #0]

		/* key refresh */
		_radio.conn_curr->refresh = 1;
    fe98:	430b      	orrs	r3, r1
    fe9a:	7013      	strb	r3, [r2, #0]

		/* Start Procedure Timeout (this will not replace terminate
		 * procedure which always gets place before any packets
		 * going out, hence safe by design).
		 */
		_radio.conn_curr->procedure_expire =
    fe9c:	8f23      	ldrh	r3, [r4, #56]	; 0x38
    fe9e:	8763      	strh	r3, [r4, #58]	; 0x3a
    fea0:	e058      	b.n	ff54 <isr+0x94c>
			_radio.conn_curr->procedure_reload;
		break;

	case PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP:
		if (_radio.role == ROLE_MASTER) {
    fea2:	7bf6      	ldrb	r6, [r6, #15]
    fea4:	b2f6      	uxtb	r6, r6
    fea6:	2e04      	cmp	r6, #4
    fea8:	d123      	bne.n	fef2 <isr+0x8ea>
				struct radio_pdu_node_tx *node_tx)
{
	struct pdu_data *pdu_ctrl_tx;

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    feaa:	2203      	movs	r2, #3
    feac:	792b      	ldrb	r3, [r5, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata)
		+ sizeof(struct pdu_data_llctrl_enc_req);
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
	memcpy(&pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.rand[0],
	       &conn->llcp.encryption.rand[0],
    feae:	0021      	movs	r1, r4
				struct radio_pdu_node_tx *node_tx)
{
	struct pdu_data *pdu_ctrl_tx;

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    feb0:	4313      	orrs	r3, r2
    feb2:	712b      	strb	r3, [r5, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata)
		+ sizeof(struct pdu_data_llctrl_enc_req);
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
	memcpy(&pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.rand[0],
    feb4:	0028      	movs	r0, r5
{
	struct pdu_data *pdu_ctrl_tx;

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata)
    feb6:	2317      	movs	r3, #23
		+ sizeof(struct pdu_data_llctrl_enc_req);
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    feb8:	71ea      	strb	r2, [r5, #7]
{
	struct pdu_data *pdu_ctrl_tx;

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata)
    feba:	716b      	strb	r3, [r5, #5]
		+ sizeof(struct pdu_data_llctrl_enc_req);
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
	memcpy(&pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.rand[0],
	       &conn->llcp.encryption.rand[0],
    febc:	316d      	adds	r1, #109	; 0x6d
	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata)
		+ sizeof(struct pdu_data_llctrl_enc_req);
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
	memcpy(&pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.rand[0],
    febe:	3205      	adds	r2, #5
    fec0:	3008      	adds	r0, #8
    fec2:	f7f0 ff3a 	bl	d3a <memcpy>
	       &conn->llcp.encryption.rand[0],
	       sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.rand));
	pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.ediv[0] =
		conn->llcp.encryption.ediv[0];
    fec6:	0023      	movs	r3, r4
	pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.ediv[1] =
		conn->llcp.encryption.ediv[1];
	/** @todo */
	memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.skdm[0], 0xcc,
    fec8:	0028      	movs	r0, r5
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
	memcpy(&pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.rand[0],
	       &conn->llcp.encryption.rand[0],
	       sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.rand));
	pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.ediv[0] =
		conn->llcp.encryption.ediv[0];
    feca:	3375      	adds	r3, #117	; 0x75
    fecc:	781b      	ldrb	r3, [r3, #0]
	pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.ediv[1] =
		conn->llcp.encryption.ediv[1];
    fece:	3476      	adds	r4, #118	; 0x76
		+ sizeof(struct pdu_data_llctrl_enc_req);
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
	memcpy(&pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.rand[0],
	       &conn->llcp.encryption.rand[0],
	       sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.rand));
	pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.ediv[0] =
    fed0:	742b      	strb	r3, [r5, #16]
		conn->llcp.encryption.ediv[0];
	pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.ediv[1] =
		conn->llcp.encryption.ediv[1];
    fed2:	7823      	ldrb	r3, [r4, #0]
	/** @todo */
	memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.skdm[0], 0xcc,
    fed4:	2208      	movs	r2, #8
	memcpy(&pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.rand[0],
	       &conn->llcp.encryption.rand[0],
	       sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.rand));
	pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.ediv[0] =
		conn->llcp.encryption.ediv[0];
	pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.ediv[1] =
    fed6:	746b      	strb	r3, [r5, #17]
		conn->llcp.encryption.ediv[1];
	/** @todo */
	memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.skdm[0], 0xcc,
    fed8:	21cc      	movs	r1, #204	; 0xcc
    feda:	3012      	adds	r0, #18
    fedc:	f7f0 ff57 	bl	d8e <memset>
		sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.skdm));
	/** @todo */
	memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.ivm[0], 0xdd,
    fee0:	0028      	movs	r0, r5
		if (_radio.role == ROLE_MASTER) {
			/* reused tx-ed PDU and send enc req */
			enc_req_reused_send(_radio.conn_curr, *node_tx);

			/* dont release ctrl PDU memory */
			*node_tx = NULL;
    fee2:	2500      	movs	r5, #0
		conn->llcp.encryption.ediv[1];
	/** @todo */
	memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.skdm[0], 0xcc,
		sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.skdm));
	/** @todo */
	memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.ivm[0], 0xdd,
    fee4:	0032      	movs	r2, r6
    fee6:	301a      	adds	r0, #26
    fee8:	21dd      	movs	r1, #221	; 0xdd
    feea:	f7f0 ff50 	bl	d8e <memset>
}

static inline u8_t isr_rx_conn_pkt_ack(struct pdu_data *pdu_data_tx,
				       struct radio_pdu_node_tx **node_tx)
{
	u8_t terminate = 0;
    feee:	002e      	movs	r6, r5
    fef0:	e031      	b.n	ff56 <isr+0x94e>

			/* dont release ctrl PDU memory */
			*node_tx = NULL;
		} else {
			/* pause data packet tx */
			_radio.conn_curr->pause_tx = 1;
    fef2:	34c0      	adds	r4, #192	; 0xc0
    fef4:	7823      	ldrb	r3, [r4, #0]
    fef6:	2208      	movs	r2, #8
    fef8:	e027      	b.n	ff4a <isr+0x942>
		}
		break;

	case PDU_DATA_LLCTRL_TYPE_REJECT_IND:
		/* resume data packet rx and tx */
		_radio.conn_curr->pause_rx = 0;
    fefa:	0022      	movs	r2, r4
		_radio.conn_curr->pause_tx = 0;
    fefc:	23f3      	movs	r3, #243	; 0xf3

		/* Procedure complete */
		_radio.conn_curr->procedure_expire = 0;
    fefe:	2600      	movs	r6, #0
		}
		break;

	case PDU_DATA_LLCTRL_TYPE_REJECT_IND:
		/* resume data packet rx and tx */
		_radio.conn_curr->pause_rx = 0;
    ff00:	32c0      	adds	r2, #192	; 0xc0
    ff02:	7811      	ldrb	r1, [r2, #0]
		_radio.conn_curr->pause_tx = 0;
    ff04:	400b      	ands	r3, r1
    ff06:	7013      	strb	r3, [r2, #0]

		/* Procedure complete */
		_radio.conn_curr->procedure_expire = 0;
    ff08:	8766      	strh	r6, [r4, #58]	; 0x3a
    ff0a:	e024      	b.n	ff56 <isr+0x94e>
		break;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_ENC */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
	case PDU_DATA_LLCTRL_TYPE_LENGTH_REQ:
		if ((_radio.conn_curr->llcp_length.req !=
    ff0c:	0023      	movs	r3, r4
    ff0e:	33b4      	adds	r3, #180	; 0xb4
    ff10:	781a      	ldrb	r2, [r3, #0]
    ff12:	3301      	adds	r3, #1
    ff14:	781b      	ldrb	r3, [r3, #0]
}

static inline u8_t isr_rx_conn_pkt_ack(struct pdu_data *pdu_data_tx,
				       struct radio_pdu_node_tx **node_tx)
{
	u8_t terminate = 0;
    ff16:	2600      	movs	r6, #0
		break;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_ENC */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
	case PDU_DATA_LLCTRL_TYPE_LENGTH_REQ:
		if ((_radio.conn_curr->llcp_length.req !=
    ff18:	429a      	cmp	r2, r3
    ff1a:	d01c      	beq.n	ff56 <isr+0x94e>
		     _radio.conn_curr->llcp_length.ack) &&
		    (_radio.conn_curr->llcp_length.state ==
    ff1c:	0022      	movs	r2, r4
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_ENC */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
	case PDU_DATA_LLCTRL_TYPE_LENGTH_REQ:
		if ((_radio.conn_curr->llcp_length.req !=
		     _radio.conn_curr->llcp_length.ack) &&
    ff1e:	2103      	movs	r1, #3
		    (_radio.conn_curr->llcp_length.state ==
    ff20:	32b6      	adds	r2, #182	; 0xb6
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_ENC */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
	case PDU_DATA_LLCTRL_TYPE_LENGTH_REQ:
		if ((_radio.conn_curr->llcp_length.req !=
		     _radio.conn_curr->llcp_length.ack) &&
    ff22:	7813      	ldrb	r3, [r2, #0]
    ff24:	400b      	ands	r3, r1
    ff26:	2b01      	cmp	r3, #1
    ff28:	d115      	bne.n	ff56 <isr+0x94e>
		    (_radio.conn_curr->llcp_length.state ==
		     LLCP_LENGTH_STATE_ACK_WAIT)){
			/* pause data packet tx */
			_radio.conn_curr->pause_tx = 1;
    ff2a:	2008      	movs	r0, #8
    ff2c:	34c0      	adds	r4, #192	; 0xc0
    ff2e:	7823      	ldrb	r3, [r4, #0]
    ff30:	4303      	orrs	r3, r0
    ff32:	7023      	strb	r3, [r4, #0]

			/* wait for response */
			_radio.conn_curr->llcp_length.state =
    ff34:	7813      	ldrb	r3, [r2, #0]
    ff36:	438b      	bics	r3, r1
    ff38:	3901      	subs	r1, #1
    ff3a:	430b      	orrs	r3, r1
    ff3c:	7013      	strb	r3, [r2, #0]
    ff3e:	e00a      	b.n	ff56 <isr+0x94e>
		break;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
	case PDU_DATA_LLCTRL_TYPE_PHY_REQ:
		_radio.conn_curr->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
    ff40:	2203      	movs	r2, #3
    ff42:	34be      	adds	r4, #190	; 0xbe
    ff44:	7823      	ldrb	r3, [r4, #0]
    ff46:	4393      	bics	r3, r2
    ff48:	3a01      	subs	r2, #1
    ff4a:	4313      	orrs	r3, r2
    ff4c:	7023      	strb	r3, [r4, #0]
    ff4e:	e001      	b.n	ff54 <isr+0x94c>
isr_rx_conn_pkt(struct radio_pdu_node_rx *radio_pdu_node_rx,
		struct radio_pdu_node_tx **tx_release, u8_t *rx_enqueue)
{
	struct pdu_data *pdu_data_rx;
	struct pdu_data *pdu_data_tx;
	u8_t terminate = 0;
    ff50:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    ff52:	e000      	b.n	ff56 <isr+0x94e>
}

static inline u8_t isr_rx_conn_pkt_ack(struct pdu_data *pdu_data_tx,
				       struct radio_pdu_node_tx **node_tx)
{
	u8_t terminate = 0;
    ff54:	2600      	movs	r6, #0
						isr_rx_conn_pkt_ack(pdu_data_tx,
								    &node_tx);
				}
			}

			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    ff56:	4c75      	ldr	r4, [pc, #468]	; (1012c <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x12d>)
    ff58:	980c      	ldr	r0, [sp, #48]	; 0x30
    ff5a:	0023      	movs	r3, r4
    ff5c:	33fc      	adds	r3, #252	; 0xfc
    ff5e:	695b      	ldr	r3, [r3, #20]
    ff60:	0019      	movs	r1, r3
    ff62:	31ff      	adds	r1, #255	; 0xff
    ff64:	7d8a      	ldrb	r2, [r1, #22]
    ff66:	1882      	adds	r2, r0, r2
			if (_radio.conn_curr->packet_tx_head_offset ==
    ff68:	7d48      	ldrb	r0, [r1, #21]
						isr_rx_conn_pkt_ack(pdu_data_tx,
								    &node_tx);
				}
			}

			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    ff6a:	b2d2      	uxtb	r2, r2
    ff6c:	758a      	strb	r2, [r1, #22]
			if (_radio.conn_curr->packet_tx_head_offset ==
    ff6e:	4290      	cmp	r0, r2
    ff70:	d122      	bne.n	ffb8 <isr+0x9b0>
}

static inline struct radio_pdu_node_tx *
isr_rx_conn_pkt_release(struct radio_pdu_node_tx *node_tx)
{
	_radio.conn_curr->packet_tx_head_len = 0;
    ff72:	2000      	movs	r0, #0
	_radio.conn_curr->packet_tx_head_offset = 0;

	/* release */
	if (_radio.conn_curr->pkt_tx_head == _radio.conn_curr->pkt_tx_ctrl) {
    ff74:	33fc      	adds	r3, #252	; 0xfc
}

static inline struct radio_pdu_node_tx *
isr_rx_conn_pkt_release(struct radio_pdu_node_tx *node_tx)
{
	_radio.conn_curr->packet_tx_head_len = 0;
    ff76:	7548      	strb	r0, [r1, #21]
	_radio.conn_curr->packet_tx_head_offset = 0;
    ff78:	7588      	strb	r0, [r1, #22]

	/* release */
	if (_radio.conn_curr->pkt_tx_head == _radio.conn_curr->pkt_tx_ctrl) {
    ff7a:	689a      	ldr	r2, [r3, #8]
    ff7c:	68d9      	ldr	r1, [r3, #12]
    ff7e:	428a      	cmp	r2, r1
    ff80:	d10f      	bne.n	ffa2 <isr+0x99a>
		if (node_tx) {
    ff82:	4285      	cmp	r5, r0
    ff84:	d018      	beq.n	ffb8 <isr+0x9b0>
			_radio.conn_curr->pkt_tx_ctrl =
			    _radio.conn_curr->pkt_tx_ctrl->next;
    ff86:	6812      	ldr	r2, [r2, #0]
			_radio.conn_curr->pkt_tx_head =
				_radio.conn_curr->pkt_tx_ctrl;
			if (_radio.conn_curr->pkt_tx_ctrl ==
    ff88:	6919      	ldr	r1, [r3, #16]
	_radio.conn_curr->packet_tx_head_offset = 0;

	/* release */
	if (_radio.conn_curr->pkt_tx_head == _radio.conn_curr->pkt_tx_ctrl) {
		if (node_tx) {
			_radio.conn_curr->pkt_tx_ctrl =
    ff8a:	60da      	str	r2, [r3, #12]
			    _radio.conn_curr->pkt_tx_ctrl->next;
			_radio.conn_curr->pkt_tx_head =
    ff8c:	609a      	str	r2, [r3, #8]
				_radio.conn_curr->pkt_tx_ctrl;
			if (_radio.conn_curr->pkt_tx_ctrl ==
    ff8e:	428a      	cmp	r2, r1
    ff90:	d100      	bne.n	ff94 <isr+0x98c>
			    _radio.conn_curr->pkt_tx_data) {
				_radio.conn_curr->pkt_tx_ctrl = NULL;
    ff92:	60d8      	str	r0, [r3, #12]
			}

			mem_release(node_tx, &_radio. pkt_tx_ctrl_free);
    ff94:	0021      	movs	r1, r4
    ff96:	3159      	adds	r1, #89	; 0x59
    ff98:	31ff      	adds	r1, #255	; 0xff
    ff9a:	0028      	movs	r0, r5
    ff9c:	f7fa fc91 	bl	a8c2 <mem_release>
    ffa0:	e00a      	b.n	ffb8 <isr+0x9b0>
		}
	} else {
		if (_radio.conn_curr->pkt_tx_head ==
    ffa2:	6918      	ldr	r0, [r3, #16]
    ffa4:	6811      	ldr	r1, [r2, #0]
    ffa6:	4282      	cmp	r2, r0
    ffa8:	d100      	bne.n	ffac <isr+0x9a4>
		    _radio.conn_curr->pkt_tx_data) {
			_radio.conn_curr->pkt_tx_data =
    ffaa:	6119      	str	r1, [r3, #16]
				_radio.conn_curr->pkt_tx_data->next;
		}
		_radio.conn_curr->pkt_tx_head =
    ffac:	6099      	str	r1, [r3, #8]
    ffae:	950c      	str	r5, [sp, #48]	; 0x30
    ffb0:	e004      	b.n	ffbc <isr+0x9b4>
			if (_radio.conn_curr->packet_tx_head_offset ==
			    _radio.conn_curr->packet_tx_head_len) {
				*tx_release = isr_rx_conn_pkt_release(node_tx);
			}
		} else {
			_radio.conn_curr->empty = 0;
    ffb2:	4013      	ands	r3, r2
    ffb4:	700b      	strb	r3, [r1, #0]
    ffb6:	e00b      	b.n	ffd0 <isr+0x9c8>

static inline void isr_rx_conn(u8_t crc_ok, u8_t trx_done,
			       u8_t rssi_ready)
{
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	struct radio_pdu_node_tx *tx_release = NULL;
    ffb8:	2300      	movs	r3, #0
    ffba:	930c      	str	r3, [sp, #48]	; 0x30
			_radio.conn_curr->empty = 0;
		}
	}

	/* local initiated disconnect procedure completed */
	if (terminate) {
    ffbc:	2e00      	cmp	r6, #0
    ffbe:	d009      	beq.n	ffd4 <isr+0x9cc>
		connection_release(_radio.conn_curr);
    ffc0:	34fc      	adds	r4, #252	; 0xfc
    ffc2:	6960      	ldr	r0, [r4, #20]
    ffc4:	f7fd f8be 	bl	d144 <connection_release>
		_radio.conn_curr = NULL;
    ffc8:	2300      	movs	r3, #0
    ffca:	6163      	str	r3, [r4, #20]
    ffcc:	f001 fa35 	bl	1143a <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x143b>
		if (_radio.conn_curr->pkt_tx_head ==
		    _radio.conn_curr->pkt_tx_data) {
			_radio.conn_curr->pkt_tx_data =
				_radio.conn_curr->pkt_tx_data->next;
		}
		_radio.conn_curr->pkt_tx_head =
    ffd0:	2300      	movs	r3, #0
    ffd2:	930c      	str	r3, [sp, #48]	; 0x30

		return terminate;
	}

	/* process received data */
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
    ffd4:	4855      	ldr	r0, [pc, #340]	; (1012c <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x12d>)
    ffd6:	7a3a      	ldrb	r2, [r7, #8]
    ffd8:	0004      	movs	r4, r0
    ffda:	34fc      	adds	r4, #252	; 0xfc
    ffdc:	6963      	ldr	r3, [r4, #20]
    ffde:	0712      	lsls	r2, r2, #28
    ffe0:	33c0      	adds	r3, #192	; 0xc0
    ffe2:	781b      	ldrb	r3, [r3, #0]
    ffe4:	0fd2      	lsrs	r2, r2, #31
    ffe6:	079b      	lsls	r3, r3, #30
    ffe8:	0fdb      	lsrs	r3, r3, #31
    ffea:	0006      	movs	r6, r0
    ffec:	429a      	cmp	r2, r3
    ffee:	d001      	beq.n	fff4 <isr+0x9ec>
    fff0:	f001 fa29 	bl	11446 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x1447>
	/* check so that we will NEVER use the rx buffer reserved for empty
	 * packet and internal control enqueue
	 */
	    (packet_rx_reserve_get(3) != 0) &&
    fff4:	2003      	movs	r0, #3
    fff6:	f7fc f8dd 	bl	c1b4 <packet_rx_reserve_get>

		return terminate;
	}

	/* process received data */
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
    fffa:	2800      	cmp	r0, #0
    fffc:	d101      	bne.n	10002 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x3>
    fffe:	f001 fa22 	bl	11446 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x1447>
	/* check so that we will NEVER use the rx buffer reserved for empty
	 * packet and internal control enqueue
	 */
	    (packet_rx_reserve_get(3) != 0) &&
	    ((_radio.fc_ena == 0) ||
   10002:	23bf      	movs	r3, #191	; 0xbf
   10004:	005b      	lsls	r3, r3, #1
	/* process received data */
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
	/* check so that we will NEVER use the rx buffer reserved for empty
	 * packet and internal control enqueue
	 */
	    (packet_rx_reserve_get(3) != 0) &&
   10006:	5cf3      	ldrb	r3, [r6, r3]
   10008:	2b00      	cmp	r3, #0
   1000a:	d03a      	beq.n	10082 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x83>
	    ((_radio.fc_ena == 0) ||
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
   1000c:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
   1000e:	6d23      	ldr	r3, [r4, #80]	; 0x50
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
	/* check so that we will NEVER use the rx buffer reserved for empty
	 * packet and internal control enqueue
	 */
	    (packet_rx_reserve_get(3) != 0) &&
	    ((_radio.fc_ena == 0) ||
   10010:	429a      	cmp	r2, r3
   10012:	d107      	bne.n	10024 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x25>
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
	      (_radio.fc_req == _radio.fc_ack)) ||
   10014:	23be      	movs	r3, #190	; 0xbe
   10016:	217e      	movs	r1, #126	; 0x7e
   10018:	005b      	lsls	r3, r3, #1
   1001a:	31ff      	adds	r1, #255	; 0xff
   1001c:	5cf3      	ldrb	r3, [r6, r3]
	/* check so that we will NEVER use the rx buffer reserved for empty
	 * packet and internal control enqueue
	 */
	    (packet_rx_reserve_get(3) != 0) &&
	    ((_radio.fc_ena == 0) ||
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
   1001e:	5c71      	ldrb	r1, [r6, r1]
   10020:	4299      	cmp	r1, r3
   10022:	d02e      	beq.n	10082 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x83>
	      (_radio.fc_req == _radio.fc_ack)) ||
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
   10024:	0033      	movs	r3, r6
   10026:	33fc      	adds	r3, #252	; 0xfc
   10028:	6d19      	ldr	r1, [r3, #80]	; 0x50
	 * packet and internal control enqueue
	 */
	    (packet_rx_reserve_get(3) != 0) &&
	    ((_radio.fc_ena == 0) ||
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
	      (_radio.fc_req == _radio.fc_ack)) ||
   1002a:	428a      	cmp	r2, r1
   1002c:	d101      	bne.n	10032 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x33>
   1002e:	f001 fa0a 	bl	11446 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x1447>
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
	      (_radio.fc_req != _radio.fc_ack) &&
   10032:	22be      	movs	r2, #190	; 0xbe
   10034:	207e      	movs	r0, #126	; 0x7e
   10036:	0052      	lsls	r2, r2, #1
   10038:	30ff      	adds	r0, #255	; 0xff
   1003a:	5cb1      	ldrb	r1, [r6, r2]
	 */
	    (packet_rx_reserve_get(3) != 0) &&
	    ((_radio.fc_ena == 0) ||
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
	      (_radio.fc_req == _radio.fc_ack)) ||
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
   1003c:	5c30      	ldrb	r0, [r6, r0]
   1003e:	4288      	cmp	r0, r1
   10040:	d101      	bne.n	10046 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x47>
   10042:	f001 fa00 	bl	11446 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x1447>
	      (_radio.fc_req != _radio.fc_ack) &&
		(((_radio.fc_req == 0) &&
   10046:	5cb2      	ldrb	r2, [r6, r2]
	    (packet_rx_reserve_get(3) != 0) &&
	    ((_radio.fc_ena == 0) ||
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
	      (_radio.fc_req == _radio.fc_ack)) ||
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
	      (_radio.fc_req != _radio.fc_ack) &&
   10048:	2a00      	cmp	r2, #0
   1004a:	d106      	bne.n	1005a <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x5b>
		(((_radio.fc_req == 0) &&
		  (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] ==
		   _radio.conn_curr->handle)) ||
   1004c:	695b      	ldr	r3, [r3, #20]
	    ((_radio.fc_ena == 0) ||
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
	      (_radio.fc_req == _radio.fc_ack)) ||
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
	      (_radio.fc_req != _radio.fc_ack) &&
		(((_radio.fc_req == 0) &&
   1004e:	327b      	adds	r2, #123	; 0x7b
   10050:	32ff      	adds	r2, #255	; 0xff
   10052:	5ab2      	ldrh	r2, [r6, r2]
   10054:	8c1b      	ldrh	r3, [r3, #32]
   10056:	429a      	cmp	r2, r3
   10058:	d013      	beq.n	10082 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x83>
		  (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] ==
		   _radio.conn_curr->handle)) ||
		 ((_radio.fc_req != 0) &&
   1005a:	23be      	movs	r3, #190	; 0xbe
   1005c:	005b      	lsls	r3, r3, #1
   1005e:	5cf2      	ldrb	r2, [r6, r3]
	      (_radio.fc_req == _radio.fc_ack)) ||
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
	      (_radio.fc_req != _radio.fc_ack) &&
		(((_radio.fc_req == 0) &&
		  (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] ==
		   _radio.conn_curr->handle)) ||
   10060:	2a00      	cmp	r2, #0
   10062:	d101      	bne.n	10068 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x69>
   10064:	f001 f9ef 	bl	11446 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x1447>
		 ((_radio.fc_req != 0) &&
		  (_radio.fc_handle[_radio.fc_req - 1] ==
		   _radio.conn_curr->handle)))))) {
   10068:	0032      	movs	r2, r6
	      (_radio.fc_req != _radio.fc_ack) &&
		(((_radio.fc_req == 0) &&
		  (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] ==
		   _radio.conn_curr->handle)) ||
		 ((_radio.fc_req != 0) &&
		  (_radio.fc_handle[_radio.fc_req - 1] ==
   1006a:	5cf3      	ldrb	r3, [r6, r3]
		   _radio.conn_curr->handle)))))) {
   1006c:	32fc      	adds	r2, #252	; 0xfc
	      (_radio.fc_req != _radio.fc_ack) &&
		(((_radio.fc_req == 0) &&
		  (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] ==
		   _radio.conn_curr->handle)) ||
		 ((_radio.fc_req != 0) &&
		  (_radio.fc_handle[_radio.fc_req - 1] ==
   1006e:	33b7      	adds	r3, #183	; 0xb7
		   _radio.conn_curr->handle)))))) {
   10070:	6951      	ldr	r1, [r2, #20]
	      (_radio.fc_req != _radio.fc_ack) &&
		(((_radio.fc_req == 0) &&
		  (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] ==
		   _radio.conn_curr->handle)) ||
		 ((_radio.fc_req != 0) &&
		  (_radio.fc_handle[_radio.fc_req - 1] ==
   10072:	005b      	lsls	r3, r3, #1
   10074:	18f3      	adds	r3, r6, r3
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
	      (_radio.fc_req != _radio.fc_ack) &&
		(((_radio.fc_req == 0) &&
		  (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] ==
		   _radio.conn_curr->handle)) ||
		 ((_radio.fc_req != 0) &&
   10076:	88da      	ldrh	r2, [r3, #6]
   10078:	8c0b      	ldrh	r3, [r1, #32]
   1007a:	429a      	cmp	r2, r3
   1007c:	d001      	beq.n	10082 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x83>
   1007e:	f001 f9e2 	bl	11446 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x1447>
		  (_radio.fc_handle[_radio.fc_req - 1] ==
		   _radio.conn_curr->handle)))))) {
		u8_t ccm_rx_increment = 0;

		if (pdu_data_rx->len != 0) {
   10082:	7a79      	ldrb	r1, [r7, #9]
   10084:	2900      	cmp	r1, #0
   10086:	d101      	bne.n	1008c <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x8d>
   10088:	f000 fe93 	bl	10db2 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xdb3>
			/* If required, wait for CCM to finish
			 */
			if (_radio.conn_curr->enc_rx) {
   1008c:	0033      	movs	r3, r6
		  (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] ==
		   _radio.conn_curr->handle)) ||
		 ((_radio.fc_req != 0) &&
		  (_radio.fc_handle[_radio.fc_req - 1] ==
		   _radio.conn_curr->handle)))))) {
		u8_t ccm_rx_increment = 0;
   1008e:	2200      	movs	r2, #0

		if (pdu_data_rx->len != 0) {
			/* If required, wait for CCM to finish
			 */
			if (_radio.conn_curr->enc_rx) {
   10090:	33fc      	adds	r3, #252	; 0xfc
   10092:	695b      	ldr	r3, [r3, #20]
		  (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] ==
		   _radio.conn_curr->handle)) ||
		 ((_radio.fc_req != 0) &&
		  (_radio.fc_handle[_radio.fc_req - 1] ==
		   _radio.conn_curr->handle)))))) {
		u8_t ccm_rx_increment = 0;
   10094:	9212      	str	r2, [sp, #72]	; 0x48

		if (pdu_data_rx->len != 0) {
			/* If required, wait for CCM to finish
			 */
			if (_radio.conn_curr->enc_rx) {
   10096:	33c0      	adds	r3, #192	; 0xc0
   10098:	781b      	ldrb	r3, [r3, #0]
   1009a:	06db      	lsls	r3, r3, #27
   1009c:	d50f      	bpl.n	100be <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xbf>
				u32_t done;

				done = radio_ccm_is_done();
   1009e:	f7fb f831 	bl	b104 <radio_ccm_is_done>
				LL_ASSERT(done);

				ccm_rx_increment = 1;
   100a2:	2301      	movs	r3, #1
   100a4:	9312      	str	r3, [sp, #72]	; 0x48
			 */
			if (_radio.conn_curr->enc_rx) {
				u32_t done;

				done = radio_ccm_is_done();
				LL_ASSERT(done);
   100a6:	2800      	cmp	r0, #0
   100a8:	d109      	bne.n	100be <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xbf>
   100aa:	4b21      	ldr	r3, [pc, #132]	; (10130 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x131>)
   100ac:	4a23      	ldr	r2, [pc, #140]	; (1013c <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x13d>)
   100ae:	9301      	str	r3, [sp, #4]
   100b0:	4b20      	ldr	r3, [pc, #128]	; (10134 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x135>)
   100b2:	4923      	ldr	r1, [pc, #140]	; (10140 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x141>)
   100b4:	9300      	str	r3, [sp, #0]
   100b6:	4823      	ldr	r0, [pc, #140]	; (10144 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x145>)
   100b8:	4b23      	ldr	r3, [pc, #140]	; (10148 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x149>)
   100ba:	f001 f99d 	bl	113f8 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x13f9>

				ccm_rx_increment = 1;
			}

			/* MIC Failure Check or data rx during pause */
			if (((_radio.conn_curr->enc_rx)	&&
   100be:	0033      	movs	r3, r6
   100c0:	33fc      	adds	r3, #252	; 0xfc
   100c2:	695b      	ldr	r3, [r3, #20]
   100c4:	33c0      	adds	r3, #192	; 0xc0
   100c6:	781b      	ldrb	r3, [r3, #0]
   100c8:	06db      	lsls	r3, r3, #27
   100ca:	d408      	bmi.n	100de <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xdf>
			     !radio_ccm_mic_is_valid()) ||
			    ((_radio.conn_curr->pause_rx) &&
   100cc:	0033      	movs	r3, r6
   100ce:	33fc      	adds	r3, #252	; 0xfc
   100d0:	695d      	ldr	r5, [r3, #20]
   100d2:	002b      	movs	r3, r5
   100d4:	33c0      	adds	r3, #192	; 0xc0
				ccm_rx_increment = 1;
			}

			/* MIC Failure Check or data rx during pause */
			if (((_radio.conn_curr->enc_rx)	&&
			     !radio_ccm_mic_is_valid()) ||
   100d6:	781a      	ldrb	r2, [r3, #0]
   100d8:	0752      	lsls	r2, r2, #29
   100da:	d412      	bmi.n	10102 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x103>
   100dc:	e038      	b.n	10150 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x151>
   100de:	f7fb f835 	bl	b14c <radio_ccm_mic_is_valid>

				ccm_rx_increment = 1;
			}

			/* MIC Failure Check or data rx during pause */
			if (((_radio.conn_curr->enc_rx)	&&
   100e2:	2800      	cmp	r0, #0
   100e4:	d1f2      	bne.n	100cc <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xcd>
			     !radio_ccm_mic_is_valid()) ||
			    ((_radio.conn_curr->pause_rx) &&
			     (pdu_data_rx->ll_id != PDU_DATA_LLID_CTRL))) {
				_radio.state = STATE_CLOSE;
   100e6:	2303      	movs	r3, #3
   100e8:	7433      	strb	r3, [r6, #16]
				radio_disable();
   100ea:	f7fa fdc1 	bl	ac70 <radio_disable>

				/* assert if radio packet ptr is not set and
				 * radio started tx */
				LL_ASSERT(!radio_is_ready());
   100ee:	f7fa fdd3 	bl	ac98 <radio_is_ready>
   100f2:	1e04      	subs	r4, r0, #0
   100f4:	d00f      	beq.n	10116 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x117>
   100f6:	4b0e      	ldr	r3, [pc, #56]	; (10130 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x131>)
   100f8:	9301      	str	r3, [sp, #4]
   100fa:	4b0e      	ldr	r3, [pc, #56]	; (10134 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x135>)
   100fc:	9300      	str	r3, [sp, #0]
   100fe:	4b12      	ldr	r3, [pc, #72]	; (10148 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x149>)
   10100:	e004      	b.n	1010c <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x10d>
			}

			/* MIC Failure Check or data rx during pause */
			if (((_radio.conn_curr->enc_rx)	&&
			     !radio_ccm_mic_is_valid()) ||
			    ((_radio.conn_curr->pause_rx) &&
   10102:	7a3a      	ldrb	r2, [r7, #8]
   10104:	43d2      	mvns	r2, r2
   10106:	0792      	lsls	r2, r2, #30
   10108:	d1ed      	bne.n	100e6 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xe7>
   1010a:	e021      	b.n	10150 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x151>
				_radio.state = STATE_CLOSE;
				radio_disable();

				/* assert if radio packet ptr is not set and
				 * radio started tx */
				LL_ASSERT(!radio_is_ready());
   1010c:	4a0b      	ldr	r2, [pc, #44]	; (1013c <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x13d>)
   1010e:	490c      	ldr	r1, [pc, #48]	; (10140 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x141>)
   10110:	480e      	ldr	r0, [pc, #56]	; (1014c <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x14d>)
   10112:	f001 f971 	bl	113f8 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x13f9>

				terminate_ind_rx_enqueue(_radio.conn_curr,
   10116:	36fc      	adds	r6, #252	; 0xfc
   10118:	213d      	movs	r1, #61	; 0x3d
   1011a:	6970      	ldr	r0, [r6, #20]
   1011c:	f7fd f946 	bl	d3ac <terminate_ind_rx_enqueue>
							 0x3d);

				connection_release(_radio.conn_curr);
   10120:	6970      	ldr	r0, [r6, #20]
   10122:	f7fd f80f 	bl	d144 <connection_release>
				_radio.conn_curr = NULL;
   10126:	6174      	str	r4, [r6, #20]
   10128:	f001 f987 	bl	1143a <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x143b>
   1012c:	200015c0 	.word	0x200015c0
   10130:	000154c4 	.word	0x000154c4
   10134:	000154c9 	.word	0x000154c9
   10138:	00018236 	.word	0x00018236
   1013c:	00015484 	.word	0x00015484
   10140:	0001548b 	.word	0x0001548b
   10144:	00017239 	.word	0x00017239
   10148:	00018300 	.word	0x00018300
   1014c:	00016f28 	.word	0x00016f28
				return 1; /* terminated */
			}

#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_PING)
			/* stop authenticated payload (pre) timeout */
			_radio.conn_curr->appto_expire = 0;
   10150:	2400      	movs	r4, #0
			_radio.conn_curr->apto_expire = 0;
   10152:	1d2a      	adds	r2, r5, #4
				return 1; /* terminated */
			}

#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_PING)
			/* stop authenticated payload (pre) timeout */
			_radio.conn_curr->appto_expire = 0;
   10154:	87ec      	strh	r4, [r5, #62]	; 0x3e
			_radio.conn_curr->apto_expire = 0;
   10156:	87d4      	strh	r4, [r2, #62]	; 0x3e
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

			switch (pdu_data_rx->ll_id) {
   10158:	7a3a      	ldrb	r2, [r7, #8]
   1015a:	0792      	lsls	r2, r2, #30
   1015c:	0f92      	lsrs	r2, r2, #30
   1015e:	42a2      	cmp	r2, r4
   10160:	d101      	bne.n	10166 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x167>
   10162:	f000 fe20 	bl	10da6 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xda7>
   10166:	2a02      	cmp	r2, #2
   10168:	d800      	bhi.n	1016c <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x16d>
   1016a:	e13c      	b.n	103e6 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x3e7>
{
	struct pdu_data *pdu_data_rx;
	u8_t nack = 0;

	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
	switch (pdu_data_rx->payload.llctrl.opcode) {
   1016c:	7afa      	ldrb	r2, [r7, #11]
   1016e:	920e      	str	r2, [sp, #56]	; 0x38
   10170:	2a18      	cmp	r2, #24
   10172:	d901      	bls.n	10178 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x179>
   10174:	f000 fdf6 	bl	10d64 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xd65>
   10178:	0010      	movs	r0, r2
   1017a:	f7f0 f807 	bl	18c <__gnu_thumb1_case_uhi>
   1017e:	0019      	.short	0x0019
   10180:	00c50090 	.word	0x00c50090
   10184:	00e100c9 	.word	0x00e100c9
   10188:	010600f9 	.word	0x010600f9
   1018c:	013703a4 	.word	0x013703a4
   10190:	017e016c 	.word	0x017e016c
   10194:	01a3018c 	.word	0x01a3018c
   10198:	0137022a 	.word	0x0137022a
   1019c:	00f60231 	.word	0x00f60231
   101a0:	038c02f2 	.word	0x038c02f2
   101a4:	03e603a2 	.word	0x03e603a2
   101a8:	04cb03e6 	.word	0x04cb03e6
   101ac:	056d0541 	.word	0x056d0541
	packet_rx_callback();
}

static u32_t conn_update(struct connection *conn, struct pdu_data *pdu_data_rx)
{
	if (((pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.instant -
   101b0:	7dbb      	ldrb	r3, [r7, #22]
   101b2:	7d7a      	ldrb	r2, [r7, #21]
   101b4:	021b      	lsls	r3, r3, #8
   101b6:	4313      	orrs	r3, r2
   101b8:	8c6a      	ldrh	r2, [r5, #34]	; 0x22
   101ba:	1a9b      	subs	r3, r3, r2
   101bc:	4adc      	ldr	r2, [pc, #880]	; (10530 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x531>)
   101be:	b29b      	uxth	r3, r3
   101c0:	4293      	cmp	r3, r2
   101c2:	dd01      	ble.n	101c8 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x1c9>
   101c4:	f001 f931 	bl	1142a <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x142b>
	      conn->event_counter) & 0xFFFF) > 0x7FFF) {
		return 1;
	}

	LL_ASSERT((conn->llcp_req == conn->llcp_ack) ||
   101c8:	002b      	movs	r3, r5
   101ca:	002a      	movs	r2, r5
   101cc:	3369      	adds	r3, #105	; 0x69
   101ce:	3268      	adds	r2, #104	; 0x68
   101d0:	781b      	ldrb	r3, [r3, #0]
   101d2:	7812      	ldrb	r2, [r2, #0]
   101d4:	429a      	cmp	r2, r3
   101d6:	d015      	beq.n	10204 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x205>
   101d8:	002a      	movs	r2, r5
   101da:	326a      	adds	r2, #106	; 0x6a
   101dc:	7812      	ldrb	r2, [r2, #0]
   101de:	2a01      	cmp	r2, #1
   101e0:	d106      	bne.n	101f0 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x1f1>
   101e2:	002a      	movs	r2, r5
   101e4:	3295      	adds	r2, #149	; 0x95
   101e6:	7811      	ldrb	r1, [r2, #0]
   101e8:	2207      	movs	r2, #7
   101ea:	400a      	ands	r2, r1
   101ec:	2a05      	cmp	r2, #5
   101ee:	d009      	beq.n	10204 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x205>
   101f0:	4bd0      	ldr	r3, [pc, #832]	; (10534 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x535>)
   101f2:	4ad1      	ldr	r2, [pc, #836]	; (10538 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x539>)
   101f4:	9301      	str	r3, [sp, #4]
   101f6:	4bd1      	ldr	r3, [pc, #836]	; (1053c <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x53d>)
   101f8:	49d1      	ldr	r1, [pc, #836]	; (10540 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x541>)
   101fa:	9300      	str	r3, [sp, #0]
   101fc:	48d1      	ldr	r0, [pc, #836]	; (10544 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x545>)
   101fe:	4bd2      	ldr	r3, [pc, #840]	; (10548 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x549>)
   10200:	f001 f8fa 	bl	113f8 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x13f9>
		    LLCP_CONN_STATE_RSP_WAIT)));

	/* set mutex, if only not already set. As a master the mutex shall
	 * be set, but a slave we accept it as new 'set' of mutex.
	 */
	if (_radio.conn_upd == 0) {
   10204:	22c2      	movs	r2, #194	; 0xc2
   10206:	0052      	lsls	r2, r2, #1
   10208:	58b1      	ldr	r1, [r6, r2]
   1020a:	2900      	cmp	r1, #0
   1020c:	d10f      	bne.n	1022e <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x22f>
		LL_ASSERT(conn->role.slave.role != 0);
   1020e:	0029      	movs	r1, r5
   10210:	3144      	adds	r1, #68	; 0x44
   10212:	7809      	ldrb	r1, [r1, #0]
   10214:	07c9      	lsls	r1, r1, #31
   10216:	d409      	bmi.n	1022c <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x22d>
   10218:	4bc6      	ldr	r3, [pc, #792]	; (10534 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x535>)
   1021a:	4ac7      	ldr	r2, [pc, #796]	; (10538 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x539>)
   1021c:	9301      	str	r3, [sp, #4]
   1021e:	4bc7      	ldr	r3, [pc, #796]	; (1053c <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x53d>)
   10220:	49c7      	ldr	r1, [pc, #796]	; (10540 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x541>)
   10222:	9300      	str	r3, [sp, #0]
   10224:	48c9      	ldr	r0, [pc, #804]	; (1054c <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x54d>)
   10226:	4bc8      	ldr	r3, [pc, #800]	; (10548 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x549>)
   10228:	f001 f8e6 	bl	113f8 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x13f9>

		_radio.conn_upd = conn;
   1022c:	50b5      	str	r5, [r6, r2]
	}

	conn->llcp.connection_update.win_size =
   1022e:	002a      	movs	r2, r5
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.win_size;
	conn->llcp.connection_update.win_offset_us =
   10230:	0028      	movs	r0, r5

		_radio.conn_upd = conn;
	}

	conn->llcp.connection_update.win_size =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.win_size;
   10232:	7b39      	ldrb	r1, [r7, #12]
		LL_ASSERT(conn->role.slave.role != 0);

		_radio.conn_upd = conn;
	}

	conn->llcp.connection_update.win_size =
   10234:	3294      	adds	r2, #148	; 0x94
   10236:	7011      	strb	r1, [r2, #0]
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.win_size;
	conn->llcp.connection_update.win_offset_us =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.win_offset *
   10238:	7bba      	ldrb	r2, [r7, #14]
   1023a:	7b79      	ldrb	r1, [r7, #13]
   1023c:	0212      	lsls	r2, r2, #8
		_radio.conn_upd = conn;
	}

	conn->llcp.connection_update.win_size =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.win_size;
	conn->llcp.connection_update.win_offset_us =
   1023e:	430a      	orrs	r2, r1
   10240:	49c3      	ldr	r1, [pc, #780]	; (10550 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x551>)
   10242:	308c      	adds	r0, #140	; 0x8c
   10244:	434a      	muls	r2, r1
   10246:	6002      	str	r2, [r0, #0]
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.win_offset *
		1250;
	conn->llcp.connection_update.interval =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.interval;
   10248:	7c3a      	ldrb	r2, [r7, #16]
   1024a:	7bf9      	ldrb	r1, [r7, #15]
   1024c:	0212      	lsls	r2, r2, #8
   1024e:	430a      	orrs	r2, r1
	conn->llcp.connection_update.win_size =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.win_size;
	conn->llcp.connection_update.win_offset_us =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.win_offset *
		1250;
	conn->llcp.connection_update.interval =
   10250:	0029      	movs	r1, r5
   10252:	316c      	adds	r1, #108	; 0x6c
   10254:	800a      	strh	r2, [r1, #0]
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.interval;
	conn->llcp.connection_update.latency =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.latency;
   10256:	7cba      	ldrb	r2, [r7, #18]
   10258:	7c79      	ldrb	r1, [r7, #17]
   1025a:	0212      	lsls	r2, r2, #8
   1025c:	430a      	orrs	r2, r1
	conn->llcp.connection_update.win_offset_us =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.win_offset *
		1250;
	conn->llcp.connection_update.interval =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.interval;
	conn->llcp.connection_update.latency =
   1025e:	0029      	movs	r1, r5
   10260:	316e      	adds	r1, #110	; 0x6e
   10262:	800a      	strh	r2, [r1, #0]
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.latency;
	conn->llcp.connection_update.timeout =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.timeout;
   10264:	7d3a      	ldrb	r2, [r7, #20]
   10266:	7cf9      	ldrb	r1, [r7, #19]
   10268:	0212      	lsls	r2, r2, #8
   1026a:	430a      	orrs	r2, r1
		1250;
	conn->llcp.connection_update.interval =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.interval;
	conn->llcp.connection_update.latency =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.latency;
	conn->llcp.connection_update.timeout =
   1026c:	0029      	movs	r1, r5
   1026e:	3170      	adds	r1, #112	; 0x70
   10270:	800a      	strh	r2, [r1, #0]
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.timeout;
	conn->llcp.connection_update.instant =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.instant;
   10272:	7dba      	ldrb	r2, [r7, #22]
   10274:	7d79      	ldrb	r1, [r7, #21]
   10276:	0212      	lsls	r2, r2, #8
   10278:	430a      	orrs	r2, r1
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.interval;
	conn->llcp.connection_update.latency =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.latency;
	conn->llcp.connection_update.timeout =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.timeout;
	conn->llcp.connection_update.instant =
   1027a:	0029      	movs	r1, r5
   1027c:	3174      	adds	r1, #116	; 0x74
   1027e:	800a      	strh	r2, [r1, #0]
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.instant;
	conn->llcp.connection_update.state = LLCP_CONN_STATE_INPROG;
	conn->llcp.connection_update.is_internal = 0;
   10280:	22e0      	movs	r2, #224	; 0xe0
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.latency;
	conn->llcp.connection_update.timeout =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.timeout;
	conn->llcp.connection_update.instant =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.instant;
	conn->llcp.connection_update.state = LLCP_CONN_STATE_INPROG;
   10282:	3121      	adds	r1, #33	; 0x21
   10284:	7808      	ldrb	r0, [r1, #0]
	conn->llcp.connection_update.is_internal = 0;

	conn->llcp_type = LLCP_CONNECTION_UPDATE;
	conn->llcp_ack--;
   10286:	3b01      	subs	r3, #1
	conn->llcp.connection_update.timeout =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.timeout;
	conn->llcp.connection_update.instant =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.instant;
	conn->llcp.connection_update.state = LLCP_CONN_STATE_INPROG;
	conn->llcp.connection_update.is_internal = 0;
   10288:	4002      	ands	r2, r0
   1028a:	700a      	strb	r2, [r1, #0]

	conn->llcp_type = LLCP_CONNECTION_UPDATE;
   1028c:	002a      	movs	r2, r5
   1028e:	2101      	movs	r1, #1
   10290:	326a      	adds	r2, #106	; 0x6a
   10292:	7011      	strb	r1, [r2, #0]
	conn->llcp_ack--;
   10294:	3a01      	subs	r2, #1
   10296:	7013      	strb	r3, [r2, #0]
	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
	switch (pdu_data_rx->payload.llctrl.opcode) {
	case PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND:
		if (conn_update(_radio.conn_curr, pdu_data_rx) == 0) {
			/* conn param req procedure, if any, is complete */
			_radio.conn_curr->procedure_expire = 0;
   10298:	2400      	movs	r4, #0
   1029a:	f000 fcdb 	bl	10c54 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xc55>
}

static u32_t chan_map_update(struct connection *conn,
			     struct pdu_data *pdu_data_rx)
{
	if (((pdu_data_rx->payload.llctrl.ctrldata.chan_map_ind.instant -
   1029e:	7cbb      	ldrb	r3, [r7, #18]
   102a0:	7c7a      	ldrb	r2, [r7, #17]
   102a2:	021b      	lsls	r3, r3, #8
   102a4:	4313      	orrs	r3, r2
   102a6:	8c6a      	ldrh	r2, [r5, #34]	; 0x22
   102a8:	1a9b      	subs	r3, r3, r2
   102aa:	4aa1      	ldr	r2, [pc, #644]	; (10530 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x531>)
   102ac:	b29b      	uxth	r3, r3
   102ae:	4293      	cmp	r3, r2
   102b0:	dd01      	ble.n	102b6 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x2b7>
   102b2:	f001 f8ba 	bl	1142a <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x142b>
	      conn->event_counter) & 0xffff) > 0x7fff) {
		return 1;
	}

	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   102b6:	002e      	movs	r6, r5
   102b8:	002b      	movs	r3, r5
   102ba:	3669      	adds	r6, #105	; 0x69
   102bc:	3368      	adds	r3, #104	; 0x68
   102be:	781a      	ldrb	r2, [r3, #0]
   102c0:	7833      	ldrb	r3, [r6, #0]
   102c2:	429a      	cmp	r2, r3
   102c4:	d006      	beq.n	102d4 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x2d5>
   102c6:	4b9b      	ldr	r3, [pc, #620]	; (10534 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x535>)
   102c8:	9301      	str	r3, [sp, #4]
   102ca:	4b9c      	ldr	r3, [pc, #624]	; (1053c <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x53d>)
   102cc:	9300      	str	r3, [sp, #0]
   102ce:	4ba1      	ldr	r3, [pc, #644]	; (10554 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x555>)
   102d0:	f000 fd05 	bl	10cde <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xcdf>

	memcpy(&conn->llcp.chan_map.chm[0],
   102d4:	0028      	movs	r0, r5
   102d6:	0039      	movs	r1, r7
   102d8:	2205      	movs	r2, #5
   102da:	306d      	adds	r0, #109	; 0x6d
   102dc:	310c      	adds	r1, #12
   102de:	f7f0 fd2c 	bl	d3a <memcpy>
	       &pdu_data_rx->payload.llctrl.ctrldata.chan_map_ind.chm[0],
	       sizeof(conn->llcp.chan_map.chm));
	conn->llcp.chan_map.instant =
		pdu_data_rx->payload.llctrl.ctrldata.chan_map_ind.instant;
   102e2:	7cbb      	ldrb	r3, [r7, #18]
   102e4:	7c7a      	ldrb	r2, [r7, #17]
   102e6:	021b      	lsls	r3, r3, #8
   102e8:	4313      	orrs	r3, r2
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);

	memcpy(&conn->llcp.chan_map.chm[0],
	       &pdu_data_rx->payload.llctrl.ctrldata.chan_map_ind.chm[0],
	       sizeof(conn->llcp.chan_map.chm));
	conn->llcp.chan_map.instant =
   102ea:	002a      	movs	r2, r5
   102ec:	3272      	adds	r2, #114	; 0x72
   102ee:	8013      	strh	r3, [r2, #0]
		pdu_data_rx->payload.llctrl.ctrldata.chan_map_ind.instant;
	conn->llcp.chan_map.initiate = 0;
   102f0:	002b      	movs	r3, r5
   102f2:	2400      	movs	r4, #0
   102f4:	336c      	adds	r3, #108	; 0x6c
   102f6:	701c      	strb	r4, [r3, #0]

	conn->llcp_type = LLCP_CHAN_MAP;
   102f8:	2302      	movs	r3, #2
   102fa:	356a      	adds	r5, #106	; 0x6a
   102fc:	702b      	strb	r3, [r5, #0]
	conn->llcp_ack--;
   102fe:	7833      	ldrb	r3, [r6, #0]
   10300:	3b01      	subs	r3, #1
   10302:	7033      	strb	r3, [r6, #0]
   10304:	f000 fd6d 	bl	10de2 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xde3>
		break;

	case PDU_DATA_LLCTRL_TYPE_TERMINATE_IND:
		/* Ack and then terminate */
		_radio.conn_curr->llcp_terminate.reason_peer =
			pdu_data_rx->payload.llctrl.ctrldata.terminate_ind.error_code;
   10308:	7b3b      	ldrb	r3, [r7, #12]
		}
		break;

	case PDU_DATA_LLCTRL_TYPE_TERMINATE_IND:
		/* Ack and then terminate */
		_radio.conn_curr->llcp_terminate.reason_peer =
   1030a:	35a7      	adds	r5, #167	; 0xa7
   1030c:	f001 f88f 	bl	1142e <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x142f>
		break;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_ENC)
	case PDU_DATA_LLCTRL_TYPE_ENC_REQ:
		/* things from master stored for session key calculation */
		memcpy(&_radio.conn_curr->llcp.encryption.skd[0],
   10310:	0028      	movs	r0, r5
   10312:	0039      	movs	r1, r7
   10314:	2208      	movs	r2, #8
   10316:	3116      	adds	r1, #22
   10318:	3087      	adds	r0, #135	; 0x87
   1031a:	f7f0 fd0e 	bl	d3a <memcpy>
		       &pdu_data_rx->payload.llctrl.ctrldata.enc_req.skdm[0],
		       8);
		memcpy(&_radio.conn_curr->ccm_rx.iv[0],
   1031e:	0039      	movs	r1, r7
   10320:	36fc      	adds	r6, #252	; 0xfc
   10322:	6970      	ldr	r0, [r6, #20]
   10324:	2204      	movs	r2, #4
   10326:	311e      	adds	r1, #30
   10328:	30da      	adds	r0, #218	; 0xda
   1032a:	f7f0 fd06 	bl	d3a <memcpy>
		       &pdu_data_rx->payload.llctrl.ctrldata.enc_req.ivm[0], 4);

		/* pause rx data packets */
		_radio.conn_curr->pause_rx = 1;
   1032e:	6972      	ldr	r2, [r6, #20]
   10330:	2004      	movs	r0, #4
   10332:	0011      	movs	r1, r2
   10334:	31c0      	adds	r1, #192	; 0xc0
   10336:	780b      	ldrb	r3, [r1, #0]
   10338:	4303      	orrs	r3, r0
   1033a:	700b      	strb	r3, [r1, #0]

		/* Start Procedure Timeout (this will not replace terminate
		 * procedure which always gets place before any packets
		 * going out, hence safe by design)
		 */
		_radio.conn_curr->procedure_expire =
   1033c:	8f13      	ldrh	r3, [r2, #56]	; 0x38
   1033e:	e051      	b.n	103e4 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x3e5>
		*rx_enqueue = 1;
		break;

	case PDU_DATA_LLCTRL_TYPE_ENC_RSP:
		/* things sent by slave stored for session key calculation */
		memcpy(&_radio.conn_curr->llcp.encryption.skd[8],
   10340:	0028      	movs	r0, r5
   10342:	0039      	movs	r1, r7
   10344:	2208      	movs	r2, #8
   10346:	310c      	adds	r1, #12
   10348:	308f      	adds	r0, #143	; 0x8f
   1034a:	f7f0 fcf6 	bl	d3a <memcpy>
		       &pdu_data_rx->payload.llctrl.ctrldata.enc_rsp.skds[0],
		       8);
		memcpy(&_radio.conn_curr->ccm_rx.iv[4],
   1034e:	0039      	movs	r1, r7
   10350:	36fc      	adds	r6, #252	; 0xfc
   10352:	6970      	ldr	r0, [r6, #20]
   10354:	2204      	movs	r2, #4
   10356:	3114      	adds	r1, #20
   10358:	30de      	adds	r0, #222	; 0xde
   1035a:	f7f0 fcee 	bl	d3a <memcpy>
		       &pdu_data_rx->payload.llctrl.ctrldata.enc_rsp.ivs[0],
		       4);

		/* pause rx data packets */
		_radio.conn_curr->pause_rx = 1;
   1035e:	2104      	movs	r1, #4
   10360:	6973      	ldr	r3, [r6, #20]
   10362:	33c0      	adds	r3, #192	; 0xc0
   10364:	781a      	ldrb	r2, [r3, #0]
   10366:	430a      	orrs	r2, r1
   10368:	701a      	strb	r2, [r3, #0]
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	struct radio_pdu_node_tx *tx_release = NULL;
	u8_t is_empty_pdu_tx_retry;
	struct pdu_data *pdu_data_rx;
	struct pdu_data *pdu_data_tx;
	u8_t rx_enqueue = 0;
   1036a:	2400      	movs	r4, #0
   1036c:	f000 fd39 	bl	10de2 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xde3>
		/* pause rx data packets */
		_radio.conn_curr->pause_rx = 1;
		break;

	case PDU_DATA_LLCTRL_TYPE_START_ENC_REQ:
		LL_ASSERT(_radio.conn_curr->llcp_req ==
   10370:	002b      	movs	r3, r5
   10372:	002a      	movs	r2, r5
   10374:	3368      	adds	r3, #104	; 0x68
   10376:	3269      	adds	r2, #105	; 0x69
   10378:	7819      	ldrb	r1, [r3, #0]
   1037a:	7813      	ldrb	r3, [r2, #0]
   1037c:	428b      	cmp	r3, r1
   1037e:	d110      	bne.n	103a2 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x3a3>
			  _radio.conn_curr->llcp_ack);

		/* start enc rsp to be scheduled in master prepare */
		_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
   10380:	2103      	movs	r1, #3
   10382:	356a      	adds	r5, #106	; 0x6a
   10384:	7029      	strb	r1, [r5, #0]
		_radio.conn_curr->llcp_ack--;
   10386:	3b01      	subs	r3, #1
   10388:	e083      	b.n	10492 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x493>
		break;

	case PDU_DATA_LLCTRL_TYPE_START_ENC_RSP:
		if (_radio.role == ROLE_SLAVE) {
   1038a:	7bf2      	ldrb	r2, [r6, #15]
   1038c:	b2d2      	uxtb	r2, r2
   1038e:	2a03      	cmp	r2, #3
   10390:	d116      	bne.n	103c0 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x3c1>

#if !defined(CONFIG_BLUETOOTH_CONTROLLER_FAST_ENC)
			LL_ASSERT(_radio.conn_curr->llcp_req ==
   10392:	002b      	movs	r3, r5
   10394:	0029      	movs	r1, r5
   10396:	3368      	adds	r3, #104	; 0x68
   10398:	3169      	adds	r1, #105	; 0x69
   1039a:	7818      	ldrb	r0, [r3, #0]
   1039c:	780b      	ldrb	r3, [r1, #0]
   1039e:	4283      	cmp	r3, r0
   103a0:	d009      	beq.n	103b6 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x3b7>
   103a2:	4b64      	ldr	r3, [pc, #400]	; (10534 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x535>)
   103a4:	4a64      	ldr	r2, [pc, #400]	; (10538 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x539>)
   103a6:	9301      	str	r3, [sp, #4]
   103a8:	4b64      	ldr	r3, [pc, #400]	; (1053c <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x53d>)
   103aa:	4965      	ldr	r1, [pc, #404]	; (10540 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x541>)
   103ac:	9300      	str	r3, [sp, #0]
   103ae:	486a      	ldr	r0, [pc, #424]	; (10558 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x559>)
   103b0:	4b6a      	ldr	r3, [pc, #424]	; (1055c <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x55d>)
   103b2:	f001 f821 	bl	113f8 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x13f9>
				  _radio.conn_curr->llcp_ack);

			/* start enc rsp to be scheduled in slave  prepare */
			_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
   103b6:	356a      	adds	r5, #106	; 0x6a
			_radio.conn_curr->llcp_ack--;
   103b8:	3b01      	subs	r3, #1
#if !defined(CONFIG_BLUETOOTH_CONTROLLER_FAST_ENC)
			LL_ASSERT(_radio.conn_curr->llcp_req ==
				  _radio.conn_curr->llcp_ack);

			/* start enc rsp to be scheduled in slave  prepare */
			_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
   103ba:	702a      	strb	r2, [r5, #0]
			_radio.conn_curr->llcp_ack--;
   103bc:	700b      	strb	r3, [r1, #0]
   103be:	e003      	b.n	103c8 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x3c9>
#endif /* CONFIG_BLUETOOTH_CONTROLLER_FAST_ENC */

		} else {
			/* resume data packet rx and tx */
			_radio.conn_curr->pause_rx = 0;
			_radio.conn_curr->pause_tx = 0;
   103c0:	22f3      	movs	r2, #243	; 0xf3
			_radio.conn_curr->pause_tx = 0;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_FAST_ENC */

		} else {
			/* resume data packet rx and tx */
			_radio.conn_curr->pause_rx = 0;
   103c2:	7819      	ldrb	r1, [r3, #0]
			_radio.conn_curr->pause_tx = 0;
   103c4:	400a      	ands	r2, r1
   103c6:	701a      	strb	r2, [r3, #0]
		}

		/* enqueue the start enc resp (encryption change/refresh) */
		if (_radio.conn_curr->refresh) {
   103c8:	4b65      	ldr	r3, [pc, #404]	; (10560 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x561>)
   103ca:	2040      	movs	r0, #64	; 0x40
   103cc:	33fc      	adds	r3, #252	; 0xfc
   103ce:	695a      	ldr	r2, [r3, #20]
   103d0:	0011      	movs	r1, r2
   103d2:	31c0      	adds	r1, #192	; 0xc0
   103d4:	780b      	ldrb	r3, [r1, #0]
   103d6:	4203      	tst	r3, r0
   103d8:	d003      	beq.n	103e2 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x3e3>
			_radio.conn_curr->refresh = 0;
   103da:	4383      	bics	r3, r0
   103dc:	700b      	strb	r3, [r1, #0]

			/* key refresh event */
			radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   103de:	2309      	movs	r3, #9
   103e0:	713b      	strb	r3, [r7, #4]
		}
		*rx_enqueue = 1;

		/* Procedure complete */
		_radio.conn_curr->procedure_expire = 0;
   103e2:	2300      	movs	r3, #0
   103e4:	8753      	strh	r3, [r2, #58]	; 0x3a
			_radio.conn_curr->refresh = 0;

			/* key refresh event */
			radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
		}
		*rx_enqueue = 1;
   103e6:	2401      	movs	r4, #1
   103e8:	f000 fcfb 	bl	10de2 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xde3>
		struct pdu_data_llctrl_feature_req *req;

		req = &pdu_data_rx->payload.llctrl.ctrldata.feature_req;

		/* AND the feature set to get Feature USED */
		_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
   103ec:	7b3b      	ldrb	r3, [r7, #12]
   103ee:	7b79      	ldrb	r1, [r7, #13]
   103f0:	4a5c      	ldr	r2, [pc, #368]	; (10564 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x565>)
   103f2:	0209      	lsls	r1, r1, #8
   103f4:	4313      	orrs	r3, r2
   103f6:	002c      	movs	r4, r5
   103f8:	430b      	orrs	r3, r1
   103fa:	7bb9      	ldrb	r1, [r7, #14]
{
	struct radio_pdu_node_tx *node_tx;
	struct pdu_data *pdu_ctrl_tx;

	/* acquire tx mem */
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   103fc:	0030      	movs	r0, r6
		struct pdu_data_llctrl_feature_req *req;

		req = &pdu_data_rx->payload.llctrl.ctrldata.feature_req;

		/* AND the feature set to get Feature USED */
		_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
   103fe:	0409      	lsls	r1, r1, #16
   10400:	430b      	orrs	r3, r1
   10402:	001a      	movs	r2, r3
   10404:	3498      	adds	r4, #152	; 0x98
   10406:	6823      	ldr	r3, [r4, #0]
{
	struct radio_pdu_node_tx *node_tx;
	struct pdu_data *pdu_ctrl_tx;

	/* acquire tx mem */
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   10408:	3059      	adds	r0, #89	; 0x59
		struct pdu_data_llctrl_feature_req *req;

		req = &pdu_data_rx->payload.llctrl.ctrldata.feature_req;

		/* AND the feature set to get Feature USED */
		_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
   1040a:	03db      	lsls	r3, r3, #15
   1040c:	0bdb      	lsrs	r3, r3, #15
   1040e:	4013      	ands	r3, r2
   10410:	6023      	str	r3, [r4, #0]
{
	struct radio_pdu_node_tx *node_tx;
	struct pdu_data *pdu_ctrl_tx;

	/* acquire tx mem */
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   10412:	30ff      	adds	r0, #255	; 0xff
   10414:	f7fa fa3c 	bl	a890 <mem_acquire>
   10418:	1e06      	subs	r6, r0, #0
	LL_ASSERT(node_tx);
   1041a:	d106      	bne.n	1042a <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x42b>
   1041c:	4b45      	ldr	r3, [pc, #276]	; (10534 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x535>)
   1041e:	9301      	str	r3, [sp, #4]
   10420:	4b46      	ldr	r3, [pc, #280]	; (1053c <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x53d>)
   10422:	9300      	str	r3, [sp, #0]
   10424:	4b50      	ldr	r3, [pc, #320]	; (10568 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x569>)
   10426:	f000 fca9 	bl	10d7c <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xd7d>

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1042a:	2203      	movs	r2, #3
   1042c:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
		sizeof(struct pdu_data_llctrl_feature_rsp);
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
	memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.feature_rsp.features[0],
   1042e:	2100      	movs	r1, #0
	/* acquire tx mem */
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
	LL_ASSERT(node_tx);

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   10430:	4313      	orrs	r3, r2
   10432:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   10434:	2309      	movs	r3, #9
		sizeof(struct pdu_data_llctrl_feature_rsp);
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
	memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.feature_rsp.features[0],
   10436:	3205      	adds	r2, #5
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
	LL_ASSERT(node_tx);

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   10438:	7143      	strb	r3, [r0, #5]
		sizeof(struct pdu_data_llctrl_feature_rsp);
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
   1043a:	71c3      	strb	r3, [r0, #7]
	memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.feature_rsp.features[0],
   1043c:	3008      	adds	r0, #8
   1043e:	f7f0 fca6 	bl	d8e <memset>
		0x00,
		sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.feature_rsp.features));
	pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[0] =
   10442:	7823      	ldrb	r3, [r4, #0]
	pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[1] =
		(conn->llcp_features >> 8) & 0xFF;
	pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[2] =
		(conn->llcp_features >> 16) & 0xFF;

	ctrl_tx_enqueue(conn, node_tx);
   10444:	0031      	movs	r1, r6
		sizeof(struct pdu_data_llctrl_feature_rsp);
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
	memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.feature_rsp.features[0],
		0x00,
		sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.feature_rsp.features));
	pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[0] =
   10446:	7233      	strb	r3, [r6, #8]
		conn->llcp_features & 0xFF;
	pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[1] =
   10448:	6823      	ldr	r3, [r4, #0]
   1044a:	0a1b      	lsrs	r3, r3, #8
   1044c:	7273      	strb	r3, [r6, #9]
		(conn->llcp_features >> 8) & 0xFF;
	pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[2] =
   1044e:	6823      	ldr	r3, [r4, #0]
   10450:	0c1b      	lsrs	r3, r3, #16
   10452:	72b3      	strb	r3, [r6, #10]
   10454:	e3cf      	b.n	10bf6 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xbf7>
		struct pdu_data_llctrl_feature_rsp *rsp;

		rsp = &pdu_data_rx->payload.llctrl.ctrldata.feature_rsp;

		/* AND the feature set to get Feature USED */
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
   10456:	7b3b      	ldrb	r3, [r7, #12]
   10458:	4a42      	ldr	r2, [pc, #264]	; (10564 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x565>)
   1045a:	7b79      	ldrb	r1, [r7, #13]
   1045c:	4313      	orrs	r3, r2
   1045e:	0209      	lsls	r1, r1, #8
   10460:	0028      	movs	r0, r5
   10462:	430b      	orrs	r3, r1
   10464:	7bb9      	ldrb	r1, [r7, #14]
   10466:	3098      	adds	r0, #152	; 0x98
   10468:	0409      	lsls	r1, r1, #16
   1046a:	430b      	orrs	r3, r1
   1046c:	001a      	movs	r2, r3
   1046e:	6803      	ldr	r3, [r0, #0]
   10470:	03db      	lsls	r3, r3, #15
   10472:	0bdb      	lsrs	r3, r3, #15
   10474:	4013      	ands	r3, r2
   10476:	6003      	str	r3, [r0, #0]
   10478:	e0af      	b.n	105da <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x5db>
	}
	break;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_ENC)
	case PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_REQ:
		pause_enc_rsp_send(_radio.conn_curr);
   1047a:	0028      	movs	r0, r5
   1047c:	f7fd fee8 	bl	e250 <pause_enc_rsp_send>

		/* pause data packet rx */
		_radio.conn_curr->pause_rx = 1;
   10480:	0030      	movs	r0, r6

		/* key refresh */
		_radio.conn_curr->refresh = 1;

		/* disable receive encryption */
		_radio.conn_curr->enc_rx = 0;
   10482:	2344      	movs	r3, #68	; 0x44
#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_ENC)
	case PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_REQ:
		pause_enc_rsp_send(_radio.conn_curr);

		/* pause data packet rx */
		_radio.conn_curr->pause_rx = 1;
   10484:	30fc      	adds	r0, #252	; 0xfc
   10486:	6942      	ldr	r2, [r0, #20]
   10488:	32c0      	adds	r2, #192	; 0xc0
   1048a:	7811      	ldrb	r1, [r2, #0]

		/* key refresh */
		_radio.conn_curr->refresh = 1;

		/* disable receive encryption */
		_radio.conn_curr->enc_rx = 0;
   1048c:	430b      	orrs	r3, r1
   1048e:	2110      	movs	r1, #16
   10490:	438b      	bics	r3, r1
   10492:	7013      	strb	r3, [r2, #0]
   10494:	e769      	b.n	1036a <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x36b>
		break;

	case PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP:
		if (_radio.role == ROLE_MASTER) {
   10496:	7bf3      	ldrb	r3, [r6, #15]
   10498:	2b04      	cmp	r3, #4
   1049a:	d10a      	bne.n	104b2 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x4b3>
			/* reply with pause enc rsp */
			pause_enc_rsp_send(_radio.conn_curr);
   1049c:	0028      	movs	r0, r5
   1049e:	f7fd fed7 	bl	e250 <pause_enc_rsp_send>

			/* disable receive encryption */
			_radio.conn_curr->enc_rx = 0;
   104a2:	0033      	movs	r3, r6
   104a4:	2110      	movs	r1, #16
   104a6:	33fc      	adds	r3, #252	; 0xfc
   104a8:	695b      	ldr	r3, [r3, #20]
   104aa:	33c0      	adds	r3, #192	; 0xc0
   104ac:	781a      	ldrb	r2, [r3, #0]
   104ae:	438a      	bics	r2, r1
   104b0:	701a      	strb	r2, [r3, #0]
		}

		/* pause data packet rx */
		_radio.conn_curr->pause_rx = 1;
   104b2:	0030      	movs	r0, r6

		/* disable transmit encryption */
		_radio.conn_curr->enc_tx = 0;
   104b4:	2104      	movs	r1, #4
			/* disable receive encryption */
			_radio.conn_curr->enc_rx = 0;
		}

		/* pause data packet rx */
		_radio.conn_curr->pause_rx = 1;
   104b6:	30fc      	adds	r0, #252	; 0xfc
   104b8:	6942      	ldr	r2, [r0, #20]
   104ba:	32c0      	adds	r2, #192	; 0xc0
   104bc:	7813      	ldrb	r3, [r2, #0]

		/* disable transmit encryption */
		_radio.conn_curr->enc_tx = 0;
   104be:	430b      	orrs	r3, r1
   104c0:	311c      	adds	r1, #28
   104c2:	e7e5      	b.n	10490 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x491>
		break;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_ENC */

	case PDU_DATA_LLCTRL_TYPE_VERSION_IND:
		_radio.conn_curr->llcp_version.version_number =
   104c4:	002b      	movs	r3, r5
			pdu_data_rx->payload.llctrl.ctrldata.
			version_ind.version_number;
   104c6:	7b3a      	ldrb	r2, [r7, #12]
		_radio.conn_curr->enc_tx = 0;
		break;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_ENC */

	case PDU_DATA_LLCTRL_TYPE_VERSION_IND:
		_radio.conn_curr->llcp_version.version_number =
   104c8:	339d      	adds	r3, #157	; 0x9d
   104ca:	701a      	strb	r2, [r3, #0]
			pdu_data_rx->payload.llctrl.ctrldata.
			version_ind.version_number;
		_radio.conn_curr->llcp_version. company_id =
			pdu_data_rx->payload.llctrl.ctrldata.version_ind.company_id;
   104cc:	7bbb      	ldrb	r3, [r7, #14]
   104ce:	7b7a      	ldrb	r2, [r7, #13]
   104d0:	021b      	lsls	r3, r3, #8
   104d2:	4313      	orrs	r3, r2

	case PDU_DATA_LLCTRL_TYPE_VERSION_IND:
		_radio.conn_curr->llcp_version.version_number =
			pdu_data_rx->payload.llctrl.ctrldata.
			version_ind.version_number;
		_radio.conn_curr->llcp_version. company_id =
   104d4:	002a      	movs	r2, r5
   104d6:	329e      	adds	r2, #158	; 0x9e
   104d8:	8013      	strh	r3, [r2, #0]
			pdu_data_rx->payload.llctrl.ctrldata.version_ind.company_id;
		_radio.conn_curr->llcp_version.sub_version_number =
			pdu_data_rx->payload.llctrl.ctrldata.version_ind.sub_version_number;
   104da:	7c3b      	ldrb	r3, [r7, #16]
   104dc:	7bfa      	ldrb	r2, [r7, #15]
   104de:	021b      	lsls	r3, r3, #8
   104e0:	4313      	orrs	r3, r2
		_radio.conn_curr->llcp_version.version_number =
			pdu_data_rx->payload.llctrl.ctrldata.
			version_ind.version_number;
		_radio.conn_curr->llcp_version. company_id =
			pdu_data_rx->payload.llctrl.ctrldata.version_ind.company_id;
		_radio.conn_curr->llcp_version.sub_version_number =
   104e2:	002a      	movs	r2, r5
   104e4:	32a0      	adds	r2, #160	; 0xa0
   104e6:	8013      	strh	r3, [r2, #0]
			pdu_data_rx->payload.llctrl.ctrldata.version_ind.sub_version_number;

		if ((_radio.conn_curr->llcp_version.tx != 0) &&
   104e8:	2303      	movs	r3, #3
   104ea:	3a04      	subs	r2, #4
   104ec:	7811      	ldrb	r1, [r2, #0]
   104ee:	2400      	movs	r4, #0
   104f0:	400b      	ands	r3, r1
   104f2:	2b01      	cmp	r3, #1
   104f4:	d101      	bne.n	104fa <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x4fb>
		    (_radio.conn_curr->llcp_version.rx == 0)) {
			/* enqueue the version ind */
			*rx_enqueue = 1;

			/* Procedure complete */
			_radio.conn_curr->procedure_expire = 0;
   104f6:	876c      	strh	r4, [r5, #58]	; 0x3a
			pdu_data_rx->payload.llctrl.ctrldata.version_ind.sub_version_number;

		if ((_radio.conn_curr->llcp_version.tx != 0) &&
		    (_radio.conn_curr->llcp_version.rx == 0)) {
			/* enqueue the version ind */
			*rx_enqueue = 1;
   104f8:	001c      	movs	r4, r3

			/* Procedure complete */
			_radio.conn_curr->procedure_expire = 0;
		}

		_radio.conn_curr->llcp_version.rx = 1;
   104fa:	2102      	movs	r1, #2
   104fc:	7813      	ldrb	r3, [r2, #0]

		if (_radio.conn_curr->llcp_version.tx == 0) {
   104fe:	2601      	movs	r6, #1

			/* Procedure complete */
			_radio.conn_curr->procedure_expire = 0;
		}

		_radio.conn_curr->llcp_version.rx = 1;
   10500:	430b      	orrs	r3, r1

		if (_radio.conn_curr->llcp_version.tx == 0) {
   10502:	0019      	movs	r1, r3
   10504:	4031      	ands	r1, r6

			/* Procedure complete */
			_radio.conn_curr->procedure_expire = 0;
		}

		_radio.conn_curr->llcp_version.rx = 1;
   10506:	7013      	strb	r3, [r2, #0]

		if (_radio.conn_curr->llcp_version.tx == 0) {
   10508:	910a      	str	r1, [sp, #40]	; 0x28
   1050a:	d001      	beq.n	10510 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x511>
   1050c:	f000 fc69 	bl	10de2 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xde3>
{
	struct radio_pdu_node_tx *node_tx;
	struct pdu_data *pdu_ctrl_tx;

	/* acquire tx mem */
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   10510:	4813      	ldr	r0, [pc, #76]	; (10560 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x561>)
		}

		_radio.conn_curr->llcp_version.rx = 1;

		if (_radio.conn_curr->llcp_version.tx == 0) {
			_radio.conn_curr->llcp_version.tx = 1;
   10512:	4333      	orrs	r3, r6
{
	struct radio_pdu_node_tx *node_tx;
	struct pdu_data *pdu_ctrl_tx;

	/* acquire tx mem */
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   10514:	3059      	adds	r0, #89	; 0x59
		}

		_radio.conn_curr->llcp_version.rx = 1;

		if (_radio.conn_curr->llcp_version.tx == 0) {
			_radio.conn_curr->llcp_version.tx = 1;
   10516:	7013      	strb	r3, [r2, #0]
{
	struct radio_pdu_node_tx *node_tx;
	struct pdu_data *pdu_ctrl_tx;

	/* acquire tx mem */
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   10518:	30ff      	adds	r0, #255	; 0xff
   1051a:	f7fa f9b9 	bl	a890 <mem_acquire>
   1051e:	1e01      	subs	r1, r0, #0
	LL_ASSERT(node_tx);
   10520:	d126      	bne.n	10570 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x571>
   10522:	4b04      	ldr	r3, [pc, #16]	; (10534 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x535>)
   10524:	9301      	str	r3, [sp, #4]
   10526:	4b05      	ldr	r3, [pc, #20]	; (1053c <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x53d>)
   10528:	9300      	str	r3, [sp, #0]
   1052a:	4b10      	ldr	r3, [pc, #64]	; (1056c <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x56d>)
   1052c:	f000 fc26 	bl	10d7c <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xd7d>
   10530:	00007fff 	.word	0x00007fff
   10534:	000154c4 	.word	0x000154c4
   10538:	00015484 	.word	0x00015484
   1053c:	000154c9 	.word	0x000154c9
   10540:	0001548b 	.word	0x0001548b
   10544:	0001725f 	.word	0x0001725f
   10548:	00018310 	.word	0x00018310
   1054c:	00017301 	.word	0x00017301
   10550:	000004e2 	.word	0x000004e2
   10554:	000184f1 	.word	0x000184f1
   10558:	0001737f 	.word	0x0001737f
   1055c:	000181b9 	.word	0x000181b9
   10560:	200015c0 	.word	0x200015c0
   10564:	fffe30d0 	.word	0xfffe30d0
   10568:	00018105 	.word	0x00018105
   1056c:	00018351 	.word	0x00018351

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   10570:	2203      	movs	r2, #3
   10572:	7903      	ldrb	r3, [r0, #4]
   10574:	4313      	orrs	r3, r2
   10576:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   10578:	2306      	movs	r3, #6
   1057a:	7143      	strb	r3, [r0, #5]
		sizeof(struct pdu_data_llctrl_version_ind);
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   1057c:	18db      	adds	r3, r3, r3
   1057e:	71c3      	strb	r3, [r0, #7]
	pdu_ctrl_tx->payload.llctrl.ctrldata.version_ind.version_number =
   10580:	3b03      	subs	r3, #3
   10582:	7203      	strb	r3, [r0, #8]
		RADIO_BLE_VERSION_NUMBER;
	pdu_ctrl_tx->payload.llctrl.ctrldata.version_ind.company_id =
   10584:	3b0a      	subs	r3, #10
   10586:	7243      	strb	r3, [r0, #9]
   10588:	7283      	strb	r3, [r0, #10]
		RADIO_BLE_COMPANY_ID;
	pdu_ctrl_tx->payload.llctrl.ctrldata.version_ind.sub_version_number =
   1058a:	72c3      	strb	r3, [r0, #11]
   1058c:	7303      	strb	r3, [r0, #12]
		RADIO_BLE_SUB_VERSION_NUMBER;

	ctrl_tx_enqueue(conn, node_tx);
   1058e:	0028      	movs	r0, r5
   10590:	f7fd fdec 	bl	e16c <ctrl_tx_enqueue>

static struct pdu_data *empty_tx_enqueue(struct connection *conn)
{
	struct pdu_data *pdu_data_tx;

	conn->empty = 1;
   10594:	002a      	movs	r2, r5
   10596:	2180      	movs	r1, #128	; 0x80
   10598:	32c0      	adds	r2, #192	; 0xc0
   1059a:	7813      	ldrb	r3, [r2, #0]
   1059c:	4249      	negs	r1, r1
   1059e:	430b      	orrs	r3, r1
   105a0:	7013      	strb	r3, [r2, #0]

	pdu_data_tx = (struct pdu_data *)radio_pkt_empty_get();
   105a2:	f7fa fbaf 	bl	ad04 <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   105a6:	2203      	movs	r2, #3
   105a8:	7803      	ldrb	r3, [r0, #0]
	pdu_data_tx->len = 0;
	if (conn->pkt_tx_head) {
   105aa:	35fc      	adds	r5, #252	; 0xfc
	struct pdu_data *pdu_data_tx;

	conn->empty = 1;

	pdu_data_tx = (struct pdu_data *)radio_pkt_empty_get();
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   105ac:	4393      	bics	r3, r2
   105ae:	431e      	orrs	r6, r3
	pdu_data_tx->len = 0;
   105b0:	466b      	mov	r3, sp
   105b2:	3225      	adds	r2, #37	; 0x25
   105b4:	189b      	adds	r3, r3, r2
   105b6:	781b      	ldrb	r3, [r3, #0]
	struct pdu_data *pdu_data_tx;

	conn->empty = 1;

	pdu_data_tx = (struct pdu_data *)radio_pkt_empty_get();
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   105b8:	7006      	strb	r6, [r0, #0]
	pdu_data_tx->len = 0;
   105ba:	7043      	strb	r3, [r0, #1]
	if (conn->pkt_tx_head) {
   105bc:	68a9      	ldr	r1, [r5, #8]
   105be:	3a18      	subs	r2, #24
   105c0:	b2f3      	uxtb	r3, r6
   105c2:	2900      	cmp	r1, #0
   105c4:	d001      	beq.n	105ca <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x5cb>
		pdu_data_tx->md = 1;
   105c6:	4313      	orrs	r3, r2
   105c8:	e000      	b.n	105cc <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x5cd>
	} else {
		pdu_data_tx->md = 0;
   105ca:	4393      	bics	r3, r2
   105cc:	7003      	strb	r3, [r0, #0]
   105ce:	f000 fc08 	bl	10de2 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xde3>

#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_ENC)
	case PDU_DATA_LLCTRL_TYPE_REJECT_IND:
		/* resume data packet rx and tx */
		_radio.conn_curr->pause_rx = 0;
		_radio.conn_curr->pause_tx = 0;
   105d2:	22f3      	movs	r2, #243	; 0xf3
		break;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_ENC)
	case PDU_DATA_LLCTRL_TYPE_REJECT_IND:
		/* resume data packet rx and tx */
		_radio.conn_curr->pause_rx = 0;
   105d4:	7819      	ldrb	r1, [r3, #0]
		_radio.conn_curr->pause_tx = 0;
   105d6:	400a      	ands	r2, r1
   105d8:	701a      	strb	r2, [r3, #0]

		/* Procedure complete */
		_radio.conn_curr->procedure_expire = 0;
   105da:	2300      	movs	r3, #0
   105dc:	876b      	strh	r3, [r5, #58]	; 0x3a
   105de:	e702      	b.n	103e6 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x3e7>
		 */

		/* no ctrl procedures in progress or master req while slave
		 * waiting resp.
		 */
		if (((_radio.conn_curr->llcp_req == _radio.conn_curr->llcp_ack) &&
   105e0:	002b      	movs	r3, r5
   105e2:	3369      	adds	r3, #105	; 0x69
   105e4:	781b      	ldrb	r3, [r3, #0]
   105e6:	22c2      	movs	r2, #194	; 0xc2
   105e8:	930a      	str	r3, [sp, #40]	; 0x28
   105ea:	002b      	movs	r3, r5
   105ec:	3368      	adds	r3, #104	; 0x68
   105ee:	781b      	ldrb	r3, [r3, #0]
   105f0:	990a      	ldr	r1, [sp, #40]	; 0x28
   105f2:	0052      	lsls	r2, r2, #1
   105f4:	428b      	cmp	r3, r1
   105f6:	d104      	bne.n	10602 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x603>
   105f8:	58b3      	ldr	r3, [r6, r2]
   105fa:	2b00      	cmp	r3, #0
   105fc:	d000      	beq.n	10600 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x601>
   105fe:	e0ad      	b.n	1075c <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x75d>
   10600:	e01c      	b.n	1063c <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x63d>
		     (_radio.conn_upd == 0)) ||
		    ((_radio.conn_curr->llcp_req != _radio.conn_curr->llcp_ack) &&
		     (_radio.conn_curr->role.slave.role != 0) &&
   10602:	002b      	movs	r3, r5
   10604:	3344      	adds	r3, #68	; 0x44
		/* no ctrl procedures in progress or master req while slave
		 * waiting resp.
		 */
		if (((_radio.conn_curr->llcp_req == _radio.conn_curr->llcp_ack) &&
		     (_radio.conn_upd == 0)) ||
		    ((_radio.conn_curr->llcp_req != _radio.conn_curr->llcp_ack) &&
   10606:	781c      	ldrb	r4, [r3, #0]
   10608:	2301      	movs	r3, #1
   1060a:	401c      	ands	r4, r3
   1060c:	002b      	movs	r3, r5
		     (_radio.conn_curr->role.slave.role != 0) &&
   1060e:	58b2      	ldr	r2, [r6, r2]
   10610:	336a      	adds	r3, #106	; 0x6a
		/* no ctrl procedures in progress or master req while slave
		 * waiting resp.
		 */
		if (((_radio.conn_curr->llcp_req == _radio.conn_curr->llcp_ack) &&
		     (_radio.conn_upd == 0)) ||
		    ((_radio.conn_curr->llcp_req != _radio.conn_curr->llcp_ack) &&
   10612:	2c00      	cmp	r4, #0
   10614:	d100      	bne.n	10618 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x619>
   10616:	e099      	b.n	1074c <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x74d>
		     (_radio.conn_curr->role.slave.role != 0) &&
   10618:	4295      	cmp	r5, r2
   1061a:	d000      	beq.n	1061e <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x61f>
   1061c:	e15b      	b.n	108d6 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x8d7>
		     (_radio.conn_curr == _radio.conn_upd) &&
   1061e:	781b      	ldrb	r3, [r3, #0]
   10620:	2b01      	cmp	r3, #1
   10622:	d000      	beq.n	10626 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x627>
   10624:	e157      	b.n	108d6 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x8d7>
		     (_radio.conn_curr->llcp_type == LLCP_CONNECTION_UPDATE) &&
		     ((_radio.conn_curr->llcp.connection_update.state ==
   10626:	002b      	movs	r3, r5
   10628:	3395      	adds	r3, #149	; 0x95
		       LLCP_CONN_STATE_INITIATE) ||
   1062a:	781a      	ldrb	r2, [r3, #0]
   1062c:	2307      	movs	r3, #7
   1062e:	4013      	ands	r3, r2
		if (((_radio.conn_curr->llcp_req == _radio.conn_curr->llcp_ack) &&
		     (_radio.conn_upd == 0)) ||
		    ((_radio.conn_curr->llcp_req != _radio.conn_curr->llcp_ack) &&
		     (_radio.conn_curr->role.slave.role != 0) &&
		     (_radio.conn_curr == _radio.conn_upd) &&
		     (_radio.conn_curr->llcp_type == LLCP_CONNECTION_UPDATE) &&
   10630:	1e5a      	subs	r2, r3, #1
   10632:	2a01      	cmp	r2, #1
   10634:	d902      	bls.n	1063c <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x63d>
		     ((_radio.conn_curr->llcp.connection_update.state ==
		       LLCP_CONN_STATE_INITIATE) ||
		      (_radio.conn_curr->llcp.connection_update.state ==
		       LLCP_CONN_STATE_REQ) ||
   10636:	2b05      	cmp	r3, #5
   10638:	d000      	beq.n	1063c <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x63d>
   1063a:	e14c      	b.n	108d6 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x8d7>
		      (_radio.conn_curr->llcp.connection_update.state ==
		       LLCP_CONN_STATE_RSP_WAIT)))) {
			/* set mutex */
			if (_radio.conn_upd == 0) {
   1063c:	23c2      	movs	r3, #194	; 0xc2
   1063e:	005b      	lsls	r3, r3, #1
   10640:	58f2      	ldr	r2, [r6, r3]
   10642:	2a00      	cmp	r2, #0
   10644:	d100      	bne.n	10648 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x649>
				_radio.conn_upd = _radio.conn_curr;
   10646:	50f5      	str	r5, [r6, r3]

			/* resp to be generated by app, for now save
			 * parameters
			 */
			_radio.conn_curr->llcp.connection_update.interval =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.interval_min;
   10648:	7b7b      	ldrb	r3, [r7, #13]
   1064a:	7b3a      	ldrb	r2, [r7, #12]
   1064c:	021b      	lsls	r3, r3, #8
   1064e:	4313      	orrs	r3, r2
			}

			/* resp to be generated by app, for now save
			 * parameters
			 */
			_radio.conn_curr->llcp.connection_update.interval =
   10650:	002a      	movs	r2, r5
   10652:	326c      	adds	r2, #108	; 0x6c
   10654:	8013      	strh	r3, [r2, #0]
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.interval_min;
			_radio.conn_curr->llcp.connection_update.latency =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.latency;
   10656:	7c7b      	ldrb	r3, [r7, #17]
   10658:	7c3a      	ldrb	r2, [r7, #16]
   1065a:	021b      	lsls	r3, r3, #8
   1065c:	4313      	orrs	r3, r2
			/* resp to be generated by app, for now save
			 * parameters
			 */
			_radio.conn_curr->llcp.connection_update.interval =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.interval_min;
			_radio.conn_curr->llcp.connection_update.latency =
   1065e:	002a      	movs	r2, r5
   10660:	326e      	adds	r2, #110	; 0x6e
   10662:	8013      	strh	r3, [r2, #0]
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.latency;
			_radio.conn_curr->llcp.connection_update.timeout =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.timeout;
   10664:	7cfc      	ldrb	r4, [r7, #19]
   10666:	7cbb      	ldrb	r3, [r7, #18]
   10668:	0224      	lsls	r4, r4, #8
   1066a:	431c      	orrs	r4, r3
			 */
			_radio.conn_curr->llcp.connection_update.interval =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.interval_min;
			_radio.conn_curr->llcp.connection_update.latency =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.latency;
			_radio.conn_curr->llcp.connection_update.timeout =
   1066c:	002b      	movs	r3, r5
   1066e:	3370      	adds	r3, #112	; 0x70
   10670:	801c      	strh	r4, [r3, #0]
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.timeout;
			_radio.conn_curr->llcp.connection_update.preferred_periodicity =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.preferred_periodicity;
   10672:	7d3a      	ldrb	r2, [r7, #20]
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.interval_min;
			_radio.conn_curr->llcp.connection_update.latency =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.latency;
			_radio.conn_curr->llcp.connection_update.timeout =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.timeout;
			_radio.conn_curr->llcp.connection_update.preferred_periodicity =
   10674:	709a      	strb	r2, [r3, #2]
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.preferred_periodicity;
			_radio.conn_curr->llcp.connection_update.instant =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.
   10676:	7dbb      	ldrb	r3, [r7, #22]
   10678:	7d7a      	ldrb	r2, [r7, #21]
   1067a:	021b      	lsls	r3, r3, #8
   1067c:	4313      	orrs	r3, r2
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.latency;
			_radio.conn_curr->llcp.connection_update.timeout =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.timeout;
			_radio.conn_curr->llcp.connection_update.preferred_periodicity =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.preferred_periodicity;
			_radio.conn_curr->llcp.connection_update.instant =
   1067e:	002a      	movs	r2, r5
   10680:	3274      	adds	r2, #116	; 0x74
   10682:	8013      	strh	r3, [r2, #0]
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.
				reference_conn_event_count;
			_radio.conn_curr->llcp.connection_update.offset0 =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset0;
   10684:	7e3b      	ldrb	r3, [r7, #24]
   10686:	7dfa      	ldrb	r2, [r7, #23]
   10688:	021b      	lsls	r3, r3, #8
   1068a:	4313      	orrs	r3, r2
			_radio.conn_curr->llcp.connection_update.preferred_periodicity =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.preferred_periodicity;
			_radio.conn_curr->llcp.connection_update.instant =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.
				reference_conn_event_count;
			_radio.conn_curr->llcp.connection_update.offset0 =
   1068c:	002a      	movs	r2, r5
   1068e:	3276      	adds	r2, #118	; 0x76
   10690:	8013      	strh	r3, [r2, #0]
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset0;
			_radio.conn_curr->llcp.connection_update.offset1 =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset1;
   10692:	7ebb      	ldrb	r3, [r7, #26]
   10694:	7e7a      	ldrb	r2, [r7, #25]
   10696:	021b      	lsls	r3, r3, #8
   10698:	4313      	orrs	r3, r2
			_radio.conn_curr->llcp.connection_update.instant =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.
				reference_conn_event_count;
			_radio.conn_curr->llcp.connection_update.offset0 =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset0;
			_radio.conn_curr->llcp.connection_update.offset1 =
   1069a:	002a      	movs	r2, r5
   1069c:	3278      	adds	r2, #120	; 0x78
   1069e:	8013      	strh	r3, [r2, #0]
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset1;
			_radio.conn_curr->llcp.connection_update.offset2 =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset2;
   106a0:	7f3b      	ldrb	r3, [r7, #28]
   106a2:	7efa      	ldrb	r2, [r7, #27]
   106a4:	021b      	lsls	r3, r3, #8
   106a6:	4313      	orrs	r3, r2
				reference_conn_event_count;
			_radio.conn_curr->llcp.connection_update.offset0 =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset0;
			_radio.conn_curr->llcp.connection_update.offset1 =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset1;
			_radio.conn_curr->llcp.connection_update.offset2 =
   106a8:	002a      	movs	r2, r5
   106aa:	327a      	adds	r2, #122	; 0x7a
   106ac:	8013      	strh	r3, [r2, #0]
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset2;
			_radio.conn_curr->llcp.connection_update.offset3 =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset3;
   106ae:	7fbb      	ldrb	r3, [r7, #30]
   106b0:	7f7a      	ldrb	r2, [r7, #29]
   106b2:	021b      	lsls	r3, r3, #8
   106b4:	4313      	orrs	r3, r2
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset0;
			_radio.conn_curr->llcp.connection_update.offset1 =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset1;
			_radio.conn_curr->llcp.connection_update.offset2 =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset2;
			_radio.conn_curr->llcp.connection_update.offset3 =
   106b6:	002a      	movs	r2, r5
   106b8:	327c      	adds	r2, #124	; 0x7c
   106ba:	8013      	strh	r3, [r2, #0]
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset3;
			_radio.conn_curr->llcp.connection_update.offset4 =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset4;
   106bc:	1c7b      	adds	r3, r7, #1
   106be:	7fdb      	ldrb	r3, [r3, #31]
   106c0:	7ffa      	ldrb	r2, [r7, #31]
   106c2:	021b      	lsls	r3, r3, #8
   106c4:	4313      	orrs	r3, r2
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset1;
			_radio.conn_curr->llcp.connection_update.offset2 =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset2;
			_radio.conn_curr->llcp.connection_update.offset3 =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset3;
			_radio.conn_curr->llcp.connection_update.offset4 =
   106c6:	002a      	movs	r2, r5
   106c8:	327e      	adds	r2, #126	; 0x7e
   106ca:	8013      	strh	r3, [r2, #0]
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset4;
			_radio.conn_curr->llcp.connection_update.offset5 =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset5;
   106cc:	1cbb      	adds	r3, r7, #2
   106ce:	7fda      	ldrb	r2, [r3, #31]
   106d0:	1cfb      	adds	r3, r7, #3
   106d2:	7fdb      	ldrb	r3, [r3, #31]
   106d4:	021b      	lsls	r3, r3, #8
   106d6:	4313      	orrs	r3, r2
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset2;
			_radio.conn_curr->llcp.connection_update.offset3 =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset3;
			_radio.conn_curr->llcp.connection_update.offset4 =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset4;
			_radio.conn_curr->llcp.connection_update.offset5 =
   106d8:	002a      	movs	r2, r5
   106da:	3280      	adds	r2, #128	; 0x80
   106dc:	8013      	strh	r3, [r2, #0]
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset5;

			/* enqueue the conn param req, if parameters changed,
			 * else respond
			 */
			if ((_radio.conn_curr->llcp.connection_update.interval !=
   106de:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
   106e0:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   106e2:	4293      	cmp	r3, r2
   106e4:	d10a      	bne.n	106fc <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x6fd>
			     _radio.conn_curr->conn_interval) ||
			    (_radio.conn_curr->llcp.connection_update.latency
			     != _radio.conn_curr->latency) ||
   106e6:	8eab      	ldrh	r3, [r5, #52]	; 0x34
   106e8:	8ca8      	ldrh	r0, [r5, #36]	; 0x24
   106ea:	21fa      	movs	r1, #250	; 0xfa
   106ec:	4358      	muls	r0, r3
   106ee:	237d      	movs	r3, #125	; 0x7d
   106f0:	0089      	lsls	r1, r1, #2
   106f2:	4358      	muls	r0, r3
   106f4:	f7ef fdde 	bl	2b4 <__aeabi_idiv>
   106f8:	4284      	cmp	r4, r0
   106fa:	d00e      	beq.n	1071a <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x71b>
			    (_radio.conn_curr->llcp.connection_update.timeout !=
			     (_radio.conn_curr->conn_interval *
			      _radio.conn_curr->supervision_reload * 125 / 1000))) {
				*rx_enqueue = 1;

				_radio.conn_curr->llcp.connection_update.state =
   106fc:	002a      	movs	r2, r5
   106fe:	2107      	movs	r1, #7
   10700:	3295      	adds	r2, #149	; 0x95
   10702:	7813      	ldrb	r3, [r2, #0]
					LLCP_CONN_STATE_APP_WAIT;
				_radio.conn_curr->llcp.connection_update.is_internal = 0;
				_radio.conn_curr->llcp_type = LLCP_CONNECTION_UPDATE;
   10704:	2401      	movs	r4, #1
			    (_radio.conn_curr->llcp.connection_update.timeout !=
			     (_radio.conn_curr->conn_interval *
			      _radio.conn_curr->supervision_reload * 125 / 1000))) {
				*rx_enqueue = 1;

				_radio.conn_curr->llcp.connection_update.state =
   10706:	438b      	bics	r3, r1
					LLCP_CONN_STATE_APP_WAIT;
				_radio.conn_curr->llcp.connection_update.is_internal = 0;
   10708:	3903      	subs	r1, #3
   1070a:	430b      	orrs	r3, r1
   1070c:	3114      	adds	r1, #20
   1070e:	438b      	bics	r3, r1
   10710:	7013      	strb	r3, [r2, #0]
				_radio.conn_curr->llcp_type = LLCP_CONNECTION_UPDATE;
   10712:	002b      	movs	r3, r5
   10714:	336a      	adds	r3, #106	; 0x6a
   10716:	701c      	strb	r4, [r3, #0]
   10718:	e013      	b.n	10742 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x743>
				_radio.conn_curr->llcp_ack--;
			} else {
				_radio.conn_curr->llcp.connection_update.win_size = 1;
   1071a:	002b      	movs	r3, r5
   1071c:	2201      	movs	r2, #1
				_radio.conn_curr->llcp.connection_update.win_offset_us = 0;
   1071e:	2400      	movs	r4, #0
				_radio.conn_curr->llcp.connection_update.state =
   10720:	0029      	movs	r1, r5
   10722:	2007      	movs	r0, #7
					LLCP_CONN_STATE_APP_WAIT;
				_radio.conn_curr->llcp.connection_update.is_internal = 0;
				_radio.conn_curr->llcp_type = LLCP_CONNECTION_UPDATE;
				_radio.conn_curr->llcp_ack--;
			} else {
				_radio.conn_curr->llcp.connection_update.win_size = 1;
   10724:	3394      	adds	r3, #148	; 0x94
   10726:	701a      	strb	r2, [r3, #0]
				_radio.conn_curr->llcp.connection_update.win_offset_us = 0;
   10728:	3b08      	subs	r3, #8
   1072a:	601c      	str	r4, [r3, #0]
				_radio.conn_curr->llcp.connection_update.state =
   1072c:	3195      	adds	r1, #149	; 0x95
   1072e:	780b      	ldrb	r3, [r1, #0]
   10730:	4383      	bics	r3, r0
					LLCP_CONN_STATE_RSP;
				_radio.conn_curr->llcp.connection_update.is_internal = 0;
   10732:	3804      	subs	r0, #4
   10734:	4303      	orrs	r3, r0
   10736:	3015      	adds	r0, #21
   10738:	4383      	bics	r3, r0
   1073a:	700b      	strb	r3, [r1, #0]

				_radio.conn_curr->llcp_type = LLCP_CONNECTION_UPDATE;
   1073c:	002b      	movs	r3, r5
   1073e:	336a      	adds	r3, #106	; 0x6a
   10740:	701a      	strb	r2, [r3, #0]
				_radio.conn_curr->llcp_ack--;
   10742:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10744:	3569      	adds	r5, #105	; 0x69
   10746:	3b01      	subs	r3, #1
   10748:	702b      	strb	r3, [r5, #0]
   1074a:	e34a      	b.n	10de2 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xde3>
		/* master in conn update procedure, master in any state we
		 * ignore this req
		 */
		else if ((_radio.conn_curr->llcp_req !=
			  _radio.conn_curr->llcp_ack) &&
			 (_radio.conn_curr->role.master.role == 0) &&
   1074c:	4295      	cmp	r5, r2
   1074e:	d000      	beq.n	10752 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x753>
   10750:	e0c1      	b.n	108d6 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x8d7>
			 (_radio.conn_curr == _radio.conn_upd) &&
   10752:	781b      	ldrb	r3, [r3, #0]
   10754:	2b01      	cmp	r3, #1
   10756:	d000      	beq.n	1075a <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x75b>
   10758:	e0bd      	b.n	108d6 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x8d7>
   1075a:	e342      	b.n	10de2 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xde3>
		 * set (another connection update in progress), hence reject
		 * this req.
		 */
		else if (_radio.conn_curr->llcp_req ==
			 _radio.conn_curr->llcp_ack) {
			reject_ind_ext_send(_radio.conn_curr,
   1075c:	2220      	movs	r2, #32
   1075e:	210f      	movs	r1, #15
   10760:	e1ea      	b.n	10b38 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xb39>

static inline void
isr_rx_conn_pkt_ctrl_rej(struct radio_pdu_node_rx *radio_pdu_node_rx,
			 u8_t *rx_enqueue)
{
	if (_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) {
   10762:	002a      	movs	r2, r5
   10764:	3268      	adds	r2, #104	; 0x68
   10766:	7811      	ldrb	r1, [r2, #0]
   10768:	7850      	ldrb	r0, [r2, #1]
   1076a:	3201      	adds	r2, #1
   1076c:	4288      	cmp	r0, r1
   1076e:	d04a      	beq.n	10806 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x807>
		/* reset ctrl procedure */
		_radio.conn_curr->llcp_ack = _radio.conn_curr->llcp_req;

		switch (_radio.conn_curr->llcp_type) {
   10770:	002b      	movs	r3, r5
isr_rx_conn_pkt_ctrl_rej(struct radio_pdu_node_rx *radio_pdu_node_rx,
			 u8_t *rx_enqueue)
{
	if (_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) {
		/* reset ctrl procedure */
		_radio.conn_curr->llcp_ack = _radio.conn_curr->llcp_req;
   10772:	7011      	strb	r1, [r2, #0]

		switch (_radio.conn_curr->llcp_type) {
   10774:	336a      	adds	r3, #106	; 0x6a
   10776:	781a      	ldrb	r2, [r3, #0]
   10778:	2a01      	cmp	r2, #1
   1077a:	d13d      	bne.n	107f8 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x7f9>

static inline void
isr_rx_conn_pkt_ctrl_rej_conn_upd(struct radio_pdu_node_rx *radio_pdu_node_rx,
				  u8_t *rx_enqueue)
{
	LL_ASSERT(_radio.conn_upd == _radio.conn_curr);
   1077c:	21c2      	movs	r1, #194	; 0xc2
   1077e:	0049      	lsls	r1, r1, #1
   10780:	5873      	ldr	r3, [r6, r1]
   10782:	429d      	cmp	r5, r3
   10784:	d009      	beq.n	1079a <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x79b>
   10786:	4bd6      	ldr	r3, [pc, #856]	; (10ae0 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xae1>)
   10788:	4ad6      	ldr	r2, [pc, #856]	; (10ae4 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xae5>)
   1078a:	9301      	str	r3, [sp, #4]
   1078c:	4bd6      	ldr	r3, [pc, #856]	; (10ae8 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xae9>)
   1078e:	49d7      	ldr	r1, [pc, #860]	; (10aec <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xaed>)
   10790:	9300      	str	r3, [sp, #0]
   10792:	48d7      	ldr	r0, [pc, #860]	; (10af0 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xaf1>)
   10794:	4bd7      	ldr	r3, [pc, #860]	; (10af4 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xaf5>)
   10796:	f000 fe2f 	bl	113f8 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x13f9>

	/* reset mutex */
	_radio.conn_upd = NULL;
   1079a:	2300      	movs	r3, #0
   1079c:	5073      	str	r3, [r6, r1]

	/* update to next ticks offsets */
	if (_radio.conn_curr->role.slave.role != 0) {
   1079e:	0029      	movs	r1, r5
   107a0:	3144      	adds	r1, #68	; 0x44
   107a2:	7809      	ldrb	r1, [r1, #0]
   107a4:	4211      	tst	r1, r2
   107a6:	d003      	beq.n	107b0 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x7b1>
		_radio.conn_curr->role.slave.ticks_to_offset =
		    _radio.conn_curr->llcp.connection_update.
   107a8:	002a      	movs	r2, r5
   107aa:	3288      	adds	r2, #136	; 0x88
	/* reset mutex */
	_radio.conn_upd = NULL;

	/* update to next ticks offsets */
	if (_radio.conn_curr->role.slave.role != 0) {
		_radio.conn_curr->role.slave.ticks_to_offset =
   107ac:	6812      	ldr	r2, [r2, #0]
   107ae:	666a      	str	r2, [r5, #100]	; 0x64
		    _radio.conn_curr->llcp.connection_update.
			ticks_to_offset_next;
	}

	/* conn param req procedure, if any, is complete */
	_radio.conn_curr->procedure_expire = 0;
   107b0:	876b      	strh	r3, [r5, #58]	; 0x3a

	/* enqueue the reject ind ext */
	if (!_radio.conn_curr->llcp.connection_update.is_internal) {
   107b2:	002b      	movs	r3, r5
   107b4:	3395      	adds	r3, #149	; 0x95
   107b6:	781a      	ldrb	r2, [r3, #0]
   107b8:	2318      	movs	r3, #24
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	struct radio_pdu_node_tx *tx_release = NULL;
	u8_t is_empty_pdu_tx_retry;
	struct pdu_data *pdu_data_rx;
	struct pdu_data *pdu_data_tx;
	u8_t rx_enqueue = 0;
   107ba:	2400      	movs	r4, #0

	/* conn param req procedure, if any, is complete */
	_radio.conn_curr->procedure_expire = 0;

	/* enqueue the reject ind ext */
	if (!_radio.conn_curr->llcp.connection_update.is_internal) {
   107bc:	421a      	tst	r2, r3
   107be:	d000      	beq.n	107c2 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x7c3>
   107c0:	e30f      	b.n	10de2 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xde3>
		struct radio_le_conn_update_cmplt
			*radio_le_conn_update_cmplt;
		struct pdu_data *pdu_data_rx;

		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   107c2:	3b10      	subs	r3, #16
   107c4:	713b      	strb	r3, [r7, #4]
		/* prepare connection update complete structure */
		pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
		radio_le_conn_update_cmplt =
			(struct radio_le_conn_update_cmplt *)
			&pdu_data_rx->payload;
		radio_le_conn_update_cmplt->status = 0x00;
   107c6:	72fc      	strb	r4, [r7, #11]
		radio_le_conn_update_cmplt->interval =
			_radio.conn_curr->conn_interval;
   107c8:	8cab      	ldrh	r3, [r5, #36]	; 0x24
		radio_le_conn_update_cmplt->latency = _radio.conn_curr->latency;
		radio_le_conn_update_cmplt->timeout =
   107ca:	21fa      	movs	r1, #250	; 0xfa
		pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
		radio_le_conn_update_cmplt =
			(struct radio_le_conn_update_cmplt *)
			&pdu_data_rx->payload;
		radio_le_conn_update_cmplt->status = 0x00;
		radio_le_conn_update_cmplt->interval =
   107cc:	0a1a      	lsrs	r2, r3, #8
   107ce:	733b      	strb	r3, [r7, #12]
   107d0:	737a      	strb	r2, [r7, #13]
			_radio.conn_curr->conn_interval;
		radio_le_conn_update_cmplt->latency = _radio.conn_curr->latency;
   107d2:	1dea      	adds	r2, r5, #7
   107d4:	7fd2      	ldrb	r2, [r2, #31]
		radio_le_conn_update_cmplt->timeout =
   107d6:	0089      	lsls	r1, r1, #2
			(struct radio_le_conn_update_cmplt *)
			&pdu_data_rx->payload;
		radio_le_conn_update_cmplt->status = 0x00;
		radio_le_conn_update_cmplt->interval =
			_radio.conn_curr->conn_interval;
		radio_le_conn_update_cmplt->latency = _radio.conn_curr->latency;
   107d8:	73ba      	strb	r2, [r7, #14]
   107da:	002a      	movs	r2, r5
   107dc:	3208      	adds	r2, #8
   107de:	7fd2      	ldrb	r2, [r2, #31]
   107e0:	73fa      	strb	r2, [r7, #15]
		radio_le_conn_update_cmplt->timeout =
   107e2:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
   107e4:	4358      	muls	r0, r3
   107e6:	237d      	movs	r3, #125	; 0x7d
   107e8:	4358      	muls	r0, r3
   107ea:	f7ef fd63 	bl	2b4 <__aeabi_idiv>
   107ee:	b280      	uxth	r0, r0
   107f0:	7438      	strb	r0, [r7, #16]
   107f2:	0a00      	lsrs	r0, r0, #8
   107f4:	7478      	strb	r0, [r7, #17]
   107f6:	e259      	b.n	10cac <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xcad>
			isr_rx_conn_pkt_ctrl_rej_conn_upd(radio_pdu_node_rx,
							  rx_enqueue);
			break;

		default:
			LL_ASSERT(0);
   107f8:	4bb9      	ldr	r3, [pc, #740]	; (10ae0 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xae1>)
   107fa:	9301      	str	r3, [sp, #4]
   107fc:	4bba      	ldr	r3, [pc, #744]	; (10ae8 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xae9>)
   107fe:	9300      	str	r3, [sp, #0]
   10800:	4bbd      	ldr	r3, [pc, #756]	; (10af8 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xaf9>)
   10802:	f000 fdf6 	bl	113f2 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x13f3>
			break;
		}

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
	} else if (_radio.conn_curr->llcp_length.ack !=
		   _radio.conn_curr->llcp_length.req) {
   10806:	002a      	movs	r2, r5
   10808:	32b4      	adds	r2, #180	; 0xb4
   1080a:	7811      	ldrb	r1, [r2, #0]
			LL_ASSERT(0);
			break;
		}

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
	} else if (_radio.conn_curr->llcp_length.ack !=
   1080c:	7850      	ldrb	r0, [r2, #1]
   1080e:	3201      	adds	r2, #1
   10810:	4288      	cmp	r0, r1
   10812:	d023      	beq.n	1085c <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x85d>
	struct pdu_data *pdu_data_rx;

	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
	rej_ext_ind = (struct pdu_data_llctrl_reject_ext_ind *)
		      &pdu_data_rx->payload.llctrl.ctrldata.reject_ext_ind;
	if (rej_ext_ind->reject_opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
   10814:	7b38      	ldrb	r0, [r7, #12]
   10816:	2400      	movs	r4, #0
   10818:	2814      	cmp	r0, #20
   1081a:	d000      	beq.n	1081e <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x81f>
   1081c:	e2e1      	b.n	10de2 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xde3>
		struct pdu_data_llctrl_length_req_rsp *lr;

		/* Procedure complete */
		_radio.conn_curr->llcp_length.ack =
   1081e:	7011      	strb	r1, [r2, #0]
			_radio.conn_curr->llcp_length.req;
		_radio.conn_curr->procedure_expire = 0;

		/* Resume data packet tx */
		_radio.conn_curr->pause_tx = 0;
   10820:	2108      	movs	r1, #8
		struct pdu_data_llctrl_length_req_rsp *lr;

		/* Procedure complete */
		_radio.conn_curr->llcp_length.ack =
			_radio.conn_curr->llcp_length.req;
		_radio.conn_curr->procedure_expire = 0;
   10822:	876c      	strh	r4, [r5, #58]	; 0x3a

		/* Resume data packet tx */
		_radio.conn_curr->pause_tx = 0;
   10824:	781a      	ldrb	r2, [r3, #0]
   10826:	438a      	bics	r2, r1
   10828:	701a      	strb	r2, [r3, #0]

		/* prepare length rsp structure */
		pdu_data_rx->len = offsetof(struct pdu_data_llctrl,
   1082a:	2309      	movs	r3, #9
   1082c:	727b      	strb	r3, [r7, #9]
					    ctrldata) +
			sizeof(struct pdu_data_llctrl_length_req_rsp);
		pdu_data_rx->payload.llctrl.opcode =
   1082e:	330c      	adds	r3, #12
   10830:	72fb      	strb	r3, [r7, #11]
			PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;

		lr = (struct pdu_data_llctrl_length_req_rsp *)
			&pdu_data_rx->payload.llctrl.ctrldata.length_req;
		lr->max_rx_octets = _radio.conn_curr->max_rx_octets;
   10832:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
   10834:	0a1a      	lsrs	r2, r3, #8
   10836:	733b      	strb	r3, [r7, #12]
		lr->max_rx_time = ((_radio.conn_curr->max_rx_octets + 14) << 3);
   10838:	330e      	adds	r3, #14
   1083a:	00db      	lsls	r3, r3, #3
   1083c:	b29b      	uxth	r3, r3
   1083e:	73bb      	strb	r3, [r7, #14]
   10840:	40cb      	lsrs	r3, r1
		pdu_data_rx->payload.llctrl.opcode =
			PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;

		lr = (struct pdu_data_llctrl_length_req_rsp *)
			&pdu_data_rx->payload.llctrl.ctrldata.length_req;
		lr->max_rx_octets = _radio.conn_curr->max_rx_octets;
   10842:	737a      	strb	r2, [r7, #13]
		lr->max_rx_time = ((_radio.conn_curr->max_rx_octets + 14) << 3);
   10844:	73fb      	strb	r3, [r7, #15]
		lr->max_tx_octets = _radio.conn_curr->max_tx_octets;
   10846:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
   10848:	0a1a      	lsrs	r2, r3, #8
   1084a:	743b      	strb	r3, [r7, #16]
		lr->max_tx_time = ((_radio.conn_curr->max_tx_octets + 14) << 3);
   1084c:	330e      	adds	r3, #14
   1084e:	00db      	lsls	r3, r3, #3
   10850:	b29b      	uxth	r3, r3
   10852:	74bb      	strb	r3, [r7, #18]
   10854:	40cb      	lsrs	r3, r1

		lr = (struct pdu_data_llctrl_length_req_rsp *)
			&pdu_data_rx->payload.llctrl.ctrldata.length_req;
		lr->max_rx_octets = _radio.conn_curr->max_rx_octets;
		lr->max_rx_time = ((_radio.conn_curr->max_rx_octets + 14) << 3);
		lr->max_tx_octets = _radio.conn_curr->max_tx_octets;
   10856:	747a      	strb	r2, [r7, #17]
		lr->max_tx_time = ((_radio.conn_curr->max_tx_octets + 14) << 3);
   10858:	74fb      	strb	r3, [r7, #19]
   1085a:	e227      	b.n	10cac <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xcad>
					     rx_enqueue);
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
	} else if (_radio.conn_curr->llcp_phy.ack !=
		   _radio.conn_curr->llcp_phy.req) {
   1085c:	002b      	movs	r3, r5
   1085e:	33bc      	adds	r3, #188	; 0xbc
   10860:	781a      	ldrb	r2, [r3, #0]
		isr_rx_conn_pkt_ctrl_rej_dle(radio_pdu_node_rx,
					     rx_enqueue);
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
	} else if (_radio.conn_curr->llcp_phy.ack !=
   10862:	7859      	ldrb	r1, [r3, #1]
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	struct radio_pdu_node_tx *tx_release = NULL;
	u8_t is_empty_pdu_tx_retry;
	struct pdu_data *pdu_data_rx;
	struct pdu_data *pdu_data_tx;
	u8_t rx_enqueue = 0;
   10864:	2400      	movs	r4, #0
		isr_rx_conn_pkt_ctrl_rej_dle(radio_pdu_node_rx,
					     rx_enqueue);
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
	} else if (_radio.conn_curr->llcp_phy.ack !=
   10866:	3301      	adds	r3, #1
   10868:	4291      	cmp	r1, r2
   1086a:	d100      	bne.n	1086e <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x86f>
   1086c:	e2b9      	b.n	10de2 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xde3>
	struct pdu_data *pdu_data_rx;

	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
	rej_ext_ind = (struct pdu_data_llctrl_reject_ext_ind *)
		      &pdu_data_rx->payload.llctrl.ctrldata.reject_ext_ind;
	if (rej_ext_ind->reject_opcode == PDU_DATA_LLCTRL_TYPE_PHY_REQ) {
   1086e:	7b39      	ldrb	r1, [r7, #12]
   10870:	2916      	cmp	r1, #22
   10872:	d000      	beq.n	10876 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x877>
   10874:	e2b5      	b.n	10de2 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xde3>
		if (rej_ext_ind->error_code == 0x23) {
   10876:	7b79      	ldrb	r1, [r7, #13]
   10878:	2923      	cmp	r1, #35	; 0x23
   1087a:	d100      	bne.n	1087e <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x87f>
   1087c:	e2b1      	b.n	10de2 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xde3>
		} else {
			/* Different Transaction Collision */
			struct radio_le_phy_upd_cmplt *p;

			/* Procedure complete */
			_radio.conn_curr->llcp_phy.ack =
   1087e:	701a      	strb	r2, [r3, #0]
				_radio.conn_curr->llcp_phy.req;
			_radio.conn_curr->procedure_expire = 0;

			/* skip event generation is not cmd initiated */
			if (!_radio.conn_curr->llcp_phy.cmd) {
   10880:	3302      	adds	r3, #2
   10882:	781b      	ldrb	r3, [r3, #0]
			struct radio_le_phy_upd_cmplt *p;

			/* Procedure complete */
			_radio.conn_curr->llcp_phy.ack =
				_radio.conn_curr->llcp_phy.req;
			_radio.conn_curr->procedure_expire = 0;
   10884:	876c      	strh	r4, [r5, #58]	; 0x3a

			/* skip event generation is not cmd initiated */
			if (!_radio.conn_curr->llcp_phy.cmd) {
   10886:	079b      	lsls	r3, r3, #30
   10888:	d400      	bmi.n	1088c <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x88d>
   1088a:	e2aa      	b.n	10de2 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xde3>
				return;
			}

			/* generate phy update complete event with error code */
			radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   1088c:	230c      	movs	r3, #12
   1088e:	713b      	strb	r3, [r7, #4]

			p = (struct radio_le_phy_upd_cmplt *)
			    &pdu_data_rx->payload;
			p->status = rej_ext_ind->error_code;
   10890:	7b7b      	ldrb	r3, [r7, #13]
   10892:	72fb      	strb	r3, [r7, #11]
   10894:	e1ff      	b.n	10c96 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xc97>
{
	struct radio_pdu_node_tx *node_tx;
	struct pdu_data *pdu_ctrl_tx;

	/* acquire tx mem */
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   10896:	0030      	movs	r0, r6
   10898:	3059      	adds	r0, #89	; 0x59
   1089a:	30ff      	adds	r0, #255	; 0xff
   1089c:	f7f9 fff8 	bl	a890 <mem_acquire>
   108a0:	1e01      	subs	r1, r0, #0
	LL_ASSERT(node_tx);
   108a2:	d105      	bne.n	108b0 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x8b1>
   108a4:	4b8e      	ldr	r3, [pc, #568]	; (10ae0 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xae1>)
   108a6:	9301      	str	r3, [sp, #4]
   108a8:	4b8f      	ldr	r3, [pc, #572]	; (10ae8 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xae9>)
   108aa:	9300      	str	r3, [sp, #0]
   108ac:	4b93      	ldr	r3, [pc, #588]	; (10afc <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xafd>)
   108ae:	e265      	b.n	10d7c <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xd7d>

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   108b0:	2203      	movs	r2, #3
   108b2:	7903      	ldrb	r3, [r0, #4]
   108b4:	4313      	orrs	r3, r2
   108b6:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata);
   108b8:	2301      	movs	r3, #1
   108ba:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
   108bc:	3312      	adds	r3, #18
   108be:	71c3      	strb	r3, [r0, #7]
   108c0:	e199      	b.n	10bf6 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xbf7>
		ping_resp_send(_radio.conn_curr);
		break;

	case PDU_DATA_LLCTRL_TYPE_PING_RSP:
		/* Procedure complete */
		_radio.conn_curr->procedure_expire = 0;
   108c2:	876c      	strh	r4, [r5, #58]	; 0x3a
   108c4:	e551      	b.n	1036a <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x36b>
		break;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

	case PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP:
		if (_radio.conn_curr->llcp_req != _radio.conn_curr->llcp_ack) {
   108c6:	002a      	movs	r2, r5
   108c8:	3268      	adds	r2, #104	; 0x68
   108ca:	7811      	ldrb	r1, [r2, #0]
   108cc:	7850      	ldrb	r0, [r2, #1]
   108ce:	3201      	adds	r2, #1
   108d0:	4288      	cmp	r0, r1
   108d2:	d007      	beq.n	108e4 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x8e5>
			/* reset ctrl procedure */
			_radio.conn_curr->llcp_ack = _radio.conn_curr->llcp_req;
   108d4:	7011      	strb	r1, [r2, #0]

			switch (_radio.conn_curr->llcp_type) {
			default:
				LL_ASSERT(0);
   108d6:	4b82      	ldr	r3, [pc, #520]	; (10ae0 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xae1>)
   108d8:	9301      	str	r3, [sp, #4]
   108da:	4b83      	ldr	r3, [pc, #524]	; (10ae8 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xae9>)
   108dc:	9300      	str	r3, [sp, #0]
   108de:	4b88      	ldr	r3, [pc, #544]	; (10b00 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xb01>)
   108e0:	f000 fd87 	bl	113f2 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x13f3>
				break;
			}

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
		} else if (_radio.conn_curr->llcp_length.req !=
   108e4:	002a      	movs	r2, r5
   108e6:	32b4      	adds	r2, #180	; 0xb4
   108e8:	7811      	ldrb	r1, [r2, #0]
   108ea:	7850      	ldrb	r0, [r2, #1]
			   _radio.conn_curr->llcp_length.ack) {
   108ec:	3201      	adds	r2, #1
				LL_ASSERT(0);
				break;
			}

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
		} else if (_radio.conn_curr->llcp_length.req !=
   108ee:	4288      	cmp	r0, r1
   108f0:	d006      	beq.n	10900 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x901>
			   _radio.conn_curr->llcp_length.ack) {
			/* Procedure complete */
			_radio.conn_curr->llcp_length.ack =
   108f2:	7011      	strb	r1, [r2, #0]
				_radio.conn_curr->llcp_length.req;

			/* resume data packet tx */
			_radio.conn_curr->pause_tx = 0;
   108f4:	2108      	movs	r1, #8
   108f6:	781a      	ldrb	r2, [r3, #0]

			/* propagate the data length procedure to
			 * host
			 */
			*rx_enqueue = 1;
   108f8:	2401      	movs	r4, #1
			/* Procedure complete */
			_radio.conn_curr->llcp_length.ack =
				_radio.conn_curr->llcp_length.req;

			/* resume data packet tx */
			_radio.conn_curr->pause_tx = 0;
   108fa:	438a      	bics	r2, r1
   108fc:	701a      	strb	r2, [r3, #0]
   108fe:	e021      	b.n	10944 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x945>
			 */
			*rx_enqueue = 1;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
		} else if (_radio.conn_curr->llcp_phy.req !=
   10900:	002b      	movs	r3, r5
   10902:	33bc      	adds	r3, #188	; 0xbc
   10904:	781a      	ldrb	r2, [r3, #0]
   10906:	7859      	ldrb	r1, [r3, #1]
			   _radio.conn_curr->llcp_phy.ack) {
   10908:	3301      	adds	r3, #1
			 */
			*rx_enqueue = 1;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
		} else if (_radio.conn_curr->llcp_phy.req !=
   1090a:	4291      	cmp	r1, r2
   1090c:	d016      	beq.n	1093c <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x93d>
			   _radio.conn_curr->llcp_phy.ack) {
			struct radio_le_phy_upd_cmplt *p;

			/* Procedure complete */
			_radio.conn_curr->llcp_phy.ack =
   1090e:	701a      	strb	r2, [r3, #0]
				_radio.conn_curr->llcp_phy.req;

			/* skip event generation is not cmd initiated */
			if (_radio.conn_curr->llcp_phy.cmd) {
   10910:	3302      	adds	r3, #2
   10912:	781b      	ldrb	r3, [r3, #0]
   10914:	2400      	movs	r4, #0
   10916:	079b      	lsls	r3, r3, #30
   10918:	d514      	bpl.n	10944 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x945>
				/* generate phy update complete event */
				radio_pdu_node_rx->hdr.type =
   1091a:	230c      	movs	r3, #12
   1091c:	713b      	strb	r3, [r7, #4]
					NODE_RX_TYPE_PHY_UPDATE;

				p = (struct radio_le_phy_upd_cmplt *)
				    &pdu_data_rx->payload;
				p->status = 0;
				p->tx = _radio.conn_curr->phy_tx;
   1091e:	002b      	movs	r3, r5
				radio_pdu_node_rx->hdr.type =
					NODE_RX_TYPE_PHY_UPDATE;

				p = (struct radio_le_phy_upd_cmplt *)
				    &pdu_data_rx->payload;
				p->status = 0;
   10920:	72fc      	strb	r4, [r7, #11]
				p->tx = _radio.conn_curr->phy_tx;
   10922:	3332      	adds	r3, #50	; 0x32
   10924:	781b      	ldrb	r3, [r3, #0]
				p->rx = _radio.conn_curr->phy_rx;

				/* enqueue the phy update complete */
				*rx_enqueue = 1;
   10926:	3401      	adds	r4, #1
					NODE_RX_TYPE_PHY_UPDATE;

				p = (struct radio_le_phy_upd_cmplt *)
				    &pdu_data_rx->payload;
				p->status = 0;
				p->tx = _radio.conn_curr->phy_tx;
   10928:	069b      	lsls	r3, r3, #26
   1092a:	0f5b      	lsrs	r3, r3, #29
   1092c:	733b      	strb	r3, [r7, #12]
				p->rx = _radio.conn_curr->phy_rx;
   1092e:	002b      	movs	r3, r5
   10930:	3333      	adds	r3, #51	; 0x33
   10932:	781b      	ldrb	r3, [r3, #0]
   10934:	069b      	lsls	r3, r3, #26
   10936:	0f5b      	lsrs	r3, r3, #29
   10938:	737b      	strb	r3, [r7, #13]
   1093a:	e003      	b.n	10944 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x945>
		} else {
			struct pdu_data_llctrl *llctrl;

			llctrl = (struct pdu_data_llctrl *)
				&pdu_data_rx->payload.llctrl;
			switch (llctrl->ctrldata.unknown_rsp.type) {
   1093c:	7b3c      	ldrb	r4, [r7, #12]
				break;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

			default:
				/* enqueue the error and let HCI handle it */
				*rx_enqueue = 1;
   1093e:	3c12      	subs	r4, #18
   10940:	1e63      	subs	r3, r4, #1
   10942:	419c      	sbcs	r4, r3
				break;
			}
		}

		/* Procedure complete */
		_radio.conn_curr->procedure_expire = 0;
   10944:	2300      	movs	r3, #0
   10946:	876b      	strh	r3, [r5, #58]	; 0x3a
   10948:	e24b      	b.n	10de2 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xde3>
	u16_t eff_rx_octets;
	u16_t eff_tx_octets;
	u8_t nack = 0;

	eff_rx_octets = _radio.conn_curr->max_rx_octets;
	eff_tx_octets = _radio.conn_curr->max_tx_octets;
   1094a:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
{
	u16_t eff_rx_octets;
	u16_t eff_tx_octets;
	u8_t nack = 0;

	eff_rx_octets = _radio.conn_curr->max_rx_octets;
   1094c:	8e2e      	ldrh	r6, [r5, #48]	; 0x30
	eff_tx_octets = _radio.conn_curr->max_tx_octets;
   1094e:	930a      	str	r3, [sp, #40]	; 0x28

	if (/* Local idle, and Peer request then complete the Peer procedure
	     * with response.
	     */
	    ((_radio.conn_curr->llcp_length.req ==
   10950:	002b      	movs	r3, r5
   10952:	33b4      	adds	r3, #180	; 0xb4
   10954:	7819      	ldrb	r1, [r3, #0]
	      _radio.conn_curr->llcp_length.ack) &&
   10956:	3301      	adds	r3, #1
	u8_t nack = 0;

	eff_rx_octets = _radio.conn_curr->max_rx_octets;
	eff_tx_octets = _radio.conn_curr->max_tx_octets;

	if (/* Local idle, and Peer request then complete the Peer procedure
   10958:	781b      	ldrb	r3, [r3, #0]
   1095a:	428b      	cmp	r3, r1
   1095c:	d008      	beq.n	10970 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x971>
	    ((_radio.conn_curr->llcp_length.req !=
	      _radio.conn_curr->llcp_length.ack) &&
	     /* with Local requested and Peer request then complete the
	      * Peer procedure with response.
	      */
	     ((((_radio.conn_curr->llcp_length.state ==
   1095e:	002b      	movs	r3, r5
   10960:	33b6      	adds	r3, #182	; 0xb6
		 LLCP_LENGTH_STATE_REQ) ||
   10962:	781a      	ldrb	r2, [r3, #0]
   10964:	2303      	movs	r3, #3
   10966:	4013      	ands	r3, r2
	      _radio.conn_curr->llcp_length.ack) &&
	     (pdu_data_rx->payload.llctrl.opcode ==
	      PDU_DATA_LLCTRL_TYPE_LENGTH_REQ)) ||
	    /* or Local has active... */
	    ((_radio.conn_curr->llcp_length.req !=
	      _radio.conn_curr->llcp_length.ack) &&
   10968:	2b01      	cmp	r3, #1
   1096a:	d901      	bls.n	10970 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x971>
   1096c:	f000 fd49 	bl	11402 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x1403>
	      * Peer procedure with response.
	      */
	     ((((_radio.conn_curr->llcp_length.state ==
		 LLCP_LENGTH_STATE_REQ) ||
		(_radio.conn_curr->llcp_length.state ==
		 LLCP_LENGTH_STATE_ACK_WAIT)) &&
   10970:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10972:	2b14      	cmp	r3, #20
   10974:	d173      	bne.n	10a5e <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xa5f>
			&pdu_data_rx->payload.llctrl.ctrldata.length_req;

		/* use the minimal of our default_tx_octets and
		 * peer max_rx_octets
		 */
		if (lr->max_rx_octets >= RADIO_LL_LENGTH_OCTETS_RX_MIN) {
   10976:	7b7b      	ldrb	r3, [r7, #13]
   10978:	7b3a      	ldrb	r2, [r7, #12]
   1097a:	021b      	lsls	r3, r3, #8
   1097c:	4313      	orrs	r3, r2
   1097e:	2b1a      	cmp	r3, #26
   10980:	d906      	bls.n	10990 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x991>
			eff_tx_octets = min(lr->max_rx_octets,
   10982:	8da8      	ldrh	r0, [r5, #44]	; 0x2c
   10984:	1c02      	adds	r2, r0, #0
   10986:	4298      	cmp	r0, r3
   10988:	d900      	bls.n	1098c <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x98d>
   1098a:	1c1a      	adds	r2, r3, #0
   1098c:	b293      	uxth	r3, r2
   1098e:	930a      	str	r3, [sp, #40]	; 0x28
		}

		/* use the minimal of our max supported and
		 * peer max_tx_octets
		 */
		if (lr->max_tx_octets >= RADIO_LL_LENGTH_OCTETS_RX_MIN) {
   10990:	7c7b      	ldrb	r3, [r7, #17]
   10992:	7c3a      	ldrb	r2, [r7, #16]
   10994:	021b      	lsls	r3, r3, #8
   10996:	4313      	orrs	r3, r2
   10998:	2b1a      	cmp	r3, #26
   1099a:	d937      	bls.n	10a0c <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xa0d>
			eff_rx_octets = min(lr->max_tx_octets,
					    RADIO_LL_LENGTH_OCTETS_RX_MAX);
		}

		/* check if change in rx octets */
		if (eff_rx_octets != _radio.conn_curr->max_rx_octets) {
   1099c:	2e1b      	cmp	r6, #27
   1099e:	d035      	beq.n	10a0c <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xa0d>
			u16_t free_count_rx;

			free_count_rx = packet_rx_acquired_count_get()
   109a0:	f7fb fbf2 	bl	c188 <packet_rx_acquired_count_get>
				+ mem_free_count_get(_radio.pkt_rx_data_free);
   109a4:	4d57      	ldr	r5, [pc, #348]	; (10b04 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xb05>)

		/* check if change in rx octets */
		if (eff_rx_octets != _radio.conn_curr->max_rx_octets) {
			u16_t free_count_rx;

			free_count_rx = packet_rx_acquired_count_get()
   109a6:	0004      	movs	r4, r0
				+ mem_free_count_get(_radio.pkt_rx_data_free);
   109a8:	002e      	movs	r6, r5
   109aa:	36fc      	adds	r6, #252	; 0xfc
   109ac:	6b30      	ldr	r0, [r6, #48]	; 0x30
   109ae:	f7f9 ff9e 	bl	a8ee <mem_free_count_get>

		/* check if change in rx octets */
		if (eff_rx_octets != _radio.conn_curr->max_rx_octets) {
			u16_t free_count_rx;

			free_count_rx = packet_rx_acquired_count_get()
   109b2:	1904      	adds	r4, r0, r4
   109b4:	b2a0      	uxth	r0, r4
				+ mem_free_count_get(_radio.pkt_rx_data_free);
			LL_ASSERT(free_count_rx <= 0xFF);
   109b6:	28ff      	cmp	r0, #255	; 0xff
   109b8:	d909      	bls.n	109ce <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x9cf>
   109ba:	4b49      	ldr	r3, [pc, #292]	; (10ae0 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xae1>)
   109bc:	4a49      	ldr	r2, [pc, #292]	; (10ae4 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xae5>)
   109be:	9301      	str	r3, [sp, #4]
   109c0:	4b49      	ldr	r3, [pc, #292]	; (10ae8 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xae9>)
   109c2:	494a      	ldr	r1, [pc, #296]	; (10aec <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xaed>)
   109c4:	9300      	str	r3, [sp, #0]
   109c6:	4850      	ldr	r0, [pc, #320]	; (10b08 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xb09>)
   109c8:	4b50      	ldr	r3, [pc, #320]	; (10b0c <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xb0d>)
   109ca:	f000 fd15 	bl	113f8 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x13f9>

			if (_radio.packet_rx_data_count == free_count_rx) {
   109ce:	239b      	movs	r3, #155	; 0x9b
   109d0:	005b      	lsls	r3, r3, #1
   109d2:	5ceb      	ldrb	r3, [r5, r3]
   109d4:	221b      	movs	r2, #27
   109d6:	4283      	cmp	r3, r0
   109d8:	d144      	bne.n	10a64 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xa65>

				/* accept the effective tx */
				_radio.conn_curr->max_tx_octets = eff_tx_octets;
   109da:	4669      	mov	r1, sp
   109dc:	6973      	ldr	r3, [r6, #20]
   109de:	8d09      	ldrh	r1, [r1, #40]	; 0x28
				/* trigger or retain the ctrl procedure so as
				 * to resize the rx buffers.
				 */
				_radio.conn_curr->llcp_length.rx_octets =
					eff_rx_octets;
				_radio.conn_curr->llcp_length.tx_octets =
   109e0:	4668      	mov	r0, sp
			LL_ASSERT(free_count_rx <= 0xFF);

			if (_radio.packet_rx_data_count == free_count_rx) {

				/* accept the effective tx */
				_radio.conn_curr->max_tx_octets = eff_tx_octets;
   109e2:	85d9      	strh	r1, [r3, #46]	; 0x2e

				/* trigger or retain the ctrl procedure so as
				 * to resize the rx buffers.
				 */
				_radio.conn_curr->llcp_length.rx_octets =
   109e4:	0019      	movs	r1, r3
					eff_rx_octets;
				_radio.conn_curr->llcp_length.tx_octets =
   109e6:	8d00      	ldrh	r0, [r0, #40]	; 0x28
				_radio.conn_curr->max_tx_octets = eff_tx_octets;

				/* trigger or retain the ctrl procedure so as
				 * to resize the rx buffers.
				 */
				_radio.conn_curr->llcp_length.rx_octets =
   109e8:	31b8      	adds	r1, #184	; 0xb8
					eff_rx_octets;
				_radio.conn_curr->llcp_length.tx_octets =
   109ea:	8048      	strh	r0, [r1, #2]
					eff_tx_octets;
				_radio.conn_curr->llcp_length.ack =
   109ec:	0018      	movs	r0, r3
				_radio.conn_curr->max_tx_octets = eff_tx_octets;

				/* trigger or retain the ctrl procedure so as
				 * to resize the rx buffers.
				 */
				_radio.conn_curr->llcp_length.rx_octets =
   109ee:	800a      	strh	r2, [r1, #0]
					eff_rx_octets;
				_radio.conn_curr->llcp_length.tx_octets =
					eff_tx_octets;
				_radio.conn_curr->llcp_length.ack =
					(_radio.conn_curr->llcp_length.req - 1);
   109f0:	3904      	subs	r1, #4
				 */
				_radio.conn_curr->llcp_length.rx_octets =
					eff_rx_octets;
				_radio.conn_curr->llcp_length.tx_octets =
					eff_tx_octets;
				_radio.conn_curr->llcp_length.ack =
   109f2:	7809      	ldrb	r1, [r1, #0]
   109f4:	30b5      	adds	r0, #181	; 0xb5
   109f6:	3901      	subs	r1, #1
   109f8:	7001      	strb	r1, [r0, #0]
					(_radio.conn_curr->llcp_length.req - 1);
				_radio.conn_curr->llcp_length.state =
   109fa:	2003      	movs	r0, #3
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	struct radio_pdu_node_tx *tx_release = NULL;
	u8_t is_empty_pdu_tx_retry;
	struct pdu_data *pdu_data_rx;
	struct pdu_data *pdu_data_tx;
	u8_t rx_enqueue = 0;
   109fc:	2400      	movs	r4, #0
					eff_rx_octets;
				_radio.conn_curr->llcp_length.tx_octets =
					eff_tx_octets;
				_radio.conn_curr->llcp_length.ack =
					(_radio.conn_curr->llcp_length.req - 1);
				_radio.conn_curr->llcp_length.state =
   109fe:	33b6      	adds	r3, #182	; 0xb6
   10a00:	7819      	ldrb	r1, [r3, #0]
					LLCP_LENGTH_STATE_RESIZE;

				/* close the current connection event, so as
				 * to perform rx octet change.
				 */
				_radio.state = STATE_CLOSE;
   10a02:	7428      	strb	r0, [r5, #16]
					eff_rx_octets;
				_radio.conn_curr->llcp_length.tx_octets =
					eff_tx_octets;
				_radio.conn_curr->llcp_length.ack =
					(_radio.conn_curr->llcp_length.req - 1);
				_radio.conn_curr->llcp_length.state =
   10a04:	4301      	orrs	r1, r0
   10a06:	7019      	strb	r1, [r3, #0]
static inline u8_t isr_rx_conn_pkt_ctrl_dle(struct pdu_data *pdu_data_rx,
					    u8_t *rx_enqueue)
{
	u16_t eff_rx_octets;
	u16_t eff_tx_octets;
	u8_t nack = 0;
   10a08:	0023      	movs	r3, r4
   10a0a:	e02d      	b.n	10a68 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xa69>
			} else {
				nack = 1;
			}
		} else {
			/* resume data packet tx */
			_radio.conn_curr->pause_tx = 0;
   10a0c:	002a      	movs	r2, r5
   10a0e:	2008      	movs	r0, #8
   10a10:	32c0      	adds	r2, #192	; 0xc0
   10a12:	7813      	ldrb	r3, [r2, #0]
			lr->max_tx_time = ((eff_tx_octets + 14) << 3);

			/* Enqueue data length change event (with no change in
			 * rx length happened), safe to enqueue rx.
			 */
			*rx_enqueue = 1;
   10a14:	2401      	movs	r4, #1
			} else {
				nack = 1;
			}
		} else {
			/* resume data packet tx */
			_radio.conn_curr->pause_tx = 0;
   10a16:	4383      	bics	r3, r0
   10a18:	7013      	strb	r3, [r2, #0]

			/* accept the effective tx */
			_radio.conn_curr->max_tx_octets = eff_tx_octets;
   10a1a:	466b      	mov	r3, sp
   10a1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
			_radio.conn_curr->llcp_length.ack =
				_radio.conn_curr->llcp_length.req;
			_radio.conn_curr->procedure_expire = 0;

			/* prepare event params */
			lr->max_rx_octets = eff_rx_octets;
   10a1e:	0a32      	lsrs	r2, r6, #8
		} else {
			/* resume data packet tx */
			_radio.conn_curr->pause_tx = 0;

			/* accept the effective tx */
			_radio.conn_curr->max_tx_octets = eff_tx_octets;
   10a20:	85eb      	strh	r3, [r5, #46]	; 0x2e

			/* Procedure complete */
			_radio.conn_curr->llcp_length.ack =
   10a22:	002b      	movs	r3, r5
   10a24:	33b5      	adds	r3, #181	; 0xb5
   10a26:	7019      	strb	r1, [r3, #0]
				_radio.conn_curr->llcp_length.req;
			_radio.conn_curr->procedure_expire = 0;
   10a28:	2300      	movs	r3, #0
   10a2a:	876b      	strh	r3, [r5, #58]	; 0x3a

			/* prepare event params */
			lr->max_rx_octets = eff_rx_octets;
   10a2c:	737a      	strb	r2, [r7, #13]
			lr->max_rx_time = ((eff_rx_octets + 14) << 3);
   10a2e:	0032      	movs	r2, r6
   10a30:	320e      	adds	r2, #14
   10a32:	00d2      	lsls	r2, r2, #3
   10a34:	b292      	uxth	r2, r2
   10a36:	73ba      	strb	r2, [r7, #14]
   10a38:	40c2      	lsrs	r2, r0
			lr->max_tx_octets = eff_tx_octets;
   10a3a:	2128      	movs	r1, #40	; 0x28
				_radio.conn_curr->llcp_length.req;
			_radio.conn_curr->procedure_expire = 0;

			/* prepare event params */
			lr->max_rx_octets = eff_rx_octets;
			lr->max_rx_time = ((eff_rx_octets + 14) << 3);
   10a3c:	73fa      	strb	r2, [r7, #15]
			lr->max_tx_octets = eff_tx_octets;
   10a3e:	466a      	mov	r2, sp
   10a40:	1852      	adds	r2, r2, r1
   10a42:	7812      	ldrb	r2, [r2, #0]
			_radio.conn_curr->llcp_length.ack =
				_radio.conn_curr->llcp_length.req;
			_radio.conn_curr->procedure_expire = 0;

			/* prepare event params */
			lr->max_rx_octets = eff_rx_octets;
   10a44:	733e      	strb	r6, [r7, #12]
			lr->max_rx_time = ((eff_rx_octets + 14) << 3);
			lr->max_tx_octets = eff_tx_octets;
   10a46:	743a      	strb	r2, [r7, #16]
   10a48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   10a4a:	40c2      	lsrs	r2, r0
   10a4c:	747a      	strb	r2, [r7, #17]
			lr->max_tx_time = ((eff_tx_octets + 14) << 3);
   10a4e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   10a50:	320e      	adds	r2, #14
   10a52:	00d2      	lsls	r2, r2, #3
   10a54:	b292      	uxth	r2, r2
   10a56:	74ba      	strb	r2, [r7, #18]
   10a58:	40c2      	lsrs	r2, r0
   10a5a:	74fa      	strb	r2, [r7, #19]
   10a5c:	e005      	b.n	10a6a <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xa6b>
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	struct radio_pdu_node_tx *tx_release = NULL;
	u8_t is_empty_pdu_tx_retry;
	struct pdu_data *pdu_data_rx;
	struct pdu_data *pdu_data_tx;
	u8_t rx_enqueue = 0;
   10a5e:	2400      	movs	r4, #0
static inline u8_t isr_rx_conn_pkt_ctrl_dle(struct pdu_data *pdu_data_rx,
					    u8_t *rx_enqueue)
{
	u16_t eff_rx_octets;
	u16_t eff_tx_octets;
	u8_t nack = 0;
   10a60:	0023      	movs	r3, r4
   10a62:	e002      	b.n	10a6a <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xa6b>
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	struct radio_pdu_node_tx *tx_release = NULL;
	u8_t is_empty_pdu_tx_retry;
	struct pdu_data *pdu_data_rx;
	struct pdu_data *pdu_data_tx;
	u8_t rx_enqueue = 0;
   10a64:	2400      	movs	r4, #0
				/* close the current connection event, so as
				 * to perform rx octet change.
				 */
				_radio.state = STATE_CLOSE;
			} else {
				nack = 1;
   10a66:	2301      	movs	r3, #1

		/* use the minimal of our max supported and
		 * peer max_tx_octets
		 */
		if (lr->max_tx_octets >= RADIO_LL_LENGTH_OCTETS_RX_MIN) {
			eff_rx_octets = min(lr->max_tx_octets,
   10a68:	0016      	movs	r6, r2
		/* Drop response with no Local initiated request. */
		LL_ASSERT(pdu_data_rx->payload.llctrl.opcode ==
			  PDU_DATA_LLCTRL_TYPE_LENGTH_RSP);
	}

	if ((PDU_DATA_LLCTRL_TYPE_LENGTH_REQ ==
   10a6a:	7afa      	ldrb	r2, [r7, #11]
   10a6c:	2a14      	cmp	r2, #20
   10a6e:	d000      	beq.n	10a72 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xa73>
   10a70:	e1b4      	b.n	10ddc <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xddd>
	struct radio_pdu_node_tx *tx_release = NULL;
	u8_t is_empty_pdu_tx_retry;
	struct pdu_data *pdu_data_rx;
	struct pdu_data *pdu_data_tx;
	u8_t rx_enqueue = 0;
	u8_t crc_close = 0;
   10a72:	2200      	movs	r2, #0
   10a74:	920e      	str	r2, [sp, #56]	; 0x38
		LL_ASSERT(pdu_data_rx->payload.llctrl.opcode ==
			  PDU_DATA_LLCTRL_TYPE_LENGTH_RSP);
	}

	if ((PDU_DATA_LLCTRL_TYPE_LENGTH_REQ ==
	     pdu_data_rx->payload.llctrl.opcode) && !nack) {
   10a76:	4293      	cmp	r3, r2
   10a78:	d000      	beq.n	10a7c <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xa7d>
   10a7a:	e201      	b.n	10e80 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xe81>
		length_resp_send(_radio.conn_curr, eff_rx_octets,
   10a7c:	4821      	ldr	r0, [pc, #132]	; (10b04 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xb05>)
   10a7e:	0003      	movs	r3, r0
			     u16_t eff_tx_octets)
{
	struct radio_pdu_node_tx *node_tx;
	struct pdu_data *pdu_ctrl_tx;

	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   10a80:	3059      	adds	r0, #89	; 0x59
			  PDU_DATA_LLCTRL_TYPE_LENGTH_RSP);
	}

	if ((PDU_DATA_LLCTRL_TYPE_LENGTH_REQ ==
	     pdu_data_rx->payload.llctrl.opcode) && !nack) {
		length_resp_send(_radio.conn_curr, eff_rx_octets,
   10a82:	33fc      	adds	r3, #252	; 0xfc
			     u16_t eff_tx_octets)
{
	struct radio_pdu_node_tx *node_tx;
	struct pdu_data *pdu_ctrl_tx;

	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   10a84:	30ff      	adds	r0, #255	; 0xff
			  PDU_DATA_LLCTRL_TYPE_LENGTH_RSP);
	}

	if ((PDU_DATA_LLCTRL_TYPE_LENGTH_REQ ==
	     pdu_data_rx->payload.llctrl.opcode) && !nack) {
		length_resp_send(_radio.conn_curr, eff_rx_octets,
   10a86:	695d      	ldr	r5, [r3, #20]
			     u16_t eff_tx_octets)
{
	struct radio_pdu_node_tx *node_tx;
	struct pdu_data *pdu_ctrl_tx;

	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   10a88:	f7f9 ff02 	bl	a890 <mem_acquire>
   10a8c:	1e01      	subs	r1, r0, #0
	LL_ASSERT(node_tx);
   10a8e:	d105      	bne.n	10a9c <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xa9d>
   10a90:	4b13      	ldr	r3, [pc, #76]	; (10ae0 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xae1>)
   10a92:	9301      	str	r3, [sp, #4]
   10a94:	4b14      	ldr	r3, [pc, #80]	; (10ae8 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xae9>)
   10a96:	9300      	str	r3, [sp, #0]
   10a98:	4b1d      	ldr	r3, [pc, #116]	; (10b10 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xb11>)
   10a9a:	e16f      	b.n	10d7c <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xd7d>

	pdu_ctrl_tx = (struct pdu_data *) node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   10a9c:	2203      	movs	r2, #3
   10a9e:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
		sizeof(struct pdu_data_llctrl_length_req_rsp);
	pdu_ctrl_tx->payload.llctrl.opcode =
		PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
	pdu_ctrl_tx->payload.llctrl.ctrldata.length_rsp.max_rx_octets =
   10aa0:	7206      	strb	r6, [r0, #8]

	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
	LL_ASSERT(node_tx);

	pdu_ctrl_tx = (struct pdu_data *) node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   10aa2:	4313      	orrs	r3, r2
   10aa4:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   10aa6:	2309      	movs	r3, #9
   10aa8:	7143      	strb	r3, [r0, #5]
		sizeof(struct pdu_data_llctrl_length_req_rsp);
	pdu_ctrl_tx->payload.llctrl.opcode =
   10aaa:	330c      	adds	r3, #12
   10aac:	71c3      	strb	r3, [r0, #7]
		PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
	pdu_ctrl_tx->payload.llctrl.ctrldata.length_rsp.max_rx_octets =
   10aae:	0a33      	lsrs	r3, r6, #8
   10ab0:	7243      	strb	r3, [r0, #9]
		eff_rx_octets;
	pdu_ctrl_tx->payload.llctrl.ctrldata.length_rsp.max_rx_time =
   10ab2:	0033      	movs	r3, r6
   10ab4:	330e      	adds	r3, #14
   10ab6:	4093      	lsls	r3, r2
   10ab8:	b29b      	uxth	r3, r3
   10aba:	7283      	strb	r3, [r0, #10]
   10abc:	0a1b      	lsrs	r3, r3, #8
   10abe:	72c3      	strb	r3, [r0, #11]
		((eff_rx_octets + 14) << 3);
	pdu_ctrl_tx->payload.llctrl.ctrldata.length_rsp.max_tx_octets =
   10ac0:	466b      	mov	r3, sp
   10ac2:	3225      	adds	r2, #37	; 0x25
   10ac4:	189b      	adds	r3, r3, r2
   10ac6:	781b      	ldrb	r3, [r3, #0]
   10ac8:	7303      	strb	r3, [r0, #12]
   10aca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10acc:	0a1b      	lsrs	r3, r3, #8
   10ace:	7343      	strb	r3, [r0, #13]
		eff_tx_octets;
	pdu_ctrl_tx->payload.llctrl.ctrldata.length_rsp.max_tx_time =
   10ad0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10ad2:	330e      	adds	r3, #14
   10ad4:	00db      	lsls	r3, r3, #3
   10ad6:	b29b      	uxth	r3, r3
   10ad8:	7383      	strb	r3, [r0, #14]
   10ada:	0a1b      	lsrs	r3, r3, #8
   10adc:	73c3      	strb	r3, [r0, #15]
   10ade:	e15e      	b.n	10d9e <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xd9f>
   10ae0:	000154c4 	.word	0x000154c4
   10ae4:	00015484 	.word	0x00015484
   10ae8:	000154c9 	.word	0x000154c9
   10aec:	0001548b 	.word	0x0001548b
   10af0:	000173d9 	.word	0x000173d9
   10af4:	00018197 	.word	0x00018197
   10af8:	000184d8 	.word	0x000184d8
   10afc:	0001837e 	.word	0x0001837e
   10b00:	000181b9 	.word	0x000181b9
   10b04:	200015c0 	.word	0x200015c0
   10b08:	0001716b 	.word	0x0001716b
   10b0c:	0001826f 	.word	0x0001826f
   10b10:	00018292 	.word	0x00018292
		break;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
	case PDU_DATA_LLCTRL_TYPE_PHY_REQ:
		if (_radio.role == ROLE_MASTER) {
   10b14:	7bf3      	ldrb	r3, [r6, #15]
   10b16:	2b04      	cmp	r3, #4
   10b18:	d14d      	bne.n	10bb6 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xbb7>
			if ((_radio.conn_curr->llcp_phy.ack !=
   10b1a:	002b      	movs	r3, r5
   10b1c:	33bd      	adds	r3, #189	; 0xbd
   10b1e:	781a      	ldrb	r2, [r3, #0]
			     _radio.conn_curr->llcp_phy.req) &&
   10b20:	3b01      	subs	r3, #1
   10b22:	7819      	ldrb	r1, [r3, #0]
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
	case PDU_DATA_LLCTRL_TYPE_PHY_REQ:
		if (_radio.role == ROLE_MASTER) {
			if ((_radio.conn_curr->llcp_phy.ack !=
   10b24:	428a      	cmp	r2, r1
   10b26:	d00c      	beq.n	10b42 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xb43>
			     _radio.conn_curr->llcp_phy.req) &&
   10b28:	7898      	ldrb	r0, [r3, #2]
   10b2a:	2303      	movs	r3, #3
   10b2c:	4003      	ands	r3, r0
   10b2e:	3b01      	subs	r3, #1
   10b30:	2b02      	cmp	r3, #2
   10b32:	d806      	bhi.n	10b42 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xb43>
			     (_radio.conn_curr->llcp_phy.state ==
			      LLCP_PHY_STATE_RSP_WAIT) ||
			     (_radio.conn_curr->llcp_phy.state ==
			      LLCP_PHY_STATE_UPD))) {
				/* cross-over */
				reject_ind_ext_send(_radio.conn_curr,
   10b34:	2223      	movs	r2, #35	; 0x23
   10b36:	2116      	movs	r1, #22
   10b38:	0028      	movs	r0, r5
   10b3a:	f7fd fbb9 	bl	e2b0 <reject_ind_ext_send>
   10b3e:	f7ff fc14 	bl	1036a <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x36b>
				struct pdu_data_llctrl *c =
					&pdu_data_rx->payload.llctrl;
				struct pdu_data_llctrl_phy_req_rsp *p =
					&c->ctrldata.phy_req;

				_radio.conn_curr->llcp_phy.state =
   10b42:	002b      	movs	r3, r5
   10b44:	2403      	movs	r4, #3
   10b46:	33be      	adds	r3, #190	; 0xbe
   10b48:	7818      	ldrb	r0, [r3, #0]
   10b4a:	4320      	orrs	r0, r4
   10b4c:	7018      	strb	r0, [r3, #0]
					LLCP_PHY_STATE_UPD;

				if (_radio.conn_curr->llcp_phy.ack ==
   10b4e:	428a      	cmp	r2, r1
   10b50:	d11c      	bne.n	10b8c <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xb8d>
				    _radio.conn_curr->llcp_phy.req) {
					_radio.conn_curr->llcp_phy.ack--;
   10b52:	0029      	movs	r1, r5
   10b54:	3a01      	subs	r2, #1
   10b56:	31bd      	adds	r1, #189	; 0xbd
   10b58:	700a      	strb	r2, [r1, #0]

					_radio.conn_curr->llcp_phy.cmd = 0;
   10b5a:	2102      	movs	r1, #2
   10b5c:	785a      	ldrb	r2, [r3, #1]

					_radio.conn_curr->llcp_phy.tx =
   10b5e:	201c      	movs	r0, #28

				if (_radio.conn_curr->llcp_phy.ack ==
				    _radio.conn_curr->llcp_phy.req) {
					_radio.conn_curr->llcp_phy.ack--;

					_radio.conn_curr->llcp_phy.cmd = 0;
   10b60:	438a      	bics	r2, r1
   10b62:	705a      	strb	r2, [r3, #1]

					_radio.conn_curr->llcp_phy.tx =
						_radio.conn_curr->phy_pref_tx;
   10b64:	002a      	movs	r2, r5
   10b66:	3232      	adds	r2, #50	; 0x32
   10b68:	7811      	ldrb	r1, [r2, #0]
				    _radio.conn_curr->llcp_phy.req) {
					_radio.conn_curr->llcp_phy.ack--;

					_radio.conn_curr->llcp_phy.cmd = 0;

					_radio.conn_curr->llcp_phy.tx =
   10b6a:	2207      	movs	r2, #7
   10b6c:	400a      	ands	r2, r1
   10b6e:	0091      	lsls	r1, r2, #2
   10b70:	781a      	ldrb	r2, [r3, #0]
   10b72:	4382      	bics	r2, r0
   10b74:	430a      	orrs	r2, r1
   10b76:	701a      	strb	r2, [r3, #0]
						_radio.conn_curr->phy_pref_tx;
					_radio.conn_curr->llcp_phy.rx =
						_radio.conn_curr->phy_pref_rx;
   10b78:	002a      	movs	r2, r5
   10b7a:	3233      	adds	r2, #51	; 0x33
   10b7c:	7812      	ldrb	r2, [r2, #0]

					_radio.conn_curr->llcp_phy.cmd = 0;

					_radio.conn_curr->llcp_phy.tx =
						_radio.conn_curr->phy_pref_tx;
					_radio.conn_curr->llcp_phy.rx =
   10b7e:	7818      	ldrb	r0, [r3, #0]
						_radio.conn_curr->phy_pref_rx;
   10b80:	0752      	lsls	r2, r2, #29

					_radio.conn_curr->llcp_phy.cmd = 0;

					_radio.conn_curr->llcp_phy.tx =
						_radio.conn_curr->phy_pref_tx;
					_radio.conn_curr->llcp_phy.rx =
   10b82:	0e11      	lsrs	r1, r2, #24
   10b84:	221f      	movs	r2, #31
   10b86:	4002      	ands	r2, r0
   10b88:	430a      	orrs	r2, r1
   10b8a:	701a      	strb	r2, [r3, #0]
						_radio.conn_curr->phy_pref_rx;
				}

				_radio.conn_curr->llcp_phy.tx &= p->rx_phys;
   10b8c:	35be      	adds	r5, #190	; 0xbe
   10b8e:	7829      	ldrb	r1, [r5, #0]
   10b90:	7b7b      	ldrb	r3, [r7, #13]
   10b92:	06ca      	lsls	r2, r1, #27
   10b94:	0f52      	lsrs	r2, r2, #29
   10b96:	4013      	ands	r3, r2
   10b98:	009a      	lsls	r2, r3, #2
   10b9a:	231c      	movs	r3, #28
   10b9c:	4399      	bics	r1, r3
   10b9e:	000b      	movs	r3, r1
   10ba0:	4313      	orrs	r3, r2
   10ba2:	702b      	strb	r3, [r5, #0]
				_radio.conn_curr->llcp_phy.rx &= p->tx_phys;
   10ba4:	7b39      	ldrb	r1, [r7, #12]
   10ba6:	095a      	lsrs	r2, r3, #5
   10ba8:	400a      	ands	r2, r1
   10baa:	211f      	movs	r1, #31
   10bac:	0152      	lsls	r2, r2, #5
   10bae:	400b      	ands	r3, r1
   10bb0:	4313      	orrs	r3, r2
   10bb2:	f000 fc3c 	bl	1142e <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x142f>
{
	struct radio_pdu_node_tx *node_tx;
	struct pdu_data *pdu_ctrl_tx;

	/* acquire tx mem */
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   10bb6:	0030      	movs	r0, r6
   10bb8:	3059      	adds	r0, #89	; 0x59
   10bba:	30ff      	adds	r0, #255	; 0xff
   10bbc:	f7f9 fe68 	bl	a890 <mem_acquire>
   10bc0:	1e01      	subs	r1, r0, #0
	LL_ASSERT(node_tx);
   10bc2:	d105      	bne.n	10bd0 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xbd1>
   10bc4:	4bcb      	ldr	r3, [pc, #812]	; (10ef4 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xef5>)
   10bc6:	9301      	str	r3, [sp, #4]
   10bc8:	4bcb      	ldr	r3, [pc, #812]	; (10ef8 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xef9>)
   10bca:	9300      	str	r3, [sp, #0]
   10bcc:	4bcb      	ldr	r3, [pc, #812]	; (10efc <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xefd>)
   10bce:	e0d5      	b.n	10d7c <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xd7d>

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   10bd0:	2203      	movs	r2, #3
   10bd2:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   10bd4:	7142      	strb	r2, [r0, #5]
	/* acquire tx mem */
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
	LL_ASSERT(node_tx);

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   10bd6:	4313      	orrs	r3, r2
   10bd8:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
			   sizeof(struct pdu_data_llctrl_phy_req_rsp);
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   10bda:	2317      	movs	r3, #23
   10bdc:	71c3      	strb	r3, [r0, #7]
	pdu_ctrl_tx->payload.llctrl.ctrldata.phy_rsp.tx_phys =
		conn->phy_pref_tx;
   10bde:	002b      	movs	r3, r5
   10be0:	3332      	adds	r3, #50	; 0x32
   10be2:	781b      	ldrb	r3, [r3, #0]
   10be4:	075b      	lsls	r3, r3, #29
   10be6:	0f5b      	lsrs	r3, r3, #29
	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
			   sizeof(struct pdu_data_llctrl_phy_req_rsp);
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
	pdu_ctrl_tx->payload.llctrl.ctrldata.phy_rsp.tx_phys =
   10be8:	7203      	strb	r3, [r0, #8]
		conn->phy_pref_tx;
	pdu_ctrl_tx->payload.llctrl.ctrldata.phy_rsp.rx_phys =
		conn->phy_pref_rx;
   10bea:	002b      	movs	r3, r5
   10bec:	3333      	adds	r3, #51	; 0x33
   10bee:	781b      	ldrb	r3, [r3, #0]
   10bf0:	075b      	lsls	r3, r3, #29
   10bf2:	0f5b      	lsrs	r3, r3, #29
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
			   sizeof(struct pdu_data_llctrl_phy_req_rsp);
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
	pdu_ctrl_tx->payload.llctrl.ctrldata.phy_rsp.tx_phys =
		conn->phy_pref_tx;
	pdu_ctrl_tx->payload.llctrl.ctrldata.phy_rsp.rx_phys =
   10bf4:	7243      	strb	r3, [r0, #9]
		conn->phy_pref_rx;

	ctrl_tx_enqueue(conn, node_tx);
   10bf6:	0028      	movs	r0, r5
   10bf8:	f7fd fab8 	bl	e16c <ctrl_tx_enqueue>
   10bfc:	f7ff fbb5 	bl	1036a <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x36b>
			phy_rsp_send(_radio.conn_curr);
		}
		break;

	case PDU_DATA_LLCTRL_TYPE_PHY_RSP:
		if ((_radio.role == ROLE_MASTER) &&
   10c00:	7bf3      	ldrb	r3, [r6, #15]
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	struct radio_pdu_node_tx *tx_release = NULL;
	u8_t is_empty_pdu_tx_retry;
	struct pdu_data *pdu_data_rx;
	struct pdu_data *pdu_data_tx;
	u8_t rx_enqueue = 0;
   10c02:	2400      	movs	r4, #0
			phy_rsp_send(_radio.conn_curr);
		}
		break;

	case PDU_DATA_LLCTRL_TYPE_PHY_RSP:
		if ((_radio.role == ROLE_MASTER) &&
   10c04:	2b04      	cmp	r3, #4
   10c06:	d000      	beq.n	10c0a <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xc0b>
   10c08:	e0eb      	b.n	10de2 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xde3>
   10c0a:	002b      	movs	r3, r5
   10c0c:	33bd      	adds	r3, #189	; 0xbd
   10c0e:	781a      	ldrb	r2, [r3, #0]
   10c10:	3b01      	subs	r3, #1
   10c12:	781b      	ldrb	r3, [r3, #0]
   10c14:	429a      	cmp	r2, r3
   10c16:	d100      	bne.n	10c1a <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xc1b>
   10c18:	e0e3      	b.n	10de2 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xde3>
		    (_radio.conn_curr->llcp_phy.ack !=
		     _radio.conn_curr->llcp_phy.req) &&
		    (_radio.conn_curr->llcp_phy.state ==
   10c1a:	0029      	movs	r1, r5
   10c1c:	31be      	adds	r1, #190	; 0xbe
		break;

	case PDU_DATA_LLCTRL_TYPE_PHY_RSP:
		if ((_radio.role == ROLE_MASTER) &&
		    (_radio.conn_curr->llcp_phy.ack !=
		     _radio.conn_curr->llcp_phy.req) &&
   10c1e:	780b      	ldrb	r3, [r1, #0]
   10c20:	2003      	movs	r0, #3
   10c22:	001a      	movs	r2, r3
   10c24:	4002      	ands	r2, r0
   10c26:	2a02      	cmp	r2, #2
   10c28:	d000      	beq.n	10c2c <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xc2d>
   10c2a:	e0da      	b.n	10de2 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xde3>
		    (_radio.conn_curr->llcp_phy.state ==
		     LLCP_PHY_STATE_RSP_WAIT)) {
			struct pdu_data_llctrl_phy_req_rsp *p =
				&pdu_data_rx->payload.llctrl.ctrldata.phy_rsp;

			_radio.conn_curr->llcp_phy.state = LLCP_PHY_STATE_UPD;
   10c2c:	4318      	orrs	r0, r3
   10c2e:	7008      	strb	r0, [r1, #0]

			_radio.conn_curr->llcp_phy.tx &= p->rx_phys;
   10c30:	7b7b      	ldrb	r3, [r7, #13]
   10c32:	06c2      	lsls	r2, r0, #27
   10c34:	0f52      	lsrs	r2, r2, #29
   10c36:	401a      	ands	r2, r3
   10c38:	231c      	movs	r3, #28
   10c3a:	4398      	bics	r0, r3
   10c3c:	0003      	movs	r3, r0
   10c3e:	0092      	lsls	r2, r2, #2
   10c40:	4313      	orrs	r3, r2
   10c42:	700b      	strb	r3, [r1, #0]
			_radio.conn_curr->llcp_phy.rx &= p->tx_phys;
   10c44:	7b38      	ldrb	r0, [r7, #12]
   10c46:	095a      	lsrs	r2, r3, #5
   10c48:	4002      	ands	r2, r0
   10c4a:	201f      	movs	r0, #31
   10c4c:	0152      	lsls	r2, r2, #5
   10c4e:	4003      	ands	r3, r0
   10c50:	4313      	orrs	r3, r2
   10c52:	700b      	strb	r3, [r1, #0]

			/* Procedure timeout is stopped */
			_radio.conn_curr->procedure_expire = 0;
   10c54:	876c      	strh	r4, [r5, #58]	; 0x3a
   10c56:	e0c4      	b.n	10de2 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xde3>

	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
	p = &pdu_data_rx->payload.llctrl.ctrldata.phy_upd_ind;

	/* Both tx and rx PHY unchanged */
	if (!((p->m_to_s_phy | p->s_to_m_phy) & 0x07)) {
   10c58:	7b3a      	ldrb	r2, [r7, #12]
   10c5a:	7b7b      	ldrb	r3, [r7, #13]
   10c5c:	4313      	orrs	r3, r2
   10c5e:	2207      	movs	r2, #7
   10c60:	4013      	ands	r3, r2
   10c62:	d125      	bne.n	10cb0 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xcb1>
		struct radio_le_phy_upd_cmplt *p;

		/* Ignore event generation if not local cmd initiated */
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   10c64:	002a      	movs	r2, r5
   10c66:	0029      	movs	r1, r5
   10c68:	32bc      	adds	r2, #188	; 0xbc
   10c6a:	31bd      	adds	r1, #189	; 0xbd
   10c6c:	7810      	ldrb	r0, [r2, #0]
   10c6e:	780a      	ldrb	r2, [r1, #0]
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	struct radio_pdu_node_tx *tx_release = NULL;
	u8_t is_empty_pdu_tx_retry;
	struct pdu_data *pdu_data_rx;
	struct pdu_data *pdu_data_tx;
	u8_t rx_enqueue = 0;
   10c70:	001c      	movs	r4, r3
	/* Both tx and rx PHY unchanged */
	if (!((p->m_to_s_phy | p->s_to_m_phy) & 0x07)) {
		struct radio_le_phy_upd_cmplt *p;

		/* Ignore event generation if not local cmd initiated */
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   10c72:	4282      	cmp	r2, r0
   10c74:	d100      	bne.n	10c78 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xc79>
   10c76:	e0b4      	b.n	10de2 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xde3>
		    (conn->llcp_phy.state != LLCP_PHY_STATE_RSP_WAIT) ||
   10c78:	002a      	movs	r2, r5
   10c7a:	32be      	adds	r2, #190	; 0xbe
   10c7c:	8814      	ldrh	r4, [r2, #0]
   10c7e:	4ea0      	ldr	r6, [pc, #640]	; (10f00 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xf01>)
   10c80:	4aa0      	ldr	r2, [pc, #640]	; (10f04 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xf05>)
   10c82:	4022      	ands	r2, r4
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	struct radio_pdu_node_tx *tx_release = NULL;
	u8_t is_empty_pdu_tx_retry;
	struct pdu_data *pdu_data_rx;
	struct pdu_data *pdu_data_tx;
	u8_t rx_enqueue = 0;
   10c84:	001c      	movs	r4, r3
	if (!((p->m_to_s_phy | p->s_to_m_phy) & 0x07)) {
		struct radio_le_phy_upd_cmplt *p;

		/* Ignore event generation if not local cmd initiated */
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
		    (conn->llcp_phy.state != LLCP_PHY_STATE_RSP_WAIT) ||
   10c86:	42b2      	cmp	r2, r6
   10c88:	d000      	beq.n	10c8c <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xc8d>
   10c8a:	e0aa      	b.n	10de2 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xde3>
		    (!conn->llcp_phy.cmd)) {
			return 0;
		}

		/* Procedure complete */
		conn->llcp_phy.ack = conn->llcp_phy.req;
   10c8c:	7008      	strb	r0, [r1, #0]
		conn->procedure_expire = 0;
   10c8e:	876b      	strh	r3, [r5, #58]	; 0x3a

		/* generate phy update complete event */
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   10c90:	330c      	adds	r3, #12
   10c92:	713b      	strb	r3, [r7, #4]

		p = (struct radio_le_phy_upd_cmplt *)&pdu_data_rx->payload;
		p->status = 0;
   10c94:	72fc      	strb	r4, [r7, #11]
		p->tx = conn->phy_tx;
   10c96:	002b      	movs	r3, r5
   10c98:	3332      	adds	r3, #50	; 0x32
   10c9a:	781b      	ldrb	r3, [r3, #0]
		p->rx = conn->phy_rx;
   10c9c:	3533      	adds	r5, #51	; 0x33
		/* generate phy update complete event */
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;

		p = (struct radio_le_phy_upd_cmplt *)&pdu_data_rx->payload;
		p->status = 0;
		p->tx = conn->phy_tx;
   10c9e:	069b      	lsls	r3, r3, #26
   10ca0:	0f5b      	lsrs	r3, r3, #29
   10ca2:	733b      	strb	r3, [r7, #12]
		p->rx = conn->phy_rx;
   10ca4:	782b      	ldrb	r3, [r5, #0]
   10ca6:	069b      	lsls	r3, r3, #26
   10ca8:	0f5b      	lsrs	r3, r3, #29
   10caa:	737b      	strb	r3, [r7, #13]

		/* enqueue the phy update complete */
		*rx_enqueue = 1;
   10cac:	3401      	adds	r4, #1
   10cae:	e098      	b.n	10de2 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xde3>

		return 0;
	}

	/* instant passed */
	if (((p->instant - conn->event_counter) & 0xffff) > 0x7fff) {
   10cb0:	7bfb      	ldrb	r3, [r7, #15]
   10cb2:	7bba      	ldrb	r2, [r7, #14]
   10cb4:	021b      	lsls	r3, r3, #8
   10cb6:	4313      	orrs	r3, r2
   10cb8:	8c6a      	ldrh	r2, [r5, #34]	; 0x22
   10cba:	1a9b      	subs	r3, r3, r2
   10cbc:	4a92      	ldr	r2, [pc, #584]	; (10f08 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xf09>)
   10cbe:	b29b      	uxth	r3, r3
   10cc0:	4293      	cmp	r3, r2
   10cc2:	dd00      	ble.n	10cc6 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xcc7>
   10cc4:	e3b1      	b.n	1142a <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x142b>
		return 1;
	}

	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   10cc6:	002b      	movs	r3, r5
   10cc8:	3368      	adds	r3, #104	; 0x68
   10cca:	7819      	ldrb	r1, [r3, #0]
   10ccc:	3301      	adds	r3, #1
   10cce:	781b      	ldrb	r3, [r3, #0]
   10cd0:	428b      	cmp	r3, r1
   10cd2:	d008      	beq.n	10ce6 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xce7>
   10cd4:	4b87      	ldr	r3, [pc, #540]	; (10ef4 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xef5>)
   10cd6:	9301      	str	r3, [sp, #4]
   10cd8:	4b87      	ldr	r3, [pc, #540]	; (10ef8 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xef9>)
   10cda:	9300      	str	r3, [sp, #0]
   10cdc:	4b8b      	ldr	r3, [pc, #556]	; (10f0c <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xf0d>)
   10cde:	4a8c      	ldr	r2, [pc, #560]	; (10f10 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xf11>)
   10ce0:	498c      	ldr	r1, [pc, #560]	; (10f14 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xf15>)
   10ce2:	488d      	ldr	r0, [pc, #564]	; (10f18 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xf19>)
   10ce4:	e388      	b.n	113f8 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x13f9>

	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   10ce6:	002b      	movs	r3, r5
   10ce8:	33bc      	adds	r3, #188	; 0xbc
   10cea:	781a      	ldrb	r2, [r3, #0]
   10cec:	7858      	ldrb	r0, [r3, #1]
   10cee:	3301      	adds	r3, #1
   10cf0:	4290      	cmp	r0, r2
   10cf2:	d012      	beq.n	10d1a <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xd1b>
	    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
   10cf4:	0028      	movs	r0, r5
   10cf6:	30be      	adds	r0, #190	; 0xbe
		return 1;
	}

	LL_ASSERT(conn->llcp_req == conn->llcp_ack);

	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   10cf8:	7804      	ldrb	r4, [r0, #0]
   10cfa:	2003      	movs	r0, #3
   10cfc:	4004      	ands	r4, r0
   10cfe:	2c02      	cmp	r4, #2
   10d00:	d10b      	bne.n	10d1a <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xd1b>
	    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
		conn->llcp_phy.ack = conn->llcp_phy.req;
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   10d02:	0028      	movs	r0, r5

	LL_ASSERT(conn->llcp_req == conn->llcp_ack);

	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
	    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
		conn->llcp_phy.ack = conn->llcp_phy.req;
   10d04:	701a      	strb	r2, [r3, #0]
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   10d06:	789a      	ldrb	r2, [r3, #2]
   10d08:	2302      	movs	r3, #2
   10d0a:	306c      	adds	r0, #108	; 0x6c
   10d0c:	4013      	ands	r3, r2
   10d0e:	7802      	ldrb	r2, [r0, #0]
   10d10:	43a2      	bics	r2, r4
   10d12:	4313      	orrs	r3, r2
   10d14:	7003      	strb	r3, [r0, #0]

		/* Procedure complete, just wait for instant */
		conn->procedure_expire = 0;
   10d16:	2300      	movs	r3, #0
   10d18:	876b      	strh	r3, [r5, #58]	; 0x3a
	}

	conn->llcp.phy_upd_ind.tx = p->s_to_m_phy;
   10d1a:	002a      	movs	r2, r5
   10d1c:	2407      	movs	r4, #7
   10d1e:	261c      	movs	r6, #28
   10d20:	7b7b      	ldrb	r3, [r7, #13]
   10d22:	326c      	adds	r2, #108	; 0x6c
   10d24:	7810      	ldrb	r0, [r2, #0]
   10d26:	4023      	ands	r3, r4
   10d28:	43b0      	bics	r0, r6
   10d2a:	009b      	lsls	r3, r3, #2
   10d2c:	4303      	orrs	r3, r0
	conn->llcp.phy_upd_ind.rx = p->m_to_s_phy;
   10d2e:	201f      	movs	r0, #31

		/* Procedure complete, just wait for instant */
		conn->procedure_expire = 0;
	}

	conn->llcp.phy_upd_ind.tx = p->s_to_m_phy;
   10d30:	7013      	strb	r3, [r2, #0]
	conn->llcp.phy_upd_ind.rx = p->m_to_s_phy;
   10d32:	7b3b      	ldrb	r3, [r7, #12]
   10d34:	7816      	ldrb	r6, [r2, #0]
   10d36:	015b      	lsls	r3, r3, #5
   10d38:	4030      	ands	r0, r6
   10d3a:	4303      	orrs	r3, r0
   10d3c:	7013      	strb	r3, [r2, #0]
	conn->llcp.phy_upd_ind.instant = p->instant;
   10d3e:	7bfb      	ldrb	r3, [r7, #15]
   10d40:	7bb8      	ldrb	r0, [r7, #14]
   10d42:	021b      	lsls	r3, r3, #8
   10d44:	4303      	orrs	r3, r0
   10d46:	0028      	movs	r0, r5
   10d48:	306e      	adds	r0, #110	; 0x6e
   10d4a:	8003      	strh	r3, [r0, #0]
	conn->llcp.phy_upd_ind.initiate = 0;
   10d4c:	2001      	movs	r0, #1
   10d4e:	7813      	ldrb	r3, [r2, #0]

	conn->llcp_type = LLCP_PHY_UPD;
	conn->llcp_ack--;
   10d50:	3901      	subs	r1, #1
	}

	conn->llcp.phy_upd_ind.tx = p->s_to_m_phy;
	conn->llcp.phy_upd_ind.rx = p->m_to_s_phy;
	conn->llcp.phy_upd_ind.instant = p->instant;
	conn->llcp.phy_upd_ind.initiate = 0;
   10d52:	4383      	bics	r3, r0
   10d54:	7013      	strb	r3, [r2, #0]

	conn->llcp_type = LLCP_PHY_UPD;
   10d56:	002b      	movs	r3, r5
	conn->llcp_ack--;
   10d58:	3569      	adds	r5, #105	; 0x69
	conn->llcp.phy_upd_ind.tx = p->s_to_m_phy;
	conn->llcp.phy_upd_ind.rx = p->m_to_s_phy;
	conn->llcp.phy_upd_ind.instant = p->instant;
	conn->llcp.phy_upd_ind.initiate = 0;

	conn->llcp_type = LLCP_PHY_UPD;
   10d5a:	336a      	adds	r3, #106	; 0x6a
   10d5c:	701c      	strb	r4, [r3, #0]
	conn->llcp_ack--;
   10d5e:	7029      	strb	r1, [r5, #0]
   10d60:	f7ff fb03 	bl	1036a <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x36b>
{
	struct radio_pdu_node_tx *node_tx;
	struct pdu_data *pdu_ctrl_tx;

	/* acquire tx mem */
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   10d64:	0030      	movs	r0, r6
   10d66:	3059      	adds	r0, #89	; 0x59
   10d68:	30ff      	adds	r0, #255	; 0xff
   10d6a:	f7f9 fd91 	bl	a890 <mem_acquire>
   10d6e:	1e01      	subs	r1, r0, #0
	LL_ASSERT(node_tx);
   10d70:	d108      	bne.n	10d84 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xd85>
   10d72:	4b60      	ldr	r3, [pc, #384]	; (10ef4 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xef5>)
   10d74:	9301      	str	r3, [sp, #4]
   10d76:	4b60      	ldr	r3, [pc, #384]	; (10ef8 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xef9>)
   10d78:	9300      	str	r3, [sp, #0]
   10d7a:	4b68      	ldr	r3, [pc, #416]	; (10f1c <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xf1d>)
   10d7c:	4a64      	ldr	r2, [pc, #400]	; (10f10 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xf11>)
   10d7e:	4965      	ldr	r1, [pc, #404]	; (10f14 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xf15>)
   10d80:	4867      	ldr	r0, [pc, #412]	; (10f20 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xf21>)
   10d82:	e339      	b.n	113f8 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x13f9>

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   10d84:	2203      	movs	r2, #3
   10d86:	7903      	ldrb	r3, [r0, #4]
   10d88:	4313      	orrs	r3, r2
   10d8a:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata)
   10d8c:	2302      	movs	r3, #2
   10d8e:	7143      	strb	r3, [r0, #5]
		+ sizeof(struct pdu_data_llctrl_unknown_rsp);
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
   10d90:	3305      	adds	r3, #5
   10d92:	71c3      	strb	r3, [r0, #7]
	pdu_ctrl_tx->payload.llctrl.ctrldata.unknown_rsp.type = type;
   10d94:	466b      	mov	r3, sp
   10d96:	3235      	adds	r2, #53	; 0x35
   10d98:	189b      	adds	r3, r3, r2
   10d9a:	781b      	ldrb	r3, [r3, #0]
   10d9c:	7203      	strb	r3, [r0, #8]

	ctrl_tx_enqueue(conn, node_tx);
   10d9e:	0028      	movs	r0, r5
   10da0:	f7fd f9e4 	bl	e16c <ctrl_tx_enqueue>
   10da4:	e01d      	b.n	10de2 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xde3>
				nack = isr_rx_conn_pkt_ctrl(radio_pdu_node_rx,
							    rx_enqueue);
				break;
			case PDU_DATA_LLID_RESV:
			default:
				LL_ASSERT(0);
   10da6:	4b53      	ldr	r3, [pc, #332]	; (10ef4 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xef5>)
   10da8:	9301      	str	r3, [sp, #4]
   10daa:	4b53      	ldr	r3, [pc, #332]	; (10ef8 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xef9>)
   10dac:	9300      	str	r3, [sp, #0]
   10dae:	4b5d      	ldr	r3, [pc, #372]	; (10f24 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xf25>)
   10db0:	e31f      	b.n	113f2 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x13f3>
				break;
			}

#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_PING)
		} else if ((_radio.conn_curr->enc_rx) ||
   10db2:	0030      	movs	r0, r6
   10db4:	30fc      	adds	r0, #252	; 0xfc
   10db6:	6943      	ldr	r3, [r0, #20]
   10db8:	001a      	movs	r2, r3
   10dba:	32c0      	adds	r2, #192	; 0xc0
   10dbc:	7814      	ldrb	r4, [r2, #0]
   10dbe:	2214      	movs	r2, #20
   10dc0:	4014      	ands	r4, r2
   10dc2:	d100      	bne.n	10dc6 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xdc7>
   10dc4:	e337      	b.n	11436 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x1437>
			   (_radio.conn_curr->pause_rx)) {
			/* start authenticated payload (pre) timeout */
			if (_radio.conn_curr->apto_expire == 0) {
   10dc6:	1d1a      	adds	r2, r3, #4
   10dc8:	8fd4      	ldrh	r4, [r2, #62]	; 0x3e
   10dca:	2c00      	cmp	r4, #0
   10dcc:	d000      	beq.n	10dd0 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xdd1>
   10dce:	e331      	b.n	11434 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x1435>
				_radio.conn_curr->appto_expire =
   10dd0:	8f99      	ldrh	r1, [r3, #60]	; 0x3c
					_radio.conn_curr->appto_reload;
				_radio.conn_curr->apto_expire =
					_radio.conn_curr->apto_reload;
   10dd2:	3302      	adds	r3, #2
#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_PING)
		} else if ((_radio.conn_curr->enc_rx) ||
			   (_radio.conn_curr->pause_rx)) {
			/* start authenticated payload (pre) timeout */
			if (_radio.conn_curr->apto_expire == 0) {
				_radio.conn_curr->appto_expire =
   10dd4:	8799      	strh	r1, [r3, #60]	; 0x3c
					_radio.conn_curr->appto_reload;
				_radio.conn_curr->apto_expire =
   10dd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
   10dd8:	87d3      	strh	r3, [r2, #62]	; 0x3e
   10dda:	e32c      	b.n	11436 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x1437>
			}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

		}

		if (!nack) {
   10ddc:	2b00      	cmp	r3, #0
   10dde:	d000      	beq.n	10de2 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xde3>
   10de0:	e332      	b.n	11448 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x1449>
			_radio.conn_curr->nesn++;
   10de2:	4b51      	ldr	r3, [pc, #324]	; (10f28 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xf29>)
   10de4:	33fc      	adds	r3, #252	; 0xfc
   10de6:	695d      	ldr	r5, [r3, #20]
   10de8:	2302      	movs	r3, #2
   10dea:	002a      	movs	r2, r5
   10dec:	32c0      	adds	r2, #192	; 0xc0
   10dee:	7811      	ldrb	r1, [r2, #0]
   10df0:	404b      	eors	r3, r1
   10df2:	7013      	strb	r3, [r2, #0]

			if (ccm_rx_increment) {
   10df4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   10df6:	2b00      	cmp	r3, #0
   10df8:	d100      	bne.n	10dfc <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xdfd>
   10dfa:	e325      	b.n	11448 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x1449>
				_radio.conn_curr->ccm_rx.counter++;
   10dfc:	002b      	movs	r3, r5
   10dfe:	002e      	movs	r6, r5
   10e00:	33d0      	adds	r3, #208	; 0xd0
   10e02:	36d4      	adds	r6, #212	; 0xd4
   10e04:	681b      	ldr	r3, [r3, #0]
   10e06:	7832      	ldrb	r2, [r6, #0]
   10e08:	0a1b      	lsrs	r3, r3, #8
   10e0a:	0612      	lsls	r2, r2, #24
   10e0c:	431a      	orrs	r2, r3
   10e0e:	0010      	movs	r0, r2
   10e10:	002a      	movs	r2, r5
   10e12:	32d8      	adds	r2, #216	; 0xd8
   10e14:	6833      	ldr	r3, [r6, #0]
   10e16:	7812      	ldrb	r2, [r2, #0]
   10e18:	0a1b      	lsrs	r3, r3, #8
   10e1a:	0612      	lsls	r2, r2, #24
   10e1c:	431a      	orrs	r2, r3
   10e1e:	0011      	movs	r1, r2
   10e20:	2300      	movs	r3, #0
   10e22:	2201      	movs	r2, #1
   10e24:	1812      	adds	r2, r2, r0
   10e26:	414b      	adcs	r3, r1
   10e28:	920a      	str	r2, [sp, #40]	; 0x28
   10e2a:	930b      	str	r3, [sp, #44]	; 0x2c
   10e2c:	2228      	movs	r2, #40	; 0x28
   10e2e:	466b      	mov	r3, sp
   10e30:	189b      	adds	r3, r3, r2
   10e32:	781b      	ldrb	r3, [r3, #0]
   10e34:	35d1      	adds	r5, #209	; 0xd1
   10e36:	702b      	strb	r3, [r5, #0]
   10e38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10e3a:	0a19      	lsrs	r1, r3, #8
   10e3c:	0e1a      	lsrs	r2, r3, #24
   10e3e:	7069      	strb	r1, [r5, #1]
   10e40:	70ea      	strb	r2, [r5, #3]
   10e42:	0c19      	lsrs	r1, r3, #16
   10e44:	222c      	movs	r2, #44	; 0x2c
   10e46:	466b      	mov	r3, sp
   10e48:	189b      	adds	r3, r3, r2
   10e4a:	781b      	ldrb	r3, [r3, #0]
   10e4c:	70a9      	strb	r1, [r5, #2]
   10e4e:	712b      	strb	r3, [r5, #4]
   10e50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10e52:	0a1a      	lsrs	r2, r3, #8
   10e54:	716a      	strb	r2, [r5, #5]
   10e56:	0c1a      	lsrs	r2, r3, #16
   10e58:	0e1b      	lsrs	r3, r3, #24
   10e5a:	71aa      	strb	r2, [r5, #6]
   10e5c:	71eb      	strb	r3, [r5, #7]
   10e5e:	e2f3      	b.n	11448 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x1449>
		if (terminate) {
			goto isr_rx_conn_exit;
		}
	} else {
		/* Start CRC error countdown, if not already started */
		if (_radio.crc_expire == 0) {
   10e60:	7d93      	ldrb	r3, [r2, #22]
   10e62:	2b00      	cmp	r3, #0
   10e64:	d101      	bne.n	10e6a <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xe6b>
			_radio.crc_expire = 2;
   10e66:	3302      	adds	r3, #2
   10e68:	7593      	strb	r3, [r2, #22]
		}

		/* Check crc error countdown expiry */
		_radio.crc_expire--;
   10e6a:	35ff      	adds	r5, #255	; 0xff
   10e6c:	7dae      	ldrb	r6, [r5, #22]
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	struct radio_pdu_node_tx *tx_release = NULL;
	u8_t is_empty_pdu_tx_retry;
	struct pdu_data *pdu_data_rx;
	struct pdu_data *pdu_data_tx;
	u8_t rx_enqueue = 0;
   10e6e:	2400      	movs	r4, #0
		if (_radio.crc_expire == 0) {
			_radio.crc_expire = 2;
		}

		/* Check crc error countdown expiry */
		_radio.crc_expire--;
   10e70:	3e01      	subs	r6, #1
   10e72:	b2f3      	uxtb	r3, r6
   10e74:	75ab      	strb	r3, [r5, #22]
		crc_close = (_radio.crc_expire == 0);
   10e76:	425e      	negs	r6, r3
   10e78:	415e      	adcs	r6, r3
   10e7a:	b2f3      	uxtb	r3, r6
   10e7c:	930e      	str	r3, [sp, #56]	; 0x38

static inline void isr_rx_conn(u8_t crc_ok, u8_t trx_done,
			       u8_t rssi_ready)
{
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	struct radio_pdu_node_tx *tx_release = NULL;
   10e7e:	940c      	str	r4, [sp, #48]	; 0x30
		_radio.crc_expire--;
		crc_close = (_radio.crc_expire == 0);
	}

	/* prepare transmit packet */
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
   10e80:	4d29      	ldr	r5, [pc, #164]	; (10f28 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xf29>)
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
   10e82:	a915      	add	r1, sp, #84	; 0x54
		_radio.crc_expire--;
		crc_close = (_radio.crc_expire == 0);
	}

	/* prepare transmit packet */
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
   10e84:	002b      	movs	r3, r5
   10e86:	33fc      	adds	r3, #252	; 0xfc
   10e88:	6958      	ldr	r0, [r3, #20]
   10e8a:	0003      	movs	r3, r0
   10e8c:	33c0      	adds	r3, #192	; 0xc0
   10e8e:	781b      	ldrb	r3, [r3, #0]
   10e90:	09de      	lsrs	r6, r3, #7
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
   10e92:	f7fb fcad 	bl	c7f0 <prepare_pdu_data_tx>
		}
	}

	/* Decide on event continuation and hence Radio Shorts to use */
	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
   10e96:	7c2b      	ldrb	r3, [r5, #16]
   10e98:	2b03      	cmp	r3, #3
   10e9a:	d015      	beq.n	10ec8 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xec9>
   10e9c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   10e9e:	2303      	movs	r3, #3
   10ea0:	2a00      	cmp	r2, #0
   10ea2:	d111      	bne.n	10ec8 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xec9>
   10ea4:	9a11      	ldr	r2, [sp, #68]	; 0x44
   10ea6:	2a00      	cmp	r2, #0
   10ea8:	d006      	beq.n	10eb8 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xeb9>
			((crc_ok) && (pdu_data_rx->md == 0) &&
   10eaa:	7a3a      	ldrb	r2, [r7, #8]
   10eac:	06d2      	lsls	r2, r2, #27
   10eae:	d403      	bmi.n	10eb8 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xeb9>
   10eb0:	9a15      	ldr	r2, [sp, #84]	; 0x54
   10eb2:	7852      	ldrb	r2, [r2, #1]
   10eb4:	2a00      	cmp	r2, #0
   10eb6:	d007      	beq.n	10ec8 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xec9>
			 (pdu_data_tx->len == 0)) ||
			(_radio.conn_curr->llcp_terminate.reason_peer != 0)) ?
   10eb8:	002b      	movs	r3, r5
   10eba:	33fc      	adds	r3, #252	; 0xfc
   10ebc:	695b      	ldr	r3, [r3, #20]
   10ebe:	33a7      	adds	r3, #167	; 0xa7

	/* Decide on event continuation and hence Radio Shorts to use */
	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
			((crc_ok) && (pdu_data_rx->md == 0) &&
			 (pdu_data_tx->len == 0)) ||
   10ec0:	781b      	ldrb	r3, [r3, #0]
		}
	}

	/* Decide on event continuation and hence Radio Shorts to use */
	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
   10ec2:	1e5a      	subs	r2, r3, #1
   10ec4:	4193      	sbcs	r3, r2
   10ec6:	3302      	adds	r3, #2
   10ec8:	742b      	strb	r3, [r5, #16]
			((crc_ok) && (pdu_data_rx->md == 0) &&
			 (pdu_data_tx->len == 0)) ||
			(_radio.conn_curr->llcp_terminate.reason_peer != 0)) ?
			STATE_CLOSE : STATE_TX;

	if (_radio.state == STATE_CLOSE) {
   10eca:	2b03      	cmp	r3, #3
   10ecc:	d12e      	bne.n	10f2c <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xf2d>
		/* Event close for master */
		if (_radio.role == ROLE_MASTER) {
   10ece:	7beb      	ldrb	r3, [r5, #15]
   10ed0:	2b04      	cmp	r3, #4
   10ed2:	d10b      	bne.n	10eec <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xeed>
			_radio.conn_curr->empty = is_empty_pdu_tx_retry;
   10ed4:	227f      	movs	r2, #127	; 0x7f
   10ed6:	35fc      	adds	r5, #252	; 0xfc
   10ed8:	6969      	ldr	r1, [r5, #20]
   10eda:	01f3      	lsls	r3, r6, #7
   10edc:	31c0      	adds	r1, #192	; 0xc0
   10ede:	7808      	ldrb	r0, [r1, #0]
   10ee0:	4002      	ands	r2, r0
   10ee2:	4313      	orrs	r3, r2
   10ee4:	700b      	strb	r3, [r1, #0]

			radio_disable();
   10ee6:	f7f9 fec3 	bl	ac70 <radio_disable>
   10eea:	e047      	b.n	10f7c <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xf7d>

			goto isr_rx_conn_exit;
		}
		/* Event close for slave */
		else {
			radio_switch_complete_and_disable();
   10eec:	f7f9 ff22 	bl	ad34 <radio_switch_complete_and_disable>
   10ef0:	e02a      	b.n	10f48 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xf49>
   10ef2:	46c0      	nop			; (mov r8, r8)
   10ef4:	000154c4 	.word	0x000154c4
   10ef8:	000154c9 	.word	0x000154c9
   10efc:	000182bc 	.word	0x000182bc
   10f00:	00000202 	.word	0x00000202
   10f04:	00000203 	.word	0x00000203
   10f08:	00007fff 	.word	0x00007fff
   10f0c:	0001813b 	.word	0x0001813b
   10f10:	00015484 	.word	0x00015484
   10f14:	0001548b 	.word	0x0001548b
   10f18:	0001733d 	.word	0x0001733d
   10f1c:	00018463 	.word	0x00018463
   10f20:	00017119 	.word	0x00017119
   10f24:	00018300 	.word	0x00018300
   10f28:	200015c0 	.word	0x200015c0
		}
	} else {	/* if (_radio.state == STATE_TX) */
		radio_tmr_tifs_set(RADIO_TIFS);
   10f2c:	2096      	movs	r0, #150	; 0x96
   10f2e:	f7f9 ff95 	bl	ae5c <radio_tmr_tifs_set>

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
		radio_switch_complete_and_rx(_radio.conn_curr->phy_rx);
   10f32:	002b      	movs	r3, r5
   10f34:	33fc      	adds	r3, #252	; 0xfc
   10f36:	695b      	ldr	r3, [r3, #20]
   10f38:	3333      	adds	r3, #51	; 0x33
   10f3a:	7818      	ldrb	r0, [r3, #0]
   10f3c:	0680      	lsls	r0, r0, #26
   10f3e:	0f40      	lsrs	r0, r0, #29
   10f40:	f7f9 fee8 	bl	ad14 <radio_switch_complete_and_rx>
#else /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */
		radio_switch_complete_and_rx(0);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */

		radio_tmr_end_capture();
   10f44:	f7fa f856 	bl	aff4 <radio_tmr_end_capture>
	}

	/* fill sn and nesn */
	pdu_data_tx->sn = _radio.conn_curr->sn;
   10f48:	35fc      	adds	r5, #252	; 0xfc
   10f4a:	6968      	ldr	r0, [r5, #20]
   10f4c:	2301      	movs	r3, #1
   10f4e:	0006      	movs	r6, r0
   10f50:	9915      	ldr	r1, [sp, #84]	; 0x54
   10f52:	36c0      	adds	r6, #192	; 0xc0
   10f54:	7832      	ldrb	r2, [r6, #0]
   10f56:	780d      	ldrb	r5, [r1, #0]
   10f58:	401a      	ands	r2, r3
   10f5a:	3307      	adds	r3, #7
   10f5c:	439d      	bics	r5, r3
   10f5e:	00d2      	lsls	r2, r2, #3
   10f60:	432a      	orrs	r2, r5
	pdu_data_tx->nesn = _radio.conn_curr->nesn;
   10f62:	2504      	movs	r5, #4

		radio_tmr_end_capture();
	}

	/* fill sn and nesn */
	pdu_data_tx->sn = _radio.conn_curr->sn;
   10f64:	700a      	strb	r2, [r1, #0]
	pdu_data_tx->nesn = _radio.conn_curr->nesn;
   10f66:	7832      	ldrb	r2, [r6, #0]
   10f68:	3b07      	subs	r3, #7
   10f6a:	0852      	lsrs	r2, r2, #1
   10f6c:	4013      	ands	r3, r2
   10f6e:	009a      	lsls	r2, r3, #2
   10f70:	780b      	ldrb	r3, [r1, #0]
   10f72:	43ab      	bics	r3, r5
   10f74:	4313      	orrs	r3, r2
   10f76:	700b      	strb	r3, [r1, #0]

	/* setup the radio tx packet buffer */
	tx_packet_set(_radio.conn_curr, pdu_data_tx);
   10f78:	f7fb fcc1 	bl	c8fe <tx_packet_set>
	radio_tmr_sample();

#endif /* CONFIG_BLUETOOTH_CONTROLLER_PROFILE_ISR */

	/* release tx node and generate event for num complete */
	if (tx_release) {
   10f7c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10f7e:	2b00      	cmp	r3, #0
   10f80:	d006      	beq.n	10f90 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xf91>
		pdu_node_tx_release(_radio.conn_curr->handle, tx_release);
   10f82:	4bc7      	ldr	r3, [pc, #796]	; (112a0 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x12a1>)
   10f84:	990c      	ldr	r1, [sp, #48]	; 0x30
   10f86:	33fc      	adds	r3, #252	; 0xfc
   10f88:	695b      	ldr	r3, [r3, #20]
   10f8a:	8c18      	ldrh	r0, [r3, #32]
   10f8c:	f7fb ff58 	bl	ce40 <pdu_node_tx_release>
	}

	/* enqueue any rx packet/event towards application */
	if (rx_enqueue) {
   10f90:	2c00      	cmp	r4, #0
   10f92:	d100      	bne.n	10f96 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xf97>
   10f94:	e28b      	b.n	114ae <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x14af>
		/* set data flow control lock on currently rx-ed connection */
		rx_fc_lock(_radio.conn_curr->handle);
   10f96:	4cc2      	ldr	r4, [pc, #776]	; (112a0 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x12a1>)
   10f98:	34fc      	adds	r4, #252	; 0xfc
   10f9a:	6963      	ldr	r3, [r4, #20]
   10f9c:	8c18      	ldrh	r0, [r3, #32]
   10f9e:	f7fb fd25 	bl	c9ec <rx_fc_lock>

		/* set the connection handle and enqueue */
		radio_pdu_node_rx->hdr.handle = _radio.conn_curr->handle;
   10fa2:	6963      	ldr	r3, [r4, #20]
   10fa4:	8c1b      	ldrh	r3, [r3, #32]
   10fa6:	80fb      	strh	r3, [r7, #6]
		packet_rx_enqueue();
   10fa8:	f7fb fcd2 	bl	c950 <packet_rx_enqueue>
   10fac:	e27f      	b.n	114ae <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x14af>
		isr_rx_conn(crc_ok, trx_done, rssi_ready);
		break;

	case ROLE_NONE:
	default:
		LL_ASSERT(0);
   10fae:	4bbd      	ldr	r3, [pc, #756]	; (112a4 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x12a5>)
   10fb0:	9301      	str	r3, [sp, #4]
   10fb2:	4bbd      	ldr	r3, [pc, #756]	; (112a8 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x12a9>)
   10fb4:	9300      	str	r3, [sp, #0]
   10fb6:	4bbd      	ldr	r3, [pc, #756]	; (112ac <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x12ad>)
   10fb8:	e21b      	b.n	113f2 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x13f3>

static inline void isr_radio_state_close(void)
{
	u32_t dont_close = 0;

	switch (_radio.role) {
   10fba:	7be8      	ldrb	r0, [r5, #15]
   10fbc:	b2c0      	uxtb	r0, r0
   10fbe:	2804      	cmp	r0, #4
   10fc0:	d900      	bls.n	10fc4 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xfc5>
   10fc2:	e20b      	b.n	113dc <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x13dd>
   10fc4:	f7ef f8e2 	bl	18c <__gnu_thumb1_case_uhi>
   10fc8:	000501fb 	.word	0x000501fb
   10fcc:	007c0047 	.word	0x007c0047
   10fd0:	007c      	.short	0x007c

static inline u32_t isr_close_adv(void)
{
	u32_t dont_close = 0;

	if ((_radio.state == STATE_CLOSE) &&
   10fd2:	2b03      	cmp	r3, #3
   10fd4:	d10b      	bne.n	10fee <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xfef>
	    (_radio.advertiser.chan_map_current != 0)) {
   10fd6:	1d6b      	adds	r3, r5, #5

static inline u32_t isr_close_adv(void)
{
	u32_t dont_close = 0;

	if ((_radio.state == STATE_CLOSE) &&
   10fd8:	7fda      	ldrb	r2, [r3, #31]
   10fda:	230e      	movs	r3, #14
   10fdc:	421a      	tst	r2, r3
   10fde:	d006      	beq.n	10fee <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xfef>
	    (_radio.advertiser.chan_map_current != 0)) {
		dont_close = 1;

		adv_setup();
   10fe0:	f7fc f976 	bl	d2d0 <adv_setup>

		radio_tx_enable();
   10fe4:	f7f9 fe3e 	bl	ac64 <radio_tx_enable>

		radio_tmr_end_capture();
   10fe8:	f7fa f804 	bl	aff4 <radio_tmr_end_capture>
   10fec:	e25f      	b.n	114ae <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x14af>
	} else {
		struct pdu_adv *pdu_adv;

		radio_filter_disable();
   10fee:	f7f9 fef5 	bl	addc <radio_filter_disable>

		pdu_adv = (struct pdu_adv *)
			&_radio.advertiser.adv_data.data[_radio.advertiser.adv_data.first][0];
		if ((_radio.state == STATE_CLOSE) &&
   10ff2:	7c2b      	ldrb	r3, [r5, #16]
   10ff4:	2b03      	cmp	r3, #3
   10ff6:	d000      	beq.n	10ffa <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xffb>
   10ff8:	e229      	b.n	1144e <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x144f>
		struct pdu_adv *pdu_adv;

		radio_filter_disable();

		pdu_adv = (struct pdu_adv *)
			&_radio.advertiser.adv_data.data[_radio.advertiser.adv_data.first][0];
   10ffa:	002b      	movs	r3, r5
   10ffc:	3375      	adds	r3, #117	; 0x75
	} else {
		struct pdu_adv *pdu_adv;

		radio_filter_disable();

		pdu_adv = (struct pdu_adv *)
   10ffe:	781a      	ldrb	r2, [r3, #0]
   11000:	2327      	movs	r3, #39	; 0x27
   11002:	4353      	muls	r3, r2
   11004:	3320      	adds	r3, #32
			&_radio.advertiser.adv_data.data[_radio.advertiser.adv_data.first][0];
		if ((_radio.state == STATE_CLOSE) &&
		    (pdu_adv->type != PDU_ADV_TYPE_DIRECT_IND)) {
   11006:	18eb      	adds	r3, r5, r3

		radio_filter_disable();

		pdu_adv = (struct pdu_adv *)
			&_radio.advertiser.adv_data.data[_radio.advertiser.adv_data.first][0];
		if ((_radio.state == STATE_CLOSE) &&
   11008:	79da      	ldrb	r2, [r3, #7]
   1100a:	230f      	movs	r3, #15
   1100c:	4013      	ands	r3, r2
   1100e:	2b01      	cmp	r3, #1
   11010:	d100      	bne.n	11014 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x1015>
   11012:	e21c      	b.n	1144e <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x144f>
			 * condition where in the Adv role is being stopped but
			 * at the same time it is preempted by Adv event that
			 * gets into close state. Accept failure when Adv role
			 * is being stopped.
			 */
			ticker_status =
   11014:	4ba6      	ldr	r3, [pc, #664]	; (112b0 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x12b1>)
   11016:	2000      	movs	r0, #0
   11018:	9306      	str	r3, [sp, #24]
   1101a:	4ba6      	ldr	r3, [pc, #664]	; (112b4 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x12b5>)
   1101c:	9004      	str	r0, [sp, #16]
   1101e:	9305      	str	r3, [sp, #20]
   11020:	2348      	movs	r3, #72	; 0x48
   11022:	9003      	str	r0, [sp, #12]
   11024:	33ff      	adds	r3, #255	; 0xff
   11026:	9002      	str	r0, [sp, #8]
   11028:	9001      	str	r0, [sp, #4]
   1102a:	9000      	str	r0, [sp, #0]
   1102c:	2205      	movs	r2, #5
   1102e:	0001      	movs	r1, r0
   11030:	f7fa ff62 	bl	bef8 <ticker_update>
					      TICKER_US_TO_TICKS(random_delay *
								 1000),
					      0, 0, 0, 0, 0,
					      ticker_update_adv_assert,
					      (void *)__LINE__);
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   11034:	2302      	movs	r3, #2
   11036:	4398      	bics	r0, r3
   11038:	d100      	bne.n	1103c <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x103d>
   1103a:	e208      	b.n	1144e <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x144f>
   1103c:	7bab      	ldrb	r3, [r5, #14]
   1103e:	2b05      	cmp	r3, #5
   11040:	d100      	bne.n	11044 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x1045>
   11042:	e204      	b.n	1144e <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x144f>
   11044:	4b97      	ldr	r3, [pc, #604]	; (112a4 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x12a5>)
   11046:	4a9c      	ldr	r2, [pc, #624]	; (112b8 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x12b9>)
   11048:	9301      	str	r3, [sp, #4]
   1104a:	4b97      	ldr	r3, [pc, #604]	; (112a8 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x12a9>)
   1104c:	499b      	ldr	r1, [pc, #620]	; (112bc <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x12bd>)
   1104e:	9300      	str	r3, [sp, #0]
   11050:	489b      	ldr	r0, [pc, #620]	; (112c0 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x12c1>)
   11052:	4b9c      	ldr	r3, [pc, #624]	; (112c4 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x12c5>)
   11054:	e1d0      	b.n	113f8 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x13f9>

static inline u32_t isr_close_scan(void)
{
	u32_t dont_close = 0;

	if (_radio.state == STATE_CLOSE) {
   11056:	2b03      	cmp	r3, #3
   11058:	d124      	bne.n	110a4 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x10a5>
		dont_close = 1;

		radio_tmr_tifs_set(RADIO_TIFS);
   1105a:	2096      	movs	r0, #150	; 0x96
   1105c:	f7f9 fefe 	bl	ae5c <radio_tmr_tifs_set>
		radio_switch_complete_and_tx(0, 0);
   11060:	2100      	movs	r1, #0
   11062:	0008      	movs	r0, r1
   11064:	f7f9 fe5e 	bl	ad24 <radio_switch_complete_and_tx>
		radio_pkt_rx_set(_radio.packet_rx[_radio.packet_rx_last]->
   11068:	233e      	movs	r3, #62	; 0x3e
   1106a:	002a      	movs	r2, r5
   1106c:	33ff      	adds	r3, #255	; 0xff
   1106e:	5ceb      	ldrb	r3, [r5, r3]
   11070:	32fc      	adds	r2, #252	; 0xfc
   11072:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
   11074:	009b      	lsls	r3, r3, #2
   11076:	5898      	ldr	r0, [r3, r2]
   11078:	3008      	adds	r0, #8
   1107a:	f7f9 fdd5 	bl	ac28 <radio_pkt_rx_set>
					pdu_data);
		radio_rssi_measure();
   1107e:	f7f9 fe61 	bl	ad44 <radio_rssi_measure>
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
		if (ctrl_rl_enabled()) {
   11082:	f001 fca5 	bl	129d0 <ctrl_rl_enabled>
   11086:	2800      	cmp	r0, #0
   11088:	d007      	beq.n	1109a <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x109b>
			u8_t count, *irks = ctrl_irks_get(&count);
   1108a:	ac15      	add	r4, sp, #84	; 0x54
   1108c:	0020      	movs	r0, r4
   1108e:	f001 facb 	bl	12628 <ctrl_irks_get>
   11092:	0001      	movs	r1, r0

			radio_ar_configure(count, irks);
   11094:	7820      	ldrb	r0, [r4, #0]
   11096:	f7fa f863 	bl	b160 <radio_ar_configure>
		}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */
		_radio.state = STATE_RX;
   1109a:	2301      	movs	r3, #1
   1109c:	742b      	strb	r3, [r5, #16]

		radio_rx_enable();
   1109e:	f7f9 fddb 	bl	ac58 <radio_rx_enable>
   110a2:	e7a1      	b.n	10fe8 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xfe9>

		radio_tmr_end_capture();
	} else {
		radio_filter_disable();
   110a4:	f7f9 fe9a 	bl	addc <radio_filter_disable>

		if (_radio.state == STATE_ABORT) {
   110a8:	7c2b      	ldrb	r3, [r5, #16]
   110aa:	2b05      	cmp	r3, #5
   110ac:	d000      	beq.n	110b0 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x10b1>
   110ae:	e1ce      	b.n	1144e <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x144f>
			/* Scanner stop can expire while here in this ISR.
			 * Deferred attempt to stop can fail as it would have
			 * expired, hence ignore failure.
			 */
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   110b0:	2000      	movs	r0, #0
   110b2:	2204      	movs	r2, #4
   110b4:	9000      	str	r0, [sp, #0]
   110b6:	0003      	movs	r3, r0
   110b8:	0001      	movs	r1, r0
   110ba:	f7fa ff6d 	bl	bf98 <ticker_stop>
   110be:	e1c6      	b.n	1144e <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x144f>
	u16_t elapsed_event;
	u16_t lazy;
	u8_t force;

	/* Local initiated terminate happened */
	if (_radio.conn_curr == 0) {
   110c0:	002c      	movs	r4, r5
   110c2:	34fc      	adds	r4, #252	; 0xfc
   110c4:	6960      	ldr	r0, [r4, #20]
   110c6:	2800      	cmp	r0, #0
   110c8:	d100      	bne.n	110cc <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x10cd>
   110ca:	e1c0      	b.n	1144e <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x144f>
		return;
	}

	/* Remote Initiated terminate happened in this event for Slave */
	if ((_radio.role == ROLE_SLAVE) &&
   110cc:	7beb      	ldrb	r3, [r5, #15]
   110ce:	2b03      	cmp	r3, #3
   110d0:	d10c      	bne.n	110ec <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x10ed>
	    (_radio.conn_curr->llcp_terminate.reason_peer != 0)) {
   110d2:	0003      	movs	r3, r0
   110d4:	33a7      	adds	r3, #167	; 0xa7
   110d6:	7819      	ldrb	r1, [r3, #0]
	if (_radio.conn_curr == 0) {
		return;
	}

	/* Remote Initiated terminate happened in this event for Slave */
	if ((_radio.role == ROLE_SLAVE) &&
   110d8:	2900      	cmp	r1, #0
   110da:	d007      	beq.n	110ec <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x10ed>
	    (_radio.conn_curr->llcp_terminate.reason_peer != 0)) {
		terminate_ind_rx_enqueue(_radio.conn_curr,
   110dc:	f7fc f966 	bl	d3ac <terminate_ind_rx_enqueue>
					 _radio.conn_curr->llcp_terminate.reason_peer);

		connection_release(_radio.conn_curr);
   110e0:	6960      	ldr	r0, [r4, #20]
   110e2:	f7fc f82f 	bl	d144 <connection_release>
		_radio.conn_curr = NULL;
   110e6:	2300      	movs	r3, #0
   110e8:	6163      	str	r3, [r4, #20]
   110ea:	e1b0      	b.n	1144e <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x144f>
		return;
	}

	ticks_drift_plus = 0;
	ticks_drift_minus = 0;
	latency_event = _radio.conn_curr->latency_event;
   110ec:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
   110ee:	930c      	str	r3, [sp, #48]	; 0x30
	elapsed_event = latency_event + 1;
   110f0:	1c5c      	adds	r4, r3, #1

	/* calculate drift if anchor point sync-ed */
	if ((_radio.packet_counter != 0) && ((!SILENT_CONNECTION) ||
   110f2:	002b      	movs	r3, r5
   110f4:	33ff      	adds	r3, #255	; 0xff
   110f6:	7d5e      	ldrb	r6, [r3, #21]
	}

	ticks_drift_plus = 0;
	ticks_drift_minus = 0;
	latency_event = _radio.conn_curr->latency_event;
	elapsed_event = latency_event + 1;
   110f8:	b2a4      	uxth	r4, r4

	/* calculate drift if anchor point sync-ed */
	if ((_radio.packet_counter != 0) && ((!SILENT_CONNECTION) ||
					     (_radio.packet_counter != 0xFF))) {
		if (_radio.role == ROLE_SLAVE) {
   110fa:	7beb      	ldrb	r3, [r5, #15]
	ticks_drift_minus = 0;
	latency_event = _radio.conn_curr->latency_event;
	elapsed_event = latency_event + 1;

	/* calculate drift if anchor point sync-ed */
	if ((_radio.packet_counter != 0) && ((!SILENT_CONNECTION) ||
   110fc:	2e00      	cmp	r6, #0
   110fe:	d05f      	beq.n	111c0 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x11c1>
					     (_radio.packet_counter != 0xFF))) {
		if (_radio.role == ROLE_SLAVE) {
   11100:	2b03      	cmp	r3, #3
   11102:	d153      	bne.n	111ac <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x11ad>
			u32_t preamble_to_addr_us;

			/* calculate the drift in ticks */
			start_to_address_actual_us = radio_tmr_aa_get();
			window_widening_event_us =
				_radio.conn_curr->role.slave.window_widening_event_us;
   11104:	35fc      	adds	r5, #252	; 0xfc
			u32_t start_to_address_actual_us;
			u32_t window_widening_event_us;
			u32_t preamble_to_addr_us;

			/* calculate the drift in ticks */
			start_to_address_actual_us = radio_tmr_aa_get();
   11106:	f7f9 ff69 	bl	afdc <radio_tmr_aa_get>
			window_widening_event_us =
				_radio.conn_curr->role.slave.window_widening_event_us;
   1110a:	696d      	ldr	r5, [r5, #20]
			u32_t start_to_address_actual_us;
			u32_t window_widening_event_us;
			u32_t preamble_to_addr_us;

			/* calculate the drift in ticks */
			start_to_address_actual_us = radio_tmr_aa_get();
   1110c:	0007      	movs	r7, r0
			window_widening_event_us =
				_radio.conn_curr->role.slave.window_widening_event_us;
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
			preamble_to_addr_us =
				addr_us_get(_radio.conn_curr->phy_rx);
   1110e:	002b      	movs	r3, r5
   11110:	3333      	adds	r3, #51	; 0x33
   11112:	781b      	ldrb	r3, [r3, #0]
			u32_t window_widening_event_us;
			u32_t preamble_to_addr_us;

			/* calculate the drift in ticks */
			start_to_address_actual_us = radio_tmr_aa_get();
			window_widening_event_us =
   11114:	6d68      	ldr	r0, [r5, #84]	; 0x54
				_radio.conn_curr->role.slave.window_widening_event_us;
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
			preamble_to_addr_us =
				addr_us_get(_radio.conn_curr->phy_rx);
   11116:	069b      	lsls	r3, r3, #26
	packet_rx_allocate(0xFF);
}

static inline u32_t addr_us_get(u8_t phy)
{
	switch (phy) {
   11118:	0f5b      	lsrs	r3, r3, #29
	default:
	case BIT(0):
		return 40;
	case BIT(1):
		return 24;
   1111a:	2618      	movs	r6, #24
	packet_rx_allocate(0xFF);
}

static inline u32_t addr_us_get(u8_t phy)
{
	switch (phy) {
   1111c:	2b02      	cmp	r3, #2
   1111e:	d005      	beq.n	1112c <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x112d>
   11120:	2b04      	cmp	r3, #4
   11122:	d102      	bne.n	1112a <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x112b>
	case BIT(0):
		return 40;
	case BIT(1):
		return 24;
	case BIT(2):
		return 376;
   11124:	3661      	adds	r6, #97	; 0x61
   11126:	36ff      	adds	r6, #255	; 0xff
   11128:	e000      	b.n	1112c <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x112d>
static inline u32_t addr_us_get(u8_t phy)
{
	switch (phy) {
	default:
	case BIT(0):
		return 40;
   1112a:	2628      	movs	r6, #40	; 0x28
			preamble_to_addr_us =
				addr_us_get(_radio.conn_curr->phy_rx);
#else /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */
			preamble_to_addr_us = addr_us_get(0);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */
			start_to_address_expected_us =
   1112c:	0003      	movs	r3, r0
   1112e:	3320      	adds	r3, #32
   11130:	199b      	adds	r3, r3, r6
   11132:	930e      	str	r3, [sp, #56]	; 0x38
				(RADIO_TICKER_JITTER_US << 1) +
				preamble_to_addr_us +
				window_widening_event_us;
			if (start_to_address_actual_us <=
			    start_to_address_expected_us) {
				ticks_drift_plus =
   11134:	4a64      	ldr	r2, [pc, #400]	; (112c8 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x12c9>)
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */
			start_to_address_expected_us =
				(RADIO_TICKER_JITTER_US << 1) +
				preamble_to_addr_us +
				window_widening_event_us;
			if (start_to_address_actual_us <=
   11136:	429f      	cmp	r7, r3
   11138:	d80c      	bhi.n	11154 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x1155>
			    start_to_address_expected_us) {
				ticks_drift_plus =
   1113a:	2300      	movs	r3, #0
   1113c:	2100      	movs	r1, #0
   1113e:	f7ef f9c5 	bl	4cc <__aeabi_lmul>
   11142:	2307      	movs	r3, #7
   11144:	4a61      	ldr	r2, [pc, #388]	; (112cc <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x12cd>)
   11146:	f7ef f9a1 	bl	48c <__aeabi_uldivmod>
   1114a:	b283      	uxth	r3, r0
   1114c:	930a      	str	r3, [sp, #40]	; 0x28
					TICKER_US_TO_TICKS(window_widening_event_us);
				ticks_drift_minus =
   1114e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   11150:	1bd8      	subs	r0, r3, r7
   11152:	e00c      	b.n	1116e <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x116f>
					TICKER_US_TO_TICKS((u64_t)(start_to_address_expected_us -
								      start_to_address_actual_us));
			} else {
				ticks_drift_plus =
   11154:	2300      	movs	r3, #0
   11156:	0038      	movs	r0, r7
   11158:	2100      	movs	r1, #0
   1115a:	f7ef f9b7 	bl	4cc <__aeabi_lmul>
   1115e:	2307      	movs	r3, #7
   11160:	4a5a      	ldr	r2, [pc, #360]	; (112cc <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x12cd>)
   11162:	f7ef f993 	bl	48c <__aeabi_uldivmod>
   11166:	b283      	uxth	r3, r0
					TICKER_US_TO_TICKS(start_to_address_actual_us);
				ticks_drift_minus =
   11168:	0030      	movs	r0, r6
					TICKER_US_TO_TICKS(window_widening_event_us);
				ticks_drift_minus =
					TICKER_US_TO_TICKS((u64_t)(start_to_address_expected_us -
								      start_to_address_actual_us));
			} else {
				ticks_drift_plus =
   1116a:	930a      	str	r3, [sp, #40]	; 0x28
					TICKER_US_TO_TICKS(start_to_address_actual_us);
				ticks_drift_minus =
   1116c:	3020      	adds	r0, #32
   1116e:	4a56      	ldr	r2, [pc, #344]	; (112c8 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x12c9>)
   11170:	2300      	movs	r3, #0
   11172:	2100      	movs	r1, #0
   11174:	f7ef f9aa 	bl	4cc <__aeabi_lmul>
   11178:	2307      	movs	r3, #7
   1117a:	4a54      	ldr	r2, [pc, #336]	; (112cc <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x12cd>)
   1117c:	f7ef f986 	bl	48c <__aeabi_uldivmod>
							   preamble_to_addr_us);
			}


			/* Reset window widening, as anchor point sync-ed */
			_radio.conn_curr->role.slave.window_widening_event_us = 0;
   11180:	2300      	movs	r3, #0
   11182:	656b      	str	r3, [r5, #84]	; 0x54
			_radio.conn_curr->role.slave.window_size_event_us = 0;
   11184:	65eb      	str	r3, [r5, #92]	; 0x5c

			/* apply latency if no more data */
			_radio.conn_curr->latency_event = _radio.conn_curr->latency;
   11186:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
					TICKER_US_TO_TICKS((u64_t)(start_to_address_expected_us -
								      start_to_address_actual_us));
			} else {
				ticks_drift_plus =
					TICKER_US_TO_TICKS(start_to_address_actual_us);
				ticks_drift_minus =
   11188:	b286      	uxth	r6, r0
			/* Reset window widening, as anchor point sync-ed */
			_radio.conn_curr->role.slave.window_widening_event_us = 0;
			_radio.conn_curr->role.slave.window_size_event_us = 0;

			/* apply latency if no more data */
			_radio.conn_curr->latency_event = _radio.conn_curr->latency;
   1118a:	856b      	strh	r3, [r5, #42]	; 0x2a
			if (_radio.conn_curr->pkt_tx_head) {
   1118c:	002b      	movs	r3, r5
   1118e:	33fc      	adds	r3, #252	; 0xfc
   11190:	689b      	ldr	r3, [r3, #8]
   11192:	2b00      	cmp	r3, #0
   11194:	d00e      	beq.n	111b4 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x11b5>
				struct pdu_data *pdu_data_tx;

				pdu_data_tx = (struct pdu_data *)
					_radio.conn_curr->pkt_tx_head->pdu_data;
				if (pdu_data_tx->len ||
   11196:	795b      	ldrb	r3, [r3, #5]
   11198:	2b00      	cmp	r3, #0
   1119a:	d104      	bne.n	111a6 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x11a7>
				    _radio.conn_curr->packet_tx_head_offset) {
   1119c:	002b      	movs	r3, r5
   1119e:	33ff      	adds	r3, #255	; 0xff
			if (_radio.conn_curr->pkt_tx_head) {
				struct pdu_data *pdu_data_tx;

				pdu_data_tx = (struct pdu_data *)
					_radio.conn_curr->pkt_tx_head->pdu_data;
				if (pdu_data_tx->len ||
   111a0:	7d9b      	ldrb	r3, [r3, #22]
   111a2:	2b00      	cmp	r3, #0
   111a4:	d006      	beq.n	111b4 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x11b5>
				    _radio.conn_curr->packet_tx_head_offset) {
					_radio.conn_curr->latency_event = 0;
   111a6:	2300      	movs	r3, #0
   111a8:	856b      	strh	r3, [r5, #42]	; 0x2a
   111aa:	e003      	b.n	111b4 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x11b5>
				}
			}
		} else {
			/* Reset connection failed to establish procedure */
			_radio.conn_curr->role.master.connect_expire = 0;
   111ac:	2600      	movs	r6, #0
   111ae:	3045      	adds	r0, #69	; 0x45
   111b0:	7006      	strb	r6, [r0, #0]
		_radio.conn_curr = NULL;

		return;
	}

	ticks_drift_plus = 0;
   111b2:	960a      	str	r6, [sp, #40]	; 0x28
			/* Reset connection failed to establish procedure */
			_radio.conn_curr->role.master.connect_expire = 0;
		}

		/* Reset supervision counter */
		_radio.conn_curr->supervision_expire = 0;
   111b4:	2200      	movs	r2, #0
   111b6:	4b3a      	ldr	r3, [pc, #232]	; (112a0 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x12a1>)
   111b8:	33fc      	adds	r3, #252	; 0xfc
   111ba:	695b      	ldr	r3, [r3, #20]
   111bc:	86da      	strh	r2, [r3, #54]	; 0x36
   111be:	e028      	b.n	11212 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x1213>
	}

	/* Remote Initiated terminate happened in previous event for Master */
	else if ((_radio.role == ROLE_MASTER) &&
   111c0:	2b04      	cmp	r3, #4
   111c2:	d10c      	bne.n	111de <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x11df>
		 (_radio.conn_curr->llcp_terminate.reason_peer != 0)) {
   111c4:	0003      	movs	r3, r0
   111c6:	33a7      	adds	r3, #167	; 0xa7
   111c8:	7819      	ldrb	r1, [r3, #0]
		/* Reset supervision counter */
		_radio.conn_curr->supervision_expire = 0;
	}

	/* Remote Initiated terminate happened in previous event for Master */
	else if ((_radio.role == ROLE_MASTER) &&
   111ca:	2900      	cmp	r1, #0
   111cc:	d007      	beq.n	111de <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x11df>
		 (_radio.conn_curr->llcp_terminate.reason_peer != 0)) {
		terminate_ind_rx_enqueue(_radio.conn_curr,
					 _radio.conn_curr->llcp_terminate.reason_peer);

		connection_release(_radio.conn_curr);
   111ce:	35fc      	adds	r5, #252	; 0xfc
	}

	/* Remote Initiated terminate happened in previous event for Master */
	else if ((_radio.role == ROLE_MASTER) &&
		 (_radio.conn_curr->llcp_terminate.reason_peer != 0)) {
		terminate_ind_rx_enqueue(_radio.conn_curr,
   111d0:	f7fc f8ec 	bl	d3ac <terminate_ind_rx_enqueue>
					 _radio.conn_curr->llcp_terminate.reason_peer);

		connection_release(_radio.conn_curr);
   111d4:	6968      	ldr	r0, [r5, #20]
   111d6:	f7fb ffb5 	bl	d144 <connection_release>
		_radio.conn_curr = NULL;
   111da:	616e      	str	r6, [r5, #20]
   111dc:	e137      	b.n	1144e <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x144f>

		return;
	}

	/* If master, check connection failed to establish */
	else if ((_radio.role == ROLE_MASTER) &&
   111de:	7beb      	ldrb	r3, [r5, #15]
   111e0:	2b04      	cmp	r3, #4
   111e2:	d10e      	bne.n	11202 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x1203>
		 (_radio.conn_curr->role.master.connect_expire != 0)) {
   111e4:	0002      	movs	r2, r0
   111e6:	3245      	adds	r2, #69	; 0x45
   111e8:	7813      	ldrb	r3, [r2, #0]

		return;
	}

	/* If master, check connection failed to establish */
	else if ((_radio.role == ROLE_MASTER) &&
   111ea:	2b00      	cmp	r3, #0
   111ec:	d009      	beq.n	11202 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x1203>
		 (_radio.conn_curr->role.master.connect_expire != 0)) {
		if (_radio.conn_curr->role.master.connect_expire >
   111ee:	429c      	cmp	r4, r3
   111f0:	d202      	bcs.n	111f8 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x11f9>
		    elapsed_event) {
			_radio.conn_curr->role.master.connect_expire -= elapsed_event;
   111f2:	1b1b      	subs	r3, r3, r4
   111f4:	7013      	strb	r3, [r2, #0]
   111f6:	e00a      	b.n	1120e <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x120f>
		} else {
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x3e);
   111f8:	213e      	movs	r1, #62	; 0x3e
   111fa:	f7fc f8d7 	bl	d3ac <terminate_ind_rx_enqueue>

			connection_release(_radio.conn_curr);
   111fe:	35fc      	adds	r5, #252	; 0xfc
   11200:	e02c      	b.n	1125c <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x125d>
	/* if anchor point not sync-ed, start supervision timeout, and break
	 * latency if any.
	 */
	else {
		/* Start supervision timeout, if not started already */
		if (_radio.conn_curr->supervision_expire == 0) {
   11202:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
   11204:	2e00      	cmp	r6, #0
   11206:	d102      	bne.n	1120e <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x120f>
			_radio.conn_curr->supervision_expire =
   11208:	8e83      	ldrh	r3, [r0, #52]	; 0x34
   1120a:	86c3      	strh	r3, [r0, #54]	; 0x36
   1120c:	e000      	b.n	11210 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x1211>

		return;
	}

	ticks_drift_plus = 0;
	ticks_drift_minus = 0;
   1120e:	2600      	movs	r6, #0
		_radio.conn_curr = NULL;

		return;
	}

	ticks_drift_plus = 0;
   11210:	960a      	str	r6, [sp, #40]	; 0x28
		}
	}

	/* check supervision timeout */
	force = 0;
	if (_radio.conn_curr->supervision_expire != 0) {
   11212:	4f23      	ldr	r7, [pc, #140]	; (112a0 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x12a1>)
   11214:	003d      	movs	r5, r7
   11216:	35fc      	adds	r5, #252	; 0xfc
   11218:	6968      	ldr	r0, [r5, #20]
   1121a:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
   1121c:	2b00      	cmp	r3, #0
   1121e:	d023      	beq.n	11268 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x1269>
		if (_radio.conn_curr->supervision_expire > elapsed_event) {
   11220:	429c      	cmp	r4, r3
   11222:	d218      	bcs.n	11256 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x1257>
			_radio.conn_curr->supervision_expire -= elapsed_event;

			/* break latency */
			_radio.conn_curr->latency_event = 0;
   11224:	2200      	movs	r2, #0

	/* check supervision timeout */
	force = 0;
	if (_radio.conn_curr->supervision_expire != 0) {
		if (_radio.conn_curr->supervision_expire > elapsed_event) {
			_radio.conn_curr->supervision_expire -= elapsed_event;
   11226:	1b1b      	subs	r3, r3, r4
   11228:	b29b      	uxth	r3, r3
   1122a:	86c3      	strh	r3, [r0, #54]	; 0x36

			/* break latency */
			_radio.conn_curr->latency_event = 0;
   1122c:	8542      	strh	r2, [r0, #42]	; 0x2a

			/* Force both master and slave when close to
			 * supervision timeout.
			 */
			if (_radio.conn_curr->supervision_expire <= 6) {
				force = 1;
   1122e:	2501      	movs	r5, #1
			_radio.conn_curr->latency_event = 0;

			/* Force both master and slave when close to
			 * supervision timeout.
			 */
			if (_radio.conn_curr->supervision_expire <= 6) {
   11230:	2b06      	cmp	r3, #6
   11232:	d91a      	bls.n	1126a <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x126b>
				force = 1;
			}
			/* use randomness to force slave role when anchor
			 * points are being missed.
			 */
			else if (_radio.role == ROLE_SLAVE) {
   11234:	7bfb      	ldrb	r3, [r7, #15]
   11236:	2b03      	cmp	r3, #3
   11238:	d116      	bne.n	11268 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x1269>
				if (latency_event != 0) {
   1123a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1123c:	4293      	cmp	r3, r2
   1123e:	d114      	bne.n	1126a <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x126b>
					force = 1;
				} else {
					force = _radio.conn_curr->role.slave.force & 0x01;
   11240:	6e02      	ldr	r2, [r0, #96]	; 0x60

					/* rotate force bits */
					_radio.conn_curr->role.slave.force >>= 1;
   11242:	0853      	lsrs	r3, r2, #1
					if (force) {
   11244:	422a      	tst	r2, r5
   11246:	d101      	bne.n	1124c <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x124d>
					force = 1;
				} else {
					force = _radio.conn_curr->role.slave.force & 0x01;

					/* rotate force bits */
					_radio.conn_curr->role.slave.force >>= 1;
   11248:	6603      	str	r3, [r0, #96]	; 0x60
   1124a:	e00d      	b.n	11268 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x1269>
					if (force) {
						_radio.conn_curr->role.slave.force |=
   1124c:	2280      	movs	r2, #128	; 0x80
   1124e:	0612      	lsls	r2, r2, #24
   11250:	4313      	orrs	r3, r2
   11252:	6603      	str	r3, [r0, #96]	; 0x60
   11254:	e009      	b.n	1126a <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x126b>
							((u32_t)1 << 31);
					}
				}
			}
		} else {
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x08);
   11256:	2108      	movs	r1, #8
   11258:	f7fc f8a8 	bl	d3ac <terminate_ind_rx_enqueue>

			connection_release(_radio.conn_curr);
   1125c:	6968      	ldr	r0, [r5, #20]
   1125e:	f7fb ff71 	bl	d144 <connection_release>
			_radio.conn_curr = NULL;
   11262:	2300      	movs	r3, #0
   11264:	616b      	str	r3, [r5, #20]
   11266:	e0f2      	b.n	1144e <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x144f>
				_radio.conn_curr->supervision_reload;
		}
	}

	/* check supervision timeout */
	force = 0;
   11268:	2500      	movs	r5, #0
			return;
		}
	}

	/* check procedure timeout */
	if (_radio.conn_curr->procedure_expire != 0) {
   1126a:	8f43      	ldrh	r3, [r0, #58]	; 0x3a
   1126c:	2b00      	cmp	r3, #0
   1126e:	d00e      	beq.n	1128e <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x128f>
		if (_radio.conn_curr->procedure_expire > elapsed_event) {
   11270:	429c      	cmp	r4, r3
   11272:	d202      	bcs.n	1127a <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x127b>
			_radio.conn_curr->procedure_expire -= elapsed_event;
   11274:	1b1b      	subs	r3, r3, r4
   11276:	8743      	strh	r3, [r0, #58]	; 0x3a
   11278:	e009      	b.n	1128e <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x128f>
		} else {
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x22);
   1127a:	2122      	movs	r1, #34	; 0x22

			connection_release(_radio.conn_curr);
   1127c:	37fc      	adds	r7, #252	; 0xfc
	/* check procedure timeout */
	if (_radio.conn_curr->procedure_expire != 0) {
		if (_radio.conn_curr->procedure_expire > elapsed_event) {
			_radio.conn_curr->procedure_expire -= elapsed_event;
		} else {
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x22);
   1127e:	f7fc f895 	bl	d3ac <terminate_ind_rx_enqueue>

			connection_release(_radio.conn_curr);
   11282:	6978      	ldr	r0, [r7, #20]
   11284:	f7fb ff5e 	bl	d144 <connection_release>
			_radio.conn_curr = NULL;
   11288:	2300      	movs	r3, #0
   1128a:	617b      	str	r3, [r7, #20]
   1128c:	e0df      	b.n	1144e <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x144f>
		}
	}

#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_PING)
	/* check apto */
	if (_radio.conn_curr->apto_expire != 0) {
   1128e:	3004      	adds	r0, #4
   11290:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
   11292:	2b00      	cmp	r3, #0
   11294:	d035      	beq.n	11302 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x1303>
		if (_radio.conn_curr->apto_expire > elapsed_event) {
   11296:	429c      	cmp	r4, r3
   11298:	d21a      	bcs.n	112d0 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x12d1>
			_radio.conn_curr->apto_expire -= elapsed_event;
   1129a:	1b1b      	subs	r3, r3, r4
   1129c:	87c3      	strh	r3, [r0, #62]	; 0x3e
   1129e:	e030      	b.n	11302 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x1303>
   112a0:	200015c0 	.word	0x200015c0
   112a4:	000154c4 	.word	0x000154c4
   112a8:	000154c9 	.word	0x000154c9
   112ac:	000182d6 	.word	0x000182d6
   112b0:	00000b62 	.word	0x00000b62
   112b4:	0000caf9 	.word	0x0000caf9
   112b8:	00015484 	.word	0x00015484
   112bc:	0001548b 	.word	0x0001548b
   112c0:	00017485 	.word	0x00017485
   112c4:	000180db 	.word	0x000180db
   112c8:	3b9aca00 	.word	0x3b9aca00
   112cc:	1afd498d 	.word	0x1afd498d
		} else {
			struct radio_pdu_node_rx *radio_pdu_node_rx;

			_radio.conn_curr->apto_expire = 0;
   112d0:	2300      	movs	r3, #0
   112d2:	87c3      	strh	r3, [r0, #62]	; 0x3e

			/* Prepare the rx packet structure */
			radio_pdu_node_rx = packet_rx_reserve_get(2);
   112d4:	2002      	movs	r0, #2
   112d6:	f7fa ff6d 	bl	c1b4 <packet_rx_reserve_get>
			LL_ASSERT(radio_pdu_node_rx);
   112da:	2800      	cmp	r0, #0
   112dc:	d108      	bne.n	112f0 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x12f1>
   112de:	4b75      	ldr	r3, [pc, #468]	; (114b4 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x14b5>)
   112e0:	9301      	str	r3, [sp, #4]
   112e2:	4b75      	ldr	r3, [pc, #468]	; (114b8 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x14b9>)
   112e4:	9300      	str	r3, [sp, #0]
   112e6:	4b75      	ldr	r3, [pc, #468]	; (114bc <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x14bd>)
   112e8:	4a75      	ldr	r2, [pc, #468]	; (114c0 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x14c1>)
   112ea:	4976      	ldr	r1, [pc, #472]	; (114c4 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x14c5>)
   112ec:	4876      	ldr	r0, [pc, #472]	; (114c8 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x14c9>)
   112ee:	e083      	b.n	113f8 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x13f9>

			radio_pdu_node_rx->hdr.handle = _radio.conn_curr->handle;
   112f0:	003b      	movs	r3, r7
   112f2:	33fc      	adds	r3, #252	; 0xfc
   112f4:	695b      	ldr	r3, [r3, #20]
   112f6:	8c1b      	ldrh	r3, [r3, #32]
   112f8:	80c3      	strh	r3, [r0, #6]
			radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_APTO;
   112fa:	230a      	movs	r3, #10
   112fc:	7103      	strb	r3, [r0, #4]

			/* enqueue apto event into rx queue */
			packet_rx_enqueue();
   112fe:	f7fb fb27 	bl	c950 <packet_rx_enqueue>
		}
	}

	/* check appto */
	if (_radio.conn_curr->appto_expire != 0) {
   11302:	003b      	movs	r3, r7
   11304:	33fc      	adds	r3, #252	; 0xfc
   11306:	695b      	ldr	r3, [r3, #20]
   11308:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
   1130a:	2a00      	cmp	r2, #0
   1130c:	d017      	beq.n	1133e <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x133f>
		if (_radio.conn_curr->appto_expire > elapsed_event) {
   1130e:	4294      	cmp	r4, r2
   11310:	d202      	bcs.n	11318 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x1319>
			_radio.conn_curr->appto_expire -= elapsed_event;
   11312:	1b14      	subs	r4, r2, r4
   11314:	87dc      	strh	r4, [r3, #62]	; 0x3e
   11316:	e012      	b.n	1133e <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x133f>
		} else {
			_radio.conn_curr->appto_expire = 0;
   11318:	2200      	movs	r2, #0
   1131a:	87da      	strh	r2, [r3, #62]	; 0x3e

			if ((_radio.conn_curr->procedure_expire == 0) &&
   1131c:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
   1131e:	2a00      	cmp	r2, #0
   11320:	d10d      	bne.n	1133e <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x133f>
			    (_radio.conn_curr->llcp_req ==
   11322:	001a      	movs	r2, r3
			     _radio.conn_curr->llcp_ack)) {
   11324:	0018      	movs	r0, r3
			_radio.conn_curr->appto_expire -= elapsed_event;
		} else {
			_radio.conn_curr->appto_expire = 0;

			if ((_radio.conn_curr->procedure_expire == 0) &&
			    (_radio.conn_curr->llcp_req ==
   11326:	3268      	adds	r2, #104	; 0x68
			     _radio.conn_curr->llcp_ack)) {
   11328:	3069      	adds	r0, #105	; 0x69
			_radio.conn_curr->appto_expire -= elapsed_event;
		} else {
			_radio.conn_curr->appto_expire = 0;

			if ((_radio.conn_curr->procedure_expire == 0) &&
			    (_radio.conn_curr->llcp_req ==
   1132a:	7811      	ldrb	r1, [r2, #0]
		if (_radio.conn_curr->appto_expire > elapsed_event) {
			_radio.conn_curr->appto_expire -= elapsed_event;
		} else {
			_radio.conn_curr->appto_expire = 0;

			if ((_radio.conn_curr->procedure_expire == 0) &&
   1132c:	7802      	ldrb	r2, [r0, #0]
   1132e:	428a      	cmp	r2, r1
   11330:	d10c      	bne.n	1134c <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x134d>
			    (_radio.conn_curr->llcp_req ==
			     _radio.conn_curr->llcp_ack)) {
				_radio.conn_curr->llcp_type = LLCP_PING;
   11332:	0019      	movs	r1, r3
   11334:	2406      	movs	r4, #6
   11336:	316a      	adds	r1, #106	; 0x6a
				_radio.conn_curr->llcp_ack--;
   11338:	3a01      	subs	r2, #1
			_radio.conn_curr->appto_expire = 0;

			if ((_radio.conn_curr->procedure_expire == 0) &&
			    (_radio.conn_curr->llcp_req ==
			     _radio.conn_curr->llcp_ack)) {
				_radio.conn_curr->llcp_type = LLCP_PING;
   1133a:	700c      	strb	r4, [r1, #0]
				_radio.conn_curr->llcp_ack--;
   1133c:	7002      	strb	r2, [r0, #0]
		}
	}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_CONN_RSSI */

	/* break latency based on ctrl procedure pending */
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
   1133e:	001a      	movs	r2, r3
   11340:	3269      	adds	r2, #105	; 0x69
   11342:	7811      	ldrb	r1, [r2, #0]
   11344:	3a01      	subs	r2, #1
   11346:	7812      	ldrb	r2, [r2, #0]
   11348:	4291      	cmp	r1, r2
   1134a:	d007      	beq.n	1135c <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x135d>
	    ((_radio.conn_curr->llcp_type == LLCP_CONNECTION_UPDATE) ||
   1134c:	001a      	movs	r2, r3
   1134e:	326a      	adds	r2, #106	; 0x6a
		}
	}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_CONN_RSSI */

	/* break latency based on ctrl procedure pending */
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
   11350:	7812      	ldrb	r2, [r2, #0]
   11352:	3a01      	subs	r2, #1
   11354:	2a01      	cmp	r2, #1
   11356:	d801      	bhi.n	1135c <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x135d>
	    ((_radio.conn_curr->llcp_type == LLCP_CONNECTION_UPDATE) ||
	     (_radio.conn_curr->llcp_type == LLCP_CHAN_MAP))) {
		_radio.conn_curr->latency_event = 0;
   11358:	2200      	movs	r2, #0
   1135a:	855a      	strh	r2, [r3, #42]	; 0x2a
   1135c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
	}

	/* check if latency needs update */
	lazy = 0;
	if ((force) || (latency_event != _radio.conn_curr->latency_event)) {
   1135e:	2d00      	cmp	r5, #0
   11360:	d103      	bne.n	1136a <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x136b>
   11362:	980c      	ldr	r0, [sp, #48]	; 0x30
	     (_radio.conn_curr->llcp_type == LLCP_CHAN_MAP))) {
		_radio.conn_curr->latency_event = 0;
	}

	/* check if latency needs update */
	lazy = 0;
   11364:	0029      	movs	r1, r5
	if ((force) || (latency_event != _radio.conn_curr->latency_event)) {
   11366:	4282      	cmp	r2, r0
   11368:	d001      	beq.n	1136e <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x136f>
		lazy = _radio.conn_curr->latency_event + 1;
   1136a:	3201      	adds	r2, #1
   1136c:	b291      	uxth	r1, r2
	}

	if ((ticks_drift_plus != 0) || (ticks_drift_minus != 0) ||
   1136e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   11370:	4332      	orrs	r2, r6
   11372:	430a      	orrs	r2, r1
   11374:	b292      	uxth	r2, r2
   11376:	2a00      	cmp	r2, #0
   11378:	d101      	bne.n	1137e <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x137f>
	    (lazy != 0) || (force != 0)) {
   1137a:	2d00      	cmp	r5, #0
   1137c:	d067      	beq.n	1144e <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x144f>
		 * condition where in the Slave role is being stopped but
		 * at the same time it is preempted by Slave event that
		 * gets into close state. Accept failure when Slave role
		 * is being stopped.
		 */
		ticker_status =
   1137e:	2000      	movs	r0, #0
	}

	if ((ticks_drift_plus != 0) || (ticks_drift_minus != 0) ||
	    (lazy != 0) || (force != 0)) {
		u32_t ticker_status;
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
   11380:	8c1c      	ldrh	r4, [r3, #32]
		 * condition where in the Slave role is being stopped but
		 * at the same time it is preempted by Slave event that
		 * gets into close state. Accept failure when Slave role
		 * is being stopped.
		 */
		ticker_status =
   11382:	4b52      	ldr	r3, [pc, #328]	; (114cc <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x14cd>)
	}

	if ((ticks_drift_plus != 0) || (ticks_drift_minus != 0) ||
	    (lazy != 0) || (force != 0)) {
		u32_t ticker_status;
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
   11384:	3407      	adds	r4, #7
   11386:	b2e4      	uxtb	r4, r4
		 * condition where in the Slave role is being stopped but
		 * at the same time it is preempted by Slave event that
		 * gets into close state. Accept failure when Slave role
		 * is being stopped.
		 */
		ticker_status =
   11388:	9305      	str	r3, [sp, #20]
   1138a:	9103      	str	r1, [sp, #12]
   1138c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1138e:	9406      	str	r4, [sp, #24]
   11390:	9504      	str	r5, [sp, #16]
   11392:	9002      	str	r0, [sp, #8]
   11394:	9001      	str	r0, [sp, #4]
   11396:	9600      	str	r6, [sp, #0]
   11398:	0022      	movs	r2, r4
   1139a:	0001      	movs	r1, r0
   1139c:	f7fa fdac 	bl	bef8 <ticker_update>
				      RADIO_TICKER_USER_ID_WORKER,
				      ticker_id,
				      ticks_drift_plus, ticks_drift_minus, 0, 0,
				      lazy, force, ticker_update_slave_assert,
				      (void *)(u32_t)ticker_id);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   113a0:	2302      	movs	r3, #2
   113a2:	4398      	bics	r0, r3
   113a4:	d053      	beq.n	1144e <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x144f>
   113a6:	7bbb      	ldrb	r3, [r7, #14]
   113a8:	429c      	cmp	r4, r3
   113aa:	d050      	beq.n	1144e <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x144f>
   113ac:	4b41      	ldr	r3, [pc, #260]	; (114b4 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x14b5>)
   113ae:	4a44      	ldr	r2, [pc, #272]	; (114c0 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x14c1>)
   113b0:	9301      	str	r3, [sp, #4]
   113b2:	4b41      	ldr	r3, [pc, #260]	; (114b8 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x14b9>)
   113b4:	4943      	ldr	r1, [pc, #268]	; (114c4 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x14c5>)
   113b6:	9300      	str	r3, [sp, #0]
   113b8:	4845      	ldr	r0, [pc, #276]	; (114d0 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x14d1>)
   113ba:	4b40      	ldr	r3, [pc, #256]	; (114bc <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x14bd>)
   113bc:	e01c      	b.n	113f8 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x13f9>
		 * no active role at that instance in time.
		 * Just reset the state to none. The role has gracefully closed
		 * before this ISR run.
		 * The above applies to aborting a role event too.
		 */
		LL_ASSERT((_radio.state == STATE_STOP) ||
   113be:	3b04      	subs	r3, #4
   113c0:	2b01      	cmp	r3, #1
   113c2:	d908      	bls.n	113d6 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x13d7>
   113c4:	4b3b      	ldr	r3, [pc, #236]	; (114b4 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x14b5>)
   113c6:	4a3e      	ldr	r2, [pc, #248]	; (114c0 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x14c1>)
   113c8:	9301      	str	r3, [sp, #4]
   113ca:	4b3b      	ldr	r3, [pc, #236]	; (114b8 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x14b9>)
   113cc:	493d      	ldr	r1, [pc, #244]	; (114c4 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x14c5>)
   113ce:	9300      	str	r3, [sp, #0]
   113d0:	4840      	ldr	r0, [pc, #256]	; (114d4 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x14d5>)
   113d2:	4b41      	ldr	r3, [pc, #260]	; (114d8 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x14d9>)
   113d4:	e010      	b.n	113f8 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x13f9>
			  (_radio.state == STATE_ABORT));

		_radio.state = STATE_NONE;
   113d6:	2300      	movs	r3, #0
   113d8:	742b      	strb	r3, [r5, #16]
   113da:	e068      	b.n	114ae <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x14af>

		return;

	default:
		LL_ASSERT(0);
   113dc:	4b35      	ldr	r3, [pc, #212]	; (114b4 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x14b5>)
   113de:	9301      	str	r3, [sp, #4]
   113e0:	4b35      	ldr	r3, [pc, #212]	; (114b8 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x14b9>)
   113e2:	9300      	str	r3, [sp, #0]
   113e4:	4b3c      	ldr	r3, [pc, #240]	; (114d8 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x14d9>)
   113e6:	e004      	b.n	113f2 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x13f3>
		 * using Radio Disable task.
		 */
		break;

	default:
		LL_ASSERT(0);
   113e8:	4b32      	ldr	r3, [pc, #200]	; (114b4 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x14b5>)
   113ea:	9301      	str	r3, [sp, #4]
   113ec:	4b32      	ldr	r3, [pc, #200]	; (114b8 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x14b9>)
   113ee:	9300      	str	r3, [sp, #0]
   113f0:	4b3a      	ldr	r3, [pc, #232]	; (114dc <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x14dd>)
   113f2:	4a33      	ldr	r2, [pc, #204]	; (114c0 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x14c1>)
   113f4:	4933      	ldr	r1, [pc, #204]	; (114c4 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x14c5>)
   113f6:	483a      	ldr	r0, [pc, #232]	; (114e0 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x14e1>)
   113f8:	f7f0 fac2 	bl	1980 <printk>
   113fc:	b662      	cpsie	i
   113fe:	2004      	movs	r0, #4
   11400:	df02      	svc	2
	     ((((_radio.conn_curr->llcp_length.state ==
		 LLCP_LENGTH_STATE_REQ) ||
		(_radio.conn_curr->llcp_length.state ==
		 LLCP_LENGTH_STATE_ACK_WAIT)) &&
	       (pdu_data_rx->payload.llctrl.opcode ==
		PDU_DATA_LLCTRL_TYPE_LENGTH_REQ)) ||
   11402:	2b02      	cmp	r3, #2
   11404:	d101      	bne.n	1140a <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x140b>
   11406:	f7ff fab6 	bl	10976 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x977>
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	struct radio_pdu_node_tx *tx_release = NULL;
	u8_t is_empty_pdu_tx_retry;
	struct pdu_data *pdu_data_rx;
	struct pdu_data *pdu_data_tx;
	u8_t rx_enqueue = 0;
   1140a:	2400      	movs	r4, #0
			 */
			*rx_enqueue = 1;
		}
	} else {
		/* Drop response with no Local initiated request. */
		LL_ASSERT(pdu_data_rx->payload.llctrl.opcode ==
   1140c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
static inline u8_t isr_rx_conn_pkt_ctrl_dle(struct pdu_data *pdu_data_rx,
					    u8_t *rx_enqueue)
{
	u16_t eff_rx_octets;
	u16_t eff_tx_octets;
	u8_t nack = 0;
   1140e:	0023      	movs	r3, r4
			 */
			*rx_enqueue = 1;
		}
	} else {
		/* Drop response with no Local initiated request. */
		LL_ASSERT(pdu_data_rx->payload.llctrl.opcode ==
   11410:	2a15      	cmp	r2, #21
   11412:	d101      	bne.n	11418 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x1419>
   11414:	f7ff fb29 	bl	10a6a <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xa6b>
   11418:	4b26      	ldr	r3, [pc, #152]	; (114b4 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x14b5>)
   1141a:	4a29      	ldr	r2, [pc, #164]	; (114c0 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x14c1>)
   1141c:	9301      	str	r3, [sp, #4]
   1141e:	4b26      	ldr	r3, [pc, #152]	; (114b8 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x14b9>)
   11420:	4928      	ldr	r1, [pc, #160]	; (114c4 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x14c5>)
   11422:	9300      	str	r3, [sp, #0]
   11424:	482f      	ldr	r0, [pc, #188]	; (114e4 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x14e5>)
   11426:	4b30      	ldr	r3, [pc, #192]	; (114e8 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x14e9>)
   11428:	e7e6      	b.n	113f8 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x13f9>
		}
		break;

	case PDU_DATA_LLCTRL_TYPE_PHY_UPD_IND:
		if (phy_upd_ind(radio_pdu_node_rx, rx_enqueue)) {
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
   1142a:	2328      	movs	r3, #40	; 0x28
   1142c:	35a7      	adds	r5, #167	; 0xa7
   1142e:	702b      	strb	r3, [r5, #0]
   11430:	f7fe ff9b 	bl	1036a <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x36b>
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	struct radio_pdu_node_tx *tx_release = NULL;
	u8_t is_empty_pdu_tx_retry;
	struct pdu_data *pdu_data_rx;
	struct pdu_data *pdu_data_tx;
	u8_t rx_enqueue = 0;
   11434:	000c      	movs	r4, r1
		  (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] ==
		   _radio.conn_curr->handle)) ||
		 ((_radio.fc_req != 0) &&
		  (_radio.fc_handle[_radio.fc_req - 1] ==
		   _radio.conn_curr->handle)))))) {
		u8_t ccm_rx_increment = 0;
   11436:	9412      	str	r4, [sp, #72]	; 0x48
   11438:	e4d3      	b.n	10de2 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xde3>
	radio_tmr_sample();

#endif /* CONFIG_BLUETOOTH_CONTROLLER_PROFILE_ISR */

	/* release tx node and generate event for num complete */
	if (tx_release) {
   1143a:	2400      	movs	r4, #0
   1143c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1143e:	42a3      	cmp	r3, r4
   11440:	d000      	beq.n	11444 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x1445>
   11442:	e59e      	b.n	10f82 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xf83>
   11444:	e033      	b.n	114ae <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x14af>
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	struct radio_pdu_node_tx *tx_release = NULL;
	u8_t is_empty_pdu_tx_retry;
	struct pdu_data *pdu_data_rx;
	struct pdu_data *pdu_data_tx;
	u8_t rx_enqueue = 0;
   11446:	2400      	movs	r4, #0
	u8_t crc_close = 0;
   11448:	2300      	movs	r3, #0
   1144a:	930e      	str	r3, [sp, #56]	; 0x38
   1144c:	e518      	b.n	10e80 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xe81>

	if (dont_close) {
		return;
	}

	_radio.role = ROLE_NONE;
   1144e:	2400      	movs	r4, #0
   11450:	4d26      	ldr	r5, [pc, #152]	; (114ec <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x14ed>)
   11452:	73ec      	strb	r4, [r5, #15]
	_radio.state = STATE_NONE;
   11454:	742c      	strb	r4, [r5, #16]
	_radio.ticker_id_event = 0;
   11456:	736c      	strb	r4, [r5, #13]

	radio_tmr_stop();
   11458:	f7f9 fd6a 	bl	af30 <radio_tmr_stop>
	ARG_UNUSED(ticks_at_expire);
	ARG_UNUSED(remainder);
	ARG_UNUSED(lazy);
	ARG_UNUSED(context);

	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   1145c:	0022      	movs	r2, r4
   1145e:	0021      	movs	r1, r4
   11460:	0020      	movs	r0, r4
   11462:	4b23      	ldr	r3, [pc, #140]	; (114f0 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x14f1>)
   11464:	f7f9 f90c 	bl	a680 <mayfly_enqueue>
   11468:	1e04      	subs	r4, r0, #0
				RADIO_TICKER_USER_ID_WORKER, 0,
				&s_mfy_radio_inactive);
	LL_ASSERT(!retval);
   1146a:	d008      	beq.n	1147e <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x147f>
   1146c:	4b11      	ldr	r3, [pc, #68]	; (114b4 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x14b5>)
   1146e:	4a14      	ldr	r2, [pc, #80]	; (114c0 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x14c1>)
   11470:	9301      	str	r3, [sp, #4]
   11472:	4b11      	ldr	r3, [pc, #68]	; (114b8 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x14b9>)
   11474:	4913      	ldr	r1, [pc, #76]	; (114c4 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x14c5>)
   11476:	9300      	str	r3, [sp, #0]
   11478:	481e      	ldr	r0, [pc, #120]	; (114f4 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x14f5>)
   1147a:	4b1f      	ldr	r3, [pc, #124]	; (114f8 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x14f9>)
   1147c:	e7bc      	b.n	113f8 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x13f9>

	radio_tmr_stop();

	event_inactive(0, 0, 0, NULL);

	clock_control_off(_radio.hf_clock, NULL);
   1147e:	6828      	ldr	r0, [r5, #0]
   11480:	0021      	movs	r1, r4
   11482:	6843      	ldr	r3, [r0, #4]
   11484:	685b      	ldr	r3, [r3, #4]
   11486:	4798      	blx	r3

	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
   11488:	2201      	movs	r2, #1
   1148a:	0020      	movs	r0, r4
   1148c:	0011      	movs	r1, r2
   1148e:	f7f9 f8d7 	bl	a640 <mayfly_enable>
   11492:	e00c      	b.n	114ae <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x14af>
				return err;
			}
		}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_SCAN_REQ_NOTIFY */

		_radio.state = STATE_CLOSE;
   11494:	2303      	movs	r3, #3
   11496:	742b      	strb	r3, [r5, #16]

		radio_switch_complete_and_disable();
   11498:	f7f9 fc4c 	bl	ad34 <radio_switch_complete_and_disable>

		radio_pkt_tx_set(&_radio.advertiser.scan_data.
		     data[_radio.advertiser.scan_data.first][0]);
   1149c:	002b      	movs	r3, r5
   1149e:	33c5      	adds	r3, #197	; 0xc5

		_radio.state = STATE_CLOSE;

		radio_switch_complete_and_disable();

		radio_pkt_tx_set(&_radio.advertiser.scan_data.
   114a0:	7818      	ldrb	r0, [r3, #0]
   114a2:	2327      	movs	r3, #39	; 0x27
   114a4:	4358      	muls	r0, r3
   114a6:	1828      	adds	r0, r5, r0
   114a8:	3077      	adds	r0, #119	; 0x77
   114aa:	f7f9 fbc5 	bl	ac38 <radio_pkt_tx_set>
		LL_ASSERT(0);
		break;
	}

	DEBUG_RADIO_ISR(0);
}
   114ae:	b017      	add	sp, #92	; 0x5c
   114b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   114b2:	46c0      	nop			; (mov r8, r8)
   114b4:	000154c4 	.word	0x000154c4
   114b8:	000154c9 	.word	0x000154c9
   114bc:	00018543 	.word	0x00018543
   114c0:	00015484 	.word	0x00015484
   114c4:	0001548b 	.word	0x0001548b
   114c8:	00016df2 	.word	0x00016df2
   114cc:	0000cb41 	.word	0x0000cb41
   114d0:	000174f3 	.word	0x000174f3
   114d4:	00017569 	.word	0x00017569
   114d8:	000183b8 	.word	0x000183b8
   114dc:	0001848f 	.word	0x0001848f
   114e0:	00015b21 	.word	0x00015b21
   114e4:	0001741e 	.word	0x0001741e
   114e8:	0001826f 	.word	0x0001826f
   114ec:	200015c0 	.word	0x200015c0
   114f0:	200008c0 	.word	0x200008c0
   114f4:	00016bf1 	.word	0x00016bf1
   114f8:	00018405 	.word	0x00018405

000114fc <radio_init>:
u32_t radio_init(void *hf_clock, u8_t sca, u8_t connection_count_max,
		 u8_t rx_count_max, u8_t tx_count_max,
		 u16_t packet_data_octets_max,
		 u16_t packet_tx_data_size, u8_t *mem_radio,
		 u16_t mem_size)
{
   114fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   114fe:	b087      	sub	sp, #28
   11500:	9201      	str	r2, [sp, #4]
   11502:	aa0c      	add	r2, sp, #48	; 0x30
   11504:	7816      	ldrb	r6, [r2, #0]
   11506:	aa0d      	add	r2, sp, #52	; 0x34
   11508:	8817      	ldrh	r7, [r2, #0]
   1150a:	aa0e      	add	r2, sp, #56	; 0x38
   1150c:	8812      	ldrh	r2, [r2, #0]
   1150e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   11510:	9205      	str	r2, [sp, #20]
   11512:	aa10      	add	r2, sp, #64	; 0x40
   11514:	8812      	ldrh	r2, [r2, #0]
	mem_radio_end = mem_radio + mem_size;

	/* initialise connection context memory */
	_radio.connection_count = connection_count_max;
	_radio.conn_pool = mem_radio;
	mem_radio += (sizeof(struct connection) * _radio.connection_count);
   11516:	248c      	movs	r4, #140	; 0x8c
u32_t radio_init(void *hf_clock, u8_t sca, u8_t connection_count_max,
		 u8_t rx_count_max, u8_t tx_count_max,
		 u16_t packet_data_octets_max,
		 u16_t packet_tx_data_size, u8_t *mem_radio,
		 u16_t mem_size)
{
   11518:	9202      	str	r2, [sp, #8]
	u32_t retcode;
	u8_t *mem_radio_end;

	/* intialise hf_clock device to use in prepare */
	_radio.hf_clock = hf_clock;
   1151a:	4a34      	ldr	r2, [pc, #208]	; (115ec <radio_init+0xf0>)
	mem_radio_end = mem_radio + mem_size;

	/* initialise connection context memory */
	_radio.connection_count = connection_count_max;
	_radio.conn_pool = mem_radio;
	mem_radio += (sizeof(struct connection) * _radio.connection_count);
   1151c:	0064      	lsls	r4, r4, #1
{
	u32_t retcode;
	u8_t *mem_radio_end;

	/* intialise hf_clock device to use in prepare */
	_radio.hf_clock = hf_clock;
   1151e:	6010      	str	r0, [r2, #0]

	/* initialise SCA */
	_radio.sca = sca;
   11520:	0010      	movs	r0, r2
   11522:	30ff      	adds	r0, #255	; 0xff
   11524:	7741      	strb	r1, [r0, #29]

	/* initialised radio mem end variable */
	mem_radio_end = mem_radio + mem_size;
   11526:	9902      	ldr	r1, [sp, #8]
   11528:	1869      	adds	r1, r5, r1
   1152a:	9103      	str	r1, [sp, #12]

	/* initialise connection context memory */
	_radio.connection_count = connection_count_max;
   1152c:	4669      	mov	r1, sp
   1152e:	7909      	ldrb	r1, [r1, #4]
   11530:	7341      	strb	r1, [r0, #13]
	_radio.conn_pool = mem_radio;
   11532:	0010      	movs	r0, r2
	mem_radio += (sizeof(struct connection) * _radio.connection_count);
   11534:	9901      	ldr	r1, [sp, #4]
	/* initialised radio mem end variable */
	mem_radio_end = mem_radio + mem_size;

	/* initialise connection context memory */
	_radio.connection_count = connection_count_max;
	_radio.conn_pool = mem_radio;
   11536:	30fc      	adds	r0, #252	; 0xfc
	mem_radio += (sizeof(struct connection) * _radio.connection_count);
   11538:	434c      	muls	r4, r1
	/* initialised radio mem end variable */
	mem_radio_end = mem_radio + mem_size;

	/* initialise connection context memory */
	_radio.connection_count = connection_count_max;
	_radio.conn_pool = mem_radio;
   1153a:	6085      	str	r5, [r0, #8]
	mem_radio += (sizeof(struct connection) * _radio.connection_count);
   1153c:	192c      	adds	r4, r5, r4
	/* additional for pdu to NACK or receive empty PDU,
	 * 1 scan resp and 1* ctrl event.
	 */
	rx_count_max += 3;
	 /* additional pdu to send enc_req ctrl pdu */
	tx_count_max += 1;
   1153e:	1c75      	adds	r5, r6, #1
	/* initialise rx and tx queue counts */

	/* additional for pdu to NACK or receive empty PDU,
	 * 1 scan resp and 1* ctrl event.
	 */
	rx_count_max += 3;
   11540:	1cd9      	adds	r1, r3, #3
	 /* additional pdu to send enc_req ctrl pdu */
	tx_count_max += 1;
   11542:	b2ed      	uxtb	r5, r5
	_radio.packet_rx_count = (rx_count_max + 1);
   11544:	3304      	adds	r3, #4
	/* additional for pdu to NACK or receive empty PDU,
	 * 1 scan resp and 1* ctrl event.
	 */
	rx_count_max += 3;
	 /* additional pdu to send enc_req ctrl pdu */
	tx_count_max += 1;
   11546:	9504      	str	r5, [sp, #16]
	_radio.packet_rx_count = (rx_count_max + 1);
   11548:	b2dd      	uxtb	r5, r3
   1154a:	239e      	movs	r3, #158	; 0x9e
	_radio.packet_tx_count = (tx_count_max + 1);
   1154c:	3602      	adds	r6, #2
	 * 1 scan resp and 1* ctrl event.
	 */
	rx_count_max += 3;
	 /* additional pdu to send enc_req ctrl pdu */
	tx_count_max += 1;
	_radio.packet_rx_count = (rx_count_max + 1);
   1154e:	005b      	lsls	r3, r3, #1
   11550:	54d5      	strb	r5, [r2, r3]
	_radio.packet_tx_count = (tx_count_max + 1);
   11552:	b2f6      	uxtb	r6, r6
   11554:	3334      	adds	r3, #52	; 0x34
   11556:	54d6      	strb	r6, [r2, r3]
	/* initialise rx and tx queue counts */

	/* additional for pdu to NACK or receive empty PDU,
	 * 1 scan resp and 1* ctrl event.
	 */
	rx_count_max += 3;
   11558:	b2c9      	uxtb	r1, r1
	 /* additional pdu to send enc_req ctrl pdu */
	tx_count_max += 1;
	_radio.packet_rx_count = (rx_count_max + 1);
	_radio.packet_tx_count = (tx_count_max + 1);
	_radio.link_rx_data_quota = rx_count_max;
   1155a:	3b20      	subs	r3, #32
   1155c:	54d1      	strb	r1, [r2, r3]

	/* initialise rx queue memory */
	_radio.packet_rx = (void *)mem_radio;
	mem_radio +=
   1155e:	00ab      	lsls	r3, r5, #2
   11560:	18e3      	adds	r3, r4, r3
	    (sizeof(struct radio_pdu_node_rx *)*_radio.packet_rx_count);

	/* initialise tx queue memory */
	_radio.pkt_tx = (void *)mem_radio;
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
   11562:	00f6      	lsls	r6, r6, #3
	_radio.packet_rx_count = (rx_count_max + 1);
	_radio.packet_tx_count = (tx_count_max + 1);
	_radio.link_rx_data_quota = rx_count_max;

	/* initialise rx queue memory */
	_radio.packet_rx = (void *)mem_radio;
   11564:	63c4      	str	r4, [r0, #60]	; 0x3c
	mem_radio +=
	    (sizeof(struct radio_pdu_node_rx *)*_radio.packet_rx_count);

	/* initialise tx queue memory */
	_radio.pkt_tx = (void *)mem_radio;
   11566:	66c3      	str	r3, [r0, #108]	; 0x6c
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
   11568:	199c      	adds	r4, r3, r6
	/* initialise tx release queue memory */
	_radio.pkt_release = (void *)mem_radio;
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);

	/* initialise rx memory size and count */
	_radio.packet_data_octets_max = packet_data_octets_max;
   1156a:	32fe      	adds	r2, #254	; 0xfe
	if ((PDU_AC_SIZE_MAX + 1) <
   1156c:	1cfb      	adds	r3, r7, #3
	/* initialise tx queue memory */
	_radio.pkt_tx = (void *)mem_radio;
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);

	/* initialise tx release queue memory */
	_radio.pkt_release = (void *)mem_radio;
   1156e:	6704      	str	r4, [r0, #112]	; 0x70
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);

	/* initialise rx memory size and count */
	_radio.packet_data_octets_max = packet_data_octets_max;
   11570:	8657      	strh	r7, [r2, #50]	; 0x32
	_radio.pkt_tx = (void *)mem_radio;
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);

	/* initialise tx release queue memory */
	_radio.pkt_release = (void *)mem_radio;
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
   11572:	19a4      	adds	r4, r4, r6

	/* initialise rx memory size and count */
	_radio.packet_data_octets_max = packet_data_octets_max;
	if ((PDU_AC_SIZE_MAX + 1) <
   11574:	2b28      	cmp	r3, #40	; 0x28
   11576:	d903      	bls.n	11580 <radio_init+0x84>
	    (offsetof(struct pdu_data, payload) +
			_radio.packet_data_octets_max)) {
		_radio.packet_rx_data_pool_size =
   11578:	2303      	movs	r3, #3
   1157a:	370e      	adds	r7, #14
   1157c:	439f      	bics	r7, r3
   1157e:	e000      	b.n	11582 <radio_init+0x86>
		    (MROUND(offsetof(struct radio_pdu_node_rx, pdu_data) +
			    offsetof(struct pdu_data, payload) +
			    _radio.packet_data_octets_max) * rx_count_max);
	} else {
		_radio.packet_rx_data_pool_size =
   11580:	2730      	movs	r7, #48	; 0x30
			(MROUND(offsetof(struct radio_pdu_node_rx, pdu_data) +
			  (PDU_AC_SIZE_MAX + 1)) * rx_count_max);
	}
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   11582:	4e1a      	ldr	r6, [pc, #104]	; (115ec <radio_init+0xf0>)
		_radio.packet_rx_data_pool_size =
		    (MROUND(offsetof(struct radio_pdu_node_rx, pdu_data) +
			    offsetof(struct pdu_data, payload) +
			    _radio.packet_data_octets_max) * rx_count_max);
	} else {
		_radio.packet_rx_data_pool_size =
   11584:	4379      	muls	r1, r7
			(MROUND(offsetof(struct radio_pdu_node_rx, pdu_data) +
			  (PDU_AC_SIZE_MAX + 1)) * rx_count_max);
	}
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   11586:	0033      	movs	r3, r6
		_radio.packet_rx_data_pool_size =
		    (MROUND(offsetof(struct radio_pdu_node_rx, pdu_data) +
			    offsetof(struct pdu_data, payload) +
			    _radio.packet_data_octets_max) * rx_count_max);
	} else {
		_radio.packet_rx_data_pool_size =
   11588:	8691      	strh	r1, [r2, #52]	; 0x34
			(MROUND(offsetof(struct radio_pdu_node_rx, pdu_data) +
			  (PDU_AC_SIZE_MAX + 1)) * rx_count_max);
	}
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   1158a:	2130      	movs	r1, #48	; 0x30
   1158c:	33fe      	adds	r3, #254	; 0xfe
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   1158e:	8e9f      	ldrh	r7, [r3, #52]	; 0x34
	} else {
		_radio.packet_rx_data_pool_size =
			(MROUND(offsetof(struct radio_pdu_node_rx, pdu_data) +
			  (PDU_AC_SIZE_MAX + 1)) * rx_count_max);
	}
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   11590:	86d9      	strh	r1, [r3, #54]	; 0x36
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   11592:	0038      	movs	r0, r7
   11594:	f7ee fe04 	bl	1a0 <__aeabi_uidiv>
   11598:	239b      	movs	r3, #155	; 0x9b
				       _radio.packet_rx_data_size);

	/* initialise rx data pool memory */
	_radio.pkt_rx_data_pool = mem_radio;
   1159a:	0032      	movs	r2, r6
		_radio.packet_rx_data_pool_size =
			(MROUND(offsetof(struct radio_pdu_node_rx, pdu_data) +
			  (PDU_AC_SIZE_MAX + 1)) * rx_count_max);
	}
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   1159c:	005b      	lsls	r3, r3, #1
   1159e:	54f0      	strb	r0, [r6, r3]
	_radio.pkt_rx_data_pool = mem_radio;
	mem_radio += _radio.packet_rx_data_pool_size;

	/* initialise rx link pool memory */
	_radio.link_rx_pool = mem_radio;
	mem_radio += (sizeof(void *) * 2 * (_radio.packet_rx_count +
   115a0:	9b01      	ldr	r3, [sp, #4]
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
				       _radio.packet_rx_data_size);

	/* initialise rx data pool memory */
	_radio.pkt_rx_data_pool = mem_radio;
   115a2:	32fc      	adds	r2, #252	; 0xfc
	mem_radio += _radio.packet_rx_data_pool_size;

	/* initialise rx link pool memory */
	_radio.link_rx_pool = mem_radio;
	mem_radio += (sizeof(void *) * 2 * (_radio.packet_rx_count +
   115a4:	18ed      	adds	r5, r5, r3
	/* initialise tx ctrl pool memory */
	_radio.pkt_tx_ctrl_pool = mem_radio;
	mem_radio += PACKET_TX_CTRL_SIZE_MIN * PACKET_MEM_COUNT_TX_CTRL;

	/* initialise tx data memory size and count */
	_radio.packet_tx_data_size =
   115a6:	2303      	movs	r3, #3
	_radio.pkt_rx_data_pool = mem_radio;
	mem_radio += _radio.packet_rx_data_pool_size;

	/* initialise rx link pool memory */
	_radio.link_rx_pool = mem_radio;
	mem_radio += (sizeof(void *) * 2 * (_radio.packet_rx_count +
   115a8:	00ed      	lsls	r5, r5, #3
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
				       _radio.packet_rx_data_size);

	/* initialise rx data pool memory */
	_radio.pkt_rx_data_pool = mem_radio;
   115aa:	62d4      	str	r4, [r2, #44]	; 0x2c
	mem_radio += _radio.packet_rx_data_pool_size;
   115ac:	19e4      	adds	r4, r4, r7

	/* initialise rx link pool memory */
	_radio.link_rx_pool = mem_radio;
   115ae:	6454      	str	r4, [r2, #68]	; 0x44
	mem_radio += (sizeof(void *) * 2 * (_radio.packet_rx_count +
   115b0:	1964      	adds	r4, r4, r5
	/* initialise tx ctrl pool memory */
	_radio.pkt_tx_ctrl_pool = mem_radio;
	mem_radio += PACKET_TX_CTRL_SIZE_MIN * PACKET_MEM_COUNT_TX_CTRL;

	/* initialise tx data memory size and count */
	_radio.packet_tx_data_size =
   115b2:	9d05      	ldr	r5, [sp, #20]
	_radio.link_rx_pool = mem_radio;
	mem_radio += (sizeof(void *) * 2 * (_radio.packet_rx_count +
					    _radio.connection_count));

	/* initialise tx ctrl pool memory */
	_radio.pkt_tx_ctrl_pool = mem_radio;
   115b4:	6594      	str	r4, [r2, #88]	; 0x58
	mem_radio += PACKET_TX_CTRL_SIZE_MIN * PACKET_MEM_COUNT_TX_CTRL;

	/* initialise tx data memory size and count */
	_radio.packet_tx_data_size =
   115b6:	350a      	adds	r5, #10
   115b8:	439d      	bics	r5, r3
   115ba:	3362      	adds	r3, #98	; 0x62
   115bc:	b2ad      	uxth	r5, r5
   115be:	33ff      	adds	r3, #255	; 0xff
   115c0:	52f5      	strh	r5, [r6, r3]
	mem_radio += (_radio.packet_tx_data_size * tx_count_max);

	/* check for sufficient memory allocation for stack
	 * configuration.
	 */
	retcode = (mem_radio - mem_radio_end);
   115c2:	9b04      	ldr	r3, [sp, #16]
	mem_radio += (sizeof(void *) * 2 * (_radio.packet_rx_count +
					    _radio.connection_count));

	/* initialise tx ctrl pool memory */
	_radio.pkt_tx_ctrl_pool = mem_radio;
	mem_radio += PACKET_TX_CTRL_SIZE_MIN * PACKET_MEM_COUNT_TX_CTRL;
   115c4:	3448      	adds	r4, #72	; 0x48
	mem_radio += (_radio.packet_tx_data_size * tx_count_max);

	/* check for sufficient memory allocation for stack
	 * configuration.
	 */
	retcode = (mem_radio - mem_radio_end);
   115c6:	436b      	muls	r3, r5
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
		       offsetof(struct pdu_data, payload) +
		       packet_tx_data_size);

	/* initialise tx data pool memory */
	_radio.pkt_tx_data_pool = mem_radio;
   115c8:	6614      	str	r4, [r2, #96]	; 0x60
	mem_radio += (_radio.packet_tx_data_size * tx_count_max);

	/* check for sufficient memory allocation for stack
	 * configuration.
	 */
	retcode = (mem_radio - mem_radio_end);
   115ca:	18e4      	adds	r4, r4, r3
   115cc:	9b03      	ldr	r3, [sp, #12]
   115ce:	1ae4      	subs	r4, r4, r3
	if (retcode) {
   115d0:	d002      	beq.n	115d8 <radio_init+0xdc>
		return (retcode + mem_size);
   115d2:	9b02      	ldr	r3, [sp, #8]
   115d4:	1918      	adds	r0, r3, r4
   115d6:	e006      	b.n	115e6 <radio_init+0xea>
	 * This is a simple flow control to rx data only on one selected
	 * connection handle.
	 * TODO: replace this feature with host-to-controller flowcontrol
	 * implementation/design.
	 */
	_radio.fc_ena = 1;
   115d8:	23bf      	movs	r3, #191	; 0xbf
   115da:	2201      	movs	r2, #1
   115dc:	005b      	lsls	r3, r3, #1
   115de:	54f2      	strb	r2, [r6, r3]

	/* memory allocations */
	common_init();
   115e0:	f7fa fe4a 	bl	c278 <common_init>
#if defined(RADIO_UNIT_TEST) && \
	defined(CONFIG_BLUETOOTH_CONTROLLER_CHAN_SEL_2)
	chan_sel_2_ut();
#endif /* RADIO_UNIT_TEST && CONFIG_BLUETOOTH_CONTROLLER_CHAN_SEL_2 */

	return retcode;
   115e4:	0020      	movs	r0, r4
}
   115e6:	b007      	add	sp, #28
   115e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   115ea:	46c0      	nop			; (mov r8, r8)
   115ec:	200015c0 	.word	0x200015c0

000115f0 <ll_reset>:

void ll_reset(void)
{
   115f0:	b570      	push	{r4, r5, r6, lr}
	u16_t conn_handle;

	/* disable advertiser events */
	role_disable(RADIO_TICKER_ID_ADV, RADIO_TICKER_ID_ADV_STOP);
   115f2:	2103      	movs	r1, #3
   115f4:	2005      	movs	r0, #5
   115f6:	f7fa ff2d 	bl	c454 <role_disable>

	/* disable oberver events */
	role_disable(RADIO_TICKER_ID_SCAN, RADIO_TICKER_ID_SCAN_STOP);
   115fa:	2104      	movs	r1, #4
   115fc:	2006      	movs	r0, #6
   115fe:	f7fa ff29 	bl	c454 <role_disable>

	/* disable connection events */
	for (conn_handle = 0; conn_handle < _radio.connection_count;
   11602:	4c22      	ldr	r4, [pc, #136]	; (1168c <ll_reset+0x9c>)
   11604:	2500      	movs	r5, #0
   11606:	0026      	movs	r6, r4
   11608:	36ff      	adds	r6, #255	; 0xff
   1160a:	7b73      	ldrb	r3, [r6, #13]
   1160c:	42ab      	cmp	r3, r5
   1160e:	d907      	bls.n	11620 <ll_reset+0x30>
	     conn_handle++) {
		role_disable(RADIO_TICKER_ID_FIRST_CONNECTION + conn_handle,
   11610:	1de8      	adds	r0, r5, #7
   11612:	b2c0      	uxtb	r0, r0
   11614:	21ff      	movs	r1, #255	; 0xff
	/* disable oberver events */
	role_disable(RADIO_TICKER_ID_SCAN, RADIO_TICKER_ID_SCAN_STOP);

	/* disable connection events */
	for (conn_handle = 0; conn_handle < _radio.connection_count;
	     conn_handle++) {
   11616:	3501      	adds	r5, #1
		role_disable(RADIO_TICKER_ID_FIRST_CONNECTION + conn_handle,
   11618:	f7fa ff1c 	bl	c454 <role_disable>
	/* disable oberver events */
	role_disable(RADIO_TICKER_ID_SCAN, RADIO_TICKER_ID_SCAN_STOP);

	/* disable connection events */
	for (conn_handle = 0; conn_handle < _radio.connection_count;
	     conn_handle++) {
   1161c:	b2ad      	uxth	r5, r5
   1161e:	e7f4      	b.n	1160a <ll_reset+0x1a>
		role_disable(RADIO_TICKER_ID_FIRST_CONNECTION + conn_handle,
			     TICKER_NULL);
	}

	/* reset controller context members */
	_radio.advertiser.is_enabled = 0;
   11620:	2101      	movs	r1, #1
   11622:	1d62      	adds	r2, r4, #5
   11624:	7fd3      	ldrb	r3, [r2, #31]
	_radio.advertiser.conn = NULL;
   11626:	2500      	movs	r5, #0
		role_disable(RADIO_TICKER_ID_FIRST_CONNECTION + conn_handle,
			     TICKER_NULL);
	}

	/* reset controller context members */
	_radio.advertiser.is_enabled = 0;
   11628:	438b      	bics	r3, r1
   1162a:	77d3      	strb	r3, [r2, #31]
	_radio.advertiser.conn = NULL;
   1162c:	0023      	movs	r3, r4
	_radio.scanner.is_enabled = 0;
   1162e:	0022      	movs	r2, r4
			     TICKER_NULL);
	}

	/* reset controller context members */
	_radio.advertiser.is_enabled = 0;
	_radio.advertiser.conn = NULL;
   11630:	33c8      	adds	r3, #200	; 0xc8
	_radio.scanner.is_enabled = 0;
   11632:	32dc      	adds	r2, #220	; 0xdc
			     TICKER_NULL);
	}

	/* reset controller context members */
	_radio.advertiser.is_enabled = 0;
	_radio.advertiser.conn = NULL;
   11634:	601d      	str	r5, [r3, #0]
	_radio.scanner.is_enabled = 0;
   11636:	7813      	ldrb	r3, [r2, #0]
   11638:	438b      	bics	r3, r1
   1163a:	7013      	strb	r3, [r2, #0]
	_radio.scanner.conn = NULL;
   1163c:	0023      	movs	r3, r4
   1163e:	33fc      	adds	r3, #252	; 0xfc
   11640:	601d      	str	r5, [r3, #0]
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   11642:	0023      	movs	r3, r4
   11644:	312f      	adds	r1, #47	; 0x2f
   11646:	33fe      	adds	r3, #254	; 0xfe
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   11648:	8e98      	ldrh	r0, [r3, #52]	; 0x34
	/* reset controller context members */
	_radio.advertiser.is_enabled = 0;
	_radio.advertiser.conn = NULL;
	_radio.scanner.is_enabled = 0;
	_radio.scanner.conn = NULL;
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   1164a:	86d9      	strh	r1, [r3, #54]	; 0x36
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   1164c:	f7ee fda8 	bl	1a0 <__aeabi_uidiv>
   11650:	239b      	movs	r3, #155	; 0x9b
   11652:	005b      	lsls	r3, r3, #1
   11654:	54e0      	strb	r0, [r4, r3]
				       _radio.packet_rx_data_size);
	_radio.packet_rx_last = 0;
   11656:	233e      	movs	r3, #62	; 0x3e
	_radio.packet_rx_acquire = 0;
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
   11658:	22a8      	movs	r2, #168	; 0xa8
	_radio.scanner.is_enabled = 0;
	_radio.scanner.conn = NULL;
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
				       _radio.packet_rx_data_size);
	_radio.packet_rx_last = 0;
   1165a:	33ff      	adds	r3, #255	; 0xff
   1165c:	54e5      	strb	r5, [r4, r3]
	_radio.packet_rx_acquire = 0;
   1165e:	3301      	adds	r3, #1
   11660:	54e5      	strb	r5, [r4, r3]
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
   11662:	3b02      	subs	r3, #2
   11664:	5ce3      	ldrb	r3, [r4, r3]
   11666:	0052      	lsls	r2, r2, #1
   11668:	3b01      	subs	r3, #1
   1166a:	54a3      	strb	r3, [r4, r2]
	_radio.packet_tx_first = 0;
   1166c:	2372      	movs	r3, #114	; 0x72
   1166e:	33ff      	adds	r3, #255	; 0xff
   11670:	54e5      	strb	r5, [r4, r3]
	_radio.packet_tx_last = 0;
   11672:	3301      	adds	r3, #1
   11674:	54e5      	strb	r5, [r4, r3]
	_radio.packet_release_first = 0;
   11676:	2374      	movs	r3, #116	; 0x74
   11678:	33ff      	adds	r3, #255	; 0xff
   1167a:	54e5      	strb	r5, [r4, r3]
	_radio.packet_release_last = 0;

	/* reset whitelist and resolving list */
	ll_filter_reset(false);
   1167c:	0028      	movs	r0, r5
	_radio.packet_rx_acquire = 0;
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
	_radio.packet_tx_first = 0;
	_radio.packet_tx_last = 0;
	_radio.packet_release_first = 0;
	_radio.packet_release_last = 0;
   1167e:	3301      	adds	r3, #1
   11680:	54e5      	strb	r5, [r4, r3]

	/* reset whitelist and resolving list */
	ll_filter_reset(false);
   11682:	f001 fc9b 	bl	12fbc <ll_filter_reset>
	/* memory allocations */
	common_init();
   11686:	f7fa fdf7 	bl	c278 <common_init>
}
   1168a:	bd70      	pop	{r4, r5, r6, pc}
   1168c:	200015c0 	.word	0x200015c0

00011690 <radio_adv_data_get>:
	_radio.ticks_active_to_start = ticks_active_to_start;
}

struct radio_adv_data *radio_adv_data_get(void)
{
	return &_radio.advertiser.adv_data;
   11690:	4801      	ldr	r0, [pc, #4]	; (11698 <radio_adv_data_get+0x8>)
}
   11692:	3027      	adds	r0, #39	; 0x27
   11694:	4770      	bx	lr
   11696:	46c0      	nop			; (mov r8, r8)
   11698:	200015c0 	.word	0x200015c0

0001169c <radio_scan_data_get>:

struct radio_adv_data *radio_scan_data_get(void)
{
	return &_radio.advertiser.scan_data;
   1169c:	4801      	ldr	r0, [pc, #4]	; (116a4 <radio_scan_data_get+0x8>)
}
   1169e:	3077      	adds	r0, #119	; 0x77
   116a0:	4770      	bx	lr
   116a2:	46c0      	nop			; (mov r8, r8)
   116a4:	200015c0 	.word	0x200015c0

000116a8 <radio_adv_is_enabled>:
	return status ? BT_HCI_ERR_CMD_DISALLOWED : 0;
}

u32_t radio_adv_is_enabled(void)
{
	return _radio.advertiser.is_enabled;
   116a8:	4b03      	ldr	r3, [pc, #12]	; (116b8 <radio_adv_is_enabled+0x10>)
   116aa:	3305      	adds	r3, #5
   116ac:	7fd8      	ldrb	r0, [r3, #31]
   116ae:	07c0      	lsls	r0, r0, #31
   116b0:	0fc0      	lsrs	r0, r0, #31
   116b2:	b2c0      	uxtb	r0, r0
}
   116b4:	4770      	bx	lr
   116b6:	46c0      	nop			; (mov r8, r8)
   116b8:	200015c0 	.word	0x200015c0

000116bc <radio_adv_filter_pol_get>:
	/* NOTE: filter_policy is only written in thread mode; if is_enabled is
	 * unset by ISR, returning the stale filter_policy is acceptable because
	 * the unset code path in ISR will generate a connection complete
	 * event.
	 */
	if (_radio.advertiser.is_enabled) {
   116bc:	4b04      	ldr	r3, [pc, #16]	; (116d0 <radio_adv_filter_pol_get+0x14>)
		return _radio.advertiser.filter_policy;
	}

	return 0;
   116be:	2000      	movs	r0, #0
	/* NOTE: filter_policy is only written in thread mode; if is_enabled is
	 * unset by ISR, returning the stale filter_policy is acceptable because
	 * the unset code path in ISR will generate a connection complete
	 * event.
	 */
	if (_radio.advertiser.is_enabled) {
   116c0:	1d5a      	adds	r2, r3, #5
   116c2:	7fd2      	ldrb	r2, [r2, #31]
   116c4:	07d2      	lsls	r2, r2, #31
   116c6:	d502      	bpl.n	116ce <radio_adv_filter_pol_get+0x12>
		return _radio.advertiser.filter_policy;
   116c8:	3306      	adds	r3, #6
   116ca:	7fd8      	ldrb	r0, [r3, #31]
   116cc:	0980      	lsrs	r0, r0, #6
	}

	return 0;
}
   116ce:	4770      	bx	lr
   116d0:	200015c0 	.word	0x200015c0

000116d4 <radio_scan_is_enabled>:
	return status ? BT_HCI_ERR_CMD_DISALLOWED : 0;
}

u32_t radio_scan_is_enabled(void)
{
	return _radio.scanner.is_enabled;
   116d4:	4b03      	ldr	r3, [pc, #12]	; (116e4 <radio_scan_is_enabled+0x10>)
   116d6:	33dc      	adds	r3, #220	; 0xdc
   116d8:	7818      	ldrb	r0, [r3, #0]
   116da:	07c0      	lsls	r0, r0, #31
   116dc:	0fc0      	lsrs	r0, r0, #31
   116de:	b2c0      	uxtb	r0, r0
}
   116e0:	4770      	bx	lr
   116e2:	46c0      	nop			; (mov r8, r8)
   116e4:	200015c0 	.word	0x200015c0

000116e8 <radio_scan_filter_pol_get>:
	/* NOTE: filter_policy is only written in thread mode; if is_enabled is
	 * unset by ISR, returning the stale filter_policy is acceptable because
	 * the unset code path in ISR will generate a connection complete
	 * event.
	 */
	if (_radio.scanner.is_enabled) {
   116e8:	4b05      	ldr	r3, [pc, #20]	; (11700 <radio_scan_filter_pol_get+0x18>)
		return _radio.scanner.filter_policy;
	}

	return 0;
   116ea:	2000      	movs	r0, #0
	/* NOTE: filter_policy is only written in thread mode; if is_enabled is
	 * unset by ISR, returning the stale filter_policy is acceptable because
	 * the unset code path in ISR will generate a connection complete
	 * event.
	 */
	if (_radio.scanner.is_enabled) {
   116ec:	001a      	movs	r2, r3
   116ee:	32dc      	adds	r2, #220	; 0xdc
   116f0:	7812      	ldrb	r2, [r2, #0]
   116f2:	07d2      	lsls	r2, r2, #31
   116f4:	d503      	bpl.n	116fe <radio_scan_filter_pol_get+0x16>
		return _radio.scanner.filter_policy;
   116f6:	33dd      	adds	r3, #221	; 0xdd
   116f8:	7818      	ldrb	r0, [r3, #0]
   116fa:	0680      	lsls	r0, r0, #26
   116fc:	0f80      	lsrs	r0, r0, #30
	}

	return 0;
}
   116fe:	4770      	bx	lr
   11700:	200015c0 	.word	0x200015c0

00011704 <ll_conn_update>:
	return status;
}

u32_t ll_conn_update(u16_t handle, u8_t cmd, u8_t status, u16_t interval,
		     u16_t latency, u16_t timeout)
{
   11704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11706:	001f      	movs	r7, r3
   11708:	ab06      	add	r3, sp, #24
   1170a:	881e      	ldrh	r6, [r3, #0]
   1170c:	ab07      	add	r3, sp, #28
   1170e:	881d      	ldrh	r5, [r3, #0]
   11710:	000c      	movs	r4, r1
	struct connection *conn;

	ARG_UNUSED(status);

	conn = connection_get(handle);
   11712:	f7fa fe87 	bl	c424 <connection_get>
   11716:	0003      	movs	r3, r0
		if ((conn) && (conn->llcp_type == LLCP_CONNECTION_UPDATE)) {
			/* controller busy (mockup requirement) */
			return 2;
		}

		return 1;
   11718:	2001      	movs	r0, #1
	struct connection *conn;

	ARG_UNUSED(status);

	conn = connection_get(handle);
	if ((!conn) ||
   1171a:	2b00      	cmp	r3, #0
   1171c:	d03b      	beq.n	11796 <ll_conn_update+0x92>
	    ((conn->llcp_req != conn->llcp_ack) &&
   1171e:	001a      	movs	r2, r3
   11720:	0019      	movs	r1, r3
   11722:	3268      	adds	r2, #104	; 0x68
   11724:	3169      	adds	r1, #105	; 0x69
   11726:	7812      	ldrb	r2, [r2, #0]
	struct connection *conn;

	ARG_UNUSED(status);

	conn = connection_get(handle);
	if ((!conn) ||
   11728:	7809      	ldrb	r1, [r1, #0]
   1172a:	4291      	cmp	r1, r2
   1172c:	d00c      	beq.n	11748 <ll_conn_update+0x44>
	    ((conn->llcp_req != conn->llcp_ack) &&
	     ((conn->llcp_type != LLCP_CONNECTION_UPDATE) ||
   1172e:	0019      	movs	r1, r3
   11730:	316a      	adds	r1, #106	; 0x6a

	ARG_UNUSED(status);

	conn = connection_get(handle);
	if ((!conn) ||
	    ((conn->llcp_req != conn->llcp_ack) &&
   11732:	7809      	ldrb	r1, [r1, #0]
   11734:	4281      	cmp	r1, r0
   11736:	d12e      	bne.n	11796 <ll_conn_update+0x92>
	     ((conn->llcp_type != LLCP_CONNECTION_UPDATE) ||
	      (conn->llcp.connection_update.state !=
   11738:	0019      	movs	r1, r3
   1173a:	3195      	adds	r1, #149	; 0x95
	ARG_UNUSED(status);

	conn = connection_get(handle);
	if ((!conn) ||
	    ((conn->llcp_req != conn->llcp_ack) &&
	     ((conn->llcp_type != LLCP_CONNECTION_UPDATE) ||
   1173c:	7808      	ldrb	r0, [r1, #0]
   1173e:	2107      	movs	r1, #7
   11740:	4001      	ands	r1, r0
	      (conn->llcp.connection_update.state !=
	       LLCP_CONN_STATE_APP_WAIT)))) {
		if ((conn) && (conn->llcp_type == LLCP_CONNECTION_UPDATE)) {
			/* controller busy (mockup requirement) */
			return 2;
   11742:	2002      	movs	r0, #2
	ARG_UNUSED(status);

	conn = connection_get(handle);
	if ((!conn) ||
	    ((conn->llcp_req != conn->llcp_ack) &&
	     ((conn->llcp_type != LLCP_CONNECTION_UPDATE) ||
   11744:	2904      	cmp	r1, #4
   11746:	d126      	bne.n	11796 <ll_conn_update+0x92>
		}

		return 1;
	}

	conn->llcp.connection_update.win_size = 1;
   11748:	0018      	movs	r0, r3
   1174a:	2101      	movs	r1, #1
   1174c:	3094      	adds	r0, #148	; 0x94
   1174e:	7001      	strb	r1, [r0, #0]
	conn->llcp.connection_update.win_offset_us = 0;
   11750:	208c      	movs	r0, #140	; 0x8c
   11752:	4684      	mov	ip, r0
   11754:	449c      	add	ip, r3
   11756:	4661      	mov	r1, ip
   11758:	2000      	movs	r0, #0
   1175a:	6008      	str	r0, [r1, #0]
	conn->llcp.connection_update.interval = interval;
   1175c:	216c      	movs	r1, #108	; 0x6c
   1175e:	468c      	mov	ip, r1
   11760:	449c      	add	ip, r3
   11762:	4661      	mov	r1, ip
   11764:	800f      	strh	r7, [r1, #0]
	conn->llcp.connection_update.latency = latency;
   11766:	001f      	movs	r7, r3
   11768:	376e      	adds	r7, #110	; 0x6e
   1176a:	803e      	strh	r6, [r7, #0]
	conn->llcp.connection_update.timeout = timeout;
   1176c:	001e      	movs	r6, r3
	/* conn->llcp.connection_update.instant     = 0; */
	conn->llcp.connection_update.state = cmd + 1;
   1176e:	2707      	movs	r7, #7
   11770:	3401      	adds	r4, #1

	conn->llcp.connection_update.win_size = 1;
	conn->llcp.connection_update.win_offset_us = 0;
	conn->llcp.connection_update.interval = interval;
	conn->llcp.connection_update.latency = latency;
	conn->llcp.connection_update.timeout = timeout;
   11772:	3670      	adds	r6, #112	; 0x70
	/* conn->llcp.connection_update.instant     = 0; */
	conn->llcp.connection_update.state = cmd + 1;
   11774:	403c      	ands	r4, r7

	conn->llcp.connection_update.win_size = 1;
	conn->llcp.connection_update.win_offset_us = 0;
	conn->llcp.connection_update.interval = interval;
	conn->llcp.connection_update.latency = latency;
	conn->llcp.connection_update.timeout = timeout;
   11776:	8035      	strh	r5, [r6, #0]
	/* conn->llcp.connection_update.instant     = 0; */
	conn->llcp.connection_update.state = cmd + 1;
   11778:	0025      	movs	r5, r4
   1177a:	3625      	adds	r6, #37	; 0x25
   1177c:	7834      	ldrb	r4, [r6, #0]
	conn->llcp.connection_update.is_internal = 0;

	conn->llcp_type = LLCP_CONNECTION_UPDATE;
   1177e:	2101      	movs	r1, #1
	conn->llcp.connection_update.win_offset_us = 0;
	conn->llcp.connection_update.interval = interval;
	conn->llcp.connection_update.latency = latency;
	conn->llcp.connection_update.timeout = timeout;
	/* conn->llcp.connection_update.instant     = 0; */
	conn->llcp.connection_update.state = cmd + 1;
   11780:	43bc      	bics	r4, r7
	conn->llcp.connection_update.is_internal = 0;
   11782:	432c      	orrs	r4, r5
   11784:	2518      	movs	r5, #24
   11786:	43ac      	bics	r4, r5
   11788:	7034      	strb	r4, [r6, #0]

	conn->llcp_type = LLCP_CONNECTION_UPDATE;
   1178a:	001c      	movs	r4, r3
	conn->llcp_req++;
   1178c:	3201      	adds	r2, #1
	conn->llcp.connection_update.timeout = timeout;
	/* conn->llcp.connection_update.instant     = 0; */
	conn->llcp.connection_update.state = cmd + 1;
	conn->llcp.connection_update.is_internal = 0;

	conn->llcp_type = LLCP_CONNECTION_UPDATE;
   1178e:	346a      	adds	r4, #106	; 0x6a
	conn->llcp_req++;
   11790:	3368      	adds	r3, #104	; 0x68
	conn->llcp.connection_update.timeout = timeout;
	/* conn->llcp.connection_update.instant     = 0; */
	conn->llcp.connection_update.state = cmd + 1;
	conn->llcp.connection_update.is_internal = 0;

	conn->llcp_type = LLCP_CONNECTION_UPDATE;
   11792:	7021      	strb	r1, [r4, #0]
	conn->llcp_req++;
   11794:	701a      	strb	r2, [r3, #0]

	return 0;
}
   11796:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00011798 <ll_start_enc_req_send>:
	return 1;
}

u32_t ll_start_enc_req_send(u16_t handle, u8_t error_code,
			    u8_t const *const ltk)
{
   11798:	b570      	push	{r4, r5, r6, lr}
   1179a:	000d      	movs	r5, r1
   1179c:	0016      	movs	r6, r2
	struct connection *conn;

	conn = connection_get(handle);
   1179e:	f7fa fe41 	bl	c424 <connection_get>
   117a2:	1e04      	subs	r4, r0, #0
	if (!conn) {
   117a4:	d101      	bne.n	117aa <ll_start_enc_req_send+0x12>
		return 1;
   117a6:	2001      	movs	r0, #1
   117a8:	e03c      	b.n	11824 <ll_start_enc_req_send+0x8c>
	}

	if (error_code) {
   117aa:	2d00      	cmp	r5, #0
   117ac:	d024      	beq.n	117f8 <ll_start_enc_req_send+0x60>
		if (conn->refresh == 0) {
   117ae:	0003      	movs	r3, r0
   117b0:	33c0      	adds	r3, #192	; 0xc0
   117b2:	7818      	ldrb	r0, [r3, #0]
   117b4:	2340      	movs	r3, #64	; 0x40
   117b6:	4018      	ands	r0, r3
   117b8:	d110      	bne.n	117dc <ll_start_enc_req_send+0x44>
			if (conn->llcp_req != conn->llcp_ack) {
   117ba:	0022      	movs	r2, r4
   117bc:	0023      	movs	r3, r4
   117be:	3268      	adds	r2, #104	; 0x68
   117c0:	3369      	adds	r3, #105	; 0x69
   117c2:	7811      	ldrb	r1, [r2, #0]
   117c4:	781b      	ldrb	r3, [r3, #0]
   117c6:	428b      	cmp	r3, r1
   117c8:	d1ed      	bne.n	117a6 <ll_start_enc_req_send+0xe>
				return 1;
			}

			conn->llcp.encryption.error_code = error_code;
   117ca:	0021      	movs	r1, r4
   117cc:	316c      	adds	r1, #108	; 0x6c
   117ce:	700d      	strb	r5, [r1, #0]

			conn->llcp_type = LLCP_ENCRYPTION;
   117d0:	2103      	movs	r1, #3
   117d2:	346a      	adds	r4, #106	; 0x6a
			conn->llcp_req++;
   117d4:	3301      	adds	r3, #1
				return 1;
			}

			conn->llcp.encryption.error_code = error_code;

			conn->llcp_type = LLCP_ENCRYPTION;
   117d6:	7021      	strb	r1, [r4, #0]
			conn->llcp_req++;
   117d8:	7013      	strb	r3, [r2, #0]
   117da:	e023      	b.n	11824 <ll_start_enc_req_send+0x8c>
		} else {
			if (conn->llcp_terminate.ack !=
   117dc:	0023      	movs	r3, r4
			    conn->llcp_terminate.req) {
   117de:	0022      	movs	r2, r4
			conn->llcp.encryption.error_code = error_code;

			conn->llcp_type = LLCP_ENCRYPTION;
			conn->llcp_req++;
		} else {
			if (conn->llcp_terminate.ack !=
   117e0:	33a5      	adds	r3, #165	; 0xa5
			    conn->llcp_terminate.req) {
   117e2:	32a4      	adds	r2, #164	; 0xa4
			conn->llcp.encryption.error_code = error_code;

			conn->llcp_type = LLCP_ENCRYPTION;
			conn->llcp_req++;
		} else {
			if (conn->llcp_terminate.ack !=
   117e4:	7819      	ldrb	r1, [r3, #0]
   117e6:	7813      	ldrb	r3, [r2, #0]
   117e8:	428b      	cmp	r3, r1
   117ea:	d1dc      	bne.n	117a6 <ll_start_enc_req_send+0xe>
			    conn->llcp_terminate.req) {
				return 1;
			}

			conn->llcp_terminate.reason_own = error_code;
   117ec:	34a6      	adds	r4, #166	; 0xa6

			conn->llcp_terminate.req++;
   117ee:	3301      	adds	r3, #1
			if (conn->llcp_terminate.ack !=
			    conn->llcp_terminate.req) {
				return 1;
			}

			conn->llcp_terminate.reason_own = error_code;
   117f0:	7025      	strb	r5, [r4, #0]

		conn->llcp_type = LLCP_ENCRYPTION;
		conn->llcp_req++;
	}

	return 0;
   117f2:	2000      	movs	r0, #0
				return 1;
			}

			conn->llcp_terminate.reason_own = error_code;

			conn->llcp_terminate.req++;
   117f4:	7013      	strb	r3, [r2, #0]
   117f6:	e015      	b.n	11824 <ll_start_enc_req_send+0x8c>
		}
	} else {
		memcpy(&conn->llcp.encryption.ltk[0], ltk,
   117f8:	2210      	movs	r2, #16
   117fa:	0031      	movs	r1, r6
   117fc:	3077      	adds	r0, #119	; 0x77
   117fe:	f7ef fa9c 	bl	d3a <memcpy>
		       sizeof(conn->llcp.encryption.ltk));

		if (conn->llcp_req != conn->llcp_ack) {
   11802:	0022      	movs	r2, r4
   11804:	0023      	movs	r3, r4
   11806:	3268      	adds	r2, #104	; 0x68
   11808:	3369      	adds	r3, #105	; 0x69
   1180a:	7811      	ldrb	r1, [r2, #0]
   1180c:	781b      	ldrb	r3, [r3, #0]
   1180e:	428b      	cmp	r3, r1
   11810:	d1c9      	bne.n	117a6 <ll_start_enc_req_send+0xe>
			return 1;
		}

		conn->llcp.encryption.error_code = 0;
   11812:	0021      	movs	r1, r4
   11814:	316c      	adds	r1, #108	; 0x6c
   11816:	700d      	strb	r5, [r1, #0]

		conn->llcp_type = LLCP_ENCRYPTION;
   11818:	2103      	movs	r1, #3
		conn->llcp_req++;
	}

	return 0;
   1181a:	0028      	movs	r0, r5
			return 1;
		}

		conn->llcp.encryption.error_code = 0;

		conn->llcp_type = LLCP_ENCRYPTION;
   1181c:	346a      	adds	r4, #106	; 0x6a
		conn->llcp_req++;
   1181e:	3301      	adds	r3, #1
			return 1;
		}

		conn->llcp.encryption.error_code = 0;

		conn->llcp_type = LLCP_ENCRYPTION;
   11820:	7021      	strb	r1, [r4, #0]
		conn->llcp_req++;
   11822:	7013      	strb	r3, [r2, #0]
	}

	return 0;
}
   11824:	bd70      	pop	{r4, r5, r6, pc}

00011826 <ll_feature_req_send>:
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_ENC */

u32_t ll_feature_req_send(u16_t handle)
{
   11826:	b510      	push	{r4, lr}
	struct connection *conn;

	conn = connection_get(handle);
   11828:	f7fa fdfc 	bl	c424 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
		return 1;
   1182c:	2201      	movs	r2, #1
u32_t ll_feature_req_send(u16_t handle)
{
	struct connection *conn;

	conn = connection_get(handle);
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   1182e:	2800      	cmp	r0, #0
   11830:	d00d      	beq.n	1184e <ll_feature_req_send+0x28>
   11832:	0001      	movs	r1, r0
   11834:	0003      	movs	r3, r0
   11836:	3168      	adds	r1, #104	; 0x68
   11838:	3369      	adds	r3, #105	; 0x69
   1183a:	780c      	ldrb	r4, [r1, #0]
   1183c:	781b      	ldrb	r3, [r3, #0]
   1183e:	42a3      	cmp	r3, r4
   11840:	d105      	bne.n	1184e <ll_feature_req_send+0x28>
		return 1;
	}

	conn->llcp_type = LLCP_FEATURE_EXCHANGE;
   11842:	3203      	adds	r2, #3
   11844:	306a      	adds	r0, #106	; 0x6a
   11846:	7002      	strb	r2, [r0, #0]
	conn->llcp_req++;

	return 0;
   11848:	2200      	movs	r2, #0
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
		return 1;
	}

	conn->llcp_type = LLCP_FEATURE_EXCHANGE;
	conn->llcp_req++;
   1184a:	3301      	adds	r3, #1
   1184c:	700b      	strb	r3, [r1, #0]

	return 0;
}
   1184e:	0010      	movs	r0, r2
   11850:	bd10      	pop	{r4, pc}

00011852 <ll_version_ind_send>:

u32_t ll_version_ind_send(u16_t handle)
{
   11852:	b510      	push	{r4, lr}
	struct connection *conn;

	conn = connection_get(handle);
   11854:	f7fa fde6 	bl	c424 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
		return 1;
   11858:	2201      	movs	r2, #1
u32_t ll_version_ind_send(u16_t handle)
{
	struct connection *conn;

	conn = connection_get(handle);
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   1185a:	2800      	cmp	r0, #0
   1185c:	d00d      	beq.n	1187a <ll_version_ind_send+0x28>
   1185e:	0001      	movs	r1, r0
   11860:	0003      	movs	r3, r0
   11862:	3168      	adds	r1, #104	; 0x68
   11864:	3369      	adds	r3, #105	; 0x69
   11866:	780c      	ldrb	r4, [r1, #0]
   11868:	781b      	ldrb	r3, [r3, #0]
   1186a:	42a3      	cmp	r3, r4
   1186c:	d105      	bne.n	1187a <ll_version_ind_send+0x28>
		return 1;
	}

	conn->llcp_type = LLCP_VERSION_EXCHANGE;
   1186e:	3204      	adds	r2, #4
   11870:	306a      	adds	r0, #106	; 0x6a
   11872:	7002      	strb	r2, [r0, #0]
	conn->llcp_req++;

	return 0;
   11874:	2200      	movs	r2, #0
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
		return 1;
	}

	conn->llcp_type = LLCP_VERSION_EXCHANGE;
	conn->llcp_req++;
   11876:	3301      	adds	r3, #1
   11878:	700b      	strb	r3, [r1, #0]

	return 0;
}
   1187a:	0010      	movs	r0, r2
   1187c:	bd10      	pop	{r4, pc}

0001187e <ll_terminate_ind_send>:

u32_t ll_terminate_ind_send(u16_t handle, u8_t reason)
{
   1187e:	b570      	push	{r4, r5, r6, lr}
   11880:	000c      	movs	r4, r1
	struct connection *conn;

	conn = connection_get(handle);
   11882:	f7fa fdcf 	bl	c424 <connection_get>
	if (!conn || (conn->llcp_terminate.ack != conn->llcp_terminate.req)) {
		return 1;
   11886:	2201      	movs	r2, #1
u32_t ll_terminate_ind_send(u16_t handle, u8_t reason)
{
	struct connection *conn;

	conn = connection_get(handle);
	if (!conn || (conn->llcp_terminate.ack != conn->llcp_terminate.req)) {
   11888:	2800      	cmp	r0, #0
   1188a:	d00c      	beq.n	118a6 <ll_terminate_ind_send+0x28>
   1188c:	0003      	movs	r3, r0
   1188e:	0001      	movs	r1, r0
   11890:	33a5      	adds	r3, #165	; 0xa5
   11892:	31a4      	adds	r1, #164	; 0xa4
   11894:	781d      	ldrb	r5, [r3, #0]
   11896:	780b      	ldrb	r3, [r1, #0]
   11898:	42ab      	cmp	r3, r5
   1189a:	d104      	bne.n	118a6 <ll_terminate_ind_send+0x28>
		return 1;
	}

	conn->llcp_terminate.reason_own = reason;

	conn->llcp_terminate.req++;
   1189c:	189b      	adds	r3, r3, r2

	return 0;
   1189e:	2200      	movs	r2, #0
	conn = connection_get(handle);
	if (!conn || (conn->llcp_terminate.ack != conn->llcp_terminate.req)) {
		return 1;
	}

	conn->llcp_terminate.reason_own = reason;
   118a0:	30a6      	adds	r0, #166	; 0xa6
   118a2:	7004      	strb	r4, [r0, #0]

	conn->llcp_terminate.req++;
   118a4:	700b      	strb	r3, [r1, #0]

	return 0;
}
   118a6:	0010      	movs	r0, r2
   118a8:	bd70      	pop	{r4, r5, r6, pc}

000118aa <ll_length_req_send>:

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
u32_t ll_length_req_send(u16_t handle, u16_t tx_octets)
{
   118aa:	b570      	push	{r4, r5, r6, lr}
   118ac:	000c      	movs	r4, r1
	struct connection *conn;

	conn = connection_get(handle);
   118ae:	f7fa fdb9 	bl	c424 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
	    (conn->llcp_length.req != conn->llcp_length.ack)) {
		return 1;
   118b2:	2201      	movs	r2, #1
u32_t ll_length_req_send(u16_t handle, u16_t tx_octets)
{
	struct connection *conn;

	conn = connection_get(handle);
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   118b4:	2800      	cmp	r0, #0
   118b6:	d019      	beq.n	118ec <ll_length_req_send+0x42>
   118b8:	0003      	movs	r3, r0
   118ba:	3368      	adds	r3, #104	; 0x68
   118bc:	7819      	ldrb	r1, [r3, #0]
   118be:	189b      	adds	r3, r3, r2
   118c0:	781b      	ldrb	r3, [r3, #0]
   118c2:	4299      	cmp	r1, r3
   118c4:	d112      	bne.n	118ec <ll_length_req_send+0x42>
	    (conn->llcp_length.req != conn->llcp_length.ack)) {
   118c6:	0001      	movs	r1, r0
   118c8:	0003      	movs	r3, r0
   118ca:	31b4      	adds	r1, #180	; 0xb4
   118cc:	33b5      	adds	r3, #181	; 0xb5
   118ce:	780d      	ldrb	r5, [r1, #0]
u32_t ll_length_req_send(u16_t handle, u16_t tx_octets)
{
	struct connection *conn;

	conn = connection_get(handle);
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   118d0:	781b      	ldrb	r3, [r3, #0]
   118d2:	42ab      	cmp	r3, r5
   118d4:	d10a      	bne.n	118ec <ll_length_req_send+0x42>
		return 1;
	}

	/* TODO: parameter check tx_octets */

	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   118d6:	0005      	movs	r5, r0
   118d8:	2603      	movs	r6, #3
   118da:	35b6      	adds	r5, #182	; 0xb6
   118dc:	782a      	ldrb	r2, [r5, #0]
	conn->llcp_length.tx_octets = tx_octets;
   118de:	30ba      	adds	r0, #186	; 0xba
		return 1;
	}

	/* TODO: parameter check tx_octets */

	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   118e0:	43b2      	bics	r2, r6
   118e2:	702a      	strb	r2, [r5, #0]
	conn->llcp_length.tx_octets = tx_octets;
	conn->llcp_length.req++;

	return 0;
   118e4:	2200      	movs	r2, #0

	/* TODO: parameter check tx_octets */

	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
	conn->llcp_length.tx_octets = tx_octets;
	conn->llcp_length.req++;
   118e6:	3301      	adds	r3, #1
	}

	/* TODO: parameter check tx_octets */

	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
	conn->llcp_length.tx_octets = tx_octets;
   118e8:	8004      	strh	r4, [r0, #0]
	conn->llcp_length.req++;
   118ea:	700b      	strb	r3, [r1, #0]

	return 0;
}
   118ec:	0010      	movs	r0, r2
   118ee:	bd70      	pop	{r4, r5, r6, pc}

000118f0 <ll_length_default_get>:

void ll_length_default_get(u16_t *max_tx_octets, u16_t *max_tx_time)
{
	*max_tx_octets = _radio.default_tx_octets;
   118f0:	4b03      	ldr	r3, [pc, #12]	; (11900 <ll_length_default_get+0x10>)
   118f2:	33fe      	adds	r3, #254	; 0xfe
   118f4:	8c1a      	ldrh	r2, [r3, #32]
   118f6:	8002      	strh	r2, [r0, #0]
	*max_tx_time = _radio.default_tx_time;
   118f8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
   118fa:	800b      	strh	r3, [r1, #0]
}
   118fc:	4770      	bx	lr
   118fe:	46c0      	nop			; (mov r8, r8)
   11900:	200015c0 	.word	0x200015c0

00011904 <ll_length_default_set>:

u32_t ll_length_default_set(u16_t max_tx_octets, u16_t max_tx_time)
{
	/* TODO: parameter check (for BT 5.0 compliance) */

	_radio.default_tx_octets = max_tx_octets;
   11904:	4b02      	ldr	r3, [pc, #8]	; (11910 <ll_length_default_set+0xc>)
   11906:	33fe      	adds	r3, #254	; 0xfe
   11908:	8418      	strh	r0, [r3, #32]
	_radio.default_tx_time = max_tx_time;
   1190a:	8459      	strh	r1, [r3, #34]	; 0x22

	return 0;
}
   1190c:	2000      	movs	r0, #0
   1190e:	4770      	bx	lr
   11910:	200015c0 	.word	0x200015c0

00011914 <ll_length_max_get>:

void ll_length_max_get(u16_t *max_tx_octets, u16_t *max_tx_time,
		       u16_t *max_rx_octets, u16_t *max_rx_time)
{
   11914:	b510      	push	{r4, lr}
	*max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
   11916:	241b      	movs	r4, #27
   11918:	8004      	strh	r4, [r0, #0]
	*max_tx_time = RADIO_LL_LENGTH_TIME_RX_MAX;
   1191a:	20a4      	movs	r0, #164	; 0xa4
   1191c:	0040      	lsls	r0, r0, #1
   1191e:	8008      	strh	r0, [r1, #0]
	*max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
   11920:	8014      	strh	r4, [r2, #0]
	*max_rx_time = RADIO_LL_LENGTH_TIME_RX_MAX;
   11922:	8018      	strh	r0, [r3, #0]
}
   11924:	bd10      	pop	{r4, pc}

00011926 <ll_phy_get>:
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
u32_t ll_phy_get(u16_t handle, u8_t *tx, u8_t *rx)
{
   11926:	b570      	push	{r4, r5, r6, lr}
   11928:	000d      	movs	r5, r1
   1192a:	0014      	movs	r4, r2
	struct connection *conn;

	conn = connection_get(handle);
   1192c:	f7fa fd7a 	bl	c424 <connection_get>
	if (!conn) {
		return 1;
   11930:	2301      	movs	r3, #1
u32_t ll_phy_get(u16_t handle, u8_t *tx, u8_t *rx)
{
	struct connection *conn;

	conn = connection_get(handle);
	if (!conn) {
   11932:	2800      	cmp	r0, #0
   11934:	d00b      	beq.n	1194e <ll_phy_get+0x28>
		return 1;
	}

	/* TODO: context safe read */
	*tx = conn->phy_tx;
   11936:	0003      	movs	r3, r0
   11938:	3332      	adds	r3, #50	; 0x32
   1193a:	781b      	ldrb	r3, [r3, #0]
	*rx = conn->phy_rx;
   1193c:	3033      	adds	r0, #51	; 0x33
	if (!conn) {
		return 1;
	}

	/* TODO: context safe read */
	*tx = conn->phy_tx;
   1193e:	069b      	lsls	r3, r3, #26
   11940:	0f5b      	lsrs	r3, r3, #29
   11942:	702b      	strb	r3, [r5, #0]
	*rx = conn->phy_rx;
   11944:	7803      	ldrb	r3, [r0, #0]
   11946:	069b      	lsls	r3, r3, #26
   11948:	0f5b      	lsrs	r3, r3, #29
   1194a:	7023      	strb	r3, [r4, #0]

	return 0;
   1194c:	2300      	movs	r3, #0
}
   1194e:	0018      	movs	r0, r3
   11950:	bd70      	pop	{r4, r5, r6, pc}
	...

00011954 <ll_phy_default_set>:

u32_t ll_phy_default_set(u8_t tx, u8_t rx)
{
	/* TODO: validate against supported phy */

	_radio.default_phy_tx = tx;
   11954:	4b02      	ldr	r3, [pc, #8]	; (11960 <ll_phy_default_set+0xc>)
   11956:	33fe      	adds	r3, #254	; 0xfe
   11958:	8498      	strh	r0, [r3, #36]	; 0x24
	_radio.default_phy_rx = rx;
   1195a:	84d9      	strh	r1, [r3, #38]	; 0x26

	return 0;
}
   1195c:	2000      	movs	r0, #0
   1195e:	4770      	bx	lr
   11960:	200015c0 	.word	0x200015c0

00011964 <ll_phy_req_send>:

u32_t ll_phy_req_send(u16_t handle, u8_t tx, u8_t flags, u8_t rx)
{
   11964:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   11966:	0015      	movs	r5, r2
   11968:	000e      	movs	r6, r1
   1196a:	9301      	str	r3, [sp, #4]
	struct connection *conn;

	conn = connection_get(handle);
   1196c:	f7fa fd5a 	bl	c424 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
	    (conn->llcp_phy.req != conn->llcp_phy.ack)) {
		return 1;
   11970:	2201      	movs	r2, #1
u32_t ll_phy_req_send(u16_t handle, u8_t tx, u8_t flags, u8_t rx)
{
	struct connection *conn;

	conn = connection_get(handle);
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   11972:	2800      	cmp	r0, #0
   11974:	d023      	beq.n	119be <ll_phy_req_send+0x5a>
   11976:	0003      	movs	r3, r0
   11978:	3368      	adds	r3, #104	; 0x68
   1197a:	7819      	ldrb	r1, [r3, #0]
   1197c:	189b      	adds	r3, r3, r2
   1197e:	781b      	ldrb	r3, [r3, #0]
   11980:	4299      	cmp	r1, r3
   11982:	d11c      	bne.n	119be <ll_phy_req_send+0x5a>
	    (conn->llcp_phy.req != conn->llcp_phy.ack)) {
   11984:	0007      	movs	r7, r0
   11986:	0001      	movs	r1, r0
   11988:	37bc      	adds	r7, #188	; 0xbc
   1198a:	31bd      	adds	r1, #189	; 0xbd
   1198c:	783b      	ldrb	r3, [r7, #0]
u32_t ll_phy_req_send(u16_t handle, u8_t tx, u8_t flags, u8_t rx)
{
	struct connection *conn;

	conn = connection_get(handle);
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   1198e:	7809      	ldrb	r1, [r1, #0]
   11990:	4299      	cmp	r1, r3
   11992:	d114      	bne.n	119be <ll_phy_req_send+0x5a>
	    (conn->llcp_phy.req != conn->llcp_phy.ack)) {
		return 1;
	}

	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   11994:	0003      	movs	r3, r0
   11996:	33be      	adds	r3, #190	; 0xbe
	conn->llcp_phy.cmd = 1;
   11998:	7858      	ldrb	r0, [r3, #1]
	conn->llcp_phy.tx = tx;
	conn->llcp_phy.flags = flags;
   1199a:	4015      	ands	r5, r2
	    (conn->llcp_phy.req != conn->llcp_phy.ack)) {
		return 1;
	}

	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
	conn->llcp_phy.cmd = 1;
   1199c:	0004      	movs	r4, r0
	conn->llcp_phy.tx = tx;
   1199e:	2007      	movs	r0, #7
   119a0:	4006      	ands	r6, r0
	conn->llcp_phy.flags = flags;
   119a2:	3805      	subs	r0, #5
   119a4:	4304      	orrs	r4, r0
   119a6:	0020      	movs	r0, r4
   119a8:	4390      	bics	r0, r2
   119aa:	4305      	orrs	r5, r0
   119ac:	705d      	strb	r5, [r3, #1]
	conn->llcp_phy.rx = rx;
   119ae:	9a01      	ldr	r2, [sp, #4]
   119b0:	00b6      	lsls	r6, r6, #2
   119b2:	0154      	lsls	r4, r2, #5
	conn->llcp_phy.req++;

	return 0;
   119b4:	2200      	movs	r2, #0

	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
	conn->llcp_phy.cmd = 1;
	conn->llcp_phy.tx = tx;
	conn->llcp_phy.flags = flags;
	conn->llcp_phy.rx = rx;
   119b6:	4334      	orrs	r4, r6
	conn->llcp_phy.req++;
   119b8:	3101      	adds	r1, #1

	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
	conn->llcp_phy.cmd = 1;
	conn->llcp_phy.tx = tx;
	conn->llcp_phy.flags = flags;
	conn->llcp_phy.rx = rx;
   119ba:	701c      	strb	r4, [r3, #0]
	conn->llcp_phy.req++;
   119bc:	7039      	strb	r1, [r7, #0]

	return 0;
}
   119be:	0010      	movs	r0, r2
   119c0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

000119c4 <radio_rx_get>:
u8_t radio_rx_get(struct radio_pdu_node_rx **radio_pdu_node_rx, u16_t *handle)
{
	u8_t cmplt;

	cmplt = 0;
	if (_radio.link_rx_head != _radio.link_rx_tail) {
   119c4:	4b1c      	ldr	r3, [pc, #112]	; (11a38 <radio_rx_get+0x74>)

	return cmplt;
}

u8_t radio_rx_get(struct radio_pdu_node_rx **radio_pdu_node_rx, u16_t *handle)
{
   119c6:	b5f0      	push	{r4, r5, r6, r7, lr}
   119c8:	0005      	movs	r5, r0
   119ca:	0008      	movs	r0, r1
	u8_t cmplt;

	cmplt = 0;
	if (_radio.link_rx_head != _radio.link_rx_tail) {
   119cc:	0019      	movs	r1, r3
   119ce:	31fc      	adds	r1, #252	; 0xfc
   119d0:	6cca      	ldr	r2, [r1, #76]	; 0x4c
   119d2:	6d0c      	ldr	r4, [r1, #80]	; 0x50
   119d4:	0019      	movs	r1, r3
   119d6:	3174      	adds	r1, #116	; 0x74

	return cmplt;
}

u8_t radio_rx_get(struct radio_pdu_node_rx **radio_pdu_node_rx, u16_t *handle)
{
   119d8:	b085      	sub	sp, #20
   119da:	001e      	movs	r6, r3
   119dc:	31ff      	adds	r1, #255	; 0xff
	u8_t cmplt;

	cmplt = 0;
	if (_radio.link_rx_head != _radio.link_rx_tail) {
   119de:	42a2      	cmp	r2, r4
   119e0:	d01d      	beq.n	11a1e <radio_rx_get+0x5a>
		struct radio_pdu_node_rx *_radio_pdu_node_rx;

		_radio_pdu_node_rx = *((void **)_radio.link_rx_head + 1);
   119e2:	6853      	ldr	r3, [r2, #4]

		cmplt = tx_cmplt_get(handle,
   119e4:	781a      	ldrb	r2, [r3, #0]

	cmplt = 0;
	if (_radio.link_rx_head != _radio.link_rx_tail) {
		struct radio_pdu_node_rx *_radio_pdu_node_rx;

		_radio_pdu_node_rx = *((void **)_radio.link_rx_head + 1);
   119e6:	9301      	str	r3, [sp, #4]

		cmplt = tx_cmplt_get(handle,
   119e8:	f7fa fcce 	bl	c388 <tx_cmplt_get>
   119ec:	1e04      	subs	r4, r0, #0
				&_radio.packet_release_first,
				_radio_pdu_node_rx->hdr.onion.
				packet_release_last);
		if (!cmplt) {
   119ee:	d11d      	bne.n	11a2c <radio_rx_get+0x68>
			u16_t handle;
			u8_t first, cmplt_prev, cmplt_curr;

			first = _radio.packet_release_first;
   119f0:	2374      	movs	r3, #116	; 0x74
			cmplt_curr = 0;
   119f2:	0007      	movs	r7, r0
				packet_release_last);
		if (!cmplt) {
			u16_t handle;
			u8_t first, cmplt_prev, cmplt_curr;

			first = _radio.packet_release_first;
   119f4:	33ff      	adds	r3, #255	; 0xff
   119f6:	5cf3      	ldrb	r3, [r6, r3]
   119f8:	aa02      	add	r2, sp, #8
   119fa:	7153      	strb	r3, [r2, #5]
			cmplt_curr = 0;
			do {
				cmplt_prev = cmplt_curr;
				cmplt_curr = tx_cmplt_get(&handle, &first,
   119fc:	23ba      	movs	r3, #186	; 0xba
   119fe:	005b      	lsls	r3, r3, #1
   11a00:	5cf2      	ldrb	r2, [r6, r3]
   11a02:	ab02      	add	r3, sp, #8
   11a04:	b2d2      	uxtb	r2, r2
   11a06:	1d59      	adds	r1, r3, #5
   11a08:	1d98      	adds	r0, r3, #6
   11a0a:	f7fa fcbd 	bl	c388 <tx_cmplt_get>
						_radio.packet_release_last);
			} while ((cmplt_prev != 0) ||
				 (cmplt_prev != cmplt_curr));
   11a0e:	2f00      	cmp	r7, #0
   11a10:	d001      	beq.n	11a16 <radio_rx_get+0x52>

	return cmplt;
}

u8_t radio_rx_get(struct radio_pdu_node_rx **radio_pdu_node_rx, u16_t *handle)
{
   11a12:	0007      	movs	r7, r0
   11a14:	e7f2      	b.n	119fc <radio_rx_get+0x38>
			cmplt_curr = 0;
			do {
				cmplt_prev = cmplt_curr;
				cmplt_curr = tx_cmplt_get(&handle, &first,
						_radio.packet_release_last);
			} while ((cmplt_prev != 0) ||
   11a16:	2800      	cmp	r0, #0
   11a18:	d1fb      	bne.n	11a12 <radio_rx_get+0x4e>
				 (cmplt_prev != cmplt_curr));

			*radio_pdu_node_rx = _radio_pdu_node_rx;
   11a1a:	9b01      	ldr	r3, [sp, #4]
   11a1c:	e007      	b.n	11a2e <radio_rx_get+0x6a>
		} else {
			*radio_pdu_node_rx = NULL;
		}
	} else {
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
   11a1e:	22ba      	movs	r2, #186	; 0xba
   11a20:	0052      	lsls	r2, r2, #1
   11a22:	5c9a      	ldrb	r2, [r3, r2]
   11a24:	b2d2      	uxtb	r2, r2
   11a26:	f7fa fcaf 	bl	c388 <tx_cmplt_get>
   11a2a:	0004      	movs	r4, r0
				     _radio.packet_release_last);

		*radio_pdu_node_rx = NULL;
   11a2c:	2300      	movs	r3, #0
	}

	return cmplt;
}
   11a2e:	0020      	movs	r0, r4
		}
	} else {
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
				     _radio.packet_release_last);

		*radio_pdu_node_rx = NULL;
   11a30:	602b      	str	r3, [r5, #0]
	}

	return cmplt;
}
   11a32:	b005      	add	sp, #20
   11a34:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11a36:	46c0      	nop			; (mov r8, r8)
   11a38:	200015c0 	.word	0x200015c0

00011a3c <radio_rx_mem_release>:
		}
	}
}

void radio_rx_mem_release(struct radio_pdu_node_rx **radio_pdu_node_rx)
{
   11a3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   11a3e:	2680      	movs	r6, #128	; 0x80
   11a40:	0005      	movs	r5, r0
	struct radio_pdu_node_rx *_radio_pdu_node_rx;
	struct connection *conn;

	_radio_pdu_node_rx = *radio_pdu_node_rx;
   11a42:	6800      	ldr	r0, [r0, #0]
	while (_radio_pdu_node_rx) {
   11a44:	2800      	cmp	r0, #0
   11a46:	d02b      	beq.n	11aa0 <radio_rx_mem_release+0x64>
		struct radio_pdu_node_rx *_radio_pdu_node_rx_free;

		_radio_pdu_node_rx_free = _radio_pdu_node_rx;
		_radio_pdu_node_rx = _radio_pdu_node_rx->hdr.onion.next;

		switch (_radio_pdu_node_rx_free->hdr.type) {
   11a48:	7903      	ldrb	r3, [r0, #4]
	_radio_pdu_node_rx = *radio_pdu_node_rx;
	while (_radio_pdu_node_rx) {
		struct radio_pdu_node_rx *_radio_pdu_node_rx_free;

		_radio_pdu_node_rx_free = _radio_pdu_node_rx;
		_radio_pdu_node_rx = _radio_pdu_node_rx->hdr.onion.next;
   11a4a:	6807      	ldr	r7, [r0, #0]
   11a4c:	2b0c      	cmp	r3, #12
   11a4e:	d81a      	bhi.n	11a86 <radio_rx_mem_release+0x4a>
   11a50:	2201      	movs	r2, #1
   11a52:	409a      	lsls	r2, r3
   11a54:	0013      	movs	r3, r2
   11a56:	4a15      	ldr	r2, [pc, #84]	; (11aac <radio_rx_mem_release+0x70>)
   11a58:	4c15      	ldr	r4, [pc, #84]	; (11ab0 <radio_rx_mem_release+0x74>)
   11a5a:	4213      	tst	r3, r2
   11a5c:	d10c      	bne.n	11a78 <radio_rx_mem_release+0x3c>
   11a5e:	4233      	tst	r3, r6
   11a60:	d011      	beq.n	11a86 <radio_rx_mem_release+0x4a>
			mem_release(_radio_pdu_node_rx_free,
				    &_radio.pkt_rx_data_free);
			break;

		case NODE_RX_TYPE_TERMINATE:
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   11a62:	0023      	movs	r3, r4
   11a64:	218c      	movs	r1, #140	; 0x8c
   11a66:	33fc      	adds	r3, #252	; 0xfc
   11a68:	88c2      	ldrh	r2, [r0, #6]
   11a6a:	0049      	lsls	r1, r1, #1
   11a6c:	6898      	ldr	r0, [r3, #8]
   11a6e:	f7f8 ff46 	bl	a8fe <mem_get>
				       _radio_pdu_node_rx_free->hdr.handle);

			mem_release(conn, &_radio.conn_free);
   11a72:	0021      	movs	r1, r4
   11a74:	3109      	adds	r1, #9
   11a76:	e001      	b.n	11a7c <radio_rx_mem_release+0x40>

#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_INDICATION)
		case NODE_RX_TYPE_ADV_INDICATION:
#endif /* CONFIG_BLUETOOTH_CONTROLLER_ADV_INDICATION */

			mem_release(_radio_pdu_node_rx_free,
   11a78:	0021      	movs	r1, r4
   11a7a:	312d      	adds	r1, #45	; 0x2d

		case NODE_RX_TYPE_TERMINATE:
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
				       _radio_pdu_node_rx_free->hdr.handle);

			mem_release(conn, &_radio.conn_free);
   11a7c:	31ff      	adds	r1, #255	; 0xff
   11a7e:	f7f8 ff20 	bl	a8c2 <mem_release>
		}
	}
}

void radio_rx_mem_release(struct radio_pdu_node_rx **radio_pdu_node_rx)
{
   11a82:	0038      	movs	r0, r7
   11a84:	e7de      	b.n	11a44 <radio_rx_mem_release+0x8>

			mem_release(conn, &_radio.conn_free);
			break;

		default:
			LL_ASSERT(0);
   11a86:	4b0b      	ldr	r3, [pc, #44]	; (11ab4 <radio_rx_mem_release+0x78>)
   11a88:	4a0b      	ldr	r2, [pc, #44]	; (11ab8 <radio_rx_mem_release+0x7c>)
   11a8a:	9301      	str	r3, [sp, #4]
   11a8c:	4b0b      	ldr	r3, [pc, #44]	; (11abc <radio_rx_mem_release+0x80>)
   11a8e:	490c      	ldr	r1, [pc, #48]	; (11ac0 <radio_rx_mem_release+0x84>)
   11a90:	9300      	str	r3, [sp, #0]
   11a92:	480c      	ldr	r0, [pc, #48]	; (11ac4 <radio_rx_mem_release+0x88>)
   11a94:	4b0c      	ldr	r3, [pc, #48]	; (11ac8 <radio_rx_mem_release+0x8c>)
   11a96:	f7ef ff73 	bl	1980 <printk>
   11a9a:	b662      	cpsie	i
   11a9c:	2004      	movs	r0, #4
   11a9e:	df02      	svc	2
			break;
		}
	}

	*radio_pdu_node_rx = _radio_pdu_node_rx;
   11aa0:	6028      	str	r0, [r5, #0]

	packet_rx_allocate(0xff);
   11aa2:	30ff      	adds	r0, #255	; 0xff
   11aa4:	f7fa fb9c 	bl	c1e0 <packet_rx_allocate>
}
   11aa8:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   11aaa:	46c0      	nop			; (mov r8, r8)
   11aac:	00001f7e 	.word	0x00001f7e
   11ab0:	200015c0 	.word	0x200015c0
   11ab4:	000154c4 	.word	0x000154c4
   11ab8:	00015484 	.word	0x00015484
   11abc:	000154c9 	.word	0x000154c9
   11ac0:	0001548b 	.word	0x0001548b
   11ac4:	00015b21 	.word	0x00015b21
   11ac8:	00018182 	.word	0x00018182

00011acc <do_radio_rx_fc_set>:
		_radio.fc_req = req;
	}
}

u8_t do_radio_rx_fc_set(u16_t handle, u8_t req, u8_t ack)
{
   11acc:	b530      	push	{r4, r5, lr}
   11ace:	4b18      	ldr	r3, [pc, #96]	; (11b30 <do_radio_rx_fc_set+0x64>)
   11ad0:	0004      	movs	r4, r0
	if (req == ack) {
   11ad2:	4291      	cmp	r1, r2
   11ad4:	d11c      	bne.n	11b10 <do_radio_rx_fc_set+0x44>
		if (_radio.link_rx_head == _radio.link_rx_tail) {
   11ad6:	001a      	movs	r2, r3
   11ad8:	32fc      	adds	r2, #252	; 0xfc
   11ada:	6d15      	ldr	r5, [r2, #80]	; 0x50
   11adc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
				_radio.fc_ack = ack;

				return 1;
			}
		} else {
			return 1;
   11ade:	2001      	movs	r0, #1
}

u8_t do_radio_rx_fc_set(u16_t handle, u8_t req, u8_t ack)
{
	if (req == ack) {
		if (_radio.link_rx_head == _radio.link_rx_tail) {
   11ae0:	42aa      	cmp	r2, r5
   11ae2:	d123      	bne.n	11b2c <do_radio_rx_fc_set+0x60>
			u8_t ack1 = ack;

			if (ack1 == 0) {
   11ae4:	1e0a      	subs	r2, r1, #0
   11ae6:	d100      	bne.n	11aea <do_radio_rx_fc_set+0x1e>
				ack1 = TRIPLE_BUFFER_SIZE;
   11ae8:	2203      	movs	r2, #3
			}
			_radio.fc_handle[--ack1] = handle;
   11aea:	3a01      	subs	r2, #1
   11aec:	b2d2      	uxtb	r2, r2
   11aee:	0010      	movs	r0, r2
   11af0:	30b8      	adds	r0, #184	; 0xb8
   11af2:	0040      	lsls	r0, r0, #1
   11af4:	1818      	adds	r0, r3, r0
   11af6:	80c4      	strh	r4, [r0, #6]
			_radio.fc_ack = ack1;
   11af8:	247e      	movs	r4, #126	; 0x7e
   11afa:	34ff      	adds	r4, #255	; 0xff
   11afc:	551a      	strb	r2, [r3, r4]

			/* check if ISR updated FC by changing fc_req */
			if (req != _radio.fc_req) {
   11afe:	22be      	movs	r2, #190	; 0xbe
   11b00:	0052      	lsls	r2, r2, #1
   11b02:	5c9a      	ldrb	r2, [r3, r2]
		    (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] != handle)) ||
		   ((req != 0) && (_radio.fc_handle[req - 1] != handle))) {
		return 1;
	}

	return 0;
   11b04:	2000      	movs	r0, #0
			}
			_radio.fc_handle[--ack1] = handle;
			_radio.fc_ack = ack1;

			/* check if ISR updated FC by changing fc_req */
			if (req != _radio.fc_req) {
   11b06:	4291      	cmp	r1, r2
   11b08:	d010      	beq.n	11b2c <do_radio_rx_fc_set+0x60>
				_radio.fc_ack = ack;
   11b0a:	5519      	strb	r1, [r3, r4]

				return 1;
   11b0c:	3001      	adds	r0, #1
   11b0e:	e00d      	b.n	11b2c <do_radio_rx_fc_set+0x60>
			}
		} else {
			return 1;
		}
	} else if (((req == 0) &&
   11b10:	2900      	cmp	r1, #0
   11b12:	d103      	bne.n	11b1c <do_radio_rx_fc_set+0x50>
		    (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] != handle)) ||
   11b14:	22bd      	movs	r2, #189	; 0xbd
   11b16:	0052      	lsls	r2, r2, #1

			/* check if ISR updated FC by changing fc_req */
			if (req != _radio.fc_req) {
				_radio.fc_ack = ack;

				return 1;
   11b18:	5a9b      	ldrh	r3, [r3, r2]
   11b1a:	e003      	b.n	11b24 <do_radio_rx_fc_set+0x58>
		} else {
			return 1;
		}
	} else if (((req == 0) &&
		    (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] != handle)) ||
		   ((req != 0) && (_radio.fc_handle[req - 1] != handle))) {
   11b1c:	31b7      	adds	r1, #183	; 0xb7
   11b1e:	0049      	lsls	r1, r1, #1
   11b20:	1859      	adds	r1, r3, r1

			/* check if ISR updated FC by changing fc_req */
			if (req != _radio.fc_req) {
				_radio.fc_ack = ack;

				return 1;
   11b22:	88cb      	ldrh	r3, [r1, #6]
   11b24:	1b18      	subs	r0, r3, r4
   11b26:	1e43      	subs	r3, r0, #1
   11b28:	4198      	sbcs	r0, r3
   11b2a:	b2c0      	uxtb	r0, r0
		   ((req != 0) && (_radio.fc_handle[req - 1] != handle))) {
		return 1;
	}

	return 0;
}
   11b2c:	bd30      	pop	{r4, r5, pc}
   11b2e:	46c0      	nop			; (mov r8, r8)
   11b30:	200015c0 	.word	0x200015c0

00011b34 <radio_rx_fc_set>:

u8_t radio_rx_fc_set(u16_t handle, u8_t fc)
{
	if (_radio.fc_ena) {
   11b34:	22bf      	movs	r2, #191	; 0xbf

	return 0;
}

u8_t radio_rx_fc_set(u16_t handle, u8_t fc)
{
   11b36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (_radio.fc_ena) {
   11b38:	4b15      	ldr	r3, [pc, #84]	; (11b90 <radio_rx_fc_set+0x5c>)
   11b3a:	0052      	lsls	r2, r2, #1
   11b3c:	5c9a      	ldrb	r2, [r3, r2]
   11b3e:	2a00      	cmp	r2, #0
   11b40:	d101      	bne.n	11b46 <radio_rx_fc_set+0x12>
				_radio.fc_ack = ack;
			}
		}
	}

	return 0;
   11b42:	2000      	movs	r0, #0
   11b44:	e022      	b.n	11b8c <radio_rx_fc_set+0x58>
}

u8_t radio_rx_fc_set(u16_t handle, u8_t fc)
{
	if (_radio.fc_ena) {
		u8_t req = _radio.fc_req;
   11b46:	22be      	movs	r2, #190	; 0xbe
		u8_t ack = _radio.fc_ack;
   11b48:	257e      	movs	r5, #126	; 0x7e
}

u8_t radio_rx_fc_set(u16_t handle, u8_t fc)
{
	if (_radio.fc_ena) {
		u8_t req = _radio.fc_req;
   11b4a:	0052      	lsls	r2, r2, #1
   11b4c:	5c9c      	ldrb	r4, [r3, r2]
		u8_t ack = _radio.fc_ack;
   11b4e:	35ff      	adds	r5, #255	; 0xff
}

u8_t radio_rx_fc_set(u16_t handle, u8_t fc)
{
	if (_radio.fc_ena) {
		u8_t req = _radio.fc_req;
   11b50:	b2e4      	uxtb	r4, r4
		u8_t ack = _radio.fc_ack;
   11b52:	5d5a      	ldrb	r2, [r3, r5]

		if (fc) {
   11b54:	2900      	cmp	r1, #0
   11b56:	d006      	beq.n	11b66 <radio_rx_fc_set+0x32>
			if (handle != 0xffff) {
   11b58:	4b0e      	ldr	r3, [pc, #56]	; (11b94 <radio_rx_fc_set+0x60>)
   11b5a:	4298      	cmp	r0, r3
   11b5c:	d0f1      	beq.n	11b42 <radio_rx_fc_set+0xe>
				return do_radio_rx_fc_set(handle, req, ack);
   11b5e:	0021      	movs	r1, r4
   11b60:	f7ff ffb4 	bl	11acc <do_radio_rx_fc_set>
   11b64:	e012      	b.n	11b8c <radio_rx_fc_set+0x58>
			}
		} else if ((_radio.link_rx_head == _radio.link_rx_tail) &&
   11b66:	0018      	movs	r0, r3
   11b68:	30fc      	adds	r0, #252	; 0xfc
   11b6a:	6cc7      	ldr	r7, [r0, #76]	; 0x4c
   11b6c:	6d06      	ldr	r6, [r0, #80]	; 0x50
   11b6e:	42b7      	cmp	r7, r6
   11b70:	d1e7      	bne.n	11b42 <radio_rx_fc_set+0xe>
   11b72:	4294      	cmp	r4, r2
   11b74:	d0e5      	beq.n	11b42 <radio_rx_fc_set+0xe>
			   (req != ack)
		    ) {
			_radio.fc_ack = req;

			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   11b76:	6d00      	ldr	r0, [r0, #80]	; 0x50
				return do_radio_rx_fc_set(handle, req, ack);
			}
		} else if ((_radio.link_rx_head == _radio.link_rx_tail) &&
			   (req != ack)
		    ) {
			_radio.fc_ack = req;
   11b78:	555c      	strb	r4, [r3, r5]

			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   11b7a:	4287      	cmp	r7, r0
   11b7c:	d0e1      	beq.n	11b42 <radio_rx_fc_set+0xe>
			    (req == _radio.fc_req)) {
   11b7e:	20be      	movs	r0, #190	; 0xbe
   11b80:	0040      	lsls	r0, r0, #1
   11b82:	5c18      	ldrb	r0, [r3, r0]
		} else if ((_radio.link_rx_head == _radio.link_rx_tail) &&
			   (req != ack)
		    ) {
			_radio.fc_ack = req;

			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   11b84:	4284      	cmp	r4, r0
   11b86:	d1dc      	bne.n	11b42 <radio_rx_fc_set+0xe>
				_radio.fc_ack = ack;
			}
		}
	}

	return 0;
   11b88:	0008      	movs	r0, r1
		    ) {
			_radio.fc_ack = req;

			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
			    (req == _radio.fc_req)) {
				_radio.fc_ack = ack;
   11b8a:	555a      	strb	r2, [r3, r5]
			}
		}
	}

	return 0;
}
   11b8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11b8e:	46c0      	nop			; (mov r8, r8)
   11b90:	200015c0 	.word	0x200015c0
   11b94:	0000ffff 	.word	0x0000ffff

00011b98 <radio_tx_mem_acquire>:

	return 0;
}

struct radio_pdu_node_tx *radio_tx_mem_acquire(void)
{
   11b98:	b510      	push	{r4, lr}
	return mem_acquire(&_radio.pkt_tx_data_free);
   11b9a:	4803      	ldr	r0, [pc, #12]	; (11ba8 <radio_tx_mem_acquire+0x10>)
   11b9c:	3061      	adds	r0, #97	; 0x61
   11b9e:	30ff      	adds	r0, #255	; 0xff
   11ba0:	f7f8 fe76 	bl	a890 <mem_acquire>
}
   11ba4:	bd10      	pop	{r4, pc}
   11ba6:	46c0      	nop			; (mov r8, r8)
   11ba8:	200015c0 	.word	0x200015c0

00011bac <radio_tx_mem_release>:

void radio_tx_mem_release(struct radio_pdu_node_tx *node_tx)
{
   11bac:	b510      	push	{r4, lr}
	mem_release(node_tx, &_radio.pkt_tx_data_free);
   11bae:	4903      	ldr	r1, [pc, #12]	; (11bbc <radio_tx_mem_release+0x10>)
   11bb0:	3161      	adds	r1, #97	; 0x61
   11bb2:	31ff      	adds	r1, #255	; 0xff
   11bb4:	f7f8 fe85 	bl	a8c2 <mem_release>
}
   11bb8:	bd10      	pop	{r4, pc}
   11bba:	46c0      	nop			; (mov r8, r8)
   11bbc:	200015c0 	.word	0x200015c0

00011bc0 <radio_tx_mem_enqueue>:
{
	u8_t last;
	struct connection *conn;
	struct pdu_data *pdu_data;

	last = _radio.packet_tx_last + 1;
   11bc0:	23b9      	movs	r3, #185	; 0xb9
	conn = (struct connection *)params;
	conn->role.slave.latency_cancel = 0;
}

u32_t radio_tx_mem_enqueue(u16_t handle, struct radio_pdu_node_tx *node_tx)
{
   11bc2:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t last;
	struct connection *conn;
	struct pdu_data *pdu_data;

	last = _radio.packet_tx_last + 1;
   11bc4:	4c33      	ldr	r4, [pc, #204]	; (11c94 <radio_tx_mem_enqueue+0xd4>)
   11bc6:	005b      	lsls	r3, r3, #1
   11bc8:	5ce5      	ldrb	r5, [r4, r3]
	if (last == _radio.packet_tx_count) {
   11bca:	3b02      	subs	r3, #2
{
	u8_t last;
	struct connection *conn;
	struct pdu_data *pdu_data;

	last = _radio.packet_tx_last + 1;
   11bcc:	3501      	adds	r5, #1
	if (last == _radio.packet_tx_count) {
   11bce:	5ce3      	ldrb	r3, [r4, r3]
{
	u8_t last;
	struct connection *conn;
	struct pdu_data *pdu_data;

	last = _radio.packet_tx_last + 1;
   11bd0:	b2ed      	uxtb	r5, r5
	conn = (struct connection *)params;
	conn->role.slave.latency_cancel = 0;
}

u32_t radio_tx_mem_enqueue(u16_t handle, struct radio_pdu_node_tx *node_tx)
{
   11bd2:	b089      	sub	sp, #36	; 0x24
   11bd4:	0007      	movs	r7, r0
   11bd6:	000e      	movs	r6, r1
	u8_t last;
	struct connection *conn;
	struct pdu_data *pdu_data;

	last = _radio.packet_tx_last + 1;
	if (last == _radio.packet_tx_count) {
   11bd8:	42ab      	cmp	r3, r5
   11bda:	d100      	bne.n	11bde <radio_tx_mem_enqueue+0x1e>
		last = 0;
   11bdc:	2500      	movs	r5, #0
	}

	pdu_data = (struct pdu_data *)node_tx->pdu_data;
	conn = connection_get(handle);
   11bde:	0038      	movs	r0, r7
   11be0:	f7fa fc20 	bl	c424 <connection_get>
   11be4:	1e03      	subs	r3, r0, #0
	if (!conn || (last == _radio.packet_tx_first)) {
   11be6:	d052      	beq.n	11c8e <radio_tx_mem_enqueue+0xce>
   11be8:	2272      	movs	r2, #114	; 0x72
   11bea:	32ff      	adds	r2, #255	; 0xff
   11bec:	5ca2      	ldrb	r2, [r4, r2]
   11bee:	4295      	cmp	r5, r2
   11bf0:	d04d      	beq.n	11c8e <radio_tx_mem_enqueue+0xce>
		return 1;
	}

	LL_ASSERT(pdu_data->len <= (_radio.packet_tx_data_size -
   11bf2:	22b2      	movs	r2, #178	; 0xb2
   11bf4:	0052      	lsls	r2, r2, #1
   11bf6:	5aa2      	ldrh	r2, [r4, r2]
   11bf8:	7971      	ldrb	r1, [r6, #5]
   11bfa:	3a07      	subs	r2, #7
   11bfc:	4291      	cmp	r1, r2
   11bfe:	d908      	bls.n	11c12 <radio_tx_mem_enqueue+0x52>
   11c00:	4b25      	ldr	r3, [pc, #148]	; (11c98 <radio_tx_mem_enqueue+0xd8>)
   11c02:	4a26      	ldr	r2, [pc, #152]	; (11c9c <radio_tx_mem_enqueue+0xdc>)
   11c04:	9301      	str	r3, [sp, #4]
   11c06:	4b26      	ldr	r3, [pc, #152]	; (11ca0 <radio_tx_mem_enqueue+0xe0>)
   11c08:	4926      	ldr	r1, [pc, #152]	; (11ca4 <radio_tx_mem_enqueue+0xe4>)
   11c0a:	9300      	str	r3, [sp, #0]
   11c0c:	4826      	ldr	r0, [pc, #152]	; (11ca8 <radio_tx_mem_enqueue+0xe8>)
   11c0e:	4b27      	ldr	r3, [pc, #156]	; (11cac <radio_tx_mem_enqueue+0xec>)
   11c10:	e038      	b.n	11c84 <radio_tx_mem_enqueue+0xc4>
				    offsetof(struct radio_pdu_node_tx,
					     pdu_data) -
				    offsetof(struct pdu_data, payload)));

	_radio.pkt_tx[_radio.packet_tx_last].handle = handle;
   11c12:	0022      	movs	r2, r4
   11c14:	21b9      	movs	r1, #185	; 0xb9
   11c16:	32fc      	adds	r2, #252	; 0xfc
   11c18:	0049      	lsls	r1, r1, #1
   11c1a:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
   11c1c:	5c62      	ldrb	r2, [r4, r1]
   11c1e:	00d2      	lsls	r2, r2, #3
   11c20:	5217      	strh	r7, [r2, r0]
	_radio.pkt_tx[_radio.packet_tx_last].  node_tx = node_tx;
   11c22:	5c62      	ldrb	r2, [r4, r1]
   11c24:	00d2      	lsls	r2, r2, #3
   11c26:	1882      	adds	r2, r0, r2
   11c28:	6056      	str	r6, [r2, #4]
	_radio.packet_tx_last = last;
   11c2a:	5465      	strb	r5, [r4, r1]

	/* break slave latency */
	if ((conn->role.slave.role != 0) && (conn->latency_event != 0) &&
   11c2c:	001c      	movs	r4, r3
   11c2e:	3444      	adds	r4, #68	; 0x44
   11c30:	3972      	subs	r1, #114	; 0x72
   11c32:	7822      	ldrb	r2, [r4, #0]
   11c34:	39ff      	subs	r1, #255	; 0xff
   11c36:	420a      	tst	r2, r1
   11c38:	d101      	bne.n	11c3e <radio_tx_mem_enqueue+0x7e>
				 (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
			  (ticker_status == TICKER_STATUS_BUSY));
	}

	return 0;
   11c3a:	2000      	movs	r0, #0
   11c3c:	e028      	b.n	11c90 <radio_tx_mem_enqueue+0xd0>
	_radio.pkt_tx[_radio.packet_tx_last].handle = handle;
	_radio.pkt_tx[_radio.packet_tx_last].  node_tx = node_tx;
	_radio.packet_tx_last = last;

	/* break slave latency */
	if ((conn->role.slave.role != 0) && (conn->latency_event != 0) &&
   11c3e:	8d58      	ldrh	r0, [r3, #42]	; 0x2a
   11c40:	2800      	cmp	r0, #0
   11c42:	d0fa      	beq.n	11c3a <radio_tx_mem_enqueue+0x7a>
   11c44:	2510      	movs	r5, #16
   11c46:	0010      	movs	r0, r2
   11c48:	4028      	ands	r0, r5
   11c4a:	d1f6      	bne.n	11c3a <radio_tx_mem_enqueue+0x7a>
	    (conn->role.slave.latency_cancel == 0)) {
		u32_t ticker_status;

		conn->role.slave.latency_cancel = 1;
   11c4c:	432a      	orrs	r2, r5
   11c4e:	7022      	strb	r2, [r4, #0]

		ticker_status = ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
   11c50:	8c1a      	ldrh	r2, [r3, #32]
   11c52:	9306      	str	r3, [sp, #24]
   11c54:	4b16      	ldr	r3, [pc, #88]	; (11cb0 <radio_tx_mem_enqueue+0xf0>)
   11c56:	3207      	adds	r2, #7
   11c58:	9305      	str	r3, [sp, #20]
   11c5a:	9103      	str	r1, [sp, #12]
   11c5c:	0003      	movs	r3, r0
   11c5e:	b2d2      	uxtb	r2, r2
   11c60:	9004      	str	r0, [sp, #16]
   11c62:	9002      	str	r0, [sp, #8]
   11c64:	9001      	str	r0, [sp, #4]
   11c66:	9000      	str	r0, [sp, #0]
   11c68:	2103      	movs	r1, #3
   11c6a:	f7fa f945 	bl	bef8 <ticker_update>
				 RADIO_TICKER_USER_ID_APP,
				 RADIO_TICKER_ID_FIRST_CONNECTION +
				 conn->handle, 0, 0, 0, 0, 1, 0,
				 ticker_op_latency_cancelled,
				 (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   11c6e:	2302      	movs	r3, #2
   11c70:	4398      	bics	r0, r3
   11c72:	d0e2      	beq.n	11c3a <radio_tx_mem_enqueue+0x7a>
   11c74:	4b08      	ldr	r3, [pc, #32]	; (11c98 <radio_tx_mem_enqueue+0xd8>)
   11c76:	4a09      	ldr	r2, [pc, #36]	; (11c9c <radio_tx_mem_enqueue+0xdc>)
   11c78:	9301      	str	r3, [sp, #4]
   11c7a:	4b09      	ldr	r3, [pc, #36]	; (11ca0 <radio_tx_mem_enqueue+0xe0>)
   11c7c:	4909      	ldr	r1, [pc, #36]	; (11ca4 <radio_tx_mem_enqueue+0xe4>)
   11c7e:	9300      	str	r3, [sp, #0]
   11c80:	480c      	ldr	r0, [pc, #48]	; (11cb4 <radio_tx_mem_enqueue+0xf4>)
   11c82:	4b0a      	ldr	r3, [pc, #40]	; (11cac <radio_tx_mem_enqueue+0xec>)
   11c84:	f7ef fe7c 	bl	1980 <printk>
   11c88:	b662      	cpsie	i
   11c8a:	2004      	movs	r0, #4
   11c8c:	df02      	svc	2
	}

	pdu_data = (struct pdu_data *)node_tx->pdu_data;
	conn = connection_get(handle);
	if (!conn || (last == _radio.packet_tx_first)) {
		return 1;
   11c8e:	2001      	movs	r0, #1
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
			  (ticker_status == TICKER_STATUS_BUSY));
	}

	return 0;
}
   11c90:	b009      	add	sp, #36	; 0x24
   11c92:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11c94:	200015c0 	.word	0x200015c0
   11c98:	000154c4 	.word	0x000154c4
   11c9c:	00015484 	.word	0x00015484
   11ca0:	000154c9 	.word	0x000154c9
   11ca4:	0001548b 	.word	0x0001548b
   11ca8:	000175c8 	.word	0x000175c8
   11cac:	000181dd 	.word	0x000181dd
   11cb0:	0000cb89 	.word	0x0000cb89
   11cb4:	00016da4 	.word	0x00016da4

void __weak ll_adv_scan_state_cb(u8_t bm)
{
}
   11cb8:	4770      	bx	lr
	...

00011cbc <ll_adv_scan_state_cb>:

	k_delayed_work_cancel(&rpa_work);
}

void ll_adv_scan_state_cb(u8_t bm)
{
   11cbc:	b510      	push	{r4, lr}
   11cbe:	4b09      	ldr	r3, [pc, #36]	; (11ce4 <ll_adv_scan_state_cb+0x28>)
	k_delayed_work_submit(&rpa_work, rpa_timeout_ms);
}

static void rpa_refresh_start(void)
{
	if (!rl_enable) {
   11cc0:	781b      	ldrb	r3, [r3, #0]
	k_delayed_work_cancel(&rpa_work);
}

void ll_adv_scan_state_cb(u8_t bm)
{
	if (bm) {
   11cc2:	2800      	cmp	r0, #0
   11cc4:	d008      	beq.n	11cd8 <ll_adv_scan_state_cb+0x1c>
	k_delayed_work_submit(&rpa_work, rpa_timeout_ms);
}

static void rpa_refresh_start(void)
{
	if (!rl_enable) {
   11cc6:	2b00      	cmp	r3, #0
   11cc8:	d00b      	beq.n	11ce2 <ll_adv_scan_state_cb+0x26>
		return;
	}

	BT_DBG("");
	k_delayed_work_submit(&rpa_work, rpa_timeout_ms);
   11cca:	4b07      	ldr	r3, [pc, #28]	; (11ce8 <ll_adv_scan_state_cb+0x2c>)
   11ccc:	4907      	ldr	r1, [pc, #28]	; (11cec <ll_adv_scan_state_cb+0x30>)
   11cce:	681a      	ldr	r2, [r3, #0]
   11cd0:	4807      	ldr	r0, [pc, #28]	; (11cf0 <ll_adv_scan_state_cb+0x34>)
   11cd2:	f003 f91d 	bl	14f10 <k_delayed_work_submit_to_queue>
   11cd6:	e004      	b.n	11ce2 <ll_adv_scan_state_cb+0x26>
}

static void rpa_refresh_stop(void)
{
	if (!rl_enable) {
   11cd8:	2b00      	cmp	r3, #0
   11cda:	d002      	beq.n	11ce2 <ll_adv_scan_state_cb+0x26>
		return;
	}

	k_delayed_work_cancel(&rpa_work);
   11cdc:	4803      	ldr	r0, [pc, #12]	; (11cec <ll_adv_scan_state_cb+0x30>)
   11cde:	f003 f8df 	bl	14ea0 <k_delayed_work_cancel>
	if (bm) {
		rpa_refresh_start();
	} else {
		rpa_refresh_stop();
	}
}
   11ce2:	bd10      	pop	{r4, pc}
   11ce4:	20002041 	.word	0x20002041
   11ce8:	20002340 	.word	0x20002340
   11cec:	200022b8 	.word	0x200022b8
   11cf0:	20002358 	.word	0x20002358

00011cf4 <radio_adv_enable>:
		       u8_t filter_policy, u8_t rl_idx)
#else /* !CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */
u32_t radio_adv_enable(u16_t interval, u8_t chan_map, u8_t filter_policy,
		       u8_t rl_idx)
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */
{
   11cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
   11cf6:	b095      	sub	sp, #84	; 0x54
   11cf8:	930f      	str	r3, [sp, #60]	; 0x3c
   11cfa:	ab1a      	add	r3, sp, #104	; 0x68
   11cfc:	781b      	ldrb	r3, [r3, #0]
   11cfe:	910b      	str	r1, [sp, #44]	; 0x2c
   11d00:	9310      	str	r3, [sp, #64]	; 0x40
   11d02:	232f      	movs	r3, #47	; 0x2f
   11d04:	a906      	add	r1, sp, #24
   11d06:	185b      	adds	r3, r3, r1
   11d08:	701a      	strb	r2, [r3, #0]
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   11d0a:	2302      	movs	r3, #2
	struct pdu_adv *pdu_adv;
	u16_t ticks_slot;
	u8_t chan_cnt;
	u32_t ret;

	if (_radio.advertiser.is_enabled) {
   11d0c:	4dbf      	ldr	r5, [pc, #764]	; (1200c <radio_adv_enable+0x318>)
#else /* !CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */
u32_t radio_adv_enable(u16_t interval, u8_t chan_map, u8_t filter_policy,
		       u8_t rl_idx)
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */
{
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   11d0e:	9313      	str	r3, [sp, #76]	; 0x4c
	struct pdu_adv *pdu_adv;
	u16_t ticks_slot;
	u8_t chan_cnt;
	u32_t ret;

	if (_radio.advertiser.is_enabled) {
   11d10:	1d6b      	adds	r3, r5, #5
   11d12:	7fda      	ldrb	r2, [r3, #31]
   11d14:	2301      	movs	r3, #1
		       u8_t filter_policy, u8_t rl_idx)
#else /* !CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */
u32_t radio_adv_enable(u16_t interval, u8_t chan_map, u8_t filter_policy,
		       u8_t rl_idx)
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */
{
   11d16:	900e      	str	r0, [sp, #56]	; 0x38
	struct pdu_adv *pdu_adv;
	u16_t ticks_slot;
	u8_t chan_cnt;
	u32_t ret;

	if (_radio.advertiser.is_enabled) {
   11d18:	401a      	ands	r2, r3
   11d1a:	d000      	beq.n	11d1e <radio_adv_enable+0x2a>
   11d1c:	e171      	b.n	12002 <radio_adv_enable+0x30e>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	pdu_adv = (struct pdu_adv *)
		&_radio.advertiser.adv_data.data[_radio.advertiser.adv_data.last][0];
   11d1e:	002b      	movs	r3, r5
   11d20:	3376      	adds	r3, #118	; 0x76

	if (_radio.advertiser.is_enabled) {
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	pdu_adv = (struct pdu_adv *)
   11d22:	7819      	ldrb	r1, [r3, #0]
   11d24:	2327      	movs	r3, #39	; 0x27
   11d26:	434b      	muls	r3, r1
   11d28:	3320      	adds	r3, #32
   11d2a:	18eb      	adds	r3, r5, r3
		&_radio.advertiser.adv_data.data[_radio.advertiser.adv_data.last][0];

	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
   11d2c:	79d9      	ldrb	r1, [r3, #7]

	if (_radio.advertiser.is_enabled) {
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	pdu_adv = (struct pdu_adv *)
   11d2e:	930d      	str	r3, [sp, #52]	; 0x34
		&_radio.advertiser.adv_data.data[_radio.advertiser.adv_data.last][0];

	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
   11d30:	230f      	movs	r3, #15
		conn->rssi_sample_count = 0;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_CONN_RSSI */

		_radio.advertiser.conn = conn;
	} else {
		conn = NULL;
   11d32:	0016      	movs	r6, r2
	}

	pdu_adv = (struct pdu_adv *)
		&_radio.advertiser.adv_data.data[_radio.advertiser.adv_data.last][0];

	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
   11d34:	400b      	ands	r3, r1
   11d36:	2b01      	cmp	r3, #1
   11d38:	d900      	bls.n	11d3c <radio_adv_enable+0x48>
   11d3a:	e08e      	b.n	11e5a <radio_adv_enable+0x166>
	    (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND)) {
		void *link;

		if (_radio.advertiser.conn) {
   11d3c:	4bb4      	ldr	r3, [pc, #720]	; (12010 <radio_adv_enable+0x31c>)
   11d3e:	681c      	ldr	r4, [r3, #0]
   11d40:	2c00      	cmp	r4, #0
   11d42:	d000      	beq.n	11d46 <radio_adv_enable+0x52>
   11d44:	e15d      	b.n	12002 <radio_adv_enable+0x30e>
			return BT_HCI_ERR_CMD_DISALLOWED;
		}

		link = mem_acquire(&_radio.link_rx_free);
   11d46:	48b3      	ldr	r0, [pc, #716]	; (12014 <radio_adv_enable+0x320>)
   11d48:	f7f8 fda2 	bl	a890 <mem_acquire>
		if (!link) {
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   11d4c:	2707      	movs	r7, #7

		if (_radio.advertiser.conn) {
			return BT_HCI_ERR_CMD_DISALLOWED;
		}

		link = mem_acquire(&_radio.link_rx_free);
   11d4e:	900c      	str	r0, [sp, #48]	; 0x30
		if (!link) {
   11d50:	2800      	cmp	r0, #0
   11d52:	d100      	bne.n	11d56 <radio_adv_enable+0x62>
   11d54:	e156      	b.n	12004 <radio_adv_enable+0x310>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
		}

		conn = mem_acquire(&_radio.conn_free);
   11d56:	0028      	movs	r0, r5
   11d58:	3009      	adds	r0, #9
   11d5a:	30ff      	adds	r0, #255	; 0xff
   11d5c:	f7f8 fd98 	bl	a890 <mem_acquire>
   11d60:	1e06      	subs	r6, r0, #0
		if (!conn) {
   11d62:	d104      	bne.n	11d6e <radio_adv_enable+0x7a>
			mem_release(link, &_radio.link_rx_free);
   11d64:	49ab      	ldr	r1, [pc, #684]	; (12014 <radio_adv_enable+0x320>)
   11d66:	980c      	ldr	r0, [sp, #48]	; 0x30
   11d68:	f7f8 fdab 	bl	a8c2 <mem_release>

			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   11d6c:	e14a      	b.n	12004 <radio_adv_enable+0x310>
		}

		conn->handle = 0xFFFF;
   11d6e:	2301      	movs	r3, #1
   11d70:	425b      	negs	r3, r3
   11d72:	8403      	strh	r3, [r0, #32]
		conn->llcp_features = RADIO_BLE_FEAT;
   11d74:	0003      	movs	r3, r0
   11d76:	4aa8      	ldr	r2, [pc, #672]	; (12018 <radio_adv_enable+0x324>)
   11d78:	3398      	adds	r3, #152	; 0x98
   11d7a:	601a      	str	r2, [r3, #0]
		conn->data_chan_sel = 0;
   11d7c:	2240      	movs	r2, #64	; 0x40
   11d7e:	7f03      	ldrb	r3, [r0, #28]
		conn->data_chan_use = 0;
   11d80:	77c4      	strb	r4, [r0, #31]
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
		}

		conn->handle = 0xFFFF;
		conn->llcp_features = RADIO_BLE_FEAT;
		conn->data_chan_sel = 0;
   11d82:	4393      	bics	r3, r2
   11d84:	7703      	strb	r3, [r0, #28]
		conn->data_chan_use = 0;
		conn->event_counter = 0;
   11d86:	8444      	strh	r4, [r0, #34]	; 0x22
		conn->latency_prepare = 0;
   11d88:	8504      	strh	r4, [r0, #40]	; 0x28
		conn->latency_event = 0;
   11d8a:	8544      	strh	r4, [r0, #42]	; 0x2a

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
		conn->default_tx_octets = _radio.default_tx_octets;
   11d8c:	35fe      	adds	r5, #254	; 0xfe
   11d8e:	8c2b      	ldrh	r3, [r5, #32]
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
		}

		conn->handle = 0xFFFF;
		conn->llcp_features = RADIO_BLE_FEAT;
		conn->data_chan_sel = 0;
   11d90:	4694      	mov	ip, r2
		conn->event_counter = 0;
		conn->latency_prepare = 0;
		conn->latency_event = 0;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
		conn->default_tx_octets = _radio.default_tx_octets;
   11d92:	8583      	strh	r3, [r0, #44]	; 0x2c
		conn->max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   11d94:	231b      	movs	r3, #27
		conn->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
		conn->phy_pref_tx = _radio.default_phy_tx;
   11d96:	0002      	movs	r2, r0
		conn->latency_prepare = 0;
		conn->latency_event = 0;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
		conn->default_tx_octets = _radio.default_tx_octets;
		conn->max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   11d98:	85c3      	strh	r3, [r0, #46]	; 0x2e
		conn->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   11d9a:	8603      	strh	r3, [r0, #48]	; 0x30
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
		conn->phy_pref_tx = _radio.default_phy_tx;
   11d9c:	8cab      	ldrh	r3, [r5, #36]	; 0x24
   11d9e:	3232      	adds	r2, #50	; 0x32
   11da0:	403b      	ands	r3, r7
   11da2:	0019      	movs	r1, r3
   11da4:	7813      	ldrb	r3, [r2, #0]
		conn->phy_tx = BIT(0);
		conn->phy_pref_flags = 0;
		conn->phy_flags = 0;
   11da6:	4660      	mov	r0, ip
		conn->max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
		conn->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
		conn->phy_pref_tx = _radio.default_phy_tx;
   11da8:	43bb      	bics	r3, r7
   11daa:	430b      	orrs	r3, r1
		conn->phy_tx = BIT(0);
   11dac:	2138      	movs	r1, #56	; 0x38
   11dae:	b2db      	uxtb	r3, r3
   11db0:	438b      	bics	r3, r1
   11db2:	3930      	subs	r1, #48	; 0x30
		conn->phy_pref_flags = 0;
   11db4:	430b      	orrs	r3, r1
		conn->phy_flags = 0;
   11db6:	4383      	bics	r3, r0
   11db8:	303f      	adds	r0, #63	; 0x3f
   11dba:	4003      	ands	r3, r0
   11dbc:	7013      	strb	r3, [r2, #0]
		conn->phy_pref_rx = _radio.default_phy_rx;
   11dbe:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
   11dc0:	7855      	ldrb	r5, [r2, #1]
   11dc2:	403b      	ands	r3, r7
   11dc4:	43bd      	bics	r5, r7
   11dc6:	432b      	orrs	r3, r5
		conn->phy_rx = BIT(0);
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PHY */

		conn->role.slave.role = 1;
   11dc8:	0035      	movs	r5, r6
		conn->phy_pref_tx = _radio.default_phy_tx;
		conn->phy_tx = BIT(0);
		conn->phy_pref_flags = 0;
		conn->phy_flags = 0;
		conn->phy_pref_rx = _radio.default_phy_rx;
		conn->phy_rx = BIT(0);
   11dca:	3847      	subs	r0, #71	; 0x47
   11dcc:	b2db      	uxtb	r3, r3
   11dce:	4383      	bics	r3, r0
   11dd0:	430b      	orrs	r3, r1
   11dd2:	7053      	strb	r3, [r2, #1]
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PHY */

		conn->role.slave.role = 1;
   11dd4:	3544      	adds	r5, #68	; 0x44
   11dd6:	782b      	ldrb	r3, [r5, #0]
		conn->role.slave.latency_cancel = 0;
   11dd8:	3837      	subs	r0, #55	; 0x37
   11dda:	4303      	orrs	r3, r0
   11ddc:	300f      	adds	r0, #15
   11dde:	4383      	bics	r3, r0
   11de0:	702b      	strb	r3, [r5, #0]
		conn->role.slave.window_widening_prepare_us = 0;
		conn->role.slave.window_widening_event_us = 0;
		conn->role.slave.ticks_to_offset = 0;
		conn->supervision_expire = 6;
   11de2:	2306      	movs	r3, #6
   11de4:	86f3      	strh	r3, [r6, #54]	; 0x36
#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_PING)
		conn->apto_expire = 0;
		conn->appto_expire = 0;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

		conn->llcp_req = 0;
   11de6:	0033      	movs	r3, r6
		conn->llcp_ack = 0;
		conn->llcp_version.tx = 0;
		conn->llcp_version.rx = 0;
   11de8:	2501      	movs	r5, #1
#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_PING)
		conn->apto_expire = 0;
		conn->appto_expire = 0;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

		conn->llcp_req = 0;
   11dea:	3368      	adds	r3, #104	; 0x68
		conn->phy_flags = 0;
		conn->phy_pref_rx = _radio.default_phy_rx;
		conn->phy_rx = BIT(0);
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PHY */

		conn->role.slave.role = 1;
   11dec:	1d32      	adds	r2, r6, #4
		conn->role.slave.latency_cancel = 0;
		conn->role.slave.window_widening_prepare_us = 0;
   11dee:	6534      	str	r4, [r6, #80]	; 0x50
		conn->role.slave.window_widening_event_us = 0;
   11df0:	6574      	str	r4, [r6, #84]	; 0x54
		conn->role.slave.ticks_to_offset = 0;
   11df2:	6674      	str	r4, [r6, #100]	; 0x64
		conn->supervision_expire = 6;
		conn->procedure_expire = 0;
   11df4:	8774      	strh	r4, [r6, #58]	; 0x3a

#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_PING)
		conn->apto_expire = 0;
   11df6:	87d4      	strh	r4, [r2, #62]	; 0x3e
		conn->appto_expire = 0;
   11df8:	87f4      	strh	r4, [r6, #62]	; 0x3e
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

		conn->llcp_req = 0;
		conn->llcp_ack = 0;
		conn->llcp_version.tx = 0;
   11dfa:	3298      	adds	r2, #152	; 0x98
#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_PING)
		conn->apto_expire = 0;
		conn->appto_expire = 0;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

		conn->llcp_req = 0;
   11dfc:	701c      	strb	r4, [r3, #0]
		conn->llcp_ack = 0;
   11dfe:	705c      	strb	r4, [r3, #1]
		conn->llcp_version.tx = 0;
   11e00:	7813      	ldrb	r3, [r2, #0]
		conn->llcp_version.rx = 0;
   11e02:	43ab      	bics	r3, r5
   11e04:	196d      	adds	r5, r5, r5
   11e06:	43ab      	bics	r3, r5
   11e08:	7013      	strb	r3, [r2, #0]
		conn->llcp_terminate.req = 0;
   11e0a:	0033      	movs	r3, r6
   11e0c:	33a4      	adds	r3, #164	; 0xa4
   11e0e:	701c      	strb	r4, [r3, #0]
		conn->llcp_terminate.ack = 0;
   11e10:	705c      	strb	r4, [r3, #1]
		conn->llcp_terminate.reason_peer = 0;
		conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link = link;
   11e12:	9a0c      	ldr	r2, [sp, #48]	; 0x30
		conn->llcp_ack = 0;
		conn->llcp_version.tx = 0;
		conn->llcp_version.rx = 0;
		conn->llcp_terminate.req = 0;
		conn->llcp_terminate.ack = 0;
		conn->llcp_terminate.reason_peer = 0;
   11e14:	70dc      	strb	r4, [r3, #3]
		conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link = link;
   11e16:	3304      	adds	r3, #4
   11e18:	601a      	str	r2, [r3, #0]
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
		conn->llcp_phy.req = 0;
		conn->llcp_phy.ack = 0;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PHY */

		conn->sn = 0;
   11e1a:	0032      	movs	r2, r6
		conn->llcp_terminate.ack = 0;
		conn->llcp_terminate.reason_peer = 0;
		conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link = link;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
		conn->llcp_length.req = 0;
   11e1c:	731c      	strb	r4, [r3, #12]
		conn->llcp_length.ack = 0;
   11e1e:	735c      	strb	r4, [r3, #13]
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
		conn->llcp_phy.req = 0;
   11e20:	751c      	strb	r4, [r3, #20]
		conn->llcp_phy.ack = 0;
   11e22:	755c      	strb	r4, [r3, #21]
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PHY */

		conn->sn = 0;
   11e24:	32c0      	adds	r2, #192	; 0xc0
   11e26:	7813      	ldrb	r3, [r2, #0]
		conn->nesn = 0;
   11e28:	3d01      	subs	r5, #1
   11e2a:	43ab      	bics	r3, r5
		conn->pause_rx = 0;
   11e2c:	3501      	adds	r5, #1
   11e2e:	43ab      	bics	r3, r5
		conn->pause_tx = 0;
   11e30:	3502      	adds	r5, #2
   11e32:	43ab      	bics	r3, r5
		conn->enc_rx = 0;
   11e34:	438b      	bics	r3, r1
		conn->enc_tx = 0;
   11e36:	4383      	bics	r3, r0
		conn->refresh = 0;
   11e38:	3118      	adds	r1, #24
   11e3a:	438b      	bics	r3, r1
		conn->empty = 0;
   11e3c:	4661      	mov	r1, ip
   11e3e:	438b      	bics	r3, r1
   11e40:	313f      	adds	r1, #63	; 0x3f
   11e42:	400b      	ands	r3, r1
   11e44:	7013      	strb	r3, [r2, #0]
		conn->pkt_tx_head = NULL;
   11e46:	0033      	movs	r3, r6
   11e48:	33fc      	adds	r3, #252	; 0xfc
   11e4a:	609c      	str	r4, [r3, #8]
		conn->pkt_tx_ctrl = NULL;
   11e4c:	60dc      	str	r4, [r3, #12]
		conn->pkt_tx_data = NULL;
   11e4e:	611c      	str	r4, [r3, #16]
		conn->pkt_tx_last = NULL;
   11e50:	615c      	str	r4, [r3, #20]
		conn->packet_tx_head_len = 0;
   11e52:	761c      	strb	r4, [r3, #24]
		conn->packet_tx_head_offset = 0;
   11e54:	765c      	strb	r4, [r3, #25]
		conn->rssi_latest = 0x7F;
		conn->rssi_reported = 0x7F;
		conn->rssi_sample_count = 0;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_CONN_RSSI */

		_radio.advertiser.conn = conn;
   11e56:	4b6e      	ldr	r3, [pc, #440]	; (12010 <radio_adv_enable+0x31c>)
   11e58:	601e      	str	r6, [r3, #0]
	} else {
		conn = NULL;
	}

#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
	_radio.advertiser.phy_p = phy_p;
   11e5a:	2307      	movs	r3, #7
   11e5c:	4c6b      	ldr	r4, [pc, #428]	; (1200c <radio_adv_enable+0x318>)
#endif /* CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */

	_radio.advertiser.chan_map = chan_map;
   11e5e:	202f      	movs	r0, #47	; 0x2f
	} else {
		conn = NULL;
	}

#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
	_radio.advertiser.phy_p = phy_p;
   11e60:	1da5      	adds	r5, r4, #6
   11e62:	7fe9      	ldrb	r1, [r5, #31]
   11e64:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   11e66:	4399      	bics	r1, r3
   11e68:	401a      	ands	r2, r3
#endif /* CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */

	_radio.advertiser.chan_map = chan_map;
   11e6a:	430a      	orrs	r2, r1
   11e6c:	2138      	movs	r1, #56	; 0x38
   11e6e:	af06      	add	r7, sp, #24
   11e70:	19c0      	adds	r0, r0, r7
   11e72:	7807      	ldrb	r7, [r0, #0]
   11e74:	438a      	bics	r2, r1
   11e76:	403b      	ands	r3, r7
   11e78:	00db      	lsls	r3, r3, #3
	_radio.advertiser.filter_policy = filter_policy;
   11e7a:	4313      	orrs	r3, r2
   11e7c:	223f      	movs	r2, #63	; 0x3f
   11e7e:	990f      	ldr	r1, [sp, #60]	; 0x3c
   11e80:	4013      	ands	r3, r2
   11e82:	018f      	lsls	r7, r1, #6
   11e84:	433b      	orrs	r3, r7
   11e86:	77eb      	strb	r3, [r5, #31]
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	_radio.advertiser.rl_idx = rl_idx;
   11e88:	250f      	movs	r5, #15
   11e8a:	1de1      	adds	r1, r4, #7
   11e8c:	7fcb      	ldrb	r3, [r1, #31]
   11e8e:	9a10      	ldr	r2, [sp, #64]	; 0x40
   11e90:	43ab      	bics	r3, r5
   11e92:	402a      	ands	r2, r5
   11e94:	4313      	orrs	r3, r2
   11e96:	77cb      	strb	r3, [r1, #31]
#else
	ARG_UNUSED(rl_idx);
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */

	_radio.advertiser.hdr.ticks_active_to_start =
		_radio.ticks_active_to_start;
   11e98:	23c0      	movs	r3, #192	; 0xc0
   11e9a:	005b      	lsls	r3, r3, #1
	_radio.advertiser.rl_idx = rl_idx;
#else
	ARG_UNUSED(rl_idx);
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */

	_radio.advertiser.hdr.ticks_active_to_start =
   11e9c:	58e3      	ldr	r3, [r4, r3]
	_radio.advertiser.hdr.ticks_xtal_to_start =
		TICKER_US_TO_TICKS(RADIO_TICKER_XTAL_OFFSET_US);
	_radio.advertiser.hdr.ticks_preempt_to_start =
		TICKER_US_TO_TICKS(RADIO_TICKER_PREEMPT_PART_MIN_US);

	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
   11e9e:	2101      	movs	r1, #1
	_radio.advertiser.rl_idx = rl_idx;
#else
	ARG_UNUSED(rl_idx);
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */

	_radio.advertiser.hdr.ticks_active_to_start =
   11ea0:	61a3      	str	r3, [r4, #24]
		_radio.ticks_active_to_start;
	_radio.advertiser.hdr.ticks_xtal_to_start =
   11ea2:	2327      	movs	r3, #39	; 0x27
   11ea4:	6163      	str	r3, [r4, #20]
		TICKER_US_TO_TICKS(RADIO_TICKER_XTAL_OFFSET_US);
	_radio.advertiser.hdr.ticks_preempt_to_start =
   11ea6:	2300      	movs	r3, #0
   11ea8:	61e3      	str	r3, [r4, #28]
		TICKER_US_TO_TICKS(RADIO_TICKER_PREEMPT_PART_MIN_US);

	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
   11eaa:	f7f8 fd73 	bl	a994 <util_ones_count_get>

	if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   11eae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   11eb0:	79df      	ldrb	r7, [r3, #7]
   11eb2:	402f      	ands	r7, r5
   11eb4:	2f01      	cmp	r7, #1
   11eb6:	d105      	bne.n	11ec4 <radio_adv_enable+0x1d0>
		/* Max. chain is DIRECT_IND * channels + CONNECT_IND */
		ticks_slot = ((RADIO_TICKER_START_PART_US + 176 + 152 + 40) *
   11eb8:	23a7      	movs	r3, #167	; 0xa7
   11eba:	009b      	lsls	r3, r3, #2
   11ebc:	4358      	muls	r0, r3
   11ebe:	3039      	adds	r0, #57	; 0x39
   11ec0:	30ff      	adds	r0, #255	; 0xff
   11ec2:	e006      	b.n	11ed2 <radio_adv_enable+0x1de>
			      chan_cnt) - 40 + 352;
	} else if (pdu_adv->type == PDU_ADV_TYPE_NONCONN_IND) {
   11ec4:	2f02      	cmp	r7, #2
   11ec6:	d102      	bne.n	11ece <radio_adv_enable+0x1da>
		ticks_slot = (RADIO_TICKER_START_PART_US + 376) * chan_cnt;
   11ec8:	23a9      	movs	r3, #169	; 0xa9
   11eca:	009b      	lsls	r3, r3, #2
   11ecc:	e000      	b.n	11ed0 <radio_adv_enable+0x1dc>
	} else {
		/* Max. chain is ADV/SCAN_IND + SCAN_REQ + SCAN_RESP */
		ticks_slot = (RADIO_TICKER_START_PART_US + 376 + 152 + 176 +
   11ece:	4b53      	ldr	r3, [pc, #332]	; (1201c <radio_adv_enable+0x328>)
   11ed0:	4358      	muls	r0, r3
			      152 + 376) * chan_cnt;
	}
	_radio.advertiser.hdr.ticks_slot = TICKER_US_TO_TICKS(ticks_slot);
   11ed2:	4a53      	ldr	r2, [pc, #332]	; (12020 <radio_adv_enable+0x32c>)
   11ed4:	2300      	movs	r3, #0
			      chan_cnt) - 40 + 352;
	} else if (pdu_adv->type == PDU_ADV_TYPE_NONCONN_IND) {
		ticks_slot = (RADIO_TICKER_START_PART_US + 376) * chan_cnt;
	} else {
		/* Max. chain is ADV/SCAN_IND + SCAN_REQ + SCAN_RESP */
		ticks_slot = (RADIO_TICKER_START_PART_US + 376 + 152 + 176 +
   11ed6:	b280      	uxth	r0, r0
			      152 + 376) * chan_cnt;
	}
	_radio.advertiser.hdr.ticks_slot = TICKER_US_TO_TICKS(ticks_slot);
   11ed8:	2100      	movs	r1, #0
   11eda:	f7ee faf7 	bl	4cc <__aeabi_lmul>
   11ede:	2307      	movs	r3, #7
   11ee0:	4a50      	ldr	r2, [pc, #320]	; (12024 <radio_adv_enable+0x330>)
   11ee2:	f7ee fad3 	bl	48c <__aeabi_uldivmod>

	ticks_slot_offset =
   11ee6:	6963      	ldr	r3, [r4, #20]
   11ee8:	69a5      	ldr	r5, [r4, #24]
	} else {
		/* Max. chain is ADV/SCAN_IND + SCAN_REQ + SCAN_RESP */
		ticks_slot = (RADIO_TICKER_START_PART_US + 376 + 152 + 176 +
			      152 + 376) * chan_cnt;
	}
	_radio.advertiser.hdr.ticks_slot = TICKER_US_TO_TICKS(ticks_slot);
   11eea:	6220      	str	r0, [r4, #32]

	ticks_slot_offset =
   11eec:	429d      	cmp	r5, r3
   11eee:	d200      	bcs.n	11ef2 <radio_adv_enable+0x1fe>
   11ef0:	001d      	movs	r5, r3
		 _radio.advertiser.hdr.ticks_xtal_to_start) ?
		_radio.advertiser.hdr.ticks_xtal_to_start :
		_radio.advertiser.hdr.ticks_active_to_start;

	/* High Duty Cycle Directed Advertising if interval is 0. */
	if ((pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
   11ef2:	2f01      	cmp	r7, #1
   11ef4:	d13a      	bne.n	11f6c <radio_adv_enable+0x278>
   11ef6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   11ef8:	2b00      	cmp	r3, #0
   11efa:	d137      	bne.n	11f6c <radio_adv_enable+0x278>
	    !interval) {
		u32_t ticks_now = ticker_ticks_now_get();
   11efc:	f7fa f8e8 	bl	c0d0 <ticker_ticks_now_get>

		ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   11f00:	ab13      	add	r3, sp, #76	; 0x4c
   11f02:	9308      	str	r3, [sp, #32]
   11f04:	4b48      	ldr	r3, [pc, #288]	; (12028 <radio_adv_enable+0x334>)
		_radio.advertiser.hdr.ticks_active_to_start;

	/* High Duty Cycle Directed Advertising if interval is 0. */
	if ((pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
	    !interval) {
		u32_t ticks_now = ticker_ticks_now_get();
   11f06:	0007      	movs	r7, r0

		ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   11f08:	9307      	str	r3, [sp, #28]
   11f0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   11f0c:	2205      	movs	r2, #5
   11f0e:	9306      	str	r3, [sp, #24]
   11f10:	4b46      	ldr	r3, [pc, #280]	; (1202c <radio_adv_enable+0x338>)
   11f12:	2103      	movs	r1, #3
   11f14:	9305      	str	r3, [sp, #20]
   11f16:	6a23      	ldr	r3, [r4, #32]
   11f18:	195d      	adds	r5, r3, r5
   11f1a:	b2ab      	uxth	r3, r5
   11f1c:	9304      	str	r3, [sp, #16]
   11f1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   11f20:	9501      	str	r5, [sp, #4]
   11f22:	9303      	str	r3, [sp, #12]
   11f24:	9302      	str	r3, [sp, #8]
   11f26:	9300      	str	r3, [sp, #0]
   11f28:	0003      	movs	r3, r0
   11f2a:	980b      	ldr	r0, [sp, #44]	; 0x2c
   11f2c:	f7f9 ff9c 	bl	be68 <ticker_start>
   11f30:	4d3d      	ldr	r5, [pc, #244]	; (12028 <radio_adv_enable+0x334>)
				   (ticks_slot_offset +
				    _radio.advertiser.hdr.ticks_slot),
				   radio_event_adv_prepare, NULL,
				   ticker_if_done, (void *)&ret_cb);

		if (ret == TICKER_STATUS_BUSY) {
   11f32:	2802      	cmp	r0, #2
   11f34:	d014      	beq.n	11f60 <radio_adv_enable+0x26c>
			while (ret_cb == TICKER_STATUS_BUSY) {
				cpu_sleep();
			}
		}

		if (ret_cb != TICKER_STATUS_SUCCESS) {
   11f36:	9813      	ldr	r0, [sp, #76]	; 0x4c
   11f38:	2800      	cmp	r0, #0
   11f3a:	d152      	bne.n	11fe2 <radio_adv_enable+0x2ee>
			goto failure_cleanup;
		}

		ret_cb = TICKER_STATUS_BUSY;
   11f3c:	2302      	movs	r3, #2
		ret =
   11f3e:	2203      	movs	r2, #3

		if (ret_cb != TICKER_STATUS_SUCCESS) {
			goto failure_cleanup;
		}

		ret_cb = TICKER_STATUS_BUSY;
   11f40:	9313      	str	r3, [sp, #76]	; 0x4c
		ret =
   11f42:	ab13      	add	r3, sp, #76	; 0x4c
   11f44:	9308      	str	r3, [sp, #32]
   11f46:	4b3a      	ldr	r3, [pc, #232]	; (12030 <radio_adv_enable+0x33c>)
   11f48:	9507      	str	r5, [sp, #28]
   11f4a:	9305      	str	r3, [sp, #20]
   11f4c:	4b39      	ldr	r3, [pc, #228]	; (12034 <radio_adv_enable+0x340>)
   11f4e:	9006      	str	r0, [sp, #24]
   11f50:	9300      	str	r3, [sp, #0]
   11f52:	9004      	str	r0, [sp, #16]
   11f54:	9003      	str	r0, [sp, #12]
   11f56:	9002      	str	r0, [sp, #8]
   11f58:	9001      	str	r0, [sp, #4]
   11f5a:	003b      	movs	r3, r7
   11f5c:	0011      	movs	r1, r2
   11f5e:	e026      	b.n	11fae <radio_adv_enable+0x2ba>
				    _radio.advertiser.hdr.ticks_slot),
				   radio_event_adv_prepare, NULL,
				   ticker_if_done, (void *)&ret_cb);

		if (ret == TICKER_STATUS_BUSY) {
			while (ret_cb == TICKER_STATUS_BUSY) {
   11f60:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   11f62:	2b02      	cmp	r3, #2
   11f64:	d1e7      	bne.n	11f36 <radio_adv_enable+0x242>
				cpu_sleep();
   11f66:	f7fa f8df 	bl	c128 <cpu_sleep>
   11f6a:	e7f9      	b.n	11f60 <radio_adv_enable+0x26c>
				     TICKER_NULL_PERIOD, TICKER_NULL_REMAINDER,
				     TICKER_NULL_LAZY, TICKER_NULL_SLOT,
				     event_adv_stop, NULL, ticker_if_done,
				     (void *)&ret_cb);
	} else {
		ret =
   11f6c:	2700      	movs	r7, #0
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   11f6e:	f7fa f8af 	bl	c0d0 <ticker_ticks_now_get>
				     TICKER_NULL_PERIOD, TICKER_NULL_REMAINDER,
				     TICKER_NULL_LAZY, TICKER_NULL_SLOT,
				     event_adv_stop, NULL, ticker_if_done,
				     (void *)&ret_cb);
	} else {
		ret =
   11f72:	ab13      	add	r3, sp, #76	; 0x4c
   11f74:	9308      	str	r3, [sp, #32]
   11f76:	4b2c      	ldr	r3, [pc, #176]	; (12028 <radio_adv_enable+0x334>)
   11f78:	9706      	str	r7, [sp, #24]
   11f7a:	9307      	str	r3, [sp, #28]
   11f7c:	4b2b      	ldr	r3, [pc, #172]	; (1202c <radio_adv_enable+0x338>)
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   11f7e:	900c      	str	r0, [sp, #48]	; 0x30
				     TICKER_NULL_PERIOD, TICKER_NULL_REMAINDER,
				     TICKER_NULL_LAZY, TICKER_NULL_SLOT,
				     event_adv_stop, NULL, ticker_if_done,
				     (void *)&ret_cb);
	} else {
		ret =
   11f80:	9305      	str	r3, [sp, #20]
   11f82:	6a23      	ldr	r3, [r4, #32]
   11f84:	4a2c      	ldr	r2, [pc, #176]	; (12038 <radio_adv_enable+0x344>)
   11f86:	195d      	adds	r5, r3, r5
   11f88:	b2ad      	uxth	r5, r5
   11f8a:	2391      	movs	r3, #145	; 0x91
   11f8c:	980b      	ldr	r0, [sp, #44]	; 0x2c
   11f8e:	0039      	movs	r1, r7
   11f90:	9504      	str	r5, [sp, #16]
   11f92:	9703      	str	r7, [sp, #12]
   11f94:	9702      	str	r7, [sp, #8]
   11f96:	f7ee fa99 	bl	4cc <__aeabi_lmul>
   11f9a:	4a22      	ldr	r2, [pc, #136]	; (12024 <radio_adv_enable+0x330>)
   11f9c:	2307      	movs	r3, #7
   11f9e:	f7ee fa75 	bl	48c <__aeabi_uldivmod>
   11fa2:	2205      	movs	r2, #5
   11fa4:	9001      	str	r0, [sp, #4]
   11fa6:	2103      	movs	r1, #3
   11fa8:	0038      	movs	r0, r7
   11faa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   11fac:	9700      	str	r7, [sp, #0]
   11fae:	f7f9 ff5b 	bl	be68 <ticker_start>
				      _radio.advertiser.hdr.ticks_slot),
				     radio_event_adv_prepare, NULL,
				     ticker_if_done, (void *)&ret_cb);
	}

	if (ret == TICKER_STATUS_BUSY) {
   11fb2:	2802      	cmp	r0, #2
   11fb4:	d003      	beq.n	11fbe <radio_adv_enable+0x2ca>
		while (ret_cb == TICKER_STATUS_BUSY) {
			cpu_sleep();
		}
	}

	if (ret_cb == TICKER_STATUS_SUCCESS) {
   11fb6:	9f13      	ldr	r7, [sp, #76]	; 0x4c
   11fb8:	2f00      	cmp	r7, #0
   11fba:	d006      	beq.n	11fca <radio_adv_enable+0x2d6>
   11fbc:	e011      	b.n	11fe2 <radio_adv_enable+0x2ee>
				     radio_event_adv_prepare, NULL,
				     ticker_if_done, (void *)&ret_cb);
	}

	if (ret == TICKER_STATUS_BUSY) {
		while (ret_cb == TICKER_STATUS_BUSY) {
   11fbe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   11fc0:	2b02      	cmp	r3, #2
   11fc2:	d1f8      	bne.n	11fb6 <radio_adv_enable+0x2c2>
			cpu_sleep();
   11fc4:	f7fa f8b0 	bl	c128 <cpu_sleep>
   11fc8:	e7f9      	b.n	11fbe <radio_adv_enable+0x2ca>
		}
	}

	if (ret_cb == TICKER_STATUS_SUCCESS) {
		_radio.advertiser.is_enabled = 1;
   11fca:	2001      	movs	r0, #1
   11fcc:	1d62      	adds	r2, r4, #5
   11fce:	7fd3      	ldrb	r3, [r2, #31]

		if (!_radio.scanner.is_enabled) {
   11fd0:	34dc      	adds	r4, #220	; 0xdc
			cpu_sleep();
		}
	}

	if (ret_cb == TICKER_STATUS_SUCCESS) {
		_radio.advertiser.is_enabled = 1;
   11fd2:	4303      	orrs	r3, r0
   11fd4:	77d3      	strb	r3, [r2, #31]

		if (!_radio.scanner.is_enabled) {
   11fd6:	7823      	ldrb	r3, [r4, #0]
   11fd8:	4203      	tst	r3, r0
   11fda:	d113      	bne.n	12004 <radio_adv_enable+0x310>
			ll_adv_scan_state_cb(BIT(0));
   11fdc:	f7ff fe6e 	bl	11cbc <ll_adv_scan_state_cb>
   11fe0:	e010      	b.n	12004 <radio_adv_enable+0x310>
		return 0;
	}

failure_cleanup:

	if (conn) {
   11fe2:	2e00      	cmp	r6, #0
   11fe4:	d00d      	beq.n	12002 <radio_adv_enable+0x30e>
		mem_release(conn->llcp_terminate.radio_pdu_node_rx.hdr.
   11fe6:	0021      	movs	r1, r4
   11fe8:	0033      	movs	r3, r6
   11fea:	3145      	adds	r1, #69	; 0x45
   11fec:	33a8      	adds	r3, #168	; 0xa8
   11fee:	31ff      	adds	r1, #255	; 0xff
   11ff0:	6818      	ldr	r0, [r3, #0]
   11ff2:	f7f8 fc66 	bl	a8c2 <mem_release>
			    onion.link, &_radio.link_rx_free);
		mem_release(conn, &_radio.conn_free);
   11ff6:	0021      	movs	r1, r4
   11ff8:	3109      	adds	r1, #9
   11ffa:	31ff      	adds	r1, #255	; 0xff
   11ffc:	0030      	movs	r0, r6
   11ffe:	f7f8 fc60 	bl	a8c2 <mem_release>
	}

	return BT_HCI_ERR_CMD_DISALLOWED;
   12002:	270c      	movs	r7, #12
}
   12004:	0038      	movs	r0, r7
   12006:	b015      	add	sp, #84	; 0x54
   12008:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1200a:	46c0      	nop			; (mov r8, r8)
   1200c:	200015c0 	.word	0x200015c0
   12010:	20001688 	.word	0x20001688
   12014:	20001704 	.word	0x20001704
   12018:	0000407f 	.word	0x0000407f
   1201c:	000005fc 	.word	0x000005fc
   12020:	3b9aca00 	.word	0x3b9aca00
   12024:	1afd498d 	.word	0x1afd498d
   12028:	0000c131 	.word	0x0000c131
   1202c:	0000dce5 	.word	0x0000dce5
   12030:	0000cc39 	.word	0x0000cc39
   12034:	0000a3fe 	.word	0x0000a3fe
   12038:	84e72a00 	.word	0x84e72a00

0001203c <radio_adv_disable>:

u32_t radio_adv_disable(void)
{
   1203c:	b570      	push	{r4, r5, r6, lr}
	u32_t status;

	status = role_disable(RADIO_TICKER_ID_ADV,
   1203e:	2103      	movs	r1, #3
   12040:	2005      	movs	r0, #5
   12042:	f7fa fa07 	bl	c454 <role_disable>
				    &_radio.link_rx_free);
			mem_release(conn, &_radio.conn_free);
		}
	}

	return status ? BT_HCI_ERR_CMD_DISALLOWED : 0;
   12046:	230c      	movs	r3, #12
{
	u32_t status;

	status = role_disable(RADIO_TICKER_ID_ADV,
			      RADIO_TICKER_ID_ADV_STOP);
	if (!status) {
   12048:	2800      	cmp	r0, #0
   1204a:	d122      	bne.n	12092 <radio_adv_disable+0x56>
		struct connection *conn;

		_radio.advertiser.is_enabled = 0;
   1204c:	4c12      	ldr	r4, [pc, #72]	; (12098 <radio_adv_disable+0x5c>)
   1204e:	3b0b      	subs	r3, #11
   12050:	1d61      	adds	r1, r4, #5
   12052:	7fca      	ldrb	r2, [r1, #31]
   12054:	439a      	bics	r2, r3
   12056:	77ca      	strb	r2, [r1, #31]

		if (!_radio.scanner.is_enabled) {
   12058:	0022      	movs	r2, r4
   1205a:	32dc      	adds	r2, #220	; 0xdc
   1205c:	7810      	ldrb	r0, [r2, #0]
   1205e:	4018      	ands	r0, r3
   12060:	d101      	bne.n	12066 <radio_adv_disable+0x2a>
			ll_adv_scan_state_cb(0);
   12062:	f7ff fe2b 	bl	11cbc <ll_adv_scan_state_cb>
		}

		conn = _radio.advertiser.conn;
   12066:	0023      	movs	r3, r4
   12068:	33c8      	adds	r3, #200	; 0xc8
   1206a:	681d      	ldr	r5, [r3, #0]
		if (conn) {
   1206c:	2d00      	cmp	r5, #0
   1206e:	d00f      	beq.n	12090 <radio_adv_disable+0x54>
			_radio.advertiser.conn = NULL;
   12070:	2200      	movs	r2, #0

			mem_release(conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link,
   12072:	0021      	movs	r1, r4
			ll_adv_scan_state_cb(0);
		}

		conn = _radio.advertiser.conn;
		if (conn) {
			_radio.advertiser.conn = NULL;
   12074:	601a      	str	r2, [r3, #0]

			mem_release(conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link,
   12076:	002b      	movs	r3, r5
   12078:	3145      	adds	r1, #69	; 0x45
   1207a:	33a8      	adds	r3, #168	; 0xa8
   1207c:	31ff      	adds	r1, #255	; 0xff
   1207e:	6818      	ldr	r0, [r3, #0]
   12080:	f7f8 fc1f 	bl	a8c2 <mem_release>
				    &_radio.link_rx_free);
			mem_release(conn, &_radio.conn_free);
   12084:	0021      	movs	r1, r4
   12086:	3109      	adds	r1, #9
   12088:	31ff      	adds	r1, #255	; 0xff
   1208a:	0028      	movs	r0, r5
   1208c:	f7f8 fc19 	bl	a8c2 <mem_release>
		}
	}

	return status ? BT_HCI_ERR_CMD_DISALLOWED : 0;
   12090:	2300      	movs	r3, #0
}
   12092:	0018      	movs	r0, r3
   12094:	bd70      	pop	{r4, r5, r6, pc}
   12096:	46c0      	nop			; (mov r8, r8)
   12098:	200015c0 	.word	0x200015c0

0001209c <radio_rx_dequeue>:
	return cmplt;
}

void radio_rx_dequeue(void)
{
	struct radio_pdu_node_rx *radio_pdu_node_rx = NULL;
   1209c:	2300      	movs	r3, #0

	return cmplt;
}

void radio_rx_dequeue(void)
{
   1209e:	b530      	push	{r4, r5, lr}
	struct radio_pdu_node_rx *radio_pdu_node_rx = NULL;
	void *link;

	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
   120a0:	4d50      	ldr	r5, [pc, #320]	; (121e4 <radio_rx_dequeue+0x148>)

	return cmplt;
}

void radio_rx_dequeue(void)
{
   120a2:	b085      	sub	sp, #20
	struct radio_pdu_node_rx *radio_pdu_node_rx = NULL;
   120a4:	9303      	str	r3, [sp, #12]
	void *link;

	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
   120a6:	0029      	movs	r1, r5
   120a8:	002b      	movs	r3, r5
   120aa:	3149      	adds	r1, #73	; 0x49
   120ac:	33fc      	adds	r3, #252	; 0xfc
   120ae:	6d18      	ldr	r0, [r3, #80]	; 0x50
   120b0:	31ff      	adds	r1, #255	; 0xff
   120b2:	aa03      	add	r2, sp, #12
   120b4:	f7f8 fc5f 	bl	a976 <memq_dequeue>
   120b8:	002c      	movs	r4, r5
			    (void **)&radio_pdu_node_rx);
	LL_ASSERT(link);
   120ba:	2800      	cmp	r0, #0
   120bc:	d108      	bne.n	120d0 <radio_rx_dequeue+0x34>
   120be:	4b4a      	ldr	r3, [pc, #296]	; (121e8 <radio_rx_dequeue+0x14c>)
   120c0:	4a4a      	ldr	r2, [pc, #296]	; (121ec <radio_rx_dequeue+0x150>)
   120c2:	9301      	str	r3, [sp, #4]
   120c4:	4b4a      	ldr	r3, [pc, #296]	; (121f0 <radio_rx_dequeue+0x154>)
   120c6:	494b      	ldr	r1, [pc, #300]	; (121f4 <radio_rx_dequeue+0x158>)
   120c8:	9300      	str	r3, [sp, #0]
   120ca:	484b      	ldr	r0, [pc, #300]	; (121f8 <radio_rx_dequeue+0x15c>)
   120cc:	4b4b      	ldr	r3, [pc, #300]	; (121fc <radio_rx_dequeue+0x160>)
   120ce:	e021      	b.n	12114 <radio_rx_dequeue+0x78>

	mem_release(link, &_radio.link_rx_free);
   120d0:	0029      	movs	r1, r5
   120d2:	3145      	adds	r1, #69	; 0x45
   120d4:	31ff      	adds	r1, #255	; 0xff
   120d6:	f7f8 fbf4 	bl	a8c2 <mem_release>

	switch (radio_pdu_node_rx->hdr.type) {
   120da:	9b03      	ldr	r3, [sp, #12]
   120dc:	7919      	ldrb	r1, [r3, #4]
   120de:	290c      	cmp	r1, #12
   120e0:	d820      	bhi.n	12124 <radio_rx_dequeue+0x88>
   120e2:	2201      	movs	r2, #1
   120e4:	408a      	lsls	r2, r1
   120e6:	4946      	ldr	r1, [pc, #280]	; (12200 <radio_rx_dequeue+0x164>)
   120e8:	420a      	tst	r2, r1
   120ea:	d102      	bne.n	120f2 <radio_rx_dequeue+0x56>
   120ec:	0612      	lsls	r2, r2, #24
   120ee:	d422      	bmi.n	12136 <radio_rx_dequeue+0x9a>
   120f0:	e018      	b.n	12124 <radio_rx_dequeue+0x88>
#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_INDICATION)
	case NODE_RX_TYPE_ADV_INDICATION:
#endif /* CONFIG_BLUETOOTH_CONTROLLER_ADV_INDICATION */

		/* release data link credit quota */
		LL_ASSERT(_radio.link_rx_data_quota <
   120f2:	219e      	movs	r1, #158	; 0x9e
   120f4:	20a8      	movs	r0, #168	; 0xa8
   120f6:	0049      	lsls	r1, r1, #1
   120f8:	0040      	lsls	r0, r0, #1
   120fa:	5c69      	ldrb	r1, [r5, r1]
   120fc:	5c2a      	ldrb	r2, [r5, r0]
   120fe:	3901      	subs	r1, #1
   12100:	428a      	cmp	r2, r1
   12102:	db0c      	blt.n	1211e <radio_rx_dequeue+0x82>
   12104:	4b38      	ldr	r3, [pc, #224]	; (121e8 <radio_rx_dequeue+0x14c>)
   12106:	4a39      	ldr	r2, [pc, #228]	; (121ec <radio_rx_dequeue+0x150>)
   12108:	9301      	str	r3, [sp, #4]
   1210a:	4b39      	ldr	r3, [pc, #228]	; (121f0 <radio_rx_dequeue+0x154>)
   1210c:	4939      	ldr	r1, [pc, #228]	; (121f4 <radio_rx_dequeue+0x158>)
   1210e:	9300      	str	r3, [sp, #0]
   12110:	483c      	ldr	r0, [pc, #240]	; (12204 <radio_rx_dequeue+0x168>)
   12112:	4b3a      	ldr	r3, [pc, #232]	; (121fc <radio_rx_dequeue+0x160>)
   12114:	f7ef fc34 	bl	1980 <printk>
   12118:	b662      	cpsie	i
   1211a:	2004      	movs	r0, #4
   1211c:	df02      	svc	2
			  (_radio.packet_rx_count - 1));

		_radio.link_rx_data_quota++;
   1211e:	3201      	adds	r2, #1
   12120:	542a      	strb	r2, [r5, r0]
		break;
   12122:	e008      	b.n	12136 <radio_rx_dequeue+0x9a>
	case NODE_RX_TYPE_TERMINATE:
		/* did not use data link quota */
		break;

	default:
		LL_ASSERT(0);
   12124:	4b30      	ldr	r3, [pc, #192]	; (121e8 <radio_rx_dequeue+0x14c>)
   12126:	4a31      	ldr	r2, [pc, #196]	; (121ec <radio_rx_dequeue+0x150>)
   12128:	9301      	str	r3, [sp, #4]
   1212a:	4b31      	ldr	r3, [pc, #196]	; (121f0 <radio_rx_dequeue+0x154>)
   1212c:	4931      	ldr	r1, [pc, #196]	; (121f4 <radio_rx_dequeue+0x158>)
   1212e:	9300      	str	r3, [sp, #0]
   12130:	4835      	ldr	r0, [pc, #212]	; (12208 <radio_rx_dequeue+0x16c>)
   12132:	4b32      	ldr	r3, [pc, #200]	; (121fc <radio_rx_dequeue+0x160>)
   12134:	e7ee      	b.n	12114 <radio_rx_dequeue+0x78>
		break;
	}

	if (radio_pdu_node_rx->hdr.type == NODE_RX_TYPE_CONNECTION) {
   12136:	791a      	ldrb	r2, [r3, #4]
   12138:	2a06      	cmp	r2, #6
   1213a:	d151      	bne.n	121e0 <radio_rx_dequeue+0x144>
		struct pdu_data *pdu_data_rx;
		u8_t bm;

		pdu_data_rx = (void *)radio_pdu_node_rx->pdu_data;
		radio_le_conn_cmplt = (void *)&pdu_data_rx->payload;
		if ((radio_le_conn_cmplt->status == 0x3c) ||
   1213c:	001a      	movs	r2, r3
   1213e:	7adb      	ldrb	r3, [r3, #11]
   12140:	320b      	adds	r2, #11
   12142:	2b3c      	cmp	r3, #60	; 0x3c
   12144:	d004      	beq.n	12150 <radio_rx_dequeue+0xb4>
   12146:	7853      	ldrb	r3, [r2, #1]
   12148:	2b00      	cmp	r3, #0
   1214a:	d027      	beq.n	1219c <radio_rx_dequeue+0x100>
		break;
	}

	if (radio_pdu_node_rx->hdr.type == NODE_RX_TYPE_CONNECTION) {
		struct radio_le_conn_cmplt *radio_le_conn_cmplt;
		struct connection *conn = NULL;
   1214c:	2500      	movs	r5, #0
   1214e:	e004      	b.n	1215a <radio_rx_dequeue+0xbe>
		pdu_data_rx = (void *)radio_pdu_node_rx->pdu_data;
		radio_le_conn_cmplt = (void *)&pdu_data_rx->payload;
		if ((radio_le_conn_cmplt->status == 0x3c) ||
		    radio_le_conn_cmplt->role) {
			if (radio_le_conn_cmplt->status == 0x3c) {
				conn = _radio.advertiser.conn;
   12150:	0023      	movs	r3, r4
				_radio.advertiser.conn = NULL;
   12152:	2200      	movs	r2, #0
		pdu_data_rx = (void *)radio_pdu_node_rx->pdu_data;
		radio_le_conn_cmplt = (void *)&pdu_data_rx->payload;
		if ((radio_le_conn_cmplt->status == 0x3c) ||
		    radio_le_conn_cmplt->role) {
			if (radio_le_conn_cmplt->status == 0x3c) {
				conn = _radio.advertiser.conn;
   12154:	33c8      	adds	r3, #200	; 0xc8
   12156:	681d      	ldr	r5, [r3, #0]
				_radio.advertiser.conn = NULL;
   12158:	601a      	str	r2, [r3, #0]
			}

			LL_ASSERT(_radio.advertiser.is_enabled);
   1215a:	2101      	movs	r1, #1
   1215c:	1d62      	adds	r2, r4, #5
   1215e:	7fd3      	ldrb	r3, [r2, #31]
   12160:	420b      	tst	r3, r1
   12162:	d108      	bne.n	12176 <radio_rx_dequeue+0xda>
   12164:	4b20      	ldr	r3, [pc, #128]	; (121e8 <radio_rx_dequeue+0x14c>)
   12166:	4a21      	ldr	r2, [pc, #132]	; (121ec <radio_rx_dequeue+0x150>)
   12168:	9301      	str	r3, [sp, #4]
   1216a:	4b21      	ldr	r3, [pc, #132]	; (121f0 <radio_rx_dequeue+0x154>)
   1216c:	4921      	ldr	r1, [pc, #132]	; (121f4 <radio_rx_dequeue+0x158>)
   1216e:	9300      	str	r3, [sp, #0]
   12170:	4826      	ldr	r0, [pc, #152]	; (1220c <radio_rx_dequeue+0x170>)
   12172:	4b22      	ldr	r3, [pc, #136]	; (121fc <radio_rx_dequeue+0x160>)
   12174:	e7ce      	b.n	12114 <radio_rx_dequeue+0x78>
			_radio.advertiser.is_enabled = 0;
   12176:	438b      	bics	r3, r1
   12178:	77d3      	strb	r3, [r2, #31]
		} else {
			LL_ASSERT(_radio.scanner.is_enabled);
			_radio.scanner.is_enabled = 0;
		}

		if (conn) {
   1217a:	2d00      	cmp	r5, #0
   1217c:	d01f      	beq.n	121be <radio_rx_dequeue+0x122>
			struct radio_pdu_node_rx *node_rx = (void *)
				&conn->llcp_terminate.radio_pdu_node_rx;

			mem_release(node_rx->hdr.onion.link,
   1217e:	0021      	movs	r1, r4
   12180:	002b      	movs	r3, r5
   12182:	3145      	adds	r1, #69	; 0x45
   12184:	33a8      	adds	r3, #168	; 0xa8
   12186:	6818      	ldr	r0, [r3, #0]
   12188:	31ff      	adds	r1, #255	; 0xff
   1218a:	f7f8 fb9a 	bl	a8c2 <mem_release>
				    &_radio.link_rx_free);
			mem_release(conn, &_radio.conn_free);
   1218e:	0021      	movs	r1, r4
   12190:	3109      	adds	r1, #9
   12192:	31ff      	adds	r1, #255	; 0xff
   12194:	0028      	movs	r0, r5
   12196:	f7f8 fb94 	bl	a8c2 <mem_release>
   1219a:	e010      	b.n	121be <radio_rx_dequeue+0x122>
			}

			LL_ASSERT(_radio.advertiser.is_enabled);
			_radio.advertiser.is_enabled = 0;
		} else {
			LL_ASSERT(_radio.scanner.is_enabled);
   1219c:	0022      	movs	r2, r4
   1219e:	2101      	movs	r1, #1
   121a0:	32dc      	adds	r2, #220	; 0xdc
   121a2:	7813      	ldrb	r3, [r2, #0]
   121a4:	420b      	tst	r3, r1
   121a6:	d108      	bne.n	121ba <radio_rx_dequeue+0x11e>
   121a8:	4b0f      	ldr	r3, [pc, #60]	; (121e8 <radio_rx_dequeue+0x14c>)
   121aa:	4a10      	ldr	r2, [pc, #64]	; (121ec <radio_rx_dequeue+0x150>)
   121ac:	9301      	str	r3, [sp, #4]
   121ae:	4b10      	ldr	r3, [pc, #64]	; (121f0 <radio_rx_dequeue+0x154>)
   121b0:	4910      	ldr	r1, [pc, #64]	; (121f4 <radio_rx_dequeue+0x158>)
   121b2:	9300      	str	r3, [sp, #0]
   121b4:	4816      	ldr	r0, [pc, #88]	; (12210 <radio_rx_dequeue+0x174>)
   121b6:	4b11      	ldr	r3, [pc, #68]	; (121fc <radio_rx_dequeue+0x160>)
   121b8:	e7ac      	b.n	12114 <radio_rx_dequeue+0x78>
			_radio.scanner.is_enabled = 0;
   121ba:	438b      	bics	r3, r1
   121bc:	7013      	strb	r3, [r2, #0]
			mem_release(node_rx->hdr.onion.link,
				    &_radio.link_rx_free);
			mem_release(conn, &_radio.conn_free);
		}

		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
   121be:	0023      	movs	r3, r4
   121c0:	33dc      	adds	r3, #220	; 0xdc
   121c2:	7818      	ldrb	r0, [r3, #0]
		     _radio.advertiser.is_enabled;
   121c4:	3405      	adds	r4, #5
			mem_release(node_rx->hdr.onion.link,
				    &_radio.link_rx_free);
			mem_release(conn, &_radio.conn_free);
		}

		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
   121c6:	07c0      	lsls	r0, r0, #31
   121c8:	0fc0      	lsrs	r0, r0, #31
		     _radio.advertiser.is_enabled;

		if (!bm) {
   121ca:	b2c0      	uxtb	r0, r0
   121cc:	0043      	lsls	r3, r0, #1
				    &_radio.link_rx_free);
			mem_release(conn, &_radio.conn_free);
		}

		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
		     _radio.advertiser.is_enabled;
   121ce:	7fe0      	ldrb	r0, [r4, #31]
   121d0:	07c0      	lsls	r0, r0, #31
   121d2:	0fc0      	lsrs	r0, r0, #31

		if (!bm) {
   121d4:	4318      	orrs	r0, r3
   121d6:	b240      	sxtb	r0, r0
   121d8:	2800      	cmp	r0, #0
   121da:	d101      	bne.n	121e0 <radio_rx_dequeue+0x144>
			ll_adv_scan_state_cb(0);
   121dc:	f7ff fd6e 	bl	11cbc <ll_adv_scan_state_cb>
		}
	}
}
   121e0:	b005      	add	sp, #20
   121e2:	bd30      	pop	{r4, r5, pc}
   121e4:	200015c0 	.word	0x200015c0
   121e8:	000154c4 	.word	0x000154c4
   121ec:	00015484 	.word	0x00015484
   121f0:	000154c9 	.word	0x000154c9
   121f4:	0001548b 	.word	0x0001548b
   121f8:	00016aec 	.word	0x00016aec
   121fc:	0001824a 	.word	0x0001824a
   12200:	00001f7e 	.word	0x00001f7e
   12204:	000171a2 	.word	0x000171a2
   12208:	00015b21 	.word	0x00015b21
   1220c:	00017681 	.word	0x00017681
   12210:	000176bf 	.word	0x000176bf

00012214 <rtc0_nrf5_isr>:
static void rtc0_nrf5_isr(void *arg)
{
	u32_t compare0, compare1;

	/* store interested events */
	compare0 = NRF_RTC0->EVENTS_COMPARE[0];
   12214:	4b0a      	ldr	r3, [pc, #40]	; (12240 <rtc0_nrf5_isr+0x2c>)
	ISR_DIRECT_PM();
	return 1;
}

static void rtc0_nrf5_isr(void *arg)
{
   12216:	b570      	push	{r4, r5, r6, lr}
	u32_t compare0, compare1;

	/* store interested events */
	compare0 = NRF_RTC0->EVENTS_COMPARE[0];
   12218:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1221a:	001c      	movs	r4, r3
	compare1 = NRF_RTC0->EVENTS_COMPARE[1];
   1221c:	6c9d      	ldr	r5, [r3, #72]	; 0x48

	/* On compare0 run ticker worker instance0 */
	if (compare0) {
   1221e:	2a00      	cmp	r2, #0
   12220:	d003      	beq.n	1222a <rtc0_nrf5_isr+0x16>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
   12222:	2000      	movs	r0, #0
   12224:	6458      	str	r0, [r3, #68]	; 0x44

		ticker_trigger(0);
   12226:	f7f9 fe0f 	bl	be48 <ticker_trigger>
	}

	/* On compare1 run ticker worker instance1 */
	if (compare1) {
   1222a:	2d00      	cmp	r5, #0
   1222c:	d004      	beq.n	12238 <rtc0_nrf5_isr+0x24>
		NRF_RTC0->EVENTS_COMPARE[1] = 0;
   1222e:	2300      	movs	r3, #0

		ticker_trigger(1);
   12230:	2001      	movs	r0, #1
		ticker_trigger(0);
	}

	/* On compare1 run ticker worker instance1 */
	if (compare1) {
		NRF_RTC0->EVENTS_COMPARE[1] = 0;
   12232:	64a3      	str	r3, [r4, #72]	; 0x48

		ticker_trigger(1);
   12234:	f7f9 fe08 	bl	be48 <ticker_trigger>
	}

	mayfly_run(MAYFLY_CALL_ID_0);
   12238:	2000      	movs	r0, #0
   1223a:	f7f8 fa77 	bl	a72c <mayfly_run>
}
   1223e:	bd70      	pop	{r4, r5, r6, pc}
   12240:	4000b0fc 	.word	0x4000b0fc

00012244 <swi4_nrf5_isr>:
{
	isr_rand(arg);
}

static void swi4_nrf5_isr(void *arg)
{
   12244:	b510      	push	{r4, lr}
	mayfly_run(MAYFLY_CALL_ID_1);
   12246:	2001      	movs	r0, #1
   12248:	f7f8 fa70 	bl	a72c <mayfly_run>
}
   1224c:	bd10      	pop	{r4, pc}

0001224e <rng_nrf5_isr>:

	mayfly_run(MAYFLY_CALL_ID_0);
}

static void rng_nrf5_isr(void *arg)
{
   1224e:	b510      	push	{r4, lr}
	isr_rand(arg);
   12250:	f7f9 f842 	bl	b2d8 <isr_rand>
}
   12254:	bd10      	pop	{r4, pc}

00012256 <radio_nrf5_isr>:
void radio_event_callback(void)
{
	k_sem_give(sem_recv);
}

ISR_DIRECT_DECLARE(radio_nrf5_isr)
   12256:	b510      	push	{r4, lr}
{
	isr_radio();
   12258:	f7f8 fc54 	bl	ab04 <isr_radio>

	ISR_DIRECT_PM();
   1225c:	f001 fb54 	bl	13908 <_arch_isr_direct_pm>
extern void _IntExit(void);

static inline void _arch_isr_direct_footer(int maybe_swap)
{
	if (maybe_swap) {
		_IntExit();
   12260:	f001 fa4a 	bl	136f8 <_IntExit>
void radio_event_callback(void)
{
	k_sem_give(sem_recv);
}

ISR_DIRECT_DECLARE(radio_nrf5_isr)
   12264:	bd10      	pop	{r4, pc}
	...

00012268 <mayfly_enable_cb>:
	u8_t pub_addr[BDADDR_SIZE];
	u8_t rnd_addr[BDADDR_SIZE];
} _ll_context;

void mayfly_enable_cb(u8_t caller_id, u8_t callee_id, u8_t enable)
{
   12268:	b507      	push	{r0, r1, r2, lr}
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_1);
   1226a:	2901      	cmp	r1, #1
   1226c:	d00c      	beq.n	12288 <mayfly_enable_cb+0x20>
   1226e:	4b0b      	ldr	r3, [pc, #44]	; (1229c <mayfly_enable_cb+0x34>)
   12270:	4a0b      	ldr	r2, [pc, #44]	; (122a0 <mayfly_enable_cb+0x38>)
   12272:	9301      	str	r3, [sp, #4]
   12274:	4b0b      	ldr	r3, [pc, #44]	; (122a4 <mayfly_enable_cb+0x3c>)
   12276:	490c      	ldr	r1, [pc, #48]	; (122a8 <mayfly_enable_cb+0x40>)
   12278:	9300      	str	r3, [sp, #0]
   1227a:	480c      	ldr	r0, [pc, #48]	; (122ac <mayfly_enable_cb+0x44>)
   1227c:	4b0c      	ldr	r3, [pc, #48]	; (122b0 <mayfly_enable_cb+0x48>)
   1227e:	f7ef fb7f 	bl	1980 <printk>
   12282:	b662      	cpsie	i
   12284:	2004      	movs	r0, #4
   12286:	df02      	svc	2

	if (enable) {
		irq_enable(SWI4_IRQn);
   12288:	2018      	movs	r0, #24
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_1);

	if (enable) {
   1228a:	2a00      	cmp	r2, #0
   1228c:	d002      	beq.n	12294 <mayfly_enable_cb+0x2c>
		irq_enable(SWI4_IRQn);
   1228e:	f001 fae5 	bl	1385c <_arch_irq_enable>
   12292:	e001      	b.n	12298 <mayfly_enable_cb+0x30>
	} else {
		irq_disable(SWI4_IRQn);
   12294:	f001 faec 	bl	13870 <_arch_irq_disable>
	}
}
   12298:	bd07      	pop	{r0, r1, r2, pc}
   1229a:	46c0      	nop			; (mov r8, r8)
   1229c:	000154c4 	.word	0x000154c4
   122a0:	00015484 	.word	0x00015484
   122a4:	000154c9 	.word	0x000154c9
   122a8:	0001548b 	.word	0x0001548b
   122ac:	000176fa 	.word	0x000176fa
   122b0:	00018589 	.word	0x00018589

000122b4 <mayfly_is_enabled>:

u32_t mayfly_is_enabled(u8_t caller_id, u8_t callee_id)
{
   122b4:	b507      	push	{r0, r1, r2, lr}
	(void)caller_id;

	if (callee_id == MAYFLY_CALL_ID_0) {
		return irq_is_enabled(RTC0_IRQn);
   122b6:	200b      	movs	r0, #11

u32_t mayfly_is_enabled(u8_t caller_id, u8_t callee_id)
{
	(void)caller_id;

	if (callee_id == MAYFLY_CALL_ID_0) {
   122b8:	2900      	cmp	r1, #0
   122ba:	d002      	beq.n	122c2 <mayfly_is_enabled+0xe>
		return irq_is_enabled(RTC0_IRQn);
	} else if (callee_id == MAYFLY_CALL_ID_1) {
   122bc:	2901      	cmp	r1, #1
   122be:	d103      	bne.n	122c8 <mayfly_is_enabled+0x14>
		return irq_is_enabled(SWI4_IRQn);
   122c0:	2018      	movs	r0, #24
   122c2:	f001 fadf 	bl	13884 <_arch_irq_is_enabled>
	}

	LL_ASSERT(0);

	return 0;
}
   122c6:	bd0e      	pop	{r1, r2, r3, pc}
		return irq_is_enabled(RTC0_IRQn);
	} else if (callee_id == MAYFLY_CALL_ID_1) {
		return irq_is_enabled(SWI4_IRQn);
	}

	LL_ASSERT(0);
   122c8:	4b06      	ldr	r3, [pc, #24]	; (122e4 <mayfly_is_enabled+0x30>)
   122ca:	4a07      	ldr	r2, [pc, #28]	; (122e8 <mayfly_is_enabled+0x34>)
   122cc:	9301      	str	r3, [sp, #4]
   122ce:	4b07      	ldr	r3, [pc, #28]	; (122ec <mayfly_is_enabled+0x38>)
   122d0:	4907      	ldr	r1, [pc, #28]	; (122f0 <mayfly_is_enabled+0x3c>)
   122d2:	9300      	str	r3, [sp, #0]
   122d4:	4807      	ldr	r0, [pc, #28]	; (122f4 <mayfly_is_enabled+0x40>)
   122d6:	4b08      	ldr	r3, [pc, #32]	; (122f8 <mayfly_is_enabled+0x44>)
   122d8:	f7ef fb52 	bl	1980 <printk>
   122dc:	b662      	cpsie	i
   122de:	2004      	movs	r0, #4
   122e0:	df02      	svc	2
   122e2:	46c0      	nop			; (mov r8, r8)
   122e4:	000154c4 	.word	0x000154c4
   122e8:	00015484 	.word	0x00015484
   122ec:	000154c9 	.word	0x000154c9
   122f0:	0001548b 	.word	0x0001548b
   122f4:	00015b21 	.word	0x00015b21
   122f8:	00018577 	.word	0x00018577

000122fc <mayfly_prio_is_equal>:

	return 0;
}

u32_t mayfly_prio_is_equal(u8_t caller_id, u8_t callee_id)
{
   122fc:	0003      	movs	r3, r0
	return (caller_id == callee_id) ||
	       ((caller_id == MAYFLY_CALL_ID_0) &&
		(callee_id == MAYFLY_CALL_ID_1)) ||
   122fe:	2001      	movs	r0, #1
   12300:	428b      	cmp	r3, r1
   12302:	d008      	beq.n	12316 <mayfly_prio_is_equal+0x1a>
	return 0;
}

u32_t mayfly_prio_is_equal(u8_t caller_id, u8_t callee_id)
{
	return (caller_id == callee_id) ||
   12304:	2b00      	cmp	r3, #0
   12306:	d101      	bne.n	1230c <mayfly_prio_is_equal+0x10>
	       ((caller_id == MAYFLY_CALL_ID_0) &&
		(callee_id == MAYFLY_CALL_ID_1)) ||
   12308:	3901      	subs	r1, #1
   1230a:	e002      	b.n	12312 <mayfly_prio_is_equal+0x16>
   1230c:	2000      	movs	r0, #0
   1230e:	2b01      	cmp	r3, #1
   12310:	d101      	bne.n	12316 <mayfly_prio_is_equal+0x1a>
   12312:	4248      	negs	r0, r1
   12314:	4148      	adcs	r0, r1
	       ((caller_id == MAYFLY_CALL_ID_1) &&
		(callee_id == MAYFLY_CALL_ID_0));
}
   12316:	4770      	bx	lr

00012318 <mayfly_pend>:

void mayfly_pend(u8_t caller_id, u8_t callee_id)
{
   12318:	b507      	push	{r0, r1, r2, lr}
   1231a:	4b0c      	ldr	r3, [pc, #48]	; (1234c <mayfly_pend+0x34>)
	(void)caller_id;

	switch (callee_id) {
   1231c:	2900      	cmp	r1, #0
   1231e:	d004      	beq.n	1232a <mayfly_pend+0x12>
   12320:	2901      	cmp	r1, #1
   12322:	d106      	bne.n	12332 <mayfly_pend+0x1a>
  \details Sets the pending bit of an external interrupt.
  \param [in]      IRQn  Interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   12324:	2280      	movs	r2, #128	; 0x80
   12326:	0452      	lsls	r2, r2, #17
   12328:	e001      	b.n	1232e <mayfly_pend+0x16>
   1232a:	2280      	movs	r2, #128	; 0x80
   1232c:	0112      	lsls	r2, r2, #4
   1232e:	605a      	str	r2, [r3, #4]
	case MAYFLY_CALL_ID_PROGRAM:
	default:
		LL_ASSERT(0);
		break;
	}
}
   12330:	bd07      	pop	{r0, r1, r2, pc}
		NVIC_SetPendingIRQ(SWI4_IRQn);
		break;

	case MAYFLY_CALL_ID_PROGRAM:
	default:
		LL_ASSERT(0);
   12332:	4b07      	ldr	r3, [pc, #28]	; (12350 <mayfly_pend+0x38>)
   12334:	4a07      	ldr	r2, [pc, #28]	; (12354 <mayfly_pend+0x3c>)
   12336:	9301      	str	r3, [sp, #4]
   12338:	4b07      	ldr	r3, [pc, #28]	; (12358 <mayfly_pend+0x40>)
   1233a:	4908      	ldr	r1, [pc, #32]	; (1235c <mayfly_pend+0x44>)
   1233c:	9300      	str	r3, [sp, #0]
   1233e:	4808      	ldr	r0, [pc, #32]	; (12360 <mayfly_pend+0x48>)
   12340:	4b08      	ldr	r3, [pc, #32]	; (12364 <mayfly_pend+0x4c>)
   12342:	f7ef fb1d 	bl	1980 <printk>
   12346:	b662      	cpsie	i
   12348:	2004      	movs	r0, #4
   1234a:	df02      	svc	2
   1234c:	e000e1fc 	.word	0xe000e1fc
   12350:	000154c4 	.word	0x000154c4
   12354:	00015484 	.word	0x00015484
   12358:	000154c9 	.word	0x000154c9
   1235c:	0001548b 	.word	0x0001548b
   12360:	00015b21 	.word	0x00015b21
   12364:	0001856b 	.word	0x0001856b

00012368 <radio_active_callback>:
	}
}

void radio_active_callback(u8_t active)
{
}
   12368:	4770      	bx	lr
	...

0001236c <radio_event_callback>:

void radio_event_callback(void)
{
   1236c:	b510      	push	{r4, lr}
	k_sem_give(sem_recv);
   1236e:	4b02      	ldr	r3, [pc, #8]	; (12378 <radio_event_callback+0xc>)
   12370:	6818      	ldr	r0, [r3, #0]
   12372:	f002 fab3 	bl	148dc <k_sem_give>
}
   12376:	bd10      	pop	{r4, pc}
   12378:	20001a88 	.word	0x20001a88

0001237c <ll_init>:
{
	mayfly_run(MAYFLY_CALL_ID_1);
}

int ll_init(struct k_sem *sem_rx)
{
   1237c:	b570      	push	{r4, r5, r6, lr}
	struct device *clk_k32;
	struct device *clk_m16;
	u32_t err;

	sem_recv = sem_rx;
   1237e:	4b39      	ldr	r3, [pc, #228]	; (12464 <ll_init+0xe8>)
{
	mayfly_run(MAYFLY_CALL_ID_1);
}

int ll_init(struct k_sem *sem_rx)
{
   12380:	b086      	sub	sp, #24
	struct device *clk_k32;
	struct device *clk_m16;
	u32_t err;

	sem_recv = sem_rx;
   12382:	6018      	str	r0, [r3, #0]

	/* TODO: bind and use RNG driver */
	rand_init(_rand_context, sizeof(_rand_context));
   12384:	2108      	movs	r1, #8
   12386:	4838      	ldr	r0, [pc, #224]	; (12468 <ll_init+0xec>)
   12388:	f7f8 ff42 	bl	b210 <rand_init>

	clk_k32 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
   1238c:	4837      	ldr	r0, [pc, #220]	; (1246c <ll_init+0xf0>)
   1238e:	f001 fc13 	bl	13bb8 <device_get_binding>
	if (!clk_k32) {
   12392:	2800      	cmp	r0, #0
   12394:	d101      	bne.n	1239a <ll_init+0x1e>
		return -ENODEV;
   12396:	2013      	movs	r0, #19
   12398:	e03b      	b.n	12412 <ll_init+0x96>
static inline int clock_control_on(struct device *dev,
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->on(dev, sys);
   1239a:	6843      	ldr	r3, [r0, #4]
   1239c:	2101      	movs	r1, #1
   1239e:	681b      	ldr	r3, [r3, #0]
   123a0:	4798      	blx	r3
	}

	clock_control_on(clk_k32, (void *)CLOCK_CONTROL_NRF5_K32SRC);

	/* TODO: bind and use counter driver */
	cntr_init();
   123a2:	f7f8 fb09 	bl	a9b8 <cntr_init>

	mayfly_init();
   123a6:	f7f8 f929 	bl	a5fc <mayfly_init>

	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
	_ticker_users[MAYFLY_CALL_ID_1][0] = RADIO_TICKER_USER_JOB_OPS;
   123aa:	2203      	movs	r2, #3
	/* TODO: bind and use counter driver */
	cntr_init();

	mayfly_init();

	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
   123ac:	2108      	movs	r1, #8
	_ticker_users[MAYFLY_CALL_ID_1][0] = RADIO_TICKER_USER_JOB_OPS;
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
   123ae:	2000      	movs	r0, #0
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
   123b0:	2402      	movs	r4, #2

	ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO, TICKER_NODES,
   123b2:	250d      	movs	r5, #13
	/* TODO: bind and use counter driver */
	cntr_init();

	mayfly_init();

	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
   123b4:	4b2e      	ldr	r3, [pc, #184]	; (12470 <ll_init+0xf4>)
	_ticker_users[MAYFLY_CALL_ID_1][0] = RADIO_TICKER_USER_JOB_OPS;
   123b6:	721a      	strb	r2, [r3, #8]
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;

	ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO, TICKER_NODES,
   123b8:	4a2e      	ldr	r2, [pc, #184]	; (12474 <ll_init+0xf8>)
	/* TODO: bind and use counter driver */
	cntr_init();

	mayfly_init();

	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
   123ba:	7019      	strb	r1, [r3, #0]
	_ticker_users[MAYFLY_CALL_ID_1][0] = RADIO_TICKER_USER_JOB_OPS;
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
   123bc:	7418      	strb	r0, [r3, #16]
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
   123be:	761c      	strb	r4, [r3, #24]

	ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO, TICKER_NODES,
   123c0:	9202      	str	r2, [sp, #8]
   123c2:	9300      	str	r3, [sp, #0]
   123c4:	9501      	str	r5, [sp, #4]
   123c6:	2304      	movs	r3, #4
   123c8:	4a2b      	ldr	r2, [pc, #172]	; (12478 <ll_init+0xfc>)
   123ca:	f7f9 fce9 	bl	bda0 <ticker_init>
		    &_ticker_nodes[0], MAYFLY_CALLER_COUNT, &_ticker_users[0],
		    TICKER_USER_OPS, &_ticker_user_ops[0]);

	clk_m16 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_M16SRC_DRV_NAME);
   123ce:	482b      	ldr	r0, [pc, #172]	; (1247c <ll_init+0x100>)
   123d0:	f001 fbf2 	bl	13bb8 <device_get_binding>
	if (!clk_m16) {
   123d4:	2800      	cmp	r0, #0
   123d6:	d0de      	beq.n	12396 <ll_init+0x1a>
		return -ENODEV;
	}

	err = radio_init(clk_m16, CLOCK_CONTROL_NRF5_K32SRC_ACCURACY,
   123d8:	4b29      	ldr	r3, [pc, #164]	; (12480 <ll_init+0x104>)
   123da:	26c4      	movs	r6, #196	; 0xc4
   123dc:	9303      	str	r3, [sp, #12]
   123de:	231b      	movs	r3, #27
   123e0:	00b6      	lsls	r6, r6, #2
   123e2:	9302      	str	r3, [sp, #8]
   123e4:	9301      	str	r3, [sp, #4]
   123e6:	3b1a      	subs	r3, #26
   123e8:	9400      	str	r4, [sp, #0]
   123ea:	9604      	str	r6, [sp, #16]
   123ec:	001a      	movs	r2, r3
   123ee:	2107      	movs	r1, #7
   123f0:	f7ff f884 	bl	114fc <radio_init>
   123f4:	1e04      	subs	r4, r0, #0
			 RADIO_CONNECTION_CONTEXT_MAX,
			 RADIO_PACKET_COUNT_RX_MAX,
			 RADIO_PACKET_COUNT_TX_MAX,
			 RADIO_LL_LENGTH_OCTETS_RX_MAX,
			 RADIO_PACKET_TX_DATA_SIZE, &_radio[0], sizeof(_radio));
	if (err) {
   123f6:	d00e      	beq.n	12416 <ll_init+0x9a>
		BT_ERR("Required RAM size: %d, supplied: %u.", err,
   123f8:	4b22      	ldr	r3, [pc, #136]	; (12484 <ll_init+0x108>)
   123fa:	9001      	str	r0, [sp, #4]
   123fc:	9303      	str	r3, [sp, #12]
   123fe:	4b22      	ldr	r3, [pc, #136]	; (12488 <ll_init+0x10c>)
   12400:	9602      	str	r6, [sp, #8]
   12402:	9300      	str	r3, [sp, #0]
   12404:	4a21      	ldr	r2, [pc, #132]	; (1248c <ll_init+0x110>)
   12406:	4b22      	ldr	r3, [pc, #136]	; (12490 <ll_init+0x114>)
   12408:	4922      	ldr	r1, [pc, #136]	; (12494 <ll_init+0x118>)
   1240a:	4823      	ldr	r0, [pc, #140]	; (12498 <ll_init+0x11c>)
   1240c:	f7ef fab8 	bl	1980 <printk>
		       sizeof(_radio));
		return -ENOMEM;
   12410:	200c      	movs	r0, #12
   12412:	4240      	negs	r0, r0
   12414:	e023      	b.n	1245e <ll_init+0xe2>
	}

	ll_filter_reset(true);
   12416:	2001      	movs	r0, #1
   12418:	f000 fdd0 	bl	12fbc <ll_filter_reset>

	IRQ_DIRECT_CONNECT(NRF5_IRQ_RADIO_IRQn,
   1241c:	0022      	movs	r2, r4
   1241e:	0021      	movs	r1, r4
   12420:	2001      	movs	r0, #1
   12422:	f001 fa3b 	bl	1389c <_irq_priority_set>
			   CONFIG_BLUETOOTH_CONTROLLER_WORKER_PRIO,
			   radio_nrf5_isr, 0);
	IRQ_CONNECT(NRF5_IRQ_RTC0_IRQn, CONFIG_BLUETOOTH_CONTROLLER_WORKER_PRIO,
   12426:	0022      	movs	r2, r4
   12428:	0021      	movs	r1, r4
   1242a:	200b      	movs	r0, #11
   1242c:	f001 fa36 	bl	1389c <_irq_priority_set>
		    rtc0_nrf5_isr, NULL, 0);
	IRQ_CONNECT(NRF5_IRQ_SWI4_IRQn, CONFIG_BLUETOOTH_CONTROLLER_JOB_PRIO,
   12430:	0022      	movs	r2, r4
   12432:	0021      	movs	r1, r4
   12434:	2018      	movs	r0, #24
   12436:	f001 fa31 	bl	1389c <_irq_priority_set>
		    swi4_nrf5_isr, NULL, 0);
	IRQ_CONNECT(NRF5_IRQ_RNG_IRQn, 1, rng_nrf5_isr, NULL, 0);
   1243a:	0022      	movs	r2, r4
   1243c:	2101      	movs	r1, #1
   1243e:	0028      	movs	r0, r5
   12440:	f001 fa2c 	bl	1389c <_irq_priority_set>

	irq_enable(NRF5_IRQ_RADIO_IRQn);
   12444:	2001      	movs	r0, #1
   12446:	f001 fa09 	bl	1385c <_arch_irq_enable>
	irq_enable(NRF5_IRQ_RTC0_IRQn);
   1244a:	200b      	movs	r0, #11
   1244c:	f001 fa06 	bl	1385c <_arch_irq_enable>
	irq_enable(NRF5_IRQ_SWI4_IRQn);
   12450:	2018      	movs	r0, #24
   12452:	f001 fa03 	bl	1385c <_arch_irq_enable>
	irq_enable(NRF5_IRQ_RNG_IRQn);
   12456:	0028      	movs	r0, r5
   12458:	f001 fa00 	bl	1385c <_arch_irq_enable>

	return 0;
   1245c:	0020      	movs	r0, r4
}
   1245e:	b006      	add	sp, #24
   12460:	bd70      	pop	{r4, r5, r6, pc}
   12462:	46c0      	nop			; (mov r8, r8)
   12464:	20001a88 	.word	0x20001a88
   12468:	20001cd4 	.word	0x20001cd4
   1246c:	0001527a 	.word	0x0001527a
   12470:	20001a68 	.word	0x20001a68
   12474:	20001a98 	.word	0x20001a98
   12478:	20001cdc 	.word	0x20001cdc
   1247c:	0001528f 	.word	0x0001528f
   12480:	20001748 	.word	0x20001748
   12484:	000154c4 	.word	0x000154c4
   12488:	000154c9 	.word	0x000154c9
   1248c:	00015484 	.word	0x00015484
   12490:	0001859a 	.word	0x0001859a
   12494:	0001548b 	.word	0x0001548b
   12498:	0001772a 	.word	0x0001772a

0001249c <ll_addr_get>:
	*user_id = (TICKER_NODES - FLASH_TICKER_NODES); /* The last index in the total tickers */
	*instance_index = RADIO_TICKER_INSTANCE_ID_RADIO;
}

u8_t *ll_addr_get(u8_t addr_type, u8_t *bdaddr)
{
   1249c:	0002      	movs	r2, r0
   1249e:	b510      	push	{r4, lr}
   124a0:	0008      	movs	r0, r1
	if (addr_type > 1) {
		return NULL;
   124a2:	2300      	movs	r3, #0
	*instance_index = RADIO_TICKER_INSTANCE_ID_RADIO;
}

u8_t *ll_addr_get(u8_t addr_type, u8_t *bdaddr)
{
	if (addr_type > 1) {
   124a4:	2a01      	cmp	r2, #1
   124a6:	d80f      	bhi.n	124c8 <ll_addr_get+0x2c>
   124a8:	4c08      	ldr	r4, [pc, #32]	; (124cc <ll_addr_get+0x30>)
		return NULL;
	}

	if (addr_type) {
   124aa:	429a      	cmp	r2, r3
   124ac:	d004      	beq.n	124b8 <ll_addr_get+0x1c>
		if (bdaddr) {
			memcpy(bdaddr, _ll_context.rnd_addr, BDADDR_SIZE);
		}

		return _ll_context.rnd_addr;
   124ae:	1da3      	adds	r3, r4, #6
		return NULL;
	}

	if (addr_type) {
		if (bdaddr) {
			memcpy(bdaddr, _ll_context.rnd_addr, BDADDR_SIZE);
   124b0:	001c      	movs	r4, r3
	if (addr_type > 1) {
		return NULL;
	}

	if (addr_type) {
		if (bdaddr) {
   124b2:	2900      	cmp	r1, #0
   124b4:	d103      	bne.n	124be <ll_addr_get+0x22>
   124b6:	e007      	b.n	124c8 <ll_addr_get+0x2c>

	if (bdaddr) {
		memcpy(bdaddr, _ll_context.pub_addr, BDADDR_SIZE);
	}

	return _ll_context.pub_addr;
   124b8:	0023      	movs	r3, r4
		}

		return _ll_context.rnd_addr;
	}

	if (bdaddr) {
   124ba:	2900      	cmp	r1, #0
   124bc:	d004      	beq.n	124c8 <ll_addr_get+0x2c>
		memcpy(bdaddr, _ll_context.pub_addr, BDADDR_SIZE);
   124be:	2206      	movs	r2, #6
   124c0:	0021      	movs	r1, r4
   124c2:	f7ee fc3a 	bl	d3a <memcpy>
	}

	return _ll_context.pub_addr;
   124c6:	0023      	movs	r3, r4
}
   124c8:	0018      	movs	r0, r3
   124ca:	bd10      	pop	{r4, pc}
   124cc:	20001a8c 	.word	0x20001a8c

000124d0 <ll_addr_set>:

void ll_addr_set(u8_t addr_type, u8_t const *const bdaddr)
{
   124d0:	0003      	movs	r3, r0
   124d2:	b510      	push	{r4, lr}
   124d4:	4803      	ldr	r0, [pc, #12]	; (124e4 <ll_addr_set+0x14>)
	if (addr_type) {
   124d6:	2b00      	cmp	r3, #0
   124d8:	d000      	beq.n	124dc <ll_addr_set+0xc>
		memcpy(_ll_context.rnd_addr, bdaddr, BDADDR_SIZE);
   124da:	3006      	adds	r0, #6
	} else {
		memcpy(_ll_context.pub_addr, bdaddr, BDADDR_SIZE);
   124dc:	2206      	movs	r2, #6
   124de:	f7ee fc2c 	bl	d3a <memcpy>
	}
}
   124e2:	bd10      	pop	{r4, pc}
   124e4:	20001a8c 	.word	0x20001a8c

000124e8 <wl_peers_find>:
		wl_peers[i].taken = 0;
	}
}

static int wl_peers_find(u8_t addr_type, u8_t *addr)
{
   124e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   124ea:	0006      	movs	r6, r0
   124ec:	000d      	movs	r5, r1
	int i;

	for (i = 0; i < WL_SIZE; i++) {
   124ee:	2400      	movs	r4, #0
		if (LIST_MATCH(wl_peers, i, addr_type, addr)) {
   124f0:	2701      	movs	r7, #1
   124f2:	2307      	movs	r3, #7
   124f4:	4363      	muls	r3, r4
   124f6:	480d      	ldr	r0, [pc, #52]	; (1252c <wl_peers_find+0x44>)
   124f8:	5c1a      	ldrb	r2, [r3, r0]
   124fa:	07d1      	lsls	r1, r2, #31
   124fc:	d405      	bmi.n	1250a <wl_peers_find+0x22>

static int wl_peers_find(u8_t addr_type, u8_t *addr)
{
	int i;

	for (i = 0; i < WL_SIZE; i++) {
   124fe:	3401      	adds	r4, #1
   12500:	2c08      	cmp	r4, #8
   12502:	d1f6      	bne.n	124f2 <wl_peers_find+0xa>
		if (LIST_MATCH(wl_peers, i, addr_type, addr)) {
			return i;
		}
	}

	return -1;
   12504:	2001      	movs	r0, #1
   12506:	4240      	negs	r0, r0
   12508:	e00e      	b.n	12528 <wl_peers_find+0x40>
static int wl_peers_find(u8_t addr_type, u8_t *addr)
{
	int i;

	for (i = 0; i < WL_SIZE; i++) {
		if (LIST_MATCH(wl_peers, i, addr_type, addr)) {
   1250a:	0031      	movs	r1, r6
   1250c:	0692      	lsls	r2, r2, #26
   1250e:	0fd2      	lsrs	r2, r2, #31
   12510:	4039      	ands	r1, r7
   12512:	428a      	cmp	r2, r1
   12514:	d1f3      	bne.n	124fe <wl_peers_find+0x16>
   12516:	3301      	adds	r3, #1
   12518:	18c0      	adds	r0, r0, r3
   1251a:	2206      	movs	r2, #6
   1251c:	0029      	movs	r1, r5
   1251e:	f7ee fbf7 	bl	d10 <memcmp>
   12522:	2800      	cmp	r0, #0
   12524:	d1eb      	bne.n	124fe <wl_peers_find+0x16>
   12526:	0020      	movs	r0, r4
			return i;
		}
	}

	return -1;
}
   12528:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1252a:	46c0      	nop			; (mov r8, r8)
   1252c:	20001ee9 	.word	0x20001ee9

00012530 <filter_rl_update>:
		}
	}
}

static void filter_rl_update(void)
{
   12530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */

static void filter_clear(struct ll_filter *filter)
{
	filter->enable_bitmask = 0;
   12532:	2400      	movs	r4, #0

	/* No whitelist: populate filter from rl peers */
	filter_clear(&rl_filter);

	for (i = 0; i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE; i++) {
		if (!rl[i].pirk || rl[i].dev) {
   12534:	2624      	movs	r6, #36	; 0x24

#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */

static void filter_clear(struct ll_filter *filter)
{
	filter->enable_bitmask = 0;
   12536:	4d14      	ldr	r5, [pc, #80]	; (12588 <filter_rl_update+0x58>)
   12538:	702c      	strb	r4, [r5, #0]
	filter->addr_type_bitmask = 0;
   1253a:	706c      	strb	r4, [r5, #1]

	/* No whitelist: populate filter from rl peers */
	filter_clear(&rl_filter);

	for (i = 0; i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE; i++) {
		if (!rl[i].pirk || rl[i].dev) {
   1253c:	0033      	movs	r3, r6
   1253e:	4363      	muls	r3, r4
   12540:	4812      	ldr	r0, [pc, #72]	; (1258c <filter_rl_update+0x5c>)
   12542:	5c1b      	ldrb	r3, [r3, r0]
   12544:	075a      	lsls	r2, r3, #29
   12546:	d501      	bpl.n	1254c <filter_rl_update+0x1c>
   12548:	09db      	lsrs	r3, r3, #7
   1254a:	d019      	beq.n	12580 <filter_rl_update+0x50>
			filter_insert(&rl_filter, i, rl[i].id_addr_type,
   1254c:	0032      	movs	r2, r6
}

static void filter_insert(struct ll_filter *filter, int index, u8_t addr_type,
			   u8_t *bdaddr)
{
	filter->enable_bitmask |= BIT(index);
   1254e:	7829      	ldrb	r1, [r5, #0]
	/* No whitelist: populate filter from rl peers */
	filter_clear(&rl_filter);

	for (i = 0; i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE; i++) {
		if (!rl[i].pirk || rl[i].dev) {
			filter_insert(&rl_filter, i, rl[i].id_addr_type,
   12550:	4362      	muls	r2, r4
}

static void filter_insert(struct ll_filter *filter, int index, u8_t addr_type,
			   u8_t *bdaddr)
{
	filter->enable_bitmask |= BIT(index);
   12552:	468c      	mov	ip, r1
   12554:	2101      	movs	r1, #1
	/* No whitelist: populate filter from rl peers */
	filter_clear(&rl_filter);

	for (i = 0; i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE; i++) {
		if (!rl[i].pirk || rl[i].dev) {
			filter_insert(&rl_filter, i, rl[i].id_addr_type,
   12556:	1883      	adds	r3, r0, r2
   12558:	785b      	ldrb	r3, [r3, #1]
}

static void filter_insert(struct ll_filter *filter, int index, u8_t addr_type,
			   u8_t *bdaddr)
{
	filter->enable_bitmask |= BIT(index);
   1255a:	40a1      	lsls	r1, r4
   1255c:	4667      	mov	r7, ip
	/* No whitelist: populate filter from rl peers */
	filter_clear(&rl_filter);

	for (i = 0; i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE; i++) {
		if (!rl[i].pirk || rl[i].dev) {
			filter_insert(&rl_filter, i, rl[i].id_addr_type,
   1255e:	079b      	lsls	r3, r3, #30
   12560:	0fdb      	lsrs	r3, r3, #31

static void filter_insert(struct ll_filter *filter, int index, u8_t addr_type,
			   u8_t *bdaddr)
{
	filter->enable_bitmask |= BIT(index);
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   12562:	40a3      	lsls	r3, r4
}

static void filter_insert(struct ll_filter *filter, int index, u8_t addr_type,
			   u8_t *bdaddr)
{
	filter->enable_bitmask |= BIT(index);
   12564:	4339      	orrs	r1, r7
   12566:	7029      	strb	r1, [r5, #0]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   12568:	7869      	ldrb	r1, [r5, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   1256a:	3202      	adds	r2, #2

static void filter_insert(struct ll_filter *filter, int index, u8_t addr_type,
			   u8_t *bdaddr)
{
	filter->enable_bitmask |= BIT(index);
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   1256c:	430b      	orrs	r3, r1
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   1256e:	1881      	adds	r1, r0, r2
   12570:	2206      	movs	r2, #6
   12572:	0010      	movs	r0, r2
   12574:	4360      	muls	r0, r4
   12576:	3002      	adds	r0, #2
   12578:	1828      	adds	r0, r5, r0

static void filter_insert(struct ll_filter *filter, int index, u8_t addr_type,
			   u8_t *bdaddr)
{
	filter->enable_bitmask |= BIT(index);
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   1257a:	706b      	strb	r3, [r5, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   1257c:	f7ee fbdd 	bl	d3a <memcpy>
	int i;

	/* No whitelist: populate filter from rl peers */
	filter_clear(&rl_filter);

	for (i = 0; i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE; i++) {
   12580:	3401      	adds	r4, #1
   12582:	2c08      	cmp	r4, #8
   12584:	d1da      	bne.n	1253c <filter_rl_update+0xc>
		if (!rl[i].pirk || rl[i].dev) {
			filter_insert(&rl_filter, i, rl[i].id_addr_type,
				      rl[i].id_addr.val);
		}
	}
}
   12586:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12588:	20001dfc 	.word	0x20001dfc
   1258c:	20001f21 	.word	0x20001f21

00012590 <rl_access_check.constprop.1>:
	}

	peer_irk_count = 0;
}

static int rl_access_check(bool check_ar)
   12590:	b510      	push	{r4, lr}
		if (!rl_enable) {
			return -1;
		}
	}

	return (radio_adv_is_enabled() || radio_scan_is_enabled()) ? 0 : 1;
   12592:	f7ff f889 	bl	116a8 <radio_adv_is_enabled>
   12596:	2300      	movs	r3, #0
   12598:	4298      	cmp	r0, r3
   1259a:	d103      	bne.n	125a4 <rl_access_check.constprop.1+0x14>
   1259c:	f7ff f89a 	bl	116d4 <radio_scan_is_enabled>
   125a0:	4243      	negs	r3, r0
   125a2:	4143      	adcs	r3, r0
}
   125a4:	0018      	movs	r0, r3
   125a6:	bd10      	pop	{r4, pc}

000125a8 <filter_wl_update>:
}

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)

static void filter_wl_update(void)
{
   125a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */

static void filter_clear(struct ll_filter *filter)
{
	filter->enable_bitmask = 0;
   125aa:	2400      	movs	r4, #0
	for (i = 0; i < WL_SIZE; i++) {
		int j = wl_peers[i].rl_idx;

		if (!rl_enable || j == RL_IDX_NONE || !rl[j].pirk ||
		    rl[j].dev) {
			filter_insert(&wl, i, wl_peers[i].id_addr_type,
   125ac:	2607      	movs	r6, #7

#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */

static void filter_clear(struct ll_filter *filter)
{
	filter->enable_bitmask = 0;
   125ae:	4d1a      	ldr	r5, [pc, #104]	; (12618 <filter_wl_update+0x70>)
   125b0:	702c      	strb	r4, [r5, #0]
	filter->addr_type_bitmask = 0;
   125b2:	706c      	strb	r4, [r5, #1]
	filter_clear(&wl);

	for (i = 0; i < WL_SIZE; i++) {
		int j = wl_peers[i].rl_idx;

		if (!rl_enable || j == RL_IDX_NONE || !rl[j].pirk ||
   125b4:	4b19      	ldr	r3, [pc, #100]	; (1261c <filter_wl_update+0x74>)
   125b6:	4a1a      	ldr	r2, [pc, #104]	; (12620 <filter_wl_update+0x78>)
   125b8:	781b      	ldrb	r3, [r3, #0]
   125ba:	2b00      	cmp	r3, #0
   125bc:	d00e      	beq.n	125dc <filter_wl_update+0x34>

	/* Populate filter from wl peers */
	filter_clear(&wl);

	for (i = 0; i < WL_SIZE; i++) {
		int j = wl_peers[i].rl_idx;
   125be:	0033      	movs	r3, r6
   125c0:	4363      	muls	r3, r4
   125c2:	5cd3      	ldrb	r3, [r2, r3]
   125c4:	06db      	lsls	r3, r3, #27
   125c6:	0f1b      	lsrs	r3, r3, #28

		if (!rl_enable || j == RL_IDX_NONE || !rl[j].pirk ||
   125c8:	2b0f      	cmp	r3, #15
   125ca:	d007      	beq.n	125dc <filter_wl_update+0x34>
   125cc:	2124      	movs	r1, #36	; 0x24
   125ce:	434b      	muls	r3, r1
   125d0:	4914      	ldr	r1, [pc, #80]	; (12624 <filter_wl_update+0x7c>)
   125d2:	5c5b      	ldrb	r3, [r3, r1]
   125d4:	0759      	lsls	r1, r3, #29
   125d6:	d501      	bpl.n	125dc <filter_wl_update+0x34>
   125d8:	09db      	lsrs	r3, r3, #7
   125da:	d018      	beq.n	1260e <filter_wl_update+0x66>
		    rl[j].dev) {
			filter_insert(&wl, i, wl_peers[i].id_addr_type,
   125dc:	0031      	movs	r1, r6
}

static void filter_insert(struct ll_filter *filter, int index, u8_t addr_type,
			   u8_t *bdaddr)
{
	filter->enable_bitmask |= BIT(index);
   125de:	7828      	ldrb	r0, [r5, #0]
	for (i = 0; i < WL_SIZE; i++) {
		int j = wl_peers[i].rl_idx;

		if (!rl_enable || j == RL_IDX_NONE || !rl[j].pirk ||
		    rl[j].dev) {
			filter_insert(&wl, i, wl_peers[i].id_addr_type,
   125e0:	4361      	muls	r1, r4
}

static void filter_insert(struct ll_filter *filter, int index, u8_t addr_type,
			   u8_t *bdaddr)
{
	filter->enable_bitmask |= BIT(index);
   125e2:	4684      	mov	ip, r0
   125e4:	2001      	movs	r0, #1
	for (i = 0; i < WL_SIZE; i++) {
		int j = wl_peers[i].rl_idx;

		if (!rl_enable || j == RL_IDX_NONE || !rl[j].pirk ||
		    rl[j].dev) {
			filter_insert(&wl, i, wl_peers[i].id_addr_type,
   125e6:	5c53      	ldrb	r3, [r2, r1]
}

static void filter_insert(struct ll_filter *filter, int index, u8_t addr_type,
			   u8_t *bdaddr)
{
	filter->enable_bitmask |= BIT(index);
   125e8:	40a0      	lsls	r0, r4
   125ea:	4667      	mov	r7, ip
	for (i = 0; i < WL_SIZE; i++) {
		int j = wl_peers[i].rl_idx;

		if (!rl_enable || j == RL_IDX_NONE || !rl[j].pirk ||
		    rl[j].dev) {
			filter_insert(&wl, i, wl_peers[i].id_addr_type,
   125ec:	069b      	lsls	r3, r3, #26
   125ee:	0fdb      	lsrs	r3, r3, #31
static void filter_insert(struct ll_filter *filter, int index, u8_t addr_type,
			   u8_t *bdaddr)
{
	filter->enable_bitmask |= BIT(index);
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   125f0:	3101      	adds	r1, #1

static void filter_insert(struct ll_filter *filter, int index, u8_t addr_type,
			   u8_t *bdaddr)
{
	filter->enable_bitmask |= BIT(index);
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   125f2:	40a3      	lsls	r3, r4
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   125f4:	1851      	adds	r1, r2, r1
   125f6:	2206      	movs	r2, #6
}

static void filter_insert(struct ll_filter *filter, int index, u8_t addr_type,
			   u8_t *bdaddr)
{
	filter->enable_bitmask |= BIT(index);
   125f8:	4338      	orrs	r0, r7
   125fa:	7028      	strb	r0, [r5, #0]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   125fc:	7868      	ldrb	r0, [r5, #1]
   125fe:	4303      	orrs	r3, r0
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   12600:	0010      	movs	r0, r2
   12602:	4360      	muls	r0, r4
   12604:	3002      	adds	r0, #2
   12606:	1828      	adds	r0, r5, r0

static void filter_insert(struct ll_filter *filter, int index, u8_t addr_type,
			   u8_t *bdaddr)
{
	filter->enable_bitmask |= BIT(index);
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   12608:	706b      	strb	r3, [r5, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   1260a:	f7ee fb96 	bl	d3a <memcpy>
	int i;

	/* Populate filter from wl peers */
	filter_clear(&wl);

	for (i = 0; i < WL_SIZE; i++) {
   1260e:	3401      	adds	r4, #1
   12610:	2c08      	cmp	r4, #8
   12612:	d1cf      	bne.n	125b4 <filter_wl_update+0xc>
		    rl[j].dev) {
			filter_insert(&wl, i, wl_peers[i].id_addr_type,
				      wl_peers[i].id_addr.val);
		}
	}
}
   12614:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12616:	46c0      	nop			; (mov r8, r8)
   12618:	20001eb7 	.word	0x20001eb7
   1261c:	20002041 	.word	0x20002041
   12620:	20001ee9 	.word	0x20001ee9
   12624:	20001f21 	.word	0x20001f21

00012628 <ctrl_irks_get>:
#endif

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
u8_t *ctrl_irks_get(u8_t *count)
{
	*count = peer_irk_count;
   12628:	4b02      	ldr	r3, [pc, #8]	; (12634 <ctrl_irks_get+0xc>)
   1262a:	781b      	ldrb	r3, [r3, #0]
   1262c:	7003      	strb	r3, [r0, #0]
	return (u8_t *)peer_irks;
}
   1262e:	4802      	ldr	r0, [pc, #8]	; (12638 <ctrl_irks_get+0x10>)
   12630:	4770      	bx	lr
   12632:	46c0      	nop			; (mov r8, r8)
   12634:	20001eb6 	.word	0x20001eb6
   12638:	20001e2e 	.word	0x20001e2e

0001263c <ctrl_rl_idx>:

u8_t ctrl_rl_idx(u8_t irkmatch_id)
{
   1263c:	b507      	push	{r0, r1, r2, lr}
	u8_t i;

	LL_ASSERT(irkmatch_id < peer_irk_count);
   1263e:	4b17      	ldr	r3, [pc, #92]	; (1269c <ctrl_rl_idx+0x60>)
   12640:	781b      	ldrb	r3, [r3, #0]
   12642:	4283      	cmp	r3, r0
   12644:	d808      	bhi.n	12658 <ctrl_rl_idx+0x1c>
   12646:	4b16      	ldr	r3, [pc, #88]	; (126a0 <ctrl_rl_idx+0x64>)
   12648:	4a16      	ldr	r2, [pc, #88]	; (126a4 <ctrl_rl_idx+0x68>)
   1264a:	9301      	str	r3, [sp, #4]
   1264c:	4b16      	ldr	r3, [pc, #88]	; (126a8 <ctrl_rl_idx+0x6c>)
   1264e:	4917      	ldr	r1, [pc, #92]	; (126ac <ctrl_rl_idx+0x70>)
   12650:	9300      	str	r3, [sp, #0]
   12652:	4817      	ldr	r0, [pc, #92]	; (126b0 <ctrl_rl_idx+0x74>)
   12654:	4b17      	ldr	r3, [pc, #92]	; (126b4 <ctrl_rl_idx+0x78>)
   12656:	e00b      	b.n	12670 <ctrl_rl_idx+0x34>
	i = peer_irk_rl_ids[irkmatch_id];
   12658:	4b17      	ldr	r3, [pc, #92]	; (126b8 <ctrl_rl_idx+0x7c>)
   1265a:	5c18      	ldrb	r0, [r3, r0]
	LL_ASSERT(i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE);
   1265c:	2807      	cmp	r0, #7
   1265e:	d90c      	bls.n	1267a <ctrl_rl_idx+0x3e>
   12660:	4b0f      	ldr	r3, [pc, #60]	; (126a0 <ctrl_rl_idx+0x64>)
   12662:	4a10      	ldr	r2, [pc, #64]	; (126a4 <ctrl_rl_idx+0x68>)
   12664:	9301      	str	r3, [sp, #4]
   12666:	4b10      	ldr	r3, [pc, #64]	; (126a8 <ctrl_rl_idx+0x6c>)
   12668:	4910      	ldr	r1, [pc, #64]	; (126ac <ctrl_rl_idx+0x70>)
   1266a:	9300      	str	r3, [sp, #0]
   1266c:	4813      	ldr	r0, [pc, #76]	; (126bc <ctrl_rl_idx+0x80>)
   1266e:	4b11      	ldr	r3, [pc, #68]	; (126b4 <ctrl_rl_idx+0x78>)
   12670:	f7ef f986 	bl	1980 <printk>
   12674:	b662      	cpsie	i
   12676:	2004      	movs	r0, #4
   12678:	df02      	svc	2
	LL_ASSERT(rl[i].taken);
   1267a:	2324      	movs	r3, #36	; 0x24
   1267c:	4343      	muls	r3, r0
   1267e:	4a10      	ldr	r2, [pc, #64]	; (126c0 <ctrl_rl_idx+0x84>)
   12680:	5c9b      	ldrb	r3, [r3, r2]
   12682:	07db      	lsls	r3, r3, #31
   12684:	d408      	bmi.n	12698 <ctrl_rl_idx+0x5c>
   12686:	4b06      	ldr	r3, [pc, #24]	; (126a0 <ctrl_rl_idx+0x64>)
   12688:	4a06      	ldr	r2, [pc, #24]	; (126a4 <ctrl_rl_idx+0x68>)
   1268a:	9301      	str	r3, [sp, #4]
   1268c:	4b06      	ldr	r3, [pc, #24]	; (126a8 <ctrl_rl_idx+0x6c>)
   1268e:	4907      	ldr	r1, [pc, #28]	; (126ac <ctrl_rl_idx+0x70>)
   12690:	9300      	str	r3, [sp, #0]
   12692:	480c      	ldr	r0, [pc, #48]	; (126c4 <ctrl_rl_idx+0x88>)
   12694:	4b07      	ldr	r3, [pc, #28]	; (126b4 <ctrl_rl_idx+0x78>)
   12696:	e7eb      	b.n	12670 <ctrl_rl_idx+0x34>

	return i;
}
   12698:	bd0e      	pop	{r1, r2, r3, pc}
   1269a:	46c0      	nop			; (mov r8, r8)
   1269c:	20001eb6 	.word	0x20001eb6
   126a0:	000154c4 	.word	0x000154c4
   126a4:	00015484 	.word	0x00015484
   126a8:	000154c9 	.word	0x000154c9
   126ac:	0001548b 	.word	0x0001548b
   126b0:	0001775f 	.word	0x0001775f
   126b4:	000185c3 	.word	0x000185c3
   126b8:	20001eae 	.word	0x20001eae
   126bc:	0001779d 	.word	0x0001779d
   126c0:	20001f21 	.word	0x20001f21
   126c4:	000177c4 	.word	0x000177c4

000126c8 <ctrl_irk_whitelisted>:

bool ctrl_irk_whitelisted(u8_t rl_idx)
{
   126c8:	b507      	push	{r0, r1, r2, lr}
	if (rl_idx == RL_IDX_NONE) {
   126ca:	280f      	cmp	r0, #15
   126cc:	d023      	beq.n	12716 <ctrl_irk_whitelisted+0x4e>
		return false;
	}

	LL_ASSERT(rl_idx < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE);
   126ce:	2807      	cmp	r0, #7
   126d0:	d908      	bls.n	126e4 <ctrl_irk_whitelisted+0x1c>
   126d2:	4b12      	ldr	r3, [pc, #72]	; (1271c <ctrl_irk_whitelisted+0x54>)
   126d4:	4a12      	ldr	r2, [pc, #72]	; (12720 <ctrl_irk_whitelisted+0x58>)
   126d6:	9301      	str	r3, [sp, #4]
   126d8:	4b12      	ldr	r3, [pc, #72]	; (12724 <ctrl_irk_whitelisted+0x5c>)
   126da:	4913      	ldr	r1, [pc, #76]	; (12728 <ctrl_irk_whitelisted+0x60>)
   126dc:	9300      	str	r3, [sp, #0]
   126de:	4813      	ldr	r0, [pc, #76]	; (1272c <ctrl_irk_whitelisted+0x64>)
   126e0:	4b13      	ldr	r3, [pc, #76]	; (12730 <ctrl_irk_whitelisted+0x68>)
   126e2:	e00d      	b.n	12700 <ctrl_irk_whitelisted+0x38>
	LL_ASSERT(rl[rl_idx].taken);
   126e4:	2324      	movs	r3, #36	; 0x24
   126e6:	4358      	muls	r0, r3
   126e8:	4a12      	ldr	r2, [pc, #72]	; (12734 <ctrl_irk_whitelisted+0x6c>)
   126ea:	5c83      	ldrb	r3, [r0, r2]
   126ec:	07db      	lsls	r3, r3, #31
   126ee:	d40c      	bmi.n	1270a <ctrl_irk_whitelisted+0x42>
   126f0:	4b0a      	ldr	r3, [pc, #40]	; (1271c <ctrl_irk_whitelisted+0x54>)
   126f2:	4a0b      	ldr	r2, [pc, #44]	; (12720 <ctrl_irk_whitelisted+0x58>)
   126f4:	9301      	str	r3, [sp, #4]
   126f6:	4b0b      	ldr	r3, [pc, #44]	; (12724 <ctrl_irk_whitelisted+0x5c>)
   126f8:	490b      	ldr	r1, [pc, #44]	; (12728 <ctrl_irk_whitelisted+0x60>)
   126fa:	9300      	str	r3, [sp, #0]
   126fc:	480e      	ldr	r0, [pc, #56]	; (12738 <ctrl_irk_whitelisted+0x70>)
   126fe:	4b0c      	ldr	r3, [pc, #48]	; (12730 <ctrl_irk_whitelisted+0x68>)
   12700:	f7ef f93e 	bl	1980 <printk>
   12704:	b662      	cpsie	i
   12706:	2004      	movs	r0, #4
   12708:	df02      	svc	2

	return rl[rl_idx].wl;
   1270a:	1810      	adds	r0, r2, r0
   1270c:	7840      	ldrb	r0, [r0, #1]
   1270e:	07c0      	lsls	r0, r0, #31
   12710:	0fc0      	lsrs	r0, r0, #31
   12712:	b2c0      	uxtb	r0, r0
   12714:	e000      	b.n	12718 <ctrl_irk_whitelisted+0x50>
}

bool ctrl_irk_whitelisted(u8_t rl_idx)
{
	if (rl_idx == RL_IDX_NONE) {
		return false;
   12716:	2000      	movs	r0, #0

	LL_ASSERT(rl_idx < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE);
	LL_ASSERT(rl[rl_idx].taken);

	return rl[rl_idx].wl;
}
   12718:	bd0e      	pop	{r1, r2, r3, pc}
   1271a:	46c0      	nop			; (mov r8, r8)
   1271c:	000154c4 	.word	0x000154c4
   12720:	00015484 	.word	0x00015484
   12724:	000154c9 	.word	0x000154c9
   12728:	0001548b 	.word	0x0001548b
   1272c:	000177f1 	.word	0x000177f1
   12730:	000185cf 	.word	0x000185cf
   12734:	20001f21 	.word	0x20001f21
   12738:	0001781d 	.word	0x0001781d

0001273c <ctrl_filter_get>:
#endif

struct ll_filter *ctrl_filter_get(bool whitelist)
{
	if (whitelist) {
		return &wl;
   1273c:	4b02      	ldr	r3, [pc, #8]	; (12748 <ctrl_filter_get+0xc>)
}
#endif

struct ll_filter *ctrl_filter_get(bool whitelist)
{
	if (whitelist) {
   1273e:	2800      	cmp	r0, #0
   12740:	d100      	bne.n	12744 <ctrl_filter_get+0x8>
		return &wl;
	}
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	return &rl_filter;
   12742:	4b02      	ldr	r3, [pc, #8]	; (1274c <ctrl_filter_get+0x10>)
#else
	LL_ASSERT(0);
#endif
}
   12744:	0018      	movs	r0, r3
   12746:	4770      	bx	lr
   12748:	20001eb7 	.word	0x20001eb7
   1274c:	20001dfc 	.word	0x20001dfc

00012750 <ll_wl_size_get>:
   12750:	2008      	movs	r0, #8
   12752:	4770      	bx	lr

00012754 <ll_wl_clear>:
{
	return WL_SIZE;
}

u32_t ll_wl_clear(void)
{
   12754:	b570      	push	{r4, r5, r6, lr}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   12756:	f7fe ffb1 	bl	116bc <radio_adv_filter_pol_get>
   1275a:	2800      	cmp	r0, #0
   1275c:	d001      	beq.n	12762 <ll_wl_clear+0xe>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1275e:	200c      	movs	r0, #12
   12760:	e012      	b.n	12788 <ll_wl_clear+0x34>
	return WL_SIZE;
}

u32_t ll_wl_clear(void)
{
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   12762:	f7fe ffc1 	bl	116e8 <radio_scan_filter_pol_get>
   12766:	2201      	movs	r2, #1
   12768:	4010      	ands	r0, r2
   1276a:	d1f8      	bne.n	1275e <ll_wl_clear+0xa>
   1276c:	0003      	movs	r3, r0
		    !memcmp(list[i].id_addr.val, addr, BDADDR_SIZE))

static void wl_peers_clear(void)
{
	for (int i = 0; i < WL_SIZE; i++) {
		wl_peers[i].taken = 0;
   1276e:	2607      	movs	r6, #7
   12770:	4c06      	ldr	r4, [pc, #24]	; (1278c <ll_wl_clear+0x38>)
   12772:	0035      	movs	r5, r6
   12774:	435d      	muls	r5, r3
   12776:	5d29      	ldrb	r1, [r5, r4]
		    (list[i].id_addr_type == (type & 0x1)) && \
		    !memcmp(list[i].id_addr.val, addr, BDADDR_SIZE))

static void wl_peers_clear(void)
{
	for (int i = 0; i < WL_SIZE; i++) {
   12778:	3301      	adds	r3, #1
		wl_peers[i].taken = 0;
   1277a:	4391      	bics	r1, r2
   1277c:	5529      	strb	r1, [r5, r4]
		    (list[i].id_addr_type == (type & 0x1)) && \
		    !memcmp(list[i].id_addr.val, addr, BDADDR_SIZE))

static void wl_peers_clear(void)
{
	for (int i = 0; i < WL_SIZE; i++) {
   1277e:	2b08      	cmp	r3, #8
   12780:	d1f7      	bne.n	12772 <ll_wl_clear+0x1e>
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	wl_peers_clear();
#else
	filter_clear(&wl);
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */
	wl_anon = 0;
   12782:	2200      	movs	r2, #0
   12784:	4b02      	ldr	r3, [pc, #8]	; (12790 <ll_wl_clear+0x3c>)
   12786:	701a      	strb	r2, [r3, #0]

	return 0;
}
   12788:	bd70      	pop	{r4, r5, r6, pc}
   1278a:	46c0      	nop			; (mov r8, r8)
   1278c:	20001ee9 	.word	0x20001ee9
   12790:	20002250 	.word	0x20002250

00012794 <ll_wl_remove>:
	return filter_add(&wl, addr->type, addr->a.val);
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */
}

u32_t ll_wl_remove(bt_addr_le_t *addr)
{
   12794:	b570      	push	{r4, r5, r6, lr}
   12796:	0006      	movs	r6, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   12798:	f7fe ff90 	bl	116bc <radio_adv_filter_pol_get>
   1279c:	2800      	cmp	r0, #0
   1279e:	d001      	beq.n	127a4 <ll_wl_remove+0x10>
		return BT_HCI_ERR_CMD_DISALLOWED;
   127a0:	240c      	movs	r4, #12
   127a2:	e027      	b.n	127f4 <ll_wl_remove+0x60>
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */
}

u32_t ll_wl_remove(bt_addr_le_t *addr)
{
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   127a4:	f7fe ffa0 	bl	116e8 <radio_scan_filter_pol_get>
   127a8:	2501      	movs	r5, #1
   127aa:	4028      	ands	r0, r5
   127ac:	1e04      	subs	r4, r0, #0
   127ae:	d1f7      	bne.n	127a0 <ll_wl_remove+0xc>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	if (addr->type == ADDR_TYPE_ANON) {
   127b0:	7830      	ldrb	r0, [r6, #0]
   127b2:	28ff      	cmp	r0, #255	; 0xff
   127b4:	d102      	bne.n	127bc <ll_wl_remove+0x28>
		wl_anon = 0;
   127b6:	4b10      	ldr	r3, [pc, #64]	; (127f8 <ll_wl_remove+0x64>)
   127b8:	701c      	strb	r4, [r3, #0]
		return 0;
   127ba:	e01b      	b.n	127f4 <ll_wl_remove+0x60>
}

static u32_t wl_peers_remove(bt_addr_le_t *id_addr)
{
	/* find the device and mark it as empty */
	int i = wl_peers_find(id_addr->type, id_addr->a.val);
   127bc:	1c71      	adds	r1, r6, #1
   127be:	f7ff fe93 	bl	124e8 <wl_peers_find>

	if (i >= 0) {
   127c2:	2800      	cmp	r0, #0
   127c4:	db15      	blt.n	127f2 <ll_wl_remove+0x5e>
		int j = wl_peers[i].rl_idx;
   127c6:	2307      	movs	r3, #7
   127c8:	4343      	muls	r3, r0
   127ca:	490c      	ldr	r1, [pc, #48]	; (127fc <ll_wl_remove+0x68>)
   127cc:	5c5b      	ldrb	r3, [r3, r1]
   127ce:	06db      	lsls	r3, r3, #27
   127d0:	0f1b      	lsrs	r3, r3, #28

		if (j != RL_IDX_NONE) {
   127d2:	2b0f      	cmp	r3, #15
   127d4:	d006      	beq.n	127e4 <ll_wl_remove+0x50>
			rl[j].wl = 0;
   127d6:	2224      	movs	r2, #36	; 0x24
   127d8:	4353      	muls	r3, r2
   127da:	4a09      	ldr	r2, [pc, #36]	; (12800 <ll_wl_remove+0x6c>)
   127dc:	18d3      	adds	r3, r2, r3
   127de:	785a      	ldrb	r2, [r3, #1]
   127e0:	43aa      	bics	r2, r5
   127e2:	705a      	strb	r2, [r3, #1]
		}
		wl_peers[i].taken = 0;
   127e4:	2307      	movs	r3, #7
   127e6:	2201      	movs	r2, #1
   127e8:	4358      	muls	r0, r3
   127ea:	5c0b      	ldrb	r3, [r1, r0]
   127ec:	4393      	bics	r3, r2
   127ee:	540b      	strb	r3, [r1, r0]
   127f0:	e000      	b.n	127f4 <ll_wl_remove+0x60>
		return 0;
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   127f2:	2402      	movs	r4, #2
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	return wl_peers_remove(addr);
#else
	return filter_remove(&wl, addr->type, addr->a.val);
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */
}
   127f4:	0020      	movs	r0, r4
   127f6:	bd70      	pop	{r4, r5, r6, pc}
   127f8:	20002250 	.word	0x20002250
   127fc:	20001ee9 	.word	0x20001ee9
   12800:	20001f21 	.word	0x20001f21

00012804 <ll_filters_adv_update>:
		}
	}
}

void ll_filters_adv_update(u8_t adv_fp)
{
   12804:	b510      	push	{r4, lr}
	/* enabling advertising */
	if (adv_fp && !(radio_scan_filter_pol_get() & 0x1)) {
   12806:	2800      	cmp	r0, #0
   12808:	d005      	beq.n	12816 <ll_filters_adv_update+0x12>
   1280a:	f7fe ff6d 	bl	116e8 <radio_scan_filter_pol_get>
   1280e:	07c3      	lsls	r3, r0, #31
   12810:	d401      	bmi.n	12816 <ll_filters_adv_update+0x12>
		/* whitelist not in use, update whitelist */
		filter_wl_update();
   12812:	f7ff fec9 	bl	125a8 <filter_wl_update>
	}

	if (rl_enable && !radio_scan_is_enabled()) {
   12816:	4b05      	ldr	r3, [pc, #20]	; (1282c <ll_filters_adv_update+0x28>)
   12818:	781b      	ldrb	r3, [r3, #0]
   1281a:	2b00      	cmp	r3, #0
   1281c:	d005      	beq.n	1282a <ll_filters_adv_update+0x26>
   1281e:	f7fe ff59 	bl	116d4 <radio_scan_is_enabled>
   12822:	2800      	cmp	r0, #0
   12824:	d101      	bne.n	1282a <ll_filters_adv_update+0x26>
		/* rl not in use, update resolving list LUT */
		filter_rl_update();
   12826:	f7ff fe83 	bl	12530 <filter_rl_update>
	}
}
   1282a:	bd10      	pop	{r4, pc}
   1282c:	20002041 	.word	0x20002041

00012830 <ll_rl_find>:
		filter_rl_update();
	}
}

int ll_rl_find(u8_t id_addr_type, u8_t *id_addr)
{
   12830:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	int i, free = -RL_IDX_NONE;
   12832:	260f      	movs	r6, #15

	for (i = 0; i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE; i++) {
   12834:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   12836:	2724      	movs	r7, #36	; 0x24
		filter_rl_update();
	}
}

int ll_rl_find(u8_t id_addr_type, u8_t *id_addr)
{
   12838:	9000      	str	r0, [sp, #0]
   1283a:	9101      	str	r1, [sp, #4]
	int i, free = -RL_IDX_NONE;
   1283c:	4276      	negs	r6, r6

	for (i = 0; i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE; i++) {
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1283e:	0038      	movs	r0, r7
   12840:	4360      	muls	r0, r4
   12842:	4d13      	ldr	r5, [pc, #76]	; (12890 <ll_rl_find+0x60>)
   12844:	5d43      	ldrb	r3, [r0, r5]
   12846:	07db      	lsls	r3, r3, #31
   12848:	d405      	bmi.n	12856 <ll_rl_find+0x26>
			return i;
		} else if (!rl[i].taken && free == -RL_IDX_NONE) {
   1284a:	003b      	movs	r3, r7
   1284c:	4363      	muls	r3, r4
   1284e:	5ceb      	ldrb	r3, [r5, r3]
   12850:	07db      	lsls	r3, r3, #31
   12852:	d417      	bmi.n	12884 <ll_rl_find+0x54>
   12854:	e012      	b.n	1287c <ll_rl_find+0x4c>
int ll_rl_find(u8_t id_addr_type, u8_t *id_addr)
{
	int i, free = -RL_IDX_NONE;

	for (i = 0; i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE; i++) {
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   12856:	2101      	movs	r1, #1
   12858:	182b      	adds	r3, r5, r0
   1285a:	785b      	ldrb	r3, [r3, #1]
   1285c:	9a00      	ldr	r2, [sp, #0]
   1285e:	079b      	lsls	r3, r3, #30
   12860:	0fdb      	lsrs	r3, r3, #31
   12862:	400a      	ands	r2, r1
   12864:	4293      	cmp	r3, r2
   12866:	d1f0      	bne.n	1284a <ll_rl_find+0x1a>
   12868:	3002      	adds	r0, #2
   1286a:	1828      	adds	r0, r5, r0
   1286c:	2206      	movs	r2, #6
   1286e:	9901      	ldr	r1, [sp, #4]
   12870:	f7ee fa4e 	bl	d10 <memcmp>
   12874:	2800      	cmp	r0, #0
   12876:	d1e8      	bne.n	1284a <ll_rl_find+0x1a>
   12878:	0020      	movs	r0, r4
   1287a:	e007      	b.n	1288c <ll_rl_find+0x5c>
			return i;
		} else if (!rl[i].taken && free == -RL_IDX_NONE) {
   1287c:	0033      	movs	r3, r6
   1287e:	330f      	adds	r3, #15
   12880:	d100      	bne.n	12884 <ll_rl_find+0x54>
   12882:	4266      	negs	r6, r4

int ll_rl_find(u8_t id_addr_type, u8_t *id_addr)
{
	int i, free = -RL_IDX_NONE;

	for (i = 0; i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE; i++) {
   12884:	3401      	adds	r4, #1
   12886:	2c08      	cmp	r4, #8
   12888:	d1d9      	bne.n	1283e <ll_rl_find+0xe>
   1288a:	0030      	movs	r0, r6
			free = -i;
		}
	}

	return free;
}
   1288c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   1288e:	46c0      	nop			; (mov r8, r8)
   12890:	20001f21 	.word	0x20001f21

00012894 <ll_wl_add>:

	return 0;
}

u32_t ll_wl_add(bt_addr_le_t *addr)
{
   12894:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   12896:	9000      	str	r0, [sp, #0]
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   12898:	f7fe ff10 	bl	116bc <radio_adv_filter_pol_get>
   1289c:	2800      	cmp	r0, #0
   1289e:	d001      	beq.n	128a4 <ll_wl_add+0x10>
		return BT_HCI_ERR_CMD_DISALLOWED;
   128a0:	240c      	movs	r4, #12
   128a2:	e055      	b.n	12950 <ll_wl_add+0xbc>
	return 0;
}

u32_t ll_wl_add(bt_addr_le_t *addr)
{
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   128a4:	f7fe ff20 	bl	116e8 <radio_scan_filter_pol_get>
   128a8:	2301      	movs	r3, #1
   128aa:	4018      	ands	r0, r3
   128ac:	1e04      	subs	r4, r0, #0
   128ae:	d1f7      	bne.n	128a0 <ll_wl_add+0xc>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	if (addr->type == ADDR_TYPE_ANON) {
   128b0:	9a00      	ldr	r2, [sp, #0]
   128b2:	7810      	ldrb	r0, [r2, #0]
   128b4:	28ff      	cmp	r0, #255	; 0xff
   128b6:	d102      	bne.n	128be <ll_wl_add+0x2a>
		wl_anon = 1;
   128b8:	4a26      	ldr	r2, [pc, #152]	; (12954 <ll_wl_add+0xc0>)
   128ba:	7013      	strb	r3, [r2, #0]
		return 0;
   128bc:	e048      	b.n	12950 <ll_wl_add+0xbc>
	return -1;
}

static u32_t wl_peers_add(bt_addr_le_t *id_addr)
{
	int i = wl_peers_find(id_addr->type, id_addr->a.val);
   128be:	9b00      	ldr	r3, [sp, #0]
   128c0:	3301      	adds	r3, #1
   128c2:	0019      	movs	r1, r3
   128c4:	9301      	str	r3, [sp, #4]
   128c6:	f7ff fe0f 	bl	124e8 <wl_peers_find>

	if (i >= 0) {
   128ca:	2800      	cmp	r0, #0
   128cc:	da3f      	bge.n	1294e <ll_wl_add+0xba>
   128ce:	0027      	movs	r7, r4
		return BT_HCI_ERR_INVALID_PARAM;
	}

	for (i = 0; i < WL_SIZE; i++) {
		if (!wl_peers[i].taken) {
   128d0:	2107      	movs	r1, #7
   128d2:	4d21      	ldr	r5, [pc, #132]	; (12958 <ll_wl_add+0xc4>)
   128d4:	000e      	movs	r6, r1
   128d6:	437e      	muls	r6, r7
   128d8:	5d72      	ldrb	r2, [r6, r5]
   128da:	1c13      	adds	r3, r2, #0
   128dc:	07d2      	lsls	r2, r2, #31
   128de:	d431      	bmi.n	12944 <ll_wl_add+0xb0>
			int j;

			wl_peers[i].id_addr_type = id_addr->type & 0x1;
   128e0:	2101      	movs	r1, #1
   128e2:	9a00      	ldr	r2, [sp, #0]
			bt_addr_copy(&wl_peers[i].id_addr, &id_addr->a);
   128e4:	19a8      	adds	r0, r5, r6

	for (i = 0; i < WL_SIZE; i++) {
		if (!wl_peers[i].taken) {
			int j;

			wl_peers[i].id_addr_type = id_addr->type & 0x1;
   128e6:	7812      	ldrb	r2, [r2, #0]
			bt_addr_copy(&wl_peers[i].id_addr, &id_addr->a);
   128e8:	3001      	adds	r0, #1

	for (i = 0; i < WL_SIZE; i++) {
		if (!wl_peers[i].taken) {
			int j;

			wl_peers[i].id_addr_type = id_addr->type & 0x1;
   128ea:	400a      	ands	r2, r1
   128ec:	311f      	adds	r1, #31
   128ee:	0152      	lsls	r2, r2, #5
   128f0:	438b      	bics	r3, r1
   128f2:	4313      	orrs	r3, r2
   128f4:	5573      	strb	r3, [r6, r5]
	return memcmp(a, b, sizeof(*a));
}

static inline void bt_addr_copy(bt_addr_t *dst, const bt_addr_t *src)
{
	memcpy(dst, src, sizeof(*dst));
   128f6:	2206      	movs	r2, #6
   128f8:	9901      	ldr	r1, [sp, #4]
   128fa:	f7ee fa1e 	bl	d3a <memcpy>
			bt_addr_copy(&wl_peers[i].id_addr, &id_addr->a);
			/* Get index to Resolving List if applicable */
			j = ll_rl_find(id_addr->type, id_addr->a.val);
   128fe:	9b00      	ldr	r3, [sp, #0]
   12900:	9901      	ldr	r1, [sp, #4]
   12902:	7818      	ldrb	r0, [r3, #0]
   12904:	f7ff ff94 	bl	12830 <ll_rl_find>
   12908:	5d73      	ldrb	r3, [r6, r5]
			if (j >= 0) {
   1290a:	2800      	cmp	r0, #0
   1290c:	db0f      	blt.n	1292e <ll_wl_add+0x9a>
				wl_peers[i].rl_idx = j;
   1290e:	220f      	movs	r2, #15
   12910:	211e      	movs	r1, #30
   12912:	4002      	ands	r2, r0
   12914:	0052      	lsls	r2, r2, #1
   12916:	438b      	bics	r3, r1
   12918:	4313      	orrs	r3, r2
   1291a:	5573      	strb	r3, [r6, r5]
				rl[j].wl = 1;
   1291c:	2324      	movs	r3, #36	; 0x24
   1291e:	2201      	movs	r2, #1
   12920:	4358      	muls	r0, r3
   12922:	4b0e      	ldr	r3, [pc, #56]	; (1295c <ll_wl_add+0xc8>)
   12924:	1818      	adds	r0, r3, r0
   12926:	7843      	ldrb	r3, [r0, #1]
   12928:	4313      	orrs	r3, r2
   1292a:	7043      	strb	r3, [r0, #1]
   1292c:	e002      	b.n	12934 <ll_wl_add+0xa0>
			} else {
				wl_peers[i].rl_idx = RL_IDX_NONE;
   1292e:	221e      	movs	r2, #30
   12930:	4313      	orrs	r3, r2
   12932:	5573      	strb	r3, [r6, r5]
			}
			wl_peers[i].taken = 1;
   12934:	2307      	movs	r3, #7
   12936:	2001      	movs	r0, #1
   12938:	437b      	muls	r3, r7
   1293a:	4907      	ldr	r1, [pc, #28]	; (12958 <ll_wl_add+0xc4>)
   1293c:	5c5a      	ldrb	r2, [r3, r1]
   1293e:	4302      	orrs	r2, r0
   12940:	545a      	strb	r2, [r3, r1]
   12942:	e005      	b.n	12950 <ll_wl_add+0xbc>

	if (i >= 0) {
		return BT_HCI_ERR_INVALID_PARAM;
	}

	for (i = 0; i < WL_SIZE; i++) {
   12944:	3701      	adds	r7, #1
   12946:	2f08      	cmp	r7, #8
   12948:	d1c4      	bne.n	128d4 <ll_wl_add+0x40>
			wl_peers[i].taken = 1;
			return 0;
		}
	}

	return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   1294a:	2407      	movs	r4, #7
   1294c:	e000      	b.n	12950 <ll_wl_add+0xbc>
static u32_t wl_peers_add(bt_addr_le_t *id_addr)
{
	int i = wl_peers_find(id_addr->type, id_addr->a.val);

	if (i >= 0) {
		return BT_HCI_ERR_INVALID_PARAM;
   1294e:	2412      	movs	r4, #18
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	return wl_peers_add(addr);
#else
	return filter_add(&wl, addr->type, addr->a.val);
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */
}
   12950:	0020      	movs	r0, r4
   12952:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   12954:	20002250 	.word	0x20002250
   12958:	20001ee9 	.word	0x20001ee9
   1295c:	20001f21 	.word	0x20001f21

00012960 <ctrl_rl_allowed>:

	return free;
}

bool ctrl_rl_allowed(u8_t id_addr_type, u8_t *id_addr)
{
   12960:	b5f0      	push	{r4, r5, r6, r7, lr}
	int i, j;

	if (!rl_enable) {
   12962:	4b19      	ldr	r3, [pc, #100]	; (129c8 <ctrl_rl_allowed+0x68>)

	return free;
}

bool ctrl_rl_allowed(u8_t id_addr_type, u8_t *id_addr)
{
   12964:	0006      	movs	r6, r0
	int i, j;

	if (!rl_enable) {
   12966:	781b      	ldrb	r3, [r3, #0]
		return true;
   12968:	2001      	movs	r0, #1

bool ctrl_rl_allowed(u8_t id_addr_type, u8_t *id_addr)
{
	int i, j;

	if (!rl_enable) {
   1296a:	2b00      	cmp	r3, #0
   1296c:	d02a      	beq.n	129c4 <ctrl_rl_allowed+0x64>
   1296e:	2200      	movs	r2, #0
		return true;
	}

	for (i = 0; i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE; i++) {
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
   12970:	4d16      	ldr	r5, [pc, #88]	; (129cc <ctrl_rl_allowed+0x6c>)
   12972:	3023      	adds	r0, #35	; 0x23
   12974:	0003      	movs	r3, r0
   12976:	4353      	muls	r3, r2
   12978:	5d5c      	ldrb	r4, [r3, r5]
   1297a:	07e4      	lsls	r4, r4, #31
   1297c:	d511      	bpl.n	129a2 <ctrl_rl_allowed+0x42>
   1297e:	18ec      	adds	r4, r5, r3
   12980:	7864      	ldrb	r4, [r4, #1]
   12982:	07a4      	lsls	r4, r4, #30
   12984:	0fe4      	lsrs	r4, r4, #31
   12986:	42b4      	cmp	r4, r6
   12988:	d10b      	bne.n	129a2 <ctrl_rl_allowed+0x42>
			u8_t *addr = rl[i].id_addr.val;
			for (j = 0; j < BDADDR_SIZE; j++) {
   1298a:	2400      	movs	r4, #0
   1298c:	3302      	adds	r3, #2
   1298e:	18eb      	adds	r3, r5, r3
				if (addr[j] != id_addr[j]) {
   12990:	5d1f      	ldrb	r7, [r3, r4]
   12992:	46bc      	mov	ip, r7
   12994:	5d0f      	ldrb	r7, [r1, r4]
   12996:	45bc      	cmp	ip, r7
   12998:	d103      	bne.n	129a2 <ctrl_rl_allowed+0x42>
	}

	for (i = 0; i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE; i++) {
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
			u8_t *addr = rl[i].id_addr.val;
			for (j = 0; j < BDADDR_SIZE; j++) {
   1299a:	3401      	adds	r4, #1
   1299c:	2c06      	cmp	r4, #6
   1299e:	d1f7      	bne.n	12990 <ctrl_rl_allowed+0x30>
   129a0:	e004      	b.n	129ac <ctrl_rl_allowed+0x4c>

	if (!rl_enable) {
		return true;
	}

	for (i = 0; i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE; i++) {
   129a2:	3201      	adds	r2, #1
   129a4:	2a08      	cmp	r2, #8
   129a6:	d1e5      	bne.n	12974 <ctrl_rl_allowed+0x14>
				return !rl[i].pirk || rl[i].dev;
			}
		}
	}

	return false;
   129a8:	2000      	movs	r0, #0
   129aa:	e00b      	b.n	129c4 <ctrl_rl_allowed+0x64>
					break;
				}
			}

			if (j == BDADDR_SIZE) {
				return !rl[i].pirk || rl[i].dev;
   129ac:	2324      	movs	r3, #36	; 0x24
   129ae:	435a      	muls	r2, r3
   129b0:	4b06      	ldr	r3, [pc, #24]	; (129cc <ctrl_rl_allowed+0x6c>)
   129b2:	5c9a      	ldrb	r2, [r3, r2]
   129b4:	2301      	movs	r3, #1
   129b6:	09d0      	lsrs	r0, r2, #7
   129b8:	0752      	lsls	r2, r2, #29
   129ba:	d501      	bpl.n	129c0 <ctrl_rl_allowed+0x60>
   129bc:	4018      	ands	r0, r3
   129be:	e001      	b.n	129c4 <ctrl_rl_allowed+0x64>
   129c0:	0018      	movs	r0, r3
   129c2:	e7fb      	b.n	129bc <ctrl_rl_allowed+0x5c>
			}
		}
	}

	return false;
}
   129c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   129c6:	46c0      	nop			; (mov r8, r8)
   129c8:	20002041 	.word	0x20002041
   129cc:	20001f21 	.word	0x20001f21

000129d0 <ctrl_rl_enabled>:

bool ctrl_rl_enabled(void)
{
	return rl_enable;
   129d0:	4b02      	ldr	r3, [pc, #8]	; (129dc <ctrl_rl_enabled+0xc>)
   129d2:	7818      	ldrb	r0, [r3, #0]
   129d4:	1e43      	subs	r3, r0, #1
   129d6:	4198      	sbcs	r0, r3
   129d8:	b2c0      	uxtb	r0, r0
}
   129da:	4770      	bx	lr
   129dc:	20002041 	.word	0x20002041

000129e0 <ll_rl_pdu_adv_update>:

#if defined(CONFIG_BLUETOOTH_BROADCASTER)
void ll_rl_pdu_adv_update(int idx, struct pdu_adv *pdu)
{
   129e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   129e2:	0006      	movs	r6, r0
   129e4:	000c      	movs	r4, r1
	u8_t *adva = pdu->type == PDU_ADV_TYPE_SCAN_RSP ?
				  &pdu->payload.scan_rsp.addr[0] :
   129e6:	1c8f      	adds	r7, r1, #2
				  &pdu->payload.adv_ind.addr[0];

	struct ll_adv_set *ll_adv = ll_adv_set_get();
   129e8:	f000 fb30 	bl	1304c <ll_adv_set_get>
   129ec:	0005      	movs	r5, r0

	/* AdvA */
	if (idx >= 0 && rl[idx].lirk) {
   129ee:	2e00      	cmp	r6, #0
   129f0:	db1f      	blt.n	12a32 <ll_rl_pdu_adv_update+0x52>
   129f2:	2124      	movs	r1, #36	; 0x24
   129f4:	4371      	muls	r1, r6
   129f6:	4a29      	ldr	r2, [pc, #164]	; (12a9c <ll_rl_pdu_adv_update+0xbc>)
   129f8:	5c8b      	ldrb	r3, [r1, r2]
   129fa:	0658      	lsls	r0, r3, #25
   129fc:	d519      	bpl.n	12a32 <ll_rl_pdu_adv_update+0x52>
		LL_ASSERT(rl[idx].rpas_ready);
   129fe:	079b      	lsls	r3, r3, #30
   12a00:	d40c      	bmi.n	12a1c <ll_rl_pdu_adv_update+0x3c>
   12a02:	4b27      	ldr	r3, [pc, #156]	; (12aa0 <ll_rl_pdu_adv_update+0xc0>)
   12a04:	4a27      	ldr	r2, [pc, #156]	; (12aa4 <ll_rl_pdu_adv_update+0xc4>)
   12a06:	9301      	str	r3, [sp, #4]
   12a08:	4b27      	ldr	r3, [pc, #156]	; (12aa8 <ll_rl_pdu_adv_update+0xc8>)
   12a0a:	4928      	ldr	r1, [pc, #160]	; (12aac <ll_rl_pdu_adv_update+0xcc>)
   12a0c:	9300      	str	r3, [sp, #0]
   12a0e:	4828      	ldr	r0, [pc, #160]	; (12ab0 <ll_rl_pdu_adv_update+0xd0>)
   12a10:	4b28      	ldr	r3, [pc, #160]	; (12ab4 <ll_rl_pdu_adv_update+0xd4>)
   12a12:	f7ee ffb5 	bl	1980 <printk>
   12a16:	b662      	cpsie	i
   12a18:	2004      	movs	r0, #4
   12a1a:	df02      	svc	2
		pdu->tx_addr = 1;
   12a1c:	2040      	movs	r0, #64	; 0x40
   12a1e:	7823      	ldrb	r3, [r4, #0]
		memcpy(adva, rl[idx].local_rpa.val, BDADDR_SIZE);
   12a20:	1851      	adds	r1, r2, r1
	struct ll_adv_set *ll_adv = ll_adv_set_get();

	/* AdvA */
	if (idx >= 0 && rl[idx].lirk) {
		LL_ASSERT(rl[idx].rpas_ready);
		pdu->tx_addr = 1;
   12a22:	4303      	orrs	r3, r0
   12a24:	7023      	strb	r3, [r4, #0]
		memcpy(adva, rl[idx].local_rpa.val, BDADDR_SIZE);
   12a26:	311e      	adds	r1, #30
   12a28:	2206      	movs	r2, #6
   12a2a:	0038      	movs	r0, r7
   12a2c:	f7ee f985 	bl	d3a <memcpy>
   12a30:	e00f      	b.n	12a52 <ll_rl_pdu_adv_update+0x72>
	} else {
		pdu->tx_addr = ll_adv->own_addr_type & 0x1;
   12a32:	2101      	movs	r1, #1
   12a34:	2040      	movs	r0, #64	; 0x40
   12a36:	786b      	ldrb	r3, [r5, #1]
   12a38:	091b      	lsrs	r3, r3, #4
   12a3a:	400b      	ands	r3, r1
   12a3c:	019a      	lsls	r2, r3, #6
   12a3e:	7823      	ldrb	r3, [r4, #0]
   12a40:	4383      	bics	r3, r0
   12a42:	4313      	orrs	r3, r2
   12a44:	7023      	strb	r3, [r4, #0]
		ll_addr_get(ll_adv->own_addr_type & 0x1, adva);
   12a46:	7868      	ldrb	r0, [r5, #1]
   12a48:	0900      	lsrs	r0, r0, #4
   12a4a:	4008      	ands	r0, r1
   12a4c:	0039      	movs	r1, r7
   12a4e:	f7ff fd25 	bl	1249c <ll_addr_get>
	}

	/* TargetA */
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   12a52:	230f      	movs	r3, #15
   12a54:	7822      	ldrb	r2, [r4, #0]
   12a56:	4013      	ands	r3, r2
   12a58:	2b01      	cmp	r3, #1
   12a5a:	d11d      	bne.n	12a98 <ll_rl_pdu_adv_update+0xb8>
   12a5c:	0020      	movs	r0, r4
   12a5e:	3008      	adds	r0, #8
		if (idx >= 0 && rl[idx].pirk) {
   12a60:	2e00      	cmp	r6, #0
   12a62:	db0c      	blt.n	12a7e <ll_rl_pdu_adv_update+0x9e>
   12a64:	3323      	adds	r3, #35	; 0x23
   12a66:	435e      	muls	r6, r3
   12a68:	490c      	ldr	r1, [pc, #48]	; (12a9c <ll_rl_pdu_adv_update+0xbc>)
   12a6a:	5c73      	ldrb	r3, [r6, r1]
   12a6c:	075b      	lsls	r3, r3, #29
   12a6e:	d506      	bpl.n	12a7e <ll_rl_pdu_adv_update+0x9e>
			pdu->rx_addr = 1;
   12a70:	2380      	movs	r3, #128	; 0x80
   12a72:	425b      	negs	r3, r3
   12a74:	431a      	orrs	r2, r3
			memcpy(&pdu->payload.direct_ind.tgt_addr[0],
			       rl[idx].peer_rpa.val, BDADDR_SIZE);
   12a76:	3618      	adds	r6, #24
	}

	/* TargetA */
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
		if (idx >= 0 && rl[idx].pirk) {
			pdu->rx_addr = 1;
   12a78:	7022      	strb	r2, [r4, #0]
			memcpy(&pdu->payload.direct_ind.tgt_addr[0],
			       rl[idx].peer_rpa.val, BDADDR_SIZE);
   12a7a:	1989      	adds	r1, r1, r6
   12a7c:	e009      	b.n	12a92 <ll_rl_pdu_adv_update+0xb2>
		} else {
			pdu->rx_addr = ll_adv->id_addr_type;
   12a7e:	786b      	ldrb	r3, [r5, #1]
   12a80:	7821      	ldrb	r1, [r4, #0]
   12a82:	065b      	lsls	r3, r3, #25
   12a84:	0fdb      	lsrs	r3, r3, #31
   12a86:	01da      	lsls	r2, r3, #7
   12a88:	237f      	movs	r3, #127	; 0x7f
   12a8a:	400b      	ands	r3, r1
   12a8c:	4313      	orrs	r3, r2
   12a8e:	7023      	strb	r3, [r4, #0]
			memcpy(&pdu->payload.direct_ind.tgt_addr[0],
			       ll_adv->id_addr, BDADDR_SIZE);
   12a90:	1ca9      	adds	r1, r5, #2
			pdu->rx_addr = 1;
			memcpy(&pdu->payload.direct_ind.tgt_addr[0],
			       rl[idx].peer_rpa.val, BDADDR_SIZE);
		} else {
			pdu->rx_addr = ll_adv->id_addr_type;
			memcpy(&pdu->payload.direct_ind.tgt_addr[0],
   12a92:	2206      	movs	r2, #6
   12a94:	f7ee f951 	bl	d3a <memcpy>
			       ll_adv->id_addr, BDADDR_SIZE);
		}
	}
}
   12a98:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   12a9a:	46c0      	nop			; (mov r8, r8)
   12a9c:	20001f21 	.word	0x20001f21
   12aa0:	000154c4 	.word	0x000154c4
   12aa4:	00015484 	.word	0x00015484
   12aa8:	000154c9 	.word	0x000154c9
   12aac:	0001548b 	.word	0x0001548b
   12ab0:	0001784f 	.word	0x0001784f
   12ab4:	000185e4 	.word	0x000185e4

00012ab8 <ll_rl_rpa_update>:

	return (radio_adv_is_enabled() || radio_scan_is_enabled()) ? 0 : 1;
}

void ll_rl_rpa_update(bool timeout)
{
   12ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
   12aba:	b087      	sub	sp, #28
   12abc:	9005      	str	r0, [sp, #20]
	int i, err;
	s64_t now = k_uptime_get();
   12abe:	f001 ff75 	bl	149ac <k_uptime_get>
	bool all = timeout || (rpa_last_ms == -1) ||
   12ac2:	2301      	movs	r3, #1
   12ac4:	9304      	str	r3, [sp, #16]
   12ac6:	9b05      	ldr	r3, [sp, #20]
}

void ll_rl_rpa_update(bool timeout)
{
	int i, err;
	s64_t now = k_uptime_get();
   12ac8:	9002      	str	r0, [sp, #8]
   12aca:	9103      	str	r1, [sp, #12]
	bool all = timeout || (rpa_last_ms == -1) ||
   12acc:	2b00      	cmp	r3, #0
   12ace:	d117      	bne.n	12b00 <ll_rl_rpa_update+0x48>
   12ad0:	4b5c      	ldr	r3, [pc, #368]	; (12c44 <ll_rl_rpa_update+0x18c>)
   12ad2:	681a      	ldr	r2, [r3, #0]
   12ad4:	685b      	ldr	r3, [r3, #4]
   12ad6:	1c51      	adds	r1, r2, #1
   12ad8:	d101      	bne.n	12ade <ll_rl_rpa_update+0x26>
   12ada:	1c59      	adds	r1, r3, #1
   12adc:	d010      	beq.n	12b00 <ll_rl_rpa_update+0x48>
   12ade:	9802      	ldr	r0, [sp, #8]
   12ae0:	9903      	ldr	r1, [sp, #12]
   12ae2:	1a80      	subs	r0, r0, r2
   12ae4:	4199      	sbcs	r1, r3
   12ae6:	0002      	movs	r2, r0
   12ae8:	2000      	movs	r0, #0
   12aea:	000b      	movs	r3, r1
		   (now - rpa_last_ms >= rpa_timeout_ms);
   12aec:	4956      	ldr	r1, [pc, #344]	; (12c48 <ll_rl_rpa_update+0x190>)

void ll_rl_rpa_update(bool timeout)
{
	int i, err;
	s64_t now = k_uptime_get();
	bool all = timeout || (rpa_last_ms == -1) ||
   12aee:	680c      	ldr	r4, [r1, #0]
   12af0:	2101      	movs	r1, #1
   12af2:	4298      	cmp	r0, r3
   12af4:	dc02      	bgt.n	12afc <ll_rl_rpa_update+0x44>
   12af6:	d102      	bne.n	12afe <ll_rl_rpa_update+0x46>
   12af8:	4294      	cmp	r4, r2
   12afa:	d900      	bls.n	12afe <ll_rl_rpa_update+0x46>
   12afc:	2100      	movs	r1, #0
   12afe:	9104      	str	r1, [sp, #16]
		   (now - rpa_last_ms >= rpa_timeout_ms);
	BT_DBG("");

	for (i = 0; i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE; i++) {
   12b00:	2400      	movs	r4, #0
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
   12b02:	2624      	movs	r6, #36	; 0x24
   12b04:	4d51      	ldr	r5, [pc, #324]	; (12c4c <ll_rl_rpa_update+0x194>)
   12b06:	3508      	adds	r5, #8
   12b08:	0032      	movs	r2, r6
   12b0a:	4362      	muls	r2, r4
   12b0c:	4b4f      	ldr	r3, [pc, #316]	; (12c4c <ll_rl_rpa_update+0x194>)
   12b0e:	5cd2      	ldrb	r2, [r2, r3]
   12b10:	07d1      	lsls	r1, r2, #31
   12b12:	d530      	bpl.n	12b76 <ll_rl_rpa_update+0xbe>
   12b14:	9904      	ldr	r1, [sp, #16]
   12b16:	2900      	cmp	r1, #0
   12b18:	d101      	bne.n	12b1e <ll_rl_rpa_update+0x66>
   12b1a:	0792      	lsls	r2, r2, #30
   12b1c:	d42b      	bmi.n	12b76 <ll_rl_rpa_update+0xbe>

			if (rl[i].pirk) {
   12b1e:	0032      	movs	r2, r6
   12b20:	4362      	muls	r2, r4
   12b22:	5c98      	ldrb	r0, [r3, r2]
   12b24:	0743      	lsls	r3, r0, #29
   12b26:	d50a      	bpl.n	12b3e <ll_rl_rpa_update+0x86>
				err = bt_rpa_create(peer_irks[rl[i].pirk_idx],
   12b28:	0029      	movs	r1, r5
   12b2a:	0680      	lsls	r0, r0, #26
   12b2c:	0f40      	lsrs	r0, r0, #29
   12b2e:	4b48      	ldr	r3, [pc, #288]	; (12c50 <ll_rl_rpa_update+0x198>)
   12b30:	0100      	lsls	r0, r0, #4
   12b32:	1818      	adds	r0, r3, r0
   12b34:	3110      	adds	r1, #16
   12b36:	f7ef fbe1 	bl	22fc <bt_rpa_create>
						    &rl[i].peer_rpa);
				LL_ASSERT(!err);
   12b3a:	2800      	cmp	r0, #0
   12b3c:	d10c      	bne.n	12b58 <ll_rl_rpa_update+0xa0>
			}
			if (rl[i].lirk) {
   12b3e:	0033      	movs	r3, r6
   12b40:	4363      	muls	r3, r4
   12b42:	4f42      	ldr	r7, [pc, #264]	; (12c4c <ll_rl_rpa_update+0x194>)
   12b44:	5ddb      	ldrb	r3, [r3, r7]
   12b46:	065b      	lsls	r3, r3, #25
   12b48:	d50f      	bpl.n	12b6a <ll_rl_rpa_update+0xb2>
				err = bt_rpa_create(rl[i].local_irk,
   12b4a:	0029      	movs	r1, r5
   12b4c:	0028      	movs	r0, r5
   12b4e:	3116      	adds	r1, #22
   12b50:	f7ef fbd4 	bl	22fc <bt_rpa_create>
						    &rl[i].local_rpa);
				LL_ASSERT(!err);
   12b54:	2800      	cmp	r0, #0
   12b56:	d008      	beq.n	12b6a <ll_rl_rpa_update+0xb2>
   12b58:	4b3e      	ldr	r3, [pc, #248]	; (12c54 <ll_rl_rpa_update+0x19c>)
   12b5a:	4a3f      	ldr	r2, [pc, #252]	; (12c58 <ll_rl_rpa_update+0x1a0>)
   12b5c:	9301      	str	r3, [sp, #4]
   12b5e:	4b3f      	ldr	r3, [pc, #252]	; (12c5c <ll_rl_rpa_update+0x1a4>)
   12b60:	493f      	ldr	r1, [pc, #252]	; (12c60 <ll_rl_rpa_update+0x1a8>)
   12b62:	9300      	str	r3, [sp, #0]
   12b64:	483f      	ldr	r0, [pc, #252]	; (12c64 <ll_rl_rpa_update+0x1ac>)
   12b66:	4b40      	ldr	r3, [pc, #256]	; (12c68 <ll_rl_rpa_update+0x1b0>)
   12b68:	e056      	b.n	12c18 <ll_rl_rpa_update+0x160>
			}

			rl[i].rpas_ready = 1;
   12b6a:	0032      	movs	r2, r6
   12b6c:	2102      	movs	r1, #2
   12b6e:	4362      	muls	r2, r4
   12b70:	5cbb      	ldrb	r3, [r7, r2]
   12b72:	430b      	orrs	r3, r1
   12b74:	54bb      	strb	r3, [r7, r2]
	s64_t now = k_uptime_get();
	bool all = timeout || (rpa_last_ms == -1) ||
		   (now - rpa_last_ms >= rpa_timeout_ms);
	BT_DBG("");

	for (i = 0; i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE; i++) {
   12b76:	3401      	adds	r4, #1
   12b78:	3524      	adds	r5, #36	; 0x24
   12b7a:	2c08      	cmp	r4, #8
   12b7c:	d1c4      	bne.n	12b08 <ll_rl_rpa_update+0x50>

			rl[i].rpas_ready = 1;
		}
	}

	if (all) {
   12b7e:	9b04      	ldr	r3, [sp, #16]
   12b80:	2b00      	cmp	r3, #0
   12b82:	d004      	beq.n	12b8e <ll_rl_rpa_update+0xd6>
		rpa_last_ms = now;
   12b84:	9902      	ldr	r1, [sp, #8]
   12b86:	9a03      	ldr	r2, [sp, #12]
   12b88:	4b2e      	ldr	r3, [pc, #184]	; (12c44 <ll_rl_rpa_update+0x18c>)
   12b8a:	6019      	str	r1, [r3, #0]
   12b8c:	605a      	str	r2, [r3, #4]
	}

	if (timeout) {
   12b8e:	9b05      	ldr	r3, [sp, #20]
   12b90:	2b00      	cmp	r3, #0
   12b92:	d055      	beq.n	12c40 <ll_rl_rpa_update+0x188>
#if defined(CONFIG_BLUETOOTH_BROADCASTER)
		if (radio_adv_is_enabled()) {
   12b94:	f7fe fd88 	bl	116a8 <radio_adv_is_enabled>
   12b98:	2800      	cmp	r0, #0
   12b9a:	d051      	beq.n	12c40 <ll_rl_rpa_update+0x188>
	struct pdu_adv *prev;
	struct pdu_adv *pdu;
	u8_t last;
	int idx;

	ll_adv = ll_adv_set_get();
   12b9c:	f000 fa56 	bl	1304c <ll_adv_set_get>

	if (ll_adv->own_addr_type != BT_ADDR_LE_PUBLIC_ID &&
   12ba0:	7843      	ldrb	r3, [r0, #1]
	struct pdu_adv *prev;
	struct pdu_adv *pdu;
	u8_t last;
	int idx;

	ll_adv = ll_adv_set_get();
   12ba2:	0007      	movs	r7, r0

	if (ll_adv->own_addr_type != BT_ADDR_LE_PUBLIC_ID &&
   12ba4:	069b      	lsls	r3, r3, #26
   12ba6:	d54b      	bpl.n	12c40 <ll_rl_rpa_update+0x188>
	    ll_adv->own_addr_type != BT_ADDR_LE_RANDOM_ID) {
		return;
	}

	radio_adv_data = radio_adv_data_get();
   12ba8:	f7fe fd72 	bl	11690 <radio_adv_data_get>
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   12bac:	0003      	movs	r3, r0
   12bae:	334f      	adds	r3, #79	; 0x4f
   12bb0:	9304      	str	r3, [sp, #16]
   12bb2:	781d      	ldrb	r5, [r3, #0]
   12bb4:	2327      	movs	r3, #39	; 0x27
   12bb6:	001e      	movs	r6, r3
	/* use the last index in double buffer, */
	if (radio_adv_data->first == radio_adv_data->last) {
   12bb8:	0002      	movs	r2, r0
	    ll_adv->own_addr_type != BT_ADDR_LE_RANDOM_ID) {
		return;
	}

	radio_adv_data = radio_adv_data_get();
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   12bba:	436e      	muls	r6, r5
	/* use the last index in double buffer, */
	if (radio_adv_data->first == radio_adv_data->last) {
   12bbc:	324e      	adds	r2, #78	; 0x4e
   12bbe:	7812      	ldrb	r2, [r2, #0]
	    ll_adv->own_addr_type != BT_ADDR_LE_RANDOM_ID) {
		return;
	}

	radio_adv_data = radio_adv_data_get();
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   12bc0:	1986      	adds	r6, r0, r6
	/* use the last index in double buffer, */
	if (radio_adv_data->first == radio_adv_data->last) {
   12bc2:	42aa      	cmp	r2, r5
   12bc4:	d104      	bne.n	12bd0 <ll_rl_rpa_update+0x118>
		last = radio_adv_data->last + 1;
   12bc6:	3501      	adds	r5, #1
   12bc8:	b2ed      	uxtb	r5, r5
		if (last == DOUBLE_BUFFER_SIZE) {
   12bca:	2d02      	cmp	r5, #2
   12bcc:	d100      	bne.n	12bd0 <ll_rl_rpa_update+0x118>
			last = 0;
   12bce:	2500      	movs	r5, #0
		last = radio_adv_data->last;
	}

	/* update adv pdu fields. */
	pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
	pdu->type = prev->type;
   12bd0:	210f      	movs	r1, #15
	} else {
		last = radio_adv_data->last;
	}

	/* update adv pdu fields. */
	pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
   12bd2:	436b      	muls	r3, r5
   12bd4:	18c4      	adds	r4, r0, r3
	pdu->type = prev->type;
   12bd6:	7833      	ldrb	r3, [r6, #0]
   12bd8:	400b      	ands	r3, r1
   12bda:	001a      	movs	r2, r3
   12bdc:	7823      	ldrb	r3, [r4, #0]
   12bde:	438b      	bics	r3, r1
	pdu->rfu = 0;
   12be0:	4313      	orrs	r3, r2
   12be2:	2210      	movs	r2, #16
   12be4:	4393      	bics	r3, r2
   12be6:	7023      	strb	r3, [r4, #0]

	if (IS_ENABLED(CONFIG_BLUETOOTH_CONTROLLER_CHAN_SEL_2)) {
		pdu->chan_sel = prev->chan_sel;
   12be8:	2320      	movs	r3, #32
   12bea:	7832      	ldrb	r2, [r6, #0]
   12bec:	3111      	adds	r1, #17
   12bee:	401a      	ands	r2, r3
   12bf0:	7823      	ldrb	r3, [r4, #0]
   12bf2:	438b      	bics	r3, r1
   12bf4:	4313      	orrs	r3, r2
   12bf6:	7023      	strb	r3, [r4, #0]
	} else {
		pdu->chan_sel = 0;
	}

	idx = ll_rl_find(ll_adv->id_addr_type, ll_adv->id_addr);
   12bf8:	7878      	ldrb	r0, [r7, #1]
   12bfa:	1cb9      	adds	r1, r7, #2
   12bfc:	0640      	lsls	r0, r0, #25
   12bfe:	0fc0      	lsrs	r0, r0, #31
   12c00:	f7ff fe16 	bl	12830 <ll_rl_find>
	LL_ASSERT(idx >= 0);
   12c04:	2800      	cmp	r0, #0
   12c06:	da0c      	bge.n	12c22 <ll_rl_rpa_update+0x16a>
   12c08:	4b12      	ldr	r3, [pc, #72]	; (12c54 <ll_rl_rpa_update+0x19c>)
   12c0a:	4a13      	ldr	r2, [pc, #76]	; (12c58 <ll_rl_rpa_update+0x1a0>)
   12c0c:	9301      	str	r3, [sp, #4]
   12c0e:	4b13      	ldr	r3, [pc, #76]	; (12c5c <ll_rl_rpa_update+0x1a4>)
   12c10:	4913      	ldr	r1, [pc, #76]	; (12c60 <ll_rl_rpa_update+0x1a8>)
   12c12:	9300      	str	r3, [sp, #0]
   12c14:	4815      	ldr	r0, [pc, #84]	; (12c6c <ll_rl_rpa_update+0x1b4>)
   12c16:	4b16      	ldr	r3, [pc, #88]	; (12c70 <ll_rl_rpa_update+0x1b8>)
   12c18:	f7ee feb2 	bl	1980 <printk>
   12c1c:	b662      	cpsie	i
   12c1e:	2004      	movs	r0, #4
   12c20:	df02      	svc	2
	ll_rl_pdu_adv_update(idx, pdu);
   12c22:	0021      	movs	r1, r4
   12c24:	f7ff fedc 	bl	129e0 <ll_rl_pdu_adv_update>

	memcpy(&pdu->payload.adv_ind.data[0], &prev->payload.adv_ind.data[0],
   12c28:	0031      	movs	r1, r6
   12c2a:	0020      	movs	r0, r4
   12c2c:	7872      	ldrb	r2, [r6, #1]
   12c2e:	3108      	adds	r1, #8
   12c30:	3a06      	subs	r2, #6
   12c32:	3008      	adds	r0, #8
   12c34:	f7ee f881 	bl	d3a <memcpy>
	       prev->len - BDADDR_SIZE);
	pdu->len = prev->len;
   12c38:	7873      	ldrb	r3, [r6, #1]
   12c3a:	7063      	strb	r3, [r4, #1]

	/* commit the update so controller picks it. */
	radio_adv_data->last = last;
   12c3c:	9b04      	ldr	r3, [sp, #16]
   12c3e:	701d      	strb	r5, [r3, #0]
		if (radio_adv_is_enabled()) {
			rpa_adv_refresh();
		}
#endif
	}
}
   12c40:	b007      	add	sp, #28
   12c42:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12c44:	20002248 	.word	0x20002248
   12c48:	20002340 	.word	0x20002340
   12c4c:	20001f21 	.word	0x20001f21
   12c50:	20001e2e 	.word	0x20001e2e
   12c54:	000154c4 	.word	0x000154c4
   12c58:	00015484 	.word	0x00015484
   12c5c:	000154c9 	.word	0x000154c9
   12c60:	0001548b 	.word	0x0001548b
   12c64:	00017883 	.word	0x00017883
   12c68:	000185b2 	.word	0x000185b2
   12c6c:	000178a9 	.word	0x000178a9
   12c70:	000185a2 	.word	0x000185a2

00012c74 <ll_rl_size_get>:
}

u32_t ll_rl_size_get(void)
{
	return CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE;
}
   12c74:	2008      	movs	r0, #8
   12c76:	4770      	bx	lr

00012c78 <ll_rl_clear>:

u32_t ll_rl_clear(void)
{
   12c78:	b570      	push	{r4, r5, r6, lr}
	if (!rl_access_check(false)) {
   12c7a:	f7ff fc89 	bl	12590 <rl_access_check.constprop.1>
   12c7e:	0003      	movs	r3, r0
		return BT_HCI_ERR_CMD_DISALLOWED;
   12c80:	200c      	movs	r0, #12
	return CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE;
}

u32_t ll_rl_clear(void)
{
	if (!rl_access_check(false)) {
   12c82:	2b00      	cmp	r3, #0
   12c84:	d00e      	beq.n	12ca4 <ll_rl_clear+0x2c>
   12c86:	2300      	movs	r3, #0
#endif

static void rl_clear(void)
{
	for (int i = 0; i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE; i++) {
		rl[i].taken = 0;
   12c88:	2524      	movs	r5, #36	; 0x24
   12c8a:	2401      	movs	r4, #1
   12c8c:	4906      	ldr	r1, [pc, #24]	; (12ca8 <ll_rl_clear+0x30>)
   12c8e:	0028      	movs	r0, r5
   12c90:	4358      	muls	r0, r3
   12c92:	5c42      	ldrb	r2, [r0, r1]
}
#endif

static void rl_clear(void)
{
	for (int i = 0; i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE; i++) {
   12c94:	3301      	adds	r3, #1
		rl[i].taken = 0;
   12c96:	43a2      	bics	r2, r4
   12c98:	5442      	strb	r2, [r0, r1]
}
#endif

static void rl_clear(void)
{
	for (int i = 0; i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE; i++) {
   12c9a:	2b08      	cmp	r3, #8
   12c9c:	d1f7      	bne.n	12c8e <ll_rl_clear+0x16>
		rl[i].taken = 0;
	}

	peer_irk_count = 0;
   12c9e:	2000      	movs	r0, #0
   12ca0:	4b02      	ldr	r3, [pc, #8]	; (12cac <ll_rl_clear+0x34>)
   12ca2:	7018      	strb	r0, [r3, #0]
	}

	rl_clear();

	return 0;
}
   12ca4:	bd70      	pop	{r4, r5, r6, pc}
   12ca6:	46c0      	nop			; (mov r8, r8)
   12ca8:	20001f21 	.word	0x20001f21
   12cac:	20001eb6 	.word	0x20001eb6

00012cb0 <ll_rl_add>:

u32_t ll_rl_add(bt_addr_le_t *id_addr, const u8_t pirk[16],
		const u8_t lirk[16])
{
   12cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
   12cb2:	b085      	sub	sp, #20
   12cb4:	9000      	str	r0, [sp, #0]
   12cb6:	9102      	str	r1, [sp, #8]
   12cb8:	9203      	str	r2, [sp, #12]
	int i, j;

	if (!rl_access_check(false)) {
   12cba:	f7ff fc69 	bl	12590 <rl_access_check.constprop.1>
		return BT_HCI_ERR_CMD_DISALLOWED;
   12cbe:	240c      	movs	r4, #12
u32_t ll_rl_add(bt_addr_le_t *id_addr, const u8_t pirk[16],
		const u8_t lirk[16])
{
	int i, j;

	if (!rl_access_check(false)) {
   12cc0:	2800      	cmp	r0, #0
   12cc2:	d100      	bne.n	12cc6 <ll_rl_add+0x16>
   12cc4:	e085      	b.n	12dd2 <ll_rl_add+0x122>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	i = ll_rl_find(id_addr->type, id_addr->a.val);
   12cc6:	9b00      	ldr	r3, [sp, #0]
	if (i >= 0) {
		return BT_HCI_ERR_INVALID_PARAM;
   12cc8:	3406      	adds	r4, #6

	if (!rl_access_check(false)) {
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	i = ll_rl_find(id_addr->type, id_addr->a.val);
   12cca:	3301      	adds	r3, #1
   12ccc:	9301      	str	r3, [sp, #4]
   12cce:	9b00      	ldr	r3, [sp, #0]
   12cd0:	9901      	ldr	r1, [sp, #4]
   12cd2:	7818      	ldrb	r0, [r3, #0]
   12cd4:	f7ff fdac 	bl	12830 <ll_rl_find>
	if (i >= 0) {
   12cd8:	2800      	cmp	r0, #0
   12cda:	da7a      	bge.n	12dd2 <ll_rl_add+0x122>
		return BT_HCI_ERR_INVALID_PARAM;
	} else if (i == -RL_IDX_NONE) {
   12cdc:	0003      	movs	r3, r0
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   12cde:	3c0b      	subs	r4, #11
	}

	i = ll_rl_find(id_addr->type, id_addr->a.val);
	if (i >= 0) {
		return BT_HCI_ERR_INVALID_PARAM;
	} else if (i == -RL_IDX_NONE) {
   12ce0:	330f      	adds	r3, #15
   12ce2:	d076      	beq.n	12dd2 <ll_rl_add+0x122>
	}

	/* Device not found but empty slot found */
	i = -i;

	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   12ce4:	2624      	movs	r6, #36	; 0x24
	} else if (i == -RL_IDX_NONE) {
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
	}

	/* Device not found but empty slot found */
	i = -i;
   12ce6:	4247      	negs	r7, r0

	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   12ce8:	437e      	muls	r6, r7
   12cea:	4d3b      	ldr	r5, [pc, #236]	; (12dd8 <ll_rl_add+0x128>)
   12cec:	2206      	movs	r2, #6
   12cee:	19ab      	adds	r3, r5, r6
   12cf0:	1c98      	adds	r0, r3, #2
   12cf2:	9901      	ldr	r1, [sp, #4]
   12cf4:	f7ee f821 	bl	d3a <memcpy>
	rl[i].id_addr_type = id_addr->type & 0x1;
   12cf8:	2201      	movs	r2, #1
   12cfa:	2102      	movs	r1, #2
   12cfc:	9b00      	ldr	r3, [sp, #0]
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   12cfe:	9802      	ldr	r0, [sp, #8]

	/* Device not found but empty slot found */
	i = -i;

	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
	rl[i].id_addr_type = id_addr->type & 0x1;
   12d00:	781b      	ldrb	r3, [r3, #0]
   12d02:	4013      	ands	r3, r2
   12d04:	005a      	lsls	r2, r3, #1
   12d06:	19ab      	adds	r3, r5, r6
   12d08:	785b      	ldrb	r3, [r3, #1]
   12d0a:	438b      	bics	r3, r1
   12d0c:	4313      	orrs	r3, r2
   12d0e:	19aa      	adds	r2, r5, r6
   12d10:	7053      	strb	r3, [r2, #1]
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   12d12:	310e      	adds	r1, #14
   12d14:	f7f7 fe0e 	bl	a934 <mem_nz>
   12d18:	2301      	movs	r3, #1
   12d1a:	2204      	movs	r2, #4
   12d1c:	4018      	ands	r0, r3
   12d1e:	0083      	lsls	r3, r0, #2
   12d20:	5d70      	ldrb	r0, [r6, r5]
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   12d22:	2110      	movs	r1, #16
	/* Device not found but empty slot found */
	i = -i;

	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
	rl[i].id_addr_type = id_addr->type & 0x1;
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   12d24:	4390      	bics	r0, r2
   12d26:	4318      	orrs	r0, r3
   12d28:	5570      	strb	r0, [r6, r5]
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   12d2a:	9803      	ldr	r0, [sp, #12]
   12d2c:	f7f7 fe02 	bl	a934 <mem_nz>
   12d30:	2301      	movs	r3, #1
   12d32:	2240      	movs	r2, #64	; 0x40
   12d34:	4003      	ands	r3, r0
   12d36:	0198      	lsls	r0, r3, #6
   12d38:	5d73      	ldrb	r3, [r6, r5]
   12d3a:	4393      	bics	r3, r2
   12d3c:	4303      	orrs	r3, r0
   12d3e:	5573      	strb	r3, [r6, r5]
	if (rl[i].pirk) {
   12d40:	075a      	lsls	r2, r3, #29
   12d42:	d512      	bpl.n	12d6a <ll_rl_add+0xba>
		/* cross-reference */
		rl[i].pirk_idx = peer_irk_count;
   12d44:	2138      	movs	r1, #56	; 0x38
   12d46:	4a25      	ldr	r2, [pc, #148]	; (12ddc <ll_rl_add+0x12c>)
   12d48:	438b      	bics	r3, r1
   12d4a:	7810      	ldrb	r0, [r2, #0]
		peer_irk_rl_ids[peer_irk_count] = i;
		memcpy(peer_irks[peer_irk_count++], pirk, 16);
   12d4c:	9902      	ldr	r1, [sp, #8]
	rl[i].id_addr_type = id_addr->type & 0x1;
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
	if (rl[i].pirk) {
		/* cross-reference */
		rl[i].pirk_idx = peer_irk_count;
   12d4e:	4004      	ands	r4, r0
   12d50:	00e4      	lsls	r4, r4, #3
   12d52:	4323      	orrs	r3, r4
   12d54:	5573      	strb	r3, [r6, r5]
		peer_irk_rl_ids[peer_irk_count] = i;
   12d56:	4b22      	ldr	r3, [pc, #136]	; (12de0 <ll_rl_add+0x130>)
   12d58:	541f      	strb	r7, [r3, r0]
		memcpy(peer_irks[peer_irk_count++], pirk, 16);
   12d5a:	1c43      	adds	r3, r0, #1
   12d5c:	7013      	strb	r3, [r2, #0]
   12d5e:	4b21      	ldr	r3, [pc, #132]	; (12de4 <ll_rl_add+0x134>)
   12d60:	0100      	lsls	r0, r0, #4
   12d62:	1818      	adds	r0, r3, r0
   12d64:	2210      	movs	r2, #16
   12d66:	f7ed ffe8 	bl	d3a <memcpy>
	}
	if (rl[i].lirk) {
   12d6a:	2024      	movs	r0, #36	; 0x24
   12d6c:	4378      	muls	r0, r7
   12d6e:	4e1a      	ldr	r6, [pc, #104]	; (12dd8 <ll_rl_add+0x128>)
   12d70:	5d83      	ldrb	r3, [r0, r6]
   12d72:	065b      	lsls	r3, r3, #25
   12d74:	d505      	bpl.n	12d82 <ll_rl_add+0xd2>
		memcpy(rl[i].local_irk, lirk, 16);
   12d76:	3008      	adds	r0, #8
   12d78:	1830      	adds	r0, r6, r0
   12d7a:	2210      	movs	r2, #16
   12d7c:	9903      	ldr	r1, [sp, #12]
   12d7e:	f7ed ffdc 	bl	d3a <memcpy>
	}
	rl[i].rpas_ready = 0;
   12d82:	2424      	movs	r4, #36	; 0x24
	/* Default to Network Privacy */
	rl[i].dev = 0;
   12d84:	237d      	movs	r3, #125	; 0x7d
		memcpy(peer_irks[peer_irk_count++], pirk, 16);
	}
	if (rl[i].lirk) {
		memcpy(rl[i].local_irk, lirk, 16);
	}
	rl[i].rpas_ready = 0;
   12d86:	437c      	muls	r4, r7
   12d88:	5d2a      	ldrb	r2, [r5, r4]
	/* Default to Network Privacy */
	rl[i].dev = 0;
	/* Add reference to  a whitelist entry */
	j = wl_peers_find(id_addr->type, id_addr->a.val);
   12d8a:	9901      	ldr	r1, [sp, #4]
	if (rl[i].lirk) {
		memcpy(rl[i].local_irk, lirk, 16);
	}
	rl[i].rpas_ready = 0;
	/* Default to Network Privacy */
	rl[i].dev = 0;
   12d8c:	4013      	ands	r3, r2
   12d8e:	552b      	strb	r3, [r5, r4]
	/* Add reference to  a whitelist entry */
	j = wl_peers_find(id_addr->type, id_addr->a.val);
   12d90:	9b00      	ldr	r3, [sp, #0]
   12d92:	192d      	adds	r5, r5, r4
   12d94:	7818      	ldrb	r0, [r3, #0]
   12d96:	f7ff fba7 	bl	124e8 <wl_peers_find>
	if (j >= 0) {
   12d9a:	2800      	cmp	r0, #0
   12d9c:	db0e      	blt.n	12dbc <ll_rl_add+0x10c>
		wl_peers[j].rl_idx = i;
   12d9e:	2307      	movs	r3, #7
   12da0:	241e      	movs	r4, #30
   12da2:	4358      	muls	r0, r3
   12da4:	4910      	ldr	r1, [pc, #64]	; (12de8 <ll_rl_add+0x138>)
   12da6:	3308      	adds	r3, #8
   12da8:	403b      	ands	r3, r7
   12daa:	005a      	lsls	r2, r3, #1
   12dac:	5c43      	ldrb	r3, [r0, r1]
   12dae:	43a3      	bics	r3, r4
   12db0:	4313      	orrs	r3, r2
		rl[i].wl = 1;
   12db2:	2201      	movs	r2, #1
	/* Default to Network Privacy */
	rl[i].dev = 0;
	/* Add reference to  a whitelist entry */
	j = wl_peers_find(id_addr->type, id_addr->a.val);
	if (j >= 0) {
		wl_peers[j].rl_idx = i;
   12db4:	5443      	strb	r3, [r0, r1]
		rl[i].wl = 1;
   12db6:	786b      	ldrb	r3, [r5, #1]
   12db8:	4313      	orrs	r3, r2
   12dba:	e002      	b.n	12dc2 <ll_rl_add+0x112>
	} else {
		rl[i].wl = 0;
   12dbc:	2201      	movs	r2, #1
   12dbe:	786b      	ldrb	r3, [r5, #1]
   12dc0:	4393      	bics	r3, r2
	}
	rl[i].taken = 1;
   12dc2:	2024      	movs	r0, #36	; 0x24
   12dc4:	2201      	movs	r2, #1

	return 0;
   12dc6:	2400      	movs	r4, #0
		wl_peers[j].rl_idx = i;
		rl[i].wl = 1;
	} else {
		rl[i].wl = 0;
	}
	rl[i].taken = 1;
   12dc8:	4378      	muls	r0, r7
	j = wl_peers_find(id_addr->type, id_addr->a.val);
	if (j >= 0) {
		wl_peers[j].rl_idx = i;
		rl[i].wl = 1;
	} else {
		rl[i].wl = 0;
   12dca:	706b      	strb	r3, [r5, #1]
	}
	rl[i].taken = 1;
   12dcc:	5c33      	ldrb	r3, [r6, r0]
   12dce:	4313      	orrs	r3, r2
   12dd0:	5433      	strb	r3, [r6, r0]

	return 0;
}
   12dd2:	0020      	movs	r0, r4
   12dd4:	b005      	add	sp, #20
   12dd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12dd8:	20001f21 	.word	0x20001f21
   12ddc:	20001eb6 	.word	0x20001eb6
   12de0:	20001eae 	.word	0x20001eae
   12de4:	20001e2e 	.word	0x20001e2e
   12de8:	20001ee9 	.word	0x20001ee9

00012dec <ll_rl_remove>:

u32_t ll_rl_remove(bt_addr_le_t *id_addr)
{
   12dec:	b5f0      	push	{r4, r5, r6, r7, lr}
   12dee:	b085      	sub	sp, #20
   12df0:	9002      	str	r0, [sp, #8]
	int i;

	if (!rl_access_check(false)) {
   12df2:	f7ff fbcd 	bl	12590 <rl_access_check.constprop.1>
		return BT_HCI_ERR_CMD_DISALLOWED;
   12df6:	230c      	movs	r3, #12

u32_t ll_rl_remove(bt_addr_le_t *id_addr)
{
	int i;

	if (!rl_access_check(false)) {
   12df8:	2800      	cmp	r0, #0
   12dfa:	d057      	beq.n	12eac <ll_rl_remove+0xc0>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	/* find the device and mark it as empty */
	i = ll_rl_find(id_addr->type, id_addr->a.val);
   12dfc:	9b02      	ldr	r3, [sp, #8]
   12dfe:	3301      	adds	r3, #1
   12e00:	9303      	str	r3, [sp, #12]
   12e02:	9b02      	ldr	r3, [sp, #8]
   12e04:	9903      	ldr	r1, [sp, #12]
   12e06:	7818      	ldrb	r0, [r3, #0]
   12e08:	f7ff fd12 	bl	12830 <ll_rl_find>
		}
		rl[i].taken = 0;
		return 0;
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   12e0c:	2302      	movs	r3, #2
	if (!rl_access_check(false)) {
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	/* find the device and mark it as empty */
	i = ll_rl_find(id_addr->type, id_addr->a.val);
   12e0e:	9001      	str	r0, [sp, #4]
	if (i >= 0) {
   12e10:	2800      	cmp	r0, #0
   12e12:	db4b      	blt.n	12eac <ll_rl_remove+0xc0>
		int j, k;

		if (rl[i].pirk) {
   12e14:	2724      	movs	r7, #36	; 0x24
   12e16:	0003      	movs	r3, r0
   12e18:	437b      	muls	r3, r7
   12e1a:	4e26      	ldr	r6, [pc, #152]	; (12eb4 <ll_rl_remove+0xc8>)
   12e1c:	5d9c      	ldrb	r4, [r3, r6]
   12e1e:	0763      	lsls	r3, r4, #29
   12e20:	d52d      	bpl.n	12e7e <ll_rl_remove+0x92>
			/* Swap with last item */
			int pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   12e22:	4b25      	ldr	r3, [pc, #148]	; (12eb8 <ll_rl_remove+0xcc>)
   12e24:	781d      	ldrb	r5, [r3, #0]
   12e26:	3d01      	subs	r5, #1

			if (pj && pi != pj) {
   12e28:	2d00      	cmp	r5, #0
   12e2a:	d024      	beq.n	12e76 <ll_rl_remove+0x8a>
	if (i >= 0) {
		int j, k;

		if (rl[i].pirk) {
			/* Swap with last item */
			int pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   12e2c:	06a4      	lsls	r4, r4, #26
   12e2e:	0f64      	lsrs	r4, r4, #29

			if (pj && pi != pj) {
   12e30:	42ac      	cmp	r4, r5
   12e32:	d020      	beq.n	12e76 <ll_rl_remove+0x8a>
				memcpy(peer_irks[pi], peer_irks[pj], 16);
   12e34:	4821      	ldr	r0, [pc, #132]	; (12ebc <ll_rl_remove+0xd0>)
   12e36:	0123      	lsls	r3, r4, #4
   12e38:	0129      	lsls	r1, r5, #4
   12e3a:	1841      	adds	r1, r0, r1
   12e3c:	2210      	movs	r2, #16
   12e3e:	18c0      	adds	r0, r0, r3
   12e40:	f7ed ff7b 	bl	d3a <memcpy>
				for (k = 0;
   12e44:	2300      	movs	r3, #0
				     k < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE;
				     k++) {

					if (rl[k].taken && rl[k].pirk &&
   12e46:	46bc      	mov	ip, r7
   12e48:	4661      	mov	r1, ip
   12e4a:	4359      	muls	r1, r3
   12e4c:	5d8a      	ldrb	r2, [r1, r6]
   12e4e:	1c17      	adds	r7, r2, #0
   12e50:	07d0      	lsls	r0, r2, #31
   12e52:	d50d      	bpl.n	12e70 <ll_rl_remove+0x84>
   12e54:	0750      	lsls	r0, r2, #29
   12e56:	d50b      	bpl.n	12e70 <ll_rl_remove+0x84>
					    rl[k].pirk_idx == pj) {
   12e58:	0692      	lsls	r2, r2, #26
				memcpy(peer_irks[pi], peer_irks[pj], 16);
				for (k = 0;
				     k < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE;
				     k++) {

					if (rl[k].taken && rl[k].pirk &&
   12e5a:	0f52      	lsrs	r2, r2, #29
   12e5c:	4295      	cmp	r5, r2
   12e5e:	d107      	bne.n	12e70 <ll_rl_remove+0x84>
					    rl[k].pirk_idx == pj) {
						rl[k].pirk_idx = pi;
   12e60:	2038      	movs	r0, #56	; 0x38
   12e62:	00e2      	lsls	r2, r4, #3
   12e64:	4387      	bics	r7, r0
   12e66:	433a      	orrs	r2, r7
   12e68:	558a      	strb	r2, [r1, r6]
						peer_irk_rl_ids[pi] = k;
   12e6a:	4a15      	ldr	r2, [pc, #84]	; (12ec0 <ll_rl_remove+0xd4>)
   12e6c:	5513      	strb	r3, [r2, r4]
						break;
   12e6e:	e002      	b.n	12e76 <ll_rl_remove+0x8a>

			if (pj && pi != pj) {
				memcpy(peer_irks[pi], peer_irks[pj], 16);
				for (k = 0;
				     k < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE;
				     k++) {
   12e70:	3301      	adds	r3, #1
			/* Swap with last item */
			int pi = rl[i].pirk_idx, pj = peer_irk_count - 1;

			if (pj && pi != pj) {
				memcpy(peer_irks[pi], peer_irks[pj], 16);
				for (k = 0;
   12e72:	2b08      	cmp	r3, #8
   12e74:	d1e8      	bne.n	12e48 <ll_rl_remove+0x5c>
						peer_irk_rl_ids[pi] = k;
						break;
					}
				}
			}
			peer_irk_count--;
   12e76:	4a10      	ldr	r2, [pc, #64]	; (12eb8 <ll_rl_remove+0xcc>)
   12e78:	7813      	ldrb	r3, [r2, #0]
   12e7a:	3b01      	subs	r3, #1
   12e7c:	7013      	strb	r3, [r2, #0]
		}

		/* Check if referenced by a whitelist entry */
		j = wl_peers_find(id_addr->type, id_addr->a.val);
   12e7e:	9b02      	ldr	r3, [sp, #8]
   12e80:	9903      	ldr	r1, [sp, #12]
   12e82:	7818      	ldrb	r0, [r3, #0]
   12e84:	f7ff fb30 	bl	124e8 <wl_peers_find>
		if (j >= 0) {
   12e88:	2800      	cmp	r0, #0
   12e8a:	db06      	blt.n	12e9a <ll_rl_remove+0xae>
			wl_peers[j].rl_idx = RL_IDX_NONE;
   12e8c:	2307      	movs	r3, #7
   12e8e:	211e      	movs	r1, #30
   12e90:	4358      	muls	r0, r3
   12e92:	4a0c      	ldr	r2, [pc, #48]	; (12ec4 <ll_rl_remove+0xd8>)
   12e94:	5c83      	ldrb	r3, [r0, r2]
   12e96:	430b      	orrs	r3, r1
   12e98:	5483      	strb	r3, [r0, r2]
		}
		rl[i].taken = 0;
   12e9a:	2324      	movs	r3, #36	; 0x24
   12e9c:	2001      	movs	r0, #1
   12e9e:	9a01      	ldr	r2, [sp, #4]
   12ea0:	4904      	ldr	r1, [pc, #16]	; (12eb4 <ll_rl_remove+0xc8>)
   12ea2:	4353      	muls	r3, r2
   12ea4:	5c5a      	ldrb	r2, [r3, r1]
   12ea6:	4382      	bics	r2, r0
   12ea8:	545a      	strb	r2, [r3, r1]
		return 0;
   12eaa:	2300      	movs	r3, #0
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
}
   12eac:	0018      	movs	r0, r3
   12eae:	b005      	add	sp, #20
   12eb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12eb2:	46c0      	nop			; (mov r8, r8)
   12eb4:	20001f21 	.word	0x20001f21
   12eb8:	20001eb6 	.word	0x20001eb6
   12ebc:	20001e2e 	.word	0x20001e2e
   12ec0:	20001eae 	.word	0x20001eae
   12ec4:	20001ee9 	.word	0x20001ee9

00012ec8 <ll_rl_prpa_get>:

u32_t ll_rl_prpa_get(bt_addr_le_t *id_addr, bt_addr_t *prpa)
{
   12ec8:	b510      	push	{r4, lr}
   12eca:	000c      	movs	r4, r1
	int i;

	/* find the device and return its RPA */
	i = ll_rl_find(id_addr->type, id_addr->a.val);
   12ecc:	1c41      	adds	r1, r0, #1
   12ece:	7800      	ldrb	r0, [r0, #0]
   12ed0:	f7ff fcae 	bl	12830 <ll_rl_find>
	if (i >= 0) {
		bt_addr_copy(prpa, &rl[i].peer_rpa);
		return 0;
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   12ed4:	2302      	movs	r3, #2
{
	int i;

	/* find the device and return its RPA */
	i = ll_rl_find(id_addr->type, id_addr->a.val);
	if (i >= 0) {
   12ed6:	2800      	cmp	r0, #0
   12ed8:	db09      	blt.n	12eee <ll_rl_prpa_get+0x26>
		bt_addr_copy(prpa, &rl[i].peer_rpa);
   12eda:	3322      	adds	r3, #34	; 0x22
   12edc:	4358      	muls	r0, r3
   12ede:	4905      	ldr	r1, [pc, #20]	; (12ef4 <ll_rl_prpa_get+0x2c>)
   12ee0:	3018      	adds	r0, #24
   12ee2:	1809      	adds	r1, r1, r0
   12ee4:	2206      	movs	r2, #6
   12ee6:	0020      	movs	r0, r4
   12ee8:	f7ed ff27 	bl	d3a <memcpy>
		return 0;
   12eec:	2300      	movs	r3, #0
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;

}
   12eee:	0018      	movs	r0, r3
   12ef0:	bd10      	pop	{r4, pc}
   12ef2:	46c0      	nop			; (mov r8, r8)
   12ef4:	20001f21 	.word	0x20001f21

00012ef8 <ll_rl_lrpa_get>:

u32_t ll_rl_lrpa_get(bt_addr_le_t *id_addr, bt_addr_t *lrpa)
{
   12ef8:	b510      	push	{r4, lr}
   12efa:	000c      	movs	r4, r1
	int i;

	/* find the device and return the local RPA */
	i = ll_rl_find(id_addr->type, id_addr->a.val);
   12efc:	1c41      	adds	r1, r0, #1
   12efe:	7800      	ldrb	r0, [r0, #0]
   12f00:	f7ff fc96 	bl	12830 <ll_rl_find>
	if (i >= 0) {
		bt_addr_copy(lrpa, &rl[i].local_rpa);
		return 0;
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   12f04:	2302      	movs	r3, #2
{
	int i;

	/* find the device and return the local RPA */
	i = ll_rl_find(id_addr->type, id_addr->a.val);
	if (i >= 0) {
   12f06:	2800      	cmp	r0, #0
   12f08:	db09      	blt.n	12f1e <ll_rl_lrpa_get+0x26>
		bt_addr_copy(lrpa, &rl[i].local_rpa);
   12f0a:	3322      	adds	r3, #34	; 0x22
   12f0c:	4358      	muls	r0, r3
   12f0e:	4905      	ldr	r1, [pc, #20]	; (12f24 <ll_rl_lrpa_get+0x2c>)
   12f10:	2206      	movs	r2, #6
   12f12:	1809      	adds	r1, r1, r0
   12f14:	311e      	adds	r1, #30
   12f16:	0020      	movs	r0, r4
   12f18:	f7ed ff0f 	bl	d3a <memcpy>
		return 0;
   12f1c:	2300      	movs	r3, #0
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
}
   12f1e:	0018      	movs	r0, r3
   12f20:	bd10      	pop	{r4, pc}
   12f22:	46c0      	nop			; (mov r8, r8)
   12f24:	20001f21 	.word	0x20001f21

00012f28 <ll_rl_enable>:

u32_t ll_rl_enable(u8_t enable)
{
   12f28:	b510      	push	{r4, lr}
   12f2a:	0004      	movs	r4, r0
	if (!rl_access_check(false)) {
   12f2c:	f7ff fb30 	bl	12590 <rl_access_check.constprop.1>
		return BT_HCI_ERR_CMD_DISALLOWED;
   12f30:	230c      	movs	r3, #12
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
}

u32_t ll_rl_enable(u8_t enable)
{
	if (!rl_access_check(false)) {
   12f32:	2800      	cmp	r0, #0
   12f34:	d00c      	beq.n	12f50 <ll_rl_enable+0x28>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	switch (enable) {
   12f36:	2c00      	cmp	r4, #0
   12f38:	d005      	beq.n	12f46 <ll_rl_enable+0x1e>
   12f3a:	2c01      	cmp	r4, #1
   12f3c:	d107      	bne.n	12f4e <ll_rl_enable+0x26>
	case BT_HCI_ADDR_RES_DISABLE:
		rl_enable = 0;
		break;
	case BT_HCI_ADDR_RES_ENABLE:
		rl_enable = 1;
   12f3e:	4b05      	ldr	r3, [pc, #20]	; (12f54 <ll_rl_enable+0x2c>)
   12f40:	701c      	strb	r4, [r3, #0]
		break;
	default:
		return BT_HCI_ERR_INVALID_PARAM;
	}

	return 0;
   12f42:	2300      	movs	r3, #0
	case BT_HCI_ADDR_RES_DISABLE:
		rl_enable = 0;
		break;
	case BT_HCI_ADDR_RES_ENABLE:
		rl_enable = 1;
		break;
   12f44:	e004      	b.n	12f50 <ll_rl_enable+0x28>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	switch (enable) {
	case BT_HCI_ADDR_RES_DISABLE:
		rl_enable = 0;
   12f46:	4b03      	ldr	r3, [pc, #12]	; (12f54 <ll_rl_enable+0x2c>)
   12f48:	701c      	strb	r4, [r3, #0]
		break;
	default:
		return BT_HCI_ERR_INVALID_PARAM;
	}

	return 0;
   12f4a:	0023      	movs	r3, r4
	}

	switch (enable) {
	case BT_HCI_ADDR_RES_DISABLE:
		rl_enable = 0;
		break;
   12f4c:	e000      	b.n	12f50 <ll_rl_enable+0x28>
	case BT_HCI_ADDR_RES_ENABLE:
		rl_enable = 1;
		break;
	default:
		return BT_HCI_ERR_INVALID_PARAM;
   12f4e:	2312      	movs	r3, #18
	}

	return 0;
}
   12f50:	0018      	movs	r0, r3
   12f52:	bd10      	pop	{r4, pc}
   12f54:	20002041 	.word	0x20002041

00012f58 <ll_rl_timeout_set>:

void ll_rl_timeout_set(u16_t timeout)
{
	rpa_timeout_ms = timeout * 1000;
   12f58:	23fa      	movs	r3, #250	; 0xfa
   12f5a:	009b      	lsls	r3, r3, #2
   12f5c:	4358      	muls	r0, r3
   12f5e:	4b01      	ldr	r3, [pc, #4]	; (12f64 <ll_rl_timeout_set+0xc>)
   12f60:	6018      	str	r0, [r3, #0]
}
   12f62:	4770      	bx	lr
   12f64:	20002340 	.word	0x20002340

00012f68 <ll_priv_mode_set>:

u32_t ll_priv_mode_set(bt_addr_le_t *id_addr, u8_t mode)
{
   12f68:	b570      	push	{r4, r5, r6, lr}
   12f6a:	0005      	movs	r5, r0
   12f6c:	000c      	movs	r4, r1
	int i;

	if (!rl_access_check(false)) {
   12f6e:	f7ff fb0f 	bl	12590 <rl_access_check.constprop.1>
		return BT_HCI_ERR_CMD_DISALLOWED;
   12f72:	230c      	movs	r3, #12

u32_t ll_priv_mode_set(bt_addr_le_t *id_addr, u8_t mode)
{
	int i;

	if (!rl_access_check(false)) {
   12f74:	2800      	cmp	r0, #0
   12f76:	d01c      	beq.n	12fb2 <ll_priv_mode_set+0x4a>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	/* find the device and mark it as empty */
	i = ll_rl_find(id_addr->type, id_addr->a.val);
   12f78:	1c69      	adds	r1, r5, #1
   12f7a:	7828      	ldrb	r0, [r5, #0]
   12f7c:	f7ff fc58 	bl	12830 <ll_rl_find>
		default:
			return BT_HCI_ERR_INVALID_PARAM;
		}
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   12f80:	2302      	movs	r3, #2
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	/* find the device and mark it as empty */
	i = ll_rl_find(id_addr->type, id_addr->a.val);
	if (i >= 0) {
   12f82:	2800      	cmp	r0, #0
   12f84:	db15      	blt.n	12fb2 <ll_priv_mode_set+0x4a>
		switch (mode) {
   12f86:	2c00      	cmp	r4, #0
   12f88:	d009      	beq.n	12f9e <ll_priv_mode_set+0x36>
   12f8a:	2c01      	cmp	r4, #1
   12f8c:	d110      	bne.n	12fb0 <ll_priv_mode_set+0x48>
		case BT_HCI_LE_PRIVACY_MODE_NETWORK:
			rl[i].dev = 0;
			break;
		case BT_HCI_LE_PRIVACY_MODE_DEVICE:
			rl[i].dev = 1;
   12f8e:	2324      	movs	r3, #36	; 0x24
   12f90:	2180      	movs	r1, #128	; 0x80
   12f92:	4358      	muls	r0, r3
   12f94:	4a08      	ldr	r2, [pc, #32]	; (12fb8 <ll_priv_mode_set+0x50>)
   12f96:	4249      	negs	r1, r1
   12f98:	5c83      	ldrb	r3, [r0, r2]
   12f9a:	430b      	orrs	r3, r1
   12f9c:	e005      	b.n	12faa <ll_priv_mode_set+0x42>
	/* find the device and mark it as empty */
	i = ll_rl_find(id_addr->type, id_addr->a.val);
	if (i >= 0) {
		switch (mode) {
		case BT_HCI_LE_PRIVACY_MODE_NETWORK:
			rl[i].dev = 0;
   12f9e:	2324      	movs	r3, #36	; 0x24
   12fa0:	4358      	muls	r0, r3
   12fa2:	4a05      	ldr	r2, [pc, #20]	; (12fb8 <ll_priv_mode_set+0x50>)
   12fa4:	335b      	adds	r3, #91	; 0x5b
   12fa6:	5c81      	ldrb	r1, [r0, r2]
   12fa8:	400b      	ands	r3, r1
			break;
		case BT_HCI_LE_PRIVACY_MODE_DEVICE:
			rl[i].dev = 1;
   12faa:	5483      	strb	r3, [r0, r2]
		default:
			return BT_HCI_ERR_INVALID_PARAM;
		}
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   12fac:	2302      	movs	r3, #2
		case BT_HCI_LE_PRIVACY_MODE_NETWORK:
			rl[i].dev = 0;
			break;
		case BT_HCI_LE_PRIVACY_MODE_DEVICE:
			rl[i].dev = 1;
			break;
   12fae:	e000      	b.n	12fb2 <ll_priv_mode_set+0x4a>
		default:
			return BT_HCI_ERR_INVALID_PARAM;
   12fb0:	2312      	movs	r3, #18
		}
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
}
   12fb2:	0018      	movs	r0, r3
   12fb4:	bd70      	pop	{r4, r5, r6, pc}
   12fb6:	46c0      	nop			; (mov r8, r8)
   12fb8:	20001f21 	.word	0x20001f21

00012fbc <ll_filter_reset>:

#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */

void ll_filter_reset(bool init)
{
	wl_anon = 0;
   12fbc:	2300      	movs	r3, #0
}

#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */

void ll_filter_reset(bool init)
{
   12fbe:	b570      	push	{r4, r5, r6, lr}
		    !memcmp(list[i].id_addr.val, addr, BDADDR_SIZE))

static void wl_peers_clear(void)
{
	for (int i = 0; i < WL_SIZE; i++) {
		wl_peers[i].taken = 0;
   12fc0:	2607      	movs	r6, #7
   12fc2:	2501      	movs	r5, #1

#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */

void ll_filter_reset(bool init)
{
	wl_anon = 0;
   12fc4:	4a17      	ldr	r2, [pc, #92]	; (13024 <ll_filter_reset+0x68>)
}

#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */

void ll_filter_reset(bool init)
{
   12fc6:	0001      	movs	r1, r0
		    !memcmp(list[i].id_addr.val, addr, BDADDR_SIZE))

static void wl_peers_clear(void)
{
	for (int i = 0; i < WL_SIZE; i++) {
		wl_peers[i].taken = 0;
   12fc8:	4817      	ldr	r0, [pc, #92]	; (13028 <ll_filter_reset+0x6c>)

#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */

void ll_filter_reset(bool init)
{
	wl_anon = 0;
   12fca:	7013      	strb	r3, [r2, #0]
		    !memcmp(list[i].id_addr.val, addr, BDADDR_SIZE))

static void wl_peers_clear(void)
{
	for (int i = 0; i < WL_SIZE; i++) {
		wl_peers[i].taken = 0;
   12fcc:	0034      	movs	r4, r6
   12fce:	435c      	muls	r4, r3
   12fd0:	5c22      	ldrb	r2, [r4, r0]
		    (list[i].id_addr_type == (type & 0x1)) && \
		    !memcmp(list[i].id_addr.val, addr, BDADDR_SIZE))

static void wl_peers_clear(void)
{
	for (int i = 0; i < WL_SIZE; i++) {
   12fd2:	3301      	adds	r3, #1
		wl_peers[i].taken = 0;
   12fd4:	43aa      	bics	r2, r5
   12fd6:	5422      	strb	r2, [r4, r0]
		    (list[i].id_addr_type == (type & 0x1)) && \
		    !memcmp(list[i].id_addr.val, addr, BDADDR_SIZE))

static void wl_peers_clear(void)
{
	for (int i = 0; i < WL_SIZE; i++) {
   12fd8:	2b08      	cmp	r3, #8
   12fda:	d1f7      	bne.n	12fcc <ll_filter_reset+0x10>
	wl_anon = 0;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	wl_peers_clear();

	rl_enable = 0;
   12fdc:	2300      	movs	r3, #0
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
	rpa_last_ms = -1;
   12fde:	2401      	movs	r4, #1
   12fe0:	4264      	negs	r4, r4
   12fe2:	17e5      	asrs	r5, r4, #31
	wl_anon = 0;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	wl_peers_clear();

	rl_enable = 0;
   12fe4:	4a11      	ldr	r2, [pc, #68]	; (1302c <ll_filter_reset+0x70>)
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   12fe6:	4812      	ldr	r0, [pc, #72]	; (13030 <ll_filter_reset+0x74>)
	wl_anon = 0;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	wl_peers_clear();

	rl_enable = 0;
   12fe8:	7013      	strb	r3, [r2, #0]
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   12fea:	4a12      	ldr	r2, [pc, #72]	; (13034 <ll_filter_reset+0x78>)
#endif

static void rl_clear(void)
{
	for (int i = 0; i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE; i++) {
		rl[i].taken = 0;
   12fec:	2624      	movs	r6, #36	; 0x24

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	wl_peers_clear();

	rl_enable = 0;
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   12fee:	6010      	str	r0, [r2, #0]
	rpa_last_ms = -1;
   12ff0:	4a11      	ldr	r2, [pc, #68]	; (13038 <ll_filter_reset+0x7c>)
#endif

static void rl_clear(void)
{
	for (int i = 0; i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE; i++) {
		rl[i].taken = 0;
   12ff2:	4812      	ldr	r0, [pc, #72]	; (1303c <ll_filter_reset+0x80>)
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	wl_peers_clear();

	rl_enable = 0;
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
	rpa_last_ms = -1;
   12ff4:	6014      	str	r4, [r2, #0]
   12ff6:	6055      	str	r5, [r2, #4]
#endif

static void rl_clear(void)
{
	for (int i = 0; i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE; i++) {
		rl[i].taken = 0;
   12ff8:	2501      	movs	r5, #1
   12ffa:	0034      	movs	r4, r6
   12ffc:	435c      	muls	r4, r3
   12ffe:	5c22      	ldrb	r2, [r4, r0]
}
#endif

static void rl_clear(void)
{
	for (int i = 0; i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE; i++) {
   13000:	3301      	adds	r3, #1
		rl[i].taken = 0;
   13002:	43aa      	bics	r2, r5
   13004:	5422      	strb	r2, [r4, r0]
}
#endif

static void rl_clear(void)
{
	for (int i = 0; i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE; i++) {
   13006:	2b08      	cmp	r3, #8
   13008:	d1f7      	bne.n	12ffa <ll_filter_reset+0x3e>
		rl[i].taken = 0;
	}

	peer_irk_count = 0;
   1300a:	2200      	movs	r2, #0
   1300c:	4b0c      	ldr	r3, [pc, #48]	; (13040 <ll_filter_reset+0x84>)
   1300e:	480d      	ldr	r0, [pc, #52]	; (13044 <ll_filter_reset+0x88>)
   13010:	701a      	strb	r2, [r3, #0]

	rl_enable = 0;
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
	rpa_last_ms = -1;
	rl_clear();
	if (init) {
   13012:	4291      	cmp	r1, r2
   13014:	d003      	beq.n	1301e <ll_filter_reset+0x62>
		k_delayed_work_init(&rpa_work, rpa_timeout);
   13016:	490c      	ldr	r1, [pc, #48]	; (13048 <ll_filter_reset+0x8c>)
   13018:	f001 ff2c 	bl	14e74 <k_delayed_work_init>
   1301c:	e001      	b.n	13022 <ll_filter_reset+0x66>
	} else {
		k_delayed_work_cancel(&rpa_work);
   1301e:	f001 ff3f 	bl	14ea0 <k_delayed_work_cancel>
	}
#else
	filter_clear(&wl);
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */

}
   13022:	bd70      	pop	{r4, r5, r6, pc}
   13024:	20002250 	.word	0x20002250
   13028:	20001ee9 	.word	0x20001ee9
   1302c:	20002041 	.word	0x20002041
   13030:	000dbba0 	.word	0x000dbba0
   13034:	20002340 	.word	0x20002340
   13038:	20002248 	.word	0x20002248
   1303c:	20001f21 	.word	0x20001f21
   13040:	20001eb6 	.word	0x20001eb6
   13044:	200022b8 	.word	0x200022b8
   13048:	000027ad 	.word	0x000027ad

0001304c <ll_adv_set_get>:
static struct ll_adv_set ll_adv;

struct ll_adv_set *ll_adv_set_get(void)
{
	return &ll_adv;
}
   1304c:	4800      	ldr	r0, [pc, #0]	; (13050 <ll_adv_set_get+0x4>)
   1304e:	4770      	bx	lr
   13050:	20002044 	.word	0x20002044

00013054 <ll_adv_params_set>:
u32_t ll_adv_params_set(u8_t handle, u16_t evt_prop, u32_t interval,
			u8_t adv_type, u8_t own_addr_type,
			u8_t direct_addr_type, u8_t const *const direct_addr,
			u8_t chan_map, u8_t filter_policy, u8_t *tx_pwr,
			u8_t phy_p, u8_t skip, u8_t phy_s, u8_t sid, u8_t sreq)
{
   13054:	b5f0      	push	{r4, r5, r6, r7, lr}
   13056:	b08d      	sub	sp, #52	; 0x34
   13058:	001e      	movs	r6, r3
   1305a:	ab12      	add	r3, sp, #72	; 0x48
   1305c:	781b      	ldrb	r3, [r3, #0]
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   1305e:	4c83      	ldr	r4, [pc, #524]	; (1326c <ll_adv_params_set+0x218>)
u32_t ll_adv_params_set(u8_t handle, u16_t evt_prop, u32_t interval,
			u8_t adv_type, u8_t own_addr_type,
			u8_t direct_addr_type, u8_t const *const direct_addr,
			u8_t chan_map, u8_t filter_policy, u8_t *tx_pwr,
			u8_t phy_p, u8_t skip, u8_t phy_s, u8_t sid, u8_t sreq)
{
   13060:	9302      	str	r3, [sp, #8]
   13062:	ab13      	add	r3, sp, #76	; 0x4c
   13064:	781b      	ldrb	r3, [r3, #0]
   13066:	9205      	str	r2, [sp, #20]
   13068:	9303      	str	r3, [sp, #12]
   1306a:	ab15      	add	r3, sp, #84	; 0x54
   1306c:	781b      	ldrb	r3, [r3, #0]
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   1306e:	2206      	movs	r2, #6
u32_t ll_adv_params_set(u8_t handle, u16_t evt_prop, u32_t interval,
			u8_t adv_type, u8_t own_addr_type,
			u8_t direct_addr_type, u8_t const *const direct_addr,
			u8_t chan_map, u8_t filter_policy, u8_t *tx_pwr,
			u8_t phy_p, u8_t skip, u8_t phy_s, u8_t sid, u8_t sreq)
{
   13070:	9306      	str	r3, [sp, #24]
   13072:	ab16      	add	r3, sp, #88	; 0x58
   13074:	781b      	ldrb	r3, [r3, #0]
   13076:	000f      	movs	r7, r1
   13078:	9307      	str	r3, [sp, #28]
   1307a:	ab18      	add	r3, sp, #96	; 0x60
   1307c:	781b      	ldrb	r3, [r3, #0]
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   1307e:	0021      	movs	r1, r4
   13080:	a80a      	add	r0, sp, #40	; 0x28
u32_t ll_adv_params_set(u8_t handle, u16_t evt_prop, u32_t interval,
			u8_t adv_type, u8_t own_addr_type,
			u8_t direct_addr_type, u8_t const *const direct_addr,
			u8_t chan_map, u8_t filter_policy, u8_t *tx_pwr,
			u8_t phy_p, u8_t skip, u8_t phy_s, u8_t sid, u8_t sreq)
{
   13082:	9304      	str	r3, [sp, #16]
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   13084:	f7ed fe59 	bl	d3a <memcpy>
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */

	struct radio_adv_data *radio_adv_data;
	struct pdu_adv *pdu;

	if (radio_adv_is_enabled()) {
   13088:	f7fe fb0e 	bl	116a8 <radio_adv_is_enabled>
   1308c:	9001      	str	r0, [sp, #4]
   1308e:	2800      	cmp	r0, #0
   13090:	d000      	beq.n	13094 <ll_adv_params_set+0x40>
   13092:	e0e3      	b.n	1325c <ll_adv_params_set+0x208>
#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
	/* TODO: check and fail (0x12, invalid HCI cmd param) if invalid
	 * evt_prop bits.
	 */

	ll_adv.phy_p = BIT(0);
   13094:	2107      	movs	r1, #7
   13096:	2501      	movs	r5, #1
   13098:	4a75      	ldr	r2, [pc, #468]	; (13270 <ll_adv_params_set+0x21c>)
   1309a:	7a13      	ldrb	r3, [r2, #8]
   1309c:	438b      	bics	r3, r1
   1309e:	432b      	orrs	r3, r5
   130a0:	7213      	strb	r3, [r2, #8]

	/* extended */
	if (adv_type > 0x04) {
   130a2:	2e04      	cmp	r6, #4
   130a4:	d91f      	bls.n	130e6 <ll_adv_params_set+0x92>
		/* legacy */
		if (evt_prop & BIT(4)) {
   130a6:	06fb      	lsls	r3, r7, #27
   130a8:	d50c      	bpl.n	130c4 <ll_adv_params_set+0x70>
			u8_t const leg_adv_type[] = { 0x03, 0x04, 0x02, 0x00};
   130aa:	ae09      	add	r6, sp, #36	; 0x24
   130ac:	0030      	movs	r0, r6
   130ae:	1da1      	adds	r1, r4, #6
   130b0:	2204      	movs	r2, #4
   130b2:	f7ed fe42 	bl	d3a <memcpy>

			adv_type = leg_adv_type[evt_prop & 0x03];
   130b6:	2303      	movs	r3, #3
   130b8:	403b      	ands	r3, r7
   130ba:	5cf6      	ldrb	r6, [r6, r3]

			/* high duty cycle directed */
			if (evt_prop & BIT(3)) {
   130bc:	073b      	lsls	r3, r7, #28
   130be:	d512      	bpl.n	130e6 <ll_adv_params_set+0x92>
				adv_type = 0x01;
   130c0:	002e      	movs	r6, r5
   130c2:	e015      	b.n	130f0 <ll_adv_params_set+0x9c>
			}
		} else {
			/* - Connectable and scannable not allowed;
			 * - High duty cycle directed connectable not allowed
			 */
			if (((evt_prop & 0x03) == 0x03) ||
   130c4:	43fb      	mvns	r3, r7
   130c6:	079b      	lsls	r3, r3, #30
   130c8:	d100      	bne.n	130cc <ll_adv_params_set+0x78>
   130ca:	e0c9      	b.n	13260 <ll_adv_params_set+0x20c>
   130cc:	230c      	movs	r3, #12
   130ce:	403b      	ands	r3, r7
   130d0:	2b0c      	cmp	r3, #12
   130d2:	d100      	bne.n	130d6 <ll_adv_params_set+0x82>
   130d4:	e0c4      	b.n	13260 <ll_adv_params_set+0x20c>
				return 0x12; /* invalid HCI cmd param */
			}

			adv_type = 0x05; /* PDU_ADV_TYPE_EXT_IND */

			ll_adv.phy_p = phy_p;
   130d6:	7a13      	ldrb	r3, [r2, #8]
   130d8:	9804      	ldr	r0, [sp, #16]
   130da:	438b      	bics	r3, r1
   130dc:	4008      	ands	r0, r1
   130de:	4303      	orrs	r3, r0
   130e0:	7213      	strb	r3, [r2, #8]
			if (((evt_prop & 0x03) == 0x03) ||
			    ((evt_prop & 0x0C) == 0x0C)) {
				return 0x12; /* invalid HCI cmd param */
			}

			adv_type = 0x05; /* PDU_ADV_TYPE_EXT_IND */
   130e2:	2605      	movs	r6, #5
   130e4:	e001      	b.n	130ea <ll_adv_params_set+0x96>
	/* remember params so that set adv/scan data and adv enable
	 * interface can correctly update adv/scan data in the
	 * double buffer between caller and controller context.
	 */
	/* Set interval for Undirected or Low Duty Cycle Directed Advertising */
	if (adv_type != 0x01) {
   130e6:	2e01      	cmp	r6, #1
   130e8:	d002      	beq.n	130f0 <ll_adv_params_set+0x9c>
		ll_adv.interval = interval;
   130ea:	4b61      	ldr	r3, [pc, #388]	; (13270 <ll_adv_params_set+0x21c>)
   130ec:	9a05      	ldr	r2, [sp, #20]
   130ee:	e001      	b.n	130f4 <ll_adv_params_set+0xa0>
	} else {
		ll_adv.interval = 0;
   130f0:	2200      	movs	r2, #0
   130f2:	4b5f      	ldr	r3, [pc, #380]	; (13270 <ll_adv_params_set+0x21c>)
   130f4:	60da      	str	r2, [r3, #12]
	}
	ll_adv.chan_map = chan_map;
   130f6:	2207      	movs	r2, #7
   130f8:	4d5d      	ldr	r5, [pc, #372]	; (13270 <ll_adv_params_set+0x21c>)
   130fa:	9b06      	ldr	r3, [sp, #24]
   130fc:	7829      	ldrb	r1, [r5, #0]
   130fe:	4013      	ands	r3, r2
   13100:	4391      	bics	r1, r2
	ll_adv.filter_policy = filter_policy;
   13102:	430b      	orrs	r3, r1
   13104:	2118      	movs	r1, #24
   13106:	9807      	ldr	r0, [sp, #28]
   13108:	3a04      	subs	r2, #4
   1310a:	4010      	ands	r0, r2
   1310c:	00c2      	lsls	r2, r0, #3
   1310e:	438b      	bics	r3, r1
   13110:	4313      	orrs	r3, r2
   13112:	702b      	strb	r3, [r5, #0]

	/* update the "current" primary adv data */
	radio_adv_data = radio_adv_data_get();
   13114:	f7fe fabc 	bl	11690 <radio_adv_data_get>
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   13118:	0003      	movs	r3, r0
   1311a:	334f      	adds	r3, #79	; 0x4f
   1311c:	781c      	ldrb	r4, [r3, #0]
   1311e:	2327      	movs	r3, #39	; 0x27
	pdu->type = pdu_adv_type[adv_type];
   13120:	210f      	movs	r1, #15
	ll_adv.chan_map = chan_map;
	ll_adv.filter_policy = filter_policy;

	/* update the "current" primary adv data */
	radio_adv_data = radio_adv_data_get();
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   13122:	435c      	muls	r4, r3
	pdu->type = pdu_adv_type[adv_type];
   13124:	ab0a      	add	r3, sp, #40	; 0x28
   13126:	5d9b      	ldrb	r3, [r3, r6]
	ll_adv.chan_map = chan_map;
	ll_adv.filter_policy = filter_policy;

	/* update the "current" primary adv data */
	radio_adv_data = radio_adv_data_get();
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   13128:	1904      	adds	r4, r0, r4
	pdu->type = pdu_adv_type[adv_type];
   1312a:	400b      	ands	r3, r1
   1312c:	001a      	movs	r2, r3
   1312e:	7823      	ldrb	r3, [r4, #0]
   13130:	438b      	bics	r3, r1
	pdu->rfu = 0;
   13132:	4313      	orrs	r3, r2
   13134:	2210      	movs	r2, #16
   13136:	4393      	bics	r3, r2
   13138:	7023      	strb	r3, [r4, #0]

	if (IS_ENABLED(CONFIG_BLUETOOTH_CONTROLLER_CHAN_SEL_2) &&
   1313a:	4019      	ands	r1, r3
   1313c:	1892      	adds	r2, r2, r2
   1313e:	2901      	cmp	r1, #1
   13140:	d801      	bhi.n	13146 <ll_adv_params_set+0xf2>
	    ((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
	     (pdu->type == PDU_ADV_TYPE_DIRECT_IND))) {
		pdu->chan_sel = 1;
   13142:	4313      	orrs	r3, r2
   13144:	e000      	b.n	13148 <ll_adv_params_set+0xf4>
	} else {
		pdu->chan_sel = 0;
   13146:	4393      	bics	r3, r2
   13148:	7023      	strb	r3, [r4, #0]
	}

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	ll_adv.own_addr_type = own_addr_type;
   1314a:	2303      	movs	r3, #3
   1314c:	2130      	movs	r1, #48	; 0x30
   1314e:	9a02      	ldr	r2, [sp, #8]
   13150:	4013      	ands	r3, r2
   13152:	011a      	lsls	r2, r3, #4
   13154:	786b      	ldrb	r3, [r5, #1]
   13156:	438b      	bics	r3, r1
   13158:	4313      	orrs	r3, r2
   1315a:	706b      	strb	r3, [r5, #1]
	if (ll_adv.own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   1315c:	069a      	lsls	r2, r3, #26
   1315e:	d50c      	bpl.n	1317a <ll_adv_params_set+0x126>
	    ll_adv.own_addr_type == BT_ADDR_LE_RANDOM_ID) {
		ll_adv.id_addr_type = direct_addr_type;
   13160:	2201      	movs	r2, #1
   13162:	9903      	ldr	r1, [sp, #12]
		memcpy(&ll_adv.id_addr, direct_addr, BDADDR_SIZE);
   13164:	1ca8      	adds	r0, r5, #2

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	ll_adv.own_addr_type = own_addr_type;
	if (ll_adv.own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
	    ll_adv.own_addr_type == BT_ADDR_LE_RANDOM_ID) {
		ll_adv.id_addr_type = direct_addr_type;
   13166:	400a      	ands	r2, r1
   13168:	2140      	movs	r1, #64	; 0x40
   1316a:	0192      	lsls	r2, r2, #6
   1316c:	438b      	bics	r3, r1
   1316e:	4313      	orrs	r3, r2
		memcpy(&ll_adv.id_addr, direct_addr, BDADDR_SIZE);
   13170:	9914      	ldr	r1, [sp, #80]	; 0x50
   13172:	2206      	movs	r2, #6

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	ll_adv.own_addr_type = own_addr_type;
	if (ll_adv.own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
	    ll_adv.own_addr_type == BT_ADDR_LE_RANDOM_ID) {
		ll_adv.id_addr_type = direct_addr_type;
   13174:	706b      	strb	r3, [r5, #1]
		memcpy(&ll_adv.id_addr, direct_addr, BDADDR_SIZE);
   13176:	f7ed fde0 	bl	d3a <memcpy>
	}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */
	pdu->tx_addr = own_addr_type & 0x1;
   1317a:	2101      	movs	r1, #1
   1317c:	2040      	movs	r0, #64	; 0x40
   1317e:	9d02      	ldr	r5, [sp, #8]
   13180:	7823      	ldrb	r3, [r4, #0]
   13182:	400d      	ands	r5, r1
   13184:	01aa      	lsls	r2, r5, #6
   13186:	4383      	bics	r3, r0
	pdu->rx_addr = 0;
   13188:	4313      	orrs	r3, r2
   1318a:	227f      	movs	r2, #127	; 0x7f
   1318c:	4013      	ands	r3, r2
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   1318e:	3a70      	subs	r2, #112	; 0x70
		ll_adv.id_addr_type = direct_addr_type;
		memcpy(&ll_adv.id_addr, direct_addr, BDADDR_SIZE);
	}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */
	pdu->tx_addr = own_addr_type & 0x1;
	pdu->rx_addr = 0;
   13190:	7023      	strb	r3, [r4, #0]
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   13192:	401a      	ands	r2, r3
   13194:	428a      	cmp	r2, r1
   13196:	d10b      	bne.n	131b0 <ll_adv_params_set+0x15c>
		pdu->rx_addr = direct_addr_type;
		memcpy(&pdu->payload.direct_ind.tgt_addr[0], direct_addr,
   13198:	0020      	movs	r0, r4
	}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */
	pdu->tx_addr = own_addr_type & 0x1;
	pdu->rx_addr = 0;
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
		pdu->rx_addr = direct_addr_type;
   1319a:	9a03      	ldr	r2, [sp, #12]
		memcpy(&pdu->payload.direct_ind.tgt_addr[0], direct_addr,
   1319c:	3008      	adds	r0, #8
	}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */
	pdu->tx_addr = own_addr_type & 0x1;
	pdu->rx_addr = 0;
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
		pdu->rx_addr = direct_addr_type;
   1319e:	01d2      	lsls	r2, r2, #7
   131a0:	4313      	orrs	r3, r2
   131a2:	7023      	strb	r3, [r4, #0]
		memcpy(&pdu->payload.direct_ind.tgt_addr[0], direct_addr,
   131a4:	2206      	movs	r2, #6
   131a6:	9914      	ldr	r1, [sp, #80]	; 0x50
   131a8:	f7ed fdc7 	bl	d3a <memcpy>
		       BDADDR_SIZE);
		pdu->len = sizeof(struct pdu_adv_payload_direct_ind);
   131ac:	230c      	movs	r3, #12
   131ae:	e03a      	b.n	13226 <ll_adv_params_set+0x1d2>

#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
	} else if (pdu->type == PDU_ADV_TYPE_EXT_IND) {
   131b0:	2a07      	cmp	r2, #7
   131b2:	d134      	bne.n	1321e <ll_adv_params_set+0x1ca>
		h = (void *)p->ext_hdr_adi_adv_data;
		ptr = (u8_t *)h + sizeof(*h);

		/* No ACAD and no AdvData */
		p->ext_hdr_len = 0;
		p->adv_mode = evt_prop & 0x03;
   131b4:	01b8      	lsls	r0, r7, #6
   131b6:	70a0      	strb	r0, [r4, #2]

		/* Zero-init header flags */
		*(u8_t *)h = 0;
   131b8:	2000      	movs	r0, #0
		struct pdu_adv_payload_com_ext_adv *p;
		struct ext_adv_hdr *h;
		u8_t *ptr;
		u8_t len;

		p = (void *)&pdu->payload.adv_ext_ind;
   131ba:	1ca2      	adds	r2, r4, #2
		h = (void *)p->ext_hdr_adi_adv_data;
		ptr = (u8_t *)h + sizeof(*h);
   131bc:	1d23      	adds	r3, r4, #4
		/* No ACAD and no AdvData */
		p->ext_hdr_len = 0;
		p->adv_mode = evt_prop & 0x03;

		/* Zero-init header flags */
		*(u8_t *)h = 0;
   131be:	70e0      	strb	r0, [r4, #3]

		/* AdvA flag */
		if (!(evt_prop & BIT(5)) && !p->adv_mode && (phy_p != BIT(2))) {
   131c0:	06b8      	lsls	r0, r7, #26
   131c2:	d408      	bmi.n	131d6 <ll_adv_params_set+0x182>
   131c4:	263f      	movs	r6, #63	; 0x3f
   131c6:	78a0      	ldrb	r0, [r4, #2]
   131c8:	43b0      	bics	r0, r6
   131ca:	d104      	bne.n	131d6 <ll_adv_params_set+0x182>
   131cc:	9804      	ldr	r0, [sp, #16]
   131ce:	2804      	cmp	r0, #4
   131d0:	d001      	beq.n	131d6 <ll_adv_params_set+0x182>
			/* TODO: optional on 1M */
			h->adv_addr = 1;
   131d2:	70e1      	strb	r1, [r4, #3]

			/* NOTE: AdvA is filled at enable */
			ptr += BDADDR_SIZE;
   131d4:	3306      	adds	r3, #6
		/* TODO: AuxPtr flag */

		/* TODO: SyncInfo flag */

		/* Tx Power flag */
		if (evt_prop & BIT(6)) {
   131d6:	2040      	movs	r0, #64	; 0x40
   131d8:	4207      	tst	r7, r0
   131da:	d003      	beq.n	131e4 <ll_adv_params_set+0x190>
			h->tx_pwr = 1;
   131dc:	78e1      	ldrb	r1, [r4, #3]
			ptr++;
   131de:	3301      	adds	r3, #1

		/* TODO: SyncInfo flag */

		/* Tx Power flag */
		if (evt_prop & BIT(6)) {
			h->tx_pwr = 1;
   131e0:	4301      	orrs	r1, r0
   131e2:	70e1      	strb	r1, [r4, #3]
			ptr++;
		}

		/* Calc primary PDU len */
		len = ptr - (u8_t *)p;
   131e4:	1a9a      	subs	r2, r3, r2
   131e6:	b2d2      	uxtb	r2, r2
		if (len > (offsetof(struct pdu_adv_payload_com_ext_adv,
   131e8:	2a02      	cmp	r2, #2
   131ea:	d908      	bls.n	131fe <ll_adv_params_set+0x1aa>
				    ext_hdr_adi_adv_data) + sizeof(*h))) {
			p->ext_hdr_len = len -
   131ec:	263f      	movs	r6, #63	; 0x3f
   131ee:	1e51      	subs	r1, r2, #1
   131f0:	4031      	ands	r1, r6
   131f2:	0008      	movs	r0, r1
   131f4:	78a1      	ldrb	r1, [r4, #2]
   131f6:	43b1      	bics	r1, r6
   131f8:	4301      	orrs	r1, r0
   131fa:	70a1      	strb	r1, [r4, #2]
   131fc:	e000      	b.n	13200 <ll_adv_params_set+0x1ac>
				offsetof(struct pdu_adv_payload_com_ext_adv,
					 ext_hdr_adi_adv_data);
			pdu->len = len;
		} else {
			pdu->len = offsetof(struct pdu_adv_payload_com_ext_adv,
   131fe:	2201      	movs	r2, #1
   13200:	7062      	strb	r2, [r4, #1]
		/* TODO: AdvData */

		/* TODO: ACAD */

		/* Tx Power */
		if (h->tx_pwr) {
   13202:	78e2      	ldrb	r2, [r4, #3]
   13204:	0652      	lsls	r2, r2, #25
   13206:	d50f      	bpl.n	13228 <ll_adv_params_set+0x1d4>
			u8_t _tx_pwr;

			_tx_pwr = 0;
   13208:	9a17      	ldr	r2, [sp, #92]	; 0x5c
			if (tx_pwr) {
   1320a:	1e11      	subs	r1, r2, #0
   1320c:	d004      	beq.n	13218 <ll_adv_params_set+0x1c4>
				if (*tx_pwr != 0x7F) {
   1320e:	7812      	ldrb	r2, [r2, #0]
   13210:	2a7f      	cmp	r2, #127	; 0x7f
   13212:	d101      	bne.n	13218 <ll_adv_params_set+0x1c4>
					_tx_pwr = *tx_pwr;
				} else {
					*tx_pwr = _tx_pwr;
   13214:	2200      	movs	r2, #0
   13216:	700a      	strb	r2, [r1, #0]
				}
			}

			ptr--;
			*ptr = _tx_pwr;
   13218:	3b01      	subs	r3, #1
   1321a:	701a      	strb	r2, [r3, #0]
   1321c:	e004      	b.n	13228 <ll_adv_params_set+0x1d4>
		/* NOTE: TargetA, filled at enable and RPA timeout */

		/* NOTE: AdvA, filled at enable and RPA timeout */
#endif /* CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */

	} else if (pdu->len == 0) {
   1321e:	7863      	ldrb	r3, [r4, #1]
   13220:	2b00      	cmp	r3, #0
   13222:	d101      	bne.n	13228 <ll_adv_params_set+0x1d4>
		pdu->len = BDADDR_SIZE;
   13224:	3306      	adds	r3, #6
   13226:	7063      	strb	r3, [r4, #1]
	}

	/* update the current scan data */
	radio_adv_data = radio_scan_data_get();
   13228:	f7fe fa38 	bl	1169c <radio_scan_data_get>
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   1322c:	0003      	movs	r3, r0
   1322e:	334f      	adds	r3, #79	; 0x4f
   13230:	781a      	ldrb	r2, [r3, #0]
   13232:	2327      	movs	r3, #39	; 0x27
   13234:	4353      	muls	r3, r2
   13236:	18c0      	adds	r0, r0, r3
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   13238:	230f      	movs	r3, #15
   1323a:	7802      	ldrb	r2, [r0, #0]
   1323c:	439a      	bics	r2, r3
	pdu->rfu = 0;
   1323e:	3b0b      	subs	r3, #11
   13240:	431a      	orrs	r2, r3
	pdu->chan_sel = 0;
	pdu->tx_addr = own_addr_type & 0x1;
   13242:	01ab      	lsls	r3, r5, #6
   13244:	258f      	movs	r5, #143	; 0x8f
   13246:	4015      	ands	r5, r2
	pdu->rx_addr = 0;
   13248:	431d      	orrs	r5, r3
   1324a:	237f      	movs	r3, #127	; 0x7f
   1324c:	401d      	ands	r5, r3
	if (pdu->len == 0) {
   1324e:	7843      	ldrb	r3, [r0, #1]
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
	pdu->rfu = 0;
	pdu->chan_sel = 0;
	pdu->tx_addr = own_addr_type & 0x1;
	pdu->rx_addr = 0;
   13250:	7005      	strb	r5, [r0, #0]
	if (pdu->len == 0) {
   13252:	2b00      	cmp	r3, #0
   13254:	d106      	bne.n	13264 <ll_adv_params_set+0x210>
		pdu->len = BDADDR_SIZE;
   13256:	3306      	adds	r3, #6
   13258:	7043      	strb	r3, [r0, #1]
   1325a:	e003      	b.n	13264 <ll_adv_params_set+0x210>

	struct radio_adv_data *radio_adv_data;
	struct pdu_adv *pdu;

	if (radio_adv_is_enabled()) {
		return BT_HCI_ERR_CMD_DISALLOWED;
   1325c:	230c      	movs	r3, #12
   1325e:	e000      	b.n	13262 <ll_adv_params_set+0x20e>
			/* - Connectable and scannable not allowed;
			 * - High duty cycle directed connectable not allowed
			 */
			if (((evt_prop & 0x03) == 0x03) ||
			    ((evt_prop & 0x0C) == 0x0C)) {
				return 0x12; /* invalid HCI cmd param */
   13260:	2312      	movs	r3, #18
   13262:	9301      	str	r3, [sp, #4]
	if (pdu->len == 0) {
		pdu->len = BDADDR_SIZE;
	}

	return 0;
}
   13264:	9801      	ldr	r0, [sp, #4]
   13266:	b00d      	add	sp, #52	; 0x34
   13268:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1326a:	46c0      	nop			; (mov r8, r8)
   1326c:	000150b2 	.word	0x000150b2
   13270:	20002044 	.word	0x20002044

00013274 <ll_adv_data_set>:

void ll_adv_data_set(u8_t len, u8_t const *const data)
{
   13274:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   13276:	0007      	movs	r7, r0
   13278:	9101      	str	r1, [sp, #4]
	struct pdu_adv *prev;
	struct pdu_adv *pdu;
	u8_t last;

	/* Dont update data if directed or extended advertising. */
	radio_adv_data = radio_adv_data_get();
   1327a:	f7fe fa09 	bl	11690 <radio_adv_data_get>
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   1327e:	0003      	movs	r3, r0
   13280:	2127      	movs	r1, #39	; 0x27
   13282:	334f      	adds	r3, #79	; 0x4f
   13284:	781d      	ldrb	r5, [r3, #0]
	struct pdu_adv *prev;
	struct pdu_adv *pdu;
	u8_t last;

	/* Dont update data if directed or extended advertising. */
	radio_adv_data = radio_adv_data_get();
   13286:	0006      	movs	r6, r0
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   13288:	4369      	muls	r1, r5
   1328a:	1841      	adds	r1, r0, r1
	if ((prev->type == PDU_ADV_TYPE_DIRECT_IND) ||
   1328c:	200f      	movs	r0, #15
   1328e:	780b      	ldrb	r3, [r1, #0]
   13290:	4018      	ands	r0, r3
   13292:	2801      	cmp	r0, #1
   13294:	d043      	beq.n	1331e <ll_adv_data_set+0xaa>
   13296:	2807      	cmp	r0, #7
   13298:	d041      	beq.n	1331e <ll_adv_data_set+0xaa>
		 */
		return;
	}

	/* use the last index in double buffer, */
	if (radio_adv_data->first == radio_adv_data->last) {
   1329a:	0032      	movs	r2, r6
   1329c:	324e      	adds	r2, #78	; 0x4e
   1329e:	7812      	ldrb	r2, [r2, #0]
   132a0:	42aa      	cmp	r2, r5
   132a2:	d104      	bne.n	132ae <ll_adv_data_set+0x3a>
		last = radio_adv_data->last + 1;
   132a4:	3501      	adds	r5, #1
   132a6:	b2ed      	uxtb	r5, r5
		if (last == DOUBLE_BUFFER_SIZE) {
   132a8:	2d02      	cmp	r5, #2
   132aa:	d100      	bne.n	132ae <ll_adv_data_set+0x3a>
			last = 0;
   132ac:	2500      	movs	r5, #0
		last = radio_adv_data->last;
	}

	/* update adv pdu fields. */
	pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
	pdu->type = prev->type;
   132ae:	200f      	movs	r0, #15
	} else {
		last = radio_adv_data->last;
	}

	/* update adv pdu fields. */
	pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
   132b0:	2427      	movs	r4, #39	; 0x27
	pdu->type = prev->type;
   132b2:	4003      	ands	r3, r0
   132b4:	001a      	movs	r2, r3
	} else {
		last = radio_adv_data->last;
	}

	/* update adv pdu fields. */
	pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
   132b6:	436c      	muls	r4, r5
   132b8:	1934      	adds	r4, r6, r4
	pdu->type = prev->type;
   132ba:	7823      	ldrb	r3, [r4, #0]
	       &prev->payload.adv_ind.addr[0], BDADDR_SIZE);
	memcpy(&pdu->payload.adv_ind.data[0], data, len);
	pdu->len = BDADDR_SIZE + len;

	/* commit the update so controller picks it. */
	radio_adv_data->last = last;
   132bc:	364f      	adds	r6, #79	; 0x4f
		last = radio_adv_data->last;
	}

	/* update adv pdu fields. */
	pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
	pdu->type = prev->type;
   132be:	4383      	bics	r3, r0
	pdu->rfu = 0;
   132c0:	4313      	orrs	r3, r2
   132c2:	2210      	movs	r2, #16
   132c4:	4393      	bics	r3, r2
   132c6:	7023      	strb	r3, [r4, #0]

	if (IS_ENABLED(CONFIG_BLUETOOTH_CONTROLLER_CHAN_SEL_2)) {
		pdu->chan_sel = prev->chan_sel;
   132c8:	2301      	movs	r3, #1
   132ca:	7808      	ldrb	r0, [r1, #0]
   132cc:	0940      	lsrs	r0, r0, #5
   132ce:	4018      	ands	r0, r3
   132d0:	7823      	ldrb	r3, [r4, #0]
   132d2:	0140      	lsls	r0, r0, #5
   132d4:	001a      	movs	r2, r3
   132d6:	2320      	movs	r3, #32
   132d8:	439a      	bics	r2, r3
   132da:	4310      	orrs	r0, r2
	} else {
		pdu->chan_sel = 0;
	}

	pdu->tx_addr = prev->tx_addr;
   132dc:	2201      	movs	r2, #1
	pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
	pdu->type = prev->type;
	pdu->rfu = 0;

	if (IS_ENABLED(CONFIG_BLUETOOTH_CONTROLLER_CHAN_SEL_2)) {
		pdu->chan_sel = prev->chan_sel;
   132de:	7020      	strb	r0, [r4, #0]
	} else {
		pdu->chan_sel = 0;
	}

	pdu->tx_addr = prev->tx_addr;
   132e0:	780b      	ldrb	r3, [r1, #0]
   132e2:	099b      	lsrs	r3, r3, #6
   132e4:	4013      	ands	r3, r2
   132e6:	019a      	lsls	r2, r3, #6
   132e8:	b2c3      	uxtb	r3, r0
   132ea:	2040      	movs	r0, #64	; 0x40
   132ec:	4383      	bics	r3, r0
   132ee:	4313      	orrs	r3, r2
   132f0:	7023      	strb	r3, [r4, #0]
	pdu->rx_addr = prev->rx_addr;
   132f2:	780b      	ldrb	r3, [r1, #0]
   132f4:	7820      	ldrb	r0, [r4, #0]
   132f6:	09db      	lsrs	r3, r3, #7
   132f8:	01da      	lsls	r2, r3, #7
   132fa:	237f      	movs	r3, #127	; 0x7f
   132fc:	4003      	ands	r3, r0
   132fe:	4313      	orrs	r3, r2
   13300:	7023      	strb	r3, [r4, #0]
	memcpy(&pdu->payload.adv_ind.addr[0],
	       &prev->payload.adv_ind.addr[0], BDADDR_SIZE);
   13302:	3102      	adds	r1, #2
		pdu->chan_sel = 0;
	}

	pdu->tx_addr = prev->tx_addr;
	pdu->rx_addr = prev->rx_addr;
	memcpy(&pdu->payload.adv_ind.addr[0],
   13304:	2206      	movs	r2, #6
   13306:	1ca0      	adds	r0, r4, #2
   13308:	f7ed fd17 	bl	d3a <memcpy>
	       &prev->payload.adv_ind.addr[0], BDADDR_SIZE);
	memcpy(&pdu->payload.adv_ind.data[0], data, len);
   1330c:	0020      	movs	r0, r4
   1330e:	003a      	movs	r2, r7
   13310:	3008      	adds	r0, #8
   13312:	9901      	ldr	r1, [sp, #4]
   13314:	f7ed fd11 	bl	d3a <memcpy>
	pdu->len = BDADDR_SIZE + len;
   13318:	1dbb      	adds	r3, r7, #6
   1331a:	7063      	strb	r3, [r4, #1]

	/* commit the update so controller picks it. */
	radio_adv_data->last = last;
   1331c:	7035      	strb	r5, [r6, #0]
}
   1331e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

00013320 <ll_scan_data_set>:

void ll_scan_data_set(u8_t len, u8_t const *const data)
{
   13320:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   13322:	0007      	movs	r7, r0
   13324:	9101      	str	r1, [sp, #4]
	struct pdu_adv *prev;
	struct pdu_adv *pdu;
	u8_t last;

	/* use the last index in double buffer, */
	radio_scan_data = radio_scan_data_get();
   13326:	f7fe f9b9 	bl	1169c <radio_scan_data_get>
	if (radio_scan_data->first == radio_scan_data->last) {
   1332a:	0003      	movs	r3, r0
   1332c:	0002      	movs	r2, r0
   1332e:	334e      	adds	r3, #78	; 0x4e
   13330:	324f      	adds	r2, #79	; 0x4f
   13332:	7811      	ldrb	r1, [r2, #0]
   13334:	781b      	ldrb	r3, [r3, #0]
	struct pdu_adv *prev;
	struct pdu_adv *pdu;
	u8_t last;

	/* use the last index in double buffer, */
	radio_scan_data = radio_scan_data_get();
   13336:	0005      	movs	r5, r0
   13338:	000e      	movs	r6, r1
	if (radio_scan_data->first == radio_scan_data->last) {
   1333a:	428b      	cmp	r3, r1
   1333c:	d104      	bne.n	13348 <ll_scan_data_set+0x28>
		last = radio_scan_data->last + 1;
   1333e:	1c4e      	adds	r6, r1, #1
   13340:	b2f6      	uxtb	r6, r6
		if (last == DOUBLE_BUFFER_SIZE) {
   13342:	2e02      	cmp	r6, #2
   13344:	d100      	bne.n	13348 <ll_scan_data_set+0x28>
			last = 0;
   13346:	2600      	movs	r6, #0
	} else {
		last = radio_scan_data->last;
	}

	/* update scan pdu fields. */
	prev = (struct pdu_adv *)
   13348:	2427      	movs	r4, #39	; 0x27
	       &radio_scan_data->data[radio_scan_data->last][0];
	pdu = (struct pdu_adv *)&radio_scan_data->data[last][0];
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   1334a:	220f      	movs	r2, #15
	} else {
		last = radio_scan_data->last;
	}

	/* update scan pdu fields. */
	prev = (struct pdu_adv *)
   1334c:	4361      	muls	r1, r4
	       &radio_scan_data->data[radio_scan_data->last][0];
	pdu = (struct pdu_adv *)&radio_scan_data->data[last][0];
   1334e:	4374      	muls	r4, r6
   13350:	192c      	adds	r4, r5, r4
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   13352:	7823      	ldrb	r3, [r4, #0]
	pdu->rfu = 0;
	pdu->chan_sel = 0;
	pdu->tx_addr = prev->tx_addr;
   13354:	2040      	movs	r0, #64	; 0x40

	/* update scan pdu fields. */
	prev = (struct pdu_adv *)
	       &radio_scan_data->data[radio_scan_data->last][0];
	pdu = (struct pdu_adv *)&radio_scan_data->data[last][0];
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   13356:	4393      	bics	r3, r2
	pdu->rfu = 0;
   13358:	3a0b      	subs	r2, #11
   1335a:	4313      	orrs	r3, r2
	pdu->chan_sel = 0;
   1335c:	32cb      	adds	r2, #203	; 0xcb
   1335e:	4013      	ands	r3, r2
   13360:	7023      	strb	r3, [r4, #0]
	pdu->tx_addr = prev->tx_addr;
   13362:	2340      	movs	r3, #64	; 0x40
	} else {
		last = radio_scan_data->last;
	}

	/* update scan pdu fields. */
	prev = (struct pdu_adv *)
   13364:	1869      	adds	r1, r5, r1
	       &radio_scan_data->data[radio_scan_data->last][0];
	pdu = (struct pdu_adv *)&radio_scan_data->data[last][0];
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
	pdu->rfu = 0;
	pdu->chan_sel = 0;
	pdu->tx_addr = prev->tx_addr;
   13366:	780a      	ldrb	r2, [r1, #0]
	pdu->rx_addr = 0;
	pdu->len = BDADDR_SIZE + len;
	memcpy(&pdu->payload.scan_rsp.addr[0],
	       &prev->payload.scan_rsp.addr[0], BDADDR_SIZE);
   13368:	3102      	adds	r1, #2
	       &radio_scan_data->data[radio_scan_data->last][0];
	pdu = (struct pdu_adv *)&radio_scan_data->data[last][0];
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
	pdu->rfu = 0;
	pdu->chan_sel = 0;
	pdu->tx_addr = prev->tx_addr;
   1336a:	401a      	ands	r2, r3
   1336c:	7823      	ldrb	r3, [r4, #0]
	memcpy(&pdu->payload.scan_rsp.addr[0],
	       &prev->payload.scan_rsp.addr[0], BDADDR_SIZE);
	memcpy(&pdu->payload.scan_rsp.data[0], data, len);

	/* commit the update so controller picks it. */
	radio_scan_data->last = last;
   1336e:	354f      	adds	r5, #79	; 0x4f
	       &radio_scan_data->data[radio_scan_data->last][0];
	pdu = (struct pdu_adv *)&radio_scan_data->data[last][0];
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
	pdu->rfu = 0;
	pdu->chan_sel = 0;
	pdu->tx_addr = prev->tx_addr;
   13370:	4383      	bics	r3, r0
	pdu->rx_addr = 0;
   13372:	4313      	orrs	r3, r2
   13374:	227f      	movs	r2, #127	; 0x7f
   13376:	4013      	ands	r3, r2
   13378:	7023      	strb	r3, [r4, #0]
	pdu->len = BDADDR_SIZE + len;
   1337a:	1dbb      	adds	r3, r7, #6
   1337c:	7063      	strb	r3, [r4, #1]
	memcpy(&pdu->payload.scan_rsp.addr[0],
   1337e:	1ca0      	adds	r0, r4, #2
   13380:	3a79      	subs	r2, #121	; 0x79
   13382:	f7ed fcda 	bl	d3a <memcpy>
	       &prev->payload.scan_rsp.addr[0], BDADDR_SIZE);
	memcpy(&pdu->payload.scan_rsp.data[0], data, len);
   13386:	0020      	movs	r0, r4
   13388:	003a      	movs	r2, r7
   1338a:	9901      	ldr	r1, [sp, #4]
   1338c:	3008      	adds	r0, #8
   1338e:	f7ed fcd4 	bl	d3a <memcpy>

	/* commit the update so controller picks it. */
	radio_scan_data->last = last;
   13392:	702e      	strb	r6, [r5, #0]
}
   13394:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
	...

00013398 <ll_adv_enable>:

u32_t ll_adv_enable(u8_t enable)
{
   13398:	b5f0      	push	{r4, r5, r6, r7, lr}
   1339a:	b085      	sub	sp, #20
	int rl_idx = RL_IDX_NONE;
	struct pdu_adv *pdu_scan;
	struct pdu_adv *pdu_adv;
	u32_t status;

	if (!enable) {
   1339c:	2800      	cmp	r0, #0
   1339e:	d102      	bne.n	133a6 <ll_adv_enable+0xe>
		return radio_adv_disable();
   133a0:	f7fe fe4c 	bl	1203c <radio_adv_disable>
   133a4:	e06b      	b.n	1347e <ll_adv_enable+0xe6>
	} else if (radio_adv_is_enabled()) {
   133a6:	f7fe f97f 	bl	116a8 <radio_adv_is_enabled>
   133aa:	0007      	movs	r7, r0
		return 0;
   133ac:	2000      	movs	r0, #0
	struct pdu_adv *pdu_adv;
	u32_t status;

	if (!enable) {
		return radio_adv_disable();
	} else if (radio_adv_is_enabled()) {
   133ae:	4287      	cmp	r7, r0
   133b0:	d165      	bne.n	1347e <ll_adv_enable+0xe6>
	 */

	/* remember addr to use and also update the addr in
	 * both adv and scan response PDUs.
	 */
	radio_adv_data = radio_adv_data_get();
   133b2:	f7fe f96d 	bl	11690 <radio_adv_data_get>
   133b6:	0004      	movs	r4, r0
	radio_scan_data = radio_scan_data_get();
   133b8:	f7fe f970 	bl	1169c <radio_scan_data_get>
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
			[radio_adv_data->last][0];
   133bc:	0023      	movs	r3, r4
	/* remember addr to use and also update the addr in
	 * both adv and scan response PDUs.
	 */
	radio_adv_data = radio_adv_data_get();
	radio_scan_data = radio_scan_data_get();
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
   133be:	2227      	movs	r2, #39	; 0x27
			[radio_adv_data->last][0];
   133c0:	334f      	adds	r3, #79	; 0x4f
	/* remember addr to use and also update the addr in
	 * both adv and scan response PDUs.
	 */
	radio_adv_data = radio_adv_data_get();
	radio_scan_data = radio_scan_data_get();
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
   133c2:	781d      	ldrb	r5, [r3, #0]
   133c4:	4e2f      	ldr	r6, [pc, #188]	; (13484 <ll_adv_enable+0xec>)
   133c6:	4355      	muls	r5, r2
   133c8:	1965      	adds	r5, r4, r5
			[radio_scan_data->last][0];

	if (0) {

#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
	} else if (pdu_adv->type == PDU_ADV_TYPE_EXT_IND) {
   133ca:	782b      	ldrb	r3, [r5, #0]
   133cc:	240f      	movs	r4, #15
   133ce:	0019      	movs	r1, r3
   133d0:	4021      	ands	r1, r4
   133d2:	2907      	cmp	r1, #7
   133d4:	d10a      	bne.n	133ec <ll_adv_enable+0x54>
		p = (void *)&pdu_adv->payload.adv_ext_ind;
		h = (void *)p->ext_hdr_adi_adv_data;
		ptr = (u8_t *)h + sizeof(*h);

		/* AdvA, fill here at enable */
		if (h->adv_addr) {
   133d6:	78ea      	ldrb	r2, [r5, #3]
   133d8:	07d2      	lsls	r2, r2, #31
   133da:	d52a      	bpl.n	13432 <ll_adv_enable+0x9a>
			memcpy(ptr, ll_addr_get(pdu_adv->tx_addr, NULL),
   133dc:	0658      	lsls	r0, r3, #25
   133de:	0039      	movs	r1, r7
   133e0:	0fc0      	lsrs	r0, r0, #31
   133e2:	f7ff f85b 	bl	1249c <ll_addr_get>
   133e6:	0001      	movs	r1, r0
		struct ext_adv_hdr *h;
		u8_t *ptr;

		p = (void *)&pdu_adv->payload.adv_ext_ind;
		h = (void *)p->ext_hdr_adi_adv_data;
		ptr = (u8_t *)h + sizeof(*h);
   133e8:	1d28      	adds	r0, r5, #4
   133ea:	e044      	b.n	13476 <ll_adv_enable+0xde>
	radio_adv_data = radio_adv_data_get();
	radio_scan_data = radio_scan_data_get();
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
			[radio_adv_data->last][0];
	pdu_scan = (struct pdu_adv *)&radio_scan_data->data
			[radio_scan_data->last][0];
   133ec:	0003      	movs	r3, r0
   133ee:	334f      	adds	r3, #79	; 0x4f
	 */
	radio_adv_data = radio_adv_data_get();
	radio_scan_data = radio_scan_data_get();
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
			[radio_adv_data->last][0];
	pdu_scan = (struct pdu_adv *)&radio_scan_data->data
   133f0:	781b      	ldrb	r3, [r3, #0]
   133f2:	435a      	muls	r2, r3
   133f4:	1883      	adds	r3, r0, r2
#endif /* CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */
	} else {
		bool priv = false;
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
		/* Prepare whitelist and optionally resolving list */
		ll_filters_adv_update(ll_adv.filter_policy);
   133f6:	7830      	ldrb	r0, [r6, #0]
	 */
	radio_adv_data = radio_adv_data_get();
	radio_scan_data = radio_scan_data_get();
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
			[radio_adv_data->last][0];
	pdu_scan = (struct pdu_adv *)&radio_scan_data->data
   133f8:	9303      	str	r3, [sp, #12]
#endif /* CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */
	} else {
		bool priv = false;
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
		/* Prepare whitelist and optionally resolving list */
		ll_filters_adv_update(ll_adv.filter_policy);
   133fa:	06c0      	lsls	r0, r0, #27
   133fc:	0f80      	lsrs	r0, r0, #30
   133fe:	f7ff fa01 	bl	12804 <ll_filters_adv_update>

		if (ll_adv.own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   13402:	7870      	ldrb	r0, [r6, #1]
   13404:	0683      	lsls	r3, r0, #26
   13406:	d522      	bpl.n	1344e <ll_adv_enable+0xb6>
		    ll_adv.own_addr_type == BT_ADDR_LE_RANDOM_ID) {
			/* Look up the resolving list */
			rl_idx = ll_rl_find(ll_adv.id_addr_type,
   13408:	0640      	lsls	r0, r0, #25
   1340a:	1cb1      	adds	r1, r6, #2
   1340c:	0fc0      	lsrs	r0, r0, #31
   1340e:	f7ff fa0f 	bl	12830 <ll_rl_find>
   13412:	1e04      	subs	r4, r0, #0
					    ll_adv.id_addr);

			if (rl_idx >= 0) {
   13414:	db02      	blt.n	1341c <ll_adv_enable+0x84>
				/* Generate RPAs if required */
				ll_rl_rpa_update(false);
   13416:	0038      	movs	r0, r7
   13418:	f7ff fb4e 	bl	12ab8 <ll_rl_rpa_update>
			}

			ll_rl_pdu_adv_update(rl_idx, pdu_adv);
   1341c:	0029      	movs	r1, r5
   1341e:	0020      	movs	r0, r4
   13420:	f7ff fade 	bl	129e0 <ll_rl_pdu_adv_update>
			ll_rl_pdu_adv_update(rl_idx, pdu_scan);
   13424:	9903      	ldr	r1, [sp, #12]
   13426:	0020      	movs	r0, r4
   13428:	f7ff fada 	bl	129e0 <ll_rl_pdu_adv_update>
			priv = true;
			rl_idx = rl_idx >= 0 ? rl_idx : RL_IDX_NONE;
   1342c:	2c00      	cmp	r4, #0
   1342e:	da00      	bge.n	13432 <ll_adv_enable+0x9a>
   13430:	240f      	movs	r4, #15
			       ll_addr_get(pdu_adv->tx_addr, NULL), BDADDR_SIZE);
		}
	}
#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
	status = radio_adv_enable(ll_adv.phy_p, ll_adv.interval,
				  ll_adv.chan_map, ll_adv.filter_policy,
   13432:	7832      	ldrb	r2, [r6, #0]
			memcpy(&pdu_scan->payload.scan_rsp.addr[0],
			       ll_addr_get(pdu_adv->tx_addr, NULL), BDADDR_SIZE);
		}
	}
#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
	status = radio_adv_enable(ll_adv.phy_p, ll_adv.interval,
   13434:	7a30      	ldrb	r0, [r6, #8]
				  ll_adv.chan_map, ll_adv.filter_policy,
   13436:	06d3      	lsls	r3, r2, #27
			memcpy(&pdu_scan->payload.scan_rsp.addr[0],
			       ll_addr_get(pdu_adv->tx_addr, NULL), BDADDR_SIZE);
		}
	}
#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
	status = radio_adv_enable(ll_adv.phy_p, ll_adv.interval,
   13438:	b2e4      	uxtb	r4, r4
				  ll_adv.chan_map, ll_adv.filter_policy,
   1343a:	0752      	lsls	r2, r2, #29
			memcpy(&pdu_scan->payload.scan_rsp.addr[0],
			       ll_addr_get(pdu_adv->tx_addr, NULL), BDADDR_SIZE);
		}
	}
#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
	status = radio_adv_enable(ll_adv.phy_p, ll_adv.interval,
   1343c:	0740      	lsls	r0, r0, #29
   1343e:	89b1      	ldrh	r1, [r6, #12]
   13440:	0f9b      	lsrs	r3, r3, #30
   13442:	0f52      	lsrs	r2, r2, #29
   13444:	9400      	str	r4, [sp, #0]
   13446:	0f40      	lsrs	r0, r0, #29
   13448:	f7fe fc54 	bl	11cf4 <radio_adv_enable>
#else /* !CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */
	status = radio_adv_enable(ll_adv.interval, ll_adv.chan_map,
				  ll_adv.filter_policy, rl_idx);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */

	return status;
   1344c:	e017      	b.n	1347e <ll_adv_enable+0xe6>
			rl_idx = rl_idx >= 0 ? rl_idx : RL_IDX_NONE;
		}
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */
		if (!priv) {
			memcpy(&pdu_adv->payload.adv_ind.addr[0],
			       ll_addr_get(pdu_adv->tx_addr, NULL), BDADDR_SIZE);
   1344e:	7828      	ldrb	r0, [r5, #0]
   13450:	0039      	movs	r1, r7
   13452:	0640      	lsls	r0, r0, #25
   13454:	0fc0      	lsrs	r0, r0, #31
   13456:	f7ff f821 	bl	1249c <ll_addr_get>
			priv = true;
			rl_idx = rl_idx >= 0 ? rl_idx : RL_IDX_NONE;
		}
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */
		if (!priv) {
			memcpy(&pdu_adv->payload.adv_ind.addr[0],
   1345a:	2206      	movs	r2, #6
			       ll_addr_get(pdu_adv->tx_addr, NULL), BDADDR_SIZE);
   1345c:	0001      	movs	r1, r0
			priv = true;
			rl_idx = rl_idx >= 0 ? rl_idx : RL_IDX_NONE;
		}
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */
		if (!priv) {
			memcpy(&pdu_adv->payload.adv_ind.addr[0],
   1345e:	1ca8      	adds	r0, r5, #2
   13460:	f7ed fc6b 	bl	d3a <memcpy>
			       ll_addr_get(pdu_adv->tx_addr, NULL), BDADDR_SIZE);
			memcpy(&pdu_scan->payload.scan_rsp.addr[0],
			       ll_addr_get(pdu_adv->tx_addr, NULL), BDADDR_SIZE);
   13464:	7828      	ldrb	r0, [r5, #0]
   13466:	0039      	movs	r1, r7
   13468:	0640      	lsls	r0, r0, #25
   1346a:	0fc0      	lsrs	r0, r0, #31
   1346c:	f7ff f816 	bl	1249c <ll_addr_get>
   13470:	0001      	movs	r1, r0
		}
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */
		if (!priv) {
			memcpy(&pdu_adv->payload.adv_ind.addr[0],
			       ll_addr_get(pdu_adv->tx_addr, NULL), BDADDR_SIZE);
			memcpy(&pdu_scan->payload.scan_rsp.addr[0],
   13472:	9803      	ldr	r0, [sp, #12]
   13474:	3002      	adds	r0, #2
   13476:	2206      	movs	r2, #6
   13478:	f7ed fc5f 	bl	d3a <memcpy>
   1347c:	e7d9      	b.n	13432 <ll_adv_enable+0x9a>
	status = radio_adv_enable(ll_adv.interval, ll_adv.chan_map,
				  ll_adv.filter_policy, rl_idx);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */

	return status;
}
   1347e:	b005      	add	sp, #20
   13480:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13482:	46c0      	nop			; (mov r8, r8)
   13484:	20002044 	.word	0x20002044

00013488 <net_buf_pool_get>:
/* Linker-defined symbol bound to the static pool structs */
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
   13488:	2324      	movs	r3, #36	; 0x24
   1348a:	4358      	muls	r0, r3
   1348c:	4b01      	ldr	r3, [pc, #4]	; (13494 <net_buf_pool_get+0xc>)
   1348e:	18c0      	adds	r0, r0, r3
}
   13490:	4770      	bx	lr
   13492:	46c0      	nop			; (mov r8, r8)
   13494:	200009d0 	.word	0x200009d0

00013498 <net_buf_alloc>:
struct net_buf *net_buf_alloc_debug(struct net_buf_pool *pool, s32_t timeout,
				    const char *func, int line)
#else
struct net_buf *net_buf_alloc(struct net_buf_pool *pool, s32_t timeout)
#endif
{
   13498:	b570      	push	{r4, r5, r6, lr}
   1349a:	0004      	movs	r4, r0
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
   1349c:	f3ef 8510 	mrs	r5, PRIMASK
   134a0:	b672      	cpsid	i
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   134a2:	8ac3      	ldrh	r3, [r0, #22]
   134a4:	2b00      	cmp	r3, #0
   134a6:	d028      	beq.n	134fa <net_buf_alloc+0x62>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   134a8:	8a82      	ldrh	r2, [r0, #20]
   134aa:	429a      	cmp	r2, r3
   134ac:	d908      	bls.n	134c0 <net_buf_alloc+0x28>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
   134ae:	2100      	movs	r1, #0
   134b0:	f000 fff6 	bl	144a0 <k_queue_get>
			if (buf) {
   134b4:	2800      	cmp	r0, #0
   134b6:	d003      	beq.n	134c0 <net_buf_alloc+0x28>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   134b8:	2d00      	cmp	r5, #0
   134ba:	d126      	bne.n	1350a <net_buf_alloc+0x72>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   134bc:	b662      	cpsie	i
   134be:	e024      	b.n	1350a <net_buf_alloc+0x72>
				irq_unlock(key);
				goto success;
			}
		}

		uninit_count = pool->uninit_count--;
   134c0:	8ae0      	ldrh	r0, [r4, #22]
   134c2:	1e43      	subs	r3, r0, #1
   134c4:	82e3      	strh	r3, [r4, #22]
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   134c6:	2d00      	cmp	r5, #0
   134c8:	d100      	bne.n	134cc <net_buf_alloc+0x34>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   134ca:	b662      	cpsie	i
static inline struct net_buf *pool_get_uninit(struct net_buf_pool *pool,
					      u16_t uninit_count)
{
	struct net_buf *buf;

	buf = UNINIT_BUF(pool, pool->buf_count - uninit_count);
   134cc:	2103      	movs	r1, #3
   134ce:	8b23      	ldrh	r3, [r4, #24]
   134d0:	8b62      	ldrh	r2, [r4, #26]
   134d2:	3303      	adds	r3, #3
   134d4:	1852      	adds	r2, r2, r1
   134d6:	438a      	bics	r2, r1
   134d8:	438b      	bics	r3, r1
   134da:	189b      	adds	r3, r3, r2
   134dc:	8aa2      	ldrh	r2, [r4, #20]
   134de:	3310      	adds	r3, #16
   134e0:	1a10      	subs	r0, r2, r0
   134e2:	4358      	muls	r0, r3
   134e4:	6a23      	ldr	r3, [r4, #32]

	buf->pool_id = pool_id(pool);
   134e6:	4a0e      	ldr	r2, [pc, #56]	; (13520 <net_buf_alloc+0x88>)
static inline struct net_buf *pool_get_uninit(struct net_buf_pool *pool,
					      u16_t uninit_count)
{
	struct net_buf *buf;

	buf = UNINIT_BUF(pool, pool->buf_count - uninit_count);
   134e8:	1818      	adds	r0, r3, r0

	buf->pool_id = pool_id(pool);
   134ea:	4b0e      	ldr	r3, [pc, #56]	; (13524 <net_buf_alloc+0x8c>)
   134ec:	1ae3      	subs	r3, r4, r3
   134ee:	109b      	asrs	r3, r3, #2
   134f0:	4353      	muls	r3, r2
   134f2:	7183      	strb	r3, [r0, #6]
	buf->size = pool->buf_size;
   134f4:	8b23      	ldrh	r3, [r4, #24]
   134f6:	81c3      	strh	r3, [r0, #14]

		uninit_count = pool->uninit_count--;
		irq_unlock(key);

		buf = pool_get_uninit(pool, uninit_count);
		goto success;
   134f8:	e007      	b.n	1350a <net_buf_alloc+0x72>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   134fa:	2d00      	cmp	r5, #0
   134fc:	d100      	bne.n	13500 <net_buf_alloc+0x68>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   134fe:	b662      	cpsie	i
		}
	} else {
		buf = k_lifo_get(&pool->free, timeout);
	}
#else
	buf = k_lifo_get(&pool->free, timeout);
   13500:	0020      	movs	r0, r4
   13502:	f000 ffcd 	bl	144a0 <k_queue_get>
#endif
	if (!buf) {
   13506:	2800      	cmp	r0, #0
   13508:	d008      	beq.n	1351c <net_buf_alloc+0x84>
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	buf->ref   = 1;
   1350a:	2301      	movs	r3, #1
   1350c:	7103      	strb	r3, [r0, #4]
	buf->flags = 0;
   1350e:	2300      	movs	r3, #0
   13510:	7143      	strb	r3, [r0, #5]
	buf->frags = NULL;
   13512:	6003      	str	r3, [r0, #0]
void net_buf_reset(struct net_buf *buf)
{
	NET_BUF_ASSERT(buf->flags == 0);
	NET_BUF_ASSERT(buf->frags == NULL);

	buf->len   = 0;
   13514:	8183      	strh	r3, [r0, #12]
	buf->data  = buf->__buf;
   13516:	0003      	movs	r3, r0
   13518:	3310      	adds	r3, #16
   1351a:	6083      	str	r3, [r0, #8]
	pool->avail_count--;
	NET_BUF_ASSERT(pool->avail_count >= 0);
#endif

	return buf;
}
   1351c:	bd70      	pop	{r4, r5, r6, pc}
   1351e:	46c0      	nop			; (mov r8, r8)
   13520:	38e38e39 	.word	0x38e38e39
   13524:	200009d0 	.word	0x200009d0

00013528 <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, s32_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, s32_t timeout)
#endif
{
   13528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1352a:	0007      	movs	r7, r0
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p timeout %d", func, line, fifo, timeout);

	buf = k_fifo_get(fifo, timeout);
   1352c:	f000 ffb8 	bl	144a0 <k_queue_get>
   13530:	1e05      	subs	r5, r0, #0
	if (!buf) {
   13532:	d00f      	beq.n	13554 <net_buf_get+0x2c>
   13534:	0004      	movs	r4, r0
	}

	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   13536:	2601      	movs	r6, #1
   13538:	7963      	ldrb	r3, [r4, #5]
   1353a:	4033      	ands	r3, r6
   1353c:	d009      	beq.n	13552 <net_buf_get+0x2a>
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   1353e:	2100      	movs	r1, #0
   13540:	0038      	movs	r0, r7
   13542:	f000 ffad 	bl	144a0 <k_queue_get>
		NET_BUF_ASSERT(frag->frags);

		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
   13546:	7963      	ldrb	r3, [r4, #5]

	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   13548:	6020      	str	r0, [r4, #0]
		NET_BUF_ASSERT(frag->frags);

		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
   1354a:	43b3      	bics	r3, r6
   1354c:	7163      	strb	r3, [r4, #5]
	}

	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1354e:	0004      	movs	r4, r0
   13550:	e7f2      	b.n	13538 <net_buf_get+0x10>
		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   13552:	6023      	str	r3, [r4, #0]

	return buf;
}
   13554:	0028      	movs	r0, r5
   13556:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00013558 <net_buf_reserve>:
{
	NET_BUF_ASSERT(buf);
	NET_BUF_ASSERT(buf->len == 0);
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   13558:	0003      	movs	r3, r0
   1355a:	3310      	adds	r3, #16
   1355c:	1859      	adds	r1, r3, r1
   1355e:	6081      	str	r1, [r0, #8]
}
   13560:	4770      	bx	lr

00013562 <net_buf_put>:

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   13562:	b570      	push	{r4, r5, r6, lr}
	struct net_buf *tail;

	NET_BUF_ASSERT(fifo);
	NET_BUF_ASSERT(buf);

	for (tail = buf; tail->frags; tail = tail->frags) {
   13564:	000a      	movs	r2, r1
		tail->flags |= NET_BUF_FRAGS;
   13566:	2501      	movs	r5, #1
	struct net_buf *tail;

	NET_BUF_ASSERT(fifo);
	NET_BUF_ASSERT(buf);

	for (tail = buf; tail->frags; tail = tail->frags) {
   13568:	6814      	ldr	r4, [r2, #0]
   1356a:	2c00      	cmp	r4, #0
   1356c:	d004      	beq.n	13578 <net_buf_put+0x16>
		tail->flags |= NET_BUF_FRAGS;
   1356e:	7953      	ldrb	r3, [r2, #5]
   13570:	432b      	orrs	r3, r5
   13572:	7153      	strb	r3, [r2, #5]
   13574:	0022      	movs	r2, r4
   13576:	e7f7      	b.n	13568 <net_buf_put+0x6>
	}

	k_fifo_put_list(fifo, buf, tail);
   13578:	f000 ff4e 	bl	14418 <k_queue_append_list>
}
   1357c:	bd70      	pop	{r4, r5, r6, pc}
	...

00013580 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   13580:	b570      	push	{r4, r5, r6, lr}
   13582:	0001      	movs	r1, r0
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		pool->avail_count++;
		NET_BUF_ASSERT(pool->avail_count <= pool->buf_count);
#endif

		if (pool->destroy) {
   13584:	2424      	movs	r4, #36	; 0x24
void net_buf_unref(struct net_buf *buf)
#endif
{
	NET_BUF_ASSERT(buf);

	while (buf) {
   13586:	2900      	cmp	r1, #0
   13588:	d015      	beq.n	135b6 <net_buf_unref+0x36>
		}
#endif
		NET_BUF_DBG("buf %p ref %u pool_id %u frags %p", buf, buf->ref,
			    buf->pool_id, buf->frags);

		if (--buf->ref > 0) {
   1358a:	790b      	ldrb	r3, [r1, #4]
#endif
{
	NET_BUF_ASSERT(buf);

	while (buf) {
		struct net_buf *frags = buf->frags;
   1358c:	680d      	ldr	r5, [r1, #0]
		}
#endif
		NET_BUF_DBG("buf %p ref %u pool_id %u frags %p", buf, buf->ref,
			    buf->pool_id, buf->frags);

		if (--buf->ref > 0) {
   1358e:	3b01      	subs	r3, #1
   13590:	b2db      	uxtb	r3, r3
   13592:	710b      	strb	r3, [r1, #4]
   13594:	2b00      	cmp	r3, #0
   13596:	d10e      	bne.n	135b6 <net_buf_unref+0x36>
			return;
		}

		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
   13598:	7988      	ldrb	r0, [r1, #6]

		if (--buf->ref > 0) {
			return;
		}

		buf->frags = NULL;
   1359a:	600b      	str	r3, [r1, #0]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		pool->avail_count++;
		NET_BUF_ASSERT(pool->avail_count <= pool->buf_count);
#endif

		if (pool->destroy) {
   1359c:	4360      	muls	r0, r4
   1359e:	4b06      	ldr	r3, [pc, #24]	; (135b8 <net_buf_unref+0x38>)
   135a0:	1818      	adds	r0, r3, r0
   135a2:	69c3      	ldr	r3, [r0, #28]
   135a4:	2b00      	cmp	r3, #0
   135a6:	d002      	beq.n	135ae <net_buf_unref+0x2e>
			pool->destroy(buf);
   135a8:	0008      	movs	r0, r1
   135aa:	4798      	blx	r3
   135ac:	e001      	b.n	135b2 <net_buf_unref+0x32>
 */
static inline void net_buf_destroy(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);

	k_lifo_put(&pool->free, buf);
   135ae:	f000 ff2d 	bl	1440c <k_queue_prepend>
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   135b2:	0029      	movs	r1, r5
   135b4:	e7e7      	b.n	13586 <net_buf_unref+0x6>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   135b6:	bd70      	pop	{r4, r5, r6, pc}
   135b8:	200009d0 	.word	0x200009d0

000135bc <net_buf_ref>:
{
	NET_BUF_ASSERT(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   135bc:	7903      	ldrb	r3, [r0, #4]
   135be:	3301      	adds	r3, #1
   135c0:	7103      	strb	r3, [r0, #4]
	return buf;
}
   135c2:	4770      	bx	lr

000135c4 <net_buf_simple_add>:
 *
 *  @return Tail pointer for the buffer.
 */
static inline u8_t *net_buf_simple_tail(struct net_buf_simple *buf)
{
	return buf->data + buf->len;
   135c4:	8882      	ldrh	r2, [r0, #4]
   135c6:	6803      	ldr	r3, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   135c8:	1851      	adds	r1, r2, r1
   135ca:	189b      	adds	r3, r3, r2
   135cc:	8081      	strh	r1, [r0, #4]
	return tail;
}
   135ce:	0018      	movs	r0, r3
   135d0:	4770      	bx	lr

000135d2 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   135d2:	b510      	push	{r4, lr}
   135d4:	0004      	movs	r4, r0
   135d6:	8883      	ldrh	r3, [r0, #4]
   135d8:	6800      	ldr	r0, [r0, #0]
   135da:	18c0      	adds	r0, r0, r3

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   135dc:	189b      	adds	r3, r3, r2
   135de:	80a3      	strh	r3, [r4, #4]
void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   135e0:	f7ed fbab 	bl	d3a <memcpy>
}
   135e4:	bd10      	pop	{r4, pc}

000135e6 <net_buf_simple_add_u8>:
   135e6:	8882      	ldrh	r2, [r0, #4]
   135e8:	6803      	ldr	r3, [r0, #0]
   135ea:	189b      	adds	r3, r3, r2

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   135ec:	3201      	adds	r2, #1
   135ee:	8082      	strh	r2, [r0, #4]

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;

	return u8;
}
   135f0:	0018      	movs	r0, r3
	u8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   135f2:	7019      	strb	r1, [r3, #0]

	return u8;
}
   135f4:	4770      	bx	lr

000135f6 <net_buf_simple_push>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   135f6:	6803      	ldr	r3, [r0, #0]
	buf->len += len;
   135f8:	8882      	ldrh	r2, [r0, #4]
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   135fa:	1a5b      	subs	r3, r3, r1
	buf->len += len;
   135fc:	1851      	adds	r1, r2, r1
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   135fe:	6003      	str	r3, [r0, #0]
	buf->len += len;
   13600:	8081      	strh	r1, [r0, #4]
	return buf->data;
}
   13602:	0018      	movs	r0, r3
   13604:	4770      	bx	lr

00013606 <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(buf->len >= len);

	buf->len -= len;
   13606:	8883      	ldrh	r3, [r0, #4]
   13608:	1a5b      	subs	r3, r3, r1
   1360a:	8083      	strh	r3, [r0, #4]
	return buf->data += len;
   1360c:	6803      	ldr	r3, [r0, #0]
   1360e:	1859      	adds	r1, r3, r1
   13610:	6001      	str	r1, [r0, #0]
}
   13612:	0008      	movs	r0, r1
   13614:	4770      	bx	lr

00013616 <net_buf_simple_pull_u8>:

u8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
   13616:	b510      	push	{r4, lr}
	u8_t val;

	val = buf->data[0];
   13618:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, 1);
   1361a:	2101      	movs	r1, #1

u8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
	u8_t val;

	val = buf->data[0];
   1361c:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
   1361e:	f7ff fff2 	bl	13606 <net_buf_simple_pull>

	return val;
}
   13622:	0020      	movs	r0, r4
   13624:	bd10      	pop	{r4, pc}

00013626 <net_buf_simple_pull_le16>:

u16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
	u16_t val;

	val = UNALIGNED_GET((u16_t *)buf->data);
   13626:	6802      	ldr	r2, [r0, #0]

	return val;
}

u16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   13628:	b510      	push	{r4, lr}
	u16_t val;

	val = UNALIGNED_GET((u16_t *)buf->data);
   1362a:	7854      	ldrb	r4, [r2, #1]
   1362c:	7813      	ldrb	r3, [r2, #0]
   1362e:	0224      	lsls	r4, r4, #8
   13630:	431c      	orrs	r4, r3
	net_buf_simple_pull(buf, sizeof(val));
   13632:	2102      	movs	r1, #2
   13634:	f7ff ffe7 	bl	13606 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   13638:	0020      	movs	r0, r4
   1363a:	bd10      	pop	{r4, pc}

0001363c <net_buf_simple_headroom>:
	return sys_be32_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   1363c:	0002      	movs	r2, r0
   1363e:	6803      	ldr	r3, [r0, #0]
   13640:	3208      	adds	r2, #8
   13642:	1a98      	subs	r0, r3, r2
}
   13644:	4770      	bx	lr

00013646 <net_buf_simple_tailroom>:
	return sys_be32_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   13646:	0003      	movs	r3, r0
}

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   13648:	6801      	ldr	r1, [r0, #0]
   1364a:	88c2      	ldrh	r2, [r0, #6]
	return sys_be32_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   1364c:	3308      	adds	r3, #8
}

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   1364e:	1acb      	subs	r3, r1, r3
   13650:	8880      	ldrh	r0, [r0, #4]
   13652:	1ad3      	subs	r3, r2, r3
   13654:	1a18      	subs	r0, r3, r0
}
   13656:	4770      	bx	lr

00013658 <nordicsemi_nrf51_init>:
static bool ftpan_59(void);

uint32_t SystemCoreClock __used = __SYSTEM_CLOCK;

static int nordicsemi_nrf51_init(struct device *arg)
{
   13658:	b530      	push	{r4, r5, lr}
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
   1365a:	f3ef 8010 	mrs	r0, PRIMASK
   1365e:	b672      	cpsid	i
	return 0;
}

static bool ftpan_26(void)
{
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x1) &&
   13660:	4a1e      	ldr	r2, [pc, #120]	; (136dc <nordicsemi_nrf51_init+0x84>)
   13662:	7813      	ldrb	r3, [r2, #0]
   13664:	0011      	movs	r1, r2
   13666:	2b01      	cmp	r3, #1
   13668:	d119      	bne.n	1369e <nordicsemi_nrf51_init+0x46>
	    (((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
   1366a:	4b1d      	ldr	r3, [pc, #116]	; (136e0 <nordicsemi_nrf51_init+0x88>)
	return 0;
}

static bool ftpan_26(void)
{
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x1) &&
   1366c:	681b      	ldr	r3, [r3, #0]
   1366e:	071b      	lsls	r3, r3, #28
   13670:	d115      	bne.n	1369e <nordicsemi_nrf51_init+0x46>
	    (((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x00) &&
   13672:	4b1c      	ldr	r3, [pc, #112]	; (136e4 <nordicsemi_nrf51_init+0x8c>)
   13674:	25e0      	movs	r5, #224	; 0xe0
   13676:	681a      	ldr	r2, [r3, #0]
   13678:	23f0      	movs	r3, #240	; 0xf0
   1367a:	0014      	movs	r4, r2
   1367c:	401c      	ands	r4, r3
   1367e:	422a      	tst	r2, r5
   13680:	d10b      	bne.n	1369a <nordicsemi_nrf51_init+0x42>
		    (((*(u32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
   13682:	4a19      	ldr	r2, [pc, #100]	; (136e8 <nordicsemi_nrf51_init+0x90>)

static bool ftpan_26(void)
{
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x1) &&
	    (((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x00) &&
   13684:	6812      	ldr	r2, [r2, #0]
   13686:	421a      	tst	r2, r3
   13688:	d109      	bne.n	1369e <nordicsemi_nrf51_init+0x46>
	 * instructions in the devices that do not need it is that the new
	 * peripherals in the second generation devices (LPCOMP for example)
	 * will not be available.
	 */
	if (ftpan_26()) {
		*(volatile u32_t *)0x40000504 = 0xC007FFDF;
   1368a:	4a18      	ldr	r2, [pc, #96]	; (136ec <nordicsemi_nrf51_init+0x94>)
   1368c:	4b18      	ldr	r3, [pc, #96]	; (136f0 <nordicsemi_nrf51_init+0x98>)
   1368e:	601a      	str	r2, [r3, #0]
		*(volatile u32_t *)0x40006C18 = 0x00008000;
   13690:	2280      	movs	r2, #128	; 0x80
   13692:	4b18      	ldr	r3, [pc, #96]	; (136f4 <nordicsemi_nrf51_init+0x9c>)
   13694:	0212      	lsls	r2, r2, #8
   13696:	601a      	str	r2, [r3, #0]
   13698:	e001      	b.n	1369e <nordicsemi_nrf51_init+0x46>
		}
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x10) &&
		    (((*(u32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
			return true;
		}
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
   1369a:	2c30      	cmp	r4, #48	; 0x30
   1369c:	d0f1      	beq.n	13682 <nordicsemi_nrf51_init+0x2a>
	return false;
}

static bool ftpan_59(void)
{
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x1) &&
   1369e:	680b      	ldr	r3, [r1, #0]
   136a0:	b2db      	uxtb	r3, r3
   136a2:	2b01      	cmp	r3, #1
   136a4:	d10d      	bne.n	136c2 <nordicsemi_nrf51_init+0x6a>
	    (((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
   136a6:	4a0e      	ldr	r2, [pc, #56]	; (136e0 <nordicsemi_nrf51_init+0x88>)
	return false;
}

static bool ftpan_59(void)
{
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x1) &&
   136a8:	6812      	ldr	r2, [r2, #0]
   136aa:	0712      	lsls	r2, r2, #28
   136ac:	d109      	bne.n	136c2 <nordicsemi_nrf51_init+0x6a>
	    (((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x40) &&
   136ae:	21f0      	movs	r1, #240	; 0xf0
   136b0:	4a0c      	ldr	r2, [pc, #48]	; (136e4 <nordicsemi_nrf51_init+0x8c>)
   136b2:	6812      	ldr	r2, [r2, #0]
   136b4:	400a      	ands	r2, r1
   136b6:	2a40      	cmp	r2, #64	; 0x40
   136b8:	d103      	bne.n	136c2 <nordicsemi_nrf51_init+0x6a>
		    (((*(u32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
   136ba:	4a0b      	ldr	r2, [pc, #44]	; (136e8 <nordicsemi_nrf51_init+0x90>)

static bool ftpan_59(void)
{
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x1) &&
	    (((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x40) &&
   136bc:	6812      	ldr	r2, [r2, #0]
   136be:	420a      	tst	r2, r1
   136c0:	d003      	beq.n	136ca <nordicsemi_nrf51_init+0x72>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   136c2:	2800      	cmp	r0, #0
   136c4:	d107      	bne.n	136d6 <nordicsemi_nrf51_init+0x7e>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   136c6:	b662      	cpsie	i
	 */
	NMI_INIT();

	irq_unlock(key);

	return 0;
   136c8:	e005      	b.n	136d6 <nordicsemi_nrf51_init+0x7e>
	 * "MPU: Reset value of DISABLEINDEBUG register is incorrect" found
	 * at Product Anomaly document for your device found at
	 * https://www.nordicsemi.com/.
	 */
	if (ftpan_59()) {
		NRF_MPU->DISABLEINDEBUG =
   136ca:	22c1      	movs	r2, #193	; 0xc1
   136cc:	2180      	movs	r1, #128	; 0x80
   136ce:	00d2      	lsls	r2, r2, #3
   136d0:	05c9      	lsls	r1, r1, #23
   136d2:	508b      	str	r3, [r1, r2]
   136d4:	e7f5      	b.n	136c2 <nordicsemi_nrf51_init+0x6a>
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   136d6:	2000      	movs	r0, #0
   136d8:	bd30      	pop	{r4, r5, pc}
   136da:	46c0      	nop			; (mov r8, r8)
   136dc:	f0000fe0 	.word	0xf0000fe0
   136e0:	f0000fe4 	.word	0xf0000fe4
   136e4:	f0000fe8 	.word	0xf0000fe8
   136e8:	f0000fec 	.word	0xf0000fec
   136ec:	c007ffdf 	.word	0xc007ffdf
   136f0:	40000504 	.word	0x40000504
   136f4:	40006c18 	.word	0x40006c18

000136f8 <_IntExit>:
SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, _IntExit)

/* _IntExit falls through to _ExcExit (they are aliases of each other) */

#ifdef CONFIG_TIMESLICING
    push {lr}
   136f8:	b500      	push	{lr}
    bl _update_time_slice_before_swap
   136fa:	f001 f88d 	bl	14818 <_update_time_slice_before_swap>
#if defined(CONFIG_ARMV6_M)
    pop {r0}
   136fe:	bc01      	pop	{r0}
    mov lr, r0
   13700:	4686      	mov	lr, r0
   13702:	46c0      	nop			; (mov r8, r8)

00013704 <_ExcExit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, _ExcExit)

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
   13704:	4805      	ldr	r0, [pc, #20]	; (1371c <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
   13706:	6881      	ldr	r1, [r0, #8]

    /*
     * Non-preemptible thread ? Do not schedule (see explanation of
     * preempt field in kernel_struct.h).
     */
    ldrh r2, [r1, #_thread_offset_to_preempt]
   13708:	894a      	ldrh	r2, [r1, #10]
    cmp r2, #_PREEMPT_THRESHOLD
   1370a:	2a7f      	cmp	r2, #127	; 0x7f
    bhi _EXIT_EXC
   1370c:	d805      	bhi.n	1371a <_EXIT_EXC>

    ldr r0, [r0, _kernel_offset_to_ready_q_cache]
   1370e:	6980      	ldr	r0, [r0, #24]
    cmp r0, r1
   13710:	4288      	cmp	r0, r1
    beq _EXIT_EXC
   13712:	d002      	beq.n	1371a <_EXIT_EXC>

    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
   13714:	4902      	ldr	r1, [pc, #8]	; (13720 <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
   13716:	4a03      	ldr	r2, [pc, #12]	; (13724 <_EXIT_EXC+0xa>)
    str r2, [r1]
   13718:	600a      	str	r2, [r1, #0]

0001371a <_EXIT_EXC>:
#else
    pop {lr}
#endif /* CONFIG_ARMV6_M */
#endif /* CONFIG_STACK_SENTINEL */

    bx lr
   1371a:	4770      	bx	lr
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, _ExcExit)

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
   1371c:	20002114 	.word	0x20002114
    ldr r0, [r0, _kernel_offset_to_ready_q_cache]
    cmp r0, r1
    beq _EXIT_EXC

    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
   13720:	e000ed04 	.word	0xe000ed04
    ldr r2, =_SCS_ICSR_PENDSV
   13724:	10000000 	.word	0x10000000

00013728 <_IntLibInit>:
 *
 * @return N/A
 */

void _IntLibInit(void)
{
   13728:	b5f0      	push	{r4, r5, r6, r7, lr}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
   1372a:	24c0      	movs	r4, #192	; 0xc0
	int irq = 0;
   1372c:	2200      	movs	r2, #0
   1372e:	2603      	movs	r6, #3
   13730:	25ff      	movs	r5, #255	; 0xff
   13732:	00a4      	lsls	r4, r4, #2
   13734:	0010      	movs	r0, r2
   13736:	002f      	movs	r7, r5
   13738:	4030      	ands	r0, r6
   1373a:	00c0      	lsls	r0, r0, #3
   1373c:	4087      	lsls	r7, r0
   1373e:	0893      	lsrs	r3, r2, #2
   13740:	4904      	ldr	r1, [pc, #16]	; (13754 <_IntLibInit+0x2c>)
   13742:	009b      	lsls	r3, r3, #2
   13744:	185b      	adds	r3, r3, r1
   13746:	5919      	ldr	r1, [r3, r4]

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   13748:	3201      	adds	r2, #1
   1374a:	43b9      	bics	r1, r7
   1374c:	5119      	str	r1, [r3, r4]
   1374e:	2a1a      	cmp	r2, #26
   13750:	d1f0      	bne.n	13734 <_IntLibInit+0xc>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   13752:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13754:	e000e100 	.word	0xe000e100

00013758 <__pendsv>:
    pop {lr}
#endif /* CONFIG_ARMV6_M */
#endif /* CONFIG_KERNEL_EVENT_LOGGER_CONTEXT_SWITCH  */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   13758:	4913      	ldr	r1, [pc, #76]	; (137a8 <_thread_irq_disabled+0x1e>)
    ldr r2, [r1, #_kernel_offset_to_current]
   1375a:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   1375c:	2028      	movs	r0, #40	; 0x28
    add r0, r2
   1375e:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
    mrs ip, PSP
   13760:	f3ef 8c09 	mrs	ip, PSP

#if defined(CONFIG_ARMV6_M)
    /* Store current r4-r7 */
    stmea r0!, {r4-r7}
   13764:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    /* copy r8-r12 into r3-r7 */
    mov r3, r8
   13766:	4643      	mov	r3, r8
    mov r4, r9
   13768:	464c      	mov	r4, r9
    mov r5, r10
   1376a:	4655      	mov	r5, sl
    mov r6, r11
   1376c:	465e      	mov	r6, fp
    mov r7, ip
   1376e:	4667      	mov	r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
   13770:	c0f8      	stmia	r0!, {r3, r4, r5, r6, r7}
     * don't clear it yet. PendSV must not be cleared until
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
    ldr v4, =_SCS_ICSR
   13772:	4f0e      	ldr	r7, [pc, #56]	; (137ac <_thread_irq_disabled+0x22>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   13774:	4e0e      	ldr	r6, [pc, #56]	; (137b0 <_thread_irq_disabled+0x26>)

    /* protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M)
    cpsid i
   13776:	b672      	cpsid	i
#endif /* CONFIG_ARMV6_M */

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, _kernel_offset_to_ready_q_cache]
   13778:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
   1377a:	608a      	str	r2, [r1, #8]
     * since they were based on the previous kernel state and this
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
    str v3, [v4, #0]
   1377c:	603e      	str	r6, [r7, #0]

    /* Restore previous interrupt disable state (irq_lock key) */
    ldr r0, [r2, #_thread_offset_to_basepri]
   1377e:	6d90      	ldr	r0, [r2, #88]	; 0x58
    movs.n r3, #0
   13780:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   13782:	6593      	str	r3, [r2, #88]	; 0x58
     * maps to PRIMASK.
     *
     * Only enable interrupts if value is 0, meaning interrupts
     * were enabled before irq_lock was called.
     */
    cmp r0, #0
   13784:	2800      	cmp	r0, #0
    bne _thread_irq_disabled
   13786:	d100      	bne.n	1378a <_thread_irq_disabled>
    cpsie i
   13788:	b662      	cpsie	i

0001378a <_thread_irq_disabled>:
_thread_irq_disabled:

    ldr r4, =_thread_offset_to_callee_saved
   1378a:	2428      	movs	r4, #40	; 0x28
    adds r0, r2, r4
   1378c:	1910      	adds	r0, r2, r4

    /* restore r4-r12 for new thread */
    /* first restore r8-r12 located after r4-r7 (4*4bytes) */
    adds r0, #16
   1378e:	3010      	adds	r0, #16
    ldmia r0!, {r3-r7}
   13790:	c8f8      	ldmia	r0!, {r3, r4, r5, r6, r7}
    /* move to correct registers */
    mov r8, r3
   13792:	4698      	mov	r8, r3
    mov r9, r4
   13794:	46a1      	mov	r9, r4
    mov r10, r5
   13796:	46aa      	mov	sl, r5
    mov r11, r6
   13798:	46b3      	mov	fp, r6
    mov ip, r7
   1379a:	46bc      	mov	ip, r7
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
   1379c:	3824      	subs	r0, #36	; 0x24
    ldmia r0!, {r4-r7}
   1379e:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    ldmia r0, {v1-v8, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

    msr PSP, ip
   137a0:	f38c 8809 	msr	PSP, ip
    pop {lr}
#endif
#endif

    /* exc return */
    bx lr
   137a4:	4770      	bx	lr
   137a6:	0000      	.short	0x0000
    pop {lr}
#endif /* CONFIG_ARMV6_M */
#endif /* CONFIG_KERNEL_EVENT_LOGGER_CONTEXT_SWITCH  */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   137a8:	20002114 	.word	0x20002114
     * don't clear it yet. PendSV must not be cleared until
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
    ldr v4, =_SCS_ICSR
   137ac:	e000ed04 	.word	0xe000ed04
    ldr v3, =_SCS_ICSR_UNPENDSV
   137b0:	08000000 	.word	0x08000000

000137b4 <__svc>:
#if defined(CONFIG_ARMV6_M)
SECTION_FUNC(TEXT, __svc)
    /* Use EXC_RETURN state to find out if stack frame is on the
     * MSP or PSP
     */
    ldr r0, =0x4
   137b4:	2004      	movs	r0, #4
    mov r1, lr
   137b6:	4671      	mov	r1, lr
    tst r1, r0
   137b8:	4201      	tst	r1, r0
    beq _stack_frame_msp
   137ba:	d002      	beq.n	137c2 <_stack_frame_msp>
    mrs r0, PSP
   137bc:	f3ef 8009 	mrs	r0, PSP
    bne _stack_frame_endif
   137c0:	d101      	bne.n	137c6 <_stack_frame_endif>

000137c2 <_stack_frame_msp>:
_stack_frame_msp:
    mrs r0, MSP
   137c2:	f3ef 8008 	mrs	r0, MSP

000137c6 <_stack_frame_endif>:
_stack_frame_endif:

    /* Figure out what SVC call number was invoked */
    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   137c6:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read  encoding */
    subs r1, r1, #2
   137c8:	3902      	subs	r1, #2
    ldrb r1, [r1, #0]
   137ca:	7809      	ldrb	r1, [r1, #0]
    * 2: kernel panic or oops (software generated fatal exception)
    * Planned implementation of system calls for memory protection will
    * expand this case.
    */

    cmp r1, #2
   137cc:	2902      	cmp	r1, #2
    beq _oops
   137ce:	d000      	beq.n	137d2 <_oops>
    pop {r3}
    mov lr, r3
#endif

    /* exception return is done in _IntExit() */
    b _IntExit
   137d0:	e792      	b.n	136f8 <_IntExit>

000137d2 <_oops>:

_oops:
    push {lr}
   137d2:	b500      	push	{lr}
    blx _do_kernel_oops
   137d4:	f000 f918 	bl	13a08 <_do_kernel_oops>
    pop {pc}
   137d8:	bd00      	pop	{pc}
   137da:	46c0      	nop			; (mov r8, r8)

000137dc <__swap>:
    pop {r3}
#else
    pop {lr}
#endif
#endif
    ldr r1, =_kernel
   137dc:	4905      	ldr	r1, [pc, #20]	; (137f4 <__swap+0x18>)
    ldr r2, [r1, #_kernel_offset_to_current]
   137de:	688a      	ldr	r2, [r1, #8]
    str r0, [r2, #_thread_offset_to_basepri]
   137e0:	6590      	str	r0, [r2, #88]	; 0x58

    /*
     * Set __swap()'s default return code to -EAGAIN. This eliminates the need
     * for the timeout code to set it itself.
     */
    ldr r1, =_k_neg_eagain
   137e2:	4905      	ldr	r1, [pc, #20]	; (137f8 <__swap+0x1c>)
    ldr r1, [r1]
   137e4:	6809      	ldr	r1, [r1, #0]
    str r1, [r2, #_thread_offset_to_swap_return_value]
   137e6:	65d1      	str	r1, [r2, #92]	; 0x5c

#if defined(CONFIG_ARMV6_M)
    /* No priority-based interrupt masking on M0/M0+,
     * pending PendSV is used instead of svc
     */
    ldr r1, =_SCS_ICSR
   137e8:	4904      	ldr	r1, [pc, #16]	; (137fc <__swap+0x20>)
    ldr r3, =_SCS_ICSR_PENDSV
   137ea:	4b05      	ldr	r3, [pc, #20]	; (13800 <__swap+0x24>)
    str r3, [r1, #0]
   137ec:	600b      	str	r3, [r1, #0]
    /* Unlock interrupts to allow PendSV, since it's running at prio 0xff
     *
     * PendSV handler will be called if there are no other interrupts
     * of a higher priority pending.
     */
    cpsie i
   137ee:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

    /* coming back from exception, r2 still holds the pointer to _current */
    ldr r0, [r2, #_thread_offset_to_swap_return_value]
   137f0:	6dd0      	ldr	r0, [r2, #92]	; 0x5c
    bx lr
   137f2:	4770      	bx	lr
    pop {r3}
#else
    pop {lr}
#endif
#endif
    ldr r1, =_kernel
   137f4:	20002114 	.word	0x20002114

    /*
     * Set __swap()'s default return code to -EAGAIN. This eliminates the need
     * for the timeout code to set it itself.
     */
    ldr r1, =_k_neg_eagain
   137f8:	00018854 	.word	0x00018854

#if defined(CONFIG_ARMV6_M)
    /* No priority-based interrupt masking on M0/M0+,
     * pending PendSV is used instead of svc
     */
    ldr r1, =_SCS_ICSR
   137fc:	e000ed04 	.word	0xe000ed04
    ldr r3, =_SCS_ICSR_PENDSV
   13800:	10000000 	.word	0x10000000

00013804 <_Fault>:
 * @param esf ESF on the stack, either MSP or PSP depending at what processor
 *            state the exception was taken.
 */
void _Fault(const NANO_ESF *esf)
{
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   13804:	4b0e      	ldr	r3, [pc, #56]	; (13840 <_Fault+0x3c>)
 *
 * @param esf ESF on the stack, either MSP or PSP depending at what processor
 *            state the exception was taken.
 */
void _Fault(const NANO_ESF *esf)
{
   13806:	b510      	push	{r4, lr}
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   13808:	685a      	ldr	r2, [r3, #4]
 *
 * @param esf ESF on the stack, either MSP or PSP depending at what processor
 *            state the exception was taken.
 */
void _Fault(const NANO_ESF *esf)
{
   1380a:	0004      	movs	r4, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   1380c:	05d2      	lsls	r2, r2, #23
   1380e:	0dd2      	lsrs	r2, r2, #23
 *
 * @return N/A
 */
static void _FaultDump(const NANO_ESF *esf, int fault)
{
	switch (fault) {
   13810:	2a03      	cmp	r2, #3
   13812:	d108      	bne.n	13826 <_Fault+0x22>
 *
 * @return N/A
 */
static void _HardFault(const NANO_ESF *esf)
{
	PR_EXC("***** HARD FAULT *****\n");
   13814:	480b      	ldr	r0, [pc, #44]	; (13844 <_Fault+0x40>)
   13816:	f7ee f8b3 	bl	1980 <printk>
 *
 * @return N/A
 */
static void _FaultThreadShow(const NANO_ESF *esf)
{
	PR_EXC("  Executing thread ID (thread): %p\n"
   1381a:	f000 ffcd 	bl	147b8 <k_current_get>
   1381e:	69a2      	ldr	r2, [r4, #24]
   13820:	0001      	movs	r1, r0
   13822:	4809      	ldr	r0, [pc, #36]	; (13848 <_Fault+0x44>)
   13824:	e005      	b.n	13832 <_Fault+0x2e>
 */
static void _ReservedException(const NANO_ESF *esf, int fault)
{
	ARG_UNUSED(esf);

	PR_EXC("***** %s %d) *****\n",
   13826:	4909      	ldr	r1, [pc, #36]	; (1384c <_Fault+0x48>)
   13828:	2a0f      	cmp	r2, #15
   1382a:	dd00      	ble.n	1382e <_Fault+0x2a>
   1382c:	4908      	ldr	r1, [pc, #32]	; (13850 <_Fault+0x4c>)
   1382e:	4809      	ldr	r0, [pc, #36]	; (13854 <_Fault+0x50>)
   13830:	3a10      	subs	r2, #16
   13832:	f7ee f8a5 	bl	1980 <printk>
{
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;

	FAULT_DUMP(esf, fault);

	_SysFatalErrorHandler(_NANO_ERR_HW_EXCEPTION, esf);
   13836:	0021      	movs	r1, r4
   13838:	2000      	movs	r0, #0
   1383a:	f000 f8eb 	bl	13a14 <_SysFatalErrorHandler>
}
   1383e:	bd10      	pop	{r4, pc}
   13840:	e000ed00 	.word	0xe000ed00
   13844:	00018627 	.word	0x00018627
   13848:	0001863f 	.word	0x0001863f
   1384c:	000185f9 	.word	0x000185f9
   13850:	0001860e 	.word	0x0001860e
   13854:	00018689 	.word	0x00018689

00013858 <_FaultInit>:
#elif defined(CONFIG_ARMV7_M)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */
}
   13858:	4770      	bx	lr
	...

0001385c <_arch_irq_enable>:
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   1385c:	231f      	movs	r3, #31
   1385e:	4018      	ands	r0, r3
   13860:	3b1e      	subs	r3, #30
   13862:	4083      	lsls	r3, r0
   13864:	4a01      	ldr	r2, [pc, #4]	; (1386c <_arch_irq_enable+0x10>)
   13866:	6013      	str	r3, [r2, #0]
 * @return N/A
 */
void _arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
}
   13868:	4770      	bx	lr
   1386a:	46c0      	nop			; (mov r8, r8)
   1386c:	e000e100 	.word	0xe000e100

00013870 <_arch_irq_disable>:
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   13870:	231f      	movs	r3, #31
   13872:	4018      	ands	r0, r3
   13874:	3b1e      	subs	r3, #30
   13876:	4083      	lsls	r3, r0
   13878:	4a01      	ldr	r2, [pc, #4]	; (13880 <_arch_irq_disable+0x10>)
   1387a:	67d3      	str	r3, [r2, #124]	; 0x7c
 * @return N/A
 */
void _arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
}
   1387c:	4770      	bx	lr
   1387e:	46c0      	nop			; (mov r8, r8)
   13880:	e000e104 	.word	0xe000e104

00013884 <_arch_irq_is_enabled>:
 * @param irq IRQ line
 * @return interrupt enable state, true or false
 */
int _arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & (1 << BIT_FROM_IRQ(irq));
   13884:	0942      	lsrs	r2, r0, #5
   13886:	4b04      	ldr	r3, [pc, #16]	; (13898 <_arch_irq_is_enabled+0x14>)
   13888:	0092      	lsls	r2, r2, #2
   1388a:	58d2      	ldr	r2, [r2, r3]
   1388c:	231f      	movs	r3, #31
   1388e:	4003      	ands	r3, r0
   13890:	2001      	movs	r0, #1
   13892:	4098      	lsls	r0, r3
   13894:	4010      	ands	r0, r2
}
   13896:	4770      	bx	lr
   13898:	e000e100 	.word	0xe000e100

0001389c <_irq_priority_set>:
	 */
	__ASSERT(prio <= ((1 << CONFIG_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %d\n",
		 prio - _IRQ_PRIO_OFFSET,
		 (1 << CONFIG_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   1389c:	b243      	sxtb	r3, r0
 * and possibly one additional to support zero latency interrupts.
 *
 * @return N/A
 */
void _irq_priority_set(unsigned int irq, unsigned int prio, u32_t flags)
{
   1389e:	b570      	push	{r4, r5, r6, lr}
   138a0:	0189      	lsls	r1, r1, #6
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
   138a2:	2b00      	cmp	r3, #0
   138a4:	da14      	bge.n	138d0 <_irq_priority_set+0x34>
   138a6:	230f      	movs	r3, #15
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
   138a8:	b2c0      	uxtb	r0, r0
   138aa:	4003      	ands	r3, r0
   138ac:	3b08      	subs	r3, #8
   138ae:	4a12      	ldr	r2, [pc, #72]	; (138f8 <_irq_priority_set+0x5c>)
   138b0:	089b      	lsrs	r3, r3, #2
   138b2:	2403      	movs	r4, #3
   138b4:	009b      	lsls	r3, r3, #2
   138b6:	189b      	adds	r3, r3, r2
   138b8:	22ff      	movs	r2, #255	; 0xff
   138ba:	4020      	ands	r0, r4
   138bc:	40a0      	lsls	r0, r4
   138be:	0014      	movs	r4, r2
   138c0:	400a      	ands	r2, r1
   138c2:	4084      	lsls	r4, r0
   138c4:	4082      	lsls	r2, r0
   138c6:	69dd      	ldr	r5, [r3, #28]
   138c8:	43a5      	bics	r5, r4
   138ca:	432a      	orrs	r2, r5
   138cc:	61da      	str	r2, [r3, #28]
   138ce:	e011      	b.n	138f4 <_irq_priority_set+0x58>
   138d0:	4a0a      	ldr	r2, [pc, #40]	; (138fc <_irq_priority_set+0x60>)
   138d2:	089b      	lsrs	r3, r3, #2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
   138d4:	2503      	movs	r5, #3
   138d6:	009b      	lsls	r3, r3, #2
   138d8:	189b      	adds	r3, r3, r2
   138da:	22ff      	movs	r2, #255	; 0xff
   138dc:	4028      	ands	r0, r5
   138de:	40a8      	lsls	r0, r5
   138e0:	0015      	movs	r5, r2
   138e2:	24c0      	movs	r4, #192	; 0xc0
   138e4:	4085      	lsls	r5, r0
   138e6:	400a      	ands	r2, r1
   138e8:	4082      	lsls	r2, r0
   138ea:	00a4      	lsls	r4, r4, #2
   138ec:	591e      	ldr	r6, [r3, r4]
   138ee:	43ae      	bics	r6, r5
   138f0:	4332      	orrs	r2, r6
   138f2:	511a      	str	r2, [r3, r4]
	__ASSERT(prio <= ((1 << CONFIG_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %d\n",
		 prio - _IRQ_PRIO_OFFSET,
		 (1 << CONFIG_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
}
   138f4:	bd70      	pop	{r4, r5, r6, pc}
   138f6:	46c0      	nop			; (mov r8, r8)
   138f8:	e000ed00 	.word	0xe000ed00
   138fc:	e000e100 	.word	0xe000e100

00013900 <_irq_spurious>:
 * See __reserved().
 *
 * @return N/A
 */
void _irq_spurious(void *unused)
{
   13900:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);
	__reserved();
   13902:	f000 f841 	bl	13988 <__hard_fault>
}
   13906:	bd10      	pop	{r4, pc}

00013908 <_arch_isr_direct_pm>:
 * See https://jira.zephyrproject.org/browse/ZEP-1595
 */

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
   13908:	b510      	push	{r4, lr}
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
   1390a:	f3ef 8410 	mrs	r4, PRIMASK
   1390e:	b672      	cpsid	i
	__asm__ volatile("cpsid i" : : : "memory");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

	if (_kernel.idle) {
   13910:	4b05      	ldr	r3, [pc, #20]	; (13928 <_arch_isr_direct_pm+0x20>)
   13912:	6958      	ldr	r0, [r3, #20]
   13914:	2800      	cmp	r0, #0
   13916:	d003      	beq.n	13920 <_arch_isr_direct_pm+0x18>
		s32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
   13918:	2200      	movs	r2, #0
   1391a:	615a      	str	r2, [r3, #20]
		_sys_power_save_idle_exit(idle_val);
   1391c:	f000 f966 	bl	13bec <_sys_power_save_idle_exit>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   13920:	2c00      	cmp	r4, #0
   13922:	d100      	bne.n	13926 <_arch_isr_direct_pm+0x1e>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   13924:	b662      	cpsie	i
	__asm__ volatile("cpsie i" : : : "memory");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

}
   13926:	bd10      	pop	{r4, pc}
   13928:	20002114 	.word	0x20002114

0001392c <_new_thread>:

void _new_thread(struct k_thread *thread, char *pStackMem, size_t stackSize,
		 _thread_entry_t pEntry,
		 void *parameter1, void *parameter2, void *parameter3,
		 int priority, unsigned int options)
{
   1392c:	b570      	push	{r4, r5, r6, lr}
   1392e:	001e      	movs	r6, r3

	__ASSERT(!((u32_t)pStackMem & (STACK_ALIGN - 1)),
		 "stack is not aligned properly\n"
		 "%d-byte alignment required\n", STACK_ALIGN);

	char *stackEnd = pStackMem + stackSize;
   13930:	188c      	adds	r4, r1, r2
	 * if it isn't.
	 */
	*((u32_t *)pStack) = STACK_SENTINEL;
#endif /* CONFIG_STACK_SENTINEL */
	/* Initialize various struct k_thread members */
	_init_thread_base(&thread->base, prio, _THREAD_PRESTART, options);
   13932:	9b08      	ldr	r3, [sp, #32]
   13934:	9907      	ldr	r1, [sp, #28]
   13936:	2204      	movs	r2, #4

void _new_thread(struct k_thread *thread, char *pStackMem, size_t stackSize,
		 _thread_entry_t pEntry,
		 void *parameter1, void *parameter2, void *parameter3,
		 int priority, unsigned int options)
{
   13938:	0005      	movs	r5, r0
   1393a:	f001 fa47 	bl	14dcc <_init_thread_base>

	_new_thread_init(thread, pStackMem, stackSize, priority, options);

	/* carve the thread entry struct from the "base" of the stack */

	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd) -
   1393e:	2207      	movs	r2, #7
   13940:	4394      	bics	r4, r2
   13942:	0022      	movs	r2, r4
				    sizeof(struct __esf));

	pInitCtx->pc = ((u32_t)_thread_entry) & 0xfffffffe;
   13944:	2001      	movs	r0, #1

	/* static threads overwrite it afterwards with real value */
	thread->init_data = NULL;
   13946:	2300      	movs	r3, #0
   13948:	4909      	ldr	r1, [pc, #36]	; (13970 <_new_thread+0x44>)

	_new_thread_init(thread, pStackMem, stackSize, priority, options);

	/* carve the thread entry struct from the "base" of the stack */

	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd) -
   1394a:	3a20      	subs	r2, #32
				    sizeof(struct __esf));

	pInitCtx->pc = ((u32_t)_thread_entry) & 0xfffffffe;
   1394c:	4381      	bics	r1, r0
   1394e:	64eb      	str	r3, [r5, #76]	; 0x4c
	thread->fn_abort = NULL;
   13950:	652b      	str	r3, [r5, #80]	; 0x50
   13952:	6191      	str	r1, [r2, #24]
	pInitCtx->a1 = (u32_t)pEntry;
	pInitCtx->a2 = (u32_t)parameter1;
   13954:	9904      	ldr	r1, [sp, #16]

	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd) -
				    sizeof(struct __esf));

	pInitCtx->pc = ((u32_t)_thread_entry) & 0xfffffffe;
	pInitCtx->a1 = (u32_t)pEntry;
   13956:	6016      	str	r6, [r2, #0]
	pInitCtx->a2 = (u32_t)parameter1;
   13958:	6051      	str	r1, [r2, #4]
	pInitCtx->a3 = (u32_t)parameter2;
   1395a:	9905      	ldr	r1, [sp, #20]
   1395c:	6091      	str	r1, [r2, #8]
	pInitCtx->a4 = (u32_t)parameter3;
   1395e:	9906      	ldr	r1, [sp, #24]
   13960:	60d1      	str	r1, [r2, #12]
	pInitCtx->xpsr =
   13962:	2180      	movs	r1, #128	; 0x80
   13964:	0449      	lsls	r1, r1, #17
   13966:	61d1      	str	r1, [r2, #28]
	 * and the corresponding parameters.
	 */
	thread->entry = (struct __thread_entry *)(pInitCtx);
#endif

	thread->callee_saved.psp = (u32_t)pInitCtx;
   13968:	64aa      	str	r2, [r5, #72]	; 0x48
	thread->arch.basepri = 0;
   1396a:	65ab      	str	r3, [r5, #88]	; 0x58
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */

	thread_monitor_init(thread);
}
   1396c:	bd70      	pop	{r4, r5, r6, pc}
   1396e:	46c0      	nop			; (mov r8, r8)
   13970:	00014c99 	.word	0x00014c99

00013974 <_CpuIdleInit>:
 *
 * void _CpuIdleInit (void);
 */

SECTION_FUNC(TEXT, _CpuIdleInit)
	ldr r1, =_SCB_SCR
   13974:	4901      	ldr	r1, [pc, #4]	; (1397c <_CpuIdleInit+0x8>)
	movs.n r2, #_SCR_INIT_BITS
   13976:	2210      	movs	r2, #16
	str r2, [r1]
   13978:	600a      	str	r2, [r1, #0]
	bx lr
   1397a:	4770      	bx	lr
 *
 * void _CpuIdleInit (void);
 */

SECTION_FUNC(TEXT, _CpuIdleInit)
	ldr r1, =_SCB_SCR
   1397c:	e000ed10 	.word	0xe000ed10

00013980 <k_cpu_idle>:
	pop {r0}
	mov lr, r0
#endif

#if defined(CONFIG_ARMV6_M)
	cpsie i
   13980:	b662      	cpsie	i
	msr BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

	wfi
   13982:	bf30      	wfi

	bx lr
   13984:	4770      	bx	lr
   13986:	46c0      	nop			; (mov r8, r8)

00013988 <__hard_fault>:
#endif /* CONFIG_ARMV6_M */
SECTION_SUBSEC_FUNC(TEXT,__fault,__reserved)

#if defined(CONFIG_ARMV6_M)
	/* force unlock interrupts */
	cpsie i
   13988:	b662      	cpsie	i

	/* Use EXC_RETURN state to find out if stack frame is on the
	 * MSP or PSP
	 */
	ldr r0, =0x4
   1398a:	2004      	movs	r0, #4
	mov r1, lr
   1398c:	4671      	mov	r1, lr
	tst r1, r0
   1398e:	4201      	tst	r1, r0
	beq _stack_frame_msp
   13990:	d002      	beq.n	13998 <_stack_frame_msp>
	mrs r0, PSP
   13992:	f3ef 8009 	mrs	r0, PSP
	bne _stack_frame_endif
   13996:	d101      	bne.n	1399c <_stack_frame_endif>

00013998 <_stack_frame_msp>:
_stack_frame_msp:
	mrs r0, MSP
   13998:	f3ef 8008 	mrs	r0, MSP

0001399c <_stack_frame_endif>:
				 * frame is on the PSP */
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

	push {lr}
   1399c:	b500      	push	{lr}
	bl _Fault
   1399e:	f7ff ff31 	bl	13804 <_Fault>

	pop {pc}
   139a2:	bd00      	pop	{pc}

000139a4 <_NanoFatalErrorHandler>:
 * @param reason the reason that the handler was called
 * @param pEsf pointer to the exception stack frame
 */
void _NanoFatalErrorHandler(unsigned int reason,
					  const NANO_ESF *pEsf)
{
   139a4:	b570      	push	{r4, r5, r6, lr}
   139a6:	0004      	movs	r4, r0
	switch (reason) {
   139a8:	3801      	subs	r0, #1
 * @param reason the reason that the handler was called
 * @param pEsf pointer to the exception stack frame
 */
void _NanoFatalErrorHandler(unsigned int reason,
					  const NANO_ESF *pEsf)
{
   139aa:	000d      	movs	r5, r1
	switch (reason) {
   139ac:	2804      	cmp	r0, #4
   139ae:	d80e      	bhi.n	139ce <_NanoFatalErrorHandler+0x2a>
   139b0:	f7ec fbe2 	bl	178 <__gnu_thumb1_case_uqi>
   139b4:	09050d03 	.word	0x09050d03
   139b8:	0b          	.byte	0x0b
   139b9:	00          	.byte	0x00
	case _NANO_ERR_INVALID_TASK_EXIT:
		printk("***** Invalid Exit Software Error! *****\n");
   139ba:	480d      	ldr	r0, [pc, #52]	; (139f0 <_NanoFatalErrorHandler+0x4c>)
   139bc:	e000      	b.n	139c0 <_NanoFatalErrorHandler+0x1c>
		printk("***** Stack Check Fail! *****\n");
		break;
#endif /* CONFIG_STACK_CANARIES */

	case _NANO_ERR_ALLOCATION_FAIL:
		printk("**** Kernel Allocation Failure! ****\n");
   139be:	480d      	ldr	r0, [pc, #52]	; (139f4 <_NanoFatalErrorHandler+0x50>)
   139c0:	f7ed ffde 	bl	1980 <printk>
		break;
   139c4:	e007      	b.n	139d6 <_NanoFatalErrorHandler+0x32>

	case _NANO_ERR_KERNEL_OOPS:
		printk("***** Kernel OOPS! *****\n");
   139c6:	480c      	ldr	r0, [pc, #48]	; (139f8 <_NanoFatalErrorHandler+0x54>)
   139c8:	e7fa      	b.n	139c0 <_NanoFatalErrorHandler+0x1c>
		break;

	case _NANO_ERR_KERNEL_PANIC:
		printk("***** Kernel Panic! *****\n");
   139ca:	480c      	ldr	r0, [pc, #48]	; (139fc <_NanoFatalErrorHandler+0x58>)
   139cc:	e7f8      	b.n	139c0 <_NanoFatalErrorHandler+0x1c>
		break;

	default:
		printk("**** Unknown Fatal Error %d! ****\n", reason);
   139ce:	0021      	movs	r1, r4
   139d0:	480b      	ldr	r0, [pc, #44]	; (13a00 <_NanoFatalErrorHandler+0x5c>)
   139d2:	f7ed ffd5 	bl	1980 <printk>
		break;
	}
	printk("Current thread ID = %p\n"
   139d6:	f000 feef 	bl	147b8 <k_current_get>
   139da:	69aa      	ldr	r2, [r5, #24]
   139dc:	0001      	movs	r1, r0
   139de:	4809      	ldr	r0, [pc, #36]	; (13a04 <_NanoFatalErrorHandler+0x60>)
   139e0:	f7ed ffce 	bl	1980 <printk>
	 * to respond to the error.  The decisions as to what responses are
	 * appropriate to the various errors are something the customer must
	 * decide.
	 */

	_SysFatalErrorHandler(reason, pEsf);
   139e4:	0029      	movs	r1, r5
   139e6:	0020      	movs	r0, r4
   139e8:	f000 f814 	bl	13a14 <_SysFatalErrorHandler>
}
   139ec:	bd70      	pop	{r4, r5, r6, pc}
   139ee:	46c0      	nop			; (mov r8, r8)
   139f0:	0001869d 	.word	0x0001869d
   139f4:	000186c7 	.word	0x000186c7
   139f8:	000186ed 	.word	0x000186ed
   139fc:	00018707 	.word	0x00018707
   13a00:	00018722 	.word	0x00018722
   13a04:	00018745 	.word	0x00018745

00013a08 <_do_kernel_oops>:

void _do_kernel_oops(const NANO_ESF *esf)
{
   13a08:	b510      	push	{r4, lr}
	_NanoFatalErrorHandler(esf->r0, esf);
   13a0a:	0001      	movs	r1, r0
   13a0c:	6800      	ldr	r0, [r0, #0]
   13a0e:	f7ff ffc9 	bl	139a4 <_NanoFatalErrorHandler>
}
   13a12:	bd10      	pop	{r4, pc}

00013a14 <_SysFatalErrorHandler>:
 *
 * @return N/A
 */
void __weak _SysFatalErrorHandler(unsigned int reason,
					 const NANO_ESF *pEsf)
{
   13a14:	b510      	push	{r4, lr}
#ifdef CONFIG_STACK_SENTINEL
	if (reason == _NANO_ERR_STACK_CHK_FAIL) {
		goto hang_system;
	}
#endif
	if (reason == _NANO_ERR_KERNEL_PANIC) {
   13a16:	2805      	cmp	r0, #5
   13a18:	d01a      	beq.n	13a50 <_SysFatalErrorHandler+0x3c>
		goto hang_system;
	}
	if (k_is_in_isr() || _is_thread_essential()) {
   13a1a:	f001 f92b 	bl	14c74 <k_is_in_isr>
   13a1e:	2800      	cmp	r0, #0
   13a20:	d006      	beq.n	13a30 <_SysFatalErrorHandler+0x1c>
		printk("Fatal fault in %s! Spinning...\n",
		       k_is_in_isr() ? "ISR" : "essential thread");
   13a22:	f001 f927 	bl	14c74 <k_is_in_isr>
#endif
	if (reason == _NANO_ERR_KERNEL_PANIC) {
		goto hang_system;
	}
	if (k_is_in_isr() || _is_thread_essential()) {
		printk("Fatal fault in %s! Spinning...\n",
   13a26:	490c      	ldr	r1, [pc, #48]	; (13a58 <_SysFatalErrorHandler+0x44>)
   13a28:	2800      	cmp	r0, #0
   13a2a:	d10e      	bne.n	13a4a <_SysFatalErrorHandler+0x36>
   13a2c:	490b      	ldr	r1, [pc, #44]	; (13a5c <_SysFatalErrorHandler+0x48>)
   13a2e:	e00c      	b.n	13a4a <_SysFatalErrorHandler+0x36>
	}
#endif
	if (reason == _NANO_ERR_KERNEL_PANIC) {
		goto hang_system;
	}
	if (k_is_in_isr() || _is_thread_essential()) {
   13a30:	f001 f92a 	bl	14c88 <_is_thread_essential>
   13a34:	2800      	cmp	r0, #0
   13a36:	d1f4      	bne.n	13a22 <_SysFatalErrorHandler+0xe>
		printk("Fatal fault in %s! Spinning...\n",
		       k_is_in_isr() ? "ISR" : "essential thread");
		goto hang_system;
	}
	printk("Fatal fault in thread %p! Aborting.\n", _current);
   13a38:	4c09      	ldr	r4, [pc, #36]	; (13a60 <_SysFatalErrorHandler+0x4c>)
   13a3a:	480a      	ldr	r0, [pc, #40]	; (13a64 <_SysFatalErrorHandler+0x50>)
   13a3c:	68a1      	ldr	r1, [r4, #8]
   13a3e:	f7ed ff9f 	bl	1980 <printk>
	k_thread_abort(_current);
   13a42:	68a0      	ldr	r0, [r4, #8]
   13a44:	f000 f812 	bl	13a6c <k_thread_abort>

	for (;;) {
		k_cpu_idle();
	}
	CODE_UNREACHABLE;
}
   13a48:	bd10      	pop	{r4, pc}
#endif
	if (reason == _NANO_ERR_KERNEL_PANIC) {
		goto hang_system;
	}
	if (k_is_in_isr() || _is_thread_essential()) {
		printk("Fatal fault in %s! Spinning...\n",
   13a4a:	4807      	ldr	r0, [pc, #28]	; (13a68 <_SysFatalErrorHandler+0x54>)
   13a4c:	f7ed ff98 	bl	1980 <printk>
#else
	ARG_UNUSED(reason);
#endif

	for (;;) {
		k_cpu_idle();
   13a50:	f7ff ff96 	bl	13980 <k_cpu_idle>
   13a54:	e7fc      	b.n	13a50 <_SysFatalErrorHandler+0x3c>
   13a56:	46c0      	nop			; (mov r8, r8)
   13a58:	00018781 	.word	0x00018781
   13a5c:	00018785 	.word	0x00018785
   13a60:	20002114 	.word	0x20002114
   13a64:	000187b6 	.word	0x000187b6
   13a68:	00018796 	.word	0x00018796

00013a6c <k_thread_abort>:
#include <wait_q.h>

extern void _k_thread_single_abort(struct k_thread *thread);

void k_thread_abort(k_tid_t thread)
{
   13a6c:	b570      	push	{r4, r5, r6, lr}
   13a6e:	0005      	movs	r5, r0
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
   13a70:	f3ef 8410 	mrs	r4, PRIMASK
   13a74:	b672      	cpsid	i
	unsigned int key;

	key = irq_lock();

	_k_thread_single_abort(thread);
   13a76:	f001 f941 	bl	14cfc <_k_thread_single_abort>
	_thread_monitor_exit(thread);

	if (_current == thread) {
   13a7a:	4b0b      	ldr	r3, [pc, #44]	; (13aa8 <k_thread_abort+0x3c>)
   13a7c:	689b      	ldr	r3, [r3, #8]
   13a7e:	429d      	cmp	r5, r3
   13a80:	d10d      	bne.n	13a9e <k_thread_abort+0x32>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
   13a82:	4b0a      	ldr	r3, [pc, #40]	; (13aac <k_thread_abort+0x40>)
   13a84:	685a      	ldr	r2, [r3, #4]
   13a86:	05d2      	lsls	r2, r2, #23
   13a88:	d104      	bne.n	13a94 <k_thread_abort+0x28>

#ifdef CONFIG_STACK_SENTINEL
	_check_stack_sentinel();
#endif
#ifdef CONFIG_TIMESLICING
	_update_time_slice_before_swap();
   13a8a:	f000 fec5 	bl	14818 <_update_time_slice_before_swap>
#endif

	return __swap(key);
   13a8e:	0020      	movs	r0, r4
   13a90:	f7ff fea4 	bl	137dc <__swap>
			_Swap(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   13a94:	2180      	movs	r1, #128	; 0x80
   13a96:	685a      	ldr	r2, [r3, #4]
   13a98:	0549      	lsls	r1, r1, #21
   13a9a:	430a      	orrs	r2, r1
   13a9c:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	_reschedule_threads(key);
   13a9e:	0020      	movs	r0, r4
   13aa0:	f000 fdfe 	bl	146a0 <_reschedule_threads>
}
   13aa4:	bd70      	pop	{r4, r5, r6, pc}
   13aa6:	46c0      	nop			; (mov r8, r8)
   13aa8:	20002114 	.word	0x20002114
   13aac:	e000ed00 	.word	0xe000ed00

00013ab0 <_isr_wrapper>:
 *
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

	push {lr}		/* lr is now the first item on the stack */
   13ab0:	b500      	push	{lr}
	 * for the next timer deadline is not interrupted.  For non-tickless idle,
	 * this ensures that the clearing of the kernel idle state is not
	 * interrupted.  In each case, _sys_power_save_idle_exit is called with
	 * interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
   13ab2:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   13ab4:	4a0a      	ldr	r2, [pc, #40]	; (13ae0 <_idle_state_cleared+0x1c>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   13ab6:	6950      	ldr	r0, [r2, #20]
	cmp r0, #0
   13ab8:	2800      	cmp	r0, #0

#if defined(CONFIG_ARMV6_M)
	beq _idle_state_cleared
   13aba:	d003      	beq.n	13ac4 <_idle_state_cleared>
	movs.n r1, #0
   13abc:	2100      	movs	r1, #0
	/* clear kernel idle state */
	str r1, [r2, #_kernel_offset_to_idle]
   13abe:	6151      	str	r1, [r2, #20]
	blx _sys_power_save_idle_exit
   13ac0:	f000 f894 	bl	13bec <_sys_power_save_idle_exit>

00013ac4 <_idle_state_cleared>:
		blxne	_sys_power_save_idle_exit
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   13ac4:	b662      	cpsie	i
#endif

	mrs r0, IPSR	/* get exception number */
   13ac6:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M)
	ldr r1, =16
   13aca:	2110      	movs	r1, #16
	subs r0, r1	/* get IRQ number */
   13acc:	1a40      	subs	r0, r0, r1
	lsls r0, #3	/* table is 8-byte wide */
   13ace:	00c0      	lsls	r0, r0, #3
	sub r0, r0, #16	/* get IRQ number */
	lsl r0, r0, #3	/* table is 8-byte wide */
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */
	ldr r1, =_sw_isr_table
   13ad0:	4904      	ldr	r1, [pc, #16]	; (13ae4 <_idle_state_cleared+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   13ad2:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   13ad4:	c909      	ldmia	r1!, {r0, r3}
	pop {r3}
#else
	pop {lr}
#endif
#endif
	blx r3		/* call ISR */
   13ad6:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M)
	pop {r3}
   13ad8:	bc08      	pop	{r3}
	mov lr, r3
   13ada:	469e      	mov	lr, r3
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

	/* exception return is done in _IntExit() */
	b _IntExit
   13adc:	e60c      	b.n	136f8 <_IntExit>
   13ade:	0000      	.short	0x0000
	 * interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   13ae0:	20002114 	.word	0x20002114
	sub r0, r0, #16	/* get IRQ number */
	lsl r0, r0, #3	/* table is 8-byte wide */
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */
	ldr r1, =_sw_isr_table
   13ae4:	000000a8 	.word	0x000000a8

00013ae8 <__reset>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M)
    cpsid i
   13ae8:	b672      	cpsid	i

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during nanoInit().
     */
    ldr r0, =_interrupt_stack
   13aea:	4804      	ldr	r0, [pc, #16]	; (13afc <__reset+0x14>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
   13aec:	4904      	ldr	r1, [pc, #16]	; (13b00 <__reset+0x18>)
    adds r0, r0, r1
   13aee:	1840      	adds	r0, r0, r1
    msr PSP, r0
   13af0:	f380 8809 	msr	PSP, r0
    movs.n r0, #2	/* switch to using PSP (bit1 of CONTROL reg) */
   13af4:	2002      	movs	r0, #2
    msr CONTROL, r0
   13af6:	f380 8814 	msr	CONTROL, r0

    b _PrepC
   13afa:	e005      	b.n	13b08 <_PrepC>

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during nanoInit().
     */
    ldr r0, =_interrupt_stack
   13afc:	20003848 	.word	0x20003848
    ldr r1, =CONFIG_ISR_STACK_SIZE
   13b00:	00000800 	.word	0x00000800

00013b04 <_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(_SysNmiOnReset)

SECTION_FUNC(TEXT, _SysNmiOnReset)
    wfi
   13b04:	bf30      	wfi
    b _SysNmiOnReset
   13b06:	e7fd      	b.n	13b04 <_SysNmiOnReset>

00013b08 <_PrepC>:

#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	extern u64_t __start_time_stamp;
#endif
void _PrepC(void)
{
   13b08:	b510      	push	{r4, lr}
	relocate_vector_table();
	enable_floating_point();
	_bss_zero();
   13b0a:	f000 f89f 	bl	13c4c <_bss_zero>
	_data_copy();
   13b0e:	f000 f8a9 	bl	13c64 <_data_copy>
#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	__start_time_stamp = 0;
#endif
	_Cstart();
   13b12:	f000 f8c9 	bl	13ca8 <_Cstart>

00013b16 <__nmi>:
 *
 * @return N/A
 */

void __nmi(void)
{
   13b16:	b510      	push	{r4, lr}
	handler();
   13b18:	f7ff fff4 	bl	13b04 <_SysNmiOnReset>
	_ExcExit();
   13b1c:	f7ff fdf2 	bl	13704 <_ExcExit>
}
   13b20:	bd10      	pop	{r4, pc}

00013b22 <atomic_inc>:
   13b22:	f3ef 8210 	mrs	r2, PRIMASK
   13b26:	b672      	cpsid	i
	unsigned int key;
	atomic_val_t ret;

	key = irq_lock();

	ret = *target;
   13b28:	6803      	ldr	r3, [r0, #0]
	(*target)++;
   13b2a:	1c59      	adds	r1, r3, #1
   13b2c:	6001      	str	r1, [r0, #0]
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   13b2e:	2a00      	cmp	r2, #0
   13b30:	d100      	bne.n	13b34 <atomic_inc+0x12>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   13b32:	b662      	cpsie	i

	irq_unlock(key);

	return ret;
}
   13b34:	0018      	movs	r0, r3
   13b36:	4770      	bx	lr

00013b38 <atomic_dec>:
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
   13b38:	f3ef 8210 	mrs	r2, PRIMASK
   13b3c:	b672      	cpsid	i
	unsigned int key;
	atomic_val_t ret;

	key = irq_lock();

	ret = *target;
   13b3e:	6803      	ldr	r3, [r0, #0]
	(*target)--;
   13b40:	1e59      	subs	r1, r3, #1
   13b42:	6001      	str	r1, [r0, #0]
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   13b44:	2a00      	cmp	r2, #0
   13b46:	d100      	bne.n	13b4a <atomic_dec+0x12>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   13b48:	b662      	cpsie	i

	irq_unlock(key);

	return ret;
}
   13b4a:	0018      	movs	r0, r3
   13b4c:	4770      	bx	lr

00013b4e <atomic_get>:
 *
 * @return The value read from <target>
 */
atomic_val_t atomic_get(const atomic_t *target)
{
	return *target;
   13b4e:	6800      	ldr	r0, [r0, #0]
}
   13b50:	4770      	bx	lr

00013b52 <atomic_set>:
 * @param value the value to write
 *
 * @return The previous value from <target>
 */
atomic_val_t atomic_set(atomic_t *target, atomic_val_t value)
{
   13b52:	0003      	movs	r3, r0
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
   13b54:	f3ef 8210 	mrs	r2, PRIMASK
   13b58:	b672      	cpsid	i
	unsigned int key;
	atomic_val_t ret;

	key = irq_lock();

	ret = *target;
   13b5a:	6800      	ldr	r0, [r0, #0]
	*target = value;
   13b5c:	6019      	str	r1, [r3, #0]
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   13b5e:	2a00      	cmp	r2, #0
   13b60:	d100      	bne.n	13b64 <atomic_set+0x12>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   13b62:	b662      	cpsie	i

	irq_unlock(key);

	return ret;
}
   13b64:	4770      	bx	lr

00013b66 <atomic_or>:
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
   13b66:	f3ef 8210 	mrs	r2, PRIMASK
   13b6a:	b672      	cpsid	i
	unsigned int key;
	atomic_val_t ret;

	key = irq_lock();

	ret = *target;
   13b6c:	6803      	ldr	r3, [r0, #0]
	*target |= value;
   13b6e:	4319      	orrs	r1, r3
   13b70:	6001      	str	r1, [r0, #0]
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   13b72:	2a00      	cmp	r2, #0
   13b74:	d100      	bne.n	13b78 <atomic_or+0x12>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   13b76:	b662      	cpsie	i

	irq_unlock(key);

	return ret;
}
   13b78:	0018      	movs	r0, r3
   13b7a:	4770      	bx	lr

00013b7c <atomic_and>:
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
   13b7c:	f3ef 8210 	mrs	r2, PRIMASK
   13b80:	b672      	cpsid	i
	unsigned int key;
	atomic_val_t ret;

	key = irq_lock();

	ret = *target;
   13b82:	6803      	ldr	r3, [r0, #0]
	*target &= value;
   13b84:	4019      	ands	r1, r3
   13b86:	6001      	str	r1, [r0, #0]
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   13b88:	2a00      	cmp	r2, #0
   13b8a:	d100      	bne.n	13b8e <atomic_and+0x12>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   13b8c:	b662      	cpsie	i

	irq_unlock(key);

	return ret;
}
   13b8e:	0018      	movs	r0, r3
   13b90:	4770      	bx	lr
	...

00013b94 <_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void _sys_device_do_config_level(int level)
{
   13b94:	b570      	push	{r4, r5, r6, lr}
	struct device *info;

	for (info = config_levels[level]; info < config_levels[level+1];
   13b96:	4e07      	ldr	r6, [pc, #28]	; (13bb4 <_sys_device_do_config_level+0x20>)
   13b98:	0083      	lsls	r3, r0, #2
   13b9a:	599d      	ldr	r5, [r3, r6]
   13b9c:	3001      	adds	r0, #1
   13b9e:	0084      	lsls	r4, r0, #2
   13ba0:	5933      	ldr	r3, [r6, r4]
   13ba2:	429d      	cmp	r5, r3
   13ba4:	d205      	bcs.n	13bb2 <_sys_device_do_config_level+0x1e>
								info++) {
		struct device_config *device = info->config;

		device->init(info);
   13ba6:	682b      	ldr	r3, [r5, #0]
   13ba8:	0028      	movs	r0, r5
   13baa:	685b      	ldr	r3, [r3, #4]
   13bac:	4798      	blx	r3
void _sys_device_do_config_level(int level)
{
	struct device *info;

	for (info = config_levels[level]; info < config_levels[level+1];
								info++) {
   13bae:	350c      	adds	r5, #12
   13bb0:	e7f6      	b.n	13ba0 <_sys_device_do_config_level+0xc>
		struct device_config *device = info->config;

		device->init(info);
	}
}
   13bb2:	bd70      	pop	{r4, r5, r6, pc}
   13bb4:	00018840 	.word	0x00018840

00013bb8 <device_get_binding>:

struct device *device_get_binding(const char *name)
{
   13bb8:	b570      	push	{r4, r5, r6, lr}
   13bba:	0005      	movs	r5, r0
	struct device *info;

	for (info = __device_init_start; info != __device_init_end; info++) {
   13bbc:	4c09      	ldr	r4, [pc, #36]	; (13be4 <device_get_binding+0x2c>)
   13bbe:	4b0a      	ldr	r3, [pc, #40]	; (13be8 <device_get_binding+0x30>)
   13bc0:	429c      	cmp	r4, r3
   13bc2:	d00d      	beq.n	13be0 <device_get_binding+0x28>
		if (info->driver_api && !strcmp(name, info->config->name)) {
   13bc4:	6863      	ldr	r3, [r4, #4]
   13bc6:	2b00      	cmp	r3, #0
   13bc8:	d101      	bne.n	13bce <device_get_binding+0x16>

struct device *device_get_binding(const char *name)
{
	struct device *info;

	for (info = __device_init_start; info != __device_init_end; info++) {
   13bca:	340c      	adds	r4, #12
   13bcc:	e7f7      	b.n	13bbe <device_get_binding+0x6>
		if (info->driver_api && !strcmp(name, info->config->name)) {
   13bce:	6823      	ldr	r3, [r4, #0]
   13bd0:	0028      	movs	r0, r5
   13bd2:	6819      	ldr	r1, [r3, #0]
   13bd4:	f7ed f890 	bl	cf8 <strcmp>
   13bd8:	2800      	cmp	r0, #0
   13bda:	d1f6      	bne.n	13bca <device_get_binding+0x12>
   13bdc:	0020      	movs	r0, r4
   13bde:	e000      	b.n	13be2 <device_get_binding+0x2a>
			return info;
		}
	}

	return NULL;
   13be0:	2000      	movs	r0, #0
}
   13be2:	bd70      	pop	{r4, r5, r6, pc}
   13be4:	20000928 	.word	0x20000928
   13be8:	20000994 	.word	0x20000994

00013bec <_sys_power_save_idle_exit>:
	k_cpu_idle();
#endif
}

void _sys_power_save_idle_exit(s32_t ticks)
{
   13bec:	b510      	push	{r4, lr}
	if (_sys_pm_idle_exit_notify) {
		_sys_soc_resume();
	}
#endif

	if (_must_enter_tickless_idle(ticks)) {
   13bee:	1c43      	adds	r3, r0, #1
   13bf0:	d003      	beq.n	13bfa <_sys_power_save_idle_exit+0xe>
   13bf2:	4b03      	ldr	r3, [pc, #12]	; (13c00 <_sys_power_save_idle_exit+0x14>)
   13bf4:	681b      	ldr	r3, [r3, #0]
   13bf6:	4298      	cmp	r0, r3
   13bf8:	db01      	blt.n	13bfe <_sys_power_save_idle_exit+0x12>
		/* Resume normal periodic system timer interrupts */
		_timer_idle_exit();
   13bfa:	f7ed f9f5 	bl	fe8 <_timer_idle_exit>
	}
}
   13bfe:	bd10      	pop	{r4, pc}
   13c00:	20000920 	.word	0x20000920

00013c04 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while ((0))
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   13c04:	b570      	push	{r4, r5, r6, lr}
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
   13c06:	f3ef 8310 	mrs	r3, PRIMASK
   13c0a:	b672      	cpsid	i
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   13c0c:	4d0b      	ldr	r5, [pc, #44]	; (13c3c <idle+0x38>)
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13c0e:	4a0c      	ldr	r2, [pc, #48]	; (13c40 <idle+0x3c>)
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   13c10:	68eb      	ldr	r3, [r5, #12]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13c12:	4293      	cmp	r3, r2
   13c14:	d009      	beq.n	13c2a <idle+0x26>
static inline s32_t _get_next_timeout_expiry(void)
{
	struct _timeout *t = (struct _timeout *)
			     sys_dlist_peek_head(&_timeout_q);

	return t ? t->delta_ticks_from_prev : K_FOREVER;
   13c16:	2b00      	cmp	r3, #0
   13c18:	d007      	beq.n	13c2a <idle+0x26>
   13c1a:	691c      	ldr	r4, [r3, #16]
			k_cpu_idle();
			return;
		}
	}
#endif
	if (_must_enter_tickless_idle(ticks)) {
   13c1c:	1c63      	adds	r3, r4, #1
   13c1e:	d006      	beq.n	13c2e <idle+0x2a>
   13c20:	4b08      	ldr	r3, [pc, #32]	; (13c44 <idle+0x40>)
   13c22:	681b      	ldr	r3, [r3, #0]
   13c24:	42a3      	cmp	r3, r4
   13c26:	dd02      	ble.n	13c2e <idle+0x2a>
   13c28:	e004      	b.n	13c34 <idle+0x30>
   13c2a:	2401      	movs	r4, #1
   13c2c:	4264      	negs	r4, r4
		/*
		 * In the case of tickless kernel, timer driver should
		 * reprogram timer only if the currently programmed time
		 * duration is smaller than the idle time.
		 */
		_timer_idle_enter(ticks);
   13c2e:	0020      	movs	r0, r4
   13c30:	f7ed f9c4 	bl	fbc <_timer_idle_enter>
 *
 * @return N/A
 */
static void set_kernel_idle_time_in_ticks(s32_t ticks)
{
	_kernel.idle = ticks;
   13c34:	616c      	str	r4, [r5, #20]
	if (_sys_soc_suspend(ticks) == SYS_PM_NOT_HANDLED) {
		_sys_pm_idle_exit_notify = 0;
		k_cpu_idle();
	}
#else
	k_cpu_idle();
   13c36:	f7ff fea3 	bl	13980 <k_cpu_idle>
   13c3a:	e7e4      	b.n	13c06 <idle+0x2>
   13c3c:	20002114 	.word	0x20002114
   13c40:	20002120 	.word	0x20002120
   13c44:	20000920 	.word	0x20000920

00013c48 <k_call_stacks_analyze>:
#endif /* CONFIG_ARC */
	STACK_ANALYZE("interrupt", _interrupt_stack);
	STACK_ANALYZE("workqueue", sys_work_q_stack);

#endif /* CONFIG_INIT_STACKS && CONFIG_PRINTK */
}
   13c48:	4770      	bx	lr
	...

00013c4c <_bss_zero>:
 * This routine clears the BSS region, so all bytes are 0.
 *
 * @return N/A
 */
void _bss_zero(void)
{
   13c4c:	b510      	push	{r4, lr}
	memset(&__bss_start, 0,
   13c4e:	4803      	ldr	r0, [pc, #12]	; (13c5c <_bss_zero+0x10>)
   13c50:	4a03      	ldr	r2, [pc, #12]	; (13c60 <_bss_zero+0x14>)
   13c52:	2100      	movs	r1, #0
   13c54:	1a12      	subs	r2, r2, r0
   13c56:	f7ed f89a 	bl	d8e <memset>
		 ((u32_t) &__bss_end - (u32_t) &__bss_start));
#ifdef CONFIG_APPLICATION_MEMORY
	memset(&__app_bss_start, 0,
		 ((u32_t) &__app_bss_end - (u32_t) &__app_bss_start));
#endif
}
   13c5a:	bd10      	pop	{r4, pc}
   13c5c:	20000a60 	.word	0x20000a60
   13c60:	200023cc 	.word	0x200023cc

00013c64 <_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void _data_copy(void)
{
   13c64:	b510      	push	{r4, lr}
	memcpy(&__data_ram_start, &__data_rom_start,
   13c66:	4803      	ldr	r0, [pc, #12]	; (13c74 <_data_copy+0x10>)
   13c68:	4a03      	ldr	r2, [pc, #12]	; (13c78 <_data_copy+0x14>)
   13c6a:	4904      	ldr	r1, [pc, #16]	; (13c7c <_data_copy+0x18>)
   13c6c:	1a12      	subs	r2, r2, r0
   13c6e:	f7ed f864 	bl	d3a <memcpy>
		 ((u32_t) &__data_ram_end - (u32_t) &__data_ram_start));
#ifdef CONFIG_APPLICATION_MEMORY
	memcpy(&__app_data_ram_start, &__app_data_rom_start,
		 ((u32_t) &__app_data_ram_end - (u32_t) &__app_data_ram_start));
#endif
}
   13c72:	bd10      	pop	{r4, pc}
   13c74:	20000000 	.word	0x20000000
   13c78:	20000a60 	.word	0x20000a60
   13c7c:	0001885c 	.word	0x0001885c

00013c80 <_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void _main(void *unused1, void *unused2, void *unused3)
{
   13c80:	b510      	push	{r4, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
   13c82:	2002      	movs	r0, #2
   13c84:	f7ff ff86 	bl	13b94 <_sys_device_do_config_level>

	/* Final init level before app starts */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
   13c88:	2003      	movs	r0, #3
   13c8a:	f7ff ff83 	bl	13b94 <_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	_init_static_threads();
   13c8e:	f001 f85d 	bl	14d4c <_init_static_threads>
	__main_time_stamp = (u64_t)k_cycle_get_32();
#endif

	extern void main(void);

	main();
   13c92:	f7ec feb7 	bl	a04 <main>

	/* Terminate thread normally since it has no more work to do */
	_main_thread->base.user_options &= ~K_ESSENTIAL;
   13c96:	2101      	movs	r1, #1
   13c98:	4a02      	ldr	r2, [pc, #8]	; (13ca4 <_main+0x24>)
   13c9a:	7a13      	ldrb	r3, [r2, #8]
   13c9c:	438b      	bics	r3, r1
   13c9e:	7213      	strb	r3, [r2, #8]
}
   13ca0:	bd10      	pop	{r4, pc}
   13ca2:	46c0      	nop			; (mov r8, r8)
   13ca4:	20002054 	.word	0x20002054

00013ca8 <_Cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void _Cstart(void)
{
   13ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
   13caa:	b087      	sub	sp, #28
	 * spurious interrupts. This must be performed before other kernel
	 * subsystems install bonafide handlers, or before hardware device
	 * drivers are initialized.
	 */

	_IntLibInit();
   13cac:	f7ff fd3c 	bl	13728 <_IntLibInit>
   13cb0:	4b2f      	ldr	r3, [pc, #188]	; (13d70 <_Cstart+0xc8>)
   13cb2:	4a30      	ldr	r2, [pc, #192]	; (13d74 <_Cstart+0xcc>)
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   13cb4:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
   13cb6:	605b      	str	r3, [r3, #4]
   13cb8:	3308      	adds	r3, #8

	/* ready the init/main and idle threads */

	for (int ii = 0; ii < K_NUM_PRIORITIES; ii++) {
   13cba:	429a      	cmp	r2, r3
   13cbc:	d1fa      	bne.n	13cb4 <_Cstart+0xc>
	 *   contain garbage, which would prevent the cache loading algorithm
	 *   to work as intended
	 */
	_ready_q.cache = _main_thread;

	_new_thread(_main_thread, _main_stack,
   13cbe:	2400      	movs	r4, #0
   13cc0:	2301      	movs	r3, #1
   13cc2:	2280      	movs	r2, #128	; 0x80
	 * - the main thread will be the one to run first
	 * - no other thread is initialized yet and thus their priority fields
	 *   contain garbage, which would prevent the cache loading algorithm
	 *   to work as intended
	 */
	_ready_q.cache = _main_thread;
   13cc4:	4d2c      	ldr	r5, [pc, #176]	; (13d78 <_Cstart+0xd0>)
   13cc6:	4e2d      	ldr	r6, [pc, #180]	; (13d7c <_Cstart+0xd4>)

	_new_thread(_main_thread, _main_stack,
   13cc8:	492d      	ldr	r1, [pc, #180]	; (13d80 <_Cstart+0xd8>)
	 * - the main thread will be the one to run first
	 * - no other thread is initialized yet and thus their priority fields
	 *   contain garbage, which would prevent the cache loading algorithm
	 *   to work as intended
	 */
	_ready_q.cache = _main_thread;
   13cca:	61b5      	str	r5, [r6, #24]

	_new_thread(_main_thread, _main_stack,
   13ccc:	0028      	movs	r0, r5
   13cce:	9304      	str	r3, [sp, #16]
   13cd0:	9403      	str	r4, [sp, #12]
   13cd2:	9402      	str	r4, [sp, #8]
   13cd4:	9401      	str	r4, [sp, #4]
   13cd6:	9400      	str	r4, [sp, #0]
   13cd8:	4b2a      	ldr	r3, [pc, #168]	; (13d84 <_Cstart+0xdc>)
   13cda:	00d2      	lsls	r2, r2, #3
   13cdc:	f7ff fe26 	bl	1392c <_new_thread>
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   13ce0:	2204      	movs	r2, #4
   13ce2:	7a6b      	ldrb	r3, [r5, #9]
		    MAIN_STACK_SIZE, _main, NULL, NULL, NULL,
		    CONFIG_MAIN_THREAD_PRIORITY, K_ESSENTIAL);
	_mark_thread_as_started(_main_thread);
	_add_thread_to_ready_q(_main_thread);
   13ce4:	0028      	movs	r0, r5
   13ce6:	4393      	bics	r3, r2
   13ce8:	726b      	strb	r3, [r5, #9]
   13cea:	f000 fc2f 	bl	1454c <_add_thread_to_ready_q>

#ifdef CONFIG_MULTITHREADING
	_new_thread(_idle_thread, _idle_stack,
   13cee:	2301      	movs	r3, #1
   13cf0:	2280      	movs	r2, #128	; 0x80
   13cf2:	4f25      	ldr	r7, [pc, #148]	; (13d88 <_Cstart+0xe0>)
   13cf4:	9304      	str	r3, [sp, #16]
   13cf6:	330e      	adds	r3, #14
   13cf8:	9303      	str	r3, [sp, #12]
   13cfa:	4924      	ldr	r1, [pc, #144]	; (13d8c <_Cstart+0xe4>)
   13cfc:	0038      	movs	r0, r7
   13cfe:	9402      	str	r4, [sp, #8]
   13d00:	9401      	str	r4, [sp, #4]
   13d02:	9400      	str	r4, [sp, #0]
   13d04:	4b22      	ldr	r3, [pc, #136]	; (13d90 <_Cstart+0xe8>)
   13d06:	0052      	lsls	r2, r2, #1
   13d08:	f7ff fe10 	bl	1392c <_new_thread>
   13d0c:	2204      	movs	r2, #4
   13d0e:	7a7b      	ldrb	r3, [r7, #9]
		    IDLE_STACK_SIZE, idle, NULL, NULL, NULL,
		    K_LOWEST_THREAD_PRIO, K_ESSENTIAL);
	_mark_thread_as_started(_idle_thread);
	_add_thread_to_ready_q(_idle_thread);
   13d10:	0038      	movs	r0, r7
   13d12:	4393      	bics	r3, r2
   13d14:	727b      	strb	r3, [r7, #9]
   13d16:	f000 fc19 	bl	1454c <_add_thread_to_ready_q>
 * @return N/A
 */
static ALWAYS_INLINE void _MspSet(u32_t msp /* value to store in MSP */
				  )
{
	__asm__ volatile("msr MSP, %0\n\t" :  : "r"(msp));
   13d1a:	2280      	movs	r2, #128	; 0x80
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   13d1c:	4b1d      	ldr	r3, [pc, #116]	; (13d94 <_Cstart+0xec>)
   13d1e:	0112      	lsls	r2, r2, #4
   13d20:	60f3      	str	r3, [r6, #12]
	list->tail = (sys_dnode_t *)list;
   13d22:	6133      	str	r3, [r6, #16]
   13d24:	4b1c      	ldr	r3, [pc, #112]	; (13d98 <_Cstart+0xf0>)
   13d26:	189b      	adds	r3, r3, r2
   13d28:	f383 8808 	msr	MSP, r3
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
   13d2c:	4a1b      	ldr	r2, [pc, #108]	; (13d9c <_Cstart+0xf4>)
   13d2e:	4b1c      	ldr	r3, [pc, #112]	; (13da0 <_Cstart+0xf8>)
   13d30:	6a11      	ldr	r1, [r2, #32]
   13d32:	400b      	ands	r3, r1
   13d34:	21c0      	movs	r1, #192	; 0xc0
   13d36:	0409      	lsls	r1, r1, #16
   13d38:	430b      	orrs	r3, r1
   13d3a:	6213      	str	r3, [r2, #32]
extern void _CpuIdleInit(void);
static ALWAYS_INLINE void kernel_arch_init(void)
{
	_InterruptStackSetup();
	_ExcSetup();
	_FaultInit();
   13d3c:	f7ff fd8c 	bl	13858 <_FaultInit>
	_CpuIdleInit();
   13d40:	f7ff fe18 	bl	13974 <_CpuIdleInit>
	 */

	prepare_multithreading(dummy_thread);

	/* perform basic hardware initialization */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   13d44:	0020      	movs	r0, r4
   13d46:	f7ff ff25 	bl	13b94 <_sys_device_do_config_level>
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   13d4a:	2001      	movs	r0, #1
   13d4c:	f7ff ff22 	bl	13b94 <_sys_device_do_config_level>

	_current = main_thread;

	/* the ready queue cache already contains the main thread */

	__asm__ __volatile__(
   13d50:	2280      	movs	r2, #128	; 0x80
   13d52:	4b0b      	ldr	r3, [pc, #44]	; (13d80 <_Cstart+0xd8>)
   13d54:	00d2      	lsls	r2, r2, #3
   13d56:	189b      	adds	r3, r3, r2
   13d58:	2207      	movs	r2, #7
   13d5a:	490a      	ldr	r1, [pc, #40]	; (13d84 <_Cstart+0xdc>)
   13d5c:	4393      	bics	r3, r2
	char *start_of_main_stack;

	start_of_main_stack = main_stack + main_stack_size;
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);

	_current = main_thread;
   13d5e:	60b5      	str	r5, [r6, #8]

	/* the ready queue cache already contains the main thread */

	__asm__ __volatile__(
   13d60:	4a10      	ldr	r2, [pc, #64]	; (13da4 <_Cstart+0xfc>)
   13d62:	000c      	movs	r4, r1
   13d64:	f383 8809 	msr	PSP, r3
   13d68:	b662      	cpsie	i
   13d6a:	1c20      	adds	r0, r4, #0
   13d6c:	4710      	bx	r2
   13d6e:	46c0      	nop			; (mov r8, r8)
   13d70:	20002134 	.word	0x20002134
   13d74:	20002234 	.word	0x20002234
   13d78:	20002054 	.word	0x20002054
   13d7c:	20002114 	.word	0x20002114
   13d80:	20003348 	.word	0x20003348
   13d84:	00013c81 	.word	0x00013c81
   13d88:	200020b4 	.word	0x200020b4
   13d8c:	20003748 	.word	0x20003748
   13d90:	00013c05 	.word	0x00013c05
   13d94:	20002120 	.word	0x20002120
   13d98:	20003848 	.word	0x20003848
   13d9c:	e000ed00 	.word	0xe000ed00
   13da0:	ff00ffff 	.word	0xff00ffff
   13da4:	00014c99 	.word	0x00014c99

00013da8 <adjust_owner_prio.isra.6>:
	return new_prio;
}

static void adjust_owner_prio(struct k_mutex *mutex, int new_prio)
{
	if (mutex->owner->base.prio != new_prio) {
   13da8:	230a      	movs	r3, #10
	new_prio = _get_new_prio_with_ceiling(new_prio);

	return new_prio;
}

static void adjust_owner_prio(struct k_mutex *mutex, int new_prio)
   13daa:	b570      	push	{r4, r5, r6, lr}
{
	if (mutex->owner->base.prio != new_prio) {
   13dac:	56c3      	ldrsb	r3, [r0, r3]
	new_prio = _get_new_prio_with_ceiling(new_prio);

	return new_prio;
}

static void adjust_owner_prio(struct k_mutex *mutex, int new_prio)
   13dae:	0004      	movs	r4, r0
   13db0:	000d      	movs	r5, r1
{
	if (mutex->owner->base.prio != new_prio) {
   13db2:	428b      	cmp	r3, r1
   13db4:	d00d      	beq.n	13dd2 <adjust_owner_prio.isra.6+0x2a>
}

/* check if a thread is ready */
static inline int _is_thread_ready(struct k_thread *thread)
{
	return !(_is_thread_prevented_from_running(thread) ||
   13db6:	7a43      	ldrb	r3, [r0, #9]
   13db8:	06db      	lsls	r3, r3, #27
   13dba:	d109      	bne.n	13dd0 <adjust_owner_prio.isra.6+0x28>
   13dbc:	6a03      	ldr	r3, [r0, #32]
   13dbe:	3301      	adds	r3, #1
   13dc0:	d106      	bne.n	13dd0 <adjust_owner_prio.isra.6+0x28>
 */
/* must be called with interrupts locked */
static inline void _thread_priority_set(struct k_thread *thread, int prio)
{
	if (_is_thread_ready(thread)) {
		_remove_thread_from_ready_q(thread);
   13dc2:	f000 fbeb 	bl	1459c <_remove_thread_from_ready_q>
		thread->base.prio = prio;
   13dc6:	72a5      	strb	r5, [r4, #10]
		_add_thread_to_ready_q(thread);
   13dc8:	0020      	movs	r0, r4
   13dca:	f000 fbbf 	bl	1454c <_add_thread_to_ready_q>
   13dce:	e000      	b.n	13dd2 <adjust_owner_prio.isra.6+0x2a>
	} else {
		thread->base.prio = prio;
   13dd0:	72a5      	strb	r5, [r4, #10]
			'y' : 'n',
			new_prio, mutex->owner->base.prio);

		_thread_priority_set(mutex->owner, new_prio);
	}
}
   13dd2:	bd70      	pop	{r4, r5, r6, pc}

00013dd4 <k_mutex_lock>:

int k_mutex_lock(struct k_mutex *mutex, s32_t timeout)
{
   13dd4:	b570      	push	{r4, r5, r6, lr}
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
   13dd6:	4a2f      	ldr	r2, [pc, #188]	; (13e94 <k_mutex_lock+0xc0>)
   13dd8:	000d      	movs	r5, r1
   13dda:	6891      	ldr	r1, [r2, #8]
   13ddc:	0004      	movs	r4, r0
   13dde:	7acb      	ldrb	r3, [r1, #11]
   13de0:	3b01      	subs	r3, #1
   13de2:	72cb      	strb	r3, [r1, #11]
	int new_prio, key;

	_sched_lock();

	if (likely(mutex->lock_count == 0 || mutex->owner == _current)) {
   13de4:	68c3      	ldr	r3, [r0, #12]
   13de6:	0010      	movs	r0, r2
   13de8:	2b00      	cmp	r3, #0
   13dea:	d005      	beq.n	13df8 <k_mutex_lock+0x24>
   13dec:	68a1      	ldr	r1, [r4, #8]
   13dee:	6892      	ldr	r2, [r2, #8]
   13df0:	4291      	cmp	r1, r2
   13df2:	d10d      	bne.n	13e10 <k_mutex_lock+0x3c>

		RECORD_STATE_CHANGE();

		mutex->owner_orig_prio = mutex->lock_count == 0 ?
					_current->base.prio :
   13df4:	6922      	ldr	r2, [r4, #16]
   13df6:	e002      	b.n	13dfe <k_mutex_lock+0x2a>
   13df8:	6892      	ldr	r2, [r2, #8]
   13dfa:	7a92      	ldrb	r2, [r2, #10]
   13dfc:	b252      	sxtb	r2, r2
					mutex->owner_orig_prio;

		mutex->lock_count++;
   13dfe:	3301      	adds	r3, #1
   13e00:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   13e02:	6883      	ldr	r3, [r0, #8]

	if (likely(mutex->lock_count == 0 || mutex->owner == _current)) {

		RECORD_STATE_CHANGE();

		mutex->owner_orig_prio = mutex->lock_count == 0 ?
   13e04:	6122      	str	r2, [r4, #16]
					_current->base.prio :
					mutex->owner_orig_prio;

		mutex->lock_count++;
		mutex->owner = _current;
   13e06:	60a3      	str	r3, [r4, #8]

		K_DEBUG("%p took mutex %p, count: %d, orig prio: %d\n",
			_current, mutex, mutex->lock_count,
			mutex->owner_orig_prio);

		k_sched_unlock();
   13e08:	f000 fc64 	bl	146d4 <k_sched_unlock>

		return 0;
   13e0c:	2000      	movs	r0, #0
   13e0e:	e040      	b.n	13e92 <k_mutex_lock+0xbe>
	}

	RECORD_CONFLICT();

	if (unlikely(timeout == K_NO_WAIT)) {
   13e10:	2d00      	cmp	r5, #0
   13e12:	d103      	bne.n	13e1c <k_mutex_lock+0x48>
		k_sched_unlock();
   13e14:	f000 fc5e 	bl	146d4 <k_sched_unlock>
		return -EBUSY;
   13e18:	2010      	movs	r0, #16
   13e1a:	e039      	b.n	13e90 <k_mutex_lock+0xbc>
	if (_is_prio_higher(_current->prio, mutex->owner->prio)) {
		new_prio = _current->prio;
	}
	new_prio = _get_new_prio_with_ceiling(new_prio);
#endif
	new_prio = new_prio_for_inheritance(_current->base.prio,
   13e1c:	230a      	movs	r3, #10
   13e1e:	56cb      	ldrsb	r3, [r1, r3]
   13e20:	210a      	movs	r1, #10
   13e22:	5651      	ldrsb	r1, [r2, r1]
   13e24:	4299      	cmp	r1, r3
   13e26:	dd00      	ble.n	13e2a <k_mutex_lock+0x56>
   13e28:	0019      	movs	r1, r3
   13e2a:	43cb      	mvns	r3, r1
   13e2c:	17db      	asrs	r3, r3, #31
   13e2e:	4019      	ands	r1, r3
   13e30:	f3ef 8610 	mrs	r6, PRIMASK
   13e34:	b672      	cpsid	i

	key = irq_lock();

	K_DEBUG("adjusting prio up on mutex %p\n", mutex);

	if (_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   13e36:	230a      	movs	r3, #10
   13e38:	68a0      	ldr	r0, [r4, #8]
   13e3a:	56c3      	ldrsb	r3, [r0, r3]
   13e3c:	428b      	cmp	r3, r1
   13e3e:	dd01      	ble.n	13e44 <k_mutex_lock+0x70>
		adjust_owner_prio(mutex, new_prio);
   13e40:	f7ff ffb2 	bl	13da8 <adjust_owner_prio.isra.6>
	}

	_pend_current_thread(&mutex->wait_q, timeout);
   13e44:	0020      	movs	r0, r4
   13e46:	0029      	movs	r1, r5
   13e48:	f000 fc08 	bl	1465c <_pend_current_thread>

#ifdef CONFIG_STACK_SENTINEL
	_check_stack_sentinel();
#endif
#ifdef CONFIG_TIMESLICING
	_update_time_slice_before_swap();
   13e4c:	f000 fce4 	bl	14818 <_update_time_slice_before_swap>
#endif

	return __swap(key);
   13e50:	0030      	movs	r0, r6
   13e52:	f7ff fcc3 	bl	137dc <__swap>
	K_DEBUG("on mutex %p got_mutex value: %d\n", mutex, got_mutex);

	K_DEBUG("%p got mutex %p (y/n): %c\n", _current, mutex,
		got_mutex ? 'y' : 'n');

	if (got_mutex == 0) {
   13e56:	2800      	cmp	r0, #0
   13e58:	d0d6      	beq.n	13e08 <k_mutex_lock+0x34>
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   13e5a:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13e5c:	42a3      	cmp	r3, r4
   13e5e:	d100      	bne.n	13e62 <k_mutex_lock+0x8e>
   13e60:	2300      	movs	r3, #0
	K_DEBUG("%p timeout on mutex %p\n", _current, mutex);

	struct k_thread *waiter =
		(struct k_thread *)sys_dlist_peek_head(&mutex->wait_q);

	new_prio = mutex->owner_orig_prio;
   13e62:	6921      	ldr	r1, [r4, #16]
	new_prio = waiter ? new_prio_for_inheritance(waiter->base.prio,
						     new_prio) : new_prio;
   13e64:	2b00      	cmp	r3, #0
   13e66:	d007      	beq.n	13e78 <k_mutex_lock+0xa4>

	struct k_thread *waiter =
		(struct k_thread *)sys_dlist_peek_head(&mutex->wait_q);

	new_prio = mutex->owner_orig_prio;
	new_prio = waiter ? new_prio_for_inheritance(waiter->base.prio,
   13e68:	7a9b      	ldrb	r3, [r3, #10]
   13e6a:	b25b      	sxtb	r3, r3
   13e6c:	4299      	cmp	r1, r3
   13e6e:	dd00      	ble.n	13e72 <k_mutex_lock+0x9e>
   13e70:	0019      	movs	r1, r3
   13e72:	43cb      	mvns	r3, r1
   13e74:	17db      	asrs	r3, r3, #31
   13e76:	4019      	ands	r1, r3
   13e78:	f3ef 8510 	mrs	r5, PRIMASK
   13e7c:	b672      	cpsid	i
						     new_prio) : new_prio;

	K_DEBUG("adjusting prio down on mutex %p\n", mutex);

	key = irq_lock();
	adjust_owner_prio(mutex, new_prio);
   13e7e:	68a0      	ldr	r0, [r4, #8]
   13e80:	f7ff ff92 	bl	13da8 <adjust_owner_prio.isra.6>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   13e84:	2d00      	cmp	r5, #0
   13e86:	d100      	bne.n	13e8a <k_mutex_lock+0xb6>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   13e88:	b662      	cpsie	i
	irq_unlock(key);

	k_sched_unlock();
   13e8a:	f000 fc23 	bl	146d4 <k_sched_unlock>

	return -EAGAIN;
   13e8e:	200b      	movs	r0, #11
   13e90:	4240      	negs	r0, r0
}
   13e92:	bd70      	pop	{r4, r5, r6, pc}
   13e94:	20002114 	.word	0x20002114

00013e98 <k_mutex_unlock>:

void k_mutex_unlock(struct k_mutex *mutex)
{
   13e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13e9a:	4e34      	ldr	r6, [pc, #208]	; (13f6c <k_mutex_unlock+0xd4>)
   13e9c:	0005      	movs	r5, r0
   13e9e:	68b2      	ldr	r2, [r6, #8]
   13ea0:	7ad3      	ldrb	r3, [r2, #11]
   13ea2:	3b01      	subs	r3, #1
   13ea4:	72d3      	strb	r3, [r2, #11]

	_sched_lock();

	RECORD_STATE_CHANGE();

	mutex->lock_count--;
   13ea6:	68c3      	ldr	r3, [r0, #12]
   13ea8:	3b01      	subs	r3, #1
   13eaa:	60c3      	str	r3, [r0, #12]

	K_DEBUG("mutex %p lock_count: %d\n", mutex, mutex->lock_count);

	if (mutex->lock_count != 0) {
   13eac:	2b00      	cmp	r3, #0
   13eae:	d002      	beq.n	13eb6 <k_mutex_unlock+0x1e>
		k_sched_unlock();
   13eb0:	f000 fc10 	bl	146d4 <k_sched_unlock>
		irq_unlock(key);
		mutex->owner = NULL;
	}

	k_sched_unlock();
}
   13eb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
   13eb6:	f3ef 8710 	mrs	r7, PRIMASK
   13eba:	b672      	cpsid	i
		return;
	}

	key = irq_lock();

	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   13ebc:	6901      	ldr	r1, [r0, #16]
   13ebe:	6880      	ldr	r0, [r0, #8]
   13ec0:	f7ff ff72 	bl	13da8 <adjust_owner_prio.isra.6>
_find_first_thread_to_unpend(_wait_q_t *wait_q, struct k_thread *from)
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	extern volatile int _handling_timeouts;

	if (_handling_timeouts) {
   13ec4:	4b2a      	ldr	r3, [pc, #168]	; (13f70 <k_mutex_unlock+0xd8>)
   13ec6:	682c      	ldr	r4, [r5, #0]
   13ec8:	681b      	ldr	r3, [r3, #0]
   13eca:	2b00      	cmp	r3, #0
   13ecc:	d00b      	beq.n	13ee6 <k_mutex_unlock+0x4e>
   13ece:	42a5      	cmp	r5, r4
   13ed0:	d042      	beq.n	13f58 <k_mutex_unlock+0xc0>
		sys_dlist_t *q = (sys_dlist_t *)wait_q;
		sys_dnode_t *cur = from ? &from->base.k_q_node : NULL;

		/* skip threads that have an expired timeout */
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
   13ed2:	2c00      	cmp	r4, #0
   13ed4:	d040      	beq.n	13f58 <k_mutex_unlock+0xc0>
			struct k_thread *thread = (struct k_thread *)cur;

			if (_is_thread_timeout_expired(thread)) {
   13ed6:	6a23      	ldr	r3, [r4, #32]
   13ed8:	3302      	adds	r3, #2
   13eda:	d108      	bne.n	13eee <k_mutex_unlock+0x56>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   13edc:	686b      	ldr	r3, [r5, #4]
   13ede:	42a3      	cmp	r3, r4
   13ee0:	d03a      	beq.n	13f58 <k_mutex_unlock+0xc0>
   13ee2:	6824      	ldr	r4, [r4, #0]
   13ee4:	e7f5      	b.n	13ed2 <k_mutex_unlock+0x3a>
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13ee6:	42a5      	cmp	r5, r4
   13ee8:	d036      	beq.n	13f58 <k_mutex_unlock+0xc0>
/* must be called with interrupts locked */
static inline struct k_thread *_unpend_first_thread(_wait_q_t *wait_q)
{
	struct k_thread *thread = _find_first_thread_to_unpend(wait_q, NULL);

	if (thread) {
   13eea:	2c00      	cmp	r4, #0
   13eec:	d034      	beq.n	13f58 <k_mutex_unlock+0xc0>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   13eee:	6863      	ldr	r3, [r4, #4]
   13ef0:	6822      	ldr	r2, [r4, #0]
   13ef2:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   13ef4:	6822      	ldr	r2, [r4, #0]
   13ef6:	6053      	str	r3, [r2, #4]
}

/* mark a thread as not pending in its TCS */
static inline void _mark_thread_as_not_pending(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PENDING;
   13ef8:	2202      	movs	r2, #2
   13efa:	7a63      	ldrb	r3, [r4, #9]
   13efc:	4393      	bics	r3, r2
   13efe:	7263      	strb	r3, [r4, #9]
}

/* returns _INACTIVE if the timer is not active */
static inline int _abort_timeout(struct _timeout *timeout)
{
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   13f00:	6a23      	ldr	r3, [r4, #32]
   13f02:	1c5a      	adds	r2, r3, #1
   13f04:	d010      	beq.n	13f28 <k_mutex_unlock+0x90>
		return _INACTIVE;
	}

	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   13f06:	0022      	movs	r2, r4
   13f08:	6931      	ldr	r1, [r6, #16]
   13f0a:	3210      	adds	r2, #16
   13f0c:	4291      	cmp	r1, r2
   13f0e:	d003      	beq.n	13f18 <k_mutex_unlock+0x80>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   13f10:	6922      	ldr	r2, [r4, #16]
		sys_dnode_t *next_node =
			sys_dlist_peek_next(&_timeout_q, &timeout->node);
		struct _timeout *next = (struct _timeout *)next_node;

		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   13f12:	6911      	ldr	r1, [r2, #16]
   13f14:	18cb      	adds	r3, r1, r3
   13f16:	6113      	str	r3, [r2, #16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   13f18:	6963      	ldr	r3, [r4, #20]
   13f1a:	6922      	ldr	r2, [r4, #16]
   13f1c:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   13f1e:	6922      	ldr	r2, [r4, #16]
   13f20:	6053      	str	r3, [r2, #4]
	}
	sys_dlist_remove(&timeout->node);
	timeout->delta_ticks_from_prev = _INACTIVE;
   13f22:	2301      	movs	r3, #1
   13f24:	425b      	negs	r3, r3
   13f26:	6223      	str	r3, [r4, #32]
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   13f28:	7a63      	ldrb	r3, [r4, #9]
   13f2a:	2204      	movs	r2, #4
   13f2c:	0019      	movs	r1, r3
   13f2e:	4391      	bics	r1, r2
}

/* check if a thread is ready */
static inline int _is_thread_ready(struct k_thread *thread)
{
	return !(_is_thread_prevented_from_running(thread) ||
   13f30:	221b      	movs	r2, #27
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   13f32:	7261      	strb	r1, [r4, #9]
}

/* check if a thread is ready */
static inline int _is_thread_ready(struct k_thread *thread)
{
	return !(_is_thread_prevented_from_running(thread) ||
   13f34:	4213      	tst	r3, r2
   13f36:	d102      	bne.n	13f3e <k_mutex_unlock+0xa6>
   13f38:	6a23      	ldr	r3, [r4, #32]
   13f3a:	3301      	adds	r3, #1
   13f3c:	d012      	beq.n	13f64 <k_mutex_unlock+0xcc>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   13f3e:	2f00      	cmp	r7, #0
   13f40:	d100      	bne.n	13f44 <k_mutex_unlock+0xac>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   13f42:	b662      	cpsie	i
}

static ALWAYS_INLINE void
_set_thread_return_value(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   13f44:	2300      	movs	r3, #0
   13f46:	65e3      	str	r3, [r4, #92]	; 0x5c
		 * new owner is already of higher or equal prio than first
		 * waiter since the wait queue is priority-based: no need to
		 * ajust its priority
		 */
		mutex->owner = new_owner;
		mutex->lock_count++;
   13f48:	68eb      	ldr	r3, [r5, #12]
		/*
		 * new owner is already of higher or equal prio than first
		 * waiter since the wait queue is priority-based: no need to
		 * ajust its priority
		 */
		mutex->owner = new_owner;
   13f4a:	60ac      	str	r4, [r5, #8]
		mutex->lock_count++;
   13f4c:	3301      	adds	r3, #1
   13f4e:	60eb      	str	r3, [r5, #12]
		mutex->owner_orig_prio = new_owner->base.prio;
   13f50:	230a      	movs	r3, #10
   13f52:	56e3      	ldrsb	r3, [r4, r3]
   13f54:	612b      	str	r3, [r5, #16]
   13f56:	e7ab      	b.n	13eb0 <k_mutex_unlock+0x18>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   13f58:	2f00      	cmp	r7, #0
   13f5a:	d100      	bne.n	13f5e <k_mutex_unlock+0xc6>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   13f5c:	b662      	cpsie	i
	} else {
		irq_unlock(key);
		mutex->owner = NULL;
   13f5e:	2300      	movs	r3, #0
   13f60:	60ab      	str	r3, [r5, #8]
   13f62:	e7a5      	b.n	13eb0 <k_mutex_unlock+0x18>

	/* needed to handle the start-with-delay case */
	_mark_thread_as_started(thread);

	if (_is_thread_ready(thread)) {
		_add_thread_to_ready_q(thread);
   13f64:	0020      	movs	r0, r4
   13f66:	f000 faf1 	bl	1454c <_add_thread_to_ready_q>
   13f6a:	e7e8      	b.n	13f3e <k_mutex_unlock+0xa6>
   13f6c:	20002114 	.word	0x20002114
   13f70:	20002348 	.word	0x20002348

00013f74 <clear_event_registrations>:

/* must be called with interrupts locked */
static inline void clear_event_registrations(struct k_poll_event *events,
					      int last_registered,
					      unsigned int key)
{
   13f74:	230c      	movs	r3, #12
   13f76:	b510      	push	{r4, lr}
}

/* must be called with interrupts locked */
static inline void clear_event_registration(struct k_poll_event *event)
{
	event->poller = NULL;
   13f78:	2400      	movs	r4, #0
   13f7a:	434b      	muls	r3, r1
   13f7c:	18c0      	adds	r0, r0, r3
/* must be called with interrupts locked */
static inline void clear_event_registrations(struct k_poll_event *events,
					      int last_registered,
					      unsigned int key)
{
	for (; last_registered >= 0; last_registered--) {
   13f7e:	2900      	cmp	r1, #0
   13f80:	db17      	blt.n	13fb2 <clear_event_registrations+0x3e>
/* must be called with interrupts locked */
static inline void clear_event_registration(struct k_poll_event *event)
{
	event->poller = NULL;

	switch (event->type) {
   13f82:	7943      	ldrb	r3, [r0, #5]
}

/* must be called with interrupts locked */
static inline void clear_event_registration(struct k_poll_event *event)
{
	event->poller = NULL;
   13f84:	6004      	str	r4, [r0, #0]

	switch (event->type) {
   13f86:	071b      	lsls	r3, r3, #28
   13f88:	0f1b      	lsrs	r3, r3, #28
   13f8a:	2b02      	cmp	r3, #2
   13f8c:	d006      	beq.n	13f9c <clear_event_registrations+0x28>
   13f8e:	2b04      	cmp	r3, #4
   13f90:	d004      	beq.n	13f9c <clear_event_registrations+0x28>
   13f92:	2b01      	cmp	r3, #1
   13f94:	d104      	bne.n	13fa0 <clear_event_registrations+0x2c>
		__ASSERT(event->queue, "invalid queue\n");
		event->queue->poll_event = NULL;
		break;
	case K_POLL_TYPE_SIGNAL:
		__ASSERT(event->signal, "invalid poll signal\n");
		event->signal->poll_event = NULL;
   13f96:	6883      	ldr	r3, [r0, #8]
   13f98:	601c      	str	r4, [r3, #0]
   13f9a:	e001      	b.n	13fa0 <clear_event_registrations+0x2c>
		__ASSERT(event->sem, "invalid semaphore\n");
		event->sem->poll_event = NULL;
		break;
	case K_POLL_TYPE_DATA_AVAILABLE:
		__ASSERT(event->queue, "invalid queue\n");
		event->queue->poll_event = NULL;
   13f9c:	6883      	ldr	r3, [r0, #8]
   13f9e:	611c      	str	r4, [r3, #16]
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   13fa0:	2a00      	cmp	r2, #0
   13fa2:	d100      	bne.n	13fa6 <clear_event_registrations+0x32>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   13fa4:	b662      	cpsie	i
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
   13fa6:	f3ef 8210 	mrs	r2, PRIMASK
   13faa:	b672      	cpsid	i
/* must be called with interrupts locked */
static inline void clear_event_registrations(struct k_poll_event *events,
					      int last_registered,
					      unsigned int key)
{
	for (; last_registered >= 0; last_registered--) {
   13fac:	3901      	subs	r1, #1
   13fae:	380c      	subs	r0, #12
   13fb0:	e7e5      	b.n	13f7e <clear_event_registrations+0xa>
		clear_event_registration(&events[last_registered]);
		irq_unlock(key);
		key = irq_lock();
	}
}
   13fb2:	bd10      	pop	{r4, pc}

00013fb4 <_signal_poll_event>:

/* must be called with interrupts locked */
static int _signal_poll_event(struct k_poll_event *event, u32_t state,
			      int *must_reschedule)
{
	*must_reschedule = 0;
   13fb4:	2300      	movs	r3, #0
}

/* must be called with interrupts locked */
static int _signal_poll_event(struct k_poll_event *event, u32_t state,
			      int *must_reschedule)
{
   13fb6:	b570      	push	{r4, r5, r6, lr}
	*must_reschedule = 0;
   13fb8:	6013      	str	r3, [r2, #0]

	if (!event->poller) {
   13fba:	6803      	ldr	r3, [r0, #0]
}

/* must be called with interrupts locked */
static int _signal_poll_event(struct k_poll_event *event, u32_t state,
			      int *must_reschedule)
{
   13fbc:	0004      	movs	r4, r0
   13fbe:	000d      	movs	r5, r1
   13fc0:	0016      	movs	r6, r2
	*must_reschedule = 0;

	if (!event->poller) {
   13fc2:	2b00      	cmp	r3, #0
   13fc4:	d043      	beq.n	1404e <_signal_poll_event+0x9a>
		goto ready_event;
	}

	struct k_thread *thread = event->poller->thread;
   13fc6:	6818      	ldr	r0, [r3, #0]
}

static inline void _reset_thread_states(struct k_thread *thread,
					u32_t states)
{
	thread->base.thread_state &= ~states;
   13fc8:	2220      	movs	r2, #32
   13fca:	7a43      	ldrb	r3, [r0, #9]
   13fcc:	0019      	movs	r1, r3
   13fce:	4391      	bics	r1, r2

	__ASSERT(event->poller->thread, "poller should have a thread\n");

	clear_polling_state(thread);

	if (!_is_thread_pending(thread)) {
   13fd0:	2202      	movs	r2, #2
   13fd2:	7241      	strb	r1, [r0, #9]
   13fd4:	4213      	tst	r3, r2
   13fd6:	d03a      	beq.n	1404e <_signal_poll_event+0x9a>
		goto ready_event;
	}

	if (_is_thread_timeout_expired(thread)) {
   13fd8:	6a03      	ldr	r3, [r0, #32]
   13fda:	3302      	adds	r3, #2
   13fdc:	d045      	beq.n	1406a <_signal_poll_event+0xb6>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   13fde:	6843      	ldr	r3, [r0, #4]
   13fe0:	6801      	ldr	r1, [r0, #0]
   13fe2:	6019      	str	r1, [r3, #0]
	node->next->prev = node->prev;
   13fe4:	6801      	ldr	r1, [r0, #0]
   13fe6:	604b      	str	r3, [r1, #4]
}

/* mark a thread as not pending in its TCS */
static inline void _mark_thread_as_not_pending(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PENDING;
   13fe8:	7a43      	ldrb	r3, [r0, #9]
   13fea:	4393      	bics	r3, r2
   13fec:	7243      	strb	r3, [r0, #9]
}

/* returns _INACTIVE if the timer is not active */
static inline int _abort_timeout(struct _timeout *timeout)
{
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   13fee:	6a03      	ldr	r3, [r0, #32]
   13ff0:	1c5a      	adds	r2, r3, #1
   13ff2:	d011      	beq.n	14018 <_signal_poll_event+0x64>
   13ff4:	4a20      	ldr	r2, [pc, #128]	; (14078 <_signal_poll_event+0xc4>)
		return _INACTIVE;
	}

	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   13ff6:	6911      	ldr	r1, [r2, #16]
   13ff8:	0002      	movs	r2, r0
   13ffa:	3210      	adds	r2, #16
   13ffc:	4291      	cmp	r1, r2
   13ffe:	d003      	beq.n	14008 <_signal_poll_event+0x54>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   14000:	6902      	ldr	r2, [r0, #16]
		sys_dnode_t *next_node =
			sys_dlist_peek_next(&_timeout_q, &timeout->node);
		struct _timeout *next = (struct _timeout *)next_node;

		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   14002:	6911      	ldr	r1, [r2, #16]
   14004:	18cb      	adds	r3, r1, r3
   14006:	6113      	str	r3, [r2, #16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   14008:	6943      	ldr	r3, [r0, #20]
   1400a:	6902      	ldr	r2, [r0, #16]
   1400c:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   1400e:	6902      	ldr	r2, [r0, #16]
   14010:	6053      	str	r3, [r2, #4]
	}
	sys_dlist_remove(&timeout->node);
	timeout->delta_ticks_from_prev = _INACTIVE;
   14012:	2301      	movs	r3, #1
   14014:	425b      	negs	r3, r3
   14016:	6203      	str	r3, [r0, #32]
   14018:	2300      	movs	r3, #0
   1401a:	65c3      	str	r3, [r0, #92]	; 0x5c
}

/* check if a thread is ready */
static inline int _is_thread_ready(struct k_thread *thread)
{
	return !(_is_thread_prevented_from_running(thread) ||
   1401c:	7a43      	ldrb	r3, [r0, #9]
   1401e:	06db      	lsls	r3, r3, #27
   14020:	d115      	bne.n	1404e <_signal_poll_event+0x9a>
   14022:	6a03      	ldr	r3, [r0, #32]
   14024:	3301      	adds	r3, #1
   14026:	d112      	bne.n	1404e <_signal_poll_event+0x9a>

	if (!_is_thread_ready(thread)) {
		goto ready_event;
	}

	_add_thread_to_ready_q(thread);
   14028:	f000 fa90 	bl	1454c <_add_thread_to_ready_q>
 */
static ALWAYS_INLINE u32_t _IpsrGet(void)
{
	u32_t vector;

	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(vector));
   1402c:	f3ef 8305 	mrs	r3, IPSR
#endif
#if defined(CONFIG_ARMV6_M)
		/* On ARMv6-M there is no nested execution bit, so we check
		 * exception 3, hard fault, to a detect a nested exception.
		 */
		|| (vector == 3)
   14030:	2b0d      	cmp	r3, #13
   14032:	d81d      	bhi.n	14070 <_signal_poll_event+0xbc>
   14034:	2b03      	cmp	r3, #3
   14036:	d01b      	beq.n	14070 <_signal_poll_event+0xbc>
 * Checks if current thread must be context-switched out. The caller must
 * already know that the execution context is a thread.
 */
static inline int _must_switch_threads(void)
{
	return _is_preempt(_current) && __must_switch_threads();
   14038:	4b0f      	ldr	r3, [pc, #60]	; (14078 <_signal_poll_event+0xc4>)
   1403a:	689b      	ldr	r3, [r3, #8]
   1403c:	895b      	ldrh	r3, [r3, #10]
   1403e:	2b7f      	cmp	r3, #127	; 0x7f
   14040:	d816      	bhi.n	14070 <_signal_poll_event+0xbc>
   14042:	f000 fb1b 	bl	1467c <__must_switch_threads>
	*must_reschedule = !_is_in_isr() && _must_switch_threads();
   14046:	2301      	movs	r3, #1
   14048:	2800      	cmp	r0, #0
   1404a:	d011      	beq.n	14070 <_signal_poll_event+0xbc>
   1404c:	6033      	str	r3, [r6, #0]
}

static inline void set_event_ready(struct k_poll_event *event, u32_t state)
{
	event->poller = NULL;
	event->state |= state;
   1404e:	221f      	movs	r2, #31
	}
}

static inline void set_event_ready(struct k_poll_event *event, u32_t state)
{
	event->poller = NULL;
   14050:	2000      	movs	r0, #0
	event->state |= state;
   14052:	6866      	ldr	r6, [r4, #4]
	}
}

static inline void set_event_ready(struct k_poll_event *event, u32_t state)
{
	event->poller = NULL;
   14054:	6020      	str	r0, [r4, #0]
	event->state |= state;
   14056:	03f1      	lsls	r1, r6, #15
   14058:	0ec9      	lsrs	r1, r1, #27
   1405a:	4329      	orrs	r1, r5
   1405c:	4011      	ands	r1, r2
   1405e:	030b      	lsls	r3, r1, #12
   14060:	4906      	ldr	r1, [pc, #24]	; (1407c <_signal_poll_event+0xc8>)
   14062:	4031      	ands	r1, r6
   14064:	4319      	orrs	r1, r3
   14066:	6061      	str	r1, [r4, #4]
	_add_thread_to_ready_q(thread);
	*must_reschedule = !_is_in_isr() && _must_switch_threads();

ready_event:
	set_event_ready(event, state);
	return 0;
   14068:	e004      	b.n	14074 <_signal_poll_event+0xc0>
	if (!_is_thread_pending(thread)) {
		goto ready_event;
	}

	if (_is_thread_timeout_expired(thread)) {
		return -EAGAIN;
   1406a:	200b      	movs	r0, #11
   1406c:	4240      	negs	r0, r0
   1406e:	e001      	b.n	14074 <_signal_poll_event+0xc0>
	if (!_is_thread_ready(thread)) {
		goto ready_event;
	}

	_add_thread_to_ready_q(thread);
	*must_reschedule = !_is_in_isr() && _must_switch_threads();
   14070:	2300      	movs	r3, #0
   14072:	e7eb      	b.n	1404c <_signal_poll_event+0x98>

ready_event:
	set_event_ready(event, state);
	return 0;
}
   14074:	bd70      	pop	{r4, r5, r6, pc}
   14076:	46c0      	nop			; (mov r8, r8)
   14078:	20002114 	.word	0x20002114
   1407c:	fffe0fff 	.word	0xfffe0fff

00014080 <k_poll_event_init>:
#include <misc/dlist.h>
#include <misc/__assert.h>

void k_poll_event_init(struct k_poll_event *event, u32_t type,
		       int mode, void *obj)
{
   14080:	b570      	push	{r4, r5, r6, lr}
	__ASSERT(mode == K_POLL_MODE_NOTIFY_ONLY,
		 "only NOTIFY_ONLY mode is supported\n");
	__ASSERT(type < (1 << _POLL_NUM_TYPES), "invalid type\n");
	__ASSERT(obj, "must provide an object\n");

	event->poller = NULL;
   14082:	2400      	movs	r4, #0
	/* event->tag is left uninitialized: the user will set it if needed */
	event->type = type;
   14084:	260f      	movs	r6, #15
	__ASSERT(mode == K_POLL_MODE_NOTIFY_ONLY,
		 "only NOTIFY_ONLY mode is supported\n");
	__ASSERT(type < (1 << _POLL_NUM_TYPES), "invalid type\n");
	__ASSERT(obj, "must provide an object\n");

	event->poller = NULL;
   14086:	6004      	str	r4, [r0, #0]
	/* event->tag is left uninitialized: the user will set it if needed */
	event->type = type;
   14088:	7944      	ldrb	r4, [r0, #5]
   1408a:	4031      	ands	r1, r6
   1408c:	43b4      	bics	r4, r6
   1408e:	430c      	orrs	r4, r1
   14090:	7144      	strb	r4, [r0, #5]
	event->state = K_POLL_STATE_NOT_READY;
   14092:	6841      	ldr	r1, [r0, #4]
   14094:	4c08      	ldr	r4, [pc, #32]	; (140b8 <k_poll_event_init+0x38>)
	event->mode = mode;
	event->unused = 0;
	event->obj = obj;
   14096:	6083      	str	r3, [r0, #8]
	__ASSERT(obj, "must provide an object\n");

	event->poller = NULL;
	/* event->tag is left uninitialized: the user will set it if needed */
	event->type = type;
	event->state = K_POLL_STATE_NOT_READY;
   14098:	400c      	ands	r4, r1
	event->mode = mode;
   1409a:	2101      	movs	r1, #1
   1409c:	400a      	ands	r2, r1
   1409e:	0051      	lsls	r1, r2, #1
   140a0:	22fc      	movs	r2, #252	; 0xfc
	__ASSERT(obj, "must provide an object\n");

	event->poller = NULL;
	/* event->tag is left uninitialized: the user will set it if needed */
	event->type = type;
	event->state = K_POLL_STATE_NOT_READY;
   140a2:	0c25      	lsrs	r5, r4, #16
	event->mode = mode;
   140a4:	402a      	ands	r2, r5
   140a6:	430a      	orrs	r2, r1
	__ASSERT(obj, "must provide an object\n");

	event->poller = NULL;
	/* event->tag is left uninitialized: the user will set it if needed */
	event->type = type;
	event->state = K_POLL_STATE_NOT_READY;
   140a8:	6044      	str	r4, [r0, #4]
	event->mode = mode;
   140aa:	7182      	strb	r2, [r0, #6]
	event->unused = 0;
   140ac:	2203      	movs	r2, #3
   140ae:	88c1      	ldrh	r1, [r0, #6]
   140b0:	400a      	ands	r2, r1
   140b2:	80c2      	strh	r2, [r0, #6]
	event->obj = obj;
}
   140b4:	bd70      	pop	{r4, r5, r6, pc}
   140b6:	46c0      	nop			; (mov r8, r8)
   140b8:	fffe0fff 	.word	0xfffe0fff

000140bc <k_poll>:
	event->poller = NULL;
	event->state |= state;
}

int k_poll(struct k_poll_event *events, int num_events, s32_t timeout)
{
   140bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   140be:	b089      	sub	sp, #36	; 0x24
   140c0:	0006      	movs	r6, r0
   140c2:	9102      	str	r1, [sp, #8]
   140c4:	9201      	str	r2, [sp, #4]
   140c6:	f3ef 8410 	mrs	r4, PRIMASK
   140ca:	b672      	cpsid	i
#endif
}

static inline void _set_thread_states(struct k_thread *thread, u32_t states)
{
	thread->base.thread_state |= states;
   140cc:	2520      	movs	r5, #32

	int last_registered = -1, in_use = 0, rc;
	unsigned int key;

	key = irq_lock();
	set_polling_state(_current);
   140ce:	4b56      	ldr	r3, [pc, #344]	; (14228 <k_poll+0x16c>)
   140d0:	6898      	ldr	r0, [r3, #8]
   140d2:	7a42      	ldrb	r2, [r0, #9]
   140d4:	432a      	orrs	r2, r5
   140d6:	7242      	strb	r2, [r0, #9]
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   140d8:	2c00      	cmp	r4, #0
   140da:	d100      	bne.n	140de <k_poll+0x22>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   140dc:	b662      	cpsie	i
	 * will need one per poll event associated with an object.
	 */
	struct _poller poller = { .thread = _current };

	/* find events whose condition is already fulfilled */
	for (int ii = 0; ii < num_events; ii++) {
   140de:	2200      	movs	r2, #0
	/*
	 * We can get by with one poller structure for all events for now:
	 * if/when we allow multiple threads to poll on the same object, we
	 * will need one per poll event associated with an object.
	 */
	struct _poller poller = { .thread = _current };
   140e0:	689b      	ldr	r3, [r3, #8]
{
	__ASSERT(!_is_in_isr(), "");
	__ASSERT(events, "NULL events\n");
	__ASSERT(num_events > 0, "zero events\n");

	int last_registered = -1, in_use = 0, rc;
   140e2:	2501      	movs	r5, #1
	/*
	 * We can get by with one poller structure for all events for now:
	 * if/when we allow multiple threads to poll on the same object, we
	 * will need one per poll event associated with an object.
	 */
	struct _poller poller = { .thread = _current };
   140e4:	9305      	str	r3, [sp, #20]
{
	__ASSERT(!_is_in_isr(), "");
	__ASSERT(events, "NULL events\n");
	__ASSERT(num_events > 0, "zero events\n");

	int last_registered = -1, in_use = 0, rc;
   140e6:	0014      	movs	r4, r2
   140e8:	0033      	movs	r3, r6
	 * will need one per poll event associated with an object.
	 */
	struct _poller poller = { .thread = _current };

	/* find events whose condition is already fulfilled */
	for (int ii = 0; ii < num_events; ii++) {
   140ea:	9200      	str	r2, [sp, #0]
{
	__ASSERT(!_is_in_isr(), "");
	__ASSERT(events, "NULL events\n");
	__ASSERT(num_events > 0, "zero events\n");

	int last_registered = -1, in_use = 0, rc;
   140ec:	426d      	negs	r5, r5
	 * will need one per poll event associated with an object.
	 */
	struct _poller poller = { .thread = _current };

	/* find events whose condition is already fulfilled */
	for (int ii = 0; ii < num_events; ii++) {
   140ee:	9a02      	ldr	r2, [sp, #8]
   140f0:	9900      	ldr	r1, [sp, #0]
   140f2:	4291      	cmp	r1, r2
   140f4:	da1d      	bge.n	14132 <k_poll+0x76>
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
   140f6:	f3ef 8010 	mrs	r0, PRIMASK
   140fa:	b672      	cpsid	i
   140fc:	9003      	str	r0, [sp, #12]
}

/* must be called with interrupts locked */
static inline int is_condition_met(struct k_poll_event *event, u32_t *state)
{
	switch (event->type) {
   140fe:	7958      	ldrb	r0, [r3, #5]
   14100:	0700      	lsls	r0, r0, #28
   14102:	0f00      	lsrs	r0, r0, #28
   14104:	2802      	cmp	r0, #2
   14106:	d007      	beq.n	14118 <k_poll+0x5c>
   14108:	2804      	cmp	r0, #4
   1410a:	d00a      	beq.n	14122 <k_poll+0x66>
   1410c:	2801      	cmp	r0, #1
   1410e:	d13e      	bne.n	1418e <k_poll+0xd2>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
			return 1;
		}
		break;
	case K_POLL_TYPE_SIGNAL:
		if (event->signal->signaled) {
   14110:	689f      	ldr	r7, [r3, #8]
   14112:	687a      	ldr	r2, [r7, #4]
			*state = K_POLL_STATE_SIGNALED;
   14114:	2702      	movs	r7, #2
   14116:	e009      	b.n	1412c <k_poll+0x70>
   14118:	689f      	ldr	r7, [r3, #8]
/* must be called with interrupts locked */
static inline int is_condition_met(struct k_poll_event *event, u32_t *state)
{
	switch (event->type) {
	case K_POLL_TYPE_SEM_AVAILABLE:
		if (k_sem_count_get(event->sem) > 0) {
   1411a:	68bf      	ldr	r7, [r7, #8]
   1411c:	2f00      	cmp	r7, #0
   1411e:	d16a      	bne.n	141f6 <k_poll+0x13a>
   14120:	e035      	b.n	1418e <k_poll+0xd2>
   14122:	689f      	ldr	r7, [r3, #8]
			*state = K_POLL_STATE_SEM_AVAILABLE;
			return 1;
		}
		break;
	case K_POLL_TYPE_DATA_AVAILABLE:
		if (!k_queue_is_empty(event->queue)) {
   14124:	68bf      	ldr	r7, [r7, #8]
   14126:	46bc      	mov	ip, r7
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   14128:	2708      	movs	r7, #8
			*state = K_POLL_STATE_SEM_AVAILABLE;
			return 1;
		}
		break;
	case K_POLL_TYPE_DATA_AVAILABLE:
		if (!k_queue_is_empty(event->queue)) {
   1412a:	4662      	mov	r2, ip
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
			return 1;
		}
		break;
	case K_POLL_TYPE_SIGNAL:
		if (event->signal->signaled) {
   1412c:	2a00      	cmp	r2, #0
   1412e:	d163      	bne.n	141f8 <k_poll+0x13c>
   14130:	e02d      	b.n	1418e <k_poll+0xd2>
   14132:	f3ef 8710 	mrs	r7, PRIMASK
   14136:	b672      	cpsid	i
	 * success or a -EADDRINUSE error. In the case of a -EADDRINUSE error,
	 * the events that were available are still flagged as such, and it is
	 * valid for the caller to consider them available, as if this function
	 * returned success.
	 */
	if (!is_polling()) {
   14138:	2020      	movs	r0, #32
}

/* must be called with interrupts locked */
static inline int is_polling(void)
{
	return _is_thread_polling(_current);
   1413a:	4b3b      	ldr	r3, [pc, #236]	; (14228 <k_poll+0x16c>)
   1413c:	689a      	ldr	r2, [r3, #8]
   1413e:	7a53      	ldrb	r3, [r2, #9]
	 * success or a -EADDRINUSE error. In the case of a -EADDRINUSE error,
	 * the events that were available are still flagged as such, and it is
	 * valid for the caller to consider them available, as if this function
	 * returned success.
	 */
	if (!is_polling()) {
   14140:	4203      	tst	r3, r0
   14142:	d017      	beq.n	14174 <k_poll+0xb8>
}

static inline void _reset_thread_states(struct k_thread *thread,
					u32_t states)
{
	thread->base.thread_state &= ~states;
   14144:	4383      	bics	r3, r0
   14146:	7253      	strb	r3, [r2, #9]
		return in_use;
	}

	clear_polling_state(_current);

	if (timeout == K_NO_WAIT) {
   14148:	9b01      	ldr	r3, [sp, #4]
   1414a:	2b00      	cmp	r3, #0
   1414c:	d103      	bne.n	14156 <k_poll+0x9a>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   1414e:	2f00      	cmp	r7, #0
   14150:	d11a      	bne.n	14188 <k_poll+0xcc>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   14152:	b662      	cpsie	i
   14154:	e018      	b.n	14188 <k_poll+0xcc>
		irq_unlock(key);
		return -EAGAIN;
	}

	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
   14156:	a806      	add	r0, sp, #24

	_pend_current_thread(&wait_q, timeout);
   14158:	9901      	ldr	r1, [sp, #4]
	if (timeout == K_NO_WAIT) {
		irq_unlock(key);
		return -EAGAIN;
	}

	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
   1415a:	9006      	str	r0, [sp, #24]
   1415c:	6040      	str	r0, [r0, #4]

	_pend_current_thread(&wait_q, timeout);
   1415e:	f000 fa7d 	bl	1465c <_pend_current_thread>

#ifdef CONFIG_STACK_SENTINEL
	_check_stack_sentinel();
#endif
#ifdef CONFIG_TIMESLICING
	_update_time_slice_before_swap();
   14162:	f000 fb59 	bl	14818 <_update_time_slice_before_swap>
#endif

	return __swap(key);
   14166:	0038      	movs	r0, r7
   14168:	f7ff fb38 	bl	137dc <__swap>
   1416c:	0004      	movs	r4, r0
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
   1416e:	f3ef 8710 	mrs	r7, PRIMASK
   14172:	b672      	cpsid	i
	 * we've already know the return code (-EAGAIN), and even if they are
	 * added to the list of events that occurred, the user has to check the
	 * return code first, which invalidates the whole list of event states.
	 */
	key = irq_lock();
	clear_event_registrations(events, last_registered, key);
   14174:	0030      	movs	r0, r6
   14176:	003a      	movs	r2, r7
   14178:	0029      	movs	r1, r5
   1417a:	f7ff fefb 	bl	13f74 <clear_event_registrations>
	irq_unlock(key);

	return swap_rc;
   1417e:	0020      	movs	r0, r4
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   14180:	2f00      	cmp	r7, #0
   14182:	d14f      	bne.n	14224 <k_poll+0x168>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   14184:	b662      	cpsie	i
   14186:	e04d      	b.n	14224 <k_poll+0x168>

	clear_polling_state(_current);

	if (timeout == K_NO_WAIT) {
		irq_unlock(key);
		return -EAGAIN;
   14188:	200b      	movs	r0, #11
   1418a:	4240      	negs	r0, r0
   1418c:	e04a      	b.n	14224 <k_poll+0x168>

		key = irq_lock();
		if (is_condition_met(&events[ii], &state)) {
			set_event_ready(&events[ii], state);
			clear_polling_state(_current);
		} else if (timeout != K_NO_WAIT && is_polling() && !in_use) {
   1418e:	9a01      	ldr	r2, [sp, #4]
   14190:	2a00      	cmp	r2, #0
   14192:	d027      	beq.n	141e4 <k_poll+0x128>
   14194:	2120      	movs	r1, #32
}

/* must be called with interrupts locked */
static inline int is_polling(void)
{
	return _is_thread_polling(_current);
   14196:	4f24      	ldr	r7, [pc, #144]	; (14228 <k_poll+0x16c>)
   14198:	68bf      	ldr	r7, [r7, #8]

		key = irq_lock();
		if (is_condition_met(&events[ii], &state)) {
			set_event_ready(&events[ii], state);
			clear_polling_state(_current);
		} else if (timeout != K_NO_WAIT && is_polling() && !in_use) {
   1419a:	7a7a      	ldrb	r2, [r7, #9]
   1419c:	420a      	tst	r2, r1
   1419e:	d021      	beq.n	141e4 <k_poll+0x128>
   141a0:	2c00      	cmp	r4, #0
   141a2:	d11f      	bne.n	141e4 <k_poll+0x128>
}

/* must be called with interrupts locked */
static inline int register_event(struct k_poll_event *event)
{
	switch (event->type) {
   141a4:	2802      	cmp	r0, #2
   141a6:	d004      	beq.n	141b2 <k_poll+0xf6>
   141a8:	2804      	cmp	r0, #4
   141aa:	d002      	beq.n	141b2 <k_poll+0xf6>
   141ac:	2801      	cmp	r0, #1
   141ae:	d135      	bne.n	1421c <k_poll+0x160>
   141b0:	e005      	b.n	141be <k_poll+0x102>
		}
		event->sem->poll_event = event;
		break;
	case K_POLL_TYPE_DATA_AVAILABLE:
		__ASSERT(event->queue, "invalid queue\n");
		if (event->queue->poll_event) {
   141b2:	6898      	ldr	r0, [r3, #8]
   141b4:	6902      	ldr	r2, [r0, #16]
   141b6:	2a00      	cmp	r2, #0
   141b8:	d107      	bne.n	141ca <k_poll+0x10e>
			return -EADDRINUSE;
		}
		event->queue->poll_event = event;
   141ba:	6103      	str	r3, [r0, #16]
   141bc:	e02e      	b.n	1421c <k_poll+0x160>
		break;
	case K_POLL_TYPE_SIGNAL:
		__ASSERT(event->queue, "invalid poll signal\n");
		if (event->signal->poll_event) {
   141be:	6898      	ldr	r0, [r3, #8]
   141c0:	6802      	ldr	r2, [r0, #0]
   141c2:	2a00      	cmp	r2, #0
   141c4:	d101      	bne.n	141ca <k_poll+0x10e>
			return -EADDRINUSE;
		}
		event->signal->poll_event = event;
   141c6:	6003      	str	r3, [r0, #0]
   141c8:	e028      	b.n	1421c <k_poll+0x160>
			} else if (rc == -EADDRINUSE) {
				/* setting in_use also prevents any further
				 * registrations by the current thread
				 */
				in_use = -EADDRINUSE;
				events[ii].state = K_POLL_STATE_EADDRINUSE;
   141ca:	685a      	ldr	r2, [r3, #4]
   141cc:	4817      	ldr	r0, [pc, #92]	; (1422c <k_poll+0x170>)
				++last_registered;
			} else if (rc == -EADDRINUSE) {
				/* setting in_use also prevents any further
				 * registrations by the current thread
				 */
				in_use = -EADDRINUSE;
   141ce:	2430      	movs	r4, #48	; 0x30
				events[ii].state = K_POLL_STATE_EADDRINUSE;
   141d0:	4010      	ands	r0, r2
   141d2:	2280      	movs	r2, #128	; 0x80
   141d4:	0152      	lsls	r2, r2, #5
   141d6:	4310      	orrs	r0, r2
   141d8:	2220      	movs	r2, #32
   141da:	6058      	str	r0, [r3, #4]
   141dc:	7a78      	ldrb	r0, [r7, #9]
				++last_registered;
			} else if (rc == -EADDRINUSE) {
				/* setting in_use also prevents any further
				 * registrations by the current thread
				 */
				in_use = -EADDRINUSE;
   141de:	4264      	negs	r4, r4
   141e0:	4390      	bics	r0, r2
   141e2:	7278      	strb	r0, [r7, #9]
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   141e4:	9a03      	ldr	r2, [sp, #12]
   141e6:	2a00      	cmp	r2, #0
   141e8:	d100      	bne.n	141ec <k_poll+0x130>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   141ea:	b662      	cpsie	i
	 * will need one per poll event associated with an object.
	 */
	struct _poller poller = { .thread = _current };

	/* find events whose condition is already fulfilled */
	for (int ii = 0; ii < num_events; ii++) {
   141ec:	9a00      	ldr	r2, [sp, #0]
   141ee:	330c      	adds	r3, #12
   141f0:	3201      	adds	r2, #1
   141f2:	9200      	str	r2, [sp, #0]
   141f4:	e77b      	b.n	140ee <k_poll+0x32>
static inline int is_condition_met(struct k_poll_event *event, u32_t *state)
{
	switch (event->type) {
	case K_POLL_TYPE_SEM_AVAILABLE:
		if (k_sem_count_get(event->sem) > 0) {
			*state = K_POLL_STATE_SEM_AVAILABLE;
   141f6:	2704      	movs	r7, #4
	}
}

static inline void set_event_ready(struct k_poll_event *event, u32_t state)
{
	event->poller = NULL;
   141f8:	2000      	movs	r0, #0
	event->state |= state;
   141fa:	685a      	ldr	r2, [r3, #4]
	}
}

static inline void set_event_ready(struct k_poll_event *event, u32_t state)
{
	event->poller = NULL;
   141fc:	6018      	str	r0, [r3, #0]
	event->state |= state;
   141fe:	03d0      	lsls	r0, r2, #15
   14200:	0ec0      	lsrs	r0, r0, #27
   14202:	4307      	orrs	r7, r0
   14204:	4809      	ldr	r0, [pc, #36]	; (1422c <k_poll+0x170>)
   14206:	033f      	lsls	r7, r7, #12
   14208:	4010      	ands	r0, r2
   1420a:	2220      	movs	r2, #32
   1420c:	4338      	orrs	r0, r7
   1420e:	6058      	str	r0, [r3, #4]
		u32_t state;

		key = irq_lock();
		if (is_condition_met(&events[ii], &state)) {
			set_event_ready(&events[ii], state);
			clear_polling_state(_current);
   14210:	4805      	ldr	r0, [pc, #20]	; (14228 <k_poll+0x16c>)
   14212:	6887      	ldr	r7, [r0, #8]
   14214:	7a78      	ldrb	r0, [r7, #9]
   14216:	4390      	bics	r0, r2
   14218:	7278      	strb	r0, [r7, #9]
   1421a:	e7e3      	b.n	141e4 <k_poll+0x128>
		} else if (timeout != K_NO_WAIT && is_polling() && !in_use) {
			rc = register_event(&events[ii]);
			if (rc == 0) {
				events[ii].poller = &poller;
   1421c:	a805      	add	r0, sp, #20
   1421e:	6018      	str	r0, [r3, #0]
				++last_registered;
   14220:	3501      	adds	r5, #1
   14222:	e7df      	b.n	141e4 <k_poll+0x128>
	key = irq_lock();
	clear_event_registrations(events, last_registered, key);
	irq_unlock(key);

	return swap_rc;
}
   14224:	b009      	add	sp, #36	; 0x24
   14226:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14228:	20002114 	.word	0x20002114
   1422c:	fffe0fff 	.word	0xfffe0fff

00014230 <_handle_obj_poll_event>:
}

/* returns 1 if a reschedule must take place, 0 otherwise */
/* *obj_poll_event is guaranteed to not be NULL */
int _handle_obj_poll_event(struct k_poll_event **obj_poll_event, u32_t state)
{
   14230:	b507      	push	{r0, r1, r2, lr}
   14232:	0003      	movs	r3, r0
	struct k_poll_event *poll_event = *obj_poll_event;
	int must_reschedule;

	*obj_poll_event = NULL;
   14234:	2200      	movs	r2, #0

/* returns 1 if a reschedule must take place, 0 otherwise */
/* *obj_poll_event is guaranteed to not be NULL */
int _handle_obj_poll_event(struct k_poll_event **obj_poll_event, u32_t state)
{
	struct k_poll_event *poll_event = *obj_poll_event;
   14236:	6800      	ldr	r0, [r0, #0]
	int must_reschedule;

	*obj_poll_event = NULL;
   14238:	601a      	str	r2, [r3, #0]
	(void)_signal_poll_event(poll_event, state, &must_reschedule);
   1423a:	aa01      	add	r2, sp, #4
   1423c:	f7ff feba 	bl	13fb4 <_signal_poll_event>
	return must_reschedule;
}
   14240:	9801      	ldr	r0, [sp, #4]
   14242:	bd0e      	pop	{r1, r2, r3, pc}

00014244 <k_poll_signal>:
	signal->signaled = 0;
	/* signal->result is left unitialized */
}

int k_poll_signal(struct k_poll_signal *signal, int result)
{
   14244:	b537      	push	{r0, r1, r2, r4, r5, lr}
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
   14246:	f3ef 8510 	mrs	r5, PRIMASK
   1424a:	b672      	cpsid	i
	unsigned int key = irq_lock();
	int must_reschedule;

	signal->result = result;
	signal->signaled = 1;
   1424c:	2301      	movs	r3, #1
int k_poll_signal(struct k_poll_signal *signal, int result)
{
	unsigned int key = irq_lock();
	int must_reschedule;

	signal->result = result;
   1424e:	6081      	str	r1, [r0, #8]
	signal->signaled = 1;
   14250:	6043      	str	r3, [r0, #4]

	if (!signal->poll_event) {
   14252:	6800      	ldr	r0, [r0, #0]
   14254:	2800      	cmp	r0, #0
   14256:	d00e      	beq.n	14276 <k_poll_signal+0x32>
		irq_unlock(key);
		return 0;
	}

	int rc = _signal_poll_event(signal->poll_event, K_POLL_STATE_SIGNALED,
   14258:	aa01      	add	r2, sp, #4
   1425a:	2102      	movs	r1, #2
   1425c:	f7ff feaa 	bl	13fb4 <_signal_poll_event>
				    &must_reschedule);

	if (must_reschedule) {
   14260:	9b01      	ldr	r3, [sp, #4]
	if (!signal->poll_event) {
		irq_unlock(key);
		return 0;
	}

	int rc = _signal_poll_event(signal->poll_event, K_POLL_STATE_SIGNALED,
   14262:	0004      	movs	r4, r0
				    &must_reschedule);

	if (must_reschedule) {
   14264:	2b00      	cmp	r3, #0
   14266:	d006      	beq.n	14276 <k_poll_signal+0x32>

#ifdef CONFIG_STACK_SENTINEL
	_check_stack_sentinel();
#endif
#ifdef CONFIG_TIMESLICING
	_update_time_slice_before_swap();
   14268:	f000 fad6 	bl	14818 <_update_time_slice_before_swap>
#endif

	return __swap(key);
   1426c:	0028      	movs	r0, r5
   1426e:	f7ff fab5 	bl	137dc <__swap>
		(void)_Swap(key);
	} else {
		irq_unlock(key);
	}

	return rc;
   14272:	0020      	movs	r0, r4
   14274:	e002      	b.n	1427c <k_poll_signal+0x38>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   14276:	2d00      	cmp	r5, #0
   14278:	d100      	bne.n	1427c <k_poll_signal+0x38>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   1427a:	b662      	cpsie	i
}
   1427c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0001427e <_ready_thread>:
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1427e:	7a43      	ldrb	r3, [r0, #9]
   14280:	2204      	movs	r2, #4
   14282:	0019      	movs	r1, r3
   14284:	4391      	bics	r1, r2
}

/* check if a thread is ready */
static inline int _is_thread_ready(struct k_thread *thread)
{
	return !(_is_thread_prevented_from_running(thread) ||
   14286:	221b      	movs	r2, #27
 * blocked for another reason (eg. suspended).
 *
 * Must be called with interrupts locked.
 */
static inline void _ready_thread(struct k_thread *thread)
{
   14288:	b510      	push	{r4, lr}
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1428a:	7241      	strb	r1, [r0, #9]
}

/* check if a thread is ready */
static inline int _is_thread_ready(struct k_thread *thread)
{
	return !(_is_thread_prevented_from_running(thread) ||
   1428c:	4213      	tst	r3, r2
   1428e:	d104      	bne.n	1429a <_ready_thread+0x1c>
   14290:	6a03      	ldr	r3, [r0, #32]
   14292:	3301      	adds	r3, #1
   14294:	d101      	bne.n	1429a <_ready_thread+0x1c>

	/* needed to handle the start-with-delay case */
	_mark_thread_as_started(thread);

	if (_is_thread_ready(thread)) {
		_add_thread_to_ready_q(thread);
   14296:	f000 f959 	bl	1454c <_add_thread_to_ready_q>
	}

#ifdef CONFIG_KERNEL_EVENT_LOGGER_THREAD
	_sys_k_event_logger_thread_ready(thread);
#endif
}
   1429a:	bd10      	pop	{r4, pc}

0001429c <handle_poll_event>:
	_set_thread_return_value_with_data(thread, 0, data);
}

/* returns 1 if a reschedule must take place, 0 otherwise */
static inline int handle_poll_event(struct k_queue *queue)
{
   1429c:	0003      	movs	r3, r0
#ifdef CONFIG_POLL
	u32_t state = K_POLL_STATE_DATA_AVAILABLE;

	return queue->poll_event ?
	       _handle_obj_poll_event(&queue->poll_event, state) : 0;
   1429e:	6900      	ldr	r0, [r0, #16]
	_set_thread_return_value_with_data(thread, 0, data);
}

/* returns 1 if a reschedule must take place, 0 otherwise */
static inline int handle_poll_event(struct k_queue *queue)
{
   142a0:	b510      	push	{r4, lr}
#ifdef CONFIG_POLL
	u32_t state = K_POLL_STATE_DATA_AVAILABLE;

	return queue->poll_event ?
	       _handle_obj_poll_event(&queue->poll_event, state) : 0;
   142a2:	2800      	cmp	r0, #0
   142a4:	d004      	beq.n	142b0 <handle_poll_event+0x14>
   142a6:	3310      	adds	r3, #16
   142a8:	0018      	movs	r0, r3
   142aa:	2108      	movs	r1, #8
   142ac:	f7ff ffc0 	bl	14230 <_handle_obj_poll_event>
#else
	return 0;
#endif
}
   142b0:	bd10      	pop	{r4, pc}

000142b2 <_Swap>:
#ifdef CONFIG_STACK_SENTINEL
extern void _check_stack_sentinel(void);
#endif

static inline unsigned int _Swap(unsigned int key)
{
   142b2:	b510      	push	{r4, lr}
   142b4:	0004      	movs	r4, r0

#ifdef CONFIG_STACK_SENTINEL
	_check_stack_sentinel();
#endif
#ifdef CONFIG_TIMESLICING
	_update_time_slice_before_swap();
   142b6:	f000 faaf 	bl	14818 <_update_time_slice_before_swap>
#endif

	return __swap(key);
   142ba:	0020      	movs	r0, r4
   142bc:	f7ff fa8e 	bl	137dc <__swap>
}
   142c0:	bd10      	pop	{r4, pc}
	...

000142c4 <_must_switch_threads>:
 * Checks if current thread must be context-switched out. The caller must
 * already know that the execution context is a thread.
 */
static inline int _must_switch_threads(void)
{
	return _is_preempt(_current) && __must_switch_threads();
   142c4:	4b05      	ldr	r3, [pc, #20]	; (142dc <_must_switch_threads+0x18>)
/*
 * Checks if current thread must be context-switched out. The caller must
 * already know that the execution context is a thread.
 */
static inline int _must_switch_threads(void)
{
   142c6:	b510      	push	{r4, lr}
   142c8:	689b      	ldr	r3, [r3, #8]
	return _is_preempt(_current) && __must_switch_threads();
   142ca:	2000      	movs	r0, #0
   142cc:	895b      	ldrh	r3, [r3, #10]
   142ce:	2b7f      	cmp	r3, #127	; 0x7f
   142d0:	d803      	bhi.n	142da <_must_switch_threads+0x16>
   142d2:	f000 f9d3 	bl	1467c <__must_switch_threads>
   142d6:	1e43      	subs	r3, r0, #1
   142d8:	4198      	sbcs	r0, r3
}
   142da:	bd10      	pop	{r4, pc}
   142dc:	20002114 	.word	0x20002114

000142e0 <_unpend_first_thread>:
_find_first_thread_to_unpend(_wait_q_t *wait_q, struct k_thread *from)
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	extern volatile int _handling_timeouts;

	if (_handling_timeouts) {
   142e0:	4b14      	ldr	r3, [pc, #80]	; (14334 <_unpend_first_thread+0x54>)
}

/* unpend the first thread from a wait queue */
/* must be called with interrupts locked */
static inline struct k_thread *_unpend_first_thread(_wait_q_t *wait_q)
{
   142e2:	0001      	movs	r1, r0
_find_first_thread_to_unpend(_wait_q_t *wait_q, struct k_thread *from)
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	extern volatile int _handling_timeouts;

	if (_handling_timeouts) {
   142e4:	681b      	ldr	r3, [r3, #0]
   142e6:	6802      	ldr	r2, [r0, #0]
   142e8:	2b00      	cmp	r3, #0
   142ea:	d00f      	beq.n	1430c <_unpend_first_thread+0x2c>
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   142ec:	0013      	movs	r3, r2
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   142ee:	2000      	movs	r0, #0
   142f0:	4291      	cmp	r1, r2
   142f2:	d01d      	beq.n	14330 <_unpend_first_thread+0x50>
		sys_dlist_t *q = (sys_dlist_t *)wait_q;
		sys_dnode_t *cur = from ? &from->base.k_q_node : NULL;

		/* skip threads that have an expired timeout */
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
   142f4:	2b00      	cmp	r3, #0
   142f6:	d007      	beq.n	14308 <_unpend_first_thread+0x28>
			struct k_thread *thread = (struct k_thread *)cur;

			if (_is_thread_timeout_expired(thread)) {
   142f8:	6a1a      	ldr	r2, [r3, #32]
   142fa:	3202      	adds	r2, #2
   142fc:	d10c      	bne.n	14318 <_unpend_first_thread+0x38>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   142fe:	684a      	ldr	r2, [r1, #4]
   14300:	429a      	cmp	r2, r3
   14302:	d014      	beq.n	1432e <_unpend_first_thread+0x4e>
   14304:	681b      	ldr	r3, [r3, #0]
   14306:	e7f5      	b.n	142f4 <_unpend_first_thread+0x14>
	if (_handling_timeouts) {
		sys_dlist_t *q = (sys_dlist_t *)wait_q;
		sys_dnode_t *cur = from ? &from->base.k_q_node : NULL;

		/* skip threads that have an expired timeout */
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
   14308:	0018      	movs	r0, r3
   1430a:	e011      	b.n	14330 <_unpend_first_thread+0x50>
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1430c:	0018      	movs	r0, r3
   1430e:	4291      	cmp	r1, r2
   14310:	d00e      	beq.n	14330 <_unpend_first_thread+0x50>
   14312:	1e10      	subs	r0, r2, #0
/* must be called with interrupts locked */
static inline struct k_thread *_unpend_first_thread(_wait_q_t *wait_q)
{
	struct k_thread *thread = _find_first_thread_to_unpend(wait_q, NULL);

	if (thread) {
   14314:	d101      	bne.n	1431a <_unpend_first_thread+0x3a>
   14316:	e00b      	b.n	14330 <_unpend_first_thread+0x50>

		/* skip threads that have an expired timeout */
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
			struct k_thread *thread = (struct k_thread *)cur;

			if (_is_thread_timeout_expired(thread)) {
   14318:	0018      	movs	r0, r3
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   1431a:	6843      	ldr	r3, [r0, #4]
   1431c:	6802      	ldr	r2, [r0, #0]
   1431e:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   14320:	6802      	ldr	r2, [r0, #0]
   14322:	6053      	str	r3, [r2, #4]
}

/* mark a thread as not pending in its TCS */
static inline void _mark_thread_as_not_pending(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PENDING;
   14324:	2202      	movs	r2, #2
   14326:	7a43      	ldrb	r3, [r0, #9]
   14328:	4393      	bics	r3, r2
   1432a:	7243      	strb	r3, [r0, #9]
   1432c:	e000      	b.n	14330 <_unpend_first_thread+0x50>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   1432e:	2000      	movs	r0, #0
	if (thread) {
		_unpend_thread(thread);
	}

	return thread;
}
   14330:	4770      	bx	lr
   14332:	46c0      	nop			; (mov r8, r8)
   14334:	20002348 	.word	0x20002348

00014338 <_abort_timeout>:
	}
}

/* returns _INACTIVE if the timer is not active */
static inline int _abort_timeout(struct _timeout *timeout)
{
   14338:	0003      	movs	r3, r0
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   1433a:	6900      	ldr	r0, [r0, #16]
   1433c:	1c42      	adds	r2, r0, #1
   1433e:	d010      	beq.n	14362 <_abort_timeout+0x2a>
   14340:	4a08      	ldr	r2, [pc, #32]	; (14364 <_abort_timeout+0x2c>)
		return _INACTIVE;
	}

	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   14342:	6912      	ldr	r2, [r2, #16]
   14344:	4293      	cmp	r3, r2
   14346:	d003      	beq.n	14350 <_abort_timeout+0x18>
   14348:	681a      	ldr	r2, [r3, #0]
		sys_dnode_t *next_node =
			sys_dlist_peek_next(&_timeout_q, &timeout->node);
		struct _timeout *next = (struct _timeout *)next_node;

		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   1434a:	6911      	ldr	r1, [r2, #16]
   1434c:	1808      	adds	r0, r1, r0
   1434e:	6110      	str	r0, [r2, #16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   14350:	685a      	ldr	r2, [r3, #4]
   14352:	6819      	ldr	r1, [r3, #0]
	}
	sys_dlist_remove(&timeout->node);
	timeout->delta_ticks_from_prev = _INACTIVE;

	return 0;
   14354:	2000      	movs	r0, #0
   14356:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
   14358:	6819      	ldr	r1, [r3, #0]
   1435a:	604a      	str	r2, [r1, #4]
		struct _timeout *next = (struct _timeout *)next_node;

		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
	}
	sys_dlist_remove(&timeout->node);
	timeout->delta_ticks_from_prev = _INACTIVE;
   1435c:	2201      	movs	r2, #1
   1435e:	4252      	negs	r2, r2
   14360:	611a      	str	r2, [r3, #16]

	return 0;
}
   14362:	4770      	bx	lr
   14364:	20002114 	.word	0x20002114

00014368 <k_queue_init>:
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
   14368:	2300      	movs	r3, #0
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   1436a:	6000      	str	r0, [r0, #0]
   1436c:	6083      	str	r3, [r0, #8]
	list->tail = NULL;
   1436e:	60c3      	str	r3, [r0, #12]
	list->tail = (sys_dnode_t *)list;
   14370:	6040      	str	r0, [r0, #4]
void k_queue_init(struct k_queue *queue)
{
	sys_slist_init(&queue->data_q);
	sys_dlist_init(&queue->wait_q);

	_INIT_OBJ_POLL_EVENT(queue);
   14372:	6103      	str	r3, [r0, #16]

	SYS_TRACING_OBJ_INIT(k_queue, queue);
}
   14374:	4770      	bx	lr

00014376 <k_queue_insert>:

	irq_unlock(key);
}

void k_queue_insert(struct k_queue *queue, void *prev, void *data)
{
   14376:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   14378:	0005      	movs	r5, r0
   1437a:	000f      	movs	r7, r1
   1437c:	0014      	movs	r4, r2
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
   1437e:	f3ef 8310 	mrs	r3, PRIMASK
   14382:	b672      	cpsid	i
   14384:	9301      	str	r3, [sp, #4]
	struct k_thread *first_pending_thread;
	unsigned int key;

	key = irq_lock();

	first_pending_thread = _unpend_first_thread(&queue->wait_q);
   14386:	f7ff ffab 	bl	142e0 <_unpend_first_thread>
   1438a:	1e06      	subs	r6, r0, #0

	if (first_pending_thread) {
   1438c:	d00f      	beq.n	143ae <k_queue_insert+0x38>

/* returns _INACTIVE if the timer has already expired */
static inline int _abort_thread_timeout(struct k_thread *thread)
{
	return _abort_timeout(&thread->base.timeout);
   1438e:	3010      	adds	r0, #16
   14390:	f7ff ffd2 	bl	14338 <_abort_timeout>
}

static void prepare_thread_to_run(struct k_thread *thread, void *data)
{
	_abort_thread_timeout(thread);
	_ready_thread(thread);
   14394:	0030      	movs	r0, r6
   14396:	f7ff ff72 	bl	1427e <_ready_thread>
   1439a:	2300      	movs	r3, #0
_set_thread_return_value_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	_set_thread_return_value(thread, value);
	thread->base.swap_data = data;
   1439c:	60f4      	str	r4, [r6, #12]
   1439e:	65f3      	str	r3, [r6, #92]	; 0x5c
   143a0:	f3ef 8305 	mrs	r3, IPSR
   143a4:	2b0d      	cmp	r3, #13
   143a6:	d822      	bhi.n	143ee <k_queue_insert+0x78>
   143a8:	2b03      	cmp	r3, #3
   143aa:	d125      	bne.n	143f8 <k_queue_insert+0x82>
   143ac:	e01f      	b.n	143ee <k_queue_insert+0x78>
 */
static inline void sys_slist_insert(sys_slist_t *list,
				    sys_snode_t *prev,
				    sys_snode_t *node)
{
	if (!prev) {
   143ae:	2f00      	cmp	r7, #0
   143b0:	d106      	bne.n	143c0 <k_queue_insert+0x4a>
 * @param node A pointer on the node to prepend
 */
static inline void sys_slist_prepend(sys_slist_t *list,
				     sys_snode_t *node)
{
	node->next = list->head;
   143b2:	68ab      	ldr	r3, [r5, #8]
   143b4:	6023      	str	r3, [r4, #0]
	list->head = node;

	if (!list->tail) {
   143b6:	68eb      	ldr	r3, [r5, #12]
 */
static inline void sys_slist_prepend(sys_slist_t *list,
				     sys_snode_t *node)
{
	node->next = list->head;
	list->head = node;
   143b8:	60ac      	str	r4, [r5, #8]

	if (!list->tail) {
   143ba:	2b00      	cmp	r3, #0
   143bc:	d10e      	bne.n	143dc <k_queue_insert+0x66>
   143be:	e00a      	b.n	143d6 <k_queue_insert+0x60>
				    sys_snode_t *prev,
				    sys_snode_t *node)
{
	if (!prev) {
		sys_slist_prepend(list, node);
	} else if (!prev->next) {
   143c0:	683b      	ldr	r3, [r7, #0]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node)
{
	node->next = NULL;
   143c2:	6023      	str	r3, [r4, #0]
				    sys_snode_t *prev,
				    sys_snode_t *node)
{
	if (!prev) {
		sys_slist_prepend(list, node);
	} else if (!prev->next) {
   143c4:	2b00      	cmp	r3, #0
   143c6:	d108      	bne.n	143da <k_queue_insert+0x64>
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node)
{
	node->next = NULL;

	if (!list->tail) {
   143c8:	68eb      	ldr	r3, [r5, #12]
   143ca:	2b00      	cmp	r3, #0
   143cc:	d102      	bne.n	143d4 <k_queue_insert+0x5e>
		list->tail = node;
   143ce:	60ec      	str	r4, [r5, #12]
		list->head = node;
   143d0:	60ac      	str	r4, [r5, #8]
   143d2:	e003      	b.n	143dc <k_queue_insert+0x66>
	} else {
		list->tail->next = node;
   143d4:	601c      	str	r4, [r3, #0]
		list->tail = node;
   143d6:	60ec      	str	r4, [r5, #12]
   143d8:	e000      	b.n	143dc <k_queue_insert+0x66>
		sys_slist_prepend(list, node);
	} else if (!prev->next) {
		sys_slist_append(list, node);
	} else {
		node->next = prev->next;
		prev->next = node;
   143da:	603c      	str	r4, [r7, #0]
			(void)_Swap(key);
			return;
		}
	} else {
		sys_slist_insert(&queue->data_q, prev, data);
		if (handle_poll_event(queue)) {
   143dc:	0028      	movs	r0, r5
   143de:	f7ff ff5d 	bl	1429c <handle_poll_event>
   143e2:	2800      	cmp	r0, #0
   143e4:	d003      	beq.n	143ee <k_queue_insert+0x78>
			(void)_Swap(key);
   143e6:	9801      	ldr	r0, [sp, #4]
   143e8:	f7ff ff63 	bl	142b2 <_Swap>
			return;
   143ec:	e007      	b.n	143fe <k_queue_insert+0x88>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   143ee:	9b01      	ldr	r3, [sp, #4]
   143f0:	2b00      	cmp	r3, #0
   143f2:	d104      	bne.n	143fe <k_queue_insert+0x88>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   143f4:	b662      	cpsie	i
   143f6:	e002      	b.n	143fe <k_queue_insert+0x88>

	first_pending_thread = _unpend_first_thread(&queue->wait_q);

	if (first_pending_thread) {
		prepare_thread_to_run(first_pending_thread, data);
		if (!_is_in_isr() && _must_switch_threads()) {
   143f8:	f7ff ff64 	bl	142c4 <_must_switch_threads>
   143fc:	e7f1      	b.n	143e2 <k_queue_insert+0x6c>
			return;
		}
	}

	irq_unlock(key);
}
   143fe:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

00014400 <k_queue_append>:

void k_queue_append(struct k_queue *queue, void *data)
{
   14400:	b510      	push	{r4, lr}
   14402:	000a      	movs	r2, r1
	return k_queue_insert(queue, queue->data_q.tail, data);
   14404:	68c1      	ldr	r1, [r0, #12]
   14406:	f7ff ffb6 	bl	14376 <k_queue_insert>
}
   1440a:	bd10      	pop	{r4, pc}

0001440c <k_queue_prepend>:

void k_queue_prepend(struct k_queue *queue, void *data)
{
   1440c:	b510      	push	{r4, lr}
   1440e:	000a      	movs	r2, r1
	return k_queue_insert(queue, NULL, data);
   14410:	2100      	movs	r1, #0
   14412:	f7ff ffb0 	bl	14376 <k_queue_insert>
}
   14416:	bd10      	pop	{r4, pc}

00014418 <k_queue_append_list>:

void k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
   14418:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1441a:	0004      	movs	r4, r0
   1441c:	000d      	movs	r5, r1
   1441e:	9201      	str	r2, [sp, #4]
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
   14420:	f3ef 8710 	mrs	r7, PRIMASK
   14424:	b672      	cpsid	i
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   14426:	6803      	ldr	r3, [r0, #0]
   14428:	9300      	str	r3, [sp, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1442a:	4298      	cmp	r0, r3
   1442c:	d112      	bne.n	14454 <k_queue_append_list+0x3c>
   1442e:	2300      	movs	r3, #0
   14430:	9300      	str	r3, [sp, #0]
	unsigned int key;

	key = irq_lock();

	first_thread = _peek_first_pending_thread(&queue->wait_q);
	while (head && ((thread = _unpend_first_thread(&queue->wait_q)))) {
   14432:	e00f      	b.n	14454 <k_queue_append_list+0x3c>
   14434:	0020      	movs	r0, r4
   14436:	f7ff ff53 	bl	142e0 <_unpend_first_thread>
   1443a:	1e06      	subs	r6, r0, #0
   1443c:	d00d      	beq.n	1445a <k_queue_append_list+0x42>
   1443e:	0030      	movs	r0, r6
   14440:	3010      	adds	r0, #16
   14442:	f7ff ff79 	bl	14338 <_abort_timeout>
}

static void prepare_thread_to_run(struct k_thread *thread, void *data)
{
	_abort_thread_timeout(thread);
	_ready_thread(thread);
   14446:	0030      	movs	r0, r6
   14448:	f7ff ff19 	bl	1427e <_ready_thread>
   1444c:	2300      	movs	r3, #0
   1444e:	60f5      	str	r5, [r6, #12]
	key = irq_lock();

	first_thread = _peek_first_pending_thread(&queue->wait_q);
	while (head && ((thread = _unpend_first_thread(&queue->wait_q)))) {
		prepare_thread_to_run(thread, head);
		head = *(void **)head;
   14450:	682d      	ldr	r5, [r5, #0]
   14452:	65f3      	str	r3, [r6, #92]	; 0x5c
	unsigned int key;

	key = irq_lock();

	first_thread = _peek_first_pending_thread(&queue->wait_q);
	while (head && ((thread = _unpend_first_thread(&queue->wait_q)))) {
   14454:	2d00      	cmp	r5, #0
   14456:	d1ed      	bne.n	14434 <k_queue_append_list+0x1c>
   14458:	e005      	b.n	14466 <k_queue_append_list+0x4e>
 * @param tail A pointer to the last element of the list to append
 */
static inline void sys_slist_append_list(sys_slist_t *list,
					 void *head, void *tail)
{
	if (!list->tail) {
   1445a:	68e3      	ldr	r3, [r4, #12]
   1445c:	2b00      	cmp	r3, #0
   1445e:	d119      	bne.n	14494 <k_queue_append_list+0x7c>
		list->head = (sys_snode_t *)head;
   14460:	60a5      	str	r5, [r4, #8]
		list->tail = (sys_snode_t *)tail;
	} else {
		list->tail->next = (sys_snode_t *)head;
		list->tail = (sys_snode_t *)tail;
   14462:	9b01      	ldr	r3, [sp, #4]
   14464:	60e3      	str	r3, [r4, #12]

	if (head) {
		sys_slist_append_list(&queue->data_q, head, tail);
	}

	if (first_thread) {
   14466:	9b00      	ldr	r3, [sp, #0]
   14468:	2b00      	cmp	r3, #0
   1446a:	d006      	beq.n	1447a <k_queue_append_list+0x62>
   1446c:	f3ef 8305 	mrs	r3, IPSR
   14470:	2b0d      	cmp	r3, #13
   14472:	d80b      	bhi.n	1448c <k_queue_append_list+0x74>
   14474:	2b03      	cmp	r3, #3
   14476:	d10f      	bne.n	14498 <k_queue_append_list+0x80>
   14478:	e008      	b.n	1448c <k_queue_append_list+0x74>
		if (!_is_in_isr() && _must_switch_threads()) {
			(void)_Swap(key);
			return;
		}
	} else {
		if (handle_poll_event(queue)) {
   1447a:	0020      	movs	r0, r4
   1447c:	f7ff ff0e 	bl	1429c <handle_poll_event>
   14480:	2800      	cmp	r0, #0
   14482:	d003      	beq.n	1448c <k_queue_append_list+0x74>
			(void)_Swap(key);
   14484:	0038      	movs	r0, r7
   14486:	f7ff ff14 	bl	142b2 <_Swap>
			return;
   1448a:	e008      	b.n	1449e <k_queue_append_list+0x86>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   1448c:	2f00      	cmp	r7, #0
   1448e:	d106      	bne.n	1449e <k_queue_append_list+0x86>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   14490:	b662      	cpsie	i
   14492:	e004      	b.n	1449e <k_queue_append_list+0x86>
{
	if (!list->tail) {
		list->head = (sys_snode_t *)head;
		list->tail = (sys_snode_t *)tail;
	} else {
		list->tail->next = (sys_snode_t *)head;
   14494:	601d      	str	r5, [r3, #0]
   14496:	e7e4      	b.n	14462 <k_queue_append_list+0x4a>
	if (head) {
		sys_slist_append_list(&queue->data_q, head, tail);
	}

	if (first_thread) {
		if (!_is_in_isr() && _must_switch_threads()) {
   14498:	f7ff ff14 	bl	142c4 <_must_switch_threads>
   1449c:	e7f0      	b.n	14480 <k_queue_append_list+0x68>
			return;
		}
	}

	irq_unlock(key);
}
   1449e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

000144a0 <k_queue_get>:
	k_queue_append_list(queue, list->head, list->tail);
	sys_slist_init(list);
}

void *k_queue_get(struct k_queue *queue, s32_t timeout)
{
   144a0:	b510      	push	{r4, lr}
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
   144a2:	f3ef 8410 	mrs	r4, PRIMASK
   144a6:	b672      	cpsid	i
   144a8:	6883      	ldr	r3, [r0, #8]
	unsigned int key;
	void *data;

	key = irq_lock();

	if (likely(!sys_slist_is_empty(&queue->data_q))) {
   144aa:	2b00      	cmp	r3, #0
   144ac:	d00a      	beq.n	144c4 <k_queue_get+0x24>
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list)
{
	sys_snode_t *node = list->head;

	list->head = node->next;
   144ae:	681a      	ldr	r2, [r3, #0]
	if (list->tail == node) {
   144b0:	68c1      	ldr	r1, [r0, #12]
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list)
{
	sys_snode_t *node = list->head;

	list->head = node->next;
   144b2:	6082      	str	r2, [r0, #8]
	if (list->tail == node) {
   144b4:	428b      	cmp	r3, r1
   144b6:	d100      	bne.n	144ba <k_queue_get+0x1a>
		list->tail = list->head;
   144b8:	60c2      	str	r2, [r0, #12]
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   144ba:	0018      	movs	r0, r3
   144bc:	2c00      	cmp	r4, #0
   144be:	d114      	bne.n	144ea <k_queue_get+0x4a>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   144c0:	b662      	cpsie	i
   144c2:	e012      	b.n	144ea <k_queue_get+0x4a>
		data = sys_slist_get_not_empty(&queue->data_q);
		irq_unlock(key);
		return data;
	}

	if (timeout == K_NO_WAIT) {
   144c4:	2900      	cmp	r1, #0
   144c6:	d106      	bne.n	144d6 <k_queue_get+0x36>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   144c8:	2c00      	cmp	r4, #0
   144ca:	d001      	beq.n	144d0 <k_queue_get+0x30>
		irq_unlock(key);
		return NULL;
   144cc:	2000      	movs	r0, #0
   144ce:	e00c      	b.n	144ea <k_queue_get+0x4a>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   144d0:	b662      	cpsie	i
   144d2:	0020      	movs	r0, r4
   144d4:	e009      	b.n	144ea <k_queue_get+0x4a>
	}

	_pend_current_thread(&queue->wait_q, timeout);
   144d6:	f000 f8c1 	bl	1465c <_pend_current_thread>

	return _Swap(key) ? NULL : _current->base.swap_data;
   144da:	0020      	movs	r0, r4
   144dc:	f7ff fee9 	bl	142b2 <_Swap>
   144e0:	2800      	cmp	r0, #0
   144e2:	d1f3      	bne.n	144cc <k_queue_get+0x2c>
   144e4:	4b01      	ldr	r3, [pc, #4]	; (144ec <k_queue_get+0x4c>)
   144e6:	689b      	ldr	r3, [r3, #8]
   144e8:	68d8      	ldr	r0, [r3, #12]
}
   144ea:	bd10      	pop	{r4, pc}
   144ec:	20002114 	.word	0x20002114

000144f0 <_add_timeout>:
{
	__ASSERT(timeout_in_ticks > 0, "");

	timeout->delta_ticks_from_prev = timeout_in_ticks;
	timeout->thread = thread;
	timeout->wait_q = (sys_dlist_t *)wait_q;
   144f0:	60ca      	str	r2, [r1, #12]
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   144f2:	4a15      	ldr	r2, [pc, #84]	; (14548 <_add_timeout+0x58>)
				s32_t timeout_in_ticks)
{
	__ASSERT(timeout_in_ticks > 0, "");

	timeout->delta_ticks_from_prev = timeout_in_ticks;
	timeout->thread = thread;
   144f4:	6088      	str	r0, [r1, #8]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   144f6:	0010      	movs	r0, r2

static inline void _add_timeout(struct k_thread *thread,
				struct _timeout *timeout,
				_wait_q_t *wait_q,
				s32_t timeout_in_ticks)
{
   144f8:	b530      	push	{r4, r5, lr}
	__ASSERT(timeout_in_ticks > 0, "");

	timeout->delta_ticks_from_prev = timeout_in_ticks;
   144fa:	610b      	str	r3, [r1, #16]
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   144fc:	68d3      	ldr	r3, [r2, #12]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   144fe:	300c      	adds	r0, #12
   14500:	4283      	cmp	r3, r0
   14502:	d108      	bne.n	14516 <_add_timeout+0x26>
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
   14504:	0013      	movs	r3, r2
   14506:	330c      	adds	r3, #12
   14508:	600b      	str	r3, [r1, #0]
	node->prev = list->tail;
   1450a:	6913      	ldr	r3, [r2, #16]
   1450c:	604b      	str	r3, [r1, #4]

	list->tail->next = node;
   1450e:	6913      	ldr	r3, [r2, #16]
   14510:	6019      	str	r1, [r3, #0]
	list->tail = node;
   14512:	6111      	str	r1, [r2, #16]
   14514:	e017      	b.n	14546 <_add_timeout+0x56>
	if (program_time > 0) {
		*delta += _get_elapsed_program_time();
	}
	adjusted_timeout = *delta;
#endif
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   14516:	2b00      	cmp	r3, #0
   14518:	d0f4      	beq.n	14504 <_add_timeout+0x14>
   1451a:	6915      	ldr	r5, [r2, #16]
		if (*delta <= in_q->delta_ticks_from_prev) {
   1451c:	6908      	ldr	r0, [r1, #16]
   1451e:	691c      	ldr	r4, [r3, #16]
   14520:	42a0      	cmp	r0, r4
   14522:	dc08      	bgt.n	14536 <_add_timeout+0x46>
	sys_dnode_t *insert_point, sys_dnode_t *node)
{
	if (!insert_point) {
		sys_dlist_append(list, node);
	} else {
		node->prev = insert_point->prev;
   14524:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
   14526:	1a20      	subs	r0, r4, r0
   14528:	6118      	str	r0, [r3, #16]
   1452a:	604a      	str	r2, [r1, #4]
		node->next = insert_point;
   1452c:	600b      	str	r3, [r1, #0]
		insert_point->prev->next = node;
   1452e:	685a      	ldr	r2, [r3, #4]
   14530:	6011      	str	r1, [r2, #0]
		insert_point->prev = node;
   14532:	6059      	str	r1, [r3, #4]
   14534:	e007      	b.n	14546 <_add_timeout+0x56>
			sys_dlist_insert_before(&_timeout_q, &in_q->node,
						&timeout->node);
			goto inserted;
		}

		*delta -= in_q->delta_ticks_from_prev;
   14536:	1b00      	subs	r0, r0, r4
   14538:	6108      	str	r0, [r1, #16]
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   1453a:	42ab      	cmp	r3, r5
   1453c:	d0e2      	beq.n	14504 <_add_timeout+0x14>
   1453e:	681b      	ldr	r3, [r3, #0]
	if (program_time > 0) {
		*delta += _get_elapsed_program_time();
	}
	adjusted_timeout = *delta;
#endif
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   14540:	2b00      	cmp	r3, #0
   14542:	d1eb      	bne.n	1451c <_add_timeout+0x2c>
   14544:	e7de      	b.n	14504 <_add_timeout+0x14>
#ifdef CONFIG_TICKLESS_KERNEL
	if (!program_time || (adjusted_timeout < program_time)) {
		_set_time(adjusted_timeout);
	}
#endif
}
   14546:	bd30      	pop	{r4, r5, pc}
   14548:	20002114 	.word	0x20002114

0001454c <_add_thread_to_ready_q>:
}

/* find out the ready queue array index for a given prio */
static inline int _get_ready_q_q_index(int prio)
{
	return prio + _NUM_COOP_PRIO;
   1454c:	230a      	movs	r3, #10
   1454e:	56c3      	ldrsb	r3, [r0, r3]
 *
 * Interrupts must be locked when calling this function.
 */

void _add_thread_to_ready_q(struct k_thread *thread)
{
   14550:	b530      	push	{r4, r5, lr}
   14552:	001d      	movs	r5, r3
static void _set_ready_q_prio_bit(int prio)
{
	int bmap_index = _get_ready_q_prio_bmap_index(prio);
	u32_t *bmap = &_ready_q.prio_bmap[bmap_index];

	*bmap |= _get_ready_q_prio_bit(prio);
   14554:	241f      	movs	r4, #31
   14556:	3510      	adds	r5, #16
}

/* find out the prio bitmap index for a given prio */
static inline int _get_ready_q_prio_bmap_index(int prio)
{
	return (prio + _NUM_COOP_PRIO) >> 5;
   14558:	116a      	asrs	r2, r5, #5
   1455a:	4025      	ands	r5, r4
   1455c:	3c1e      	subs	r4, #30
   1455e:	40ac      	lsls	r4, r5
   14560:	490d      	ldr	r1, [pc, #52]	; (14598 <_add_thread_to_ready_q+0x4c>)
   14562:	3206      	adds	r2, #6
   14564:	0092      	lsls	r2, r2, #2
   14566:	188a      	adds	r2, r1, r2
   14568:	6855      	ldr	r5, [r2, #4]

void _add_thread_to_ready_q(struct k_thread *thread)
{
#ifdef CONFIG_MULTITHREADING
	int q_index = _get_ready_q_q_index(thread->base.prio);
	sys_dlist_t *q = &_ready_q.q[q_index];
   1456a:	3314      	adds	r3, #20
static void _set_ready_q_prio_bit(int prio)
{
	int bmap_index = _get_ready_q_prio_bmap_index(prio);
	u32_t *bmap = &_ready_q.prio_bmap[bmap_index];

	*bmap |= _get_ready_q_prio_bit(prio);
   1456c:	432c      	orrs	r4, r5
   1456e:	6054      	str	r4, [r2, #4]
	_set_ready_q_prio_bit(thread->base.prio);
	sys_dlist_append(q, &thread->base.k_q_node);

	struct k_thread **cache = &_ready_q.cache;

	*cache = _is_t1_higher_prio_than_t2(thread, *cache) ? thread : *cache;
   14570:	250a      	movs	r5, #10
   14572:	240a      	movs	r4, #10

void _add_thread_to_ready_q(struct k_thread *thread)
{
#ifdef CONFIG_MULTITHREADING
	int q_index = _get_ready_q_q_index(thread->base.prio);
	sys_dlist_t *q = &_ready_q.q[q_index];
   14574:	00db      	lsls	r3, r3, #3
   14576:	18cb      	adds	r3, r1, r3
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
   14578:	6003      	str	r3, [r0, #0]
	node->prev = list->tail;
   1457a:	685a      	ldr	r2, [r3, #4]
   1457c:	6042      	str	r2, [r0, #4]

	list->tail->next = node;
   1457e:	685a      	ldr	r2, [r3, #4]
   14580:	6010      	str	r0, [r2, #0]
	_set_ready_q_prio_bit(thread->base.prio);
	sys_dlist_append(q, &thread->base.k_q_node);

	struct k_thread **cache = &_ready_q.cache;

	*cache = _is_t1_higher_prio_than_t2(thread, *cache) ? thread : *cache;
   14582:	698a      	ldr	r2, [r1, #24]
	list->tail = node;
   14584:	6058      	str	r0, [r3, #4]
   14586:	5745      	ldrsb	r5, [r0, r5]
   14588:	5714      	ldrsb	r4, [r2, r4]
   1458a:	000b      	movs	r3, r1
   1458c:	42a5      	cmp	r5, r4
   1458e:	da00      	bge.n	14592 <_add_thread_to_ready_q+0x46>
   14590:	0002      	movs	r2, r0
   14592:	619a      	str	r2, [r3, #24]
#else
	sys_dlist_append(&_ready_q.q[0], &thread->base.k_q_node);
	_ready_q.prio_bmap[0] = 1;
	_ready_q.cache = thread;
#endif
}
   14594:	bd30      	pop	{r4, r5, pc}
   14596:	46c0      	nop			; (mov r8, r8)
   14598:	20002114 	.word	0x20002114

0001459c <_remove_thread_from_ready_q>:
}

/* find out the ready queue array index for a given prio */
static inline int _get_ready_q_q_index(int prio)
{
	return prio + _NUM_COOP_PRIO;
   1459c:	230a      	movs	r3, #10
 *
 * Interrupts must be locked when calling this function.
 */

void _remove_thread_from_ready_q(struct k_thread *thread)
{
   1459e:	b510      	push	{r4, lr}
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   145a0:	6842      	ldr	r2, [r0, #4]
   145a2:	6801      	ldr	r1, [r0, #0]
   145a4:	56c3      	ldrsb	r3, [r0, r3]
   145a6:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
   145a8:	6801      	ldr	r1, [r0, #0]
#ifdef CONFIG_MULTITHREADING
	int q_index = _get_ready_q_q_index(thread->base.prio);
	sys_dlist_t *q = &_ready_q.q[q_index];
   145aa:	4c11      	ldr	r4, [pc, #68]	; (145f0 <_remove_thread_from_ready_q+0x54>)
   145ac:	3314      	adds	r3, #20
   145ae:	604a      	str	r2, [r1, #4]
   145b0:	00db      	lsls	r3, r3, #3
   145b2:	18e2      	adds	r2, r4, r3

	sys_dlist_remove(&thread->base.k_q_node);
	if (sys_dlist_is_empty(q)) {
   145b4:	591b      	ldr	r3, [r3, r4]
   145b6:	4293      	cmp	r3, r2
   145b8:	d10e      	bne.n	145d8 <_remove_thread_from_ready_q+0x3c>
}

/* find out the prio bitmap index for a given prio */
static inline int _get_ready_q_prio_bmap_index(int prio)
{
	return (prio + _NUM_COOP_PRIO) >> 5;
   145ba:	220a      	movs	r2, #10
static void _clear_ready_q_prio_bit(int prio)
{
	int bmap_index = _get_ready_q_prio_bmap_index(prio);
	u32_t *bmap = &_ready_q.prio_bmap[bmap_index];

	*bmap &= ~_get_ready_q_prio_bit(prio);
   145bc:	211f      	movs	r1, #31
   145be:	5682      	ldrsb	r2, [r0, r2]
   145c0:	3210      	adds	r2, #16
   145c2:	1153      	asrs	r3, r2, #5
   145c4:	400a      	ands	r2, r1
   145c6:	391e      	subs	r1, #30
   145c8:	4091      	lsls	r1, r2
   145ca:	000a      	movs	r2, r1
   145cc:	3306      	adds	r3, #6
   145ce:	009b      	lsls	r3, r3, #2
   145d0:	18e3      	adds	r3, r4, r3
   145d2:	6859      	ldr	r1, [r3, #4]
   145d4:	4391      	bics	r1, r2
   145d6:	6059      	str	r1, [r3, #4]
		_clear_ready_q_prio_bit(thread->base.prio);
	}

	struct k_thread **cache = &_ready_q.cache;

	*cache = *cache == thread ? _get_ready_q_head() : *cache;
   145d8:	69a3      	ldr	r3, [r4, #24]
   145da:	4298      	cmp	r0, r3
   145dc:	d105      	bne.n	145ea <_remove_thread_from_ready_q+0x4e>
 * @return least significant bit set, 0 if @a op is 0
 */

static ALWAYS_INLINE unsigned int find_lsb_set(u32_t op)
{
	return __builtin_ffs(op);
   145de:	69e0      	ldr	r0, [r4, #28]
   145e0:	f7eb ffa0 	bl	524 <__ffssi2>
 */
static struct k_thread *_get_ready_q_head(void)
{
	int prio = _get_highest_ready_prio();
	int q_index = _get_ready_q_q_index(prio);
	sys_dlist_t *list = &_ready_q.q[q_index];
   145e4:	3003      	adds	r0, #3
   145e6:	00c0      	lsls	r0, r0, #3
   145e8:	5823      	ldr	r3, [r4, r0]
		_clear_ready_q_prio_bit(thread->base.prio);
	}

	struct k_thread **cache = &_ready_q.cache;

	*cache = *cache == thread ? _get_ready_q_head() : *cache;
   145ea:	61a3      	str	r3, [r4, #24]
#else
	_ready_q.prio_bmap[0] = 0;
	_ready_q.cache = NULL;
	sys_dlist_remove(&thread->base.k_q_node);
#endif
}
   145ec:	bd10      	pop	{r4, pc}
   145ee:	46c0      	nop			; (mov r8, r8)
   145f0:	20002114 	.word	0x20002114

000145f4 <_pend_thread>:
#endif

/* pend the specified thread: it must *not* be in the ready queue */
/* must be called with interrupts locked */
void _pend_thread(struct k_thread *thread, _wait_q_t *wait_q, s32_t timeout)
{
   145f4:	b570      	push	{r4, r5, r6, lr}
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   145f6:	680b      	ldr	r3, [r1, #0]
   145f8:	0004      	movs	r4, r0
   145fa:	000d      	movs	r5, r1
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   145fc:	4299      	cmp	r1, r3
   145fe:	d013      	beq.n	14628 <_pend_thread+0x34>
#ifdef CONFIG_MULTITHREADING
	sys_dlist_t *wait_q_list = (sys_dlist_t *)wait_q;
	sys_dnode_t *node;

	SYS_DLIST_FOR_EACH_NODE(wait_q_list, node) {
   14600:	2b00      	cmp	r3, #0
   14602:	d011      	beq.n	14628 <_pend_thread+0x34>
		struct k_thread *pending = (struct k_thread *)node;

		if (_is_t1_higher_prio_than_t2(thread, pending)) {
   14604:	200a      	movs	r0, #10
   14606:	210a      	movs	r1, #10
   14608:	5620      	ldrsb	r0, [r4, r0]
   1460a:	5659      	ldrsb	r1, [r3, r1]
   1460c:	4288      	cmp	r0, r1
   1460e:	da06      	bge.n	1461e <_pend_thread+0x2a>
	sys_dnode_t *insert_point, sys_dnode_t *node)
{
	if (!insert_point) {
		sys_dlist_append(list, node);
	} else {
		node->prev = insert_point->prev;
   14610:	6859      	ldr	r1, [r3, #4]
		node->next = insert_point;
   14612:	6023      	str	r3, [r4, #0]
	sys_dnode_t *insert_point, sys_dnode_t *node)
{
	if (!insert_point) {
		sys_dlist_append(list, node);
	} else {
		node->prev = insert_point->prev;
   14614:	6061      	str	r1, [r4, #4]
		node->next = insert_point;
		insert_point->prev->next = node;
   14616:	6859      	ldr	r1, [r3, #4]
   14618:	600c      	str	r4, [r1, #0]
		insert_point->prev = node;
   1461a:	605c      	str	r4, [r3, #4]
   1461c:	e00a      	b.n	14634 <_pend_thread+0x40>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   1461e:	6869      	ldr	r1, [r5, #4]
   14620:	428b      	cmp	r3, r1
   14622:	d001      	beq.n	14628 <_pend_thread+0x34>
   14624:	681b      	ldr	r3, [r3, #0]
   14626:	e7eb      	b.n	14600 <_pend_thread+0xc>
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
   14628:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   1462a:	686b      	ldr	r3, [r5, #4]
   1462c:	6063      	str	r3, [r4, #4]

	list->tail->next = node;
   1462e:	686b      	ldr	r3, [r5, #4]
   14630:	601c      	str	r4, [r3, #0]
	list->tail = node;
   14632:	606c      	str	r4, [r5, #4]
}

/* mark a thread as pending in its TCS */
static inline void _mark_thread_as_pending(struct k_thread *thread)
{
	thread->base.thread_state |= _THREAD_PENDING;
   14634:	2102      	movs	r1, #2
   14636:	7a63      	ldrb	r3, [r4, #9]
   14638:	430b      	orrs	r3, r1
   1463a:	7263      	strb	r3, [r4, #9]
	sys_dlist_append(wait_q_list, &thread->base.k_q_node);

inserted:
	_mark_thread_as_pending(thread);

	if (timeout != K_FOREVER) {
   1463c:	1c53      	adds	r3, r2, #1
   1463e:	d00b      	beq.n	14658 <_pend_thread+0x64>

static inline void _add_thread_timeout(struct k_thread *thread,
				       _wait_q_t *wait_q,
				       s32_t timeout_in_ticks)
{
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
   14640:	3209      	adds	r2, #9
   14642:	0010      	movs	r0, r2
   14644:	3108      	adds	r1, #8
   14646:	f7eb fdab 	bl	1a0 <__aeabi_uidiv>
   1464a:	0021      	movs	r1, r4
   1464c:	1c43      	adds	r3, r0, #1
   1464e:	3110      	adds	r1, #16
   14650:	002a      	movs	r2, r5
   14652:	0020      	movs	r0, r4
   14654:	f7ff ff4c 	bl	144f0 <_add_timeout>
		s32_t ticks = _TICK_ALIGN + _ms_to_ticks(timeout);

		_add_thread_timeout(thread, wait_q, ticks);
	}
#endif
}
   14658:	bd70      	pop	{r4, r5, r6, pc}
	...

0001465c <_pend_current_thread>:

/* pend the current thread */
/* must be called with interrupts locked */
void _pend_current_thread(_wait_q_t *wait_q, s32_t timeout)
{
   1465c:	b570      	push	{r4, r5, r6, lr}
   1465e:	000e      	movs	r6, r1
   14660:	0005      	movs	r5, r0
	_remove_thread_from_ready_q(_current);
   14662:	4c05      	ldr	r4, [pc, #20]	; (14678 <_pend_current_thread+0x1c>)
   14664:	68a0      	ldr	r0, [r4, #8]
   14666:	f7ff ff99 	bl	1459c <_remove_thread_from_ready_q>
	_pend_thread(_current, wait_q, timeout);
   1466a:	0032      	movs	r2, r6
   1466c:	0029      	movs	r1, r5
   1466e:	68a0      	ldr	r0, [r4, #8]
   14670:	f7ff ffc0 	bl	145f4 <_pend_thread>
}
   14674:	bd70      	pop	{r4, r5, r6, pc}
   14676:	46c0      	nop			; (mov r8, r8)
   14678:	20002114 	.word	0x20002114

0001467c <__must_switch_threads>:
/*
 * Check if there is a thread of higher prio than the current one. Should only
 * be called if we already know that the current thread is preemptible.
 */
int __must_switch_threads(void)
{
   1467c:	b510      	push	{r4, lr}
{
	int bitmap = 0;
	u32_t ready_range;

#if (K_NUM_PRIORITIES <= 32)
	ready_range = _ready_q.prio_bmap[0];
   1467e:	4c07      	ldr	r4, [pc, #28]	; (1469c <__must_switch_threads+0x20>)
   14680:	69e0      	ldr	r0, [r4, #28]
   14682:	f7eb ff4f 	bl	524 <__ffssi2>

#ifdef CONFIG_KERNEL_DEBUG
	_dump_ready_q();
#endif  /* CONFIG_KERNEL_DEBUG */

	return _is_prio_higher(_get_highest_ready_prio(), _current->base.prio);
   14686:	220a      	movs	r2, #10
   14688:	68a3      	ldr	r3, [r4, #8]
   1468a:	569a      	ldrsb	r2, [r3, r2]
   1468c:	0003      	movs	r3, r0
   1468e:	3b11      	subs	r3, #17
   14690:	2001      	movs	r0, #1
   14692:	429a      	cmp	r2, r3
   14694:	dc00      	bgt.n	14698 <__must_switch_threads+0x1c>
   14696:	2000      	movs	r0, #0
#else
	return 0;
#endif
}
   14698:	bd10      	pop	{r4, pc}
   1469a:	46c0      	nop			; (mov r8, r8)
   1469c:	20002114 	.word	0x20002114

000146a0 <_reschedule_threads>:
 * Checks if current thread must be context-switched out. The caller must
 * already know that the execution context is a thread.
 */
static inline int _must_switch_threads(void)
{
	return _is_preempt(_current) && __must_switch_threads();
   146a0:	4b0a      	ldr	r3, [pc, #40]	; (146cc <_reschedule_threads+0x2c>)

/* reschedule threads if the scheduler is not locked */
/* not callable from ISR */
/* must be called with interrupts locked */
void _reschedule_threads(int key)
{
   146a2:	b510      	push	{r4, lr}
   146a4:	689b      	ldr	r3, [r3, #8]
   146a6:	0004      	movs	r4, r0
   146a8:	895b      	ldrh	r3, [r3, #10]
   146aa:	2b7f      	cmp	r3, #127	; 0x7f
   146ac:	d803      	bhi.n	146b6 <_reschedule_threads+0x16>
   146ae:	f7ff ffe5 	bl	1467c <__must_switch_threads>
   146b2:	2800      	cmp	r0, #0
   146b4:	d103      	bne.n	146be <_reschedule_threads+0x1e>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   146b6:	2c00      	cmp	r4, #0
   146b8:	d107      	bne.n	146ca <_reschedule_threads+0x2a>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   146ba:	b662      	cpsie	i
		irq_unlock(key);
	}
#else
	irq_unlock(key);
#endif
}
   146bc:	e005      	b.n	146ca <_reschedule_threads+0x2a>
	if (!remaining || (_time_slice_duration < remaining)) {
		_set_time(_time_slice_duration);
	}
#endif
	/* Restart time slice count at new thread switch */
	_time_slice_elapsed = 0;
   146be:	2200      	movs	r2, #0
   146c0:	4b03      	ldr	r3, [pc, #12]	; (146d0 <_reschedule_threads+0x30>)
#endif
#ifdef CONFIG_TIMESLICING
	_update_time_slice_before_swap();
#endif

	return __swap(key);
   146c2:	0020      	movs	r0, r4
   146c4:	601a      	str	r2, [r3, #0]
   146c6:	f7ff f889 	bl	137dc <__swap>
		irq_unlock(key);
	}
#else
	irq_unlock(key);
#endif
}
   146ca:	bd10      	pop	{r4, pc}
   146cc:	20002114 	.word	0x20002114
   146d0:	2000234c 	.word	0x2000234c

000146d4 <k_sched_unlock>:
		_current, _current->base.sched_locked);
#endif
}

void k_sched_unlock(void)
{
   146d4:	b510      	push	{r4, lr}
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
   146d6:	f3ef 8010 	mrs	r0, PRIMASK
   146da:	b672      	cpsid	i

	int key = irq_lock();

	/* compiler_barrier() not needed, comes from irq_lock() */

	++_current->base.sched_locked;
   146dc:	4b03      	ldr	r3, [pc, #12]	; (146ec <k_sched_unlock+0x18>)
   146de:	689a      	ldr	r2, [r3, #8]
   146e0:	7ad3      	ldrb	r3, [r2, #11]
   146e2:	3301      	adds	r3, #1
   146e4:	72d3      	strb	r3, [r2, #11]

	K_DEBUG("scheduler unlocked (%p:%d)\n",
		_current, _current->base.sched_locked);

	_reschedule_threads(key);
   146e6:	f7ff ffdb 	bl	146a0 <_reschedule_threads>
#endif
}
   146ea:	bd10      	pop	{r4, pc}
   146ec:	20002114 	.word	0x20002114

000146f0 <_move_thread_to_end_of_prio_q>:
}

/* find out the ready queue array index for a given prio */
static inline int _get_ready_q_q_index(int prio)
{
	return prio + _NUM_COOP_PRIO;
   146f0:	230a      	movs	r3, #10
 * This function, along with _add_thread_to_ready_q() and
 * _remove_thread_from_ready_q(), are the _only_ places where a thread is
 * taken off or put on the ready queue.
 */
void _move_thread_to_end_of_prio_q(struct k_thread *thread)
{
   146f2:	b510      	push	{r4, lr}
   146f4:	56c3      	ldrsb	r3, [r0, r3]
#ifdef CONFIG_MULTITHREADING
	int q_index = _get_ready_q_q_index(thread->base.prio);
	sys_dlist_t *q = &_ready_q.q[q_index];
   146f6:	4c0e      	ldr	r4, [pc, #56]	; (14730 <_move_thread_to_end_of_prio_q+0x40>)
   146f8:	3314      	adds	r3, #20
   146fa:	00db      	lsls	r3, r3, #3
   146fc:	18e3      	adds	r3, r4, r3

	if (sys_dlist_is_tail(q, &thread->base.k_q_node)) {
   146fe:	685a      	ldr	r2, [r3, #4]
   14700:	4290      	cmp	r0, r2
   14702:	d014      	beq.n	1472e <_move_thread_to_end_of_prio_q+0x3e>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   14704:	6842      	ldr	r2, [r0, #4]
   14706:	6801      	ldr	r1, [r0, #0]
   14708:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
   1470a:	6801      	ldr	r1, [r0, #0]
   1470c:	604a      	str	r2, [r1, #4]
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
   1470e:	6003      	str	r3, [r0, #0]
	node->prev = list->tail;
   14710:	685a      	ldr	r2, [r3, #4]
   14712:	6042      	str	r2, [r0, #4]

	list->tail->next = node;
   14714:	685a      	ldr	r2, [r3, #4]
   14716:	6010      	str	r0, [r2, #0]
	list->tail = node;
   14718:	6058      	str	r0, [r3, #4]
	sys_dlist_remove(&thread->base.k_q_node);
	sys_dlist_append(q, &thread->base.k_q_node);

	struct k_thread **cache = &_ready_q.cache;

	*cache = *cache == thread ? _get_ready_q_head() : *cache;
   1471a:	69a3      	ldr	r3, [r4, #24]
   1471c:	4298      	cmp	r0, r3
   1471e:	d105      	bne.n	1472c <_move_thread_to_end_of_prio_q+0x3c>
 * @return least significant bit set, 0 if @a op is 0
 */

static ALWAYS_INLINE unsigned int find_lsb_set(u32_t op)
{
	return __builtin_ffs(op);
   14720:	69e0      	ldr	r0, [r4, #28]
   14722:	f7eb feff 	bl	524 <__ffssi2>
 */
static struct k_thread *_get_ready_q_head(void)
{
	int prio = _get_highest_ready_prio();
	int q_index = _get_ready_q_q_index(prio);
	sys_dlist_t *list = &_ready_q.q[q_index];
   14726:	3003      	adds	r0, #3
   14728:	00c0      	lsls	r0, r0, #3
   1472a:	5823      	ldr	r3, [r4, r0]
	sys_dlist_remove(&thread->base.k_q_node);
	sys_dlist_append(q, &thread->base.k_q_node);

	struct k_thread **cache = &_ready_q.cache;

	*cache = *cache == thread ? _get_ready_q_head() : *cache;
   1472c:	61a3      	str	r3, [r4, #24]
#endif
}
   1472e:	bd10      	pop	{r4, pc}
   14730:	20002114 	.word	0x20002114

00014734 <k_yield>:

void k_yield(void)
{
   14734:	b570      	push	{r4, r5, r6, lr}
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
   14736:	f3ef 8510 	mrs	r5, PRIMASK
   1473a:	b672      	cpsid	i
	__ASSERT(!_is_in_isr(), "");

	int key = irq_lock();

	_move_thread_to_end_of_prio_q(_current);
   1473c:	4c09      	ldr	r4, [pc, #36]	; (14764 <k_yield+0x30>)
   1473e:	68a0      	ldr	r0, [r4, #8]
   14740:	f7ff ffd6 	bl	146f0 <_move_thread_to_end_of_prio_q>

	if (_current == _get_next_ready_thread()) {
   14744:	68a2      	ldr	r2, [r4, #8]
   14746:	69a3      	ldr	r3, [r4, #24]
   14748:	429a      	cmp	r2, r3
   1474a:	d103      	bne.n	14754 <k_yield+0x20>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   1474c:	2d00      	cmp	r5, #0
   1474e:	d107      	bne.n	14760 <k_yield+0x2c>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   14750:	b662      	cpsie	i
   14752:	e005      	b.n	14760 <k_yield+0x2c>
	if (!remaining || (_time_slice_duration < remaining)) {
		_set_time(_time_slice_duration);
	}
#endif
	/* Restart time slice count at new thread switch */
	_time_slice_elapsed = 0;
   14754:	2200      	movs	r2, #0
   14756:	4b04      	ldr	r3, [pc, #16]	; (14768 <k_yield+0x34>)
   14758:	0028      	movs	r0, r5
   1475a:	601a      	str	r2, [r3, #0]
   1475c:	f7ff f83e 	bl	137dc <__swap>
		_check_stack_sentinel();
#endif
	} else {
		_Swap(key);
	}
}
   14760:	bd70      	pop	{r4, r5, r6, pc}
   14762:	46c0      	nop			; (mov r8, r8)
   14764:	20002114 	.word	0x20002114
   14768:	2000234c 	.word	0x2000234c

0001476c <k_sleep>:

void k_sleep(s32_t duration)
{
   1476c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT(duration != K_FOREVER, "");

	K_DEBUG("thread %p for %d ns\n", _current, duration);

	/* wait of 0 ms is treated as a 'yield' */
	if (duration == 0) {
   1476e:	2800      	cmp	r0, #0
   14770:	d102      	bne.n	14778 <k_sleep+0xc>
		k_yield();
   14772:	f7ff ffdf 	bl	14734 <k_yield>
		return;
   14776:	e019      	b.n	147ac <k_sleep+0x40>
	}

	ticks = _TICK_ALIGN + _ms_to_ticks(duration);
   14778:	210a      	movs	r1, #10
   1477a:	3009      	adds	r0, #9
   1477c:	f7eb fd10 	bl	1a0 <__aeabi_uidiv>
   14780:	3001      	adds	r0, #1
   14782:	9001      	str	r0, [sp, #4]
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
   14784:	f3ef 8510 	mrs	r5, PRIMASK
   14788:	b672      	cpsid	i
	key = irq_lock();

	_remove_thread_from_ready_q(_current);
   1478a:	4c09      	ldr	r4, [pc, #36]	; (147b0 <k_sleep+0x44>)
   1478c:	68a0      	ldr	r0, [r4, #8]
   1478e:	f7ff ff05 	bl	1459c <_remove_thread_from_ready_q>
	_add_thread_timeout(_current, NULL, ticks);
   14792:	68a0      	ldr	r0, [r4, #8]
   14794:	9b01      	ldr	r3, [sp, #4]
   14796:	0001      	movs	r1, r0
   14798:	2200      	movs	r2, #0
   1479a:	3110      	adds	r1, #16
   1479c:	f7ff fea8 	bl	144f0 <_add_timeout>
	if (!remaining || (_time_slice_duration < remaining)) {
		_set_time(_time_slice_duration);
	}
#endif
	/* Restart time slice count at new thread switch */
	_time_slice_elapsed = 0;
   147a0:	2200      	movs	r2, #0
   147a2:	4b04      	ldr	r3, [pc, #16]	; (147b4 <k_sleep+0x48>)
   147a4:	0028      	movs	r0, r5
   147a6:	601a      	str	r2, [r3, #0]
   147a8:	f7ff f818 	bl	137dc <__swap>
	_remove_thread_from_ready_q(_current);
	_add_thread_timeout(_current, NULL, ticks);

	_Swap(key);
#endif
}
   147ac:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
   147ae:	46c0      	nop			; (mov r8, r8)
   147b0:	20002114 	.word	0x20002114
   147b4:	2000234c 	.word	0x2000234c

000147b8 <k_current_get>:
	}
}

k_tid_t k_current_get(void)
{
	return _current;
   147b8:	4b01      	ldr	r3, [pc, #4]	; (147c0 <k_current_get+0x8>)
   147ba:	6898      	ldr	r0, [r3, #8]
}
   147bc:	4770      	bx	lr
   147be:	46c0      	nop			; (mov r8, r8)
   147c0:	20002114 	.word	0x20002114

000147c4 <_is_thread_time_slicing>:
	 * Should not be the idle thread
	 * Priority should be higher than time slice priority ceiling
	 * There should be multiple threads active with same priority
	 */

	if (!(_time_slice_duration > 0) || (_is_idle_thread_ptr(thread))
   147c4:	4b10      	ldr	r3, [pc, #64]	; (14808 <_is_thread_time_slicing+0x44>)
	_time_slice_elapsed = 0;
	_time_slice_prio_ceiling = prio;
}

int _is_thread_time_slicing(struct k_thread *thread)
{
   147c6:	b082      	sub	sp, #8
	 * Should not be the idle thread
	 * Priority should be higher than time slice priority ceiling
	 * There should be multiple threads active with same priority
	 */

	if (!(_time_slice_duration > 0) || (_is_idle_thread_ptr(thread))
   147c8:	681a      	ldr	r2, [r3, #0]
	    || _is_prio_higher(thread->base.prio, _time_slice_prio_ceiling)) {
		return 0;
   147ca:	2300      	movs	r3, #0
	 * Should not be the idle thread
	 * Priority should be higher than time slice priority ceiling
	 * There should be multiple threads active with same priority
	 */

	if (!(_time_slice_duration > 0) || (_is_idle_thread_ptr(thread))
   147cc:	429a      	cmp	r2, r3
   147ce:	dd17      	ble.n	14800 <_is_thread_time_slicing+0x3c>
	return entry_point == idle;
}

static inline int _is_idle_thread_ptr(k_tid_t thread)
{
	return thread == _idle_thread;
   147d0:	4b0e      	ldr	r3, [pc, #56]	; (1480c <_is_thread_time_slicing+0x48>)
   147d2:	681b      	ldr	r3, [r3, #0]
   147d4:	9301      	str	r3, [sp, #4]
   147d6:	9a01      	ldr	r2, [sp, #4]
	    || _is_prio_higher(thread->base.prio, _time_slice_prio_ceiling)) {
		return 0;
   147d8:	2300      	movs	r3, #0
	 * Should not be the idle thread
	 * Priority should be higher than time slice priority ceiling
	 * There should be multiple threads active with same priority
	 */

	if (!(_time_slice_duration > 0) || (_is_idle_thread_ptr(thread))
   147da:	4290      	cmp	r0, r2
   147dc:	d010      	beq.n	14800 <_is_thread_time_slicing+0x3c>
	    || _is_prio_higher(thread->base.prio, _time_slice_prio_ceiling)) {
   147de:	220a      	movs	r2, #10
   147e0:	4b0b      	ldr	r3, [pc, #44]	; (14810 <_is_thread_time_slicing+0x4c>)
   147e2:	5682      	ldrsb	r2, [r0, r2]
   147e4:	6819      	ldr	r1, [r3, #0]
		return 0;
   147e6:	2300      	movs	r3, #0
	 * Priority should be higher than time slice priority ceiling
	 * There should be multiple threads active with same priority
	 */

	if (!(_time_slice_duration > 0) || (_is_idle_thread_ptr(thread))
	    || _is_prio_higher(thread->base.prio, _time_slice_prio_ceiling)) {
   147e8:	428a      	cmp	r2, r1
   147ea:	db09      	blt.n	14800 <_is_thread_time_slicing+0x3c>
 * @return 1 if multiple nodes, 0 otherwise
 */

static inline int sys_dlist_has_multiple_nodes(sys_dlist_t *list)
{
	return list->head != list->tail;
   147ec:	0013      	movs	r3, r2
   147ee:	4909      	ldr	r1, [pc, #36]	; (14814 <_is_thread_time_slicing+0x50>)
   147f0:	3314      	adds	r3, #20
   147f2:	00db      	lsls	r3, r3, #3
   147f4:	18ca      	adds	r2, r1, r3
   147f6:	6850      	ldr	r0, [r2, #4]
   147f8:	585b      	ldr	r3, [r3, r1]
   147fa:	1a1b      	subs	r3, r3, r0
   147fc:	1e58      	subs	r0, r3, #1
   147fe:	4183      	sbcs	r3, r0

	int q_index = _get_ready_q_q_index(thread->base.prio);
	sys_dlist_t *q = &_ready_q.q[q_index];

	return sys_dlist_has_multiple_nodes(q);
}
   14800:	0018      	movs	r0, r3
   14802:	b002      	add	sp, #8
   14804:	4770      	bx	lr
   14806:	46c0      	nop			; (mov r8, r8)
   14808:	20002238 	.word	0x20002238
   1480c:	00018858 	.word	0x00018858
   14810:	20002234 	.word	0x20002234
   14814:	20002114 	.word	0x20002114

00014818 <_update_time_slice_before_swap>:
	if (!remaining || (_time_slice_duration < remaining)) {
		_set_time(_time_slice_duration);
	}
#endif
	/* Restart time slice count at new thread switch */
	_time_slice_elapsed = 0;
   14818:	2200      	movs	r2, #0
   1481a:	4b01      	ldr	r3, [pc, #4]	; (14820 <_update_time_slice_before_swap+0x8>)
   1481c:	601a      	str	r2, [r3, #0]
}
   1481e:	4770      	bx	lr
   14820:	2000234c 	.word	0x2000234c

00014824 <_ready_thread>:
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   14824:	7a43      	ldrb	r3, [r0, #9]
   14826:	2204      	movs	r2, #4
   14828:	0019      	movs	r1, r3
   1482a:	4391      	bics	r1, r2
}

/* check if a thread is ready */
static inline int _is_thread_ready(struct k_thread *thread)
{
	return !(_is_thread_prevented_from_running(thread) ||
   1482c:	221b      	movs	r2, #27
 * blocked for another reason (eg. suspended).
 *
 * Must be called with interrupts locked.
 */
static inline void _ready_thread(struct k_thread *thread)
{
   1482e:	b510      	push	{r4, lr}
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   14830:	7241      	strb	r1, [r0, #9]
}

/* check if a thread is ready */
static inline int _is_thread_ready(struct k_thread *thread)
{
	return !(_is_thread_prevented_from_running(thread) ||
   14832:	4213      	tst	r3, r2
   14834:	d104      	bne.n	14840 <_ready_thread+0x1c>
   14836:	6a03      	ldr	r3, [r0, #32]
   14838:	3301      	adds	r3, #1
   1483a:	d101      	bne.n	14840 <_ready_thread+0x1c>

	/* needed to handle the start-with-delay case */
	_mark_thread_as_started(thread);

	if (_is_thread_ready(thread)) {
		_add_thread_to_ready_q(thread);
   1483c:	f7ff fe86 	bl	1454c <_add_thread_to_ready_q>
	}

#ifdef CONFIG_KERNEL_EVENT_LOGGER_THREAD
	_sys_k_event_logger_thread_ready(thread);
#endif
}
   14840:	bd10      	pop	{r4, pc}
	...

00014844 <_unpend_first_thread>:
_find_first_thread_to_unpend(_wait_q_t *wait_q, struct k_thread *from)
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	extern volatile int _handling_timeouts;

	if (_handling_timeouts) {
   14844:	4b14      	ldr	r3, [pc, #80]	; (14898 <_unpend_first_thread+0x54>)
}

/* unpend the first thread from a wait queue */
/* must be called with interrupts locked */
static inline struct k_thread *_unpend_first_thread(_wait_q_t *wait_q)
{
   14846:	0001      	movs	r1, r0
_find_first_thread_to_unpend(_wait_q_t *wait_q, struct k_thread *from)
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	extern volatile int _handling_timeouts;

	if (_handling_timeouts) {
   14848:	681b      	ldr	r3, [r3, #0]
   1484a:	6802      	ldr	r2, [r0, #0]
   1484c:	2b00      	cmp	r3, #0
   1484e:	d00f      	beq.n	14870 <_unpend_first_thread+0x2c>
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   14850:	0013      	movs	r3, r2
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14852:	2000      	movs	r0, #0
   14854:	4291      	cmp	r1, r2
   14856:	d01d      	beq.n	14894 <_unpend_first_thread+0x50>
		sys_dlist_t *q = (sys_dlist_t *)wait_q;
		sys_dnode_t *cur = from ? &from->base.k_q_node : NULL;

		/* skip threads that have an expired timeout */
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
   14858:	2b00      	cmp	r3, #0
   1485a:	d007      	beq.n	1486c <_unpend_first_thread+0x28>
			struct k_thread *thread = (struct k_thread *)cur;

			if (_is_thread_timeout_expired(thread)) {
   1485c:	6a1a      	ldr	r2, [r3, #32]
   1485e:	3202      	adds	r2, #2
   14860:	d10c      	bne.n	1487c <_unpend_first_thread+0x38>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   14862:	684a      	ldr	r2, [r1, #4]
   14864:	429a      	cmp	r2, r3
   14866:	d014      	beq.n	14892 <_unpend_first_thread+0x4e>
   14868:	681b      	ldr	r3, [r3, #0]
   1486a:	e7f5      	b.n	14858 <_unpend_first_thread+0x14>
	if (_handling_timeouts) {
		sys_dlist_t *q = (sys_dlist_t *)wait_q;
		sys_dnode_t *cur = from ? &from->base.k_q_node : NULL;

		/* skip threads that have an expired timeout */
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
   1486c:	0018      	movs	r0, r3
   1486e:	e011      	b.n	14894 <_unpend_first_thread+0x50>
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14870:	0018      	movs	r0, r3
   14872:	4291      	cmp	r1, r2
   14874:	d00e      	beq.n	14894 <_unpend_first_thread+0x50>
   14876:	1e10      	subs	r0, r2, #0
/* must be called with interrupts locked */
static inline struct k_thread *_unpend_first_thread(_wait_q_t *wait_q)
{
	struct k_thread *thread = _find_first_thread_to_unpend(wait_q, NULL);

	if (thread) {
   14878:	d101      	bne.n	1487e <_unpend_first_thread+0x3a>
   1487a:	e00b      	b.n	14894 <_unpend_first_thread+0x50>

		/* skip threads that have an expired timeout */
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
			struct k_thread *thread = (struct k_thread *)cur;

			if (_is_thread_timeout_expired(thread)) {
   1487c:	0018      	movs	r0, r3
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   1487e:	6843      	ldr	r3, [r0, #4]
   14880:	6802      	ldr	r2, [r0, #0]
   14882:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   14884:	6802      	ldr	r2, [r0, #0]
   14886:	6053      	str	r3, [r2, #4]
}

/* mark a thread as not pending in its TCS */
static inline void _mark_thread_as_not_pending(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PENDING;
   14888:	2202      	movs	r2, #2
   1488a:	7a43      	ldrb	r3, [r0, #9]
   1488c:	4393      	bics	r3, r2
   1488e:	7243      	strb	r3, [r0, #9]
   14890:	e000      	b.n	14894 <_unpend_first_thread+0x50>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   14892:	2000      	movs	r0, #0
	if (thread) {
		_unpend_thread(thread);
	}

	return thread;
}
   14894:	4770      	bx	lr
   14896:	46c0      	nop			; (mov r8, r8)
   14898:	20002348 	.word	0x20002348

0001489c <_abort_timeout>:
	}
}

/* returns _INACTIVE if the timer is not active */
static inline int _abort_timeout(struct _timeout *timeout)
{
   1489c:	0003      	movs	r3, r0
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   1489e:	6900      	ldr	r0, [r0, #16]
   148a0:	1c42      	adds	r2, r0, #1
   148a2:	d010      	beq.n	148c6 <_abort_timeout+0x2a>
   148a4:	4a08      	ldr	r2, [pc, #32]	; (148c8 <_abort_timeout+0x2c>)
		return _INACTIVE;
	}

	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   148a6:	6912      	ldr	r2, [r2, #16]
   148a8:	4293      	cmp	r3, r2
   148aa:	d003      	beq.n	148b4 <_abort_timeout+0x18>
   148ac:	681a      	ldr	r2, [r3, #0]
		sys_dnode_t *next_node =
			sys_dlist_peek_next(&_timeout_q, &timeout->node);
		struct _timeout *next = (struct _timeout *)next_node;

		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   148ae:	6911      	ldr	r1, [r2, #16]
   148b0:	1808      	adds	r0, r1, r0
   148b2:	6110      	str	r0, [r2, #16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   148b4:	685a      	ldr	r2, [r3, #4]
   148b6:	6819      	ldr	r1, [r3, #0]
	}
	sys_dlist_remove(&timeout->node);
	timeout->delta_ticks_from_prev = _INACTIVE;

	return 0;
   148b8:	2000      	movs	r0, #0
   148ba:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
   148bc:	6819      	ldr	r1, [r3, #0]
   148be:	604a      	str	r2, [r1, #4]
		struct _timeout *next = (struct _timeout *)next_node;

		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
	}
	sys_dlist_remove(&timeout->node);
	timeout->delta_ticks_from_prev = _INACTIVE;
   148c0:	2201      	movs	r2, #1
   148c2:	4252      	negs	r2, r2
   148c4:	611a      	str	r2, [r3, #16]

	return 0;
}
   148c6:	4770      	bx	lr
   148c8:	20002114 	.word	0x20002114

000148cc <k_sem_init>:

	sem->count = initial_count;
	sem->limit = limit;
	sys_dlist_init(&sem->wait_q);

	_INIT_OBJ_POLL_EVENT(sem);
   148cc:	2300      	movs	r3, #0
void k_sem_init(struct k_sem *sem, unsigned int initial_count,
		unsigned int limit)
{
	__ASSERT(limit != 0, "limit cannot be zero");

	sem->count = initial_count;
   148ce:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
   148d0:	60c2      	str	r2, [r0, #12]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   148d2:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   148d4:	6040      	str	r0, [r0, #4]
	sys_dlist_init(&sem->wait_q);

	_INIT_OBJ_POLL_EVENT(sem);
   148d6:	6103      	str	r3, [r0, #16]

	SYS_TRACING_OBJ_INIT(k_sem, sem);
}
   148d8:	4770      	bx	lr
	...

000148dc <k_sem_give>:
	_ready_thread(thread);
	_set_thread_return_value(thread, 0);
}

void k_sem_give(struct k_sem *sem)
{
   148dc:	b570      	push	{r4, r5, r6, lr}
   148de:	0004      	movs	r4, r0
   148e0:	f3ef 8510 	mrs	r5, PRIMASK
   148e4:	b672      	cpsid	i
}

/* returns 1 if _Swap() will need to be invoked, 0 otherwise */
static int do_sem_give(struct k_sem *sem)
{
	struct k_thread *thread = _unpend_first_thread(&sem->wait_q);
   148e6:	f7ff ffad 	bl	14844 <_unpend_first_thread>
   148ea:	1e06      	subs	r6, r0, #0

	if (!thread) {
   148ec:	d116      	bne.n	1491c <k_sem_give+0x40>
#endif
}

static inline void increment_count_up_to_limit(struct k_sem *sem)
{
	sem->count += (sem->count != sem->limit);
   148ee:	68a2      	ldr	r2, [r4, #8]
   148f0:	68e3      	ldr	r3, [r4, #12]
   148f2:	1a9b      	subs	r3, r3, r2
   148f4:	1e59      	subs	r1, r3, #1
   148f6:	418b      	sbcs	r3, r1
   148f8:	189b      	adds	r3, r3, r2
   148fa:	60a3      	str	r3, [r4, #8]
{
#ifdef CONFIG_POLL
	u32_t state = K_POLL_STATE_SEM_AVAILABLE;

	return sem->poll_event ?
	       _handle_obj_poll_event(&sem->poll_event, state) : 0;
   148fc:	6923      	ldr	r3, [r4, #16]
   148fe:	2b00      	cmp	r3, #0
   14900:	d022      	beq.n	14948 <k_sem_give+0x6c>
   14902:	0020      	movs	r0, r4
   14904:	2104      	movs	r1, #4
   14906:	3010      	adds	r0, #16
   14908:	f7ff fc92 	bl	14230 <_handle_obj_poll_event>
{
	unsigned int key;

	key = irq_lock();

	if (do_sem_give(sem)) {
   1490c:	2800      	cmp	r0, #0
   1490e:	d01b      	beq.n	14948 <k_sem_give+0x6c>

#ifdef CONFIG_STACK_SENTINEL
	_check_stack_sentinel();
#endif
#ifdef CONFIG_TIMESLICING
	_update_time_slice_before_swap();
   14910:	f7ff ff82 	bl	14818 <_update_time_slice_before_swap>
#endif

	return __swap(key);
   14914:	0028      	movs	r0, r5
   14916:	f7fe ff61 	bl	137dc <__swap>
   1491a:	e018      	b.n	1494e <k_sem_give+0x72>

/* returns _INACTIVE if the timer has already expired */
static inline int _abort_thread_timeout(struct k_thread *thread)
{
	return _abort_timeout(&thread->base.timeout);
   1491c:	3010      	adds	r0, #16
   1491e:	f7ff ffbd 	bl	1489c <_abort_timeout>
	if (!thread) {
		increment_count_up_to_limit(sem);
		return handle_poll_event(sem);
	}
	(void)_abort_thread_timeout(thread);
	_ready_thread(thread);
   14922:	0030      	movs	r0, r6
   14924:	f7ff ff7e 	bl	14824 <_ready_thread>
   14928:	2300      	movs	r3, #0
   1492a:	65f3      	str	r3, [r6, #92]	; 0x5c
   1492c:	f3ef 8305 	mrs	r3, IPSR
   14930:	2b0d      	cmp	r3, #13
   14932:	d809      	bhi.n	14948 <k_sem_give+0x6c>
   14934:	2b03      	cmp	r3, #3
   14936:	d007      	beq.n	14948 <k_sem_give+0x6c>
 * Checks if current thread must be context-switched out. The caller must
 * already know that the execution context is a thread.
 */
static inline int _must_switch_threads(void)
{
	return _is_preempt(_current) && __must_switch_threads();
   14938:	4b05      	ldr	r3, [pc, #20]	; (14950 <k_sem_give+0x74>)
   1493a:	689b      	ldr	r3, [r3, #8]
   1493c:	895b      	ldrh	r3, [r3, #10]
   1493e:	2b7f      	cmp	r3, #127	; 0x7f
   14940:	d802      	bhi.n	14948 <k_sem_give+0x6c>
   14942:	f7ff fe9b 	bl	1467c <__must_switch_threads>
   14946:	e7e1      	b.n	1490c <k_sem_give+0x30>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   14948:	2d00      	cmp	r5, #0
   1494a:	d100      	bne.n	1494e <k_sem_give+0x72>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   1494c:	b662      	cpsie	i
	if (do_sem_give(sem)) {
		_Swap(key);
	} else {
		irq_unlock(key);
	}
}
   1494e:	bd70      	pop	{r4, r5, r6, pc}
   14950:	20002114 	.word	0x20002114

00014954 <k_sem_take>:

int k_sem_take(struct k_sem *sem, s32_t timeout)
{
   14954:	b510      	push	{r4, lr}
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
   14956:	f3ef 8410 	mrs	r4, PRIMASK
   1495a:	b672      	cpsid	i
	__ASSERT(!_is_in_isr() || timeout == K_NO_WAIT, "");

	unsigned int key = irq_lock();

	if (likely(sem->count > 0)) {
   1495c:	6883      	ldr	r3, [r0, #8]
   1495e:	2b00      	cmp	r3, #0
   14960:	d006      	beq.n	14970 <k_sem_take+0x1c>
		sem->count--;
   14962:	3b01      	subs	r3, #1
   14964:	6083      	str	r3, [r0, #8]
		irq_unlock(key);
		return 0;
   14966:	2000      	movs	r0, #0
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   14968:	4284      	cmp	r4, r0
   1496a:	d111      	bne.n	14990 <k_sem_take+0x3c>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   1496c:	b662      	cpsie	i
   1496e:	e00f      	b.n	14990 <k_sem_take+0x3c>
	}

	if (timeout == K_NO_WAIT) {
   14970:	2900      	cmp	r1, #0
   14972:	d103      	bne.n	1497c <k_sem_take+0x28>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   14974:	2c00      	cmp	r4, #0
   14976:	d109      	bne.n	1498c <k_sem_take+0x38>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   14978:	b662      	cpsie	i
   1497a:	e007      	b.n	1498c <k_sem_take+0x38>
		irq_unlock(key);
		return -EBUSY;
	}

	_pend_current_thread(&sem->wait_q, timeout);
   1497c:	f7ff fe6e 	bl	1465c <_pend_current_thread>

#ifdef CONFIG_STACK_SENTINEL
	_check_stack_sentinel();
#endif
#ifdef CONFIG_TIMESLICING
	_update_time_slice_before_swap();
   14980:	f7ff ff4a 	bl	14818 <_update_time_slice_before_swap>
#endif

	return __swap(key);
   14984:	0020      	movs	r0, r4
   14986:	f7fe ff29 	bl	137dc <__swap>

	return _Swap(key);
   1498a:	e001      	b.n	14990 <k_sem_take+0x3c>
		return 0;
	}

	if (timeout == K_NO_WAIT) {
		irq_unlock(key);
		return -EBUSY;
   1498c:	2010      	movs	r0, #16
   1498e:	4240      	negs	r0, r0
	}

	_pend_current_thread(&sem->wait_q, timeout);

	return _Swap(key);
}
   14990:	bd10      	pop	{r4, pc}
	...

00014994 <_tick_get>:
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
   14994:	f3ef 8310 	mrs	r3, PRIMASK
   14998:	b672      	cpsid	i
	unsigned int imask = irq_lock();

#ifdef CONFIG_TICKLESS_KERNEL
	tmp_sys_clock_tick_count = _get_elapsed_clock_time();
#else
	tmp_sys_clock_tick_count = _sys_clock_tick_count;
   1499a:	4a03      	ldr	r2, [pc, #12]	; (149a8 <_tick_get+0x14>)
   1499c:	6810      	ldr	r0, [r2, #0]
   1499e:	6851      	ldr	r1, [r2, #4]
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   149a0:	2b00      	cmp	r3, #0
   149a2:	d100      	bne.n	149a6 <_tick_get+0x12>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   149a4:	b662      	cpsie	i
#endif
	irq_unlock(imask);
	return tmp_sys_clock_tick_count;
}
   149a6:	4770      	bx	lr
   149a8:	20002350 	.word	0x20002350

000149ac <k_uptime_get>:
FUNC_ALIAS(_tick_get, sys_tick_get, s64_t);

s64_t k_uptime_get(void)
{
   149ac:	b510      	push	{r4, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	__ASSERT(_sys_clock_always_on,
		 "Call k_enable_sys_clock_always_on to use clock API");
#endif
	return __ticks_to_ms(_tick_get());
   149ae:	f7ff fff1 	bl	14994 <_tick_get>
   149b2:	220a      	movs	r2, #10
   149b4:	2300      	movs	r3, #0
   149b6:	f7eb fd89 	bl	4cc <__aeabi_lmul>
}
   149ba:	bd10      	pop	{r4, pc}

000149bc <_nano_sys_clock_tick_announce>:
 * timers that have expired and wake up the threads pending on them.
 *
 * @return N/A
 */
void _nano_sys_clock_tick_announce(s32_t ticks)
{
   149bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   149be:	b085      	sub	sp, #20
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
   149c0:	f3ef 8410 	mrs	r4, PRIMASK
   149c4:	b672      	cpsid	i

	K_DEBUG("ticks: %d\n", ticks);

	/* 64-bit value, ensure atomic access with irq lock */
	key = irq_lock();
	_sys_clock_tick_count += ticks;
   149c6:	495a      	ldr	r1, [pc, #360]	; (14b30 <_nano_sys_clock_tick_announce+0x174>)
   149c8:	17c3      	asrs	r3, r0, #31
   149ca:	9301      	str	r3, [sp, #4]
   149cc:	9000      	str	r0, [sp, #0]
   149ce:	680a      	ldr	r2, [r1, #0]
   149d0:	684b      	ldr	r3, [r1, #4]
   149d2:	9d00      	ldr	r5, [sp, #0]
   149d4:	9e01      	ldr	r6, [sp, #4]
   149d6:	1952      	adds	r2, r2, r5
   149d8:	4173      	adcs	r3, r6
   149da:	600a      	str	r2, [r1, #0]
   149dc:	604b      	str	r3, [r1, #4]
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   149de:	2c00      	cmp	r4, #0
   149e0:	d100      	bne.n	149e4 <_nano_sys_clock_tick_announce+0x28>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   149e2:	b662      	cpsie	i
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   149e4:	aa02      	add	r2, sp, #8
   149e6:	9202      	str	r2, [sp, #8]
	list->tail = (sys_dnode_t *)list;
   149e8:	6052      	str	r2, [r2, #4]
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
   149ea:	f3ef 8610 	mrs	r6, PRIMASK
   149ee:	b672      	cpsid	i
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   149f0:	4d50      	ldr	r5, [pc, #320]	; (14b34 <_nano_sys_clock_tick_announce+0x178>)
   149f2:	4c51      	ldr	r4, [pc, #324]	; (14b38 <_nano_sys_clock_tick_announce+0x17c>)
   149f4:	68eb      	ldr	r3, [r5, #12]
   149f6:	0031      	movs	r1, r6
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   149f8:	42a3      	cmp	r3, r4
   149fa:	d001      	beq.n	14a00 <_nano_sys_clock_tick_announce+0x44>
		(struct _timeout *)sys_dlist_peek_head(&_timeout_q);

	K_DEBUG("head: %p, delta: %d\n",
		head, head ? head->delta_ticks_from_prev : -2112);

	if (!head) {
   149fc:	2b00      	cmp	r3, #0
   149fe:	d103      	bne.n	14a08 <_nano_sys_clock_tick_announce+0x4c>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   14a00:	2e00      	cmp	r6, #0
   14a02:	d171      	bne.n	14ae8 <_nano_sys_clock_tick_announce+0x12c>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   14a04:	b662      	cpsie	i
   14a06:	e06f      	b.n	14ae8 <_nano_sys_clock_tick_announce+0x12c>
		irq_unlock(key);
		return;
	}

	head->delta_ticks_from_prev -= ticks;
   14a08:	691e      	ldr	r6, [r3, #16]
   14a0a:	1a30      	subs	r0, r6, r0
	 * prohibited.
	 */
	sys_dnode_t *next = &head->node;
	struct _timeout *timeout = (struct _timeout *)next;

	_handling_timeouts = 1;
   14a0c:	2601      	movs	r6, #1
	if (!head) {
		irq_unlock(key);
		return;
	}

	head->delta_ticks_from_prev -= ticks;
   14a0e:	6118      	str	r0, [r3, #16]
	 * prohibited.
	 */
	sys_dnode_t *next = &head->node;
	struct _timeout *timeout = (struct _timeout *)next;

	_handling_timeouts = 1;
   14a10:	484a      	ldr	r0, [pc, #296]	; (14b3c <_nano_sys_clock_tick_announce+0x180>)
   14a12:	6006      	str	r6, [r0, #0]
		 * expired queue, they end up being processed in the same order
		 * they were added, time-wise.
		 */
		sys_dlist_prepend(&expired, next);

		timeout->delta_ticks_from_prev = _EXPIRED;
   14a14:	3e03      	subs	r6, #3
	sys_dnode_t *next = &head->node;
	struct _timeout *timeout = (struct _timeout *)next;

	_handling_timeouts = 1;

	while (timeout && timeout->delta_ticks_from_prev == 0) {
   14a16:	6918      	ldr	r0, [r3, #16]
   14a18:	2800      	cmp	r0, #0
   14a1a:	d116      	bne.n	14a4a <_nano_sys_clock_tick_announce+0x8e>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   14a1c:	681f      	ldr	r7, [r3, #0]
   14a1e:	6858      	ldr	r0, [r3, #4]
   14a20:	6007      	str	r7, [r0, #0]
	node->next->prev = node->prev;
   14a22:	681f      	ldr	r7, [r3, #0]
   14a24:	6078      	str	r0, [r7, #4]
 * @return N/A
 */

static inline void sys_dlist_prepend(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list->head;
   14a26:	6810      	ldr	r0, [r2, #0]
	node->prev = list;
   14a28:	605a      	str	r2, [r3, #4]
 * @return N/A
 */

static inline void sys_dlist_prepend(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list->head;
   14a2a:	6018      	str	r0, [r3, #0]
	node->prev = list;

	list->head->prev = node;
   14a2c:	6810      	ldr	r0, [r2, #0]
	list->head = node;
   14a2e:	6013      	str	r3, [r2, #0]
static inline void sys_dlist_prepend(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list->head;
	node->prev = list;

	list->head->prev = node;
   14a30:	6043      	str	r3, [r0, #4]
		 * expired queue, they end up being processed in the same order
		 * they were added, time-wise.
		 */
		sys_dlist_prepend(&expired, next);

		timeout->delta_ticks_from_prev = _EXPIRED;
   14a32:	611e      	str	r6, [r3, #16]
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   14a34:	2900      	cmp	r1, #0
   14a36:	d100      	bne.n	14a3a <_nano_sys_clock_tick_announce+0x7e>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   14a38:	b662      	cpsie	i
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
   14a3a:	f3ef 8110 	mrs	r1, PRIMASK
   14a3e:	b672      	cpsid	i
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   14a40:	68eb      	ldr	r3, [r5, #12]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14a42:	42a3      	cmp	r3, r4
   14a44:	d001      	beq.n	14a4a <_nano_sys_clock_tick_announce+0x8e>
	sys_dnode_t *next = &head->node;
	struct _timeout *timeout = (struct _timeout *)next;

	_handling_timeouts = 1;

	while (timeout && timeout->delta_ticks_from_prev == 0) {
   14a46:	2b00      	cmp	r3, #0
   14a48:	d1e5      	bne.n	14a16 <_nano_sys_clock_tick_announce+0x5a>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   14a4a:	2900      	cmp	r1, #0
   14a4c:	d100      	bne.n	14a50 <_nano_sys_clock_tick_announce+0x94>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   14a4e:	b662      	cpsie	i
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   14a50:	9b02      	ldr	r3, [sp, #8]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14a52:	4293      	cmp	r3, r2
   14a54:	d103      	bne.n	14a5e <_nano_sys_clock_tick_announce+0xa2>

	irq_unlock(key);

	_handle_expired_timeouts(&expired);

	_handling_timeouts = 0;
   14a56:	2200      	movs	r2, #0
   14a58:	4b38      	ldr	r3, [pc, #224]	; (14b3c <_nano_sys_clock_tick_announce+0x180>)
   14a5a:	601a      	str	r2, [r3, #0]
   14a5c:	e044      	b.n	14ae8 <_nano_sys_clock_tick_announce+0x12c>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   14a5e:	2b00      	cmp	r3, #0
   14a60:	d0f9      	beq.n	14a56 <_nano_sys_clock_tick_announce+0x9a>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   14a62:	9a03      	ldr	r2, [sp, #12]
   14a64:	2400      	movs	r4, #0
   14a66:	4293      	cmp	r3, r2
   14a68:	d000      	beq.n	14a6c <_nano_sys_clock_tick_announce+0xb0>
   14a6a:	681c      	ldr	r4, [r3, #0]
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   14a6c:	2704      	movs	r7, #4
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   14a6e:	6819      	ldr	r1, [r3, #0]
   14a70:	685a      	ldr	r2, [r3, #4]
   14a72:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
   14a74:	6819      	ldr	r1, [r3, #0]
   14a76:	604a      	str	r2, [r1, #4]
 * kept as -EAGAIN, set previously in _Swap().
 */

static inline void _handle_one_expired_timeout(struct _timeout *timeout)
{
	struct k_thread *thread = timeout->thread;
   14a78:	6898      	ldr	r0, [r3, #8]
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
   14a7a:	f3ef 8610 	mrs	r6, PRIMASK
   14a7e:	b672      	cpsid	i
	unsigned int key = irq_lock();

	timeout->delta_ticks_from_prev = _INACTIVE;
   14a80:	2201      	movs	r2, #1
   14a82:	4252      	negs	r2, r2
   14a84:	611a      	str	r2, [r3, #16]

	K_DEBUG("timeout %p\n", timeout);
	if (thread) {
   14a86:	2800      	cmp	r0, #0
   14a88:	d01b      	beq.n	14ac2 <_nano_sys_clock_tick_announce+0x106>
/* remove a thread timing out from kernel object's wait queue */

static inline void _unpend_thread_timing_out(struct k_thread *thread,
					     struct _timeout *timeout_obj)
{
	if (timeout_obj->wait_q) {
   14a8a:	68db      	ldr	r3, [r3, #12]
   14a8c:	2b00      	cmp	r3, #0
   14a8e:	d00a      	beq.n	14aa6 <_nano_sys_clock_tick_announce+0xea>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   14a90:	6843      	ldr	r3, [r0, #4]
   14a92:	6802      	ldr	r2, [r0, #0]
   14a94:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   14a96:	6802      	ldr	r2, [r0, #0]
   14a98:	6053      	str	r3, [r2, #4]
}

/* mark a thread as not pending in its TCS */
static inline void _mark_thread_as_not_pending(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PENDING;
   14a9a:	2202      	movs	r2, #2
   14a9c:	7a43      	ldrb	r3, [r0, #9]
   14a9e:	4393      	bics	r3, r2
   14aa0:	7243      	strb	r3, [r0, #9]
		_unpend_thread(thread);
		thread->base.timeout.wait_q = NULL;
   14aa2:	2300      	movs	r3, #0
   14aa4:	61c3      	str	r3, [r0, #28]
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   14aa6:	7a43      	ldrb	r3, [r0, #9]
   14aa8:	001a      	movs	r2, r3
   14aaa:	43ba      	bics	r2, r7
   14aac:	7242      	strb	r2, [r0, #9]
}

/* check if a thread is ready */
static inline int _is_thread_ready(struct k_thread *thread)
{
	return !(_is_thread_prevented_from_running(thread) ||
   14aae:	221b      	movs	r2, #27
   14ab0:	4213      	tst	r3, r2
   14ab2:	d102      	bne.n	14aba <_nano_sys_clock_tick_announce+0xfe>
   14ab4:	6a03      	ldr	r3, [r0, #32]
   14ab6:	3301      	adds	r3, #1
   14ab8:	d035      	beq.n	14b26 <_nano_sys_clock_tick_announce+0x16a>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   14aba:	2e00      	cmp	r6, #0
   14abc:	d109      	bne.n	14ad2 <_nano_sys_clock_tick_announce+0x116>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   14abe:	b662      	cpsie	i
   14ac0:	e007      	b.n	14ad2 <_nano_sys_clock_tick_announce+0x116>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   14ac2:	2e00      	cmp	r6, #0
   14ac4:	d100      	bne.n	14ac8 <_nano_sys_clock_tick_announce+0x10c>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   14ac6:	b662      	cpsie	i
		_unpend_thread_timing_out(thread, timeout);
		_ready_thread(thread);
		irq_unlock(key);
	} else {
		irq_unlock(key);
		if (timeout->func) {
   14ac8:	695a      	ldr	r2, [r3, #20]
   14aca:	2a00      	cmp	r2, #0
   14acc:	d001      	beq.n	14ad2 <_nano_sys_clock_tick_announce+0x116>
			timeout->func(timeout);
   14ace:	0018      	movs	r0, r3
   14ad0:	4790      	blx	r2
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   14ad2:	2c00      	cmp	r4, #0
   14ad4:	d0bf      	beq.n	14a56 <_nano_sys_clock_tick_announce+0x9a>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   14ad6:	9b03      	ldr	r3, [sp, #12]
   14ad8:	2200      	movs	r2, #0
   14ada:	429c      	cmp	r4, r3
   14adc:	d102      	bne.n	14ae4 <_nano_sys_clock_tick_announce+0x128>
   14ade:	0023      	movs	r3, r4
   14ae0:	0014      	movs	r4, r2
   14ae2:	e7c4      	b.n	14a6e <_nano_sys_clock_tick_announce+0xb2>
   14ae4:	6822      	ldr	r2, [r4, #0]
   14ae6:	e7fa      	b.n	14ade <_nano_sys_clock_tick_announce+0x122>
static void handle_time_slicing(s32_t ticks)
{
#ifdef CONFIG_TICKLESS_KERNEL
	next_ts = 0;
#endif
	if (!_is_thread_time_slicing(_current)) {
   14ae8:	68a8      	ldr	r0, [r5, #8]
   14aea:	f7ff fe6b 	bl	147c4 <_is_thread_time_slicing>
   14aee:	2800      	cmp	r0, #0
   14af0:	d01c      	beq.n	14b2c <_nano_sys_clock_tick_announce+0x170>
		return;
	}

	_time_slice_elapsed += __ticks_to_ms(ticks);
   14af2:	9800      	ldr	r0, [sp, #0]
   14af4:	9901      	ldr	r1, [sp, #4]
   14af6:	220a      	movs	r2, #10
   14af8:	2300      	movs	r3, #0
   14afa:	f7eb fce7 	bl	4cc <__aeabi_lmul>
   14afe:	4b10      	ldr	r3, [pc, #64]	; (14b40 <_nano_sys_clock_tick_announce+0x184>)
   14b00:	681a      	ldr	r2, [r3, #0]
   14b02:	1810      	adds	r0, r2, r0
	if (_time_slice_elapsed >= _time_slice_duration) {
   14b04:	4a0f      	ldr	r2, [pc, #60]	; (14b44 <_nano_sys_clock_tick_announce+0x188>)
#endif
	if (!_is_thread_time_slicing(_current)) {
		return;
	}

	_time_slice_elapsed += __ticks_to_ms(ticks);
   14b06:	6018      	str	r0, [r3, #0]
	if (_time_slice_elapsed >= _time_slice_duration) {
   14b08:	6812      	ldr	r2, [r2, #0]
   14b0a:	4290      	cmp	r0, r2
   14b0c:	db0e      	blt.n	14b2c <_nano_sys_clock_tick_announce+0x170>

		unsigned int key;

		_time_slice_elapsed = 0;
   14b0e:	2200      	movs	r2, #0
   14b10:	601a      	str	r2, [r3, #0]
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
   14b12:	f3ef 8410 	mrs	r4, PRIMASK
   14b16:	b672      	cpsid	i

		key = irq_lock();
		_move_thread_to_end_of_prio_q(_current);
   14b18:	68a8      	ldr	r0, [r5, #8]
   14b1a:	f7ff fde9 	bl	146f0 <_move_thread_to_end_of_prio_q>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   14b1e:	2c00      	cmp	r4, #0
   14b20:	d104      	bne.n	14b2c <_nano_sys_clock_tick_announce+0x170>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   14b22:	b662      	cpsie	i
	if ((!remaining && next_to) || (next_to < remaining)) {
		/* Clears current program if next_to = 0 and remaining > 0 */
		_set_time(next_to);
	}
#endif
}
   14b24:	e002      	b.n	14b2c <_nano_sys_clock_tick_announce+0x170>

	/* needed to handle the start-with-delay case */
	_mark_thread_as_started(thread);

	if (_is_thread_ready(thread)) {
		_add_thread_to_ready_q(thread);
   14b26:	f7ff fd11 	bl	1454c <_add_thread_to_ready_q>
   14b2a:	e7c6      	b.n	14aba <_nano_sys_clock_tick_announce+0xfe>
   14b2c:	b005      	add	sp, #20
   14b2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14b30:	20002350 	.word	0x20002350
   14b34:	20002114 	.word	0x20002114
   14b38:	20002120 	.word	0x20002120
   14b3c:	20002348 	.word	0x20002348
   14b40:	2000234c 	.word	0x2000234c
   14b44:	20002238 	.word	0x20002238

00014b48 <k_sys_work_q_init>:

static int k_sys_work_q_init(struct device *dev)
{
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   14b48:	2301      	movs	r3, #1
   14b4a:	2280      	movs	r2, #128	; 0x80
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
   14b4c:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   14b4e:	4804      	ldr	r0, [pc, #16]	; (14b60 <k_sys_work_q_init+0x18>)
   14b50:	425b      	negs	r3, r3
   14b52:	00d2      	lsls	r2, r2, #3
   14b54:	4903      	ldr	r1, [pc, #12]	; (14b64 <k_sys_work_q_init+0x1c>)
   14b56:	f000 f973 	bl	14e40 <k_work_q_start>
		       sys_work_q_stack,
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);

	return 0;
}
   14b5a:	2000      	movs	r0, #0
   14b5c:	bd10      	pop	{r4, pc}
   14b5e:	46c0      	nop			; (mov r8, r8)
   14b60:	20002358 	.word	0x20002358
   14b64:	20004048 	.word	0x20004048

00014b68 <_is_thread_ready>:
}

/* check if a thread is ready */
static inline int _is_thread_ready(struct k_thread *thread)
{
	return !(_is_thread_prevented_from_running(thread) ||
   14b68:	7a42      	ldrb	r2, [r0, #9]
   14b6a:	2300      	movs	r3, #0
   14b6c:	06d2      	lsls	r2, r2, #27
   14b6e:	d103      	bne.n	14b78 <_is_thread_ready+0x10>
   14b70:	6a03      	ldr	r3, [r0, #32]
   14b72:	3301      	adds	r3, #1
   14b74:	4258      	negs	r0, r3
   14b76:	4143      	adcs	r3, r0
		 _is_thread_timeout_active(thread));
}
   14b78:	0018      	movs	r0, r3
   14b7a:	4770      	bx	lr

00014b7c <start_thread>:
	CODE_UNREACHABLE;
}

#ifdef CONFIG_MULTITHREADING
static void start_thread(struct k_thread *thread)
{
   14b7c:	b570      	push	{r4, r5, r6, lr}
   14b7e:	0004      	movs	r4, r0
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
   14b80:	f3ef 8510 	mrs	r5, PRIMASK
   14b84:	b672      	cpsid	i
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   14b86:	2204      	movs	r2, #4
   14b88:	7a43      	ldrb	r3, [r0, #9]
   14b8a:	4393      	bics	r3, r2
   14b8c:	7243      	strb	r3, [r0, #9]
	int key = irq_lock(); /* protect kernel queues */

	_mark_thread_as_started(thread);

	if (_is_thread_ready(thread)) {
   14b8e:	f7ff ffeb 	bl	14b68 <_is_thread_ready>
   14b92:	2800      	cmp	r0, #0
   14b94:	d011      	beq.n	14bba <start_thread+0x3e>
		_add_thread_to_ready_q(thread);
   14b96:	0020      	movs	r0, r4
   14b98:	f7ff fcd8 	bl	1454c <_add_thread_to_ready_q>
 * Checks if current thread must be context-switched out. The caller must
 * already know that the execution context is a thread.
 */
static inline int _must_switch_threads(void)
{
	return _is_preempt(_current) && __must_switch_threads();
   14b9c:	4b09      	ldr	r3, [pc, #36]	; (14bc4 <start_thread+0x48>)
   14b9e:	689b      	ldr	r3, [r3, #8]
   14ba0:	895b      	ldrh	r3, [r3, #10]
   14ba2:	2b7f      	cmp	r3, #127	; 0x7f
   14ba4:	d809      	bhi.n	14bba <start_thread+0x3e>
   14ba6:	f7ff fd69 	bl	1467c <__must_switch_threads>
   14baa:	2800      	cmp	r0, #0
   14bac:	d005      	beq.n	14bba <start_thread+0x3e>

#ifdef CONFIG_STACK_SENTINEL
	_check_stack_sentinel();
#endif
#ifdef CONFIG_TIMESLICING
	_update_time_slice_before_swap();
   14bae:	f7ff fe33 	bl	14818 <_update_time_slice_before_swap>
#endif

	return __swap(key);
   14bb2:	0028      	movs	r0, r5
   14bb4:	f7fe fe12 	bl	137dc <__swap>
   14bb8:	e002      	b.n	14bc0 <start_thread+0x44>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   14bba:	2d00      	cmp	r5, #0
   14bbc:	d100      	bne.n	14bc0 <start_thread+0x44>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   14bbe:	b662      	cpsie	i
			return;
		}
	}

	irq_unlock(key);
}
   14bc0:	bd70      	pop	{r4, r5, r6, pc}
   14bc2:	46c0      	nop			; (mov r8, r8)
   14bc4:	20002114 	.word	0x20002114

00014bc8 <_abort_timeout>:
	}
}

/* returns _INACTIVE if the timer is not active */
static inline int _abort_timeout(struct _timeout *timeout)
{
   14bc8:	0003      	movs	r3, r0
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   14bca:	6900      	ldr	r0, [r0, #16]
   14bcc:	1c42      	adds	r2, r0, #1
   14bce:	d010      	beq.n	14bf2 <_abort_timeout+0x2a>
   14bd0:	4a08      	ldr	r2, [pc, #32]	; (14bf4 <_abort_timeout+0x2c>)
		return _INACTIVE;
	}

	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   14bd2:	6912      	ldr	r2, [r2, #16]
   14bd4:	4293      	cmp	r3, r2
   14bd6:	d003      	beq.n	14be0 <_abort_timeout+0x18>
   14bd8:	681a      	ldr	r2, [r3, #0]
		sys_dnode_t *next_node =
			sys_dlist_peek_next(&_timeout_q, &timeout->node);
		struct _timeout *next = (struct _timeout *)next_node;

		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   14bda:	6911      	ldr	r1, [r2, #16]
   14bdc:	1808      	adds	r0, r1, r0
   14bde:	6110      	str	r0, [r2, #16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   14be0:	685a      	ldr	r2, [r3, #4]
   14be2:	6819      	ldr	r1, [r3, #0]
	}
	sys_dlist_remove(&timeout->node);
	timeout->delta_ticks_from_prev = _INACTIVE;

	return 0;
   14be4:	2000      	movs	r0, #0
   14be6:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
   14be8:	6819      	ldr	r1, [r3, #0]
   14bea:	604a      	str	r2, [r1, #4]
		struct _timeout *next = (struct _timeout *)next_node;

		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
	}
	sys_dlist_remove(&timeout->node);
	timeout->delta_ticks_from_prev = _INACTIVE;
   14bec:	2201      	movs	r2, #1
   14bee:	4252      	negs	r2, r2
   14bf0:	611a      	str	r2, [r3, #16]

	return 0;
}
   14bf2:	4770      	bx	lr
   14bf4:	20002114 	.word	0x20002114

00014bf8 <schedule_new_thread.part.14>:
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, s32_t delay)
   14bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14bfa:	0004      	movs	r4, r0
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
   14bfc:	f3ef 8510 	mrs	r5, PRIMASK
   14c00:	b672      	cpsid	i
				_wait_q_t *wait_q,
				s32_t timeout_in_ticks)
{
	__ASSERT(timeout_in_ticks > 0, "");

	timeout->delta_ticks_from_prev = timeout_in_ticks;
   14c02:	3109      	adds	r1, #9
   14c04:	0008      	movs	r0, r1
   14c06:	210a      	movs	r1, #10
   14c08:	f7eb faca 	bl	1a0 <__aeabi_uidiv>
	timeout->thread = thread;
	timeout->wait_q = (sys_dlist_t *)wait_q;
   14c0c:	2300      	movs	r3, #0
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   14c0e:	4a17      	ldr	r2, [pc, #92]	; (14c6c <schedule_new_thread.part.14+0x74>)
   14c10:	61e3      	str	r3, [r4, #28]
   14c12:	4e17      	ldr	r6, [pc, #92]	; (14c70 <schedule_new_thread.part.14+0x78>)
   14c14:	68d3      	ldr	r3, [r2, #12]
				_wait_q_t *wait_q,
				s32_t timeout_in_ticks)
{
	__ASSERT(timeout_in_ticks > 0, "");

	timeout->delta_ticks_from_prev = timeout_in_ticks;
   14c16:	3001      	adds	r0, #1
   14c18:	6220      	str	r0, [r4, #32]
	timeout->thread = thread;
   14c1a:	61a4      	str	r4, [r4, #24]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14c1c:	42b3      	cmp	r3, r6
   14c1e:	d107      	bne.n	14c30 <schedule_new_thread.part.14+0x38>
		}

		*delta -= in_q->delta_ticks_from_prev;
	}

	sys_dlist_append(&_timeout_q, &timeout->node);
   14c20:	0023      	movs	r3, r4
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
   14c22:	6126      	str	r6, [r4, #16]
	node->prev = list->tail;
   14c24:	6911      	ldr	r1, [r2, #16]
   14c26:	3310      	adds	r3, #16
   14c28:	6161      	str	r1, [r4, #20]

	list->tail->next = node;
   14c2a:	600b      	str	r3, [r1, #0]
	list->tail = node;
   14c2c:	6113      	str	r3, [r2, #16]
   14c2e:	e019      	b.n	14c64 <schedule_new_thread.part.14+0x6c>
	if (program_time > 0) {
		*delta += _get_elapsed_program_time();
	}
	adjusted_timeout = *delta;
#endif
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   14c30:	2b00      	cmp	r3, #0
   14c32:	d0f5      	beq.n	14c20 <schedule_new_thread.part.14+0x28>
   14c34:	6917      	ldr	r7, [r2, #16]
		if (*delta <= in_q->delta_ticks_from_prev) {
   14c36:	6a21      	ldr	r1, [r4, #32]
   14c38:	6918      	ldr	r0, [r3, #16]
   14c3a:	4281      	cmp	r1, r0
   14c3c:	dc0a      	bgt.n	14c54 <schedule_new_thread.part.14+0x5c>
			in_q->delta_ticks_from_prev -= *delta;
			sys_dlist_insert_before(&_timeout_q, &in_q->node,
   14c3e:	0022      	movs	r2, r4
	}
	adjusted_timeout = *delta;
#endif
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
		if (*delta <= in_q->delta_ticks_from_prev) {
			in_q->delta_ticks_from_prev -= *delta;
   14c40:	1a41      	subs	r1, r0, r1
   14c42:	6119      	str	r1, [r3, #16]
	sys_dnode_t *insert_point, sys_dnode_t *node)
{
	if (!insert_point) {
		sys_dlist_append(list, node);
	} else {
		node->prev = insert_point->prev;
   14c44:	6859      	ldr	r1, [r3, #4]
		node->next = insert_point;
   14c46:	6123      	str	r3, [r4, #16]
	sys_dnode_t *insert_point, sys_dnode_t *node)
{
	if (!insert_point) {
		sys_dlist_append(list, node);
	} else {
		node->prev = insert_point->prev;
   14c48:	6161      	str	r1, [r4, #20]
		node->next = insert_point;
		insert_point->prev->next = node;
   14c4a:	6859      	ldr	r1, [r3, #4]
			sys_dlist_insert_before(&_timeout_q, &in_q->node,
   14c4c:	3210      	adds	r2, #16
   14c4e:	600a      	str	r2, [r1, #0]
		insert_point->prev = node;
   14c50:	605a      	str	r2, [r3, #4]
   14c52:	e007      	b.n	14c64 <schedule_new_thread.part.14+0x6c>
						&timeout->node);
			goto inserted;
		}

		*delta -= in_q->delta_ticks_from_prev;
   14c54:	1a09      	subs	r1, r1, r0
   14c56:	6221      	str	r1, [r4, #32]
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   14c58:	42bb      	cmp	r3, r7
   14c5a:	d0e1      	beq.n	14c20 <schedule_new_thread.part.14+0x28>
   14c5c:	681b      	ldr	r3, [r3, #0]
	if (program_time > 0) {
		*delta += _get_elapsed_program_time();
	}
	adjusted_timeout = *delta;
#endif
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   14c5e:	2b00      	cmp	r3, #0
   14c60:	d1e9      	bne.n	14c36 <schedule_new_thread.part.14+0x3e>
   14c62:	e7dd      	b.n	14c20 <schedule_new_thread.part.14+0x28>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   14c64:	2d00      	cmp	r5, #0
   14c66:	d100      	bne.n	14c6a <schedule_new_thread.part.14+0x72>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   14c68:	b662      	cpsie	i
	}
#else
	ARG_UNUSED(delay);
	start_thread(thread);
#endif
}
   14c6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14c6c:	20002114 	.word	0x20002114
   14c70:	20002120 	.word	0x20002120

00014c74 <k_is_in_isr>:
   14c74:	f3ef 8305 	mrs	r3, IPSR
   14c78:	2001      	movs	r0, #1
   14c7a:	2b0d      	cmp	r3, #13
   14c7c:	d802      	bhi.n	14c84 <k_is_in_isr+0x10>
   14c7e:	3b03      	subs	r3, #3
   14c80:	4258      	negs	r0, r3
   14c82:	4158      	adcs	r0, r3


int k_is_in_isr(void)
{
	return _is_in_isr();
}
   14c84:	4770      	bx	lr
	...

00014c88 <_is_thread_essential>:
 *
 * Returns non-zero if current thread is essential, zero if it is not.
 */
int _is_thread_essential(void)
{
	return _current->base.user_options & K_ESSENTIAL;
   14c88:	4b02      	ldr	r3, [pc, #8]	; (14c94 <_is_thread_essential+0xc>)
   14c8a:	689b      	ldr	r3, [r3, #8]
   14c8c:	7a18      	ldrb	r0, [r3, #8]
   14c8e:	2301      	movs	r3, #1
   14c90:	4018      	ands	r0, r3
}
   14c92:	4770      	bx	lr
   14c94:	20002114 	.word	0x20002114

00014c98 <_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void _thread_entry(void (*entry)(void *, void *, void *),
				 void *p1, void *p2, void *p3)
{
   14c98:	b510      	push	{r4, lr}
   14c9a:	0004      	movs	r4, r0
   14c9c:	0008      	movs	r0, r1
   14c9e:	0011      	movs	r1, r2
	entry(p1, p2, p3);
   14ca0:	001a      	movs	r2, r3
   14ca2:	47a0      	blx	r4

#ifdef CONFIG_STACK_SENTINEL
	_check_stack_sentinel();
#endif
#ifdef CONFIG_MULTITHREADING
	if (_is_thread_essential()) {
   14ca4:	f7ff fff0 	bl	14c88 <_is_thread_essential>
   14ca8:	2800      	cmp	r0, #0
   14caa:	d002      	beq.n	14cb2 <_thread_entry+0x1a>
		_k_except_reason(_NANO_ERR_INVALID_TASK_EXIT);
   14cac:	b662      	cpsie	i
   14cae:	2001      	movs	r0, #1
   14cb0:	df02      	svc	2
	}

	k_thread_abort(_current);
   14cb2:	4b02      	ldr	r3, [pc, #8]	; (14cbc <_thread_entry+0x24>)
   14cb4:	6898      	ldr	r0, [r3, #8]
   14cb6:	f7fe fed9 	bl	13a6c <k_thread_abort>
   14cba:	46c0      	nop			; (mov r8, r8)
   14cbc:	20002114 	.word	0x20002114

00014cc0 <k_thread_create>:

k_tid_t k_thread_create(struct k_thread *new_thread, char *stack,
			size_t stack_size, void (*entry)(void *, void *, void*),
			void *p1, void *p2, void *p3,
			int prio, u32_t options, s32_t delay)
{
   14cc0:	b510      	push	{r4, lr}
   14cc2:	0004      	movs	r4, r0
   14cc4:	b086      	sub	sp, #24
	__ASSERT(!_is_in_isr(), "Threads may not be created in ISRs");
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3, prio,
   14cc6:	980c      	ldr	r0, [sp, #48]	; 0x30
   14cc8:	9004      	str	r0, [sp, #16]
   14cca:	980b      	ldr	r0, [sp, #44]	; 0x2c
   14ccc:	9003      	str	r0, [sp, #12]
   14cce:	980a      	ldr	r0, [sp, #40]	; 0x28
   14cd0:	9002      	str	r0, [sp, #8]
   14cd2:	9809      	ldr	r0, [sp, #36]	; 0x24
   14cd4:	9001      	str	r0, [sp, #4]
   14cd6:	9808      	ldr	r0, [sp, #32]
   14cd8:	9000      	str	r0, [sp, #0]
   14cda:	0020      	movs	r0, r4
   14cdc:	f7fe fe26 	bl	1392c <_new_thread>

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, s32_t delay)
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (delay == 0) {
   14ce0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   14ce2:	2b00      	cmp	r3, #0
   14ce4:	d103      	bne.n	14cee <k_thread_create+0x2e>
		start_thread(thread);
   14ce6:	0020      	movs	r0, r4
   14ce8:	f7ff ff48 	bl	14b7c <start_thread>
   14cec:	e003      	b.n	14cf6 <k_thread_create+0x36>
   14cee:	990d      	ldr	r1, [sp, #52]	; 0x34
   14cf0:	0020      	movs	r0, r4
   14cf2:	f7ff ff81 	bl	14bf8 <schedule_new_thread.part.14>
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3, prio,
		    options);

	schedule_new_thread(new_thread, delay);
	return new_thread;
}
   14cf6:	0020      	movs	r0, r4
   14cf8:	b006      	add	sp, #24
   14cfa:	bd10      	pop	{r4, pc}

00014cfc <_k_thread_single_abort>:
	_reschedule_threads(key);
}

void _k_thread_single_abort(struct k_thread *thread)
{
	if (thread->fn_abort != NULL) {
   14cfc:	6d03      	ldr	r3, [r0, #80]	; 0x50

	_reschedule_threads(key);
}

void _k_thread_single_abort(struct k_thread *thread)
{
   14cfe:	b510      	push	{r4, lr}
   14d00:	0004      	movs	r4, r0
	if (thread->fn_abort != NULL) {
   14d02:	2b00      	cmp	r3, #0
   14d04:	d000      	beq.n	14d08 <_k_thread_single_abort+0xc>
		thread->fn_abort();
   14d06:	4798      	blx	r3
	}

	if (_is_thread_ready(thread)) {
   14d08:	0020      	movs	r0, r4
   14d0a:	f7ff ff2d 	bl	14b68 <_is_thread_ready>
   14d0e:	2800      	cmp	r0, #0
   14d10:	d003      	beq.n	14d1a <_k_thread_single_abort+0x1e>
		_remove_thread_from_ready_q(thread);
   14d12:	0020      	movs	r0, r4
   14d14:	f7ff fc42 	bl	1459c <_remove_thread_from_ready_q>
   14d18:	e012      	b.n	14d40 <_k_thread_single_abort+0x44>
	} else {
		if (_is_thread_pending(thread)) {
   14d1a:	2202      	movs	r2, #2
   14d1c:	7a63      	ldrb	r3, [r4, #9]
   14d1e:	4213      	tst	r3, r2
   14d20:	d007      	beq.n	14d32 <_k_thread_single_abort+0x36>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   14d22:	6863      	ldr	r3, [r4, #4]
   14d24:	6821      	ldr	r1, [r4, #0]
   14d26:	6019      	str	r1, [r3, #0]
	node->next->prev = node->prev;
   14d28:	6821      	ldr	r1, [r4, #0]
   14d2a:	604b      	str	r3, [r1, #4]
}

/* mark a thread as not pending in its TCS */
static inline void _mark_thread_as_not_pending(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PENDING;
   14d2c:	7a63      	ldrb	r3, [r4, #9]
   14d2e:	4393      	bics	r3, r2
   14d30:	7263      	strb	r3, [r4, #9]
			_unpend_thread(thread);
		}
		if (_is_thread_timeout_active(thread)) {
   14d32:	6a23      	ldr	r3, [r4, #32]
   14d34:	3301      	adds	r3, #1
   14d36:	d003      	beq.n	14d40 <_k_thread_single_abort+0x44>
}

/* returns _INACTIVE if the timer has already expired */
static inline int _abort_thread_timeout(struct k_thread *thread)
{
	return _abort_timeout(&thread->base.timeout);
   14d38:	0020      	movs	r0, r4
   14d3a:	3010      	adds	r0, #16
   14d3c:	f7ff ff44 	bl	14bc8 <_abort_timeout>
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_dead(struct k_thread *thread)
{
	thread->base.thread_state |= _THREAD_DEAD;
   14d40:	2208      	movs	r2, #8
   14d42:	7a63      	ldrb	r3, [r4, #9]
   14d44:	4313      	orrs	r3, r2
   14d46:	7263      	strb	r3, [r4, #9]
			_abort_thread_timeout(thread);
		}
	}
	_mark_thread_as_dead(thread);
}
   14d48:	bd10      	pop	{r4, pc}
	...

00014d4c <_init_static_threads>:

#ifdef CONFIG_MULTITHREADING
void _init_static_threads(void)
{
   14d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int  key;

	_FOREACH_STATIC_THREAD(thread_data) {
   14d4e:	4c1c      	ldr	r4, [pc, #112]	; (14dc0 <_init_static_threads+0x74>)
	_mark_thread_as_dead(thread);
}

#ifdef CONFIG_MULTITHREADING
void _init_static_threads(void)
{
   14d50:	b087      	sub	sp, #28
   14d52:	0025      	movs	r5, r4
	unsigned int  key;

	_FOREACH_STATIC_THREAD(thread_data) {
   14d54:	4e1b      	ldr	r6, [pc, #108]	; (14dc4 <_init_static_threads+0x78>)
   14d56:	42b4      	cmp	r4, r6
   14d58:	d213      	bcs.n	14d82 <_init_static_threads+0x36>
		_new_thread(
   14d5a:	6a23      	ldr	r3, [r4, #32]
   14d5c:	9304      	str	r3, [sp, #16]
   14d5e:	69e3      	ldr	r3, [r4, #28]
   14d60:	9303      	str	r3, [sp, #12]
   14d62:	69a3      	ldr	r3, [r4, #24]
   14d64:	9302      	str	r3, [sp, #8]
   14d66:	6963      	ldr	r3, [r4, #20]
   14d68:	9301      	str	r3, [sp, #4]
   14d6a:	6923      	ldr	r3, [r4, #16]
   14d6c:	9300      	str	r3, [sp, #0]
   14d6e:	68e3      	ldr	r3, [r4, #12]
   14d70:	68a2      	ldr	r2, [r4, #8]
   14d72:	6861      	ldr	r1, [r4, #4]
   14d74:	6820      	ldr	r0, [r4, #0]
   14d76:	f7fe fdd9 	bl	1392c <_new_thread>
			thread_data->init_p2,
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options);

		thread_data->init_thread->init_data = thread_data;
   14d7a:	6823      	ldr	r3, [r4, #0]
   14d7c:	64dc      	str	r4, [r3, #76]	; 0x4c
#ifdef CONFIG_MULTITHREADING
void _init_static_threads(void)
{
	unsigned int  key;

	_FOREACH_STATIC_THREAD(thread_data) {
   14d7e:	3430      	adds	r4, #48	; 0x30
   14d80:	e7e8      	b.n	14d54 <_init_static_threads+0x8>
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
   14d82:	4b11      	ldr	r3, [pc, #68]	; (14dc8 <_init_static_threads+0x7c>)
   14d84:	689a      	ldr	r2, [r3, #8]
   14d86:	7ad3      	ldrb	r3, [r2, #11]
   14d88:	3b01      	subs	r3, #1
   14d8a:	72d3      	strb	r3, [r2, #11]
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
   14d8c:	f3ef 8710 	mrs	r7, PRIMASK
   14d90:	b672      	cpsid	i
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	key = irq_lock();
	_FOREACH_STATIC_THREAD(thread_data) {
   14d92:	002c      	movs	r4, r5
   14d94:	42b4      	cmp	r4, r6
   14d96:	d20c      	bcs.n	14db2 <_init_static_threads+0x66>
		if (thread_data->init_delay != K_FOREVER) {
   14d98:	6a61      	ldr	r1, [r4, #36]	; 0x24
   14d9a:	1c4b      	adds	r3, r1, #1
   14d9c:	d007      	beq.n	14dae <_init_static_threads+0x62>
			schedule_new_thread(thread_data->init_thread,
   14d9e:	6820      	ldr	r0, [r4, #0]

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, s32_t delay)
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (delay == 0) {
   14da0:	2900      	cmp	r1, #0
   14da2:	d102      	bne.n	14daa <_init_static_threads+0x5e>
		start_thread(thread);
   14da4:	f7ff feea 	bl	14b7c <start_thread>
   14da8:	e001      	b.n	14dae <_init_static_threads+0x62>
   14daa:	f7ff ff25 	bl	14bf8 <schedule_new_thread.part.14>
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	key = irq_lock();
	_FOREACH_STATIC_THREAD(thread_data) {
   14dae:	3430      	adds	r4, #48	; 0x30
   14db0:	e7f0      	b.n	14d94 <_init_static_threads+0x48>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   14db2:	2f00      	cmp	r7, #0
   14db4:	d100      	bne.n	14db8 <_init_static_threads+0x6c>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   14db6:	b662      	cpsie	i
			schedule_new_thread(thread_data->init_thread,
					    thread_data->init_delay);
		}
	}
	irq_unlock(key);
	k_sched_unlock();
   14db8:	f7ff fc8c 	bl	146d4 <k_sched_unlock>
}
   14dbc:	b007      	add	sp, #28
   14dbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14dc0:	20000994 	.word	0x20000994
   14dc4:	20000994 	.word	0x20000994
   14dc8:	20002114 	.word	0x20002114

00014dcc <_init_thread_base>:
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
	thread_base->thread_state = (u8_t)initial_state;
   14dcc:	7242      	strb	r2, [r0, #9]
	/*
	 * Must be initialized here and when dequeueing a timeout so that code
	 * not dealing with timeouts does not have to handle this, such as when
	 * waiting forever on a semaphore.
	 */
	t->delta_ticks_from_prev = _INACTIVE;
   14dce:	2201      	movs	r2, #1
void _init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
   14dd0:	7203      	strb	r3, [r0, #8]
	thread_base->thread_state = (u8_t)initial_state;

	thread_base->prio = priority;

	thread_base->sched_locked = 0;
   14dd2:	2300      	movs	r3, #0
   14dd4:	4252      	negs	r2, r2
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
	thread_base->thread_state = (u8_t)initial_state;

	thread_base->prio = priority;
   14dd6:	7281      	strb	r1, [r0, #10]

	thread_base->sched_locked = 0;
   14dd8:	72c3      	strb	r3, [r0, #11]
   14dda:	6202      	str	r2, [r0, #32]

	/*
	 * Must be initialized here so that the _fiber_wakeup family of APIs can
	 * verify the fiber is not on a wait queue before aborting a timeout.
	 */
	t->wait_q = NULL;
   14ddc:	61c3      	str	r3, [r0, #28]

	/*
	 * Must be initialized here, so the _handle_one_timeout()
	 * routine can check if there is a fiber waiting on this timeout
	 */
	t->thread = NULL;
   14dde:	6183      	str	r3, [r0, #24]

	/*
	 * Function must be initialized before being potentially called.
	 */
	t->func = func;
   14de0:	6243      	str	r3, [r0, #36]	; 0x24

	/* swap_data does not need to be initialized */

	_init_thread_timeout(thread_base);
}
   14de2:	4770      	bx	lr

00014de4 <k_work_submit_to_queue>:
 *
 * @return N/A
 */
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
					  struct k_work *work)
{
   14de4:	b570      	push	{r4, r5, r6, lr}
   14de6:	0005      	movs	r5, r0
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   14de8:	0008      	movs	r0, r1
 *
 * @return N/A
 */
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
					  struct k_work *work)
{
   14dea:	000c      	movs	r4, r1
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   14dec:	3008      	adds	r0, #8
static inline int atomic_test_and_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
	atomic_val_t old;

	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   14dee:	2101      	movs	r1, #1
   14df0:	f7fe feb9 	bl	13b66 <atomic_or>
   14df4:	07c3      	lsls	r3, r0, #31
   14df6:	d403      	bmi.n	14e00 <k_work_submit_to_queue+0x1c>
		k_fifo_put(&work_q->fifo, work);
   14df8:	0021      	movs	r1, r4
   14dfa:	0028      	movs	r0, r5
   14dfc:	f7ff fb00 	bl	14400 <k_queue_append>
	}
}
   14e00:	bd70      	pop	{r4, r5, r6, pc}

00014e02 <work_timeout>:
{
	struct k_delayed_work *w = CONTAINER_OF(t, struct k_delayed_work,
						   timeout);

	/* submit work to workqueue */
	k_work_submit_to_queue(w->work_q, &w->work);
   14e02:	380c      	subs	r0, #12
			work_q, 0, 0, prio, 0, 0);
}

#ifdef CONFIG_SYS_CLOCK_EXISTS
static void work_timeout(struct _timeout *t)
{
   14e04:	b510      	push	{r4, lr}
	struct k_delayed_work *w = CONTAINER_OF(t, struct k_delayed_work,
						   timeout);

	/* submit work to workqueue */
	k_work_submit_to_queue(w->work_q, &w->work);
   14e06:	0001      	movs	r1, r0
   14e08:	0004      	movs	r4, r0
   14e0a:	6a40      	ldr	r0, [r0, #36]	; 0x24
   14e0c:	f7ff ffea 	bl	14de4 <k_work_submit_to_queue>
	/* detach from workqueue, for cancel to return appropriate status */
	w->work_q = NULL;
   14e10:	2300      	movs	r3, #0
   14e12:	6263      	str	r3, [r4, #36]	; 0x24
}
   14e14:	bd10      	pop	{r4, pc}

00014e16 <work_q_main>:
#include <kernel_structs.h>
#include <wait_q.h>
#include <errno.h>

static void work_q_main(void *work_q_ptr, void *p2, void *p3)
{
   14e16:	b570      	push	{r4, r5, r6, lr}
   14e18:	0005      	movs	r5, r0

	while (1) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_fifo_get(&work_q->fifo, K_FOREVER);
   14e1a:	2101      	movs	r1, #1
   14e1c:	0028      	movs	r0, r5
   14e1e:	4249      	negs	r1, r1
   14e20:	f7ff fb3e 	bl	144a0 <k_queue_get>
static inline int atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   14e24:	2102      	movs	r1, #2
   14e26:	0004      	movs	r4, r0

		handler = work->handler;
   14e28:	6846      	ldr	r6, [r0, #4]
   14e2a:	4249      	negs	r1, r1

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
   14e2c:	3008      	adds	r0, #8
   14e2e:	f7fe fea5 	bl	13b7c <atomic_and>
   14e32:	07c3      	lsls	r3, r0, #31
   14e34:	d501      	bpl.n	14e3a <work_q_main+0x24>
					       K_WORK_STATE_PENDING)) {
			handler(work);
   14e36:	0020      	movs	r0, r4
   14e38:	47b0      	blx	r6
		}

		/* Make sure we don't hog up the CPU if the FIFO never (or
		 * very rarely) gets empty.
		 */
		k_yield();
   14e3a:	f7ff fc7b 	bl	14734 <k_yield>
	}
   14e3e:	e7ec      	b.n	14e1a <work_q_main+0x4>

00014e40 <k_work_q_start>:
}

void k_work_q_start(struct k_work_q *work_q, char *stack,
		    size_t stack_size, int prio)
{
   14e40:	b5f0      	push	{r4, r5, r6, r7, lr}
   14e42:	0004      	movs	r4, r0
   14e44:	b087      	sub	sp, #28
   14e46:	001f      	movs	r7, r3
   14e48:	000d      	movs	r5, r1
   14e4a:	0016      	movs	r6, r2
	k_fifo_init(&work_q->fifo);
   14e4c:	f7ff fa8c 	bl	14368 <k_queue_init>

	k_thread_create(&work_q->thread, stack, stack_size, work_q_main,
   14e50:	2300      	movs	r3, #0
   14e52:	0020      	movs	r0, r4
   14e54:	9305      	str	r3, [sp, #20]
   14e56:	9304      	str	r3, [sp, #16]
   14e58:	9302      	str	r3, [sp, #8]
   14e5a:	9301      	str	r3, [sp, #4]
   14e5c:	9703      	str	r7, [sp, #12]
   14e5e:	9400      	str	r4, [sp, #0]
   14e60:	4b03      	ldr	r3, [pc, #12]	; (14e70 <k_work_q_start+0x30>)
   14e62:	0032      	movs	r2, r6
   14e64:	0029      	movs	r1, r5
   14e66:	3014      	adds	r0, #20
   14e68:	f7ff ff2a 	bl	14cc0 <k_thread_create>
			work_q, 0, 0, prio, 0, 0);
}
   14e6c:	b007      	add	sp, #28
   14e6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14e70:	00014e17 	.word	0x00014e17

00014e74 <k_delayed_work_init>:
	/* detach from workqueue, for cancel to return appropriate status */
	w->work_q = NULL;
}

void k_delayed_work_init(struct k_delayed_work *work, k_work_handler_t handler)
{
   14e74:	b570      	push	{r4, r5, r6, lr}
   14e76:	000d      	movs	r5, r1
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   14e78:	2102      	movs	r1, #2
   14e7a:	0004      	movs	r4, r0
   14e7c:	4249      	negs	r1, r1
 *
 * @return N/A
 */
static inline void k_work_init(struct k_work *work, k_work_handler_t handler)
{
	atomic_clear_bit(work->flags, K_WORK_STATE_PENDING);
   14e7e:	3008      	adds	r0, #8
   14e80:	f7fe fe7c 	bl	13b7c <atomic_and>
	/*
	 * Must be initialized here and when dequeueing a timeout so that code
	 * not dealing with timeouts does not have to handle this, such as when
	 * waiting forever on a semaphore.
	 */
	t->delta_ticks_from_prev = _INACTIVE;
   14e84:	2301      	movs	r3, #1
   14e86:	425b      	negs	r3, r3
   14e88:	61e3      	str	r3, [r4, #28]

	/*
	 * Must be initialized here so that the _fiber_wakeup family of APIs can
	 * verify the fiber is not on a wait queue before aborting a timeout.
	 */
	t->wait_q = NULL;
   14e8a:	2300      	movs	r3, #0
	t->thread = NULL;

	/*
	 * Function must be initialized before being potentially called.
	 */
	t->func = func;
   14e8c:	4a03      	ldr	r2, [pc, #12]	; (14e9c <k_delayed_work_init+0x28>)
	work->handler = handler;
   14e8e:	6065      	str	r5, [r4, #4]

	/*
	 * Must be initialized here so that the _fiber_wakeup family of APIs can
	 * verify the fiber is not on a wait queue before aborting a timeout.
	 */
	t->wait_q = NULL;
   14e90:	61a3      	str	r3, [r4, #24]

	/*
	 * Must be initialized here, so the _handle_one_timeout()
	 * routine can check if there is a fiber waiting on this timeout
	 */
	t->thread = NULL;
   14e92:	6163      	str	r3, [r4, #20]

	/*
	 * Function must be initialized before being potentially called.
	 */
	t->func = func;
   14e94:	6222      	str	r2, [r4, #32]
	k_work_init(&work->work, handler);
	_init_timeout(&work->timeout, work_timeout);
	work->work_q = NULL;
   14e96:	6263      	str	r3, [r4, #36]	; 0x24
}
   14e98:	bd70      	pop	{r4, r5, r6, pc}
   14e9a:	46c0      	nop			; (mov r8, r8)
   14e9c:	00014e03 	.word	0x00014e03

00014ea0 <k_delayed_work_cancel>:

	return err;
}

int k_delayed_work_cancel(struct k_delayed_work *work)
{
   14ea0:	b570      	push	{r4, r5, r6, lr}
   14ea2:	0004      	movs	r4, r0
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
   14ea4:	f3ef 8510 	mrs	r5, PRIMASK
   14ea8:	b672      	cpsid	i
 *
 * @return 1 if work item is pending, or 0 if it is not pending.
 */
static inline int k_work_pending(struct k_work *work)
{
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   14eaa:	3008      	adds	r0, #8
 *
 * @return 1 if the bit was set, 0 if it wasn't.
 */
static inline int atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   14eac:	f7fe fe4f 	bl	13b4e <atomic_get>

	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
   14eb0:	2301      	movs	r3, #1
   14eb2:	4018      	ands	r0, r3
	int key = irq_lock();

	if (k_work_pending(&work->work)) {
   14eb4:	d003      	beq.n	14ebe <k_delayed_work_cancel+0x1e>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   14eb6:	2d00      	cmp	r5, #0
   14eb8:	d123      	bne.n	14f02 <k_delayed_work_cancel+0x62>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   14eba:	b662      	cpsie	i
   14ebc:	e021      	b.n	14f02 <k_delayed_work_cancel+0x62>
		irq_unlock(key);
		return -EINPROGRESS;
	}

	if (!work->work_q) {
   14ebe:	6a63      	ldr	r3, [r4, #36]	; 0x24
   14ec0:	2b00      	cmp	r3, #0
   14ec2:	d103      	bne.n	14ecc <k_delayed_work_cancel+0x2c>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   14ec4:	2d00      	cmp	r5, #0
   14ec6:	d11e      	bne.n	14f06 <k_delayed_work_cancel+0x66>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   14ec8:	b662      	cpsie	i
   14eca:	e01c      	b.n	14f06 <k_delayed_work_cancel+0x66>
}

/* returns _INACTIVE if the timer is not active */
static inline int _abort_timeout(struct _timeout *timeout)
{
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   14ecc:	69e3      	ldr	r3, [r4, #28]
   14ece:	1c5a      	adds	r2, r3, #1
   14ed0:	d011      	beq.n	14ef6 <k_delayed_work_cancel+0x56>
   14ed2:	4a0e      	ldr	r2, [pc, #56]	; (14f0c <k_delayed_work_cancel+0x6c>)
		return _INACTIVE;
	}

	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   14ed4:	6911      	ldr	r1, [r2, #16]
   14ed6:	0022      	movs	r2, r4
   14ed8:	320c      	adds	r2, #12
   14eda:	4291      	cmp	r1, r2
   14edc:	d003      	beq.n	14ee6 <k_delayed_work_cancel+0x46>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   14ede:	68e2      	ldr	r2, [r4, #12]
		sys_dnode_t *next_node =
			sys_dlist_peek_next(&_timeout_q, &timeout->node);
		struct _timeout *next = (struct _timeout *)next_node;

		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   14ee0:	6911      	ldr	r1, [r2, #16]
   14ee2:	18cb      	adds	r3, r1, r3
   14ee4:	6113      	str	r3, [r2, #16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   14ee6:	6923      	ldr	r3, [r4, #16]
   14ee8:	68e2      	ldr	r2, [r4, #12]
   14eea:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   14eec:	68e2      	ldr	r2, [r4, #12]
   14eee:	6053      	str	r3, [r2, #4]
	}
	sys_dlist_remove(&timeout->node);
	timeout->delta_ticks_from_prev = _INACTIVE;
   14ef0:	2301      	movs	r3, #1
   14ef2:	425b      	negs	r3, r3
   14ef4:	61e3      	str	r3, [r4, #28]

	/* Abort timeout, if it has expired this will do nothing */
	_abort_timeout(&work->timeout);

	/* Detach from workqueue */
	work->work_q = NULL;
   14ef6:	2300      	movs	r3, #0
   14ef8:	6263      	str	r3, [r4, #36]	; 0x24
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   14efa:	429d      	cmp	r5, r3
   14efc:	d105      	bne.n	14f0a <k_delayed_work_cancel+0x6a>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   14efe:	b662      	cpsie	i
   14f00:	e003      	b.n	14f0a <k_delayed_work_cancel+0x6a>
{
	int key = irq_lock();

	if (k_work_pending(&work->work)) {
		irq_unlock(key);
		return -EINPROGRESS;
   14f02:	2044      	movs	r0, #68	; 0x44
   14f04:	e000      	b.n	14f08 <k_delayed_work_cancel+0x68>
	}

	if (!work->work_q) {
		irq_unlock(key);
		return -EINVAL;
   14f06:	2016      	movs	r0, #22
   14f08:	4240      	negs	r0, r0
	work->work_q = NULL;

	irq_unlock(key);

	return 0;
}
   14f0a:	bd70      	pop	{r4, r5, r6, pc}
   14f0c:	20002114 	.word	0x20002114

00014f10 <k_delayed_work_submit_to_queue>:
}

int k_delayed_work_submit_to_queue(struct k_work_q *work_q,
				   struct k_delayed_work *work,
				   s32_t delay)
{
   14f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14f12:	0007      	movs	r7, r0
   14f14:	000c      	movs	r4, r1
   14f16:	0016      	movs	r6, r2
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
   14f18:	f3ef 8510 	mrs	r5, PRIMASK
   14f1c:	b672      	cpsid	i
	int key = irq_lock();
	int err;

	/* Work cannot be active in multiple queues */
	if (work->work_q && work->work_q != work_q) {
   14f1e:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   14f20:	2b00      	cmp	r3, #0
   14f22:	d002      	beq.n	14f2a <k_delayed_work_submit_to_queue+0x1a>
   14f24:	4283      	cmp	r3, r0
   14f26:	d00b      	beq.n	14f40 <k_delayed_work_submit_to_queue+0x30>
   14f28:	e043      	b.n	14fb2 <k_delayed_work_submit_to_queue+0xa2>
		err = -EADDRINUSE;
		goto done;
	}

	/* Cancel if work has been submitted */
	if (work->work_q == work_q) {
   14f2a:	2800      	cmp	r0, #0
   14f2c:	d008      	beq.n	14f40 <k_delayed_work_submit_to_queue+0x30>
			goto done;
		}
	}

	/* Attach workqueue so the timeout callback can submit it */
	work->work_q = work_q;
   14f2e:	6267      	str	r7, [r4, #36]	; 0x24

	if (!delay) {
   14f30:	2e00      	cmp	r6, #0
   14f32:	d10b      	bne.n	14f4c <k_delayed_work_submit_to_queue+0x3c>
		/* Submit work if no ticks is 0 */
		k_work_submit_to_queue(work_q, &work->work);
   14f34:	0038      	movs	r0, r7
   14f36:	0021      	movs	r1, r4
   14f38:	f7ff ff54 	bl	14de4 <k_work_submit_to_queue>
		/* Add timeout */
		_add_timeout(NULL, &work->timeout, NULL,
				_TICK_ALIGN + _ms_to_ticks(delay));
	}

	err = 0;
   14f3c:	0030      	movs	r0, r6
   14f3e:	e03a      	b.n	14fb6 <k_delayed_work_submit_to_queue+0xa6>
		goto done;
	}

	/* Cancel if work has been submitted */
	if (work->work_q == work_q) {
		err = k_delayed_work_cancel(work);
   14f40:	0020      	movs	r0, r4
   14f42:	f7ff ffad 	bl	14ea0 <k_delayed_work_cancel>
		if (err < 0) {
   14f46:	2800      	cmp	r0, #0
   14f48:	daf1      	bge.n	14f2e <k_delayed_work_submit_to_queue+0x1e>
   14f4a:	e034      	b.n	14fb6 <k_delayed_work_submit_to_queue+0xa6>
				_wait_q_t *wait_q,
				s32_t timeout_in_ticks)
{
	__ASSERT(timeout_in_ticks > 0, "");

	timeout->delta_ticks_from_prev = timeout_in_ticks;
   14f4c:	0030      	movs	r0, r6
   14f4e:	210a      	movs	r1, #10
   14f50:	3009      	adds	r0, #9
   14f52:	f7eb f925 	bl	1a0 <__aeabi_uidiv>
	timeout->thread = thread;
   14f56:	2300      	movs	r3, #0
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   14f58:	4a19      	ldr	r2, [pc, #100]	; (14fc0 <k_delayed_work_submit_to_queue+0xb0>)
   14f5a:	6163      	str	r3, [r4, #20]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   14f5c:	61a3      	str	r3, [r4, #24]
   14f5e:	4e19      	ldr	r6, [pc, #100]	; (14fc4 <k_delayed_work_submit_to_queue+0xb4>)
   14f60:	68d3      	ldr	r3, [r2, #12]
				_wait_q_t *wait_q,
				s32_t timeout_in_ticks)
{
	__ASSERT(timeout_in_ticks > 0, "");

	timeout->delta_ticks_from_prev = timeout_in_ticks;
   14f62:	3001      	adds	r0, #1
   14f64:	61e0      	str	r0, [r4, #28]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14f66:	42b3      	cmp	r3, r6
   14f68:	d108      	bne.n	14f7c <k_delayed_work_submit_to_queue+0x6c>
		}

		*delta -= in_q->delta_ticks_from_prev;
	}

	sys_dlist_append(&_timeout_q, &timeout->node);
   14f6a:	0023      	movs	r3, r4
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
   14f6c:	60e6      	str	r6, [r4, #12]
	node->prev = list->tail;
   14f6e:	6911      	ldr	r1, [r2, #16]
   14f70:	330c      	adds	r3, #12
   14f72:	6121      	str	r1, [r4, #16]

	list->tail->next = node;
   14f74:	6911      	ldr	r1, [r2, #16]
   14f76:	600b      	str	r3, [r1, #0]
	list->tail = node;
   14f78:	6113      	str	r3, [r2, #16]
   14f7a:	e010      	b.n	14f9e <k_delayed_work_submit_to_queue+0x8e>
	if (program_time > 0) {
		*delta += _get_elapsed_program_time();
	}
	adjusted_timeout = *delta;
#endif
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   14f7c:	2b00      	cmp	r3, #0
   14f7e:	d0f4      	beq.n	14f6a <k_delayed_work_submit_to_queue+0x5a>
   14f80:	6917      	ldr	r7, [r2, #16]
		if (*delta <= in_q->delta_ticks_from_prev) {
   14f82:	69e1      	ldr	r1, [r4, #28]
   14f84:	6918      	ldr	r0, [r3, #16]
   14f86:	4281      	cmp	r1, r0
   14f88:	dc0b      	bgt.n	14fa2 <k_delayed_work_submit_to_queue+0x92>
			in_q->delta_ticks_from_prev -= *delta;
			sys_dlist_insert_before(&_timeout_q, &in_q->node,
   14f8a:	0022      	movs	r2, r4
	}
	adjusted_timeout = *delta;
#endif
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
		if (*delta <= in_q->delta_ticks_from_prev) {
			in_q->delta_ticks_from_prev -= *delta;
   14f8c:	1a41      	subs	r1, r0, r1
   14f8e:	6119      	str	r1, [r3, #16]
	sys_dnode_t *insert_point, sys_dnode_t *node)
{
	if (!insert_point) {
		sys_dlist_append(list, node);
	} else {
		node->prev = insert_point->prev;
   14f90:	6859      	ldr	r1, [r3, #4]
		node->next = insert_point;
   14f92:	60e3      	str	r3, [r4, #12]
	sys_dnode_t *insert_point, sys_dnode_t *node)
{
	if (!insert_point) {
		sys_dlist_append(list, node);
	} else {
		node->prev = insert_point->prev;
   14f94:	6121      	str	r1, [r4, #16]
		node->next = insert_point;
		insert_point->prev->next = node;
   14f96:	6859      	ldr	r1, [r3, #4]
			sys_dlist_insert_before(&_timeout_q, &in_q->node,
   14f98:	320c      	adds	r2, #12
   14f9a:	600a      	str	r2, [r1, #0]
		insert_point->prev = node;
   14f9c:	605a      	str	r2, [r3, #4]
		/* Add timeout */
		_add_timeout(NULL, &work->timeout, NULL,
				_TICK_ALIGN + _ms_to_ticks(delay));
	}

	err = 0;
   14f9e:	2000      	movs	r0, #0
   14fa0:	e009      	b.n	14fb6 <k_delayed_work_submit_to_queue+0xa6>
						&timeout->node);
			goto inserted;
		}

		*delta -= in_q->delta_ticks_from_prev;
   14fa2:	1a09      	subs	r1, r1, r0
   14fa4:	61e1      	str	r1, [r4, #28]
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   14fa6:	42bb      	cmp	r3, r7
   14fa8:	d0df      	beq.n	14f6a <k_delayed_work_submit_to_queue+0x5a>
   14faa:	681b      	ldr	r3, [r3, #0]
	if (program_time > 0) {
		*delta += _get_elapsed_program_time();
	}
	adjusted_timeout = *delta;
#endif
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   14fac:	2b00      	cmp	r3, #0
   14fae:	d1e8      	bne.n	14f82 <k_delayed_work_submit_to_queue+0x72>
   14fb0:	e7db      	b.n	14f6a <k_delayed_work_submit_to_queue+0x5a>
	int key = irq_lock();
	int err;

	/* Work cannot be active in multiple queues */
	if (work->work_q && work->work_q != work_q) {
		err = -EADDRINUSE;
   14fb2:	2030      	movs	r0, #48	; 0x30
   14fb4:	4240      	negs	r0, r0
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   14fb6:	2d00      	cmp	r5, #0
   14fb8:	d100      	bne.n	14fbc <k_delayed_work_submit_to_queue+0xac>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   14fba:	b662      	cpsie	i

done:
	irq_unlock(key);

	return err;
}
   14fbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14fbe:	46c0      	nop			; (mov r8, r8)
   14fc0:	20002114 	.word	0x20002114
   14fc4:	20002120 	.word	0x20002120

00014fc8 <_OffsetAbsSyms>:
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
#endif

GEN_ABS_SYM_END
   14fc8:	4770      	bx	lr
